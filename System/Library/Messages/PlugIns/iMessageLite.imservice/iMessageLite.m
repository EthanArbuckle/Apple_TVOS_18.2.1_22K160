}

void sub_4DA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_4F1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

id _IMIDSForceSetDelegate(void *a1, const char *a2)
{
  return [a1 setDelegate:a2];
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

Class __getIDSOffGridDeliveryHandlesDonationOptionsClass_block_invoke(uint64_t a1)
{
  Class result = objc_getClass("IDSOffGridDeliveryHandlesDonationOptions");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL)) {
    __getIDSOffGridDeliveryHandlesDonationOptionsClass_block_invoke_cold_1();
  }
  getIDSOffGridDeliveryHandlesDonationOptionsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  return result;
}

void IDSLibrary()
{
  v0 = 0LL;
  if (!IDSLibraryCore_frameworkLibrary)
  {
    __int128 v1 = off_49100;
    uint64_t v2 = 0LL;
    IDSLibraryCore_frameworkLibrary = _sl_dlopen(&v1, &v0);
  }

  if (!IDSLibraryCore_frameworkLibrary) {
    IDSLibrary_cold_1(&v0);
  }
  if (v0) {
    free(v0);
  }
}

Class __getIDSOffGridServiceUpdateMessageClass_block_invoke(uint64_t a1)
{
  Class result = objc_getClass("IDSOffGridServiceUpdateMessage");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL)) {
    __getIDSOffGridServiceUpdateMessageClass_block_invoke_cold_1();
  }
  getIDSOffGridServiceUpdateMessageClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  return result;
}

unint64_t LiteMessageReceiveError.errorDescription.getter(uint64_t a1, unint64_t a2, char a3)
{
  if (!a3)
  {
    _StringGuts.grow(_:)(34LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    unint64_t v16 = 0xD00000000000001FLL;
    v13._countAndFlagsBits = a1;
    v13._object = (void *)a2;
    String.append(_:)(v13);
    uint64_t v11 = 46LL;
    unint64_t v12 = 0xE100000000000000LL;
    goto LABEL_5;
  }

  if (a3 == 1)
  {
    unint64_t v16 = 0LL;
    _StringGuts.grow(_:)(58LL);
    v5._object = (void *)0x800000000003CF00LL;
    v5._countAndFlagsBits = 0xD000000000000014LL;
    String.append(_:)(v5);
    v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    object = v6._object;
    String.append(_:)(v6);
    swift_bridgeObjectRelease(object);
    v8._countAndFlagsBits = 0xD000000000000020LL;
    v8._object = (void *)0x800000000003CF20LL;
    String.append(_:)(v8);
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    v10 = v9._object;
    String.append(_:)(v9);
    swift_bridgeObjectRelease(v10);
    uint64_t v11 = 11817LL;
    unint64_t v12 = 0xE200000000000000LL;
LABEL_5:
    String.append(_:)(*(Swift::String *)&v11);
    return v16;
  }

  unint64_t v15 = 0xD000000000000031LL;
  if (!(a1 ^ 1 | a2)) {
    unint64_t v15 = 0xD00000000000002ELL;
  }
  if (a1 | a2) {
    return v15;
  }
  else {
    return 0xD000000000000040LL;
  }
}

unint64_t lazy protocol witness table accessor for type LiteMessageReceiveError and conformance LiteMessageReceiveError()
{
  unint64_t result = lazy protocol witness table cache variable for type LiteMessageReceiveError and conformance LiteMessageReceiveError;
  if (!lazy protocol witness table cache variable for type LiteMessageReceiveError and conformance LiteMessageReceiveError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LiteMessageReceiveError,  &type metadata for LiteMessageReceiveError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LiteMessageReceiveError and conformance LiteMessageReceiveError);
  }

  return result;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance LiteMessageReceiveError()
{
  return LiteMessageReceiveError.errorDescription.getter(*(void *)v0, *(void *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t outlined copy of LiteMessageReceiveError(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t destroy for LiteMessageReceiveError(uint64_t a1)
{
  return outlined consume of LiteMessageReceiveError(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of LiteMessageReceiveError(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for LiteMessageReceiveError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of LiteMessageReceiveError(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for LiteMessageReceiveError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of LiteMessageReceiveError(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of LiteMessageReceiveError(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for LiteMessageReceiveError(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of LiteMessageReceiveError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for LiteMessageReceiveError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LiteMessageReceiveError( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for LiteMessageReceiveError(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for LiteMessageReceiveError(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    LOBYTE(a2) = 2;
  }

  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for LiteMessageReceiveError()
{
  return &type metadata for LiteMessageReceiveError;
}

void IMDChat.participantURI.getter()
{
  id v1 = [v0 participants];
  if (!v1) {
    return;
  }
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IMDHandle,  &OBJC_CLASS___IMDHandle_ptr);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if ((unint64_t)v4 >> 62)
  {
    uint64_t v16 = v4 < 0 ? v4 : v4 & 0xFFFFFFFFFFFFFF8LL;
    swift_bridgeObjectRetain(v4);
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(v4);
  }

  else
  {
    uint64_t v5 = *(void *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFF8LL));
  }

  swift_bridgeObjectRelease(v4);
  if (v5 != 1) {
    return;
  }
  id v6 = [v0 participants];
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v3);

  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0) {
      uint64_t v17 = v8;
    }
    else {
      uint64_t v17 = v8 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v8);
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease(v8);
    if (v18) {
      goto LABEL_9;
    }
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return;
  }

LABEL_9:
  if ((v8 & 0xC000000000000001LL) != 0)
  {
    id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v8);
  }

  else
  {
    if (!*(void *)((char *)&dword_10 + (v8 & 0xFFFFFFFFFFFFF8LL)))
    {
      __break(1u);
      return;
    }

    id v9 = *(id *)(v8 + 32);
  }

  v10 = v9;
  swift_bridgeObjectRelease(v8);
  id v11 = [v10 ID];

  if (v11)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v13 = v12;

    id v14 = objc_allocWithZone(&OBJC_CLASS___IDSURI);
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v13);
    [v14 initWithUnprefixedURI:v15];
  }

uint64_t IMDChat.bestSendingHandle.getter()
{
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v172 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  v10 = (char *)&v172 - v9;
  id v11 = [v3 participants];
  if (!v11) {
    goto LABEL_29;
  }
  uint64_t v12 = v11;
  uint64_t v13 = type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IMDHandle,  &OBJC_CLASS___IMDHandle_ptr);
  uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);

  if (!((unint64_t)v14 >> 62))
  {
    Class isa = *(Class *)((char *)&dword_10 + (v14 & 0xFFFFFFFFFFFFF8LL));
    if (isa) {
      goto LABEL_4;
    }
LABEL_28:
    swift_bridgeObjectRelease((LiteMessageServiceSession *)v14, v15, v16, v17, v18, v19, v20, v21);
    goto LABEL_29;
  }

  if (v14 < 0) {
    uint64_t v91 = v14;
  }
  else {
    uint64_t v91 = v14 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v14);
  Class isa = (Class)_CocoaArrayWrapper.endIndex.getter(v91);
  swift_bridgeObjectRelease((LiteMessageServiceSession *)v14, v92, v93, v94, v95, v96, v97, v98);
  if (!isa) {
    goto LABEL_28;
  }
LABEL_4:
  if ((v14 & 0xC000000000000001LL) != 0)
  {
    v23 = (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v14);
  }

  else
  {
    if (!*(void *)((char *)&dword_10 + (v14 & 0xFFFFFFFFFFFFF8LL)))
    {
      __break(1u);
LABEL_33:
      swift_bridgeObjectRetain(v2);
      uint64_t v50 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v101);
      swift_bridgeObjectRelease((LiteMessageServiceSession *)v2, v102, v103, v104, v105, v106, v107, v108);
      goto LABEL_12;
    }

    v23 = (objc_class *)*(id *)(v14 + 32);
  }

  Class isa = v23;
  swift_bridgeObjectRelease((LiteMessageServiceSession *)v14, v24, v25, v26, v27, v28, v29, v30);
  id v31 = -[objc_class ID](isa, "ID");

  if (!v31)
  {
LABEL_29:
    id v99 = [v3 lastAddressedLocalHandle];
    if (!v99) {
      return 0LL;
    }
LABEL_30:
    v100 = v99;
    uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v99);

    return v69;
  }

  uint64_t v174 = v5;
  uint64_t v175 = v4;
  uint64_t v173 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  v176 = v32;

  unint64_t v33 = (unint64_t)[(id)objc_opt_self(IMDChatRegistry) sharedInstance];
  id v34 = [v3 chatIdentifier];
  if (!v34)
  {
LABEL_50:
    __break(1u);
LABEL_51:

    swift_bridgeObjectRelease((LiteMessageServiceSession *)v33, v158, v159, v160, v161, v162, v163, v164);
    __break(1u);
    goto LABEL_52;
  }

  v35 = v34;
  id v36 = [v3 style];
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject(v1, v180);
  __int128 v172 = xmmword_3BA00;
  *(_OWORD *)(inited + 16) = xmmword_3BA00;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(IMServiceNameiMessage);
  *(void *)(inited + 40) = v38;
  *(void *)(inited + 4_Block_object_dispose(va, 8) = static String._unconditionallyBridgeFromObjectiveC(_:)(IMServiceNameiMessageLite);
  *(void *)(inited + 56) = v39;
  v40 = (LiteMessageServiceSession *)specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 2LL, &type metadata for String);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v40, v41, v42, v43, v44, v45, v46, v47);
  id v48 = [(id)v33 allChatsWithIdentifier:v35 style:v36 serviceNames:isa];

  uint64_t v49 = type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IMDChat,  &OBJC_CLASS___IMDChat_ptr);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v48, v49);

  if ((v2 & 0x8000000000000000LL) != 0 || (v2 & 0x4000000000000000LL) != 0) {
    goto LABEL_33;
  }
  uint64_t v50 = v2 & 0xFFFFFFFFFFFFFF8LL;
  swift_bridgeObjectRetain(v2);
LABEL_12:
  unint64_t v179 = v50;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v179);
  swift_bridgeObjectRelease((LiteMessageServiceSession *)v2, v51, v52, v53, v54, v55, v56, v57);
  unint64_t v33 = v179;
  if ((v179 & 0x8000000000000000LL) == 0 && (v179 & 0x4000000000000000LL) == 0)
  {
    if (*(void *)(v179 + 16)) {
      goto LABEL_15;
    }
LABEL_35:
    swift_release(v33);
    goto LABEL_36;
  }

  swift_bridgeObjectRetain(v179);
  uint64_t v110 = _CocoaArrayWrapper.endIndex.getter(v109);
  swift_release(v33);
  if (!v110) {
    goto LABEL_35;
  }
LABEL_15:
  if ((v33 & 0xC000000000000001LL) != 0)
  {
    id v58 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v33);
    goto LABEL_18;
  }

  if (!*(void *)(v33 + 16))
  {
    __break(1u);
    goto LABEL_50;
  }

  id v58 = *(id *)(v33 + 32);
LABEL_18:
  v59 = v58;
  swift_release(v33);
  id v60 = [v59 lastAddressedLocalHandle];
  if (v60)
  {
    v68 = v60;
    swift_bridgeObjectRelease(v176, v61, v62, v63, v64, v65, v66, v67);
    uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
    unint64_t v33 = v70;

    uint64_t v71 = Logger.liteSession.unsafeMutableAddressor();
    uint64_t v73 = v174;
    uint64_t v72 = v175;
    (*(void (**)(char *, uint64_t, uint64_t))(v174 + 16))(v10, v71, v175);
    id v74 = v59;
    swift_bridgeObjectRetain_n(v33, 2LL);
    Class isa = (Class)v74;
    v75 = (void *)Logger.logObject.getter(isa);
    int v76 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled((os_log_t)v75, (os_log_type_t)v76))
    {

      swift_bridgeObjectRelease_n(v33, 2LL);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v10, v72);
      return v69;
    }

    LODWORD(v176) = v76;
    uint64_t v77 = swift_slowAlloc(22LL, -1LL);
    uint64_t v173 = swift_slowAlloc(64LL, -1LL);
    unint64_t v179 = v173;
    *(_DWORD *)uint64_t v77 = 136315394;
    id v78 = -[objc_class guid](isa, "guid");
    if (v78)
    {
      v79 = v78;
      uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v78);
      v82 = v81;

      uint64_t v177 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, (unint64_t)v82, (uint64_t *)&v179);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, &v178, v77 + 4, v77 + 12);

      swift_bridgeObjectRelease(v82, v83, v84, v85, v86, v87, v88, v89);
      *(_WORD *)(v77 + 12) = 2080;
      swift_bridgeObjectRetain(v33);
      uint64_t v177 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v33, (uint64_t *)&v179);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, &v178, v77 + 14, v77 + 22);
      swift_bridgeObjectRelease_n(v33, 3LL);
      _os_log_impl( &dword_0,  (os_log_t)v75,  (os_log_type_t)v176,  "Best sending handle selected from chat %s as %s",  (uint8_t *)v77,  0x16u);
      uint64_t v90 = v173;
      swift_arrayDestroy(v173, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v90, -1LL, -1LL);
      swift_slowDealloc(v77, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v174 + 8))(v10, v175);
      return v69;
    }

    goto LABEL_51;
  }

LABEL_36:
  id v111 = [(id)objc_opt_self(IMDMessageStore) sharedInstance];
  uint64_t v112 = swift_allocObject(v1, 48LL, 7LL);
  *(_OWORD *)(v112 + 16) = xmmword_3BA10;
  v113 = v176;
  *(void *)(v112 + 32) = v173;
  *(void *)(v112 + 40) = v113;
  Class v114 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((LiteMessageServiceSession *)v112, v115, v116, v117, v118, v119, v120, v121);
  uint64_t v122 = swift_allocObject(v1, 64LL, 7LL);
  *(_OWORD *)(v122 + 16) = v172;
  *(void *)(v122 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(IMServiceNameiMessage);
  *(void *)(v122 + 40) = v123;
  *(void *)(v122 + 4_Block_object_dispose(va, 8) = static String._unconditionallyBridgeFromObjectiveC(_:)(IMServiceNameiMessageLite);
  *(void *)(v122 + 56) = v124;
  Class v125 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((LiteMessageServiceSession *)v122, v126, v127, v128, v129, v130, v131, v132);
  id v133 = [v111 lastMessageWithHandles:v114 onServices:v125];

  if (!v133) {
    goto LABEL_43;
  }
  id v134 = [v133 destinationCallerID];
  if (!v134)
  {

LABEL_43:
    id v99 = [v3 lastAddressedLocalHandle];
    if (!v99) {
      return 0LL;
    }
    goto LABEL_30;
  }

  v135 = v134;
  uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v134);
  unint64_t v33 = v136;

  uint64_t v137 = Logger.liteSession.unsafeMutableAddressor();
  uint64_t v139 = v174;
  uint64_t v138 = v175;
  (*(void (**)(char *, uint64_t, uint64_t))(v174 + 16))(v8, v137, v175);
  id v140 = v133;
  swift_bridgeObjectRetain_n(v33, 2LL);
  v10 = (char *)v140;
  v141 = (void *)Logger.logObject.getter(v10);
  int v142 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled((os_log_t)v141, (os_log_type_t)v142))
  {

    swift_bridgeObjectRelease_n(v33, 2LL);
    (*(void (**)(char *, uint64_t))(v139 + 8))(v8, v138);
    return v69;
  }

  LODWORD(v176) = v142;
  uint64_t v143 = swift_slowAlloc(22LL, -1LL);
  uint64_t v173 = swift_slowAlloc(64LL, -1LL);
  unint64_t v179 = v173;
  *(_DWORD *)uint64_t v143 = 136315394;
  id v144 = [v10 guid];
  if (v144)
  {
    v145 = v144;
    uint64_t v146 = static String._unconditionallyBridgeFromObjectiveC(_:)(v144);
    v148 = v147;

    uint64_t v177 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v146, (unint64_t)v148, (uint64_t *)&v179);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, &v178, v143 + 4, v143 + 12);

    swift_bridgeObjectRelease(v148, v149, v150, v151, v152, v153, v154, v155);
    *(_WORD *)(v143 + 12) = 2080;
    swift_bridgeObjectRetain(v33);
    uint64_t v177 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v33, (uint64_t *)&v179);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, &v178, v143 + 14, v143 + 22);
    swift_bridgeObjectRelease_n(v33, 3LL);
    _os_log_impl( &dword_0,  (os_log_t)v141,  (os_log_type_t)v176,  "Best sending handle selected from most recent message %s as %s",  (uint8_t *)v143,  0x16u);
    uint64_t v156 = v173;
    swift_arrayDestroy(v173, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v156, -1LL, -1LL);
    swift_slowDealloc(v143, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v174 + 8))(v8, v175);
    return v69;
  }

LABEL_52:
  swift_bridgeObjectRelease((LiteMessageServiceSession *)v33, v165, v166, v167, v168, v169, v170, v171);
  __break(1u);
  uint64_t result = swift_release(v179);
  __break(1u);
  return result;
}

  if (v2 < 0) {
    id v55 = v2;
  }
  else {
    id v55 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain_n(v2, 2LL);
  v37 = _CocoaArrayWrapper.endIndex.getter(v55);
  swift_bridgeObjectRelease(v2);
LABEL_34:
  *(void *)(v1 + 304) = v37;
  uint64_t v38 = type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IDSURI,  &OBJC_CLASS___IDSURI_ptr);
  uint64_t v39 = lazy protocol witness table accessor for type IDSURI and conformance NSObject();
  uint64_t result = Set.init(minimumCapacity:)(v37, v38, v39);
  *(void *)(v1 + 144) = result;
  if (v0)
  {
    if (v2 < 0) {
      id v43 = v2;
    }
    else {
      id v43 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
    SEL v41 = _CocoaArrayWrapper.endIndex.getter(v43);
    uint64_t result = swift_bridgeObjectRelease(v2);
    if (!v41) {
      goto LABEL_49;
    }
  }

  else
  {
    SEL v41 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL));
    if (!v41)
    {
LABEL_49:
      swift_bridgeObjectRelease(v2);
      id v48 = v1 + 16;
      uint64_t v49 = *(unsigned __int8 *)(v1 + 329);
      uint64_t v50 = *(void *)(v1 + 176);
      SEL v51 = *(void *)(v1 + 144);
      Class isa = Set._bridgeToObjectiveC()().super.isa;
      *(void *)(v1 + 312) = isa;
      swift_bridgeObjectRelease(v51);
      *(void *)(v1 + 56) = v1 + 328;
      *(void *)(v1 + 16) = v1;
      *(void *)(v1 + 24) = LiteMessageServiceSession.donateHandleMap(_:priority:isInitial:);
      id v53 = swift_continuation_init(v1 + 16, 1LL);
      *(void *)(v1 + 80) = _NSConcreteStackBlock;
      unsigned __int8 v54 = (void *)(v1 + 80);
      v54[1] = 0x40000000LL;
      v54[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type Bool;
      v54[3] = &block_descriptor_12;
      v54[4] = v53;
      objc_msgSend( (id)v8,  "__im_donateHandlesForMessagingKeys:fromURI:priority:isInitial:completion:",  isa,  v3,  v50,  v49,  v54);
      return swift_continuation_await(v48);
    }
  }

  if (v41 >= 1)
  {
    if ((v2 & 0xC000000000000001LL) != 0)
    {
      for (i = 0LL; i != v41; ++i)
      {
        id v45 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v2);
        specialized Set._Variant.insert(_:)((Swift::Int *)&v59, v45);
      }
    }

    else
    {
      for (j = 0LL; j != v41; ++j)
      {
        id v47 = *(void **)(v2 + 8 * j + 32);
        specialized Set._Variant.insert(_:)((Swift::Int *)&v59, v47);
      }
    }

    goto LABEL_49;
  }

  __break(1u);
  return result;
}

  if (v2 < 0) {
    unsigned __int8 v64 = v2;
  }
  else {
    unsigned __int8 v64 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain_n(v2, 2LL);
  id v46 = _CocoaArrayWrapper.endIndex.getter(v64);
  swift_bridgeObjectRelease(v2);
LABEL_34:
  *(void *)(v0 + 304) = v46;
  id v47 = type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IDSURI,  &OBJC_CLASS___IDSURI_ptr);
  id v48 = lazy protocol witness table accessor for type IDSURI and conformance NSObject();
  uint64_t result = Set.init(minimumCapacity:)(v46, v47, v48);
  *(void *)(v0 + 144) = result;
  if (v13)
  {
    if (v2 < 0) {
      id v52 = v2;
    }
    else {
      id v52 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
    uint64_t v50 = _CocoaArrayWrapper.endIndex.getter(v52);
    uint64_t result = swift_bridgeObjectRelease(v2);
    if (!v50) {
      goto LABEL_49;
    }
  }

  else
  {
    uint64_t v50 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL));
    if (!v50)
    {
LABEL_49:
      swift_bridgeObjectRelease(v2);
      id v57 = v0 + 16;
      id v58 = *(unsigned __int8 *)(v0 + 329);
      v59 = *(void *)(v0 + 176);
      id v60 = *(void *)(v0 + 144);
      Class isa = Set._bridgeToObjectiveC()().super.isa;
      *(void *)(v0 + 312) = isa;
      swift_bridgeObjectRelease(v60);
      *(void *)(v0 + 56) = v0 + 328;
      *(void *)(v0 + 16) = v0;
      *(void *)(v0 + 24) = LiteMessageServiceSession.donateHandleMap(_:priority:isInitial:);
      v62 = swift_continuation_init(v0 + 16, 1LL);
      *(void *)(v0 + 80) = _NSConcreteStackBlock;
      v63 = (void *)(v0 + 80);
      v63[1] = 0x40000000LL;
      v63[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type Bool;
      v63[3] = &block_descriptor_12;
      v63[4] = v62;
      objc_msgSend( (id)v17,  "__im_donateHandlesForMessagingKeys:fromURI:priority:isInitial:completion:",  isa,  v1,  v59,  v58,  v63);
      return swift_continuation_await(v57);
    }
  }

  if (v50 >= 1)
  {
    if ((v2 & 0xC000000000000001LL) != 0)
    {
      for (i = 0LL; i != v50; ++i)
      {
        unsigned __int8 v54 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v2);
        specialized Set._Variant.insert(_:)((Swift::Int *)&v68, v54);
      }
    }

    else
    {
      for (j = 0LL; j != v50; ++j)
      {
        id v56 = *(void **)(v2 + 8 * j + 32);
        specialized Set._Variant.insert(_:)((Swift::Int *)&v68, v56);
      }
    }

    goto LABEL_49;
  }

  __break(1u);
  return result;
}

  if (v7 < 0) {
    uint64_t v69 = v7;
  }
  else {
    uint64_t v69 = v7 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain_n(v7, 2LL);
  SEL v51 = _CocoaArrayWrapper.endIndex.getter(v69);
  swift_bridgeObjectRelease(v7);
LABEL_34:
  *(void *)(v1 + 304) = v51;
  id v52 = type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IDSURI,  &OBJC_CLASS___IDSURI_ptr);
  id v53 = lazy protocol witness table accessor for type IDSURI and conformance NSObject();
  uint64_t result = Set.init(minimumCapacity:)(v51, v52, v53);
  *(void *)(v1 + 144) = result;
  if (v13)
  {
    if (v7 < 0) {
      id v57 = v7;
    }
    else {
      id v57 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v7);
    id v55 = _CocoaArrayWrapper.endIndex.getter(v57);
    uint64_t result = swift_bridgeObjectRelease(v7);
    if (!v55) {
      goto LABEL_49;
    }
  }

  else
  {
    id v55 = *(void *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8LL));
    if (!v55)
    {
LABEL_49:
      swift_bridgeObjectRelease(v7);
      v62 = v1 + 16;
      v63 = *(unsigned __int8 *)(v1 + 329);
      unsigned __int8 v64 = *(void *)(v1 + 176);
      v65 = *(void *)(v1 + 144);
      Class isa = Set._bridgeToObjectiveC()().super.isa;
      *(void *)(v1 + 312) = isa;
      swift_bridgeObjectRelease(v65);
      *(void *)(v1 + 56) = v1 + 328;
      *(void *)(v1 + 16) = v1;
      *(void *)(v1 + 24) = LiteMessageServiceSession.donateHandleMap(_:priority:isInitial:);
      v67 = swift_continuation_init(v1 + 16, 1LL);
      *(void *)(v1 + 80) = _NSConcreteStackBlock;
      v68 = (void *)(v1 + 80);
      v68[1] = 0x40000000LL;
      v68[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type Bool;
      v68[3] = &block_descriptor_12;
      v68[4] = v67;
      objc_msgSend( (id)v23,  "__im_donateHandlesForMessagingKeys:fromURI:priority:isInitial:completion:",  isa,  v2,  v64,  v63,  v68);
      return swift_continuation_await(v62);
    }
  }

  if (v55 >= 1)
  {
    if ((v7 & 0xC000000000000001LL) != 0)
    {
      for (i = 0LL; i != v55; ++i)
      {
        v59 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v7);
        specialized Set._Variant.insert(_:)((Swift::Int *)v75, v59);
      }
    }

    else
    {
      for (j = 0LL; j != v55; ++j)
      {
        v61 = *(void **)(v7 + 8 * j + 32);
        specialized Set._Variant.insert(_:)((Swift::Int *)v75, v61);
      }
    }

    goto LABEL_49;
  }

  __break(1u);
  return result;
}

Swift::Void __swiftcall IMDChat.updateLastAddressedHandleWithMatchingSIM(to:)(Swift::String to)
{
  unint64_t v2 = v1;
  object = to._object;
  uint64_t countAndFlagsBits = to._countAndFlagsBits;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  NSString v9 = String._bridgeToObjectiveC()();
  [v2 updateLastAddressedHandle:v9 forceUpdate:0];

  uint64_t v10 = Logger.liteSession.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v10, v5);
  id v11 = v2;
  swift_bridgeObjectRetain_n(object, 2LL);
  id v12 = v11;
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  int v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, (os_log_type_t)v14))
  {
    int v30 = v14;
    uint64_t v31 = v6;
    uint64_t v28 = v5;
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    uint64_t v29 = swift_slowAlloc(96LL, -1LL);
    uint64_t v33 = v29;
    *(_DWORD *)uint64_t v15 = 136315650;
    id v16 = [v12 guid];
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      unint64_t v20 = v19;

      uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v15 + 4, v15 + 12);

      swift_bridgeObjectRelease(v20);
      *(_WORD *)(v15 + 12) = 2080;
      swift_bridgeObjectRetain(object);
      uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( countAndFlagsBits,  (unint64_t)object,  &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v15 + 14, v15 + 22);
      swift_bridgeObjectRelease_n(object, 3LL);
      *(_WORD *)(v15 + 22) = 2080;
      id v21 = [v12 lastAddressedSIMID];
      if (v21)
      {
        v22 = v21;
        uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
        unint64_t v25 = v24;
      }

      else
      {
        unint64_t v25 = 0xE300000000000000LL;
        uint64_t v23 = 7104878LL;
      }

      uint64_t v26 = v28;
      uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v15 + 24, v15 + 32);

      swift_bridgeObjectRelease(v25);
      _os_log_impl( &dword_0,  v13,  (os_log_type_t)v30,  "Updated chat %s last addressed handle to %s, SIM ID to %s",  (uint8_t *)v15,  0x20u);
      uint64_t v27 = v29;
      swift_arrayDestroy(v29, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_slowDealloc(v15, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v26);
    }

    else
    {
      swift_bridgeObjectRelease(object);

      __break(1u);
    }
  }

  else
  {

    swift_bridgeObjectRelease_n(object, 2LL);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  __swift_destroy_boxed_opaque_existential_0(v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)( uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
            uint64_t result = 0LL;
            *a1 = (uint64_t)__dst;
            return result;
          }

          goto LABEL_17;
        }
      }
    }

LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v13;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  v14,  1173LL,  0);
    __break(1u);
    return result;
  }

  __break(1u);
}

LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL, __dst);
  }
}

  uint64_t v8 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v9 = (unint64_t)&v3[16 * v8 + 32];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease(a1);
    *uint64_t v1 = v3;
    return result;
  }

  id v11 = *((void *)v3 + 2);
  uint64_t v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    *((void *)v3 + 2) = v13;
    goto LABEL_19;
  }

  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v2 + 16) + 1LL,  1,  (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v3 > 1,  v4 + 1,  1,  (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v4, 0LL);
      if (v4 < 0) {
        break;
      }
      uint64_t v6 = v5;
      uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0) {
        goto LABEL_14;
      }
      if (v7 == v4) {
        return v6;
      }
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  v10,  1122LL,  0);
      __break(1u);
LABEL_10:
      uint64_t v4 = String.UTF8View._foreignCount()();
      if (!v4) {
        return &_swiftEmptyArrayStorage;
      }
    }

    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  v10,  71LL,  0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    __break(1u);
  }

  else
  {
    return &_swiftEmptyArrayStorage;
  }

  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = _swift_stdlib_malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    id v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = _swift_stdlib_malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    id v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  int v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }

LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
    *a1 = v2;
  }

  uint64_t v4 = *(void *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v4 = _swiftEmptyArrayStorage;
    }

    else
    {
      uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v4 = (void *)swift_allocObject(v3, 8 * v2 + 32, 7LL);
      int64_t v5 = _swift_stdlib_malloc_size(v4);
      uint64_t v6 = v5 - 32;
      if (v5 < 32) {
        uint64_t v6 = v5 - 25;
      }
      v4[2] = v2;
      v4[3] = (2 * (v6 >> 3)) | 1;
    }

    swift_bridgeObjectRetain(v1);
    int64_t v7 = (LiteMessageServiceSession *)specialized Array._copyContents(initializing:)((unint64_t)(v4 + 4), v2, v1);
    uint64_t v1 = (uint64_t)v8;
    swift_bridgeObjectRelease(v7, v9, v8, v10, v11, v12, v13, v14);
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    if (v1 < 0) {
      uint64_t v15 = v1;
    }
    else {
      uint64_t v15 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v15);
    swift_bridgeObjectRelease((LiteMessageServiceSession *)v1, v16, v17, v18, v19, v20, v21, v22);
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }

  return v4;
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = a1[1];
  Swift::Int v5 = _minimumMergeRunLength(_:)(v4);
  Swift::Int v126 = v4;
  if (v5 >= v4)
  {
    if (v4 < 0) {
      goto LABEL_139;
    }
    id v18 = (void *)*a1;
    uint64_t v19 = -1LL;
    uint64_t v20 = 1LL;
    for (i = (void *)*a1; ; ++i)
    {
      id v22 = (void *)v18[v20];
      uint64_t v23 = v19;
      unint64_t v24 = i;
      do
      {
        if (!v18) {
          goto LABEL_143;
        }
        uint64_t v25 = *v24;
        id v22 = (void *)v24[1];
        void *v24 = v22;
        v24[1] = v25;
        --v24;
      }

      while (!__CFADD__(v23++, 1LL));
      ++v20;
      --v19;
      if (v20 == v126) {
        return;
      }
    }
  }

  if (v4 >= 0) {
    uint64_t v13 = v4;
  }
  else {
    uint64_t v13 = v4 + 1;
  }
  if (v4 < -1)
  {
LABEL_148:
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
    __break(1u);
    return;
  }

  Swift::Int v14 = v5;
  uint64_t v122 = a1;
  if (v4 < 2)
  {
    uint64_t v27 = (char *)_swiftEmptyArrayStorage;
    uint64_t v129 = (uint64_t)_swiftEmptyArrayStorage;
    __dst = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 32);
    if (v4 != 1)
    {
      unint64_t v31 = _swiftEmptyArrayStorage[2];
      goto LABEL_105;
    }
  }

  else
  {
    uint64_t v15 = v13 >> 1;
    uint64_t v16 = type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IMDChat,  &OBJC_CLASS___IMDChat_ptr);
    uint64_t v17 = static Array._allocateBufferUninitialized(minimumCapacity:)(v15, v16);
    *(void *)((char *)&dword_10 + (v17 & 0xFFFFFFFFFFFFFF8LL)) = v15;
    __dst = (char *)((v17 & 0xFFFFFFFFFFFFFF8LL) + 32);
    uint64_t v129 = v17;
  }

  Swift::Int v125 = v14;
  Swift::Int v28 = 0LL;
  uint64_t v29 = *a1;
  uint64_t v123 = *a1 - 8;
  uint64_t v124 = *a1 + 16;
  uint64_t v27 = (char *)_swiftEmptyArrayStorage;
  int v30 = &selRef_sentDowngradeRequestToHandleID_fromID_;
  while (1)
  {
    Swift::Int v32 = v28++;
    if (v28 < v4)
    {
      unsigned int v33 = objc_msgSend(*(id *)(v29 + 8 * v28), v30[23], *(void *)(v29 + 8 * v32));
      Swift::Int v28 = v32 + 2;
      if (v32 + 2 < v4)
      {
        id v34 = (id *)(v124 + 8 * v32);
        while (v33 == objc_msgSend(*v34, v30[23], *(v34 - 1)))
        {
          ++v28;
          ++v34;
          if (v4 == v28)
          {
            Swift::Int v28 = v4;
            break;
          }
        }
      }

      if (v33)
      {
        if (v28 < v32) {
          goto LABEL_140;
        }
        if (v32 < v28)
        {
          v35 = (uint64_t *)(v123 + 8 * v28);
          Swift::Int v36 = v28;
          Swift::Int v37 = v32;
          uint64_t v38 = (uint64_t *)(v29 + 8 * v32);
          do
          {
            if (v37 != --v36)
            {
              if (!v29) {
                goto LABEL_146;
              }
              uint64_t v39 = *v38;
              *uint64_t v38 = *v35;
              uint64_t *v35 = v39;
            }

            ++v37;
            --v35;
            ++v38;
          }

          while (v37 < v36);
        }
      }
    }

    if (v28 < v4)
    {
      if (__OFSUB__(v28, v32)) {
        goto LABEL_138;
      }
      if (v28 - v32 < v125)
      {
        if (__OFADD__(v32, v125)) {
          goto LABEL_141;
        }
        if (v32 + v125 < v4) {
          Swift::Int v4 = v32 + v125;
        }
        if (v4 < v32) {
          goto LABEL_142;
        }
        if (v28 != v4)
        {
          v40 = (void *)(v123 + 8 * v28);
          do
          {
            SEL v41 = *(void **)(v29 + 8 * v28);
            Swift::Int v42 = v32;
            id v43 = v40;
            do
            {
              if (!v29) {
                goto LABEL_144;
              }
              uint64_t v44 = *v43;
              SEL v41 = (void *)v43[1];
              *id v43 = v41;
              v43[1] = v44;
              --v43;
              ++v42;
            }

            while (v28 != v42);
            ++v28;
            ++v40;
          }

          while (v28 != v4);
          Swift::Int v28 = v4;
        }
      }
    }

    if (v28 < v32)
    {
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }

    if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0) {
      uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v27 + 2) + 1LL,  (char *)&dword_0 + 1,  (uint64_t)v27,  v9,  v10,  v11,  v12);
    }
    unint64_t v46 = *((void *)v27 + 2);
    unint64_t v45 = *((void *)v27 + 3);
    unint64_t v31 = v46 + 1;
    if (v46 >= v45 >> 1) {
      uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v45 > 1),  v46 + 1,  (char *)&dword_0 + 1,  (uint64_t)v27,  v9,  v10,  v11,  v12);
    }
    *((void *)v27 + 2) = v31;
    id v47 = v27 + 32;
    id v48 = &v27[16 * v46 + 32];
    *(void *)id v48 = v32;
    *((void *)v48 + 1) = v28;
    if (v46) {
      break;
    }
    unint64_t v31 = 1LL;
LABEL_21:
    Swift::Int v4 = v126;
    if (v28 >= v126)
    {
      uint64_t v2 = v1;
LABEL_105:
      v100 = (LiteMessageServiceSession *)v27;
      if (v31 < 2) {
        goto LABEL_102;
      }
      uint64_t v109 = *v122;
      while (1)
      {
        unint64_t v110 = v31 - 2;
        if (v31 < 2) {
          break;
        }
        if (!v109) {
          goto LABEL_147;
        }
        id v99 = (char *)v100;
        uint64_t v111 = *(void *)&v100->state[16 * v110 + 24];
        uint64_t v112 = *(void *)&v100->state[16 * v31 + 16];
        specialized _merge<A>(low:mid:high:buffer:by:)( (char *)(v109 + 8 * v111),  (char *)(v109 + 8LL * *(void *)&v100->state[16 * v31 + 8]),  v109 + 8 * v112,  __dst);
        if (v2) {
          goto LABEL_101;
        }
        if (v112 < v111) {
          goto LABEL_135;
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v99) & 1) == 0) {
          id v99 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v99, v113, v114, v115, v116, v117, v118, v119);
        }
        if (v110 >= *((void *)v99 + 2)) {
          goto LABEL_136;
        }
        id v120 = &v99[16 * v110 + 32];
        *(void *)id v120 = v111;
        *((void *)v120 + 1) = v112;
        unint64_t v121 = *((void *)v99 + 2);
        if (v31 > v121) {
          goto LABEL_137;
        }
        memmove(&v99[16 * v31 + 16], &v99[16 * v31 + 32], 16 * (v121 - v31));
        v100 = (LiteMessageServiceSession *)v99;
        *((void *)v99 + 2) = v121 - 1;
        unint64_t v31 = v121 - 1;
        if (v121 <= 2) {
          goto LABEL_102;
        }
      }

LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }
  }

  Swift::Int v127 = v28;
  while (1)
  {
    unint64_t v49 = v31 - 1;
    if (v31 >= 4)
    {
      unsigned __int8 v54 = &v47[16 * v31];
      uint64_t v55 = *((void *)v54 - 8);
      uint64_t v56 = *((void *)v54 - 7);
      BOOL v60 = __OFSUB__(v56, v55);
      uint64_t v57 = v56 - v55;
      if (v60) {
        goto LABEL_122;
      }
      uint64_t v59 = *((void *)v54 - 6);
      uint64_t v58 = *((void *)v54 - 5);
      BOOL v60 = __OFSUB__(v58, v59);
      uint64_t v52 = v58 - v59;
      char v53 = v60;
      if (v60) {
        goto LABEL_123;
      }
      unint64_t v61 = v31 - 2;
      v62 = &v47[16 * v31 - 32];
      uint64_t v64 = *(void *)v62;
      uint64_t v63 = *((void *)v62 + 1);
      BOOL v60 = __OFSUB__(v63, v64);
      uint64_t v65 = v63 - v64;
      if (v60) {
        goto LABEL_125;
      }
      BOOL v60 = __OFADD__(v52, v65);
      uint64_t v66 = v52 + v65;
      if (v60) {
        goto LABEL_128;
      }
      if (v66 >= v57)
      {
        id v84 = &v47[16 * v49];
        uint64_t v86 = *(void *)v84;
        uint64_t v85 = *((void *)v84 + 1);
        BOOL v60 = __OFSUB__(v85, v86);
        uint64_t v87 = v85 - v86;
        if (v60) {
          goto LABEL_132;
        }
        BOOL v77 = v52 < v87;
        goto LABEL_90;
      }
    }

    else
    {
      if (v31 != 3)
      {
        uint64_t v78 = *((void *)v27 + 4);
        uint64_t v79 = *((void *)v27 + 5);
        BOOL v60 = __OFSUB__(v79, v78);
        uint64_t v71 = v79 - v78;
        char v72 = v60;
        goto LABEL_84;
      }

      uint64_t v51 = *((void *)v27 + 4);
      uint64_t v50 = *((void *)v27 + 5);
      BOOL v60 = __OFSUB__(v50, v51);
      uint64_t v52 = v50 - v51;
      char v53 = v60;
    }

    if ((v53 & 1) != 0) {
      goto LABEL_124;
    }
    unint64_t v61 = v31 - 2;
    v67 = &v47[16 * v31 - 32];
    uint64_t v69 = *(void *)v67;
    uint64_t v68 = *((void *)v67 + 1);
    BOOL v70 = __OFSUB__(v68, v69);
    uint64_t v71 = v68 - v69;
    char v72 = v70;
    if (v70) {
      goto LABEL_127;
    }
    uint64_t v73 = &v47[16 * v49];
    uint64_t v75 = *(void *)v73;
    uint64_t v74 = *((void *)v73 + 1);
    BOOL v60 = __OFSUB__(v74, v75);
    uint64_t v76 = v74 - v75;
    if (v60) {
      goto LABEL_130;
    }
    if (__OFADD__(v71, v76)) {
      goto LABEL_131;
    }
    if (v71 + v76 >= v52)
    {
      BOOL v77 = v52 < v76;
LABEL_90:
      if (v77) {
        unint64_t v49 = v61;
      }
      goto LABEL_92;
    }

LABEL_84:
    if ((v72 & 1) != 0) {
      goto LABEL_126;
    }
    uint64_t v80 = &v47[16 * v49];
    uint64_t v82 = *(void *)v80;
    uint64_t v81 = *((void *)v80 + 1);
    BOOL v60 = __OFSUB__(v81, v82);
    uint64_t v83 = v81 - v82;
    if (v60) {
      goto LABEL_129;
    }
    if (v83 < v71) {
      goto LABEL_21;
    }
LABEL_92:
    unint64_t v88 = v49 - 1;
    if (v49 - 1 >= v31)
    {
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }

    if (!v29) {
      goto LABEL_145;
    }
    id v89 = v27;
    uint64_t v90 = v29;
    uint64_t v91 = &v47[16 * v88];
    uint64_t v92 = *(void *)v91;
    id v93 = v47;
    unint64_t v94 = v49;
    unsigned __int8 v95 = &v47[16 * v49];
    uint64_t v96 = *((void *)v95 + 1);
    uint64_t v97 = v90;
    specialized _merge<A>(low:mid:high:buffer:by:)( (char *)(v90 + 8LL * *(void *)v91),  (char *)(v90 + 8LL * *(void *)v95),  v90 + 8 * v96,  __dst);
    if (v1) {
      break;
    }
    if (v96 < v92) {
      goto LABEL_119;
    }
    if (v94 > *((void *)v89 + 2)) {
      goto LABEL_120;
    }
    *(void *)uint64_t v91 = v92;
    *(void *)&v93[16 * v88 + 8] = v96;
    unint64_t v98 = *((void *)v89 + 2);
    if (v94 >= v98) {
      goto LABEL_121;
    }
    uint64_t v27 = v89;
    unint64_t v31 = v98 - 1;
    memmove(v95, v95 + 16, 16 * (v98 - 1 - v94));
    id v47 = v93;
    *((void *)v89 + 2) = v98 - 1;
    uint64_t v29 = v97;
    int v30 = &selRef_sentDowngradeRequestToHandleID_fromID_;
    Swift::Int v28 = v127;
    if (v98 <= 2) {
      goto LABEL_21;
    }
  }

  id v99 = v89;
LABEL_101:
  v100 = (LiteMessageServiceSession *)v99;
LABEL_102:
  swift_bridgeObjectRelease(v100, v6, v7, v8, v9, v10, v11, v12);
  *(void *)((char *)&dword_10 + (v129 & 0xFFFFFFFFFFFFF8LL)) = 0LL;
  specialized Array._endMutation()(v101);
  swift_bridgeObjectRelease((LiteMessageServiceSession *)v129, v102, v103, v104, v105, v106, v107, v108);
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)( char *__src, char *a2, unint64_t a3, char *__dst)
{
  Swift::Int v4 = __dst;
  uint64_t v6 = a2;
  int64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  uint64_t v13 = v12 >> 3;
  unint64_t v24 = __src;
  uint64_t v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      uint64_t v16 = &v4[8 * v13];
      id v22 = v16;
      unint64_t v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        uint64_t v17 = (char *)(a3 - 8);
        id v18 = v6;
        while (1)
        {
          uint64_t v19 = v17 + 8;
          uint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          if ([*((id *)v16 - 1) isNewerThan:v20])
          {
            if (v19 != v6 || v17 >= v6) {
              *(void *)uint64_t v17 = *(void *)v18;
            }
            unint64_t v24 = v18;
            if (v18 <= v7) {
              goto LABEL_42;
            }
          }

          else
          {
            id v22 = v16 - 8;
            if (v19 < v16 || v17 >= v16 || v19 != v16) {
              *(void *)uint64_t v17 = *((void *)v16 - 1);
            }
            id v18 = v6;
            v16 -= 8;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }

          v17 -= 8;
          uint64_t v6 = v18;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }

      goto LABEL_42;
    }
  }

  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    Swift::Int v14 = &v4[8 * v10];
    id v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if ([*(id *)v6 isNewerThan:*(void *)v4])
        {
          uint64_t v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *(void *)int64_t v7 = *(void *)v6;
          }
        }

        else
        {
          if (v7 != v4) {
            *(void *)int64_t v7 = *(void *)v4;
          }
          v4 += 8;
          uint64_t v23 = v4;
          uint64_t v15 = v6;
        }

        v7 += 8;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v15;
      }

      while ((unint64_t)v15 < a3);
      unint64_t v24 = v7;
    }

LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v24, (const void **)&v23, &v22);
    return 1LL;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char *result, int64_t a2, void *a3, uint64_t a4, unsigned __int8 a5, void *a6, void *a7, void *a8)
{
  char v9 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v10 = *(void *)(a4 + 24);
    int64_t v11 = v10 >> 1;
    if ((uint64_t)(v10 >> 1) < a2)
    {
      if (v11 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v11 = a2;
  }

  uint64_t v12 = *(void *)(a4 + 16);
  if (v11 <= v12) {
    uint64_t v13 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v13 = v11;
  }
  if (v13)
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    uint64_t v15 = (char *)swift_allocObject(v14, 16 * v13 + 32, 7LL);
    int64_t v16 = _swift_stdlib_malloc_size(v15);
    uint64_t v17 = v16 - 32;
    if (v16 < 32) {
      uint64_t v17 = v16 - 17;
    }
    *((void *)v15 + 2) = v12;
    *((void *)v15 + 3) = 2 * (v17 >> 4);
  }

  else
  {
    uint64_t v15 = (char *)&_swiftEmptyArrayStorage;
  }

  id v18 = v15 + 32;
  uint64_t v19 = (char *)(a4 + 32);
  if ((v9 & 1) != 0)
  {
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    memcpy(v18, v19, 16 * v12);
  }

  swift_bridgeObjectRelease((LiteMessageServiceSession *)a4, v19, a3, (id)a4, a5, a6, a7, a8);
  return v15;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)( void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    char v9 = 2;
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v9,  1046LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7]) {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }

  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, void *a6, void *a7, void *a8)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a1 + 16),  0LL,  a1,  a5,  a6,  a7,  a8);
}

void (*specialized protocol witness for Collection.subscript.read in conformance [A]( void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

void (*specialized Array.subscript.read( void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }

  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8LL)) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }

  __break(1u);
  return result;
}

void Array.subscript.readspecialized (id *a1)
{
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v30 = a3;
    }
    else {
      uint64_t v30 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v30);
    swift_bridgeObjectRelease((LiteMessageServiceSession *)a3, v31, v32, v33, v34, v35, v36, v37);
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8LL));
    if (!v7) {
      return a3;
    }
  }

  if (!a1) {
    goto LABEL_25;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
  if (v6)
  {
    if (a3 < 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease((LiteMessageServiceSession *)a3, v12, v13, v14, v15, v16, v17, v18);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [IMDChat] and conformance [A]();
        swift_bridgeObjectRetain(a3);
        for (unint64_t i = 0LL; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [IMDChat]);
          uint64_t v20 = specialized protocol witness for Collection.subscript.read in conformance [A](v39, i, a3);
          id v22 = *v21;
          ((void (*)(void (**)(id *), void))v20)(v39, 0LL);
          *(void *)(a1 + 8 * i) = v22;
        }

        swift_bridgeObjectRelease((LiteMessageServiceSession *)a3, v23, v24, v25, v26, v27, v28, v29);
        return a3;
      }

      goto LABEL_24;
    }

LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v9 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8LL));
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IMDChat,  &OBJC_CLASS___IMDChat_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

  __break(1u);
LABEL_24:
  id v16 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v16,  1092LL,  0);
  __break(1u);
  return result;
}

LABEL_26:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

        uint64_t v9 = (v19 - 1) & v19;
        id v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      id v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
      id v22 = *v21;
      uint64_t v23 = v21[1];
      Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      uint64_t result = Hasher._finalize()();
      unint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v25 = result & ~v24;
      unsigned __int8 v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        id v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v27 = 0;
        Swift::Int v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v29 = v26 == v28;
          if (v26 == v28) {
            unsigned __int8 v26 = 0LL;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v11 + 8 * v26);
        }

        while (v30 == -1);
        id v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      unsigned __int8 v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
      *unsigned __int8 v15 = v22;
      v15[1] = v23;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

        uint64_t v10 = (v19 - 1) & v19;
        id v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }

      id v21 = *(void *)(*(void *)(v3 + 48) + 8 * v17);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      id v22 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        unsigned __int8 v15 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v25 = 0;
        unsigned __int8 v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0LL;
          }
          v25 |= v27;
          Swift::Int v28 = *(void *)(v12 + 8 * v24);
        }

        while (v28 == -1);
        unsigned __int8 v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

    uint64_t v10 = (v19 - 1) & v19;
    id v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    id v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
    id v22 = *v21;
    uint64_t v23 = v21[1];
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    uint64_t result = Hasher._finalize()();
    unint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v25 = result & ~v24;
    unsigned __int8 v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      id v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      Swift::Int v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v29 = v26 == v28;
        if (v26 == v28) {
          unsigned __int8 v26 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v26);
      }

      while (v30 == -1);
      id v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    unsigned __int8 v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
    *unsigned __int8 v15 = v22;
    v15[1] = v23;
    ++*(void *)(v6 + 16);
  }

  uint64_t v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_38;
  }

  uint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    id v13 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    id v13 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_36;
    }
    uint64_t v19 = *(void *)(v8 + 8 * v13);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

    uint64_t v10 = (v19 - 1) & v19;
    id v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_27:
    id v21 = *(void *)(v6 + 40);
    id v22 = *(id *)(*(void *)(v3 + 48) + 8 * v17);
    uint64_t result = NSObject._rawHashValue(seed:)(v21);
    uint64_t v23 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v24 = result & ~v23;
    uint64_t v25 = v24 >> 6;
    if (((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      unsigned __int8 v15 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unsigned __int8 v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        Swift::Int v28 = v25 == v27;
        if (v25 == v27) {
          uint64_t v25 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v25);
      }

      while (v29 == -1);
      unsigned __int8 v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }

    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    *(void *)(*(void *)(v6 + 48) + 8 * v15) = v22;
    ++*(void *)(v6 + 16);
  }

  uint64_t v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3, 2LL);
    uint64_t v2 = v30;
    goto LABEL_38;
  }

  uint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    id v14 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    id v14 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_36;
    }
    uint64_t v19 = *(void *)(v8 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a1 + 16),  0LL,  a1);
}

Swift::Int specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
    uint64_t v3 = static _SetStorage.allocate(capacity:)(v1);
    uint64_t v4 = 0LL;
    uint64_t v5 = v3 + 56;
    uint64_t v32 = a1 + 32;
    while (1)
    {
      unint64_t v6 = (uint64_t *)(v32 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = (LiteMessageServiceSession *)v6[1];
      Hasher.init(_seed:)(v33, *(void *)(v3 + 40));
      swift_bridgeObjectRetain(v7);
      String.hash(into:)(v33, v8, v7);
      Swift::Int result = Hasher._finalize()();
      uint64_t v16 = -1LL << *(_BYTE *)(v3 + 32);
      unint64_t v17 = result & ~v16;
      unint64_t v18 = v17 >> 6;
      uint64_t v19 = *(void *)(v5 + 8 * (v17 >> 6));
      uint64_t v20 = 1LL << v17;
      if (((1LL << v17) & v19) != 0)
      {
        uint64_t v21 = *(void *)(v3 + 48);
        id v22 = (void *)(v21 + 16 * v17);
        uint64_t v23 = (const char *)v22[1];
        BOOL v24 = *v22 == v8 && v23 == (const char *)v7;
        if (v24 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v22, v23, v8, v7, 0LL), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease(v7, v23, v10, v11, v12, v13, v14, v15);
          goto LABEL_4;
        }

        uint64_t v25 = ~v16;
        while (1)
        {
          unint64_t v17 = (v17 + 1) & v25;
          unint64_t v18 = v17 >> 6;
          uint64_t v19 = *(void *)(v5 + 8 * (v17 >> 6));
          uint64_t v20 = 1LL << v17;
          if ((v19 & (1LL << v17)) == 0) {
            break;
          }
          unsigned __int8 v26 = (void *)(v21 + 16 * v17);
          uint64_t v23 = (const char *)v26[1];
          if (*v26 != v8 || v23 != (const char *)v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v26, v23, v8, v7, 0LL);
            if ((result & 1) == 0) {
              continue;
            }
          }

          goto LABEL_3;
        }
      }

      *(void *)(v5 + 8 * v1_Block_object_dispose(va, 8) = v20 | v19;
      Swift::Int v28 = (void *)(*(void *)(v3 + 48) + 16 * v17);
      void *v28 = v8;
      v28[1] = v7;
      uint64_t v29 = *(void *)(v3 + 16);
      BOOL v30 = __OFADD__(v29, 1LL);
      uint64_t v31 = v29 + 1;
      if (v30)
      {
        __break(1u);
        return result;
      }

      *(void *)(v3 + 16) = v31;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }

  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t type metadata accessor for IMDHandle(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type [IMDChat] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [IMDChat] and conformance [A];
  if (!lazy protocol witness table cache variable for type [IMDChat] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [IMDChat]);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type [IMDChat] and conformance [A]);
  }

  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

Swift::Void __swiftcall LiteMessageServiceSession.donateHandlesForKeyExchange()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  type metadata accessor for MainActor(0LL);
  id v5 = v0;
  uint64_t v6 = static MainActor.shared.getter(v5);
  uint64_t v7 = (void *)swift_allocObject(&unk_49308, 40LL, 7LL);
  uint64_t v7[2] = v6;
  v7[3] = &protocol witness table for MainActor;
  v7[4] = v5;
  uint64_t v8 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( (uint64_t)v3,  (uint64_t)&async function pointer to partial apply for closure #1 in LiteMessageServiceSession.donateHandlesForKeyExchange(),  (uint64_t)v7);
  swift_release(v8);
}

uint64_t closure #1 in LiteMessageServiceSession.donateHandlesForKeyExchange()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v5 = type metadata accessor for MainActor(0LL);
  v4[3] = v5;
  v4[4] = static MainActor.shared.getter(v5);
  uint64_t v6 = (void *)swift_task_alloc(dword_4D7AC);
  v4[5] = v6;
  *uint64_t v6 = v4;
  v6[1] = closure #1 in LiteMessageServiceSession.donateHandlesForKeyExchange();
  return LiteMessageServiceSession.donateInitialHandlesIfNeeded()();
}

uint64_t closure #1 in LiteMessageServiceSession.donateHandlesForKeyExchange()()
{
  uint64_t v1 = *v0;
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 40));
  uint64_t v2 = (void *)swift_task_alloc(dword_4D7B4);
  *(void *)(v1 + 4_Block_object_dispose(va, 8) = v2;
  *uint64_t v2 = v4;
  v2[1] = closure #1 in LiteMessageServiceSession.donateHandlesForKeyExchange();
  return LiteMessageServiceSession.donateEmergencyHandles()();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v4;
  uint64_t v1 = *v0;
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 48));
  uint64_t v2 = (void *)swift_task_alloc(dword_4D764);
  *(void *)(v1 + 56) = v2;
  *uint64_t v2 = v4;
  v2[1] = closure #1 in LiteMessageServiceSession.donateHandlesForKeyExchange();
  return LiteMessageServiceSession.donateFamilyHandles()();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = *(void *)(*(void *)v0 + 24LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 56LL));
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(closure #1 in LiteMessageServiceSession.donateHandlesForKeyExchange(), v2, v3);
}

{
  uint64_t v0;
  swift_release(*(void *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t partial apply for closure #1 in LiteMessageServiceSession.donateHandlesForKeyExchange()()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc(dword_4D73C);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #1 in LiteMessageServiceSession.donateHandlesForKeyExchange();
  return closure #1 in LiteMessageServiceSession.donateHandlesForKeyExchange()((uint64_t)v3, v4, v5, v2);
}

uint64_t LiteMessageServiceSession.donateInitialHandlesIfNeeded()()
{
  v1[10] = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v1[11] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[12] = v3;
  unint64_t v4 = (*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[13] = swift_task_alloc(v4);
  v1[14] = swift_task_alloc(v4);
  v1[15] = swift_task_alloc(v4);
  v1[16] = swift_task_alloc(v4);
  uint64_t v5 = type metadata accessor for MainActor(0LL);
  v1[17] = static MainActor.shared.getter(v5);
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v1[18] = v6;
  v1[19] = v7;
  return swift_task_switch(LiteMessageServiceSession.donateInitialHandlesIfNeeded(), v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_s *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSString v22;
  NSString v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  os_log_s *v36;
  os_log_type_t v37;
  BOOL v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  NSString v43;
  uint64_t v44;
  NSString v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  os_log_s *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  if (donating)
  {
    uint64_t v2 = *(void *)(v0 + 96);
    uint64_t v1 = *(void *)(v0 + 104);
    uint64_t v3 = *(void *)(v0 + 88);
    swift_release(*(void *)(v0 + 136));
    unint64_t v4 = Logger.donations.unsafeMutableAddressor();
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    uint64_t v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_0, v6, v7, "Already donating", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    uint64_t v10 = *(void *)(v0 + 96);
    uint64_t v9 = *(void *)(v0 + 104);
    uint64_t v11 = *(void *)(v0 + 88);

    unsigned __int8 v12 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    goto LABEL_5;
  }

  unint64_t v17 = IDSCopyLocalDeviceUniqueID();
  if (v17)
  {
    unint64_t v18 = (void *)v17;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    uint64_t v21 = v20;
  }

  else
  {
    uint64_t v19 = 0LL;
    uint64_t v21 = 0LL;
  }

  *(void *)(v0 + 160) = v19;
  *(void *)(v0 + 16_Block_object_dispose(va, 8) = v21;
  id v22 = String._bridgeToObjectiveC()();
  uint64_t v23 = String._bridgeToObjectiveC()();
  BOOL v24 = IMGetDomainIntForKey(v22, v23);

  if (v24 == 2)
  {
    uint64_t v25 = specialized LiteMessageServiceSession.lastDonationDeviceIdentifier.getter();
    if (v26)
    {
      uint64_t v27 = v26;
      if (v21)
      {
        if (v25 == v19 && v26 == v21)
        {
          Swift::Int v28 = *(void *)(v0 + 136);
          swift_bridgeObjectRelease(v26);
          uint64_t v29 = v28;
LABEL_21:
          swift_release(v29);
          swift_bridgeObjectRelease(v21);
          goto LABEL_22;
        }

        BOOL v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, v19, v21, 0LL);
        swift_bridgeObjectRelease(v27);
        if ((v30 & 1) != 0)
        {
          uint64_t v29 = *(void *)(v0 + 136);
          goto LABEL_21;
        }
      }

      else
      {
        swift_bridgeObjectRelease(v26);
      }
    }

    else if (!v21)
    {
      swift_release(*(void *)(v0 + 136));
LABEL_22:
      uint64_t v31 = *(void *)(v0 + 112);
      uint64_t v32 = *(void *)(v0 + 88);
      id v33 = *(void *)(v0 + 96);
      unsigned __int8 v34 = *(void **)(v0 + 80);
      id v35 = Logger.donations.unsafeMutableAddressor();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v31, v35, v32);
      id v36 = (os_log_s *)Logger.logObject.getter(v34);
      id v37 = static os_log_type_t.default.getter();
      uint64_t v38 = os_log_type_enabled(v36, v37);
      uint64_t v9 = *(void *)(v0 + 112);
      uint64_t v11 = *(void *)(v0 + 88);
      uint64_t v39 = *(void *)(v0 + 96);
      v40 = *(void **)(v0 + 80);
      if (v38)
      {
        uint64_t v69 = *(void *)(v0 + 96);
        SEL v41 = swift_slowAlloc(22LL, -1LL);
        uint64_t v68 = swift_slowAlloc(32LL, -1LL);
        BOOL v70 = v68;
        *(_DWORD *)SEL v41 = 134218242;
        Swift::Int v42 = v9;
        id v43 = String._bridgeToObjectiveC()();
        uint64_t v44 = v11;
        unint64_t v45 = String._bridgeToObjectiveC()();
        unint64_t v46 = IMGetDomainIntForKey(v43, v45);

        *(void *)(v0 + 64) = v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v41 + 4, v41 + 12);

        *(_WORD *)(v41 + 12) = 2080;
        *(void *)(v0 + 32) = specialized LiteMessageServiceSession.lastDonationDeviceIdentifier.getter();
        *(void *)(v0 + 40) = v47;
        id v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
        unint64_t v49 = String.init<A>(describing:)(v0 + 32, v48);
        uint64_t v51 = v50;
        *(void *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, &v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v41 + 14, v41 + 22);
        swift_bridgeObjectRelease(v51);

        _os_log_impl( &dword_0,  v36,  v37,  "Skipping handle donation, already complete with version %ld from device %s",  (uint8_t *)v41,  0x16u);
        swift_arrayDestroy(v68, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v68, -1LL, -1LL);
        swift_slowDealloc(v41, -1LL, -1LL);

        (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v42, v44);
        goto LABEL_6;
      }

      unsigned __int8 v12 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
LABEL_5:
      v12(v9, v11);
LABEL_6:
      id v13 = *(void *)(v0 + 120);
      unsigned __int8 v15 = *(void *)(v0 + 104);
      id v14 = *(void *)(v0 + 112);
      swift_task_dealloc(*(void *)(v0 + 128));
      swift_task_dealloc(v13);
      swift_task_dealloc(v14);
      swift_task_dealloc(v15);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }

  uint64_t v52 = *(void *)(v0 + 128);
  char v53 = *(void *)(v0 + 88);
  unsigned __int8 v54 = *(void *)(v0 + 96);
  uint64_t v55 = Logger.donations.unsafeMutableAddressor();
  *(void *)(v0 + 176) = v55;
  uint64_t v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 16);
  *(void *)(v0 + 184) = v56;
  uint64_t v57 = v56(v52, v55, v53);
  uint64_t v58 = (os_log_s *)Logger.logObject.getter(v57);
  uint64_t v59 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v58, v59))
  {
    BOOL v60 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)BOOL v60 = 0;
    _os_log_impl(&dword_0, v58, v59, "Donating initial handles to IDS", v60, 2u);
    swift_slowDealloc(v60, -1LL, -1LL);
  }

  unint64_t v61 = *(void *)(v0 + 128);
  v62 = *(void *)(v0 + 88);
  uint64_t v63 = *(void *)(v0 + 96);

  uint64_t v64 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
  *(void *)(v0 + 192) = v64;
  v64(v61, v62);
  donating = 1;
  specialized LiteMessageServiceSession.lastAddressedHandleToRecentHandles()();
  uint64_t v66 = v65;
  *(void *)(v0 + 200) = v65;
  v67 = (void *)swift_task_alloc(dword_4D774);
  *(void *)(v0 + 20_Block_object_dispose(va, 8) = v67;
  char *v67 = v0;
  v67[1] = LiteMessageServiceSession.donateInitialHandlesIfNeeded();
  return LiteMessageServiceSession.donateHandleMap(_:priority:isInitial:)(v66, 0LL, 1);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 200);
  swift_task_dealloc(*(void *)(*v0 + 208));
  swift_bridgeObjectRelease(v2);
  return swift_task_switch( LiteMessageServiceSession.donateInitialHandlesIfNeeded(),  *(void *)(v1 + 144),  *(void *)(v1 + 152));
}

{
  uint64_t v0;
  uint64_t v1;
  NSString v2;
  NSString v3;
  NSString v4;
  NSString v5;
  NSString v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_log_s *v12;
  os_log_type_t v13;
  BOOL v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v1 = *(void *)(v0 + 168);
  swift_release(*(void *)(v0 + 136));
  uint64_t v2 = String._bridgeToObjectiveC()();
  uint64_t v3 = String._bridgeToObjectiveC()();
  IMSetDomainIntForKey(v2, v3, 2LL);

  swift_bridgeObjectRetain(v1);
  unint64_t v4 = String._bridgeToObjectiveC()();
  uint64_t v5 = String._bridgeToObjectiveC()();
  if (v1)
  {
    uint64_t v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v1);
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  uint64_t v7 = *(void *)(v0 + 176);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 184);
  uint64_t v9 = *(void *)(v0 + 120);
  uint64_t v10 = *(void *)(v0 + 88);
  IMSetDomainValueForKey(v4, v5, v6);
  swift_unknownObjectRelease(v6);

  v8(v9, v7, v10);
  swift_bridgeObjectRetain(v1);
  unsigned __int8 v12 = (os_log_s *)Logger.logObject.getter(v11);
  id v13 = static os_log_type_t.default.getter();
  id v14 = os_log_type_enabled(v12, v13);
  unsigned __int8 v15 = *(void (**)(uint64_t, uint64_t))(v0 + 192);
  if (v14)
  {
    unint64_t v17 = *(void *)(v0 + 160);
    uint64_t v16 = *(void *)(v0 + 168);
    uint64_t v31 = *(void *)(v0 + 88);
    uint64_t v32 = *(void *)(v0 + 120);
    BOOL v30 = *(void (**)(uint64_t, uint64_t))(v0 + 192);
    unint64_t v18 = swift_slowAlloc(22LL, -1LL);
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    id v33 = v19;
    *(_DWORD *)unint64_t v18 = 134218242;
    *(void *)(v0 + 4_Block_object_dispose(va, 8) = 2LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v18 + 4, v18 + 12);
    *(_WORD *)(v18 + 12) = 2080;
    *(void *)(v0 + 16) = v17;
    *(void *)(v0 + 24) = v16;
    swift_bridgeObjectRetain(v1);
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    uint64_t v21 = String.init<A>(describing:)(v0 + 16, v20);
    uint64_t v23 = v22;
    *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v18 + 14, v18 + 22);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease_n(v1, 2LL);
    _os_log_impl(&dword_0, v12, v13, "Updated donation version to %ld from device %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);

    v30(v32, v31);
  }

  else
  {
    BOOL v24 = *(void *)(v0 + 120);
    uint64_t v25 = *(void *)(v0 + 88);
    swift_bridgeObjectRelease_n(v1, 2LL);

    v15(v24, v25);
  }

  donating = 0;
  unsigned __int8 v26 = *(void *)(v0 + 120);
  Swift::Int v28 = *(void *)(v0 + 104);
  uint64_t v27 = *(void *)(v0 + 112);
  swift_task_dealloc(*(void *)(v0 + 128));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LiteMessageServiceSession.donateEmergencyHandles()()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v1[3] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for MainActor(0LL);
  v1[6] = v4;
  v1[7] = static MainActor.shared.getter(v4);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v1[8] = v5;
  v1[9] = v6;
  return swift_task_switch(LiteMessageServiceSession.donateEmergencyHandles(), v5, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_s *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v4 = Logger.donations.unsafeMutableAddressor();
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  uint64_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_0, v6, v7, "Donating emergency handles to IDS", v8, 2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  uint64_t v10 = v0[5];
  uint64_t v9 = v0[6];
  uint64_t v11 = v0[3];
  unsigned __int8 v12 = v0[4];

  id v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  v0[10] = static MainActor.shared.getter(v13);
  id v14 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  return swift_task_switch(LiteMessageServiceSession.donateEmergencyHandles(), v14, v15);
}

{
  void *v0;
  swift_release(v0[10]);
  return swift_task_switch(LiteMessageServiceSession.donateEmergencyHandles(), v0[8], v0[9]);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v1 = LiteMessageServiceSession.mapLastAddressedHandleToHandles(using:)((uint64_t)&_swiftEmptyArrayStorage);
  *(void *)(v0 + 8_Block_object_dispose(va, 8) = v1;
  uint64_t v2 = (void *)swift_task_alloc(dword_4D774);
  *(void *)(v0 + 96) = v2;
  *uint64_t v2 = v0;
  v2[1] = LiteMessageServiceSession.donateEmergencyHandles();
  return LiteMessageServiceSession.donateHandleMap(_:priority:isInitial:)((uint64_t)v1, 1LL, 0);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 88);
  swift_task_dealloc(*(void *)(*v0 + 96));
  swift_bridgeObjectRelease(v2);
  return swift_task_switch( LiteMessageServiceSession.donateEmergencyHandles(),  *(void *)(v1 + 64),  *(void *)(v1 + 72));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 40);
  swift_release(*(void *)(v0 + 56));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LiteMessageServiceSession.donateFamilyHandles()()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v1[3] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for MainActor(0LL);
  v1[6] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v1[7] = v5;
  v1[8] = v6;
  return swift_task_switch(LiteMessageServiceSession.donateFamilyHandles(), v5, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_s *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v4 = Logger.donations.unsafeMutableAddressor();
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  uint64_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_0, v6, v7, "Donating family handles to IDS", v8, 2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  uint64_t v10 = v0[4];
  uint64_t v9 = v0[5];
  uint64_t v11 = v0[3];

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  unsigned __int8 v12 = (void *)swift_task_alloc(dword_4D76C);
  v0[9] = v12;
  *unsigned __int8 v12 = v0;
  v12[1] = LiteMessageServiceSession.donateFamilyHandles();
  return specialized LiteMessageServiceSession.familyHandles.getter();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v1 = v0[10];
  uint64_t v2 = LiteMessageServiceSession.mapLastAddressedHandleToHandles(using:)(v1);
  v0[11] = v2;
  swift_bridgeObjectRelease(v1);
  uint64_t v3 = (void *)swift_task_alloc(dword_4D774);
  v0[12] = v3;
  *uint64_t v3 = v0;
  v3[1] = LiteMessageServiceSession.donateFamilyHandles();
  return LiteMessageServiceSession.donateHandleMap(_:priority:isInitial:)((uint64_t)v2, 2LL, 0);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 88);
  swift_task_dealloc(*(void *)(*v0 + 96));
  swift_bridgeObjectRelease(v2);
  return swift_task_switch(LiteMessageServiceSession.donateFamilyHandles(), *(void *)(v1 + 56), *(void *)(v1 + 64));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 40);
  swift_release(*(void *)(v0 + 48));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LiteMessageServiceSession.donateFamilyHandles()(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 72);
  *(void *)(*v1 + 80) = a1;
  swift_task_dealloc(v3);
  return swift_task_switch(LiteMessageServiceSession.donateFamilyHandles(), *(void *)(v2 + 56), *(void *)(v2 + 64));
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) == 1)
  {
    outlined destroy of TaskPriority?(a1, &demangling cache variable for type metadata for TaskPriority?);
    uint64_t v8 = 7168LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      uint64_t v10 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9, v12);
      uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      uint64_t v15 = v14;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v8 = v16 | 0x1C00LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9) {
      goto LABEL_3;
    }
  }

  uint64_t v13 = 0LL;
  uint64_t v15 = 0LL;
LABEL_6:
  uint64_t v17 = swift_allocObject(&unk_49418, 32LL, 7LL);
  *(void *)(v17 + 16) = a2;
  *(void *)(v17 + 24) = a3;
  if (v15 | v13)
  {
    v20[0] = 0LL;
    v20[1] = 0LL;
    unint64_t v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }

  else
  {
    unint64_t v18 = 0LL;
  }

  return swift_task_create( v8,  v18,  (char *)&type metadata for () + 8,  &_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATu,  v17);
}

uint64_t LiteMessageServiceSession.donateHandleMap(_:priority:isInitial:)(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 176) = a2;
  *(void *)(v4 + 184) = v3;
  *(_BYTE *)(v4 + 329) = a3;
  *(void *)(v4 + 16_Block_object_dispose(va, 8) = a1;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  *(void *)(v4 + 192) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v4 + 200) = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v4 + 20_Block_object_dispose(va, 8) = swift_task_alloc(v7);
  *(void *)(v4 + 216) = swift_task_alloc(v7);
  *(void *)(v4 + 224) = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for MainActor(0LL);
  *(void *)(v4 + 232) = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  *(void *)(v4 + 240) = v9;
  *(void *)(v4 + 24_Block_object_dispose(va, 8) = v10;
  return swift_task_switch(LiteMessageServiceSession.donateHandleMap(_:priority:isInitial:), v9, v10);
}

uint64_t LiteMessageServiceSession.donateHandleMap(_:priority:isInitial:)()
{
  uint64_t v56 = (uint64_t *)(v1 + 160);
  uint64_t v4 = *(void *)(v1 + 168);
  char v5 = *(_BYTE *)(v4 + 32);
  *(_BYTE *)(v1 + 330) = v5;
  uint64_t v6 = 1LL << v5;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  else {
    uint64_t v7 = -1LL;
  }
  unint64_t v8 = v7 & *(void *)(v4 + 64);
  swift_bridgeObjectRetain(v4);
  int64_t v9 = 0LL;
  uint64_t v10 = &_s10Foundation12NotificationV36_unconditionallyBridgeFromObjectiveCyACSo14NSNotificationCSgFZ_ptr;
  if (v8) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v16 = v9 + 1;
  if (__OFADD__(v9, 1LL))
  {
    __break(1u);
    goto LABEL_51;
  }

  int64_t v17 = (unint64_t)((1LL << *(_BYTE *)(v1 + 330)) + 63) >> 6;
  uint64_t v15 = *(void *)(v1 + 168);
  if (v16 >= v17)
  {
LABEL_37:
    swift_release(v15);
    Swift::Int v42 = (void *)swift_task_alloc(dword_4D77C);
    *(void *)(v1 + 256) = v42;
    *Swift::Int v42 = v1;
    v42[1] = LiteMessageServiceSession.donateHandleMap(_:priority:isInitial:);
    return specialized LiteMessageServiceSession.inviteHandleMap(_:)(*(void *)(v1 + 168));
  }

  uint64_t v18 = v15 + 64;
  unint64_t v19 = *(void *)(v15 + 64 + 8 * v16);
  ++v9;
  if (!v19)
  {
    int64_t v9 = v16 + 1;
    if (v16 + 1 >= v17) {
      goto LABEL_37;
    }
    unint64_t v19 = *(void *)(v18 + 8 * v9);
    if (!v19)
    {
      int64_t v9 = v16 + 2;
      if (v16 + 2 >= v17) {
        goto LABEL_37;
      }
      unint64_t v19 = *(void *)(v18 + 8 * v9);
      if (!v19)
      {
        int64_t v20 = v16 + 3;
        if (v20 < v17)
        {
          unint64_t v19 = *(void *)(v18 + 8 * v20);
          if (v19)
          {
            int64_t v9 = v20;
            goto LABEL_21;
          }

          while (1)
          {
            int64_t v9 = v20 + 1;
            if (__OFADD__(v20, 1LL)) {
              break;
            }
            if (v9 >= v17) {
              goto LABEL_37;
            }
            unint64_t v19 = *(void *)(v18 + 8 * v9);
            ++v20;
            if (v19) {
              goto LABEL_21;
            }
          }

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v1 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 256));
  return swift_task_switch( LiteMessageServiceSession.donateHandleMap(_:priority:isInitial:),  *(void *)(v1 + 240),  *(void *)(v1 + 248));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 216);
  swift_release(*(void *)(v0 + 232));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 320LL) = v2;
  if (!v2) {
    return swift_task_switch(LiteMessageServiceSession.donateHandleMap(_:priority:isInitial:), v1[30], v1[31]);
  }
  swift_bridgeObjectRelease(v1[35]);
  return swift_task_switch(LiteMessageServiceSession.donateHandleMap(_:priority:isInitial:), v1[30], v1[31]);
}

{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  os_log_s *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  _UNKNOWN **v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  id v33;
  NSString v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_log_s *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t result;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t i;
  void *v54;
  uint64_t j;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Class isa;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  int64_t v67;
  id v68;
  uint64_t v2 = v0 + 144;
  uint64_t v3 = *(void **)(v0 + 296);
  uint64_t v4 = *(void *)(v0 + 280);
  char v5 = *(void *)(v0 + 224);
  uint64_t v6 = *(void *)(v0 + 192);
  uint64_t v7 = *(void *)(v0 + 200);
  unint64_t v8 = *(unsigned __int8 *)(v0 + 328);

  int64_t v9 = Logger.donations.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v9, v6);
  swift_bridgeObjectRetain(v4);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  uint64_t v12 = static os_log_type_t.default.getter();
  unint64_t v13 = v12;
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v2 = *(void *)(v0 + 304);
    unint64_t v14 = *(void *)(v0 + 280);
    uint64_t v15 = *(void **)(v0 + 288);
    int64_t v16 = swift_slowAlloc(18LL, -1LL);
    *(_DWORD *)int64_t v16 = 134218240;
    swift_bridgeObjectRelease(v14);
    *(void *)(v16 + 4) = v2;
    swift_bridgeObjectRelease(v14);
    *(_WORD *)(v16 + 12) = 1024;
    *(_DWORD *)(v16 + 14) = v8;
    _os_log_impl( &dword_0,  v11,  (os_log_type_t)v13,  "Completed donating %ld handles with success %{BOOL}d",  (uint8_t *)v16,  0x12u);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  else
  {
    uint64_t v15 = *(void **)(v0 + 288);
    swift_bridgeObjectRelease_n(*(void *)(v0 + 280), 2LL);
  }

  uint64_t v65 = (uint64_t *)(v0 + 160);

  (*(void (**)(void, void))(*(void *)(v0 + 200) + 8LL))(*(void *)(v0 + 224), *(void *)(v0 + 192));
  uint64_t v18 = *(void *)(v0 + 264);
  int64_t v17 = *(void *)(v0 + 272);
  unint64_t v19 = &_s10Foundation12NotificationV36_unconditionallyBridgeFromObjectiveCyACSo14NSNotificationCSgFZ_ptr;
  while (1)
  {
    if (v17)
    {
      uint64_t v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v23 = v22 | (v18 << 6);
      id v24 = *(void *)(v0 + 168);
    }

    else
    {
      NSString v25 = v18 + 1;
      if (__OFADD__(v18, 1LL))
      {
        __break(1u);
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }

      uint64_t v26 = (unint64_t)((1LL << *(_BYTE *)(v0 + 330)) + 63) >> 6;
      id v24 = *(void *)(v0 + 168);
      if (v25 >= v26) {
        goto LABEL_37;
      }
      uint64_t v27 = v24 + 64;
      uint64_t v28 = *(void *)(v24 + 64 + 8 * v25);
      ++v18;
      if (!v28)
      {
        uint64_t v18 = v25 + 1;
        if (v25 + 1 >= v26) {
          goto LABEL_37;
        }
        uint64_t v28 = *(void *)(v27 + 8 * v18);
        if (!v28)
        {
          uint64_t v18 = v25 + 2;
          if (v25 + 2 >= v26) {
            goto LABEL_37;
          }
          uint64_t v28 = *(void *)(v27 + 8 * v18);
          if (!v28)
          {
            uint64_t v29 = v25 + 3;
            if (v29 >= v26)
            {
LABEL_37:
              swift_release(v24);
              uint64_t v51 = (void *)swift_task_alloc(dword_4D77C);
              *(void *)(v0 + 256) = v51;
              *uint64_t v51 = v0;
              v51[1] = LiteMessageServiceSession.donateHandleMap(_:priority:isInitial:);
              return specialized LiteMessageServiceSession.inviteHandleMap(_:)(*(void *)(v0 + 168));
            }

            uint64_t v28 = *(void *)(v27 + 8 * v29);
            if (!v28)
            {
              while (1)
              {
                uint64_t v18 = v29 + 1;
                if (__OFADD__(v29, 1LL)) {
                  goto LABEL_51;
                }
                if (v18 >= v26) {
                  goto LABEL_37;
                }
                uint64_t v28 = *(void *)(v27 + 8 * v18);
                ++v29;
                if (v28) {
                  goto LABEL_22;
                }
              }
            }

            uint64_t v18 = v29;
          }
        }
      }

LABEL_51:
          __break(1u);
          goto LABEL_52;
        }

        goto LABEL_37;
      }
    }
  }

LABEL_21:
  unint64_t v8 = (v19 - 1) & v19;
  unint64_t v14 = __clz(__rbit64(v19)) + (v9 << 6);
  while (1)
  {
    *(void *)(v1 + 264) = v9;
    *(void *)(v1 + 272) = v8;
    uint64_t v21 = (uint64_t *)(*(void *)(v15 + 48) + 16 * v14);
    uint64_t v22 = *v21;
    unint64_t v23 = v21[1];
    uint64_t v2 = *(void *)(*(void *)(v15 + 56) + 8 * v14);
    *(void *)(v1 + 280) = v2;
    id v24 = objc_allocWithZone((Class)v10[367]);
    swift_bridgeObjectRetain_n(v23, 2LL);
    swift_bridgeObjectRetain(v2);
    NSString v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v23);
    uint64_t v3 = (char *)[v24 initWithUnprefixedURI:v25];
    *(void *)(v1 + 28_Block_object_dispose(va, 8) = v3;

    if (v3) {
      break;
    }
    int64_t v58 = v9;
    uint64_t v26 = *(void *)(v1 + 216);
    uint64_t v27 = *(void *)(v1 + 192);
    uint64_t v28 = *(void *)(v1 + 200);
    uint64_t v29 = Logger.donations.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v26, v29, v27);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v2);
    uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v3 = (char *)swift_slowAlloc(22LL, -1LL);
      uint64_t v0 = swift_slowAlloc(32LL, -1LL);
      *uint64_t v56 = v0;
      *(_DWORD *)uint64_t v3 = 136315394;
      swift_bridgeObjectRetain(v23);
      *(void *)(v3 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v56);
      swift_bridgeObjectRelease_n(v23, 3LL);
      *((_WORD *)v3 + 6) = 2048;
      if ((unint64_t)v2 >> 62)
      {
        if (v2 < 0) {
          uint64_t v36 = v2;
        }
        else {
          uint64_t v36 = v2 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v2);
        uint64_t v33 = _CocoaArrayWrapper.endIndex.getter(v36);
        swift_bridgeObjectRelease(v2);
      }

      else
      {
        uint64_t v33 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL));
      }

      uint64_t v57 = *(void *)(v1 + 216);
      uint64_t v34 = *(void *)(v1 + 192);
      uint64_t v35 = *(void *)(v1 + 200);
      swift_bridgeObjectRelease(v2);
      *(void *)(v3 + 14) = v33;
      swift_bridgeObjectRelease(v2);
      _os_log_impl(&dword_0, v31, v32, "Failed to make IDSURI for %s, cannot donate %ld handles", (uint8_t *)v3, 0x16u);
      swift_arrayDestroy(v0, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v0, -1LL, -1LL);
      swift_slowDealloc(v3, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v57, v34);
      uint64_t v10 = &_s10Foundation12NotificationV36_unconditionallyBridgeFromObjectiveCyACSo14NSNotificationCSgFZ_ptr;
      int64_t v9 = v58;
      if (!v8) {
        goto LABEL_8;
      }
    }

    else
    {
      uint64_t v0 = *(void *)(v1 + 216);
      uint64_t v11 = *(void *)(v1 + 192);
      uint64_t v12 = *(void *)(v1 + 200);
      swift_bridgeObjectRelease_n(v2, 2LL);
      swift_bridgeObjectRelease_n(v23, 2LL);

      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v0, v11);
      int64_t v9 = v58;
      if (!v8) {
        goto LABEL_8;
      }
    }

  uint64_t v7 = (v19 - 1) & v19;
  unint64_t v14 = __clz(__rbit64(v19)) + (v8 << 6);
  while (1)
  {
    *(void *)(v0 + 280) = v8;
    *(void *)(v0 + 28_Block_object_dispose(va, 8) = v7;
    uint64_t v21 = (uint64_t *)(*(void *)(v15 + 48) + 16 * v14);
    uint64_t v22 = *v21;
    unint64_t v23 = v21[1];
    uint64_t v2 = *(void *)(*(void *)(v15 + 56) + 8 * v14);
    id v24 = objc_allocWithZone((Class)v9[367]);
    swift_bridgeObjectRetain_n(v23, 2LL);
    swift_bridgeObjectRetain(v2);
    NSString v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v23);
    uint64_t v1 = (char *)[v24 initWithUnprefixedURI:v25];
    *(void *)(v0 + 296) = v1;

    if (v1) {
      break;
    }
    uint64_t v74 = v8;
    uint64_t v27 = *(void *)(v0 + 232);
    uint64_t v26 = *(void *)(v0 + 240);
    uint64_t v28 = *(void *)(v0 + 224);
    uint64_t v29 = Logger.donations.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v26, v29, v28);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v2);
    uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v1 = (char *)swift_slowAlloc(22LL, -1LL);
      uint64_t v33 = swift_slowAlloc(32LL, -1LL);
      *uint64_t v71 = v33;
      *(_DWORD *)uint64_t v1 = 136315394;
      swift_bridgeObjectRetain(v23);
      *(void *)(v1 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v71);
      swift_bridgeObjectRelease_n(v23, 3LL);
      *((_WORD *)v1 + 6) = 2048;
      if ((unint64_t)v2 >> 62)
      {
        if (v2 < 0) {
          uint64_t v37 = v2;
        }
        else {
          uint64_t v37 = v2 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v2);
        uint64_t v34 = _CocoaArrayWrapper.endIndex.getter(v37);
        swift_bridgeObjectRelease(v2);
      }

      else
      {
        uint64_t v34 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL));
      }

      uint64_t v35 = *(void *)(v0 + 232);
      uint64_t v73 = *(void *)(v0 + 240);
      uint64_t v36 = *(void *)(v0 + 224);
      swift_bridgeObjectRelease(v2);
      *(void *)(v1 + 14) = v34;
      swift_bridgeObjectRelease(v2);
      _os_log_impl(&dword_0, v31, v32, "Failed to make IDSURI for %s, cannot donate %ld handles", (uint8_t *)v1, 0x16u);
      swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v1, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v73, v36);
      int64_t v9 = &_s10Foundation12NotificationV36_unconditionallyBridgeFromObjectiveCyACSo14NSNotificationCSgFZ_ptr;
      unint64_t v8 = v74;
      if (!v7) {
        goto LABEL_8;
      }
    }

    else
    {
      uint64_t v11 = *(void *)(v0 + 232);
      uint64_t v10 = *(void *)(v0 + 240);
      uint64_t v12 = *(void *)(v0 + 224);
      swift_bridgeObjectRelease_n(v2, 2LL);
      swift_bridgeObjectRelease_n(v23, 2LL);

      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      unint64_t v8 = v74;
      if (!v7) {
        goto LABEL_8;
      }
    }

LABEL_7:
    unint64_t v13 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v14 = v13 | (v9 << 6);
    uint64_t v15 = *(void *)(v1 + 168);
  }

  swift_bridgeObjectRelease(v23);
  unint64_t v8 = (unint64_t)LiteMessageServiceSession.offGridMessenger.getter();
  *(void *)(v1 + 296) = v8;
  uint64_t v0 = (unint64_t)v2 >> 62;
  if (!((unint64_t)v2 >> 62))
  {
    uint64_t v37 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain(v2);
    goto LABEL_34;
  }

    unint64_t v13 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v14 = v13 | (v8 << 6);
    uint64_t v15 = *(void *)(v0 + 216);
  }

  swift_bridgeObjectRelease(v23);
  if ((unint64_t)v2 >> 62)
  {
LABEL_48:
    if (v2 < 0) {
      unsigned __int8 v54 = v2;
    }
    else {
      unsigned __int8 v54 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
    uint64_t v38 = _CocoaArrayWrapper.endIndex.getter(v54);
    swift_bridgeObjectRelease(v2);
    unint64_t v39 = (void *)(v0 + 200);
    if (v38) {
      goto LABEL_34;
    }
LABEL_52:
    swift_bridgeObjectRelease(v2);
    Swift::Int v42 = &_swiftEmptyArrayStorage;
    goto LABEL_53;
  }

  uint64_t v38 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL));
  unint64_t v39 = (void *)(v0 + 200);
  if (!v38) {
    goto LABEL_52;
  }
LABEL_34:
  *unint64_t v39 = &_swiftEmptyArrayStorage;
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  v38 & ~(v38 >> 63),  0);
  if (v38 < 0)
  {
    __break(1u);
    return result;
  }

  uint64_t v41 = 0LL;
  Swift::Int v42 = (void *)*v39;
  uint64_t v75 = v38;
  do
  {
    if ((v2 & 0xC000000000000001LL) != 0) {
      uint64_t v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v41, v2);
    }
    else {
      uint64_t v43 = *(id *)(v2 + 8 * v41 + 32);
    }
    uint64_t v44 = v43;
    unint64_t v45 = objc_msgSend(v43, "unprefixedURI", v69, v70);
    unint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    uint64_t v48 = v47;

    *char v72 = v42;
    uint64_t v50 = v42[2];
    uint64_t v49 = v42[3];
    if (v50 >= v49 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1);
      Swift::Int v42 = (void *)*v72;
    }

    ++v41;
    v42[2] = v50 + 1;
    uint64_t v51 = (char *)&v42[2 * v50];
    *((void *)v51 + 4) = v46;
    *((void *)v51 + 5) = v48;
  }

  while (v75 != v41);
  swift_bridgeObjectRelease(v2);
LABEL_53:
  uint64_t v55 = [(id)objc_opt_self(IMOffGridModeInvitationManager) sharedInstance];
  *(void *)(v0 + 304) = v55;
  *(void *)(v0 + 184) = Set.init(minimumCapacity:)( v42[2],  &type metadata for String,  &protocol witness table for String);
  uint64_t v56 = v42[2];
  if (v56)
  {
    uint64_t v57 = v42 + 5;
    do
    {
      id v59 = *(v57 - 1);
      int64_t v58 = *v57;
      swift_bridgeObjectRetain(*v57);
      specialized Set._Variant.insert(_:)(v70, v59, v58);
      swift_bridgeObjectRelease(*(void *)(v0 + 176));
      v57 += 2;
      --v56;
    }

    while (v56);
  }

  swift_bridgeObjectRelease(v42);
  BOOL v60 = *(void *)(v0 + 184);
  v61.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
  *(NSSet *)(v0 + 312) = v61;
  swift_bridgeObjectRelease(v60);
  v62 = [v1 unprefixedURI];
  if (!v62)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v64 = v63;
    v62 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v64);
  }

  uint64_t v65 = v0 + 16;
  *(void *)(v0 + 320) = v62;
  *(void *)(v0 + 112) = closure #2 in LiteMessageServiceSession.inviteHandleMap(_:);
  *(void *)(v0 + 120) = 0LL;
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 8_Block_object_dispose(va, 8) = 1107296256LL;
  *(void *)(v0 + 96) = thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@unowned Bool);
  *(void *)(v0 + 104) = &block_descriptor_16;
  uint64_t v66 = _Block_copy((const void *)(v0 + 80));
  *(void *)(v0 + 32_Block_object_dispose(va, 8) = v66;
  *(void *)(v0 + 56) = v0 + 192;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = specialized LiteMessageServiceSession.inviteHandleMap(_:);
  v67 = swift_continuation_init(v0 + 16, 0LL);
  *(void *)(v0 + 12_Block_object_dispose(va, 8) = _NSConcreteStackBlock;
  uint64_t v68 = (void *)(v0 + 128);
  v68[1] = 0x40000000LL;
  v68[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSSet) -> () with result type Set<String>;
  v68[3] = &block_descriptor_17;
  v68[4] = v67;
  [v55 batchShareOffGridModeToHandleIDs:v61.super.isa fromHandleID:v62 isContact:v66 completion:v68];
  return swift_continuation_await(v65);
}

  uint64_t v21 = 0LL;
LABEL_8:
  unint64_t v23 = self;
  id v24 = a9;
  if (v24)
  {
    NSString v25 = v24;
    uint64_t v26 = (LiteMessageServiceSession *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a9,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  }

  else
  {
    uint64_t v26 = 0LL;
  }

  specialized LiteMessageServiceSession.joinChat(_:handleInfo:style:groupID:lastAddressedHandle:lastAddressedSIMID:joinProperties:)( v75,  (unint64_t)v15,  (uint64_t)v16,  v76,  v74,  a6,  v18,  v20,  v21,  a8);

  swift_bridgeObjectRelease(v15, v27, v28, v29, v30, v31, v32, v33, v69);
  swift_bridgeObjectRelease(v16, v34, v35, v36, v37, v38, v39, v40, v70);
  swift_bridgeObjectRelease(v26, v41, v42, v43, v44, v45, v46, v47, v71);
  swift_bridgeObjectRelease((LiteMessageServiceSession *)a8, v48, v49, v50, v51, v52, v53, v54, v72);
  swift_bridgeObjectRelease(v20, v55, v56, v57, v58, v59, v60, v61, v73);
  swift_bridgeObjectRelease((LiteMessageServiceSession *)a6, v62, v63, v64, v65, v66, v67, v68, a9);
}

  __break(1u);
  return result;
}

LABEL_22:
      int64_t v17 = (v28 - 1) & v28;
      unint64_t v23 = __clz(__rbit64(v28)) + (v18 << 6);
    }

    *(void *)(v0 + 264) = v18;
    *(void *)(v0 + 272) = v17;
    uint64_t v30 = (uint64_t *)(*(void *)(v24 + 48) + 16 * v23);
    uint64_t v31 = *v30;
    os_log_type_t v32 = v30[1];
    uint64_t v2 = *(void *)(*(void *)(v24 + 56) + 8 * v23);
    *(void *)(v0 + 280) = v2;
    uint64_t v33 = objc_allocWithZone((Class)v19[367]);
    swift_bridgeObjectRetain_n(v32, 2LL);
    swift_bridgeObjectRetain(v2);
    uint64_t v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v32);
    uint64_t v1 = (char *)[v33 initWithUnprefixedURI:v34];
    *(void *)(v0 + 28_Block_object_dispose(va, 8) = v1;

    if (v1) {
      break;
    }
    v67 = v18;
    uint64_t v35 = *(void *)(v0 + 216);
    uint64_t v36 = *(void *)(v0 + 192);
    uint64_t v37 = *(void *)(v0 + 200);
    uint64_t v38 = Logger.donations.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v35, v38, v36);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v2);
    v40 = (os_log_s *)Logger.logObject.getter(v39);
    uint64_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v1 = (char *)swift_slowAlloc(22LL, -1LL);
      unint64_t v13 = swift_slowAlloc(32LL, -1LL);
      void *v65 = v13;
      *(_DWORD *)uint64_t v1 = 136315394;
      swift_bridgeObjectRetain(v32);
      *(void *)(v1 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, v65);
      swift_bridgeObjectRelease_n(v32, 3LL);
      *((_WORD *)v1 + 6) = 2048;
      if ((unint64_t)v2 >> 62)
      {
        if (v2 < 0) {
          unint64_t v45 = v2;
        }
        else {
          unint64_t v45 = v2 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v2);
        Swift::Int v42 = _CocoaArrayWrapper.endIndex.getter(v45);
        swift_bridgeObjectRelease(v2);
      }

      else
      {
        Swift::Int v42 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL));
      }

      uint64_t v66 = *(void *)(v0 + 216);
      uint64_t v43 = *(void *)(v0 + 192);
      uint64_t v44 = *(void *)(v0 + 200);
      swift_bridgeObjectRelease(v2);
      *(void *)(v1 + 14) = v42;
      swift_bridgeObjectRelease(v2);
      _os_log_impl(&dword_0, v40, v41, "Failed to make IDSURI for %s, cannot donate %ld handles", (uint8_t *)v1, 0x16u);
      swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_slowDealloc(v1, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v66, v43);
      unint64_t v19 = &_s10Foundation12NotificationV36_unconditionallyBridgeFromObjectiveCyACSo14NSNotificationCSgFZ_ptr;
    }

    else
    {
      unint64_t v13 = *(void *)(v0 + 216);
      int64_t v20 = *(void *)(v0 + 192);
      uint64_t v21 = *(void *)(v0 + 200);

      swift_bridgeObjectRelease_n(v32, 2LL);
      swift_bridgeObjectRelease_n(v2, 2LL);
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v13, v20);
    }

    uint64_t v18 = v67;
  }

  swift_bridgeObjectRelease(v32);
  int64_t v17 = (unint64_t)LiteMessageServiceSession.offGridMessenger.getter();
  *(void *)(v0 + 296) = v17;
  unint64_t v13 = (unint64_t)v2 >> 62;
  if (!((unint64_t)v2 >> 62))
  {
    unint64_t v46 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain(v2);
    goto LABEL_34;
  }

      unint64_t v23 = (v33 - 1) & v33;
      uint64_t v28 = __clz(__rbit64(v33)) + (v24 << 6);
    }

    *(void *)(v1 + 264) = v24;
    *(void *)(v1 + 272) = v23;
    uint64_t v35 = (uint64_t *)(*(void *)(v29 + 48) + 16 * v28);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    uint64_t v7 = *(void *)(*(void *)(v29 + 56) + 8 * v28);
    *(void *)(v1 + 280) = v7;
    uint64_t v38 = objc_allocWithZone(&OBJC_CLASS___IDSURI);
    swift_bridgeObjectRetain_n(v37, 2LL);
    swift_bridgeObjectRetain(v7);
    unint64_t v39 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v37);
    uint64_t v2 = [v38 initWithUnprefixedURI:v39];
    *(void *)(v1 + 28_Block_object_dispose(va, 8) = v2;

    if (v2) {
      break;
    }
    uint64_t v74 = v24;
    v40 = *(void *)(v1 + 216);
    uint64_t v41 = *(void *)(v1 + 192);
    Swift::Int v42 = *(void *)(v1 + 200);
    uint64_t v43 = Logger.donations.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v40, v43, v41);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v7);
    unint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
    unint64_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v2 = (_DWORD *)swift_slowAlloc(22LL, -1LL);
      unint64_t v13 = swift_slowAlloc(32LL, -1LL);
      *BOOL v70 = v13;
      *uint64_t v2 = 136315394;
      swift_bridgeObjectRetain(v37);
      *(void *)(v2 + 1) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, v70);
      swift_bridgeObjectRelease_n(v37, 3LL);
      *((_WORD *)v2 + 6) = 2048;
      if ((unint64_t)v7 >> 62)
      {
        if (v7 < 0) {
          uint64_t v50 = v7;
        }
        else {
          uint64_t v50 = v7 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v7);
        id v47 = _CocoaArrayWrapper.endIndex.getter(v50);
        swift_bridgeObjectRelease(v7);
      }

      else
      {
        id v47 = *(void *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8LL));
      }

      char v72 = *(void *)(v1 + 216);
      uint64_t v48 = *(void *)(v1 + 192);
      uint64_t v49 = *(void *)(v1 + 200);
      swift_bridgeObjectRelease(v7);
      *(void *)((char *)v2 + 14) = v47;
      swift_bridgeObjectRelease(v7);
      _os_log_impl(&dword_0, v45, v46, "Failed to make IDSURI for %s, cannot donate %ld handles", (uint8_t *)v2, 0x16u);
      swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_slowDealloc(v2, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v72, v48);
    }

    else
    {
      unint64_t v13 = *(void *)(v1 + 216);
      NSString v25 = *(void *)(v1 + 192);
      uint64_t v26 = *(void *)(v1 + 200);

      swift_bridgeObjectRelease_n(v37, 2LL);
      swift_bridgeObjectRelease_n(v7, 2LL);
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v13, v25);
    }

    id v24 = v74;
  }

  swift_bridgeObjectRelease(v37);
  unint64_t v23 = (unint64_t)LiteMessageServiceSession.offGridMessenger.getter();
  *(void *)(v1 + 296) = v23;
  unint64_t v13 = (unint64_t)v7 >> 62;
  if (!((unint64_t)v7 >> 62))
  {
    uint64_t v51 = *(void *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain(v7);
    goto LABEL_34;
  }

  uint64_t v21 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  uint64_t v22 = (uint64_t *)(*(void *)(v21 + 48) + 16 * a3);
  void *v22 = v8;
  v22[1] = a2;
  unint64_t v23 = *(void *)(v21 + 16);
  id v24 = __OFADD__(v23, 1LL);
  NSString v25 = v23 + 1;
  if (v24) {
    __break(1u);
  }
  else {
    *(void *)(v21 + 16) = v25;
  }
  return result;
}

uint64_t LiteMessageServiceSession.donateHandleMap(_:priority:isInitial:)(uint64_t a1)
{
  uint64_t v2 = (_DWORD *)(v1 + 328);
  uint64_t v4 = *(void **)(v1 + 312);
  uint64_t v3 = *(void *)(v1 + 320);
  char v5 = *(void **)(v1 + 296);
  uint64_t v7 = *(void *)(v1 + 200);
  uint64_t v6 = *(void *)(v1 + 208);
  uint64_t v8 = *(void *)(v1 + 192);
  swift_willThrow(a1);

  uint64_t v9 = Logger.donations.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v9, v8);
  swift_errorRetain(v3);
  uint64_t v10 = swift_errorRetain(v3);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.error.getter();
  uint64_t v13 = v12;
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v14 = *(void *)(v1 + 320);
    uint64_t v15 = *(void **)(v1 + 288);
    uint64_t v16 = *(void *)(v1 + 200);
    uint64_t v71 = *(void *)(v1 + 192);
    uint64_t v73 = *(void *)(v1 + 208);
    uint64_t v7 = swift_slowAlloc(12LL, -1LL);
    uint64_t v2 = (_DWORD *)swift_slowAlloc(32LL, -1LL);
    v75[0] = v2;
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_getErrorValue(v14, v1 + 152, v1 + 120);
    uint64_t v17 = Error.localizedDescription.getter(*(void *)(v1 + 128), *(void *)(v1 + 136));
    unint64_t v19 = v18;
    *(void *)(v7 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, (uint64_t *)v75);
    swift_bridgeObjectRelease(v19);
    swift_errorRelease(v14);
    swift_errorRelease(v14);
    _os_log_impl(&dword_0, v11, (os_log_type_t)v13, "Failed to donate handles: %s", (uint8_t *)v7, 0xCu);
    swift_arrayDestroy(v2, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v2, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);

    swift_errorRelease(v14);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v73, v71);
  }

  else
  {
    uint64_t v20 = *(void *)(v1 + 320);
    uint64_t v21 = *(void *)(v1 + 200);
    uint64_t v13 = *(void *)(v1 + 208);
    uint64_t v22 = *(void *)(v1 + 192);

    swift_errorRelease(v20);
    swift_errorRelease(v20);
    swift_errorRelease(v20);

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v13, v22);
  }

  BOOL v70 = (uint64_t *)(v1 + 160);
  int64_t v24 = *(void *)(v1 + 264);
  unint64_t v23 = *(void *)(v1 + 272);
  while (1)
  {
    if (v23)
    {
      unint64_t v27 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      unint64_t v28 = v27 | (v24 << 6);
      uint64_t v29 = *(void *)(v1 + 168);
    }

    else
    {
      int64_t v30 = v24 + 1;
      if (__OFADD__(v24, 1LL))
      {
        __break(1u);
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }

      int64_t v31 = (unint64_t)((1LL << *(_BYTE *)(v1 + 330)) + 63) >> 6;
      uint64_t v29 = *(void *)(v1 + 168);
      if (v30 >= v31) {
        goto LABEL_37;
      }
      uint64_t v32 = v29 + 64;
      unint64_t v33 = *(void *)(v29 + 64 + 8 * v30);
      ++v24;
      if (!v33)
      {
        int64_t v24 = v30 + 1;
        if (v30 + 1 >= v31) {
          goto LABEL_37;
        }
        unint64_t v33 = *(void *)(v32 + 8 * v24);
        if (!v33)
        {
          int64_t v24 = v30 + 2;
          if (v30 + 2 >= v31) {
            goto LABEL_37;
          }
          unint64_t v33 = *(void *)(v32 + 8 * v24);
          if (!v33)
          {
            int64_t v34 = v30 + 3;
            if (v34 >= v31)
            {
LABEL_37:
              swift_release(v29);
              uint64_t v56 = (void *)swift_task_alloc(dword_4D77C);
              *(void *)(v1 + 256) = v56;
              *uint64_t v56 = v1;
              v56[1] = LiteMessageServiceSession.donateHandleMap(_:priority:isInitial:);
              return specialized LiteMessageServiceSession.inviteHandleMap(_:)(*(void *)(v1 + 168));
            }

            unint64_t v33 = *(void *)(v32 + 8 * v34);
            if (!v33)
            {
              while (1)
              {
                int64_t v24 = v34 + 1;
                if (__OFADD__(v34, 1LL)) {
                  goto LABEL_51;
                }
                if (v24 >= v31) {
                  goto LABEL_37;
                }
                unint64_t v33 = *(void *)(v32 + 8 * v24);
                ++v34;
                if (v33) {
                  goto LABEL_22;
                }
              }
            }

            int64_t v24 = v34;
          }
        }
      }

void *LiteMessageServiceSession.mapLastAddressedHandleToHandles(using:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  __chkstk_darwin(v4);
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7) {
    return &_swiftEmptyDictionarySingleton;
  }
  int64_t v58 = (char *)&v53 - v5;
  uint64_t v56 = v6;
  id v60 = (id)objc_opt_self(&OBJC_CLASS___IMDChatRegistry);
  __n128 v8 = swift_bridgeObjectRetain(a1);
  uint64_t v54 = a1;
  uint64_t v9 = (unint64_t *)(a1 + 40);
  uint64_t v10 = &_swiftEmptyDictionarySingleton;
  v8.n128_u64[0] = 136315138LL;
  __n128 v57 = v8;
  uint64_t v55 = (char *)&type metadata for Any + 8;
  uint64_t v61 = v3;
  do
  {
    uint64_t v62 = v10;
    uint64_t v12 = *(v9 - 1);
    unint64_t v11 = *v9;
    *(void *)&double v13 = swift_bridgeObjectRetain(*v9).n128_u64[0];
    id v14 = objc_msgSend(v60, "sharedInstance", v13);
    NSString v15 = String._bridgeToObjectiveC()();
    id v16 = [v14 existingiMessageChatForID:v15];

    if (v16
      && (id v17 = [v16 lastAddressedLocalHandle], v16,
                                                                                                   v17)
      || (id v18 = [v59 account],
          id v17 = [v18 loginID],
          v18,
          v17))
    {
      uint64_t v19 = v2;
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      uint64_t v22 = v21;

      id v23 = objc_allocWithZone(&OBJC_CLASS___IDSURI);
      swift_bridgeObjectRetain(v11);
      NSString v24 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v11);
      id v25 = [v23 initWithUnprefixedURI:v24];

      if (v25)
      {
        swift_bridgeObjectRelease(v11);
        uint64_t v26 = v62;
        if (v62[2])
        {
          swift_bridgeObjectRetain(v22);
          unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v22);
          unint64_t v28 = &_swiftEmptyArrayStorage;
          if ((v29 & 1) != 0)
          {
            unint64_t v28 = *(void **)(v26[7] + 8 * v27);
            swift_bridgeObjectRetain(v28);
          }

          swift_bridgeObjectRelease(v22);
        }

        else
        {
          unint64_t v28 = &_swiftEmptyArrayStorage;
        }

        uint64_t v64 = (uint64_t)v28;
        id v46 = v25;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        unint64_t v48 = *(void *)((char *)&dword_10 + (v64 & 0xFFFFFFFFFFFFFF8LL));
        unint64_t v47 = *(void *)((char *)&dword_18 + (v64 & 0xFFFFFFFFFFFFFF8LL));
        if (v48 >= v47 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1LL);
        }
        uint64_t v49 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v48, v46);
        specialized Array._endMutation()(v49);
        uint64_t v50 = v64;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
        uint64_t v63 = v26;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v50, v20, v22, isUniquelyReferenced_nonNull_native);
        uint64_t v10 = v63;

        swift_bridgeObjectRelease(v22);
        swift_bridgeObjectRelease(0x8000000000000000LL);
        uint64_t v2 = v19;
        uint64_t v3 = v61;
      }

      else
      {
        swift_bridgeObjectRelease(v22);
        uint64_t v30 = Logger.donations.unsafeMutableAddressor();
        uint64_t v3 = v61;
        int64_t v31 = v58;
        (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v58, v30, v19);
        swift_bridgeObjectRetain(v11);
        unint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
        os_log_type_t v34 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v33, v34))
        {
          uint64_t v35 = swift_slowAlloc(12LL, -1LL);
          uint64_t v36 = swift_slowAlloc(32LL, -1LL);
          uint64_t v64 = v36;
          *(_DWORD *)uint64_t v35 = v57.n128_u32[0];
          swift_bridgeObjectRetain(v11);
          *(void *)(v35 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, &v64);
          swift_bridgeObjectRelease_n(v11, 3LL);
          _os_log_impl(&dword_0, v33, v34, "Failed to create IDS URI for %s", (uint8_t *)v35, 0xCu);
          swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
          uint64_t v37 = v36;
          uint64_t v3 = v61;
          swift_slowDealloc(v37, -1LL, -1LL);
          swift_slowDealloc(v35, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v11, 2LL);
        }

        (*(void (**)(char *, uint64_t))(v3 + 8))(v31, v19);
        uint64_t v10 = v62;
        uint64_t v2 = v19;
      }
    }

    else
    {
      uint64_t v38 = Logger.donations.unsafeMutableAddressor();
      uint64_t v39 = v56;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v56, v38, v2);
      swift_bridgeObjectRetain(v11);
      uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
      uint64_t v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v41, (os_log_type_t)v42))
      {
        uint64_t v43 = swift_slowAlloc(12LL, -1LL);
        uint64_t v44 = swift_slowAlloc(32LL, -1LL);
        uint64_t v64 = v44;
        *(_DWORD *)uint64_t v43 = v57.n128_u32[0];
        swift_bridgeObjectRetain(v11);
        *(void *)(v43 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, &v64);
        swift_bridgeObjectRelease_n(v11, 3LL);
        _os_log_impl(&dword_0, v41, (os_log_type_t)v42, "Failed to find from handle for %s", (uint8_t *)v43, 0xCu);
        swift_arrayDestroy(v44, 1LL, v55);
        uint64_t v45 = v44;
        uint64_t v3 = v61;
        swift_slowDealloc(v45, -1LL, -1LL);
        swift_slowDealloc(v43, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v11, 2LL);
      }

      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v39, v2);
      uint64_t v10 = v62;
    }

    v9 += 2;
    --v7;
  }

  while (v7);
  swift_bridgeObjectRelease(v54);
  return v10;
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type Bool( uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *uint64_t v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }

  else
  {
    **(_BYTE **)(*(void *)(v3 + 64) + 40LL) = a2;
    return swift_continuation_throwingResume(v3);
  }

void closure #2 in LiteMessageServiceSession.inviteHandleMap(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = ((uint64_t (*)(void))__chkstk_darwin)();
  id v8 = &v43[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v6);
  uint64_t v10 = &v43[-v9];
  id v11 = [(id)objc_opt_self(IMDChatRegistry) sharedInstance];
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v11 existingiMessageChatForID:v12];

  if (!v13)
  {
    uint64_t v26 = Logger.donations.unsafeMutableAddressor();
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v10, v26, v4);
    uint64_t v27 = swift_bridgeObjectRetain_n(a2, 2LL);
    unint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v47 = v5;
      uint64_t v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v31 = a1;
      uint64_t v32 = swift_slowAlloc(32LL, -1LL);
      uint64_t v49 = v32;
      *(_DWORD *)uint64_t v30 = 136315138;
      swift_bridgeObjectRetain(a2);
      uint64_t v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, a2, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v30 + 4, v30 + 12);
      swift_bridgeObjectRelease_n(a2, 3LL);
      _os_log_impl(&dword_0, v28, v29, "No existing chat for %s, assuming not known contact", v30, 0xCu);
      swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v30, -1LL, -1LL);

      (*(void (**)(_BYTE *, uint64_t))(v47 + 8))(v10, v4);
    }

    else
    {

      swift_bridgeObjectRelease_n(a2, 2LL);
      (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v10, v4);
    }

    return;
  }

  id v14 = [v13 participants];
  if (!v14) {
    goto LABEL_26;
  }
  NSString v15 = v14;
  uint64_t v16 = type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IMDHandle,  &OBJC_CLASS___IMDHandle_ptr);
  uint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v16);

  if (!((unint64_t)v17 >> 62))
  {
    uint64_t v18 = *(void *)((char *)&dword_10 + (v17 & 0xFFFFFFFFFFFFF8LL));
    uint64_t v46 = a1;
    if (v18) {
      goto LABEL_5;
    }
LABEL_17:
    swift_bridgeObjectRelease(v17);
    goto LABEL_18;
  }

  if (v17 < 0) {
    uint64_t v33 = v17;
  }
  else {
    uint64_t v33 = v17 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v17);
  uint64_t v34 = _CocoaArrayWrapper.endIndex.getter(v33);
  swift_bridgeObjectRelease(v17);
  uint64_t v46 = a1;
  if (!v34) {
    goto LABEL_17;
  }
LABEL_5:
  if ((v17 & 0xC000000000000001LL) == 0)
  {
    if (*(void *)((char *)&dword_10 + (v17 & 0xFFFFFFFFFFFFF8LL)))
    {
      id v19 = *(id *)(v17 + 32);
      goto LABEL_8;
    }

    __break(1u);
LABEL_26:
    __break(1u);
    return;
  }

  id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v17);
LABEL_8:
  uint64_t v20 = v19;
  swift_bridgeObjectRelease(v17);
  id v21 = [v20 CNContactID];

  if (!v21)
  {
LABEL_18:
    uint64_t v25 = 0LL;
    unint64_t v24 = 0xE000000000000000LL;
    goto LABEL_19;
  }

  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  unint64_t v24 = v23;

  uint64_t v25 = v22 & 0xFFFFFFFFFFFFLL;
LABEL_19:
  swift_bridgeObjectRelease(v24);
  if ((v24 & 0x2000000000000000LL) != 0) {
    uint64_t v25 = HIBYTE(v24) & 0xF;
  }
  uint64_t v35 = Logger.donations.unsafeMutableAddressor();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v8, v35, v4);
  uint64_t v36 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v38 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v37, v38))
  {
    BOOL v44 = v25 != 0;
    uint64_t v39 = swift_slowAlloc(18LL, -1LL);
    uint64_t v40 = swift_slowAlloc(32LL, -1LL);
    uint64_t v45 = v4;
    uint64_t v41 = v40;
    uint64_t v49 = v40;
    *(_DWORD *)uint64_t v39 = 136315394;
    swift_bridgeObjectRetain(a2);
    uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, a2, &v49);
    uint64_t v47 = v5;
    uint64_t v48 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v39 + 4, v39 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    *(_WORD *)(v39 + 12) = 1024;
    LODWORD(v4_Block_object_dispose(va, 8) = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, (char *)&v48 + 4, v39 + 14, v39 + 18);
    _os_log_impl(&dword_0, v37, v38, "%s is known contact: %{BOOL}d", (uint8_t *)v39, 0x12u);
    swift_arrayDestroy(v41, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1LL, -1LL);
    swift_slowDealloc(v39, -1LL, -1LL);

    (*(void (**)(_BYTE *, uint64_t))(v47 + 8))(v8, v45);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  }

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@unowned Bool)( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v6 = v5;
  swift_retain(v2);
  LOBYTE(v4) = v3(v4, v6);
  swift_release(v2);
  swift_bridgeObjectRelease(v6);
  return v4 & 1;
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSSet) -> () with result type Set<String>( uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  **(void **)(*(void *)(v2 + 64) + 40LL) = static Set._unconditionallyBridgeFromObjectiveC(_:)( a2,  &type metadata for String,  &protocol witness table for String);
  return swift_continuation_resume(v2);
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned FAFamilyCircle?, @unowned NSError?) -> () with result type FAFamilyCircle( uint64_t result, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 32);
  if (a3)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *uint64_t v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }

  else if (a2)
  {
    **(void **)(*(void *)(v3 + 64) + 40LL) = a2;
    id v9 = a2;
    return swift_continuation_throwingResume(v3);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *((void *)v3 + 3) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v14,  1,  v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

Swift::Void __swiftcall LiteMessageServiceSession.listenForContactsChangeNotifications()()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  int64_t v4 = (char *)&aBlock[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for OS_dispatch_queue,  &OBJC_CLASS___OS_dispatch_queue_ptr);
  int64_t v5 = (dispatch_queue_s *)static OS_dispatch_queue.main.getter();
  uint64_t v6 = swift_allocObject(&unk_49330, 24LL, 7LL);
  *(void *)(v6 + 16) = v0;
  aBlock[4] = partial apply for closure #1 in LiteMessageServiceSession.listenForContactsChangeNotifications();
  uint64_t v18 = v6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Int32) -> ();
  aBlock[3] = &block_descriptor;
  uint64_t v7 = _Block_copy(aBlock);
  uint64_t v8 = v18;
  id v9 = v0;
  swift_release(v8);
  LODWORD(aBlock[0]) = LiteMessageServiceSession.familyContactsNotificationToken.getter();
  uint32_t v10 = notify_register_dispatch("com.apple.family.family_updated", (int *)aBlock, v5, v7);
  _Block_release(v7);

  LiteMessageServiceSession.familyContactsNotificationToken.setter(LODWORD(aBlock[0]));
  if (v10)
  {
    uint64_t v11 = Logger.donations.unsafeMutableAddressor();
    uint64_t v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v11, v1);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      NSString v15 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)NSString v15 = 67109120;
      LODWORD(aBlock[0]) = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(aBlock, (char *)aBlock + 4, v15 + 4, v15 + 8);
      _os_log_impl(&dword_0, v13, v14, "Failed to register for family contacts change notification: %u", v15, 8u);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }

uint64_t sub_B6FC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t partial apply for closure #1 in LiteMessageServiceSession.listenForContactsChangeNotifications()()
{
  return LiteMessageServiceSession.familyContactsDidChange()();
}

uint64_t LiteMessageServiceSession.familyContactsDidChange()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v2);
  int64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = Logger.donations.unsafeMutableAddressor();
  uint64_t v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_0, v11, v12, "Family contacts changed!", v13, 2u);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v14 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v4, 1LL, 1LL, v14);
  type metadata accessor for MainActor(0LL);
  id v15 = v1;
  uint64_t v16 = static MainActor.shared.getter(v15);
  uint64_t v17 = (void *)swift_allocObject(&unk_49380, 40LL, 7LL);
  v17[2] = v16;
  v17[3] = &protocol witness table for MainActor;
  v17[4] = v15;
  uint64_t v18 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( (uint64_t)v4,  (uint64_t)&async function pointer to partial apply for closure #1 in LiteMessageServiceSession.familyContactsDidChange(),  (uint64_t)v17);
  return swift_release(v18);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Int32) -> ()(uint64_t a1, uint64_t a2)
{
  int64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t closure #1 in LiteMessageServiceSession.familyContactsDidChange()()
{
  uint64_t v1 = type metadata accessor for MainActor(0LL);
  v0[2] = v1;
  v0[3] = static MainActor.shared.getter(v1);
  uint64_t v2 = (void *)swift_task_alloc(dword_4D764);
  v0[4] = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in LiteMessageServiceSession.familyContactsDidChange();
  return LiteMessageServiceSession.donateFamilyHandles()();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = *(void *)(*(void *)v0 + 16LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 32LL));
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(closure #1 in LiteMessageServiceSession.familyContactsDidChange(), v2, v3);
}

{
  uint64_t v0;
  swift_release(*(void *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  int64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 16) = v4;
  *int64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      *((void *)v11 + 2) = v8;
      *((void *)v11 + 3) = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 32;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[16 * v8 + 32]) {
          memmove(v14, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0LL;
        goto LABEL_24;
      }
    }

    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t objectdestroyTm()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t partial apply for closure #1 in LiteMessageServiceSession.familyContactsDidChange()()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_4D754);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for closure #1 in LiteMessageServiceSession.familyContactsDidChange();
  return closure #1 in LiteMessageServiceSession.familyContactsDidChange()();
}

{
  uint64_t *v0;
  uint64_t v2;
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v5);
}

Swift::Int specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [IDSURI]>);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v35) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v35) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  void *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  void v44[9];
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v43 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v42 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v40 = v3;
  uint64_t v41 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      int64_t v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }

    unint64_t v24 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v24 >= v41) {
      break;
    }
    int64_t v25 = (void *)(v5 + 64);
    char v26 = *(void *)(v42 + 8 * v24);
    ++v14;
    if (!v26)
    {
      int64_t v14 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_36;
      }
      char v26 = *(void *)(v42 + 8 * v14);
      if (!v26)
      {
        unint64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v40;
          if ((v43 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        char v26 = *(void *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            int64_t v14 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v41) {
              goto LABEL_36;
            }
            char v26 = *(void *)(v42 + 8 * v14);
            ++v27;
            if (v26) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v27;
      }
    }

LABEL_33:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_bridgeObjectRetain(v33);
    }

    Hasher.init(_seed:)(v38, *(void *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    Swift::Int result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    id v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    void *v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v1_Block_object_dispose(va, 8) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  unint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v23 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  Swift::Int result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    unint64_t v11 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    uint64_t v32 = 16 * v23;
    uint64_t v33 = (uint64_t *)(*(void *)(v5 + 48) + v32);
    int64_t v35 = *v33;
    uint64_t v34 = v33[1];
    uint64_t v36 = (uint64_t *)(*(void *)(v5 + 56) + v32);
    char v37 = *v36;
    os_log_type_t v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      swift_bridgeObjectRetain(v38);
    }

    Hasher.init(_seed:)(v44, *(void *)(v8 + 40));
    String.hash(into:)(v44, v35, v34);
    Swift::Int result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      BOOL v28 = 0;
      uint64_t v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v30 = v17 == v29;
        if (v17 == v29) {
          unint64_t v17 = 0LL;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v12 + 8 * v17);
      }

      while (v31 == -1);
      unint64_t v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    id v19 = 16 * v18;
    unint64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
    void *v20 = v35;
    v20[1] = v34;
    unint64_t v21 = (void *)(*(void *)(v8 + 56) + v19);
    uint64_t *v21 = v37;
    v21[1] = v38;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v40;
  int64_t v25 = (void *)(v5 + 64);
  if ((v43 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v39 = 1LL << *(_BYTE *)(v5 + 32);
  if (v39 >= 64) {
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v25 = -1LL << v39;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  Swift::Int result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      swift_bridgeObjectRelease(*(void *)(v19 + 8 * v12));
      *(void *)(v19 + 8 * v12) = a1;
      return;
    }

LABEL_11:
    v18[(v12 >> 6) + 8] |= 1LL << v12;
    int64_t v22 = (uint64_t *)(v18[6] + 16 * v12);
    uint64_t *v22 = a2;
    v22[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    uint64_t v23 = v18[2];
    BOOL v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }

    goto LABEL_14;
  }

  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    unint64_t v12 = v20;
    unint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v26[(v20 >> 6) + 8] |= 1LL << v20;
    uint64_t v29 = (uint64_t *)(v26[6] + 16 * v20);
    void *v29 = a3;
    v29[1] = a4;
    uint64_t v30 = (void *)(v26[7] + 16 * v20);
    uint64_t *v30 = a1;
    v30[1] = a2;
    uint64_t v31 = v26[2];
    uint64_t v32 = __OFADD__(v31, 1LL);
    uint64_t v33 = v31 + 1;
    if (!v32)
    {
      v26[2] = v33;
      swift_bridgeObjectRetain(a4);
      return;
    }

    goto LABEL_14;
  }

  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, a5 & 1);
  BOOL v28 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  if ((v24 & 1) == (v13 & 1))
  {
    unint64_t v20 = v28;
    char v26 = (void *)*v6;
    if ((v24 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

  __break(1u);
  return result;
}

LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }

      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }

  return v6;
}

void specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [IDSURI]>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *uint64_t v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *uint64_t v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    uint64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v25 >= v13) {
      goto LABEL_26;
    }
    char v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      char v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }

LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    char v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v20);
  }

  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    char v21 = *v20;
    int64_t v22 = v20[1];
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    void *v23 = v19;
    v23[1] = v18;
    int64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    void *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v22);
  }

  unint64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  char v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    char v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    uint64_t v19 = v25[0];
    uint64_t v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    Swift::Int result = outlined init with take of Any(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }

  unint64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  int64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

LABEL_28:
  __break(1u);
}

    uint64_t v73 = v49;
    uint64_t v49 = v41;
    goto LABEL_29;
  }

  id v60 = v75;
  uint64_t v61 = v22(v75, v21, v5);
  uint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
  uint64_t v63 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v62, v63))
  {
    uint64_t v64 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v64 = 0;
    _os_log_impl(&dword_0, v62, v63, "Attempting to republish off grid status as part of recovery", v64, 2u);
    swift_slowDealloc(v64, -1LL, -1LL);
  }

  v27(v60, v5);
  uint64_t v65 = type metadata accessor for TaskPriority(0LL);
  uint64_t v66 = (uint64_t)v77;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56LL))(v77, 1LL, 1LL, v65);
  type metadata accessor for MainActor(0LL);
  uint64_t v67 = v41;
  uint64_t v68 = static MainActor.shared.getter(v67);
  uint64_t v69 = (void *)swift_allocObject(&unk_49698, 40LL, 7LL);
  v69[2] = v68;
  v69[3] = &protocol witness table for MainActor;
  v69[4] = v67;
  BOOL v70 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( v66,  (uint64_t)&async function pointer to partial apply for closure #1 in LiteMessageServiceSession.republishOffGridStatusIfNecessary(),  (uint64_t)v69);
  swift_release(v70);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v22, *(void *)(*v3 + 40LL));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v22, a2, a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v7 + 48);
    unint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      unint64_t v14 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain(v15);
      return 0LL;
    }

    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  swift_bridgeObjectRelease(v7);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v22[0] = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  swift_bridgeObjectRetain(a3);
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t v21 = *v3;
  *uint64_t v3 = v22[0];
  swift_bridgeObjectRelease(v21);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v2);
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease(v6);

      uint64_t v32 = v9;
      uint64_t v10 = type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IDSURI,  &OBJC_CLASS___IDSURI_ptr);
      swift_unknownObjectRetain(v9, v11);
      swift_dynamicCast(&v33, &v32, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
      *a1 = v33;
      swift_unknownObjectRelease(v9);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    Swift::Int v24 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    Swift::Int v33 = v24;
    unint64_t v25 = *(void *)(v24 + 16);
    if (*(void *)(v24 + 24) <= v25)
    {
      uint64_t v30 = v25 + 1;
      id v31 = v8;
      specialized _NativeSet.resize(capacity:)(v30);
      uint64_t v26 = v33;
    }

    else
    {
      uint64_t v26 = v24;
      id v27 = v8;
    }

    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v8, v26);
    uint64_t v29 = *v3;
    *uint64_t v3 = v26;
  }

  else
  {
    Swift::Int v13 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain(v6);
    Swift::Int v14 = NSObject._rawHashValue(seed:)(v13);
    uint64_t v15 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v16 = v14 & ~v15;
    if (((*(void *)(v6 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
    {
      type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IDSURI,  &OBJC_CLASS___IDSURI_ptr);
      id v17 = *(id *)(*(void *)(v6 + 48) + 8 * v16);
      char v18 = static NSObject.== infix(_:_:)();

      if ((v18 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v6);
        int64_t v22 = *(void **)(*(void *)(*v3 + 48) + 8 * v16);
        *a1 = (Swift::Int)v22;
        id v23 = v22;
        return 0LL;
      }

      uint64_t v19 = ~v15;
      while (1)
      {
        unint64_t v16 = (v16 + 1) & v19;
        if (((*(void *)(v6 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0) {
          break;
        }
        id v20 = *(id *)(*(void *)(v6 + 48) + 8 * v16);
        char v21 = static NSObject.== infix(_:_:)();

        if ((v21 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

    swift_bridgeObjectRelease(v6);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    Swift::Int v33 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    id v8 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v16, isUniquelyReferenced_nonNull_native);
    uint64_t v29 = *v3;
    *uint64_t v3 = v33;
  }

  swift_bridgeObjectRelease(v29);
  *a1 = (Swift::Int)v8;
  return 1LL;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<IDSURI>);
    uint64_t v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    uint64_t v23 = v4;
    uint64_t v5 = __CocoaSet.makeIterator()(a1);
    uint64_t v6 = __CocoaSet.Iterator.next()();
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IDSURI,  &OBJC_CLASS___IDSURI_ptr);
      do
      {
        uint64_t v21 = v7;
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v8, 7LL);
        uint64_t v4 = v23;
        unint64_t v16 = *(void *)(v23 + 16);
        if (*(void *)(v23 + 24) <= v16)
        {
          specialized _NativeSet.resize(capacity:)(v16 + 1);
          uint64_t v4 = v23;
        }

        uint64_t v9 = v22;
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
        uint64_t v11 = v4 + 56;
        uint64_t v12 = -1LL << *(_BYTE *)(v4 + 32);
        unint64_t v13 = result & ~v12;
        unint64_t v14 = v13 >> 6;
        if (((-1LL << v13) & ~*(void *)(v4 + 56 + 8 * (v13 >> 6))) != 0)
        {
          unint64_t v15 = __clz(__rbit64((-1LL << v13) & ~*(void *)(v4 + 56 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v17 = 0;
          unint64_t v18 = (unint64_t)(63 - v12) >> 6;
          do
          {
            if (++v14 == v18 && (v17 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v19 = v14 == v18;
            if (v14 == v18) {
              unint64_t v14 = 0LL;
            }
            v17 |= v19;
            uint64_t v20 = *(void *)(v11 + 8 * v14);
          }

          while (v20 == -1);
          unint64_t v15 = __clz(__rbit64(~v20)) + (v14 << 6);
        }

        *(void *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
        *(void *)(*(void *)(v4 + 48) + 8 * v15) = v9;
        ++*(void *)(v4 + 16);
        uint64_t v7 = __CocoaSet.Iterator.next()();
      }

      while (v7);
    }

    swift_release(v5);
  }

  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  return v4;
}

Swift::Int specialized _NativeSet.resize(capacity:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v32 = v2;
    Swift::Int v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v13 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }

      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v10) {
          goto LABEL_36;
        }
        unint64_t v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v10) {
            goto LABEL_36;
          }
          unint64_t v19 = v33[v13];
          if (!v19)
          {
            int64_t v13 = v18 + 2;
            if (v18 + 2 >= v10) {
              goto LABEL_36;
            }
            unint64_t v19 = v33[v13];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v32;
                uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
                if (v31 > 63) {
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *Swift::Int v33 = -1LL << v31;
                }
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v13 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v13 >= v10) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v33[v13];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v13 = v20;
            }
          }
        }

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<IDSURI>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v30 = v2;
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v8 = (void *)(v3 + 56);
    if (v7 < 64) {
      unint64_t v9 = ~(-1LL << v7);
    }
    else {
      unint64_t v9 = -1LL;
    }
    int64_t v10 = v9 & *(void *)(v3 + 56);
    uint64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    unint64_t v14 = 0LL;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }

      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v11) {
          goto LABEL_36;
        }
        unint64_t v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          unint64_t v14 = v18 + 1;
          if (v18 + 1 >= v11) {
            goto LABEL_36;
          }
          unint64_t v19 = v8[v14];
          if (!v19)
          {
            unint64_t v14 = v18 + 2;
            if (v18 + 2 >= v11) {
              goto LABEL_36;
            }
            unint64_t v19 = v8[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v30;
                BOOL v29 = 1LL << *(_BYTE *)(v3 + 32);
                if (v29 > 63) {
                  bzero((void *)(v3 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v8 = -1LL << v29;
                }
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  unint64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v14 >= v11) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v8[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              unint64_t v14 = v20;
            }
          }
        }

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40));
  unint64_t result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1LL << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1LL << *(_BYTE *)(a2 + 32)));
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)( uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v11);
  }

  else
  {
    if (v10 > v9)
    {
      unint64_t result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_22;
    }

    specialized _NativeSet.copyAndResize(capacity:)(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v26, *(void *)(*v4 + 40));
  String.hash(into:)(v26, v8, a2);
  unint64_t result = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  uint64_t v14 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v15 = *(void *)(v12 + 48);
    unint64_t v16 = (void *)(v15 + 16 * a3);
    BOOL v17 = *v16 == v8 && v16[1] == a2;
    if (v17 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v18 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v18;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        unint64_t v19 = (void *)(v15 + 16 * a3);
        if (*v19 != v8 || v19[1] != a2)
        {
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_21;
      }
    }
  }

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  Swift::Int v4 = v3;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v9);
  }

  else
  {
    if (v8 > v7)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }

    specialized _NativeSet.copyAndResize(capacity:)(v9);
  }

  uint64_t v10 = *v3;
  Swift::Int v11 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v12 = -1LL << *(_BYTE *)(v10 + 32);
  a2 = v11 & ~v12;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v13 = type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IDSURI,  &OBJC_CLASS___IDSURI_ptr);
    id v14 = *(id *)(*(void *)(v10 + 48) + 8 * a2);
    char v15 = static NSObject.== infix(_:_:)();

    if ((v15 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }

    else
    {
      uint64_t v16 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        id v17 = *(id *)(*(void *)(v10 + 48) + 8 * a2);
        char v18 = static NSObject.== infix(_:_:)();

        if ((v18 & 1) != 0) {
          goto LABEL_13;
        }
      }
    }
  }

LABEL_14:
  uint64_t v19 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v19 + 48) + 8 * a2) = a1;
  uint64_t v20 = *(void *)(v19 + 16);
  BOOL v21 = __OFADD__(v20, 1LL);
  uint64_t v22 = v20 + 1;
  if (v21) {
    __break(1u);
  }
  else {
    *(void *)(v19 + 16) = v22;
  }
}

  if (one-time initialization token for lastFetchDate != -1) {
    swift_once(&one-time initialization token for lastFetchDate, one-time initialization function for lastFetchDate);
  }
  uint64_t v31 = v1[44];
  uint64_t v32 = v1[45];
  Swift::Int v33 = (uint64_t)v1[43];
  uint64_t v34 = __swift_project_value_buffer((uint64_t)v1[41], (uint64_t)lastFetchDate);
  swift_beginAccess(v34, v3, 0LL, 0LL);
  outlined init with copy of Date?(v34, v33);
  if ((*((unsigned int (**)(uint64_t, uint64_t, char *))v32 + 6))(v33, 1LL, v31) == 1)
  {
    int64_t v35 = outlined destroy of TaskPriority?((uint64_t)v1[43], &demangling cache variable for type metadata for Date?);
  }

  else
  {
    uint64_t v46 = v1[47];
    uint64_t v47 = v1[48];
    uint64_t v49 = v1[44];
    uint64_t v48 = v1[45];
    uint64_t v50 = (*((uint64_t (**)(char *, char *, char *))v48 + 4))(v47, v1[43], v49);
    static Date.now.getter(v50);
    uint64_t v51 = Date.timeIntervalSince(_:)(v47);
    uint64_t v52 = (void (*)(char *, char *))*((void *)v48 + 1);
    v52(v46, v49);
    if (v51 < 1.0)
    {
      v220 = v52;
      uint64_t v53 = v1[48];
      uint64_t v55 = v1[45];
      uint64_t v54 = v1[46];
      uint64_t v56 = v1[44];
      __n128 v57 = v1[40];
      int64_t v58 = v1[32];
      id v59 = v1[33];
      swift_release(v1[49]);
      swift_bridgeObjectRelease((LiteMessageServiceSession *)v5, v60, v61, v62, v63, v64, v65, v66);
      uint64_t v67 = Logger.liteSession.unsafeMutableAddressor();
      (*((void (**)(char *, uint64_t, char *))v59 + 2))(v57, v67, v58);
      uint64_t v68 = (*((uint64_t (**)(char *, char *, char *))v55 + 2))(v54, v53, v56);
      uint64_t v69 = (os_log_s *)Logger.logObject.getter(v68);
      BOOL v70 = static os_log_type_t.info.getter();
      uint64_t v71 = os_log_type_enabled(v69, v70);
      uint64_t v72 = v1[48];
      uint64_t v73 = v1[46];
      int64_t v74 = v1[44];
      uint64_t v75 = v1[40];
      uint64_t v76 = v1[32];
      BOOL v77 = v1[33];
      if (v71)
      {
        v217 = v1[33];
        uint64_t v78 = swift_slowAlloc(22LL, -1LL);
        uint64_t v79 = swift_slowAlloc(32LL, -1LL);
        v225[0] = v79;
        *(_DWORD *)uint64_t v78 = 136315394;
        uint64_t v80 = lazy protocol witness table accessor for type Date and conformance Date();
        uint64_t v81 = dispatch thunk of CustomStringConvertible.description.getter(v74, v80);
        v211 = v76;
        uint64_t v83 = (LiteMessageServiceSession *)v82;
        *v218 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, v225);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v218, v214, v78 + 4, v78 + 12);
        swift_bridgeObjectRelease(v83, v84, v85, v86, v87, v88, v89, v90);
        uint64_t v91 = v73;
        uint64_t v92 = v220;
        v220(v91, v74);
        *(_WORD *)(v78 + 12) = 2048;
        *v214 = 0x3FF0000000000000LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v214, v2, v78 + 14, v78 + 22);
        _os_log_impl( &dword_0,  v69,  v70,  "Not fetching, last fetch performed at %s which is less than %f seconds ago",  (uint8_t *)v78,  0x16u);
        swift_arrayDestroy(v79, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v79, -1LL, -1LL);
        swift_slowDealloc(v78, -1LL, -1LL);

        (*((void (**)(char *, char *))v217 + 1))(v75, v211);
      }

      else
      {

        id v167 = v73;
        uint64_t v92 = v220;
        v220(v167, v74);
        (*((void (**)(char *, char *))v77 + 1))(v75, v76);
      }

      v92(v72, v74);
      uint64_t v1 = v223;
      goto LABEL_45;
    }

    int64_t v35 = ((uint64_t (*)(char *, char *))v52)(v1[48], v1[44]);
  }

  id v93 = v1[44];
  unint64_t v94 = v1[45];
  unsigned __int8 v95 = (uint64_t)v1[42];
  uint64_t v96 = v1[39];
  uint64_t v97 = v1[33];
  static Date.now.getter(v35);
  (*((void (**)(uint64_t, void, uint64_t, char *))v94 + 7))(v95, 0LL, 1LL, v93);
  swift_beginAccess(v34, v219, 33LL, 0LL);
  outlined assign with take of Date?(v95, v34);
  swift_endAccess(v219);
  unint64_t v98 = Logger.liteSession.unsafeMutableAddressor();
  v1[52] = (char *)v98;
  id v99 = (char *)*((void *)v97 + 2);
  v1[53] = v99;
  v221 = v98;
  ((void (*)(char *))v99)(v96);
  v100 = swift_bridgeObjectRetain_n(v5, 2LL);
  uint64_t v101 = (os_log_s *)Logger.logObject.getter(v100);
  SEL v102 = static os_log_type_t.info.getter();
  id v103 = os_log_type_enabled(v101, v102);
  id v104 = v1[39];
  id v106 = v1[32];
  unsigned __int8 v105 = v1[33];
  if (v103)
  {
    v215 = v1[33];
    v213 = v1[32];
    id v107 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v212 = v104;
    id v108 = swift_slowAlloc(32LL, -1LL);
    v225[0] = v108;
    *(_DWORD *)id v107 = 136315138;
    type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IDSURI,  &OBJC_CLASS___IDSURI_ptr);
    uint64_t v109 = swift_bridgeObjectRetain(v5);
    unint64_t v110 = Array.description.getter(v109);
    uint64_t v112 = (LiteMessageServiceSession *)v111;
    swift_bridgeObjectRelease((LiteMessageServiceSession *)v5, v111, v113, v114, v115, v116, v117, v118);
    id v119 = v110;
    uint64_t v1 = v223;
    *v216 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v119, (unint64_t)v112, v225);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v216, v218, v107 + 4, v107 + 12);
    swift_bridgeObjectRelease(v112, v120, v121, v122, v123, v124, v125, v126);
    swift_bridgeObjectRelease_n(v5, 2LL);
    _os_log_impl(&dword_0, v101, v102, "Fetching pending messages for handles: %s", v107, 0xCu);
    swift_arrayDestroy(v108, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v108, -1LL, -1LL);
    swift_slowDealloc(v107, -1LL, -1LL);

    Swift::Int v127 = (char *)*((void *)v215 + 1);
    ((void (*)(char *, char *))v127)(v212, v213);
  }

  else
  {
    swift_bridgeObjectRelease_n(v5, 2LL);

    Swift::Int v127 = (char *)*((void *)v105 + 1);
    ((void (*)(char *, char *))v127)(v104, v106);
  }

  v1[54] = v127;
  id v128 = LiteMessageServiceSession.offGridMessenger.getter();
  uint64_t v129 = [v128 respondsToSelector:"sendFetchRequestForHandles:completions:"];

  if (v129)
  {
    id v130 = v1 + 2;
    id v131 = (char *)LiteMessageServiceSession.offGridMessenger.getter();
    v1[55] = v131;
    specialized Set.init<A>(_:)(v5);
    id v133 = v132;
    swift_bridgeObjectRelease((LiteMessageServiceSession *)v5, v134, v135, v136, v137, v138, v139, v140);
    type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IDSURI,  &OBJC_CLASS___IDSURI_ptr);
    lazy protocol witness table accessor for type IDSURI and conformance NSObject();
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    v1[56] = (char *)isa;
    swift_bridgeObjectRelease(v133, v142, v143, v144, v145, v146, v147, v148);
    v1[7] = (char *)(v1 + 25);
    v1[2] = (char *)v1;
    v1[3] = (char *)closure #1 in LiteMessageServiceSession.fetchIncomingPendingMessages(fromHandlesIDs:);
    SEL v149 = swift_continuation_init(v1 + 2, 1LL);
    v1[10] = (char *)_NSConcreteStackBlock;
    id v150 = v1 + 10;
    v150[1] = 0x40000000LL;
    v150[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSSet?, @unowned NSError?) -> () with result type Set<IDSURI>;
    v150[3] = &block_descriptor_2;
    v150[4] = v149;
    [v131 sendFetchRequestForHandles:isa completions:v150];
    return swift_continuation_await(v130);
  }

  unsigned __int8 v152 = v1[38];
  id v153 = v1[32];
  swift_release(v1[49]);
  swift_bridgeObjectRelease((LiteMessageServiceSession *)v5, v154, v155, v156, v157, v158, v159, v160);
  unsigned __int8 v161 = ((uint64_t (*)(char *, uint64_t, char *))v99)(v152, v221, v153);
  id v162 = (os_log_s *)Logger.logObject.getter(v161);
  id v163 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v162, v163))
  {
    id v164 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v164 = 0;
    _os_log_impl( &dword_0,  v162,  v163,  "Not sending fetch request, not supported by installed version of IDS client",  v164,  2u);
    swift_slowDealloc(v164, -1LL, -1LL);
  }

  SEL v165 = v1[38];
  id v166 = v1[32];

  ((void (*)(char *, char *))v127)(v165, v166);
LABEL_45:
  uint64_t v178 = v1[47];
  uint64_t v177 = v1[48];
  unint64_t v179 = v1[46];
  v181 = v1[42];
  v180 = v1[43];
  v183 = v1[39];
  v182 = v1[40];
  v184 = v1;
  v185 = v1[38];
  v187 = v184[36];
  v186 = v184[37];
  v222 = v184[35];
  v224 = v184[34];
  swift_task_dealloc(v177);
  swift_task_dealloc(v178);
  swift_task_dealloc(v179);
  swift_task_dealloc(v180);
  swift_task_dealloc(v181);
  swift_task_dealloc(v182);
  swift_task_dealloc(v183);
  swift_task_dealloc(v185);
  swift_task_dealloc(v186);
  swift_task_dealloc(v187);
  swift_task_dealloc(v222);
  swift_task_dealloc(v224);
  return ((uint64_t (*)(void))v184[1])();
}

void *specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }

LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    id v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    void *v19 = *v17;
    v19[1] = v18;
    unint64_t result = (void *)swift_bridgeObjectRetain(v18);
  }

  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    id v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    unint64_t result = v17;
  }

  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }

  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }

  if ([v1 scheduleType])
  {
    Swift::Int v127 = Logger.liteSession.unsafeMutableAddressor();
    id v128 = v148;
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v14, v127, v148);
    uint64_t v1 = v1;
    uint64_t v129 = (void *)Logger.logObject.getter(v1);
    id v130 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled((os_log_t)v129, v130))
    {

      (*(void (**)(char *, uint64_t))(v50 + 8))(v14, v128);
      return;
    }

    id v131 = swift_slowAlloc(22LL, -1LL);
    v147 = swift_slowAlloc(32LL, -1LL);
    id v151 = v147;
    *(_DWORD *)id v131 = 136315394;
    id v132 = [v1 guid];
    if (v132)
    {
      id v133 = v132;
      id v134 = static String._unconditionallyBridgeFromObjectiveC(_:)(v132);
      unint64_t v136 = v135;

      id v150 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v134, (unint64_t)v136, &v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151, v131 + 4, v131 + 12);

      swift_bridgeObjectRelease(v136, v137, v138, v139, v140, v141, v142, v143);
      *(_WORD *)(v131 + 12) = 2048;
      id v144 = [v1 scheduleType];

      id v150 = (uint64_t)v144;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151, v131 + 14, v131 + 22);

      _os_log_impl( &dword_0,  (os_log_t)v129,  v130,  "IMItem invalid for sending %s, is a scheduled message of type: %lu",  (uint8_t *)v131,  0x16u);
      v145 = v147;
      swift_arrayDestroy(v147, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v145, -1LL, -1LL);
      swift_slowDealloc(v131, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v149 + 8))(v14, v148);
      return;
    }

    goto LABEL_37;
  }

    uint64_t v6 = (v15 - 1) & v15;
    int64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    int64_t v9 = v16;
LABEL_28:
    uint64_t v18 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v13);
    int64_t v20 = *v18;
    uint64_t v19 = v18[1];
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v13, (uint64_t)v41);
    *(void *)&uint64_t v40 = v20;
    *((void *)&v40 + 1) = v19;
    v38[2] = v40;
    v39[0] = v41[0];
    v39[1] = v41[1];
    *(void *)&v38[0] = v20;
    *((void *)&v38[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v30, v38, &type metadata for String, &type metadata for AnyHashable, 7LL);
    outlined init with take of Any(v39, v33);
    uint64_t v34 = v30;
    int64_t v35 = v31;
    uint64_t v36 = v32;
    outlined init with take of Any(v33, v37);
    uint64_t v30 = v34;
    uint64_t v31 = v35;
    uint64_t v32 = v36;
    outlined init with take of Any(v37, v38);
    outlined init with take of Any(v38, &v34);
    unint64_t result = AnyHashable._rawHashValue(seed:)(v3[5]);
    unint64_t v21 = -1LL << *((_BYTE *)v3 + 32);
    int64_t v22 = result & ~v21;
    uint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)&v7[8 * (v22 >> 6)]) != 0)
    {
      uint64_t v10 = __clz(__rbit64((-1LL << v22) & ~*(void *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      BOOL v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        unint64_t v26 = v23 == v25;
        if (v23 == v25) {
          uint64_t v23 = 0LL;
        }
        v24 |= v26;
        char v27 = *(void *)&v7[8 * v23];
      }

      while (v27 == -1);
      uint64_t v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v10;
    uint64_t v11 = v3[6] + 40 * v10;
    *(_OWORD *)uint64_t v11 = v30;
    *(_OWORD *)(v11 + 16) = v31;
    *(void *)(v11 + 32) = v32;
    unint64_t result = (uint64_t)outlined init with take of Any(&v34, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }

  id v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    outlined consume of [IDSURI : NSNumber].Iterator._Variant(a1);
    return (uint64_t)v3;
  }

  unint64_t v15 = *(void *)(v29 + 8 * v17);
  if (v15)
  {
    uint64_t v16 = v9 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v16 >= v28) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v29 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_27;
    }
  }

id specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<IDSURI>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }

Swift::Int specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  uint64_t v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v32) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v32) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v13);
      if (!v19)
      {
        int64_t v13 = v18 + 2;
        if (v18 + 2 >= v32) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v13);
        if (!v19) {
          break;
        }
      }
    }

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::Int v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<IDSURI>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v30 = v2;
  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  uint64_t v11 = (unint64_t)(v7 + 63) >> 6;
  unint64_t v12 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  unint64_t v14 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v11) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      unint64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v14);
      if (!v19)
      {
        unint64_t v14 = v18 + 2;
        if (v18 + 2 >= v11) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }

LABEL_40:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
    uint64_t v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8]) {
      memmove(v14, v15, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = specialized getContiguousArrayStorageType<A>(for:)();
    uint64_t v11 = (char *)swift_allocObject( v10,  ((*(unsigned int *)(v10 + 48) + 7LL) & 0x1FFFFFFF8LL) + 8 * v9,  *(unsigned __int16 *)(v10 + 52) | 7LL);
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8]) {
      memmove(v14, v15, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

uint64_t specialized LiteMessageServiceSession.lastDonationDeviceIdentifier.getter()
{
  NSString v0 = String._bridgeToObjectiveC()();
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = (id)IMGetDomainValueForKey(v0, v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v5, v2);
    swift_unknownObjectRelease(v2);
  }

  else
  {
    memset(v5, 0, sizeof(v5));
  }

  outlined init with take of Any?((uint64_t)v5, (uint64_t)v6, &demangling cache variable for type metadata for Any?);
  if (v7)
  {
    else {
      return 0LL;
    }
  }

  else
  {
    outlined destroy of TaskPriority?((uint64_t)v6, &demangling cache variable for type metadata for Any?);
    return 0LL;
  }

void specialized LiteMessageServiceSession.lastAddressedHandleToRecentHandles()()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v76 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v76 - v8;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v88 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  id v84 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v76 - v13;
  id v15 = [(id)objc_opt_self(IMDChatRegistry) sharedInstance];
  id v16 = [v15 cachedChats];

  uint64_t v17 = type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IMDChat,  &OBJC_CLASS___IMDChat_ptr);
  uint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);

  if ((unint64_t)v18 >> 62)
  {
    if (v18 < 0) {
      uint64_t v70 = v18;
    }
    else {
      uint64_t v70 = v18 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v18);
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v70);
    swift_bridgeObjectRelease(v18);
    if (v19) {
      goto LABEL_3;
    }
LABEL_50:
    swift_bridgeObjectRelease(v18);
    uint64_t v69 = 0LL;
LABEL_51:
    uint64_t v71 = Logger.donations.unsafeMutableAddressor();
    uint64_t v72 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v71, v0);
    uint64_t v73 = (os_log_s *)Logger.logObject.getter(v72);
    os_log_type_t v74 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v73, v74))
    {
      uint64_t v75 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v75 = 134217984;
      uint64_t v91 = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v75 + 4, v75 + 12);
      _os_log_impl(&dword_0, v73, v74, "Collected %ld handles to donate for initial donation", v75, 0xCu);
      swift_slowDealloc(v75, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    return;
  }

  uint64_t v19 = *(void *)((char *)&dword_10 + (v18 & 0xFFFFFFFFFFFFF8LL));
  if (!v19) {
    goto LABEL_50;
  }
LABEL_3:
  if (v19 >= 1)
  {
    uint64_t v85 = v14;
    uint64_t v86 = v7;
    uint64_t v89 = v10;
    uint64_t v87 = v9;
    uint64_t v79 = v3;
    uint64_t v80 = v1;
    uint64_t v81 = v0;
    uint64_t v82 = 0LL;
    uint64_t v20 = 0LL;
    uint64_t v83 = &_swiftEmptyDictionarySingleton;
    unint64_t v21 = &selRef_sentDowngradeRequestToHandleID_fromID_;
    while (1)
    {
      if ((v18 & 0xC000000000000001LL) != 0) {
        id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v18);
      }
      else {
        id v22 = *(id *)(v18 + 8 * v20 + 32);
      }
      uint64_t v23 = v22;
      id v24 = [v22 v21[36]];
      if (!v24)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(IMServiceNameiMessage);
        uint64_t v31 = v34;
LABEL_19:

        swift_bridgeObjectRelease(v31);
        goto LABEL_6;
      }

      unint64_t v25 = v24;
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      uint64_t v28 = v27;

      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMServiceNameiMessage);
      uint64_t v31 = v30;
      if (!v28) {
        goto LABEL_19;
      }
      if (v26 == v29 && v28 == v30)
      {
        swift_bridgeObjectRelease_n(v28, 2LL);
      }

      else
      {
        char v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v28, v29, v30, 0LL);
        swift_bridgeObjectRelease(v28);
        swift_bridgeObjectRelease(v31);
        if ((v33 & 1) == 0) {
          goto LABEL_5;
        }
      }

      if ([v23 style] != 45)
      {
LABEL_5:

        goto LABEL_6;
      }

      id v35 = [v23 lastMessage];
      if (v35)
      {
        uint64_t v36 = v35;
        id v37 = [v35 time];

        if (v37)
        {
          uint64_t v38 = (uint64_t)v86;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v37);

          uint64_t v39 = 0LL;
        }

        else
        {
          uint64_t v39 = 1LL;
          uint64_t v38 = (uint64_t)v86;
        }

        uint64_t v42 = v88;
        uint64_t v41 = v89;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v88 + 56))(v38, v39, 1LL, v89);
        uint64_t v43 = v38;
        uint64_t v40 = (uint64_t)v87;
        outlined init with take of Any?(v43, (uint64_t)v87, &demangling cache variable for type metadata for Date?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v40, 1LL, v41) != 1)
        {
          uint64_t v45 = v88;
          uint64_t v44 = v89;
          uint64_t v46 = v85;
          uint64_t v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v88 + 32))(v85, v40, v89);
          uint64_t v48 = v84;
          static Date.now.getter(v47);
          double v49 = Date.timeIntervalSince(_:)(v46);
          uint64_t v50 = *(void (**)(char *, uint64_t))(v45 + 8);
          v50(v48, v44);
          if (v49 >= 2592000.0)
          {
            v50(v46, v44);

            unint64_t v21 = &selRef_sentDowngradeRequestToHandleID_fromID_;
          }

          else
          {
            id v51 = [v23 lastAddressedLocalHandle];
            if (v51)
            {
              uint64_t v52 = v51;
              uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
              uint64_t v54 = v53;

              IMDChat.participantURI.getter();
              unint64_t v21 = &selRef_sentDowngradeRequestToHandleID_fromID_;
              if (v55)
              {
                uint64_t v78 = v54;
                if (v83[2])
                {
                  id v76 = v55;
                  uint64_t v56 = v78;
                  swift_bridgeObjectRetain(v78);
                  unint64_t v57 = specialized __RawDictionaryStorage.find<A>(_:)(v77, v56);
                  int64_t v58 = &_swiftEmptyArrayStorage;
                  if ((v59 & 1) != 0)
                  {
                    int64_t v58 = *(void **)(v83[7] + 8 * v57);
                    swift_bridgeObjectRetain(v58);
                  }

                  swift_bridgeObjectRelease(v78);
                  id v55 = v76;
                }

                else
                {
                  int64_t v58 = &_swiftEmptyArrayStorage;
                }

                uint64_t v91 = (uint64_t)v58;
                id v76 = v55;
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                unint64_t v61 = *(void *)((char *)&dword_10 + (v91 & 0xFFFFFFFFFFFFFF8LL));
                unint64_t v60 = *(void *)((char *)&dword_18 + (v91 & 0xFFFFFFFFFFFFFF8LL));
                if (v61 >= v60 >> 1) {
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v60 > 1,  v61 + 1,  1LL);
                }
                uint64_t v62 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v61, v76);
                specialized Array._endMutation()(v62);
                uint64_t v63 = v91;
                uint64_t v64 = v83;
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v83);
                uint64_t v90 = v64;
                uint64_t v66 = v63;
                uint64_t v67 = v78;
                specialized _NativeDictionary.setValue(_:forKey:isUnique:)( v66,  v77,  v78,  isUniquelyReferenced_nonNull_native);
                uint64_t v83 = v90;

                swift_bridgeObjectRelease(v67);
                swift_bridgeObjectRelease(0x8000000000000000LL);
                v50(v85, v89);
                if (__OFADD__(v82++, 1LL)) {
                  goto LABEL_55;
                }
              }

              else
              {
                v50(v85, v89);
                swift_bridgeObjectRelease(v54);
              }
            }

            else
            {

              v50(v85, v89);
              unint64_t v21 = &selRef_sentDowngradeRequestToHandleID_fromID_;
            }
          }

          goto LABEL_6;
        }
      }

      else
      {
        uint64_t v40 = (uint64_t)v87;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v88 + 56))(v87, 1LL, 1LL, v89);
      }

      outlined destroy of TaskPriority?(v40, &demangling cache variable for type metadata for Date?);
LABEL_6:
      if (v19 == ++v20)
      {
        swift_bridgeObjectRelease(v18);
        uint64_t v1 = v80;
        uint64_t v0 = v81;
        uint64_t v3 = v79;
        uint64_t v69 = (uint64_t)v82;
        goto LABEL_51;
      }
    }
  }

  __break(1u);
LABEL_55:
  __break(1u);
}

uint64_t specialized LiteMessageServiceSession.inviteHandleMap(_:)(uint64_t a1)
{
  v1[27] = a1;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v1[28] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[29] = v3;
  unint64_t v4 = (*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[30] = swift_task_alloc(v4);
  v1[31] = swift_task_alloc(v4);
  uint64_t v5 = type metadata accessor for MainActor(0LL);
  v1[32] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v1[33] = v6;
  v1[34] = v7;
  return swift_task_switch(specialized LiteMessageServiceSession.inviteHandleMap(_:), v6, v7);
}

uint64_t specialized LiteMessageServiceSession.inviteHandleMap(_:)()
{
  uint64_t v69 = v0 + 184;
  uint64_t v70 = (uint64_t *)(v0 + 168);
  uint64_t v71 = (uint64_t *)(v0 + 208);
  uint64_t v72 = (void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 216);
  char v4 = *(_BYTE *)(v3 + 32);
  *(_BYTE *)(v0 + 336) = v4;
  uint64_t v5 = 1LL << v4;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  else {
    uint64_t v6 = -1LL;
  }
  unint64_t v7 = v6 & *(void *)(v3 + 64);
  swift_bridgeObjectRetain(v3);
  int64_t v8 = 0LL;
  uint64_t v9 = &_s10Foundation12NotificationV36_unconditionallyBridgeFromObjectiveCyACSo14NSNotificationCSgFZ_ptr;
  if (v7) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v16 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_47;
  }

  int64_t v17 = (unint64_t)((1LL << *(_BYTE *)(v0 + 336)) + 63) >> 6;
  if (v16 >= v17)
  {
    uint64_t v52 = *(void *)(v0 + 256);
    uint64_t v15 = *(void *)(v0 + 216);
LABEL_45:
    swift_release(v15);
    swift_release(v52);
    uint64_t v53 = *(void *)(v0 + 240);
    swift_task_dealloc(*(void *)(v0 + 248));
    swift_task_dealloc(v53);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v15 = *(void *)(v0 + 216);
  uint64_t v18 = v15 + 64;
  unint64_t v19 = *(void *)(v15 + 64 + 8 * v16);
  ++v8;
  if (!v19)
  {
    int64_t v8 = v16 + 1;
    if (v16 + 1 >= v17) {
      goto LABEL_44;
    }
    unint64_t v19 = *(void *)(v18 + 8 * v8);
    if (v19) {
      goto LABEL_21;
    }
    int64_t v8 = v16 + 2;
    if (v16 + 2 >= v17)
    {
LABEL_44:
      uint64_t v52 = *(void *)(v0 + 256);
      goto LABEL_45;
    }

    unint64_t v19 = *(void *)(v18 + 8 * v8);
    if (!v19)
    {
      int64_t v20 = v16 + 3;
      if (v20 < v17)
      {
        unint64_t v19 = *(void *)(v18 + 8 * v20);
        if (v19)
        {
          int64_t v8 = v20;
          goto LABEL_21;
        }

        while (1)
        {
          int64_t v8 = v20 + 1;
          if (__OFADD__(v20, 1LL)) {
            break;
          }
          if (v8 >= v17) {
            goto LABEL_44;
          }
          unint64_t v19 = *(void *)(v18 + 8 * v8);
          ++v20;
          if (v19) {
            goto LABEL_21;
          }
        }

{
  uint64_t v0;
  return swift_task_switch( specialized LiteMessageServiceSession.inviteHandleMap(_:),  *(void *)(*(void *)v0 + 264LL),  *(void *)(*(void *)v0 + 272LL));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  void *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_s *v11;
  os_log_type_t v12;
  BOOL v13;
  void *v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  _UNKNOWN **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  id v33;
  NSString v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_log_s *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;
  void *v50;
  id v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSSet v69;
  NSString v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  int64_t v84;
  uint64_t v85;
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = v0 + 168;
  uint64_t v77 = v0 + 184;
  char v4 = *(void **)(v0 + 320);
  uint64_t v3 = *(const void **)(v0 + 328);
  uint64_t v5 = *(_DWORD **)(v0 + 312);
  uint64_t v6 = *(void *)(v0 + 248);
  unint64_t v7 = *(void *)(v0 + 224);
  int64_t v8 = *(void *)(v0 + 232);

  _Block_release(v3);
  uint64_t v9 = Logger.donations.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, v9, v7);
  uint64_t v10 = swift_bridgeObjectRetain(v1);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  uint64_t v12 = static os_log_type_t.default.getter();
  unint64_t v13 = os_log_type_enabled(v11, v12);
  uint64_t v79 = v0 + 192;
  unint64_t v14 = *(void **)(v0 + 296);
  if (v13)
  {
    uint64_t v15 = swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v15 = 134217984;
    uint64_t v5 = *(_DWORD **)(v1 + 16);
    swift_bridgeObjectRelease(v1);
    *(void *)(v15 + 4) = v5;
    swift_bridgeObjectRelease(v1);
    _os_log_impl(&dword_0, v11, v12, "Completed inviting %ld handles", (uint8_t *)v15, 0xCu);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v1, 2LL);
  }

  uint64_t v80 = (uint64_t *)(v0 + 208);
  uint64_t v81 = (void *)(v0 + 200);

  (*(void (**)(void, void))(*(void *)(v0 + 232) + 8LL))(*(void *)(v0 + 248), *(void *)(v0 + 224));
  int64_t v16 = *(void *)(v0 + 280);
  int64_t v17 = *(void *)(v0 + 288);
  uint64_t v18 = &_s10Foundation12NotificationV36_unconditionallyBridgeFromObjectiveCyACSo14NSNotificationCSgFZ_ptr;
  uint64_t v83 = v0;
  uint64_t v78 = (uint64_t *)(v0 + 168);
  while (1)
  {
    if (v17)
    {
      uint64_t v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v23 = v22 | (v16 << 6);
      id v24 = *(void *)(v0 + 216);
      goto LABEL_23;
    }

    NSString v25 = v16 + 1;
    if (__OFADD__(v16, 1LL))
    {
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }

    uint64_t v26 = (unint64_t)((1LL << *(_BYTE *)(v0 + 336)) + 63) >> 6;
    if (v25 >= v26)
    {
      uint64_t v60 = *(void *)(v0 + 256);
      id v24 = *(void *)(v0 + 216);
LABEL_45:
      swift_release(v24);
      swift_release(v60);
      NSSet v61 = *(void *)(v0 + 240);
      swift_task_dealloc(*(void *)(v0 + 248));
      swift_task_dealloc(v61);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }

    id v24 = *(void *)(v0 + 216);
    uint64_t v27 = v24 + 64;
    uint64_t v28 = *(void *)(v24 + 64 + 8 * v25);
    ++v16;
    if (v28) {
      goto LABEL_22;
    }
    int64_t v16 = v25 + 1;
    if (v25 + 1 >= v26) {
      goto LABEL_44;
    }
    uint64_t v28 = *(void *)(v27 + 8 * v16);
    if (v28) {
      goto LABEL_22;
    }
    int64_t v16 = v25 + 2;
    if (v25 + 2 >= v26) {
      goto LABEL_44;
    }
    uint64_t v28 = *(void *)(v27 + 8 * v16);
    if (v28) {
      goto LABEL_22;
    }
    uint64_t v29 = v25 + 3;
    if (v29 >= v26)
    {
LABEL_44:
      uint64_t v60 = *(void *)(v0 + 256);
      goto LABEL_45;
    }

    uint64_t v28 = *(void *)(v27 + 8 * v29);
    if (!v28)
    {
      while (1)
      {
        int64_t v16 = v29 + 1;
        if (__OFADD__(v29, 1LL)) {
          goto LABEL_47;
        }
        if (v16 >= v26) {
          goto LABEL_44;
        }
        uint64_t v28 = *(void *)(v27 + 8 * v16);
        ++v29;
        if (v28) {
          goto LABEL_22;
        }
      }
    }

    int64_t v16 = v29;
LABEL_22:
    int64_t v17 = (v28 - 1) & v28;
    unint64_t v23 = __clz(__rbit64(v28)) + (v16 << 6);
LABEL_23:
    *(void *)(v0 + 280) = v16;
    *(void *)(v0 + 28_Block_object_dispose(va, 8) = v17;
    uint64_t v30 = (uint64_t *)(*(void *)(v24 + 48) + 16 * v23);
    uint64_t v31 = *v30;
    os_log_type_t v32 = v30[1];
    uint64_t v2 = *(void *)(*(void *)(v24 + 56) + 8 * v23);
    uint64_t v33 = objc_allocWithZone((Class)v18[367]);
    swift_bridgeObjectRetain_n(v32, 2LL);
    swift_bridgeObjectRetain(v2);
    uint64_t v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v32);
    uint64_t v5 = [v33 initWithUnprefixedURI:v34];
    *(void *)(v0 + 296) = v5;

    if (v5) {
      break;
    }
    id v84 = v16;
    uint64_t v36 = *(void *)(v0 + 232);
    uint64_t v35 = *(void *)(v0 + 240);
    uint64_t v37 = *(void *)(v0 + 224);
    uint64_t v38 = Logger.donations.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v35, v38, v37);
    swift_bridgeObjectRetain(v32);
    uint64_t v39 = swift_bridgeObjectRetain(v2);
    uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
    uint64_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v5 = (_DWORD *)swift_slowAlloc(22LL, -1LL);
      uint64_t v42 = swift_slowAlloc(32LL, -1LL);
      *uint64_t v80 = v42;
      *uint64_t v5 = 136315394;
      swift_bridgeObjectRetain(v32);
      *(void *)(v5 + 1) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, v80);
      swift_bridgeObjectRelease_n(v32, 3LL);
      *((_WORD *)v5 + 6) = 2048;
      if ((unint64_t)v2 >> 62)
      {
        if (v2 < 0) {
          uint64_t v46 = v2;
        }
        else {
          uint64_t v46 = v2 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v2);
        id v43 = _CocoaArrayWrapper.endIndex.getter(v46);
        swift_bridgeObjectRelease(v2);
      }

      else
      {
        id v43 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL));
      }

      uint64_t v44 = *(void *)(v0 + 232);
      uint64_t v82 = *(void *)(v0 + 240);
      id v45 = *(void *)(v83 + 224);
      swift_bridgeObjectRelease(v2);
      *(void *)((char *)v5 + 14) = v43;
      swift_bridgeObjectRelease(v2);
      _os_log_impl(&dword_0, v40, v41, "Failed to make IDSURI for %s, cannot donate %ld handles", (uint8_t *)v5, 0x16u);
      swift_arrayDestroy(v42, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1LL, -1LL);
      swift_slowDealloc(v5, -1LL, -1LL);

      uint64_t v0 = v83;
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v82, v45);
      uint64_t v18 = &_s10Foundation12NotificationV36_unconditionallyBridgeFromObjectiveCyACSo14NSNotificationCSgFZ_ptr;
    }

    else
    {
      int64_t v20 = *(void *)(v0 + 232);
      unint64_t v19 = *(void *)(v0 + 240);
      unint64_t v21 = *(void *)(v0 + 224);
      swift_bridgeObjectRelease_n(v2, 2LL);
      swift_bridgeObjectRelease_n(v32, 2LL);

      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    }

    int64_t v16 = v84;
  }

  swift_bridgeObjectRelease(v32);
  if (!((unint64_t)v2 >> 62))
  {
    uint64_t v47 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL));
    if (v47) {
      goto LABEL_34;
    }
LABEL_52:
    swift_bridgeObjectRelease(v2);
    unint64_t v50 = &_swiftEmptyArrayStorage;
LABEL_53:
    uint64_t v63 = [(id)objc_opt_self(IMOffGridModeInvitationManager) sharedInstance];
    *(void *)(v0 + 304) = v63;
    *(void *)(v0 + 184) = Set.init(minimumCapacity:)( v50[2],  &type metadata for String,  &protocol witness table for String);
    uint64_t v64 = v50[2];
    if (v64)
    {
      uint64_t v65 = v50 + 5;
      do
      {
        uint64_t v67 = *(v65 - 1);
        uint64_t v66 = *v65;
        swift_bridgeObjectRetain(*v65);
        specialized Set._Variant.insert(_:)(v78, v67, v66);
        swift_bridgeObjectRelease(*(void *)(v0 + 176));
        v65 += 2;
        --v64;
      }

      while (v64);
    }

    swift_bridgeObjectRelease(v50);
    uint64_t v68 = *(void *)(v0 + 184);
    v69.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
    *(NSSet *)(v0 + 312) = v69;
    swift_bridgeObjectRelease(v68);
    uint64_t v70 = [v5 unprefixedURI];
    if (!v70)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v72 = v71;
      uint64_t v70 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v72);
    }

    uint64_t v73 = v0 + 16;
    *(void *)(v0 + 320) = v70;
    *(void *)(v0 + 112) = closure #2 in LiteMessageServiceSession.inviteHandleMap(_:);
    *(void *)(v0 + 120) = 0LL;
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    *(void *)(v0 + 8_Block_object_dispose(va, 8) = 1107296256LL;
    *(void *)(v0 + 96) = thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@unowned Bool);
    *(void *)(v0 + 104) = &block_descriptor_16;
    int64_t v74 = _Block_copy((const void *)(v0 + 80));
    *(void *)(v0 + 32_Block_object_dispose(va, 8) = v74;
    *(void *)(v0 + 56) = v79;
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 24) = specialized LiteMessageServiceSession.inviteHandleMap(_:);
    uint64_t v75 = swift_continuation_init(v0 + 16, 0LL);
    *(void *)(v0 + 12_Block_object_dispose(va, 8) = _NSConcreteStackBlock;
    id v76 = (void *)(v0 + 128);
    v76[1] = 0x40000000LL;
    v76[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSSet) -> () with result type Set<String>;
    v76[3] = &block_descriptor_17;
    v76[4] = v75;
    [v63 batchShareOffGridModeToHandleIDs:v69.super.isa fromHandleID:v70 isContact:v74 completion:v76];
    return swift_continuation_await(v73);
  }

LABEL_47:
        __break(1u);
        goto LABEL_48;
      }

      goto LABEL_44;
    }
  }

    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }

  uint64_t v53 = [*(id *)(v0 + 64) recipient];
  if (!v53)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  uint64_t v54 = v53;
  id v55 = *(void *)(v0 + 176);
  uint64_t v56 = *(void *)(v0 + 72);
  unint64_t v57 = [v53 cachedOffGridMode];

  outlined init with copy of LiteMessageContext(v56, v55);
  if ((v57 & 1) != 0) {
    goto LABEL_21;
  }
  uint64_t v80 = *(void *)(v0 + 168);
  uint64_t v79 = *(void *)(v0 + 176);
  uint64_t v81 = *(void *)(v0 + 72);
  uint64_t v82 = *(void *)(v79 + *(int *)(*(void *)(v0 + 136) + 40LL));
  outlined destroy of LiteMessageContext(v79);
  outlined init with copy of LiteMessageContext(v81, v80);
  if (!v82) {
    goto LABEL_22;
  }
  uint64_t v83 = *(void *)(v0 + 168);
  id v84 = *(_BYTE *)(v83 + 48);
  outlined destroy of LiteMessageContext(v83);
  if ((v84 & 1) != 0) {
    goto LABEL_23;
  }
  uint64_t v85 = v44;
  uint64_t v86 = *(void *)(v0 + 160);
  uint64_t v87 = *(void *)(v0 + 128);
  uint64_t v88 = *(void *)(v0 + 88);
  uint64_t v89 = *(void *)(v0 + 96);
  uint64_t v91 = *(void **)(v0 + 64);
  uint64_t v90 = *(void *)(v0 + 72);
  uint64_t v92 = Logger.liteSession.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v89 + 16))(v87, v92, v88);
  outlined init with copy of LiteMessageContext(v90, v86);
  id v93 = (void *)Logger.logObject.getter(v91);
  unint64_t v94 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled((os_log_t)v93, v94))
  {
    v135 = *(void *)(v0 + 160);
    unint64_t v136 = *(void *)(v0 + 128);
    uint64_t v137 = *(void *)(v0 + 88);
    uint64_t v138 = *(void *)(v0 + 96);
    uint64_t v139 = *(void **)(v0 + 64);

    outlined destroy of LiteMessageContext(v135);
    (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v136, v137);
    uint64_t v52 = v0 + 24;
    goto LABEL_45;
  }

  uint64_t v146 = v94;
  log = (os_log_s *)v93;
  unsigned __int8 v95 = *(void **)(v0 + 64);
  uint64_t v96 = swift_slowAlloc(22LL, -1LL);
  id v144 = swift_slowAlloc(64LL, -1LL);
  v156[0] = v144;
  *(_DWORD *)uint64_t v96 = 136315394;
  uint64_t v97 = [v95 chatIdentifier];
  if (v97)
  {
    unint64_t v98 = v97;
    id v99 = *(uint64_t **)(v0 + 160);
    id v140 = *(void *)(v0 + 96);
    v141 = *(void *)(v0 + 88);
    int v142 = *(void *)(v0 + 128);
    v100 = *(void **)(v0 + 64);
    uint64_t v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(v97);
    id v103 = v102;

    *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v101, v103, v156);
    uint64_t v52 = v0 + 24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v96 + 4, v96 + 12);
    swift_bridgeObjectRelease(v103);

    *(_WORD *)(v96 + 12) = 2080;
    id v104 = *v99;
    unsigned __int8 v105 = v99[1];
    swift_bridgeObjectRetain(v105);
    *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v104, v105, v156);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v153, v96 + 14, v96 + 22);
    swift_bridgeObjectRelease(v105);
    id v106 = (uint64_t)v99;
    id v51 = v0 + 48;
    outlined destroy of LiteMessageContext(v106);
    _os_log_impl( &dword_0,  log,  v146,  "Downgrading chat: %s to iMessage Lite as we received a message while on-grid: %s",  (uint8_t *)v96,  0x16u);
    swift_arrayDestroy(v144, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v144, -1LL, -1LL);
    swift_slowDealloc(v96, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v142, v141);
    uint64_t v48 = &selRef_sentDowngradeRequestToHandleID_fromID_;
LABEL_45:
    objc_msgSend(*(id *)(v0 + 64), "setWasDowngradedToLiteMessage:", 1, v140, v141, v142);
    uint64_t v44 = v85;
    goto LABEL_23;
  }

LABEL_48:
  if (v2 < 0) {
    NSString v62 = v2;
  }
  else {
    NSString v62 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v2);
  uint64_t v47 = _CocoaArrayWrapper.endIndex.getter(v62);
  swift_bridgeObjectRelease(v2);
  if (!v47) {
    goto LABEL_52;
  }
LABEL_34:
  LiteMessageServiceSession *v81 = &_swiftEmptyArrayStorage;
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  v47 & ~(v47 >> 63),  0);
  if ((v47 & 0x8000000000000000LL) == 0)
  {
    unint64_t v49 = 0LL;
    unint64_t v50 = (void *)*v81;
    uint64_t v85 = v47;
    do
    {
      if ((v2 & 0xC000000000000001LL) != 0) {
        id v51 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v49, v2);
      }
      else {
        id v51 = *(id *)(v2 + 8 * v49 + 32);
      }
      uint64_t v52 = v51;
      uint64_t v53 = objc_msgSend(v51, "unprefixedURI", v77);
      uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
      uint64_t v56 = v55;

      LiteMessageServiceSession *v81 = v50;
      uint64_t v58 = v50[2];
      unint64_t v57 = v50[3];
      if (v58 >= v57 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v58 + 1, 1);
        unint64_t v50 = (void *)*v81;
      }

      ++v49;
      v50[2] = v58 + 1;
      uint64_t v59 = (char *)&v50[2 * v58];
      *((void *)v59 + 4) = v54;
      *((void *)v59 + 5) = v56;
      uint64_t v0 = v83;
    }

    while (v85 != v49);
    swift_bridgeObjectRelease(v2);
    goto LABEL_53;
  }

  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t specialized LiteMessageServiceSession.familyHandles.getter()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  v0[26] = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  v0[27] = v2;
  unint64_t v3 = (*(void *)(v2 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v0[28] = swift_task_alloc(v3);
  v0[29] = swift_task_alloc(v3);
  uint64_t v4 = type metadata accessor for MainActor(0LL);
  v0[30] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v0[31] = v5;
  v0[32] = v6;
  return swift_task_switch(specialized LiteMessageServiceSession.familyHandles.getter, v5, v6);
}

{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t v1 = v0 + 2;
  uint64_t v2 = [objc_allocWithZone(FAFetchFamilyCircleRequest) init];
  v0[33] = v2;
  v0[7] = v0 + 21;
  v0[2] = v0;
  v0[3] = specialized LiteMessageServiceSession.familyHandles.getter;
  unint64_t v3 = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v4 = v0 + 10;
  v4[1] = 0x40000000LL;
  v4[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned FAFamilyCircle?, @unowned NSError?) -> () with result type FAFamilyCircle;
  v4[3] = &block_descriptor_18;
  v4[4] = v3;
  [v2 startRequestWithCompletionHandler:v4];
  return swift_continuation_await(v1);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 272) = v2;
  if (v2) {
    unint64_t v3 = specialized LiteMessageServiceSession.familyHandles.getter;
  }
  else {
    unint64_t v3 = specialized LiteMessageServiceSession.familyHandles.getter;
  }
  return swift_task_switch(v3, *(void *)(v1 + 248), *(void *)(v1 + 256));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_s *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v1 = *(void *)(v0 + 272);
  unint64_t v3 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v5 = swift_release(*(void *)(v0 + 240));
  swift_willThrow(v5);
  uint64_t v6 = Logger.donations.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v4);
  swift_errorRetain(v1);
  unint64_t v7 = swift_errorRetain(v1);
  int64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  uint64_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = *(void *)(v0 + 272);
    unint64_t v23 = *(void *)(v0 + 216);
    id v24 = *(void *)(v0 + 208);
    NSString v25 = *(void *)(v0 + 224);
    uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v26 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    swift_getErrorValue(v10, v0 + 192, v0 + 120);
    unint64_t v13 = Error.localizedDescription.getter(*(void *)(v0 + 128), *(void *)(v0 + 136));
    uint64_t v15 = v14;
    *(void *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease(v15);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl(&dword_0, v8, v9, "Failed to fetch family circle: %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v24);
  }

  else
  {
    int64_t v16 = *(void *)(v0 + 272);
    uint64_t v18 = *(void *)(v0 + 216);
    int64_t v17 = *(void *)(v0 + 224);
    unint64_t v19 = *(void *)(v0 + 208);
    swift_errorRelease(v16);
    swift_errorRelease(v16);

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  }

  int64_t v20 = *(void *)(v0 + 272);

  swift_errorRelease(v20);
  unint64_t v21 = *(void *)(v0 + 224);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void *))(v0 + 8))(&_swiftEmptyArrayStorage);
}

void specialized LiteMessageServiceSession.familyHandles.getter()
{
  *(void *)(v0 + 184) = &_swiftEmptyArrayStorage;
  uint64_t v1 = *(void **)(v0 + 168);
  id v2 = [v1 members];
  uint64_t v3 = type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for FAFamilyMember,  &OBJC_CLASS___FAFamilyMember_ptr);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if ((unint64_t)v4 >> 62)
  {
    if (v4 < 0) {
      uint64_t v10 = v4;
    }
    else {
      uint64_t v10 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v4);
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v4);
    if (!v5) {
      goto LABEL_13;
    }
  }

  else
  {
    uint64_t v5 = *(void *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFF8LL));
    if (!v5) {
      goto LABEL_13;
    }
  }

  if (v5 < 1)
  {
    __break(1u);
    return;
  }

  uint64_t v6 = 0LL;
  do
  {
    if ((v4 & 0xC000000000000001LL) != 0) {
      id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4);
    }
    else {
      id v7 = *(id *)(v4 + 8 * v6 + 32);
    }
    int64_t v8 = v7;
    ++v6;
    uint64_t v9 = FAFamilyMember.allKnownHandles.getter();
    specialized Array.append<A>(contentsOf:)(v9);
  }

  while (v5 != v6);
LABEL_13:
  uint64_t v39 = v1;
  uint64_t v11 = *(void *)(v0 + 208);
  uint64_t v12 = *(void *)(v0 + 232);
  uint64_t v13 = *(void *)(v0 + 216);
  swift_bridgeObjectRelease(v4);
  uint64_t v14 = Logger.donations.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v14, v11);
  uint64_t v15 = *(void *)(v0 + 184);
  swift_bridgeObjectRetain(v15);
  int64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    unint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)unint64_t v19 = 134217984;
    *(void *)(v0 + 200) = *(void *)(v15 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease(v15);
    _os_log_impl(&dword_0, v17, v18, "Got %ld family contacts from family circle", v19, 0xCu);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease(v15);
  }

  (*(void (**)(void, void))(*(void *)(v0 + 216) + 8LL))(*(void *)(v0 + 232), *(void *)(v0 + 208));
  swift_beginAccess(v0 + 184, v0 + 144, 0LL, 0LL);
  uint64_t v20 = *(void *)(v0 + 184);
  uint64_t v21 = *(void *)(v20 + 16);
  if (v21)
  {
    swift_bridgeObjectRetain_n(*(void *)(v0 + 184), 2LL);
    uint64_t v22 = (void *)(v20 + 40);
    unint64_t v23 = (char *)&_swiftEmptyArrayStorage;
    do
    {
      uint64_t v24 = *v22;
      swift_bridgeObjectRetain(*v22);
      NSString v25 = String._bridgeToObjectiveC()();
      id v26 = (id)IMChatCanonicalIDSIDsForAddress(v25);

      if (v26
        && (static String._unconditionallyBridgeFromObjectiveC(_:)(v26),
            uint64_t v28 = v27,
            v26,
            NSString v29 = String._bridgeToObjectiveC()(),
            swift_bridgeObjectRelease(v28),
            id v30 = objc_msgSend(v29, "_stripFZIDPrefix", v39),
            v29,
            v30))
      {
        uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
        uint64_t v33 = v32;

        swift_bridgeObjectRelease(v24);
        if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0) {
          unint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v23 + 2) + 1LL,  1,  v23);
        }
        unint64_t v35 = *((void *)v23 + 2);
        unint64_t v34 = *((void *)v23 + 3);
        if (v35 >= v34 >> 1) {
          unint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v34 > 1),  v35 + 1,  1,  v23);
        }
        *((void *)v23 + 2) = v35 + 1;
        uint64_t v36 = &v23[16 * v35];
        *((void *)v36 + 4) = v31;
        *((void *)v36 + 5) = v33;
      }

      else
      {
        swift_bridgeObjectRelease(v24);
      }

      v22 += 2;
      --v21;
    }

    while (v21);
    uint64_t v37 = *(void **)(v0 + 264);
    swift_bridgeObjectRelease(v20);
  }

  else
  {
    uint64_t v37 = *(void **)(v0 + 264);
    swift_bridgeObjectRetain(*(void *)(v0 + 184));
    unint64_t v23 = (char *)&_swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease_n(v20, 2LL);
  uint64_t v38 = *(void *)(v0 + 224);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v38);
  (*(void (**)(char *))(v0 + 8))(v23);
}

unint64_t lazy protocol witness table accessor for type IDSURI and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type IDSURI and conformance NSObject;
  if (!lazy protocol witness table cache variable for type IDSURI and conformance NSObject)
  {
    uint64_t v1 = type metadata accessor for IMDHandle( 255LL,  &lazy cache variable for type metadata for IDSURI,  &OBJC_CLASS___IDSURI_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IDSURI and conformance NSObject);
  }

  return result;
}

uint64_t sub_FE88()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_4D954);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in LiteMessageServiceSession.familyContactsDidChange();
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu))( a1,  v4);
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t one-time initialization function for incomingMessageQueue()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.BufferingPolicy);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for AsyncSerialQueue(0LL);
  __swift_allocate_value_buffer(v7, incomingMessageQueue);
  __swift_project_value_buffer(v7, (uint64_t)incomingMessageQueue);
  uint64_t v8 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v6, 1LL, 1LL, v8);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v3,  enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:),  v0);
  return AsyncSerialQueue.init(priority:bufferingPolicy:)(v6, v3);
}

uint64_t LiteMessageServiceSession.messenger(_:incomingMessage:context:clientErrorAcknowledgementBlock:)( uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  return specialized LiteMessageServiceSession.messenger(_:incomingMessage:context:clientErrorAcknowledgementBlock:)( a2,  a3,  a4,  a5);
}

uint64_t closure #1 in LiteMessageServiceSession.messenger(_:incomingMessage:context:clientErrorAcknowledgementBlock:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[11] = a5;
  v6[12] = a6;
  v6[9] = a3;
  v6[10] = a4;
  uint64_t v10 = type metadata accessor for Logger(0LL);
  v6[13] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v6[14] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[15] = swift_task_alloc(v12);
  v6[16] = swift_task_alloc(v12);
  uint64_t v13 = type metadata accessor for MainActor(0LL);
  v6[17] = v13;
  v6[18] = static MainActor.shared.getter(v13);
  uint64_t v14 = (void *)swift_task_alloc(dword_4DB7C);
  v6[19] = v14;
  *uint64_t v14 = v6;
  v14[1] = closure #1 in LiteMessageServiceSession.messenger(_:incomingMessage:context:clientErrorAcknowledgementBlock:);
  return LiteMessageServiceSession.processReceivedEncryptedMessage(_:identifier:)(a2, a3, a4);
}

uint64_t closure #1 in LiteMessageServiceSession.messenger(_:incomingMessage:context:clientErrorAcknowledgementBlock:)()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 152LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 136LL);
  *(void *)(*(void *)v1 + 160LL) = v0;
  swift_task_dealloc(v2);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  if (v0) {
    uint64_t v6 = closure #1 in LiteMessageServiceSession.messenger(_:incomingMessage:context:clientErrorAcknowledgementBlock:);
  }
  else {
    uint64_t v6 = closure #1 in LiteMessageServiceSession.messenger(_:incomingMessage:context:clientErrorAcknowledgementBlock:);
  }
  return swift_task_switch(v6, v5, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_log_s *v7;
  os_log_type_t v8;
  unint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 80);
  swift_release(*(void *)(v0 + 144));
  uint64_t v5 = Logger.liteSession.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v5, v2);
  uint64_t v6 = swift_bridgeObjectRetain_n(v4, 2LL);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  uint64_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    os_log_type_t v18 = *(void *)(v0 + 112);
    unint64_t v19 = *(void *)(v0 + 104);
    uint64_t v20 = *(void *)(v0 + 128);
    uint64_t v9 = *(void *)(v0 + 80);
    uint64_t v10 = *(void *)(v0 + 72);
    uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    unint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v21 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    swift_bridgeObjectRetain(v9);
    *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease_n(v9, 3LL);
    _os_log_impl(&dword_0, v7, v8, "Successfully processed received message %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v20, v19);
  }

  else
  {
    uint64_t v13 = *(void *)(v0 + 128);
    uint64_t v14 = *(void *)(v0 + 104);
    uint64_t v15 = *(void *)(v0 + 112);
    swift_bridgeObjectRelease_n(*(void *)(v0 + 80), 2LL);

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  }

  (*(void (**)(void))(v0 + 88))(0LL);
  uint64_t v16 = *(void *)(v0 + 120);
  swift_task_dealloc(*(void *)(v0 + 128));
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_s *v8;
  os_log_type_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(void);
  void *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 80);
  swift_release(*(void *)(v0 + 144));
  uint64_t v6 = Logger.liteSession.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v4);
  swift_bridgeObjectRetain(v5);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v5);
  uint64_t v7 = swift_errorRetain(v1);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  uint64_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = *(void *)(v0 + 160);
    uint64_t v27 = *(void *)(v0 + 112);
    uint64_t v28 = *(void *)(v0 + 104);
    NSString v29 = *(void *)(v0 + 120);
    unint64_t v12 = *(void *)(v0 + 72);
    uint64_t v11 = *(void *)(v0 + 80);
    uint64_t v13 = swift_slowAlloc(22LL, -1LL);
    uint64_t v14 = swift_slowAlloc(64LL, -1LL);
    id v30 = v14;
    *(_DWORD *)uint64_t v13 = 136315394;
    swift_bridgeObjectRetain(v11);
    *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease_n(v11, 3LL);
    *(_WORD *)(v13 + 12) = 2080;
    swift_getErrorValue(v10, v0 + 48, v0 + 16);
    uint64_t v15 = Error.localizedDescription.getter(*(void *)(v0 + 24), *(void *)(v0 + 32));
    int64_t v17 = v16;
    *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease(v17);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl(&dword_0, v8, v9, "Failed to process received message %s: %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v29, v28);
  }

  else
  {
    os_log_type_t v18 = *(void *)(v0 + 160);
    uint64_t v20 = *(void *)(v0 + 112);
    unint64_t v19 = *(void *)(v0 + 120);
    uint64_t v21 = *(void *)(v0 + 104);
    swift_bridgeObjectRelease_n(*(void *)(v0 + 80), 2LL);
    swift_errorRelease(v18);
    swift_errorRelease(v18);

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  }

  uint64_t v22 = *(void *)(v0 + 160);
  unint64_t v23 = *(void (**)(void))(v0 + 88);
  uint64_t v24 = (void *)_convertErrorToNSError(_:)(v22);
  v23();

  swift_errorRelease(v22);
  NSString v25 = *(void *)(v0 + 120);
  swift_task_dealloc(*(void *)(v0 + 128));
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()( uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v3 = 0LL;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

void LiteMessageServiceSession.messenger(_:incomingMessage:context:clientAcknowledgementBlock:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = swift_allocObject(&unk_49440, 32LL, 7LL);
  *(void *)(v11 + 16) = a4;
  *(void *)(v11 + 24) = a5;
  v14[4] = partial apply for closure #1 in LiteMessageServiceSession.messenger(_:incomingMessage:context:clientAcknowledgementBlock:);
  uint64_t v15 = v11;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256LL;
  v14[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  v14[3] = &block_descriptor_0;
  unint64_t v12 = _Block_copy(v14);
  uint64_t v13 = v15;
  swift_retain(a5);
  swift_release(v13);
  [v5 messenger:a1 incomingMessage:a2 context:a3 clientErrorAcknowledgementBlock:v12];
  _Block_release(v12);
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ()(uint64_t a1, void *a2)
{
  id v4 = *(void (**)(void *))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4(a2);
  swift_release(v3);
}

uint64_t LiteMessageServiceSession.messenger(_:incomingSummaryMessage:context:clientAcknowledgementBlock:)( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  type metadata accessor for MainActor(0LL);
  swift_unknownObjectRetain(a2, v8);
  id v9 = v2;
  uint64_t v10 = static MainActor.shared.getter(v9);
  uint64_t v11 = (void *)swift_allocObject(&unk_49490, 48LL, 7LL);
  v11[2] = v10;
  v11[3] = &protocol witness table for MainActor;
  v11[4] = a2;
  v11[5] = v9;
  uint64_t v12 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm( (uint64_t)v6,  (uint64_t)&async function pointer to partial apply for closure #1 in LiteMessageServiceSession.messenger(_:incomingSummaryMessage:context:clientAcknowledgementBlock:),  (uint64_t)v11,  (uint64_t)&unk_49620,  (uint64_t)&type metadata for () + 8,  (uint64_t)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATu_0);
  return swift_release(v12);
}

uint64_t closure #1 in LiteMessageServiceSession.messenger(_:incomingSummaryMessage:context:clientAcknowledgementBlock:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v5[8] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[9] = v7;
  v5[10] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for MainActor(0LL);
  v5[11] = static MainActor.shared.getter(v8);
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  return swift_task_switch( closure #1 in LiteMessageServiceSession.messenger(_:incomingSummaryMessage:context:clientAcknowledgementBlock:),  v9,  v10);
}

void closure #1 in LiteMessageServiceSession.messenger(_:incomingSummaryMessage:context:clientAcknowledgementBlock:)()
{
  uint64_t v1 = *(void **)(v0 + 48);
  swift_release(*(void *)(v0 + 88));
  id v2 = [v1 pendingCounts];
  uint64_t v3 = type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IDSURI,  &OBJC_CLASS___IDSURI_ptr);
  uint64_t v4 = type metadata accessor for IMDHandle( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
  unint64_t v5 = lazy protocol witness table accessor for type IDSURI and conformance NSObject();
  uint64_t v68 = v4;
  uint64_t v69 = v3;
  int64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, v3, v4, v5);

  if ((v6 & 0xC000000000000001LL) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v8 = __CocoaDictionary.makeIterator()(v7);
    int64_t v71 = 0LL;
    uint64_t v9 = 0LL;
    unint64_t v10 = 0LL;
    int64_t v6 = v8 | 0x8000000000000000LL;
  }

  else
  {
    uint64_t v11 = -1LL << *(_BYTE *)(v6 + 32);
    int64_t v71 = v6 + 64;
    uint64_t v12 = ~v11;
    uint64_t v13 = -v11;
    if (v13 < 64) {
      uint64_t v14 = ~(-1LL << v13);
    }
    else {
      uint64_t v14 = -1LL;
    }
    unint64_t v10 = v14 & *(void *)(v6 + 64);
    uint64_t v9 = v12;
  }

  uint64_t v15 = 0LL;
  uint64_t v66 = (uint64_t *)(v72 + 24);
  uint64_t v67 = (id *)(v72 + 16);
  uint64_t v64 = (void *)(v72 + 40);
  uint64_t v65 = (id *)(v72 + 32);
  uint64_t v16 = *(void *)(v72 + 72);
  int64_t v70 = (unint64_t)(v9 + 64) >> 6;
  int64_t v62 = v6;
  uint64_t v63 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v61 = v16;
  if ((v6 & 0x8000000000000000LL) == 0) {
    goto LABEL_16;
  }
LABEL_13:
  uint64_t v19 = __CocoaDictionary.Iterator.next()();
  if (v19)
  {
    uint64_t v21 = v19;
    uint64_t v22 = v20;
    uint64_t *v66 = v19;
    swift_unknownObjectRetain(v19, v20);
    swift_dynamicCast(v67, v66, v63, v69, 7LL);
    id v23 = *v67;
    swift_unknownObjectRelease(v21);
    *uint64_t v64 = v22;
    swift_unknownObjectRetain(v22, v24);
    swift_dynamicCast(v65, v64, v63, v68, 7LL);
    id v25 = *v65;
    swift_unknownObjectRelease(v22);
    uint64_t v26 = v15;
    uint64_t v27 = v10;
    while (v23)
    {
      unint64_t v73 = v27;
      uint64_t v74 = v26;
      uint64_t v34 = v16;
      id v35 = [v25 longLongValue];
      id v36 = [v23 unprefixedURI];
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      unint64_t v39 = v38;

      id v40 = LiteMessageServiceSession.joinedChat(with:)(v37, v39);
      if (v40)
      {
        uint64_t v41 = v40;
        swift_bridgeObjectRelease(v39);
        [v41 updatePendingIncomingSatelliteMessageCount:v35];
      }

      else
      {
        uint64_t v42 = *(void *)(v72 + 80);
        uint64_t v43 = *(void *)(v72 + 64);
        uint64_t v44 = Logger.liteSession.unsafeMutableAddressor();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v42, v44, v43);
        swift_bridgeObjectRetain(v39);
        uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
        os_log_type_t v47 = static os_log_type_t.error.getter();
        BOOL v48 = os_log_type_enabled(v46, v47);
        uint64_t v49 = *(void *)(v72 + 80);
        uint64_t v50 = *(void *)(v72 + 64);
        if (v48)
        {
          uint64_t v17 = swift_slowAlloc(12LL, -1LL);
          uint64_t v18 = swift_slowAlloc(32LL, -1LL);
          uint64_t v75 = v18;
          *(_DWORD *)uint64_t v17 = 136315138;
          swift_bridgeObjectRetain(v39);
          *(void *)(v17 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, &v75);
          swift_bridgeObjectRelease_n(v39, 3LL);
          _os_log_impl( &dword_0,  v46,  v47,  "Failed to find or join chat for handle %s to assign pending message count",  (uint8_t *)v17,  0xCu);
          swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v18, -1LL, -1LL);
          int64_t v6 = v62;
          swift_slowDealloc(v17, -1LL, -1LL);

          uint64_t v16 = v61;
          (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v49, v50);
          unint64_t v10 = v73;
          uint64_t v15 = v74;
          if (v62 < 0) {
            goto LABEL_13;
          }
          goto LABEL_16;
        }

        swift_bridgeObjectRelease_n(v39, 2LL);

        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v49, v50);
      }

      unint64_t v10 = v73;
      uint64_t v15 = v74;
      uint64_t v16 = v34;
      if (v6 < 0) {
        goto LABEL_13;
      }
LABEL_16:
      if (v10)
      {
        uint64_t v27 = (v10 - 1) & v10;
        unint64_t v28 = __clz(__rbit64(v10)) | (v15 << 6);
        uint64_t v26 = v15;
      }

      else
      {
        int64_t v29 = v15 + 1;
        if (__OFADD__(v15, 1LL))
        {
          __break(1u);
          goto LABEL_44;
        }

        if (v29 >= v70) {
          break;
        }
        unint64_t v30 = *(void *)(v71 + 8 * v29);
        uint64_t v26 = v15 + 1;
        if (!v30)
        {
          uint64_t v26 = v15 + 2;
          if (v15 + 2 >= v70) {
            break;
          }
          unint64_t v30 = *(void *)(v71 + 8 * v26);
          if (!v30)
          {
            uint64_t v26 = v15 + 3;
            if (v15 + 3 >= v70) {
              break;
            }
            unint64_t v30 = *(void *)(v71 + 8 * v26);
            if (!v30)
            {
              uint64_t v26 = v15 + 4;
              if (v15 + 4 >= v70) {
                break;
              }
              unint64_t v30 = *(void *)(v71 + 8 * v26);
              if (!v30)
              {
                uint64_t v31 = v15 + 5;
                while (v70 != v31)
                {
                  unint64_t v30 = *(void *)(v71 + 8 * v31++);
                  if (v30)
                  {
                    uint64_t v26 = v31 - 1;
                    goto LABEL_31;
                  }
                }

                break;
              }
            }
          }
        }

LABEL_31:
        uint64_t v27 = (v30 - 1) & v30;
        unint64_t v28 = __clz(__rbit64(v30)) + (v26 << 6);
      }

      uint64_t v32 = 8 * v28;
      uint64_t v33 = *(void **)(*(void *)(v6 + 56) + v32);
      id v23 = *(id *)(*(void *)(v6 + 48) + v32);
      id v25 = v33;
    }
  }

  outlined consume of [IDSURI : NSNumber].Iterator._Variant(v6);
  id v51 = [(id)objc_opt_self(IMDBadgeUtilities) sharedInstance];
  if (v51)
  {
    uint64_t v52 = v51;
    uint64_t v53 = *(void **)(v72 + 56);
    id v54 = [*(id *)(v72 + 48) totalPendingMessagesCount];
    id v55 = [v54 integerValue];

    id v56 = [v53 service];
    NSString v57 = [v56 internalName];

    if (!v57)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v59 = v58;
      NSString v57 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v59);
    }

    uint64_t v60 = *(void *)(v72 + 80);
    [v52 updateBadgeForPendingSatelliteMessagesIfNeeded:v55 onService:v57];

    swift_task_dealloc(v60);
    (*(void (**)(void))(v72 + 8))();
  }

  else
  {
LABEL_44:
    __break(1u);
  }

    uint64_t v63 = 0LL;
    uint64_t v15 = *v13;
    id v25 = v109;
LABEL_20:

    uint64_t v65 = *(void *)(v0 + 280);
    uint64_t v64 = *(void *)(v0 + 288);
    uint64_t v67 = *(void *)(v0 + 264);
    uint64_t v66 = *(void *)(v0 + 272);
    (*(void (**)(void, void))(*(void *)(v0 + 256) + 8LL))(*v25, *(void *)(v0 + 248));
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    uint64_t v59 = *(uint64_t (**)(uint64_t))(v0 + 8);
    uint64_t v60 = v63;
    return v59(v60);
  }

  if (v23 == (_BYTE *)&dword_0 + 1)
  {
    uint64_t v24 = *(void **)(v0 + 320);
    id v25 = (void *)(v0 + 288);
    uint64_t v26 = *(void *)(v0 + 288);
    uint64_t v27 = *(void *)(v0 + 248);
    unint64_t v28 = *(void *)(v0 + 256);
    int64_t v29 = Logger.availability.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v26, v29, v27);
    unint64_t v30 = (os_log_s *)Logger.logObject.getter(v24);
    uint64_t v31 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = *(void **)(v0 + 320);
      uint64_t v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      log = v30;
      uint64_t v34 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v33 = 138412290;
      *(void *)(v0 + 192) = v32;
      id v35 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v33 + 4, v33 + 12);
      *uint64_t v34 = v32;

      _os_log_impl(&dword_0, log, v31, "%@ available for iMessage Lite", v33, 0xCu);
      id v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v34, 1LL, v36);
      uint64_t v37 = v34;
      id v25 = (void *)(v0 + 288);
      swift_slowDealloc(v37, -1LL, -1LL);
      swift_slowDealloc(v33, -1LL, -1LL);

      uint64_t v13 = (id *)(v0 + 328);
    }

    else
    {
      v100 = *(void **)(v0 + 320);
      id v99 = *(void **)(v0 + 328);
    }

    uint64_t v15 = *v13;
    uint64_t v63 = 1LL;
    goto LABEL_20;
  }

  id v93 = *(void **)(v0 + 320);
  uint64_t v50 = *(void **)(v0 + 328);
  unsigned __int8 v95 = *(void *)(v0 + 200);
  unint64_t v94 = *(void *)(v0 + 208);
  uint64_t v96 = lazy protocol witness table accessor for type LiteMessageReachabilityError and conformance LiteMessageReachabilityError();
  swift_allocError(&type metadata for LiteMessageReachabilityError, v96, 0LL, 0LL);
  *(void *)uint64_t v97 = v95;
  *(void *)(v97 + _Block_object_dispose(va, 8) = v94;
  *(_BYTE *)(v97 + 16) = 2;
  swift_bridgeObjectRetain(v94);
  swift_willThrow(v98);

LABEL_17:
  id v56 = *(void *)(v0 + 280);
  uint64_t v58 = *(void *)(v0 + 264);
  NSString v57 = *(void *)(v0 + 272);
  swift_task_dealloc(*(void *)(v0 + 288));
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  uint64_t v59 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v60 = 0LL;
  return v59(v60);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for TaskPriority(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a1, 1LL, v12) == 1)
  {
    outlined destroy of TaskPriority?(a1, &demangling cache variable for type metadata for TaskPriority?);
    uint64_t v14 = 7168LL;
    uint64_t v15 = *(void *)(a3 + 16);
    if (v15)
    {
LABEL_3:
      uint64_t v16 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v15);
      swift_unknownObjectRetain(v15, v18);
      uint64_t v19 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      uint64_t v21 = v20;
      swift_unknownObjectRelease(v15);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v22 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
    uint64_t v14 = v22 | 0x1C00LL;
    uint64_t v15 = *(void *)(a3 + 16);
    if (v15) {
      goto LABEL_3;
    }
  }

  uint64_t v19 = 0LL;
  uint64_t v21 = 0LL;
LABEL_6:
  uint64_t v23 = swift_allocObject(a4, 32LL, 7LL);
  *(void *)(v23 + 16) = a2;
  *(void *)(v23 + 24) = a3;
  if (v21 | v19)
  {
    v26[0] = 0LL;
    v26[1] = 0LL;
    uint64_t v24 = v26;
    v26[2] = v19;
    v26[3] = v21;
  }

  else
  {
    uint64_t v24 = 0LL;
  }

  return swift_task_create(v14, v24, a5, a6, v23);
}

uint64_t LiteMessageServiceSession.messenger(_:receivedIncomingDeliveryReceiptForIdentifier:from:context:)( uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  return specialized LiteMessageServiceSession.messenger(_:receivedIncomingDeliveryReceiptForIdentifier:from:context:)( a2,  a3,  a4);
}

uint64_t closure #1 in LiteMessageServiceSession.messenger(_:receivedIncomingDeliveryReceiptForIdentifier:from:context:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  v6[2] = a1;
  v6[3] = a4;
  uint64_t v7 = type metadata accessor for Date(0LL);
  v6[6] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[7] = v8;
  v6[8] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for MainActor(0LL);
  v6[9] = static MainActor.shared.getter(v9);
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  return swift_task_switch( closure #1 in LiteMessageServiceSession.messenger(_:receivedIncomingDeliveryReceiptForIdentifier:from:context:),  v10,  v11);
}

uint64_t closure #1 in LiteMessageServiceSession.messenger(_:receivedIncomingDeliveryReceiptForIdentifier:from:context:)()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  unint64_t v5 = *(_BYTE **)(v0 + 16);
  uint64_t v4 = *(void **)(v0 + 24);
  swift_release(*(void *)(v0 + 72));
  NSString v6 = String._bridgeToObjectiveC()();
  static Date.now.getter();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  LOBYTE(v2) = [v4 didReceiveMessageDeliveryReceiptForMessageID:v6 date:isa];

  *unint64_t v5 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LiteMessageServiceSession.messenger(_:incomingServiceUpdateMessage:context:clientAcknowledgementBlock:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized LiteMessageServiceSession.messenger(_:incomingServiceUpdateMessage:context:clientAcknowledgementBlock:)( a2,  a4,  a5);
}

uint64_t closure #1 in LiteMessageServiceSession.messenger(_:incomingServiceUpdateMessage:context:clientAcknowledgementBlock:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[6] = a8;
  v8[7] = v14;
  v8[4] = a6;
  v8[5] = a7;
  v8[2] = a4;
  v8[3] = a5;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v8[8] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for MainActor(0LL);
  v8[9] = static MainActor.shared.getter(v10);
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter(v10, &protocol witness table for MainActor);
  return swift_task_switch( closure #1 in LiteMessageServiceSession.messenger(_:incomingServiceUpdateMessage:context:clientAcknowledgementBlock:),  v11,  v12);
}

uint64_t closure #1 in LiteMessageServiceSession.messenger(_:incomingServiceUpdateMessage:context:clientAcknowledgementBlock:)()
{
  uint64_t v1 = *(void **)(v0 + 24);
  swift_release(*(void *)(v0 + 72));
  uint64_t v2 = (char *)[v1 preferredServiceType];
  id v3 = [v1 expirationDate];
  if (v3)
  {
    uint64_t v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v3);

    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v5 = 1LL;
  }

  uint64_t v6 = *(void *)(v0 + 64);
  unint64_t v7 = *(void *)(v0 + 40);
  uint64_t v8 = *(void (**)(uint64_t))(v0 + 48);
  uint64_t v9 = *(void *)(v0 + 32);
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v6, v5, 1LL, v10);
  LiteMessageServiceSession.processPreferredServiceType(_:for:expiresAfter:)(v2, v9, v7, v6);
  uint64_t v11 = outlined destroy of TaskPriority?(v6, &demangling cache variable for type metadata for Date?);
  v8(v11);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSb_TG5(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  id v3 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 24) = v3;
  *id v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSb_TG5TQ0_;
  return v5(v2 + 32);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSb_TG5TQ0_()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(_BYTE **)(*v0 + 16);
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 24));
  *uint64_t v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t specialized LiteMessageServiceSession.messenger(_:incomingMessage:context:clientErrorAcknowledgementBlock:)( void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v76 = a3;
  uint64_t v7 = type metadata accessor for AsyncSerialQueue(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v64[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = &v64[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  id v15 = [a2 identifier];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v74 = v17;
  uint64_t v75 = v16;

  uint64_t v18 = Logger.liteSession.unsafeMutableAddressor();
  uint64_t v72 = v12;
  uint64_t v73 = v11;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v14, v18, v11);
  id v19 = a1;
  id v20 = a2;
  id v21 = v19;
  id v22 = v20;
  id v23 = v21;
  id v24 = v22;
  id v25 = v23;
  id v26 = v24;
  int64_t v71 = v14;
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v28 = static os_log_type_t.default.getter();
  int v29 = v28;
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v30 = swift_slowAlloc(58LL, -1LL);
    uint64_t v69 = a4;
    uint64_t v31 = v30;
    uint64_t v67 = swift_slowAlloc(96LL, -1LL);
    uint64_t v79 = v67;
    *(_DWORD *)uint64_t v31 = 136316418;
    id v32 = [v26 identifier];
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    uint64_t v68 = v10;
    uint64_t v34 = v33;
    os_log_t v66 = v27;
    unint64_t v36 = v35;

    uint64_t v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v36, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v31 + 4, v31 + 12);

    swift_bridgeObjectRelease(v36);
    *(_WORD *)(v31 + 12) = 2080;
    id v37 = [v25 senderURI];
    id v38 = [v37 unprefixedURI];

    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    uint64_t v70 = v7;
    unint64_t v41 = v40;

    uint64_t v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v31 + 14, v31 + 22);

    swift_bridgeObjectRelease(v41);
    *(_WORD *)(v31 + 22) = 2080;
    id v42 = [v25 recipientURI];
    id v43 = [v42 unprefixedURI];

    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    unint64_t v46 = v45;

    uint64_t v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v31 + 24, v31 + 32);

    swift_bridgeObjectRelease(v46);
    *(_WORD *)(v31 + 32) = 2048;
    id v47 = [v25 encryptionProperties];
    id v48 = [v47 segmentNumber];

    int v65 = v29;
    id v49 = [v48 integerValue];

    uint64_t v78 = (uint64_t)v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v31 + 34, v31 + 42);

    *(_WORD *)(v31 + 42) = 2048;
    uint64_t v10 = v68;
    id v50 = [v25 encryptionProperties];
    id v51 = [v50 totalSegments];

    id v52 = [v51 integerValue];
    uint64_t v7 = v70;
    uint64_t v78 = (uint64_t)v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v31 + 44, v31 + 52);

    *(_WORD *)(v31 + 52) = 1024;
    uint64_t v53 = (char *)[v26 transportType];

    LODWORD(v7_Block_object_dispose(va, 8) = v53 == (_BYTE *)&dword_0 + 2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, (char *)&v78 + 4, v31 + 54, v31 + 58);

    os_log_t v54 = v66;
    _os_log_impl( &dword_0,  v66,  (os_log_type_t)v65,  "Received encrypted iMessage Lite message %s from %s to %s (segment %ld of %ld) (via satellite: %{BOOL}d)",  (uint8_t *)v31,  0x3Au);
    uint64_t v55 = v67;
    swift_arrayDestroy(v67, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1LL, -1LL);
    uint64_t v56 = v31;
    a4 = v69;
    swift_slowDealloc(v56, -1LL, -1LL);
  }

  else
  {
  }

  (*(void (**)(_BYTE *, uint64_t))(v72 + 8))(v71, v73);
  if (one-time initialization token for incomingMessageQueue != -1) {
    swift_once( &one-time initialization token for incomingMessageQueue,  one-time initialization function for incomingMessageQueue);
  }
  uint64_t v57 = __swift_project_value_buffer(v7, (uint64_t)incomingMessageQueue);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, v57, v7);
  uint64_t v58 = (void *)swift_allocObject(&unk_49648, 64LL, 7LL);
  uint64_t v59 = v77;
  v58[2] = v77;
  v58[3] = v25;
  uint64_t v60 = v74;
  v58[4] = v75;
  v58[5] = v60;
  v58[6] = v76;
  v58[7] = a4;
  id v61 = v25;
  id v62 = v59;
  swift_retain(a4);
  AsyncSerialQueue.perform(_:)( &async function pointer to partial apply for closure #1 in LiteMessageServiceSession.messenger(_:incomingMessage:context:clientErrorAcknowledgementBlock:),  v58);
  swift_release(v58);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_11FAC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t partial apply for closure #1 in LiteMessageServiceSession.messenger(_:incomingMessage:context:clientAcknowledgementBlock:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t partial apply for closure #1 in LiteMessageServiceSession.messenger(_:incomingSummaryMessage:context:clientAcknowledgementBlock:)()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = (void *)swift_task_alloc(dword_4D7DC);
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = partial apply for closure #1 in LiteMessageServiceSession.donateHandlesForKeyExchange();
  return closure #1 in LiteMessageServiceSession.messenger(_:incomingSummaryMessage:context:clientAcknowledgementBlock:)( (uint64_t)v4,  v5,  v6,  v2,  v3);
}

uint64_t specialized LiteMessageServiceSession.messenger(_:receivedIncomingDeliveryReceiptForIdentifier:from:context:)( uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = Logger.liteSession.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v15, v11);
  swift_bridgeObjectRetain_n(a2, 2LL);
  id v16 = a3;
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter();
  int v19 = v18;
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v20 = swift_slowAlloc(22LL, -1LL);
    uint64_t v44 = v11;
    uint64_t v21 = v20;
    uint64_t v43 = swift_slowAlloc(64LL, -1LL);
    uint64_t v48 = v43;
    *(_DWORD *)uint64_t v21 = 136315394;
    unint64_t v45 = v4;
    swift_bridgeObjectRetain(a2);
    uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v48);
    uint64_t v46 = a1;
    uint64_t v47 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    *(_WORD *)(v21 + 12) = 2080;
    uint64_t v40 = v21 + 14;
    id v23 = [v16 unprefixedURI];
    int v41 = v19;
    id v24 = v23;
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    uint64_t v42 = v12;
    id v26 = v10;
    uint64_t v27 = v25;
    unint64_t v29 = v28;

    uint64_t v30 = v27;
    uint64_t v10 = v26;
    uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v29, &v48);
    a1 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v40, v21 + 22);

    unint64_t v31 = v29;
    uint64_t v4 = v45;
    swift_bridgeObjectRelease(v31);
    _os_log_impl( &dword_0,  v17,  (os_log_type_t)v41,  "Received message delivery receipt for %s from %s",  (uint8_t *)v21,  0x16u);
    uint64_t v32 = v43;
    swift_arrayDestroy(v43, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v42 + 8))(v14, v44);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }

  uint64_t v33 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56LL))(v10, 1LL, 1LL, v33);
  type metadata accessor for MainActor(0LL);
  swift_bridgeObjectRetain(a2);
  id v34 = v4;
  uint64_t v35 = static MainActor.shared.getter(v34);
  unint64_t v36 = (void *)swift_allocObject(&unk_495D0, 56LL, 7LL);
  v36[2] = v35;
  v36[3] = &protocol witness table for MainActor;
  v36[4] = v34;
  v36[5] = a1;
  v36[6] = a2;
  uint64_t v37 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm( (uint64_t)v10,  (uint64_t)&async function pointer to partial apply for closure #1 in LiteMessageServiceSession.messenger(_:receivedIncomingDeliveryReceiptForIdentifier:from:context:),  (uint64_t)v36,  (uint64_t)&unk_495F8,  (uint64_t)&type metadata for Bool,  (uint64_t)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSb_TG5TATu);
  return swift_release(v37);
}

uint64_t specialized LiteMessageServiceSession.messenger(_:incomingServiceUpdateMessage:context:clientAcknowledgementBlock:)( void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v13 = [a1 senderURI];
  id v14 = [v13 unprefixedURI];

  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  unint64_t v17 = v16;

  uint64_t v18 = Logger.liteSession.unsafeMutableAddressor();
  uint64_t v42 = v10;
  uint64_t v43 = v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v18, v9);
  swift_bridgeObjectRetain_n(v17, 2LL);
  uint64_t v19 = swift_unknownObjectRetain_n(a1, 2LL);
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc(22LL, -1LL);
    uint64_t v39 = swift_slowAlloc(32LL, -1LL);
    uint64_t v46 = v39;
    *(_DWORD *)uint64_t v22 = 136315394;
    uint64_t v40 = a2;
    swift_bridgeObjectRetain(v17);
    uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v46);
    uint64_t v41 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease_n(v17, 3LL);
    *(_WORD *)(v22 + 12) = 2048;
    id v23 = [a1 preferredServiceType];
    uint64_t v38 = v15;
    id v24 = v8;
    uint64_t v25 = (uint64_t)v23;
    swift_unknownObjectRelease(a1);
    uint64_t v45 = v25;
    uint64_t v8 = v24;
    a2 = v40;
    a3 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v22 + 14, v22 + 22);
    swift_unknownObjectRelease(a1);
    _os_log_impl( &dword_0,  v20,  v21,  "Received service update request from %s to switch to service to %ld",  (uint8_t *)v22,  0x16u);
    uint64_t v26 = v39;
    swift_arrayDestroy(v39, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    uint64_t v27 = v22;
    uint64_t v28 = v38;
    swift_slowDealloc(v27, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v42 + 8))(v12, v43);
  }

  else
  {

    swift_bridgeObjectRelease_n(v17, 2LL);
    swift_unknownObjectRelease_n(a1, 2LL);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v12, v43);
    uint64_t v28 = v15;
  }

  uint64_t v29 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56LL))(v8, 1LL, 1LL, v29);
  type metadata accessor for MainActor(0LL);
  swift_unknownObjectRetain(a1, v30);
  id v31 = v44;
  uint64_t v32 = swift_retain(a3);
  uint64_t v33 = static MainActor.shared.getter(v32);
  id v34 = (void *)swift_allocObject(&unk_495A8, 80LL, 7LL);
  v34[2] = v33;
  v34[3] = &protocol witness table for MainActor;
  v34[4] = v31;
  v34[5] = a1;
  v34[6] = v28;
  v34[7] = v17;
  v34[8] = a2;
  void v34[9] = a3;
  uint64_t v35 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm( (uint64_t)v8,  (uint64_t)&async function pointer to partial apply for closure #1 in LiteMessageServiceSession.messenger(_:incomingServiceUpdateMessage:context:clientAcknowledgementBlock:),  (uint64_t)v34,  (uint64_t)&unk_49620,  (uint64_t)&type metadata for () + 8,  (uint64_t)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATu_0);
  return swift_release(v35);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) () -> ()()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t objectdestroy_2Tm()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t closure #1 in LiteMessageServiceSession.messenger(_:incomingSummaryMessage:context:clientAcknowledgementBlock:)partial apply()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = (void *)swift_task_alloc(dword_4D7DC);
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = partial apply for closure #1 in LiteMessageServiceSession.familyContactsDidChange();
  return closure #1 in LiteMessageServiceSession.messenger(_:incomingSummaryMessage:context:clientAcknowledgementBlock:)( (uint64_t)v4,  v5,  v6,  v2,  v3);
}

uint64_t sub_127E4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()( uint64_t a1)
{
}

uint64_t sub_12810()
{
  swift_unknownObjectRelease(*(void *)(v0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  swift_release(*(void *)(v0 + 72));
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t partial apply for closure #1 in LiteMessageServiceSession.messenger(_:incomingServiceUpdateMessage:context:clientAcknowledgementBlock:)()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[8];
  uint64_t v7 = (void *)swift_task_alloc(dword_4D8B4);
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = partial apply for closure #1 in LiteMessageServiceSession.donateHandlesForKeyExchange();
  return closure #1 in LiteMessageServiceSession.messenger(_:incomingServiceUpdateMessage:context:clientAcknowledgementBlock:)( (uint64_t)v7,  v8,  v9,  v2,  v3,  v4,  v5,  v6);
}

uint64_t sub_128CC()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t partial apply for closure #1 in LiteMessageServiceSession.messenger(_:receivedIncomingDeliveryReceiptForIdentifier:from:context:)( uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[6];
  uint64_t v7 = (void *)swift_task_alloc(dword_4D934);
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in LiteMessageServiceSession.donateHandlesForKeyExchange();
  return closure #1 in LiteMessageServiceSession.messenger(_:receivedIncomingDeliveryReceiptForIdentifier:from:context:)( a1,  v8,  v9,  v4,  v5,  v6);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSb_TG5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_4D944);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in LiteMessageServiceSession.familyContactsDidChange();
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSb_TG5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSb_TG5Tu))( a1,  v4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA_0(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_4D954);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in LiteMessageServiceSession.donateHandlesForKeyExchange();
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu))( a1,  v4);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_12A6C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  swift_release(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t partial apply for closure #1 in LiteMessageServiceSession.messenger(_:incomingMessage:context:clientErrorAcknowledgementBlock:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v7 = v0[6];
  uint64_t v6 = v0[7];
  uint64_t v8 = (void *)swift_task_alloc(dword_4D97C);
  *(void *)(v1 + 16) = v8;
  *uint64_t v8 = v1;
  v8[1] = partial apply for closure #1 in LiteMessageServiceSession.donateHandlesForKeyExchange();
  return closure #1 in LiteMessageServiceSession.messenger(_:incomingMessage:context:clientErrorAcknowledgementBlock:)( v2,  v3,  v4,  v5,  v7,  v6);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

uint64_t one-time initialization function for outgoingMessageQueue()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.BufferingPolicy);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for AsyncSerialQueue(0LL);
  __swift_allocate_value_buffer(v7, outgoingMessageQueue);
  __swift_project_value_buffer(v7, (uint64_t)outgoingMessageQueue);
  uint64_t v8 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v6, 1LL, 1LL, v8);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v3,  enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:),  v0);
  return AsyncSerialQueue.init(priority:bufferingPolicy:)(v6, v3);
}

double variable initialization expression of LiteMessageServiceSession.State.lastSatelliteStateChange()
{
  return 0.0;
}

double variable initialization expression of LiteMessageServiceSession.State.minimumRecoveryCooldown()
{
  return 300.0;
}

uint64_t variable initialization expression of LiteMessageServiceSession.State.emergencyContactsNotificationToken()
{
  return 0LL;
}

id LiteMessageServiceSession.offGridMessenger.getter()
{
  return *(id *)(v0 + OBJC_IVAR___LiteMessageServiceSession_state);
}

uint64_t LiteMessageServiceSession.segmentStore.getter()
{
  return swift_retain(*(void *)(v0 + OBJC_IVAR___LiteMessageServiceSession_state + 8));
}

id LiteMessageServiceSession.republishRateLimiter.getter()
{
  return *(id *)(v0 + OBJC_IVAR___LiteMessageServiceSession_state + 16);
}

double LiteMessageServiceSession.minimumRecoveryCooldown.getter()
{
  return *(double *)(v0 + OBJC_IVAR___LiteMessageServiceSession_state + 32);
}

double LiteMessageServiceSession.lastSatelliteStateChange.getter()
{
  return *(double *)(v0 + OBJC_IVAR___LiteMessageServiceSession_state + 24);
}

double key path getter for LiteMessageServiceSession.lastSatelliteStateChange : LiteMessageServiceSession@<D0>( void *a1@<X0>, double *a2@<X8>)
{
  double result = *(double *)(*a1 + OBJC_IVAR___LiteMessageServiceSession_state + 24);
  *a2 = result;
  return result;
}

double key path setter for LiteMessageServiceSession.lastSatelliteStateChange : LiteMessageServiceSession( double *a1, void *a2)
{
  double result = *a1;
  *(double *)(*a2 + OBJC_IVAR___LiteMessageServiceSession_state + 24) = *a1;
  return result;
}

void LiteMessageServiceSession.lastSatelliteStateChange.setter(double a1)
{
  *(double *)(v1 + OBJC_IVAR___LiteMessageServiceSession_state + 24) = a1;
}

double (*LiteMessageServiceSession.lastSatelliteStateChange.modify(void *a1))(uint64_t a1)
{
  uint64_t v2 = OBJC_IVAR___LiteMessageServiceSession_state;
  a1[1] = v1;
  a1[2] = v2;
  *a1 = *(void *)(v1 + v2 + 24);
  return LiteMessageServiceSession.lastSatelliteStateChange.modify;
}

double LiteMessageServiceSession.lastSatelliteStateChange.modify(uint64_t a1)
{
  double result = *(double *)a1;
  *(void *)(*(void *)(a1 + 8) + *(void *)(a1 + 16) + 24LL) = *(void *)a1;
  return result;
}

uint64_t LiteMessageServiceSession.emergencyContactsNotificationToken.getter()
{
  return *(unsigned int *)(v0 + OBJC_IVAR___LiteMessageServiceSession_state + 40);
}

void *key path getter for LiteMessageServiceSession.emergencyContactsNotificationToken : LiteMessageServiceSession@<X0>( void *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(*result + OBJC_IVAR___LiteMessageServiceSession_state + 40);
  return result;
}

_DWORD *key path setter for LiteMessageServiceSession.emergencyContactsNotificationToken : LiteMessageServiceSession( _DWORD *result, void *a2)
{
  *(_DWORD *)(*a2 + OBJC_IVAR___LiteMessageServiceSession_state + 40) = *result;
  return result;
}

uint64_t LiteMessageServiceSession.emergencyContactsNotificationToken.setter(uint64_t result)
{
  *(_DWORD *)(v1 + OBJC_IVAR___LiteMessageServiceSession_state + 40) = result;
  return result;
}

uint64_t (*LiteMessageServiceSession.emergencyContactsNotificationToken.modify( uint64_t a1))(uint64_t result)
{
  uint64_t v2 = OBJC_IVAR___LiteMessageServiceSession_state;
  *(void *)a1 = v1;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v1 + v2 + 40);
  return LiteMessageServiceSession.emergencyContactsNotificationToken.modify;
}

uint64_t LiteMessageServiceSession.emergencyContactsNotificationToken.modify(uint64_t result)
{
  *(_DWORD *)(*(void *)result + *(void *)(result + 8) + 40LL) = *(_DWORD *)(result + 16);
  return result;
}

uint64_t LiteMessageServiceSession.familyContactsNotificationToken.getter()
{
  return *(unsigned int *)(v0 + OBJC_IVAR___LiteMessageServiceSession_state + 44);
}

void *key path getter for LiteMessageServiceSession.familyContactsNotificationToken : LiteMessageServiceSession@<X0>( void *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(*result + OBJC_IVAR___LiteMessageServiceSession_state + 44);
  return result;
}

_DWORD *key path setter for LiteMessageServiceSession.familyContactsNotificationToken : LiteMessageServiceSession( _DWORD *result, void *a2)
{
  *(_DWORD *)(*a2 + OBJC_IVAR___LiteMessageServiceSession_state + 44) = *result;
  return result;
}

uint64_t LiteMessageServiceSession.familyContactsNotificationToken.setter(uint64_t result)
{
  *(_DWORD *)(v1 + OBJC_IVAR___LiteMessageServiceSession_state + 44) = result;
  return result;
}

uint64_t (*LiteMessageServiceSession.familyContactsNotificationToken.modify( uint64_t a1))(uint64_t result)
{
  uint64_t v2 = OBJC_IVAR___LiteMessageServiceSession_state;
  *(void *)a1 = v1;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v1 + v2 + 44);
  return LiteMessageServiceSession.familyContactsNotificationToken.modify;
}

uint64_t LiteMessageServiceSession.familyContactsNotificationToken.modify(uint64_t result)
{
  *(_DWORD *)(*(void *)result + *(void *)(result + 8) + 44LL) = *(_DWORD *)(result + 16);
  return result;
}

id LiteMessageServiceSession.init(account:service:replicatingFor:)(void *a1, void *a2, void *a3)
{
  id v7 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3)) initWithAccount:a1 service:a2 replicatingForSession:a3];

  return v7;
}

uint64_t LiteMessageServiceSession.init(account:service:replicatingFor:)(void *a1, void *a2, void *a3)
{
  id v7 = v3;
  uint64_t v8 = IMDService.idsServiceName.getter();
  uint64_t v10 = v9;
  type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for OS_dispatch_queue,  &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v11 = (void *)static OS_dispatch_queue.main.getter();
  id v12 = objc_allocWithZone(&OBJC_CLASS___IDSOffGridMessenger);
  id v13 = specialized @nonobjc IDSOffGridMessenger.init(service:queue:)((uint64_t)v8, v10, (uint64_t)v11);

  type metadata accessor for LiteMessageSegmentStore();
  uint64_t v14 = LiteMessageSegmentStore.__allocating_init()();
  id v15 = [(id)objc_opt_self(IDSServerBag) sharedInstanceForBagType:1];
  NSString v16 = String._bridgeToObjectiveC()();
  id v17 = [v15 objectForKey:v16];

  if (v17)
  {
    _bridgeAnyObjectToAny(_:)(v30, v17);
    swift_unknownObjectRelease(v17);
  }

  else
  {
    memset(v30, 0, sizeof(v30));
  }

  outlined init with take of Any?((uint64_t)v30, (uint64_t)v31);
  if (v32)
  {
    uint64_t v18 = type metadata accessor for IMDHandle( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
    if ((swift_dynamicCast(&v29, v31, (char *)&type metadata for Any + 8, v18, 6LL) & 1) != 0)
    {
      id v19 = v29;
      [v29 doubleValue];
      double v21 = v20;

      goto LABEL_10;
    }
  }

  else
  {

    outlined destroy of TaskPriority?((uint64_t)v31, &demangling cache variable for type metadata for Any?);
  }

  double v21 = 21600.0;
LABEL_10:
  id v22 = [objc_allocWithZone(IDSRateLimiter) initWithLimit:2 timeLimit:v21];
  if (v22)
  {
    id v23 = &v7[OBJC_IVAR___LiteMessageServiceSession_state];
    *(void *)id v23 = v13;
    *((void *)v23 + 1) = v14;
    *((void *)v23 + 2) = v22;
    *(_OWORD *)(v23 + 24) = xmmword_3BA90;
    *((void *)v23 + 5) = 0LL;

    v28.receiver = v7;
    v28.super_class = (Class)&OBJC_CLASS___LiteMessageServiceSession;
    id v24 = (char *)objc_msgSendSuper2(&v28, "initWithAccount:service:replicatingForSession:", a1, a2, a3);
    uint64_t v25 = *(void **)&v24[OBJC_IVAR___LiteMessageServiceSession_state];
    uint64_t v26 = v24;
    _IMIDSForceSetDelegate(v25, v26);
    LiteMessageServiceSession.listenForContactsChangeNotifications()();
    LiteMessageServiceSession.prepareForFirstUnlock()();

    return (uint64_t)v26;
  }

  else
  {
    __break(1u);
    uint64_t result = swift_unexpectedError(v15, "iMessageLite/LiteMessageServiceSession.swift", 44LL, 1LL, 72LL);
    __break(1u);
  }

  return result;
}

void LiteMessageServiceSession.sendMessage(_:toChat:style:)(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v40 = a4;
  uint64_t v39 = a2;
  uint64_t v6 = type metadata accessor for AsyncSerialQueue(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v31[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = &v31[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = Logger.liteSession.unsafeMutableAddressor();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  id v15 = a1;
  NSString v16 = (os_log_s *)Logger.logObject.getter(v15);
  int v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, (os_log_type_t)v17))
  {
    int v32 = v17;
    uint64_t v33 = v11;
    uint64_t v34 = v10;
    uint64_t v35 = v9;
    uint64_t v36 = a3;
    uint64_t v37 = v7;
    uint64_t v38 = v6;
    uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    uint64_t v43 = v19;
    *(_DWORD *)uint64_t v18 = 136315138;
    id v20 = [v15 guid];
    if (!v20)
    {

      __break(1u);
      return;
    }

    double v21 = v20;
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    unint64_t v24 = v23;

    uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v18 + 4, v18 + 12);

    swift_bridgeObjectRelease(v24);
    _os_log_impl(&dword_0, v16, (os_log_type_t)v32, "Enqueuing message to send: %s", v18, 0xCu);
    swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);

    (*(void (**)(_BYTE *, uint64_t))(v33 + 8))(v13, v34);
    uint64_t v7 = v37;
    uint64_t v6 = v38;
    uint64_t v9 = v35;
    a3 = v36;
  }

  else
  {

    (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
  }

  if (one-time initialization token for outgoingMessageQueue != -1) {
    swift_once( &one-time initialization token for outgoingMessageQueue,  one-time initialization function for outgoingMessageQueue);
  }
  uint64_t v25 = __swift_project_value_buffer(v6, (uint64_t)outgoingMessageQueue);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v9, v25, v6);
  uint64_t v26 = v9;
  uint64_t v27 = swift_allocObject(&unk_49670, 49LL, 7LL);
  objc_super v28 = v41;
  *(void *)(v27 + 16) = v41;
  *(void *)(v27 + 24) = v15;
  *(void *)(v27 + 32) = v39;
  *(void *)(v27 + 40) = a3;
  *(_BYTE *)(v27 + 4_Block_object_dispose(va, 8) = v40;
  id v29 = v15;
  id v30 = v28;
  swift_bridgeObjectRetain(a3);
  AsyncSerialQueue.perform(_:)( &async function pointer to partial apply for closure #1 in LiteMessageServiceSession.sendMessage(_:toChat:style:),  v27);
  swift_release(v27);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v26, v6);
}

uint64_t closure #1 in LiteMessageServiceSession.sendMessage(_:toChat:style:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(_BYTE *)(v5 + 216) = a5;
  *(void *)(v5 + 136) = a3;
  *(void *)(v5 + 144) = a4;
  *(void *)(v5 + 120) = a1;
  *(void *)(v5 + 12_Block_object_dispose(va, 8) = a2;
  uint64_t v10 = type metadata accessor for Logger(0LL);
  *(void *)(v5 + 152) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v5 + 160) = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v5 + 16_Block_object_dispose(va, 8) = swift_task_alloc(v12);
  *(void *)(v5 + 176) = swift_task_alloc(v12);
  uint64_t v13 = type metadata accessor for MainActor(0LL);
  *(void *)(v5 + 184) = v13;
  *(void *)(v5 + 192) = static MainActor.shared.getter(v13);
  uint64_t v14 = (void *)swift_task_alloc(dword_4DFF4);
  *(void *)(v5 + 200) = v14;
  *uint64_t v14 = v5;
  v14[1] = closure #1 in LiteMessageServiceSession.sendMessage(_:toChat:style:);
  return LiteMessageServiceSession.encryptAndSendMessageItem(_:chatIdentifier:chatStyle:)(a2, a3, a4, a5);
}

uint64_t closure #1 in LiteMessageServiceSession.sendMessage(_:toChat:style:)()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 200LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 184LL);
  *(void *)(*(void *)v1 + 208LL) = v0;
  swift_task_dealloc(v2);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  if (v0) {
    uint64_t v6 = closure #1 in LiteMessageServiceSession.sendMessage(_:toChat:style:);
  }
  else {
    uint64_t v6 = closure #1 in LiteMessageServiceSession.sendMessage(_:toChat:style:);
  }
  return swift_task_switch(v6, v5, v4);
}

void closure #1 in LiteMessageServiceSession.sendMessage(_:toChat:style:)()
{
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v5 = *(void **)(v0 + 128);
  swift_release(*(void *)(v0 + 192));
  uint64_t v6 = Logger.liteSession.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v6, v2);
  id v7 = v5;
  swift_bridgeObjectRetain_n(v4, 2LL);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    os_log_type_t v53 = v9;
    uint64_t v10 = *(void **)(v0 + 128);
    uint64_t v11 = swift_slowAlloc(22LL, -1LL);
    uint64_t v52 = swift_slowAlloc(64LL, -1LL);
    uint64_t v54 = v52;
    *(_DWORD *)uint64_t v11 = 136315394;
    id v12 = [v10 guid];
    if (!v12)
    {
      uint64_t v47 = *(void **)(v0 + 128);
      swift_bridgeObjectRelease(*(LiteMessageServiceSession **)(v0 + 144), v13, v14, v15, v16, v17, v18, v19);

      __break(1u);
      goto LABEL_10;
    }

    id v20 = v12;
    unint64_t v21 = *(void *)(v0 + 144);
    uint64_t v50 = *(void *)(v0 + 152);
    uint64_t v51 = *(void *)(v0 + 176);
    uint64_t v22 = *(void **)(v0 + 128);
    uint64_t v48 = *(void *)(v0 + 136);
    uint64_t v49 = *(void *)(v0 + 160);
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    uint64_t v25 = v24;

    *(void *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, (unint64_t)v25, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);

    *(_WORD *)(v11 + 12) = 2080;
    swift_bridgeObjectRetain(v21);
    *(void *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v21, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease_n(v21, 3LL);
    _os_log_impl(&dword_0, v8, v53, "Successfully sent message %s to %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v52, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v51, v50);
  }

  else
  {
    uint64_t v33 = *(void *)(v0 + 176);
    uint64_t v35 = *(void *)(v0 + 152);
    uint64_t v34 = *(void *)(v0 + 160);
    uint64_t v36 = *(void *)(v0 + 144);
    uint64_t v37 = *(void **)(v0 + 128);

    swift_bridgeObjectRelease_n(v36, 2LL);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
  }

  [*(id *)(v0 + 128) setErrorCode:0];
  uint64_t v38 = *(unsigned __int8 *)(v0 + 216);
  uint64_t v39 = *(void **)(v0 + 120);
  int v40 = *(void **)(v0 + 128);
  LiteMessageServiceSession.sendMessageSentMetric(for:)(v40);
  NSString v41 = String._bridgeToObjectiveC()();
  [v39 didSendMessage:v40 forChat:v41 style:v38];

  if ([v40 errorCode])
  {
LABEL_8:
    uint64_t v46 = *(void *)(v0 + 168);
    swift_task_dealloc(*(void *)(v0 + 176));
    swift_task_dealloc(v46);
    (*(void (**)(void))(v0 + 8))();
    return;
  }

  id v42 = [*(id *)(v0 + 128) guid];
  if (v42)
  {
    uint64_t v43 = v42;
    id v44 = *(void **)(v0 + 120);
    id v45 = [v44 account];
    [v44 notifyDidSendMessageID:v43 account:v45 shouldNotify:1];

    goto LABEL_8;
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  os_log_s *v11;
  os_log_type_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  LiteMessageServiceSession *v20;
  LiteMessageServiceSession *v21;
  SEL v22;
  id v23;
  id v24;
  unsigned __int8 v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  LiteMessageServiceSession *v31;
  SEL v32;
  id v33;
  id v34;
  unsigned __int8 v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  id v46;
  void *v47;
  uint64_t v48;
  NSString v49;
  void *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  NSString v54;
  id v55;
  void *v56;
  void *v57;
  id v58;
  uint64_t v59;
  LiteMessageServiceSession *v60;
  void *v61;
  SEL v62;
  id v63;
  id v64;
  unsigned __int8 v65;
  id v66;
  id v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  os_log_type_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v6 = *(void **)(v0 + 128);
  swift_release(*(void *)(v0 + 192));
  id v7 = Logger.liteSession.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v7, v4);
  uint64_t v8 = v6;
  swift_bridgeObjectRetain(v5);
  swift_errorRetain(v1);
  os_log_type_t v9 = v8;
  swift_bridgeObjectRetain(v5);
  uint64_t v10 = swift_errorRetain(v1);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  id v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v74 = v12;
    uint64_t v13 = *(void **)(v0 + 128);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    uint64_t v73 = swift_slowAlloc(96LL, -1LL);
    uint64_t v76 = v73;
    *(_DWORD *)uint64_t v14 = 136315650;
    id v15 = [v13 guid];
    uint64_t v75 = *(void *)(v0 + 208);
    if (!v15)
    {
LABEL_11:
      uint64_t v60 = *(LiteMessageServiceSession **)(v0 + 144);
      id v61 = *(void **)(v0 + 128);
      swift_errorRelease(v75);
      swift_bridgeObjectRelease(v60, v62, v63, v64, v65, v66, v67, v68);

      __break(1u);
      goto LABEL_12;
    }

    unsigned __int8 v16 = v15;
    uint64_t v70 = *(void *)(v0 + 160);
    int v17 = *(void *)(v0 + 144);
    int64_t v71 = *(void *)(v0 + 152);
    uint64_t v72 = *(void *)(v0 + 168);
    uint64_t v18 = *(void **)(v0 + 128);
    uint64_t v69 = *(void *)(v0 + 136);
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    unint64_t v21 = v20;

    *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, (unint64_t)v21, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v21, v22, v23, v24, v25, v26, v27, v28);

    *(_WORD *)(v14 + 12) = 2080;
    swift_bridgeObjectRetain(v17);
    *(void *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v17, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease_n(v17, 3LL);
    *(_WORD *)(v14 + 22) = 2080;
    swift_getErrorValue(v75, v0 + 80, v0 + 16);
    unsigned __int8 v29 = Error.localizedDescription.getter(*(void *)(v0 + 24), *(void *)(v0 + 32));
    id v31 = (LiteMessageServiceSession *)v30;
    *(void *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v14 + 24, v14 + 32);
    swift_bridgeObjectRelease(v31, v32, v33, v34, v35, v36, v37, v38);
    swift_errorRelease(v75);
    swift_errorRelease(v75);
    _os_log_impl(&dword_0, v11, v74, "Failed to send message %s to %s: %s", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy(v73, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v73, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v72, v71);
  }

  else
  {
    uint64_t v39 = *(void *)(v0 + 208);
    NSString v41 = *(void *)(v0 + 160);
    int v40 = *(void *)(v0 + 168);
    uint64_t v43 = *(void *)(v0 + 144);
    id v42 = *(void *)(v0 + 152);
    id v44 = *(void **)(v0 + 128);

    swift_bridgeObjectRelease_n(v43, 2LL);
    swift_errorRelease(v39);
    swift_errorRelease(v39);

    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
  }

  id v45 = *(void **)(v0 + 128);
  swift_getErrorValue(*(void *)(v0 + 208), v0 + 88, v0 + 40);
  [v45 setErrorCode:Error.liteItemSendErrorCode.getter(*(void *)(v0 + 48))];
  uint64_t v46 = [(id)objc_opt_self(IMMetricsCollector) sharedInstance];
  if (!v46)
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v47 = v46;
  uint64_t v48 = *(void *)(v0 + 208);
  uint64_t v49 = String._bridgeToObjectiveC()();
  uint64_t v50 = (void *)_convertErrorToNSError(_:)(v48);
  [v47 forceAutoBugCaptureWithSubType:v49 errorPayload:v50];

  swift_errorRelease(v48);
  uint64_t v51 = *(unsigned __int8 *)(v0 + 216);
  uint64_t v52 = *(void **)(v0 + 120);
  os_log_type_t v53 = *(void **)(v0 + 128);
  LiteMessageServiceSession.sendMessageSentMetric(for:)(v53);
  uint64_t v54 = String._bridgeToObjectiveC()();
  [v52 didSendMessage:v53 forChat:v54 style:v51];

  if ([v53 errorCode])
  {
LABEL_9:
    uint64_t v59 = *(void *)(v0 + 168);
    swift_task_dealloc(*(void *)(v0 + 176));
    swift_task_dealloc(v59);
    (*(void (**)(void))(v0 + 8))();
    return;
  }

  uint64_t v55 = [*(id *)(v0 + 128) guid];
  if (v55)
  {
    uint64_t v56 = v55;
    uint64_t v57 = *(void **)(v0 + 120);
    uint64_t v58 = [v57 account];
    [v57 notifyDidSendMessageID:v56 account:v58 shouldNotify:1];

    goto LABEL_9;
  }

LABEL_10:
  __break(1u);
}

LABEL_12:
  __break(1u);
}

void LiteMessageServiceSession.joinChat(_:handleInfo:style:groupID:joinProperties:)( uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, NSString a6, uint64_t a7)
{
  NSString v11 = String._bridgeToObjectiveC()();
  v12.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  if (a6) {
    a6 = String._bridgeToObjectiveC()();
  }
  if (a7) {
    v13.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  else {
    v13.super.Class isa = 0LL;
  }
  Class isa = v13.super.isa;
  [v7 joinChat:v11 handleInfo:v12.super.isa style:a4 groupID:a6 lastAddressedHandle:0 lastAddressedSIMID:0 joinProperties:v13.super.isa];
}

void LiteMessageServiceSession.joinChat(_:handleInfo:style:groupID:lastAddressedHandle:lastAddressedSIMID:joinProperties:)( uint64_t a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5, void *a6, uint64_t a7, NSString a8, uint64_t a9, void *a10)
{
}

Swift::Void __swiftcall LiteMessageServiceSession.sessionDidBecomeActive()()
{
  id v1 = [(id)objc_opt_self(IMDLocalDaemon) sharedDaemon];
  if (([v1 respondsToSelector:"isSetupComplete"] & 1) == 0)
  {
    swift_unknownObjectRelease(v1);
    goto LABEL_5;
  }

  unsigned __int8 v2 = [v1 isSetupComplete];
  swift_unknownObjectRelease(v1);
  if ((v2 & 1) == 0)
  {
LABEL_5:
    id v3 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
    [v3 addObserver:v0 selector:"handleDaemonFinishedLaunchingWithNotification:" name:kFZDaemonFinishedLaunchingNotification object:0];

    goto LABEL_6;
  }

  LiteMessageServiceSession.donateHandlesForKeyExchange()();
LABEL_6:
  v4.receiver = v0;
  v4.super_class = (Class)&OBJC_CLASS___LiteMessageServiceSession;
  objc_msgSendSuper2(&v4, "sessionDidBecomeActive");
}

Swift::Void __swiftcall LiteMessageServiceSession.republishOffGridStatusIfNecessary()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v0);
  uint64_t v77 = (char *)&v74 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v80 = *(void *)(v2 - 8);
  uint64_t v81 = v2;
  __chkstk_darwin(v2);
  objc_super v4 = (char *)&v74 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v78 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  NSString v11 = (char *)&v74 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v76 = (char *)&v74 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v75 = (char *)&v74 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v79 = (char *)&v74 - v17;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v74 - v18;
  id v20 = [(id)objc_opt_self(IMOffGridModeInvitationManager) sharedInstance];
  id v83 = [v20 offGridStateManager];

  type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for NSString,  &OBJC_CLASS___NSString_ptr);
  uint64_t v84 = NSString.init(stringLiteral:)("Republish status", 16LL, 2LL);
  uint64_t v21 = Logger.liteSession.unsafeMutableAddressor();
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v23 = v22(v19, v21, v5);
  unint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    SEL v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)SEL v26 = 0;
    _os_log_impl(&dword_0, v24, v25, "Calculate whether to attempt recovery to republish off grid status", v26, 2u);
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  id v27 = *(void (**)(char *, uint64_t))(v6 + 8);
  v27(v19, v5);
  id v28 = [(id)objc_opt_self(IDSServerBag) sharedInstanceForBagType:1];
  NSString v29 = String._bridgeToObjectiveC()();
  id v30 = [v28 objectForKey:v29];

  if (v30)
  {
    _bridgeAnyObjectToAny(_:)(v86, v30);
    swift_unknownObjectRelease(v30);
  }

  else
  {
    memset(v86, 0, sizeof(v86));
  }

  outlined init with take of Any?((uint64_t)v86, (uint64_t)v87);
  if (v88)
  {
    uint64_t v31 = type metadata accessor for IMDHandle( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
    if ((swift_dynamicCast(&v85, v87, (char *)&type metadata for Any + 8, v31, 6LL) & 1) != 0)
    {
      id v32 = v85;
      unsigned int v33 = [v85 BOOLValue];

      if (!v33)
      {
        uint64_t v34 = v78;
        uint64_t v35 = v22(v78, v21, v5);
        uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
        os_log_type_t v37 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v36, v37))
        {
          uint64_t v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v38 = 0;
          _os_log_impl( &dword_0,  v36,  v37,  "Server bag key has disabled the recovery mechanism, not attempting to recover",  v38,  2u);
          swift_slowDealloc(v38, -1LL, -1LL);
          id v40 = v83;
          uint64_t v39 = (void *)v84;
        }

        else
        {
          uint64_t v39 = v36;
          uint64_t v36 = (os_log_s *)v83;
          id v40 = (id)v84;
        }

        int64_t v71 = v34;
        goto LABEL_32;
      }
    }

    else
    {
    }
  }

  else
  {

    outlined destroy of TaskPriority?((uint64_t)v87, &demangling cache variable for type metadata for Any?);
  }

  NSString v41 = (os_log_s *)v83;
  id v42 = [v83 publishStatus];
  if (!v42)
  {
    uint64_t v53 = v22(v11, v21, v5);
    uint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
    os_log_type_t v55 = static os_log_type_t.default.getter();
    BOOL v56 = os_log_type_enabled(v54, v55);
    uint64_t v57 = (os_log_s *)v84;
    if (v56)
    {
      uint64_t v58 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v58 = 0;
      _os_log_impl( &dword_0,  v54,  v55,  "We are already attempting to publish off grid status, not attempting to recover",  v58,  2u);
      swift_slowDealloc(v58, -1LL, -1LL);
      uint64_t v59 = v57;
      uint64_t v57 = v41;
    }

    else
    {
      uint64_t v59 = v54;
      uint64_t v54 = v41;
    }

    int64_t v71 = v11;
    goto LABEL_32;
  }

  uint64_t v43 = static Date.now.getter(v42);
  double v44 = Date.timeIntervalSince1970.getter(v43);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v4, v81);
  uint64_t v45 = v82 + OBJC_IVAR___LiteMessageServiceSession_state;
  uint64_t v46 = (os_log_s *)v84;
  if (v44 - *(double *)(v82 + OBJC_IVAR___LiteMessageServiceSession_state + 24) < *(double *)(v82
                                                                                             + OBJC_IVAR___LiteMessageServiceSession_state
                                                                                             + 32))
  {
    uint64_t v47 = v79;
    uint64_t v48 = v22(v79, v21, v5);
    uint64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
    os_log_type_t v50 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v51 = 0;
      uint64_t v52 = "We have recently come back on grid, not immediately attempting to recover";
LABEL_27:
      _os_log_impl(&dword_0, v49, v50, v52, v51, 2u);
      swift_slowDealloc(v51, -1LL, -1LL);
      uint64_t v73 = v46;
      uint64_t v46 = v41;
LABEL_29:

      int64_t v71 = v47;
LABEL_32:
      v27(v71, v5);
      return;
    }

    goto LABEL_28;
  }

  [*(id *)(v45 + 16) noteItem:v84];
  if (![*(id *)(v45 + 16) underLimitForItem:v46])
  {
    uint64_t v47 = v76;
    uint64_t v72 = v22(v76, v21, v5);
    uint64_t v49 = (os_log_s *)Logger.logObject.getter(v72);
    os_log_type_t v50 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v51 = 0;
      uint64_t v52 = "We have already republished our status as part of the recovery mechanism recently, not republishing";
      goto LABEL_27;
    }

uint64_t closure #1 in LiteMessageServiceSession.republishOffGridStatusIfNecessary()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[22] = a4;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v4[23] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[24] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[25] = swift_task_alloc(v7);
  v4[26] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for MainActor(0LL);
  v4[27] = static MainActor.shared.getter(v8);
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  v4[28] = v9;
  v4[29] = v10;
  return swift_task_switch(closure #1 in LiteMessageServiceSession.republishOffGridStatusIfNecessary(), v9, v10);
}

uint64_t closure #1 in LiteMessageServiceSession.republishOffGridStatusIfNecessary()()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = (void *)v0[22];
  id v3 = [objc_allocWithZone(IDSOffGridModeOptions) init];
  v0[30] = v3;
  v0[7] = v0 + 18;
  v0[2] = v0;
  v0[3] = closure #1 in LiteMessageServiceSession.republishOffGridStatusIfNecessary();
  uint64_t v4 = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v5 = v0 + 10;
  v5[1] = 0x40000000LL;
  _OWORD v5[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned IDSOffGridMode, @unowned IDSOffGridModePublishStatus, @unowned NSError?) -> () with result type (IDSOffGridMode, IDSOffGridModePublishStatus);
  v5[3] = &block_descriptor_1;
  v5[4] = v4;
  [v2 setOffGridMode:1 options:v3 completion:v5];
  return swift_continuation_await(v1);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 24_Block_object_dispose(va, 8) = v2;
  if (v2) {
    id v3 = closure #1 in LiteMessageServiceSession.republishOffGridStatusIfNecessary();
  }
  else {
    id v3 = closure #1 in LiteMessageServiceSession.republishOffGridStatusIfNecessary();
  }
  return swift_task_switch(v3, *(void *)(v1 + 224), *(void *)(v1 + 232));
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_log_s *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v1 = *(void **)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 208);
  id v3 = *(void *)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 192);
  swift_release(*(void *)(v0 + 216));

  uint64_t v5 = Logger.liteSession.unsafeMutableAddressor();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
  unint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  uint64_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_0, v7, v8, "Republished status as on grid", v9, 2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  uint64_t v10 = *(void *)(v0 + 208);
  NSString v11 = *(void *)(v0 + 184);
  uint64_t v12 = *(void *)(v0 + 192);

  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  uint64_t v13 = *(void *)(v0 + 200);
  swift_task_dealloc(*(void *)(v0 + 208));
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_s *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  LiteMessageServiceSession *v16;
  SEL v17;
  id v18;
  id v19;
  unsigned __int8 v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v2 = *(void **)(v0 + 240);
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v4 = *(void *)(v0 + 192);
  id v3 = *(void *)(v0 + 200);
  uint64_t v5 = *(void *)(v0 + 184);
  uint64_t v6 = swift_release(*(void *)(v0 + 216));
  swift_willThrow(v6);

  unint64_t v7 = Logger.liteSession.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v7, v5);
  swift_errorRetain(v1);
  uint64_t v8 = swift_errorRetain(v1);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  uint64_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    NSString v11 = *(void *)(v0 + 248);
    id v30 = *(void *)(v0 + 192);
    uint64_t v31 = *(void *)(v0 + 184);
    id v32 = *(void *)(v0 + 200);
    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    unsigned int v33 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    swift_getErrorValue(v11, v0 + 160, v0 + 120);
    uint64_t v14 = Error.localizedDescription.getter(*(void *)(v0 + 128), *(void *)(v0 + 136));
    uint64_t v16 = (LiteMessageServiceSession *)v15;
    *(void *)(v0 + 16_Block_object_dispose(va, 8) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl(&dword_0, v9, v10, "Failed to republish status as on grid error: %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);

    swift_errorRelease(v11);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v32, v31);
  }

  else
  {
    unint64_t v24 = *(void *)(v0 + 248);
    SEL v26 = *(void *)(v0 + 192);
    os_log_type_t v25 = *(void *)(v0 + 200);
    id v27 = *(void *)(v0 + 184);
    swift_errorRelease(v24);
    swift_errorRelease(v24);
    swift_errorRelease(v24);

    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
  }

  id v28 = *(void *)(v0 + 200);
  swift_task_dealloc(*(void *)(v0 + 208));
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned IDSOffGridMode, @unowned IDSOffGridModePublishStatus, @unowned NSError?) -> () with result type (IDSOffGridMode, IDSOffGridModePublishStatus)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (a4)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v7 = swift_allocError(v6, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *uint64_t v8 = a4;
    id v9 = a4;
    return swift_continuation_throwingResumeWithError(v4, v7);
  }

  else
  {
    NSString v11 = *(void **)(*(void *)(v4 + 64) + 40LL);
    *NSString v11 = a2;
    v11[1] = a3;
    return swift_continuation_throwingResume(v4);
  }

void LiteMessageServiceSession.networkMonitorDidUpdate(_:)(void *a1)
{
  v2.super_class = (Class)&OBJC_CLASS___LiteMessageServiceSession;
  objc_msgSendSuper2(&v2, "networkMonitorDidUpdate:", a1);
}

uint64_t LiteMessageServiceSession.deleteAllData()()
{
  v1[3] = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v1[4] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[5] = v3;
  unint64_t v4 = (*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[6] = swift_task_alloc(v4);
  v1[7] = swift_task_alloc(v4);
  uint64_t v5 = type metadata accessor for MainActor(0LL);
  v1[8] = static MainActor.shared.getter(v5);
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v1[9] = v6;
  v1[10] = v7;
  return swift_task_switch(LiteMessageServiceSession.deleteAllData(), v6, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  os_log_s *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  unint64_t v4 = Logger.liteSession.unsafeMutableAddressor();
  v0[11] = v4;
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[12] = v5;
  uint64_t v6 = v5(v1, v4, v2);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  uint64_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v9 = 0;
    _os_log_impl(&dword_0, v7, v8, "deleteAllData for lite service session", v9, 2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  uint64_t v10 = v0[7];
  NSString v11 = v0[4];
  uint64_t v12 = v0[5];
  uint64_t v13 = v0[3];

  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v0[13] = v14;
  v14(v10, v11);
  uint64_t v15 = *(void *)(v13 + OBJC_IVAR___LiteMessageServiceSession_state + 8);
  v0[14] = v15;
  swift_retain(v15);
  return swift_task_switch(LiteMessageServiceSession.deleteAllData(), v15, 0LL);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  LiteMessageSegmentStore.deleteStore()();
  v0[15] = v1;
  if (v1)
  {
    uint64_t v2 = v0[9];
    uint64_t v3 = v0[10];
    unint64_t v4 = LiteMessageServiceSession.deleteAllData();
  }

  else
  {
    swift_release(v0[14]);
    uint64_t v2 = v0[9];
    uint64_t v3 = v0[10];
    unint64_t v4 = LiteMessageServiceSession.deleteAllData();
  }

  return swift_task_switch(v4, v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  swift_release(*(void *)(v0 + 64));
  uint64_t v1 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 56));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_s *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 88);
  unint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v6 = *(void *)(v0 + 32);
  swift_release(*(void *)(v0 + 64));
  swift_release(v1);
  v4(v5, v3, v6);
  swift_errorRetain(v2);
  uint64_t v7 = swift_errorRetain(v2);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  id v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = *(void *)(v0 + 120);
    NSString v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)NSString v11 = 138412290;
    swift_errorRetain(v10);
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError(v10);
    *(void *)(v0 + 16) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v11 + 4, v11 + 12);
    *uint64_t v12 = v13;
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl(&dword_0, v8, v9, "deleteAllData for lite service session failed with %@", v11, 0xCu);
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v12, 1LL, v14);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    swift_errorRelease(v10);
  }

  else
  {
    uint64_t v15 = *(void *)(v0 + 120);
    swift_errorRelease(v15);
    swift_errorRelease(v15);
    swift_errorRelease(v15);
  }

  (*(void (**)(void, void))(v0 + 104))(*(void *)(v0 + 48), *(void *)(v0 + 32));
  uint64_t v16 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 56));
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc closure #1 in LiteMessageServiceSession.deleteAllData()(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for MainActor(0LL);
  v2[4] = static MainActor.shared.getter(v3);
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  return swift_task_switch(@objc closure #1 in LiteMessageServiceSession.deleteAllData(), v4, v5);
}

uint64_t @objc closure #1 in LiteMessageServiceSession.deleteAllData()()
{
  uint64_t v1 = (void *)v0[3];
  uint64_t v2 = (const void *)v0[2];
  swift_release(v0[4]);
  v0[5] = _Block_copy(v2);
  uint64_t v3 = dword_4DA84;
  id v4 = v1;
  uint64_t v5 = (void *)swift_task_alloc(v3);
  v0[6] = v5;
  *uint64_t v5 = v0;
  v5[1] = @objc closure #1 in LiteMessageServiceSession.deleteAllData();
  return LiteMessageServiceSession.deleteAllData()();
}

{
  uint64_t *v0;
  void (**v1)(void);
  void *v2;
  uint64_t v4;
  uint64_t v1 = *(void (***)(void))(*v0 + 40);
  uint64_t v2 = *(void **)(*v0 + 24);
  id v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 48));

  v1[2](v1);
  _Block_release(v1);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t _sIeghH_IeAgH_TR(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  id v4 = (void *)swift_task_alloc(a3[1]);
  *(void *)(v3 + 16) = v4;
  *id v4 = v3;
  v4[1] = partial apply for closure #1 in LiteMessageServiceSession.donateHandlesForKeyExchange();
  return v6();
}

uint64_t _sIeAgH_ytIeAgHr_TR(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc(a4[1]);
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = partial apply for closure #1 in LiteMessageServiceSession.donateHandlesForKeyExchange();
  return v7();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) == 1)
  {
    outlined destroy of TaskPriority?(a1, &demangling cache variable for type metadata for TaskPriority?);
    uint64_t v8 = 7168LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      uint64_t v10 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9, v12);
      uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      uint64_t v15 = v14;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v8 = v16 | 0x1C00LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9) {
      goto LABEL_3;
    }
  }

  uint64_t v13 = 0LL;
  uint64_t v15 = 0LL;
LABEL_6:
  uint64_t v17 = swift_allocObject(&unk_49820, 32LL, 7LL);
  *(void *)(v17 + 16) = a2;
  *(void *)(v17 + 24) = a3;
  if (v15 | v13)
  {
    v20[0] = 0LL;
    v20[1] = 0LL;
    uint64_t v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }

  else
  {
    uint64_t v18 = 0LL;
  }

  return swift_task_create( v8,  v18,  (char *)&type metadata for () + 8,  &_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATu,  v17);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TQ0_;
  return v6(a1);
}

id specialized @nonobjc IDSOffGridMessenger.init(service:queue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v12 = 0LL;
  id v7 = [v3 initWithService:v6 queue:a3 error:&v12];

  id v8 = v12;
  if (v7)
  {
    id v9 = v12;
  }

  else
  {
    id v10 = v12;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow();
  }

  return v7;
}

uint64_t sub_15D00()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 49LL, 7LL);
}

uint64_t partial apply for closure #1 in LiteMessageServiceSession.sendMessage(_:toChat:style:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  char v6 = *(_BYTE *)(v0 + 48);
  id v7 = (void *)swift_task_alloc(dword_4DA5C);
  *(void *)(v1 + 16) = v7;
  *id v7 = v1;
  v7[1] = partial apply for closure #1 in LiteMessageServiceSession.donateHandlesForKeyExchange();
  return closure #1 in LiteMessageServiceSession.sendMessage(_:toChat:style:)(v2, v3, v4, v5, v6);
}

void specialized LiteMessageServiceSession.joinChat(_:handleInfo:style:groupID:lastAddressedHandle:lastAddressedSIMID:joinProperties:)( uint64_t a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5, void *a6, uint64_t a7, NSString a8, uint64_t a9, void *a10)
{
  uint64_t v38 = a6;
  uint64_t v36 = a5;
  uint64_t v37 = a7;
  LODWORD(v11) = a4;
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = Logger.liteSession.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v19, v15);
  uint64_t v20 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v31[1] = a1;
    uint64_t v32 = v15;
    uint64_t v23 = swift_slowAlloc(12LL, -1LL);
    uint64_t v34 = a3;
    unint64_t v24 = (uint8_t *)v23;
    uint64_t v25 = swift_slowAlloc(32LL, -1LL);
    int v35 = v11;
    uint64_t v11 = v25;
    uint64_t v41 = v25;
    NSString v33 = a8;
    *(_DWORD *)unint64_t v24 = 136315138;
    swift_bridgeObjectRetain(a2);
    uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v41);
    a8 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl(&dword_0, v21, v22, "Joining chat %s", v24, 0xCu);
    swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v26 = v11;
    LOBYTE(v11) = v35;
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v24, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v32);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }

  NSString v27 = v38;
  NSString v28 = String._bridgeToObjectiveC()();
  if (v27) {
    NSString v27 = String._bridgeToObjectiveC()();
  }
  NSString v29 = a10;
  if (a8) {
    a8 = String._bridgeToObjectiveC()();
  }
  if (a10) {
    NSString v29 = String._bridgeToObjectiveC()();
  }
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v39 didJoinChat:v28 style:v11 displayName:0 groupID:v27 lastAddressedHandle:a8 lastAddressedSIMID:v29 handleInfo:isa];
}

uint64_t sub_16070()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t partial apply for closure #1 in LiteMessageServiceSession.republishOffGridStatusIfNecessary()()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc(dword_4DA74);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #1 in LiteMessageServiceSession.donateHandlesForKeyExchange();
  return closure #1 in LiteMessageServiceSession.republishOffGridStatusIfNecessary()((uint64_t)v3, v4, v5, v2);
}

uint64_t initializeBufferWithCopyOfBuffer for LiteMessageServiceSession.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

void destroy for LiteMessageServiceSession.State(uint64_t a1)
{
}

uint64_t initializeWithCopy for LiteMessageServiceSession.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  id v6 = v3;
  swift_retain(v4);
  id v7 = v5;
  return a1;
}

uint64_t assignWithCopy for LiteMessageServiceSession.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v7;
  swift_retain(v7);
  swift_release(v8);
  id v9 = *(void **)(a2 + 16);
  id v10 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v9;
  id v11 = v9;

  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for LiteMessageServiceSession.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for LiteMessageServiceSession.State(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LiteMessageServiceSession.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 4_Block_object_dispose(va, 8) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 4_Block_object_dispose(va, 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for LiteMessageServiceSession.State()
{
  return &type metadata for LiteMessageServiceSession.State;
}

uint64_t type metadata accessor for LiteMessageServiceSession(uint64_t a1)
{
  return type metadata accessor for IMDHandle( a1,  &lazy cache variable for type metadata for LiteMessageServiceSession,  &off_48C38);
}

void type metadata accessor for IMChatStyle()
{
  if (!lazy cache variable for type metadata for IMChatStyle)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, &unk_49788);
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for IMChatStyle);
    }
  }

uint64_t sub_163A8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t partial apply for @objc closure #1 in LiteMessageServiceSession.deleteAllData()()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_4DAC4);
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = partial apply for closure #1 in LiteMessageServiceSession.donateHandlesForKeyExchange();
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to @objc closure #1 in LiteMessageServiceSession.deleteAllData()
                                                   + async function pointer to @objc closure #1 in LiteMessageServiceSession.deleteAllData()))( v2,  v3);
}

uint64_t _sIeghH_IeAgH_TRTA()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_4DAD4);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = partial apply for closure #1 in LiteMessageServiceSession.donateHandlesForKeyExchange();
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&_sIeghH_IeAgH_TRTu + _sIeghH_IeAgH_TRTu))( v2,  v3,  v4);
}

uint64_t objectdestroy_11Tm()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t _sIeAgH_ytIeAgHr_TRTA(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  id v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_4DAE4);
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in LiteMessageServiceSession.familyContactsDidChange();
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&_sIeAgH_ytIeAgHr_TRTu
                                                                   + _sIeAgH_ytIeAgHr_TRTu))( a1,  v4,  v5,  v6);
}

uint64_t sub_16568()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_4DAF4);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in LiteMessageServiceSession.donateHandlesForKeyExchange();
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu))( a1,  v4);
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t one-time initialization function for liteSession(uint64_t a1)
{
  return one-time initialization function for liteSession(a1, static Logger.liteSession);
}

uint64_t Logger.liteSession.unsafeMutableAddressor()
{
  return Logger.liteSession.unsafeMutableAddressor( &one-time initialization token for liteSession,  (uint64_t)static Logger.liteSession);
}

uint64_t static Logger.liteSession.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.liteSession.getter( &one-time initialization token for liteSession,  (uint64_t)static Logger.liteSession,  (uint64_t)one-time initialization function for liteSession,  a1);
}

uint64_t one-time initialization function for donations(uint64_t a1)
{
  return one-time initialization function for liteSession(a1, static Logger.donations);
}

uint64_t Logger.donations.unsafeMutableAddressor()
{
  return Logger.liteSession.unsafeMutableAddressor( &one-time initialization token for donations,  (uint64_t)static Logger.donations);
}

uint64_t Logger.liteSession.unsafeMutableAddressor(void *a1, uint64_t a2)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  return __swift_project_value_buffer(v3, a2);
}

uint64_t static Logger.donations.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.liteSession.getter( &one-time initialization token for donations,  (uint64_t)static Logger.donations,  (uint64_t)one-time initialization function for donations,  a1);
}

uint64_t static Logger.liteSession.getter@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = __swift_project_value_buffer(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a4, v7, v6);
}

uint64_t one-time initialization function for availability(uint64_t a1)
{
  return one-time initialization function for liteSession(a1, static Logger.availability);
}

uint64_t Logger.availability.unsafeMutableAddressor()
{
  return Logger.liteSession.unsafeMutableAddressor( &one-time initialization token for availability,  (uint64_t)static Logger.availability);
}

uint64_t static Logger.availability.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.liteSession.getter( &one-time initialization token for availability,  (uint64_t)static Logger.availability,  (uint64_t)one-time initialization function for availability,  a1);
}

uint64_t one-time initialization function for liteSegmentStore(uint64_t a1)
{
  return one-time initialization function for liteSession(a1, static Logger.liteSegmentStore);
}

uint64_t Logger.liteSegmentStore.unsafeMutableAddressor()
{
  return Logger.liteSession.unsafeMutableAddressor( &one-time initialization token for liteSegmentStore,  (uint64_t)static Logger.liteSegmentStore);
}

uint64_t static Logger.liteSegmentStore.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.liteSession.getter( &one-time initialization token for liteSegmentStore,  (uint64_t)static Logger.liteSegmentStore,  (uint64_t)one-time initialization function for liteSegmentStore,  a1);
}

uint64_t one-time initialization function for bitPacker(uint64_t a1)
{
  return one-time initialization function for liteSession(a1, static Logger.bitPacker);
}

uint64_t one-time initialization function for liteSession(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger(0LL);
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  uint64_t v4 = static Logger.messagesSubsystem.getter();
  return Logger.init(subsystem:category:)(v4);
}

uint64_t Logger.bitPacker.unsafeMutableAddressor()
{
  return Logger.liteSession.unsafeMutableAddressor( &one-time initialization token for bitPacker,  (uint64_t)static Logger.bitPacker);
}

uint64_t static Logger.bitPacker.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.liteSession.getter( &one-time initialization token for bitPacker,  (uint64_t)static Logger.bitPacker,  (uint64_t)one-time initialization function for bitPacker,  a1);
}

uint64_t one-time initialization function for lastFetchDate()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  __swift_allocate_value_buffer(v0, lastFetchDate);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)lastFetchDate);
  uint64_t v2 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
}

Swift::Void __swiftcall LiteMessageServiceSession.fetchIncomingPendingMessages(fromHandlesIDs:)( Swift::OpaquePointer fromHandlesIDs)
{
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v7);
  id v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v10 = [(id)objc_opt_self(IDSServerBag) sharedInstanceForBagType:1];
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [v10 objectForKey:v11];

  if (v12)
  {
    _bridgeAnyObjectToAny(_:)(v29, v12);
    swift_unknownObjectRelease(v12);
  }

  else
  {
    memset(v29, 0, sizeof(v29));
  }

  outlined init with take of Any?((uint64_t)v29, (uint64_t)v30);
  if (!v31)
  {
    outlined destroy of TaskPriority?((uint64_t)v30, &demangling cache variable for type metadata for Any?);
LABEL_11:
    uint64_t v21 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v9, 1LL, 1LL, v21);
    type metadata accessor for MainActor(0LL);
    id v22 = v1;
    swift_bridgeObjectRetain(fromHandlesIDs._rawValue);
    uint64_t v24 = static MainActor.shared.getter(v23);
    uint64_t v25 = (Swift::OpaquePointer *)swift_allocObject(&unk_49888, 48LL, 7LL);
    v25[2]._rawValue = (void *)v24;
    v25[3]._rawValue = &protocol witness table for MainActor;
    v25[4]._rawValue = v22;
    v25[5]._rawValue = fromHandlesIDs._rawValue;
    uint64_t v26 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( (uint64_t)v9,  (uint64_t)&async function pointer to partial apply for closure #1 in LiteMessageServiceSession.fetchIncomingPendingMessages(fromHandlesIDs:),  (uint64_t)v25);
    swift_release(v26);
    return;
  }

  uint64_t v13 = type metadata accessor for IMDHandle( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
  id v14 = v28;
  unsigned __int8 v15 = [v28 BOOLValue];

  if ((v15 & 1) == 0) {
    goto LABEL_11;
  }
  uint64_t v16 = Logger.liteSession.unsafeMutableAddressor();
  uint64_t v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v16, v3);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl(&dword_0, v18, v19, "Satellite fetch disabled by server bag", v20, 2u);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t closure #1 in LiteMessageServiceSession.fetchIncomingPendingMessages(fromHandlesIDs:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[30] = a4;
  v5[31] = a5;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v5[32] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[33] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[34] = swift_task_alloc(v8);
  v5[35] = swift_task_alloc(v8);
  v5[36] = swift_task_alloc(v8);
  v5[37] = swift_task_alloc(v8);
  v5[38] = swift_task_alloc(v8);
  v5[39] = swift_task_alloc(v8);
  v5[40] = swift_task_alloc(v8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v5[41] = v9;
  unint64_t v10 = (*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[42] = swift_task_alloc(v10);
  v5[43] = swift_task_alloc(v10);
  uint64_t v11 = type metadata accessor for Date(0LL);
  v5[44] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[45] = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[46] = swift_task_alloc(v13);
  v5[47] = swift_task_alloc(v13);
  v5[48] = swift_task_alloc(v13);
  uint64_t v14 = type metadata accessor for MainActor(0LL);
  v5[49] = static MainActor.shared.getter(v14);
  uint64_t v15 = dispatch thunk of Actor.unownedExecutor.getter(v14, &protocol witness table for MainActor);
  v5[50] = v15;
  v5[51] = v16;
  return swift_task_switch( closure #1 in LiteMessageServiceSession.fetchIncomingPendingMessages(fromHandlesIDs:),  v15,  v16);
}

uint64_t closure #1 in LiteMessageServiceSession.fetchIncomingPendingMessages(fromHandlesIDs:)()
{
  uint64_t v1 = (char **)v0;
  uint64_t v2 = v0 + 240;
  if ((variable initialization expression of LiteMessageServiceSession.State.emergencyContactsNotificationToken() & 1) == 0)
  {
    uint64_t v36 = *(void *)(v0 + 392);
    uint64_t v37 = *(void *)(v0 + 280);
    uint64_t v38 = *(void *)(v0 + 256);
    uint64_t v39 = *(void *)(v0 + 264);
    swift_release(v36);
    uint64_t v40 = Logger.liteSession.unsafeMutableAddressor();
    uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v37, v40, v38);
    id v42 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v43 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v42, v43))
    {
      double v44 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)double v44 = 0;
      _os_log_impl(&dword_0, v42, v43, "Skipping satellite pending message fetch, not connected to satellite", v44, 2u);
      swift_slowDealloc(v44, -1LL, -1LL);
    }

    uint64_t v45 = v1[35];
    goto LABEL_44;
  }

  uint64_t v3 = *(void *)(v0 + 248);
  id v4 = *(id *)(v0 + 240);
  uint64_t v5 = (uint64_t)specialized Sequence.compactMap<A>(_:)(v3, v4);

  if (!((unint64_t)v5 >> 62))
  {
    uint64_t v6 = *(void *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain(v5);
    if (v6) {
      goto LABEL_4;
    }
LABEL_40:
    swift_bridgeObjectRelease_n(v5, 2LL);
LABEL_41:
    unsigned __int8 v168 = v1[36];
    id v169 = v1[32];
    id v170 = v1[33];
    swift_release(v1[49]);
    uint64_t v171 = Logger.liteSession.unsafeMutableAddressor();
    uint64_t v172 = (*((uint64_t (**)(char *, uint64_t, char *))v170 + 2))(v168, v171, v169);
    id v42 = (os_log_s *)Logger.logObject.getter(v172);
    os_log_type_t v173 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v42, v173))
    {
      uint64_t v174 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v174 = 0;
      _os_log_impl(&dword_0, v42, v173, "No incoming pending satellite messages, no reason to fetch", v174, 2u);
      swift_slowDealloc(v174, -1LL, -1LL);
    }

    uint64_t v45 = v1[36];
    goto LABEL_44;
  }

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 456) = v2;
  if (v2) {
    uint64_t v3 = closure #1 in LiteMessageServiceSession.fetchIncomingPendingMessages(fromHandlesIDs:);
  }
  else {
    uint64_t v3 = closure #1 in LiteMessageServiceSession.fetchIncomingPendingMessages(fromHandlesIDs:);
  }
  return swift_task_switch(v3, *(void *)(v1 + 400), *(void *)(v1 + 408));
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v1 = *(void **)(v0 + 440);
  uint64_t v2 = *(void **)(v0 + 448);
  swift_release(*(void *)(v0 + 392));
  swift_bridgeObjectRelease(*(void *)(v0 + 200));

  uint64_t v3 = *(void *)(v0 + 376);
  id v4 = *(void *)(v0 + 368);
  uint64_t v6 = *(void *)(v0 + 336);
  uint64_t v5 = *(void *)(v0 + 344);
  uint64_t v8 = *(void *)(v0 + 312);
  uint64_t v7 = *(void *)(v0 + 320);
  unint64_t v10 = *(void *)(v0 + 296);
  id v9 = *(void *)(v0 + 304);
  id v11 = *(void *)(v0 + 288);
  unint64_t v13 = *(void *)(v0 + 280);
  uint64_t v14 = *(void *)(v0 + 272);
  swift_task_dealloc(*(void *)(v0 + 384));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_log_s *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  LiteMessageServiceSession *v17;
  SEL v18;
  id v19;
  id v20;
  unsigned __int8 v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v2 = *(void **)(v0 + 448);
  uint64_t v1 = *(void *)(v0 + 456);
  uint64_t v3 = *(void **)(v0 + 440);
  id v4 = *(void *)(v0 + 416);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 424);
  uint64_t v6 = *(void *)(v0 + 272);
  uint64_t v7 = *(void *)(v0 + 256);
  uint64_t v8 = swift_release(*(void *)(v0 + 392));
  swift_willThrow(v8);

  v5(v6, v4, v7);
  swift_errorRetain(v1);
  id v9 = swift_errorRetain(v1);
  unint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  id v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    BOOL v12 = *(void *)(v0 + 456);
    uint64_t v40 = *(void *)(v0 + 272);
    id v42 = *(void (**)(uint64_t, uint64_t))(v0 + 432);
    uint64_t v39 = *(void *)(v0 + 256);
    unint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    double v44 = v14;
    *(_DWORD *)unint64_t v13 = 136315138;
    swift_getErrorValue(v12, v0 + 192, v0 + 168);
    uint64_t v15 = Error.localizedDescription.getter(*(void *)(v0 + 176), *(void *)(v0 + 184));
    id v17 = (LiteMessageServiceSession *)v16;
    *(void *)(v0 + 20_Block_object_dispose(va, 8) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    _os_log_impl(&dword_0, v10, v11, "Failed to send fetch request: %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);

    swift_errorRelease(v12);
    v42(v40, v39);
  }

  else
  {
    id v25 = *(void *)(v0 + 456);
    id v26 = *(void (**)(uint64_t, uint64_t))(v0 + 432);
    unsigned __int8 v27 = *(void *)(v0 + 272);
    id v28 = *(void *)(v0 + 256);
    swift_errorRelease(v25);
    swift_errorRelease(v25);
    swift_errorRelease(v25);

    v26(v27, v28);
  }

  id v29 = *(void *)(v0 + 376);
  id v30 = *(void *)(v0 + 368);
  uint64_t v32 = *(void *)(v0 + 336);
  uint64_t v31 = *(void *)(v0 + 344);
  uint64_t v34 = *(void *)(v0 + 312);
  uint64_t v33 = *(void *)(v0 + 320);
  uint64_t v36 = *(void *)(v0 + 296);
  uint64_t v35 = *(void *)(v0 + 304);
  uint64_t v37 = *(void *)(v0 + 288);
  uint64_t v41 = *(void *)(v0 + 280);
  os_log_type_t v43 = *(void *)(v0 + 272);
  swift_task_dealloc(*(void *)(v0 + 384));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

LABEL_36:
  if (v5 < 0) {
    uint64_t v3 = v5;
  }
  else {
    uint64_t v3 = v5 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v5);
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v3);
  if (!v6) {
    goto LABEL_40;
  }
LABEL_4:
  if (v6 < 1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v3 = v2 - 120;
    uint64_t v219 = v2 - 96;
    v223 = v1;
    v216 = (uint64_t *)(v2 - 24);
    v218 = (uint64_t *)(v2 - 16);
    v214 = (void *)(v2 - 8);
    uint64_t v1 = &selRef_sentDowngradeRequestToHandleID_fromID_;
    do
    {
      if ((v5 & 0xC000000000000001LL) != 0) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
      }
      else {
        id v9 = *(id *)(v5 + 8 * v7 + 32);
      }
      unint64_t v10 = v9;
      id v11 = [v9 pendingIncomingSatelliteMessageCount];

      BOOL v12 = __OFADD__(v8, v11);
      v8 += (uint64_t)v11;
      if (v12)
      {
        __break(1u);
        goto LABEL_36;
      }

      ++v7;
    }

    while (v6 != v7);
    swift_bridgeObjectRelease_n(v5, 2LL);
    uint64_t v1 = v223;
    if (v8 < 1) {
      goto LABEL_41;
    }
    unint64_t v13 = (LiteMessageServiceSession *)v223[31];
    swift_bridgeObjectRetain(v13);
    uint64_t v15 = (LiteMessageServiceSession *)specialized Set.init<A>(_:)(v14);
    swift_bridgeObjectRelease(v13, v16, v17, v18, v19, v20, v21, v22);
    specialized Sequence.compactMap<A>(_:)((uint64_t)v15);
    uint64_t v5 = v23;
    swift_bridgeObjectRelease(v15, v24, v25, v26, v27, v28, v29, v30);
    if (!((unint64_t)v5 >> 62))
    {
      goto LABEL_14;
    }
  }

  if (v5 < 0) {
    uint64_t v188 = v5;
  }
  else {
    uint64_t v188 = v5 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v5);
  uint64_t v189 = _CocoaArrayWrapper.endIndex.getter(v188);
  swift_bridgeObjectRelease((LiteMessageServiceSession *)v5, v190, v191, v192, v193, v194, v195, v196);
  if (!v189)
  {
LABEL_51:
    v197 = v1[37];
    v198 = v1[32];
    v199 = v1[33];
    swift_release(v1[49]);
    swift_bridgeObjectRelease((LiteMessageServiceSession *)v5, v200, v201, v202, v203, v204, v205, v206);
    uint64_t v207 = Logger.liteSession.unsafeMutableAddressor();
    uint64_t v208 = (*((uint64_t (**)(char *, uint64_t, char *))v199 + 2))(v197, v207, v198);
    id v42 = (os_log_s *)Logger.logObject.getter(v208);
    os_log_type_t v209 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v42, v209))
    {
      v210 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v210 = 0;
      _os_log_impl(&dword_0, v42, v209, "No handles to fetch pending messages for", v210, 2u);
      swift_slowDealloc(v210, -1LL, -1LL);
    }

    uint64_t v45 = v1[37];
LABEL_44:
    uint64_t v175 = v1[32];
    v176 = v1[33];

    (*((void (**)(char *, char *))v176 + 1))(v45, v175);
    goto LABEL_45;
  }

void specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v7 = 0LL;
  while (v5)
  {
    unint64_t v8 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v9 = v8 | (v7 << 6);
LABEL_22:
    uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 16 * v9 + 8);
    id v14 = objc_allocWithZone(&OBJC_CLASS___IDSURI);
    swift_bridgeObjectRetain(v13);
    NSString v15 = String._bridgeToObjectiveC()();
    id v16 = [v14 initWithUnprefixedURI:v15];
    swift_bridgeObjectRelease(v13);

    if (v16)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      unint64_t v18 = *(void *)((char *)&dword_10 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
      unint64_t v17 = *(void *)((char *)&dword_18 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
      if (v18 >= v17 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1LL);
      }
      uint64_t v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v16);
      specialized Array._endMutation()(v19);
    }
  }

  int64_t v10 = v7 + 1;
  if (__OFADD__(v7, 1LL))
  {
    __break(1u);
    goto LABEL_28;
  }

  if (v10 >= v6) {
    goto LABEL_26;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v10);
  ++v7;
  if (v11) {
    goto LABEL_21;
  }
  int64_t v7 = v10 + 1;
  if (v10 + 1 >= v6) {
    goto LABEL_26;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v7);
  if (v11) {
    goto LABEL_21;
  }
  int64_t v7 = v10 + 2;
  if (v10 + 2 >= v6) {
    goto LABEL_26;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v7);
  if (v11) {
    goto LABEL_21;
  }
  int64_t v7 = v10 + 3;
  if (v10 + 3 >= v6) {
    goto LABEL_26;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v7);
  if (v11)
  {
LABEL_21:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
    goto LABEL_22;
  }

  int64_t v12 = v10 + 4;
  if (v12 >= v6)
  {
LABEL_26:
    swift_release(a1);
    return;
  }

  unint64_t v11 = *(void *)(v2 + 8 * v12);
  if (v11)
  {
    int64_t v7 = v12;
    goto LABEL_21;
  }

  while (1)
  {
    int64_t v7 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_26;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v7);
    ++v12;
    if (v11) {
      goto LABEL_21;
    }
  }

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSSet?, @unowned NSError?) -> () with result type Set<IDSURI>( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *int64_t v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }

  else
  {
    uint64_t v11 = type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IDSURI,  &OBJC_CLASS___IDSURI_ptr);
    unint64_t v12 = lazy protocol witness table accessor for type IDSURI and conformance NSObject();
    **(void **)(*(void *)(v3 + 64) + 40LL) = static Set._unconditionallyBridgeFromObjectiveC(_:)(a2, v11, v12);
    return swift_continuation_throwingResume(v3);
  }

uint64_t sub_17FC8()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t partial apply for closure #1 in LiteMessageServiceSession.fetchIncomingPendingMessages(fromHandlesIDs:)()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = (void *)swift_task_alloc(dword_4DB0C);
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = partial apply for closure #1 in LiteMessageServiceSession.familyContactsDidChange();
  return closure #1 in LiteMessageServiceSession.fetchIncomingPendingMessages(fromHandlesIDs:)( (uint64_t)v4,  v5,  v6,  v2,  v3);
}

uint64_t sub_1804C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, void *a2)
{
  __n128 result = &_swiftEmptyArrayStorage;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain(a1);
    uint64_t v6 = (void *)(a1 + 40);
    do
    {
      uint64_t v8 = *v6;
      swift_bridgeObjectRetain(*v6);
      NSString v9 = String._bridgeToObjectiveC()();
      id v10 = [a2 chatForChatIdentifier:v9 style:45];
      swift_bridgeObjectRelease(v8);

      if (v10)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        unint64_t v12 = *(void *)((char *)&dword_10 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
        unint64_t v11 = *(void *)((char *)&dword_18 + ((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL));
        if (v12 >= v11 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1LL);
        }
        uint64_t v7 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v10);
        specialized Array._endMutation()(v7);
      }

      v6 += 2;
      --v4;
    }

    while (v4);
    swift_bridgeObjectRelease(a1);
    return &_swiftEmptyArrayStorage;
  }

  return result;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  uint64_t v15 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      specialized Set._Variant.insert(_:)(v14, v5, v6);
      swift_bridgeObjectRelease((LiteMessageServiceSession *)v14[1], v7, v8, v9, v10, v11, v12, v13);
      v4 += 2;
      --v2;
    }

    while (v2);
    return v15;
  }

  return result;
}

uint64_t outlined init with copy of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

void specialized Set.init<A>(_:)(uint64_t a1)
{
  unint64_t v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v19 = a1;
    }
    else {
      uint64_t v19 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease((LiteMessageServiceSession *)a1, v20, v21, v22, v23, v24, v25, v26);
  }

  else
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t v4 = type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IDSURI,  &OBJC_CLASS___IDSURI_ptr);
  unint64_t v5 = lazy protocol witness table accessor for type IDSURI and conformance NSObject();
  v27[1] = (id)Set.init(minimumCapacity:)(v3, v4, v5);
  if (!v2)
  {
    uint64_t v6 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
    if (!v6) {
      return;
    }
    goto LABEL_10;
  }

  if (a1 < 0) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a1);
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v7);
  swift_bridgeObjectRelease((LiteMessageServiceSession *)a1, v8, v9, v10, v11, v12, v13, v14);
  if (v6)
  {
LABEL_10:
    if (v6 < 1)
    {
      __break(1u);
    }

    else if ((a1 & 0xC000000000000001LL) != 0)
    {
      for (uint64_t i = 0LL; i != v6; ++i)
      {
        id v16 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        specialized Set._Variant.insert(_:)((Swift::Int *)v27, v16);
      }
    }

    else
    {
      unint64_t v17 = (void **)(a1 + 32);
      do
      {
        unint64_t v18 = *v17++;
        specialized Set._Variant.insert(_:)((Swift::Int *)v27, v18);

        --v6;
      }

      while (v6);
    }
  }

unint64_t lazy protocol witness table accessor for type Date and conformance Date()
{
  unint64_t result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    uint64_t v1 = type metadata accessor for Date(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }

  return result;
}

uint64_t static ConsolidationIdentifierError.__derived_enum_equals(_:_:)()
{
  return 1LL;
}

void ConsolidationIdentifierError.hash(into:)()
{
}

Swift::Int ConsolidationIdentifierError.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConsolidationIdentifierError( uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t IDSOffGridEncryptedMessage.consolidationIdentifier.getter()
{
  uint64_t v1 = v0;
  id v2 = [v0 encryptionProperties];
  uint64_t countAndFlagsBits = (uint64_t)objc_msgSend(v2, "__im_encryptionKeyID");

  if (!countAndFlagsBits
    || (uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)(countAndFlagsBits),
        unint64_t v6 = v5,
        (id)countAndFlagsBits,
        specialized Collection.first.getter(v4, v6),
        uint64_t countAndFlagsBits = v7,
        outlined consume of Data._Representation(v4, v6),
        (countAndFlagsBits & 0x100) != 0))
  {
    unint64_t v21 = lazy protocol witness table accessor for type ConsolidationIdentifierError and conformance ConsolidationIdentifierError();
    uint64_t v22 = swift_allocError(&type metadata for ConsolidationIdentifierError, v21, 0LL, 0LL);
    swift_willThrow(v22);
  }

  else
  {
    id v8 = [v1 encryptionProperties];
    id v9 = [v8 ratchetCounter];

    id v10 = [v9 integerValue];
    id v24 = v10;
    uint64_t v11 = specialized Data.InlineData.init(_:)(&v24, &v25);
    unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v15 = swift_allocObject(v14, 33LL, 7LL);
    *(_OWORD *)(v15 + 16) = xmmword_3BA10;
    *(_BYTE *)(v15 + 32) = countAndFlagsBits;
    uint64_t v16 = specialized Data.init<A>(_:)(v15);
    unint64_t v18 = v17;
    swift_bridgeObjectRelease(v15);
    uint64_t v25 = v16;
    unint64_t v26 = v18;
    Data.append(_:)(v11, v13);
    uint64_t v19 = v25;
    unint64_t v20 = v26;
    outlined copy of Data._Representation(v25, v26);
    uint64_t countAndFlagsBits = Data.base64EncodedString(options:)(0LL)._countAndFlagsBits;
    outlined consume of Data._Representation(v19, v20);
    outlined consume of Data._Representation(v11, v13);
    outlined consume of Data._Representation(v19, v20);
  }

  return countAndFlagsBits;
}

unint64_t lazy protocol witness table accessor for type ConsolidationIdentifierError and conformance ConsolidationIdentifierError()
{
  unint64_t result = lazy protocol witness table cache variable for type ConsolidationIdentifierError and conformance ConsolidationIdentifierError;
  if (!lazy protocol witness table cache variable for type ConsolidationIdentifierError and conformance ConsolidationIdentifierError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ConsolidationIdentifierError,  &type metadata for ConsolidationIdentifierError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ConsolidationIdentifierError and conformance ConsolidationIdentifierError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ConsolidationIdentifierError and conformance ConsolidationIdentifierError;
  if (!lazy protocol witness table cache variable for type ConsolidationIdentifierError and conformance ConsolidationIdentifierError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ConsolidationIdentifierError,  &type metadata for ConsolidationIdentifierError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ConsolidationIdentifierError and conformance ConsolidationIdentifierError);
  }

  return result;
}

void specialized Collection.first.getter(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }

uint64_t sub_187A8(unsigned __int8 a1, uint64_t a2)
{
  if ((a2 & 0xFF000000000000LL) != 0) {
    unsigned __int8 v2 = a1;
  }
  else {
    unsigned __int8 v2 = 0;
  }
  return v2 | (((a2 & 0xFF000000000000LL) == 0) << 8);
}

uint64_t outlined consume of Data._Representation(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

id IDSOffGridEncryptedMessage.segmentNumber.getter()
{
  return IDSOffGridEncryptedMessage.segmentNumber.getter((SEL *)&selRef_segmentNumber);
}

id IDSOffGridEncryptedMessage.totalSegments.getter()
{
  return IDSOffGridEncryptedMessage.segmentNumber.getter((SEL *)&selRef_totalSegments);
}

id IDSOffGridEncryptedMessage.segmentNumber.getter(SEL *a1)
{
  id v3 = [v1 encryptionProperties];
  id v4 = [v3 *a1];

  id v5 = [v4 integerValue];
  return v5;
}

_BYTE *closure #1 in Data.init<A>(_:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    unint64_t result = 0LL;
LABEL_4:
    unint64_t v5 = 0xC000000000000000LL;
    goto LABEL_5;
  }

  if (v4 <= 14)
  {
    unint64_t result = (_BYTE *)specialized Data.InlineData.init(_:)(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }

  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    unint64_t result = (_BYTE *)specialized Data.LargeSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000LL;
  }

  else
  {
    unint64_t result = (_BYTE *)specialized Data.InlineSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000LL;
  }

uint64_t specialized Data.InlineData.init(_:)(_BYTE *__src, _BYTE *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0LL;
  }
  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }

  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t specialized Data.LargeSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = type metadata accessor for Data.RangeReference(0LL);
    uint64_t result = swift_allocObject(v6, 32LL, 7LL);
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = v3;
  }

  return result;
}

uint64_t specialized Data.InlineSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if ((v3 & 0x80000000) == 0) {
    return v3 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  unint64_t v10 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]();
  v8[0] = a1;
  unint64_t v2 = __swift_project_boxed_opaque_existential_1(v8, v9);
  uint64_t v3 = (_BYTE *)(*v2 + 32LL);
  uint64_t v4 = &v3[*(void *)(*v2 + 16LL)];
  swift_bridgeObjectRetain(a1);
  closure #1 in Data.init<A>(_:)(v3, v4, &v7);
  uint64_t v5 = v7;
  __swift_destroy_boxed_opaque_existential_0(v8);
  return v5;
}

uint64_t outlined copy of Data._Representation(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t getEnumTagSinglePayload for ConsolidationIdentifierError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for ConsolidationIdentifierError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_18D58 + 4 * asc_3BAD0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_18D78 + 4 * byte_3BAD5[v4]))();
  }
}

_BYTE *sub_18D58(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_18D78(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_18D80(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_18D88(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_18D90(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_18D98(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ConsolidationIdentifierError()
{
  return &type metadata for ConsolidationIdentifierError;
}

unint64_t lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt8]);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A]);
  }

  return result;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

void *IMDService.idsServiceNames.getter()
{
  id v1 = [v0 serviceProperties];
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v1,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  v8[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(IMServicePropertyIDSServiceNames);
  v8[1] = v3;
  AnyHashable.init<A>(_:)(v8, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v2 + 16) && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9), (v5 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v4, (uint64_t)&v10);
  }

  else
  {
    __int128 v10 = 0u;
    __int128 v11 = 0u;
  }

  swift_bridgeObjectRelease(v2);
  outlined destroy of AnyHashable((uint64_t)v9);
  if (*((void *)&v11 + 1))
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  }

  else
  {
    outlined destroy of Any?((uint64_t)&v10);
  }

  return &_swiftEmptyArrayStorage;
}

void *IMDService.idsServiceName.getter()
{
  unint64_t result = IMDService.idsServiceNames.getter();
  if (result[2])
  {
    id v1 = result;
    uint64_t v2 = result[4];
    swift_bridgeObjectRetain(result[5]);
    swift_bridgeObjectRelease(v1);
    return (void *)v2;
  }

  else
  {
    __break(1u);
  }

  return result;
}

Swift::Bool __swiftcall IMDService.hasAlias(_:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  id v4 = [(id)objc_opt_self(IMDAccountController) sharedInstance];
  if (!v4)
  {
    __break(1u);
    goto LABEL_5;
  }

  char v5 = v4;
  id v6 = [v4 accountsForService:v1];

  if (!v6)
  {
LABEL_5:
    __break(1u);
    return (char)v4;
  }

  unint64_t v7 = type metadata accessor for IMDAccount();
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  swift_bridgeObjectRetain(object);
  char v9 = specialized Sequence.contains(where:)(v8, countAndFlagsBits, (uint64_t)object);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(object);
  LOBYTE(v4) = v9 & 1;
  return (char)v4;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t type metadata accessor for IMDAccount()
{
  unint64_t result = lazy cache variable for type metadata for IMDAccount;
  if (!lazy cache variable for type metadata for IMDAccount)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___IMDAccount);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for IMDAccount);
  }

  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;
  uint64_t v3 = v2 + 64;
  unint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  uint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IDSURI,  &OBJC_CLASS___IDSURI_ptr);
    uint64_t v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      unint64_t v8 = ~v4;
      for (uint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; uint64_t i = (i + 1) & v8)
      {
        char v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        __int128 v10 = static NSObject.== infix(_:_:)();

        if ((v10 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

uint64_t specialized Sequence.contains(where:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_30;
  }
  uint64_t v6 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(a1);
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v20))
  {
    uint64_t v7 = 0LL;
    unint64_t v8 = v5 & 0xC000000000000001LL;
    uint64_t v22 = v5 + 32;
    uint64_t v25 = v5;
    unint64_t v23 = v5 & 0xC000000000000001LL;
    uint64_t v24 = v6;
    while (1)
    {
      id v9 = v8 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5) : *(id *)(v22 + 8 * v7);
      __int128 v10 = v9;
      if (__OFADD__(v7++, 1LL)) {
        break;
      }
      id v12 = [v9 aliases];
      unint64_t v13 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v14 = v13[2];
      if (v14)
      {
        BOOL v15 = v13[4] == a2 && v13[5] == a3;
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_27:

          swift_bridgeObjectRelease(v13);
          uint64_t v19 = 1LL;
          uint64_t v5 = v25;
          goto LABEL_35;
        }

        if (v14 != 1)
        {
          uint64_t v16 = v13 + 7;
          uint64_t v17 = 1LL;
          while (1)
          {
            uint64_t v5 = v17 + 1;
            if (__OFADD__(v17, 1LL)) {
              break;
            }
            BOOL v18 = *(v16 - 1) == a2 && *v16 == a3;
            if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              goto LABEL_27;
            }
            v16 += 2;
            ++v17;
            if (v5 == v14) {
              goto LABEL_4;
            }
          }

          __break(1u);
          break;
        }

LABEL_4:
        swift_bridgeObjectRelease(v13);
        uint64_t v5 = v25;
        unint64_t v8 = v23;
        uint64_t v6 = v24;
        if (v7 == v24) {
          goto LABEL_26;
        }
      }

      else
      {

        swift_bridgeObjectRelease(v13);
        if (v7 == v6)
        {
LABEL_26:
          uint64_t v19 = 0LL;
          goto LABEL_35;
        }
      }
    }

    __break(1u);
LABEL_30:
    if (v5 < 0) {
      uint64_t v20 = v5;
    }
    else {
      uint64_t v20 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v5);
  }

  uint64_t v19 = 0LL;
LABEL_35:
  swift_bridgeObjectRelease(v5);
  return v19;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

void one-time initialization function for liteControlCharacters()
{
  liteControlCharacters = (uint64_t)&outlined read-only object #0 of one-time initialization function for liteControlCharacters;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> String.liteEscapedText.getter( uint64_t a1, uint64_t a2)
{
  v35[2] = a2;
  uint64_t v2 = one-time initialization token for liteControlCharacters;
  swift_bridgeObjectRetain(a2);
  if (v2 != -1) {
    swift_once( &one-time initialization token for liteControlCharacters,  one-time initialization function for liteControlCharacters);
  }
  uint64_t v3 = (LiteMessageServiceSession *)liteControlCharacters;
  swift_bridgeObjectRetain(liteControlCharacters);
  for (uint64_t i = 0LL; i != 272; i += 16LL)
  {
    uint64_t v6 = *(void *)&v3->state[i + 24];
    uint64_t v5 = *(void *)&v3->state[i + 32];
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
    uint64_t v8 = swift_allocObject(v7, 48LL, 7LL);
    *(_OWORD *)(v8 + 16) = xmmword_3BA10;
    *(void *)(v8 + 32) = v6;
    *(void *)(v8 + 40) = v5;
    v35[0] = v8;
    uint64_t v9 = swift_allocObject(v7, 64LL, 7LL);
    *(_OWORD *)(v9 + 16) = xmmword_3BA00;
    *(void *)(v9 + 32) = 1LL;
    *(void *)(v9 + 40) = 0xE100000000000000LL;
    *(void *)(v9 + 4_Block_object_dispose(va, 8) = v6;
    *(void *)(v9 + 56) = v5;
    uint64_t v34 = v9;
    swift_bridgeObjectRetain_n(v5, 2LL);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Character]);
    unint64_t v11 = lazy protocol witness table accessor for type String and conformance String();
    unint64_t v12 = lazy protocol witness table accessor for type [Character] and conformance [A]();
    RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)( v35,  &v34,  0x7FFFFFFFFFFFFFFFLL,  &type metadata for String,  v10,  v10,  v11,  v12,  v12,  &protocol witness table for Character);
    swift_bridgeObjectRelease((LiteMessageServiceSession *)v8, v13, v14, v15, v16, v17, v18, v19);
    swift_bridgeObjectRelease((LiteMessageServiceSession *)v9, v20, v21, v22, v23, v24, v25, v26);
  }

  swift_bridgeObjectRelease(v3, v27, v28, v29, v30, v31, v32, v33);
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type [Character] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Character] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Character] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Character]);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type [Character] and conformance [A]);
  }

  return result;
}

void static NSAttributedString.makeMessageBody(for:)()
{
  id v0 = objc_allocWithZone(&OBJC_CLASS___IMToSuperParserContext);
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 initWithContent:v1];

  if (v2)
  {
    NSString v3 = String._bridgeToObjectiveC()();
    [v2 appendString:v3];

    if ([v2 body])
    {

      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t LiteMessageServiceSession.processReceivedEncryptedMessage(_:identifier:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v4[6] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[7] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[8] = swift_task_alloc(v7);
  v4[9] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for MainActor(0LL);
  v4[10] = static MainActor.shared.getter(v8);
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  v4[11] = v9;
  v4[12] = v10;
  return swift_task_switch(LiteMessageServiceSession.processReceivedEncryptedMessage(_:identifier:), v9, v10);
}

uint64_t LiteMessageServiceSession.processReceivedEncryptedMessage(_:identifier:)()
{
  uint64_t v1 = v0[7];
  id v2 = IDSOffGridEncryptedMessage.totalSegments.getter();
  uint64_t v3 = Logger.liteSession.unsafeMutableAddressor();
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
  uint64_t v5 = v0[6];
  if ((uint64_t)v2 <= 1)
  {
    uint64_t v15 = v4(v0[9], v3, v5);
    unsigned __int8 v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v18 = 0;
      _os_log_impl(&dword_0, v16, v17, "Message is a single segment, immediately decrypting", v18, 2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    uint64_t v19 = v0[9];
    uint64_t v20 = v0[6];
    uint64_t v21 = v0[7];

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
    id v22 = (uint64_t **)swift_task_alloc(dword_4DB84);
    v0[13] = (uint64_t)v22;
    void *v22 = v0;
    v22[1] = (uint64_t *)LiteMessageServiceSession.processReceivedEncryptedMessage(_:identifier:);
    return LiteMessageServiceSession.decryptAndStoreMessage(_:identifier:)(v0[2], v0[3], v0[4]);
  }

  else
  {
    uint64_t v6 = v4(v0[8], v3, v5);
    unint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_0, v7, v8, "Message is one of several segments", v9, 2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    uint64_t v11 = v0[7];
    uint64_t v10 = v0[8];
    uint64_t v12 = v0[6];

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    SEL v13 = (uint64_t **)swift_task_alloc(dword_4DB8C);
    v0[15] = (uint64_t)v13;
    *SEL v13 = v0;
    v13[1] = (uint64_t *)LiteMessageServiceSession.processReceivedEncryptedMessage(_:identifier:);
    return LiteMessageServiceSession.processReceivedEncryptedMessageSegment(_:)(v0[2]);
  }

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  id v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 104);
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    unint64_t v4 = LiteMessageServiceSession.processReceivedEncryptedMessage(_:identifier:);
  }
  else {
    unint64_t v4 = LiteMessageServiceSession.processReceivedEncryptedMessage(_:identifier:);
  }
  return swift_task_switch(v4, *(void *)(v2 + 88), *(void *)(v2 + 96));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *(void *)(v0 + 72);
  id v2 = *(void *)(v0 + 64);
  swift_release(*(void *)(v0 + 80));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  id v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 120);
  *(void *)(*v1 + 12_Block_object_dispose(va, 8) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    unint64_t v4 = LiteMessageServiceSession.processReceivedEncryptedMessage(_:identifier:);
  }
  else {
    unint64_t v4 = LiteMessageServiceSession.processReceivedEncryptedMessage(_:identifier:);
  }
  return swift_task_switch(v4, *(void *)(v2 + 88), *(void *)(v2 + 96));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *(void *)(v0 + 72);
  id v2 = *(void *)(v0 + 64);
  swift_release(*(void *)(v0 + 80));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *(void *)(v0 + 72);
  id v2 = *(void *)(v0 + 64);
  swift_release(*(void *)(v0 + 80));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LiteMessageServiceSession.decryptAndStoreMessage(_:identifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[24] = a3;
  v4[25] = v3;
  v4[22] = a1;
  v4[23] = a2;
  uint64_t v5 = type metadata accessor for Date(0LL);
  v4[26] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for LiteMessageContext(0LL);
  v4[27] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Logger(0LL);
  v4[28] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[29] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[30] = swift_task_alloc(v9);
  v4[31] = swift_task_alloc(v9);
  uint64_t v10 = type metadata accessor for MainActor(0LL);
  v4[32] = static MainActor.shared.getter(v10);
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter(v10, &protocol witness table for MainActor);
  v4[33] = v11;
  v4[34] = v12;
  return swift_task_switch(LiteMessageServiceSession.decryptAndStoreMessage(_:identifier:), v11, v12);
}

uint64_t LiteMessageServiceSession.decryptAndStoreMessage(_:identifier:)()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = v0[22];
  id v3 = LiteMessageServiceSession.offGridMessenger.getter();
  v0[35] = v3;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = LiteMessageServiceSession.decryptAndStoreMessage(_:identifier:);
  uint64_t v4 = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v5 = v0 + 10;
  v5[1] = 0x40000000LL;
  _OWORD v5[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned IDSOffGridMessage?, @unowned NSString?, @unowned NSError?) -> () with result type (IDSOffGridMessage, String);
  v5[3] = &block_descriptor_3;
  v5[4] = v4;
  [v3 decryptOffGridMessage:v2 completion:v5];
  return swift_continuation_await(v1);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 28_Block_object_dispose(va, 8) = v2;
  if (v2) {
    id v3 = LiteMessageServiceSession.decryptAndStoreMessage(_:identifier:);
  }
  else {
    id v3 = LiteMessageServiceSession.decryptAndStoreMessage(_:identifier:);
  }
  return swift_task_switch(v3, *(void *)(v1 + 264), *(void *)(v1 + 272));
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  os_log_s *v9;
  os_log_type_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  Swift::String v32;
  Swift::Bool v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  os_log_s *v42;
  os_log_type_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  id v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(void);
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t);
  uint64_t v86;
  id v87;
  uint64_t v88[2];
  uint64_t v1 = (void *)v0[35];
  uint64_t v2 = v0[31];
  id v3 = v0[29];
  uint64_t v4 = v0[24];
  uint64_t v6 = (void *)v0[15];
  uint64_t v5 = v0[16];
  v0[37] = v6;
  uint64_t v7 = v0[17];

  unint64_t v82 = Logger.liteSession.unsafeMutableAddressor();
  id v85 = *(void (**)(uint64_t))(v3 + 16);
  v85(v2);
  swift_bridgeObjectRetain_n(v4, 2LL);
  uint64_t v8 = swift_bridgeObjectRetain_n(v7, 2LL);
  unint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  uint64_t v10 = static os_log_type_t.info.getter();
  unsigned __int8 v87 = v6;
  uint64_t v79 = v5;
  if (os_log_type_enabled(v9, v10))
  {
    unint64_t v80 = v0[31];
    uint64_t v75 = v0[29];
    uint64_t v77 = v0[28];
    uint64_t v12 = v0[23];
    uint64_t v11 = v0[24];
    SEL v13 = swift_slowAlloc(22LL, -1LL);
    id v14 = swift_slowAlloc(64LL, -1LL);
    v88[0] = v14;
    *(_DWORD *)SEL v13 = 136315394;
    swift_bridgeObjectRetain(v11);
    v0[20] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 20, v0 + 21, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease_n(v11, 3LL);
    *(_WORD *)(v13 + 12) = 2080;
    swift_bridgeObjectRetain(v7);
    v0[21] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 21, v0 + 22, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease_n(v7, 3LL);
    _os_log_impl(&dword_0, v9, v10, "Decrypted %s as %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);

    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
    v15(v80, v77);
  }

  else
  {
    unsigned __int8 v16 = v0[31];
    os_log_type_t v17 = v0[28];
    id v18 = v0[29];
    swift_bridgeObjectRelease_n(v0[24], 2LL);
    swift_bridgeObjectRelease_n(v7, 2LL);

    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v15(v16, v17);
  }

  uint64_t v19 = [v6 senderURI];
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v81 = v7;
    uint64_t v76 = v15;
    uint64_t v21 = (void *)v0[25];
    id v22 = [v19 unprefixedURI];

    unsigned __int8 v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    id v25 = v24;

    id v26 = [v6 recipientURI];
    unsigned __int8 v27 = [v26 unprefixedURI];

    id v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    unsigned __int8 v30 = v29;

    uint64_t v31 = [v21 service];
    v32._uint64_t countAndFlagsBits = v23;
    v32._object = v25;
    uint64_t v33 = IMDService.hasAlias(_:)(v32);

    if (v33) {
      uint64_t v34 = v30;
    }
    else {
      uint64_t v34 = (uint64_t)v25;
    }
    if (v33) {
      uint64_t v35 = v28;
    }
    else {
      uint64_t v35 = v23;
    }
    swift_bridgeObjectRetain(v34);
    uint64_t v78 = v23;
    v36._uint64_t countAndFlagsBits = v23;
    uint64_t v37 = (unint64_t)v25;
    v36._object = v25;
    if (LiteMessageServiceSession.hasBlockedFromHandleID(_:)(v36))
    {
      uint64_t v38 = v0[30];
      uint64_t v39 = v0[28];
      uint64_t v40 = v0[24];
      swift_release(v0[32]);
      swift_bridgeObjectRelease(v81);
      swift_bridgeObjectRelease(v30);
      swift_bridgeObjectRelease(v34);
      ((void (*)(uint64_t, uint64_t, uint64_t))v85)(v38, v82, v39);
      swift_bridgeObjectRetain_n(v40, 2LL);
      swift_bridgeObjectRetain(v25);
      id v42 = (os_log_s *)Logger.logObject.getter(v41);
      os_log_type_t v43 = static os_log_type_t.default.getter();
      double v44 = os_log_type_enabled(v42, v43);
      uint64_t v45 = v0[30];
      uint64_t v46 = v0[28];
      uint64_t v47 = v0[24];
      if (v44)
      {
        id v83 = v0[28];
        uint64_t v48 = v0[23];
        uint64_t v49 = swift_slowAlloc(22LL, -1LL);
        uint64_t v50 = swift_slowAlloc(64LL, -1LL);
        v88[0] = v50;
        *(_DWORD *)uint64_t v49 = 136315394;
        swift_bridgeObjectRetain(v47);
        v0[18] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v47, v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 18, v0 + 19, v49 + 4, v49 + 12);
        swift_bridgeObjectRelease_n(v47, 3LL);
        *(_WORD *)(v49 + 12) = 2080;
        swift_bridgeObjectRetain(v37);
        v0[19] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v37, v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 19, v0 + 20, v49 + 14, v49 + 22);
        swift_bridgeObjectRelease_n(v37, 3LL);
        _os_log_impl(&dword_0, v42, v43, "Dropping message %s, sender %s is blocked", (uint8_t *)v49, 0x16u);
        swift_arrayDestroy(v50, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v50, -1LL, -1LL);
        swift_slowDealloc(v49, -1LL, -1LL);

        uint64_t v52 = v83;
        double v51 = v45;
      }

      else
      {

        swift_bridgeObjectRelease_n(v47, 2LL);
        swift_bridgeObjectRelease_n(v37, 2LL);

        double v51 = v45;
        uint64_t v52 = v46;
      }

      v76(v51, v52);
      uint64_t v67 = v0[30];
      uint64_t v69 = v0[26];
      uint64_t v68 = v0[27];
      swift_task_dealloc(v0[31]);
      swift_task_dealloc(v67);
      swift_task_dealloc(v68);
      swift_task_dealloc(v69);
      os_log_type_t v70 = (uint64_t (*)(void))v0[1];
      return v70();
    }

    uint64_t v57 = LiteMessageServiceSession.joinedChat(with:)(v35, v34);
    v0[38] = v57;
    if (v57)
    {
      uint64_t v58 = v0[26];
      SEL v84 = v0[27];
      id v86 = (uint64_t)v57;
      uint64_t v59 = (void *)v0[22];
      swift_bridgeObjectRelease(v34);
      SEL v60 = v58;
      IDSOffGridEncryptedMessage.dateSent.getter();
      LOBYTE(v5_Block_object_dispose(va, 8) = variable initialization expression of LiteMessageServiceSession.State.emergencyContactsNotificationToken();
      LiteMessageContext.init(identifier:senderID:recipientID:isFromMe:date:sentOrReceivedOnSatellite:preferredService:)( v79,  v81,  v78,  (uint64_t)v25,  v28,  v30,  v33,  v60,  v84,  v58 & 1,  (uint64_t)objc_msgSend(v59, "__im__preferredServiceType"));
      id v61 = [v87 message];
      id v62 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v61);
      id v64 = v63;

      v0[39] = v62;
      v0[40] = v64;
      id v65 = (void *)swift_task_alloc(dword_4DBA4);
      v0[41] = v65;
      id *v65 = v0;
      v65[1] = LiteMessageServiceSession.decryptAndStoreMessage(_:identifier:);
      return LiteMessageServiceSession.storeAndBroadcastDecryptedMessageData(_:in:context:)(v62, v64, v86, v0[27]);
    }

    swift_release(v0[32]);
    swift_bridgeObjectRelease(v81);
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(v30);
    BOOL v71 = lazy protocol witness table accessor for type LiteMessageReceiveError and conformance LiteMessageReceiveError();
    uint64_t v54 = swift_allocError(&type metadata for LiteMessageReceiveError, v71, 0LL, 0LL);
    BOOL v56 = 0;
    *(void *)os_log_type_t v55 = v35;
    uint64_t v6 = v87;
  }

  else
  {
    swift_release(v0[32]);
    swift_bridgeObjectRelease(v7);
    uint64_t v53 = lazy protocol witness table accessor for type LiteMessageReceiveError and conformance LiteMessageReceiveError();
    uint64_t v54 = swift_allocError(&type metadata for LiteMessageReceiveError, v53, 0LL, 0LL);
    uint64_t v34 = 0LL;
    *(void *)os_log_type_t v55 = 1LL;
    BOOL v56 = 2;
  }

  *(void *)(v55 + _Block_object_dispose(va, 8) = v34;
  *(_BYTE *)(v55 + 16) = v56;
  swift_willThrow(v54);

  uint64_t v72 = v0[30];
  uint64_t v74 = v0[26];
  uint64_t v73 = v0[27];
  swift_task_dealloc(v0[31]);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  os_log_type_t v70 = (uint64_t (*)(void))v0[1];
  return v70();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v2 = *(void **)v1;
  id v3 = *(void *)(*(void *)v1 + 328LL);
  *(void *)(*(void *)v1 + 336LL) = v0;
  swift_task_dealloc(v3);
  outlined consume of Data._Representation(v2[39], v2[40]);
  if (v0) {
    uint64_t v4 = LiteMessageServiceSession.decryptAndStoreMessage(_:identifier:);
  }
  else {
    uint64_t v4 = LiteMessageServiceSession.decryptAndStoreMessage(_:identifier:);
  }
  return swift_task_switch(v4, v2[33], v2[34]);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v1 = *(void **)(v0 + 280);
  uint64_t v2 = swift_release(*(void *)(v0 + 256));
  swift_willThrow(v2);

  id v3 = *(void *)(v0 + 240);
  uint64_t v5 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 216);
  swift_task_dealloc(*(void *)(v0 + 248));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v2 = *(void **)(v0 + 296);
  uint64_t v1 = *(void **)(v0 + 304);
  id v3 = *(void *)(v0 + 216);
  swift_release(*(void *)(v0 + 256));

  outlined destroy of LiteMessageContext(v3);
  uint64_t v4 = *(void *)(v0 + 240);
  uint64_t v6 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 216);
  swift_task_dealloc(*(void *)(v0 + 248));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id LiteMessageServiceSession.decryptAndStoreMessage(_:identifier:)()
{
  uint64_t v1 = *(void **)(v0 + 304);
  swift_release(*(void *)(v0 + 256));
  id v2 = IDSOffGridEncryptedMessage.pendingMessageCountForHandle.getter((SEL *)&selRef_pendingCount);
  id v3 = IDSOffGridEncryptedMessage.pendingMessageCountForHandle.getter((SEL *)&selRef_pendingTotalCount);
  [v1 updateIsDownloadingPendingSatelliteMessages:(uint64_t)v2 > 0];
  [v1 updatePendingIncomingSatelliteMessageCount:v2];
  id result = [(id)objc_opt_self(IMDBadgeUtilities) sharedInstance];
  if (result)
  {
    uint64_t v5 = result;
    id v6 = [*(id *)(v0 + 200) service];
    NSString v7 = [v6 internalName];

    if (!v7)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v9 = v8;
      NSString v7 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v9);
    }

    uint64_t v11 = *(void **)(v0 + 296);
    uint64_t v10 = *(void **)(v0 + 304);
    uint64_t v12 = *(void *)(v0 + 216);
    [v5 updateBadgeForPendingSatelliteMessagesIfNeeded:v3 onService:v7];

    outlined destroy of LiteMessageContext(v12);
    uint64_t v13 = *(void *)(v0 + 240);
    uint64_t v15 = *(void *)(v0 + 208);
    uint64_t v14 = *(void *)(v0 + 216);
    swift_task_dealloc(*(void *)(v0 + 248));
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t LiteMessageServiceSession.processReceivedEncryptedMessageSegment(_:)(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[8] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  void v2[9] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[10] = swift_task_alloc(v5);
  v2[11] = swift_task_alloc(v5);
  uint64_t v6 = type metadata accessor for MainActor(0LL);
  v2[12] = static MainActor.shared.getter(v6);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v2[13] = v7;
  v2[14] = v8;
  return swift_task_switch(LiteMessageServiceSession.processReceivedEncryptedMessageSegment(_:), v7, v8);
}

uint64_t LiteMessageServiceSession.processReceivedEncryptedMessageSegment(_:)()
{
  uint64_t v1 = LiteMessageServiceSession.segmentStore.getter();
  *(void *)(v0 + 120) = v1;
  return swift_task_switch(LiteMessageServiceSession.processReceivedEncryptedMessageSegment(_:), v1, 0LL);
}

{
  uint64_t *v0;
  LiteMessageSegmentStore.insertMessageSegment(_:)(v0[6]);
  v0[16] = 0LL;
  swift_release(v0[15]);
  return swift_task_switch(LiteMessageServiceSession.processReceivedEncryptedMessageSegment(_:), v0[13], v0[14]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v1 = *(void *)(v0 + 128);
  id v2 = IDSOffGridEncryptedMessage.consolidationIdentifier.getter();
  *(void *)(v0 + 136) = v1;
  *(void *)(v0 + 144) = v2;
  *(void *)(v0 + 152) = v3;
  if (v1)
  {
    swift_release(*(void *)(v0 + 96));
    uint64_t v4 = *(void *)(v0 + 80);
    swift_task_dealloc(*(void *)(v0 + 88));
    swift_task_dealloc(v4);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v6 = LiteMessageServiceSession.segmentStore.getter();
    *(void *)(v0 + 160) = v6;
    return swift_task_switch(LiteMessageServiceSession.processReceivedEncryptedMessageSegment(_:), v6, 0LL);
  }

{
  Swift::String *v0;
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t (*v4)();
  v0[10]._object = (void *)LiteMessageSegmentStore.countMessageSegments(for:)(v0[9]);
  v0[11]._uint64_t countAndFlagsBits = v1;
  if (v1)
  {
    object = v0[6]._object;
    uint64_t countAndFlagsBits = v0[7]._countAndFlagsBits;
    uint64_t v4 = LiteMessageServiceSession.processReceivedEncryptedMessageSegment(_:);
  }

  else
  {
    swift_release(v0[10]._countAndFlagsBits);
    object = v0[6]._object;
    uint64_t countAndFlagsBits = v0[7]._countAndFlagsBits;
    uint64_t v4 = LiteMessageServiceSession.processReceivedEncryptedMessageSegment(_:);
  }

  return swift_task_switch(v4, object, countAndFlagsBits);
}

{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_s *v9;
  os_log_type_t v10;
  BOOL v11;
  unint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  os_log_s *v20;
  os_log_type_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v1 = *(id *)(v0 + 168);
  id v2 = IDSOffGridEncryptedMessage.totalSegments.getter();
  uint64_t v3 = *(void *)(v0 + 152);
  if (v1 == v2)
  {
    uint64_t v4 = *(void *)(v0 + 88);
    uint64_t v6 = *(void *)(v0 + 64);
    unint64_t v5 = *(void *)(v0 + 72);
    uint64_t v7 = Logger.liteSession.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
    uint64_t v8 = swift_bridgeObjectRetain_n(v3, 2LL);
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    uint64_t v10 = static os_log_type_t.info.getter();
    uint64_t v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = *(void *)(v0 + 152);
    if (v11)
    {
      uint64_t v37 = *(void *)(v0 + 144);
      uint64_t v39 = *(void *)(v0 + 72);
      uint64_t v41 = *(void *)(v0 + 64);
      os_log_type_t v43 = *(void *)(v0 + 88);
      uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v14 = swift_slowAlloc(32LL, -1LL);
      uint64_t v45 = v14;
      *(_DWORD *)uint64_t v13 = 136315138;
      swift_bridgeObjectRetain(v12);
      *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v12, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v13 + 4, v13 + 12);
      swift_bridgeObjectRelease_n(v12, 3LL);
      _os_log_impl(&dword_0, v9, v10, "Received all message segments for %s", v13, 0xCu);
      swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v43, v41);
    }

    else
    {
      unsigned __int8 v27 = *(void *)(v0 + 88);
      id v28 = *(void *)(v0 + 64);
      id v29 = *(void *)(v0 + 72);
      swift_bridgeObjectRelease_n(*(void *)(v0 + 152), 2LL);

      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
    }

    unsigned __int8 v30 = (void *)swift_task_alloc(dword_4DB94);
    *(void *)(v0 + 184) = v30;
    uint64_t *v30 = v0;
    v30[1] = LiteMessageServiceSession.processReceivedEncryptedMessageSegment(_:);
    return LiteMessageServiceSession.consolidateMessageWithConsolidationIdentifier(_:)( *(void *)(v0 + 144),  *(void *)(v0 + 152));
  }

  else
  {
    unsigned __int8 v16 = *(void *)(v0 + 72);
    uint64_t v15 = *(void *)(v0 + 80);
    os_log_type_t v17 = *(void *)(v0 + 64);
    id v18 = *(void **)(v0 + 48);
    swift_release(*(void *)(v0 + 96));
    uint64_t v19 = Logger.liteSession.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, v19, v17);
    swift_bridgeObjectRetain(v3);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v18);
    uint64_t v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      id v22 = *(void *)(v0 + 168);
      unsigned __int8 v23 = *(void *)(v0 + 152);
      uint64_t v38 = *(void *)(v0 + 144);
      uint64_t v40 = *(void *)(v0 + 72);
      id v42 = *(void *)(v0 + 64);
      double v44 = *(void *)(v0 + 80);
      id v24 = *(void **)(v0 + 48);
      id v25 = swift_slowAlloc(32LL, -1LL);
      id v26 = swift_slowAlloc(32LL, -1LL);
      uint64_t v45 = v26;
      *(_DWORD *)id v25 = 134218498;
      *(void *)(v0 + 16) = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v25 + 4, v25 + 12);
      *(_WORD *)(v25 + 12) = 2048;
      *(void *)(v0 + 24) = IDSOffGridEncryptedMessage.totalSegments.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v25 + 14, v25 + 22);

      *(_WORD *)(v25 + 22) = 2080;
      swift_bridgeObjectRetain(v23);
      *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v23, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v25 + 24, v25 + 32);
      swift_bridgeObjectRelease_n(v23, 3LL);
      _os_log_impl(&dword_0, v20, v21, "Has %ld of %ld segments for %s, awaiting more segments", (uint8_t *)v25, 0x20u);
      swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v25, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v44, v42);
    }

    else
    {
      uint64_t v32 = *(void *)(v0 + 152);
      uint64_t v34 = *(void *)(v0 + 72);
      uint64_t v33 = *(void *)(v0 + 80);
      uint64_t v35 = *(void *)(v0 + 64);

      swift_bridgeObjectRelease_n(v32, 2LL);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
    }

    uint64_t v36 = *(void *)(v0 + 80);
    swift_task_dealloc(*(void *)(v0 + 88));
    swift_task_dealloc(v36);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  id v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 184LL);
  *(void *)(*(void *)v1 + 192LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = v2[13];
    unint64_t v5 = v2[14];
    uint64_t v6 = LiteMessageServiceSession.processReceivedEncryptedMessageSegment(_:);
  }

  else
  {
    swift_bridgeObjectRelease(v2[19]);
    uint64_t v4 = v2[13];
    unint64_t v5 = v2[14];
    uint64_t v6 = LiteMessageServiceSession.processReceivedEncryptedMessageSegment(_:);
  }

  return swift_task_switch(v6, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  swift_release(*(void *)(v0 + 96));
  uint64_t v1 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *(void *)(v0 + 120);
  swift_release(*(void *)(v0 + 96));
  swift_release(v1);
  id v2 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = *(void *)(v0 + 152);
  id v2 = *(void *)(v0 + 160);
  swift_release(*(void *)(v0 + 96));
  swift_release(v2);
  swift_bridgeObjectRelease(v1);
  uint64_t v3 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *(void *)(v0 + 152);
  swift_release(*(void *)(v0 + 96));
  swift_bridgeObjectRelease(v1);
  id v2 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LiteMessageServiceSession.consolidateMessageWithConsolidationIdentifier(_:)(uint64_t a1, uint64_t a2)
{
  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  v3[11] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[12] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[13] = swift_task_alloc(v6);
  v3[14] = swift_task_alloc(v6);
  v3[15] = swift_task_alloc(v6);
  uint64_t v7 = type metadata accessor for MainActor(0LL);
  v3[16] = static MainActor.shared.getter(v7);
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v3[17] = v8;
  v3[18] = v9;
  return swift_task_switch(LiteMessageServiceSession.consolidateMessageWithConsolidationIdentifier(_:), v8, v9);
}

uint64_t LiteMessageServiceSession.consolidateMessageWithConsolidationIdentifier(_:)()
{
  uint64_t v1 = LiteMessageServiceSession.segmentStore.getter();
  *(void *)(v0 + 152) = v1;
  return swift_task_switch(LiteMessageServiceSession.consolidateMessageWithConsolidationIdentifier(_:), v1, 0LL);
}

{
  void *v0;
  v0[20] = LiteMessageSegmentStore.messageSegments(for:)(v0[8], v0[9]);
  v0[21] = 0LL;
  swift_release(v0[19]);
  return swift_task_switch(LiteMessageServiceSession.consolidateMessageWithConsolidationIdentifier(_:), v0[17], v0[18]);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 224LL);
  *(void *)(*(void *)v1 + 232LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = v2[17];
    uint64_t v5 = v2[18];
    unint64_t v6 = LiteMessageServiceSession.consolidateMessageWithConsolidationIdentifier(_:);
  }

  else
  {
    swift_bridgeObjectRelease(v2[27]);
    uint64_t v4 = v2[17];
    uint64_t v5 = v2[18];
    unint64_t v6 = LiteMessageServiceSession.consolidateMessageWithConsolidationIdentifier(_:);
  }

  return swift_task_switch(v6, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  os_log_s *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v1 = (*(uint64_t (**)(void, void, void))(v0 + 192))( *(void *)(v0 + 112),  *(void *)(v0 + 184),  *(void *)(v0 + 88));
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  uint64_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl( &dword_0,  v2,  v3,  "Successfully decrypted and stored consolidated message, removing parts from store",  v4,  2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
  unint64_t v6 = *(void *)(v0 + 112);
  uint64_t v7 = *(void *)(v0 + 88);

  v5(v6, v7);
  uint64_t v8 = LiteMessageServiceSession.segmentStore.getter();
  *(void *)(v0 + 240) = v8;
  return swift_task_switch(LiteMessageServiceSession.consolidateMessageWithConsolidationIdentifier(_:), v8, 0LL);
}

{
  Swift::String *v0;
  void *v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t (*v4)();
  LiteMessageSegmentStore.deleteMessageSegments(for:)(v0[4]);
  v0[15]._object = v1;
  if (v1)
  {
    object = v0[8]._object;
    uint64_t countAndFlagsBits = v0[9]._countAndFlagsBits;
    uint64_t v4 = LiteMessageServiceSession.consolidateMessageWithConsolidationIdentifier(_:);
  }

  else
  {
    swift_release(v0[15]._countAndFlagsBits);
    object = v0[8]._object;
    uint64_t countAndFlagsBits = v0[9]._countAndFlagsBits;
    uint64_t v4 = LiteMessageServiceSession.consolidateMessageWithConsolidationIdentifier(_:);
  }

  return swift_task_switch(v4, object, countAndFlagsBits);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v1 = *(void **)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 128);

  swift_release(v2);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 104);
  swift_task_dealloc(*(void *)(v0 + 120));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = *(void *)(v0 + 152);
  swift_release(*(void *)(v0 + 128));
  swift_release(v1);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 104);
  swift_task_dealloc(*(void *)(v0 + 120));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v1 = *(void **)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = *(void **)(v0 + 176);
  swift_release(*(void *)(v0 + 128));
  swift_bridgeObjectRelease(v2);

  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 104);
  swift_task_dealloc(*(void *)(v0 + 120));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_s *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 192);
  uint64_t v5 = *(void *)(v0 + 104);
  unint64_t v6 = *(void *)(v0 + 88);
  swift_release(*(void *)(v0 + 128));
  swift_release(v1);
  v4(v5, v3, v6);
  swift_errorRetain(v2);
  uint64_t v7 = swift_errorRetain(v2);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  uint64_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = *(void *)(v0 + 248);
    id v24 = *(void **)(v0 + 208);
    id v25 = *(void **)(v0 + 176);
    unsigned __int8 v27 = *(void *)(v0 + 104);
    id v28 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
    id v26 = *(void *)(v0 + 88);
    uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    id v29 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    swift_getErrorValue(v10, v0 + 40, v0 + 16);
    uint64_t v13 = Error.localizedDescription.getter(*(void *)(v0 + 24), *(void *)(v0 + 32));
    uint64_t v15 = v14;
    *(void *)(v0 + 4_Block_object_dispose(va, 8) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease(v15);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl(&dword_0, v8, v9, "Failed to clean up message segments: %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    swift_errorRelease(v10);
    v28(v27, v26);
  }

  else
  {
    unsigned __int8 v16 = *(void *)(v0 + 248);
    os_log_type_t v17 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
    id v18 = *(void **)(v0 + 176);
    uint64_t v19 = *(void *)(v0 + 104);
    uint64_t v20 = *(void *)(v0 + 88);

    swift_errorRelease(v16);
    swift_errorRelease(v16);
    swift_errorRelease(v16);

    v17(v19, v20);
  }

  uint64_t v21 = *(void *)(v0 + 112);
  id v22 = *(void *)(v0 + 104);
  swift_task_dealloc(*(void *)(v0 + 120));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void LiteMessageServiceSession.consolidateMessageWithConsolidationIdentifier(_:)()
{
  uint64_t v1 = *(void *)(v0 + 160);
  if (!((unint64_t)v1 >> 62))
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain(*(void *)(v0 + 160));
    if (v2) {
      goto LABEL_3;
    }
LABEL_22:
    uint64_t v38 = *(void *)(v0 + 128);
    swift_bridgeObjectRelease_n(*(void *)(v0 + 160), 2LL);
    swift_release(v38);
    unint64_t v39 = lazy protocol witness table accessor for type LiteMessageReceiveError and conformance LiteMessageReceiveError();
    uint64_t v40 = swift_allocError(&type metadata for LiteMessageReceiveError, v39, 0LL, 0LL);
    *(void *)uint64_t v41 = 0LL;
    *(void *)(v41 + _Block_object_dispose(va, 8) = 0LL;
    *(_BYTE *)(v41 + 16) = 2;
    swift_willThrow(v40);
    goto LABEL_23;
  }

  if (v1 < 0) {
    uint64_t v37 = *(void *)(v0 + 160);
  }
  else {
    uint64_t v37 = v1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*(void *)(v0 + 160));
  if (!_CocoaArrayWrapper.endIndex.getter(v37)) {
    goto LABEL_22;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001LL) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, *(void *)(v0 + 160));
    uint64_t v3 = *(void *)(v0 + 160);
  }

  else
  {
    if (!*(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8LL)))
    {
      __break(1u);
      return;
    }

    uint64_t v3 = *(void *)(v0 + 160);
    id v4 = *(id *)(v3 + 32);
  }

  *(void *)(v0 + 176) = v4;
  swift_bridgeObjectRelease(v3);
  if ((unint64_t)v1 >> 62)
  {
    uint64_t v6 = *(void *)(v0 + 160);
    if (v1 < 0) {
      uint64_t v7 = *(void *)(v0 + 160);
    }
    else {
      uint64_t v7 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*(void *)(v0 + 160));
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v7);
    swift_bridgeObjectRelease(v6);
  }

  else
  {
    uint64_t v5 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8LL));
  }

  id v8 = IDSOffGridEncryptedMessage.totalSegments.getter();
  uint64_t v9 = *(void *)(v0 + 160);
  if ((id)v5 != v8)
  {
    swift_release(*(void *)(v0 + 128));
    swift_bridgeObjectRelease(v9);
    id v21 = IDSOffGridEncryptedMessage.totalSegments.getter();
    unint64_t v22 = lazy protocol witness table accessor for type LiteMessageReceiveError and conformance LiteMessageReceiveError();
    uint64_t v23 = swift_allocError(&type metadata for LiteMessageReceiveError, v22, 0LL, 0LL);
    *(void *)uint64_t v24 = v5;
    *(void *)(v24 + _Block_object_dispose(va, 8) = v21;
    *(_BYTE *)(v24 + 16) = 1;
    swift_willThrow(v23);

LABEL_23:
    uint64_t v42 = *(void *)(v0 + 112);
    uint64_t v43 = *(void *)(v0 + 104);
    swift_task_dealloc(*(void *)(v0 + 120));
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    (*(void (**)(void))(v0 + 8))();
    return;
  }

  uint64_t v10 = *(void *)(v0 + 120);
  uint64_t v11 = *(void *)(v0 + 88);
  uint64_t v12 = *(void *)(v0 + 96);
  uint64_t v13 = Logger.liteSession.unsafeMutableAddressor();
  *(void *)(v0 + 184) = v13;
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  *(void *)(v0 + 192) = v14;
  v14(v10, v13, v11);
  swift_bridgeObjectRetain(v9);
  unsigned __int8 v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.info.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v19 = *(void *)(v0 + 160);
  if (v18)
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v20 = 134217984;
    *(void *)(v0 + 56) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease(v19);
    _os_log_impl(&dword_0, v16, v17, "Consolidating and decrypting %ld segments", v20, 0xCu);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 160));
  }

  uint64_t v25 = *(void *)(v0 + 160);
  uint64_t v26 = *(void *)(v0 + 120);
  uint64_t v27 = *(void *)(v0 + 88);
  id v28 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 96) + 8LL);
  *(void *)(v0 + 200) = v28;
  v28(v26, v27);
  id v29 = objc_allocWithZone(&OBJC_CLASS___IDSOffGridEncryptedMessage);
  type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IDSOffGridEncryptedMessage,  &OBJC_CLASS___IDSOffGridEncryptedMessage_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v25);
  id v31 = [v29 initWithSegments:isa];
  *(void *)(v0 + 20_Block_object_dispose(va, 8) = v31;

  id v32 = [v31 identifier];
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  uint64_t v35 = v34;

  *(void *)(v0 + 216) = v35;
  uint64_t v36 = (void *)swift_task_alloc(dword_4DB84);
  *(void *)(v0 + 224) = v36;
  *uint64_t v36 = v0;
  v36[1] = LiteMessageServiceSession.consolidateMessageWithConsolidationIdentifier(_:);
  LiteMessageServiceSession.decryptAndStoreMessage(_:identifier:)((uint64_t)v31, v33, v35);
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned IDSOffGridMessage?, @unowned NSString?, @unowned NSError?) -> () with result type (IDSOffGridMessage, String)( uint64_t result, void *a2, uint64_t a3, void *a4)
{
  uint64_t v4 = *(void *)(result + 32);
  if (a4)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v7 = swift_allocError(v6, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *id v8 = a4;
    id v9 = a4;
    return swift_continuation_throwingResumeWithError(v4, v7);
  }

  else if (a2)
  {
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    uint64_t v12 = *(void **)(*(void *)(v4 + 64) + 40LL);
    *uint64_t v12 = a2;
    v12[1] = v11;
    v12[2] = v13;
    id v14 = a2;
    return swift_continuation_throwingResume(v4);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void IDSOffGridEncryptedMessage.dateSent.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ([v1 respondsToSelector:"date"])
  {
    id v13 = [v1 date];
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v13);
  }

  else
  {
    uint64_t v6 = Logger.liteSession.unsafeMutableAddressor();
    uint64_t v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
    id v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_0, v8, v9, "IDSOffGridEncryptedMessage does not have date", v10, 2u);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    uint64_t v11 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    static Date.now.getter(v11);
  }

uint64_t LiteMessageServiceSession.storeAndBroadcastDecryptedMessageData(_:in:context:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[9] = a4;
  v5[10] = v4;
  v5[7] = a2;
  v5[8] = a3;
  v5[6] = a1;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v5[11] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[12] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[13] = swift_task_alloc(v8);
  v5[14] = swift_task_alloc(v8);
  v5[15] = swift_task_alloc(v8);
  v5[16] = swift_task_alloc(v8);
  uint64_t v9 = type metadata accessor for LiteMessageContext(0LL);
  v5[17] = v9;
  unint64_t v10 = (*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[18] = swift_task_alloc(v10);
  v5[19] = swift_task_alloc(v10);
  v5[20] = swift_task_alloc(v10);
  v5[21] = swift_task_alloc(v10);
  v5[22] = swift_task_alloc(v10);
  uint64_t v11 = type metadata accessor for Date(0LL);
  v5[23] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[24] = v12;
  v5[25] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for MainActor(0LL);
  v5[26] = static MainActor.shared.getter(v13);
  uint64_t v14 = dispatch thunk of Actor.unownedExecutor.getter(v13, &protocol witness table for MainActor);
  return swift_task_switch(LiteMessageServiceSession.storeAndBroadcastDecryptedMessageData(_:in:context:), v14, v15);
}

void LiteMessageServiceSession.storeAndBroadcastDecryptedMessageData(_:in:context:)()
{
  id v153 = (uint64_t *)(v0 + 40);
  uint64_t v1 = *(uint64_t **)(v0 + 72);
  swift_release(*(void *)(v0 + 208));
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v156[0] = 0x2D6574696CLL;
  v156[1] = 0xE500000000000000LL;
  uint64_t v3 = *v1;
  uint64_t v4 = (void *)v1[1];
  swift_bridgeObjectRetain(v4);
  v5._uint64_t countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v4);
  uint64_t v6 = (void *)objc_opt_self(&OBJC_CLASS___IMInternalPayloadUtilities);
  v7._uint64_t countAndFlagsBits = 0x617461642ELL;
  v7._object = (void *)0xE500000000000000LL;
  String.append(_:)(v7);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xE500000000000000LL);
  [v6 writeDataPayloadToDisk:isa fileName:v8];

  if (LiteMessageServiceSession.hasExistingMessageWithLiteIdentifier(_:in:)())
  {
    uint64_t v9 = *(void *)(v0 + 144);
    uint64_t v11 = *(void *)(v0 + 96);
    uint64_t v10 = *(void *)(v0 + 104);
    uint64_t v12 = *(void *)(v0 + 88);
    uint64_t v13 = *(void *)(v0 + 72);
    uint64_t v14 = Logger.liteSession.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v14, v12);
    uint64_t v15 = outlined init with copy of LiteMessageContext(v13, v9);
    unsigned __int8 v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.default.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v19 = *(uint64_t **)(v0 + 144);
    uint64_t v21 = *(void *)(v0 + 96);
    uint64_t v20 = *(void *)(v0 + 104);
    uint64_t v22 = *(void *)(v0 + 88);
    if (v18)
    {
      uint64_t v150 = *(void *)(v0 + 88);
      uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v24 = swift_slowAlloc(32LL, -1LL);
      v156[0] = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      uint64_t v25 = *v19;
      unint64_t v26 = v19[1];
      swift_bridgeObjectRetain(v26);
      *id v153 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v156);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v153, v0 + 48, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease(v26);
      outlined destroy of LiteMessageContext((uint64_t)v19);
      _os_log_impl( &dword_0,  v16,  v17,  "Already received message with identifier %s, dropping incoming message",  v23,  0xCu);
      swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v150);
    }

    else
    {
      outlined destroy of LiteMessageContext(*(void *)(v0 + 144));

      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    }

    goto LABEL_43;
  }

  uint64_t v27 = *(void *)(v0 + 72);
  char v143 = *(_BYTE *)(v27 + 48);
  uint64_t v28 = 40LL;
  if (v143) {
    uint64_t v28 = 24LL;
  }
  uint64_t v29 = 32LL;
  if (*(_BYTE *)(v27 + 48)) {
    uint64_t v29 = 16LL;
  }
  uint64_t v145 = *(void *)(v0 + 192);
  os_log_t loga = *(os_log_t *)(v0 + 200);
  uint64_t v151 = *(void *)(v0 + 184);
  uint64_t v30 = *(void *)(v0 + 136);
  uint64_t v32 = *(void *)(v0 + 48);
  unint64_t v31 = *(void *)(v0 + 56);
  uint64_t v33 = *(void **)(v27 + v28);
  uint64_t v34 = *(void *)(v27 + v29);
  swift_bridgeObjectRetain(v33);
  v35._uint64_t countAndFlagsBits = v34;
  v35._object = v33;
  IMDChat.updateLastAddressedHandleWithMatchingSIM(to:)(v35);
  swift_bridgeObjectRelease(v33);
  type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IMMessageItem,  &OBJC_CLASS___IMMessageItem_ptr);
  uint64_t v36 = *(void *)(v27 + 16);
  uint64_t v37 = *(void *)(v27 + 24);
  (*(void (**)(os_log_t, uint64_t, uint64_t))(v145 + 16))(loga, v27 + *(int *)(v30 + 32), v151);
  swift_bridgeObjectRetain(v4);
  outlined copy of Data._Representation(v32, v31);
  swift_bridgeObjectRetain(v37);
  id v38 = specialized @nonobjc IMMessageItem.init(liteIdentifier:liteData:senderID:date:)( v3,  (uint64_t)v4,  v32,  v31,  v36,  v37,  (uint64_t)loga);
  outlined consume of Data._Representation(v32, v31);
  uint64_t v39 = *(void *)(v0 + 72);
  if ((v143 & 1) != 0)
  {
    uint64_t v40 = 0x80000009005LL;
    uint64_t v41 = 36869LL;
  }

  else
  {
    uint64_t v37 = *(void *)(v39 + 40);
    uint64_t v40 = 0x80000000001LL;
    uint64_t v41 = 1LL;
  }

  uint64_t v42 = *(void *)(v0 + 136);
  uint64_t v43 = *(void **)(v0 + 64);
  swift_bridgeObjectRetain(v37);
  id v44 = v38;
  NSString v45 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v37);
  [v44 setDestinationCallerID:v45];

  int v46 = *(unsigned __int8 *)(v39 + *(int *)(v42 + 36));
  if (v46) {
    uint64_t v47 = v40;
  }
  else {
    uint64_t v47 = v41;
  }
  [v44 setFlags:v47];
  uint64_t v48 = &selRef_sentDowngradeRequestToHandleID_fromID_;
  id v49 = [v43 chatIdentifier];
  if (!v49)
  {
    __break(1u);
    goto LABEL_47;
  }

  uint64_t v50 = v49;
  uint64_t v51 = v0 + 48;
  uint64_t v52 = v0 + 24;
  [*(id *)(v0 + 80) didReceiveMessage:v44 forChat:v49 style:45 fromIDSID:0];

  if ((v46 & 1) != 0)
  {
    outlined init with copy of LiteMessageContext(*(void *)(v0 + 72), *(void *)(v0 + 176));
LABEL_21:
    uint64_t v58 = *(void *)(v0 + 168);
    uint64_t v59 = *(void *)(v0 + 72);
    outlined destroy of LiteMessageContext(*(void *)(v0 + 176));
    outlined init with copy of LiteMessageContext(v59, v58);
LABEL_22:
    outlined destroy of LiteMessageContext(*(void *)(v0 + 168));
LABEL_23:
    if ([*(id *)(v0 + 64) wasDowngradedToLiteMessage])
    {
      uint64_t v60 = *(void *)(v0 + 72);
      if (!*(void *)(v60 + *(int *)(*(void *)(v0 + 136) + 40LL)))
      {
        id v155 = v44;
        uint64_t v152 = v52;
        uint64_t v61 = *(void *)(v0 + 152);
        uint64_t v62 = *(void *)(v0 + 120);
        uint64_t v64 = *(void *)(v0 + 88);
        uint64_t v63 = *(void *)(v0 + 96);
        uint64_t v65 = Logger.liteSession.unsafeMutableAddressor();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16))(v62, v65, v64);
        uint64_t v66 = outlined init with copy of LiteMessageContext(v60, v61);
        uint64_t v67 = (os_log_s *)Logger.logObject.getter(v66);
        os_log_type_t v68 = static os_log_type_t.default.getter();
        BOOL v69 = os_log_type_enabled(v67, v68);
        os_log_type_t v70 = *(uint64_t **)(v0 + 152);
        uint64_t v71 = *(void *)(v0 + 120);
        uint64_t v72 = *(void *)(v0 + 88);
        uint64_t v73 = *(void *)(v0 + 96);
        if (v69)
        {
          uint64_t v74 = (uint64_t *)(v51 - 32);
          uint64_t v154 = *(void *)(v0 + 96);
          os_log_t logb = *(os_log_t *)(v0 + 88);
          uint64_t v75 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v76 = swift_slowAlloc(32LL, -1LL);
          v156[0] = v76;
          *(_DWORD *)uint64_t v75 = 136315138;
          uint64_t v77 = *v70;
          unint64_t v78 = v70[1];
          swift_bridgeObjectRetain(v78);
          *uint64_t v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, v156);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v74, v152, v75 + 4, v75 + 12);
          swift_bridgeObjectRelease(v78);
          outlined destroy of LiteMessageContext((uint64_t)v70);
          _os_log_impl(&dword_0, v67, v68, "Clearing downgrade flag as the preferred service is iMessage %s", v75, 0xCu);
          swift_arrayDestroy(v76, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v76, -1LL, -1LL);
          swift_slowDealloc(v75, -1LL, -1LL);

          (*(void (**)(uint64_t, os_log_t))(v154 + 8))(v71, logb);
        }

        else
        {
          outlined destroy of LiteMessageContext(*(void *)(v0 + 152));

          (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v71, v72);
        }

        [*(id *)(v0 + 64) setWasDowngradedToLiteMessage:0];
        uint64_t v48 = &selRef_sentDowngradeRequestToHandleID_fromID_;
        id v44 = v155;
      }
    }

    id v107 = [(id)objc_opt_self(IMDAccountController) sharedInstance];
    if (v107)
    {
      uint64_t v108 = v107;
      id v109 = [v107 anySessionForServiceName:IMServiceNameiMessage];

      if (!v109)
      {
        uint64_t v114 = *(void *)(v0 + 112);
        uint64_t v115 = *(void *)(v0 + 88);
        uint64_t v116 = *(void *)(v0 + 96);
        uint64_t v117 = Logger.liteSession.unsafeMutableAddressor();
        uint64_t v118 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v116 + 16))(v114, v117, v115);
        uint64_t v119 = (os_log_s *)Logger.logObject.getter(v118);
        os_log_type_t v120 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v119, v120))
        {
          id v121 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)id v121 = 0;
          _os_log_impl( &dword_0,  v119,  v120,  "No iMessage service session found for preferred service request",  v121,  2u);
          swift_slowDealloc(v121, -1LL, -1LL);
          id v122 = (os_log_s *)v44;
        }

        else
        {
          id v122 = v119;
          uint64_t v119 = (os_log_s *)v44;
        }

        uint64_t v123 = *(void *)(v0 + 112);
        uint64_t v124 = *(void *)(v0 + 88);
        uint64_t v125 = *(void *)(v0 + 96);

        (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v123, v124);
        goto LABEL_43;
      }

      uint64_t v110 = *(void **)(v0 + 64);
      NSString v111 = String._bridgeToObjectiveC()();
      id v112 = [v110 v48[16]];
      if (v112)
      {
        id v113 = v112;
        [v109 deleteExistingMessageAwaitingReplacementWithFallbackHash:v111 chatIdentifier:v112];

LABEL_43:
        uint64_t v126 = *(void *)(v0 + 168);
        uint64_t v127 = *(void *)(v0 + 176);
        uint64_t v129 = *(void *)(v0 + 152);
        uint64_t v128 = *(void *)(v0 + 160);
        uint64_t v130 = *(void *)(v0 + 144);
        uint64_t v132 = *(void *)(v0 + 120);
        uint64_t v131 = *(void *)(v0 + 128);
        uint64_t v134 = *(void *)(v0 + 104);
        uint64_t v133 = *(void *)(v0 + 112);
        swift_task_dealloc(*(void *)(v0 + 200));
        swift_task_dealloc(v127);
        swift_task_dealloc(v126);
        swift_task_dealloc(v128);
        swift_task_dealloc(v129);
        swift_task_dealloc(v130);
        swift_task_dealloc(v131);
        swift_task_dealloc(v132);
        swift_task_dealloc(v133);
        swift_task_dealloc(v134);
        (*(void (**)(void))(v0 + 8))();
        return;
      }

      goto LABEL_48;
    }

LABEL_50:
  __break(1u);
}

id IDSOffGridEncryptedMessage.pendingMessageCountForHandle.getter(SEL *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::String v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ([v3 respondsToSelector:*a1])
  {
    id v8 = [v3 *a1];
    id v9 = [v8 integerValue];

    return v9;
  }

  else
  {
    uint64_t v11 = Logger.liteSession.unsafeMutableAddressor();
    uint64_t v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v11, v4);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_0, v13, v14, "IDSOffGridEncryptedMessage does not have pending message count", v15, 2u);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return 0LL;
  }

uint64_t outlined destroy of LiteMessageContext(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LiteMessageContext(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

id specialized @nonobjc IMMessageItem.init(liteIdentifier:liteData:senderID:date:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a6);
  Class v15 = Date._bridgeToObjectiveC()().super.isa;
  id v25 = 0LL;
  id v16 =  [(id)swift_getObjCClassFromMetadata(v8) messageItemWithLiteIdentifier:v12 liteData:isa senderID:v14 date:v15 error:&v25];

  id v17 = v25;
  if (v16)
  {
    uint64_t v18 = type metadata accessor for Date(0LL);
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8LL);
    id v20 = v17;
    v19(a7, v18);
  }

  else
  {
    id v21 = v25;
    _convertNSErrorToError(_:)(v17);

    swift_willThrow(v22);
    uint64_t v23 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8LL))(a7, v23);
  }

  return v16;
}

uint64_t outlined init with copy of LiteMessageContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LiteMessageContext(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

iMessageLite::LiteMessageEffect_optional __swiftcall LiteMessageEffect.init(expressiveSendStyleID:)( Swift::String_optional expressiveSendStyleID)
{
  object = expressiveSendStyleID.value._object;
  uint64_t countAndFlagsBits = expressiveSendStyleID.value._countAndFlagsBits;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMTranscriptEffectBalloonsMomentIdentifier);
  uint64_t v5 = v4;
  if (!object)
  {
    swift_bridgeObjectRelease(v4);
    static String._unconditionallyBridgeFromObjectiveC(_:)(IMTranscriptEffectConfettiMomentIdentifier);
    swift_bridgeObjectRelease(v9);
    static String._unconditionallyBridgeFromObjectiveC(_:)(IMTranscriptEffectLasersMomentIdentifier);
    swift_bridgeObjectRelease(v10);
    static String._unconditionallyBridgeFromObjectiveC(_:)(IMTranscriptEffectFireworksMomentIdentifier);
    swift_bridgeObjectRelease(v11);
    static String._unconditionallyBridgeFromObjectiveC(_:)(IMTranscriptEffectShootingStarMomentIdentifier);
    swift_bridgeObjectRelease(v12);
    static String._unconditionallyBridgeFromObjectiveC(_:)(IMTranscriptEffectCelebrationMomentIdentifier);
    swift_bridgeObjectRelease(v13);
    static String._unconditionallyBridgeFromObjectiveC(_:)(IMTranscriptEffectLoveMomentIdentifier);
    swift_bridgeObjectRelease(v14);
    static String._unconditionallyBridgeFromObjectiveC(_:)(IMTranscriptEffectEchoMomentIdentifier);
    swift_bridgeObjectRelease(v15);
    static String._unconditionallyBridgeFromObjectiveC(_:)(IMTranscriptEffectSpotlightMomentIdentifier);
    swift_bridgeObjectRelease(v16);
    static String._unconditionallyBridgeFromObjectiveC(_:)(IMTranscriptEffectSlamImpactIdentifier);
    swift_bridgeObjectRelease(v17);
    static String._unconditionallyBridgeFromObjectiveC(_:)(IMTranscriptEffectLoudImpactIdentifier);
    swift_bridgeObjectRelease(v18);
    static String._unconditionallyBridgeFromObjectiveC(_:)(IMTranscriptEffectGentleImpactIdentifier);
    swift_bridgeObjectRelease(v19);
    static String._unconditionallyBridgeFromObjectiveC(_:)(IMTranscriptEffectInvisibleInkIdentifier);
    swift_bridgeObjectRelease(v20);
    return (iMessageLite::LiteMessageEffect_optional)13;
  }

  if (v3 == countAndFlagsBits && v4 == object)
  {
    swift_bridgeObjectRelease(object);
    uint64_t v8 = v5;
    goto LABEL_11;
  }

  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease(v5);
  if ((v7 & 1) != 0)
  {
    uint64_t v8 = object;
LABEL_11:
    swift_bridgeObjectRelease(v8);
    return 0;
  }

  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMTranscriptEffectConfettiMomentIdentifier);
  uint64_t v24 = v23;
  if (v22 == countAndFlagsBits && v23 == object)
  {
    swift_bridgeObjectRelease(object);
    uint64_t v27 = v24;
    goto LABEL_19;
  }

  char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease(v24);
  if ((v26 & 1) != 0)
  {
    uint64_t v27 = object;
LABEL_19:
    swift_bridgeObjectRelease(v27);
    return (iMessageLite::LiteMessageEffect_optional)1;
  }

  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMTranscriptEffectLasersMomentIdentifier);
  uint64_t v30 = v29;
  if (v28 == countAndFlagsBits && v29 == object)
  {
    swift_bridgeObjectRelease(object);
    uint64_t v33 = v30;
    goto LABEL_27;
  }

  char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease(v30);
  if ((v32 & 1) != 0)
  {
    uint64_t v33 = object;
LABEL_27:
    swift_bridgeObjectRelease(v33);
    return (iMessageLite::LiteMessageEffect_optional)2;
  }

  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMTranscriptEffectFireworksMomentIdentifier);
  uint64_t v36 = v35;
  if (v34 == countAndFlagsBits && v35 == object)
  {
    swift_bridgeObjectRelease(object);
    uint64_t v37 = v36;
LABEL_33:
    swift_bridgeObjectRelease(v37);
    return (iMessageLite::LiteMessageEffect_optional)3;
  }

  char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease(v36);
  if ((v38 & 1) != 0)
  {
    uint64_t v37 = object;
    goto LABEL_33;
  }

  uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMTranscriptEffectShootingStarMomentIdentifier);
  uint64_t v41 = v40;
  if (v39 == countAndFlagsBits && v40 == object)
  {
    swift_bridgeObjectRelease(object);
    uint64_t v42 = v41;
LABEL_39:
    swift_bridgeObjectRelease(v42);
    return (iMessageLite::LiteMessageEffect_optional)4;
  }

  char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease(v41);
  if ((v43 & 1) != 0)
  {
    uint64_t v42 = object;
    goto LABEL_39;
  }

  uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMTranscriptEffectCelebrationMomentIdentifier);
  int v46 = v45;
  if (v44 == countAndFlagsBits && v45 == object)
  {
    swift_bridgeObjectRelease(object);
    uint64_t v47 = v46;
LABEL_45:
    swift_bridgeObjectRelease(v47);
    return (iMessageLite::LiteMessageEffect_optional)5;
  }

  char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease(v46);
  if ((v48 & 1) != 0)
  {
    uint64_t v47 = object;
    goto LABEL_45;
  }

  uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMTranscriptEffectLoveMomentIdentifier);
  uint64_t v51 = v50;
  if (v49 == countAndFlagsBits && v50 == object)
  {
    swift_bridgeObjectRelease(object);
    uint64_t v52 = v51;
LABEL_51:
    swift_bridgeObjectRelease(v52);
    return (iMessageLite::LiteMessageEffect_optional)6;
  }

  char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease(v51);
  if ((v53 & 1) != 0)
  {
    uint64_t v52 = object;
    goto LABEL_51;
  }

  uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMTranscriptEffectEchoMomentIdentifier);
  uint64_t v56 = v55;
  if (v54 == countAndFlagsBits && v55 == object)
  {
    swift_bridgeObjectRelease(object);
    unsigned __int8 v57 = v56;
LABEL_57:
    swift_bridgeObjectRelease(v57);
    return (iMessageLite::LiteMessageEffect_optional)7;
  }

  char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease(v56);
  if ((v58 & 1) != 0)
  {
    unsigned __int8 v57 = object;
    goto LABEL_57;
  }

  uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMTranscriptEffectSpotlightMomentIdentifier);
  uint64_t v61 = v60;
  if (v59 == countAndFlagsBits && v60 == object)
  {
    swift_bridgeObjectRelease(object);
    uint64_t v62 = v61;
LABEL_63:
    swift_bridgeObjectRelease(v62);
    return (iMessageLite::LiteMessageEffect_optional)8;
  }

  char v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease(v61);
  if ((v63 & 1) != 0)
  {
    uint64_t v62 = object;
    goto LABEL_63;
  }

  uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMTranscriptEffectSlamImpactIdentifier);
  uint64_t v66 = v65;
  if (v64 == countAndFlagsBits && v65 == object)
  {
    swift_bridgeObjectRelease(object);
    uint64_t v67 = v66;
LABEL_69:
    swift_bridgeObjectRelease(v67);
    return (iMessageLite::LiteMessageEffect_optional)9;
  }

  char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease(v66);
  if ((v68 & 1) != 0)
  {
    uint64_t v67 = object;
    goto LABEL_69;
  }

  uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMTranscriptEffectLoudImpactIdentifier);
  uint64_t v71 = v70;
  if (v69 == countAndFlagsBits && v70 == object)
  {
    swift_bridgeObjectRelease(object);
    uint64_t v72 = v71;
LABEL_75:
    swift_bridgeObjectRelease(v72);
    return (iMessageLite::LiteMessageEffect_optional)10;
  }

  char v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease(v71);
  if ((v73 & 1) != 0)
  {
    uint64_t v72 = object;
    goto LABEL_75;
  }

  uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMTranscriptEffectGentleImpactIdentifier);
  uint64_t v76 = v75;
  if (v74 == countAndFlagsBits && v75 == object)
  {
    swift_bridgeObjectRelease(object);
    uint64_t v77 = v76;
LABEL_81:
    swift_bridgeObjectRelease(v77);
    return (iMessageLite::LiteMessageEffect_optional)11;
  }

  char v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease(v76);
  if ((v78 & 1) != 0)
  {
    uint64_t v77 = object;
    goto LABEL_81;
  }

  uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMTranscriptEffectInvisibleInkIdentifier);
  uint64_t v81 = v80;
  if (v79 == countAndFlagsBits && v80 == object)
  {
    swift_bridgeObjectRelease(v80);
    swift_bridgeObjectRelease(object);
    return (iMessageLite::LiteMessageEffect_optional)12;
  }

  char v82 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease(v81);
  swift_bridgeObjectRelease(object);
  if ((v82 & 1) == 0) {
    return (iMessageLite::LiteMessageEffect_optional)13;
  }
  return (iMessageLite::LiteMessageEffect_optional)12;
}

uint64_t LiteMessageEffect.rawValue.getter(unsigned __int8 a1)
{
  return a1 + 1LL;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance LiteMessageEffect( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LiteMessageEffect()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance LiteMessageEffect()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LiteMessageEffect(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2 + 1);
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance LiteMessageEffect@<X0>( uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = specialized LiteMessageEffect.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance LiteMessageEffect(void *a1@<X8>)
{
  *a1 = *v1 + 1LL;
}

uint64_t specialized LiteMessageEffect.init(rawValue:)(uint64_t a1)
{
  else {
    return a1 - 1;
  }
}

unint64_t lazy protocol witness table accessor for type LiteMessageEffect and conformance LiteMessageEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type LiteMessageEffect and conformance LiteMessageEffect;
  if (!lazy protocol witness table cache variable for type LiteMessageEffect and conformance LiteMessageEffect)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LiteMessageEffect,  &type metadata for LiteMessageEffect);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LiteMessageEffect and conformance LiteMessageEffect);
  }

  return result;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for LiteMessageEffect(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF4) {
    goto LABEL_17;
  }
  if (a2 + 12 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 12) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 12;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xD;
  int v8 = v6 - 13;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

      swift_unknownObjectRelease(v26);
      uint64_t v1 = (uint64_t)v57;
      uint64_t v5 = v59;
      if (v23 == v59) {
        return;
      }
    }
  }

  uint64_t v40 = 0LL;
  uint64_t v56 = (unsigned __int8 *)(v1 + 32);
  char v58 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8LL));
  while (v40 != v58)
  {
    uint64_t v41 = v4[5];
    uint64_t v42 = *(id *)&v56[8 * v40];
    char v43 = NSObject._rawHashValue(seed:)(v41);
    uint64_t v44 = -1LL << *((_BYTE *)v4 + 32);
    NSString v45 = v43 & ~v44;
    int v46 = v45 >> 6;
    uint64_t v47 = *(void *)&v22[8 * (v45 >> 6)];
    char v48 = 1LL << v45;
    if (((1LL << v45) & v47) != 0)
    {
      type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IDSURI,  &OBJC_CLASS___IDSURI_ptr);
      uint64_t v49 = *(id *)(v4[6] + 8 * v45);
      uint64_t v50 = static NSObject.== infix(_:_:)();

      if ((v50 & 1) != 0)
      {
LABEL_30:

        goto LABEL_31;
      }

      uint64_t v51 = ~v44;
      while (1)
      {
        NSString v45 = (v45 + 1) & v51;
        int v46 = v45 >> 6;
        uint64_t v47 = *(void *)&v22[8 * (v45 >> 6)];
        char v48 = 1LL << v45;
        if ((v47 & (1LL << v45)) == 0) {
          break;
        }
        uint64_t v52 = *(id *)(v4[6] + 8 * v45);
        char v53 = static NSObject.== infix(_:_:)();

        if ((v53 & 1) != 0) {
          goto LABEL_30;
        }
      }
    }

    *(void *)&v22[8 * v46] = v48 | v47;
    *(void *)(v4[6] + 8 * v45) = v42;
    uint64_t v54 = v4[2];
    id v25 = __OFADD__(v54, 1LL);
    uint64_t v55 = v54 + 1;
    if (v25) {
      goto LABEL_44;
    }
    v4[2] = v55;
LABEL_31:
    if (++v40 == v59) {
      return;
    }
  }

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v8 = v6 - 14;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  __break(1u);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for LiteMessageEffect(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF3) {
    return ((uint64_t (*)(void))((char *)&loc_1D540 + 4 * byte_3BBD5[v4]))();
  }
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_1D574 + 4 * byte_3BBD0[v4]))();
}

uint64_t sub_1D574(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D57C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1D584LL);
  }
  return result;
}

uint64_t sub_1D590(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1D598LL);
  }
  *(_BYTE *)unint64_t result = a2 + 12;
  return result;
}

uint64_t sub_1D59C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D5A4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for LiteMessageEffect(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for LiteMessageEffect(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for LiteMessageEffect()
{
  return &type metadata for LiteMessageEffect;
}

void IMMessageItem.canSendAsLiteMessage.getter()
{
  __int16 v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v148 = v2;
  uint64_t v149 = v3;
  uint64_t v4 = __chkstk_darwin(v2);
  unsigned int v6 = (char *)&v146 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v146 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v146 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v146 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v146 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v18 = [v1 guid];
  if (!v18)
  {
    __break(1u);
LABEL_34:

    __break(1u);
LABEL_35:

    __break(1u);
LABEL_36:

    __break(1u);
LABEL_37:

    __break(1u);
    return;
  }

  uint64_t v19 = v18;
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  uint64_t v22 = v21;

  UUID.init(uuidString:)(v20, v22);
  swift_bridgeObjectRelease(v22, v23, v24, v25, v26, v27, v28, v29);
  uint64_t v30 = type metadata accessor for UUID(0LL);
  LODWORD(v19) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 48LL))(v17, 1LL, v30);
  outlined destroy of UUID?((uint64_t)v17);
  if ((_DWORD)v19 == 1)
  {
    uint64_t v31 = Logger.liteSession.unsafeMutableAddressor();
    uint64_t v32 = v148;
    uint64_t v33 = v149;
    (*(void (**)(char *, uint64_t, uint64_t))(v149 + 16))(v6, v31, v148);
    uint64_t v12 = v1;
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      __int16 v1 = (_DWORD *)swift_slowAlloc(12LL, -1LL);
      uint64_t v36 = swift_slowAlloc(32LL, -1LL);
      uint64_t v151 = v36;
      *__int16 v1 = 136315138;
      id v37 = [v12 guid];
      if (v37)
      {
        char v38 = v37;
        uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        uint64_t v41 = v40;

        uint64_t v150 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, (unint64_t)v41, &v151);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151, v1 + 1, v1 + 3);

        swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
        _os_log_impl(&dword_0, v34, v35, "IMItem invalid for sending, has malformed GUID %s", (uint8_t *)v1, 0xCu);
        swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v36, -1LL, -1LL);
        swift_slowDealloc(v1, -1LL, -1LL);

        (*(void (**)(char *, uint64_t))(v149 + 8))(v6, v148);
        return;
      }

      goto LABEL_34;
    }

    uint64_t v92 = *(void (**)(char *, uint64_t))(v33 + 8);
    id v93 = v6;
LABEL_19:
    v92(v93, v32);
    return;
  }

  id v49 = [v1 fileTransferGUIDs];
  uint64_t v50 = v149;
  if (v49)
  {
    uint64_t v51 = v49;
    uint64_t v52 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v49, &type metadata for String);

    uint64_t v53 = *(void *)(v52 + 16);
    swift_bridgeObjectRelease((LiteMessageServiceSession *)v52, v54, v55, v56, v57, v58, v59, v60);
    if (v53)
    {
      uint64_t v61 = Logger.liteSession.unsafeMutableAddressor();
      uint64_t v32 = v148;
      (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v9, v61, v148);
      uint64_t v12 = v1;
      uint64_t v62 = (os_log_s *)Logger.logObject.getter(v12);
      os_log_type_t v63 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v62, v63))
      {
        __int16 v1 = (_DWORD *)swift_slowAlloc(12LL, -1LL);
        uint64_t v147 = swift_slowAlloc(32LL, -1LL);
        uint64_t v151 = v147;
        *__int16 v1 = 136315138;
        id v64 = [v12 guid];
        if (v64)
        {
          uint64_t v65 = v64;
          uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
          char v68 = v67;

          uint64_t v150 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, (unint64_t)v68, &v151);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151, v1 + 1, v1 + 3);

          swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75);
          _os_log_impl(&dword_0, v62, v63, "IMItem invalid for sending %s has file transfers", (uint8_t *)v1, 0xCu);
          uint64_t v76 = v147;
          swift_arrayDestroy(v147, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v76, -1LL, -1LL);
          swift_slowDealloc(v1, -1LL, -1LL);

          (*(void (**)(char *, uint64_t))(v149 + 8))(v9, v148);
          return;
        }

        goto LABEL_35;
      }

      uint64_t v92 = *(void (**)(char *, uint64_t))(v50 + 8);
      id v93 = v9;
      goto LABEL_19;
    }
  }

  id v77 = [v1 balloonBundleID];
  if (!v77) {
    goto LABEL_27;
  }

  id v78 = [v1 balloonBundleID];
  if (!v78)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(IMBalloonPluginIdentifierRichLinks);
    uint64_t v91 = (LiteMessageServiceSession *)v84;
    goto LABEL_21;
  }

  uint64_t v79 = v78;
  uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v78);
  char v82 = v81;

  uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMBalloonPluginIdentifierRichLinks);
  uint64_t v91 = (LiteMessageServiceSession *)v84;
  if (!v82)
  {
LABEL_21:
    swift_bridgeObjectRelease(v91, v84, v85, v86, v87, v88, v89, v90);
    goto LABEL_22;
  }

  if (v80 == v83 && v82 == (LiteMessageServiceSession *)v84)
  {
    swift_bridgeObjectRelease_n(v82, 2LL);
    goto LABEL_27;
  }

  char v112 = _stringCompareWithSmolCheck(_:_:expecting:)(v80, v82, v83, v84, 0LL);
  swift_bridgeObjectRelease(v82, v113, v114, v115, v116, v117, v118, v119);
  swift_bridgeObjectRelease(v91, v120, v121, v122, v123, v124, v125, v126);
  if ((v112 & 1) == 0)
  {
LABEL_22:
    uint64_t v94 = Logger.liteSession.unsafeMutableAddressor();
    uint64_t v95 = v148;
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v12, v94, v148);
    __int16 v1 = v1;
    uint64_t v96 = (void *)Logger.logObject.getter(v1);
    os_log_type_t v97 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled((os_log_t)v96, v97))
    {

      (*(void (**)(char *, uint64_t))(v50 + 8))(v12, v95);
      return;
    }

    uint64_t v98 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v147 = swift_slowAlloc(32LL, -1LL);
    uint64_t v151 = v147;
    *(_DWORD *)uint64_t v98 = 136315138;
    id v99 = [v1 guid];
    if (v99)
    {
      uint64_t v100 = v99;
      uint64_t v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(v99);
      unint64_t v103 = v102;

      uint64_t v150 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v101, (unint64_t)v103, &v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151, v98 + 4, v98 + 12);

      swift_bridgeObjectRelease(v103, v104, v105, v106, v107, v108, v109, v110);
      _os_log_impl(&dword_0, (os_log_t)v96, v97, "IMItem invalid for sending %s has balloon plugin", v98, 0xCu);
      uint64_t v111 = v147;
      swift_arrayDestroy(v147, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v111, -1LL, -1LL);
      swift_slowDealloc(v98, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v149 + 8))(v12, v148);
      return;
    }

    goto LABEL_36;
  }

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t LiteMessageHeader.backwardsCompatibilityText.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a2;
}

void LiteMessageHeader.append(to:)(uint64_t a1, uint64_t a2, uint64_t a3, LiteMessageServiceSession *a4)
{
  unsigned __int8 v6 = a2;
  uint64_t v7 = IMMessageItem.IMMessageItemContentType.rawValue.getter(a2);
  if (v7 < 0)
  {
    __break(1u);
  }

  else
  {
    unint64_t v8 = v7;
    do
    {
      if (v8 >= 8) {
        Swift::UInt8 v9 = v8 & 7 | 8;
      }
      else {
        Swift::UInt8 v9 = v8 & 7;
      }
      BitCollection.appendLeastSignificantBits(from:count:)(v9, 4u);
      BOOL v10 = v8 > 7;
      v8 >>= 3;
    }

    while (v10);
    if (!LiteMessageType.isCoreType.getter(v6))
    {
      if (a4) {
        uint64_t v11 = a3;
      }
      else {
        uint64_t v11 = 0LL;
      }
      if (a4) {
        uint64_t v12 = a4;
      }
      else {
        uint64_t v12 = (LiteMessageServiceSession *)0xE000000000000000LL;
      }
      swift_bridgeObjectRetain(a4);
      v13._uint64_t countAndFlagsBits = v11;
      v13._object = v12;
      BitCollection.appendAsCompressedBytes(_:)(v13);
      swift_bridgeObjectRelease(v12, v14, v15, v16, v17, v18, v19, v20);
    }
  }

void protocol witness for BitPackable.append(to:) in conformance LiteMessageHeader(uint64_t a1)
{
}

uint64_t destroy for LiteMessageHeader(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for LiteMessageHeader(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for LiteMessageHeader(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for LiteMessageHeader(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for LiteMessageHeader(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LiteMessageHeader(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for LiteMessageHeader()
{
  return &type metadata for LiteMessageHeader;
}

BOOL static LiteMessageSegmentStoreError.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void LiteMessageSegmentStoreError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int LiteMessageSegmentStoreError.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LiteMessageSegmentStoreError()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance LiteMessageSegmentStoreError()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LiteMessageSegmentStoreError( uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t BitCollection.startIndex.getter()
{
  return 0LL;
}

uint64_t LiteMessageSegmentStore.context.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unsigned __int8 v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v26 - v7;
  uint64_t v9 = *(void *)(v1 + 112);
  if (v9) {
    return swift_retain(v9);
  }
  uint64_t v10 = specialized static LiteMessageSegmentStore.makePersistentContainer()();
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = Logger.liteSegmentStore.unsafeMutableAddressor();
    uint64_t v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v8, v12, v2);
    SEL v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      id v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v16 = 0;
      _os_log_impl(&dword_0, v14, v15, "Initializing model context", v16, 2u);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    uint64_t v17 = type metadata accessor for ModelContext(0LL);
    swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
    uint64_t v18 = ModelContext.init(_:)(v11);
    uint64_t v19 = *(void *)(v1 + 112);
    *(void *)(v1 + 112) = v18;
    swift_release(v19);
    uint64_t v9 = *(void *)(v1 + 112);
    return swift_retain(v9);
  }

  uint64_t v21 = Logger.liteSegmentStore.unsafeMutableAddressor();
  uint64_t v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v21, v2);
  SEL v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    id v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v25 = 0;
    _os_log_impl(&dword_0, v23, v24, "No container available for context", v25, 2u);
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return 0LL;
}

uint64_t LiteMessageSegmentStore.__allocating_init()()
{
  uint64_t v1 = swift_allocObject(v0, 120LL, 15LL);
  swift_defaultActor_initialize();
  *(void *)(v1 + 112) = 0LL;
  return v1;
}

uint64_t LiteMessageSegmentStore.init()()
{
  *(void *)(v0 + 112) = 0LL;
  return v0;
}

uint64_t LiteMessageSegmentStore.deinit()
{
  return v0;
}

uint64_t LiteMessageSegmentStore.__deallocating_deinit()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t LiteMessageSegmentStore.unownedExecutor.getter()
{
  return v0;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    outlined init with copy of (AnyHashable, Any)(v7, (uint64_t)v16);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v16);
    if ((v9 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v10 = v4[6] + 40 * result;
    __int128 v11 = v16[0];
    __int128 v12 = v16[1];
    *(void *)(v10 + 32) = v17;
    *(_OWORD *)uint64_t v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    unint64_t result = (unint64_t)outlined init with take of Any(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v7 += 72LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  void *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v7 = *(v6 - 3);
    unint64_t v8 = *(v6 - 2);
    uint64_t v10 = *(v6 - 1);
    char v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v13 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v13 = v7;
    v13[1] = v8;
    BOOL v14 = (void *)(v4[7] + 16 * result);
    *BOOL v14 = v10;
    v14[1] = v9;
    uint64_t v15 = v4[2];
    id v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t LiteMessageSegmentStore.insertMessageSegment(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v56 - v6;
  uint64_t v8 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = LiteMessageSegmentStore.context.getter();
  if (!v11)
  {
    unint64_t v18 = lazy protocol witness table accessor for type LiteMessageSegmentStoreError and conformance LiteMessageSegmentStoreError();
    uint64_t v19 = swift_allocError(&type metadata for LiteMessageSegmentStoreError, v18, 0LL, 0LL);
    _BYTE *v20 = 0;
    return swift_willThrow(v19);
  }

  uint64_t v12 = v11;
  BOOL v13 = LiteMessageSegmentStore.hasExistingMessageSegment(for:)();
  if (v1) {
    return swift_release(v12);
  }
  if (v13)
  {
    unint64_t v14 = lazy protocol witness table accessor for type LiteMessageSegmentStoreError and conformance LiteMessageSegmentStoreError();
    uint64_t v15 = swift_allocError(&type metadata for LiteMessageSegmentStoreError, v14, 0LL, 0LL);
    char v17 = 8;
LABEL_9:
    *id v16 = v17;
    swift_willThrow(v15);
    return swift_release(v12);
  }

  uint64_t v61 = v3;
  uint64_t v22 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
  id v64 = 0LL;
  id v23 = [v22 archivedDataWithRootObject:a1 requiringSecureCoding:1 error:&v64];
  id v24 = v64;
  if (!v23)
  {
    id v28 = v24;
    uint64_t v29 = _convertNSErrorToError(_:)(v24);

    swift_willThrow(v30);
    swift_errorRelease(v29);
    unint64_t v31 = lazy protocol witness table accessor for type LiteMessageSegmentStoreError and conformance LiteMessageSegmentStoreError();
    uint64_t v15 = swift_allocError(&type metadata for LiteMessageSegmentStoreError, v31, 0LL, 0LL);
    char v17 = 1;
    goto LABEL_9;
  }

  uint64_t v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v23);
  unint64_t v62 = v26;

  id v27 = (os_log_s *)IDSOffGridEncryptedMessage.consolidationIdentifier.getter();
  uint64_t v58 = v32;
  os_log_t v59 = v27;
  id v60 = (void *)type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment(0LL);
  id v33 = IDSOffGridEncryptedMessage.segmentNumber.getter();
  static Date.now.getter(v33);
  unint64_t v34 = v62;
  outlined copy of Data._Representation(v25, v62);
  uint64_t v35 = (uint64_t)v33;
  uint64_t v36 = v60;
  uint64_t v37 = LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.__allocating_init(consolidationIdentifier:segmentNumber:dateReceived:data:)( (uint64_t)v59,  v58,  v35,  v10,  v25,  v34);
  uint64_t v38 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  uint64_t v39 = dispatch thunk of ModelContext.insert<A>(_:)(v37, v36, v38);
  dispatch thunk of ModelContext.save()(v39);
  uint64_t v40 = v25;
  uint64_t v41 = Logger.liteSegmentStore.unsafeMutableAddressor();
  uint64_t v42 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v41, v61);
  uint64_t v43 = swift_retain_n(v37, 2LL);
  id v44 = (os_log_s *)Logger.logObject.getter(v43);
  os_log_type_t v45 = static os_log_type_t.default.getter();
  int v46 = v45;
  if (os_log_type_enabled(v44, v45))
  {
    uint64_t v47 = swift_slowAlloc(22LL, -1LL);
    uint64_t v58 = v40;
    uint64_t v48 = v47;
    id v60 = (void *)swift_slowAlloc(32LL, -1LL);
    id v64 = v60;
    *(_DWORD *)uint64_t v48 = 134218242;
    id v49 = *(uint64_t (**)(void))(*(void *)v37 + 200LL);
    os_log_t v59 = v44;
    uint64_t v63 = v49();
    LODWORD(v57) = v46;
    uint64_t v50 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v48 + 4, v48 + 12);
    *(_WORD *)(v48 + 12) = 2080;
    uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 152LL))(v50);
    unint64_t v53 = v52;
    uint64_t v63 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, (uint64_t *)&v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v48 + 14, v48 + 22);
    swift_release_n(v37, 2LL);
    swift_bridgeObjectRelease(v53);
    os_log_t v54 = v59;
    _os_log_impl(&dword_0, v59, (os_log_type_t)v57, "Stored message segment %ld of %s", (uint8_t *)v48, 0x16u);
    id v55 = v60;
    swift_arrayDestroy(v60, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1LL, -1LL);
    swift_slowDealloc(v48, -1LL, -1LL);
    swift_release(v37);

    swift_release(v12);
    outlined consume of Data._Representation(v58, v62);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v61);
  }

  else
  {
    outlined consume of Data._Representation(v40, v62);

    swift_release(v12);
    swift_release_n(v37, 3LL);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v42);
  }

unint64_t lazy protocol witness table accessor for type LiteMessageSegmentStoreError and conformance LiteMessageSegmentStoreError()
{
  unint64_t result = lazy protocol witness table cache variable for type LiteMessageSegmentStoreError and conformance LiteMessageSegmentStoreError;
  if (!lazy protocol witness table cache variable for type LiteMessageSegmentStoreError and conformance LiteMessageSegmentStoreError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LiteMessageSegmentStoreError,  &type metadata for LiteMessageSegmentStoreError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LiteMessageSegmentStoreError and conformance LiteMessageSegmentStoreError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LiteMessageSegmentStoreError and conformance LiteMessageSegmentStoreError;
  if (!lazy protocol witness table cache variable for type LiteMessageSegmentStoreError and conformance LiteMessageSegmentStoreError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LiteMessageSegmentStoreError,  &type metadata for LiteMessageSegmentStoreError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LiteMessageSegmentStoreError and conformance LiteMessageSegmentStoreError);
  }

  return result;
}

BOOL LiteMessageSegmentStore.hasExistingMessageSegment(for:)()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v35 = *(void *)(v1 - 8);
  uint64_t v36 = v1;
  __chkstk_darwin(v1);
  unint64_t v34 = (char *)v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Predicate<Pack{LiteMessageSegmentStoreSchemaV1.LiteMessageSegment}>?);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FetchDescriptor<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>);
  uint64_t v33 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Predicate<Pack{LiteMessageSegmentStoreSchemaV1.LiteMessageSegment}>);
  uint64_t v37 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = LiteMessageSegmentStore.context.getter();
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v31 = v6;
    uint64_t v32 = v9;
    uint64_t v14 = IDSOffGridEncryptedMessage.consolidationIdentifier.getter();
    if (v0)
    {
      swift_release(v13);
    }

    else
    {
      uint64_t v20 = v14;
      uint64_t v21 = v15;
      id v22 = IDSOffGridEncryptedMessage.segmentNumber.getter();
      v30[3] = v30;
      uint64_t v23 = __chkstk_darwin(v22);
      v30[-4] = v20;
      v30[-3] = v21;
      v30[-2] = v23;
      uint64_t v24 = type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment(0LL);
      uint64_t v38 = v24;
      Predicate.init(_:)( partial apply for closure #3 in LiteMessageSegmentStore.hasExistingMessageSegment(for:),  &v30[-6],  1LL,  &v38);
      swift_bridgeObjectRelease(v21);
      uint64_t v25 = v37;
      uint64_t v26 = v32;
      (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v5, v11, v32);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v5, 0LL, 1LL, v26);
      uint64_t v27 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
      FetchDescriptor.init(predicate:sortBy:)(v5, &_swiftEmptyArrayStorage, v24, v27);
      uint64_t v28 = dispatch thunk of ModelContext.fetchCount<A>(_:)(v8, v24, v27);
      swift_release(v13);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v31);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v26);
      return v28 > 0;
    }
  }

  else
  {
    unint64_t v17 = lazy protocol witness table accessor for type LiteMessageSegmentStoreError and conformance LiteMessageSegmentStoreError();
    uint64_t v18 = swift_allocError(&type metadata for LiteMessageSegmentStoreError, v17, 0LL, 0LL);
    _BYTE *v19 = 0;
    swift_willThrow(v18);
  }

  return v16;
}

uint64_t closure #3 in LiteMessageSegmentStore.hasExistingMessageSegment(for:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v63 = a4;
  uint64_t v56 = a2;
  uint64_t v57 = a3;
  id v70 = a5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Value<Int>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v66 = v6;
  uint64_t v67 = v7;
  __chkstk_darwin(v6);
  unint64_t v62 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Int>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v64 = v9;
  uint64_t v65 = v10;
  __chkstk_darwin(v9);
  uint64_t v58 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Int>, PredicateExpressions.Value<Int>>);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v68 = v12;
  uint64_t v69 = v13;
  __chkstk_darwin(v12);
  os_log_t v59 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Value<String>);
  uint64_t v55 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  BOOL v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, String>);
  uint64_t v52 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, String>, PredicateExpressions.Value<String>>);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v60 = v24;
  uint64_t v61 = v25;
  __chkstk_darwin(v24);
  os_log_t v54 = (char *)&v52 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = *a1;
  uint64_t v28 = lazy protocol witness table accessor for type PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment> and conformance PredicateExpressions.Variable<A>( &lazy protocol witness table cache variable for type PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment> and conformance PredicateExpressions.Variable<A>,  &demangling cache variable for type metadata for PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  static PredicateExpressions.build_Arg<A>(_:)(v27, v17, v28);
  uint64_t KeyPath = swift_getKeyPath(&unk_3BEA0);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v20, KeyPath, v17, v28);
  swift_release(KeyPath);
  uint64_t v30 = *(void (**)(char *, uint64_t))(v18 + 8);
  v30(v20, v17);
  v71[0] = v56;
  v71[1] = v57;
  static PredicateExpressions.build_Arg<A>(_:)(v71, &type metadata for String);
  uint64_t v31 = lazy protocol witness table accessor for type PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment> and conformance PredicateExpressions.Variable<A>( &lazy protocol witness table cache variable for type PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, String> and conformance PredicateExpressions.KeyPath<A, B>,  &demangling cache variable for type metadata for PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, String>,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v32 = lazy protocol witness table accessor for type PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment> and conformance PredicateExpressions.Variable<A>( &lazy protocol witness table cache variable for type PredicateExpressions.Value<String> and conformance PredicateExpressions.Value<A>,  &demangling cache variable for type metadata for PredicateExpressions.Value<String>,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v33 = v53;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v23,  v16,  v21,  v53,  v31,  v32,  &protocol witness table for String);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v16, v33);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v23, v21);
  static PredicateExpressions.build_Arg<A>(_:)(v27, v17, v28);
  uint64_t v34 = swift_getKeyPath(&off_3BD20);
  uint64_t v35 = v58;
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v20, v34, v17, v28);
  swift_release(v34);
  v30(v20, v17);
  uint64_t v36 = v62;
  v71[0] = v63;
  static PredicateExpressions.build_Arg<A>(_:)(v71, &type metadata for Int);
  uint64_t v37 = lazy protocol witness table accessor for type PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment> and conformance PredicateExpressions.Variable<A>( &lazy protocol witness table cache variable for type PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Int> and conformance PredicateExpressions.KeyPath<A, B>,  &demangling cache variable for type metadata for PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Int>,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v38 = lazy protocol witness table accessor for type PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment> and conformance PredicateExpressions.Variable<A>( &lazy protocol witness table cache variable for type PredicateExpressions.Value<Int> and conformance PredicateExpressions.Value<A>,  &demangling cache variable for type metadata for PredicateExpressions.Value<Int>,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v39 = v59;
  uint64_t v40 = v64;
  uint64_t v41 = v66;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)(v35, v36, v64, v66, v37, v38, &protocol witness table for Int);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v36, v41);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v35, v40);
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Conjunction<PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, String>, PredicateExpressions.Value<String>>, PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Int>, PredicateExpressions.Value<Int>>>);
  uint64_t v43 = v70;
  v70[3] = v42;
  _BYTE v43[4] = lazy protocol witness table accessor for type PredicateExpressions.Conjunction<PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, String>, PredicateExpressions.Value<String>>, PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Int>, PredicateExpressions.Value<Int>>> and conformance <> PredicateExpressions.Conjunction<A, B>();
  __swift_allocate_boxed_opaque_existential_1(v43);
  uint64_t v44 = lazy protocol witness table accessor for type PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment> and conformance PredicateExpressions.Variable<A>( &lazy protocol witness table cache variable for type PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, String>, PredicateExpressions.Value<String>> and conformance PredicateExpressions.Equal<A, B>,  &demangling cache variable for type metadata for PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, String>, PredicateExpressions.Value<String>>,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Equal<A, B>);
  uint64_t v45 = lazy protocol witness table accessor for type PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment> and conformance PredicateExpressions.Variable<A>( &lazy protocol witness table cache variable for type PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Int>, PredicateExpressions.Value<Int>> and conformance PredicateExpressions.Equal<A, B>,  &demangling cache variable for type metadata for PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Int>, PredicateExpressions.Value<Int>>,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Equal<A, B>);
  int v46 = v54;
  uint64_t v47 = v39;
  uint64_t v48 = v39;
  uint64_t v49 = v60;
  uint64_t v50 = v68;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v54, v48, v60, v68, v44, v45);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v47, v50);
  return (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v46, v49);
}

uint64_t key path getter for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.consolidationIdentifier : LiteMessageSegmentStoreSchemaV1.LiteMessageSegment@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 152LL))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.consolidationIdentifier : LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 160LL);
  swift_bridgeObjectRetain(v3);
  return v4(v2, v3);
}

uint64_t key path getter for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.segmentNumber : LiteMessageSegmentStoreSchemaV1.LiteMessageSegment@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 200LL))();
  *a2 = result;
  return result;
}

uint64_t key path setter for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.segmentNumber : LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 208LL))(*a1);
}

os_log_t *LiteMessageSegmentStore.messageSegments(for:)(unint64_t a1, uint64_t a2)
{
  uint64_t v90 = a2;
  uint64_t v91 = type metadata accessor for Logger(0LL);
  uint64_t v89 = *(void *)(v91 - 8);
  uint64_t v4 = __chkstk_darwin(v91);
  uint64_t v86 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v75 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Predicate<Pack{LiteMessageSegmentStoreSchemaV1.LiteMessageSegment}>?);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FetchDescriptor<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>);
  uint64_t v85 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Predicate<Pack{LiteMessageSegmentStoreSchemaV1.LiteMessageSegment}>);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = LiteMessageSegmentStore.context.getter();
  if (v18)
  {
    unsigned __int8 v87 = v7;
    uint64_t v84 = v11;
    uint64_t v19 = v18;
    char v82 = &v75;
    __chkstk_darwin(v18);
    uint64_t v92 = v17;
    uint64_t v20 = v90;
    *(&v75 - 2) = a1;
    *(&v75 - 1) = v20;
    uint64_t v21 = type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment(0LL);
    uint64_t v96 = v21;
    Predicate.init(_:)( partial apply for closure #4 in LiteMessageSegmentStore.messageSegments(for:),  &v75 - 4,  1LL,  &v96);
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v10, v92, v14);
    uint64_t v79 = v15;
    uint64_t v80 = (os_log_t *)v14;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v10, 0LL, 1LL, v14);
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SortDescriptor<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>>);
    uint64_t v23 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SortDescriptor<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>)
                    - 8);
    uint64_t v24 = swift_allocObject( v22,  ((*(unsigned __int8 *)(v23 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))
          + *(void *)(v23 + 72),
            *(unsigned __int8 *)(v23 + 80) | 7LL);
    *(_OWORD *)(v24 + 16) = xmmword_3BA10;
    uint64_t KeyPath = swift_getKeyPath(&off_3BD20);
    SortDescriptor.init<A>(_:order:)(KeyPath, 0LL, &protocol witness table for Int);
    uint64_t v26 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
    FetchDescriptor.init(predicate:sortBy:)(v10, v24, v21, v26);
    uint64_t v83 = v13;
    uint64_t v81 = v19;
    unint64_t v27 = v88;
    uint64_t v28 = dispatch thunk of ModelContext.fetch<A>(_:)(v13, v21, v26);
    if (v27)
    {
      uint64_t v29 = v27;
LABEL_22:
      uint64_t v56 = v91;
      uint64_t v57 = Logger.liteSegmentStore.unsafeMutableAddressor();
      uint64_t v58 = v89;
      os_log_t v59 = v86;
      (*(void (**)(char *, uint64_t, uint64_t))(v89 + 16))(v86, v57, v56);
      swift_errorRetain(v29);
      uint64_t v60 = swift_errorRetain(v29);
      uint64_t v61 = (os_log_s *)Logger.logObject.getter(v60);
      os_log_type_t v62 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v63 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v64 = (os_log_t **)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v63 = 138412290;
        swift_errorRetain(v29);
        uint64_t v65 = (os_log_t *)_swift_stdlib_bridgeErrorToNSError(v29);
        uint64_t v94 = v65;
        uint64_t v56 = v91;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v63 + 4, v63 + 12);
        *uint64_t v64 = v65;
        os_log_t v59 = v86;
        swift_errorRelease(v29);
        swift_errorRelease(v29);
        _os_log_impl(&dword_0, v61, v62, "Failed to fetch segments: %@", v63, 0xCu);
        uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy(v64, 1LL, v66);
        swift_slowDealloc(v64, -1LL, -1LL);
        swift_slowDealloc(v63, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease(v29);
        swift_errorRelease(v29);
      }

      uint64_t v67 = v79;
      uint64_t v2 = v80;
      uint64_t v68 = v83;

      (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v56);
      unint64_t v69 = lazy protocol witness table accessor for type LiteMessageSegmentStoreError and conformance LiteMessageSegmentStoreError();
      uint64_t v70 = swift_allocError(&type metadata for LiteMessageSegmentStoreError, v69, 0LL, 0LL);
      *id v71 = 3;
      swift_willThrow(v70);
      swift_release(v81);
      swift_errorRelease(v29);
      (*(void (**)(char *, uint64_t))(v85 + 8))(v68, v84);
      (*(void (**)(char *, os_log_t *))(v67 + 8))(v92, v2);
    }

    else
    {
      uint64_t v33 = v28;
      unint64_t v88 = a1;
      uint64_t v34 = Logger.liteSegmentStore.unsafeMutableAddressor();
      uint64_t v35 = v89;
      uint64_t v36 = (uint64_t)v87;
      uint64_t v37 = v91;
      (*(void (**)(char *, uint64_t, uint64_t))(v89 + 16))(v87, v34, v91);
      swift_bridgeObjectRetain_n(v33, 2LL);
      os_log_t v38 = (os_log_t)v90;
      uint64_t v39 = swift_bridgeObjectRetain_n(v90, 2LL);
      uint64_t v40 = (void *)Logger.logObject.getter(v39);
      int v41 = static os_log_type_t.info.getter();
      unint64_t v42 = (unint64_t)v33 >> 62;
      if (!os_log_type_enabled((os_log_t)v40, (os_log_type_t)v41))
      {

        swift_bridgeObjectRelease_n(v38, 2LL);
        swift_bridgeObjectRelease_n(v33, 2LL);
        (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v37);
        goto LABEL_10;
      }

      os_log_t v78 = (os_log_t)v40;
      uint64_t v43 = (void **)swift_slowAlloc(22LL, -1LL);
      uint64_t v76 = (os_log_t *)swift_slowAlloc(32LL, -1LL);
      uint64_t v94 = v76;
      *(_DWORD *)uint64_t v43 = 134218242;
      int v77 = v41;
      if (v42) {
        goto LABEL_35;
      }
      uint64_t v44 = *(void *)((char *)&dword_10 + (v33 & 0xFFFFFFFFFFFFF8LL));
LABEL_8:
      swift_bridgeObjectRelease(v33);
      uint64_t v93 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, (char *)v43 + 4, (char *)v43 + 12);
      swift_bridgeObjectRelease(v33);
      *((_WORD *)v43 + 6) = 2080;
      swift_bridgeObjectRetain(v38);
      uint64_t v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, (unint64_t)v38, (uint64_t *)&v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, (char *)v43 + 14, (char *)v43 + 22);
      swift_bridgeObjectRelease_n(v38, 3LL);
      os_log_t v38 = v78;
      _os_log_impl(&dword_0, v78, (os_log_type_t)v77, "Fetched %ld segments of %s", (uint8_t *)v43, 0x16u);
      uint64_t v45 = v76;
      swift_arrayDestroy(v76, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1LL, -1LL);
      swift_slowDealloc(v43, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v36, v37);
LABEL_10:
      uint64_t v47 = (uint64_t)v83;
      uint64_t v46 = v84;
      if (v42)
      {
        while (1)
        {
          uint64_t v72 = v33 < 0 ? v33 : v33 & 0xFFFFFFFFFFFFFF8LL;
          swift_bridgeObjectRetain(v33);
          uint64_t v36 = _CocoaArrayWrapper.endIndex.getter(v72);
          swift_bridgeObjectRelease(v33);
          if (!v36) {
            break;
          }
LABEL_12:
          uint64_t v94 = (os_log_t *)&_swiftEmptyArrayStorage;
          uint64_t v43 = (void **)&v94;
          specialized ContiguousArray.reserveCapacity(_:)(v36);
          if (v36 < 0)
          {
            __break(1u);
LABEL_35:
            if (v33 < 0) {
              uint64_t v74 = v33;
            }
            else {
              uint64_t v74 = v33 & 0xFFFFFFFFFFFFFF8LL;
            }
            swift_bridgeObjectRetain(v33);
            uint64_t v44 = _CocoaArrayWrapper.endIndex.getter(v74);
            swift_bridgeObjectRelease(v33);
            goto LABEL_8;
          }

          uint64_t v90 = type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for NSKeyedUnarchiver,  &OBJC_CLASS___NSKeyedUnarchiver_ptr);
          unint64_t v42 = type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IDSOffGridEncryptedMessage,  &OBJC_CLASS___IDSOffGridEncryptedMessage_ptr);
          uint64_t v46 = 0LL;
          unsigned __int8 v87 = (char *)v33;
          unint64_t v88 = v33 & 0xC000000000000001LL;
          while (v36 != v46)
          {
            if (v88)
            {
              uint64_t v47 = specialized _ArrayBuffer._getElementSlowPath(_:)(v46, v33);
            }

            else
            {
              uint64_t v47 = *(void *)(v33 + 8 * v46 + 32);
              swift_retain(v47);
            }

            uint64_t v48 = (*(uint64_t (**)(void))(*(void *)v47 + 296LL))();
            unint64_t v50 = v49;
            uint64_t v37 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v42, v48, v49, v42);
            outlined consume of Data._Representation(v48, v50);
            uint64_t v33 = (uint64_t)v87;
            if (!v37)
            {
              unint64_t v53 = lazy protocol witness table accessor for type LiteMessageSegmentStoreError and conformance LiteMessageSegmentStoreError();
              uint64_t v29 = swift_allocError(&type metadata for LiteMessageSegmentStoreError, v53, 0LL, 0LL);
              *os_log_t v54 = 4;
              swift_willThrow(v29);
              swift_release(v47);
              uint64_t v55 = v94;
              swift_bridgeObjectRelease(v33);
              swift_release(v55);
              goto LABEL_22;
            }

            ++v46;
            uint64_t v51 = swift_release(v47);
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v51);
            os_log_t v38 = v94[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v38);
            uint64_t v52 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v38, v37);
            specialized ContiguousArray._endMutation()(v52);
            if (v36 == v46)
            {
              uint64_t v2 = v94;
              swift_release(v81);
              uint64_t v47 = (uint64_t)v83;
              uint64_t v46 = v84;
              goto LABEL_32;
            }
          }

          __break(1u);
        }
      }

      else
      {
        uint64_t v36 = *(void *)((char *)&dword_10 + (v33 & 0xFFFFFFFFFFFFF8LL));
        if (v36) {
          goto LABEL_12;
        }
      }

      swift_release(v81);
      uint64_t v2 = (os_log_t *)&_swiftEmptyArrayStorage;
LABEL_32:
      (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v47, v46);
      (*(void (**)(char *, os_log_t *))(v79 + 8))(v92, v80);
      swift_bridgeObjectRelease(v33);
    }
  }

  else
  {
    unint64_t v30 = lazy protocol witness table accessor for type LiteMessageSegmentStoreError and conformance LiteMessageSegmentStoreError();
    uint64_t v31 = swift_allocError(&type metadata for LiteMessageSegmentStoreError, v30, 0LL, 0LL);
    _BYTE *v32 = 0;
    swift_willThrow(v31);
  }

  return v2;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> LiteMessageSegmentStore.countMessageSegments(for:)( Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v47 = *(void *)(v3 - 8);
  uint64_t v48 = v3;
  __chkstk_darwin(v3);
  uint64_t v46 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Predicate<Pack{LiteMessageSegmentStoreSchemaV1.LiteMessageSegment}>?);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FetchDescriptor<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>);
  uint64_t v44 = *(void *)(v8 - 8);
  uint64_t v45 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Predicate<Pack{LiteMessageSegmentStoreSchemaV1.LiteMessageSegment}>);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = LiteMessageSegmentStore.context.getter();
  if (v15)
  {
    uint64_t v16 = v15;
    unint64_t v42 = (char *)&v38;
    __chkstk_darwin(v15);
    *(&v38 - 2) = countAndFlagsBits;
    *(&v38 - 1) = (uint64_t)object;
    uint64_t v17 = type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment(0LL);
    uint64_t v51 = v17;
    Predicate.init(_:)( partial apply for closure #3 in LiteMessageSegmentStore.countMessageSegments(for:),  &v38 - 4,  1LL,  &v51);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v7, v14, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v7, 0LL, 1LL, v11);
    uint64_t v18 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
    FetchDescriptor.init(predicate:sortBy:)(v7, &_swiftEmptyArrayStorage, v17, v18);
    uint64_t v19 = v43;
    uint64_t v20 = dispatch thunk of ModelContext.fetchCount<A>(_:)(v10, v17, v18);
    if (v19)
    {
      uint64_t v21 = Logger.liteSegmentStore.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v46, v21, v48);
      swift_errorRetain(v19);
      uint64_t v22 = swift_errorRetain(v19);
      uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
      os_log_type_t v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v43 = v23;
        uint64_t v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v40 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        int v41 = v25;
        *(_DWORD *)uint64_t v25 = 138412290;
        uint64_t v39 = v25 + 4;
        swift_errorRetain(v19);
        uint64_t v26 = _swift_stdlib_bridgeErrorToNSError(v19);
        uint64_t v49 = v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v39, v25 + 12);
        unint64_t v27 = v40;
        uint64_t *v40 = v26;
        uint64_t v23 = v43;
        swift_errorRelease(v19);
        swift_errorRelease(v19);
        os_log_type_t v28 = v24;
        uint64_t v29 = v41;
        _os_log_impl(&dword_0, v23, v28, "Failed to fetch count: %@", v41, 0xCu);
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy(v27, 1LL, v30);
        swift_slowDealloc(v27, -1LL, -1LL);
        swift_slowDealloc(v29, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease(v19);
        swift_errorRelease(v19);
      }

      uint64_t v7 = v42;

      (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v48);
      unint64_t v34 = lazy protocol witness table accessor for type LiteMessageSegmentStoreError and conformance LiteMessageSegmentStoreError();
      uint64_t v35 = swift_allocError(&type metadata for LiteMessageSegmentStoreError, v34, 0LL, 0LL);
      *uint64_t v36 = 6;
      swift_willThrow(v35);
      swift_release(v16);
      swift_errorRelease(v19);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v10, v45);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    }

    else
    {
      uint64_t v7 = (char *)v20;
      swift_release(v16);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v10, v45);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    }
  }

  else
  {
    unint64_t v31 = lazy protocol witness table accessor for type LiteMessageSegmentStoreError and conformance LiteMessageSegmentStoreError();
    uint64_t v32 = swift_allocError(&type metadata for LiteMessageSegmentStoreError, v31, 0LL, 0LL);
    *uint64_t v33 = 0;
    swift_willThrow(v32);
  }

  return (Swift::Int)v7;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> LiteMessageSegmentStore.deleteMessageSegments(for:)( Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v62 = (uint64_t)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v55 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Predicate<Pack{LiteMessageSegmentStoreSchemaV1.LiteMessageSegment}>?);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Predicate<Pack{LiteMessageSegmentStoreSchemaV1.LiteMessageSegment}>);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = LiteMessageSegmentStore.context.getter();
  if (v15)
  {
    uint64_t v57 = v7;
    uint64_t v63 = v3;
    uint64_t v64 = v2;
    os_log_t v59 = &v55;
    uint64_t v16 = __chkstk_darwin(v15);
    uint64_t v17 = (uint64_t)object;
    *(&v55 - 2) = countAndFlagsBits;
    *(&v55 - 1) = v17;
    uint64_t v18 = v16;
    uint64_t v19 = type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment(0LL);
    uint64_t v70 = v19;
    Predicate.init(_:)( partial apply for closure #4 in LiteMessageSegmentStore.messageSegments(for:),  &v55 - 4,  1LL,  &v70);
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    uint64_t v61 = v14;
    v20(v10, v14, v11);
    uint64_t v60 = v12;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0LL, 1LL, v11);
    uint64_t v21 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
    uint64_t v58 = v18;
    uint64_t v22 = v65;
    dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)(v19, v10, 1LL, v19, v21);
    if (v22)
    {
      outlined destroy of Predicate<Pack{LiteMessageSegmentStoreSchemaV1.LiteMessageSegment}>?((uint64_t)v10);
      uint64_t v23 = Logger.liteSegmentStore.unsafeMutableAddressor();
      uint64_t v24 = v62;
      uint64_t v25 = v63;
      uint64_t v26 = v64;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16))(v62, v23, v64);
      swift_errorRetain(v22);
      uint64_t v27 = swift_errorRetain(v22);
      os_log_type_t v28 = (os_log_s *)Logger.logObject.getter(v27);
      os_log_type_t v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v65 = v11;
        uint64_t v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        unint64_t v31 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v30 = 138412290;
        swift_errorRetain(v22);
        uint64_t v32 = _swift_stdlib_bridgeErrorToNSError(v22);
        uint64_t v68 = v32;
        uint64_t v26 = v64;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v30 + 4, v30 + 12);
        *unint64_t v31 = v32;
        uint64_t v11 = v65;
        swift_errorRelease(v22);
        swift_errorRelease(v22);
        _os_log_impl(&dword_0, v28, v29, "Failed to delete segments: %@", v30, 0xCu);
        uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy(v31, 1LL, v33);
        unint64_t v34 = v31;
        uint64_t v25 = v63;
        swift_slowDealloc(v34, -1LL, -1LL);
        swift_slowDealloc(v30, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease(v22);
        swift_errorRelease(v22);
      }

      uint64_t v50 = v60;
      uint64_t v51 = v61;

      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
      unint64_t v52 = lazy protocol witness table accessor for type LiteMessageSegmentStoreError and conformance LiteMessageSegmentStoreError();
      uint64_t v53 = swift_allocError(&type metadata for LiteMessageSegmentStoreError, v52, 0LL, 0LL);
      *os_log_t v54 = 3;
      swift_willThrow(v53);
      swift_release(v58);
      swift_errorRelease(v22);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v11);
    }

    else
    {
      uint64_t v62 = countAndFlagsBits;
      outlined destroy of Predicate<Pack{LiteMessageSegmentStoreSchemaV1.LiteMessageSegment}>?((uint64_t)v10);
      uint64_t v38 = Logger.liteSegmentStore.unsafeMutableAddressor();
      uint64_t v40 = v63;
      uint64_t v39 = v64;
      int v41 = v57;
      (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v57, v38, v64);
      uint64_t v42 = swift_bridgeObjectRetain_n(object, 2LL);
      uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
      os_log_type_t v44 = static os_log_type_t.default.getter();
      BOOL v45 = os_log_type_enabled(v43, v44);
      uint64_t v46 = v61;
      if (v45)
      {
        uint64_t v65 = v11;
        uint64_t v47 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v48 = swift_slowAlloc(32LL, -1LL);
        uint64_t v68 = v48;
        *(_DWORD *)uint64_t v47 = 136315138;
        uint64_t v56 = v47 + 4;
        unint64_t v49 = (unint64_t)object;
        swift_bridgeObjectRetain(object);
        uint64_t v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v49, &v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v56, v47 + 12);
        swift_bridgeObjectRelease_n(v49, 3LL);
        _os_log_impl(&dword_0, v43, v44, "Deleted segments of %s", v47, 0xCu);
        swift_arrayDestroy(v48, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v48, -1LL, -1LL);
        swift_slowDealloc(v47, -1LL, -1LL);

        swift_release(v58);
        (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v64);
        (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v65);
      }

      else
      {
        swift_bridgeObjectRelease_n(object, 2LL);

        swift_release(v58);
        (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v39);
        (*(void (**)(char *, uint64_t))(v60 + 8))(v46, v11);
      }
    }
  }

  else
  {
    unint64_t v35 = lazy protocol witness table accessor for type LiteMessageSegmentStoreError and conformance LiteMessageSegmentStoreError();
    uint64_t v36 = swift_allocError(&type metadata for LiteMessageSegmentStoreError, v35, 0LL, 0LL);
    *uint64_t v37 = 0;
    swift_willThrow(v36);
  }

uint64_t closure #4 in LiteMessageSegmentStore.messageSegments(for:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Value<String>);
  uint64_t v25 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, String>);
  uint64_t v24 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *a1;
  uint64_t v17 = lazy protocol witness table accessor for type PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment> and conformance PredicateExpressions.Variable<A>( &lazy protocol witness table cache variable for type PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment> and conformance PredicateExpressions.Variable<A>,  &demangling cache variable for type metadata for PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  static PredicateExpressions.build_Arg<A>(_:)(v16, v9, v17);
  uint64_t KeyPath = swift_getKeyPath(&unk_3BEA0);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v12, KeyPath, v9, v17);
  swift_release(KeyPath);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v26[0] = v22;
  v26[1] = v23;
  static PredicateExpressions.build_Arg<A>(_:)(v26, &type metadata for String);
  a4[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, String>, PredicateExpressions.Value<String>>);
  a4[4] = lazy protocol witness table accessor for type PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, String>, PredicateExpressions.Value<String>> and conformance <> PredicateExpressions.Equal<A, B>();
  __swift_allocate_boxed_opaque_existential_1(a4);
  uint64_t v19 = lazy protocol witness table accessor for type PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment> and conformance PredicateExpressions.Variable<A>( &lazy protocol witness table cache variable for type PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, String> and conformance PredicateExpressions.KeyPath<A, B>,  &demangling cache variable for type metadata for PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, String>,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v20 = lazy protocol witness table accessor for type PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment> and conformance PredicateExpressions.Variable<A>( &lazy protocol witness table cache variable for type PredicateExpressions.Value<String> and conformance PredicateExpressions.Value<A>,  &demangling cache variable for type metadata for PredicateExpressions.Value<String>,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v15,  v8,  v13,  v6,  v19,  v20,  &protocol witness table for String);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v15, v13);
}

Swift::Void __swiftcall LiteMessageSegmentStore.deleteAbandonedMessageSegments()()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v71 = *(void *)(v0 - 8);
  uint64_t v72 = v0;
  uint64_t v1 = __chkstk_darwin(v0);
  uint64_t v69 = (char *)&v61 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v61 - v4;
  __chkstk_darwin(v3);
  uint64_t v68 = (char *)&v61 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Predicate<Pack{LiteMessageSegmentStoreSchemaV1.LiteMessageSegment}>?);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Predicate<Pack{LiteMessageSegmentStoreSchemaV1.LiteMessageSegment}>);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v70 = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void *)(v70 - 8);
  uint64_t v15 = __chkstk_darwin(v70);
  uint64_t v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v61 - v18;
  uint64_t v20 = LiteMessageSegmentStore.context.getter();
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v64 = v14;
    uint64_t v22 = Date.init(timeIntervalSinceNow:)(-2592000.0);
    uint64_t v65 = &v61;
    __chkstk_darwin(v22);
    *(&v61 - 2) = (uint8_t *)v19;
    uint64_t v23 = type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment(0LL);
    uint64_t v75 = v23;
    Predicate.init(_:)( partial apply for closure #4 in LiteMessageSegmentStore.deleteAbandonedMessageSegments(),  &v61 - 4,  1LL,  &v75);
    uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    uint64_t v66 = v13;
    v24(v9, v13, v10);
    uint64_t v67 = v11;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0LL, 1LL, v10);
    uint64_t v25 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
    dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)(v23, v9, 1LL, v23, v25);
    uint64_t v26 = v21;
    uint64_t v69 = (char *)v10;
    outlined destroy of Predicate<Pack{LiteMessageSegmentStoreSchemaV1.LiteMessageSegment}>?((uint64_t)v9);
    uint64_t v38 = Logger.liteSegmentStore.unsafeMutableAddressor();
    uint64_t v39 = v68;
    (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v68, v38, v72);
    uint64_t v40 = v64;
    uint64_t v41 = (*(uint64_t (**)(char *, char *, uint64_t))(v64 + 16))(v17, v19, v70);
    uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      BOOL v45 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v46 = swift_slowAlloc(32LL, -1LL);
      v74[0] = v46;
      uint64_t v62 = v26;
      *(_DWORD *)BOOL v45 = 136315138;
      uint64_t v61 = v45 + 4;
      uint64_t v47 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      uint64_t v63 = v19;
      uint64_t v48 = v70;
      uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter(v70, v47);
      uint64_t v51 = (LiteMessageServiceSession *)v50;
      uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74, v61, v45 + 12);
      swift_bridgeObjectRelease(v51, v52, v53, v54, v55, v56, v57, v58);
      os_log_t v59 = *(void (**)(char *, uint64_t))(v40 + 8);
      uint64_t v60 = v48;
      uint64_t v19 = v63;
      v59(v17, v60);
      _os_log_impl(&dword_0, v42, v43, "Deleted segments older than %s", v45, 0xCu);
      swift_arrayDestroy(v46, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1LL, -1LL);
      swift_slowDealloc(v45, -1LL, -1LL);

      swift_release(v62);
      (*(void (**)(char *, uint64_t))(v71 + 8))(v68, v72);
    }

    else
    {

      swift_release(v21);
      os_log_t v59 = *(void (**)(char *, uint64_t))(v40 + 8);
      v59(v17, v70);
      (*(void (**)(char *, uint64_t))(v71 + 8))(v39, v72);
    }

    (*(void (**)(char *, char *))(v67 + 8))(v66, v69);
    v59(v19, v70);
  }

  else
  {
    uint64_t v27 = Logger.liteSegmentStore.unsafeMutableAddressor();
    uint64_t v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v71 + 16))(v5, v27, v72);
    os_log_type_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      unint64_t v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v32 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)unint64_t v31 = 138412290;
      unint64_t v33 = lazy protocol witness table accessor for type LiteMessageSegmentStoreError and conformance LiteMessageSegmentStoreError();
      uint64_t v34 = swift_allocError(&type metadata for LiteMessageSegmentStoreError, v33, 0LL, 0LL);
      _BYTE *v35 = 0;
      uint64_t v36 = _swift_stdlib_bridgeErrorToNSError(v34);
      uint64_t v75 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v31 + 4, v31 + 12);
      uint64_t *v32 = v36;
      _os_log_impl(&dword_0, v29, v30, "Failed to delete abandoned message segments: %@", v31, 0xCu);
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v32, 1LL, v37);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v71 + 8))(v5, v72);
  }

uint64_t closure #4 in LiteMessageSegmentStore.deleteAbandonedMessageSegments()@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v5 = type metadata accessor for PredicateExpressions.ComparisonOperator(0LL);
  uint64_t v30 = *(void *)(v5 - 8);
  uint64_t v31 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Value<Date>);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v34 = v8;
  uint64_t v35 = v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Date>);
  uint64_t v33 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *a1;
  uint64_t v20 = lazy protocol witness table accessor for type PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment> and conformance PredicateExpressions.Variable<A>( &lazy protocol witness table cache variable for type PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment> and conformance PredicateExpressions.Variable<A>,  &demangling cache variable for type metadata for PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  static PredicateExpressions.build_Arg<A>(_:)(v19, v12, v20);
  uint64_t KeyPath = swift_getKeyPath(&unk_3BE78);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v15, KeyPath, v12, v20);
  swift_release(KeyPath);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  uint64_t v22 = type metadata accessor for Date(0LL);
  static PredicateExpressions.build_Arg<A>(_:)(v32, v22);
  uint64_t v24 = v30;
  uint64_t v23 = v31;
  (*(void (**)(char *, void, uint64_t))(v30 + 104))( v7,  enum case for PredicateExpressions.ComparisonOperator.lessThan(_:),  v31);
  a3[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Comparison<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Date>, PredicateExpressions.Value<Date>>);
  a3[4] = lazy protocol witness table accessor for type PredicateExpressions.Comparison<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Date>, PredicateExpressions.Value<Date>> and conformance <> PredicateExpressions.Comparison<A, B>();
  __swift_allocate_boxed_opaque_existential_1(a3);
  uint64_t v25 = lazy protocol witness table accessor for type PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment> and conformance PredicateExpressions.Variable<A>( &lazy protocol witness table cache variable for type PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Date> and conformance PredicateExpressions.KeyPath<A, B>,  &demangling cache variable for type metadata for PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Date>,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v26 = lazy protocol witness table accessor for type PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment> and conformance PredicateExpressions.Variable<A>( &lazy protocol witness table cache variable for type PredicateExpressions.Value<Date> and conformance PredicateExpressions.Value<A>,  &demangling cache variable for type metadata for PredicateExpressions.Value<Date>,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v27 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type Date and conformance Date,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v28 = v34;
  static PredicateExpressions.build_Comparison<A, B>(lhs:rhs:op:)(v18, v11, v7, v16, v34, v25, v26, v27);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v23);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v28);
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v18, v16);
}

uint64_t key path getter for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.dateReceived : LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 248LL))();
}

uint64_t key path setter for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.dateReceived : LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v6 + 16))(v5, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 256LL))(v5);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> LiteMessageSegmentStore.deleteStore()()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v162 = *(void *)(v1 - 8);
  uint64_t v163 = v1;
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v161 = (char *)&v148 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v148 = (char *)&v148 - v4;
  uint64_t v5 = type metadata accessor for URL.DirectoryHint(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v5;
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v148 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v156 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v156 - 8);
  uint64_t v11 = __chkstk_darwin(v156);
  uint64_t v152 = (char *)&v148 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v151 = (char *)&v148 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v148 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v148 - v18;
  uint64_t v20 = *(void *)(v0 + 112);
  *(void *)(v0 + 112) = 0LL;
  swift_release(v20);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject(v21, v168);
  *(_OWORD *)(inited + 16) = xmmword_3BD00;
  id v23 = (id)((uint64_t (*)(void))IMSMSDirectoryURL)();
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  *(void *)&__int128 v160 = 0x800000000003D760LL;
  id v166 = (id)0xD000000000000013LL;
  id v167 = (LiteMessageServiceSession *)0x800000000003D760LL;
  unsigned int v158 = enum case for URL.DirectoryHint.inferFromPath(_:);
  id v159 = *(void (**)(char *))(v6 + 104);
  uint64_t v154 = v7;
  v159(v9);
  unint64_t v157 = lazy protocol witness table accessor for type String and conformance String();
  id v153 = v9;
  URL.appending<A>(path:directoryHint:)(&v166, v9, &type metadata for String, v157);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v6 + 8);
  v24(v9, v7);
  uint64_t v25 = v24;
  uint64_t v150 = v24;
  swift_bridgeObjectRelease(v167, v26, v27, v28, v29, v30, v31, v32);
  uint64_t v33 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  uint64_t v34 = v156;
  uint64_t v35 = v33(v17, v156);
  id v155 = (void (*)(char *, uint64_t))v33;
  uint64_t v36 = URL.path.getter(v35);
  uint64_t v38 = v37;
  uint64_t v39 = v33(v19, v34);
  *(void *)(inited + 32) = v36;
  uint64_t v149 = inited + 32;
  *(void *)(inited + 40) = v38;
  uint64_t v40 = (LiteMessageServiceSession **)(inited + 40);
  id v41 = (id)IMSMSDirectoryURL(v39);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  id v166 = (id)0xD000000000000013LL;
  id v167 = (LiteMessageServiceSession *)v160;
  uint64_t v42 = v153;
  uint64_t v43 = v154;
  ((void (*)(char *, void, uint64_t))v159)(v153, v158, v154);
  os_log_type_t v44 = v151;
  URL.appending<A>(path:directoryHint:)(&v166, v42, &type metadata for String, v157);
  v25(v42, v43);
  swift_bridgeObjectRelease(v167, v45, v46, v47, v48, v49, v50, v51);
  SEL v52 = v17;
  id v53 = v17;
  uint64_t v54 = v156;
  unsigned __int8 v55 = v155;
  uint64_t v56 = ((uint64_t (*)(char *, uint64_t))v155)(v52, v156);
  id v57 = (void *)URL.path.getter(v56);
  os_log_t v59 = v58;
  v55(v44, v54);
  id v166 = v57;
  id v167 = v59;
  swift_bridgeObjectRetain(v59);
  v60._uint64_t countAndFlagsBits = 1835561773LL;
  v60._object = (void *)0xE400000000000000LL;
  String.append(_:)(v60);
  swift_bridgeObjectRelease(v59, v61, v62, v63, v64, v65, v66, v67);
  uint64_t v68 = v167;
  *(void *)(inited + 4_Block_object_dispose(va, 8) = v166;
  *(void *)(inited + 56) = v68;
  id v70 = (id)IMSMSDirectoryURL(v69);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  id v166 = (id)0xD000000000000013LL;
  id v167 = (LiteMessageServiceSession *)v160;
  uint64_t v71 = v153;
  uint64_t v72 = v154;
  ((void (*)(char *, void, uint64_t))v159)(v153, v158, v154);
  uint64_t v73 = v152;
  URL.appending<A>(path:directoryHint:)(&v166, v71, &type metadata for String, v157);
  v150(v71, v72);
  swift_bridgeObjectRelease(v167, v74, v75, v76, v77, v78, v79, v80);
  uint64_t v81 = v155;
  uint64_t v82 = ((uint64_t (*)(char *, uint64_t))v155)(v53, v54);
  uint64_t v83 = v73;
  uint64_t v84 = (void *)URL.path.getter(v82);
  uint64_t v86 = v85;
  v81(v83, v54);
  id v166 = v84;
  id v167 = v86;
  swift_bridgeObjectRetain(v86);
  v87._uint64_t countAndFlagsBits = 1818326829LL;
  v87._object = (void *)0xE400000000000000LL;
  String.append(_:)(v87);
  swift_bridgeObjectRelease(v86, v88, v89, v90, v91, v92, v93, v94);
  uint64_t v95 = v167;
  *(void *)(inited + 64) = v166;
  *(void *)(inited + 72) = v95;
  uint64_t v96 = (void *)objc_opt_self(&OBJC_CLASS___NSFileManager);
  unint64_t v97 = 0LL;
  *(void *)&__int128 v98 = 138412290LL;
  __int128 v160 = v98;
  while (1)
  {
    if (v97 >= *(void *)(inited + 16)) {
      __break(1u);
    }
    uint64_t v100 = *v40;
    id v101 = objc_msgSend(v96, "defaultManager", swift_bridgeObjectRetain(*v40).n128_f64[0]);
    NSString v102 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v100, v103, v104, v105, v106, v107, v108, v109);
    id v166 = 0LL;
    unsigned int v110 = [v101 removeItemAtPath:v102 error:&v166];

    id v111 = v166;
    if (!v110) {
      break;
    }
    id v99 = v166;
LABEL_3:
    ++v97;
    v40 += 2;
    if (v97 == 3)
    {
      swift_setDeallocating(inited);
      swift_arrayDestroy(v149, *(void *)(inited + 16), &type metadata for String);
      return;
    }
  }

  id v112 = v166;
  SEL v113 = (void *)_convertNSErrorToError(_:)(v111);

  swift_willThrow(v114);
  id v166 = v113;
  swift_errorRetain(v113);
  uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v116 = type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for NSError,  &OBJC_CLASS___NSError_ptr);
  if (!swift_dynamicCast(&v165, &v166, v115, v116, 0LL))
  {
    swift_bridgeObjectRelease((LiteMessageServiceSession *)inited, v117, v118, v119, v120, v121, v122, v123);
    goto LABEL_18;
  }

  swift_errorRelease(v113);
  id v124 = v165;
  if ([v165 code] == &dword_4)
  {
    uint64_t v132 = Logger.liteSegmentStore.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v162 + 16))(v161, v132, v163);
    uint64_t v133 = (os_log_s *)v124;
    uint64_t v134 = (os_log_s *)Logger.logObject.getter(v133);
    os_log_type_t v135 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v134, v135))
    {
      uint64_t v136 = swift_slowAlloc(12LL, -1LL);
      SEL v137 = (os_log_s **)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v136 = v160;
      *(void *)(v136 + 4) = v133;
      *SEL v137 = v133;
      _os_log_impl(&dword_0, v134, v135, "File not found, ignoring error: %@", (uint8_t *)v136, 0xCu);
      uint64_t v138 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v137, 1LL, v138);
      swift_slowDealloc(v137, -1LL, -1LL);
      swift_slowDealloc(v136, -1LL, -1LL);
    }

    else
    {

      uint64_t v134 = v133;
    }

    (*(void (**)(char *, uint64_t))(v162 + 8))(v161, v163);
    swift_errorRelease(v166);
    goto LABEL_3;
  }

  swift_bridgeObjectRelease((LiteMessageServiceSession *)inited, v125, v126, v127, v128, v129, v130, v131);
  uint64_t v139 = Logger.liteSegmentStore.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v162 + 16))(v148, v139, v163);
  id v140 = v124;
  id v141 = (os_log_s *)Logger.logObject.getter(v140);
  os_log_type_t v142 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v141, v142))
  {
    id v143 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v144 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)id v143 = v160;
    id v164 = v140;
    id v145 = v140;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, &v165, v143 + 4, v143 + 12);
    *id v144 = v140;

    _os_log_impl(&dword_0, v141, v142, "Error removing file: %@", v143, 0xCu);
    uint64_t v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v144, 1LL, v146);
    swift_slowDealloc(v144, -1LL, -1LL);
    swift_slowDealloc(v143, -1LL, -1LL);
  }

  else
  {

    id v141 = (os_log_s *)v140;
  }

  uint64_t v147 = (*(uint64_t (**)(char *, uint64_t))(v162 + 8))(v148, v163);
  swift_willThrow(v147);
LABEL_18:
  swift_errorRelease(v166);
}

uint64_t partial apply for closure #3 in LiteMessageSegmentStore.countMessageSegments(for:)@<X0>( uint64_t *a1@<X0>, void *a2@<X8>)
{
  return closure #4 in LiteMessageSegmentStore.messageSegments(for:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t outlined destroy of Predicate<Pack{LiteMessageSegmentStoreSchemaV1.LiteMessageSegment}>?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Predicate<Pack{LiteMessageSegmentStoreSchemaV1.LiteMessageSegment}>?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #4 in LiteMessageSegmentStore.deleteAbandonedMessageSegments()@<X0>( uint64_t *a1@<X0>, void *a2@<X8>)
{
  return closure #4 in LiteMessageSegmentStore.deleteAbandonedMessageSegments()(a1, *(void *)(v2 + 16), a2);
}

uint64_t getEnumTagSinglePayload for LiteMessageSegmentStoreError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }

uint64_t storeEnumTagSinglePayload for LiteMessageSegmentStoreError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_22308 + 4 * byte_3BD15[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_2233C + 4 * byte_3BD10[v4]))();
}

uint64_t sub_2233C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22344(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x2234CLL);
  }
  return result;
}

uint64_t sub_22358(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x22360LL);
  }
  *(_BYTE *)uint64_t result = a2 + 8;
  return result;
}

uint64_t sub_22364(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2236C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LiteMessageSegmentStoreError()
{
  return &type metadata for LiteMessageSegmentStoreError;
}

uint64_t type metadata accessor for LiteMessageSegmentStore()
{
  return objc_opt_self(&OBJC_CLASS____TtC12iMessageLite23LiteMessageSegmentStore);
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.Comparison<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Date>, PredicateExpressions.Value<Date>> and conformance <> PredicateExpressions.Comparison<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.Comparison<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Date>, PredicateExpressions.Value<Date>> and conformance <> PredicateExpressions.Comparison<A, B>;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.Comparison<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Date>, PredicateExpressions.Value<Date>> and conformance <> PredicateExpressions.Comparison<A, B>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PredicateExpressions.Comparison<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Date>, PredicateExpressions.Value<Date>>);
    lazy protocol witness table accessor for type PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Date> and conformance <> PredicateExpressions.KeyPath<A, B>( &lazy protocol witness table cache variable for type PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Date> and conformance <> PredicateExpressions.KeyPath<A, B>,  &demangling cache variable for type metadata for PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Date>);
    lazy protocol witness table accessor for type PredicateExpressions.Value<Date> and conformance <A> PredicateExpressions.Value<A>();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.Comparison<A, B>, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.Comparison<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Date>, PredicateExpressions.Value<Date>> and conformance <> PredicateExpressions.Comparison<A, B>);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.Value<Date> and conformance <A> PredicateExpressions.Value<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.Value<Date> and conformance <A> PredicateExpressions.Value<A>;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.Value<Date> and conformance <A> PredicateExpressions.Value<A>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PredicateExpressions.Value<Date>);
    lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type Date and conformance Date,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type Date and conformance Date,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> PredicateExpressions.Value<A>, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.Value<Date> and conformance <A> PredicateExpressions.Value<A>);
  }

  return result;
}

void *__swift_allocate_boxed_opaque_existential_1(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

uint64_t lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, String>, PredicateExpressions.Value<String>> and conformance <> PredicateExpressions.Equal<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, String>, PredicateExpressions.Value<String>> and conformance <> PredicateExpressions.Equal<A, B>;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, String>, PredicateExpressions.Value<String>> and conformance <> PredicateExpressions.Equal<A, B>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, String>, PredicateExpressions.Value<String>>);
    lazy protocol witness table accessor for type PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Date> and conformance <> PredicateExpressions.KeyPath<A, B>( &lazy protocol witness table cache variable for type PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, String> and conformance <> PredicateExpressions.KeyPath<A, B>,  &demangling cache variable for type metadata for PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, String>);
    lazy protocol witness table accessor for type PredicateExpressions.Value<String> and conformance <A> PredicateExpressions.Value<A>( &lazy protocol witness table cache variable for type PredicateExpressions.Value<String> and conformance <A> PredicateExpressions.Value<A>,  &demangling cache variable for type metadata for PredicateExpressions.Value<String>);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.Equal<A, B>, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, String>, PredicateExpressions.Value<String>> and conformance <> PredicateExpressions.Equal<A, B>);
  }

  return result;
}

uint64_t lazy protocol witness table accessor for type PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Date> and conformance <> PredicateExpressions.KeyPath<A, B>( unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    lazy protocol witness table accessor for type PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment> and conformance PredicateExpressions.Variable<A>( &lazy protocol witness table cache variable for type PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment> and conformance PredicateExpressions.Variable<A>,  &demangling cache variable for type metadata for PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.KeyPath<A, B>, v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t partial apply for closure #3 in LiteMessageSegmentStore.hasExistingMessageSegment(for:)@<X0>( uint64_t *a1@<X0>, void *a2@<X8>)
{
  return closure #3 in LiteMessageSegmentStore.hasExistingMessageSegment(for:)(a1, v2[2], v2[3], v2[4], a2);
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.Conjunction<PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, String>, PredicateExpressions.Value<String>>, PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Int>, PredicateExpressions.Value<Int>>> and conformance <> PredicateExpressions.Conjunction<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.Conjunction<PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, String>, PredicateExpressions.Value<String>>, PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Int>, PredicateExpressions.Value<Int>>> and conformance <> PredicateExpressions.Conjunction<A, B>;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.Conjunction<PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, String>, PredicateExpressions.Value<String>>, PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Int>, PredicateExpressions.Value<Int>>> and conformance <> PredicateExpressions.Conjunction<A, B>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PredicateExpressions.Conjunction<PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, String>, PredicateExpressions.Value<String>>, PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Int>, PredicateExpressions.Value<Int>>>);
    lazy protocol witness table accessor for type PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, String>, PredicateExpressions.Value<String>> and conformance <> PredicateExpressions.Equal<A, B>();
    lazy protocol witness table accessor for type PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Int>, PredicateExpressions.Value<Int>> and conformance <> PredicateExpressions.Equal<A, B>();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.Conjunction<A, B>, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.Conjunction<PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, String>, PredicateExpressions.Value<String>>, PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Int>, PredicateExpressions.Value<Int>>> and conformance <> PredicateExpressions.Conjunction<A, B>);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Int>, PredicateExpressions.Value<Int>> and conformance <> PredicateExpressions.Equal<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Int>, PredicateExpressions.Value<Int>> and conformance <> PredicateExpressions.Equal<A, B>;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Int>, PredicateExpressions.Value<Int>> and conformance <> PredicateExpressions.Equal<A, B>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Int>, PredicateExpressions.Value<Int>>);
    lazy protocol witness table accessor for type PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Date> and conformance <> PredicateExpressions.KeyPath<A, B>( &lazy protocol witness table cache variable for type PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Int> and conformance <> PredicateExpressions.KeyPath<A, B>,  &demangling cache variable for type metadata for PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Int>);
    lazy protocol witness table accessor for type PredicateExpressions.Value<String> and conformance <A> PredicateExpressions.Value<A>( &lazy protocol witness table cache variable for type PredicateExpressions.Value<Int> and conformance <A> PredicateExpressions.Value<A>,  &demangling cache variable for type metadata for PredicateExpressions.Value<Int>);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.Equal<A, B>, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.Equal<PredicateExpressions.KeyPath<PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment>, Int>, PredicateExpressions.Value<Int>> and conformance <> PredicateExpressions.Equal<A, B>);
  }

  return result;
}

uint64_t lazy protocol witness table accessor for type PredicateExpressions.Value<String> and conformance <A> PredicateExpressions.Value<A>( unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> PredicateExpressions.Value<A>, v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t lazy protocol witness table accessor for type PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment> and conformance PredicateExpressions.Variable<A>( unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t specialized static LiteMessageSegmentStore.makePersistentContainer()()
{
  uint64_t v31 = type metadata accessor for Logger(0LL);
  void v30[4] = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  v30[3] = (char *)v30 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v1 = type metadata accessor for ModelConfiguration.CloudKitDatabase(0LL);
  __chkstk_darwin(v1);
  int v3 = (char *)v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for URL.DirectoryHint(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  BOOL v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&__int128 v32 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v32 - 8);
  uint64_t v9 = __chkstk_darwin(v32);
  uint64_t v11 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v30 - v12;
  uint64_t v34 = type metadata accessor for ModelConfiguration(0LL);
  uint64_t v14 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v16 = (char *)v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for Schema(0LL);
  unint64_t v17 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1 and conformance LiteMessageSegmentStoreSchemaV1();
  uint64_t v33 = Schema.__allocating_init(versionedSchema:)(&type metadata for LiteMessageSegmentStoreSchemaV1, v17);
  id v18 = (id)IMSMSDirectoryURL();
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v35 = 0xD000000000000013LL;
  unint64_t v36 = 0x800000000003D760LL;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))( v7,  enum case for URL.DirectoryHint.inferFromPath(_:),  v4);
  unint64_t v19 = lazy protocol witness table accessor for type String and conformance String();
  URL.appending<A>(path:directoryHint:)(&v35, v7, &type metadata for String, v19);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_bridgeObjectRelease(v36);
  uint64_t v20 = (*(uint64_t (**)(char *, void))(v8 + 8))(v11, v32);
  static ModelConfiguration.CloudKitDatabase.none.getter(v20);
  uint64_t v21 = v33;
  ModelConfiguration.init(_:schema:url:allowsSave:cloudKitDatabase:)(0LL, 0LL, 0LL, v13, 1LL, v3);
  type metadata accessor for ModelContainer(0LL);
  unint64_t v22 = lazy protocol witness table accessor for type LiteMessageSegmentStoreMigrationPlan and conformance LiteMessageSegmentStoreMigrationPlan();
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ModelConfiguration>);
  uint64_t v24 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v25 = (v24 + 32) & ~v24;
  uint64_t v26 = swift_allocObject(v23, v25 + *(void *)(v14 + 72), v24 | 7);
  __int128 v32 = xmmword_3BA10;
  *(_OWORD *)(v26 + 16) = xmmword_3BA10;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(v26 + v25, v16, v34);
  uint64_t v27 = swift_retain(v21);
  uint64_t v28 = ModelContainer.__allocating_init(for:migrationPlan:configurations:)( v27,  &type metadata for LiteMessageSegmentStoreMigrationPlan,  v22,  v26);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v34);
  swift_release(v21);
  return v28;
}

unint64_t lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1 and conformance LiteMessageSegmentStoreSchemaV1()
{
  unint64_t result = lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1 and conformance LiteMessageSegmentStoreSchemaV1;
  if (!lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1 and conformance LiteMessageSegmentStoreSchemaV1)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1,  &type metadata for LiteMessageSegmentStoreSchemaV1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1 and conformance LiteMessageSegmentStoreSchemaV1);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type LiteMessageSegmentStoreMigrationPlan and conformance LiteMessageSegmentStoreMigrationPlan()
{
  unint64_t result = lazy protocol witness table cache variable for type LiteMessageSegmentStoreMigrationPlan and conformance LiteMessageSegmentStoreMigrationPlan;
  if (!lazy protocol witness table cache variable for type LiteMessageSegmentStoreMigrationPlan and conformance LiteMessageSegmentStoreMigrationPlan)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LiteMessageSegmentStoreMigrationPlan,  &type metadata for LiteMessageSegmentStoreMigrationPlan);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LiteMessageSegmentStoreMigrationPlan and conformance LiteMessageSegmentStoreMigrationPlan);
  }

  return result;
}

uint64_t outlined init with copy of (AnyHashable, Any)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnyHashable, Any));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void LiteMessageSegmentStoreSchemaV1.LiteMessageSegment._data.setter()
{
}

Swift::Bool __swiftcall LiteMessageServiceSession.hasBlockedFromHandleID(_:)(Swift::String a1)
{
  NSString v1 = String._bridgeToObjectiveC()();
  uint64_t CMFItemFromString = CreateCMFItemFromString();

  if (CMFItemFromString)
  {
    int IsItemBlocked = CMFBlockListIsItemBlocked(CMFItemFromString);
    swift_unknownObjectRelease(CMFItemFromString);
    return IsItemBlocked != 0;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t LiteMessage.header.getter()
{
  uint64_t v1 = *((void *)v0 + 2);
  uint64_t v2 = *v0;
  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t LiteMessage.content.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of LiteMessageContent(v1 + 24, a1);
}

uint64_t outlined init with copy of LiteMessageContent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void LiteMessage.append(to:)(uint64_t a1)
{
  LOBYTE(v9) = *(_BYTE *)v1;
  __int128 v10 = *(_OWORD *)(v1 + 8);
  protocol witness for BitPackable.append(to:) in conformance LiteMessageHeader(a1);
  if (!v2)
  {
    uint64_t v5 = *(void *)(v1 + 48);
    uint64_t v4 = *(void *)(v1 + 56);
    uint64_t v6 = __swift_project_boxed_opaque_existential_1((void *)(v1 + 24), v5);
    uint64_t v11 = v5;
    uint64_t v7 = *(void *)(v4 + 8);
    uint64_t v12 = v7;
    uint64_t v8 = __swift_allocate_boxed_opaque_existential_1(&v9);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v5 - 8) + 16LL))(v8, v6, v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 8))(a1, v5, v7);
    __swift_destroy_boxed_opaque_existential_0(&v9);
  }

uint64_t LiteMessage.init(header:content:)@<X0>( char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  *(_BYTE *)a5 = a1;
  *(void *)(a5 + _Block_object_dispose(va, 8) = a2;
  *(void *)(a5 + 16) = a3;
  return outlined init with take of LiteMessageContent(a4, a5 + 24);
}

uint64_t outlined init with take of LiteMessageContent(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void protocol witness for BitPackable.append(to:) in conformance LiteMessage(uint64_t a1)
{
}

uint64_t destroy for LiteMessage( uint64_t a1, const char *a2, void *a3, void *a4, unsigned __int8 a5, void *a6, void *a7, void *a8)
{
  return __swift_destroy_boxed_opaque_existential_0((void *)(a1 + 24));
}

uint64_t initializeWithCopy for LiteMessage(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = a2 + 24;
  __int128 v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v5;
  uint64_t v6 = v5;
  uint64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_bridgeObjectRetain(v3);
  v7(a1 + 24, v4, v6);
  return a1;
}

uint64_t assignWithCopy for LiteMessage(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  __int128 v5 = *(LiteMessageServiceSession **)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5, v6, v7, v8, v9, v10, v11, v12);
  __swift_assign_boxed_opaque_existential_1((void *)(a1 + 24), (void *)(a2 + 24));
  return a1;
}

void *__swift_assign_boxed_opaque_existential_1(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v11 = *result;
        uint64_t v12 = *a2;
        swift_retain(*a2);
        Swift::Bool result = (void *)swift_release(v11);
        *uint64_t v3 = v12;
      }

      else
      {
        return (void *)(*(uint64_t (**)(void *, void *, void))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        uint64_t v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v14 = *a2;
          *uint64_t v3 = *a2;
          swift_retain(v14);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (void *)swift_release(v10);
      }

      else
      {
        (*(void (**)(_BYTE *, void *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v13 = *a2;
          *uint64_t v3 = *a2;
          swift_retain(v13);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (void *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }

  return result;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for LiteMessage( uint64_t a1, uint64_t a2, void *a3, void *a4, unsigned __int8 a5, void *a6, void *a7, void *a8)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v11 = *(LiteMessageServiceSession **)(a1 + 16);
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v10;
  swift_bridgeObjectRelease(v11, (SEL)a2, a3, a4, a5, a6, a7, a8);
  __swift_destroy_boxed_opaque_existential_0((void *)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for LiteMessage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LiteMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 64) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 4_Block_object_dispose(va, 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for LiteMessage()
{
  return &type metadata for LiteMessage;
}

void LiteMessageReachabilityError.errorDescription.getter(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }

uint64_t sub_23550()
{
  v3._uint64_t countAndFlagsBits = v1;
  v3._object = v0;
  String.append(_:)(v3);
  v4._uint64_t countAndFlagsBits = 46LL;
  v4._object = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  return v2 + 5;
}

void sub_236C0()
{
  id v2 = v1;
  _StringGuts.grow(_:)(43LL);
  swift_bridgeObjectRelease((LiteMessageServiceSession *)0xE000000000000000LL, v3, v4, v5, v6, v7, v8, v9);
  id v10 = [v2 description];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  uint64_t v13 = v12;

  v14._uint64_t countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v13, v15, v16, v17, v18, v19, v20, v21);
  outlined consume of LiteMessageReachabilityError(v1, v0, 5);
  JUMPOUT(0x236A4LL);
}

void outlined consume of LiteMessageReachabilityError(void *a1, id a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      swift_bridgeObjectRelease(a2);
      break;
    case 5:

      break;
    default:
      return;
  }

void protocol witness for LocalizedError.errorDescription.getter in conformance LiteMessageReachabilityError()
{
}

uint64_t LiteMessageServiceSession.calculateReachability(with:responseHandler:)(void *a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v5);
  id v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
  type metadata accessor for MainActor(0LL);
  id v9 = v2;
  id v10 = a1;
  uint64_t v12 = swift_unknownObjectRetain(a2, v11);
  uint64_t v13 = static MainActor.shared.getter(v12);
  Swift::String v14 = (void *)swift_allocObject(&unk_49E40, 56LL, 7LL);
  uint64_t v14[2] = v13;
  v14[3] = &protocol witness table for MainActor;
  v14[4] = v9;
  void v14[5] = v10;
  v14[6] = a2;
  uint64_t v15 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( (uint64_t)v7,  (uint64_t)&async function pointer to partial apply for closure #1 in LiteMessageServiceSession.calculateReachability(with:responseHandler:),  (uint64_t)v14);
  return swift_release(v15);
}

uint64_t closure #1 in LiteMessageServiceSession.calculateReachability(with:responseHandler:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[11] = a5;
  v6[12] = a6;
  v6[10] = a4;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  v6[13] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v6[14] = v9;
  v6[15] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for MainActor(0LL);
  v6[16] = v10;
  v6[17] = static MainActor.shared.getter(v10);
  uint64_t v11 = (void *)swift_task_alloc(dword_4DEAC);
  v6[18] = v11;
  *uint64_t v11 = v6;
  v11[1] = closure #1 in LiteMessageServiceSession.calculateReachability(with:responseHandler:);
  return LiteMessageServiceSession.calculateReachability(with:)(a5);
}

uint64_t closure #1 in LiteMessageServiceSession.calculateReachability(with:responseHandler:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 144);
  *(void *)(*v2 + 152) = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = *(void *)(v4 + 128);
  if (v1)
  {
    uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
    uint64_t v9 = v8;
    uint64_t v10 = closure #1 in LiteMessageServiceSession.calculateReachability(with:responseHandler:);
  }

  else
  {
    *(void *)(v4 + 160) = a1;
    uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
    uint64_t v9 = v11;
    uint64_t v10 = closure #1 in LiteMessageServiceSession.calculateReachability(with:responseHandler:);
  }

  return swift_task_switch(v10, v7, v9);
}

uint64_t closure #1 in LiteMessageServiceSession.calculateReachability(with:responseHandler:)()
{
  uint64_t v1 = *(void **)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 88);
  id v2 = *(void **)(v0 + 96);
  swift_release(*(void *)(v0 + 136));
  [v2 reachabilityRequest:v3 updatedWithResult:v1];

  swift_task_dealloc(*(void *)(v0 + 120));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  os_log_s *v10;
  os_log_type_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  LiteMessageServiceSession *v18;
  SEL v19;
  id v20;
  id v21;
  unsigned __int8 v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  os_log_s *log;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 112);
  id v2 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v5 = *(void **)(v0 + 88);
  swift_release(*(void *)(v0 + 136));
  uint64_t v6 = Logger.availability.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v4);
  uint64_t v7 = v5;
  swift_errorRetain(v1);
  uint64_t v8 = v7;
  uint64_t v9 = swift_errorRetain(v1);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  uint64_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    unint64_t v36 = *(void *)(v0 + 152);
    uint64_t v39 = *(void *)(v0 + 112);
    uint64_t v40 = *(void *)(v0 + 104);
    id v41 = *(void *)(v0 + 120);
    uint64_t v12 = *(void **)(v0 + 88);
    uint64_t v13 = swift_slowAlloc(22LL, -1LL);
    log = v10;
    Swift::String v14 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v38 = swift_slowAlloc(32LL, -1LL);
    uint64_t v42 = v38;
    *(_DWORD *)uint64_t v13 = 138412546;
    *(void *)(v0 + 56) = v12;
    uint64_t v15 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v13 + 4, v13 + 12);
    *Swift::String v14 = v12;

    *(_WORD *)(v13 + 12) = 2080;
    swift_getErrorValue(v36, v0 + 64, v0 + 16);
    id v16 = Error.localizedDescription.getter(*(void *)(v0 + 24), *(void *)(v0 + 32));
    unsigned __int8 v18 = (LiteMessageServiceSession *)v17;
    *(void *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease(v18, v19, v20, v21, v22, v23, v24, v25);
    swift_errorRelease(v36);
    swift_errorRelease(v36);
    _os_log_impl(&dword_0, log, v11, "Failed to determinate reachability for: %@ with error: %s", (uint8_t *)v13, 0x16u);
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v14, 1LL, v26);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v41, v40);
  }

  else
  {
    uint64_t v27 = *(void *)(v0 + 152);
    unsigned __int8 v29 = *(void *)(v0 + 112);
    uint64_t v28 = *(void *)(v0 + 120);
    id v30 = *(void *)(v0 + 104);
    uint64_t v31 = *(void **)(v0 + 88);

    swift_errorRelease(v27);
    swift_errorRelease(v27);

    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
  }

  __int128 v32 = *(void *)(v0 + 152);
  uint64_t v33 = *(void *)(v0 + 88);
  uint64_t v34 = *(void *)(v0 + 96);
  *(void *)(v0 + 40) = *(void *)(v0 + 80);
  *(void *)(v0 + 4_Block_object_dispose(va, 8) = &OBJC_CLASS___LiteMessageServiceSession;
  objc_msgSendSuper2((objc_super *)(v0 + 40), "calculateReachabilityWithRequest:responseHandler:", v33, v34);
  swift_errorRelease(v32);
  swift_task_dealloc(*(void *)(v0 + 120));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t partial apply for closure #1 in LiteMessageServiceSession.calculateReachability(with:responseHandler:)()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = (void *)swift_task_alloc(dword_4DE24);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = partial apply for closure #1 in LiteMessageServiceSession.donateHandlesForKeyExchange();
  return closure #1 in LiteMessageServiceSession.calculateReachability(with:responseHandler:)( (uint64_t)v5,  v6,  v7,  v2,  v3,  v4);
}

uint64_t LiteMessageServiceSession.calculateReachability(with:)(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[7] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[8] = swift_task_alloc(v5);
  void v2[9] = swift_task_alloc(v5);
  uint64_t v6 = type metadata accessor for MainActor(0LL);
  v2[10] = v6;
  v2[11] = static MainActor.shared.getter(v6);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v2[12] = v7;
  v2[13] = v8;
  return swift_task_switch(LiteMessageServiceSession.calculateReachability(with:), v7, v8);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void *v7;
  void *v8;
  unsigned __int8 v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)();
  uint64_t v4 = *v2;
  unint64_t v5 = *(void *)(*v2 + 160);
  *(void *)(*v2 + 16_Block_object_dispose(va, 8) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v13 = *(void *)(v4 + 96);
    Swift::String v14 = *(void *)(v4 + 104);
    uint64_t v15 = LiteMessageServiceSession.calculateReachability(with:);
  }

  else
  {
    swift_bridgeObjectRelease(*(LiteMessageServiceSession **)(v4 + 120), v6, v7, v8, v9, v10, v11, v12);
    *(void *)(v4 + 176) = a1;
    uint64_t v13 = *(void *)(v4 + 96);
    Swift::String v14 = *(void *)(v4 + 104);
    uint64_t v15 = LiteMessageServiceSession.calculateReachability(with:);
  }

  return swift_task_switch(v15, v13, v14);
}

uint64_t LiteMessageServiceSession.calculateReachability(with:)()
{
  id v1 = [*(id *)(v0 + 32) handleIDs];
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String);

  uint64_t v3 = *(void *)(v2 + 16);
  swift_bridgeObjectRelease((LiteMessageServiceSession *)v2, v4, v5, v6, v7, v8, v9, v10);
  if (v3 != 1)
  {
    uint64_t v60 = *(void *)(v0 + 88);
LABEL_13:
    swift_release(v60);
    unint64_t v61 = lazy protocol witness table accessor for type LiteMessageReachabilityError and conformance LiteMessageReachabilityError();
    uint64_t v62 = swift_allocError(&type metadata for LiteMessageReachabilityError, v61, 0LL, 0LL);
    *(void *)uint64_t v63 = 0LL;
    *(void *)(v63 + _Block_object_dispose(va, 8) = 0LL;
    *(_BYTE *)(v63 + 16) = 6;
    swift_willThrow(v62);
    uint64_t v64 = *(void *)(v0 + 64);
    swift_task_dealloc(*(void *)(v0 + 72));
    swift_task_dealloc(v64);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  id v11 = [*(id *)(v0 + 32) handleIDs];
  uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, &type metadata for String);

  if (!*(void *)(v12 + 16))
  {
    uint64_t v60 = *(void *)(v0 + 88);
    swift_bridgeObjectRelease((LiteMessageServiceSession *)v12, v13, v14, v15, v16, v17, v18, v19);
    goto LABEL_13;
  }

  uint64_t v20 = *(void *)(v0 + 72);
  uint64_t v21 = *(void *)(v0 + 56);
  uint64_t v23 = *(void **)(v0 + 32);
  unint64_t v22 = *(void **)(v0 + 40);
  uint64_t v24 = *(void *)(v12 + 32);
  *(void *)(v0 + 112) = v24;
  uint64_t v25 = *(LiteMessageServiceSession **)(v12 + 40);
  *(void *)(v0 + 120) = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease((LiteMessageServiceSession *)v12, v26, v27, v28, v29, v30, v31, v32);
  uint64_t v33 = Logger.availability.unsafeMutableAddressor();
  uint64_t v34 = *(void (**)(uint64_t))(v21 + 16);
  uint64_t v95 = v33;
  v34(v20);
  id v35 = v22;
  id v36 = v23;
  id v37 = v35;
  uint64_t v38 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v96 = static os_log_type_t.info.getter();
  BOOL v39 = os_log_type_enabled(v38, v96);
  uint64_t v40 = *(void *)(v0 + 72);
  uint64_t v41 = *(void *)(v0 + 48);
  uint64_t v97 = *(void *)(v0 + 56);
  uint64_t v43 = *(void **)(v0 + 32);
  uint64_t v42 = *(void **)(v0 + 40);
  if (v39)
  {
    uint64_t v89 = v0 + 24;
    uint64_t v94 = v24;
    uint64_t v44 = swift_slowAlloc(28LL, -1LL);
    unsigned __int8 v91 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v93 = swift_slowAlloc(32LL, -1LL);
    uint64_t v98 = v93;
    *(_DWORD *)uint64_t v44 = 136315650;
    char v45 = variable initialization expression of LiteMessageServiceSession.State.emergencyContactsNotificationToken();
    BOOL v46 = (v45 & 1) == 0;
    if ((v45 & 1) != 0) {
      uint64_t v47 = 4605519LL;
    }
    else {
      uint64_t v47 = 20047LL;
    }
    id v92 = v25;
    if (v46) {
      unsigned __int8 v48 = (LiteMessageServiceSession *)0xE200000000000000LL;
    }
    else {
      unsigned __int8 v48 = (LiteMessageServiceSession *)0xE300000000000000LL;
    }
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, (unint64_t)v48, &v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v89, v44 + 4, v44 + 12);
    swift_bridgeObjectRelease(v48, v49, v50, v51, v52, v53, v54, v55);

    *(_WORD *)(v44 + 12) = 2112;
    *(void *)(v0 + 24) = v43;
    log = v38;
    id v56 = v43;
    uint64_t v25 = v92;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v89, v0 + 32, v44 + 14, v44 + 22);
    *unsigned __int8 v91 = v43;

    *(_WORD *)(v44 + 22) = 1024;
    LOBYTE(v56) = variable initialization expression of LiteMessageServiceSession.State.emergencyContactsNotificationToken();

    *(_DWORD *)(v0 + 184) = v56 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 188, v44 + 24, v44 + 28);

    _os_log_impl( &dword_0,  log,  v96,  "Calculating %s grid reachability for request: %@, isLiteMessageActiveOverSatellite: %{BOOL}d",  (uint8_t *)v44,  0x1Cu);
    uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy(v91, 1LL, v57);
    swift_slowDealloc(v91, -1LL, -1LL);
    swift_arrayDestroy(v93, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v93, -1LL, -1LL);
    uint64_t v58 = v44;
    uint64_t v24 = v94;
    swift_slowDealloc(v58, -1LL, -1LL);

    os_log_t v59 = *(void (**)(uint64_t, uint64_t))(v97 + 8);
    v59(v40, v41);
  }

  else
  {

    os_log_t v59 = *(void (**)(uint64_t, uint64_t))(v97 + 8);
    v59(v40, v41);
  }

  uint64_t v66 = variable initialization expression of LiteMessageServiceSession.State.emergencyContactsNotificationToken();
  if ((v66 & 1) != 0)
  {
    *(void *)(v0 + 12_Block_object_dispose(va, 8) = static MainActor.shared.getter(v66);
    id v67 = (void *)swift_task_alloc(dword_4DEBC);
    *(void *)(v0 + 136) = v67;
    void *v67 = v0;
    v67[1] = LiteMessageServiceSession.calculateReachability(with:);
    return LiteMessageServiceSession.isAvailableForLiteMessage(for:token:with:)( v24,  (uint64_t)v25,  0LL,  0xF000000000000000LL,  *(void *)(v0 + 32));
  }

  else
  {
    id v68 = [*(id *)(v0 + 40) networkMonitor];
    if (v68)
    {
      uint64_t v69 = v68;
      unsigned __int8 v70 = [v68 immediatelyReachable];

      if ((v70 & 1) != 0)
      {
        uint64_t v71 = (void *)swift_task_alloc(dword_4DEB4);
        *(void *)(v0 + 160) = v71;
        *uint64_t v71 = v0;
        v71[1] = LiteMessageServiceSession.calculateReachability(with:);
        return LiteMessageServiceSession.calculateOnGridReachability(for:with:)(v24, (uint64_t)v25, *(void *)(v0 + 32));
      }

      else
      {
        uint64_t v72 = *(void *)(v0 + 64);
        uint64_t v73 = *(void *)(v0 + 48);
        swift_release(*(void *)(v0 + 88));
        uint64_t v74 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v34)(v72, v95, v73);
        id v75 = (os_log_s *)Logger.logObject.getter(v74);
        os_log_type_t v76 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v75, v76))
        {
          unsigned __int8 v77 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)unsigned __int8 v77 = 0;
          _os_log_impl(&dword_0, v75, v76, "No network available", v77, 2u);
          swift_slowDealloc(v77, -1LL, -1LL);
        }

        uint64_t v78 = *(void *)(v0 + 64);
        uint64_t v79 = *(void *)(v0 + 48);

        v59(v78, v79);
        id v80 = LiteMessageServiceSession.result(for:reachable:)(v24, v25, 0);
        swift_bridgeObjectRelease(v25, v81, v82, v83, v84, v85, v86, v87);
        uint64_t v88 = *(void *)(v0 + 64);
        swift_task_dealloc(*(void *)(v0 + 72));
        swift_task_dealloc(v88);
        return (*(uint64_t (**)(id))(v0 + 8))(v80);
      }
    }

    else
    {
      return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000023LL,  0x800000000003D9D0LL,  "iMessageLite/LiteMessageServiceSession+ServiceForSending.swift",  62LL,  2LL,  327LL,  0);
    }
  }

{
  uint64_t v0;
  char v1;
  LiteMessageServiceSession *v2;
  uint64_t v3;
  SEL v4;
  id v5;
  id v6;
  unsigned __int8 v7;
  id v8;
  id v9;
  id v10;
  id v1 = *(_BYTE *)(v0 + 188);
  uint64_t v2 = *(LiteMessageServiceSession **)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 112);
  swift_release(*(void *)(v0 + 128));
  *(void *)(v0 + 152) = LiteMessageServiceSession.result(for:reachable:)(v3, v2, v1);
  swift_bridgeObjectRelease(v2, v4, v5, v6, v7, v8, v9, v10);
  return swift_task_switch( LiteMessageServiceSession.calculateReachability(with:),  *(void *)(v0 + 96),  *(void *)(v0 + 104));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  swift_release(*(void *)(v0 + 88));
  id v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 72));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  void *v0;
  swift_release(v0[16]);
  return swift_task_switch(LiteMessageServiceSession.calculateReachability(with:), v0[12], v0[13]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v1 = *(void *)(v0 + 120);
  swift_release(*(void *)(v0 + 88));
  swift_bridgeObjectRelease(v1);
  uint64_t v2 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 72));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  swift_release(*(void *)(v0 + 88));
  id v1 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 72));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v1 = *(void *)(v0 + 120);
  swift_release(*(void *)(v0 + 88));
  swift_bridgeObjectRelease(v1);
  uint64_t v2 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 72));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LiteMessageServiceSession.calculateReachability(with:)(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 136);
  *(void *)(*v2 + 144) = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = *(void *)(v4 + 80);
  if (v1)
  {
    uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
    uint64_t v9 = v8;
    id v10 = LiteMessageServiceSession.calculateReachability(with:);
  }

  else
  {
    *(_BYTE *)(v4 + 18_Block_object_dispose(va, 8) = a1 & 1;
    uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
    uint64_t v9 = v11;
    id v10 = LiteMessageServiceSession.calculateReachability(with:);
  }

  return swift_task_switch(v10, v7, v9);
}

uint64_t LiteMessageServiceSession.networkDataAvailable.getter()
{
  id v1 = [v0 networkMonitor];
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = [v1 immediatelyReachable];

    return (uint64_t)v3;
  }

  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000023LL,  0x800000000003D9D0LL,  "iMessageLite/LiteMessageServiceSession+ServiceForSending.swift",  62LL,  2LL,  327LL,  0);
    __break(1u);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type LiteMessageReachabilityError and conformance LiteMessageReachabilityError()
{
  unint64_t result = lazy protocol witness table cache variable for type LiteMessageReachabilityError and conformance LiteMessageReachabilityError;
  if (!lazy protocol witness table cache variable for type LiteMessageReachabilityError and conformance LiteMessageReachabilityError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LiteMessageReachabilityError,  &type metadata for LiteMessageReachabilityError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LiteMessageReachabilityError and conformance LiteMessageReachabilityError);
  }

  return result;
}

id outlined copy of LiteMessageReachabilityError(id result, id a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      unint64_t result = (id)swift_bridgeObjectRetain(a2);
      break;
    case 5:
      unint64_t result = result;
      break;
    default:
      return result;
  }

  return result;
}

void destroy for LiteMessageReachabilityError(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for LiteMessageReachabilityError(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of LiteMessageReachabilityError(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for LiteMessageReachabilityError(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of LiteMessageReachabilityError(*(id *)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of LiteMessageReachabilityError(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for LiteMessageReachabilityError(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  char v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of LiteMessageReachabilityError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for LiteMessageReachabilityError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 6) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LiteMessageReachabilityError( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 250;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 >= 0xFA) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFA) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for LiteMessageReachabilityError(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 6);
  }
}

uint64_t destructiveInjectEnumTag for LiteMessageReachabilityError(uint64_t result, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(void *)unint64_t result = a2 - 6;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    LOBYTE(a2) = 6;
  }

  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for LiteMessageReachabilityError()
{
  return &type metadata for LiteMessageReachabilityError;
}

uint64_t objectdestroyTm_0()
{
  swift_unknownObjectRelease(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t closure #1 in LiteMessageServiceSession.calculateReachability(with:responseHandler:)partial apply()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  char v5 = (void *)swift_task_alloc(dword_4DE24);
  *(void *)(v1 + 16) = v5;
  *char v5 = v1;
  v5[1] = partial apply for closure #1 in LiteMessageServiceSession.familyContactsDidChange();
  return closure #1 in LiteMessageServiceSession.calculateReachability(with:responseHandler:)( (uint64_t)v5,  v6,  v7,  v2,  v3,  v4);
}

id LiteMessageServiceSession.result(for:reachable:)(uint64_t a1, LiteMessageServiceSession *a2, char a3)
{
  uint64_t v4 = v3;
  id v8 = objc_msgSend(v4, "service", swift_bridgeObjectRetain(a2).n128_f64[0]);
  id v9 = [v8 internalName];

  static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v11 = v10;

  id v12 = objc_allocWithZone(&OBJC_CLASS___IMServiceReachabilityHandleResult);
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2, v14, v15, v16, v17, v18, v19, v20);
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11, v22, v23, v24, v25, v26, v27, v28);
  uint64_t v29 = a3 & 1;
  id v30 = [v12 initWithHandleID:v13 service:v21 isReachable:v29];

  id v31 = [v4 service];
  id v32 = [v31 internalName];

  static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  uint64_t v34 = v33;

  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, IMServiceReachabilityHandleResult)>);
  uint64_t inited = swift_initStackObject(v35, v65);
  *(_OWORD *)(inited + 16) = xmmword_3BA10;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  *(void *)(inited + 4_Block_object_dispose(va, 8) = v30;
  swift_bridgeObjectRetain(a2);
  id v37 = v30;
  char v45 = (LiteMessageServiceSession *)specialized Dictionary.init(dictionaryLiteral:)( inited,  v38,  v39,  v40,  v41,  v42,  v43,  v44);
  id v46 = objc_allocWithZone(&OBJC_CLASS___IMServiceReachabilityResult);
  NSString v47 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v34, v48, v49, v50, v51, v52, v53, v54);
  type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IMServiceReachabilityHandleResult,  &OBJC_CLASS___IMServiceReachabilityHandleResult_ptr);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v45, v56, v57, v58, v59, v60, v61, v62);
  id v63 = [v46 initWithService:v47 error:0 handleResults:isa isFinal:1 allAreReachable:v29 didCheckServer:0];

  return v63;
}

uint64_t LiteMessageServiceSession.calculateOnGridReachability(for:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[21] = a3;
  v4[22] = v3;
  v4[19] = a1;
  v4[20] = a2;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v4[23] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[24] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[25] = swift_task_alloc(v7);
  v4[26] = swift_task_alloc(v7);
  v4[27] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for MainActor(0LL);
  v4[28] = static MainActor.shared.getter(v8);
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  v4[29] = v9;
  v4[30] = v10;
  return swift_task_switch(LiteMessageServiceSession.calculateOnGridReachability(for:with:), v9, v10);
}

uint64_t LiteMessageServiceSession.calculateOnGridReachability(for:with:)()
{
  id v1 = [*(id *)(v0 + 168) context];
  id v2 = [v1 chatIdentifier];

  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 216);
    uint64_t v4 = *(void *)(v0 + 184);
    uint64_t v5 = *(void *)(v0 + 192);
    uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    unint64_t v7 = v6;
    uint64_t v8 = Logger.availability.unsafeMutableAddressor();
    *(void *)(v0 + 24_Block_object_dispose(va, 8) = v8;
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    *(void *)(v0 + 256) = v9;
    v9(v3, v8, v4);
    swift_bridgeObjectRetain(v7);
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.info.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    uint64_t v14 = *(void *)(v0 + 216);
    uint64_t v16 = *(void *)(v0 + 184);
    uint64_t v15 = *(void *)(v0 + 192);
    if (v13)
    {
      id v61 = v9;
      unsigned __int8 v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v60 = v15;
      uint64_t v18 = swift_slowAlloc(32LL, -1LL);
      uint64_t v63 = v18;
      *(_DWORD *)unsigned __int8 v17 = 136315138;
      swift_bridgeObjectRetain(v7);
      *(void *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v7, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease_n(v7, 3LL);
      _os_log_impl(&dword_0, v11, v12, "Calculating on grid reachability for chat %s", v17, 0xCu);
      swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1LL, -1LL);
      id v19 = v17;
      uint64_t v9 = v61;
      swift_slowDealloc(v19, -1LL, -1LL);

      id v20 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
    }

    else
    {
      swift_bridgeObjectRelease_n(v7, 2LL);

      id v20 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    }

    v20(v14, v16);
    *(void *)(v0 + 264) = v20;
    id v29 = [*(id *)(v0 + 176) chatForChatIdentifier:v2 style:45];
    *(void *)(v0 + 272) = v29;

    if (v29)
    {
      *(_BYTE *)(v0 + 316) = 0;
      NSString v30 = String._bridgeToObjectiveC()();
      NSString v31 = String._bridgeToObjectiveC()();
      char v32 = IMGetCachedDomainBoolForKey(v30, v31);

      if ((v32 & 1) != 0
        || (id v33 = [v29 recipient],
            (*(void *)(v0 + 280) = v33) == 0LL))
      {
        uint64_t v38 = (*(uint64_t (**)(void, void, void))(v0 + 256))( *(void *)(v0 + 208),  *(void *)(v0 + 248),  *(void *)(v0 + 184));
        BOOL v39 = (os_log_s *)Logger.logObject.getter(v38);
        os_log_type_t v40 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v39, v40))
        {
          unsigned __int8 v41 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
          *(_DWORD *)unsigned __int8 v41 = 67109120;
          *(_DWORD *)(v0 + 312) = 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 316, v41 + 4, v41 + 8);
          _os_log_impl(&dword_0, v39, v40, "Calculating on grid reachability for off grid recipient: %{BOOL}d", v41, 8u);
          swift_slowDealloc(v41, -1LL, -1LL);
        }

        uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v0 + 264);
        uint64_t v43 = *(void *)(v0 + 208);
        uint64_t v44 = *(void *)(v0 + 184);

        v42(v43, v44);
        swift_beginAccess(v0 + 316, v0 + 120, 0LL, 0LL);
        char v45 = *(_BYTE *)(v0 + 316);
        id v46 = (void *)swift_task_alloc(dword_4DECC);
        *(void *)(v0 + 28_Block_object_dispose(va, 8) = v46;
        *id v46 = v0;
        v46[1] = LiteMessageServiceSession.calculateOnGridReachability(for:with:);
        return LiteMessageServiceSession.calculateOnGridReachability(for:with:isRecipientOffGrid:)( *(void *)(v0 + 152),  *(void *)(v0 + 160),  *(void *)(v0 + 168),  v45);
      }

      else
      {
        uint64_t v34 = v33;
        uint64_t v35 = v0 + 16;
        *(void *)(v0 + 56) = v0 + 317;
        *(void *)(v0 + 16) = v0;
        *(void *)(v0 + 24) = LiteMessageServiceSession.calculateOnGridReachability(for:with:);
        uint64_t v36 = swift_continuation_init(v0 + 16, 0LL);
        *(void *)(v0 + 80) = _NSConcreteStackBlock;
        id v37 = (void *)(v0 + 80);
        v37[1] = 0x40000000LL;
        v37[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool) -> () with result type Bool;
        v37[3] = &block_descriptor_20;
        v37[4] = v36;
        [v34 isOffGridModeWithCompletion:v37];
        return swift_continuation_await(v35);
      }
    }

    else
    {
      uint64_t v47 = *(void *)(v0 + 200);
      uint64_t v48 = *(void *)(v0 + 184);
      swift_release(*(void *)(v0 + 224));
      uint64_t v49 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9)(v47, v8, v48);
      id v50 = (os_log_s *)Logger.logObject.getter(v49);
      os_log_type_t v51 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v50, v51))
      {
        id v52 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)id v52 = 0;
        _os_log_impl(&dword_0, v50, v51, "Lite chat not found", v52, 2u);
        swift_slowDealloc(v52, -1LL, -1LL);
      }

      uint64_t v53 = *(void *)(v0 + 200);
      uint64_t v54 = *(void *)(v0 + 184);
      uint64_t v56 = *(void *)(v0 + 152);
      id v55 = *(LiteMessageServiceSession **)(v0 + 160);

      v20(v53, v54);
      id v57 = LiteMessageServiceSession.result(for:reachable:)(v56, v55, 0);
      uint64_t v58 = *(void *)(v0 + 208);
      uint64_t v59 = *(void *)(v0 + 200);
      swift_task_dealloc(*(void *)(v0 + 216));
      swift_task_dealloc(v58);
      swift_task_dealloc(v59);
      return (*(uint64_t (**)(id))(v0 + 8))(v57);
    }
  }

  else
  {
    uint64_t v22 = *(void *)(v0 + 152);
    uint64_t v21 = *(void *)(v0 + 160);
    swift_release(*(void *)(v0 + 224));
    unint64_t v23 = lazy protocol witness table accessor for type LiteMessageReachabilityError and conformance LiteMessageReachabilityError();
    swift_allocError(&type metadata for LiteMessageReachabilityError, v23, 0LL, 0LL);
    *(void *)uint64_t v24 = v22;
    *(void *)(v24 + _Block_object_dispose(va, 8) = v21;
    *(_BYTE *)(v24 + 16) = 4;
    swift_bridgeObjectRetain(v21);
    swift_willThrow(v25);
    uint64_t v26 = *(void *)(v0 + 208);
    uint64_t v27 = *(void *)(v0 + 200);
    swift_task_dealloc(*(void *)(v0 + 216));
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

{
  uint64_t v0;
  return swift_task_switch( LiteMessageServiceSession.calculateOnGridReachability(for:with:),  *(void *)(*(void *)v0 + 232LL),  *(void *)(*(void *)v0 + 240LL));
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  os_log_s *v3;
  os_log_type_t v4;
  uint8_t *v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  char v9;
  void *v10;

  id v1 = *(unsigned __int8 *)(v0 + 317);
  *(_BYTE *)(v0 + 316) = v1;
  id v2 = (*(uint64_t (**)(void, void, void))(v0 + 256))( *(void *)(v0 + 208),  *(void *)(v0 + 248),  *(void *)(v0 + 184));
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  uint64_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v5 = 67109120;
    *(_DWORD *)(v0 + 312) = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 316, v5 + 4, v5 + 8);
    _os_log_impl(&dword_0, v3, v4, "Calculating on grid reachability for off grid recipient: %{BOOL}d", v5, 8u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  unint64_t v6 = *(void (**)(uint64_t, uint64_t))(v0 + 264);
  unint64_t v7 = *(void *)(v0 + 208);
  uint64_t v8 = *(void *)(v0 + 184);

  v6(v7, v8);
  swift_beginAccess(v0 + 316, v0 + 120, 0LL, 0LL);
  uint64_t v9 = *(_BYTE *)(v0 + 316);
  uint64_t v10 = (void *)swift_task_alloc(dword_4DECC);
  *(void *)(v0 + 28_Block_object_dispose(va, 8) = v10;
  LiteMessageServiceSession *v10 = v0;
  v10[1] = LiteMessageServiceSession.calculateOnGridReachability(for:with:);
  return LiteMessageServiceSession.calculateOnGridReachability(for:with:isRecipientOffGrid:)( *(void *)(v0 + 152),  *(void *)(v0 + 160),  *(void *)(v0 + 168),  v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v1 = *(void *)(v0 + 224);

  swift_release(v1);
  id v2 = *(void *)(v0 + 304);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 200);
  swift_task_dealloc(*(void *)(v0 + 216));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v1 = *(void *)(v0 + 224);

  swift_release(v1);
  id v2 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 200);
  swift_task_dealloc(*(void *)(v0 + 216));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LiteMessageServiceSession.calculateOnGridReachability(for:with:)(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 288LL);
  *(void *)(*(void *)v2 + 296LL) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = v4[29];
    uint64_t v7 = v4[30];
    uint64_t v8 = LiteMessageServiceSession.calculateOnGridReachability(for:with:);
  }

  else
  {
    v4[38] = a1;
    uint64_t v6 = v4[29];
    uint64_t v7 = v4[30];
    uint64_t v8 = LiteMessageServiceSession.calculateOnGridReachability(for:with:);
  }

  return swift_task_switch(v8, v6, v7);
}

uint64_t LiteMessageServiceSession.isAvailableForLiteMessage(for:token:with:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[29] = a5;
  v6[30] = v5;
  v6[27] = a3;
  v6[28] = a4;
  v6[25] = a1;
  v6[26] = a2;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  v6[31] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[32] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[33] = swift_task_alloc(v9);
  v6[34] = swift_task_alloc(v9);
  v6[35] = swift_task_alloc(v9);
  v6[36] = swift_task_alloc(v9);
  uint64_t v10 = type metadata accessor for MainActor(0LL);
  v6[37] = static MainActor.shared.getter(v10);
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter(v10, &protocol witness table for MainActor);
  v6[38] = v11;
  v6[39] = v12;
  return swift_task_switch(LiteMessageServiceSession.isAvailableForLiteMessage(for:token:with:), v11, v12);
}

uint64_t LiteMessageServiceSession.isAvailableForLiteMessage(for:token:with:)()
{
  unint64_t v1 = *(void *)(v0 + 224);
  if (v1 >> 60 != 15)
  {
    outlined copy of Data._Representation(*(void *)(v0 + 216), v1);
    NSString v2 = String._bridgeToObjectiveC()();
    id v3 = (id)IMChatCanonicalIDSIDsForAddress(v2);

    if (v3
      && (Class isa = Data._bridgeToObjectiveC()().super.isa,
          uint64_t v5 = (void *)IDSCopyIDForTokenWithID(isa, v3),
          v3,
          isa,
          v5))
    {
      uint64_t v7 = *(void *)(v0 + 216);
      unint64_t v6 = *(void *)(v0 + 224);
      static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      unint64_t v9 = v8;

      id v10 = objc_allocWithZone(&OBJC_CLASS___IDSURI);
      NSString v11 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v9, v12, v13, v14, v15, v16, v17, v18);
      id v19 = [v10 initWithPrefixedURI:v11];

      outlined consume of Data?(v7, v6);
      if (v19) {
        goto LABEL_8;
      }
    }

    else
    {
      outlined consume of Data?(*(void *)(v0 + 216), *(void *)(v0 + 224));
    }
  }

  id v20 = *(LiteMessageServiceSession **)(v0 + 208);
  id v21 = objc_allocWithZone(&OBJC_CLASS___IDSURI);
  swift_bridgeObjectRetain(v20);
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20, v23, v24, v25, v26, v27, v28, v29);
  id v19 = [v21 initWithUnprefixedURI:v22];

  if (!v19)
  {
    uint64_t v68 = *(void *)(v0 + 200);
    uint64_t v67 = *(void *)(v0 + 208);
    swift_release(*(void *)(v0 + 296));
    unint64_t v69 = lazy protocol witness table accessor for type LiteMessageReachabilityError and conformance LiteMessageReachabilityError();
    swift_allocError(&type metadata for LiteMessageReachabilityError, v69, 0LL, 0LL);
    *(void *)uint64_t v70 = v68;
    *(void *)(v70 + _Block_object_dispose(va, 8) = v67;
    *(_BYTE *)(v70 + 16) = 0;
    swift_bridgeObjectRetain(v67);
    swift_willThrow(v71);
LABEL_18:
    uint64_t v73 = *(void *)(v0 + 280);
    uint64_t v75 = *(void *)(v0 + 264);
    uint64_t v74 = *(void *)(v0 + 272);
    swift_task_dealloc(*(void *)(v0 + 288));
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    return (*(uint64_t (**)(void))(v0 + 8))(0LL);
  }

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  unint64_t v1 = *v0;
  NSString v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 360) = v2;
  if (v2) {
    id v3 = LiteMessageServiceSession.isAvailableForLiteMessage(for:token:with:);
  }
  else {
    id v3 = LiteMessageServiceSession.isAvailableForLiteMessage(for:token:with:);
  }
  return swift_task_switch(v3, *(void *)(v1 + 304), *(void *)(v1 + 312));
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *v7;
  unsigned __int8 v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id *v13;
  id v14;
  id v15;
  SEL v16;
  id v17;
  id v18;
  unsigned __int8 v19;
  id v20;
  id v21;
  id v22;
  char *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_s *v30;
  os_log_type_t v31;
  void *v32;
  uint8_t *v33;
  void *v34;
  id v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  os_log_s *v43;
  os_log_type_t v44;
  void *v45;
  uint8_t *v46;
  void *v47;
  id v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t);
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  os_log_s *v74;
  os_log_type_t v75;
  void *v76;
  uint8_t *v77;
  void *v78;
  id v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  os_log_s *v86;
  os_log_type_t v87;
  void *v88;
  uint8_t *v89;
  void *v90;
  id v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  os_log_s *log;
  os_log_s *loga;
  os_log_s *logb;
  os_log_s *logc;
  void *v109;
  NSString v2 = *(void **)(v0 + 344);
  unint64_t v1 = *(void **)(v0 + 352);
  id v3 = *(void **)(v0 + 336);
  swift_release(*(void *)(v0 + 296));
  uint64_t v4 = *(void *)(v0 + 160);

  if ((v4 & 0xC000000000000001LL) == 0)
  {
    if (*(void *)(v4 + 16)) {
      goto LABEL_6;
    }
LABEL_16:
    id v50 = *(void **)(v0 + 320);
    unsigned __int8 v15 = *(id *)(v0 + 328);
    unsigned __int8 v52 = *(void *)(v0 + 200);
    os_log_type_t v51 = *(void *)(v0 + 208);
    swift_bridgeObjectRelease((LiteMessageServiceSession *)v4, v5, v6, v7, v8, v9, v10, v11);
    uint64_t v53 = lazy protocol witness table accessor for type LiteMessageReachabilityError and conformance LiteMessageReachabilityError();
    swift_allocError(&type metadata for LiteMessageReachabilityError, v53, 0LL, 0LL);
    *(void *)uint64_t v54 = v52;
    *(void *)(v54 + _Block_object_dispose(va, 8) = v51;
    *(_BYTE *)(v54 + 16) = 3;
    swift_bridgeObjectRetain(v51);
    swift_willThrow(v55);
    goto LABEL_17;
  }

  if (v4 < 0) {
    SEL v12 = v4;
  }
  else {
    SEL v12 = v4 & 0xFFFFFFFFFFFFFF8LL;
  }
  if (!__CocoaDictionary.count.getter(v12)) {
    goto LABEL_16;
  }
LABEL_6:
  id v13 = (id *)(v0 + 320);
  id v14 = *(id *)(v0 + 320);
  unsigned __int8 v15 = specialized Dictionary.subscript.getter(v14, v4);
  swift_bridgeObjectRelease((LiteMessageServiceSession *)v4, v16, v17, v18, v19, v20, v21, v22);

  if (!v15 || ![v15 hasUsableSenderKey])
  {
    id v38 = *(void **)(v0 + 320);
    id v25 = (void *)(v0 + 264);
    id v40 = *(void *)(v0 + 256);
    unsigned __int8 v39 = *(void *)(v0 + 264);
    id v41 = *(void *)(v0 + 248);
    id v42 = Logger.availability.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v39, v42, v41);
    id v43 = (os_log_s *)Logger.logObject.getter(v38);
    id v44 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = *(void **)(v0 + 320);
      id v46 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v47 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v46 = 138412290;
      *(void *)(v0 + 16_Block_object_dispose(va, 8) = v45;
      os_log_t loga = v43;
      id v48 = v45;
      id v25 = (void *)(v0 + 264);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v46 + 4, v46 + 12);
      *uint64_t v47 = v45;

      _os_log_impl(&dword_0, loga, v44, "%@ does not have usable sender keys", v46, 0xCu);
      uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v47, 1LL, v49);
      swift_slowDealloc(v47, -1LL, -1LL);
      swift_slowDealloc(v46, -1LL, -1LL);

      id v13 = (id *)(v0 + 328);
    }

    else
    {
      uint64_t v62 = *(void **)(v0 + 320);
      uint64_t v61 = *(void **)(v0 + 328);
    }

    uint64_t v63 = 0LL;
    goto LABEL_20;
  }

  SEL v23 = (char *)[v15 status];
  if (!v23)
  {
    unint64_t v69 = *(void **)(v0 + 320);
    id v109 = (void *)(v0 + 280);
    uint64_t v70 = *(void *)(v0 + 280);
    uint64_t v71 = *(void *)(v0 + 248);
    unint64_t v72 = *(void *)(v0 + 256);
    uint64_t v73 = Logger.availability.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 16))(v70, v73, v71);
    uint64_t v74 = (os_log_s *)Logger.logObject.getter(v69);
    uint64_t v75 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v74, v75))
    {
      os_log_type_t v76 = *(void **)(v0 + 320);
      uint64_t v77 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v78 = (void *)swift_slowAlloc(8LL, -1LL);
      os_log_t logb = v74;
      *(_DWORD *)uint64_t v77 = 138412290;
      *(void *)(v0 + 184) = v76;
      uint64_t v79 = v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v77 + 4, v77 + 12);
      *id v78 = v76;

      _os_log_impl(&dword_0, logb, v75, "Unknown status for: %@", v77, 0xCu);
      SEL v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v78, 1LL, v80);
      swift_slowDealloc(v78, -1LL, -1LL);
      swift_slowDealloc(v77, -1LL, -1LL);

      id v13 = (id *)(v0 + 328);
    }

    else
    {
      NSString v102 = *(void **)(v0 + 320);
      id v101 = *(void **)(v0 + 328);
    }

    goto LABEL_31;
  }

  if (v23 == (_BYTE *)&dword_0 + 2)
  {
    id v81 = *(void **)(v0 + 320);
    id v109 = (void *)(v0 + 272);
    id v82 = *(void *)(v0 + 272);
    unsigned __int8 v83 = *(void *)(v0 + 248);
    id v84 = *(void *)(v0 + 256);
    id v85 = Logger.availability.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 16))(v82, v85, v83);
    id v86 = (os_log_s *)Logger.logObject.getter(v81);
    uint64_t v87 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v86, v87))
    {
      Class v88 = *(void **)(v0 + 320);
      SEL v89 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v90 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)SEL v89 = 138412290;
      *(void *)(v0 + 176) = v88;
      logc = v86;
      id v91 = v88;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v89 + 4, v89 + 12);
      *id v90 = v88;

      _os_log_impl(&dword_0, logc, v87, "Invalid status for: %@", v89, 0xCu);
      unsigned __int8 v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v90, 1LL, v92);
      swift_slowDealloc(v90, -1LL, -1LL);
      swift_slowDealloc(v89, -1LL, -1LL);

      id v13 = (id *)(v0 + 328);
    }

    else
    {
      id v104 = *(void **)(v0 + 320);
      SEL v103 = *(void **)(v0 + 328);
    }

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v1 = *(void **)(v0 + 352);
  id v3 = *(void **)(v0 + 336);
  NSString v2 = *(void **)(v0 + 344);
  uint64_t v5 = *(void **)(v0 + 320);
  uint64_t v4 = *(void **)(v0 + 328);
  unint64_t v6 = swift_release(*(void *)(v0 + 296));
  swift_willThrow(v6);

  uint64_t v7 = *(void *)(v0 + 280);
  unint64_t v9 = *(void *)(v0 + 264);
  uint64_t v8 = *(void *)(v0 + 272);
  swift_task_dealloc(*(void *)(v0 + 288));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

LABEL_8:
  *(void *)(v0 + 320) = v19;
  id v30 = [*(id *)(v0 + 232) context];
  id v31 = [v30 senderLastAddressedHandle];

  if (!v31) {
    goto LABEL_13;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  id v33 = v32;

  id v34 = objc_allocWithZone(&OBJC_CLASS___IDSURI);
  NSString v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v33, v36, v37, v38, v39, v40, v41, v42);
  id v43 = [v34 initWithUnprefixedURI:v35];
  *(void *)(v0 + 32_Block_object_dispose(va, 8) = v43;

  if (!v43)
  {
LABEL_13:
    uint64_t v58 = *(void **)(v0 + 232);
    swift_release(*(void *)(v0 + 296));
    id v59 = [v58 context];
    id v60 = [v59 senderLastAddressedHandle];

    if (v60)
    {
      uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
      uint64_t v63 = v62;

      unint64_t v64 = lazy protocol witness table accessor for type LiteMessageReachabilityError and conformance LiteMessageReachabilityError();
      uint64_t v65 = swift_allocError(&type metadata for LiteMessageReachabilityError, v64, 0LL, 0LL);
      *(void *)uint64_t v66 = v61;
      *(void *)(v66 + _Block_object_dispose(va, 8) = v63;
    }

    else
    {
      unint64_t v72 = lazy protocol witness table accessor for type LiteMessageReachabilityError and conformance LiteMessageReachabilityError();
      uint64_t v65 = swift_allocError(&type metadata for LiteMessageReachabilityError, v72, 0LL, 0LL);
      *(void *)uint64_t v66 = 0LL;
      *(void *)(v66 + _Block_object_dispose(va, 8) = 0LL;
    }

    *(_BYTE *)(v66 + 16) = 1;
    swift_willThrow(v65);

    goto LABEL_18;
  }

  id v44 = LiteMessageServiceSession.offGridMessenger.getter();
  *(void *)(v0 + 336) = v44;
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t inited = swift_initStackObject(v45, v0 + 120);
  *(_OWORD *)(inited + 16) = xmmword_3BFF0;
  *(void *)(inited + 32) = v19;
  uint64_t v99 = inited;
  specialized Array._endMutation()(inited);
  if ((unint64_t)v99 >> 62)
  {
    if (v99 < 0) {
      uint64_t v77 = v99;
    }
    else {
      uint64_t v77 = v99 & 0xFFFFFFFFFFFFFF8LL;
    }
    id v78 = v19;
    swift_bridgeObjectRetain(v99);
    uint64_t v79 = _CocoaArrayWrapper.endIndex.getter(v77);
    swift_bridgeObjectRelease((LiteMessageServiceSession *)v99, v80, v81, v82, v83, v84, v85, v86);
    if (v79) {
      goto LABEL_12;
    }
LABEL_23:
    id v57 = (LiteMessageServiceSession *)&_swiftEmptySetSingleton;
    goto LABEL_24;
  }

  uint64_t v47 = *(void *)((char *)&dword_10 + (v99 & 0xFFFFFFFFFFFFF8LL));
  id v48 = v19;
  if (!v47) {
    goto LABEL_23;
  }
LABEL_12:
  specialized Set.init(_nonEmptyArrayLiteral:)(v99);
  id v57 = v56;
LABEL_24:
  swift_bridgeObjectRelease((LiteMessageServiceSession *)v99, v49, v50, v51, v52, v53, v54, v55);
  uint64_t v87 = v0 + 16;
  type metadata accessor for IMDHandle(0LL, &lazy cache variable for type metadata for IDSURI, &OBJC_CLASS___IDSURI_ptr);
  lazy protocol witness table accessor for type IDSURI and conformance NSObject();
  Class v88 = Set._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 344) = v88;
  swift_bridgeObjectRelease(v57, v89, v90, v91, v92, v93, v94, v95);
  id v96 = [objc_allocWithZone(IDSOffGridDeliveryQueryOptions) init];
  *(void *)(v0 + 352) = v96;
  *(void *)(v0 + 56) = v0 + 160;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = LiteMessageServiceSession.isAvailableForLiteMessage(for:token:with:);
  uint64_t v97 = swift_continuation_init(v0 + 16, 1LL);
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  uint64_t v98 = (void *)(v0 + 80);
  v98[1] = 0x40000000LL;
  v98[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSDictionary, @unowned NSError?) -> () with result type [IDSURI : IDSOffGridDeliveryQueryResult];
  v98[3] = &block_descriptor_4;
  v98[4] = v97;
  [v44 resultsForDestinationURIs:v88 senderURI:v43 options:v96 completion:v98];
  return swift_continuation_await(v87);
}

    *(void *)&v263 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMMessageSummaryInfoContentType);
    *((void *)&v263 + 1) = v28;
    AnyHashable.init<A>(_:)(&v263, &type metadata for String, &protocol witness table for String);
    *((void *)&v264 + 1) = &type metadata for Int;
    *(void *)&v263 = v27;
    outlined init with take of Any(&v263, v262);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v261 = &_swiftEmptyDictionarySingleton;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v262, (uint64_t)v265, isUniquelyReferenced_nonNull_native);
    id v30 = v261;
    v267 = v261;
    swift_bridgeObjectRelease((LiteMessageServiceSession *)0x8000000000000000LL, v31, v32, v33, v34, v35, v36, v37);
    outlined destroy of AnyHashable((uint64_t)v265);
    id v38 = [v1 body];
    if (v38)
    {
      unsigned __int8 v39 = v38;
      id v40 = [v38 string];

      id v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
      id v43 = v42;

      *(void *)&v263 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMMessageSummaryInfoSummary);
      *((void *)&v263 + 1) = v44;
      AnyHashable.init<A>(_:)(&v263, &type metadata for String, &protocol witness table for String);
      *((void *)&v264 + 1) = &type metadata for String;
      *(void *)&v263 = v41;
      *((void *)&v263 + 1) = v43;
      outlined init with take of Any(&v263, v262);
      uint64_t v45 = swift_isUniquelyReferenced_nonNull_native(v30);
      v261 = v30;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v262, (uint64_t)v265, v45);
      v267 = v261;
      swift_bridgeObjectRelease((LiteMessageServiceSession *)0x8000000000000000LL, v46, v47, v48, v49, v50, v51, v52);
      outlined destroy of AnyHashable((uint64_t)v265);
    }

    return v267;
  }

  uint64_t v8 = v7;
  unint64_t v9 = [v7 data];
  if (!v9)
  {

    goto LABEL_6;
  }

  id v10 = v9;
  v258 = v3;
  v259 = v2;
  v260 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
  SEL v12 = v11;

  *(void *)&v263 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMMessageSummaryInfoPluginBundleID);
  *((void *)&v263 + 1) = v13;
  AnyHashable.init<A>(_:)(&v263, &type metadata for String, &protocol witness table for String);
  id v14 = [v8 pluginBundleID];
  if (v14)
  {
    unsigned __int8 v15 = v14;
    id v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    id v18 = v17;

    *((void *)&v264 + 1) = &type metadata for String;
    *(void *)&v263 = v16;
    *((void *)&v263 + 1) = v18;
    outlined init with take of Any(&v263, v262);
    id v19 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v261 = &_swiftEmptyDictionarySingleton;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v262, (uint64_t)v265, v19);
    v267 = v261;
    swift_bridgeObjectRelease((LiteMessageServiceSession *)0x8000000000000000LL, v20, v21, v22, v23, v24, v25, v26);
    outlined destroy of AnyHashable((uint64_t)v265);
  }

  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v265, &v263);
    outlined destroy of AnyHashable((uint64_t)v265);
    outlined destroy of TaskPriority?((uint64_t)&v263, &demangling cache variable for type metadata for Any?);
  }

  *(void *)&v263 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMMessageSummaryInfoContentType);
  *((void *)&v263 + 1) = v90;
  AnyHashable.init<A>(_:)(&v263, &type metadata for String, &protocol witness table for String);
  id v91 = [v8 pluginBundleID];
  if (!v91)
  {
    *((void *)&v264 + 1) = &type metadata for Int;
    *(void *)&v263 = 0LL;
    uint64_t v99 = v260;
    goto LABEL_29;
  }

  unsigned __int8 v92 = v91;
  id v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v91);
  id v95 = v94;

  uint64_t v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMBalloonPluginIdentifierRichLinks);
  uint64_t v98 = v96;
  uint64_t v99 = v260;
  if (v93 == v97 && v95 == v96)
  {
    swift_bridgeObjectRelease_n(v95, 2LL);
  }

  else
  {
    uint64_t v100 = _stringCompareWithSmolCheck(_:_:expecting:)(v93, v95, v97, v96, 0LL);
    swift_bridgeObjectRelease(v98, v101, v102, v103, v104, v105, v106, v107);
    swift_bridgeObjectRelease(v95, v108, v109, v110, v111, v112, v113, v114);
    if ((v100 & 1) == 0)
    {
      uint64_t v115 = 9LL;
      goto LABEL_28;
    }
  }

  uint64_t v115 = 1LL;
LABEL_28:
  *((void *)&v264 + 1) = &type metadata for Int;
  *(void *)&v263 = v115;
LABEL_29:
  outlined init with take of Any(&v263, v262);
  uint64_t v116 = v267;
  id v117 = swift_isUniquelyReferenced_nonNull_native(v267);
  v261 = v116;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v262, (uint64_t)v265, v117);
  id v118 = v261;
  v267 = v261;
  swift_bridgeObjectRelease((LiteMessageServiceSession *)0x8000000000000000LL, v119, v120, v121, v122, v123, v124, v125);
  outlined destroy of AnyHashable((uint64_t)v265);
  id v126 = IMMessageSummaryInfoSummary;
  *(void *)&v263 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMMessageSummaryInfoSummary);
  *((void *)&v263 + 1) = v127;
  AnyHashable.init<A>(_:)(&v263, &type metadata for String, &protocol witness table for String);
  unsigned __int8 v128 = specialized IMMessageItem.summary(from:)(v8);
  if (v129)
  {
    *((void *)&v264 + 1) = &type metadata for String;
    *(void *)&v263 = v128;
    *((void *)&v263 + 1) = v129;
    outlined init with take of Any(&v263, v262);
    os_log_type_t v130 = swift_isUniquelyReferenced_nonNull_native(v118);
    v261 = v118;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v262, (uint64_t)v265, v130);
    v267 = v261;
    swift_bridgeObjectRelease( (LiteMessageServiceSession *)0x8000000000000000LL,  v131,  v132,  v133,  v134,  v135,  v136,  v137);
    uint64_t v138 = outlined destroy of AnyHashable((uint64_t)v265);
  }

  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v265, &v263);
    outlined destroy of AnyHashable((uint64_t)v265);
    uint64_t v138 = outlined destroy of TaskPriority?((uint64_t)&v263, &demangling cache variable for type metadata for Any?);
  }

  unint64_t result = (id)IMExtensionPayloadUnarchivingClasses(v138);
  if (result)
  {
    id v140 = result;
    id v141 = (LiteMessageServiceSession *)static Set._unconditionallyBridgeFromObjectiveC(_:)( result,  &type metadata for AnyHashable,  &protocol witness table for AnyHashable);

    os_log_type_t v142 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v141);
    swift_bridgeObjectRelease(v141, v143, v144, v145, v146, v147, v148, v149);
    uint64_t v150 = (LiteMessageServiceSession *)specialized _arrayConditionalCast<A, B>(_:)((uint64_t)v142);
    swift_release(v142);
    uint64_t v151 = objc_allocWithZone(&OBJC_CLASS___NSKeyedUnarchiver);
    outlined copy of Data._Representation(v99, v12);
    uint64_t v152 = specialized @nonobjc NSKeyedUnarchiver.init(forReadingFrom:)();
    outlined consume of Data._Representation(v99, v12);
    if (v150)
    {
      id v153 = (LiteMessageServiceSession *)specialized _arrayForceCast<A, B>(_:)((uint64_t)v150);
      swift_bridgeObjectRelease(v150, v154, v155, v156, v157, v158, v159, v160);
    }

    else
    {
      id v153 = 0LL;
    }

    uint64_t v161 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSKeyedArchiveRootObjectKey);
    uint64_t v163 = v162;
    v257 = v152;
    NSCoder.decodeObject(of:forKey:)(v265, v153, v161, v162);
    swift_bridgeObjectRelease(v163, v164, v165, v166, v167, v168, v169, v170);
    swift_bridgeObjectRelease(v153, v171, v172, v173, v174, v175, v176, v177);
    if (v266)
    {
      uint64_t v178 = type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for NSDictionary,  &OBJC_CLASS___NSDictionary_ptr);
      if ((swift_dynamicCast(&v263, v265, (char *)&type metadata for Any + 8, v178, 6LL) & 1) != 0)
      {
        unint64_t v179 = (void *)v263;
        v180 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMExtensionPayloadAppNameKey);
        v182 = v181;
        *(void *)&v263 = v180;
        *((void *)&v263 + 1) = v181;
        v183 = swift_bridgeObjectRetain(v181);
        v184 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v263, &type metadata for String, v183);
        v185 = objc_msgSend(v179, "__swift_objectForKeyedSubscript:", v184);
        swift_unknownObjectRelease(v184);
        if (v185)
        {
          _bridgeAnyObjectToAny(_:)(&v263, v185);
          swift_unknownObjectRelease(v185);
        }

        else
        {
          v263 = 0u;
          v264 = 0u;
        }

        outlined init with take of Any?( (uint64_t)&v263,  (uint64_t)v265,  &demangling cache variable for type metadata for Any?);
        if (v266)
        {
          if ((swift_dynamicCast(v262, v265, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
          {
            SEL v200 = v262[0];
            swift_bridgeObjectRelease(v182, v193, v194, v195, v196, v197, v198, v199);
            id v201 = type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IMChat,  &OBJC_CLASS___IMChat_ptr);
            ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v201);
            unsigned __int8 v203 = (NSBundle *) [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
            v268._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
            v268._object = (void *)0x800000000003DD20LL;
            v204.value._object = (void *)0x800000000003DD00LL;
            v205._uint64_t countAndFlagsBits = 0x73654D2040252031LL;
            v205._object = (void *)0xEC00000065676173LL;
            v204.value._uint64_t countAndFlagsBits = 0xD000000000000011LL;
            v206._uint64_t countAndFlagsBits = 0LL;
            v206._object = (void *)0xE000000000000000LL;
            uint64_t v207 = NSLocalizedString(_:tableName:bundle:value:comment:)(v205, v204, v203, v206, v268);
            v256 = v12;

            uint64_t v208 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
            os_log_type_t v209 = swift_allocObject(v208, 72LL, 7LL);
            *(_OWORD *)(v209 + 16) = xmmword_3BA10;
            *(void *)(v209 + 56) = &type metadata for String;
            *(void *)(v209 + 64) = lazy protocol witness table accessor for type String and conformance String();
            *(_OWORD *)(v209 + 32) = v200;
            v210 = swift_bridgeObjectRetain(*((void *)&v200 + 1));
            v211 = static String.localizedStringWithFormat(_:_:)(v207._countAndFlagsBits, v207._object, v209, v210);
            v213 = v212;
            swift_bridgeObjectRelease((LiteMessageServiceSession *)v209, v212, v214, v215, v216, v217, v218, v219);
            swift_bridgeObjectRelease( (LiteMessageServiceSession *)v207._object,  v220,  v221,  v222,  v223,  v224,  v225,  v226);
            *(void *)&v263 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMMessageSummaryInfoPluginDisplayName);
            *((void *)&v263 + 1) = v227;
            AnyHashable.init<A>(_:)(&v263, &type metadata for String, &protocol witness table for String);
            *((void *)&v264 + 1) = &type metadata for String;
            v263 = v200;
            outlined init with take of Any(&v263, v262);
            v228 = v267;
            v229 = swift_isUniquelyReferenced_nonNull_native(v267);
            v261 = v228;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v262, (uint64_t)v265, v229);
            v230 = v261;
            swift_bridgeObjectRelease( (LiteMessageServiceSession *)0x8000000000000000LL,  v231,  v232,  v233,  v234,  v235,  v236,  v237);
            outlined destroy of AnyHashable((uint64_t)v265);
            *(void *)&v263 = static String._unconditionallyBridgeFromObjectiveC(_:)(v126);
            *((void *)&v263 + 1) = v238;
            AnyHashable.init<A>(_:)(&v263, &type metadata for String, &protocol witness table for String);
            *((void *)&v264 + 1) = &type metadata for String;
            *(void *)&v263 = v211;
            *((void *)&v263 + 1) = v213;
            outlined init with take of Any(&v263, v262);
            v239 = swift_isUniquelyReferenced_nonNull_native(v230);
            v261 = v230;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v262, (uint64_t)v265, v239);
            v267 = v261;
            swift_bridgeObjectRelease( (LiteMessageServiceSession *)0x8000000000000000LL,  v240,  v241,  v242,  v243,  v244,  v245,  v246);
            outlined destroy of AnyHashable((uint64_t)v265);

            outlined consume of Data._Representation(v260, v256);
            return v267;
          }

          swift_bridgeObjectRelease(v182, v193, v194, v195, v196, v197, v198, v199);
        }

        else
        {
          swift_bridgeObjectRelease(v182, v186, v187, v188, v189, v190, v191, v192);

          outlined destroy of TaskPriority?((uint64_t)v265, &demangling cache variable for type metadata for Any?);
        }
      }

      uint64_t v99 = v260;
    }

    else
    {
      outlined destroy of TaskPriority?((uint64_t)v265, &demangling cache variable for type metadata for Any?);
    }

    v247 = Logger.liteSession.unsafeMutableAddressor();
    v249 = v258;
    v248 = v259;
    v250 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v258 + 16))(v6, v247, v259);
    v251 = (os_log_s *)Logger.logObject.getter(v250);
    v252 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v251, v252))
    {
      v253 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v253 = 0;
      _os_log_impl(&dword_0, v251, v252, "Failed to decode plugin payload dictionary.", v253, 2u);
      swift_slowDealloc(v253, -1LL, -1LL);

      outlined consume of Data._Representation(v99, v12);
    }

    else
    {

      outlined consume of Data._Representation(v99, v12);
    }

    (*(void (**)(char *, uint64_t))(v249 + 8))(v6, v248);
    return v267;
  }

  __break(1u);
  return result;
}

  *(void *)a1 = a4;
  *(void *)(a1 + _Block_object_dispose(va, 8) = a5;
  *(_BYTE *)(a1 + 16) = a6;
  *(void *)(a1 + 24) = v10;
  return v10;
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool) -> () with result type Bool( uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  **(_BYTE **)(*(void *)(v2 + 64) + 4Hasher.init(_seed:)(v3, 0LL) = a2;
  return swift_continuation_resume(v2);
}

uint64_t LiteMessageServiceSession.calculateOnGridReachability(for:with:isRecipientOffGrid:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_BYTE *)(v5 + 48_Block_object_dispose(va, 8) = a4;
  *(void *)(v5 + 264) = a3;
  *(void *)(v5 + 272) = v4;
  *(void *)(v5 + 24_Block_object_dispose(va, 8) = a1;
  *(void *)(v5 + 256) = a2;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  *(void *)(v5 + 280) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v5 + 28_Block_object_dispose(va, 8) = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v5 + 296) = swift_task_alloc(v8);
  *(void *)(v5 + 304) = swift_task_alloc(v8);
  *(void *)(v5 + 312) = swift_task_alloc(v8);
  *(void *)(v5 + 320) = swift_task_alloc(v8);
  *(void *)(v5 + 32_Block_object_dispose(va, 8) = swift_task_alloc(v8);
  *(void *)(v5 + 336) = swift_task_alloc(v8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  *(void *)(v5 + 344) = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Date(0LL);
  *(void *)(v5 + 352) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v5 + 360) = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v5 + 36_Block_object_dispose(va, 8) = swift_task_alloc(v12);
  *(void *)(v5 + 376) = swift_task_alloc(v12);
  uint64_t v13 = type metadata accessor for MainActor(0LL);
  *(void *)(v5 + 384) = static MainActor.shared.getter(v13);
  uint64_t v14 = dispatch thunk of Actor.unownedExecutor.getter(v13, &protocol witness table for MainActor);
  *(void *)(v5 + 392) = v14;
  *(void *)(v5 + 400) = v15;
  return swift_task_switch( LiteMessageServiceSession.calculateOnGridReachability(for:with:isRecipientOffGrid:),  v14,  v15);
}

void LiteMessageServiceSession.calculateOnGridReachability(for:with:isRecipientOffGrid:)()
{
  id v1 = [*(id *)(v0 + 264) context];
  id v2 = [v1 chatIdentifier];

  if (!v2)
  {
    uint64_t v5 = *(void *)(v0 + 248);
    uint64_t v4 = *(void *)(v0 + 256);
    swift_release(*(void *)(v0 + 384));
    unint64_t v6 = lazy protocol witness table accessor for type LiteMessageReachabilityError and conformance LiteMessageReachabilityError();
    swift_allocError(&type metadata for LiteMessageReachabilityError, v6, 0LL, 0LL);
    *(void *)uint64_t v7 = v5;
    *(void *)(v7 + _Block_object_dispose(va, 8) = v4;
    *(_BYTE *)(v7 + 16) = 4;
    swift_bridgeObjectRetain(v4);
    swift_willThrow(v8);
    uint64_t v9 = *(void *)(v0 + 368);
    uint64_t v11 = *(void *)(v0 + 336);
    uint64_t v10 = *(void *)(v0 + 344);
    uint64_t v13 = *(void *)(v0 + 320);
    uint64_t v12 = *(void *)(v0 + 328);
    uint64_t v15 = *(void *)(v0 + 304);
    uint64_t v14 = *(void *)(v0 + 312);
    uint64_t v16 = *(void *)(v0 + 296);
    swift_task_dealloc(*(void *)(v0 + 376));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    (*(void (**)(void))(v0 + 8))();
    return;
  }

  id v3 = [*(id *)(v0 + 272) chatForChatIdentifier:v2 style:45];
  *(void *)(v0 + 40_Block_object_dispose(va, 8) = v3;

  if (!v3)
  {
    uint64_t v18 = *(void *)(v0 + 288);
    uint64_t v17 = *(void *)(v0 + 296);
    uint64_t v19 = *(void *)(v0 + 280);
    swift_release(*(void *)(v0 + 384));
    uint64_t v20 = Logger.availability.unsafeMutableAddressor();
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v17, v20, v19);
    NSString v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      id v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v24 = 0;
      _os_log_impl(&dword_0, v22, v23, "Lite chat not found", v24, 2u);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    uint64_t v26 = *(void *)(v0 + 288);
    uint64_t v25 = *(void *)(v0 + 296);
    uint64_t v27 = *(void *)(v0 + 280);
    uint64_t v29 = *(void *)(v0 + 248);
    id v28 = *(LiteMessageServiceSession **)(v0 + 256);

    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    id v30 = LiteMessageServiceSession.result(for:reachable:)(v29, v28, 0);
    goto LABEL_26;
  }

  if (*(_BYTE *)(v0 + 488) == 1)
  {
    [v3 setWasDowngradedToLiteMessage:0];
  }

  else if (([v3 wasDowngradedToLiteMessage] & 1) == 0)
  {
    uint64_t v60 = *(void *)(v0 + 248);
    id v59 = *(LiteMessageServiceSession **)(v0 + 256);
    swift_release(*(void *)(v0 + 384));
    uint64_t v57 = v60;
    uint64_t v58 = v59;
LABEL_20:
    id v30 = LiteMessageServiceSession.result(for:reachable:)(v57, v58, 0);
LABEL_25:

    goto LABEL_26;
  }

  id v31 = [(id)objc_opt_self(IMDMessageStore) sharedInstance];
  id v32 = objc_msgSend(v31, "lastMessageForChatWithRowID:", objc_msgSend(v3, "rowID"));
  *(void *)(v0 + 416) = v32;

  if (!v32)
  {
    uint64_t v44 = *(void *)(v0 + 304);
    uint64_t v45 = *(void *)(v0 + 280);
    uint64_t v46 = *(void *)(v0 + 288);
    swift_release(*(void *)(v0 + 384));
    uint64_t v47 = Logger.availability.unsafeMutableAddressor();
    uint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v44, v47, v45);
    uint64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
    os_log_type_t v50 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v49, v50))
    {
      os_log_type_t v51 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v51 = 0;
      _os_log_impl(&dword_0, v49, v50, "No Lite Message found in chat", v51, 2u);
      swift_slowDealloc(v51, -1LL, -1LL);
    }

    uint64_t v52 = *(void *)(v0 + 304);
    uint64_t v53 = *(void *)(v0 + 280);
    uint64_t v54 = *(void *)(v0 + 288);
    uint64_t v56 = *(void *)(v0 + 248);
    id v55 = *(LiteMessageServiceSession **)(v0 + 256);

    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v52, v53);
    uint64_t v57 = v56;
    uint64_t v58 = v55;
    goto LABEL_20;
  }

  id v33 = [v32 time];
  if (!v33)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 360) + 56LL))( *(void *)(v0 + 344),  1LL,  1LL,  *(void *)(v0 + 352));
    goto LABEL_22;
  }

  id v34 = v33;
  uint64_t v36 = *(void *)(v0 + 360);
  uint64_t v35 = *(void *)(v0 + 368);
  uint64_t v38 = *(void *)(v0 + 344);
  uint64_t v37 = *(void *)(v0 + 352);
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v33);

  unsigned __int8 v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32);
  v39(v38, v35, v37);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v38, 0LL, 1LL, v37);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v38, 1LL, v37) == 1)
  {
LABEL_22:
    uint64_t v61 = *(void *)(v0 + 344);
    uint64_t v62 = *(void *)(v0 + 312);
    uint64_t v63 = *(void *)(v0 + 280);
    uint64_t v64 = *(void *)(v0 + 288);
    swift_release(*(void *)(v0 + 384));
    outlined destroy of TaskPriority?(v61, &demangling cache variable for type metadata for Date?);
    uint64_t v65 = Logger.availability.unsafeMutableAddressor();
    uint64_t v66 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v64 + 16))(v62, v65, v63);
    uint64_t v67 = (os_log_s *)Logger.logObject.getter(v66);
    os_log_type_t v68 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v67, v68))
    {
      unint64_t v69 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v69 = 0;
      _os_log_impl(&dword_0, v67, v68, "No time found for last lite message", v69, 2u);
      swift_slowDealloc(v69, -1LL, -1LL);
    }

    uint64_t v70 = *(void *)(v0 + 312);
    uint64_t v71 = *(void *)(v0 + 280);
    uint64_t v72 = *(void *)(v0 + 288);
    uint64_t v74 = *(void *)(v0 + 248);
    uint64_t v73 = *(LiteMessageServiceSession **)(v0 + 256);

    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v70, v71);
    id v30 = LiteMessageServiceSession.result(for:reachable:)(v74, v73, 0);

    goto LABEL_25;
  }

  int v40 = *(unsigned __int8 *)(v0 + 488);
  v39(*(void *)(v0 + 376), *(void *)(v0 + 344), *(void *)(v0 + 352));
  id v41 = [(id)objc_opt_self(IDSServerBag) sharedInstanceForBagType:1];
  if (v40 != 1)
  {
    NSString v83 = String._bridgeToObjectiveC()();
    id v84 = [v41 objectForKey:v83];

    if (v84)
    {
      _bridgeAnyObjectToAny(_:)((void *)(v0 + 48), v84);
      swift_unknownObjectRelease(v84);
    }

    else
    {
      *(_OWORD *)(v0 + 4_Block_object_dispose(va, 8) = 0u;
      *(_OWORD *)(v0 + 64) = 0u;
    }

    outlined init with take of Any?(v0 + 48, v0 + 16);
    if (*(void *)(v0 + 40))
    {
      id v85 = (id *)(v0 + 192);
      uint64_t v88 = type metadata accessor for IMDHandle( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
    }

    else
    {

      uint64_t v87 = outlined destroy of TaskPriority?(v0 + 16, &demangling cache variable for type metadata for Any?);
    }

    *(double *)&uint64_t v92 = 1800.0;
    goto LABEL_42;
  }

  NSString v42 = String._bridgeToObjectiveC()();
  id v43 = [v41 objectForKey:v42];

  if (v43)
  {
    _bridgeAnyObjectToAny(_:)((void *)(v0 + 80), v43);
    swift_unknownObjectRelease(v43);
  }

  else
  {
    *(_OWORD *)(v0 + 80) = 0u;
    *(_OWORD *)(v0 + 96) = 0u;
  }

  outlined init with take of Any?(v0 + 80, v0 + 112);
  if (!*(void *)(v0 + 136))
  {

    uint64_t v87 = outlined destroy of TaskPriority?(v0 + 112, &demangling cache variable for type metadata for Any?);
    goto LABEL_38;
  }

  id v85 = (id *)(v0 + 200);
  uint64_t v86 = type metadata accessor for IMDHandle( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
  if ((swift_dynamicCast(v0 + 200, v0 + 112, (char *)&type metadata for Any + 8, v86, 6LL) & 1) != 0)
  {
LABEL_36:
    id v89 = *v85;
    [*v85 doubleValue];
    double v91 = v90;

    goto LABEL_43;
  }

LABEL_38:
  *(double *)&uint64_t v92 = 86400.0;
LABEL_42:
  double v91 = *(double *)&v92;
LABEL_43:
  double v93 = fabs(Date.timeIntervalSinceNow.getter(v87));
  if (v93 >= v91)
  {
    uint64_t v97 = *(void *)(v0 + 320);
    uint64_t v98 = *(void *)(v0 + 280);
    uint64_t v99 = *(void *)(v0 + 288);
    swift_release(*(void *)(v0 + 384));
    uint64_t v100 = Logger.availability.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v99 + 16))(v97, v100, v98);
    id v101 = v3;
    id v102 = v32;
    id v103 = v101;
    id v104 = v102;
    id v105 = (os_log_s *)Logger.logObject.getter(v104);
    os_log_type_t v106 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v105, v106))
    {
      log = v105;
      id v164 = v104;
      uint64_t v107 = swift_slowAlloc(32LL, -1LL);
      unsigned int v158 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v160 = swift_slowAlloc(32LL, -1LL);
      v166[0] = v160;
      *(_DWORD *)uint64_t v107 = 134218498;
      *(double *)(v0 + 20_Block_object_dispose(va, 8) = v91;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v107 + 4, v107 + 12);
      *(_WORD *)(v107 + 12) = 2080;
      id v108 = [v103 chatIdentifier];
      if (!v108)
      {

        __break(1u);
        goto LABEL_59;
      }

      id v109 = v108;
      uint64_t v155 = *(void *)(v0 + 288);
      uint64_t v156 = *(void *)(v0 + 280);
      uint64_t v157 = *(void *)(v0 + 320);
      uint64_t v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v108);
      id v112 = v111;

      *(void *)(v0 + 216) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( v110,  (unint64_t)v112,  v166);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v107 + 14, v107 + 22);
      swift_bridgeObjectRelease(v112, v113, v114, v115, v116, v117, v118, v119);

      *(_WORD *)(v107 + 22) = 2112;
      *(void *)(v0 + 224) = v164;
      id v120 = v164;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v107 + 24, v107 + 32);
      *unsigned int v158 = v32;

      _os_log_impl(&dword_0, log, v106, "Found last iMessage Lite > %f for %s for %@ ", (uint8_t *)v107, 0x20u);
      uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v158, 1LL, v121);
      swift_slowDealloc(v158, -1LL, -1LL);
      swift_arrayDestroy(v160, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v160, -1LL, -1LL);
      uint64_t v122 = v107;
      id v104 = v164;
      swift_slowDealloc(v122, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v155 + 8))(v157, v156);
    }

    else
    {
      uint64_t v142 = *(void *)(v0 + 320);
      uint64_t v143 = *(void *)(v0 + 280);
      uint64_t v144 = *(void *)(v0 + 288);

      (*(void (**)(uint64_t, uint64_t))(v144 + 8))(v142, v143);
    }

    uint64_t v145 = *(void *)(v0 + 376);
    uint64_t v146 = *(void *)(v0 + 352);
    uint64_t v147 = *(void *)(v0 + 360);
    id v30 = LiteMessageServiceSession.result(for:reachable:)( *(void *)(v0 + 248),  *(LiteMessageServiceSession **)(v0 + 256),  0);

    (*(void (**)(uint64_t, uint64_t))(v147 + 8))(v145, v146);
LABEL_26:
    uint64_t v75 = *(void *)(v0 + 368);
    uint64_t v77 = *(void *)(v0 + 336);
    uint64_t v76 = *(void *)(v0 + 344);
    uint64_t v79 = *(void *)(v0 + 320);
    uint64_t v78 = *(void *)(v0 + 328);
    uint64_t v81 = *(void *)(v0 + 304);
    uint64_t v80 = *(void *)(v0 + 312);
    uint64_t v82 = *(void *)(v0 + 296);
    swift_task_dealloc(*(void *)(v0 + 376));
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    (*(void (**)(id))(v0 + 8))(v30);
    return;
  }

  if ((specialized LiteMessageServiceSession.isLastMessageLite(for:with:)(v3, v93) & 1) == 0)
  {
    uint64_t v123 = *(void *)(v0 + 328);
    uint64_t v124 = *(void *)(v0 + 280);
    uint64_t v125 = *(void *)(v0 + 288);
    swift_release(*(void *)(v0 + 384));
    [v3 setWasDowngradedToLiteMessage:0];
    uint64_t v126 = Logger.availability.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v125 + 16))(v123, v126, v124);
    id v103 = v3;
    uint64_t v127 = (void *)Logger.logObject.getter(v103);
    os_log_type_t v128 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled((os_log_t)v127, v128))
    {
      uint64_t v148 = *(void *)(v0 + 328);
      uint64_t v149 = *(void *)(v0 + 280);
      uint64_t v150 = *(void *)(v0 + 288);

      (*(void (**)(uint64_t, uint64_t))(v150 + 8))(v148, v149);
      goto LABEL_56;
    }

    uint64_t v129 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v165 = swift_slowAlloc(32LL, -1LL);
    v166[0] = v165;
    *(_DWORD *)uint64_t v129 = 136315138;
    id v130 = [v103 chatIdentifier];
    if (v130)
    {
      uint64_t v131 = v130;
      uint64_t v159 = *(void *)(v0 + 288);
      uint64_t v161 = *(void *)(v0 + 280);
      os_log_t loga = *(os_log_t *)(v0 + 328);
      uint64_t v132 = static String._unconditionallyBridgeFromObjectiveC(_:)(v130);
      uint64_t v134 = v133;

      *(void *)(v0 + 232) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( v132,  (unint64_t)v134,  v166);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v129 + 4, v129 + 12);
      swift_bridgeObjectRelease(v134, v135, v136, v137, v138, v139, v140, v141);

      _os_log_impl( &dword_0,  (os_log_t)v127,  v128,  "Last message is not a Lite Message or not under the time limit for %s",  v129,  0xCu);
      swift_arrayDestroy(v165, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v165, -1LL, -1LL);
      swift_slowDealloc(v129, -1LL, -1LL);

      (*(void (**)(os_log_t, uint64_t))(v159 + 8))(loga, v161);
LABEL_56:
      uint64_t v151 = *(void *)(v0 + 376);
      uint64_t v152 = *(void *)(v0 + 352);
      uint64_t v153 = *(void *)(v0 + 360);
      id v30 = LiteMessageServiceSession.result(for:reachable:)( *(void *)(v0 + 248),  *(LiteMessageServiceSession **)(v0 + 256),  0);

      (*(void (**)(uint64_t, uint64_t))(v153 + 8))(v151, v152);
      goto LABEL_26;
    }

LABEL_59:
    __break(1u);
    return;
  }

  id v94 = [v3 recipient];
  *(void *)(v0 + 424) = v94;
  if (v94)
  {
    uint64_t v95 = (uint64_t)v94;
    id v96 = (void *)swift_task_alloc(dword_4DED4);
    *(void *)(v0 + 432) = v96;
    *id v96 = v0;
    v96[1] = LiteMessageServiceSession.calculateOnGridReachability(for:with:isRecipientOffGrid:);
    specialized LiteMessageServiceSession.lastActiveToken(for:)(v95);
  }

  else
  {
    uint64_t v154 = (void *)swift_task_alloc(dword_4DEBC);
    *(void *)(v0 + 472) = v154;
    *uint64_t v154 = v0;
    v154[1] = LiteMessageServiceSession.calculateOnGridReachability(for:with:isRecipientOffGrid:);
    LiteMessageServiceSession.isAvailableForLiteMessage(for:token:with:)( *(void *)(v0 + 248),  *(void *)(v0 + 256),  0LL,  0xF000000000000000LL,  *(void *)(v0 + 264));
  }

uint64_t LiteMessageServiceSession.calculateOnGridReachability(for:with:isRecipientOffGrid:)( uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 432LL);
  v3[55] = a1;
  v3[56] = a2;
  swift_task_dealloc(v4);
  return swift_task_switch( LiteMessageServiceSession.calculateOnGridReachability(for:with:isRecipientOffGrid:),  v3[49],  v3[50]);
}

uint64_t LiteMessageServiceSession.calculateOnGridReachability(for:with:isRecipientOffGrid:)()
{
  unint64_t v1 = *(void *)(v0 + 448);
  if (v1 >> 60 == 15)
  {

    uint64_t v2 = (void *)swift_task_alloc(dword_4DEBC);
    *(void *)(v0 + 472) = v2;
    *uint64_t v2 = v0;
    v2[1] = LiteMessageServiceSession.calculateOnGridReachability(for:with:isRecipientOffGrid:);
    return LiteMessageServiceSession.isAvailableForLiteMessage(for:token:with:)( *(void *)(v0 + 248),  *(void *)(v0 + 256),  0LL,  0xF000000000000000LL,  *(void *)(v0 + 264));
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 440);
    uint64_t v5 = *(void *)(v0 + 336);
    uint64_t v6 = *(void *)(v0 + 280);
    uint64_t v7 = *(void *)(v0 + 288);
    uint64_t v8 = Logger.availability.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v8, v6);
    outlined copy of Data._Representation(v4, v1);
    uint64_t v9 = outlined copy of Data._Representation(v4, v1);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.info.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v14 = *(void *)(v0 + 440);
    unint64_t v13 = *(void *)(v0 + 448);
    uint64_t v15 = *(void *)(v0 + 336);
    uint64_t v16 = *(void *)(v0 + 280);
    uint64_t v17 = *(void *)(v0 + 288);
    if (v12)
    {
      uint64_t v32 = *(void *)(v0 + 280);
      uint64_t v31 = *(void *)(v0 + 336);
      uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v19 = swift_slowAlloc(32LL, -1LL);
      uint64_t v33 = v19;
      *(_DWORD *)uint64_t v18 = 136315138;
      outlined copy of Data._Representation(v14, v13);
      uint64_t v20 = Data.description.getter(v14, v13);
      NSString v22 = v21;
      outlined consume of Data?(v14, v13);
      *(void *)(v0 + 240) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( v20,  (unint64_t)v22,  &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease(v22, v23, v24, v25, v26, v27, v28, v29);
      outlined consume of Data?(v14, v13);
      outlined consume of Data?(v14, v13);
      _os_log_impl( &dword_0,  v10,  v11,  "Will determine iMessage Lite availability using last active token: %s",  v18,  0xCu);
      swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v31, v32);
    }

    else
    {
      outlined consume of Data?(*(void *)(v0 + 440), *(void *)(v0 + 448));
      outlined consume of Data?(v14, v13);

      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
    }

    outlined copy of Data._Representation(*(void *)(v0 + 440), *(void *)(v0 + 448));
    id v30 = (void *)swift_task_alloc(dword_4DEBC);
    *(void *)(v0 + 456) = v30;
    void *v30 = v0;
    v30[1] = LiteMessageServiceSession.calculateOnGridReachability(for:with:isRecipientOffGrid:);
    return LiteMessageServiceSession.isAvailableForLiteMessage(for:token:with:)( *(void *)(v0 + 248),  *(void *)(v0 + 256),  *(void *)(v0 + 440),  *(void *)(v0 + 448),  *(void *)(v0 + 264));
  }

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  LiteMessageServiceSession *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v1 = *(void *)(v0 + 440);
  uint64_t v2 = *(void *)(v0 + 448);

  outlined consume of Data?(v1, v2);
  id v3 = *(_BYTE *)(v0 + 152);
  uint64_t v5 = *(void **)(v0 + 408);
  uint64_t v4 = *(void **)(v0 + 416);
  uint64_t v6 = *(void *)(v0 + 376);
  uint64_t v7 = *(void *)(v0 + 352);
  uint64_t v8 = *(void *)(v0 + 360);
  uint64_t v10 = *(void *)(v0 + 248);
  uint64_t v9 = *(LiteMessageServiceSession **)(v0 + 256);
  swift_release(*(void *)(v0 + 384));
  os_log_type_t v11 = LiteMessageServiceSession.result(for:reachable:)(v10, v9, v3);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  BOOL v12 = *(void *)(v0 + 368);
  uint64_t v14 = *(void *)(v0 + 336);
  unint64_t v13 = *(void *)(v0 + 344);
  uint64_t v16 = *(void *)(v0 + 320);
  uint64_t v15 = *(void *)(v0 + 328);
  uint64_t v18 = *(void *)(v0 + 304);
  uint64_t v17 = *(void *)(v0 + 312);
  uint64_t v19 = *(void *)(v0 + 296);
  swift_task_dealloc(*(void *)(v0 + 376));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(id))(v0 + 8))(v11);
}

{
  uint64_t v0;
  char v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  LiteMessageServiceSession *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v1 = *(_BYTE *)(v0 + 176);
  id v3 = *(void **)(v0 + 408);
  uint64_t v2 = *(void **)(v0 + 416);
  uint64_t v4 = *(void *)(v0 + 376);
  uint64_t v5 = *(void *)(v0 + 352);
  uint64_t v6 = *(void *)(v0 + 360);
  uint64_t v8 = *(void *)(v0 + 248);
  uint64_t v7 = *(LiteMessageServiceSession **)(v0 + 256);
  swift_release(*(void *)(v0 + 384));
  uint64_t v9 = LiteMessageServiceSession.result(for:reachable:)(v8, v7, v1);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  uint64_t v10 = *(void *)(v0 + 368);
  BOOL v12 = *(void *)(v0 + 336);
  os_log_type_t v11 = *(void *)(v0 + 344);
  uint64_t v14 = *(void *)(v0 + 320);
  unint64_t v13 = *(void *)(v0 + 328);
  uint64_t v16 = *(void *)(v0 + 304);
  uint64_t v15 = *(void *)(v0 + 312);
  uint64_t v17 = *(void *)(v0 + 296);
  swift_task_dealloc(*(void *)(v0 + 376));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(id))(v0 + 8))(v9);
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v1 = *(void *)(v0 + 440);
  uint64_t v2 = *(void *)(v0 + 448);
  uint64_t v4 = *(void **)(v0 + 416);
  id v3 = *(void **)(v0 + 424);
  uint64_t v5 = *(void **)(v0 + 408);
  uint64_t v6 = *(void *)(v0 + 376);
  uint64_t v7 = *(void *)(v0 + 352);
  uint64_t v8 = *(void *)(v0 + 360);
  swift_release(*(void *)(v0 + 384));

  outlined consume of Data?(v1, v2);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  uint64_t v9 = *(void *)(v0 + 368);
  os_log_type_t v11 = *(void *)(v0 + 336);
  uint64_t v10 = *(void *)(v0 + 344);
  unint64_t v13 = *(void *)(v0 + 320);
  BOOL v12 = *(void *)(v0 + 328);
  uint64_t v15 = *(void *)(v0 + 304);
  uint64_t v14 = *(void *)(v0 + 312);
  uint64_t v16 = *(void *)(v0 + 296);
  swift_task_dealloc(*(void *)(v0 + 376));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v2 = *(void **)(v0 + 408);
  unint64_t v1 = *(void **)(v0 + 416);
  id v3 = *(void *)(v0 + 376);
  uint64_t v4 = *(void *)(v0 + 352);
  uint64_t v5 = *(void *)(v0 + 360);
  swift_release(*(void *)(v0 + 384));

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  uint64_t v6 = *(void *)(v0 + 368);
  uint64_t v8 = *(void *)(v0 + 336);
  uint64_t v7 = *(void *)(v0 + 344);
  uint64_t v10 = *(void *)(v0 + 320);
  uint64_t v9 = *(void *)(v0 + 328);
  BOOL v12 = *(void *)(v0 + 304);
  os_log_type_t v11 = *(void *)(v0 + 312);
  unint64_t v13 = *(void *)(v0 + 296);
  swift_task_dealloc(*(void *)(v0 + 376));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t LiteMessageServiceSession.calculateOnGridReachability(for:with:isRecipientOffGrid:)(char a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 160) = v1;
  *(_BYTE *)(v3 + 152) = a1;
  *(void *)(v3 + 144) = v2;
  uint64_t v4 = *(void *)(v3 + 456);
  *(void *)(v3 + 464) = v1;
  swift_task_dealloc(v4);
  outlined consume of Data?(*(void *)(v3 + 440), *(void *)(v3 + 448));
  if (v1) {
    uint64_t v5 = LiteMessageServiceSession.calculateOnGridReachability(for:with:isRecipientOffGrid:);
  }
  else {
    uint64_t v5 = LiteMessageServiceSession.calculateOnGridReachability(for:with:isRecipientOffGrid:);
  }
  return swift_task_switch(v5, *(void *)(v3 + 392), *(void *)(v3 + 400));
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v3 = *v2;
  *(void *)(v3 + 184) = v1;
  *(_BYTE *)(v3 + 176) = a1;
  *(void *)(v3 + 16_Block_object_dispose(va, 8) = v2;
  uint64_t v4 = *(void *)(v3 + 472);
  *(void *)(v3 + 480) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = LiteMessageServiceSession.calculateOnGridReachability(for:with:isRecipientOffGrid:);
  }
  else {
    uint64_t v5 = LiteMessageServiceSession.calculateOnGridReachability(for:with:isRecipientOffGrid:);
  }
  return swift_task_switch(v5, *(void *)(v3 + 392), *(void *)(v3 + 400));
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSData?) -> () with result type (Bool, Data?)( uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = (uint64_t)a3;
  uint64_t v5 = *(void *)(a1 + 32);
  if (a3)
  {
    id v6 = a3;
    uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
    unint64_t v8 = v7;
  }

  else
  {
    unint64_t v8 = 0xF000000000000000LL;
  }

  uint64_t v9 = *(void *)(*(void *)(v5 + 64) + 40LL);
  *(_BYTE *)uint64_t v9 = a2;
  *(void *)(v9 + _Block_object_dispose(va, 8) = v3;
  *(void *)(v9 + 16) = v8;
  return swift_continuation_resume(v5);
}

void *specialized Dictionary.subscript.getter(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001LL) == 0)
  {
    if (*(void *)(a2 + 16))
    {
      unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a1);
      if ((v9 & 1) != 0)
      {
        unint64_t v7 = *(void **)(*(void *)(a2 + 56) + 8 * v8);
        id v10 = v7;
        return v7;
      }
    }

    return 0LL;
  }

  id v3 = a1;
  uint64_t v4 = __CocoaDictionary.lookup(_:)();

  if (!v4) {
    return 0LL;
  }
  uint64_t v12 = v4;
  uint64_t v5 = type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IDSOffGridDeliveryQueryResult,  &OBJC_CLASS___IDSOffGridDeliveryQueryResult_ptr);
  swift_unknownObjectRetain(v4, v6);
  swift_dynamicCast(&v13, &v12, (char *)&type metadata for Swift.AnyObject + 8, v5, 7LL);
  unint64_t v7 = v13;
  swift_unknownObjectRelease(v4);
  return v7;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)( uint64_t a1, const char *a2, void *a3, void *a4, unsigned __int8 a5, void *a6, void *a7, void *a8)
{
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
    os_log_type_t v11 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, IMServiceReachabilityHandleResult>);
  uint64_t v10 = static _DictionaryStorage.allocate(capacity:)(v9);
  os_log_type_t v11 = (void *)v10;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease((LiteMessageServiceSession *)a1, a2, a3, a4, a5, a6, a7, a8);
    return (unint64_t)v11;
  }

  swift_retain(v10);
  unint64_t v13 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v14 = (uint64_t)*(v13 - 2);
    uint64_t v15 = (uint64_t)*(v13 - 1);
    uint64_t v16 = *v13;
    swift_bridgeObjectRetain(v15);
    id v17 = v16;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15);
    if ((v19 & 1) != 0) {
      break;
    }
    *(void *)((char *)v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v20 = (uint64_t *)(v11[6] + 16 * result);
    uint64_t *v20 = v14;
    v20[1] = v15;
    *(void *)(v11[7] + 8 * result) = v17;
    uint64_t v21 = v11[2];
    BOOL v22 = __OFADD__(v21, 1LL);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    v11[2] = v23;
    v13 += 3;
    if (!--v12)
    {
      swift_release(v11);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  void *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
    os_log_type_t v11 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v10 = static _DictionaryStorage.allocate(capacity:)(v9);
  os_log_type_t v11 = (void *)v10;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease((LiteMessageServiceSession *)a1, a2, a3, a4, a5, a6, a7, a8, v23);
    return (unint64_t)v11;
  }

  unint64_t v13 = v10 + 64;
  uint64_t v14 = a1 + 32;
  swift_retain(v10);
  while (1)
  {
    outlined init with copy of (String, Any)(v14, (uint64_t)&v23);
    uint64_t v15 = v23;
    uint64_t v16 = v24;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v23, v24);
    if ((v18 & 1) != 0) {
      break;
    }
    *(void *)(v13 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    char v19 = (void *)(v11[6] + 16 * result);
    uint8_t *v19 = v15;
    v19[1] = v16;
    unint64_t result = (unint64_t)outlined init with take of Any(&v25, (_OWORD *)(v11[7] + 32 * result));
    uint64_t v20 = v11[2];
    uint64_t v21 = __OFADD__(v20, 1LL);
    BOOL v22 = v20 + 1;
    if (v21) {
      goto LABEL_11;
    }
    v11[2] = v22;
    v14 += 48LL;
    if (!--v12)
    {
      swift_release(v11);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_27FA8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v6 = a1;
    }
    else {
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease((LiteMessageServiceSession *)v1, v7, v8, v9, v10, v11, v12, v13);
    if (v3)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<IDSURI>);
      uint64_t v4 = (void *)static _SetStorage.allocate(capacity:)(v3);
      if (!v2) {
        goto LABEL_4;
      }
LABEL_11:
      if (v1 < 0) {
        uint64_t v14 = v1;
      }
      else {
        uint64_t v14 = v1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v1);
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v14);
      swift_bridgeObjectRelease((LiteMessageServiceSession *)v1, v15, v16, v17, v18, v19, v20, v21);
      if (!v5) {
        return;
      }
      goto LABEL_15;
    }
  }

  else
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
    if (v3) {
      goto LABEL_3;
    }
  }

  uint64_t v4 = &_swiftEmptySetSingleton;
  if (v2) {
    goto LABEL_11;
  }
LABEL_4:
  uint64_t v5 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8LL));
  if (!v5) {
    return;
  }
LABEL_15:
  BOOL v22 = (char *)(v4 + 7);
  uint64_t v59 = v5;
  if ((v1 & 0xC000000000000001LL) != 0)
  {
    uint64_t v23 = 0LL;
    uint64_t v57 = (LiteMessageServiceSession *)v1;
    while (1)
    {
      while (1)
      {
        uint64_t v24 = specialized _ArrayBuffer._getElementSlowPath(_:)(v23, v1);
        BOOL v25 = __OFADD__(v23++, 1LL);
        if (v25)
        {
          __break(1u);
          goto LABEL_42;
        }

        uint64_t v26 = v24;
        Swift::Int v27 = NSObject._rawHashValue(seed:)(v4[5]);
        uint64_t v28 = -1LL << *((_BYTE *)v4 + 32);
        unint64_t v29 = v27 & ~v28;
        unint64_t v30 = v29 >> 6;
        uint64_t v31 = *(void *)&v22[8 * (v29 >> 6)];
        uint64_t v32 = 1LL << v29;
        if (((1LL << v29) & v31) != 0) {
          break;
        }
LABEL_26:
        *(void *)&v22[8 * v30] = v32 | v31;
        *(void *)(v4[6] + 8 * v29) = v26;
        uint64_t v38 = v4[2];
        BOOL v25 = __OFADD__(v38, 1LL);
        uint64_t v39 = v38 + 1;
        if (v25) {
          goto LABEL_43;
        }
        v4[2] = v39;
        if (v23 == v5) {
          return;
        }
      }

      type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IDSURI,  &OBJC_CLASS___IDSURI_ptr);
      id v33 = *(id *)(v4[6] + 8 * v29);
      char v34 = static NSObject.== infix(_:_:)();

      if ((v34 & 1) == 0)
      {
        uint64_t v35 = ~v28;
        while (1)
        {
          unint64_t v29 = (v29 + 1) & v35;
          unint64_t v30 = v29 >> 6;
          uint64_t v31 = *(void *)&v22[8 * (v29 >> 6)];
          uint64_t v32 = 1LL << v29;
          if ((v31 & (1LL << v29)) == 0) {
            break;
          }
          id v36 = *(id *)(v4[6] + 8 * v29);
          char v37 = static NSObject.== infix(_:_:)();

          if ((v37 & 1) != 0) {
            goto LABEL_17;
          }
        }

        uint64_t v1 = (uint64_t)v57;
        uint64_t v5 = v59;
        goto LABEL_26;
      }

uint64_t outlined consume of Data?(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(result, a2);
  }
  return result;
}

id specialized LiteMessageServiceSession.isLastMessageLite(for:with:)(void *a1, double a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(uint64_t (***)(char *, uint64_t, uint64_t))(v4 - 8);
  __chkstk_darwin(v4);
  SEL v7 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  __chkstk_darwin(v8);
  unsigned __int8 v10 = (char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v98 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  id v94 = (char *)&v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  SEL v15 = (char *)&v89 - v14;
  id v16 = [(id)objc_opt_self(IMDChatRegistry) sharedInstance];
  id result = [a1 chatIdentifier];
  if (!result)
  {
LABEL_35:
    __break(1u);
    return result;
  }

  unsigned __int8 v18 = result;
  id v96 = v10;
  double v93 = v15;
  id v19 = [v16 allExistingChatsWithIdentifier:result];

  uint64_t v20 = type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IMDChat,  &OBJC_CLASS___IMDChat_ptr);
  uint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, v20);

  if ((unint64_t)v21 >> 62)
  {
LABEL_29:
    if (v21 < 0) {
      uint64_t v81 = v21;
    }
    else {
      uint64_t v81 = v21 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v21);
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter(v81);
    swift_bridgeObjectRelease((LiteMessageServiceSession *)v21, v82, v83, v84, v85, v86, v87, v88);
    if (v29) {
      goto LABEL_4;
    }
LABEL_33:
    swift_bridgeObjectRelease((LiteMessageServiceSession *)v21, v22, v23, v24, v25, v26, v27, v28);
    return &dword_0 + 1;
  }

  uint64_t v29 = *(void *)((char *)&dword_10 + (v21 & 0xFFFFFFFFFFFFF8LL));
  if (!v29) {
    goto LABEL_33;
  }
LABEL_4:
  uint64_t v97 = (void *)v11;
  double v90 = v7;
  double v91 = v5;
  uint64_t v92 = v4;
  unint64_t v11 = v21 & 0xC000000000000001LL;
  uint64_t v4 = 4LL;
  unint64_t v95 = v21 & 0xC000000000000001LL;
  while (1)
  {
    if (v11) {
      id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v21);
    }
    else {
      id v30 = *(id *)(v21 + 8 * v4);
    }
    uint64_t v31 = v30;
    SEL v7 = (char *)(v4 - 3);
    if (__OFADD__(v4 - 4, 1LL))
    {
      __break(1u);
      goto LABEL_29;
    }

    id result = [v30 service];
    if (!result)
    {
      __break(1u);
      goto LABEL_35;
    }

    uint64_t v32 = result;
    uint64_t v5 = (uint64_t (**)(char *, uint64_t, uint64_t))[result internalName];

    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    uint64_t v35 = v34;

    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMServiceNameiMessageLite);
    if (v33 != v36 || v35 != v37) {
      break;
    }

    swift_bridgeObjectRelease_n(v35, 2LL);
LABEL_6:
    ++v4;
  }

  uint64_t v39 = v37;
  char v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v36, v37, 0LL);
  swift_bridgeObjectRelease(v35, v41, v42, v43, v44, v45, v46, v47);
  swift_bridgeObjectRelease(v39, v48, v49, v50, v51, v52, v53, v54);
  if ((v40 & 1) != 0
    || (id v55 = [(id)objc_opt_self(IMDMessageStore) sharedInstance],
        id v56 = objc_msgSend(v55, "lastMessageForChatWithRowID:", objc_msgSend(v31, "rowID")),
        v55,
        !v56))
  {

    goto LABEL_6;
  }

  id v57 = [v56 time];
  if (!v57)
  {
    uint64_t v61 = (uint64_t)v96;
    (*(void (**)(char *, uint64_t, uint64_t, void *))(v98 + 56))(v96, 1LL, 1LL, v97);
LABEL_24:

    outlined destroy of TaskPriority?(v61, &demangling cache variable for type metadata for Date?);
    unint64_t v11 = v95;
    goto LABEL_6;
  }

  uint64_t v58 = v57;
  uint64_t v59 = v94;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v57);

  uint64_t v5 = (uint64_t (**)(char *, uint64_t, uint64_t))v98;
  uint64_t v60 = *(void (**)(char *, char *, void *))(v98 + 32);
  uint64_t v61 = (uint64_t)v96;
  uint64_t v62 = v59;
  uint64_t v63 = v97;
  v60(v96, v62, v97);
  ((void (*)(uint64_t, void, uint64_t, void *))v5[7])(v61, 0LL, 1LL, v63);
  uint64_t v64 = v93;
  uint64_t v5 = (uint64_t (**)(char *, uint64_t, uint64_t))v97;
  uint64_t v65 = ((uint64_t (*)(char *, uint64_t, void *))v60)(v93, v61, v97);
  if (fabs(Date.timeIntervalSinceNow.getter(v65)) >= a2)
  {
    (*(void (**)(char *, uint64_t (**)(char *, uint64_t, uint64_t)))(v98 + 8))(v64, v5);

    unint64_t v11 = v95;
    goto LABEL_6;
  }

  swift_bridgeObjectRelease((LiteMessageServiceSession *)v21, v66, v67, v68, v69, v70, v71, v72);
  uint64_t v73 = Logger.availability.unsafeMutableAddressor();
  uint64_t v75 = v90;
  uint64_t v74 = v91;
  uint64_t v76 = v92;
  uint64_t v77 = v91[2](v90, v73, v92);
  uint64_t v78 = (os_log_s *)Logger.logObject.getter(v77);
  os_log_type_t v79 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v78, v79))
  {
    uint64_t v80 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v80 = 0;
    _os_log_impl(&dword_0, v78, v79, "We have a more recent message in chat that is not iMessage Lite", v80, 2u);
    swift_slowDealloc(v80, -1LL, -1LL);
  }

  ((void (*)(char *, uint64_t))v74[1])(v75, v76);
  (*(void (**)(char *, void *))(v98 + 8))(v93, v97);
  return 0LL;
}

uint64_t specialized LiteMessageServiceSession.lastActiveToken(for:)(uint64_t a1)
{
  v1[18] = a1;
  uint64_t v2 = type metadata accessor for MainActor(0LL);
  v1[19] = static MainActor.shared.getter(v2);
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[20] = v3;
  v1[21] = v4;
  return swift_task_switch(specialized LiteMessageServiceSession.lastActiveToken(for:), v3, v4);
}

uint64_t specialized LiteMessageServiceSession.lastActiveToken(for:)()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = (void *)v0[18];
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = specialized LiteMessageServiceSession.lastActiveToken(for:);
  uint64_t v3 = swift_continuation_init(v0 + 2, 0LL);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v4 = v0 + 10;
  v4[1] = 0x40000000LL;
  v4[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSData?) -> () with result type (Bool, Data?);
  v4[3] = &block_descriptor_25;
  v4[4] = v3;
  [v2 cachedOffGridModeAndLastPublisherWithCompletion:v4];
  return swift_continuation_await(v1);
}

{
  uint64_t v0;
  return swift_task_switch( specialized LiteMessageServiceSession.lastActiveToken(for:),  *(void *)(*(void *)v0 + 160LL),  *(void *)(*(void *)v0 + 168LL));
}

{
  uint64_t v0;
  unint64_t v1;
  swift_release(*(void *)(v0 + 152));
  uint64_t v1 = *(void *)(v0 + 136);
  if (*(_BYTE *)(v0 + 120) == 1)
  {
    if (v1 >> 60 != 15) {
      __asm { BR              X10 }
    }
  }

  else
  {
    outlined consume of Data?(*(void *)(v0 + 128), v1);
  }

  return (*(uint64_t (**)(void, unint64_t))(v0 + 8))(0LL, 0xF000000000000000LL);
}

id LiteMessageServiceSession.processPreferredServiceType(_:for:expiresAfter:)( char *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v97 = a4;
  uint64_t v98 = a2;
  unint64_t v100 = a3;
  id v96 = a1;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v101 = v4;
  uint64_t v102 = v5;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v99 = (char *)&v89 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  double v93 = (char *)&v89 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v92 = (char *)&v89 - v14;
  __chkstk_darwin(v13);
  double v91 = (char *)&v89 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  __chkstk_darwin(v16);
  unsigned __int8 v18 = (char *)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for Date(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  BOOL v22 = (char *)&v89 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = (void *)objc_opt_self(&OBJC_CLASS___IMDAccountController);
  id result = [v23 sharedInstance];
  if (!result)
  {
    __break(1u);
LABEL_32:
    __break(1u);
    return result;
  }

  unsigned __int8 v25 = result;
  id v26 = [result anySessionForServiceName:IMServiceNameiMessage];

  id v95 = v26;
  if (v26)
  {
    id result = [v23 sharedInstance];
    if (result)
    {
      Swift::Int v27 = result;
      uint64_t v28 = (char *)[result anySessionForServiceName:IMServiceNameRCS];

      outlined init with copy of Date?(v97, (uint64_t)v18);
      uint64_t v29 = v20;
      id v30 = (char *)v19;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1LL, v19) == 1)
      {
        double v31 = static Double.defaultSMSDowngradeTimeInterval.getter();
        uint64_t v32 = (uint64_t)v22;
        Date.init(timeIntervalSinceNow:)(v31);
        outlined destroy of TaskPriority?((uint64_t)v18, &demangling cache variable for type metadata for Date?);
      }

      else
      {
        uint64_t v32 = (uint64_t)v22;
        (*(void (**)(char *, char *, char *))(v20 + 32))(v22, v18, v30);
      }

      uint64_t v40 = v102;
      SEL v41 = v99;
      if (v96 == (char *)-1LL)
      {
        uint64_t v97 = v32;
        uint64_t v66 = Logger.liteSession.unsafeMutableAddressor();
        SEL v41 = v93;
        uint64_t v67 = v101;
        (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v93, v66, v101);
        unint64_t v68 = v100;
        uint64_t v69 = swift_bridgeObjectRetain_n(v100, 2LL);
        uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
        os_log_type_t v71 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v70, v71))
        {
          uint64_t v72 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v73 = swift_slowAlloc(32LL, -1LL);
          id v96 = v28;
          uint64_t v74 = v73;
          uint64_t v104 = v73;
          *(_DWORD *)uint64_t v72 = 136315138;
          swift_bridgeObjectRetain(v68);
          uint64_t v103 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v68, &v104);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v72 + 4, v72 + 12);
          swift_bridgeObjectRelease_n(v68, 3LL);
          _os_log_impl(&dword_0, v70, v71, "Unspecified service preference, dropping selection %s", v72, 0xCu);
          swift_arrayDestroy(v74, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v74, -1LL, -1LL);
          swift_slowDealloc(v72, -1LL, -1LL);

          (*(void (**)(char *, uint64_t))(v102 + 8))(v93, v67);
          return (id)(*(uint64_t (**)(uint64_t, char *))(v29 + 8))(v97, v30);
        }
      }

      else
      {
        if (v96 == (_BYTE *)&dword_0 + 1)
        {
          id v96 = v28;
          uint64_t v97 = v32;
          uint64_t v99 = v30;
          uint64_t v54 = Logger.liteSession.unsafeMutableAddressor();
          id v55 = v92;
          uint64_t v56 = v101;
          (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v92, v54, v101);
          unint64_t v57 = v100;
          uint64_t v58 = swift_bridgeObjectRetain_n(v100, 2LL);
          uint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
          os_log_type_t v60 = static os_log_type_t.default.getter();
          BOOL v61 = os_log_type_enabled(v59, v60);
          uint64_t v90 = v29;
          if (v61)
          {
            uint64_t v62 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v63 = v55;
            uint64_t v64 = swift_slowAlloc(32LL, -1LL);
            uint64_t v104 = v64;
            *(_DWORD *)uint64_t v62 = 136315138;
            swift_bridgeObjectRetain(v57);
            uint64_t v103 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v57, &v104);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v62 + 4, v62 + 12);
            swift_bridgeObjectRelease_n(v57, 3LL);
            _os_log_impl(&dword_0, v59, v60, "%s requested downgrade to SMS", v62, 0xCu);
            swift_arrayDestroy(v64, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v64, -1LL, -1LL);
            swift_slowDealloc(v62, -1LL, -1LL);

            (*(void (**)(char *, uint64_t))(v102 + 8))(v63, v56);
          }

          else
          {

            swift_bridgeObjectRelease_n(v57, 2LL);
            (*(void (**)(char *, uint64_t))(v40 + 8))(v55, v56);
          }

          id v65 = v95;
          NSString v81 = String._bridgeToObjectiveC()();
          uint64_t v32 = v97;
          Class isa = Date._bridgeToObjectiveC()().super.isa;
          [v65 downgradeRequestedForHandleID:v81 expirationDate:isa preferredService:IMServiceNameSMS];

          uint64_t v28 = v96;
          if (!v96) {
            goto LABEL_30;
          }
          id v83 = v96;
          id v84 = (char *)String._bridgeToObjectiveC()();
          v85.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
          [v83 downgradeRequestedForHandleID:v84 expirationDate:v85.super.isa preferredService:IMServiceNameSMS];

          goto LABEL_29;
        }

        if (!v96)
        {
          uint64_t v90 = v20;
          uint64_t v99 = v30;
          uint64_t v42 = Logger.liteSession.unsafeMutableAddressor();
          id v43 = v91;
          uint64_t v44 = v101;
          (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v91, v42, v101);
          unint64_t v45 = v100;
          uint64_t v46 = swift_bridgeObjectRetain_n(v100, 2LL);
          id v47 = (os_log_s *)Logger.logObject.getter(v46);
          os_log_type_t v48 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v47, v48))
          {
            id v49 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            id v50 = v28;
            uint64_t v51 = swift_slowAlloc(32LL, -1LL);
            uint64_t v104 = v51;
            *(_DWORD *)id v49 = 136315138;
            swift_bridgeObjectRetain(v100);
            uint64_t v103 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v100, &v104);
            unint64_t v52 = v100;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v49 + 4, v49 + 12);
            swift_bridgeObjectRelease_n(v52, 3LL);
            _os_log_impl(&dword_0, v47, v48, "%s requested upgrade to iMessage", v49, 0xCu);
            swift_arrayDestroy(v51, 1LL, (char *)&type metadata for Any + 8);
            uint64_t v53 = v51;
            uint64_t v28 = v50;
            swift_slowDealloc(v53, -1LL, -1LL);
            swift_slowDealloc(v49, -1LL, -1LL);

            (*(void (**)(char *, uint64_t))(v102 + 8))(v43, v101);
          }

          else
          {

            swift_bridgeObjectRelease_n(v45, 2LL);
            (*(void (**)(char *, uint64_t))(v40 + 8))(v43, v44);
          }

          id v65 = v95;
          NSString v86 = String._bridgeToObjectiveC()();
          [v65 clearDowngradeRequestForHandleID:v86];

          if (!v28) {
            goto LABEL_30;
          }
          id v96 = v28;
          id v84 = v28;
          v85.super.Class isa = (Class)String._bridgeToObjectiveC()();
          [v84 clearDowngradeRequestForHandleID:v85.super.isa];
LABEL_29:

          uint64_t v28 = v96;
LABEL_30:
          id v87 = [v94 broadcasterForChatListeners];
          NSString v88 = String._bridgeToObjectiveC()();
          [v87 serviceSwitchRequestReceivedForChatWithIdentifier:v88];

          swift_unknownObjectRelease(v87);
          return (id)(*(uint64_t (**)(uint64_t, char *))(v90 + 8))(v32, v99);
        }

        uint64_t v97 = v32;
        uint64_t v75 = Logger.liteSession.unsafeMutableAddressor();
        uint64_t v67 = v101;
        (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v41, v75, v101);
        unint64_t v68 = v100;
        uint64_t v76 = swift_bridgeObjectRetain_n(v100, 2LL);
        uint64_t v70 = (os_log_s *)Logger.logObject.getter(v76);
        os_log_type_t v77 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v70, v77))
        {
          uint64_t v78 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v79 = swift_slowAlloc(32LL, -1LL);
          id v96 = v28;
          uint64_t v80 = v79;
          uint64_t v104 = v79;
          *(_DWORD *)uint64_t v78 = 136315138;
          swift_bridgeObjectRetain(v68);
          uint64_t v103 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v68, &v104);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v78 + 4, v78 + 12);
          swift_bridgeObjectRelease_n(v68, 3LL);
          _os_log_impl(&dword_0, v70, v77, "Unknown service preference, dropping selection %s", v78, 0xCu);
          swift_arrayDestroy(v80, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v80, -1LL, -1LL);
          swift_slowDealloc(v78, -1LL, -1LL);

          (*(void (**)(char *, uint64_t))(v102 + 8))(v99, v67);
          return (id)(*(uint64_t (**)(uint64_t, char *))(v29 + 8))(v97, v30);
        }
      }

      swift_bridgeObjectRelease_n(v68, 2LL);

      (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v67);
      return (id)(*(uint64_t (**)(uint64_t, char *))(v29 + 8))(v97, v30);
    }

    goto LABEL_32;
  }

  uint64_t v33 = Logger.liteSession.unsafeMutableAddressor();
  uint64_t v34 = v101;
  uint64_t v35 = v102;
  uint64_t v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v102 + 16))(v8, v33, v101);
  char v37 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v38 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v39 = 0;
    _os_log_impl(&dword_0, v37, v38, "No iMessage service session found for preferred service request", v39, 2u);
    swift_slowDealloc(v39, -1LL, -1LL);
  }

  return (id)(*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v8, v34);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed Data?) -> ()(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void (**)(void *, unint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2)
  {
    swift_retain(v3);
    id v5 = v2;
    uint64_t v2 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
    unint64_t v7 = v6;
  }

  else
  {
    swift_retain(v3);
    unint64_t v7 = 0xF000000000000000LL;
  }

  v4(v2, v7);
  outlined consume of Data?((uint64_t)v2, v7);
  return swift_release(v3);
}

Swift::Void __swiftcall LiteMessageServiceSession.sendUpgradeMessagesIfNeeded()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  type metadata accessor for MainActor(0LL);
  id v5 = v0;
  uint64_t v6 = static MainActor.shared.getter(v5);
  unint64_t v7 = (void *)swift_allocObject(&unk_49FE8, 40LL, 7LL);
  uint64_t v7[2] = v6;
  v7[3] = &protocol witness table for MainActor;
  v7[4] = v5;
  uint64_t v8 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( (uint64_t)v3,  (uint64_t)&async function pointer to partial apply for closure #1 in LiteMessageServiceSession.sendUpgradeMessagesIfNeeded(),  (uint64_t)v7);
  swift_release(v8);
}

uint64_t closure #1 in LiteMessageServiceSession.sendUpgradeMessagesIfNeeded()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v4[3] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[4] = v6;
  v4[5] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for MainActor(0LL);
  v4[6] = static MainActor.shared.getter(v7);
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v4[7] = v8;
  v4[8] = v9;
  return swift_task_switch(closure #1 in LiteMessageServiceSession.sendUpgradeMessagesIfNeeded(), v8, v9);
}

uint64_t closure #1 in LiteMessageServiceSession.sendUpgradeMessagesIfNeeded()()
{
  unint64_t v1 = specialized LiteMessageServiceSession.downgradeRequestedHandles.getter();
  uint64_t v2 = (LiteMessageServiceSession *)v1;
  *(void *)(v0 + 72) = v1;
  if (*(void *)(v1 + 16))
  {
    char v3 = *(_BYTE *)(v1 + 32);
    *(_BYTE *)(v0 + 120) = v3;
    uint64_t v4 = -1LL;
    uint64_t v5 = -1LL << v3;
    if (-v5 < 64) {
      uint64_t v4 = ~(-1LL << -(char)v5);
    }
    unint64_t v6 = v4 & *(void *)(v1 + 64);
    if (v6)
    {
      uint64_t v7 = 0LL;
      unint64_t v8 = __clz(__rbit64(v6));
      uint64_t v9 = (v6 - 1) & v6;
LABEL_6:
      *(void *)(v0 + 80) = v7;
      *(void *)(v0 + 8_Block_object_dispose(va, 8) = v9;
      uint64_t v10 = 16 * v8;
      uint64_t v11 = (uint64_t *)(*(void *)(v1 + 48) + v10);
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      *(void *)(v0 + 96) = v13;
      uint64_t v14 = (uint64_t *)(*(void *)(v1 + 56) + v10);
      uint64_t v16 = *v14;
      uint64_t v15 = v14[1];
      *(void *)(v0 + 104) = v15;
      uint64_t v17 = dword_4DF04;
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v15);
      unsigned __int8 v18 = (void *)swift_task_alloc(v17);
      *(void *)(v0 + 112) = v18;
      *unsigned __int8 v18 = v0;
      v18[1] = closure #1 in LiteMessageServiceSession.sendUpgradeMessagesIfNeeded();
      return LiteMessageServiceSession.sendUpgradeMessage(to:from:)(v12, v13, v16, v15);
    }

    unint64_t v38 = 63 - v5;
    if (v38 > 0x7F)
    {
      unint64_t v39 = *(void *)(v1 + 72);
      if (v39)
      {
        uint64_t v7 = 1LL;
LABEL_13:
        uint64_t v9 = (v39 - 1) & v39;
        unint64_t v8 = __clz(__rbit64(v39)) + (v7 << 6);
        goto LABEL_6;
      }

      if (v38 >= 0xC0)
      {
        unint64_t v39 = *(void *)(v1 + 80);
        if (v39)
        {
          uint64_t v7 = 2LL;
          goto LABEL_13;
        }

        if (v38 >= 0x100)
        {
          unint64_t v39 = *(void *)(v1 + 88);
          if (v39)
          {
            uint64_t v7 = 3LL;
            goto LABEL_13;
          }

          if (v38 >= 0x140)
          {
            unint64_t v39 = *(void *)(v1 + 96);
            if (v39)
            {
              uint64_t v7 = 4LL;
              goto LABEL_13;
            }

            uint64_t v40 = 0LL;
            uint64_t v41 = v38 >> 6;
            if (v41 <= 5) {
              uint64_t v41 = 5LL;
            }
            uint64_t v42 = v41 - 5;
            while (v42 != v40)
            {
              unint64_t v39 = *(void *)(v1 + 104 + 8 * v40++);
              if (v39)
              {
                uint64_t v7 = v40 + 4;
                goto LABEL_13;
              }
            }
          }
        }
      }
    }

    uint64_t v43 = *(void *)(v0 + 48);
    swift_release(v1);
    swift_release(v43);
    uint64_t v44 = (LiteMessageServiceSession *)specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
    specialized LiteMessageServiceSession.downgradeRequestedHandles.setter(v44);
  }

  else
  {
    uint64_t v20 = *(void *)(v0 + 40);
    uint64_t v21 = *(void *)(v0 + 24);
    uint64_t v22 = *(void *)(v0 + 32);
    swift_release(*(void *)(v0 + 48));
    swift_bridgeObjectRelease(v2, v23, v24, v25, v26, v27, v28, v29);
    uint64_t v30 = Logger.liteSession.unsafeMutableAddressor();
    uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v20, v30, v21);
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v33 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl(&dword_0, v32, v33, "No downgraded handles to upgrade", v34, 2u);
      swift_slowDealloc(v34, -1LL, -1LL);
    }

    uint64_t v36 = *(void *)(v0 + 32);
    uint64_t v35 = *(void *)(v0 + 40);
    uint64_t v37 = *(void *)(v0 + 24);

    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
  }

  swift_task_dealloc(*(void *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t *v0;
  uint64_t v1;
  LiteMessageServiceSession *v2;
  LiteMessageServiceSession *v3;
  SEL v4;
  id v5;
  id v6;
  unsigned __int8 v7;
  id v8;
  id v9;
  id v10;
  SEL v11;
  id v12;
  id v13;
  unsigned __int8 v14;
  id v15;
  id v16;
  id v17;
  unint64_t v1 = *v0;
  uint64_t v2 = *(LiteMessageServiceSession **)(*v0 + 104);
  char v3 = *(LiteMessageServiceSession **)(*v0 + 96);
  swift_task_dealloc(*(void *)(*v0 + 112));
  swift_bridgeObjectRelease(v3, v4, v5, v6, v7, v8, v9, v10);
  swift_bridgeObjectRelease(v2, v11, v12, v13, v14, v15, v16, v17);
  return swift_task_switch( closure #1 in LiteMessageServiceSession.sendUpgradeMessagesIfNeeded(),  *(void *)(v1 + 56),  *(void *)(v1 + 64));
}

void closure #1 in LiteMessageServiceSession.sendUpgradeMessagesIfNeeded()()
{
  int64_t v1 = *(void *)(v0 + 80);
  unint64_t v2 = *(void *)(v0 + 88);
  if (v2)
  {
    unint64_t v3 = __clz(__rbit64(v2));
    uint64_t v4 = (v2 - 1) & v2;
    unint64_t v5 = v3 | (v1 << 6);
    uint64_t v6 = *(void *)(v0 + 72);
LABEL_3:
    *(void *)(v0 + 80) = v1;
    *(void *)(v0 + 8_Block_object_dispose(va, 8) = v4;
    uint64_t v7 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v5);
    uint64_t v9 = *v7;
    uint64_t v8 = v7[1];
    *(void *)(v0 + 96) = v8;
    uint64_t v10 = (uint64_t *)(*(void *)(v6 + 56) + 16 * v5);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    *(void *)(v0 + 104) = v12;
    uint64_t v13 = dword_4DF04;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v12);
    uint64_t v14 = (void *)swift_task_alloc(v13);
    *(void *)(v0 + 112) = v14;
    *uint64_t v14 = v0;
    v14[1] = closure #1 in LiteMessageServiceSession.sendUpgradeMessagesIfNeeded();
    LiteMessageServiceSession.sendUpgradeMessage(to:from:)(v9, v8, v11, v12);
    return;
  }

  int64_t v15 = v1 + 1;
  if (__OFADD__(v1, 1LL))
  {
    __break(1u);
  }

  else
  {
    int64_t v16 = (unint64_t)((1LL << *(_BYTE *)(v0 + 120)) + 63) >> 6;
    uint64_t v6 = *(void *)(v0 + 72);
    if (v15 >= v16) {
      goto LABEL_18;
    }
    uint64_t v17 = v6 + 64;
    unint64_t v18 = *(void *)(v6 + 64 + 8 * v15);
    ++v1;
    if (v18)
    {
LABEL_7:
      uint64_t v4 = (v18 - 1) & v18;
      unint64_t v5 = __clz(__rbit64(v18)) + (v1 << 6);
      goto LABEL_3;
    }

    int64_t v1 = v15 + 1;
    if (v15 + 1 >= v16) {
      goto LABEL_18;
    }
    unint64_t v18 = *(void *)(v17 + 8 * v1);
    if (v18) {
      goto LABEL_7;
    }
    int64_t v1 = v15 + 2;
    if (v15 + 2 >= v16) {
      goto LABEL_18;
    }
    unint64_t v18 = *(void *)(v17 + 8 * v1);
    if (v18) {
      goto LABEL_7;
    }
    int64_t v19 = v15 + 3;
    if (v19 >= v16)
    {
LABEL_18:
      uint64_t v20 = *(void *)(v0 + 48);
      swift_release(v6);
      swift_release(v20);
      uint64_t v21 = (LiteMessageServiceSession *)specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
      specialized LiteMessageServiceSession.downgradeRequestedHandles.setter(v21);
      swift_task_dealloc(*(void *)(v0 + 40));
      (*(void (**)(void))(v0 + 8))();
      return;
    }

    unint64_t v18 = *(void *)(v17 + 8 * v19);
    if (v18)
    {
      int64_t v1 = v19;
      goto LABEL_7;
    }

    while (1)
    {
      int64_t v1 = v19 + 1;
      if (__OFADD__(v19, 1LL)) {
        break;
      }
      if (v1 >= v16) {
        goto LABEL_18;
      }
      unint64_t v18 = *(void *)(v17 + 8 * v1);
      ++v19;
      if (v18) {
        goto LABEL_7;
      }
    }
  }

  __break(1u);
}

uint64_t LiteMessageServiceSession.sendUpgradeMessage(to:from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[30] = a4;
  v5[31] = v4;
  v5[28] = a2;
  v5[29] = a3;
  v5[27] = a1;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v5[32] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[33] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[34] = swift_task_alloc(v8);
  v5[35] = swift_task_alloc(v8);
  v5[36] = swift_task_alloc(v8);
  v5[37] = swift_task_alloc(v8);
  uint64_t v9 = type metadata accessor for MainActor(0LL);
  v5[38] = static MainActor.shared.getter(v9);
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  v5[39] = v10;
  v5[40] = v11;
  return swift_task_switch(LiteMessageServiceSession.sendUpgradeMessage(to:from:), v10, v11);
}

uint64_t LiteMessageServiceSession.sendUpgradeMessage(to:from:)()
{
  int64_t v1 = *(LiteMessageServiceSession **)(v0 + 224);
  id v2 = objc_allocWithZone(&OBJC_CLASS___IDSURI);
  swift_bridgeObjectRetain(v1);
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1, v4, v5, v6, v7, v8, v9, v10);
  id v11 = [v2 initWithUnprefixedURI:v3];
  *(void *)(v0 + 32_Block_object_dispose(va, 8) = v11;

  if (!v11)
  {
    uint64_t v41 = *(void *)(v0 + 280);
    uint64_t v42 = *(void *)(v0 + 256);
    uint64_t v43 = *(void *)(v0 + 264);
    uint64_t v44 = *(void *)(v0 + 224);
    swift_release(*(void *)(v0 + 304));
    uint64_t v45 = Logger.liteSession.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v41, v45, v42);
    uint64_t v46 = swift_bridgeObjectRetain_n(v44, 2LL);
    id v47 = (os_log_s *)Logger.logObject.getter(v46);
    os_log_type_t v48 = static os_log_type_t.error.getter();
    BOOL v49 = os_log_type_enabled(v47, v48);
    uint64_t v50 = *(void *)(v0 + 280);
    uint64_t v51 = *(void *)(v0 + 256);
    uint64_t v52 = *(void *)(v0 + 264);
    unint64_t v53 = *(void *)(v0 + 224);
    if (!v49)
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 224), 2LL);

      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, v51);
      goto LABEL_14;
    }

    uint64_t v85 = *(void *)(v0 + 256);
    uint64_t v87 = *(void *)(v0 + 264);
    uint64_t v54 = *(void *)(v0 + 216);
    uint64_t v83 = *(void *)(v0 + 280);
    id v55 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v56 = swift_slowAlloc(32LL, -1LL);
    uint64_t v88 = v56;
    *(_DWORD *)id v55 = 136315138;
    swift_bridgeObjectRetain(v53);
    *(void *)(v0 + 184) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v53, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v55 + 4, v55 + 12);
    swift_bridgeObjectRelease_n(v53, 3LL);
    _os_log_impl(&dword_0, v47, v48, "Cannot send upgrade message to handle %s, got nil IDSURI", v55, 0xCu);
    swift_arrayDestroy(v56, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1LL, -1LL);
    swift_slowDealloc(v55, -1LL, -1LL);
LABEL_9:

    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v83, v85);
LABEL_14:
    uint64_t v77 = *(void *)(v0 + 288);
    uint64_t v79 = *(void *)(v0 + 272);
    uint64_t v78 = *(void *)(v0 + 280);
    swift_task_dealloc(*(void *)(v0 + 296));
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v12 = *(LiteMessageServiceSession **)(v0 + 240);
  id v13 = objc_allocWithZone(&OBJC_CLASS___IDSURI);
  swift_bridgeObjectRetain(v12);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12, v15, v16, v17, v18, v19, v20, v21);
  id v22 = [v13 initWithUnprefixedURI:v14];
  *(void *)(v0 + 336) = v22;

  if (!v22)
  {
    uint64_t v57 = *(void *)(v0 + 288);
    uint64_t v58 = *(void *)(v0 + 256);
    uint64_t v59 = *(void *)(v0 + 264);
    uint64_t v60 = *(void *)(v0 + 240);
    swift_release(*(void *)(v0 + 304));
    uint64_t v61 = Logger.liteSession.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16))(v57, v61, v58);
    uint64_t v62 = swift_bridgeObjectRetain_n(v60, 2LL);
    id v47 = (os_log_s *)Logger.logObject.getter(v62);
    os_log_type_t v63 = static os_log_type_t.error.getter();
    BOOL v64 = os_log_type_enabled(v47, v63);
    uint64_t v65 = *(void *)(v0 + 288);
    uint64_t v66 = *(void *)(v0 + 256);
    uint64_t v67 = *(void *)(v0 + 264);
    unint64_t v68 = *(void *)(v0 + 240);
    if (!v64)
    {

      swift_bridgeObjectRelease_n(v68, 2LL);
      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v65, v66);
      goto LABEL_14;
    }

    uint64_t v69 = *(void *)(v0 + 232);
    uint64_t v87 = *(void *)(v0 + 264);
    uint64_t v85 = *(void *)(v0 + 256);
    uint64_t v70 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v83 = v65;
    uint64_t v71 = swift_slowAlloc(32LL, -1LL);
    uint64_t v88 = v71;
    *(_DWORD *)uint64_t v70 = 136315138;
    swift_bridgeObjectRetain(v68);
    *(void *)(v0 + 16_Block_object_dispose(va, 8) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v68, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v70 + 4, v70 + 12);
    swift_bridgeObjectRelease_n(v68, 3LL);
    _os_log_impl(&dword_0, v47, v63, "Cannot send upgrade message from handle %s, got nil IDSURI", v70, 0xCu);
    swift_arrayDestroy(v71, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v71, -1LL, -1LL);
    swift_slowDealloc(v70, -1LL, -1LL);

    goto LABEL_9;
  }

  uint64_t v23 = *(void *)(v0 + 296);
  uint64_t v24 = *(void *)(v0 + 256);
  uint64_t v25 = *(void *)(v0 + 264);
  uint64_t v26 = *(void *)(v0 + 240);
  uint64_t v27 = *(void *)(v0 + 224);
  uint64_t v28 = Logger.liteSession.unsafeMutableAddressor();
  *(void *)(v0 + 344) = v28;
  id v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16);
  *(void *)(v0 + 352) = v29;
  v29(v23, v28, v24);
  swift_bridgeObjectRetain_n(v27, 2LL);
  uint64_t v30 = swift_bridgeObjectRetain_n(v26, 2LL);
  uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
  os_log_type_t v32 = static os_log_type_t.default.getter();
  BOOL v33 = os_log_type_enabled(v31, v32);
  uint64_t v34 = *(void *)(v0 + 296);
  uint64_t v35 = *(void *)(v0 + 256);
  uint64_t v36 = *(void *)(v0 + 264);
  unint64_t v37 = *(void *)(v0 + 240);
  if (v33)
  {
    uint64_t v81 = *(void *)(v0 + 232);
    uint64_t v86 = *(void *)(v0 + 256);
    unint64_t v38 = *(void *)(v0 + 224);
    uint64_t v80 = *(void *)(v0 + 216);
    uint64_t v84 = *(void *)(v0 + 264);
    uint64_t v39 = swift_slowAlloc(22LL, -1LL);
    uint64_t v82 = swift_slowAlloc(64LL, -1LL);
    uint64_t v88 = v82;
    *(_DWORD *)uint64_t v39 = 136315394;
    swift_bridgeObjectRetain(v38);
    *(void *)(v0 + 200) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v38, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v39 + 4, v39 + 12);
    swift_bridgeObjectRelease_n(v38, 3LL);
    *(_WORD *)(v39 + 12) = 2080;
    swift_bridgeObjectRetain(v37);
    *(void *)(v0 + 20_Block_object_dispose(va, 8) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v37, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v39 + 14, v39 + 22);
    swift_bridgeObjectRelease_n(v37, 3LL);
    _os_log_impl(&dword_0, v31, v32, "Sending upgrade message to %s from %s", (uint8_t *)v39, 0x16u);
    swift_arrayDestroy(v82, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v82, -1LL, -1LL);
    swift_slowDealloc(v39, -1LL, -1LL);

    uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v84 + 8);
    v40(v34, v86);
  }

  else
  {
    swift_bridgeObjectRelease_n(*(void *)(v0 + 224), 2LL);
    swift_bridgeObjectRelease_n(v37, 2LL);

    uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v40(v34, v35);
  }

  uint64_t v72 = v0 + 16;
  *(void *)(v0 + 360) = v40;
  id v73 = LiteMessageServiceSession.offGridMessenger.getter();
  *(void *)(v0 + 36_Block_object_dispose(va, 8) = v73;
  *(void *)(v0 + 56) = v0 + 144;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = LiteMessageServiceSession.sendUpgradeMessage(to:from:);
  uint64_t v74 = swift_continuation_init(v0 + 16, 1LL);
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  uint64_t v75 = (void *)(v0 + 80);
  v75[1] = 0x40000000LL;
  id v75[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned IMIDSOffGridServiceUpdateMessage?, @unowned NSString?, @unowned NSError?) -> () with result type (IMIDSOffGridServiceUpdateMessage, String);
  v75[3] = &block_descriptor_5;
  v75[4] = v74;
  objc_msgSend( v73,  "__im_sendServiceUpdateMessageWithPreferredService:recipientURI:fromURI:options:completion:",  0,  v11,  v22,  0,  v75);
  return swift_continuation_await(v72);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  int64_t v1 = *v0;
  id v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 376) = v2;
  if (v2) {
    NSString v3 = LiteMessageServiceSession.sendUpgradeMessage(to:from:);
  }
  else {
    NSString v3 = LiteMessageServiceSession.sendUpgradeMessage(to:from:);
  }
  return swift_task_switch(v3, *(void *)(v1 + 312), *(void *)(v1 + 320));
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v1 = *(void **)(v0 + 368);
  id v2 = *(void **)(v0 + 328);
  NSString v3 = *(void *)(v0 + 304);

  swift_release(v3);
  swift_unknownObjectRelease(*(void *)(v0 + 144));
  swift_bridgeObjectRelease(*(void *)(v0 + 160));

  SEL v4 = *(void *)(v0 + 288);
  id v6 = *(void *)(v0 + 272);
  id v5 = *(void *)(v0 + 280);
  swift_task_dealloc(*(void *)(v0 + 296));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_s *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  LiteMessageServiceSession *v16;
  SEL v17;
  id v18;
  id v19;
  unsigned __int8 v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  id v2 = *(void **)(v0 + 368);
  int64_t v1 = *(void *)(v0 + 376);
  NSString v3 = *(void *)(v0 + 344);
  SEL v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 352);
  id v5 = *(void *)(v0 + 272);
  id v6 = *(void *)(v0 + 256);
  unsigned __int8 v7 = swift_release(*(void *)(v0 + 304));
  swift_willThrow(v7);

  v4(v5, v3, v6);
  swift_errorRetain(v1);
  id v8 = swift_errorRetain(v1);
  id v9 = (os_log_s *)Logger.logObject.getter(v8);
  id v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = *(void *)(v0 + 376);
    BOOL v33 = *(void **)(v0 + 336);
    uint64_t v34 = *(void **)(v0 + 328);
    uint64_t v36 = *(void *)(v0 + 272);
    unint64_t v37 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
    uint64_t v35 = *(void *)(v0 + 256);
    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v13 = swift_slowAlloc(32LL, -1LL);
    unint64_t v38 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    swift_getErrorValue(v11, v0 + 176, v0 + 120);
    NSString v14 = Error.localizedDescription.getter(*(void *)(v0 + 128), *(void *)(v0 + 136));
    id v16 = (LiteMessageServiceSession *)v15;
    *(void *)(v0 + 192) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl(&dword_0, v9, v10, "Could not send service update message: %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);

    swift_errorRelease(v11);
    v37(v36, v35);
  }

  else
  {
    uint64_t v24 = *(void *)(v0 + 376);
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
    uint64_t v26 = *(void **)(v0 + 328);
    uint64_t v27 = *(void *)(v0 + 272);
    uint64_t v28 = *(void *)(v0 + 256);

    swift_errorRelease(v24);
    swift_errorRelease(v24);
    swift_errorRelease(v24);

    v25(v27, v28);
  }

  id v29 = *(void *)(v0 + 288);
  uint64_t v31 = *(void *)(v0 + 272);
  uint64_t v30 = *(void *)(v0 + 280);
  swift_task_dealloc(*(void *)(v0 + 296));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned IMIDSOffGridServiceUpdateMessage?, @unowned NSString?, @unowned NSError?) -> () with result type (IMIDSOffGridServiceUpdateMessage, String)( uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = *(void *)(result + 32);
  if (a4)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v7 = swift_allocError(v6, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *id v8 = a4;
    id v9 = a4;
    return swift_continuation_throwingResumeWithError(v4, v7);
  }

  else if (a2)
  {
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    uint64_t v12 = *(void **)(*(void *)(v4 + 64) + 40LL);
    *uint64_t v12 = a2;
    v12[1] = v11;
    v12[2] = v13;
    swift_unknownObjectRetain(a2, v13);
    return swift_continuation_throwingResume(v4);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_2AA20()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t partial apply for closure #1 in LiteMessageServiceSession.sendUpgradeMessagesIfNeeded()()
{
  uint64_t v2 = *(void *)(v0 + 32);
  NSString v3 = (void *)swift_task_alloc(dword_4DEF4);
  *(void *)(v1 + 16) = v3;
  *NSString v3 = v1;
  v3[1] = partial apply for closure #1 in LiteMessageServiceSession.familyContactsDidChange();
  return closure #1 in LiteMessageServiceSession.sendUpgradeMessagesIfNeeded()((uint64_t)v3, v4, v5, v2);
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  uint64_t v21 = *(void *)(v12 + 16);
  BOOL v22 = (v13 & 1) == 0;
  uint64_t v23 = v21 + v22;
  if (__OFADD__(v21, v22))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v24 = (char)v13;
  uint64_t v25 = *(void *)(v12 + 24);
  if (v25 >= v23 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v25 >= v23 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    uint64_t v26 = (void *)*v6;
    if ((v24 & 1) != 0)
    {
LABEL_8:
      uint64_t v27 = v26[7] + 16 * v20;
      swift_bridgeObjectRelease(*(LiteMessageServiceSession **)(v27 + 8), v13, v14, v15, v16, v17, v18, v19);
      *(void *)uint64_t v27 = a1;
      *(void *)(v27 + _Block_object_dispose(va, 8) = a2;
      return;
    }

unint64_t specialized LiteMessageServiceSession.downgradeRequestedHandles.getter()
{
  uint64_t v0 = swift_allocObject(&unk_4A028, 24LL, 7LL);
  *(void *)(v0 + 16) = 0LL;
  id v1 = [(id)objc_opt_self(IMDDatabase) synchronousDatabase];
  swift_bridgeObjectRetain(0x800000000003DB10LL);
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease((LiteMessageServiceSession *)0x800000000003DB10LL, v3, v4, v5, v6, v7, v8, v9);
  aBlock[4] = partial apply for closure #1 in LiteMessageServiceSession.downgradeRequestedHandles.getter;
  uint64_t v25 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Data?) -> ();
  aBlock[3] = &block_descriptor_5;
  id v10 = _Block_copy(aBlock);
  uint64_t v11 = v25;
  swift_retain(v0);
  swift_release(v11);
  [v1 fetchDataForKey:v2 completionHandler:v10];
  _Block_release(v10);
  swift_unknownObjectRelease(v1);

  swift_beginAccess(v0 + 16, aBlock, 0LL, 0LL);
  uint64_t v12 = *(void **)(v0 + 16);
  if (v12
    && (unint64_t v23 = 0LL,
        id v13 = v12,
        static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(),
        v13,
        (unint64_t v14 = v23) != 0))
  {
    swift_release(v0);
  }

  else
  {
    unint64_t v14 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
    swift_release(v0);
    swift_bridgeObjectRelease(0LL, v15, v16, v17, v18, v19, v20, v21);
  }

  return v14;
}

uint64_t specialized LiteMessageServiceSession.downgradeRequestedHandles.setter( LiteMessageServiceSession *a1)
{
  NSString v2 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1, v4, v5, v6, v7, v8, v9, v10);
  id v30 = 0LL;
  id v11 = [v2 archivedDataWithRootObject:isa requiringSecureCoding:1 error:&v30];

  id v12 = v30;
  if (v11)
  {
    uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
    unint64_t v15 = v14;

    id v16 = [(id)objc_opt_self(IMDDatabase) synchronousDatabase];
    Class v17 = Data._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRetain(0x800000000003DB10LL);
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease((LiteMessageServiceSession *)0x800000000003DB10LL, v19, v20, v21, v22, v23, v24, v25);
    [v16 storeData:v17 forKey:v18];
    swift_unknownObjectRelease(v16);

    return outlined consume of Data._Representation(v13, v15);
  }

  else
  {
    uint64_t v27 = v12;
    uint64_t v28 = _convertNSErrorToError(_:)(v12);

    swift_willThrow(v29);
    return swift_errorRelease(v28);
  }

uint64_t specialized LiteMessageServiceSession.sentDowngradeRequest(toHandleID:fromID:)( uint64_t a1, LiteMessageServiceSession *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = Logger.liteSession.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v13 = swift_bridgeObjectRetain_n(a4, 2LL);
  unint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc(22LL, -1LL);
    uint64_t v38 = swift_slowAlloc(64LL, -1LL);
    uint64_t v42 = (LiteMessageServiceSession *)v38;
    *(_DWORD *)uint64_t v16 = 136315394;
    uint64_t v39 = v8;
    swift_bridgeObjectRetain(a2);
    uint64_t v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, (unint64_t)a2, (uint64_t *)&v42);
    uint64_t v40 = a1;
    uint64_t v41 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    *(_WORD *)(v16 + 12) = 2080;
    swift_bridgeObjectRetain(a4);
    uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, (uint64_t *)&v42);
    a1 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease_n(a4, 3LL);
    _os_log_impl(&dword_0, v14, v15, "Noting chat %s was downgraded for fromID %s", (uint8_t *)v16, 0x16u);
    uint64_t v18 = v38;
    swift_arrayDestroy(v38, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v39);
  }

  else
  {

    swift_bridgeObjectRelease_n(a4, 2LL);
    swift_bridgeObjectRelease_n(a2, 2LL);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

  unint64_t v19 = specialized LiteMessageServiceSession.downgradeRequestedHandles.getter();
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
  uint64_t v42 = (LiteMessageServiceSession *)v19;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)( a3,  a4,  a1,  (uint64_t)a2,  isUniquelyReferenced_nonNull_native);
  id v21 = v42;
  swift_bridgeObjectRelease(a2, v22, v23, v24, v25, v26, v27, v28);
  swift_bridgeObjectRelease((LiteMessageServiceSession *)0x8000000000000000LL, v29, v30, v31, v32, v33, v34, v35);
  return specialized LiteMessageServiceSession.downgradeRequestedHandles.setter(v21);
}

uint64_t sub_2B6E0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void partial apply for closure #1 in LiteMessageServiceSession.downgradeRequestedHandles.getter( uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
  {
    v21[10] = v2;
    v21[12] = v3;
    v21[13] = v4;
    unsigned __int8 v7 = (void **)(v2 + 16);
    type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for NSKeyedUnarchiver,  &OBJC_CLASS___NSKeyedUnarchiver_ptr);
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
    uint64_t v9 = swift_allocObject(v8, 48LL, 7LL);
    *(_OWORD *)(v9 + 16) = xmmword_3BA00;
    uint64_t v10 = type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for NSDictionary,  &OBJC_CLASS___NSDictionary_ptr);
    *(void *)(v9 + 32) = v10;
    *(void *)(v9 + 40) = type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for NSString,  &OBJC_CLASS___NSString_ptr);
    outlined copy of Data._Representation(a1, a2);
    static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)(v21, v9, a1, a2);
    outlined consume of Data?(a1, a2);
    swift_bridgeObjectRelease((LiteMessageServiceSession *)v9, v11, v12, v13, v14, v15, v16, v17);
    if (v21[3])
    {
      else {
        uint64_t v18 = 0LL;
      }
    }

    else
    {
      outlined destroy of TaskPriority?((uint64_t)v21, &demangling cache variable for type metadata for Any?);
      uint64_t v18 = 0LL;
    }

    swift_beginAccess(v7, v21, 1LL, 0LL);
    unint64_t v19 = *v7;
    *unsigned __int8 v7 = v18;
  }

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper_1(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_2B8B4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t LiteMessageContext.identifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t LiteMessageContext.senderID.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain(*(void *)(v0 + 24));
  return v1;
}

uint64_t LiteMessageContext.recipientID.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain(*(void *)(v0 + 40));
  return v1;
}

uint64_t LiteMessageContext.isFromMe.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t LiteMessageContext.date.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for LiteMessageContext(0LL) + 32);
  uint64_t v4 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t type metadata accessor for LiteMessageContext(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for LiteMessageContext;
  if (!type metadata singleton initialization cache for LiteMessageContext) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LiteMessageContext);
  }
  return result;
}

uint64_t LiteMessageContext.sentOrReceivedOnSatellite.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for LiteMessageContext(0LL) + 36));
}

uint64_t LiteMessageContext.preferredService.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for LiteMessageContext(0LL) + 40));
}

uint64_t LiteMessageContext.init(identifier:senderID:recipientID:isFromMe:date:sentOrReceivedOnSatellite:preferredService:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11)
{
  *(void *)a9 = a1;
  *(void *)(a9 + _Block_object_dispose(va, 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(_BYTE *)(a9 + 4_Block_object_dispose(va, 8) = a7;
  id v13 = (int *)type metadata accessor for LiteMessageContext(0LL);
  uint64_t v14 = a9 + v13[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32LL))(v14, a8, v15);
  *(_BYTE *)(a9 + v13[9]) = a10;
  *(void *)(a9 + v13[10]) = a11;
  return result;
}

void *initializeBufferWithCopyOfBuffer for LiteMessageContext(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v17 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v17);
  }

  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[4];
    uint64_t v10 = a2[5];
    *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = *((_BYTE *)a2 + 48);
    uint64_t v11 = a3[8];
    uint64_t v12 = a1 + v11;
    uint64_t v13 = (uint64_t)a2 + v11;
    *(void *)(a1 + 32) = v9;
    *(void *)(a1 + 40) = v10;
    uint64_t v14 = type metadata accessor for Date(0LL);
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
    v15(v12, v13, v14);
    uint64_t v16 = a3[10];
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *(void *)((char *)v4 + v16) = *(uint64_t *)((char *)a2 + v16);
  }

  return v4;
}

uint64_t destroy for LiteMessageContext(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t initializeWithCopy for LiteMessageContext(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 48);
  uint64_t v10 = a3[8];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  v14(v11, v12, v13);
  uint64_t v15 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(void *)(a1 + v15) = *(void *)(a2 + v15);
  return a1;
}

uint64_t assignWithCopy for LiteMessageContext(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 48);
  uint64_t v12 = a3[8];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24LL))(v13, v14, v15);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  return a1;
}

uint64_t initializeWithTake for LiteMessageContext(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 48);
  uint64_t v7 = a3[8];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  uint64_t v11 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  return a1;
}

uint64_t assignWithTake for LiteMessageContext(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v10;
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 48);
  uint64_t v12 = a3[8];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40LL))(v13, v14, v15);
  uint64_t v16 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for LiteMessageContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_2BEF0);
}

uint64_t sub_2BEF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 32),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for LiteMessageContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_2BF78);
}

uint64_t sub_2BF78(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + _Block_object_dispose(va, 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 32),  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata completion function for LiteMessageContext(uint64_t a1)
{
  v4[0] = &unk_3C038;
  v4[1] = &unk_3C038;
  v4[2] = &unk_3C038;
  v4[3] = &unk_3C050;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[4] = *(void *)(result - 8) + 64LL;
    v4[5] = &unk_3C050;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256LL, 7LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void type metadata accessor for IMIDSOffGridPreferredServiceType()
{
  if (!lazy cache variable for type metadata for IMIDSOffGridPreferredServiceType)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, &unk_4A0A0);
    if (!v1) {
      atomic_store( ForeignTypeMetadata,  (unint64_t *)&lazy cache variable for type metadata for IMIDSOffGridPreferredServiceType);
    }
  }

uint64_t LiteMessageAcknowledgement.init(associatedMessageType:)(uint64_t a1)
{
  uint64_t v1 = a1 - 2000;
  uint64_t result = 0LL;
  switch(v1)
  {
    case 0LL:
      return result;
    case 1LL:
      uint64_t result = 1LL;
      break;
    case 2LL:
      uint64_t result = 2LL;
      break;
    case 3LL:
      uint64_t result = 3LL;
      break;
    case 4LL:
      uint64_t result = 4LL;
      break;
    case 5LL:
      uint64_t result = 5LL;
      break;
    case 6LL:
      uint64_t result = 6LL;
      break;
    default:
      uint64_t result = 14LL;
      break;
  }

  return result;
}

uint64_t IMMessageItem.IMMessageItemContentType.rawValue.getter(uint64_t result)
{
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance LiteMessageAcknowledgement@<X0>( unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized LiteMessageAcknowledgement.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance LiteMessageAcknowledgement( void *a1@<X8>)
{
  *a1 = *v1;
}

unint64_t specialized LiteMessageAcknowledgement.init(rawValue:)(unint64_t result)
{
  if (result >= 0xE) {
    return 14LL;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LiteMessageAcknowledgement and conformance LiteMessageAcknowledgement()
{
  unint64_t result = lazy protocol witness table cache variable for type LiteMessageAcknowledgement and conformance LiteMessageAcknowledgement;
  if (!lazy protocol witness table cache variable for type LiteMessageAcknowledgement and conformance LiteMessageAcknowledgement)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LiteMessageAcknowledgement,  &type metadata for LiteMessageAcknowledgement);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LiteMessageAcknowledgement and conformance LiteMessageAcknowledgement);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LiteMessageAcknowledgement and conformance LiteMessageAcknowledgement;
  if (!lazy protocol witness table cache variable for type LiteMessageAcknowledgement and conformance LiteMessageAcknowledgement)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LiteMessageAcknowledgement,  &type metadata for LiteMessageAcknowledgement);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LiteMessageAcknowledgement and conformance LiteMessageAcknowledgement);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for LiteMessageAcknowledgement(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }

uint64_t storeEnumTagSinglePayload for LiteMessageAcknowledgement( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF2) {
    return ((uint64_t (*)(void))((char *)&loc_2C300 + 4 * byte_3C0B3[v4]))();
  }
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_2C334 + 4 * byte_3C0AE[v4]))();
}

uint64_t sub_2C334(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2C33C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x2C344LL);
  }
  return result;
}

uint64_t sub_2C350(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x2C358LL);
  }
  *(_BYTE *)unint64_t result = a2 + 13;
  return result;
}

uint64_t sub_2C35C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2C364(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LiteMessageAcknowledgement()
{
  return &type metadata for LiteMessageAcknowledgement;
}

void IMMessageItem.liteData.getter()
{
  uint64_t v5 = v1;
  unsigned int v6 = v0;
  __int128 v104 = xmmword_3C190;
  char v105 = 0;
  if ([v0 isAssociatedMessageItem]
    && LiteMessageAcknowledgement.init(associatedMessageType:)((uint64_t)[v0 associatedMessageType]) != 14)
  {
    id v7 = &dword_0 + 2;
  }

  else
  {
    id v7 = [v0 isReply];
  }

  if (LiteMessageType.isCoreType.getter(v7))
  {
    char v3 = LiteMessageHeader.messageType.getter(v7, 0LL, 0LL);
    uint64_t v2 = v8;
    uint64_t v4 = v9;
    if (v1) {
      return;
    }
  }

  else
  {
    unint64_t v10 = lazy protocol witness table accessor for type LiteMessageEncodingError and conformance LiteMessageEncodingError();
    uint64_t v5 = swift_allocError(&type metadata for LiteMessageEncodingError, v10, 0LL, 0LL);
    *(void *)uint64_t v11 = 0LL;
    *(void *)(v11 + _Block_object_dispose(va, 8) = 0LL;
    *(_BYTE *)(v11 + 16) = 2;
    swift_willThrow(v5);
    if (v5) {
      return;
    }
  }

  if ([v6 isAssociatedMessageItem]
    && LiteMessageAcknowledgement.init(associatedMessageType:)((uint64_t)[v6 associatedMessageType]) != 14)
  {
    unsigned int v12 = 2;
  }

  else
  {
    unsigned int v12 = [v6 isReply];
  }

  id v13 = [v6 expressiveSendStyleID];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    uint64_t v17 = v16;
  }

  else
  {
    uint64_t v15 = 0LL;
    uint64_t v17 = 0LL;
  }

  v18.value._uint64_t countAndFlagsBits = v15;
  v18.value._object = v17;
  LOBYTE(v19) = LiteMessageEffect.init(expressiveSendStyleID:)(v18);
  uint64_t v20 = v19;
  if (!v12)
  {
    id v43 = [v6 plainBody];
    if (!v43)
    {
      id v44 = [v6 body];
      uint64_t v45 = v44;
      if (!v44)
      {
        unint64_t v47 = 0xE000000000000000LL;
        goto LABEL_29;
      }

      id v43 = [v44 string];
    }

    uint64_t v45 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    unint64_t v47 = v46;

LABEL_29:
    uint64_t v101 = &type metadata for LiteTextMessageContent;
    uint64_t v102 = &protocol witness table for LiteTextMessageContent;
    associatedMessageGUID._object = (void *)LiteMessageHeader.messageType.getter(v45, v47, v20);
    uint64_t v99 = v35;
    char v100 = (char)v36;
    goto LABEL_49;
  }

  if (v12 == 1)
  {
    id v21 = v4;
    id v22 = [v6 threadIdentifier];
    if (v22)
    {
      id v23 = v22;
      id v24 = (id)IMMessageThreadIdentifierGetOriginatorGUID();

      if (v24)
      {
        uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
        id v112 = v26;

        id v27 = [v6 plainBody];
        if (!v27)
        {
          id v28 = [v6 body];
          SEL v29 = v28;
          if (!v28)
          {
            id v31 = (void *)0xE000000000000000LL;
            goto LABEL_24;
          }

          id v27 = [v28 string];
        }

        SEL v29 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
        id v31 = v30;

LABEL_24:
        v32._uint64_t countAndFlagsBits = (uint64_t)v29;
        v32._object = v31;
        v33._uint64_t countAndFlagsBits = v25;
        v33._object = v112;
        LiteReplyMessageContent.init(text:threadOriginatorGUID:effect:)( &v110,  v32,  v33,  (iMessageLite::LiteMessageEffect_optional)v20);
        uint64_t v101 = &type metadata for LiteReplyMessageContent;
        uint64_t v102 = &protocol witness table for LiteReplyMessageContent;
        uint64_t v34 = swift_allocObject(&unk_4A260, 49LL, 7LL);
        associatedMessageGUID._object = (void *)v34;
        Swift::String threadOriginatorGUID = v110.threadOriginatorGUID;
        *(Swift::String *)(v34 + 16) = v110.text;
        *(Swift::String *)(v34 + 32) = threadOriginatorGUID;
        *(_BYTE *)(v34 + 4_Block_object_dispose(va, 8) = v110.effect.value;
        uint64_t v4 = v21;
        goto LABEL_49;
      }
    }

    id v64 = [v6 threadIdentifier];
    if (v64)
    {
      uint64_t v65 = v64;
      uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
      uint64_t v68 = v67;

      unint64_t v69 = lazy protocol witness table accessor for type LiteMessageEncodingError and conformance LiteMessageEncodingError();
      uint64_t v62 = swift_allocError(&type metadata for LiteMessageEncodingError, v69, 0LL, 0LL);
      uint64_t v5 = v62;
      *(void *)uint64_t v70 = v66;
      *(void *)(v70 + _Block_object_dispose(va, 8) = v68;
    }

    else
    {
      unint64_t v85 = lazy protocol witness table accessor for type LiteMessageEncodingError and conformance LiteMessageEncodingError();
      uint64_t v62 = swift_allocError(&type metadata for LiteMessageEncodingError, v85, 0LL, 0LL);
      uint64_t v5 = v62;
      *(void *)uint64_t v70 = 0LL;
      *(void *)(v70 + _Block_object_dispose(va, 8) = 0LL;
    }

    *(_BYTE *)(v70 + 16) = 0;
    uint64_t v4 = v21;
  }

  else
  {
    id v48 = [v6 associatedMessageGUID];
    id v49 = (id)IMAssociatedMessageDecodeGUID();

    if (v49)
    {
      id v112 = v4;
      uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
      uint64_t v52 = v51;

      iMessageLite::LiteMessageAcknowledgement v53 = LiteMessageAcknowledgement.init(associatedMessageType:)((uint64_t)[v6 associatedMessageType]);
      if (v53 != iMessageLite_LiteMessageAcknowledgement_unknownDefault)
      {
        iMessageLite::LiteMessageAcknowledgement v78 = v53;
        associatedMessageGUID._uint64_t countAndFlagsBits = v50;
        iMessageLite::LiteMessageAcknowledgement v109 = v53;
        char v108 = 6;
        unint64_t v79 = lazy protocol witness table accessor for type LiteMessageAcknowledgement and conformance LiteMessageAcknowledgement();
        dispatch thunk of RawRepresentable.rawValue.getter(&v107, &type metadata for LiteMessageAcknowledgement, v79);
        dispatch thunk of RawRepresentable.rawValue.getter(&v106, &type metadata for LiteMessageAcknowledgement, v79);
        if ((v107 == v106
           || (iMessageLite::LiteMessageAcknowledgement v109 = v78,
               char v108 = 13,
               dispatch thunk of RawRepresentable.rawValue.getter( &v107,  &type metadata for LiteMessageAcknowledgement,  v79),  dispatch thunk of RawRepresentable.rawValue.getter( &v106,  &type metadata for LiteMessageAcknowledgement,  v79),  v107 == v106))
          && (id v80 = objc_msgSend(v6, "associatedMessageEmoji", v50)) != 0)
        {
          uint64_t v81 = v80;
          uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
          uint64_t v84 = v83;
        }

        else
        {
          uint64_t v82 = 0LL;
          uint64_t v84 = 0LL;
        }

        v86._uint64_t countAndFlagsBits = associatedMessageGUID._countAndFlagsBits;
        v86._object = v52;
        v87.value._uint64_t countAndFlagsBits = v82;
        v87.value._object = v84;
        LiteAcknowledgmentMessageContent.init(associatedMessageType:associatedMessageGUID:emoji:)(&v111, v78, v86, v87);
        uint64_t v101 = &type metadata for LiteAcknowledgmentMessageContent;
        uint64_t v102 = &protocol witness table for LiteAcknowledgmentMessageContent;
        uint64_t v88 = swift_allocObject(&unk_4A238, 56LL, 7LL);
        associatedMessageGUID._object = (void *)v88;
        __int128 v89 = *(_OWORD *)&v111.associatedMessageGUID._object;
        *(_OWORD *)(v88 + 16) = *(_OWORD *)&v111.associatedMessageType;
        *(_OWORD *)(v88 + 32) = v89;
        *(void *)(v88 + 4_Block_object_dispose(va, 8) = v111.emoji.value._object;
        uint64_t v4 = v112;
        goto LABEL_49;
      }

      swift_bridgeObjectRelease(v52, v54, v55, v56, v57, v58, v59, v60);
      unint64_t v61 = lazy protocol witness table accessor for type LiteMessageEncodingError and conformance LiteMessageEncodingError();
      uint64_t v62 = swift_allocError(&type metadata for LiteMessageEncodingError, v61, 0LL, 0LL);
      uint64_t v5 = v62;
      *(_OWORD *)uint64_t v63 = xmmword_3C1A0;
      *(_BYTE *)(v63 + 16) = 2;
      uint64_t v4 = v112;
    }

    else
    {
      id v71 = [v6 associatedMessageGUID];
      if (v71)
      {
        uint64_t v72 = v71;
        uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
        uint64_t v75 = v74;

        unint64_t v76 = lazy protocol witness table accessor for type LiteMessageEncodingError and conformance LiteMessageEncodingError();
        uint64_t v62 = swift_allocError(&type metadata for LiteMessageEncodingError, v76, 0LL, 0LL);
        uint64_t v5 = v62;
        *(void *)uint64_t v77 = v73;
        *(void *)(v77 + _Block_object_dispose(va, 8) = v75;
      }

      else
      {
        unint64_t v90 = lazy protocol witness table accessor for type LiteMessageEncodingError and conformance LiteMessageEncodingError();
        uint64_t v62 = swift_allocError(&type metadata for LiteMessageEncodingError, v90, 0LL, 0LL);
        uint64_t v5 = v62;
        *(void *)uint64_t v77 = 0LL;
        *(void *)(v77 + _Block_object_dispose(va, 8) = 0LL;
      }

      *(_BYTE *)(v77 + 16) = 1;
    }
  }

  swift_willThrow(v62);
LABEL_49:
  if (v5)
  {
    swift_bridgeObjectRelease(v4, v35, v36, v37, v38, v39, v40, v41);
  }

  else
  {
    LiteMessage.init(header:content:)(v3, v2, (uint64_t)v4, (__int128 *)&associatedMessageGUID._object, (uint64_t)v103);
    protocol witness for BitPackable.append(to:) in conformance LiteMessage((uint64_t)&v104);
    outlined destroy of LiteMessage((uint64_t)v103, v91, v92, v93, v94, v95, v96, v97);
  }

uint64_t outlined destroy of LiteMessage( uint64_t a1, uint64_t a2, void *a3, void *a4, unsigned __int8 a5, void *a6, void *a7, void *a8)
{
  return a1;
}

uint64_t outlined copy of LiteMessageEncodingError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t destroy for LiteMessageEncodingError(uint64_t a1)
{
  return outlined consume of LiteMessageEncodingError(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of LiteMessageEncodingError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for LiteMessageEncodingError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  outlined copy of LiteMessageEncodingError(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for LiteMessageEncodingError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  outlined copy of LiteMessageEncodingError(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  unsigned __int8 v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of LiteMessageEncodingError(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for LiteMessageEncodingError(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of LiteMessageEncodingError(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for LiteMessageEncodingError()
{
  return &type metadata for LiteMessageEncodingError;
}

unint64_t lazy protocol witness table accessor for type LiteMessageEncodingError and conformance LiteMessageEncodingError()
{
  unint64_t result = lazy protocol witness table cache variable for type LiteMessageEncodingError and conformance LiteMessageEncodingError;
  if (!lazy protocol witness table cache variable for type LiteMessageEncodingError and conformance LiteMessageEncodingError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LiteMessageEncodingError,  &type metadata for LiteMessageEncodingError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LiteMessageEncodingError and conformance LiteMessageEncodingError);
  }

  return result;
}

uint64_t sub_2CC58()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_2CC84()
{
  return swift_deallocObject(v0, 49LL, 7LL);
}

uint64_t LiteTextMessageContent.text.getter(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t LiteTextMessageContent.effect.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void LiteTextMessageContent.append(to:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  v5._uint64_t countAndFlagsBits = a2;
  String.liteEscapedText.getter(a2, a3);
  object = (LiteMessageServiceSession *)v5._object;
  BitCollection.appendAsCompressedBytes(_:)(v5);
  if (v14)
  {
    swift_bridgeObjectRelease(object, v7, v8, v9, v10, v11, v12, v13);
  }

  else
  {
    swift_bridgeObjectRelease(object, v7, v8, v9, v10, v11, v12, v13);
    if (a4 != 13)
    {
      uint64_t v15 = LiteMessageEffect.rawValue.getter(a4);
      if (v15 < 0)
      {
        __break(1u);
      }

      else
      {
        unint64_t v16 = v15;
        do
        {
          if (v16 >= 8) {
            Swift::UInt8 v17 = v16 & 7 | 8;
          }
          else {
            Swift::UInt8 v17 = v16 & 7;
          }
          BitCollection.appendLeastSignificantBits(from:count:)(v17, 4u);
          BOOL v18 = v16 > 7;
          v16 >>= 3;
        }

        while (v18);
      }
    }
  }

void protocol witness for BitPackable.append(to:) in conformance LiteTextMessageContent(uint64_t a1)
{
}

uint64_t LiteReplyMessageContent.effect.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

void LiteReplyMessageContent.append(to:)()
{
  v1._uint64_t countAndFlagsBits = *(void *)v0;
  String.liteEscapedText.getter(*(void *)v0, *(void *)(v0 + 8));
  object = (LiteMessageServiceSession *)v1._object;
  BitCollection.appendAsCompressedBytes(_:)(v1);
  if (v10)
  {
    swift_bridgeObjectRelease(object, v3, v4, v5, v6, v7, v8, v9);
  }

  else
  {
    swift_bridgeObjectRelease(object, v3, v4, v5, v6, v7, v8, v9);
    BitCollection.append16UUIDBytes(_:)(*(Swift::String *)(v0 + 16));
    if (!v11)
    {
      int v12 = *(unsigned __int8 *)(v0 + 32);
      if (v12 != 13)
      {
        uint64_t v13 = LiteMessageEffect.rawValue.getter(v12);
        if (v13 < 0)
        {
          __break(1u);
        }

        else
        {
          unint64_t v14 = v13;
          do
          {
            if (v14 >= 8) {
              Swift::UInt8 v15 = v14 & 7 | 8;
            }
            else {
              Swift::UInt8 v15 = v14 & 7;
            }
            BitCollection.appendLeastSignificantBits(from:count:)(v15, 4u);
            BOOL v16 = v14 > 7;
            v14 >>= 3;
          }

          while (v16);
        }
      }
    }
  }

void __swiftcall LiteReplyMessageContent.init(text:threadOriginatorGUID:effect:)( iMessageLite::LiteReplyMessageContent *__return_ptr retstr, Swift::String text, Swift::String threadOriginatorGUID, iMessageLite::LiteMessageEffect_optional effect)
{
  retstr->text = text;
  retstr->Swift::String threadOriginatorGUID = threadOriginatorGUID;
  retstr->effect = effect;
}

void protocol witness for BitPackable.append(to:) in conformance LiteReplyMessageContent()
{
}

uint64_t LiteAcknowledgmentMessageContent.associatedMessageType.getter()
{
  return *v0;
}

uint64_t LiteAcknowledgmentMessageContent.associatedMessageGUID.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain(*(void *)(v0 + 16));
  return v1;
}

uint64_t LiteAcknowledgmentMessageContent.emoji.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain(*(void *)(v0 + 32));
  return v1;
}

void LiteAcknowledgmentMessageContent.append(to:)()
{
  char v1 = *v0;
  unint64_t v2 = IMMessageItem.IMMessageItemContentType.rawValue.getter(*v0);
  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }

  if (v2 > 0xFF)
  {
LABEL_11:
    __break(1u);
    return;
  }

  BitCollection.appendLeastSignificantBits(from:count:)(v2, 4u);
  BitCollection.append16UUIDBytes(_:)(*(Swift::String *)(v0 + 8));
  if (!v3)
  {
    char v14 = v1;
    char v13 = 6;
    unint64_t v4 = lazy protocol witness table accessor for type LiteMessageAcknowledgement and conformance LiteMessageAcknowledgement();
    dispatch thunk of RawRepresentable.rawValue.getter(&v10, &type metadata for LiteMessageAcknowledgement, v4);
    dispatch thunk of RawRepresentable.rawValue.getter(&v9, &type metadata for LiteMessageAcknowledgement, v4);
    if (v10 == v9
      || (char v14 = v1,
          char v13 = 13,
          dispatch thunk of RawRepresentable.rawValue.getter(&v10, &type metadata for LiteMessageAcknowledgement, v4),
          dispatch thunk of RawRepresentable.rawValue.getter(&v9, &type metadata for LiteMessageAcknowledgement, v4),
          v10 == v9))
    {
      outlined init with take of String?((uint64_t)(v0 + 24), (uint64_t)v11);
      outlined init with take of String?((uint64_t)v11, (uint64_t)&v12);
      object = v12._object;
      if (v12._object)
      {
        uint64_t countAndFlagsBits = v12._countAndFlagsBits;
        BitCollection.appendAsVarint8PrefixedUTF8Bytes(_:)(*(Swift::String *)(&object - 1));
      }

      else
      {
        unint64_t v7 = lazy protocol witness table accessor for type LiteMessageContentError and conformance LiteMessageContentError();
        uint64_t v8 = swift_allocError(&type metadata for LiteMessageContentError, v7, 0LL, 0LL);
        swift_willThrow(v8);
      }
    }
  }

uint64_t outlined init with take of String?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type LiteMessageContentError and conformance LiteMessageContentError()
{
  unint64_t result = lazy protocol witness table cache variable for type LiteMessageContentError and conformance LiteMessageContentError;
  if (!lazy protocol witness table cache variable for type LiteMessageContentError and conformance LiteMessageContentError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LiteMessageContentError,  &type metadata for LiteMessageContentError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LiteMessageContentError and conformance LiteMessageContentError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LiteMessageContentError and conformance LiteMessageContentError;
  if (!lazy protocol witness table cache variable for type LiteMessageContentError and conformance LiteMessageContentError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LiteMessageContentError,  &type metadata for LiteMessageContentError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LiteMessageContentError and conformance LiteMessageContentError);
  }

  return result;
}

void __swiftcall LiteAcknowledgmentMessageContent.init(associatedMessageType:associatedMessageGUID:emoji:)( iMessageLite::LiteAcknowledgmentMessageContent *__return_ptr retstr, iMessageLite::LiteMessageAcknowledgement associatedMessageType, Swift::String associatedMessageGUID, Swift::String_optional emoji)
{
  retstr->associatedMessageType = associatedMessageType;
  retstr->Swift::String associatedMessageGUID = associatedMessageGUID;
  retstr->emojuint64_t i = emoji;
}

void protocol witness for BitPackable.append(to:) in conformance LiteAcknowledgmentMessageContent()
{
}

void LiteMultipackMessageContent.append(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    uint64_t v19 = protocol witness for BitPackable.append(to:) in conformance LiteMessage;
    swift_bridgeObjectRetain(a2);
    uint64_t v4 = 0LL;
    while (1)
    {
      __int128 v17 = xmmword_3C190;
      char v18 = 0;
      v19((uint64_t)&v17);
      __int128 v5 = v17;
      if (v2)
      {
        outlined consume of Data._Representation(v17, *((unint64_t *)&v17 + 1));
LABEL_10:
        swift_bridgeObjectRelease((LiteMessageServiceSession *)a2, v9, v10, v11, v12, v13, v14, v15);
        return;
      }

      uint64_t v6 = BitCollection.endIndex.getter(v17, *((unint64_t *)&v17 + 1));
      if (v6 < 0) {
        break;
      }
      unint64_t v7 = v6;
      ++v4;
      do
      {
        BitCollection.appendLeastSignificantBits(from:count:)(v7 & 0x7F | ((v7 > 0x7F) << 7), 8u);
        BOOL v8 = v7 > 0x7F;
        v7 >>= 7;
      }

      while (v8);
      BitCollection.append(_:)(v5, *((unint64_t *)&v5 + 1));
      outlined consume of Data._Representation(v5, *((unint64_t *)&v5 + 1));
      if (v4 == v3) {
        goto LABEL_10;
      }
    }

    __break(1u);
  }

void protocol witness for BitPackable.append(to:) in conformance LiteMultipackMessageContent(uint64_t a1)
{
}

uint64_t storeEnumTagSinglePayload for LiteMessageContentError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_2D340 + 4 * asc_3C230[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_2D360 + 4 * byte_3C235[v4]))();
  }
}

_BYTE *sub_2D340(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_2D360(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_2D368(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_2D370(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_2D378(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_2D380(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for LiteMessageContentError()
{
  return &type metadata for LiteMessageContentError;
}

uint64_t destroy for LiteTextMessageContent(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

uint64_t initializeBufferWithCopyOfBuffer for LiteTextMessageContent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for LiteTextMessageContent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for LiteTextMessageContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for LiteTextMessageContent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LiteTextMessageContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(va, 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for LiteTextMessageContent()
{
  return &type metadata for LiteTextMessageContent;
}

uint64_t destroy for LiteReplyMessageContent(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

uint64_t initializeWithCopy for LiteReplyMessageContent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for LiteReplyMessageContent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for LiteReplyMessageContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for LiteReplyMessageContent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LiteReplyMessageContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(va, 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for LiteReplyMessageContent()
{
  return &type metadata for LiteReplyMessageContent;
}

uint64_t destroy for LiteAcknowledgmentMessageContent(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 32));
}

uint64_t initializeWithCopy for LiteAcknowledgmentMessageContent(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for LiteAcknowledgmentMessageContent(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for LiteAcknowledgmentMessageContent(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for LiteAcknowledgmentMessageContent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LiteAcknowledgmentMessageContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for LiteAcknowledgmentMessageContent()
{
  return &type metadata for LiteAcknowledgmentMessageContent;
}

ValueMetadata *type metadata accessor for LiteMultipackMessageContent()
{
  return &type metadata for LiteMultipackMessageContent;
}

uint64_t LiteMessageServiceSession.encryptAndSendMessageItem(_:chatIdentifier:chatStyle:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_BYTE *)(v5 + 392) = a4;
  *(void *)(v5 + 200) = a3;
  *(void *)(v5 + 20_Block_object_dispose(va, 8) = v4;
  *(void *)(v5 + 184) = a1;
  *(void *)(v5 + 192) = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  *(void *)(v5 + 216) = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Logger(0LL);
  *(void *)(v5 + 224) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v5 + 232) = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v5 + 240) = swift_task_alloc(v9);
  *(void *)(v5 + 24_Block_object_dispose(va, 8) = swift_task_alloc(v9);
  uint64_t v10 = type metadata accessor for MainActor(0LL);
  *(void *)(v5 + 256) = static MainActor.shared.getter(v10);
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter(v10, &protocol witness table for MainActor);
  *(void *)(v5 + 264) = v11;
  *(void *)(v5 + 272) = v12;
  return swift_task_switch(LiteMessageServiceSession.encryptAndSendMessageItem(_:chatIdentifier:chatStyle:), v11, v12);
}

void LiteMessageServiceSession.encryptAndSendMessageItem(_:chatIdentifier:chatStyle:)()
{
  char v1 = *(void **)(v0 + 208);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 392);
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v1 chatForChatIdentifier:v3 style:v2];
  *(void *)(v0 + 280) = v4;

  if (!v4)
  {
    char v11 = *(_BYTE *)(v0 + 392);
    uint64_t v13 = *(void *)(v0 + 192);
    uint64_t v12 = *(void *)(v0 + 200);
    swift_release(*(void *)(v0 + 256));
    unint64_t v14 = lazy protocol witness table accessor for type LiteMessageSendError and conformance LiteMessageSendError();
    swift_allocError(&type metadata for LiteMessageSendError, v14, 0LL, 0LL);
    *(void *)uint64_t v15 = v13;
    *(void *)(v15 + _Block_object_dispose(va, 8) = v12;
    *(_BYTE *)(v15 + 16) = v11;
    *(_BYTE *)(v15 + 17) = 0;
    swift_bridgeObjectRetain(v12);
    swift_willThrow(v16);
LABEL_13:
    uint64_t v22 = *(void *)(v0 + 240);
    uint64_t v23 = *(void *)(v0 + 216);
    swift_task_dealloc(*(void *)(v0 + 248));
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    (*(void (**)(void))(v0 + 8))();
    return;
  }

  if ([v4 style] != 45)
  {
    swift_release(*(void *)(v0 + 256));
    unint64_t v17 = lazy protocol witness table accessor for type LiteMessageSendError and conformance LiteMessageSendError();
    uint64_t v18 = swift_allocError(&type metadata for LiteMessageSendError, v17, 0LL, 0LL);
    __int128 v20 = xmmword_3C450;
LABEL_10:
    *(_OWORD *)uint64_t v19 = v20;
LABEL_11:
    *(_WORD *)(v19 + 16) = 512;
    swift_willThrow(v18);
LABEL_12:

    goto LABEL_13;
  }

  uint64_t v5 = (void **)(v0 + 184);
  IMMessageItem.canSendAsLiteMessage.getter();
  if ((v6 & 1) == 0)
  {
    swift_release(*(void *)(v0 + 256));
    unint64_t v21 = lazy protocol witness table accessor for type LiteMessageSendError and conformance LiteMessageSendError();
    uint64_t v18 = swift_allocError(&type metadata for LiteMessageSendError, v21, 0LL, 0LL);
    __int128 v20 = xmmword_3C460;
    goto LABEL_10;
  }

  IMDChat.participantURI.getter();
  *(void *)(v0 + 28_Block_object_dispose(va, 8) = v7;
  if (!v7)
  {
    swift_release(*(void *)(v0 + 256));
    unint64_t v24 = lazy protocol witness table accessor for type LiteMessageSendError and conformance LiteMessageSendError();
    uint64_t v18 = swift_allocError(&type metadata for LiteMessageSendError, v24, 0LL, 0LL);
    *(void *)uint64_t v19 = 0LL;
    *(void *)(v19 + _Block_object_dispose(va, 8) = 0LL;
    goto LABEL_11;
  }

  uint64_t v8 = v7;
  IMDChat.bestSendingHandle.getter();
  if (v9)
  {
    uint64_t v10 = v9;
  }

  else
  {
    id v25 = [*(id *)(v0 + 208) account];
    id v26 = [v25 loginID];

    if (!v26)
    {
LABEL_19:
      swift_release(*(void *)(v0 + 256));
      unint64_t v40 = lazy protocol witness table accessor for type LiteMessageSendError and conformance LiteMessageSendError();
      uint64_t v41 = swift_allocError(&type metadata for LiteMessageSendError, v40, 0LL, 0LL);
      *(_OWORD *)uint64_t v42 = xmmword_3C1A0;
      *(_WORD *)(v42 + 16) = 512;
      swift_willThrow(v41);

      goto LABEL_12;
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    uint64_t v10 = v27;
  }

  id v28 = objc_allocWithZone(&OBJC_CLASS___IDSURI);
  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10, v30, v31, v32, v33, v34, v35, v36);
  id v37 = [v28 initWithUnprefixedURI:v29];
  *(void *)(v0 + 296) = v37;

  if (!v37) {
    goto LABEL_19;
  }
  IMMessageItem.liteData.getter();
  *(void *)(v0 + 304) = v38;
  *(void *)(v0 + 312) = v39;
  uint64_t v43 = v38;
  unint64_t v44 = v39;
  uint64_t v45 = *v5;
  v46.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v125 = 0x2D6574696CLL;
  uint64_t v126 = (LiteMessageServiceSession *)0xE500000000000000LL;
  id v47 = [v45 guid];
  if (v47)
  {
    id v48 = v47;
    uint64_t v117 = *(void *)(v0 + 232);
    os_log_t loga = *(os_log_t *)(v0 + 248);
    uint64_t v122 = *(void *)(v0 + 224);
    uint64_t v124 = *(void **)(v0 + 184);
    uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    uint64_t v51 = v50;

    v52._uint64_t countAndFlagsBits = v49;
    v52._object = v51;
    String.append(_:)(v52);
    swift_bridgeObjectRelease(v51, v53, v54, v55, v56, v57, v58, v59);
    uint64_t v60 = (void *)objc_opt_self(&OBJC_CLASS___IMInternalPayloadUtilities);
    v61._uint64_t countAndFlagsBits = 0x617461642ELL;
    v61._object = (void *)0xE500000000000000LL;
    String.append(_:)(v61);
    NSString v62 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v126, v63, v64, v65, v66, v67, v68, v69);
    [v60 writeDataPayloadToDisk:v46.super.isa fileName:v62];

    id v70 = objc_allocWithZone(&OBJC_CLASS___IDSOffGridMessage);
    outlined copy of Data._Representation(v43, v44);
    id v71 = v37;
    id v72 = v8;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v116 = [v70 initWithMessage:isa senderURI:v71 recipientURI:v72];
    *(void *)(v0 + 320) = v116;

    outlined consume of Data._Representation(v43, v44);
    uint64_t v74 = Logger.liteSession.unsafeMutableAddressor();
    *(void *)(v0 + 32_Block_object_dispose(va, 8) = v74;
    uint64_t v75 = *(void (**)(os_log_t, uint64_t, uint64_t))(v117 + 16);
    *(void *)(v0 + 336) = v75;
    v75(loga, v74, v122);
    id v76 = v71;
    id v77 = v72;
    id v78 = v124;
    id v79 = v76;
    id v80 = v77;
    uint64_t v81 = (void *)Logger.logObject.getter(v78);
    os_log_type_t v82 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled((os_log_t)v81, v82))
    {
      uint64_t v102 = *(void *)(v0 + 248);
      uint64_t v103 = *(void *)(v0 + 224);
      uint64_t v104 = *(void *)(v0 + 232);
      char v105 = *(void **)(v0 + 184);

      uint64_t v101 = *(void (**)(uint64_t, uint64_t))(v104 + 8);
      v101(v102, v103);
      goto LABEL_25;
    }

    os_log_type_t v114 = v82;
    uint64_t v121 = v79;
    uint64_t v123 = v80;
    log = (os_log_s *)v81;
    uint64_t v83 = *v5;
    uint64_t v84 = swift_slowAlloc(32LL, -1LL);
    id v115 = (void *)swift_slowAlloc(16LL, -1LL);
    uint64_t v118 = swift_slowAlloc(32LL, -1LL);
    uint64_t v125 = v118;
    *(_DWORD *)uint64_t v84 = 136315650;
    id v85 = [v83 guid];
    if (v85)
    {
      Swift::String v86 = v85;
      uint64_t v111 = *(void *)(v0 + 232);
      uint64_t v112 = *(void *)(v0 + 224);
      uint64_t v113 = *(void *)(v0 + 248);
      Swift::String_optional v87 = *(void **)(v0 + 184);
      uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
      unint64_t v90 = v89;

      *(void *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( v88,  (unint64_t)v90,  &v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v84 + 4, v84 + 12);
      swift_bridgeObjectRelease(v90, v91, v92, v93, v94, v95, v96, v97);

      *(_WORD *)(v84 + 12) = 2112;
      *(void *)(v0 + 16_Block_object_dispose(va, 8) = v121;
      id v98 = v121;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v84 + 14, v84 + 22);
      *id v115 = v37;

      *(_WORD *)(v84 + 22) = 2112;
      *(void *)(v0 + 176) = v80;
      id v99 = v80;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v84 + 24, v84 + 32);
      v115[1] = v8;

      _os_log_impl(&dword_0, log, v114, "Encrypting message %s (senderURI: %@, recipientURI: %@", (uint8_t *)v84, 0x20u);
      uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy(v115, 2LL, v100);
      swift_slowDealloc(v115, -1LL, -1LL);
      swift_arrayDestroy(v118, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v118, -1LL, -1LL);
      swift_slowDealloc(v84, -1LL, -1LL);

      uint64_t v101 = *(void (**)(uint64_t, uint64_t))(v111 + 8);
      v101(v113, v112);
LABEL_25:
      uint64_t v106 = v0 + 16;
      *(void *)(v0 + 344) = v101;
      id v107 = LiteMessageServiceSession.offGridMessenger.getter();
      *(void *)(v0 + 352) = v107;
      *(void *)(v0 + 56) = v0 + 120;
      *(void *)(v0 + 16) = v0;
      *(void *)(v0 + 24) = LiteMessageServiceSession.encryptAndSendMessageItem(_:chatIdentifier:chatStyle:);
      uint64_t v108 = swift_continuation_init(v0 + 16, 1LL);
      *(void *)(v0 + 80) = _NSConcreteStackBlock;
      iMessageLite::LiteMessageAcknowledgement v109 = (void *)(v0 + 80);
      v109[1] = 0x40000000LL;
      v109[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned IDSOffGridMessage?, @unowned NSString?, @unowned NSError?) -> () with result type (IDSOffGridMessage, String);
      v109[3] = &block_descriptor_6;
      v109[4] = v108;
      [v107 encryptOffGridMessage:v116 completion:v109];
      swift_continuation_await(v106);
      return;
    }
  }

  else
  {
    __break(1u);
  }

  iMessageLite::LiteReplyMessageContent v110 = *v5;

  __break(1u);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  LiteMessageServiceSession *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  void *v12;
  void *v13;
  void *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  LiteMessageServiceSession *v32;
  LiteMessageServiceSession *v33;
  uint64_t v34;
  LiteMessageServiceSession *v35;
  id v36;
  os_log_s *v37;
  os_log_type_t v38;
  char **v39;
  void *v40;
  uint64_t v41;
  id v42;
  const char *v43;
  void *v44;
  void *v45;
  unsigned __int8 v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  LiteMessageServiceSession *v53;
  LiteMessageServiceSession *v54;
  SEL v55;
  id v56;
  id v57;
  unsigned __int8 v58;
  id v59;
  id v60;
  id v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  id v68;
  NSString v69;
  SEL v70;
  id v71;
  id v72;
  unsigned __int8 v73;
  id v74;
  id v75;
  id v76;
  NSString v77;
  LiteMessageServiceSession *v78;
  LiteMessageServiceSession *v79;
  SEL v80;
  id v81;
  id v82;
  unsigned __int8 v83;
  id v84;
  id v85;
  id v86;
  void *v87;
  void *v88;
  id v89;
  uint64_t v90;
  LiteMessageServiceSession *v91;
  LiteMessageServiceSession *v92;
  Swift::String v93;
  SEL v94;
  id v95;
  id v96;
  unsigned __int8 v97;
  id v98;
  id v99;
  id v100;
  void *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(uint64_t, uint64_t);
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111[2];
  char v1 = *(void **)(v0 + 352);
  uint64_t v2 = *(void *)(v0 + 216);
  id v4 = *(void **)(v0 + 120);
  NSString v3 = *(void *)(v0 + 128);
  *(void *)(v0 + 36_Block_object_dispose(va, 8) = v4;
  uint64_t v5 = *(LiteMessageServiceSession **)(v0 + 136);

  UUID.init(uuidString:)(v3, v5);
  char v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v2, 1LL, v6) == 1)
  {
    uint64_t v15 = *(void *)(v0 + 312);
    uint64_t v16 = *(void **)(v0 + 320);
    uint64_t v18 = *(void **)(v0 + 296);
    unint64_t v17 = *(void *)(v0 + 304);
    uint64_t v19 = *(void **)(v0 + 288);
    iMessageLite::LiteMessageAcknowledgement v109 = *(void **)(v0 + 280);
    __int128 v20 = *(void *)(v0 + 216);
    swift_release(*(void *)(v0 + 256));
    outlined destroy of UUID?(v20);
    unint64_t v21 = lazy protocol witness table accessor for type LiteMessageSendError and conformance LiteMessageSendError();
    uint64_t v22 = swift_allocError(&type metadata for LiteMessageSendError, v21, 0LL, 0LL);
    *(void *)uint64_t v23 = v3;
    *(void *)(v23 + _Block_object_dispose(va, 8) = v5;
    *(_WORD *)(v23 + 16) = 256;
    swift_willThrow(v22);

    outlined consume of Data._Representation(v17, v15);
    unint64_t v24 = *(void *)(v0 + 240);
    id v25 = *(void *)(v0 + 216);
    swift_task_dealloc(*(void *)(v0 + 248));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    (*(void (**)(void))(v0 + 8))();
    return;
  }

  iMessageLite::LiteReplyMessageContent v110 = (uint64_t)v4;
  id v27 = *(void *)(v0 + 328);
  id v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 336);
  id v28 = *(void *)(v0 + 240);
  SEL v30 = *(void *)(v0 + 216);
  NSString v29 = *(void *)(v0 + 224);
  id v31 = *(void **)(v0 + 184);
  swift_bridgeObjectRelease(v5, v8, v9, v10, v11, v12, v13, v14);
  uint64_t v108 = UUID.uuidString.getter();
  unsigned __int8 v33 = v32;
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v30, v6);
  id v34 = v27;
  id v35 = v33;
  v26(v28, v34, v29);
  id v36 = v31;
  swift_bridgeObjectRetain_n(v35, 2LL);
  id v37 = (os_log_s *)Logger.logObject.getter(v36);
  uint64_t v38 = static os_log_type_t.default.getter();
  unint64_t v39 = &selRef_sentDowngradeRequestToHandleID_fromID_;
  if (os_log_type_enabled(v37, v38))
  {
    id v107 = (unint64_t)v35;
    unint64_t v40 = *(void **)(v0 + 184);
    uint64_t v41 = swift_slowAlloc(22LL, -1LL);
    uint64_t v106 = swift_slowAlloc(64LL, -1LL);
    v111[0] = v106;
    *(_DWORD *)uint64_t v41 = 136315394;
    uint64_t v42 = [v40 guid];
    if (!v42)
    {
      uint64_t v102 = *(void **)(v0 + 184);
      swift_bridgeObjectRelease(v35, v43, v44, v45, v46, v47, v48, v49);

      __break(1u);
      return;
    }

    uint64_t v50 = v42;
    uint64_t v104 = *(void *)(v0 + 240);
    char v105 = *(void (**)(uint64_t, uint64_t))(v0 + 344);
    uint64_t v103 = *(void *)(v0 + 224);
    uint64_t v51 = *(void **)(v0 + 184);
    Swift::String v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    id v54 = v53;

    *(void *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, (unint64_t)v54, v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v41 + 4, v41 + 12);
    swift_bridgeObjectRelease(v54, v55, v56, v57, v58, v59, v60, v61);

    *(_WORD *)(v41 + 12) = 2080;
    id v35 = (LiteMessageServiceSession *)v107;
    swift_bridgeObjectRetain(v107);
    *(void *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v108, v107, v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v41 + 14, v41 + 22);
    swift_bridgeObjectRelease_n(v107, 3LL);
    _os_log_impl(&dword_0, v37, v38, "Reassigning %s to %s", (uint8_t *)v41, 0x16u);
    swift_arrayDestroy(v106, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v106, -1LL, -1LL);
    swift_slowDealloc(v41, -1LL, -1LL);

    v105(v104, v103);
    unint64_t v39 = &selRef_sentDowngradeRequestToHandleID_fromID_;
  }

  else
  {
    NSString v62 = *(void (**)(uint64_t, uint64_t))(v0 + 344);
    SEL v63 = *(void *)(v0 + 240);
    id v64 = *(void *)(v0 + 224);
    id v65 = *(void **)(v0 + 184);

    swift_bridgeObjectRelease_n(v35, 2LL);
    v62(v63, v64);
  }

  unsigned __int8 v66 = *(void **)(v0 + 296);
  id v67 = *(void **)(v0 + 184);
  LiteMessageServiceSession.removePreviousServiceOriginal(of:)(v67);
  id v68 = [v67 v39[20]];
  [v67 setFallbackHash:v68];

  id v69 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v35, v70, v71, v72, v73, v74, v75, v76);
  [v67 setGuid:v69];

  id v77 = [v66 unprefixedURI];
  if (!v77)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    id v79 = v78;
    id v77 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v79, v80, v81, v82, v83, v84, v85, v86);
  }

  Swift::String_optional v87 = *(void **)(v0 + 296);
  uint64_t v88 = *(void **)(v0 + 184);
  [v88 setDestinationCallerID:v77];

  [v88 setErrorCode:0];
  [v88 setIsPendingSatelliteSend:0];
  __int128 v89 = [v87 unprefixedURI];
  unint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
  id v92 = v91;

  v93._uint64_t countAndFlagsBits = v90;
  v93._object = v92;
  IMDChat.updateLastAddressedHandleWithMatchingSIM(to:)(v93);
  swift_bridgeObjectRelease(v92, v94, v95, v96, v97, v98, v99, v100);
  uint64_t v101 = (void *)swift_task_alloc(dword_4E004);
  *(void *)(v0 + 376) = v101;
  *uint64_t v101 = v0;
  v101[1] = LiteMessageServiceSession.encryptAndSendMessageItem(_:chatIdentifier:chatStyle:);
  LiteMessageServiceSession.sendEncryptedMessage(_:to:item:)(v110, *(void *)(v0 + 280), *(void *)(v0 + 184));
}

{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  NSString v9;
  LiteMessageServiceSession *v10;
  LiteMessageServiceSession *v11;
  SEL v12;
  id v13;
  id v14;
  unsigned __int8 v15;
  id v16;
  id v17;
  id v18;
  NSString v19;
  LiteMessageServiceSession *v20;
  LiteMessageServiceSession *v21;
  SEL v22;
  id v23;
  id v24;
  unsigned __int8 v25;
  id v26;
  id v27;
  id v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v1 = *(void **)(v0 + 184);
  swift_release(*(void *)(v0 + 256));
  uint64_t v2 = [v1 fallbackHash];
  if (!v2)
  {
    id v31 = *(void *)(v0 + 304);
    id v32 = *(void *)(v0 + 312);
LABEL_13:
    outlined consume of Data._Representation(v31, v32);
LABEL_14:
    id v35 = *(void **)(v0 + 368);
    id v36 = *(void **)(v0 + 320);
    id v37 = *(void **)(v0 + 288);
    uint64_t v38 = *(void **)(v0 + 280);
    unint64_t v39 = *(void *)(v0 + 240);
    unint64_t v40 = *(void *)(v0 + 248);
    uint64_t v41 = *(void *)(v0 + 216);

    swift_task_dealloc(v40);
    swift_task_dealloc(v39);
    swift_task_dealloc(v41);
    (*(void (**)(void))(v0 + 8))();
    return;
  }

  NSString v3 = v2;
  if (([*(id *)(v0 + 184) isSatelliteMessageRetry] & 1) == 0)
  {
    id v34 = *(void *)(v0 + 304);
    unsigned __int8 v33 = *(void *)(v0 + 312);

    id v31 = v34;
    id v32 = v33;
    goto LABEL_13;
  }

  id v4 = [(id)objc_opt_self(IMDAccountController) sharedInstance];
  if (!v4)
  {

    __break(1u);
    goto LABEL_16;
  }

  uint64_t v5 = v4;
  char v6 = [v4 anySessionForServiceName:IMServiceNameiMessage];

  if (!v6)
  {
LABEL_16:

    __break(1u);
    goto LABEL_17;
  }

  uint64_t v7 = [*(id *)(v0 + 184) guid];
  if (v7)
  {
    uint64_t v8 = v7;
    unint64_t v9 = [*(id *)(v0 + 296) prefixedURI];
    if (!v9)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      char v11 = v10;
      unint64_t v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v11, v12, v13, v14, v15, v16, v17, v18);
    }

    uint64_t v19 = [*(id *)(v0 + 288) prefixedURI];
    if (!v19)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      unint64_t v21 = v20;
      uint64_t v19 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v21, v22, v23, v24, v25, v26, v27, v28);
    }

    SEL v30 = *(void *)(v0 + 304);
    NSString v29 = *(void *)(v0 + 312);
    [v6 sendCrossServiceAssociationMessageWithReplacementGUID:v8 messageGUID:v3 callerID:v9 toID:v19];
    outlined consume of Data._Representation(v30, v29);

    goto LABEL_14;
  }

uint64_t LiteMessageServiceSession.encryptAndSendMessageItem(_:chatIdentifier:chatStyle:)()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 360) = v2;
  if (v2) {
    NSString v3 = LiteMessageServiceSession.encryptAndSendMessageItem(_:chatIdentifier:chatStyle:);
  }
  else {
    NSString v3 = LiteMessageServiceSession.encryptAndSendMessageItem(_:chatIdentifier:chatStyle:);
  }
  return swift_task_switch(v3, *(void *)(v1 + 264), *(void *)(v1 + 272));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v2 = *v1;
  NSString v3 = *(void *)(*v1 + 376);
  *(void *)(*v1 + 384) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    id v4 = LiteMessageServiceSession.encryptAndSendMessageItem(_:chatIdentifier:chatStyle:);
  }
  else {
    id v4 = LiteMessageServiceSession.encryptAndSendMessageItem(_:chatIdentifier:chatStyle:);
  }
  return swift_task_switch(v4, *(void *)(v2 + 264), *(void *)(v2 + 272));
}

{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v1 = *(void **)(v0 + 352);
  uint64_t v2 = *(void *)(v0 + 312);
  NSString v3 = *(void **)(v0 + 320);
  uint64_t v5 = *(void **)(v0 + 296);
  id v4 = *(void *)(v0 + 304);
  uint64_t v7 = *(void **)(v0 + 280);
  char v6 = *(void **)(v0 + 288);
  uint64_t v8 = swift_release(*(void *)(v0 + 256));
  swift_willThrow(v8);
  outlined consume of Data._Representation(v4, v2);

  unint64_t v9 = *(void *)(v0 + 240);
  uint64_t v10 = *(void *)(v0 + 216);
  swift_task_dealloc(*(void *)(v0 + 248));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v1 = *(void **)(v0 + 368);
  uint64_t v2 = *(void *)(v0 + 312);
  NSString v3 = *(void **)(v0 + 320);
  uint64_t v5 = *(void **)(v0 + 296);
  id v4 = *(void *)(v0 + 304);
  uint64_t v7 = *(void **)(v0 + 280);
  char v6 = *(void **)(v0 + 288);
  swift_release(*(void *)(v0 + 256));

  outlined consume of Data._Representation(v4, v2);
  uint64_t v8 = *(void *)(v0 + 240);
  unint64_t v9 = *(void *)(v0 + 216);
  swift_task_dealloc(*(void *)(v0 + 248));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t lazy protocol witness table accessor for type LiteMessageSendError and conformance LiteMessageSendError()
{
  unint64_t result = lazy protocol witness table cache variable for type LiteMessageSendError and conformance LiteMessageSendError;
  if (!lazy protocol witness table cache variable for type LiteMessageSendError and conformance LiteMessageSendError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LiteMessageSendError,  &type metadata for LiteMessageSendError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LiteMessageSendError and conformance LiteMessageSendError);
  }

  return result;
}

void LiteMessageServiceSession.removePreviousServiceOriginal(of:)(void *a1)
{
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v114 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v114 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v114 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v114 - v14;
  id v16 = [a1 guid];
  if (!v16) {
    return;
  }
  unint64_t v17 = v16;
  uint64_t v119 = v4;
  uint64_t v118 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  unint64_t v19 = v18;
  id v116 = (id)objc_opt_self(&OBJC_CLASS___IMDMessageStore);
  id v20 = [v116 sharedInstance];
  id v21 = [v20 itemWithGUID:v17];

  if (!v21)
  {
    uint64_t v29 = Logger.liteSession.unsafeMutableAddressor();
    uint64_t v30 = v119;
    (*(void (**)(char *, uint64_t, uint64_t))(v119 + 16))(v7, v29, v3);
    swift_bridgeObjectRetain(v19);
    id v32 = (void *)Logger.logObject.getter(v31);
    os_log_type_t v33 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled((os_log_t)v32, v33))
    {

      swift_bridgeObjectRelease_n(v19, 2LL);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v3);
      return;
    }

    id v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v35 = v3;
    uint64_t v36 = swift_slowAlloc(32LL, -1LL);
    uint64_t v121 = v36;
    *(_DWORD *)id v34 = 136315138;
    swift_bridgeObjectRetain(v19);
    uint64_t v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v118, v19, &v121);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121, v34 + 4, v34 + 12);
    swift_bridgeObjectRelease_n(v19, 3LL);
    _os_log_impl(&dword_0, (os_log_t)v32, v33, "No existing item found for %s", v34, 0xCu);
    swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1LL, -1LL);
    swift_slowDealloc(v34, -1LL, -1LL);

    id v37 = *(void (**)(char *, uint64_t))(v30 + 8);
    uint64_t v38 = v7;
    goto LABEL_27;
  }

  unint64_t v117 = v19;
  uint64_t v22 = v3;
  id v23 = v21;
  id v24 = [v21 service];
  if (v24)
  {
    id v25 = v24;
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    id v28 = v27;
  }

  else
  {
    uint64_t v26 = 0LL;
    id v28 = 0LL;
  }

  id v39 = [v1 service];
  id v40 = [v39 internalName];

  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
  uint64_t v43 = v42;

  if (v28)
  {
    if (v26 == v41 && v28 == v43)
    {
      swift_bridgeObjectRelease(v28, v44, v45, v46, v47, v48, v49, v50);
      swift_bridgeObjectRelease(v43, v51, v52, v53, v54, v55, v56, v57);
      id v58 = v23;
      goto LABEL_15;
    }

    char v59 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v28, v41, v43, 0LL);
    swift_bridgeObjectRelease(v28, v60, v61, v62, v63, v64, v65, v66);
    swift_bridgeObjectRelease(v43, v67, v68, v69, v70, v71, v72, v73);
    id v58 = v23;
    if ((v59 & 1) != 0)
    {
LABEL_15:
      uint64_t v74 = Logger.liteSession.unsafeMutableAddressor();
      uint64_t v75 = v119;
      uint64_t v76 = v22;
      (*(void (**)(char *, uint64_t, uint64_t))(v119 + 16))(v10, v74, v22);
      unint64_t v77 = v117;
      swift_bridgeObjectRetain(v117);
      id v79 = (os_log_s *)Logger.logObject.getter(v78);
      os_log_type_t v80 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v79, v80))
      {
        uint64_t v81 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v82 = swift_slowAlloc(32LL, -1LL);
        uint64_t v115 = v76;
        uint64_t v83 = v82;
        uint64_t v121 = v82;
        *(_DWORD *)uint64_t v81 = 136315138;
        swift_bridgeObjectRetain(v77);
        uint64_t v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v118, v77, &v121);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121, v81 + 4, v81 + 12);
        swift_bridgeObjectRelease_n(v77, 3LL);
        _os_log_impl(&dword_0, v79, v80, "Existing item for %s is already iMessage Lite", v81, 0xCu);
        swift_arrayDestroy(v83, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v83, -1LL, -1LL);
        swift_slowDealloc(v81, -1LL, -1LL);

        (*(void (**)(char *, uint64_t))(v75 + 8))(v10, v115);
      }

      else
      {

        swift_bridgeObjectRelease_n(v77, 2LL);
        (*(void (**)(char *, uint64_t))(v75 + 8))(v10, v76);
      }

      return;
    }
  }

  else
  {
    swift_bridgeObjectRelease(v43, v44, v45, v46, v47, v48, v49, v50);
    id v58 = v23;
  }

  unsigned int v84 = [v58 isFromMe];
  uint64_t v85 = Logger.liteSession.unsafeMutableAddressor();
  Swift::String v86 = *(void (**)(char *, uint64_t, uint64_t))(v119 + 16);
  if (!v84)
  {
    uint64_t v35 = v22;
    v86(v13, v85, v22);
    unint64_t v96 = v117;
    swift_bridgeObjectRetain(v117);
    id v98 = (os_log_s *)Logger.logObject.getter(v97);
    os_log_type_t v99 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v98, v99))
    {
      uint64_t v100 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v101 = swift_slowAlloc(32LL, -1LL);
      uint64_t v121 = v101;
      *(_DWORD *)uint64_t v100 = 136315138;
      swift_bridgeObjectRetain(v96);
      uint64_t v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v118, v96, &v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121, v100 + 4, v100 + 12);
      swift_bridgeObjectRelease_n(v96, 3LL);
      _os_log_impl(&dword_0, v98, v99, "Existing item for %s is not from me", v100, 0xCu);
      swift_arrayDestroy(v101, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v101, -1LL, -1LL);
      swift_slowDealloc(v100, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v96, 2LL);
    }

    id v37 = *(void (**)(char *, uint64_t))(v119 + 8);
    uint64_t v38 = v13;
LABEL_27:
    v37(v38, v35);
    return;
  }

  uint64_t v87 = v22;
  v86(v15, v85, v22);
  unint64_t v88 = v117;
  uint64_t v89 = swift_bridgeObjectRetain_n(v117, 2LL);
  unint64_t v90 = (os_log_s *)Logger.logObject.getter(v89);
  os_log_type_t v91 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v90, v91))
  {
    id v92 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v93 = swift_slowAlloc(32LL, -1LL);
    uint64_t v115 = v87;
    uint64_t v94 = v93;
    uint64_t v121 = v93;
    *(_DWORD *)id v92 = 136315138;
    swift_bridgeObjectRetain(v88);
    uint64_t v95 = v118;
    uint64_t v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v118, v88, &v121);
    id v58 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121, v92 + 4, v92 + 12);
    swift_bridgeObjectRelease_n(v88, 3LL);
    _os_log_impl(&dword_0, v90, v91, "Removing previous service record for %s", v92, 0xCu);
    swift_arrayDestroy(v94, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v94, -1LL, -1LL);
    swift_slowDealloc(v92, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v119 + 8))(v15, v115);
  }

  else
  {

    swift_bridgeObjectRelease_n(v88, 2LL);
    (*(void (**)(char *, uint64_t))(v119 + 8))(v15, v87);
    uint64_t v95 = v118;
  }

  id v102 = [v116 sharedInstance];
  uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v104 = swift_allocObject(v103, 64LL, 7LL);
  *(_OWORD *)(v104 + 16) = xmmword_3BA10;
  *(void *)(v104 + 56) = &type metadata for String;
  *(void *)(v104 + 32) = v95;
  *(void *)(v104 + 40) = v88;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((LiteMessageServiceSession *)v104, v106, v107, v108, v109, v110, v111, v112);
  id v113 = [v102 deleteMessageGUIDs:isa];
}

uint64_t LiteMessageServiceSession.sendEncryptedMessage(_:to:item:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[8] = a3;
  void v4[9] = v3;
  v4[6] = a1;
  void v4[7] = a2;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v4[10] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[11] = v6;
  v4[12] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for MainActor(0LL);
  v4[13] = static MainActor.shared.getter(v7);
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v4[14] = v8;
  v4[15] = v9;
  return swift_task_switch(LiteMessageServiceSession.sendEncryptedMessage(_:to:item:), v8, v9);
}

void LiteMessageServiceSession.sendEncryptedMessage(_:to:item:)()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = *(void **)(v0 + 64);
  uint64_t v5 = *(void **)(v0 + 48);
  char v6 = variable initialization expression of LiteMessageServiceSession.State.emergencyContactsNotificationToken();
  *(_BYTE *)(v0 + 156) = v6 & 1;
  uint64_t v7 = Logger.liteSession.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, v7, v3);
  id v8 = v4;
  id v9 = v5;
  id v10 = v8;
  uint64_t v11 = (void *)Logger.logObject.getter(v9);
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled((os_log_t)v11, v12))
  {
    uint64_t v41 = *(void *)(v0 + 88);
    uint64_t v40 = *(void *)(v0 + 96);
    uint64_t v42 = *(void *)(v0 + 80);
    uint64_t v43 = *(void **)(v0 + 64);
    unint64_t v44 = *(void **)(v0 + 48);

    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
    if ((v6 & 1) == 0) {
      goto LABEL_7;
    }
LABEL_6:
    objc_msgSend( *(id *)(v0 + 64),  "setFlags:",  (unint64_t)objc_msgSend(*(id *)(v0 + 64), "flags", v54) | 0x80000000000);
    goto LABEL_7;
  }

  os_log_type_t v59 = v12;
  log = (os_log_s *)v11;
  uint64_t v13 = *(void **)(v0 + 64);
  uint64_t v14 = swift_slowAlloc(28LL, -1LL);
  uint64_t v58 = swift_slowAlloc(64LL, -1LL);
  uint64_t v61 = v58;
  *(_DWORD *)uint64_t v14 = 136315650;
  id v15 = [v13 guid];
  if (!v15) {
    goto LABEL_10;
  }
  id v16 = v15;
  uint64_t v55 = *(void *)(v0 + 88);
  uint64_t v56 = *(void *)(v0 + 80);
  uint64_t v57 = *(void *)(v0 + 96);
  unint64_t v17 = *(void **)(v0 + 64);
  id v54 = *(id *)(v0 + 48);
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  id v20 = v19;

  *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, (unint64_t)v20, &v61);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v14 + 4, v14 + 12);
  swift_bridgeObjectRelease(v20, v21, v22, v23, v24, v25, v26, v27);

  *(_WORD *)(v14 + 12) = 2080;
  id v28 = [v54 recipientURI];
  id v29 = [v28 unprefixedURI];

  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  id v32 = v31;

  *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, (unint64_t)v32, &v61);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v14 + 14, v14 + 22);
  swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);

  *(_WORD *)(v14 + 22) = 1024;
  *(_DWORD *)(v0 + 152) = v6 & 1;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 156, v14 + 24, v14 + 28);
  _os_log_impl(&dword_0, log, v59, "Sending message %s to %s (via satellite: %{BOOL}d)", (uint8_t *)v14, 0x1Cu);
  swift_arrayDestroy(v58, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v58, -1LL, -1LL);
  swift_slowDealloc(v14, -1LL, -1LL);

  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v57, v56);
  if ((v6 & 1) != 0) {
    goto LABEL_6;
  }
LABEL_7:
  uint64_t v45 = *(void **)(v0 + 56);
  id v46 = objc_msgSend(v45, "style", v54);
  id v47 = [v45 chatIdentifier];
  if (v47)
  {
    id v48 = v47;
    uint64_t v49 = *(void *)(v0 + 64);
    uint64_t v50 = *(void **)(v0 + 48);
    *(void *)(v0 + 16) = *(void *)(v0 + 72);
    *(void *)(v0 + 24) = &OBJC_CLASS___LiteMessageServiceSession;
    objc_msgSendSuper2((objc_super *)(v0 + 16), "sendMessage:toChat:style:", v49, v47, v46);

    id v51 = specialized LiteMessageServiceSession.sendableMessageSegments(of:)(v50);
    *(void *)(v0 + 12_Block_object_dispose(va, 8) = v51;
    id v52 = (void *)swift_task_alloc(dword_4E024);
    *(void *)(v0 + 136) = v52;
    *id v52 = v0;
    v52[1] = LiteMessageServiceSession.sendEncryptedMessage(_:to:item:);
    specialized LiteMessageServiceSession.sendEncryptedMessageSegments(_:to:item:viaSatellite:)( (uint64_t)v51,  *(void *)(v0 + 64),  v6 & 1);
    return;
  }

  __break(1u);
LABEL_10:
  id v53 = *(void **)(v0 + 64);

  __break(1u);
}

uint64_t LiteMessageServiceSession.sendEncryptedMessage(_:to:item:)()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 136);
  *(void *)(*v1 + 144) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v11 = *(void *)(v2 + 112);
    uint64_t v12 = *(void *)(v2 + 120);
    uint64_t v13 = LiteMessageServiceSession.sendEncryptedMessage(_:to:item:);
  }

  else
  {
    swift_bridgeObjectRelease(*(LiteMessageServiceSession **)(v2 + 128), v4, v5, v6, v7, v8, v9, v10);
    uint64_t v11 = *(void *)(v2 + 112);
    uint64_t v12 = *(void *)(v2 + 120);
    uint64_t v13 = LiteMessageServiceSession.sendEncryptedMessage(_:to:item:);
  }

  return swift_task_switch(v13, v11, v12);
}

{
  uint64_t v0;
  id v1;
  unsigned int v2;
  swift_release(*(void *)(v0 + 104));
  uint64_t v1 = [(id)objc_opt_self(IMFeatureFlags) sharedFeatureFlags];
  uint64_t v2 = [v1 isIMLLegacyRelayEnabled];

  if (v2) {
    LiteMessageServiceSession.relayMessage(item:to:viaSatellite:)( *(void *)(v0 + 64),  *(void **)(v0 + 56),  *(_BYTE *)(v0 + 156));
  }
  swift_task_dealloc(*(void *)(v0 + 96));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 104);
  swift_bridgeObjectRelease(*(void *)(v0 + 128));
  swift_release(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void LiteMessageServiceSession.relayMessage(item:to:viaSatellite:)(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
  {
    [v3 markItemForOnGridRelay:a1];
    return;
  }

  id v6 = [(id)objc_opt_self(IMDAccountController) sharedInstance];
  if (!v6)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }

  unsigned __int8 v7 = v6;
  id v8 = [v6 anySessionForServiceName:IMServiceNameiMessage];

  if (v8)
  {
    id v11 = v8;
    id v9 = [a2 chatIdentifier];
    if (v9)
    {
      id v10 = v9;
      [v11 relayLegacySatelliteMessage:a1 toChat:v9];

      return;
    }

    goto LABEL_9;
  }

void LiteMessageServiceSession.sendMessageSentMetric(for:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  id v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  id v11 = (char *)&v63 - v10;
  id v12 = [a1 handle];
  IMStringIsPhoneNumber();

  variable initialization expression of LiteMessageServiceSession.State.emergencyContactsNotificationToken();
  v13.super.super.Class isa = UInt32._bridgeToObjectiveC()().super.super.isa;
  Date.init()();
  id v14 = [a1 time];
  if (!v14) {
    goto LABEL_11;
  }
  id v15 = v14;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v14);

  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v4, v9, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0LL, 1LL, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  double v16 = Date.timeIntervalSince(_:)(v4);
  unint64_t v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17(v11, v5);
  v17(v4, v5);
  if ((~*(void *)&v16 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v16 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if (v16 >= 9.22337204e18)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1LL, 1LL, v5);
    goto LABEL_12;
  }

  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject(v18, &v64);
  *(_OWORD *)(inited + 16) = xmmword_3C470;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(IMMetricsCollectorFzErrorKey);
  *(void *)(inited + 40) = v20;
  [a1 errorCode];
  Class isa = UInt32._bridgeToObjectiveC()().super.super.isa;
  uint64_t v22 = type metadata accessor for IMDHandle( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber,  &OBJC_CLASS___NSNumber_ptr);
  *(void *)(inited + 72) = v22;
  *(void *)(inited + 4_Block_object_dispose(va, 8) = isa;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(IMMetricsCollectorMessageErrorKey);
  *(void *)(inited + 8_Block_object_dispose(va, 8) = v23;
  [a1 errorCode];
  v24.super.super.Class isa = UInt32._bridgeToObjectiveC()().super.super.isa;
  *(void *)(inited + 120) = v22;
  *(NSNumber *)(inited + 96) = v24;
  *(void *)(inited + 12_Block_object_dispose(va, 8) = static String._unconditionallyBridgeFromObjectiveC(_:)(IMMetricsCollectorIsTypingIndicatorKey);
  *(void *)(inited + 136) = v25;
  *(void *)(inited + 16_Block_object_dispose(va, 8) = &type metadata for Int;
  *(void *)(inited + 144) = 0LL;
  *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(IMMetricsCollectorIsGroupMessageKey);
  *(void *)(inited + 184) = v26;
  *(void *)(inited + 216) = &type metadata for Int;
  *(void *)(inited + 192) = 0LL;
  *(void *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(IMMetricsCollectorIsToPhoneNumberKey);
  *(void *)(inited + 232) = v27;
  v28.super.super.Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  *(void *)(inited + 264) = v22;
  *(NSNumber *)(inited + 240) = v28;
  *(void *)(inited + 272) = static String._unconditionallyBridgeFromObjectiveC(_:)(IMMetricsCollectorIsToEmailKey);
  *(void *)(inited + 280) = v29;
  v30.super.super.Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  *(void *)(inited + 312) = v22;
  *(NSNumber *)(inited + 28_Block_object_dispose(va, 8) = v30;
  *(void *)(inited + 320) = static String._unconditionallyBridgeFromObjectiveC(_:)(IMMetricsCollectorHasAttachmentsKey);
  *(void *)(inited + 32_Block_object_dispose(va, 8) = v31;
  *(void *)(inited + 360) = &type metadata for Int;
  *(void *)(inited + 336) = 0LL;
  *(void *)(inited + 36_Block_object_dispose(va, 8) = static String._unconditionallyBridgeFromObjectiveC(_:)(IMMetricsCollectorSendDurationKey);
  *(void *)(inited + 376) = v32;
  v33.super.super.Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  *(void *)(inited + 40_Block_object_dispose(va, 8) = v22;
  *(NSNumber *)(inited + 384) = v33;
  *(void *)(inited + 416) = static String._unconditionallyBridgeFromObjectiveC(_:)(IMMetricsCollectorConnectionTypeKey);
  *(void *)(inited + 424) = v34;
  *(void *)(inited + 456) = v22;
  *(NSNumber *)(inited + 432) = v13;
  id v35 = v13.super.super.isa;
  uint64_t v43 = (LiteMessageServiceSession *)specialized Dictionary.init(dictionaryLiteral:)( inited,  v36,  v37,  v38,  v39,  v40,  v41,  v42);
  id v44 = [(id)objc_opt_self(IMMetricsCollector) sharedInstance];
  if (v44)
  {
    uint64_t v45 = v44;
    id v46 = IMMetricsCollectorEventIMessageSentMessageSingleComponent;
    id v47 = (LiteMessageServiceSession *)specialized _dictionaryUpCast<A, B, C, D>(_:)((uint64_t)v43);
    swift_bridgeObjectRelease(v43, v48, v49, v50, v51, v52, v53, v54, v63);
    Class v55 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v47, v56, v57, v58, v59, v60, v61, v62, v63);
    [v45 trackEvent:v46 withDictionary:v55];

    return;
  }

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v29 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v28 = (unint64_t)(63 - v4) >> 6;
  uint64_t v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  uint64_t result = swift_retain(v3);
  int64_t v9 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }

    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v14 >= v28) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v29 + 8 * v14);
    int64_t v16 = v9 + 1;
    if (!v15)
    {
      int64_t v16 = v9 + 2;
      if (v9 + 2 >= v28) {
        goto LABEL_37;
      }
      unint64_t v15 = *(void *)(v29 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v9 + 3;
        if (v9 + 3 >= v28) {
          goto LABEL_37;
        }
        unint64_t v15 = *(void *)(v29 + 8 * v16);
        if (!v15)
        {
          int64_t v16 = v9 + 4;
          if (v9 + 4 >= v28) {
            goto LABEL_37;
          }
          unint64_t v15 = *(void *)(v29 + 8 * v16);
          if (!v15) {
            break;
          }
        }
      }
    }

LABEL_39:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t outlined init with copy of (String, Any)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

id specialized LiteMessageServiceSession.sendableMessageSegments(of:)(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id result = [(id)objc_opt_self(IMLockdownManager) sharedInstance];
  if (result)
  {
    uint64_t v7 = result;
    unsigned __int8 v8 = [result isInternalInstall];

    if ((v8 & 1) != 0
      && (NSString v9 = String._bridgeToObjectiveC()(),
          NSString v10 = String._bridgeToObjectiveC()(),
          char v11 = IMGetDomainBoolForKey(v9, v10),
          v10,
          v9,
          (v11 & 1) != 0))
    {
      uint64_t v12 = Logger.liteSession.unsafeMutableAddressor();
      uint64_t v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v12, v2);
      int64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
      os_log_type_t v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        int64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)int64_t v16 = 0;
        _os_log_impl( &dword_0,  v14,  v15,  "Message splitting is disabled, will send as single encrypted message",  v16,  2u);
        swift_slowDealloc(v16, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }

    else if ([a1 respondsToSelector:"splitMessageIntoMessagesThatFit"])
    {
      id v17 = [a1 splitMessageIntoMessagesThatFit];
      uint64_t v18 = type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IDSOffGridEncryptedMessage,  &OBJC_CLASS___IDSOffGridEncryptedMessage_ptr);
      uint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v18);

      return (id)v19;
    }

    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v21 = swift_allocObject(v20, 40LL, 7LL);
    *(_OWORD *)(v21 + 16) = xmmword_3BFF0;
    *(void *)(v21 + 32) = a1;
    uint64_t v24 = v21;
    specialized Array._endMutation()(v21);
    uint64_t v19 = v24;
    id v22 = a1;
    return (id)v19;
  }

  __break(1u);
  return result;
}

uint64_t specialized LiteMessageServiceSession.sendEncryptedMessageSegments(_:to:item:viaSatellite:)( uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 176) = a2;
  *(void *)(v4 + 184) = v3;
  *(_BYTE *)(v4 + 32_Block_object_dispose(va, 8) = a3;
  *(void *)(v4 + 16_Block_object_dispose(va, 8) = a1;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  *(void *)(v4 + 192) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v4 + 200) = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v4 + 20_Block_object_dispose(va, 8) = swift_task_alloc(v7);
  *(void *)(v4 + 216) = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for MainActor(0LL);
  *(void *)(v4 + 224) = static MainActor.shared.getter(v8);
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  *(void *)(v4 + 232) = v9;
  *(void *)(v4 + 240) = v10;
  return swift_task_switch( specialized LiteMessageServiceSession.sendEncryptedMessageSegments(_:to:item:viaSatellite:),  v9,  v10);
}

void specialized LiteMessageServiceSession.sendEncryptedMessageSegments(_:to:item:viaSatellite:)()
{
  uint64_t v1 = (LiteMessageServiceSession **)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 168);
  if (!((unint64_t)v2 >> 62))
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL));
    *(void *)(v0 + 24_Block_object_dispose(va, 8) = v3;
    if (v3) {
      goto LABEL_3;
    }
LABEL_24:
    swift_release(*(void *)(v0 + 224));
    unint64_t v88 = lazy protocol witness table accessor for type LiteMessageSendError and conformance LiteMessageSendError();
    uint64_t v89 = swift_allocError(&type metadata for LiteMessageSendError, v88, 0LL, 0LL);
    *(_OWORD *)uint64_t v90 = xmmword_3C480;
    *(_WORD *)(v90 + 16) = 512;
    swift_willThrow(v89);
    uint64_t v91 = *(void *)(v0 + 208);
    swift_task_dealloc(*(void *)(v0 + 216));
    swift_task_dealloc(v91);
    (*(void (**)(void))(v0 + 8))();
    return;
  }

  if (v2 < 0) {
    uint64_t v79 = *(void *)(v0 + 168);
  }
  else {
    uint64_t v79 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*(void *)(v0 + 168));
  uint64_t v80 = _CocoaArrayWrapper.endIndex.getter(v79);
  swift_bridgeObjectRelease((LiteMessageServiceSession *)v2, v81, v82, v83, v84, v85, v86, v87);
  *(void *)(v0 + 24_Block_object_dispose(va, 8) = v80;
  if (!v80) {
    goto LABEL_24;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 192);
  uint64_t v6 = *(void *)(v0 + 200);
  uint64_t v7 = *(void *)(v0 + 168);
  uint64_t v8 = *(void **)(v0 + 176);
  uint64_t v9 = Logger.liteSession.unsafeMutableAddressor();
  *(void *)(v0 + 256) = v9;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  *(void *)(v0 + 264) = v10;
  v10(v4, v9, v5);
  swift_bridgeObjectRetain_n(v7, 2LL);
  char v11 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    id v92 = v11;
    uint64_t v13 = *(void **)(v0 + 176);
    uint64_t v14 = swift_slowAlloc(22LL, -1LL);
    uint64_t v93 = swift_slowAlloc(32LL, -1LL);
    uint64_t v96 = v93;
    *(_DWORD *)uint64_t v14 = 136315394;
    id v15 = [v13 guid];
    uint64_t v94 = *(void **)(v0 + 176);
    if (!v15)
    {
      swift_bridgeObjectRelease(*v1, v16, v17, v18, v19, v20, v21, v22);

      __break(1u);
      return;
    }

    uint64_t v23 = v15;
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    BOOL v26 = v25;

    *(void *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, (unint64_t)v26, &v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v26, v27, v28, v29, v30, v31, v32, v33);

    *(_WORD *)(v14 + 12) = 2048;
    if ((unint64_t)v2 >> 62)
    {
      id v47 = *v1;
      if (v2 < 0) {
        uint64_t v48 = (uint64_t)*v1;
      }
      else {
        uint64_t v48 = v2 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*v1);
      uint64_t v41 = _CocoaArrayWrapper.endIndex.getter(v48);
      swift_bridgeObjectRelease(v47, v49, v50, v51, v52, v53, v54, v55);
    }

    else
    {
      uint64_t v41 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8LL));
    }

    uint64_t v95 = *(void *)(v0 + 216);
    uint64_t v56 = *(void *)(v0 + 192);
    uint64_t v57 = *(void *)(v0 + 200);
    id v58 = *(LiteMessageServiceSession **)(v0 + 168);
    swift_bridgeObjectRelease(v58, v34, v35, v36, v37, v38, v39, v40);
    *(void *)(v0 + 160) = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease(v58, v59, v60, v61, v62, v63, v64, v65);
    _os_log_impl(&dword_0, v92, v12, "Sending %s using %ld message part(s)", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v93, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v93, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);

    id v46 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
    v46(v95, v56);
  }

  else
  {
    uint64_t v42 = *(void *)(v0 + 216);
    uint64_t v44 = *(void *)(v0 + 192);
    uint64_t v43 = *(void *)(v0 + 200);
    uint64_t v45 = *(void **)(v0 + 176);
    swift_bridgeObjectRelease_n(*(void *)(v0 + 168), 2LL);

    id v46 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
    v46(v42, v44);
  }

  *(void *)(v0 + 272) = v46;
  int v66 = *(unsigned __int8 *)(v0 + 328);
  uint64_t v67 = *(void *)(v0 + 168);
  id v68 = [objc_allocWithZone(IDSOffGridDeliveryOptions) init];
  id v69 = v68;
  *(void *)(v0 + 280) = v68;
  if (v66) {
    uint64_t v70 = 2LL;
  }
  else {
    uint64_t v70 = 1LL;
  }
  [v68 setTransportType:v70];
  [v69 setCommand:100];
  *(void *)(v0 + 28_Block_object_dispose(va, 8) = v46;
  uint64_t v71 = *(void *)(v0 + 168);
  swift_bridgeObjectRetain(v67);
  if ((v71 & 0xC000000000000001LL) != 0) {
    id v72 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v71);
  }
  else {
    id v72 = *(id *)(v71 + 32);
  }
  id v73 = v72;
  *(void *)(v0 + 296) = v72;
  *(void *)(v0 + 304) = 1LL;
  uint64_t v74 = v0 + 16;
  uint64_t v75 = *(void **)(v0 + 280);
  id v76 = LiteMessageServiceSession.offGridMessenger.getter();
  *(void *)(v0 + 312) = v76;
  *(void *)(v0 + 56) = v0 + 120;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = specialized LiteMessageServiceSession.sendEncryptedMessageSegments(_:to:item:viaSatellite:);
  uint64_t v77 = swift_continuation_init(v0 + 16, 1LL);
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  uint64_t v78 = (void *)(v0 + 80);
  v78[1] = 0x40000000LL;
  v78[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned IDSOffGridMessage?, @unowned NSString?, @unowned NSError?) -> () with result type (IDSOffGridMessage, String);
  v78[3] = &block_descriptor_5_0;
  v78[4] = v77;
  [v76 sendEncryptedOffGridMessage:v73 options:v75 completion:v78];
  swift_continuation_await(v74);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  LiteMessageServiceSession *v9;
  id v10;
  uint64_t v11;
  os_log_s *v12;
  os_log_type_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  const char *v17;
  void *v18;
  void *v19;
  unsigned __int8 v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  void *v34;
  void *v35;
  unsigned __int8 v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  SEL v41;
  id v42;
  id v43;
  unsigned __int8 v44;
  id v45;
  id v46;
  id v47;
  void *v48;
  SEL v49;
  id v50;
  id v51;
  unsigned __int8 v52;
  id v53;
  id v54;
  id v55;
  id v56;
  const char *v57;
  void *v58;
  void *v59;
  unsigned __int8 v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  LiteMessageServiceSession *v67;
  LiteMessageServiceSession *v68;
  SEL v69;
  id v70;
  id v71;
  unsigned __int8 v72;
  id v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  id v84;
  uint64_t v85;
  void *v86;
  id v87;
  uint64_t v88;
  void *v89;
  void *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t, uint64_t);
  LiteMessageServiceSession *v95;
  uint64_t v96;
  uint64_t v1 = *(void **)(v0 + 312);
  uint64_t v2 = *(void **)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 264);
  uint64_t v5 = *(void *)(v0 + 208);
  uint64_t v6 = *(void *)(v0 + 192);
  uint64_t v8 = *(void *)(v0 + 168);
  uint64_t v7 = *(void **)(v0 + 176);

  uint64_t v96 = *(void *)(v0 + 128);
  uint64_t v9 = *(LiteMessageServiceSession **)(v0 + 136);

  v4(v5, v3, v6);
  swift_bridgeObjectRetain_n(v8, 2LL);
  uint64_t v10 = v7;
  swift_bridgeObjectRetain(v9);
  os_log_type_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  uint64_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = *(void *)(v0 + 304);
    id v15 = *(void *)(v0 + 168);
    int64_t v16 = swift_slowAlloc(42LL, -1LL);
    uint64_t v24 = swift_slowAlloc(64LL, -1LL);
    *(void *)(v0 + 144) = v24;
    *(_DWORD *)int64_t v16 = 134218754;
    *(void *)(v16 + 4) = v14;
    *(_WORD *)(v16 + 12) = 2048;
    unint64_t v25 = *(void *)(v0 + 168);
    uint64_t v95 = v9;
    if (v15 >> 62)
    {
      if (v25 < 0) {
        __int128 v40 = *(void *)(v0 + 168);
      }
      else {
        __int128 v40 = v25 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v25);
      BOOL v26 = _CocoaArrayWrapper.endIndex.getter(v40);
      swift_bridgeObjectRelease((LiteMessageServiceSession *)v25, v41, v42, v43, v44, v45, v46, v47);
      unint64_t v25 = *(void *)(v0 + 168);
    }

    else
    {
      BOOL v26 = *(void *)((char *)&dword_10 + (v25 & 0xFFFFFFFFFFFFF8LL));
    }

    uint64_t v48 = *(void **)(v0 + 176);
    swift_bridgeObjectRelease((LiteMessageServiceSession *)v25, v17, v18, v19, v20, v21, v22, v23);
    *(void *)(v16 + 14) = v26;
    swift_bridgeObjectRelease((LiteMessageServiceSession *)v25, v49, v50, v51, v52, v53, v54, v55);
    *(_WORD *)(v16 + 22) = 2080;
    uint64_t v56 = [v48 guid];
    if (!v56) {
      goto LABEL_19;
    }
    id v64 = v56;
    uint64_t v91 = *(void **)(v0 + 296);
    uint64_t v93 = *(void *)(v0 + 208);
    uint64_t v94 = *(void (**)(uint64_t, uint64_t))(v0 + 272);
    id v92 = *(void *)(v0 + 192);
    id v65 = *(void **)(v0 + 176);
    int v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
    id v68 = v67;

    *(void *)(v16 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( v66,  (unint64_t)v68,  (uint64_t *)(v0 + 144));
    swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75);

    *(_WORD *)(v16 + 32) = 2080;
    swift_bridgeObjectRetain(v95);
    *(void *)(v16 + 34) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( v96,  (unint64_t)v95,  (uint64_t *)(v0 + 144));
    swift_bridgeObjectRelease_n(v95, 3LL);
    _os_log_impl( &dword_0,  v12,  v13,  "Successfully sent part %ld (of %ld) of %s with part identifier %s",  (uint8_t *)v16,  0x2Au);
    swift_arrayDestroy(v24, 2LL, (char *)&type metadata for Any + 8);
    id v76 = v24;
    SEL v27 = (void *)(v0 + 272);
    swift_slowDealloc(v76, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);

    v94(v93, v92);
  }

  else
  {
    SEL v27 = (void *)(v0 + 288);
    id v29 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
    id v28 = *(void **)(v0 + 296);
    unsigned __int8 v30 = *(void *)(v0 + 208);
    id v31 = *(void *)(v0 + 192);
    id v32 = *(void **)(v0 + 176);
    swift_bridgeObjectRelease_n(*(void *)(v0 + 168), 2LL);

    swift_bridgeObjectRelease_n(v9, 2LL);
    v29(v30, v31);
  }

  uint64_t v77 = *(void *)(v0 + 304);
  if (v77 == *(void *)(v0 + 248))
  {
    uint64_t v78 = *(void **)(v0 + 280);
    uint64_t v79 = *(void *)(v0 + 216);
    uint64_t v80 = *(void *)(v0 + 224);
    SEL v81 = *(void *)(v0 + 208);
    swift_bridgeObjectRelease(*(LiteMessageServiceSession **)(v0 + 168), v33, v34, v35, v36, v37, v38, v39);

    swift_release(v80);
    swift_task_dealloc(v79);
    swift_task_dealloc(v81);
    (*(void (**)(void))(v0 + 8))();
    return;
  }

  *(void *)(v0 + 28_Block_object_dispose(va, 8) = *v27;
  id v82 = *(void *)(v0 + 168);
  if ((v82 & 0xC000000000000001LL) != 0) {
    id v83 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v77, v82);
  }
  else {
    id v83 = *(id *)(v82 + 8 * v77 + 32);
  }
  unsigned __int8 v84 = v83;
  *(void *)(v0 + 296) = v83;
  *(void *)(v0 + 304) = v77 + 1;
  if (!__OFADD__(v77, 1LL))
  {
    id v85 = v0 + 16;
    id v86 = *(void **)(v0 + 280);
    id v87 = LiteMessageServiceSession.offGridMessenger.getter();
    *(void *)(v0 + 312) = v87;
    *(void *)(v0 + 56) = v0 + 120;
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 24) = specialized LiteMessageServiceSession.sendEncryptedMessageSegments(_:to:item:viaSatellite:);
    unint64_t v88 = swift_continuation_init(v0 + 16, 1LL);
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    uint64_t v89 = (void *)(v0 + 80);
    v89[1] = 0x40000000LL;
    v89[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned IDSOffGridMessage?, @unowned NSString?, @unowned NSError?) -> () with result type (IDSOffGridMessage, String);
    v89[3] = &block_descriptor_5_0;
    v89[4] = v88;
    [v87 sendEncryptedOffGridMessage:v84 options:v86 completion:v89];
    swift_continuation_await(v85);
    return;
  }

  __break(1u);
LABEL_19:
  uint64_t v90 = *(void **)(v0 + 176);
  swift_bridgeObjectRelease(v95, v57, v58, v59, v60, v61, v62, v63);

  __break(1u);
}

uint64_t specialized LiteMessageServiceSession.sendEncryptedMessageSegments(_:to:item:viaSatellite:)( uint64_t a1, const char *a2, void *a3, void *a4, unsigned __int8 a5, void *a6, void *a7, void *a8)
{
  uint64_t v9 = *v8;
  uint64_t v10 = *(void *)(*v8 + 48);
  *(void *)(*v8 + 320) = v10;
  if (!v10) {
    return swift_task_switch( specialized LiteMessageServiceSession.sendEncryptedMessageSegments(_:to:item:viaSatellite:),  *(void *)(v9 + 232),  *(void *)(v9 + 240));
  }
  swift_bridgeObjectRelease(*(LiteMessageServiceSession **)(v9 + 168), a2, a3, a4, a5, a6, a7, a8);
  return swift_task_switch( specialized LiteMessageServiceSession.sendEncryptedMessageSegments(_:to:item:viaSatellite:),  *(void *)(v9 + 232),  *(void *)(v9 + 240));
}

uint64_t specialized LiteMessageServiceSession.sendEncryptedMessageSegments(_:to:item:viaSatellite:)()
{
  uint64_t v1 = *(void **)(v0 + 312);
  uint64_t v2 = *(void **)(v0 + 296);
  uint64_t v3 = *(void **)(v0 + 280);
  uint64_t v4 = swift_release(*(void *)(v0 + 224));
  swift_willThrow(v4);

  uint64_t v5 = *(void *)(v0 + 208);
  swift_task_dealloc(*(void *)(v0 + 216));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id LiteMessageServiceSession.joinedChat(with:)(uint64_t a1, uint64_t a2)
{
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v2 chatForChatIdentifier:v5 style:45];

  if (!v6)
  {
    NSString v7 = String._bridgeToObjectiveC()();
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v9 = swift_allocObject(v8, 64LL, 7LL);
    *(_OWORD *)(v9 + 16) = xmmword_3BA10;
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
    uint64_t inited = swift_initStackObject(v10, &v18);
    *(_OWORD *)(inited + 16) = xmmword_3BA00;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kFZPersonID);
    *(void *)(inited + 40) = v12;
    *(void *)(inited + 4_Block_object_dispose(va, 8) = a1;
    *(void *)(inited + 56) = a2;
    *(void *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(kFZPersonUnformattedName);
    *(void *)(inited + 72) = v13;
    *(void *)(inited + 80) = a1;
    *(void *)(inited + 8_Block_object_dispose(va, 8) = a2;
    swift_bridgeObjectRetain_n(a2, 2LL);
    unint64_t v14 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    *(void *)(v9 + 56) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    *(void *)(v9 + 32) = v14;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v9);
    [v2 joinChat:v7 handleInfo:isa style:45 groupID:0 joinProperties:0];

    NSString v16 = String._bridgeToObjectiveC()();
    id v6 = [v2 chatForChatIdentifier:v16 style:45];
  }

  return v6;
}

uint64_t one-time initialization function for versionIdentifier()
{
  uint64_t v0 = type metadata accessor for Schema.Version(0LL);
  __swift_allocate_value_buffer(v0, static LiteMessageSegmentStoreSchemaV1.versionIdentifier);
  __swift_project_value_buffer(v0, (uint64_t)static LiteMessageSegmentStoreSchemaV1.versionIdentifier);
  return Schema.Version.init(_:_:_:)(1LL, 0LL, 0LL);
}

uint64_t LiteMessageSegmentStoreSchemaV1.versionIdentifier.unsafeMutableAddressor()
{
  if (one-time initialization token for versionIdentifier != -1) {
    swift_once( &one-time initialization token for versionIdentifier,  one-time initialization function for versionIdentifier);
  }
  uint64_t v0 = type metadata accessor for Schema.Version(0LL);
  return __swift_project_value_buffer(v0, (uint64_t)static LiteMessageSegmentStoreSchemaV1.versionIdentifier);
}

uint64_t static LiteMessageSegmentStoreSchemaV1.versionIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for versionIdentifier != -1) {
    swift_once( &one-time initialization token for versionIdentifier,  one-time initialization function for versionIdentifier);
  }
  uint64_t v2 = type metadata accessor for Schema.Version(0LL);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static LiteMessageSegmentStoreSchemaV1.versionIdentifier);
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(a1, v3, v2);
}

uint64_t static LiteMessageSegmentStoreSchemaV1.versionIdentifier.setter(uint64_t a1)
{
  if (one-time initialization token for versionIdentifier != -1) {
    swift_once( &one-time initialization token for versionIdentifier,  one-time initialization function for versionIdentifier);
  }
  uint64_t v2 = type metadata accessor for Schema.Version(0LL);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static LiteMessageSegmentStoreSchemaV1.versionIdentifier);
  swift_beginAccess(v3, v6, 33LL, 0LL);
  uint64_t v4 = *(void *)(v2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v3, a1, v2);
  swift_endAccess(v6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v2);
}

uint64_t (*static LiteMessageSegmentStoreSchemaV1.versionIdentifier.modify(uint64_t a1))()
{
  if (one-time initialization token for versionIdentifier != -1) {
    swift_once( &one-time initialization token for versionIdentifier,  one-time initialization function for versionIdentifier);
  }
  uint64_t v2 = type metadata accessor for Schema.Version(0LL);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static LiteMessageSegmentStoreSchemaV1.versionIdentifier);
  swift_beginAccess(v3, a1, 33LL, 0LL);
  return static LiteMessageSegmentStoreSchemaV1.versionIdentifier.modify;
}

uint64_t static LiteMessageSegmentStoreSchemaV1.models.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PersistentModel.Type>);
  uint64_t v1 = swift_allocObject(v0, 48LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_3BA10;
  uint64_t v2 = type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment(0LL);
  uint64_t v3 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v3;
  return v1;
}

uint64_t type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment(uint64_t a1)
{
  uint64_t result = type metadata singleton initialization cache for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment;
  if (!type metadata singleton initialization cache for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment) {
    return swift_getSingletonMetadata( a1,  &nominal type descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  }
  return result;
}

uint64_t LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.consolidationIdentifier.init( uint64_t a1, LiteMessageServiceSession *a2, uint64_t a3)
{
  uint64_t v5 = v18;
  uint64_t v6 = v19;
  __swift_project_boxed_opaque_existential_1(v17, v18);
  uint64_t KeyPath = swift_getKeyPath(&unk_3C4B0);
  v16[0] = a1;
  v16[1] = a2;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( KeyPath,  v16,  &type metadata for String,  &protocol witness table for String,  v5,  v6);
  swift_bridgeObjectRelease(a2, v8, v9, v10, v11, v12, v13, v14);
  swift_release(KeyPath);
  return __swift_destroy_boxed_opaque_existential_0(v17);
}

uint64_t LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.consolidationIdentifier.getter()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_3C4B0);
  uint64_t v2 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_3C4B0);
  uint64_t v4 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for String);
  swift_release(v3);
  return v6;
}

void LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.consolidationIdentifier.setter( uint64_t a1, LiteMessageServiceSession *a2)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_3C4B0);
  uint64_t v15 = v2;
  uint64_t v16 = a1;
  id v17 = a2;
  uint64_t v6 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v18,  KeyPath,  partial apply for closure #1 in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.consolidationIdentifier.setter,  &v14,  (char *)&type metadata for () + 8,  v6);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(a2, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t closure #1 in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.consolidationIdentifier.setter( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_3C4B0);
  v8[0] = a2;
  v8[1] = a3;
  uint64_t v6 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, v8, v6, &protocol witness table for String);
  return swift_release(KeyPath);
}

uint64_t partial apply for closure #1 in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.consolidationIdentifier.setter()
{
  return closure #1 in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.consolidationIdentifier.setter( v0[2],  v0[3],  v0[4]);
}

void (*LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.consolidationIdentifier.modify( void *a1))(char **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x38uLL);
  *a1 = v4;
  uint64_t v5 = OBJC_IVAR____TtCO12iMessageLite31LiteMessageSegmentStoreSchemaV118LiteMessageSegment___observationRegistrar;
  v4[4] = v2;
  v4[5] = v5;
  v4[2] = v2;
  uint64_t KeyPath = swift_getKeyPath(&unk_3C4B0);
  uint64_t v7 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  v4[6] = v7;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4 + 2, KeyPath, v7);
  swift_release(KeyPath);
  uint64_t v8 = swift_getKeyPath(&unk_3C4B0);
  uint64_t v9 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  PersistentModel.getValue<A>(forKey:)(v4 + 2, v8, v9, &protocol witness table for String);
  swift_release(v8);
  uint64_t v10 = v4[3];
  *uint64_t v4 = v4[2];
  v4[1] = v10;
  return LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.consolidationIdentifier.modify;
}

void LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.consolidationIdentifier.modify(char **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *((void *)*a1 + 4);
  *((void *)v3 + 2) = v4;
  uint64_t v6 = *(void *)v3;
  uint64_t v5 = (LiteMessageServiceSession *)*((void *)v3 + 1);
  uint64_t v7 = *((void *)v3 + 6);
  uint64_t KeyPath = swift_getKeyPath(&unk_3C4B0);
  _OWORD v30[2] = v4;
  v30[3] = v6;
  void v30[4] = v5;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(v5);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( v3 + 16,  KeyPath,  closure #1 in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.consolidationIdentifier.setterpartial apply,  v30,  (char *)&type metadata for () + 8,  v7);
    swift_bridgeObjectRelease(v5, v9, v10, v11, v12, v13, v14, v15);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(*((LiteMessageServiceSession **)v3 + 1), v16, v17, v18, v19, v20, v21, v22);
  }

  else
  {
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( v3 + 16,  KeyPath,  closure #1 in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.consolidationIdentifier.setterpartial apply,  v30,  (char *)&type metadata for () + 8,  v7);
    swift_bridgeObjectRelease(v5, v23, v24, v25, v26, v27, v28, v29);
    swift_release(KeyPath);
  }

  free(v3);
}

uint64_t LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.segmentNumber.init(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v9;
  uint64_t v4 = v10;
  __swift_project_boxed_opaque_existential_1(v8, v9);
  uint64_t KeyPath = swift_getKeyPath(&unk_3C4D8);
  uint64_t v7 = a1;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( KeyPath,  &v7,  &type metadata for Int,  &protocol witness table for Int,  v3,  v4);
  swift_release(KeyPath);
  return __swift_destroy_boxed_opaque_existential_0(v8);
}

uint64_t LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.segmentNumber.getter()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_3C4D8);
  uint64_t v2 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_3C4D8);
  uint64_t v4 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.segmentNumber.setter(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_3C4D8);
  uint64_t v7 = v1;
  uint64_t v8 = a1;
  uint64_t v4 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  partial apply for closure #1 in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.segmentNumber.setter,  &v6,  (char *)&type metadata for () + 8,  v4);
  return swift_release(KeyPath);
}

uint64_t closure #1 in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.segmentNumber.setter( uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_3C4D8);
  uint64_t v6 = a2;
  uint64_t v4 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t partial apply for closure #1 in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.segmentNumber.setter()
{
  return closure #1 in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.segmentNumber.setter( *(void *)(v0 + 16),  *(void *)(v0 + 24));
}

void (*LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.segmentNumber.modify( void *a1))(uint64_t **a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  uint64_t v5 = OBJC_IVAR____TtCO12iMessageLite31LiteMessageSegmentStoreSchemaV118LiteMessageSegment___observationRegistrar;
  v4[2] = v2;
  v4[3] = v5;
  v4[1] = v2;
  uint64_t KeyPath = swift_getKeyPath(&unk_3C4D8);
  uint64_t v7 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  v4[4] = v7;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4 + 1, KeyPath, v7);
  swift_release(KeyPath);
  uint64_t v8 = swift_getKeyPath(&unk_3C4D8);
  uint64_t v9 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  PersistentModel.getValue<A>(forKey:)(v4 + 1, v8, v9, &protocol witness table for Int);
  swift_release(v8);
  *uint64_t v4 = v4[1];
  return LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.segmentNumber.modify;
}

void LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.segmentNumber.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[2];
  uint64_t v5 = *a1;
  v5[1] = v4;
  uint64_t KeyPath = swift_getKeyPath(&unk_3C4D8);
  uint64_t v7[2] = v4;
  v7[3] = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( v5 + 1,  KeyPath,  closure #1 in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.segmentNumber.setterpartial apply,  v7,  (char *)&type metadata for () + 8,  v3);
  swift_release(KeyPath);
  free(v1);
}

uint64_t LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.dateReceived.init(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v10;
  uint64_t v4 = v11;
  __swift_project_boxed_opaque_existential_1(v9, v10);
  uint64_t KeyPath = swift_getKeyPath(&unk_3C500);
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type Date and conformance Date,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, a1, v6, v7, v3, v4);
  swift_release(KeyPath);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
  return __swift_destroy_boxed_opaque_existential_0(v9);
}

uint64_t LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.dateReceived.getter@<X0>(void *a1@<X8>)
{
  uint64_t v9 = v1;
  uint64_t KeyPath = swift_getKeyPath(&unk_3C500);
  uint64_t v4 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_3C500);
  uint64_t v6 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  uint64_t v7 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type Date and conformance Date,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  PersistentModel.getValue<A>(forKey:)(a1, v5, v6, v7);
  return swift_release(v5);
}

uint64_t LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.dateReceived.setter(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_3C500);
  uint64_t v8 = v1;
  uint64_t v9 = a1;
  uint64_t v4 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v10,  KeyPath,  partial apply for closure #1 in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.dateReceived.setter,  &v7,  (char *)&type metadata for () + 8,  v4);
  swift_release(KeyPath);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(a1, v5);
}

uint64_t closure #1 in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.dateReceived.setter( uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_3C500);
  uint64_t v4 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  uint64_t v5 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type Date and conformance Date,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, a2, v4, v5);
  return swift_release(KeyPath);
}

uint64_t partial apply for closure #1 in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.dateReceived.setter()
{
  return closure #1 in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.dateReceived.setter( *(void *)(v0 + 16),  *(void *)(v0 + 24));
}

void (*LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.dateReceived.modify( void *a1))(uint64_t a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x50uLL);
  *a1 = v4;
  v4[3] = v2;
  uint64_t v5 = type metadata accessor for Date(0LL);
  v4[4] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[5] = v6;
  size_t v7 = *(void *)(v6 + 64);
  v4[6] = malloc(v7);
  uint64_t v8 = malloc(v7);
  uint64_t v9 = OBJC_IVAR____TtCO12iMessageLite31LiteMessageSegmentStoreSchemaV118LiteMessageSegment___observationRegistrar;
  void v4[7] = v8;
  v4[8] = v9;
  *uint64_t v4 = v2;
  uint64_t KeyPath = swift_getKeyPath(&unk_3C500);
  uint64_t v11 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  void v4[9] = v11;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v11);
  swift_release(KeyPath);
  uint64_t v12 = swift_getKeyPath(&unk_3C500);
  uint64_t v13 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  uint64_t v14 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type Date and conformance Date,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  PersistentModel.getValue<A>(forKey:)(v8, v12, v13, v14);
  swift_release(v12);
  return LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.dateReceived.modify;
}

void LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.dateReceived.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 72LL);
  uint64_t v4 = *(void **)(*(void *)a1 + 48LL);
  uint64_t v5 = *(void **)(*(void *)a1 + 56LL);
  uint64_t v6 = *(void *)(*(void *)a1 + 32LL);
  uint64_t v7 = *(void *)(*(void *)a1 + 40LL);
  uint64_t v8 = *(void *)(*(void *)a1 + 24LL);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(void, void *, uint64_t))(v7 + 16))(*(void *)(*(void *)a1 + 48LL), v5, v6);
    v2[1] = v8;
    uint64_t KeyPath = swift_getKeyPath(&unk_3C500);
    v15[0] = v15;
    __chkstk_darwin(KeyPath);
    uint64_t v13 = v8;
    uint64_t v14 = v4;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( v2 + 1,  KeyPath,  closure #1 in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.dateReceived.setterpartial apply,  v12,  (char *)&type metadata for () + 8,  v3);
    swift_release(KeyPath);
    uint64_t v10 = *(void (**)(void *, uint64_t))(v7 + 8);
    v10(v4, v6);
    v10(v5, v6);
  }

  else
  {
    v2[2] = v8;
    uint64_t v11 = swift_getKeyPath(&unk_3C500);
    v15[0] = v15;
    __chkstk_darwin(v11);
    uint64_t v13 = v8;
    uint64_t v14 = v5;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( v2 + 2,  v11,  closure #1 in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.dateReceived.setterpartial apply,  v12,  (char *)&type metadata for () + 8,  v3);
    swift_release(v11);
    (*(void (**)(void *, uint64_t))(v7 + 8))(v5, v6);
  }

  free(v5);
  free(v4);
  free(v2);
}

uint64_t key path getter for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.data : LiteMessageSegmentStoreSchemaV1.LiteMessageSegment@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 296LL))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.data : LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, unint64_t))(**(void **)a2 + 304LL);
  outlined copy of Data._Representation(*a1, v3);
  return v4(v2, v3);
}

uint64_t LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.data.init( uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = v12;
  uint64_t v6 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  uint64_t KeyPath = swift_getKeyPath(&unk_3C528);
  v10[0] = a1;
  v10[1] = a2;
  unint64_t v8 = lazy protocol witness table accessor for type Data and conformance Data();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, v10, &type metadata for Data, v8, v5, v6);
  swift_release(KeyPath);
  outlined consume of Data._Representation(a1, a2);
  return __swift_destroy_boxed_opaque_existential_0(v11);
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }

  return result;
}

uint64_t LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.data.getter()
{
  uint64_t v7 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_3C528);
  uint64_t v2 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_3C528);
  uint64_t v4 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  unint64_t v5 = lazy protocol witness table accessor for type Data and conformance Data();
  PersistentModel.getValue<A>(forKey:)(&v7, v3, v4, v5);
  swift_release(v3);
  return v7;
}

uint64_t LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.data.setter(uint64_t a1, unint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_3C528);
  uint64_t v9 = v2;
  uint64_t v10 = a1;
  unint64_t v11 = a2;
  uint64_t v6 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v12,  KeyPath,  partial apply for closure #1 in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.data.setter,  &v8,  (char *)&type metadata for () + 8,  v6);
  outlined consume of Data._Representation(a1, a2);
  return swift_release(KeyPath);
}

uint64_t closure #1 in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.data.setter( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_3C528);
  v9[0] = a2;
  v9[1] = a3;
  uint64_t v6 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  unint64_t v7 = lazy protocol witness table accessor for type Data and conformance Data();
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, v9, v6, v7);
  return swift_release(KeyPath);
}

uint64_t partial apply for closure #1 in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.data.setter()
{
  return closure #1 in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.data.setter(v0[2], v0[3], v0[4]);
}

void (*LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.data.modify( void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x38uLL);
  *a1 = v4;
  uint64_t v5 = OBJC_IVAR____TtCO12iMessageLite31LiteMessageSegmentStoreSchemaV118LiteMessageSegment___observationRegistrar;
  v4[4] = v2;
  v4[5] = v5;
  v4[2] = v2;
  uint64_t KeyPath = swift_getKeyPath(&unk_3C528);
  uint64_t v7 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  v4[6] = v7;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4 + 2, KeyPath, v7);
  swift_release(KeyPath);
  uint64_t v8 = swift_getKeyPath(&unk_3C528);
  uint64_t v9 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  unint64_t v10 = lazy protocol witness table accessor for type Data and conformance Data();
  PersistentModel.getValue<A>(forKey:)(v4 + 2, v8, v9, v10);
  swift_release(v8);
  *(_OWORD *)uint64_t v4 = *((_OWORD *)v4 + 1);
  return LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.data.modify;
}

void LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.data.modify(uint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (*a1)[4];
  v3[2] = v4;
  uint64_t v6 = *v3;
  unint64_t v5 = v3[1];
  uint64_t v7 = v3[6];
  uint64_t KeyPath = swift_getKeyPath(&unk_3C528);
  void v9[2] = v4;
  void v9[3] = v6;
  v9[4] = v5;
  if ((a2 & 1) != 0)
  {
    outlined copy of Data._Representation(v6, v5);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( v3 + 2,  KeyPath,  closure #1 in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.data.setterpartial apply,  v9,  (char *)&type metadata for () + 8,  v7);
    outlined consume of Data._Representation(v6, v5);
    swift_release(KeyPath);
    outlined consume of Data._Representation(*v3, v3[1]);
  }

  else
  {
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( v3 + 2,  KeyPath,  closure #1 in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.data.setterpartial apply,  v9,  (char *)&type metadata for () + 8,  v7);
    outlined consume of Data._Representation(v6, v5);
    swift_release(KeyPath);
  }

  free(v3);
}

uint64_t LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.__allocating_init(consolidationIdentifier:segmentNumber:dateReceived:data:)( uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, unint64_t a6)
{
  uint64_t v13 = specialized LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.init(consolidationIdentifier:segmentNumber:dateReceived:data:)( a1,  a2,  a3,  a4,  a5,  a6);
  outlined consume of Data._Representation(a5, a6);
  return v13;
}

uint64_t LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.init(consolidationIdentifier:segmentNumber:dateReceived:data:)( uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8 = specialized LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.init(consolidationIdentifier:segmentNumber:dateReceived:data:)( a1,  a2,  a3,  a4,  a5,  a6);
  outlined consume of Data._Representation(a5, a6);
  return v8;
}

uint64_t variable initialization expression of LiteMessageSegmentStoreSchemaV1.LiteMessageSegment._$backingData@<X0>( void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment(0LL);
  a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static PersistentModel.createBackingData<A>()>>.0);
  uint64_t v3 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  v5[0] = v2;
  v5[1] = v2;
  _OWORD v5[2] = v3;
  v5[3] = v3;
  a1[4] = swift_getOpaqueTypeConformance2( v5,  &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>,  1LL);
  __swift_allocate_boxed_opaque_existential_1(a1);
  return static PersistentModel.createBackingData<A>()(v2, v2, v3, v3);
}

uint64_t key path getter for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.persistentBackingData : LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 352LL))();
}

uint64_t key path setter for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.persistentBackingData : LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_BYTE *))(**(void **)a2 + 360LL))(v4);
}

uint64_t LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.persistentBackingData.getter@<X0>( uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 16;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return outlined init with copy of LiteMessageContent(v3, a1);
}

uint64_t LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.persistentBackingData.setter(__int128 *a1)
{
  uint64_t v3 = (void *)(v1 + 16);
  swift_beginAccess(v3, v5, 33LL, 0LL);
  __swift_destroy_boxed_opaque_existential_0(v3);
  outlined init with take of LiteMessageContent(a1, (uint64_t)v3);
  return swift_endAccess(v5);
}

void (*LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.persistentBackingData.modify( void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[16] = v1;
  swift_beginAccess(v1 + 16, v3 + 10, 0LL, 0LL);
  outlined init with copy of LiteMessageContent(v1 + 16, (uint64_t)v3);
  return LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.persistentBackingData.modify;
}

void LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.persistentBackingData.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = (__int128 *)*a1;
  uint64_t v3 = (__int128 *)(*a1 + 40);
  if ((a2 & 1) != 0)
  {
    uint64_t v4 = (void *)(*((void *)v2 + 16) + 16LL);
    outlined init with copy of LiteMessageContent(*a1, (uint64_t)v3);
    swift_beginAccess(v4, (char *)v2 + 104, 33LL, 0LL);
    __swift_destroy_boxed_opaque_existential_0(v4);
    outlined init with take of LiteMessageContent(v3, (uint64_t)v4);
    swift_endAccess((char *)v2 + 104);
    __swift_destroy_boxed_opaque_existential_0(v2);
  }

  else
  {
    unint64_t v5 = (void *)(*((void *)v2 + 16) + 16LL);
    swift_beginAccess(v5, v3, 33LL, 0LL);
    __swift_destroy_boxed_opaque_existential_0(v5);
    outlined init with take of LiteMessageContent(v2, (uint64_t)v5);
    swift_endAccess(v3);
  }

  free(v2);
}

void *LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.__allocating_init(backingData:)(void *a1)
{
  uint64_t v3 = (void *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v3[5] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static PersistentModel.createBackingData<A>()>>.0);
  uint64_t v4 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  *(void *)&__int128 v8 = v1;
  *((void *)&v8 + 1) = v1;
  uint64_t v9 = v4;
  uint64_t v10 = v4;
  v3[6] = swift_getOpaqueTypeConformance2( &v8,  &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>,  1LL);
  __swift_allocate_boxed_opaque_existential_1(v3 + 2);
  uint64_t v5 = static PersistentModel.createBackingData<A>()(v1, v1, v4, v4);
  ObservationRegistrar.init()(v5);
  outlined init with copy of LiteMessageContent((uint64_t)a1, (uint64_t)&v8);
  swift_beginAccess(v3 + 2, v7, 33LL, 0LL);
  __swift_destroy_boxed_opaque_existential_0(v3 + 2);
  outlined init with take of LiteMessageContent(&v8, (uint64_t)(v3 + 2));
  swift_endAccess(v7);
  __swift_destroy_boxed_opaque_existential_0(a1);
  return v3;
}

void *LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.init(backingData:)(void *a1)
{
  uint64_t v3 = type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment(0LL);
  v1[5] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static PersistentModel.createBackingData<A>()>>.0);
  uint64_t v4 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  v7[0] = v3;
  v7[1] = v3;
  uint64_t v7[2] = v4;
  v7[3] = v4;
  v1[6] = swift_getOpaqueTypeConformance2( v7,  &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>,  1LL);
  __swift_allocate_boxed_opaque_existential_1(v1 + 2);
  uint64_t v5 = static PersistentModel.createBackingData<A>()(v3, v3, v4, v4);
  ObservationRegistrar.init()(v5);
  outlined init with copy of LiteMessageContent((uint64_t)a1, (uint64_t)v7);
  (*(void (**)(void *))(*v1 + 360LL))(v7);
  __swift_destroy_boxed_opaque_existential_0(a1);
  return v1;
}

uint64_t LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.access<A>(keyPath:)(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  return ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, a1, v2);
}

uint64_t LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.withMutation<A, B>(keyPath:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, a1, a2, a3, a4, v8);
}

uint64_t LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCO12iMessageLite31LiteMessageSegmentStoreSchemaV118LiteMessageSegment___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  return v0;
}

uint64_t LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.__deallocating_deinit()
{
  uint64_t v1 = (char *)v0
     + OBJC_IVAR____TtCO12iMessageLite31LiteMessageSegmentStoreSchemaV118LiteMessageSegment___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48LL), *(unsigned __int16 *)(*v0 + 52LL));
}

Swift::Int LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.hashValue.getter()
{
  uint64_t v0 = type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment(0LL);
  uint64_t v1 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  PersistentModel.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for PersistentModel.init(backingData:) in conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment()
{
  return (*(uint64_t (**)(void))(v0 + 376))();
}

uint64_t protocol witness for PersistentModel.persistentBackingData.getter in conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352LL))();
}

uint64_t protocol witness for PersistentModel.persistentBackingData.setter in conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360LL))();
}

void (*protocol witness for PersistentModel.persistentBackingData.modify in conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(void *)v1 + 368LL))();
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment()
{
  uint64_t v0 = type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment(0LL);
  uint64_t v1 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  PersistentModel.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable( &protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  a2);
  return PersistentModel.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable( &protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  a2);
  PersistentModel.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

uint64_t protocol witness for Identifiable.id.getter in conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment()
{
  uint64_t v0 = type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment(0LL);
  uint64_t v1 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  return PersistentModel.id.getter(v0, v1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable( &protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  a3);
  return static PersistentModel.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t specialized LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.init(consolidationIdentifier:segmentNumber:dateReceived:data:)( uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v38 = a5;
  uint64_t v39 = a6;
  unsigned __int8 v37 = a4;
  uint64_t v35 = a3;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v36 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = (void *)(v6 + 16);
  uint64_t v14 = type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment(0LL);
  *(void *)(v7 + 40) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static PersistentModel.createBackingData<A>()>>.0);
  uint64_t v15 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
  v42[0] = v14;
  v42[1] = v14;
  v42[2] = v15;
  uint64_t v43 = v15;
  *(void *)(v7 + 4_Block_object_dispose(va, 8) = swift_getOpaqueTypeConformance2( v42,  &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>,  1LL);
  __swift_allocate_boxed_opaque_existential_1(v13);
  uint64_t v16 = static PersistentModel.createBackingData<A>()(v14, v14, v15, v15);
  ObservationRegistrar.init()(v16);
  outlined init with copy of LiteMessageContent((uint64_t)v13, (uint64_t)v42);
  uint64_t v18 = v43;
  uint64_t v17 = v44;
  __swift_project_boxed_opaque_existential_1(v42, v43);
  uint64_t KeyPath = swift_getKeyPath(&unk_3C4B0);
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( KeyPath,  &v40,  &type metadata for String,  &protocol witness table for String,  v18,  v17);
  swift_bridgeObjectRelease(a2);
  swift_release(KeyPath);
  __swift_destroy_boxed_opaque_existential_0(v42);
  outlined init with copy of LiteMessageContent((uint64_t)v13, (uint64_t)v42);
  uint64_t v20 = v43;
  uint64_t v21 = v44;
  __swift_project_boxed_opaque_existential_1(v42, v43);
  uint64_t v22 = swift_getKeyPath(&unk_3C4D8);
  uint64_t v40 = v35;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v22,  &v40,  &type metadata for Int,  &protocol witness table for Int,  v20,  v21);
  swift_release(v22);
  __swift_destroy_boxed_opaque_existential_0(v42);
  uint64_t v23 = v36;
  id v24 = v37;
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v12, v37, v10);
  outlined init with copy of LiteMessageContent((uint64_t)v13, (uint64_t)v42);
  uint64_t v25 = v43;
  uint64_t v26 = v44;
  __swift_project_boxed_opaque_existential_1(v42, v43);
  uint64_t v27 = swift_getKeyPath(&unk_3C500);
  uint64_t v28 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type Date and conformance Date,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v27, v12, v10, v28, v25, v26);
  swift_release(v27);
  id v29 = *(void (**)(char *, uint64_t))(v23 + 8);
  v29(v12, v10);
  __swift_destroy_boxed_opaque_existential_0(v42);
  outlined init with copy of LiteMessageContent((uint64_t)v13, (uint64_t)v42);
  uint64_t v30 = v43;
  uint64_t v31 = v44;
  __swift_project_boxed_opaque_existential_1(v42, v43);
  uint64_t v32 = swift_getKeyPath(&unk_3C528);
  uint64_t v40 = v38;
  uint64_t v41 = v39;
  unint64_t v33 = lazy protocol witness table accessor for type Data and conformance Data();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v32, &v40, &type metadata for Data, v33, v30, v31);
  swift_release(v32);
  __swift_destroy_boxed_opaque_existential_0(v42);
  v29(v24, v10);
  return v7;
}

uint64_t specialized static LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.schemaMetadata.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Schema.PropertyMetadata>);
  uint64_t v1 = *(void *)(type metadata accessor for Schema.PropertyMetadata(0LL) - 8);
  uint64_t v2 = swift_allocObject( v0,  ((*(unsigned __int8 *)(v1 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
       + 4LL * *(void *)(v1 + 72),
         *(unsigned __int8 *)(v1 + 80) | 7LL);
  *(_OWORD *)(v2 + 16) = xmmword_3C4A0;
  uint64_t KeyPath = swift_getKeyPath(&unk_3C4B0);
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  uint64_t v10 = 0LL;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0xD000000000000017LL,  0x800000000003DCC0LL,  KeyPath,  &v11,  &v8);
  uint64_t v4 = swift_getKeyPath(&unk_3C4D8);
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  uint64_t v10 = 0LL;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x4E746E656D676573LL,  0xED00007265626D75LL,  v4,  &v11,  &v8);
  uint64_t v5 = swift_getKeyPath(&unk_3C500);
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  uint64_t v10 = 0LL;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x6563655265746164LL,  0xEC00000064657669LL,  v5,  &v11,  &v8);
  uint64_t v6 = swift_getKeyPath(&unk_3C528);
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  uint64_t v10 = 0LL;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(1635017060LL, 0xE400000000000000LL, v6, &v11, &v8);
  return v2;
}

uint64_t base witness table accessor for Observable in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment()
{
  return lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
}

uint64_t base witness table accessor for Hashable in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment()
{
  return lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
}

uint64_t base witness table accessor for Identifiable in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment()
{
  return lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
}

uint64_t base witness table accessor for Equatable in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment()
{
  return lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment,  (uint64_t)&protocol conformance descriptor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment);
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment()
{
  return lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1.LiteMessageSegment and conformance LiteMessageSegmentStoreSchemaV1.LiteMessageSegment( &lazy protocol witness table cache variable for type PersistentIdentifier and conformance PersistentIdentifier,  (uint64_t (*)(uint64_t))&type metadata accessor for PersistentIdentifier,  (uint64_t)&protocol conformance descriptor for PersistentIdentifier);
}

ValueMetadata *type metadata accessor for LiteMessageSegmentStoreSchemaV1()
{
  return &type metadata for LiteMessageSegmentStoreSchemaV1;
}

uint64_t ObjC metadata update function for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment()
{
  return type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment(0LL);
}

uint64_t type metadata completion function for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment(uint64_t a1)
{
  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = (char *)&value witness table for () + 64;
  v4[2] = (char *)&value witness table for () + 64;
  v4[3] = (char *)&value witness table for () + 64;
  v4[4] = "(";
  uint64_t result = type metadata accessor for ObservationRegistrar(319LL);
  if (v3 <= 0x3F)
  {
    v4[5] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 6LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment._SwiftDataNoType()
{
  return &type metadata for LiteMessageSegmentStoreSchemaV1.LiteMessageSegment._SwiftDataNoType;
}

uint64_t closure #1 in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.segmentNumber.setterpartial apply()
{
  return partial apply for closure #1 in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.segmentNumber.setter();
}

uint64_t closure #1 in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.dateReceived.setterpartial apply()
{
  return partial apply for closure #1 in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.dateReceived.setter();
}

uint64_t closure #1 in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.consolidationIdentifier.setterpartial apply()
{
  return partial apply for closure #1 in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.consolidationIdentifier.setter();
}

uint64_t closure #1 in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.data.setterpartial apply()
{
  return partial apply for closure #1 in LiteMessageSegmentStoreSchemaV1.LiteMessageSegment.data.setter();
}

uint64_t LiteMessageType.init(associatedMessageType:)(uint64_t a1)
{
  if (a1 == 3007 || a1 == 1000) {
    return 0LL;
  }
  else {
    return 2LL;
  }
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance LiteMessageType@<X0>( unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized LiteMessageType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

BOOL LiteMessageType.isCoreType.getter(unsigned __int8 a1)
{
  return a1 < 3u;
}

unint64_t specialized LiteMessageType.init(rawValue:)(unint64_t result)
{
  if (result >= 4) {
    return 4LL;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LiteMessageType and conformance LiteMessageType()
{
  unint64_t result = lazy protocol witness table cache variable for type LiteMessageType and conformance LiteMessageType;
  if (!lazy protocol witness table cache variable for type LiteMessageType and conformance LiteMessageType)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LiteMessageType,  &type metadata for LiteMessageType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LiteMessageType and conformance LiteMessageType);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for LiteMessageType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

uint64_t storeEnumTagSinglePayload for LiteMessageType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_33E14 + 4 * byte_3C789[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_33E48 + 4 * asc_3C784[v4]))();
}

uint64_t sub_33E48(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_33E50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x33E58LL);
  }
  return result;
}

uint64_t sub_33E64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x33E6CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_33E70(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_33E78(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LiteMessageType()
{
  return &type metadata for LiteMessageType;
}

double static Double.defaultSMSDowngradeTimeInterval.getter()
{
  id v0 = [(id)objc_opt_self(IDSServerBag) sharedInstanceForBagType:1];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v9, v2);
    swift_unknownObjectRelease(v2);
  }

  else
  {
    memset(v9, 0, sizeof(v9));
  }

  outlined init with take of Any?((uint64_t)v9, (uint64_t)v10);
  if (!v11)
  {
    outlined destroy of Any?((uint64_t)v10);
    return 86400.0;
  }

  unint64_t v3 = type metadata accessor for NSNumber();
  id v4 = v8;
  [v8 doubleValue];
  double v6 = v5;

  return v6;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSNumber);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }

  return result;
}

Swift::Void __swiftcall LiteMessageServiceSession.prepareForFirstUnlock()()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  double v5 = (void *)objc_opt_self(&OBJC_CLASS___IMUnlockMonitor);
  id v6 = [v5 sharedInstance];
  [v6 addListener:v0];

  id v7 = [v5 sharedInstance];
  LOBYTE(v6) = [v7 isUnderFirstDataProtectionLock];

  if ((v6 & 1) != 0)
  {
    uint64_t v8 = Logger.liteSession.unsafeMutableAddressor();
    uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v8, v1);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      __int128 v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)__int128 v12 = 0;
      _os_log_impl(&dword_0, v10, v11, "Deferring first unlock tasks", v12, 2u);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }

  else
  {
    LiteMessageServiceSession.performFirstUnlockTasks()();
  }

Swift::Void __swiftcall LiteMessageServiceSession.performFirstUnlockTasks()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v2);
  id v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = Logger.liteSession.unsafeMutableAddressor();
  uint64_t v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  os_log_type_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_0, v11, v12, "Performing first unlock tasks", v13, 2u);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v14 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v4, 1LL, 1LL, v14);
  type metadata accessor for MainActor(0LL);
  id v15 = v1;
  uint64_t v16 = static MainActor.shared.getter(v15);
  uint64_t v17 = (void *)swift_allocObject(&unk_4A850, 40LL, 7LL);
  v17[2] = v16;
  void v17[3] = &protocol witness table for MainActor;
  v17[4] = v15;
  uint64_t v18 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( (uint64_t)v4,  (uint64_t)&async function pointer to partial apply for closure #1 in LiteMessageServiceSession.performFirstUnlockTasks(),  (uint64_t)v17);
  swift_release(v18);
  LiteMessageServiceSession.sendUpgradeMessagesIfNeeded()();
}

uint64_t closure #1 in LiteMessageServiceSession.performFirstUnlockTasks()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v5 = type metadata accessor for MainActor(0LL);
  v4[3] = static MainActor.shared.getter(v5);
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[4] = v6;
  v4[5] = v7;
  return swift_task_switch(closure #1 in LiteMessageServiceSession.performFirstUnlockTasks(), v6, v7);
}

uint64_t closure #1 in LiteMessageServiceSession.performFirstUnlockTasks()()
{
  uint64_t v1 = LiteMessageServiceSession.segmentStore.getter();
  *(void *)(v0 + 4_Block_object_dispose(va, 8) = v1;
  return swift_task_switch(closure #1 in LiteMessageServiceSession.performFirstUnlockTasks(), v1, 0LL);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v1 = v0[6];
  LiteMessageSegmentStore.deleteAbandonedMessageSegments()();
  swift_release(v1);
  return swift_task_switch(closure #1 in LiteMessageServiceSession.familyContactsDidChange(), v0[4], v0[5]);
}

uint64_t sub_3447C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t partial apply for closure #1 in LiteMessageServiceSession.performFirstUnlockTasks()()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc(dword_4E26C);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #1 in LiteMessageServiceSession.familyContactsDidChange();
  return closure #1 in LiteMessageServiceSession.performFirstUnlockTasks()((uint64_t)v3, v4, v5, v2);
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_34534()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

BOOL LiteMessageServiceSession.hasExistingMessageWithLiteIdentifier(_:in:)()
{
  id v0 = [(id)objc_opt_self(IMDMessageStore) sharedInstance];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 messageWithGUID:v1];

  if (v2) {
  return v2 != 0LL;
  }
}

uint64_t static LiteMessageSegmentStoreMigrationPlan.schemas.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<VersionedSchema.Type>);
  uint64_t v1 = swift_allocObject(v0, 48LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_3BA10;
  unint64_t v2 = lazy protocol witness table accessor for type LiteMessageSegmentStoreSchemaV1 and conformance LiteMessageSegmentStoreSchemaV1();
  *(void *)(v1 + 3__swift_destroy_boxed_opaque_existential_0(v0 + 2) = &type metadata for LiteMessageSegmentStoreSchemaV1;
  *(void *)(v1 + 40) = v2;
  return v1;
}

void *static LiteMessageSegmentStoreMigrationPlan.stages.getter()
{
  return &_swiftEmptyArrayStorage;
}

ValueMetadata *type metadata accessor for LiteMessageSegmentStoreMigrationPlan()
{
  return &type metadata for LiteMessageSegmentStoreMigrationPlan;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance IMMessageItem.IMMessageItemContentType@<X0>( unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized IMMessageItem.IMMessageItemContentType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

id IMMessageItem.liteAssociatedMessageSummaryInfo()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v255 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  v267 = &_swiftEmptyDictionarySingleton;
  id v7 = [objc_allocWithZone(IMPluginPayload) initWithMessageItem:v0];
  if (!v7)
  {
LABEL_6:
    if ([v0 type])
    {
LABEL_7:
      uint64_t v27 = 0LL;
      goto LABEL_8;
    }

    id v53 = [v0 fileTransferGUIDs];
    if (v53)
    {
      id v54 = v53;
      uint64_t v55 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v53, &type metadata for String);

      if (*(void *)(v55 + 16))
      {
        id v63 = *(LiteMessageServiceSession **)(v55 + 40);
        swift_bridgeObjectRetain(v63);
        swift_bridgeObjectRelease((LiteMessageServiceSession *)v55, v64, v65, v66, v67, v68, v69, v70);
        id v71 = [(id)objc_opt_self(IMDFileTransferCenter) sharedInstance];
        if (v71)
        {
          uint64_t v79 = v71;
          NSString v80 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v63, v81, v82, v83, v84, v85, v86, v87);
          id v88 = [v79 transferForGUID:v80];

          if (v88)
          {
            id v89 = [v88 type];
            if (IMUTTypeIsImage() || IMUTTypeIsSupportedAnimatedImage(v89))
            {

              uint64_t v27 = 3LL;
            }

            else if (IMUTTypeIsMovie(v89))
            {

              uint64_t v27 = 7LL;
            }

            else if (IMUTTypeIsVCard(v89))
            {

              uint64_t v27 = 4LL;
            }

            else if (IMUTTypeIsAudio(v89))
            {

              uint64_t v27 = 2LL;
            }

            else if (IMUTTypeIsMap(v89))
            {

              uint64_t v27 = 6LL;
            }

            else if (IMUTTypeIsCalendar(v89))
            {

              uint64_t v27 = 5LL;
            }

            else if (IMUTTypeIsPass(v89))
            {

              uint64_t v27 = 8LL;
            }

            else
            {
              int IsWalletOrder = IMUTTypeIsWalletOrder(v89);

              if (IsWalletOrder) {
                uint64_t v27 = 10LL;
              }
              else {
                uint64_t v27 = 0LL;
              }
            }

            goto LABEL_8;
          }
        }

        else
        {
          swift_bridgeObjectRelease(v63, v72, v73, v74, v75, v76, v77, v78);
        }

        goto LABEL_7;
      }

      swift_bridgeObjectRelease((LiteMessageServiceSession *)v55, v56, v57, v58, v59, v60, v61, v62);
      uint64_t v27 = 1LL;
    }

    else
    {
      uint64_t v27 = 1LL;
    }

void *specialized _arrayConditionalCast<A, B>(_:)(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  unint64_t v12 = _swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 40LL)
    {
      outlined init with copy of AnyHashable(i, (uint64_t)v11);
      uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject.Type);
      uint64_t v6 = v10;
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1LL, 1);
        uint64_t v3 = v12;
      }

      unint64_t v8 = v3[2];
      unint64_t v7 = v3[3];
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
        uint64_t v3 = v12;
      }

      v3[2] = v8 + 1;
      v3[v8 + 4] = v6;
      if (!--v2) {
        return v3;
      }
    }

    uint64_t v10 = 0LL;
    swift_release(v3);
    return 0LL;
  }

  return v3;
}

void *specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  int64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v4 = (uint64_t *)(a1 + 32);
    int64_t v2 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v11 = *v4;
      uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject.Type);
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
      swift_dynamicCast(&v12, &v11, v5, v6, 7LL);
      uint64_t v7 = v12;
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1LL, 1);
        int64_t v2 = v13;
      }

      unint64_t v9 = v2[2];
      unint64_t v8 = v2[3];
      if (v9 >= v8 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        int64_t v2 = v13;
      }

      v2[2] = v9 + 1;
      v2[v9 + 4] = v7;
      ++v4;
      --v1;
    }

    while (v1);
  }

  return v2;
}

uint64_t specialized getContiguousArrayStorageType<A>(for:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject.Type);
  else {
    uint64_t v1 = 0LL;
  }
  if (v1) {
    int64_t v2 = &demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>;
  }
  else {
    int64_t v2 = (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<NSObject.Type>;
  }
  return __swift_instantiateConcreteTypeFromMangledName(v2);
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = (LiteMessageServiceSession *)*v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = (_BYTE)v8;
  swift_bridgeObjectRelease(v6, v8, v9, v10, v11, v12, v13, v14);
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v16 = *v3;
    id v26 = (LiteMessageServiceSession *)*v3;
    *uint64_t v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v16 = (uint64_t)v26;
    }

    outlined destroy of AnyHashable(*(void *)(v16 + 48) + 40 * v7);
    outlined init with take of Any((_OWORD *)(*(void *)(v16 + 56) + 32 * v7), a2);
    specialized _NativeDictionary._delete(at:)(v7, v16);
    uint64_t v17 = (LiteMessageServiceSession *)*v3;
    *uint64_t v3 = v16;
    swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
  }

  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }

  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyHashable>);
  uint64_t v4 = (void *)swift_allocObject(v3, 40 * v1 + 32, 7LL);
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = v1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 40);
  uint64_t v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v9, (uint64_t)(v4 + 4), v1, a1);
  uint64_t v7 = v9;
  swift_bridgeObjectRetain(a1);
  outlined consume of [IDSURI : NSNumber].Iterator._Variant(v7);
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_44;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v15 << 6);
      goto LABEL_25;
    }

    int64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }

    if (v22 >= v12) {
      break;
    }
    id v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v15;
    if (!v24)
    {
      int64_t v15 = v22 + 1;
      if (v22 + 1 >= v12) {
        goto LABEL_37;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v15);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }

        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v15 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_46;
            }
            if (v15 >= v12) {
              goto LABEL_37;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v15);
            ++v25;
            if (v24) {
              goto LABEL_24;
            }
          }
        }

        int64_t v15 = v25;
      }
    }

LABEL_24:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v15 << 6);
LABEL_25:
    uint64_t v26 = *(void *)(v5 + 48) + 40 * v21;
    if ((a2 & 1) != 0)
    {
      __int128 v27 = *(_OWORD *)v26;
      __int128 v28 = *(_OWORD *)(v26 + 16);
      uint64_t v41 = *(void *)(v26 + 32);
      __int128 v39 = v27;
      __int128 v40 = v28;
      outlined init with take of Any((_OWORD *)(*(void *)(v5 + 56) + 32 * v21), v38);
    }

    else
    {
      outlined init with copy of AnyHashable(v26, (uint64_t)&v39);
      outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v21, (uint64_t)v38);
    }

    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v8 + 40));
    uint64_t v29 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v30 = result & ~v29;
    unint64_t v31 = v30 >> 6;
    if (((-1LL << v30) & ~*(void *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1LL << v30) & ~*(void *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v32 = 0;
      unint64_t v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        BOOL v34 = v31 == v33;
        if (v31 == v33) {
          unint64_t v31 = 0LL;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v13 + 8 * v31);
      }

      while (v35 == -1);
      unint64_t v16 = __clz(__rbit64(~v35)) + (v31 << 6);
    }

    *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
    uint64_t v17 = *(void *)(v8 + 48) + 40 * v16;
    __int128 v18 = v39;
    __int128 v19 = v40;
    *(void *)(v17 + 3__swift_destroy_boxed_opaque_existential_0(v0 + 2) = v41;
    *(_OWORD *)uint64_t v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    uint64_t result = (uint64_t)outlined init with take of Any(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v16));
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  id v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  uint64_t v36 = 1LL << *(_BYTE *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v23 = -1LL << v36;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_44:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        outlined init with copy of AnyHashable(*(void *)(a2 + 48) + 40 * v6, (uint64_t)v28);
        Swift::Int v10 = AnyHashable._rawHashValue(seed:)(*(void *)(a2 + 40));
        uint64_t result = outlined destroy of AnyHashable((uint64_t)v28);
        Swift::Int v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= v11)
          {
LABEL_16:
            uint64_t v14 = *(void *)(a2 + 48);
            unint64_t v15 = v14 + 40 * v3;
            unint64_t v16 = (__int128 *)(v14 + 40 * v6);
            if (v3 != v6 || v15 >= (unint64_t)v16 + 40)
            {
              __int128 v17 = *v16;
              __int128 v18 = v16[1];
              *(void *)(v15 + 3__swift_destroy_boxed_opaque_existential_0(v0 + 2) = *((void *)v16 + 4);
              *(_OWORD *)unint64_t v15 = v17;
              *(_OWORD *)(v15 + 16) = v18;
            }

            uint64_t v19 = *(void *)(a2 + 56);
            unint64_t v20 = (_OWORD *)(v19 + 32 * v3);
            unint64_t v21 = (_OWORD *)(v19 + 32 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 2))
            {
              __int128 v9 = v21[1];
              _OWORD *v20 = *v21;
              v20[1] = v9;
              int64_t v3 = v6;
            }
          }
        }

        else if (v11 >= v8 || v3 >= v11)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    int64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1LL << v3) - 1;
  }

  else
  {
    int64_t v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1LL << result) - 1;
  }

  uint64_t *v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1LL);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  unint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      unint64_t v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        __int128 v17 = (void *)(v16[7] + 32 * v10);
        __swift_destroy_boxed_opaque_existential_0(v17);
        return outlined init with take of Any(a1, v17);
      }

      goto LABEL_11;
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }

    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      unint64_t v16 = *v4;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      outlined init with copy of AnyHashable(a2, (uint64_t)v21);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v21, a1, v16);
    }
  }

  uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)( unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 3__swift_destroy_boxed_opaque_existential_0(v0 + 2) = *(void *)(a2 + 32);
  uint64_t result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }

uint64_t specialized Sequence._copySequenceContents(initializing:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v13 = 0LL;
LABEL_36:
    *uint64_t v5 = a4;
    v5[1] = v6;
    _OWORD v5[2] = ~v7;
    v5[3] = v12;
    void v5[4] = v9;
    return v13;
  }

  if (!a3)
  {
    int64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    goto LABEL_36;
  }

  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v22 = -1LL << *(_BYTE *)(a4 + 32);
  while (v9)
  {
    unint64_t v15 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v16 = v15 | (v12 << 6);
LABEL_9:
    ++v13;
    uint64_t result = outlined init with copy of AnyHashable(*(void *)(a4 + 48) + 40 * v16, (uint64_t)v23);
    uint64_t v17 = v24;
    __int128 v18 = v23[1];
    *(_OWORD *)uint64_t v11 = v23[0];
    *(_OWORD *)(v11 + 16) = v18;
    *(void *)(v11 + 3__swift_destroy_boxed_opaque_existential_0(v0 + 2) = v17;
    v11 += 40LL;
    if (v13 == a3)
    {
      uint64_t v13 = a3;
LABEL_35:
      uint64_t v7 = v22;
      goto LABEL_36;
    }
  }

  int64_t v19 = v12 + 1;
  if (__OFADD__(v12, 1LL))
  {
    __break(1u);
    goto LABEL_38;
  }

  if (v19 >= v14) {
    goto LABEL_34;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v19);
  if (v20) {
    goto LABEL_23;
  }
  int64_t v21 = v12 + 2;
  ++v12;
  if (v19 + 1 >= v14) {
    goto LABEL_34;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20) {
    goto LABEL_16;
  }
  int64_t v12 = v19 + 1;
  if (v19 + 2 >= v14) {
    goto LABEL_34;
  }
  unint64_t v20 = *(void *)(v6 + 8 * (v19 + 2));
  if (v20)
  {
    v19 += 2LL;
    goto LABEL_23;
  }

  int64_t v12 = v19 + 2;
  if (v19 + 3 >= v14) {
    goto LABEL_34;
  }
  unint64_t v20 = *(void *)(v6 + 8 * (v19 + 3));
  if (v20)
  {
    v19 += 3LL;
    goto LABEL_23;
  }

  int64_t v21 = v19 + 4;
  int64_t v12 = v19 + 3;
  if (v19 + 4 >= v14)
  {
LABEL_34:
    unint64_t v9 = 0LL;
    goto LABEL_35;
  }

  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
LABEL_16:
    int64_t v19 = v21;
LABEL_23:
    unint64_t v9 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v19 << 6);
    int64_t v12 = v19;
    goto LABEL_9;
  }

  while (1)
  {
    int64_t v19 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v19 >= v14)
    {
      int64_t v12 = v14 - 1;
      goto LABEL_34;
    }

    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v21;
    if (v20) {
      goto LABEL_23;
    }
  }

unint64_t specialized IMMessageItem.IMMessageItemContentType.init(rawValue:)(unint64_t result)
{
  if (result >= 0xB) {
    return 11LL;
  }
  return result;
}

uint64_t specialized IMMessageItem.summary(from:)(void *a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v202 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v7 = __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v202 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v202 - v10;
  id v12 = [a1 pluginBundleID];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    unint64_t v16 = v15;

    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMBalloonPluginIdentifierRichLinks);
    if (v17 == v14 && v18 == (const char *)v16)
    {
      swift_bridgeObjectRelease(v16, v18, v19, v20, v21, v22, v23, v24);
    }

    else
    {
      uint64_t v26 = (LiteMessageServiceSession *)v18;
      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v14, v16, 0LL);
      swift_bridgeObjectRelease(v26, v28, v29, v30, v31, v32, v33, v34);
      if ((v27 & 1) == 0)
      {
        uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMBalloonPluginIdentifierHandwriting);
        id v50 = (LiteMessageServiceSession *)v43;
        if (v42 == v14 && v43 == (const char *)v16)
        {
          swift_bridgeObjectRelease(v16, v43, v44, v45, v46, v47, v48, v49);
LABEL_19:
          swift_bridgeObjectRelease(v16, v51, v52, v53, v54, v55, v56, v57);
          uint64_t v71 = type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IMChat,  &OBJC_CLASS___IMChat_ptr);
          uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v71);
          id v73 = (NSBundle *) [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
          unint64_t v74 = 0xD000000000000013LL;
          unint64_t v75 = 0xD000000000000026LL;
          unint64_t v201 = 0x800000000003DE30LL;
          id v76 = "Handwritten Message";
LABEL_20:
          unint64_t v77 = (unint64_t)(v76 - 32) | 0x8000000000000000LL;
          unint64_t v78 = 0x800000000003DD00LL;
LABEL_26:
          unint64_t v105 = 0xD000000000000011LL;
          v106._uint64_t countAndFlagsBits = 0LL;
          v106._object = (void *)0xE000000000000000LL;
          uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)( *(Swift::String *)&v74,  *(Swift::String_optional *)(&v78 - 1),  v73,  v106,  *(Swift::String *)&v75)._countAndFlagsBits;

          return countAndFlagsBits;
        }

        char v63 = _stringCompareWithSmolCheck(_:_:expecting:)(v42, v43, v14, v16, 0LL);
        swift_bridgeObjectRelease(v50, v64, v65, v66, v67, v68, v69, v70);
        if ((v63 & 1) != 0) {
          goto LABEL_19;
        }
        uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMBalloonPluginIdentifierPhotos);
        id v87 = (LiteMessageServiceSession *)v80;
        char v95 = _stringCompareWithSmolCheck(_:_:expecting:)(v79, v80, v14, v16, 0LL);
        swift_bridgeObjectRelease(v87, v96, v97, v98, v99, v100, v101, v102);
        if ((v95 & 1) != 0) {
          goto LABEL_25;
        }
        id v108 = (id)IMBalloonExtensionIDWithSuffix(IMBalloonPluginIdentifierPhotosExtension);
        if (v108)
        {
          id v109 = v108;
          uint64_t v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v108);
          id v112 = v111;

          if (v110 == v14 && v112 == v16)
          {
LABEL_23:
            swift_bridgeObjectRelease(v16, v80, v81, v82, v83, v84, v85, v86);
LABEL_25:
            swift_bridgeObjectRelease(v16, v88, v89, v90, v91, v92, v93, v94);
            uint64_t v103 = type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IMChat,  &OBJC_CLASS___IMChat_ptr);
            uint64_t v104 = swift_getObjCClassFromMetadata(v103);
            id v73 = (NSBundle *)[(id)objc_opt_self(NSBundle) bundleForClass:v104];
            unint64_t v75 = 0xD00000000000001ALL;
            unint64_t v201 = 0x800000000003DDF0LL;
            unint64_t v78 = 0x800000000003DD00LL;
            unint64_t v74 = 0x654D206F746F6850LL;
            unint64_t v77 = 0xED00006567617373LL;
            goto LABEL_26;
          }

          char v113 = _stringCompareWithSmolCheck(_:_:expecting:)(v110, v112, v14, v16, 0LL);
          swift_bridgeObjectRelease(v112, v114, v115, v116, v117, v118, v119, v120);
          if ((v113 & 1) != 0) {
            goto LABEL_25;
          }
        }

        uint64_t v121 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMBalloonPluginIdentifierDT);
        uint64_t v129 = (LiteMessageServiceSession *)v122;
        if (v121 == v14 && v122 == (const char *)v16)
        {
          swift_bridgeObjectRelease(v16, v122, v123, v124, v125, v126, v127, v128);
LABEL_36:
          swift_bridgeObjectRelease(v16, v130, v131, v132, v133, v134, v135, v136);
          uint64_t v145 = type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IMChat,  &OBJC_CLASS___IMChat_ptr);
          uint64_t v146 = swift_getObjCClassFromMetadata(v145);
          id v73 = (NSBundle *)[(id)objc_opt_self(NSBundle) bundleForClass:v146];
          unint64_t v74 = 0xD000000000000015LL;
          unint64_t v75 = 0xD000000000000028LL;
          unint64_t v201 = 0x800000000003DDC0LL;
          id v76 = "Digital Touch Message";
          goto LABEL_20;
        }

        char v137 = _stringCompareWithSmolCheck(_:_:expecting:)(v121, v122, v14, v16, 0LL);
        swift_bridgeObjectRelease(v129, v138, v139, v140, v141, v142, v143, v144);
        if ((v137 & 1) != 0) {
          goto LABEL_36;
        }
        uint64_t v147 = IMBalloonBundleIdentifierSafetyMonitor;
        uint64_t v148 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMBalloonBundleIdentifierSafetyMonitor);
        id v156 = (LiteMessageServiceSession *)v149;
        char v164 = _stringCompareWithSmolCheck(_:_:expecting:)(v148, v149, v14, v16, 0LL);
        swift_bridgeObjectRelease(v156, v165, v166, v167, v168, v169, v170, v171);
        if ((v164 & 1) != 0) {
          goto LABEL_41;
        }
        id v174 = (id)IMBalloonExtensionIDWithSuffix(v147);
        if (v174)
        {
          v182 = v174;
          uint64_t v183 = static String._unconditionallyBridgeFromObjectiveC(_:)(v174);
          id v185 = v184;

          if (v183 == v14 && v185 == v16)
          {
LABEL_39:
            swift_bridgeObjectRelease(v16, v149, v150, v151, v152, v153, v154, v155);
LABEL_41:
            swift_bridgeObjectRelease(v16, v157, v158, v159, v160, v161, v162, v163);
LABEL_42:
            uint64_t v172 = type metadata accessor for IMDHandle( 0LL,  &lazy cache variable for type metadata for IMChat,  &OBJC_CLASS___IMChat_ptr);
            uint64_t v173 = swift_getObjCClassFromMetadata(v172);
            id v73 = (NSBundle *)[(id)objc_opt_self(NSBundle) bundleForClass:v173];
            unint64_t v74 = 0xD000000000000010LL;
            unint64_t v75 = 0xD000000000000023LL;
            unint64_t v201 = 0x800000000003DD70LL;
            id v76 = "CHECK_IN_MESSAGE";
            goto LABEL_20;
          }

          char v186 = _stringCompareWithSmolCheck(_:_:expecting:)(v183, v185, v14, v16, 0LL);
          swift_bridgeObjectRelease(v185, v187, v188, v189, v190, v191, v192, v193);
          swift_bridgeObjectRelease(v16, v194, v195, v196, v197, v198, v199, v200);
          if ((v186 & 1) != 0) {
            goto LABEL_42;
          }
        }

        else
        {
          swift_bridgeObjectRelease(v16, v175, v176, v177, v178, v179, v180, v181);
        }

        return 0LL;
      }
    }

    swift_bridgeObjectRelease(v16, v35, v36, v37, v38, v39, v40, v41);
    id v58 = [a1 url];
    if (v58)
    {
      unsigned __int8 v59 = v58;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v60 = 0LL;
    }

    else
    {
      uint64_t v60 = 1LL;
    }

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v9, v60, 1LL, v2);
    outlined init with take of Any?((uint64_t)v9, (uint64_t)v11, &demangling cache variable for type metadata for URL?);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1LL, v2))
    {
      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v11, v2);
      uint64_t v62 = outlined destroy of TaskPriority?((uint64_t)v11, &demangling cache variable for type metadata for URL?);
      uint64_t countAndFlagsBits = URL.absoluteString.getter(v62);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      return countAndFlagsBits;
    }

    outlined destroy of TaskPriority?((uint64_t)v11, &demangling cache variable for type metadata for URL?);
  }

  return 0LL;
}

id specialized @nonobjc NSKeyedUnarchiver.init(forReadingFrom:)()
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v8 = 0LL;
  id v2 = [v0 initForReadingFromData:isa error:&v8];

  id v3 = v8;
  if (v2)
  {
    id v4 = v8;
  }

  else
  {
    id v5 = v8;
    _convertNSErrorToError(_:)(v3);

    swift_willThrow(v6);
  }

  return v2;
}

unint64_t lazy protocol witness table accessor for type IMMessageItem.IMMessageItemContentType and conformance IMMessageItem.IMMessageItemContentType()
{
  unint64_t result = lazy protocol witness table cache variable for type IMMessageItem.IMMessageItemContentType and conformance IMMessageItem.IMMessageItemContentType;
  if (!lazy protocol witness table cache variable for type IMMessageItem.IMMessageItemContentType and conformance IMMessageItem.IMMessageItemContentType)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IMMessageItem.IMMessageItemContentType,  &type metadata for IMMessageItem.IMMessageItemContentType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type IMMessageItem.IMMessageItemContentType and conformance IMMessageItem.IMMessageItemContentType);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for IMMessageItem.IMMessageItemContentType( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }

uint64_t storeEnumTagSinglePayload for IMMessageItem.IMMessageItemContentType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF5) {
    return ((uint64_t (*)(void))((char *)&loc_37004 + 4 * byte_3C8D5[v4]))();
  }
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_37038 + 4 * asc_3C8D0[v4]))();
}

uint64_t sub_37038(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_37040(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x37048LL);
  }
  return result;
}

uint64_t sub_37054(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x3705CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 10;
  return result;
}

uint64_t sub_37060(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_37068(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IMMessageItem.IMMessageItemContentType()
{
  return &type metadata for IMMessageItem.IMMessageItemContentType;
}

unint64_t LiteMessageSendError.errorDescription.getter(uint64_t a1, unint64_t a2, __int16 a3)
{
  char v3 = a3;
  if (!HIBYTE(a3))
  {
    uint64_t v19 = 0LL;
    unint64_t v20 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(71LL);
    v10._uint64_t countAndFlagsBits = 0xD000000000000018LL;
    v10._object = (void *)0x800000000003DFC0LL;
    String.append(_:)(v10);
    v11._uint64_t countAndFlagsBits = a1;
    v11._object = (void *)a2;
    String.append(_:)(v11);
    v12._uint64_t countAndFlagsBits = 0x79747320646E6120LL;
    v12._object = (void *)0xEB0000000020656CLL;
    String.append(_:)(v12);
    char v18 = v3;
    type metadata accessor for IMChatStyle();
    _print_unlocked<A, B>(_:_:)( &v18,  &v19,  v13,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    unint64_t v8 = 0xD000000000000020LL;
    unint64_t v9 = " found on iMessage Lite service.";
    goto LABEL_5;
  }

  if (HIBYTE(a3) == 1)
  {
    uint64_t v19 = 0LL;
    unint64_t v20 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(56LL);
    v6._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
    v6._object = (void *)0x800000000003DEA0LL;
    String.append(_:)(v6);
    v7._uint64_t countAndFlagsBits = a1;
    v7._object = (void *)a2;
    String.append(_:)(v7);
    unint64_t v8 = 0xD000000000000018LL;
    unint64_t v9 = ") has unexpected format.";
LABEL_5:
    unint64_t v14 = (unint64_t)(v9 - 32) | 0x8000000000000000LL;
    String.append(_:)(*(Swift::String *)&v8);
    return v19;
  }

  unint64_t result = 0xD000000000000017LL;
  if (!(a2 | a1) && !(_BYTE)a3) {
    return 0xD00000000000001ALL;
  }
  if (a1 != 1 || a2 || (_BYTE)a3)
  {
    if (a1 != 2 || a2 || (_BYTE)a3)
    {
      if (a1 != 3 || a2 || (_BYTE)a3)
      {
        BOOL v17 = a1 == 4 && a2 == 0;
      }

      else
      {
        return 0xD000000000000036LL;
      }
    }

    else
    {
      return 0xD00000000000003ALL;
    }
  }

  return result;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance LiteMessageSendError()
{
  return LiteMessageSendError.errorDescription.getter(*(void *)v0, *(void *)(v0 + 8), *(_WORD *)(v0 + 16));
}

uint64_t Error.liteItemSendErrorCode.getter(uint64_t a1)
{
  char v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v4 + 16))(v3);
  if (swift_dynamicCast(&v10, v3, a1, &type metadata for LiteMessageSendError, 6LL))
  {
    if (v13 == 2 && v10 == 4 && v11 == 0 && v12 == 0) {
      return 26LL;
    }
    outlined consume of LiteMessageSendError(v10, v11, v12, v13);
  }

  return 4LL;
}

uint64_t outlined consume of LiteMessageSendError(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 1u) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t outlined copy of LiteMessageSendError(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 1u) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t destroy for LiteMessageSendError(uint64_t a1)
{
  return outlined consume of LiteMessageSendError( *(void *)a1,  *(void *)(a1 + 8),  *(unsigned __int8 *)(a1 + 16),  *(_BYTE *)(a1 + 17));
}

uint64_t initializeBufferWithCopyOfBuffer for LiteMessageSendError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 17);
  uint64_t v6 = *(unsigned __int8 *)(a2 + 16);
  outlined copy of LiteMessageSendError(*(void *)a2, v4, v6, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  *(_BYTE *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 17) = v5;
  return a1;
}

uint64_t assignWithCopy for LiteMessageSendError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 17);
  uint64_t v6 = *(unsigned __int8 *)(a2 + 16);
  outlined copy of LiteMessageSendError(*(void *)a2, v4, v6, v5);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  uint64_t v9 = *(unsigned __int8 *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  unsigned __int8 v10 = *(_BYTE *)(a1 + 17);
  *(_BYTE *)(a1 + 17) = v5;
  outlined consume of LiteMessageSendError(v7, v8, v9, v10);
  return a1;
}

__n128 __swift_memcpy18_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for LiteMessageSendError(uint64_t a1, uint64_t a2)
{
  __int16 v3 = *(_WORD *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(_BYTE *)(a1 + 17);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 16);
  *(_WORD *)(a1 + 16) = v3;
  outlined consume of LiteMessageSendError(v4, v5, v7, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for LiteMessageSendError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 17);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LiteMessageSendError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 1_Block_object_dispose(va, 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 1_Block_object_dispose(va, 8) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 17) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for LiteMessageSendError(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for LiteMessageSendError(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    LOBYTE(a__swift_destroy_boxed_opaque_existential_0(v0 + 2) = 2;
    *(_BYTE *)(result + 16) = 0;
  }

  *(_BYTE *)(result + 17) = a2;
  return result;
}

ValueMetadata *type metadata accessor for LiteMessageSendError()
{
  return &type metadata for LiteMessageSendError;
}

uint64_t variable initialization expression of BitCollection.bytes()
{
  return 0LL;
}

uint64_t BitCollection.bytes.getter(uint64_t a1, unint64_t a2)
{
  return a1;
}

uint64_t BitCollection.bytes.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)v2, *(void *)(v2 + 8));
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + _Block_object_dispose(va, 8) = a2;
  return result;
}

uint64_t (*BitCollection.bytes.modify())()
{
  return LiteMessageHeader.messageType.getter;
}

uint64_t BitCollection.init()()
{
  return 0LL;
}

uint64_t BitCollection.init(bitsOf:)(void *a1)
{
  __int128 v6 = xmmword_3C190;
  char v7 = 0;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v4 + 8))(&v6, v3, v4);
  __swift_destroy_boxed_opaque_existential_0(a1);
  uint64_t result = v6;
  if (v1) {
    return outlined consume of Data._Representation(v6, *((unint64_t *)&v6 + 1));
  }
  return result;
}

Swift::Void __swiftcall BitCollection.appendLeastSignificantBits(from:count:)(Swift::UInt8 from, Swift::UInt8 count)
{
  if (count)
  {
    if (((8 - count) & 0xFFFFFF00) != 0)
    {
      __break(1u);
      JUMPOUT(0x37870LL);
    }

    if ((8 - count) <= 7u)
    {
      if ((*(unsigned __int8 *)(v2 + 16) | 8) == 8)
      {
LABEL_7:
        *(_BYTE *)(v2 + 16) = count;
        specialized RangeReplaceableCollection.append(_:)();
        return;
      }
    }

    else if ((*(unsigned __int8 *)(v2 + 16) | 8) == 8)
    {
      goto LABEL_7;
    }

    __asm { BR              X11 }
  }

void specialized RangeReplaceableCollection.append(_:)()
{
  __asm { BR              X12 }

uint64_t sub_378E4()
{
  uint64_t v2 = BYTE6(v0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<UInt8>);
  uint64_t v7 = lazy protocol witness table accessor for type PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment> and conformance PredicateExpressions.Variable<A>( (unint64_t *)&lazy protocol witness table cache variable for type CollectionOfOne<UInt8> and conformance <A> CollectionOfOne<A>,  &demangling cache variable for type metadata for CollectionOfOne<UInt8>,  (uint64_t)&protocol conformance descriptor for <A> CollectionOfOne<A>);
  LOBYTE(v5[0]) = v1;
  char v4 = *(_BYTE *)__swift_project_boxed_opaque_existential_1(v5, v6);
  ((void (*)(uint64_t, uint64_t, char *, uint64_t))Data._Representation.replaceSubrange(_:with:count:))( v2,  v2,  &v4,  1LL);
  return __swift_destroy_boxed_opaque_existential_0(v5);
}

void BitCollection.append(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Data.Iterator(0LL);
  __chkstk_darwin(v3);
  __asm { BR              X10 }

uint64_t sub_37A10()
{
  while (1)
  {
    Swift::UInt8_optional v5 = Data.Iterator.next()();
    if ((*(_WORD *)&v5 & 0x100) != 0) {
      break;
    }
    BitCollection.appendLeastSignificantBits(from:count:)(v5.value, 8u);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v1);
}

Swift::Void __swiftcall BitCollection.appendVarint8(_:)(Swift::UInt a1)
{
  do
  {
    if (a1 >= 8) {
      Swift::UInt8 v2 = a1 & 7 | 8;
    }
    else {
      Swift::UInt8 v2 = a1 & 7;
    }
    BitCollection.appendLeastSignificantBits(from:count:)(v2, 4u);
    BOOL v3 = a1 >= 8;
    a1 >>= 3;
  }

  while (v3);
}

Swift::Void __swiftcall BitCollection.appendVarint64(_:)(Swift::UInt a1)
{
  do
  {
    if (a1 >= 0x40) {
      Swift::UInt8 v2 = a1 & 0x3F | 0x40;
    }
    else {
      Swift::UInt8 v2 = a1 & 0x3F;
    }
    BitCollection.appendLeastSignificantBits(from:count:)(v2, 7u);
    BOOL v3 = a1 >= 0x40;
    a1 >>= 6;
  }

  while (v3);
}

Swift::Void __swiftcall BitCollection.appendVarint128(_:)(Swift::UInt a1)
{
  do
  {
    BitCollection.appendLeastSignificantBits(from:count:)(a1 & 0x7F | ((a1 > 0x7F) << 7), 8u);
    BOOL v2 = a1 >= 0x80;
    a1 >>= 7;
  }

  while (v2);
}

Swift::Void __swiftcall BitCollection.append(_:)(Swift::Bool a1)
{
}

void BitCollection.append(_:)(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2 >> 62;
  outlined copy of Data._Representation(a1, a2);
  __asm { BR              X10 }

uint64_t sub_37C50()
{
  uint64_t v4 = *(void *)(v3 - 120);
  if (!v10)
  {
    if (!v2) {
      return outlined consume of Data._Representation(v0, v11);
    }
LABEL_8:
    __asm { BR              X8 }
  }

  BOOL v5 = __OFSUB__(v4, 1LL);
  uint64_t v6 = v4 - 1;
  if (v5)
  {
    __break(1u);
    goto LABEL_11;
  }

  if ((unint64_t)(v6 - 0x1000000000000000LL) >> 61 != 7)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v7 = *(void *)(v3 - 128);
  BOOL v5 = __OFADD__(v7, 8 * v6);
  uint64_t v8 = v7 + 8 * v6;
  if (v5)
  {
LABEL_12:
    __break(1u);
    JUMPOUT(0x37E54LL);
  }

  if (v2 != v8) {
    goto LABEL_8;
  }
  return outlined consume of Data._Representation(v0, v11);
}

BOOL BitCollection.subscript.getter(uint64_t a1)
{
  if (a1 >= 0) {
    uint64_t v1 = a1;
  }
  else {
    uint64_t v1 = a1 + 7;
  }
  uint64_t v2 = a1 - (v1 & 0xFFFFFFFFFFFFFFF8LL);
  char v3 = Data.subscript.getter(v1 >> 3);
  int v4 = 1 << v2;
  if (v2 < 0) {
    LOBYTE(v4) = 0;
  }
  return (v3 & v4) != 0;
}

uint64_t BitCollection.endIndex.getter(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_37F08 + *((int *)qword_37FB0 + (a2 >> 62))))();
}

Swift::Int __swiftcall BitCollection.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1LL);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

void protocol witness for Collection.startIndex.getter in conformance BitCollection(void *a1@<X8>)
{
  *a1 = 0LL;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance BitCollection@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = BitCollection.endIndex.getter(*(void *)v1, *(void *)(v1 + 8));
  *a1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance BitCollection( void *a1, uint64_t *a2))(void *a1)
{
  int v4 = malloc(0x30uLL);
  *a1 = v4;
  BOOL v5 = BitCollection.subscript.read((uint64_t)v4, *a2);
  _BYTE v4[40] = v6 & 1;
  *((void *)v4 + 4) = v5;
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t (*BitCollection.subscript.read(uint64_t a1, uint64_t a2))()
{
  return LiteMessageHeader.messageType.getter;
}

uint64_t protocol witness for Collection.subscript.getter in conformance BitCollection@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v7 = *(void *)v2;
  unint64_t v6 = *(void *)(v2 + 8);
  char v8 = *(_BYTE *)(v2 + 16);
  uint64_t result = BitCollection.endIndex.getter(*(void *)v2, v6);
  if (result < 0)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (v5 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (result >= v4)
  {
    *(void *)(a2 + 16) = v7;
    *(void *)(a2 + 24) = v6;
    *(_BYTE *)(a2 + 3__swift_destroy_boxed_opaque_existential_0(v0 + 2) = v8;
    *(void *)a2 = v5;
    *(void *)(a2 + _Block_object_dispose(va, 8) = v4;
    return outlined copy of Data._Representation(v7, v6);
  }

uint64_t protocol witness for Collection.indices.getter in conformance BitCollection@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  unint64_t v3 = *(void *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(v1 + 16);
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_0(v0 + 2) = BitCollection.endIndex.getter(v2, v3);
  return outlined copy of Data._Representation(v2, v3);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance BitCollection()
{
  return BitCollection.endIndex.getter(*(void *)v0, *(void *)(v0 + 8)) == 0;
}

uint64_t specialized Collection.count.getter(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_381CC + dword_3827C[a2 >> 62]))();
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance BitCollection( uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_WORD *)(a1 + _Block_object_dispose(va, 8) = 256;
}

uint64_t *protocol witness for Collection.index(_:offsetBy:) in conformance BitCollection@<X0>( uint64_t *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if ((a2 & 0x8000000000000000LL) == 0)
  {
    uint64_t v3 = *result;
    if (!a2)
    {
LABEL_6:
      *a3 = v3;
      return result;
    }

    unint64_t v4 = v3 ^ 0x7FFFFFFFFFFFFFFFLL;
    unint64_t v5 = a2 - 1;
    while (v4 > v5)
    {
      ++v3;
      if (!--a2) {
        goto LABEL_6;
      }
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance BitCollection@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized Collection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(_BYTE *)(a4 + _Block_object_dispose(va, 8) = v6 & 1;
  return result;
}

uint64_t *protocol witness for Collection.distance(from:to:) in conformance BitCollection( uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = *a2;
  if (*a2 < *result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if (*a2 == *result) {
    return 0LL;
  }
  unint64_t v4 = (uint64_t *)(v3 - v2);
  if (v3 > v2)
  {
    uint64_t result = 0LL;
    unint64_t v5 = v3 + ~v2;
    while (v5 <= 0x7FFFFFFFFFFFFFFELL)
    {
      uint64_t result = (uint64_t *)((char *)result + 1);
      if (v4 == result) {
        return result;
      }
    }

    __break(1u);
    goto LABEL_10;
  }

uint64_t *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance BitCollection( uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = a2[1];
  if (*result >= *a2)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }

  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }

  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

void *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance BitCollection( void *result, void *a2)
{
  if (*result < *a2 || a2[1] < *result) {
    __break(1u);
  }
  return result;
}

{
  if (*result < *a2 || a2[1] < result[1]) {
    __break(1u);
  }
  return result;
}

void *protocol witness for Collection.index(after:) in conformance BitCollection@<X0>( void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*result, 1LL)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1LL;
  }
  return result;
}

void *protocol witness for Collection.formIndex(after:) in conformance BitCollection(void *result)
{
  if (__OFADD__(*result, 1LL)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance BitCollection@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = v1[1].n128_u8[0];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u8[0] = v2;
  a1[1].n128_u64[1] = 0LL;
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance BitCollection()
{
  uint64_t result = BitCollection.endIndex.getter(*(void *)v0, *(void *)(v0 + 8));
  if (result < 0) {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance BitCollection()
{
  return 2LL;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance BitCollection()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = specialized _copyCollectionToContiguousArray<A>(_:)(*(void *)v0, v2, *(_BYTE *)(v0 + 16));
  outlined consume of Data._Representation(v1, v2);
  return v3;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance BitCollection( uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)( a1,  a2,  a3,  *(void *)v3,  *(void *)(v3 + 8),  *(_BYTE *)(v3 + 16));
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance BitCollection( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)(a1, a2, a4, a3);
}

uint64_t BitCollection.binaryString.getter(uint64_t a1, unint64_t a2)
{
  Swift::Int v2 = specialized Collection.count.getter(a1, a2);
  return Data.binaryString(bitCount:)(v2)._countAndFlagsBits;
}

unint64_t lazy protocol witness table accessor for type BitCollection and conformance BitCollection()
{
  unint64_t result = lazy protocol witness table cache variable for type BitCollection and conformance BitCollection;
  if (!lazy protocol witness table cache variable for type BitCollection and conformance BitCollection)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for BitCollection, &type metadata for BitCollection);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type BitCollection and conformance BitCollection);
  }

  return result;
}

void *associated type witness table accessor for Collection.Index : Comparable in BitCollection()
{
  return &protocol witness table for Int;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in BitCollection()
{
  return lazy protocol witness table accessor for type PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment> and conformance PredicateExpressions.Variable<A>( &lazy protocol witness table cache variable for type DefaultIndices<BitCollection> and conformance DefaultIndices<A>,  &demangling cache variable for type metadata for DefaultIndices<BitCollection>,  (uint64_t)&protocol conformance descriptor for DefaultIndices<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in BitCollection()
{
  return lazy protocol witness table accessor for type PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment> and conformance PredicateExpressions.Variable<A>( &lazy protocol witness table cache variable for type Slice<BitCollection> and conformance Slice<A>,  &demangling cache variable for type metadata for Slice<BitCollection>,  (uint64_t)&protocol conformance descriptor for Slice<A>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in BitCollection()
{
  return lazy protocol witness table accessor for type PredicateExpressions.Variable<LiteMessageSegmentStoreSchemaV1.LiteMessageSegment> and conformance PredicateExpressions.Variable<A>( &lazy protocol witness table cache variable for type IndexingIterator<BitCollection> and conformance IndexingIterator<A>,  &demangling cache variable for type metadata for IndexingIterator<BitCollection>,  (uint64_t)&protocol conformance descriptor for IndexingIterator<A>);
}

uint64_t destroy for BitCollection(uint64_t a1)
{
  return outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t initializeBufferWithCopyOfBuffer for BitCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v5;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for BitCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v5;
  outlined consume of Data._Representation(v6, v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for BitCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v4, v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for BitCollection(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for BitCollection(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 13;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0LL;
      *(void *)(result + _Block_object_dispose(va, 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for BitCollection()
{
  return &type metadata for BitCollection;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t result = BitCollection.endIndex.getter(a1, a2);
  if ((result & 0x8000000000000000LL) == 0)
  {
    uint64_t v7 = result;
    if (result)
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
      uint64_t v9 = swift_allocObject(v8, v7 + 32, 7LL);
      size_t v10 = _swift_stdlib_malloc_size((const void *)v9);
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 2 * v10 - 64;
      outlined copy of Data._Representation(a1, a2);
      uint64_t v11 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v12, (_BYTE *)(v9 + 32), v7, a1, a2, a3);
      outlined consume of Data._Representation(v12[0], v12[1]);
      if (v11 == v7) {
        return v9;
      }
      __break(1u);
    }

    return (uint64_t)_swiftEmptyArrayStorage;
  }

  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)( uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  if (!a2) {
    goto LABEL_7;
  }
  uint64_t v10 = a3;
  if (!a3) {
    goto LABEL_8;
  }
  if (a3 < 0) {
    __break(1u);
  }
  if (!BitCollection.endIndex.getter(a4, a5))
  {
LABEL_7:
    uint64_t v10 = 0LL;
    goto LABEL_8;
  }

  *a2 = Data.subscript.getter(0LL) & 1;
  if (v10 != 1) {
    __asm { BR              X10 }
  }

uint64_t specialized Collection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }

  if (a2)
  {
    unint64_t v3 = a3 - result;
    if (v3 >= (result ^ 0x7FFFFFFFFFFFFFFFuLL)) {
      unint64_t v3 = result ^ 0x7FFFFFFFFFFFFFFFLL;
    }
    unint64_t v4 = v3 + 1;
    if (v4 >= 5)
    {
      uint64_t v7 = v4 & 3;
      if ((v4 & 3) == 0) {
        uint64_t v7 = 4LL;
      }
      unint64_t v5 = v4 - v7;
      int64x2_t v8 = 0uLL;
      int64x2_t v9 = (int64x2_t)(unint64_t)result;
      int64x2_t v10 = vdupq_n_s64(1uLL);
      unint64_t v11 = v5;
      do
      {
        int64x2_t v9 = vaddq_s64(v9, v10);
        int64x2_t v8 = vaddq_s64(v8, v10);
        v11 -= 4LL;
      }

      while (v11);
      uint64_t v6 = vaddvq_s64(vaddq_s64(v8, v9));
    }

    else
    {
      unint64_t v5 = 0LL;
      uint64_t v6 = result;
    }

    uint64_t v12 = v5 + result - 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v13 = v5 + result - a3;
    uint64_t v14 = a2 - v5;
    uint64_t result = v6;
    while (1)
    {
      if (!v13) {
        return 0LL;
      }
      if (!v12) {
        break;
      }
      ++result;
      ++v12;
      ++v13;
      if (!--v14) {
        return result;
      }
    }

    __break(1u);
    goto LABEL_21;
  }

  return result;
}

uint64_t one-time initialization function for logger()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  uint64_t v1 = static Logger.messagesSubsystem.getter();
  return Logger.init(subsystem:category:)(v1);
}

unint64_t BitCollectionMessageContentError.errorDescription.getter(uint64_t a1, void *a2, char a3)
{
  if (!a3)
  {
    _StringGuts.grow(_:)(38LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    unint64_t v9 = 0xD000000000000021LL;
    goto LABEL_5;
  }

  if (a3 == 1)
  {
    unint64_t v9 = 0LL;
    _StringGuts.grow(_:)(58LL);
    v5._uint64_t countAndFlagsBits = 0xD000000000000035LL;
    v5._object = (void *)0x800000000003E010LL;
    String.append(_:)(v5);
LABEL_5:
    v6._uint64_t countAndFlagsBits = a1;
    v6._object = a2;
    String.append(_:)(v6);
    v7._uint64_t countAndFlagsBits = 3025191LL;
    v7._object = (void *)0xE300000000000000LL;
    String.append(_:)(v7);
    return v9;
  }

  return 0xD000000000000027LL;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance BitCollectionMessageContentError()
{
  return BitCollectionMessageContentError.errorDescription.getter( *(void *)v0,  *(void **)(v0 + 8),  *(_BYTE *)(v0 + 16));
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> BitCollection.appendAsCompressedBytes(_:)( Swift::String a1)
{
  unint64_t object = (unint64_t)a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v4 = type metadata accessor for Data.Iterator(0LL);
  uint64_t v33 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for String.Encoding(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  unint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = HIBYTE(object) & 0xF;
  if ((object & 0x2000000000000000LL) == 0) {
    uint64_t v10 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (v10)
  {
    uint64_t v31 = v4;
    uint64_t v32 = v1;
    static String.Encoding.utf8.getter(v7);
    uint64_t v11 = String.data(using:allowLossyConversion:)(v9, 0LL, countAndFlagsBits, object);
    unint64_t v13 = v12;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    if (v13 >> 60 != 15)
    {
      if ((specialized BitCollection.allowCompression.getter() & 1) == 0
        || (id v17 = [(id)objc_opt_self(IMDLiteMessageCompressor) sharedCompressor],
            uint64_t v18 = IMDLiteMessageCompressor.compress(_:)(v11, v13),
            unint64_t v20 = v19,
            uint64_t v22 = v21,
            v17,
            v20 >> 60 == 15))
      {
        outlined copy of Data._Representation(v11, v13);
        uint64_t v22 = 0LL;
        uint64_t v18 = v11;
        unint64_t v20 = v13;
      }

      if (one-time initialization token for logger != -1) {
        swift_once(&one-time initialization token for logger, one-time initialization function for logger);
      }
      uint64_t v29 = v22;
      uint64_t v23 = type metadata accessor for Logger(0LL);
      __swift_project_value_buffer(v23, (uint64_t)logger);
      outlined copy of Data?(v11, v13);
      unint64_t v30 = v20 >> 62;
      uint64_t v24 = outlined copy of Data._Representation(v18, v20);
      uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
      os_log_type_t v26 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = swift_slowAlloc(32LL, -1LL);
        *(_DWORD *)uint64_t v27 = 134218496;
        uint64_t v34 = v29;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v27 + 4, v27 + 12);
        *(_WORD *)(v27 + 1__swift_destroy_boxed_opaque_existential_0(v0 + 2) = 2048;
        __asm { BR              X11 }
      }

      outlined consume of Data?(v11, v13);
      outlined consume of Data._Representation(v18, v20);

      __asm { BR              X9 }
    }

    unint64_t v14 = lazy protocol witness table accessor for type BitCollectionMessageContentError and conformance BitCollectionMessageContentError();
    uint64_t v15 = swift_allocError(&type metadata for BitCollectionMessageContentError, v14, 0LL, 0LL);
    *(void *)uint64_t v16 = 0LL;
    *(void *)(v16 + _Block_object_dispose(va, 8) = 0LL;
    *(_BYTE *)(v16 + 16) = 2;
    swift_willThrow(v15);
  }

  else
  {
    BitCollection.appendLeastSignificantBits(from:count:)(0, 8u);
  }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> BitCollection.appendAsUTF8Bytes(_:)( Swift::String a1)
{
  unint64_t object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v14 = type metadata accessor for Data.Iterator(0LL);
  __chkstk_darwin(v14);
  uint64_t v3 = type metadata accessor for String.Encoding(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static String.Encoding.utf8.getter(v5);
  String.data(using:allowLossyConversion:)(v7, 0LL, countAndFlagsBits, object);
  unint64_t v9 = v8;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  if (v9 >> 60 != 15) {
    __asm { BR              X10 }
  }

  unint64_t v10 = lazy protocol witness table accessor for type BitCollectionMessageContentError and conformance BitCollectionMessageContentError();
  uint64_t v11 = swift_allocError(&type metadata for BitCollectionMessageContentError, v10, 0LL, 0LL);
  *(void *)uint64_t v12 = 0LL;
  *(void *)(v12 + _Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)(v12 + 16) = 2;
  swift_willThrow(v11);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> BitCollection.appendAsVarint8PrefixedUTF8Bytes(_:)( Swift::String a1)
{
  unint64_t object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v14 = type metadata accessor for Data.Iterator(0LL);
  v13[1] = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v3 = type metadata accessor for String.Encoding(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static String.Encoding.utf8.getter(v5);
  String.data(using:allowLossyConversion:)(v7, 0LL, countAndFlagsBits, object);
  unint64_t v9 = v8;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  if (v9 >> 60 != 15) {
    __asm { BR              X10 }
  }

  unint64_t v10 = lazy protocol witness table accessor for type BitCollectionMessageContentError and conformance BitCollectionMessageContentError();
  uint64_t v11 = swift_allocError(&type metadata for BitCollectionMessageContentError, v10, 0LL, 0LL);
  *(void *)uint64_t v12 = 0LL;
  *(void *)(v12 + _Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)(v12 + 16) = 2;
  swift_willThrow(v11);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> BitCollection.appendAsNullTerminatedUTF8Bytes(_:)( Swift::String a1)
{
  unint64_t object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v15 = type metadata accessor for Data.Iterator(0LL);
  __chkstk_darwin(v15);
  uint64_t v3 = type metadata accessor for String.Encoding(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static String.Encoding.utf8.getter(v5);
  uint64_t v8 = String.data(using:allowLossyConversion:)(v7, 0LL, countAndFlagsBits, object);
  unint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  if (v10 >> 60 != 15)
  {
    uint64_t v16 = v8;
    unint64_t v17 = v10;
    __asm { BR              X10 }
  }

  unint64_t v11 = lazy protocol witness table accessor for type BitCollectionMessageContentError and conformance BitCollectionMessageContentError();
  uint64_t v12 = swift_allocError(&type metadata for BitCollectionMessageContentError, v11, 0LL, 0LL);
  *(void *)uint64_t v13 = 0LL;
  *(void *)(v13 + _Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)(v13 + 16) = 2;
  swift_willThrow(v12);
}

void BitCollection.append16UUIDBytes(_:)(_BYTE *a1)
{
  uint64_t v2 = type metadata accessor for Data.Iterator(0LL);
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for UUID(0LL);
  else {
    uint64_t v4 = *(void *)(*(void *)(v3 - 8) + 64LL);
  }
  specialized Data.init(bytes:count:)(a1, v4);
  __asm { BR              X10 }

uint64_t sub_39BB4@<X0>(int a1@<W8>)
{
  if (BYTE6(v1) == 16LL)
  {
    if (a1)
    {
      if (a1 == 1) {
        uint64_t v6 = (int)v2;
      }
      else {
        uint64_t v6 = *(void *)(v2 + 16);
      }
      outlined copy of Data._Representation(v2, v1);
    }

    else
    {
      uint64_t v6 = 0LL;
    }

    ((void (*)(uint64_t, unint64_t, uint64_t))Data.Iterator.init(_:at:))(v2, v1, v6);
    while (1)
    {
      Swift::UInt8_optional v13 = Data.Iterator.next()();
      if ((*(_WORD *)&v13 & 0x100) != 0) {
        break;
      }
      BitCollection.appendLeastSignificantBits(from:count:)(v13.value, 8u);
    }

    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v3);
  }

  else
  {
    uint64_t v7 = UUID.uuidString.getter();
    uint64_t v9 = v8;
    unint64_t v10 = lazy protocol witness table accessor for type BitCollectionMessageContentError and conformance BitCollectionMessageContentError();
    uint64_t v11 = swift_allocError(&type metadata for BitCollectionMessageContentError, v10, 0LL, 0LL);
    *(void *)uint64_t v12 = v7;
    *(void *)(v12 + _Block_object_dispose(va, 8) = v9;
    *(_BYTE *)(v12 + 16) = 1;
    swift_willThrow(v11);
  }

  return outlined consume of Data._Representation(v2, v1);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> BitCollection.append16UUIDBytes(_:)( Swift::String a1)
{
  unint64_t object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  UUID.init(uuidString:)(countAndFlagsBits, object);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    outlined destroy of UUID?((uint64_t)v5);
    unint64_t v10 = lazy protocol witness table accessor for type BitCollectionMessageContentError and conformance BitCollectionMessageContentError();
    swift_allocError(&type metadata for BitCollectionMessageContentError, v10, 0LL, 0LL);
    *(void *)uint64_t v11 = countAndFlagsBits;
    *(void *)(v11 + _Block_object_dispose(va, 8) = object;
    *(_BYTE *)(v11 + 16) = 0;
    swift_bridgeObjectRetain(object);
    swift_willThrow(v12);
  }

  else
  {
    (*(void (**)(_BYTE *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    BitCollection.append16UUIDBytes(_:)(v9);
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  }

unint64_t lazy protocol witness table accessor for type BitCollectionMessageContentError and conformance BitCollectionMessageContentError()
{
  unint64_t result = lazy protocol witness table cache variable for type BitCollectionMessageContentError and conformance BitCollectionMessageContentError;
  if (!lazy protocol witness table cache variable for type BitCollectionMessageContentError and conformance BitCollectionMessageContentError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for BitCollectionMessageContentError,  &type metadata for BitCollectionMessageContentError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type BitCollectionMessageContentError and conformance BitCollectionMessageContentError);
  }

  return result;
}

id specialized BitCollection.allowCompression.getter()
{
  id result = [(id)objc_opt_self(IMLockdownManager) sharedInstance];
  if (result)
  {
    unint64_t v1 = result;
    unsigned int v2 = [result isInternalInstall];

    if (v2)
    {
      NSString v3 = String._bridgeToObjectiveC()();
      NSString v4 = String._bridgeToObjectiveC()();
      int v5 = IMGetDomainBoolForKey(v3, v4);

      return (id)(v5 ^ 1u);
    }

    else
    {
      return &dword_0 + 1;
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t outlined copy of Data?(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(result, a2);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CollectionOfOne<UInt8> and conformance <A> CollectionOfOne<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CollectionOfOne<UInt8> and conformance <A> CollectionOfOne<A>;
  if (!lazy protocol witness table cache variable for type CollectionOfOne<UInt8> and conformance <A> CollectionOfOne<A>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CollectionOfOne<UInt8>);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> CollectionOfOne<A>, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CollectionOfOne<UInt8> and conformance <A> CollectionOfOne<A>);
  }

  return result;
}

uint64_t specialized Data.init(bytes:count:)(_BYTE *__src, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 <= 14) {
    return specialized Data.InlineData.init(_:)(__src, &__src[a2]);
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  __DataStorage.init(bytes:length:)(__src, a2);
  uint64_t v6 = type metadata accessor for Data.RangeReference(0LL);
  uint64_t result = swift_allocObject(v6, 32LL, 7LL);
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for BitCollectionMessageContentError()
{
  return &type metadata for BitCollectionMessageContentError;
}

Swift::String __swiftcall Data.binaryString(bitCount:)(Swift::Int bitCount)
{
  __asm { BR              X9 }

  return result;
}

uint64_t sub_3A0F4()
{
  uint64_t result = 0LL;
  if (v25 && v1 >= 1)
  {
    *(void *)(v3 - 144) = v2;
    *(void *)(v3 - 136) = v0;
    if (!(_DWORD)v2)
    {
      *(void *)(v3 - 12_Block_object_dispose(va, 8) = v0;
      *(_WORD *)(v3 - 120) = v20;
      *(_BYTE *)(v3 - 11_Block_object_dispose(va, 8) = v21;
      *(_BYTE *)(v3 - 117) = v22;
      *(_BYTE *)(v3 - 116) = v23;
      *(_BYTE *)(v3 - 115) = v24;
      unsigned int v9 = *(unsigned __int8 *)(v3 - 128);
LABEL_17:
      unsigned __int8 v12 = 0;
      if (v1 >= 8) {
        unsigned __int8 v13 = 8;
      }
      else {
        unsigned __int8 v13 = v1;
      }
      *(void *)(v3 - 12_Block_object_dispose(va, 8) = 0LL;
      *(void *)(v3 - 120) = 0xE000000000000000LL;
      while (v12 < v13)
      {
        int v14 = 7 - v12;
        if ((v14 & 0xFFFFFF00) != 0) {
          goto LABEL_33;
        }
        ++v12;
        if (((v9 >> v14) & 1) != 0) {
          uint64_t v15 = 49LL;
        }
        else {
          uint64_t v15 = 48LL;
        }
        if ((v14 & 0xF8) != 0) {
          uint64_t v16 = 48LL;
        }
        else {
          uint64_t v16 = v15;
        }
        unint64_t v17 = 0xE100000000000000LL;
        String.append(_:)(*(Swift::String *)&v16);
        swift_bridgeObjectRelease(0xE100000000000000LL);
        if (v12 == v13)
        {
          v18._uint64_t countAndFlagsBits = *(void *)(v3 - 128);
          unint64_t v19 = *(void **)(v3 - 120);
          v18._unint64_t object = v19;
          String.append(_:)(v18);
          swift_bridgeObjectRelease(v19);
          __asm { BR              X10 }
        }
      }

      __break(1u);
LABEL_33:
      __break(1u);
      JUMPOUT(0x3A410LL);
    }

    if ((_DWORD)v2 == 1)
    {
      if ((int)v0 <= 0LL && v0 >> 32 > 0)
      {
        uint64_t v5 = ((uint64_t (*)(void))__DataStorage._bytes.getter)(0LL);
        if (v5)
        {
          uint64_t v6 = v5;
          uint64_t v7 = ((uint64_t (*)(uint64_t))__DataStorage._offset.getter)(v5);
          uint64_t v8 = -v7;
          if (!__OFSUB__(0LL, v7)) {
            goto LABEL_16;
          }
          goto LABEL_36;
        }

        __break(1u);
LABEL_40:
        __break(1u);
      }

      __break(1u);
      __break(1u);
    }

    else if (*(uint64_t *)(v0 + 16) <= 0)
    {
      if (*(uint64_t *)(v0 + 24) <= 0)
      {
LABEL_37:
        __break(1u);
        goto LABEL_38;
      }

      uint64_t v10 = ((uint64_t (*)(void))__DataStorage._bytes.getter)(0LL);
      if (v10)
      {
        uint64_t v6 = v10;
        uint64_t v11 = ((uint64_t (*)(uint64_t))__DataStorage._offset.getter)(v10);
        uint64_t v8 = -v11;
        if (!__OFSUB__(0LL, v11))
        {
LABEL_16:
          unsigned int v9 = *(unsigned __int8 *)(v6 + v8);
          goto LABEL_17;
        }

LABEL_38:
        __break(1u);
        JUMPOUT(0x3A42CLL);
      }

      goto LABEL_40;
    }

    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  return result;
}

uint64_t Data.binaryString.getter(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(uint64_t, uint64_t, unint64_t))((char *)&loc_3A484 + dword_3A4E4[a2 >> 62]))( a1,  a1,  a2);
}

uint64_t sub_3A494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (((unint64_t)BYTE6(a3) - 0x1000000000000000LL) >> 61 != 7)
  {
    __break(1u);
    JUMPOUT(0x3A4DCLL);
  }

  return Data.binaryString(bitCount:)(8 * (unint64_t)BYTE6(a3))._countAndFlagsBits;
}

uint64_t BitCollection.append(_:)(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 8))(v1, v2, v3);
}

void __getIDSOffGridDeliveryHandlesDonationOptionsClass_block_invoke_cold_1()
{
}

void IDSLibrary_cold_1(void *a1)
{
}

void __getIDSOffGridServiceUpdateMessageClass_block_invoke_cold_1()
{
  id v0 = -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:]( +[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"),  "handleFailureInFunction:file:lineNumber:description:",  +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "Class getIDSOffGridServiceUpdateMessageClass(void)_block_invoke"),  @"IMIDSOffGrid.m",  17LL,  @"Unable to find class %s",  "IDSOffGridServiceUpdateMessage");
  __break(1u);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return _[a1 currentHandler];
}

id objc_msgSend_donateHandlesForMessagingKeys_fromURI_options_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "donateHandlesForMessagingKeys:fromURI:options:completion:");
}

id objc_msgSend_encryptionKeyID(void *a1, const char *a2, ...)
{
  return _[a1 encryptionKeyID];
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_handleFailureInFunction_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:");
}

id objc_msgSend_initWithPreferredServiceType_senderURI_recipientURI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPreferredServiceType:senderURI:recipientURI:");
}

id objc_msgSend_preferredServiceType(void *a1, const char *a2, ...)
{
  return _[a1 preferredServiceType];
}

id objc_msgSend_sendServiceUpdateMessage_options_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendServiceUpdateMessage:options:completion:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setIsInitialDonation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsInitialDonation:");
}

id objc_msgSend_setPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPriority:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUTF8String:");
}