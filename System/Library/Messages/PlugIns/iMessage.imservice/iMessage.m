id _LastAddressedURIForChat(void *a1, void *a2, void *a3)
{
  return _LastAddressedURIForChatLogMetricIfNeeded(a1, 0LL, a2, a3, 0);
}

id _LastAddressedURIForChatWithCallerIDHint(void *a1, void *a2, void *a3, void *a4)
{
  return _LastAddressedURIForChatLogMetricIfNeeded(a1, a2, a3, a4, 0);
}

void sub_4AE8(void *a1, uint64_t a2)
{
  id v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[IMDChatRegistry sharedInstance](&OBJC_CLASS___IMDChatRegistry, "sharedInstance"));
  v5 = (void *)objc_claimAutoreleasedReturnValue([v4 allExistingSupportedServiceChatsWithIdentifier:v3 style:a2]);

  if (IMOSLoggingEnabled(v6, v7))
  {
    uint64_t v8 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
    v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      id v20 = v3;
      __int16 v21 = 1024;
      int v22 = a2;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_INFO,  "Checking if chats with chatIdentifier %@ and style %hhu need to be updated.",  buf,  0x12u);
    }
  }

  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v10 = v5;
  id v11 = [v10 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v11)
  {
    uint64_t v12 = *(void *)v15;
    do
    {
      v13 = 0LL;
      do
      {
        if (*(void *)v15 != v12) {
          objc_enumerationMutation(v10);
        }
        objc_msgSend(*(id *)(*((void *)&v14 + 1) + 8 * (void)v13), "updateShouldForceToSMS:", 0, (void)v14);
        v13 = (char *)v13 + 1;
      }

      while (v11 != v13);
      id v11 = [v10 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }

    while (v11);
  }
}

uint64_t _UpdateLastAddressedHandle(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (([v5 isTypingMessage] & 1) != 0
    || ([v6 isEqualToIgnoringCase:kFZServiceDefaultsSentinelAlias] & 1) != 0
    || ![v6 length])
  {
    uint64_t v10 = 0LL;
    goto LABEL_8;
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 _stripFZIDPrefix]);
  if (v7)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue([v7 lastAddressedLocalHandle]);
    if ([v9 isEqualToString:v8])
    {
    }

    else
    {
      id v13 = [v8 length];

      if (v13)
      {
        if (IMOSLoggingEnabled(v14, v15))
        {
          uint64_t v16 = OSLogHandleForIMFoundationCategory("CallerID");
          __int128 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            int v18 = 138412290;
            v19 = v8;
            _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_INFO,  "  ** Updating caller URI for chat to be: %@",  (uint8_t *)&v18,  0xCu);
          }
        }

        [v7 updateLastAddressedHandle:v8];
        uint64_t v10 = 1LL;
        goto LABEL_18;
      }
    }
  }

  uint64_t v10 = 0LL;
LABEL_18:

LABEL_8:
  if (v7)
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 chatIdentifier]);
    sub_4AE8(v11, (uint64_t)[v7 style]);
  }

  return v10;
}

void _ReplaceExtensionPayloadDataWithAttachmentForIncomingMessage(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (([v3 isTypingMessage] & 1) == 0)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 payloadData]);
    id v6 = [v5 length];

    if (v6)
    {
      if (IMOSLoggingEnabled(v7, v8))
      {
        uint64_t v9 = OSLogHandleForIMFoundationCategory("MessageService");
        uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          uint64_t v42 = (uint64_t)v3;
          __int16 v43 = 2112;
          id v44 = v4;
          _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_INFO,  "Request to _ReplaceExtensionPayloadDataWithAttachmentForIncomingMessage: %@ chatIdentifier: %@",  buf,  0x16u);
        }
      }

      uint64_t v11 = IMExtensionPayloadUnarchivingClasses();
      v38 = (void *)objc_claimAutoreleasedReturnValue(v11);
      uint64_t v12 = objc_alloc(&OBJC_CLASS___NSKeyedUnarchiver);
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v3 payloadData]);
      id v39 = 0LL;
      uint64_t v14 = -[NSKeyedUnarchiver initForReadingFromData:error:](v12, "initForReadingFromData:error:", v13, &v39);
      id v15 = v39;

      -[NSKeyedUnarchiver _enableStrictSecureDecodingMode](v14, "_enableStrictSecureDecodingMode");
      uint64_t v16 = objc_claimAutoreleasedReturnValue( -[NSKeyedUnarchiver decodeObjectOfClasses:forKey:]( v14,  "decodeObjectOfClasses:forKey:",  v38,  NSKeyedArchiveRootObjectKey));
      int v18 = (void *)v16;
      if (v15 && IMOSLoggingEnabled(v16, v17))
      {
        uint64_t v19 = OSLogHandleForIMFoundationCategory("Warning");
        id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v42 = (uint64_t)v15;
          _os_log_impl(&dword_0, v20, OS_LOG_TYPE_INFO, "Failed to unarchive payload. Error: %@", buf, 0xCu);
        }
      }

      uint64_t v21 = objc_opt_class(&OBJC_CLASS___NSDictionary);
      if ((objc_opt_isKindOfClass(v18, v21) & 1) != 0)
      {
        uint64_t v22 = IMExtensionPayloadDataKey;
        v23 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKey:IMExtensionPayloadDataKey]);
        if ([v23 length])
        {
          v24 = (void *)objc_claimAutoreleasedReturnValue(+[IMDFileTransferCenter sharedInstance](&OBJC_CLASS___IMDFileTransferCenter, "sharedInstance"));
          v40 = v23;
          v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v40,  1LL));
          v26 = (void *)objc_claimAutoreleasedReturnValue([v3 guid]);
          uint64_t v36 = objc_claimAutoreleasedReturnValue([v24 guidsForStoredAttachmentPayloadData:v25 messageGUID:v26]);

          if (IMOSLoggingEnabled(v27, v28))
          {
            uint64_t v29 = OSLogHandleForIMFoundationCategory("MessageService");
            v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
            if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              uint64_t v42 = v36;
              _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_INFO,  "Wrote extension payload data to attachments folder with GUIDs: %@",  buf,  0xCu);
            }
          }

          v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](&OBJC_CLASS___NSMutableArray, "arrayWithArray:", v36, v36));
          v32 = (void *)objc_claimAutoreleasedReturnValue([v3 fileTransferGUIDs]);
          [v31 addObjectsFromArray:v32];

          id v33 = [v31 copy];
          [v3 setFileTransferGUIDs:v33];

          id v34 = [v18 mutableCopy];
          [v34 removeObjectForKey:v22];
          v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v34,  0LL,  0LL));
          [v3 setPayloadData:v35];
        }
      }
    }
  }
}
}

void sub_56BC(id a1)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver( DarwinNotifyCenter,  0LL,  (CFNotificationCallback)sub_56EC,  @"com.apple.apsd.mmdump",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
}

void sub_56EC()
{
  v0 = (void *)objc_claimAutoreleasedReturnValue(+[IMDCKUtilities sharedInstance](&OBJC_CLASS___IMDCKUtilities, "sharedInstance"));
  unsigned int v1 = [v0 cloudKitSyncingEnabled];

  if (v1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[IMDCKExitManager sharedInstance](&OBJC_CLASS___IMDCKExitManager, "sharedInstance"));
    [v2 submitCloudKitMetricWithOperationGroupName:IMRecievedMissingMessageNotification];

    id v3 = (id)objc_claimAutoreleasedReturnValue(+[IMDCKUtilities sharedInstance](&OBJC_CLASS___IMDCKUtilities, "sharedInstance"));
    [v3 logDumpAndSendMessageTo:@"mailto:missing_msgs_bot@icloud.com" forHours:1 reason:@"Missing_Messages" requirePreviousPrompt:1 willSendBlock:&stru_D6068];
  }

void sub_5BF8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (IMOSLoggingEnabled(WeakRetained, v3))
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory("MessageService");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_0, v5, OS_LOG_TYPE_INFO, "Callback to update global read receipt value", buf, 2u);
    }
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) globalReadReceiptSettingVersion]);
  id v7 = [*(id *)(a1 + 32) readReceiptsGloballyEnabled];
  if (IMOSLoggingEnabled(v7, v8))
  {
    uint64_t v9 = OSLogHandleForIMFoundationCategory("MessageService");
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109378;
      int v24 = (int)v7;
      __int16 v25 = 2112;
      v26 = v6;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_INFO,  "Callback to update global read receipt value to: %d with version id: %@",  buf,  0x12u);
    }
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained _firstiMessageChat]);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 60001LL));
  if (v11)
  {
    v21[0] = @"GlobalReadReceiptChangedValue";
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v7));
    v21[1] = @"GlobalReadReceiptVersionIDKey";
    v22[0] = v13;
    v22[1] = v6;
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v22,  v21,  2LL));
    id v15 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained account]);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 loginID]);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v11 guid]);
    int v18 = (void *)objc_claimAutoreleasedReturnValue([v11 chatIdentifier]);
    objc_msgSend( WeakRetained,  "sendCommand:withProperties:toPerson:toChatID:identifier:style:",  v12,  v14,  v16,  v17,  v18,  objc_msgSend(v11, "style"));
  }

  else
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  v7,  @"GlobalReadReceiptChangedValue"));
    v19[1] = @"GlobalReadReceiptVersionIDKey";
    v20[0] = v13;
    v20[1] = v6;
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v20,  v19,  2LL));
    id v15 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained account]);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 loginID]);
    [WeakRetained sendCommand:v12 withProperties:v14 toPerson:v16];
  }
}

void sub_6164(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (IMOSLoggingEnabled(WeakRetained, v2))
  {
    uint64_t v3 = OSLogHandleForIMFoundationCategory("MessageService");
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      LOWORD(v11) = 0;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_INFO, "Callback to update Keep messages value", (uint8_t *)&v11, 2u);
    }
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained _firstiMessageChat]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained _messageDictionaryForDeleteCommandShouldResetPreference:0]);
  if (IMOSLoggingEnabled(v6, v7))
  {
    uint64_t v8 = OSLogHandleForIMFoundationCategory("MessageService");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v11 = 138412290;
      uint64_t v12 = v6;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_INFO,  "Callback to update keep messages with message dictionary %@",  (uint8_t *)&v11,  0xCu);
    }
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 guid]);
  [WeakRetained sendDeleteCommand:v6 forChatGUID:v10];
}

void sub_62F8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained _firstiMessageChat]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained _messageDictionaryForDeleteCommandShouldResetPreference:1]);
  if (IMOSLoggingEnabled(v3, v4))
  {
    uint64_t v5 = OSLogHandleForIMFoundationCategory("MessageService");
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v8 = 138412290;
      uint64_t v9 = v3;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_INFO,  "Callback to reset keep messages with message dictionary %@",  (uint8_t *)&v8,  0xCu);
    }
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v2 guid]);
  [WeakRetained sendDeleteCommand:v3 forChatGUID:v7];
}

LABEL_12:
  }

  id v33 = 0u;
  id v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  int v11 = (void *)objc_claimAutoreleasedReturnValue(-[MessageServiceSession accounts](self, "accounts"));
  uint64_t v12 = [v11 countByEnumeratingWithState:&v31 objects:v45 count:16];
  if (v12)
  {
    uint64_t v14 = *(void *)v32;
    *(void *)&id v13 = 138412802LL;
    uint64_t v28 = v13;
    do
    {
      for (j = 0LL; j != v12; j = (char *)j + 1)
      {
        if (*(void *)v32 != v14) {
          objc_enumerationMutation(v11);
        }
        uint64_t v16 = *(void **)(*((void *)&v31 + 1) + 8LL * (void)j);
        uint64_t v17 = objc_opt_class(&OBJC_CLASS___IMDIDSAccount);
        if ((objc_opt_isKindOfClass(v16, v17) & 1) != 0)
        {
          int v18 = (void *)objc_claimAutoreleasedReturnValue([v16 idsAccount]);
          if (-[MessageServiceSession _isDeviceRegisteredForAccount:](self, "_isDeviceRegisteredForAccount:", v18))
          {
            uint64_t v19 = _IDSiMessageProtocolVersionNumber();
            id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
            uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v20,  @"Version"));

            [v16 writeAccountDefaults:v21];
            uint64_t v22 = [v16 loginStatus];
            if ((unint64_t)v22 <= 3)
            {
              if (IMOSLoggingEnabled(v22, v23))
              {
                int v24 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
                __int16 v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
                if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
                {
                  v26 = [v16 loginStatus];
                  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v16 idsAccount]);
                  *(_DWORD *)buf = v28;
                  v40 = v16;
                  v41 = 2048;
                  uint64_t v42 = v26;
                  __int16 v43 = 2112;
                  id v44 = v27;
                  _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_INFO,  "refreshRegistration. Logging into account %@, login status %lu,  [account idsAccount] %@",  buf,  0x20u);
                }
              }

              -[MessageServiceSession loginServiceSessionWithAccount:]( self,  "loginServiceSessionWithAccount:",  v16,  v28);
            }
          }
        }
      }

      uint64_t v12 = [v11 countByEnumeratingWithState:&v31 objects:v45 count:16];
    }

    while (v12);
  }

  v30.receiver = self;
  v30.super_class = (Class)&OBJC_CLASS___MessageServiceSession;
  -[MessageServiceSession refreshRegistration](&v30, "refreshRegistration");
}

  if (IMOSLoggingEnabled(v12, v13))
  {
    uint64_t v14 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = @"NO";
      if ((_DWORD)v6) {
        uint64_t v16 = @"YES";
      }
      *(_DWORD *)buf = 138412546;
      v23 = v4;
      int v24 = 2112;
      __int16 v25 = v16;
      _os_log_impl(&dword_0, v15, OS_LOG_TYPE_INFO, "_richLinkPendSendingWithGUID GUID %@ result %@", buf, 0x16u);
    }
  }

  return (char)v6;
}

    id v15 = 1;
LABEL_13:

    goto LABEL_14;
  }

  id v15 = 0;
LABEL_14:

  return v15;
}

LABEL_11:
  return v4;
}
}

  if (self->_includeMessageParts) {
    self->_isSimpleString = 0;
  }
  if (v22 || v16 || v15 || v14 || v13 || v12)
  {
    uint64_t v5 = +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v5);
    -[NSMutableDictionary removeObjectForKey:](v5, "removeObjectForKey:", v21);
    -[NSMutableDictionary removeObjectForKey:](v5, "removeObjectForKey:", v20);
    -[NSMutableDictionary removeObjectForKey:](v5, "removeObjectForKey:", v19);
    -[NSMutableDictionary removeObjectForKey:](v5, "removeObjectForKey:", v18);
    -[NSMutableDictionary removeObjectForKey:](v5, "removeObjectForKey:", v17);
    -[NSMutableDictionary removeObjectForKey:](v5, "removeObjectForKey:", v23);
  }

  return v5;
}

    if (a5)
    {
      if (objc_msgSend(objc_msgSend(a3, "guid"), "length")) {
        return 1;
      }
      uint64_t v22 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group_GroupPhoto");
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_INFO)) {
        return 0;
      }
      uint64_t v29 = 138412290;
      v30 = (int64_t)a3;
      v23 = "Don't request group photo for chat, guid is nil for some reason: %@";
      int v24 = v22;
      __int16 v25 = 12;
    }

    else
    {
      uint64_t v27 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group_GroupPhoto");
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_INFO)) {
        return 0;
      }
      LOWORD(v29) = 0;
      v23 = "Don't request group photo, incomingGroupPhotoCreationDate is nil.";
      int v24 = v27;
      __int16 v25 = 2;
    }

    v20[(v14 >> 6) + 8] |= 1LL << v14;
    __int16 v25 = (uint64_t *)(v20[6] + 16 * v14);
    void *v25 = a3;
    v25[1] = a4;
    v26 = (void *)(v20[7] + 16 * v14);
    void *v26 = a1;
    v26[1] = a2;
    uint64_t v27 = v20[2];
    uint64_t v28 = __OFADD__(v27, 1LL);
    uint64_t v29 = v27 + 1;
    if (!v28)
    {
      void v20[2] = v29;
      return swift_bridgeObjectRetain(a4);
    }

    goto LABEL_14;
  }

  sub_8D664(v17, a5 & 1);
  v23 = sub_8BF14(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    uint64_t v14 = v23;
    id v20 = (void *)*v6;
    if ((v18 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    uint64_t v22 = (uint64_t *)(v18[6] + 16 * v12);
    *uint64_t v22 = a2;
    v22[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    int v24 = __OFADD__(v23, 1LL);
    __int16 v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }

    goto LABEL_14;
  }

  sub_8D988(v15, a4 & 1);
  id v20 = sub_8BF14(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    uint64_t v12 = v20;
    int v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

LABEL_10:
  }

  -[MessageServiceSession _logLocalInfo](self, "_logLocalInfo");
}

LABEL_11:
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[IMDChatRegistry sharedInstance](&OBJC_CLASS___IMDChatRegistry, "sharedInstance"));
    id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 existingChatWithGUID:v6]);

    if (v20)
    {
      v45 = 0LL;
      uint64_t v21 = _LastAddressedURIForChatLogMetricIfNeeded(v20, 0LL, self, &v45, 0);
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      v23 = v45;
      __int16 v25 = v23;
      if (!v23) {
        goto LABEL_19;
      }
    }

    else
    {
      __int16 v25 = (void *)objc_claimAutoreleasedReturnValue(-[MessageServiceSession idsAccount](self, "idsAccount"));
      v23 = (id)objc_claimAutoreleasedReturnValue(-[MessageServiceSession callerURIUsingCalleeURI:](self, "callerURIUsingCalleeURI:", 0LL));
      uint64_t v22 = v23;
      if (!v25) {
        goto LABEL_19;
      }
    }

    if (v22)
    {
      v23 = [v22 length];
      if (v23)
      {
        v26 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        uint64_t v27 = v26;
        if (v8) {
          -[NSMutableArray addObject:](v26, "addObject:", v22);
        }
        else {
          -[NSMutableArray addObject:](v26, "addObject:", IDSDefaultPairedDevice);
        }
        v32 = JWEncodeDictionary(v44);
        id v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
        id v34 = [v33 _FTCopyGzippedData];

        if (IMOSLoggingEnabled(v35, v36))
        {
          id v37 = OSLogHandleForIMFoundationCategory("MessageService");
          v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
          if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v49 = v44;
            _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_INFO,  "Recently Deleted | Forwarding recover command :%@",  buf,  0xCu);
          }
        }

        v46[0] = IDSSendMessageOptionTopLevelDictionaryKey;
        v46[1] = IDSSendMessageOptionSkipPayloadCheckKey;
        v47[0] = &__kCFBooleanTrue;
        v47[1] = &__kCFBooleanTrue;
        v46[2] = IDSSendMessageOptionCommandKey;
        v46[3] = IDSSendMessageOptionDataToEncryptKey;
        v47[2] = &off_DB4F8;
        v47[3] = v34;
        v46[4] = IDSSendMessageOptionTimeoutKey;
        id v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", IDSMaxMessageTimeout));
        v47[4] = v39;
        v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v47,  v46,  5LL));

        v41 = (void *)objc_claimAutoreleasedReturnValue(-[MessageServiceSession deliveryController](self, "deliveryController"));
        uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionary](&OBJC_CLASS___NSDictionary, "dictionary"));
        __int16 v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v27));
        [v41 sendMessageDictionary:v42 encryptDictionary:1 fromID:v22 fromAccount:v25 toURIs:v43 toGroup:0 priority:300 options:v40 willSendBlock:0 completionBlock:&stru_D5F48];

        goto LABEL_33;
      }
    }

LABEL_24:
    v26 = 0LL;
    goto LABEL_25;
  }

  if (v22)
  {
    v23 = OSLogHandleForIMEventCategory("MessageService");
    int v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v101 = v15;
      _os_log_impl(&dword_0, v24, OS_LOG_TYPE_INFO, "Found Message with messageID: %@", buf, 0xCu);
    }
  }

  __int16 v25 = (void *)objc_claimAutoreleasedReturnValue(-[MessageServiceSession messageStore](self, "messageStore"));
  v26 = (void *)objc_claimAutoreleasedReturnValue([v25 chatForMessage:v19]);

  uint64_t v29 = IMOSLoggingEnabled(v27, v28);
  if (!v26)
  {
    if (v29)
    {
      v45 = OSLogHandleForIMEventCategory("MessageService");
      id v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
      if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v44, OS_LOG_TYPE_INFO, " Unable to find chat for message", buf, 2u);
      }
        }
      }

      else if (IMOSLoggingEnabled(v26, v27))
      {
        id v33 = OSLogHandleForIMEventCategory("MessageService");
        id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_0, v34, OS_LOG_TYPE_INFO, " ** Not sending command, device is not registered", buf, 2u);
        }

        goto LABEL_24;
      }

  return v29;
}

        uint64_t v7 = (v13 - 1) & v13;
        int v11 = __clz(__rbit64(v13)) + (v14 << 6);
        uint64_t v9 = v14;
      }

      uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
      int v18 = *v16;
      uint64_t v17 = v16[1];
      Hasher.init(_seed:)(v42, *(void *)(v2 + 40));
      swift_bridgeObjectRetain(v17);
      String.hash(into:)(v42, v18, v17);
      uint64_t v19 = Hasher._finalize()();
      id v20 = -1LL << *(_BYTE *)(v2 + 32);
      uint64_t v21 = v19 & ~v20;
      if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) != 0) {
        break;
      }
LABEL_6:
      swift_bridgeObjectRelease(v17);
    }

    uint64_t v22 = *(void *)(v2 + 48);
    v23 = (void *)(v22 + 16 * v21);
    int v24 = v23[1];
    __int16 v25 = *v23 == v18 && v24 == v17;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v23, v24, v18, v17, 0LL) & 1) != 0)
    {
      isStackAllocationSafe = swift_bridgeObjectRelease(v17);
      __int16 v43 = a1;
      id v44 = v41;
      v45 = v39;
      v46 = v9;
      v47 = v7;
    }

    else
    {
      v26 = ~v20;
      do
      {
        uint64_t v21 = (v21 + 1) & v26;
        if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) == 0) {
          goto LABEL_6;
        }
        uint64_t v27 = (void *)(v22 + 16 * v21);
        uint64_t v28 = v27[1];
        uint64_t v29 = *v27 == v18 && v28 == v17;
      }

      while (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v27, v28, v18, v17, 0LL) & 1) == 0);
      __int16 v43 = a1;
      id v44 = v41;
      v45 = v39;
      v46 = v9;
      v47 = v7;
      isStackAllocationSafe = swift_bridgeObjectRelease(v17);
    }

    v31 = *(_BYTE *)(v2 + 32);
    v32 = v31 & 0x3F;
    id v33 = (1LL << v31) + 63;
    id v34 = v33 >> 6;
    v35 = 8 * (v33 >> 6);
    if (v32 < 0xE
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v33 >> 6), 8LL), (_DWORD)isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0LL), (const void *)(v2 + 56), v35);
      uint64_t v36 = sub_8C868((unint64_t *)((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v34, v2, v21, &v43);
      swift_release(v2);
      sub_8452C(v43);
    }

    else
    {
      id v37 = (void *)swift_slowAlloc(v35, -1LL);
      memcpy(v37, (const void *)(v2 + 56), v35);
      uint64_t v36 = sub_8C868((unint64_t *)v37, v34, v2, v21, &v43);
      swift_release(v2);
      sub_8452C(v43);
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    return v36;
  }

  else
  {
    swift_release(a2);
    return (unint64_t *)&_swiftEmptySetSingleton;
  }

LABEL_23:
      goto LABEL_24;
    }

    goto LABEL_24;
  }

  if (v29)
  {
    v30 = OSLogHandleForIMEventCategory("MessageService");
    v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v101 = v26;
      _os_log_impl(&dword_0, v31, OS_LOG_TYPE_INFO, "Found Chat For Message Chat: %@", buf, 0xCu);
    }
  }

  v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v33 = (void *)objc_claimAutoreleasedReturnValue([v19 time]);
  [v32 timeIntervalSinceDate:v33];
  v35 = v34;
  -[MessageServiceSession _messageRetryTimeout](self, "_messageRetryTimeout");
  id v37 = v35 > v36;

  if (!v37)
  {
    v46 = -[MessageServiceSession _failuresForID:](self, "_failuresForID:", v16);
    v47 = -[MessageServiceSession _maxFailuresAllowed](self, "_maxFailuresAllowed");
    LODWORD(v46) = v46 < v47;
    v49 = IMOSLoggingEnabled(v47, v48);
    if ((_DWORD)v46)
    {
      if ((_DWORD)v49)
      {
        v51 = OSLogHandleForIMEventCategory("MessageService");
        v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
        if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_0, v52, OS_LOG_TYPE_INFO, " Attempting to Burn a retry to send the message", buf, 2u);
        }
      }

      if (IMOSLoggingEnabled(v49, v50))
      {
        v53 = OSLogHandleForIMEventCategory("MessageService");
        v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
        if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412802;
          v101 = v19;
          v102 = 2112;
          v103 = v16;
          v104 = 2112;
          v105 = v26;
          _os_log_impl( &dword_0,  v54,  OS_LOG_TYPE_INFO,  " Sending Retry for message: %@, to fromIdentifier: %@ in chat: %@ ",  buf,  0x20u);
        }
      }

      v55 = (void *)objc_claimAutoreleasedReturnValue([v26 participants]);
      v56 = (void *)objc_claimAutoreleasedReturnValue(-[MessageServiceSession _URIsFromHandles:](self, "_URIsFromHandles:", v55));

      v57 = [v56 containsObject:v16];
      if ((_DWORD)v57)
      {
        v59 = -[MessageServiceSession _shouldAdjustTimestampOfResentMessages]( self,  "_shouldAdjustTimestampOfResentMessages");
        if (v59)
        {
          [v19 setIsBeingRetried:1];
          v61 = (void *)objc_claimAutoreleasedReturnValue([v19 messageSummaryInfo]);
          Mutable = (CFMutableDictionaryRef)[v61 mutableCopy];

          if (!Mutable) {
            Mutable = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
          }
          v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
          -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", v63, IMMessageSummaryInfoHasBeenRetried);

          [v19 setMessageSummaryInfo:Mutable];
          [v19 setRetryToParticipant:v16];
          v64 = (void *)objc_claimAutoreleasedReturnValue([v26 chatIdentifier]);
          -[MessageServiceSession sendMessage:toChat:style:]( self,  "sendMessage:toChat:style:",  v19,  v64,  [v26 style]);

          -[MessageServiceSession _incrementDecryptionFailureForID:](self, "_incrementDecryptionFailureForID:", v16);
          goto LABEL_70;
        }

        if (IMOSLoggingEnabled(v59, v60))
        {
          v87 = OSLogHandleForIMEventCategory("MessageService");
          v75 = (os_log_s *)objc_claimAutoreleasedReturnValue(v87);
          if (os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( &dword_0,  v75,  OS_LOG_TYPE_INFO,  "Not resending message because client version is out of date",  buf,  2u);
          }

  if (IMOSLoggingEnabled(v12, v13))
  {
    id v20 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDelivery");
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      __int16 v25 = a2;
      v26 = 2112;
      uint64_t v27 = a3;
      _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_INFO,  "Failed processing attachments for message: %@  for display IDs: %@",  buf,  0x16u);
    }
  }

  uint64_t v21 = *(void *)(a1 + 168);
  if (v21)
  {
    if (v15) {
      uint64_t v22 = v15;
    }
    else {
      uint64_t v22 = 34LL;
    }
    (*(void (**)(uint64_t, void, uint64_t, void, uint64_t, id))(v21 + 16))( v21,  *(void *)(a1 + 40),  a3,  0,  v22,  [*(id *)(a1 + 32) backwardsCompatibleVersion]);
  }

    _os_log_impl(&dword_0, v24, OS_LOG_TYPE_INFO, v23, (uint8_t *)&v29, v25);
    return 0;
  }

  uint64_t v14 = [a3 properties];
  id v15 = objc_msgSend(objc_msgSend(v14, "objectForKey:", off_E2F28[0]), "integerValue");
  uint64_t v17 = IMOSLoggingEnabled(v15, v16);
  if ((uint64_t)v15 >= a4)
  {
    if (!v17) {
      return 0;
    }
    v26 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group_GroupPhoto");
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO)) {
      return 0;
    }
    uint64_t v29 = 138412546;
    v30 = (int64_t)v8;
    v31 = 2112;
    v32 = [v13 localPath];
    v23 = "Don't request group photo, we already have a file transfer for group photo guid: %@ and it exists at the local path: %@";
    int v24 = v26;
    __int16 v25 = 22;
    goto LABEL_23;
  }

  if (!v17) {
    return 1;
  }
  int v18 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group_GroupPhoto");
  uint64_t v19 = 1;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    uint64_t v29 = 134218240;
    v30 = a4;
    v31 = 2048;
    v32 = v15;
    _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_INFO,  "Incoming group photo participant version (%ld) is newer than local version with last known photo change (%ld), requesting photo",  (uint8_t *)&v29,  0x16u);
  }

  return v19;
}

    uint64_t v9 = (v15 - 1) & v15;
    id v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    int v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)(v32, v8[5]);
    swift_bridgeObjectRetain(v19);
    String.hash(into:)(v32, v18, v19);
    result = Hasher._finalize()();
    id v20 = -1LL << *((_BYTE *)v8 + 32);
    uint64_t v21 = result & ~v20;
    uint64_t v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int v24 = 0;
      __int16 v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        v26 = v22 == v25;
        if (v22 == v25) {
          uint64_t v22 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
      }

      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }

    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    uint64_t v28 = (void *)(v8[6] + 16 * v23);
    *uint64_t v28 = v18;
    v28[1] = v19;
    ++v8[2];
    if (__OFSUB__(v5--, 1LL))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (!v5) {
      goto LABEL_36;
    }
  }

  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  id v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    id v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }

LABEL_69:
        }
      }

      else if (IMOSLoggingEnabled(v57, v58))
      {
        v74 = OSLogHandleForIMEventCategory("MessageService");
        v75 = (os_log_s *)objc_claimAutoreleasedReturnValue(v74);
        if (os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          v101 = v16;
          v102 = 2112;
          v103 = v26;
          _os_log_impl( &dword_0,  v75,  OS_LOG_TYPE_INFO,  " Was told to retry send a message, but the recipient is not a member of the chat for that message. fromIdent ifier: %@ chat: %@",  buf,  0x16u);
        }

        goto LABEL_69;
      }

LABEL_70:
      goto LABEL_25;
    }

    if ((_DWORD)v49)
    {
      v65 = OSLogHandleForIMEventCategory("MessageService");
      v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
      if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( &dword_0,  v66,  OS_LOG_TYPE_INFO,  "  Unable to automatically retry after send failure, No failure retries remain",  buf,  2u);
      }
    }

    v67 = (void *)objc_claimAutoreleasedReturnValue(-[MessageServiceSession deliveryController](self, "deliveryController"));
    v68 = (void *)objc_claimAutoreleasedReturnValue([v16 _stripFZIDPrefix]);
    v69 = (void *)objc_claimAutoreleasedReturnValue([v67 activeDeviceForHandle:v68]);

    v90 = (void *)objc_claimAutoreleasedReturnValue([v69 idsDestination]);
    v70 = [v90 isEqualToString:v17];
    if (v69)
    {
      v72 = v70 ^ 1;
      if (!v17) {
        v72 = 0;
      }
      if ((v72 & 1) != 0) {
        goto LABEL_76;
      }
      v70 = [v69 shouldDisplayRemoteDecryptionFailure];
      v73 = v70 ^ 1;
    }

    else
    {
      v73 = 0;
    }

    if (!a7 && (v73 & 1) == 0)
    {
      if (IMOSLoggingEnabled(v70, v71))
      {
        v76 = OSLogHandleForIMFoundationCategory("MessageDelivery");
        v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(v76);
        if (os_log_type_enabled(v77, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v101 = v69;
          _os_log_impl(&dword_0, v77, OS_LOG_TYPE_INFO, "Found active device %@", buf, 0xCu);
        }
      }

      v78 = (void *)objc_claimAutoreleasedReturnValue([v26 participants]);
      v79 = (unint64_t)[v78 count] > 1;

      v82 = IMOSLoggingEnabled(v80, v81);
      if (v79)
      {
        if (v82)
        {
          v83 = OSLogHandleForIMEventCategory("MessageService");
          v84 = (os_log_s *)objc_claimAutoreleasedReturnValue(v83);
          if (os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            v101 = v16;
            v102 = 2112;
            v103 = v15;
            _os_log_impl( &dword_0,  v84,  OS_LOG_TYPE_INFO,  "  Querying URI %@ to see if we should show failure badge for messageID: %@",  buf,  0x16u);
          }
        }

        v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](&OBJC_CLASS___NSArray, "arrayWithObjects:", v16, 0LL));
        v86 = IDSServiceNameiMessage;
        v94[0] = _NSConcreteStackBlock;
        v94[1] = 3221225472LL;
        v94[2] = sub_88B8;
        v94[3] = &unk_D57E0;
        v95 = v16;
        v96 = self;
        v97 = v15;
        v99 = v91;
        v98 = v93;
        +[IMIDSIDQueryController currentRemoteDevicesForDestinations:service:listenerID:queue:completionBlock:]( &OBJC_CLASS___IMIDSIDQueryController,  "currentRemoteDevicesForDestinations:service:listenerID:queue:completionBlock:",  v85,  v86,  @"MessageServiceSession",  &_dispatch_main_q,  v94);
      }

      else
      {
        if (v82)
        {
          v88 = OSLogHandleForIMEventCategory("MessageService");
          v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v88);
          if (os_log_type_enabled(v89, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v101 = v15;
            _os_log_impl( &dword_0,  v89,  OS_LOG_TYPE_INFO,  "  Showing error for 1 to 1 chat for messageID: %@",  buf,  0xCu);
          }
        }

        -[MessageServiceSession didReceiveError:forMessageID:forceError:account:]( self,  "didReceiveError:forMessageID:forceError:account:",  27LL,  v15,  v91,  v93);
      }
    }

LABEL_76:
    goto LABEL_25;
  }

  if (IMOSLoggingEnabled(v38, v39))
  {
    v40 = OSLogHandleForIMEventCategory("MessageService");
    v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
    {
      uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v19 timeDelivered]);
      *(_DWORD *)buf = 138412546;
      v101 = v15;
      v102 = 2112;
      v103 = v42;
      _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_INFO,  "Message %@ originally delivered at %@ is too old to retry.",  buf,  0x16u);
    }
  }

        -[MessageServiceSession didReceiveError:forMessageID:forceError:account:]( v25,  "didReceiveError:forMessageID:forceError:account:",  26LL,  v22,  a15,  v104);
        goto LABEL_137;
      }

      if (!v48)
      {
        if (IMOSLoggingEnabled(v52, v53))
        {
          v92 = OSLogHandleForIMEventCategory("MessageService");
          v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v92);
          if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_0, v81, OS_LOG_TYPE_INFO, " => No error!?", buf, 2u);
          }

          goto LABEL_130;
        }

        goto LABEL_137;
      }

      if (v48 != 120LL) {
        goto LABEL_127;
      }
      if (IMOSLoggingEnabled(v52, v53))
      {
        v72 = OSLogHandleForIMEventCategory("MessageService");
        v73 = (os_log_s *)objc_claimAutoreleasedReturnValue(v72);
        if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v115 = v22;
          _os_log_impl(&dword_0, v73, OS_LOG_TYPE_INFO, " => OTR un-supported error for messageID: %@", buf, 0xCu);
        }
      }
    }

    else
    {
      if (v48 <= 502LL)
      {
        switch(v48)
        {
          case 400:
            if (IMOSLoggingEnabled(v52, v53))
            {
              v74 = OSLogHandleForIMEventCategory("MessageService");
              v75 = (os_log_s *)objc_claimAutoreleasedReturnValue(v74);
              if (os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412546;
                v115 = v22;
                v116 = 2112;
                v117 = v108;
                _os_log_impl( &dword_0,  v75,  OS_LOG_TYPE_INFO,  " => Remote attachment download failure for messageID: %@, additionalInfo: %@",  buf,  0x16u);
              }
            }

            if (v105)
            {
              if ([v103 isEqualToString:v112])
              {
                v76 = -[__CFString shouldDisplayAttachmentDownloadFailure]( v105,  "shouldDisplayAttachmentDownloadFailure");
                if ((_DWORD)v76)
                {
                  if (IMOSLoggingEnabled(v76, v77))
                  {
                    v78 = OSLogHandleForIMFoundationCategory("MessageDelivery");
                    v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
                    if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
                    {
                      *(_DWORD *)buf = 138412290;
                      v115 = v105;
                      _os_log_impl(&dword_0, v79, OS_LOG_TYPE_INFO, "Found active device %@", buf, 0xCu);
                    }
                  }

                  -[MessageServiceSession didReceiveError:forMessageID:forceError:account:]( v25,  "didReceiveError:forMessageID:forceError:account:",  37LL,  v22,  a15,  v104);
                }
              }
            }

            goto LABEL_137;
          case 500:
            if (IMOSLoggingEnabled(v52, v53))
            {
              v80 = OSLogHandleForIMEventCategory("MessageService");
              v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
              if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412290;
                v115 = v22;
                _os_log_impl(&dword_0, v81, OS_LOG_TYPE_INFO, " => Empty message for message ID: %@", buf, 0xCu);
              }

              goto LABEL_130;
            }

LABEL_25:
}
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 80));
}

  swift_bridgeObjectRelease(v36);
  v23 = [v25 isUsableForSending];
  v173 = v23;
  __int16 v43 = v169;
  if (qword_E3090 != -1) {
    swift_once(&qword_E3090, sub_848F8);
  }
  sub_8BE9C((uint64_t)v17, (uint64_t)qword_E3098);
  id v44 = v43;
  v45 = (os_log_s *)Logger.logObject.getter(v44);
  v46 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v45, v46))
  {
    v47 = swift_slowAlloc(18LL, -1LL);
    v48 = swift_slowAlloc(32LL, -1LL);
    v170[0] = v48;
    *(_DWORD *)v47 = 136446466;
    v49 = [v44 requestID];
    v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
    v52 = v51;

    v171 = sub_8B85C(v50, v52, v170);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172, v47 + 4, v47 + 12);

    swift_bridgeObjectRelease(v52);
    *(_WORD *)(v47 + 12) = 1024;
    LODWORD(v171) = (_DWORD)v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, (char *)&v171 + 4, v47 + 14, v47 + 18);
    _os_log_impl(&dword_0, v45, v46, "%{public}s Alias is nil, but iMessage enabled: %{BOOL}d", (uint8_t *)v47, 0x12u);
    swift_arrayDestroy(v48, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1LL, -1LL);
    swift_slowDealloc(v47, -1LL, -1LL);
  }

  else
  {
  }

  return v23;
}

    uint64_t v12 = (v26 - 1) & v26;
    id v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    int v18 = v17[1];
    id v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    v23 = (void *)(*(void *)(v4 + 48) + v16);
    void *v23 = v19;
    v23[1] = v18;
    int v24 = (void *)(*(void *)(v4 + 56) + v16);
    void *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_bridgeObjectRetain(v22);
  }

  uint64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    uint64_t v9 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

    id v13 = (v24 - 1) & v24;
    uint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    int v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    id v20 = 8 * v16;
    uint64_t v21 = *(void **)(*(void *)(v3 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *uint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    result = v21;
  }

  __int16 v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  int v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    uint64_t v10 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    int v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

void sub_88B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:*(void *)(a1 + 32)]);
  uint64_t v5 = (char *)[v4 count];
  if (v5 == (_BYTE *)&dword_0 + 1)
  {
    [*(id *)(a1 + 40) didReceiveError:27 forMessageID:*(void *)(a1 + 48) forceError:*(unsigned __int8 *)(a1 + 64) account:*(void *)(a1 + 56)];
  }

  else if (IMOSLoggingEnabled(v5, v6))
  {
    uint64_t v7 = OSLogHandleForIMEventCategory("MessageService");
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)(a1 + 48);
      id v10 = [v4 count];
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = 138412802;
      uint64_t v13 = v9;
      __int16 v14 = 2048;
      id v15 = v10;
      __int16 v16 = 2112;
      uint64_t v17 = v11;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_INFO,  "Not showing failure badge for %@ because %ld endpoints returned for %@",  (uint8_t *)&v12,  0x20u);
    }
  }
}

LABEL_137:
            v100 = (void *)objc_claimAutoreleasedReturnValue([v21 account]);
            -[MessageServiceSession sendDeliveryReceiptForMessageID:toID:deliveryContext:needsDeliveryReceipt:callerID:account:]( v25,  "sendDeliveryReceiptForMessageID:toID:deliveryContext:needsDeliveryReceipt:callerID:account:",  v22,  v112,  v111,  v110,  v23,  v100);

            if ((v107 & 2) != 0) {
              -[MessageServiceSession noteLastItemProcessed](v25, "noteLastItemProcessed");
            }

            goto LABEL_140;
          case 502:
            if (IMOSLoggingEnabled(v52, v53))
            {
              v54 = OSLogHandleForIMEventCategory("MessageService");
              v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
              if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412290;
                v115 = v24;
                _os_log_impl( &dword_0,  v55,  OS_LOG_TYPE_INFO,  " => Receiver (%@) has blackholed our conversation; updating conversation accordingly.",
                  buf,
                  0xCu);
              }
            }

            v56 = (void *)objc_claimAutoreleasedReturnValue(+[IMDMessageStore sharedInstance](&OBJC_CLASS___IMDMessageStore, "sharedInstance"));
            v102 = (void *)objc_claimAutoreleasedReturnValue([v56 chatForMessageGUID:v22]);

            if (IMOSLoggingEnabled(v57, v58))
            {
              v59 = OSLogHandleForIMEventCategory("MessageService");
              v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
              if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
              {
                v61 = (__CFString *)objc_claimAutoreleasedReturnValue([v102 chatIdentifier]);
                *(_DWORD *)buf = 138412802;
                v115 = v61;
                v116 = 2112;
                v117 = v24;
                v118 = 2112;
                v119 = v23;
                _os_log_impl( &dword_0,  v60,  OS_LOG_TYPE_INFO,  "Chat (%@) iMessage history (NO) for sender (%@) and receiver (%@)",  buf,  0x20u);
              }
            }

            if (+[IMSpamFilterHelper isInternationalSpamFilteringEnabled]( &OBJC_CLASS___IMSpamFilterHelper,  "isInternationalSpamFilteringEnabled"))
            {
              v62 = (void *)objc_claimAutoreleasedReturnValue(+[IMMetricsCollector sharedInstance](&OBJC_CLASS___IMMetricsCollector, "sharedInstance"));
              [v62 trackSpamEvent:8];

              if (IMStringIsEmail(v23))
              {
                v63 = (void *)objc_claimAutoreleasedReturnValue( +[IMDAccountController sharedAccountController]( &OBJC_CLASS___IMDAccountController,  "sharedAccountController"));
                v64 = [v63 hasActivePhoneAccount];

                v65 = (void *)objc_claimAutoreleasedReturnValue(+[IMMetricsCollector sharedInstance](&OBJC_CLASS___IMMetricsCollector, "sharedInstance"));
                v66 = v65;
                if (v64) {
                  v67 = 5LL;
                }
                else {
                  v67 = 6LL;
                }
                [v65 trackSpamEvent:v67];
              }

              [v102 updateReceivedBlackholeError:1];
              -[MessageServiceSession didReceiveError:forMessageID:forceError:account:]( v25,  "didReceiveError:forMessageID:forceError:account:",  43LL,  v22,  1LL,  v104);
            }

            else
            {
              v96 = -[MessageServiceSession didReceiveError:forMessageID:forceError:account:]( v25,  "didReceiveError:forMessageID:forceError:account:",  1LL,  v22,  a15,  v104);
              if (IMOSLoggingEnabled(v96, v97))
              {
                v98 = OSLogHandleForIMFoundationCategory("Warning");
                v99 = (os_log_s *)objc_claimAutoreleasedReturnValue(v98);
                if (os_log_type_enabled(v99, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 67109120;
                  LODWORD(v115) = v48;
                  _os_log_impl(&dword_0, v99, OS_LOG_TYPE_INFO, "Received unknown/unhandled error type: %d", buf, 8u);
                }
              }
            }

            goto LABEL_137;
        }

LABEL_127:
        v93 = -[MessageServiceSession didReceiveError:forMessageID:forceError:account:]( v25,  "didReceiveError:forMessageID:forceError:account:",  1LL,  v22,  a15,  v104);
        if (IMOSLoggingEnabled(v93, v94))
        {
          v95 = OSLogHandleForIMFoundationCategory("Warning");
          v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v95);
          if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v115) = v48;
            _os_log_impl(&dword_0, v81, OS_LOG_TYPE_INFO, "Received unknown/unhandled error type: %d", buf, 8u);
          }

LABEL_130:
          goto LABEL_137;
        }

        goto LABEL_137;
      }

      if (v48 == 503LL)
      {
        if (IMOSLoggingEnabled(v52, v53))
        {
          v89 = OSLogHandleForIMFoundationCategory("MessageService");
          v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);
          if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v115 = v22;
            _os_log_impl(&dword_0, v81, OS_LOG_TYPE_INFO, "Sent messageID %@ was junked", buf, 0xCu);
          }

          goto LABEL_130;
        }

        goto LABEL_137;
      }

      if (v48 != 600LL)
      {
        if (v48 != 601LL) {
          goto LABEL_127;
        }
        if (IMOSLoggingEnabled(v52, v53))
        {
          v70 = OSLogHandleForIMEventCategory("MessageService");
          v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
          if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v115 = v22;
            _os_log_impl( &dword_0,  v71,  OS_LOG_TYPE_INFO,  " => Remote Identity decryption failure for messageID: %@",  buf,  0xCu);
          }
        }

        goto LABEL_76;
      }

      if (IMOSLoggingEnabled(v52, v53))
      {
        v90 = OSLogHandleForIMEventCategory("MessageService");
        v91 = (os_log_s *)objc_claimAutoreleasedReturnValue(v90);
        if (os_log_type_enabled(v91, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v115 = v22;
          _os_log_impl( &dword_0,  v91,  OS_LOG_TYPE_INFO,  " => Remote identity encryption failure for messageID: %@",  buf,  0xCu);
        }
      }
    }

    -[MessageServiceSession didReceiveError:forMessageID:forceError:account:]( v25,  "didReceiveError:forMessageID:forceError:account:",  27LL,  v22,  a15,  v104);
    goto LABEL_137;
  }

        [*(id *)(a1 + 48) noteLastItemProcessed];
LABEL_131:
        v150 = *(void *)(*(void *)(a1 + 144) + 8LL);
        v151 = *(id *)(v150 + 40);
        *(void *)(v150 + 40) = 0LL;
LABEL_132:

LABEL_133:
LABEL_134:

        goto LABEL_135;
      }
    }

    else
    {
    }

    LOBYTE(v243) = 0;
    goto LABEL_31;
  }

  if (IMOSLoggingEnabled(v14, v15))
  {
    __int16 v16 = OSLogHandleForIMFoundationCategory("MessageService");
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_INFO,  "Received group message from linked ID already in group. Dropping message",  buf,  2u);
    }
  }

  if (*(_BYTE *)(a1 + 153)) {
    [*(id *)(a1 + 48) noteLastItemProcessed];
  }
  int v18 = *(void *)(*(void *)(a1 + 144) + 8LL);
  uint64_t v19 = *(MessageToSuperParserContext **)(v18 + 40);
  *(void *)(v18 + 40) = 0LL;
LABEL_135:

  _Block_object_dispose(&v328, 8);
}

LABEL_140:
}

void sub_9D20(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) _logLocalInfo];
  id v4 = [*(id *)(a1 + 40) intValue];
  if ((_DWORD)v4)
  {
    if (IMOSLoggingEnabled(v4, v5))
    {
      uint64_t v6 = OSLogHandleForIMFoundationCategory("DeliveryStatus");
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = *(void *)(a1 + 40);
        int v8 = *(void **)(a1 + 48);
        *(_DWORD *)buf = 138412546;
        v50 = v8;
        __int16 v51 = 2112;
        uint64_t v52 = v9;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_INFO,  "Failed delivery receipt for message: %@   status is: %@",  buf,  0x16u);
      }
    }

LABEL_6:
    v3[2](v3);
    goto LABEL_29;
  }

  uint64_t v10 = IMGetCachedDomainBoolForKey(@"com.apple.madrid", @"ignoreDeliveryReceipts");
  if ((_DWORD)v10)
  {
    if (IMOSLoggingEnabled(v10, v11))
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory("DeliveryStatus");
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        __int16 v14 = *(void **)(a1 + 48);
        *(_DWORD *)buf = 138412290;
        v50 = v14;
        _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "Ignoring delivery receipt for message: %@", buf, 0xCu);
      }
    }

    goto LABEL_6;
  }

  id v15 = *(void **)(a1 + 32);
  __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) account]);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v15 imdAccountForIDSAccount:v16]);

  unsigned __int8 v18 = [*(id *)(a1 + 64) unsignedIntValue];
  unsigned __int8 v19 = [*(id *)(a1 + 64) unsignedIntValue];
  if ((v19 & 2) != 0)
  {
    [*(id *)(a1 + 32) noteLastItemFromStorage:*(void *)(a1 + 48)];
  }

  else if ((v18 & 1) != 0)
  {
    [*(id *)(a1 + 32) noteItemFromStorage:*(void *)(a1 + 48)];
  }

  id v20 = *(void **)(a1 + 72);
  if (v20)
  {
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 _numberForKey:@"c"]);
    if (IMOSLoggingEnabled(v21, v22))
    {
      uint64_t v23 = OSLogHandleForIMFoundationCategory("DeliveryStatus");
      int v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v50 = v21;
        _os_log_impl(&dword_0, v24, OS_LOG_TYPE_INFO, "Received delivery status for command: %@", buf, 0xCu);
      }
    }

    if ([v21 unsignedIntValue] == 106)
    {
      __int16 v25 = *(void **)(a1 + 32);
      uint64_t v26 = *(void *)(a1 + 48);
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate __im_iMessageDateFromTimeStamp:]( &OBJC_CLASS___NSDate,  "__im_iMessageDateFromTimeStamp:",  *(void *)(a1 + 80)));
      [v25 didReceiveMessageDeliveryReceiptForMessageID:v26 date:v27 account:v17];

      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) _stringForKey:@"tP"]);
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) _stringForKey:@"sP"]);
      v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) _dataForKey:@"t"]);
      v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) _dictionaryForKey:@"p"]);
      v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) _numberForKey:@"aT"]);
      [*(id *)(a1 + 32) handler:*(void *)(a1 + 56) messageIDSaved:*(void *)(a1 + 48) ofType:v32 toIdentifier:v28 fromIdentifier:v29 groupContext:v31 fromToken:v30 timeStamp:*(void *)(a1 + 80) fromIDSID:*(void *)(a1 + 96) needsDelive ryReceipt:*(void *)(a1 + 104) deliveryContext:*(void *)(a1 + 112) storageContext:*(void *)(a1 + 64)];
    }
  }

  else
  {
    id v33 = (void *)objc_claimAutoreleasedReturnValue(+[IMDMessageStore sharedInstance](&OBJC_CLASS___IMDMessageStore, "sharedInstance"));
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v33 messageWithGUID:*(void *)(a1 + 48)]);

    if ([v21 errorCode] != 43)
    {
      id v34 = *(void **)(a1 + 32);
      uint64_t v35 = *(void *)(a1 + 48);
      uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate __im_iMessageDateFromTimeStamp:]( &OBJC_CLASS___NSDate,  "__im_iMessageDateFromTimeStamp:",  *(void *)(a1 + 80)));
      unsigned int v37 = [v34 didReceiveMessageDeliveryReceiptForMessageID:v35 date:v36 account:v17];

      if (IMOSLoggingEnabled(v38, v39))
      {
        uint64_t v40 = OSLogHandleForIMFoundationCategory("DeliveryStatus");
        v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
        {
          uint64_t v42 = *(void **)(a1 + 48);
          uint64_t v43 = *(void *)(a1 + 72);
          id v44 = @"NO";
          if (v37) {
            id v44 = @"YES";
          }
          *(_DWORD *)buf = 138412802;
          v50 = v42;
          __int16 v51 = 2112;
          uint64_t v52 = v43;
          __int16 v53 = 2112;
          v54 = v44;
          _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_INFO,  "Received Fresh Delivery Receipt For Message ID: %@ with Context : %@  Peer Reflecting It? %@",  buf,  0x20u);
        }
      }

      if (v37)
      {
        id v45 = *(id *)(a1 + 88);
        v46 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) idsAccountForFromURI:v45 toURI:*(void *)(a1 + 88)]);
        if ([v46 _validateIDSAccount])
        {
          v47 = v46;
        }

        else
        {
          v47 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) account]);

          uint64_t v48 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) callerURIForIDSAccount:v47]);
          id v45 = (id)v48;
        }

        [*(id *)(a1 + 32) forwardDeliveryReceiptForMessageID:*(void *)(a1 + 48) withAccount:v47 callerURI:v45];
      }
    }
  }

  if ((v19 & 2) != 0) {
    [*(id *)(a1 + 32) noteLastItemProcessed];
  }
  if (v3) {
    v3[2](v3);
  }

LABEL_29:
}

void sub_A990(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = IMOSLoggingEnabled(v3, v4);
  if ((_DWORD)v5)
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory("DeliveryStatus");
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(const __CFString **)(a1 + 40);
      int v29 = 138412546;
      uint64_t v30 = v9;
      __int16 v31 = 2112;
      v32 = v10;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_INFO,  "Received Reflected Delivery Receipt For Message ID: %@ with Context : %@",  (uint8_t *)&v29,  0x16u);
    }
  }

  if (IMOSLoggingEnabled(v5, v6))
  {
    uint64_t v11 = OSLogHandleForIMFoundationCategory("MessageService");
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      if (*(void *)(a1 + 56)) {
        uint64_t v13 = @"YES";
      }
      else {
        uint64_t v13 = @"NO";
      }
      uint64_t v15 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(a1 + 48);
      int v29 = 138412802;
      uint64_t v30 = v14;
      __int16 v31 = 2112;
      v32 = v13;
      __int16 v33 = 2112;
      uint64_t v34 = v15;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_INFO,  "fromIDSID:%@, needsDeliveryReceipt %@, deliveryContext %@",  (uint8_t *)&v29,  0x20u);
    }
  }

  __int16 v16 = *(void **)(a1 + 64);
  uint64_t v17 = *(void *)(a1 + 32);
  unsigned __int8 v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate __im_iMessageDateFromTimeStamp:]( &OBJC_CLASS___NSDate,  "__im_iMessageDateFromTimeStamp:",  *(void *)(a1 + 72)));
  unsigned __int8 v19 = *(void **)(a1 + 64);
  id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) account]);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v19 imdAccountForIDSAccount:v20]);
  [v16 didReceiveMessageDeliveryReceiptForMessageID:v17 date:v18 account:v21];

  uint64_t v22 = *(void **)(a1 + 64);
  uint64_t v23 = *(void *)(a1 + 32);
  uint64_t v25 = *(void *)(a1 + 40);
  uint64_t v24 = *(void *)(a1 + 48);
  uint64_t v26 = *(void *)(a1 + 56);
  uint64_t v27 = *(void *)(a1 + 88);
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) account]);
  [v22 sendDeliveryReceiptForMessageID:v23 toID:v24 deliveryContext:v25 needsDeliveryReceipt:v26 callerID:v27 account:v28];

  v3[2](v3);
}

uint64_t sub_B17C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_B18C(uint64_t a1)
{
}

void sub_B194(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(_BYTE *)(a1 + 120) || *(_BYTE *)(a1 + 121)) {
    [*(id *)(a1 + 32) decrementPendingReadReceiptFromStorageCount];
  }
  id v4 = [*(id *)(a1 + 40) isEqualToString:*(void *)(a1 + 48)];
  int v5 = (int)v4;
  if (IMOSLoggingEnabled(v4, v6))
  {
    uint64_t v7 = OSLogHandleForIMEventCategory("MessageService");
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void **)(a1 + 40);
      uint64_t v10 = *(void *)(a1 + 56);
      uint64_t v11 = *(void *)(a1 + 64);
      uint64_t v12 = @"NO";
      if (v5) {
        uint64_t v12 = @"YES";
      }
      int v39 = 138413058;
      uint64_t v40 = v10;
      __int16 v41 = 2112;
      uint64_t v42 = v9;
      __int16 v43 = 2112;
      uint64_t v44 = v11;
      __int16 v45 = 2112;
      v46 = v12;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_INFO,  "Received read receipt for: %@   from: %@   token: %@  from me: %@",  (uint8_t *)&v39,  0x2Au);
    }
  }

  [*(id *)(a1 + 32) _logLocalInfo];
  uint64_t v13 = *(void **)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate __im_iMessageDateFromTimeStamp:]( &OBJC_CLASS___NSDate,  "__im_iMessageDateFromTimeStamp:",  *(void *)(a1 + 72)));
  if (v5)
  {
    [v13 didReceiveMessageReadForMessageID:v14 date:v15 completionBlock:0];
  }

  else
  {
    [v13 didReceiveMessageReadReceiptForMessageID:v14 date:v15 completionBlock:0];

    __int16 v16 = (void *)objc_claimAutoreleasedReturnValue(+[IMDChatRegistry sharedInstance](&OBJC_CLASS___IMDChatRegistry, "sharedInstance"));
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _stripFZIDPrefix]);
    unsigned __int8 v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) account]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v16 existingChatForID:v17 account:v18]);

    if (v15 && *(void *)(a1 + 80))
    {
      if (IMOSLoggingEnabled(v19, v20))
      {
        uint64_t v21 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
        uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          uint64_t v23 = *(void *)(a1 + 80);
          int v39 = 138412546;
          uint64_t v40 = v23;
          __int16 v41 = 2112;
          uint64_t v42 = v15;
          _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_INFO,  "About to update last active device on getting a read receipt to %@ for chat %@",  (uint8_t *)&v39,  0x16u);
        }
      }

      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deliveryController]);
      uint64_t v25 = *(void *)(a1 + 80);
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _stripFZIDPrefix]);
      [v24 updateLatestActiveDestination:v25 ForHandle:v26 incomingType:1];

      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deliveryController]);
      uint64_t v28 = IMSingleObjectArray(*(void *)(a1 + 40));
      int v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
      [v27 noteRecentMessageForPeople:v29];
    }
  }

  uint64_t v30 = *(void **)(a1 + 32);
  uint64_t v31 = *(void *)(a1 + 80);
  uint64_t v32 = *(void *)(a1 + 88);
  uint64_t v33 = *(void *)(a1 + 48);
  uint64_t v34 = *(void *)(a1 + 56);
  uint64_t v35 = *(void *)(a1 + 96);
  uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 104) account]);
  [v30 sendDeliveryReceiptForMessageID:v34 toID:v31 deliveryContext:v32 needsDeliveryReceipt:v35 callerID:v33 account:v36];

  if (*(_BYTE *)(a1 + 121)) {
    [*(id *)(a1 + 32) noteLastItemProcessed];
  }
  uint64_t v37 = *(void *)(*(void *)(a1 + 112) + 8LL);
  uint64_t v38 = *(void **)(v37 + 40);
  *(void *)(v37 + 40) = 0LL;

  if (v3) {
    v3[2](v3);
  }
}

void sub_B9F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) isEqualToString:*(void *)(a1 + 40)];
  int v5 = (int)v4;
  if (IMOSLoggingEnabled(v4, v6))
  {
    uint64_t v7 = OSLogHandleForIMEventCategory("MessageService");
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(void *)(a1 + 48);
      uint64_t v11 = *(void *)(a1 + 56);
      uint64_t v12 = @"NO";
      if (v5) {
        uint64_t v12 = @"YES";
      }
      int v25 = 138413058;
      uint64_t v26 = v10;
      __int16 v27 = 2112;
      uint64_t v28 = v9;
      __int16 v29 = 2112;
      uint64_t v30 = v11;
      __int16 v31 = 2112;
      uint64_t v32 = v12;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_INFO,  "Received played receipt for: %@   from: %@   token: %@  from me: %@",  (uint8_t *)&v25,  0x2Au);
    }
  }

  [*(id *)(a1 + 64) _logLocalInfo];
  uint64_t v13 = *(void **)(a1 + 64);
  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate __im_iMessageDateFromTimeStamp:]( &OBJC_CLASS___NSDate,  "__im_iMessageDateFromTimeStamp:",  *(void *)(a1 + 72)));
  if (v5) {
    [v13 didReceiveMessagePlayedForMessageID:v14 date:v15 completionBlock:v3];
  }
  else {
    [v13 didReceiveMessagePlayedReceiptForMessageID:v14 date:v15 completionBlock:v3];
  }

  __int16 v16 = *(void **)(a1 + 64);
  uint64_t v17 = *(void *)(a1 + 80);
  uint64_t v18 = *(void *)(a1 + 88);
  uint64_t v19 = *(void *)(a1 + 40);
  uint64_t v20 = *(void *)(a1 + 48);
  uint64_t v21 = *(void *)(a1 + 96);
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 104) account]);
  [v16 sendDeliveryReceiptForMessageID:v20 toID:v17 deliveryContext:v18 needsDeliveryReceipt:v21 callerID:v19 account:v22];

  if (*(_BYTE *)(a1 + 120)) {
    [*(id *)(a1 + 64) noteLastItemProcessed];
  }
  uint64_t v23 = *(void *)(*(void *)(a1 + 112) + 8LL);
  uint64_t v24 = *(void **)(v23 + 40);
  *(void *)(v23 + 40) = 0LL;
}

void sub_C0B4(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0xBD24LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_C140(uint64_t a1, void *a2)
{
  id v31 = a2;
  id v3 = [*(id *)(a1 + 32) isEqualToString:*(void *)(a1 + 40)];
  unsigned int v30 = v3;
  if (IMOSLoggingEnabled(v3, v4))
  {
    uint64_t v5 = OSLogHandleForIMEventCategory("MessageService");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v8 = *(void *)(a1 + 48);
      uint64_t v9 = *(void *)(a1 + 56);
      uint64_t v10 = @"NO";
      if (v30) {
        uint64_t v10 = @"YES";
      }
      *(_DWORD *)buf = 138413058;
      uint64_t v34 = v8;
      __int16 v35 = 2112;
      uint64_t v36 = v7;
      __int16 v37 = 2112;
      uint64_t v38 = v9;
      __int16 v39 = 2112;
      uint64_t v40 = v10;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_INFO,  "Received saved receipt for: %@   from: %@   token: %@  from me: %@",  buf,  0x2Au);
    }
  }

  [*(id *)(a1 + 64) _logLocalInfo];
  if ([*(id *)(a1 + 72) count])
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) groupController]);
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue( [v11 chatForGroupMessagePayload:*(void *)(a1 + 72) fromIdentifier:*(void *)(a1 + 32) toIdentifier:*(void *)(a1 + 40)]);
  }

  else
  {
    uint64_t v32 = 0LL;
  }

  uint64_t v28 = *(void *)(a1 + 48);
  __int16 v29 = *(void **)(a1 + 64);
  id v12 = [*(id *)(a1 + 80) integerValue];
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v32 chatIdentifier]);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate __im_iMessageDateFromTimeStamp:]( &OBJC_CLASS___NSDate,  "__im_iMessageDateFromTimeStamp:",  *(void *)(a1 + 88)));
  __int16 v16 = *(void **)(a1 + 64);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 96) account]);
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v16 imdAccountForIDSAccount:v17]);
  [v29 didReceiveMessageSavedForMessageID:v28 ofType:v12 forChat:v13 fromHandle:v14 fromMe:v30 date:v15 account:v18 completionBlock:v31];

  uint64_t v19 = *(void **)(a1 + 64);
  uint64_t v20 = *(void *)(a1 + 48);
  uint64_t v21 = *(void *)(a1 + 104);
  uint64_t v22 = *(void *)(a1 + 112);
  uint64_t v23 = *(void *)(a1 + 120);
  uint64_t v24 = *(void *)(a1 + 40);
  int v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 96) account]);
  [v19 sendDeliveryReceiptForMessageID:v20 toID:v21 deliveryContext:v22 needsDeliveryReceipt:v23 callerID:v24 account:v25];

  if (*(_BYTE *)(a1 + 136)) {
    [*(id *)(a1 + 64) noteLastItemProcessed];
  }
  uint64_t v26 = *(void *)(*(void *)(a1 + 128) + 8LL);
  __int16 v27 = *(void **)(v26 + 40);
  *(void *)(v26 + 40) = 0LL;
}

LABEL_65:
}

void sub_DA90(uint64_t a1, uint64_t a2)
{
  if (IMOSLoggingEnabled(a1, a2))
  {
    uint64_t v3 = OSLogHandleForIMEventCategory("MessageService");
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_INFO, " ** Sending decryption failure", buf, 2u);
    }
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deliveryController]);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) idsAccountForURI:v7 IDSServiceName:@"com.apple.madrid"]);
  [v5 sendMessageError:200 toToken:v8 toID:v6 toGroup:0 fromID:v7 fromAccount:v9 forMessageID:*(void *)(a1 + 64) completionBlock:&stru_D58E8];
}

void sub_DB9C(id a1)
{
  off_E32A8 = (_UNKNOWN *)IMWeakLinkSymbol("PLLogRegisteredEvent", @"PowerLog");
}

void sub_DBC8(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v267 = a2;
  id v276 = a3;
  id v269 = a4;
  id v270 = a5;
  id v278 = a6;
  id v13 = a7;
  uint64_t v328 = 0LL;
  v329 = &v328;
  uint64_t v330 = 0x3032000000LL;
  v331 = sub_B17C;
  v332 = sub_B18C;
  id v333 = 0LL;
  id v333 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _stripFZIDPrefix]);
  id v275 = *(id *)(a1 + 40);
  if (v276
    || *(_BYTE *)(a1 + 152)
    || (unint64_t)[v278 count] < 3
    || (id v14 = [*(id *)(a1 + 48) _isFromLinkedID:*(void *)(a1 + 56) fromID:*(void *)(a1 + 32)],
        !(_DWORD)v14))
  {
    if (![v13 count])
    {
      __int16 v45 = -[NSAttributedString initWithString:]( objc_alloc(&OBJC_CLASS___NSAttributedString),  "initWithString:",  @" ");
      v272 = v45;
      id v242 = 0LL;
      uint64_t v243 = 0LL;
      v273 = 0LL;
      id v47 = 0LL;
      v260 = 0LL;
      v261 = 0LL;
      v271 = 0LL;
      v277 = 0LL;
      v262 = 0LL;
      v263 = 0LL;
      v258 = 0LL;
      v259 = 0LL;
      id v240 = 0LL;
      id v241 = 0LL;
      v265 = 0LL;
      v266 = 0LL;
      id v244 = 0LL;
      unsigned __int8 v245 = 0;
      unsigned __int8 v246 = 0;
      v268 = 0LL;
      unsigned __int8 v248 = 0;
      unsigned int v250 = 0;
      unsigned int v252 = 0;
      unsigned int v254 = 0;
      BOOL v48 = 0;
      v264 = 0LL;
      uint64_t v19 = 0LL;
      id v21 = &dword_0 + 1;
      goto LABEL_93;
    }

    v264 = (void *)objc_claimAutoreleasedReturnValue([v13 _stringForKey:@"x"]);
    v266 = (void *)objc_claimAutoreleasedReturnValue([v13 _stringForKey:@"s"]);
    v259 = (void *)objc_claimAutoreleasedReturnValue([v13 _stringForKey:@"t"]);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v13 _numberForKey:@"u"]);
    id v21 = [v20 BOOLValue];

    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v13 _numberForKey:@"a"]);
    unsigned int v254 = [v22 BOOLValue];

    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v13 _numberForKey:@"ar"]);
    unsigned int v252 = [v23 BOOLValue];

    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v13 _numberForKey:@"e"]);
    unsigned int v250 = [v24 BOOLValue];

    int v25 = (void *)objc_claimAutoreleasedReturnValue([v13 _numberForKey:@"sos"]);
    unsigned __int8 v248 = [v25 BOOLValue];

    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v13 _numberForKey:@"c"]);
    unsigned __int8 v246 = [v26 BOOLValue];

    __int16 v27 = (void *)objc_claimAutoreleasedReturnValue(+[IMFeatureFlags sharedFeatureFlags](&OBJC_CLASS___IMFeatureFlags, "sharedFeatureFlags"));
    unsigned int v28 = [v27 isBIAEnabled];

    if (v28
      && (__int16 v29 = (void *)objc_claimAutoreleasedReturnValue([v13 _numberForKey:@"bia"]),
          unsigned int v30 = [v29 BOOLValue],
          v29,
          v30))
    {
      v263 = (void *)objc_claimAutoreleasedReturnValue([v13 _stringForKey:@"brid"]);
      BYTE4(v243) = 1;
    }

    else
    {
      v263 = 0LL;
      BYTE4(v243) = 0;
    }

    if ((IMStringIsBusinessID(*(void *)(a1 + 56)) & 1) != 0
      || (id v31 = (void *)objc_claimAutoreleasedReturnValue([v13 _stringForKey:@"m"]),
          (v268 = v31) == 0LL))
    {
      unsigned __int8 v245 = 0;
      v268 = 0LL;
    }

    else
    {
      uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v31 componentsSeparatedByString:@";"]);
      unsigned __int8 v245 = [*(id *)(a1 + 48) _amIMentioned:*(void *)(a1 + 56) inMentions:v32];
    }

    v262 = (void *)objc_claimAutoreleasedReturnValue([v13 _stringForKey:@"tg"]);
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v13 _numberForKey:@"ms"]);
    id v244 = [v33 unsignedIntegerValue];

    v265 = (void *)objc_claimAutoreleasedReturnValue([v13 _stringForKey:@"amk"]);
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v13 _numberForKey:@"amt"]);
    id v242 = [v34 longLongValue];

    __int16 v35 = (void *)objc_claimAutoreleasedReturnValue([v13 _numberForKey:@"amrlc"]);
    id v241 = [v35 integerValue];

    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v13 _numberForKey:@"amrln"]);
    id v240 = [v36 integerValue];

    v258 = (void *)objc_claimAutoreleasedReturnValue([v13 _stringForKey:@"ame"]);
    v261 = (void *)objc_claimAutoreleasedReturnValue([v13 _dataForKey:@"sld"]);
    v277 = (void *)objc_claimAutoreleasedReturnValue([v13 _stringForKey:@"bid"]);
    __int16 v37 = (void *)objc_claimAutoreleasedReturnValue([v13 _dataForKey:@"bp"]);
    v271 = (void *)objc_claimAutoreleasedReturnValue([v37 _FTOptionallyDecompressData]);

    uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v13 _numberForKey:@"hn"]);
    if ([v38 BOOLValue])
    {
      int IsBusinessID = IMStringIsBusinessID(*(void *)(a1 + 32));

      if (IsBusinessID)
      {
        if (IMOSLoggingEnabled(v40, v41))
        {
          uint64_t v42 = OSLogHandleForIMEventCategory("MessageService");
          __int16 v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
          if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
          {
            uint64_t v44 = *(void **)(a1 + 64);
            *(_DWORD *)buf = 138412290;
            id v336 = v44;
            _os_log_impl( &dword_0,  v43,  OS_LOG_TYPE_INFO,  "Not displaying notification for message with ID %@",  buf,  0xCu);
          }
        }

        LOBYTE(v243) = 1;
LABEL_31:
        id v49 = [v277 length];
        if (v49 || (id v49 = [v271 length]) != 0)
        {
          if (IMOSLoggingEnabled(v49, v50))
          {
            uint64_t v51 = OSLogHandleForIMEventCategory("MessageService");
            uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
            if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
            {
              __int16 v53 = *(void **)(a1 + 64);
              id v54 = [v271 length];
              *(_DWORD *)buf = 138412802;
              id v336 = v53;
              __int16 v337 = 2112;
              id v338 = v277;
              __int16 v339 = 2048;
              id v340 = v54;
              _os_log_impl( &dword_0,  v52,  OS_LOG_TYPE_INFO,  "Received a message: %@ with balloonBundleID: %@ and payload: %lu",  buf,  0x20u);
            }
          }
        }

        v55 = (void *)objc_claimAutoreleasedReturnValue([v13 _numberForKey:@"oe"]);
        v56 = v55;
        if (v55)
        {
          id v47 = v55;
        }

        else
        {
          id v47 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) originalTimestamp]);
        }

        unsigned int v57 = [*(id *)(a1 + 48) _shouldAdjustTimestampOfResentMessages];
        if (v47) {
          unsigned int v58 = v57;
        }
        else {
          unsigned int v58 = 0;
        }
        if (v58 == 1)
        {
          id v59 = [*(id *)(a1 + 48) _originalTimestampWithinAcceptableWindow:v47 timestamp:v275];
          if (!(_DWORD)v59)
          {
            if (IMOSLoggingEnabled(v59, v60))
            {
              uint64_t v85 = OSLogHandleForIMFoundationCategory("MessageService");
              v86 = (os_log_s *)objc_claimAutoreleasedReturnValue(v85);
              if (os_log_type_enabled(v86, OS_LOG_TYPE_INFO))
              {
                v87 = *(void **)(a1 + 64);
                [*(id *)(a1 + 48) _messageRetryTimeout];
                v88 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
                *(_DWORD *)buf = 138413058;
                id v336 = v87;
                __int16 v337 = 2112;
                id v338 = v47;
                __int16 v339 = 2112;
                id v340 = v275;
                __int16 v341 = 2112;
                id v342 = v88;
                _os_log_impl( &dword_0,  v86,  OS_LOG_TYPE_INFO,  "Incoming message with guid %@ has original timestamp outside the acceptable window. Dropping this mess age. originalTimestamp: %@ timestamp: %@ timeoutWindow: %@",  buf,  0x2Au);
              }
            }

            [*(id *)(a1 + 80) sendManualAckForMessageWithContext:*(void *)(a1 + 72)];
            v89 = *(void **)(a1 + 48);
            v90 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) service]);
            [v89 _sendCertifiedDeliveryReceiptIfPossible:v90 messageContext:*(void *)(a1 + 72) guid:*(void *)(a1 + 64) messageWasStored:1 needsDeliveryReceipt:0 failureReason:0];

            v260 = 0LL;
            uint64_t v19 = 0LL;
            uint64_t v91 = *(void *)(*(void *)(a1 + 144) + 8LL);
            v272 = 0LL;
            v274 = *(void **)(v91 + 40);
            *(void *)(v91 + 40) = 0LL;

            goto LABEL_134;
          }

          if (IMOSLoggingEnabled(v59, v60))
          {
            uint64_t v61 = OSLogHandleForIMFoundationCategory("MessageService");
            v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
            if (os_log_type_enabled(v62, OS_LOG_TYPE_INFO))
            {
              v63 = *(void **)(a1 + 64);
              *(_DWORD *)buf = 138412802;
              id v336 = v275;
              __int16 v337 = 2112;
              id v338 = v47;
              __int16 v339 = 2112;
              id v340 = v63;
              _os_log_impl( &dword_0,  v62,  OS_LOG_TYPE_INFO,  "Adjusting timestamp of incoming message to original timestamp. Timestamp: %@ Original timestamp: %@ guid: %@",  buf,  0x20u);
            }
          }

          id v64 = v47;

          id v275 = v64;
        }

        v65 = (void *)objc_claimAutoreleasedReturnValue([v277 componentsSeparatedByString:@":"]);
        v273 = (void *)objc_claimAutoreleasedReturnValue([v65 lastObject]);

        v66 = (void *)objc_claimAutoreleasedReturnValue( +[IDSServerBag sharedInstanceForBagType:]( &OBJC_CLASS___IDSServerBag,  "sharedInstanceForBagType:",  1LL));
        int v67 = IMSharedHelperAppBlocklisted(v273, v66);

        if (v67)
        {
          if (IMOSLoggingEnabled(v68, v69))
          {
            uint64_t v70 = OSLogHandleForIMEventCategory("MessageService");
            v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
            if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              id v336 = v277;
              _os_log_impl( &dword_0,  v71,  OS_LOG_TYPE_INFO,  "Banned app message due to server bag key. Dropping message with ID %@",  buf,  0xCu);
            }
          }

          if (*(_BYTE *)(a1 + 153)) {
            [*(id *)(a1 + 48) noteLastItemProcessed];
          }
          uint64_t v72 = *(void *)(*(void *)(a1 + 144) + 8LL);
          v73 = *(void **)(v72 + 40);
          *(void *)(v72 + 40) = 0LL;

          v260 = 0LL;
          v272 = 0LL;
          uint64_t v19 = 0LL;
          goto LABEL_133;
        }

        v260 = (void *)objc_claimAutoreleasedReturnValue([v13 _stringForKey:@"iid"]);
        v256 = (void *)objc_claimAutoreleasedReturnValue([v13 _stringForKey:@"ix"]);
        v74 = (void *)objc_claimAutoreleasedReturnValue([v13 _dataForKey:@"tic"]);
        uint64_t v236 = objc_claimAutoreleasedReturnValue([v74 _FTOptionallyDecompressData]);

        v75 = (void *)objc_claimAutoreleasedReturnValue([v13 _dataForKey:@"ati"]);
        v238 = (void *)objc_claimAutoreleasedReturnValue([v75 _FTOptionallyDecompressData]);

        uint64_t v76 = IMGetAttributedInfoArrayAllowlistedClasses();
        v237 = (void *)objc_claimAutoreleasedReturnValue(v76);
        if (IMOSLoggingEnabled(v237, v77))
        {
          uint64_t v78 = OSLogHandleForIMFoundationCategory("MessageService");
          v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
          if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( &dword_0,  v79,  OS_LOG_TYPE_INFO,  "Calling IMUnarchiverDecoder decoder to decode attributionInfoData",  buf,  2u);
          }
        }

        id v80 = +[IMUnarchiverDecoder decodeEncodedDataSecurely:ofClass:includesAllowlistedClasses:]( &OBJC_CLASS___IMUnarchiverDecoder,  "decodeEncodedDataSecurely:ofClass:includesAllowlistedClasses:",  v238,  objc_opt_class(&OBJC_CLASS___NSArray),  v237);
        v81 = (void *)objc_claimAutoreleasedReturnValue(v80);
        uint64_t v82 = objc_opt_class(&OBJC_CLASS___NSArray);
        uint64_t isKindOfClass = objc_opt_isKindOfClass(v81, v82);
        if ((isKindOfClass & 1) != 0)
        {
          uint64_t isKindOfClass = v81;
          v273 = (void *)isKindOfClass;
        }

        else
        {
          v273 = 0LL;
        }

        uint64_t v92 = IMOSLoggingEnabled(isKindOfClass, v84);
        if ((_DWORD)v92)
        {
          uint64_t v94 = OSLogHandleForIMFoundationCategory("MessageService");
          v95 = (os_log_s *)objc_claimAutoreleasedReturnValue(v94);
          if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v96 = MarcoLoggingStringForMessageData(v13);
            id v97 = (id)objc_claimAutoreleasedReturnValue(v96);
            *(_DWORD *)buf = 138413058;
            id v336 = v97;
            __int16 v337 = 2112;
            id v338 = v269;
            __int16 v339 = 2112;
            id v340 = v270;
            __int16 v341 = 2112;
            id v342 = v278;
            _os_log_impl( &dword_0,  v95,  OS_LOG_TYPE_DEBUG,  "Received message dictionary: %@  groupID: %@   name: %@    participants: %@",  buf,  0x2Au);
          }
        }

        if (IMOSLoggingEnabled(v92, v93))
        {
          uint64_t v98 = OSLogHandleForIMFoundationCategory("MessageService");
          v99 = (os_log_s *)objc_claimAutoreleasedReturnValue(v98);
          if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v100 = MarcoLoggingStringForMessageData(v264);
            id v101 = (id)objc_claimAutoreleasedReturnValue(v100);
            uint64_t v102 = MarcoLoggingStringForMessageData(v259);
            id v103 = (id)objc_claimAutoreleasedReturnValue(v102);
            uint64_t v104 = MarcoLoggingStringForMessageData(v256);
            id v105 = (id)objc_claimAutoreleasedReturnValue(v104);
            v106 = v105;
            v107 = (void *)v329[5];
            v108 = @"YES";
            if (!*(_BYTE *)(a1 + 152)) {
              v108 = @"NO";
            }
            *(_DWORD *)buf = 138414082;
            id v336 = v101;
            __int16 v337 = 2112;
            id v338 = v103;
            __int16 v339 = 2112;
            id v340 = v105;
            __int16 v341 = 2112;
            id v342 = v107;
            __int16 v343 = 2112;
            id v344 = v278;
            __int16 v345 = 2112;
            v346 = v108;
            __int16 v347 = 2112;
            v348 = v266;
            __int16 v349 = 2112;
            id v350 = v278;
            _os_log_impl( &dword_0,  v99,  OS_LOG_TYPE_DEBUG,  "Received xhtml: %@ plain: %@ AuxXHTML: %@ from: %@   to: %@  (from me: %@)  subject: %@  participants: %@",  buf,  0x52u);
          }
        }

        if ([v256 length])
        {
          uint64_t v19 = -[MessageToSuperParserContext initWithContent:]( objc_alloc(&OBJC_CLASS___MessageToSuperParserContext),  "initWithContent:",  v256);
          v109 = (void *)objc_claimAutoreleasedReturnValue(+[IMXMLParser sharedInstance](&OBJC_CLASS___IMXMLParser, "sharedInstance"));
          [v109 parseContext:v19];

          v272 = (NSAttributedString *)objc_claimAutoreleasedReturnValue(-[MessageToSuperParserContext body](v19, "body"));
          if (IMOSLoggingEnabled(v272, v110))
          {
            uint64_t v111 = OSLogHandleForIMFoundationCategory("MessageService");
            v112 = (os_log_s *)objc_claimAutoreleasedReturnValue(v111);
            if (os_log_type_enabled(v112, OS_LOG_TYPE_DEBUG))
            {
              v113 = (void *)objc_claimAutoreleasedReturnValue(-[NSAttributedString string](v272, "string"));
              uint64_t v114 = MarcoLoggingStringForMessageData(v113);
              id v115 = (id)objc_claimAutoreleasedReturnValue(v114);
              *(_DWORD *)buf = 138412290;
              id v336 = v115;
              _os_log_impl(&dword_0, v112, OS_LOG_TYPE_DEBUG, "      Aux xhtml parsed body: %@", buf, 0xCu);
            }
          }
        }

        else
        {
          if (!v264)
          {
            if (v259)
            {
              v155 = -[NSAttributedString initWithString:]( objc_alloc(&OBJC_CLASS___NSAttributedString),  "initWithString:",  v259);
              v272 = (NSAttributedString *)objc_claimAutoreleasedReturnValue( -[NSAttributedString __im_attributedStringByAssigningMessagePartNumbers]( v155,  "__im_attributedStringByAssigningMessagePartNumbers"));
              if (IMOSLoggingEnabled(v272, v156))
              {
                uint64_t v157 = OSLogHandleForIMFoundationCategory("MessageService");
                v158 = (os_log_s *)objc_claimAutoreleasedReturnValue(v157);
                if (os_log_type_enabled(v158, OS_LOG_TYPE_DEBUG))
                {
                  v159 = (void *)objc_claimAutoreleasedReturnValue(-[NSAttributedString string](v272, "string"));
                  uint64_t v160 = MarcoLoggingStringForMessageData(v159);
                  id v161 = (id)objc_claimAutoreleasedReturnValue(v160);
                  *(_DWORD *)buf = 138412290;
                  id v336 = v161;
                  _os_log_impl(&dword_0, v158, OS_LOG_TYPE_DEBUG, "      plain parsed body: %@", buf, 0xCu);
                }
              }

              BOOL v48 = -[NSAttributedString length](v272, "length") != 0;
            }

            else
            {
              BOOL v48 = 0;
              v272 = 0LL;
            }

            uint64_t v19 = 0LL;
            goto LABEL_92;
          }

          uint64_t v19 = -[MessageToSuperParserContext initWithContent:]( objc_alloc(&OBJC_CLASS___MessageToSuperParserContext),  "initWithContent:",  v264);
          v116 = (void *)objc_claimAutoreleasedReturnValue(+[IMXMLParser sharedInstance](&OBJC_CLASS___IMXMLParser, "sharedInstance"));
          [v116 parseContext:v19];

          v272 = (NSAttributedString *)objc_claimAutoreleasedReturnValue(-[MessageToSuperParserContext body](v19, "body"));
          if (IMOSLoggingEnabled(v272, v117))
          {
            uint64_t v118 = OSLogHandleForIMFoundationCategory("MessageService");
            v119 = (os_log_s *)objc_claimAutoreleasedReturnValue(v118);
            if (os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
            {
              v120 = (void *)objc_claimAutoreleasedReturnValue(-[NSAttributedString string](v272, "string"));
              uint64_t v121 = MarcoLoggingStringForMessageData(v120);
              id v122 = (id)objc_claimAutoreleasedReturnValue(v121);
              *(_DWORD *)buf = 138412290;
              id v336 = v122;
              _os_log_impl(&dword_0, v119, OS_LOG_TYPE_DEBUG, "      xhtml parsed body: %@", buf, 0xCu);
            }
          }
        }

        BOOL v48 = -[NSAttributedString length](v272, "length") != 0;
LABEL_92:

        id v47 = (id)v236;
LABEL_93:
        if (IMOSLoggingEnabled(v45, v46))
        {
          uint64_t v123 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
          v124 = (os_log_s *)objc_claimAutoreleasedReturnValue(v123);
          if (os_log_type_enabled(v124, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            id v336 = v278;
            _os_log_impl(&dword_0, v124, OS_LOG_TYPE_INFO, "Participants: %@", buf, 0xCu);
          }
        }

        id v257 = (id)objc_claimAutoreleasedReturnValue( +[MessageGroupController memberDisplayIDsFromParticipants:toIdentifier:]( &OBJC_CLASS___MessageGroupController,  "memberDisplayIDsFromParticipants:toIdentifier:",  v278,  *(void *)(a1 + 56)));
        id v125 = [*(id *)(a1 + 48) _shouldIgnoreMessageFromSender:*(void *)(a1 + 32) balloonBID:v277 fromMe:*(unsigned __int8 *)(a1 + 152)];
        if ((_DWORD)v125)
        {
          if (IMOSLoggingEnabled(v125, v126))
          {
            uint64_t v127 = OSLogHandleForIMFoundationCategory("Warning");
            v128 = (os_log_s *)objc_claimAutoreleasedReturnValue(v127);
            if (os_log_type_enabled(v128, OS_LOG_TYPE_INFO))
            {
              v129 = *(void **)(a1 + 32);
              v130 = *(void **)(a1 + 56);
              int v131 = *(unsigned __int8 *)(a1 + 152);
              *(_DWORD *)buf = 138413058;
              id v336 = v277;
              __int16 v337 = 2112;
              id v338 = v129;
              __int16 v339 = 2112;
              id v340 = v130;
              __int16 v341 = 1024;
              LODWORD(v342) = v131;
              _os_log_impl( &dword_0,  v128,  OS_LOG_TYPE_INFO,  "   Ignoring message for App: %@ from non-business endpoint :%@  to: %@ fromMe: %d",  buf,  0x26u);
            }
          }

          if (!*(_BYTE *)(a1 + 153)) {
            goto LABEL_131;
          }
          goto LABEL_130;
        }

        id v132 = [*(id *)(a1 + 48) _isAllowlistedUnencryptedSender:*(void *)(a1 + 32)];
        int v134 = !v48;
        if (*(_BYTE *)(a1 + 154)) {
          int v134 = 1;
        }
        if (((v134 | v132) & 1) != 0)
        {
          if (v278) {
            char v135 = (char)v21;
          }
          else {
            char v135 = 1;
          }
          if ((v135 & 1) != 0
            || (id v136 = [v278 containsObject:*(void *)(a1 + 32)], (v136 & 1) != 0))
          {
            id v138 = [v257 count];
            BOOL v239 = (unint64_t)v138 > 1;
            if (![v257 count] && objc_msgSend(v278, "count") == (char *)&dword_0 + 1)
            {
              id v139 = v278;

              id v257 = v139;
            }

            BYTE2(v235) = v246;
            BYTE1(v235) = v248;
            LOBYTE(v235) = v245;
            id v140 = objc_msgSend( *(id *)(a1 + 48),  "_computeFlagsForIncomingMessage:isFromMe:unfinished:isAudioMessage:isAutoReply:isExpirable:messageS ource:participants:hasUnseenMention:isSOS:isCritical:",  0,  *(unsigned __int8 *)(a1 + 152),  v21,  v254,  v252,  v250,  v244,  v278,  v235);
            if (!-[NSAttributedString length](v272, "length"))
            {
              v141 = -[NSAttributedString initWithString:]( objc_alloc(&OBJC_CLASS___NSAttributedString),  "initWithString:",  &stru_D8640);

              v272 = v141;
            }

            int v142 = *(unsigned __int8 *)(a1 + 152);
            if (*(_BYTE *)(a1 + 152) && (unint64_t)v138 <= 1)
            {
              if (![v257 count])
              {
                uint64_t v162 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _stripFZIDPrefix]);
                v143 = (void *)v329[5];
                v329[5] = v162;
                goto LABEL_149;
              }

              int v142 = *(unsigned __int8 *)(a1 + 152);
            }

            if (!v142 || (unint64_t)v138 > 1 || ![v257 count])
            {
LABEL_150:
              if (*(void *)(a1 + 32))
              {
                v163 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) deliveryController]);
                uint64_t v334 = *(void *)(a1 + 32);
                v164 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v334,  1LL));
                [v163 noteRecentMessageForPeople:v164];
              }

              uint64_t v165 = objc_claimAutoreleasedReturnValue([v13 _dataForKey:@"msi"]);
              v249 = (void *)v165;
              if (v165)
              {
                id v251 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithMessageSummaryInfoData:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithMessageSummaryInfoData:",  v165));
              }

              else
              {
                id v251 = 0LL;
              }

              if (v265 && [v265 length])
              {
                id v166 = objc_alloc(&OBJC_CLASS___IMAssociatedMessageItem);
                uint64_t v167 = v329[5];
                v168 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate __im_iMessageDateFromTimeStamp:]( &OBJC_CLASS___NSDate,  "__im_iMessageDateFromTimeStamp:",  v275));
                v169 = (void *)objc_claimAutoreleasedReturnValue(-[MessageToSuperParserContext fileTransferGUIDs](v19, "fileTransferGUIDs"));
                id v170 = objc_msgSend( v166,  "initWithSender:time:body:attributes:fileTransferGUIDs:flags:error:guid:associatedMessageGUID:as sociatedMessageType:associatedMessageRange:associatedMessageEmoji:messageSummaryInfo:threadIdentifier:",  v167,  v168,  v272,  0,  v169,  v140,  0,  *(void *)(a1 + 64),  v265,  v242,  v241,  v240,  v258,  v251,  v262);

                if (!IMOSLoggingEnabled(v171, v172))
                {
LABEL_172:
                  v181 = *(void **)(a1 + 48);
                  v182 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) account]);
                  v183 = (void *)objc_claimAutoreleasedReturnValue([v181 imdAccountForIDSAccount:v182]);

                  v184 = (void *)objc_claimAutoreleasedReturnValue([v183 accountID]);
                  [v170 setAccountID:v184];

                  [v170 setBalloonBundleID:v277];
                  v253 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) _stripFZIDPrefix]);
                  id v185 = [v170 setDestinationCallerID:v253];
                  if (IMOSLoggingEnabled(v185, v186))
                  {
                    uint64_t v187 = OSLogHandleForIMFoundationCategory("MessageService");
                    v188 = (os_log_s *)objc_claimAutoreleasedReturnValue(v187);
                    if (os_log_type_enabled(v188, OS_LOG_TYPE_INFO))
                    {
                      id v189 = (id)objc_claimAutoreleasedReturnValue([v170 guid]);
                      *(_DWORD *)buf = 138412546;
                      id v336 = v253;
                      __int16 v337 = 2112;
                      id v338 = v189;
                      _os_log_impl( &dword_0,  v188,  OS_LOG_TYPE_INFO,  "Setting destination callerID: %@ for guid: %@",  buf,  0x16u);
                    }
                  }

                  v255 = (void *)objc_claimAutoreleasedReturnValue([v13 _stringForKey:@"r"]);
                  id v190 = [v255 length];
                  if (v190)
                  {
                    if (IMOSLoggingEnabled(v190, v191))
                    {
                      uint64_t v192 = OSLogHandleForIMFoundationCategory("MessageService");
                      v193 = (os_log_s *)objc_claimAutoreleasedReturnValue(v192);
                      if (os_log_type_enabled(v193, OS_LOG_TYPE_INFO))
                      {
                        id v194 = (id)objc_claimAutoreleasedReturnValue([v170 guid]);
                        *(_DWORD *)buf = 138412546;
                        id v336 = v255;
                        __int16 v337 = 2112;
                        id v338 = v194;
                        _os_log_impl( &dword_0,  v193,  OS_LOG_TYPE_INFO,  "Setting replyToGUID %@ for message %@",  buf,  0x16u);
                      }
                    }

                    [v170 setReplyToGUID:v255];
                  }

                  if (v271)
                  {
                    v195 = (void *)objc_claimAutoreleasedReturnValue([v271 _FTOptionallyDecompressData]);
                    id v327 = 0LL;
                    uint64_t v196 = IMSharedHelperPayloadFromCombinedPluginPayloadData(v195, &v327);
                    v247 = (void *)objc_claimAutoreleasedReturnValue(v196);
                    id v197 = v327;

                    [v170 setPayloadData:v247];
                    id v198 = [v197 count];
                    if (v198)
                    {
                      v200 = (void *)objc_claimAutoreleasedReturnValue( +[IMDFileTransferCenter sharedInstance]( &OBJC_CLASS___IMDFileTransferCenter,  "sharedInstance"));
                      v201 = (void *)objc_claimAutoreleasedReturnValue([v170 guid]);
                      v202 = (void *)objc_claimAutoreleasedReturnValue( [v200 guidsForStoredAttachmentPayloadData:v197 messageGUID:v201]);

                      [v170 setFileTransferGUIDs:v202];
                    }

                    if (IMOSLoggingEnabled(v198, v199))
                    {
                      uint64_t v203 = OSLogHandleForIMFoundationCategory("MessageService");
                      v204 = (os_log_s *)objc_claimAutoreleasedReturnValue(v203);
                      if (os_log_type_enabled(v204, OS_LOG_TYPE_INFO))
                      {
                        id v205 = (id)objc_claimAutoreleasedReturnValue([v170 guid]);
                        id v206 = (id)objc_claimAutoreleasedReturnValue([v170 fileTransferGUIDs]);
                        *(_DWORD *)buf = 138412546;
                        id v336 = v205;
                        __int16 v337 = 2112;
                        id v338 = v206;
                        _os_log_impl( &dword_0,  v204,  OS_LOG_TYPE_INFO,  "%@ Setting payload contained inline. Attachments %@",  buf,  0x16u);
                      }
                    }
                  }

                  [v170 setTypingIndicatorIcon:v47];
                  [v170 setExpressiveSendStyleID:v260];
                  id v207 = [v170 setContactsAvatarRecipeData:v261];
                  if (v266) {
                    id v207 = [v170 setSubject:v266];
                  }
                  uint64_t v209 = IMOSLoggingEnabled(v207, v208);
                  if ((_DWORD)v209)
                  {
                    uint64_t v211 = OSLogHandleForIMFoundationCategory("MessageService");
                    v212 = (os_log_s *)objc_claimAutoreleasedReturnValue(v211);
                    if (os_log_type_enabled(v212, OS_LOG_TYPE_DEBUG))
                    {
                      v213 = (void *)objc_claimAutoreleasedReturnValue([v170 body]);
                      uint64_t v214 = MarcoLoggingStringForMessageData(v213);
                      id v215 = (id)objc_claimAutoreleasedReturnValue(v214);
                      *(_DWORD *)buf = 138412290;
                      id v336 = v215;
                      _os_log_impl(&dword_0, v212, OS_LOG_TYPE_DEBUG, "   Message body: %@", buf, 0xCu);
                    }
                  }

                  uint64_t v216 = IMOSLoggingEnabled(v209, v210);
                  if ((_DWORD)v216)
                  {
                    uint64_t v218 = OSLogHandleForIMFoundationCategory("MessageService");
                    v219 = (os_log_s *)objc_claimAutoreleasedReturnValue(v218);
                    if (os_log_type_enabled(v219, OS_LOG_TYPE_DEBUG))
                    {
                      id v220 = (id)objc_claimAutoreleasedReturnValue([v170 subject]);
                      *(_DWORD *)buf = 138412290;
                      id v336 = v220;
                      _os_log_impl(&dword_0, v219, OS_LOG_TYPE_DEBUG, "   Message subject: %@", buf, 0xCu);
                    }
                  }

                  if (IMOSLoggingEnabled(v216, v217))
                  {
                    uint64_t v221 = OSLogHandleForIMFoundationCategory("MessageService");
                    v222 = (os_log_s *)objc_claimAutoreleasedReturnValue(v221);
                    if (os_log_type_enabled(v222, OS_LOG_TYPE_DEBUG))
                    {
                      id v223 = (id)objc_claimAutoreleasedReturnValue([v170 fileTransferGUIDs]);
                      *(_DWORD *)buf = 138412290;
                      id v336 = v223;
                      _os_log_impl(&dword_0, v222, OS_LOG_TYPE_DEBUG, "   Message transfers: %@", buf, 0xCu);
                    }
                  }

                  v291[0] = _NSConcreteStackBlock;
                  v291[1] = 3221225472LL;
                  v291[2] = sub_100B8;
                  v291[3] = &unk_D59F8;
                  char v317 = *(_BYTE *)(a1 + 153);
                  v291[4] = *(void *)(a1 + 48);
                  id v224 = v13;
                  id v292 = v224;
                  id v293 = v273;
                  id v294 = *(id *)(a1 + 32);
                  id v295 = *(id *)(a1 + 88);
                  id v225 = v170;
                  id v296 = v225;
                  id v297 = *(id *)(a1 + 64);
                  __int16 v318 = *(_WORD *)(a1 + 154);
                  BOOL v319 = v239;
                  id v226 = v183;
                  id v298 = v226;
                  v315 = &v328;
                  id v257 = v257;
                  id v299 = v257;
                  id v300 = *(id *)(a1 + 56);
                  id v301 = v276;
                  id v302 = *(id *)(a1 + 96);
                  id v303 = *(id *)(a1 + 80);
                  id v304 = v275;
                  id v305 = v270;
                  id v306 = v269;
                  char v320 = *(_BYTE *)(a1 + 152);
                  id v307 = v278;
                  char v321 = *(_BYTE *)(a1 + 156);
                  id v308 = *(id *)(a1 + 104);
                  char v322 = *(_BYTE *)(a1 + 157);
                  char v323 = v243;
                  id v227 = *(id *)(a1 + 112);
                  char v324 = *(_BYTE *)(a1 + 158);
                  uint64_t v228 = *(void *)(a1 + 144);
                  id v309 = v227;
                  uint64_t v316 = v228;
                  char v325 = BYTE4(v243);
                  id v310 = v263;
                  id v311 = *(id *)(a1 + 120);
                  char v326 = *(_BYTE *)(a1 + 159);
                  id v312 = *(id *)(a1 + 128);
                  id v313 = *(id *)(a1 + 72);
                  id v314 = *(id *)(a1 + 136);
                  v229 = objc_retainBlock(v291);
                  v230 = (void *)objc_claimAutoreleasedReturnValue([v225 fileTransferGUIDs]);
                  if ([v230 count]) {
                    double v231 = 240.0;
                  }
                  else {
                    double v231 = 45.0;
                  }

                  v232 = *(void **)(a1 + 48);
                  v279[0] = _NSConcreteStackBlock;
                  v279[1] = 3221225472LL;
                  v279[2] = sub_139E4;
                  v279[3] = &unk_D5A98;
                  id v280 = *(id *)(a1 + 64);
                  char v287 = *(_BYTE *)(a1 + 158);
                  v233 = v229;
                  char v288 = *(_BYTE *)(a1 + 153);
                  uint64_t v234 = *(void *)(a1 + 48);
                  id v285 = v233;
                  uint64_t v281 = v234;
                  id v282 = *(id *)(a1 + 32);
                  id v151 = v225;
                  id v283 = v151;
                  id v284 = v224;
                  v286 = &v328;
                  char v289 = *(_BYTE *)(a1 + 157);
                  char v290 = *(_BYTE *)(a1 + 159);
                  [v232 _enqueueBlock:v279 withTimeout:@"reflected message attachment processing" description:v231];

                  goto LABEL_132;
                }

                uint64_t v173 = OSLogHandleForIMFoundationCategory("MessageService");
                v174 = (os_log_s *)objc_claimAutoreleasedReturnValue(v173);
                if (os_log_type_enabled(v174, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 138412290;
                  id v336 = v265;
                  _os_log_impl(&dword_0, v174, OS_LOG_TYPE_INFO, "Received message associated with GUID: %@", buf, 0xCu);
                }
              }

              else
              {
                else {
                  unsigned __int8 v175 = [v277 containsString:IMBalloonPluginIdentifierSurfDeprecated];
                }
                v174 = (os_log_s *)(id)v329[5];
                id v176 = objc_alloc(&OBJC_CLASS___IMMessageItem);
                v177 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate __im_iMessageDateFromTimeStamp:]( &OBJC_CLASS___NSDate,  "__im_iMessageDateFromTimeStamp:",  v275));
                if ((v175 & 1) != 0) {
                  v178 = 0LL;
                }
                else {
                  v178 = (void *)objc_claimAutoreleasedReturnValue(-[MessageToSuperParserContext fileTransferGUIDs](v19, "fileTransferGUIDs"));
                }
                id v170 = [v176 initWithSender:v174 time:v177 body:v272 attributes:0 fileTransferGUIDs:v178 flags:v140 error:0 guid:*(void *)(a1 + 64) threadIdentifier:v262];
                if ((v175 & 1) == 0) {

                }
                [v170 setMessageSummaryInfo:v251];
                v179 = (void *)objc_claimAutoreleasedReturnValue( +[IMFeatureFlags sharedFeatureFlags]( &OBJC_CLASS___IMFeatureFlags,  "sharedFeatureFlags"));
                unsigned int v180 = [v179 isBIAEnabled];

                if (v180) {
                  [v170 setBiaReferenceID:v263];
                }
              }

              goto LABEL_172;
            }

            v143 = (void *)objc_claimAutoreleasedReturnValue([v257 lastObject]);
            uint64_t v144 = objc_claimAutoreleasedReturnValue([v143 _stripFZIDPrefix]);
            v145 = (void *)v329[5];
            v329[5] = v144;

LABEL_149:
            goto LABEL_150;
          }

          if (IMOSLoggingEnabled(v136, v137))
          {
            uint64_t v152 = OSLogHandleForIMFoundationCategory("MessageService");
            v153 = (os_log_s *)objc_claimAutoreleasedReturnValue(v152);
            if (os_log_type_enabled(v153, OS_LOG_TYPE_DEBUG))
            {
              v154 = *(void **)(a1 + 32);
              *(_DWORD *)buf = 138412546;
              id v336 = v154;
              __int16 v337 = 2112;
              id v338 = v278;
              _os_log_impl( &dword_0,  v153,  OS_LOG_TYPE_DEBUG,  "   fromIdentifier: %@  not in participants: %@, bailing",  buf,  0x16u);
            }
          }

          if (!*(_BYTE *)(a1 + 153)) {
            goto LABEL_131;
          }
        }

        else
        {
          if (IMOSLoggingEnabled(v132, v133))
          {
            uint64_t v146 = OSLogHandleForIMFoundationCategory("Warning");
            v147 = (os_log_s *)objc_claimAutoreleasedReturnValue(v146);
            if (os_log_type_enabled(v147, OS_LOG_TYPE_INFO))
            {
              v148 = *(void **)(a1 + 32);
              v149 = *(void **)(a1 + 56);
              *(_DWORD *)buf = 138412546;
              id v336 = v148;
              __int16 v337 = 2112;
              id v338 = v149;
              _os_log_impl( &dword_0,  v147,  OS_LOG_TYPE_INFO,  "   Received a message with content that wasn't encrypted from: %@  to: %@, ignoring",  buf,  0x16u);
            }
          }

          if (!*(_BYTE *)(a1 + 153)) {
            goto LABEL_131;
          }
        }

void sub_FBE4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {

    objc_end_catch();
    JUMPOUT(0xF050LL);
  }

  _Block_object_dispose(&STACK[0x2C8], 8);
  _Unwind_Resume(a1);
}

void sub_100B8(uint64_t a1, void *a2, void *a3, char a4, int a5, void *a6, uint64_t a7, void *a8, void *a9)
{
  id v16 = a2;
  id v17 = a3;
  id v43 = a6;
  id v42 = a8;
  uint64_t v18 = a9;
  if ((a4 & 1) != 0 || (uint64_t IsUnderAutomation = IMSharedHelperIsUnderAutomation(), !(_DWORD)IsUnderAutomation))
  {
    uint64_t v39 = a7;
    uint64_t v41 = v18;
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _dictionaryForKey:@"bpdi"]);
    [*(id *)(a1 + 32) _updateTransfersForAttributionInfoArray:*(void *)(a1 + 48) message:v16];
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v16 messageSummaryInfo]);
    CFMutableDictionaryRef Mutable = (CFMutableDictionaryRef)[v23 mutableCopy];

    if (!Mutable) {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
    id v38 = v17;
    int v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
    -[__CFDictionary setObject:forKey:]( Mutable,  "setObject:forKey:",  v25,  IMMessageSummaryInfoUpdatedDateWithServerTime);

    [v16 setMessageSummaryInfo:Mutable];
    *(void *)buf = 0LL;
    v87 = buf;
    uint64_t v88 = 0x3032000000LL;
    v89 = sub_B17C;
    v90 = sub_B18C;
    id v91 = 0LL;
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) attachmentController]);
    __int16 v27 = (void *)objc_claimAutoreleasedReturnValue([v16 guid]);
    unsigned int v28 = (void *)objc_claimAutoreleasedReturnValue([v16 balloonBundleID]);
    uint64_t v30 = *(void *)(a1 + 56);
    uint64_t v29 = *(void *)(a1 + 64);
    v44[0] = _NSConcreteStackBlock;
    v44[1] = 3221225472LL;
    v44[2] = sub_10630;
    v44[3] = &unk_D59D0;
    id v45 = v16;
    id v31 = v41;
    char v77 = *(_BYTE *)(a1 + 240);
    uint64_t v32 = *(void *)(a1 + 32);
    id v71 = v31;
    uint64_t v46 = v32;
    id v47 = *(id *)(a1 + 72);
    id v48 = *(id *)(a1 + 80);
    char v78 = *(_BYTE *)(a1 + 241);
    id v49 = *(id *)(a1 + 40);
    id v33 = *(id *)(a1 + 56);
    __int16 v79 = *(_WORD *)(a1 + 242);
    id v50 = v33;
    uint64_t v72 = buf;
    id v34 = *(id *)(a1 + 88);
    uint64_t v35 = *(void *)(a1 + 224);
    id v51 = v34;
    uint64_t v73 = v35;
    id v52 = *(id *)(a1 + 96);
    id v53 = *(id *)(a1 + 104);
    id v54 = *(id *)(a1 + 112);
    id v55 = *(id *)(a1 + 120);
    id v56 = *(id *)(a1 + 128);
    id v57 = *(id *)(a1 + 136);
    id v58 = *(id *)(a1 + 144);
    id v59 = *(id *)(a1 + 152);
    char v80 = *(_BYTE *)(a1 + 244);
    id v60 = *(id *)(a1 + 64);
    id v61 = *(id *)(a1 + 160);
    char v81 = *(_BYTE *)(a1 + 245);
    char v82 = a4;
    int v76 = a5;
    id v62 = v43;
    uint64_t v75 = v39;
    id v63 = *(id *)(a1 + 168);
    id v64 = v42;
    __int16 v83 = *(_WORD *)(a1 + 246);
    id v36 = *(id *)(a1 + 176);
    __int16 v84 = *(_WORD *)(a1 + 248);
    uint64_t v37 = *(void *)(a1 + 232);
    id v65 = v36;
    uint64_t v74 = v37;
    id v66 = *(id *)(a1 + 184);
    id v67 = *(id *)(a1 + 192);
    char v85 = *(_BYTE *)(a1 + 250);
    id v68 = *(id *)(a1 + 200);
    id v69 = *(id *)(a1 + 208);
    id v70 = *(id *)(a1 + 216);
    [v26 processMessageAttachmentDictionary:v40 forMessageGUID:v27 balloonBundleID:v28 fromIdentifier:v30 senderToken:v29 withCompletionBlock:v44];

    _Block_object_dispose(buf, 8);
    id v17 = v38;
    uint64_t v18 = (void (**)(void))v41;
  }

  else
  {
    if (IMOSLoggingEnabled(IsUnderAutomation, v20))
    {
      uint64_t v21 = OSLogHandleForIMFoundationCategory("MessageService");
      uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_INFO,  "***************** Attachment download failed. Not persisting message as we are under automation ***************",  buf,  2u);
      }
    }

    if (v18)
    {
      if (*(_BYTE *)(a1 + 240)) {
        [*(id *)(a1 + 32) noteLastItemProcessed];
      }
      v18[2](v18);
    }
  }
}

void sub_10630(uint64_t a1, void *a2, void *a3, char a4)
{
  id v388 = a2;
  id v380 = a3;
  uint64_t v8 = IMOSLoggingEnabled(v380, v7);
  uint64_t v390 = a1;
  if ((_DWORD)v8)
  {
    uint64_t v10 = OSLogHandleForIMFoundationCategory("PayloadAttachments");
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218240;
      *(void *)v419 = [v388 length];
      *(_WORD *)&v419[8] = 2048;
      *(void *)&v419[10] = [v380 count];
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_INFO, "Setting payload to length: %lu with attachments: %lu", buf, 0x16u);
    }
  }

  if ((a4 & 1) != 0)
  {
    if (!v388)
    {
      id v388 = 0LL;
      goto LABEL_31;
    }

    if (IMOSLoggingEnabled(v8, v9))
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory("PayloadAttachments");
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, " Setting message payload downloaded from MMCS", buf, 2u);
      }
    }

    if (![v388 length]
      || ([*(id *)(a1 + 48) setPayloadData:v388], !objc_msgSend(v380, "count")))
    {
LABEL_31:
      if (*(_BYTE *)(a1 + 285)) {
        [*(id *)(a1 + 40) _handleNicknameReceived:*(void *)(a1 + 64) fromIdentifier:*(void *)(a1 + 72) withMessageItem:*(void *)(a1 + 48) isSnapTrustedUser:*(unsigned __int8 *)(a1 + 286)];
      }
      if (*(_BYTE *)(a1 + 287))
      {
        unsigned int v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) chatRegistry]);
        uint64_t v29 = objc_claimAutoreleasedReturnValue([v28 generateUnusedChatIdentifierForGroupChatWithAccount:*(void *)(a1 + 80)]);
        uint64_t v30 = *(void *)(*(void *)(a1 + 248) + 8LL);
        id v31 = *(void **)(v30 + 40);
        *(void *)(v30 + 40) = v29;
      }

      else
      {
        uint64_t v32 = *(void *)(*(void *)(a1 + 248) + 8LL);
        if (*(void *)(v32 + 40))
        {
LABEL_37:
          if (*(_BYTE *)(a1 + 287)) {
            char v33 = 43;
          }
          else {
            char v33 = 45;
          }
          unsigned __int8 v411 = v33;
          if ([*(id *)(a1 + 88) count])
          {
            v377 =  -[NSMutableSet initWithArray:]( objc_alloc(&OBJC_CLASS___NSMutableSet),  "initWithArray:",  *(void *)(a1 + 88));
          }

          else
          {
            v377 = 0LL;
          }

          id v34 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 96) _stripFZIDPrefix]);
          v385 = v34;
          if (v34) {
            id v34 = -[NSMutableSet removeObject:](v377, "removeObject:", v34);
          }
          if (*(_BYTE *)(a1 + 287))
          {
            id v36 = *(void **)(a1 + 104);
            if (v36)
            {
              id v37 = v36;
              goto LABEL_56;
            }

            if (IMOSLoggingEnabled(v34, v35))
            {
              uint64_t v45 = OSLogHandleForIMEventCategory("MessageService");
              uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
              if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_0, v46, OS_LOG_TYPE_INFO, "Did not find chat in first pass. Trying again.", buf, 2u);
              }
            }

            id v47 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) groupController]);
            id v48 = *(void **)(a1 + 40);
            uint64_t v49 = *(void *)(a1 + 112);
            id v50 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 120) account]);
            id v51 = (void *)objc_claimAutoreleasedReturnValue([v48 imdAccountForIDSAccount:v50]);
            uint64_t v52 = objc_claimAutoreleasedReturnValue( [v47 findChatWithMessageData:v49 account:v51 session:*(void *)(a1 + 40) toIdentifier:*(void *)(a1 + 96) fromIdentifier:*(void *)(a1 + 72) timestamp:*(void *)(a1 + 128)]);

            id v37 = (id)v52;
            if (v52) {
              goto LABEL_56;
            }
            id v38 = (void *)objc_claimAutoreleasedReturnValue(+[IMDChatRegistry sharedInstance](&OBJC_CLASS___IMDChatRegistry, "sharedInstance"));
            id v139 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v377, "allObjects"));
            uint64_t v39 = objc_claimAutoreleasedReturnValue( [v38 existingChatForIDs:v139 account:*(void *)(v390 + 80) displayName:*(void *)(v390 + 136) groupID:*(void *)(v390 + 144) style:43]);
          }

          else
          {
            id v38 = (void *)objc_claimAutoreleasedReturnValue(+[IMDChatRegistry sharedInstance](&OBJC_CLASS___IMDChatRegistry, "sharedInstance"));
            uint64_t v39 = objc_claimAutoreleasedReturnValue( [v38 existingChatForID:*(void *)(*(void *)(*(void *)(a1 + 248) + 8) + 40) account:*(void *)(a1 + 80)]);
          }

          id v37 = (id)v39;
          if (!v39)
          {
            uint64_t v40 = *(void **)(v390 + 40);
            uint64_t v41 = *(void *)(*(void *)(v390 + 248) + 8LL);
            id obj = *(id *)(v41 + 40);
            [v40 canonicalizeChatIdentifier:&obj style:&v411];
            objc_storeStrong((id *)(v41 + 40), obj);
            LODWORD(v41) = [*(id *)(v390 + 48) isTypingMessage];
            uint64_t v42 = (uint64_t)[*(id *)(v390 + 48) isTypingMessage];
            uint64_t v44 = 0LL;
            int v384 = v41 ^ 1;
            int v378 = v42 ^ 1;
            char v376 = 1;
            goto LABEL_75;
          }

LABEL_56:
          uint64_t v44 = v37;
          uint64_t v53 = objc_claimAutoreleasedReturnValue([v37 chatIdentifier]);
          uint64_t v54 = *(void *)(*(void *)(v390 + 248) + 8LL);
          id v55 = *(void **)(v54 + 40);
          *(void *)(v54 + 40) = v53;

          unsigned __int8 v411 = [v44 style];
          id v56 = (void *)objc_claimAutoreleasedReturnValue([v44 service]);
          id v57 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v390 + 40) service]);
          int v384 = v56 != v57;

          if (v384)
          {
            uint64_t v42 = IMOSLoggingEnabled(v42, v43);
            if ((_DWORD)v42)
            {
              uint64_t v58 = OSLogHandleForIMFoundationCategory("MessageService");
              id v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
              if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_0, v59, OS_LOG_TYPE_INFO, "Service of found chat not equal, lets register", buf, 2u);
              }
            }
          }

          uint64_t v60 = v390;
          if (*(void *)(v390 + 72))
          {
            uint64_t v42 = *(void *)(v390 + 96);
            if (v42)
            {
              uint64_t v42 = (uint64_t)objc_msgSend((id)v42, "isEqualToString:");
              uint64_t v60 = v390;
              int v61 = *(_BYTE *)(v390 + 288) ? v42 : 0;
              if (v61 == 1)
              {
                uint64_t v42 = (uint64_t)[v44 isBlackholed];
                uint64_t v60 = v390;
                if ((_DWORD)v42)
                {
                  if (IMOSLoggingEnabled(v42, v43))
                  {
                    uint64_t v62 = OSLogHandleForIMFoundationCategory("MessageService");
                    id v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
                    if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
                    {
                      id v64 = (id)objc_claimAutoreleasedReturnValue([v44 guid]);
                      *(_DWORD *)buf = 138412290;
                      *(void *)v419 = v64;
                      _os_log_impl( &dword_0,  v63,  OS_LOG_TYPE_INFO,  "Unblackholing chat %@ based on reflection",  buf,  0xCu);
                    }
                  }

                  uint64_t v42 = (uint64_t)[v44 updateIsBlackholed:0];
                  uint64_t v60 = v390;
                }
              }
            }
          }

          uint64_t v65 = *(void *)(v60 + 136);
          if (!v65)
          {
            char v376 = 0;
            int v378 = 1;
            goto LABEL_77;
          }

          uint64_t v42 = (uint64_t)[*(id *)(v60 + 40) didReceiveDisplayNameChange:v65 fromID:*(void *)(*(void *)(*(void *)(v60 + 256) + 8) + 40) toIdentifier:*(void *)(v60 + 96) forChat:*(void *)(*(void *)(*(void *)(v60 + 248) + 8) + 40) style:v411 account:*(void *)(v60 + 80)];
          char v376 = 0;
          int v378 = 1;
LABEL_75:
          uint64_t v60 = v390;
LABEL_77:
          v389 = v44;
          if (*(_BYTE *)(v60 + 287))
          {
            int v375 = 0;
          }

          else
          {
            int v375 = 0;
            if (v385 && *(_BYTE *)(v60 + 288))
            {
              uint64_t v42 = (uint64_t)[*(id *)(*(void *)(*(void *)(v60 + 256) + 8) + 40) isEqualToString:v385];
              int v375 = v42;
              uint64_t v60 = v390;
            }
          }

          if (!*(_BYTE *)(v60 + 288)) {
            goto LABEL_99;
          }
          __int128 v408 = 0u;
          __int128 v409 = 0u;
          __int128 v406 = 0u;
          __int128 v407 = 0u;
          id v66 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(v60 + 40) + 96) lastObject]);
          id v67 = (void *)objc_claimAutoreleasedReturnValue([v66 service]);
          id v68 = (void *)objc_claimAutoreleasedReturnValue([v67 devices]);

          id v69 = [v68 countByEnumeratingWithState:&v406 objects:v420 count:16];
          if (v69)
          {
            uint64_t v70 = *(void *)v407;
LABEL_85:
            uint64_t v71 = 0LL;
            while (1)
            {
              if (*(void *)v407 != v70) {
                objc_enumerationMutation(v68);
              }
              uint64_t v72 = *(void **)(*((void *)&v406 + 1) + 8 * v71);
              uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue([v72 pushToken]);
              unsigned int v74 = [v73 isEqualToData:*(void *)(v390 + 152)];

              if (v74) {
                break;
              }
              if (v69 == (id)++v71)
              {
                id v69 = [v68 countByEnumeratingWithState:&v406 objects:v420 count:16];
                if (v69) {
                  goto LABEL_85;
                }
                goto LABEL_91;
              }
            }

            if (IMOSLoggingEnabled(v75, v76))
            {
              uint64_t v77 = OSLogHandleForIMFoundationCategory("MessageService");
              char v78 = (os_log_s *)objc_claimAutoreleasedReturnValue(v77);
              if (os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
              {
                id v79 = (id)objc_claimAutoreleasedReturnValue([v72 name]);
                *(_DWORD *)buf = 138412546;
                *(void *)v419 = v79;
                *(_WORD *)&v419[8] = 2112;
                *(void *)&v419[10] = v72;
                _os_log_impl(&dword_0, v78, OS_LOG_TYPE_DEBUG, " Device: %@ (%@)", buf, 0x16u);
              }
            }

            char v80 = (void *)objc_claimAutoreleasedReturnValue([v72 uniqueID]);
            BOOL v81 = v80 == 0LL;

            if (!v81) {
              goto LABEL_99;
            }
          }

          else
          {
LABEL_91:
          }

          if (*(_BYTE *)(v390 + 288) && !*(_BYTE *)(v390 + 287))
          {
            id v135 = objc_msgSend( *(id *)(v390 + 32),  "setFlags:",  (unint64_t)objc_msgSend(*(id *)(v390 + 32), "flags") | 0x1000);
            uint64_t v42 = IMOSLoggingEnabled(v135, v136);
            if ((_DWORD)v42)
            {
              uint64_t v137 = OSLogHandleForIMFoundationCategory("MessageService");
              id v138 = (os_log_s *)objc_claimAutoreleasedReturnValue(v137);
              if (os_log_type_enabled(v138, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( &dword_0,  v138,  OS_LOG_TYPE_DEBUG,  "     *** Device doesn't support delivery receipt forwarding, faking it",  buf,  2u);
              }
            }

            int v82 = 1;
          }

          else
          {
LABEL_99:
            int v82 = 0;
          }

          uint64_t v83 = IMOSLoggingEnabled(v42, v43);
          if ((_DWORD)v83)
          {
            uint64_t v85 = OSLogHandleForIMFoundationCategory("MessageService");
            v86 = (os_log_s *)objc_claimAutoreleasedReturnValue(v85);
            if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412290;
              *(void *)v419 = v385;
              _os_log_impl(&dword_0, v86, OS_LOG_TYPE_DEBUG, "   myID: %@", buf, 0xCu);
            }
          }

          uint64_t v87 = IMOSLoggingEnabled(v83, v84);
          if ((_DWORD)v87)
          {
            uint64_t v89 = OSLogHandleForIMFoundationCategory("MessageService");
            v90 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);
            if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v91 = *(void *)(*(void *)(*(void *)(v390 + 256) + 8LL) + 40LL);
              *(_DWORD *)buf = 138412290;
              *(void *)v419 = v91;
              _os_log_impl(&dword_0, v90, OS_LOG_TYPE_DEBUG, "   fromDisplayID: %@", buf, 0xCu);
            }
          }

          uint64_t v92 = IMOSLoggingEnabled(v87, v88);
          if ((_DWORD)v92)
          {
            uint64_t v94 = OSLogHandleForIMFoundationCategory("MessageService");
            v95 = (os_log_s *)objc_claimAutoreleasedReturnValue(v94);
            if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
            {
              id v96 = (id)objc_claimAutoreleasedReturnValue([v389 guid]);
              *(_DWORD *)buf = 138412546;
              *(void *)v419 = v389;
              *(_WORD *)&v419[8] = 2112;
              *(void *)&v419[10] = v96;
              _os_log_impl(&dword_0, v95, OS_LOG_TYPE_DEBUG, "   found chat: %@ (%@)", buf, 0x16u);
            }
          }

          uint64_t v97 = IMOSLoggingEnabled(v92, v93);
          if ((_DWORD)v97)
          {
            uint64_t v99 = OSLogHandleForIMFoundationCategory("MessageService");
            uint64_t v100 = (os_log_s *)objc_claimAutoreleasedReturnValue(v99);
            if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
            {
              id v101 = @"NO";
              if (v375) {
                id v101 = @"YES";
              }
              *(_DWORD *)buf = 138412290;
              *(void *)v419 = v101;
              _os_log_impl(&dword_0, v100, OS_LOG_TYPE_DEBUG, "   from me - to me: %@", buf, 0xCu);
            }
          }

          uint64_t v102 = IMOSLoggingEnabled(v97, v98);
          if ((_DWORD)v102)
          {
            uint64_t v104 = OSLogHandleForIMFoundationCategory("MessageService");
            id v105 = (os_log_s *)objc_claimAutoreleasedReturnValue(v104);
            if (os_log_type_enabled(v105, OS_LOG_TYPE_DEBUG))
            {
              if (*(_BYTE *)(v390 + 287)) {
                v106 = @"YES";
              }
              else {
                v106 = @"NO";
              }
              *(_DWORD *)buf = 138412290;
              *(void *)v419 = v106;
              _os_log_impl(&dword_0, v105, OS_LOG_TYPE_DEBUG, "   isGroupChat: %@", buf, 0xCu);
            }
          }

          uint64_t v107 = IMOSLoggingEnabled(v102, v103);
          if ((_DWORD)v107)
          {
            uint64_t v109 = OSLogHandleForIMFoundationCategory("MessageService");
            uint64_t v110 = (os_log_s *)objc_claimAutoreleasedReturnValue(v109);
            if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v111 = *(void *)(*(void *)(*(void *)(v390 + 248) + 8LL) + 40LL);
              *(_DWORD *)buf = 138412290;
              *(void *)v419 = v111;
              _os_log_impl(&dword_0, v110, OS_LOG_TYPE_DEBUG, "   chatIdentifier: %@", buf, 0xCu);
            }
          }

          if (IMOSLoggingEnabled(v107, v108))
          {
            uint64_t v112 = OSLogHandleForIMFoundationCategory("MessageService");
            v113 = (os_log_s *)objc_claimAutoreleasedReturnValue(v112);
            if (os_log_type_enabled(v113, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v114 = @"NO";
              if (v82) {
                uint64_t v114 = @"YES";
              }
              *(_DWORD *)buf = 138412290;
              *(void *)v419 = v114;
              _os_log_impl(&dword_0, v113, OS_LOG_TYPE_DEBUG, "   markDelivered: %@", buf, 0xCu);
            }
          }

          uint64_t v115 = v390;
          if (*(_BYTE *)(v390 + 288))
          {
            int v374 = 0;
            goto LABEL_190;
          }

          if ([*(id *)(v390 + 32) isTypingMessage])
          {
            int v374 = 0;
LABEL_189:
            uint64_t v115 = v390;
LABEL_190:
            if (!*(_BYTE *)(v115 + 290))
            {
              unsigned int v170 = *(_DWORD *)(v390 + 280);
              if (v170) {
                uint64_t v171 = v170;
              }
              else {
                uint64_t v171 = 37LL;
              }
              id v172 = [*(id *)(v390 + 32) setErrorCode:v171];
              if (IMOSLoggingEnabled(v172, v173))
              {
                uint64_t v174 = OSLogHandleForIMEventCategory("MessageService");
                unsigned __int8 v175 = (os_log_s *)objc_claimAutoreleasedReturnValue(v174);
                if (os_log_type_enabled(v175, OS_LOG_TYPE_INFO))
                {
                  int v176 = *(_DWORD *)(v390 + 280);
                  uint64_t v177 = *(void *)(v390 + 168);
                  uint64_t v178 = *(void *)(v390 + 272);
                  *(_DWORD *)buf = 67109634;
                  *(_DWORD *)v419 = v176;
                  *(_WORD *)&v419[4] = 2112;
                  *(void *)&v419[6] = v177;
                  *(_WORD *)&v419[14] = 2048;
                  *(void *)&v419[16] = v178;
                  _os_log_impl( &dword_0,  v175,  OS_LOG_TYPE_INFO,  "** Had attachment download failure: %d, fileTransferError: %@, attachment size %lu",  buf,  0x1Cu);
                }
              }

              uint64_t v179 = v390;
              unsigned int v180 = *(void **)(v390 + 168);
              if (v180)
              {
                v181 = (void *)objc_claimAutoreleasedReturnValue([v180 domain]);
                v182 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"Error domain %@, error code %ld",  v181,  [*(id *)(v390 + 168) code]));

                uint64_t v179 = v390;
              }

              else
              {
                v182 = @" ";
              }

              unint64_t v183 = *(void *)(v179 + 272);
              v184 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v179 + 40) deliveryController]);
              uint64_t v382 = *(void *)(v390 + 152);
              uint64_t v185 = *(void *)(v390 + 72);
              uint64_t v386 = *(void *)(v390 + 96);
              uint64_t v186 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v390 + 120) account]);
              uint64_t v187 = *(void *)(v390 + 56);
              v188 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  1000 * (v183 / 0x3E8)));
              id v189 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
              [v189 timeIntervalSinceDate:*(void *)(v390 + 176)];
              double v191 = v190;
              uint64_t v192 = *(void *)(v390 + 184);
              v399[0] = _NSConcreteStackBlock;
              v399[1] = 3221225472LL;
              v399[2] = sub_13864;
              v399[3] = &unk_D59A8;
              int v401 = *(_DWORD *)(v390 + 280);
              id v400 = *(id *)(v390 + 152);
              [v184 sendMessageErrorWithInfo:400 toToken:v382 toID:v185 toGroup:0 fromID:v386 fromAccount:v186 forMessageID:v191 additionalInfo:v187 fileSize:v182 fa ilureTimeSeconds:v188 failReasonMessage:v192 completionBlock:v399];
            }

            v383 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
            if (*(_BYTE *)(v390 + 287))
            {
              +[MessageGroupController addMembers:toHandleInfo:]( &OBJC_CLASS___MessageGroupController,  "addMembers:toHandleInfo:",  *(void *)(v390 + 88),  v383);
            }

            else
            {
              id v193 = *(id *)(*(void *)(*(void *)(v390 + 248) + 8LL) + 40LL);
              id v194 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 2LL));
              v195 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v194,  kFZChatParticipantStatusKey,  v193,  kFZPersonID,  0LL));

              -[NSMutableArray addObject:](v383, "addObject:", v195);
            }

            v387 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( &OBJC_CLASS___NSMutableArray,  "arrayWithCapacity:",  2LL));
            v381 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(v390 + 40) storeBreadcrumbAndSetConsumedPayloadsForNewMessageItemIfNecessary:*(void *)(v390 + 48) inChatWithIdentifier:*(void *)(*(void *)(*(void *)(v390 + 248) + 8) + 40)]);
            if (v381) {
              [v387 addObject:v381];
            }
            id v196 = [*(id *)(v390 + 48) isBreadcrumb];
            if ((_DWORD)v196 && IMOSLoggingEnabled(v196, v197))
            {
              uint64_t v198 = OSLogHandleForIMFoundationCategory("Breadcrumbs");
              uint64_t v199 = (os_log_s *)objc_claimAutoreleasedReturnValue(v198);
              if (os_log_type_enabled(v199, OS_LOG_TYPE_INFO))
              {
                v200 = *(void **)(v390 + 48);
                v201 = (void *)objc_claimAutoreleasedReturnValue([v200 consumedSessionPayloads]);
                id v202 = [v201 count];
                *(_DWORD *)buf = 138412546;
                *(void *)v419 = v200;
                *(_WORD *)&v419[8] = 2048;
                *(void *)&v419[10] = v202;
                _os_log_impl( &dword_0,  v199,  OS_LOG_TYPE_INFO,  "Receiving breadcrumb %@ with payload history: %tu items.",  buf,  0x16u);
              }
            }

            uint64_t v203 = v390;
            if (*(_BYTE *)(v390 + 288))
            {
              if (v384)
              {
                LOBYTE(v371) = v374;
                [*(id *)(v390 + 40) didJoinChat:*(void *)(*(void *)(*(void *)(v390 + 248) + 8) + 40) style:v411 displayName:*(void *)(v390 + 136) groupID:*(void *)(v390 + 144) handleInfo:v383 account:*(void *)(v390 + 80) isBlackholed:v371];
                v204 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(v390 + 40) chatForChatIdentifier:*(void *)(*(void *)(*(void *)(v390 + 248) + 8) + 40) style:v411]);
                _UpdateLastAddressedHandle(*(void **)(v390 + 48), *(void **)(v390 + 96), v204);
              }

              else
              {
                v204 = (void *)objc_claimAutoreleasedReturnValue([v389 chatIdentifier]);
                sub_311B8(v204, (uint64_t)[v389 style]);
              }

              if (!v378) {
                goto LABEL_236;
              }
              uint64_t v211 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(v390 + 40) chatForChatIdentifier:*(void *)(*(void *)(*(void *)(v390 + 248) + 8) + 40) style:v411]);
              if (*(_BYTE *)(v390 + 291)) {
                BOOL v217 = 1LL;
              }
              else {
                BOOL v217 = *(_BYTE *)(v390 + 284) != 0;
              }
              [*(id *)(v390 + 40) didSendMessage:*(void *)(v390 + 32) forChat:*(void *)(*(void *)(*(void *)(v390 + 248) + 8) + 40) style:v411 account:*(void *)(v390 + 80) forceDate:0 itemIsComingFromStorage:v217];
LABEL_235:

              if (![v387 count]) {
                goto LABEL_251;
              }
LABEL_236:
              uint64_t v218 = v390;
              if (*(_BYTE *)(v390 + 292))
              {
                __int128 v397 = 0u;
                __int128 v398 = 0u;
                __int128 v395 = 0u;
                __int128 v396 = 0u;
                id v219 = v387;
                id v220 = [v219 countByEnumeratingWithState:&v395 objects:v417 count:16];
                if (v220)
                {
                  uint64_t v221 = *(void *)v396;
                  uint64_t v222 = kIMMessageItemHideLockScreenNotificationsKey;
                  do
                  {
                    for (i = 0LL; i != v220; i = (char *)i + 1)
                    {
                      if (*(void *)v396 != v221) {
                        objc_enumerationMutation(v219);
                      }
                      id v224 = *(void **)(*((void *)&v395 + 1) + 8LL * (void)i);
                      if (([*(id *)(v390 + 32) isTypingMessage] & 1) == 0)
                      {
                        id v225 = (void *)objc_claimAutoreleasedReturnValue([v224 messageSummaryInfo]);
                        id v226 = (NSMutableDictionary *)[v225 mutableCopy];

                        if (!v226) {
                          id v226 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
                        }
                        -[NSMutableDictionary setValue:forKey:](v226, "setValue:forKey:", &__kCFBooleanTrue, v222);
                        id v227 = -[NSMutableDictionary copy](v226, "copy");
                        [v224 setMessageSummaryInfo:v227];
                      }
                    }

                    id v220 = [v219 countByEnumeratingWithState:&v395 objects:v417 count:16];
                  }

                  while (v220);
                }

                uint64_t v218 = v390;
              }

              id v228 = [*(id *)(v218 + 40) didReceiveMessages:v387 forChat:*(void *)(*(void *)(*(void *)(v218 + 248) + 8) + 40) style:v411 account:*(void *)(v218 + 80) fromIDSID:*(void *)(v218 + 192)];
              if (!(_DWORD)v228)
              {
                if (IMOSLoggingEnabled(v228, v229))
                {
                  uint64_t v232 = OSLogHandleForIMFoundationCategory("MessageService");
                  v233 = (os_log_s *)objc_claimAutoreleasedReturnValue(v232);
                  if (os_log_type_enabled(v233, OS_LOG_TYPE_INFO))
                  {
                    uint64_t v234 = *(void *)(v390 + 56);
                    *(_DWORD *)buf = 138412290;
                    *(void *)v419 = v234;
                    _os_log_impl( &dword_0,  v233,  OS_LOG_TYPE_INFO,  "*** Not all messages successfully stored in database. Not sending IMMessageCheckpointLocationMessa geStored checkpoint. guid %@",  buf,  0xCu);
                  }
                }

                int v373 = 0;
              }

              else
              {
LABEL_251:
                uint64_t v230 = im_checkpointIDSService();
                double v231 = (void *)objc_claimAutoreleasedReturnValue(v230);
                im_sendMessageCheckpointIfNecessary( v231,  10300LL,  *(void *)(v390 + 56),  *(unsigned __int8 *)(v390 + 293));

                int v373 = 1;
              }

              uint64_t v235 = v390;
              if (v378)
              {
                char v236 = v375 ^ 1;
                if (*(_BYTE *)(v390 + 287)) {
                  char v236 = 1;
                }
                if ((v236 & 1) == 0)
                {
                  [*(id *)(v390 + 40) _handleMessageSentToSelf:*(void *)(v390 + 32) chatIdentifier:*(void *)(*(void *)(*(void *)(v390 + 248) + 8) + 40) style:v411 isLocal:0 account:*(void *)(v390 + 80)];
                  uint64_t v235 = v390;
                }
              }

              if (([*(id *)(v235 + 32) isTypingMessage] & 1) == 0)
              {
                v237 = (void *)objc_claimAutoreleasedReturnValue( +[IMMetricsCollector sharedInstance]( &OBJC_CLASS___IMMetricsCollector,  "sharedInstance"));
                [v237 trackEvent:IMMetricsCollectorEventiMessageReceived];
              }

              uint64_t v415 = IMMetricsCollectorError;
              v238 = +[NSNumber numberWithLong:]( NSNumber,  "numberWithLong:",  sub_81188((uint64_t)[*(id *)(v390 + 32) errorCode]));
              BOOL v239 = (void *)objc_claimAutoreleasedReturnValue(v238);
              v416 = v239;
              id v240 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v416,  &v415,  1LL));

              id v241 = (void *)objc_claimAutoreleasedReturnValue(+[IMMetricsCollector sharedInstance](&OBJC_CLASS___IMMetricsCollector, "sharedInstance"));
              [v241 trackEvent:IMMetricsCollectorEventIncomingMessage withDictionary:v240];

              uint64_t v242 = v390;
              uint64_t v243 = *(void *)(v390 + 136);
              if (v243)
              {
                [*(id *)(v390 + 40) didReceiveDisplayNameChange:v243 fromID:*(void *)(*(void *)(*(void *)(v390 + 256) + 8) + 40) toIdentifier:*(void *)(v390 + 96) forChat:*(void *)(*(void *)(*(void *)(v390 + 248) + 8) + 40) style:v411 account:*(void *)(v390 + 80)];
                uint64_t v242 = v390;
              }

              unsigned __int8 v245 = *(void **)(v242 + 32);
              id v244 = (id *)(v242 + 32);
              unsigned __int8 v246 = (void *)objc_claimAutoreleasedReturnValue([v245 fileTransferGUIDs]);
              BOOL v247 = [v246 count] != 0;

              unsigned __int8 v248 = (void *)objc_claimAutoreleasedReturnValue([*v244 sender]);
              uint64_t IsEmail = IMStringIsEmail(v248);

              v413[0] = IMMetricsCollectorFzErrorKey;
              unsigned int v250 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLong:]( NSNumber,  "numberWithLong:",  [*v244 errorCode]));
              v414[0] = v250;
              v413[1] = IMMetricsCollectorMessageErrorKey;
              id v251 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](&OBJC_CLASS___NSNumber, "numberWithLong:", 0LL));
              v414[1] = v251;
              v413[2] = IMMetricsCollectorIsTypingIndicatorKey;
              unsigned int v252 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [*(id *)(v390 + 48) isTypingMessage]));
              v414[2] = v252;
              v413[3] = IMMetricsCollectorIsGroupMessageKey;
              v253 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(v390 + 287)));
              v414[3] = v253;
              v413[4] = IMMetricsCollectorIsFromPhoneNumberKey;
              unsigned int v254 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  IsEmail ^ 1));
              v414[4] = v254;
              v413[5] = IMMetricsCollectorIsFromEmailKey;
              v255 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", IsEmail));
              v414[5] = v255;
              v413[6] = IMMetricsCollectorHasAttachmentsKey;
              v256 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v247));
              v414[6] = v256;
              v379 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v414,  v413,  7LL));

              id v257 = (void *)objc_claimAutoreleasedReturnValue(+[IMMetricsCollector sharedInstance](&OBJC_CLASS___IMMetricsCollector, "sharedInstance"));
              [v257 trackEvent:IMMetricsCollectorEventIMessageReceivedMessageSingleComponent withDictionary:v379];

              uint64_t v258 = *(void *)(*(void *)(v390 + 264) + 8LL);
              v259 = *(void **)(v258 + 40);
              *(void *)(v258 + 40) = 0LL;

              if (*(_BYTE *)(v390 + 288))
              {
                v262 = v389;
                if ((v376 & 1) != 0)
                {
LABEL_288:
                  id v283 = (void *)objc_claimAutoreleasedReturnValue(+[IMDChatRegistry sharedInstance](&OBJC_CLASS___IMDChatRegistry, "sharedInstance"));
                  v389 = (void *)objc_claimAutoreleasedReturnValue( [v283 existingChatWithIdentifier:*(void *)(*(void *)(*(void *)(v390 + 248) + 8) + 40) account:*(void *)(v390 + 80)]);
                  goto LABEL_289;
                }
              }

              else
              {
                if ((v376 & 1) != 0)
                {
                  v263 = *(void **)(v390 + 40);
                  v264 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v390 + 72) _stripFZIDPrefix]);
                  v265 = (void *)objc_claimAutoreleasedReturnValue([v263 chatForChatIdentifier:v264 style:45]);

                  if (IMOSLoggingEnabled(v266, v267))
                  {
                    uint64_t v268 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
                    id v269 = (os_log_s *)objc_claimAutoreleasedReturnValue(v268);
                    if (os_log_type_enabled(v269, OS_LOG_TYPE_INFO))
                    {
                      uint64_t v270 = *(void *)(v390 + 192);
                      *(_DWORD *)buf = 138412546;
                      *(void *)v419 = v270;
                      *(_WORD *)&v419[8] = 2112;
                      *(void *)&v419[10] = v265;
                      _os_log_impl( &dword_0,  v269,  OS_LOG_TYPE_INFO,  "Updating last active device to be %@ for chat %@ on new incoming message",  buf,  0x16u);
                    }
                  }

                  v271 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v390 + 40) deliveryController]);
                  uint64_t v272 = *(void *)(v390 + 192);
                  v273 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v390 + 72) _stripFZIDPrefix]);
                  [v271 updateLatestActiveDestination:v272 ForHandle:v273 incomingType:0];

                  id v274 = [*(id *)(v390 + 160) count];
                  if ((unint64_t)v274 > 2)
                  {
                    if (IMOSLoggingEnabled(v274, v275))
                    {
                      uint64_t v284 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
                      id v285 = (os_log_s *)objc_claimAutoreleasedReturnValue(v284);
                      if (os_log_type_enabled(v285, OS_LOG_TYPE_INFO))
                      {
                        id v286 = (id)objc_claimAutoreleasedReturnValue([*(id *)(v390 + 32) guid]);
                        *(_DWORD *)buf = 138412290;
                        *(void *)v419 = v286;
                        _os_log_impl( &dword_0,  v285,  OS_LOG_TYPE_INFO,  "Not updating last addressed handle for msg guid %@ as we couldnt find a group for it",  buf,  0xCu);
                      }
                    }
                  }

                  else
                  {
                    _UpdateLastAddressedHandle(*(void **)(v390 + 48), *(void **)(v390 + 96), v265);
                  }

                  goto LABEL_288;
                }

                if (IMOSLoggingEnabled(v260, v261))
                {
                  uint64_t v276 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
                  v277 = (os_log_s *)objc_claimAutoreleasedReturnValue(v276);
                  if (os_log_type_enabled(v277, OS_LOG_TYPE_INFO))
                  {
                    uint64_t v278 = *(void *)(v390 + 192);
                    *(_DWORD *)buf = 138412546;
                    *(void *)v419 = v278;
                    *(_WORD *)&v419[8] = 2112;
                    *(void *)&v419[10] = v389;
                    _os_log_impl( &dword_0,  v277,  OS_LOG_TYPE_INFO,  "Updating last active device to be %@ for chat %@ on incoming message",  buf,  0x16u);
                  }
                }

                v279 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v390 + 40) deliveryController]);
                uint64_t v280 = *(void *)(v390 + 192);
                uint64_t v281 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v390 + 72) _stripFZIDPrefix]);
                [v279 updateLatestActiveDestination:v280 ForHandle:v281 incomingType:0];

                v262 = v389;
              }

              if ([v262 state] == (char *)&dword_0 + 3)
              {
LABEL_290:
                char v287 = (void *)objc_claimAutoreleasedReturnValue( +[IMFeatureFlags sharedFeatureFlags]( &OBJC_CLASS___IMFeatureFlags,  "sharedFeatureFlags"));
                unsigned int v288 = [v287 isBIAEnabled];

                if (v288 && *(_BYTE *)(v390 + 294) && v389) {
                  [v389 addBIAContextWithUserID:*(void *)(v390 + 96) referenceID:*(void *)(v390 + 200)];
                }

                if (+[IMSpamFilterHelper isInternationalSpamFilteringEnabled]( &OBJC_CLASS___IMSpamFilterHelper,  "isInternationalSpamFilteringEnabled")
                  && ([*(id *)(v390 + 32) isTypingMessage] & 1) == 0)
                {
                  if ([v389 smsHandshakeState] == 1)
                  {
                    char v289 = (void *)objc_claimAutoreleasedReturnValue( +[IMMetricsCollector sharedInstance]( &OBJC_CLASS___IMMetricsCollector,  "sharedInstance"));
                    [v289 trackSpamEvent:4];

                    [v389 updateSMSHandshakeState:2];
                    char v290 = (void *)objc_claimAutoreleasedReturnValue(+[IMDChatRegistry sharedInstance](&OBJC_CLASS___IMDChatRegistry, "sharedInstance"));
                    v291 = (void *)objc_claimAutoreleasedReturnValue([v389 chatIdentifier]);
                    id v292 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v290,  "existingSMSChatForID:withChatStyle:",  v291,  objc_msgSend(v389, "style")));

                    if (v292)
                    {
                      if (IMOSLoggingEnabled(v293, v294))
                      {
                        uint64_t v295 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
                        id v296 = (os_log_s *)objc_claimAutoreleasedReturnValue(v295);
                        if (os_log_type_enabled(v296, OS_LOG_TYPE_INFO))
                        {
                          *(_WORD *)buf = 0;
                          _os_log_impl( &dword_0,  v296,  OS_LOG_TYPE_INFO,  "Updating sibling chat handshake state to IMChatSMSHandshakeStateSuccess",  buf,  2u);
                        }
                      }

                      [v292 updateSMSHandshakeState:2];
                    }
                  }

                  if ([v389 messageHandshakeState] == 1)
                  {
                    id v297 = (void *)objc_claimAutoreleasedReturnValue( +[IMMetricsCollector sharedInstance]( &OBJC_CLASS___IMMetricsCollector,  "sharedInstance"));
                    [v297 trackSpamEvent:3];

                    [v389 updateMessageHandshakeState:2];
                  }
                }

                uint64_t v298 = v390;
                if (v389)
                {
                  id v299 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v390 + 80) service]);
                  id v300 = (void *)objc_claimAutoreleasedReturnValue([v299 internalName]);
                  [*(id *)(v390 + 48) setService:v300];

                  id v301 = (void *)objc_claimAutoreleasedReturnValue(+[IMDChatStore sharedInstance](&OBJC_CLASS___IMDChatStore, "sharedInstance"));
                  [v301 updatePersonCentricIDForHandlesInChatWithMessage:*(void *)(v390 + 48) fromIdentifier:*(void *)(v390 + 72) personCentricID:*(void *)(v390 + 208) chat:v389];

                  uint64_t v302 = objc_claimAutoreleasedReturnValue( [*(id *)(v390 + 64) _stringForKey:MessageDictionaryNicknameParticipantTruncatedRIDKey]);
                  if (v302) {
                    id v304 = (__CFString *)v302;
                  }
                  else {
                    id v304 = &stru_D8640;
                  }
                  if (IMOSLoggingEnabled(v302, v303))
                  {
                    uint64_t v305 = OSLogHandleForIMFoundationCategory("Nicknames");
                    id v306 = (os_log_s *)objc_claimAutoreleasedReturnValue(v305);
                    if (os_log_type_enabled(v306, OS_LOG_TYPE_INFO))
                    {
                      uint64_t v307 = *(void *)(v390 + 72);
                      *(_DWORD *)buf = 138412546;
                      *(void *)v419 = v304;
                      *(_WORD *)&v419[8] = 2112;
                      *(void *)&v419[10] = v307;
                      _os_log_impl( &dword_0,  v306,  OS_LOG_TYPE_INFO,  "Received truncated record id %@ from %@",  buf,  0x16u);
                    }
                  }

                  id v308 = (void *)objc_claimAutoreleasedReturnValue( +[IMDNicknameController sharedInstance]( &OBJC_CLASS___IMDNicknameController,  "sharedInstance"));
                  [v308 verifyTruncatedRecordIDMatchesPersonalNickname:v304 forChat:v389];

                  uint64_t v298 = v390;
                  if (!*(_BYTE *)(v390 + 288))
                  {
                    id v309 = (void *)objc_claimAutoreleasedReturnValue( +[IMFeatureFlags sharedFeatureFlags]( &OBJC_CLASS___IMFeatureFlags,  "sharedFeatureFlags",  v389));
                    unsigned int v310 = [v309 isCarrierPigeonEnabled];

                    if (v310)
                    {
                      id v311 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v390 + 64) _stringForKey:@"aogrs"]);
                      uint64_t v312 = objc_claimAutoreleasedReturnValue([*(id *)(v390 + 64) _stringForKey:@"aogre"]);
                      id v314 = (void *)v312;
                      if (v311)
                      {
                        v315 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v390 + 72) _stripFZIDPrefix]);
                        uint64_t v316 = (void *)objc_claimAutoreleasedReturnValue([v385 _stripFZIDPrefix]);
                        char v317 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate __im_iMessageDateFromTimeStamp:]( &OBJC_CLASS___NSDate,  "__im_iMessageDateFromTimeStamp:",  *(void *)(v390 + 128)));
                        if (IMOSLoggingEnabled(v317, v318))
                        {
                          uint64_t v319 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
                          char v320 = (os_log_s *)objc_claimAutoreleasedReturnValue(v319);
                          if (os_log_type_enabled(v320, OS_LOG_TYPE_INFO))
                          {
                            *(_DWORD *)buf = 138412802;
                            *(void *)v419 = v311;
                            *(_WORD *)&v419[8] = 2112;
                            *(void *)&v419[10] = v315;
                            *(_WORD *)&v419[18] = 2112;
                            *(void *)&v419[20] = v316;
                            _os_log_impl( &dword_0,  v320,  OS_LOG_TYPE_INFO,  "Received offGridSubscriptionValidationToken = %@ from %@ to %@",  buf,  0x20u);
                          }
                        }

                        char v321 = (void *)objc_claimAutoreleasedReturnValue( +[IMDOffGridAvailabilityVerificationManager sharedInstance]( &OBJC_CLASS___IMDOffGridAvailabilityVerificationManager,  "sharedInstance"));
                        [v321 verifyOffGridSubscriptionMatchesSubscriptionValidationToken:v311 encryptionValidationToken:v314 received ByHandleID:v316 fromHandleID:v315 messageDate:v317];
                      }

                      else if (IMOSLoggingEnabled(v312, v313))
                      {
                        uint64_t v322 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
                        char v323 = (os_log_s *)objc_claimAutoreleasedReturnValue(v322);
                        if (os_log_type_enabled(v323, OS_LOG_TYPE_INFO))
                        {
                          uint64_t v324 = *(void *)(v390 + 72);
                          *(_DWORD *)buf = 138412290;
                          *(void *)v419 = v324;
                          _os_log_impl( &dword_0,  v323,  OS_LOG_TYPE_INFO,  "Message from %@ did not contain offGridSubscriptionValidationToken.",  buf,  0xCu);
                        }
                      }
                    }

                    char v325 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v390 + 64) _stringForKey:@"arc"]);
                    uint64_t v326 = objc_claimAutoreleasedReturnValue([*(id *)(v390 + 64) _stringForKey:@"are"]);
                    uint64_t v328 = (void *)v326;
                    if (v325)
                    {
                      v329 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v390 + 72) _stripFZIDPrefix]);
                      uint64_t v330 = (void *)objc_claimAutoreleasedReturnValue([v385 _stripFZIDPrefix]);
                      v331 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate __im_iMessageDateFromTimeStamp:]( &OBJC_CLASS___NSDate,  "__im_iMessageDateFromTimeStamp:",  *(void *)(v390 + 128)));
                      if (IMOSLoggingEnabled(v331, v332))
                      {
                        uint64_t v333 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
                        uint64_t v334 = (os_log_s *)objc_claimAutoreleasedReturnValue(v333);
                        if (os_log_type_enabled(v334, OS_LOG_TYPE_INFO))
                        {
                          *(_DWORD *)buf = 138412802;
                          *(void *)v419 = v325;
                          *(_WORD *)&v419[8] = 2112;
                          *(void *)&v419[10] = v329;
                          *(_WORD *)&v419[18] = 2112;
                          *(void *)&v419[20] = v330;
                          _os_log_impl( &dword_0,  v334,  OS_LOG_TYPE_INFO,  "Received availabilityVerificationRecipientChannelID = %@ from %@ to %@",  buf,  0x20u);
                        }
                      }

                      v335 = (void *)objc_claimAutoreleasedReturnValue( +[IMDAvailabilityVerificationManager sharedInstance]( &OBJC_CLASS___IMDAvailabilityVerificationManager,  "sharedInstance"));
                      [v335 verifyPersonalSubscriptionMatchesSubscriptionValidationToken:v325 encryptionValidationToken:v328 receivedB yHandleID:v330 fromHandleID:v329 messageDate:v331];
                    }

                    else if (IMOSLoggingEnabled(v326, v327))
                    {
                      uint64_t v336 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
                      __int16 v337 = (os_log_s *)objc_claimAutoreleasedReturnValue(v336);
                      if (os_log_type_enabled(v337, OS_LOG_TYPE_INFO))
                      {
                        uint64_t v338 = *(void *)(v390 + 72);
                        *(_DWORD *)buf = 138412290;
                        *(void *)v419 = v338;
                        _os_log_impl( &dword_0,  v337,  OS_LOG_TYPE_INFO,  "Message from %@ did not contain an availabilityVerificationRecipientChannelID. Not performing validation.",  buf,  0xCu);
                      }
                    }

                    uint64_t v298 = v390;
                  }
                }

                objc_msgSend(*(id *)(v298 + 40), "_autoReportChatAsUnknown:chatIsNew:");
                uint64_t v339 = v390;
                if (*(_BYTE *)(v390 + 295)) {
                  goto LABEL_364;
                }
                if (*(_BYTE *)(v390 + 291)
                  && (id v340 = *(void **)(v390 + 40),
                      v341 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate __im_iMessageDateFromTimeStamp:]( NSDate,  "__im_iMessageDateFromTimeStamp:",  *(void *)(v390 + 128))),  LODWORD(v340) = [v340 _shouldOptimizedDeliveryReceiptForConversation:v389 withMessageTimeStamp:v341],  v341,  uint64_t v339 = v390,  (_DWORD)v340))
                {
                  int v344 = IMOSLoggingEnabled(v342, v343);
                  uint64_t v339 = v390;
                  if (!v344)
                  {
LABEL_364:
                    uint64_t v370 = *(void *)(v339 + 240);
                    if (v370)
                    {
                      if (*(_BYTE *)(v339 + 284))
                      {
                        [*(id *)(v339 + 40) noteLastItemProcessed];
                        uint64_t v370 = *(void *)(v390 + 240);
                      }

                      (*(void (**)(void))(v370 + 16))();
                    }

                    goto LABEL_369;
                  }

                  uint64_t v345 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
                  v346 = (os_log_s *)objc_claimAutoreleasedReturnValue(v345);
                  if (os_log_type_enabled(v346, OS_LOG_TYPE_INFO))
                  {
                    __int16 v347 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v390 + 32) guid]);
                    *(_DWORD *)buf = 138412290;
                    *(void *)v419 = v347;
                    _os_log_impl( &dword_0,  v346,  OS_LOG_TYPE_INFO,  "Not sending delivery receipt for msg with guid: %@ we belive it's been handled elsewhere",  buf,  0xCu);
                  }
                }

                else
                {
                  if (v373)
                  {
                    if (v374 && *(_BYTE *)(v339 + 289))
                    {
                      id v348 = 0LL;
                    }

                    else
                    {
                      id v348 = [*(id *)(v339 + 216) BOOLValue];
                      uint64_t v339 = v390;
                    }

                    __int16 v349 = *(void **)(v339 + 40);
                    id v350 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v339 + 120) service]);
                    uint64_t v351 = *(void *)(v390 + 224);
                    v352 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v390 + 32) guid]);
                    LOBYTE(v349) = [v349 _sendCertifiedDeliveryReceiptIfPossible:v350 messageContext:v351 guid:v352 messag eWasStored:1 needsDeliveryReceipt:v348 failureReason:0];

                    uint64_t v339 = v390;
                    if ((v349 & 1) == 0)
                    {
                      v353 = *(void **)(v390 + 40);
                      uint64_t v354 = *(void *)(v390 + 56);
                      uint64_t v355 = *(void *)(v390 + 192);
                      uint64_t v356 = *(void *)(v390 + 232);
                      v357 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v348));
                      uint64_t v358 = *(void *)(v390 + 96);
                      v359 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v390 + 120) account]);
                      [v353 sendDeliveryReceiptForMessageID:v354 toID:v355 deliveryContext:v356 needsDeliveryReceipt:v357 callerID:v358 account:v359];

                      uint64_t v339 = v390;
                    }
                  }

                  unsigned __int8 v360 = [*(id *)(v339 + 32) isTypingMessage];
                  uint64_t v339 = v390;
                  if ((v360 & 1) != 0) {
                    goto LABEL_364;
                  }
                  [*(id *)(v390 + 120) sendManualAckForMessageWithContext:*(void *)(v390 + 224)];
                  if (([*(id *)(v390 + 32) isFromMe] & 1) == 0)
                  {
                    v361 = (void *)objc_claimAutoreleasedReturnValue( +[IMMessageNotificationTimeManager sharedInstance]( &OBJC_CLASS___IMMessageNotificationTimeManager,  "sharedInstance"));
                    [v361 sendNotificationMessageIfNeededForIncomingMessageFromChatIdentifier:*(void *)(*(void *)(*(void *)(v390 + 248) + 8) + 40)];
                  }

                  v362 = (void *)objc_claimAutoreleasedReturnValue( +[IMMessageNotificationTimeManager sharedInstance]( &OBJC_CLASS___IMMessageNotificationTimeManager,  "sharedInstance"));
                  [v362 tearDownSessionForChatIdentifier:*(void *)(*(void *)(*(void *)(v390 + 248) + 8) + 40)];

                  __int128 v393 = 0u;
                  __int128 v394 = 0u;
                  __int128 v391 = 0u;
                  __int128 v392 = 0u;
                  v363 = (void *)objc_claimAutoreleasedReturnValue(+[IMDChatRegistry sharedInstance](&OBJC_CLASS___IMDChatRegistry, "sharedInstance"));
                  v364 = (void *)objc_claimAutoreleasedReturnValue( [v363 allExistingSupportedServiceChatsWithIdentifier:*(void *)(*(void *)(*(void *)(v390 + 248) + 8) + 40) style:v411]);

                  id v365 = [v364 countByEnumeratingWithState:&v391 objects:v412 count:16];
                  if (v365)
                  {
                    uint64_t v366 = *(void *)v392;
                    do
                    {
                      for (j = 0LL; j != v365; j = (char *)j + 1)
                      {
                        if (*(void *)v392 != v366) {
                          objc_enumerationMutation(v364);
                        }
                        v368 = *(void **)(*((void *)&v391 + 1) + 8LL * (void)j);
                        v369 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v390 + 32) guid]);
                        [v368 updateLastSeenMessageGuidIfNeeded:v369];
                      }

                      id v365 = [v364 countByEnumeratingWithState:&v391 objects:v412 count:16];
                    }

                    while (v365);
                  }
                }

                uint64_t v339 = v390;
                goto LABEL_364;
              }

              id v282 = *(void **)(v390 + 40);
              id v283 = (void *)objc_claimAutoreleasedReturnValue([v389 chatIdentifier]);
              LOBYTE(v372) = v374;
              objc_msgSend( v282,  "didUpdateChatStatus:chat:style:displayName:groupID:handleInfo:account:isBlackholed:",  2,  v283,  objc_msgSend(v389, "style"),  0,  0,  v383,  *(void *)(v390 + 80),  v372);
LABEL_289:

              goto LABEL_290;
            }

            id v205 = v389;
            id v206 = v205;
            if (!v384)
            {
              uint64_t v211 = v205;
              goto LABEL_233;
            }

            LOBYTE(v371) = v374;
            [*(id *)(v390 + 40) didJoinChat:*(void *)(*(void *)(*(void *)(v390 + 248) + 8) + 40) style:v411 displayName:*(void *)(v390 + 136) groupID:*(void *)(v390 + 144) handleInfo:v383 account:*(void *)(v390 + 80) isBlackholed:v371];
            BOOL v207 = *(_BYTE *)(v390 + 287) == 0;
            uint64_t v208 = (void *)objc_claimAutoreleasedReturnValue(+[IMDChatRegistry sharedInstance](&OBJC_CLASS___IMDChatRegistry, "sharedInstance"));
            uint64_t v209 = v208;
            if (v207)
            {
              uint64_t v211 = (void *)objc_claimAutoreleasedReturnValue( [v208 existingChatForID:*(void *)(*(void *)(*(void *)(v390 + 248) + 8) + 40) account:*(void *)(v390 + 80)]);
            }

            else
            {
              uint64_t v210 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v377, "allObjects"));
              uint64_t v211 = (void *)objc_claimAutoreleasedReturnValue( [v209 existingChatForIDs:v210 account:*(void *)(v390 + 80) displayName:*(void *)(v390 + 136) groupID:*(void *)(v390 + 144) style:43]);

              id v212 = [*(id *)(v390 + 144) length];
              if (!v212)
              {
LABEL_232:
                uint64_t v203 = v390;
LABEL_233:
                [*(id *)(v203 + 40) _fixParticipantsForChat:v211];
                _UpdateLastAddressedHandle(*(void **)(v390 + 48), *(void **)(v390 + 96), v211);
                if (v378) {
                  [v387 addObject:*(void *)(v390 + 32)];
                }
                goto LABEL_235;
              }

              if (IMOSLoggingEnabled(v212, v213))
              {
                uint64_t v214 = OSLogHandleForIMFoundationCategory("MessageService");
                id v215 = (os_log_s *)objc_claimAutoreleasedReturnValue(v214);
                if (os_log_type_enabled(v215, OS_LOG_TYPE_INFO))
                {
                  uint64_t v216 = *(void *)(v390 + 144);
                  *(_DWORD *)buf = 138412546;
                  *(void *)v419 = v216;
                  *(_WORD *)&v419[8] = 2112;
                  *(void *)&v419[10] = v211;
                  _os_log_impl( &dword_0,  v215,  OS_LOG_TYPE_INFO,  "     ** Setting group_id to %@ on chat %@, as we just got invited to it!",  buf,  0x16u);
                }
              }

              [v211 setGroupID:*(void *)(v390 + 144)];
              uint64_t v209 = (void *)objc_claimAutoreleasedReturnValue(+[IMDChatStore sharedInstance](&OBJC_CLASS___IMDChatStore, "sharedInstance"));
              [v209 storeChat:v211];
            }

            goto LABEL_232;
          }

          v116 = (void *)objc_claimAutoreleasedReturnValue( +[IMDAccountController sharedAccountController]( &OBJC_CLASS___IMDAccountController,  "sharedAccountController"));
          id v117 = [v116 activeAccountsAreEligibleForHawking];

          if (+[IMSpamFilterHelper isBlackholeEnabledForEligibleAccounts:]( &OBJC_CLASS___IMSpamFilterHelper,  "isBlackholeEnabledForEligibleAccounts:",  v117))
          {
            BOOL v118 = *(_BYTE *)(v390 + 287) == 0;
            v119 = (void *)objc_claimAutoreleasedReturnValue(+[IMMetricsCollector sharedInstance](&OBJC_CLASS___IMMetricsCollector, "sharedInstance"));
            v120 = v119;
            if (v118) {
              uint64_t v121 = 11LL;
            }
            else {
              uint64_t v121 = 12LL;
            }
            [v119 trackSpamEvent:v121];

            if ((v376 & 1) == 0)
            {
              id v140 = [v389 isBlackholed];
              int v142 = (int)v140;
              if ((_DWORD)v140)
              {
                BOOL v143 = *(_BYTE *)(v390 + 287) == 0;
                uint64_t v144 = (void *)objc_claimAutoreleasedReturnValue( +[IMMetricsCollector sharedInstance]( &OBJC_CLASS___IMMetricsCollector,  "sharedInstance"));
                v145 = v144;
                if (v143) {
                  uint64_t v146 = 13LL;
                }
                else {
                  uint64_t v146 = 14LL;
                }
                [v144 trackSpamEvent:v146];
              }

              uint64_t v127 = IMOSLoggingEnabled(v140, v141);
              if ((_DWORD)v127)
              {
                uint64_t v147 = OSLogHandleForIMFoundationCategory("MessageService");
                v148 = (os_log_s *)objc_claimAutoreleasedReturnValue(v147);
                if (os_log_type_enabled(v148, OS_LOG_TYPE_INFO))
                {
                  id v149 = (id)objc_claimAutoreleasedReturnValue([v389 chatIdentifier]);
                  uint64_t v150 = v149;
                  id v151 = @"NO";
                  if (v142) {
                    id v151 = @"YES";
                  }
                  *(_DWORD *)buf = 138412546;
                  *(void *)v419 = v149;
                  *(_WORD *)&v419[8] = 2112;
                  *(void *)&v419[10] = v151;
                  _os_log_impl( &dword_0,  v148,  OS_LOG_TYPE_INFO,  "Found existing chat (%@) with blackhole status: %@",  buf,  0x16u);
                }
              }

              goto LABEL_174;
            }

            id v122 = *(void **)(v390 + 40);
            uint64_t v123 = *(void *)(v390 + 72);
            uint64_t v124 = *(void *)(v390 + 96);
            if (*(_BYTE *)(v390 + 287))
            {
              id v125 = [v122 _shouldBlackholeGroupChatFromSender:v123 toRecipient:v124 withOtherParticipants:*(void *)(v390 + 160) forAccount:*(void *)(v390 + 80)];
              if ((_DWORD)v125)
              {
                uint64_t v127 = IMOSLoggingEnabled(v125, v126);
                if ((_DWORD)v127)
                {
                  uint64_t v129 = OSLogHandleForIMFoundationCategory("MessageService");
                  v130 = (os_log_s *)objc_claimAutoreleasedReturnValue(v129);
                  if (os_log_type_enabled(v130, OS_LOG_TYPE_INFO))
                  {
                    uint64_t v131 = *(void *)(v390 + 56);
                    uint64_t v132 = *(void *)(v390 + 72);
                    uint64_t v133 = *(void *)(v390 + 96);
                    *(_DWORD *)buf = 138412802;
                    *(void *)v419 = v131;
                    *(_WORD *)&v419[8] = 2112;
                    *(void *)&v419[10] = v132;
                    *(_WORD *)&v419[18] = 2112;
                    *(void *)&v419[20] = v133;
                    _os_log_impl( &dword_0,  v130,  OS_LOG_TYPE_INFO,  "Should blackhole group chat (%@) from (%@) to (%@)",  buf,  0x20u);
                  }

LABEL_172:
                  goto LABEL_173;
                }

                goto LABEL_173;
              }
            }

            else
            {
              id v152 = [v122 _shouldBlackholeChatFromSender:v123 toRecipient:v124 forAccount:*(void *)(v390 + 80)];
              if ((_DWORD)v152)
              {
                uint64_t v127 = IMOSLoggingEnabled(v152, v153);
                if ((_DWORD)v127)
                {
                  uint64_t v154 = OSLogHandleForIMFoundationCategory("MessageService");
                  v130 = (os_log_s *)objc_claimAutoreleasedReturnValue(v154);
                  if (os_log_type_enabled(v130, OS_LOG_TYPE_INFO))
                  {
                    uint64_t v155 = *(void *)(v390 + 56);
                    uint64_t v156 = *(void *)(v390 + 72);
                    uint64_t v157 = *(void *)(v390 + 96);
                    *(_DWORD *)buf = 138412802;
                    *(void *)v419 = v155;
                    *(_WORD *)&v419[8] = 2112;
                    *(void *)&v419[10] = v156;
                    *(_WORD *)&v419[18] = 2112;
                    *(void *)&v419[20] = v157;
                    _os_log_impl( &dword_0,  v130,  OS_LOG_TYPE_INFO,  "Should blackhole message (%@) from (%@) to (%@)",  buf,  0x20u);
                  }

                  goto LABEL_172;
                }

LABEL_173:
                int v142 = 1;
LABEL_174:
                int v158 = v142;
                if (v142)
                {
                  int v158 = v142;
                  if (!*(_BYTE *)(v390 + 287))
                  {
                    if (*(_BYTE *)(v390 + 289))
                    {
                      if (IMOSLoggingEnabled(v127, v128))
                      {
                        uint64_t v159 = OSLogHandleForIMEventCategory("MessageService");
                        uint64_t v160 = (os_log_s *)objc_claimAutoreleasedReturnValue(v159);
                        if (os_log_type_enabled(v160, OS_LOG_TYPE_INFO))
                        {
                          uint64_t v161 = *(void *)(v390 + 56);
                          uint64_t v162 = *(void *)(v390 + 72);
                          id v163 = (id)objc_claimAutoreleasedReturnValue([v389 chatIdentifier]);
                          *(_DWORD *)buf = 138412802;
                          *(void *)v419 = v161;
                          *(_WORD *)&v419[8] = 2112;
                          *(void *)&v419[10] = v162;
                          *(_WORD *)&v419[18] = 2112;
                          *(void *)&v419[20] = v163;
                          _os_log_impl( &dword_0,  v160,  OS_LOG_TYPE_INFO,  "Blackholing message (%@) from (%@) to (%@)",  buf,  0x20u);
                        }
                      }

                      v164 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v390 + 40) deliveryController]);
                      uint64_t v165 = *(void *)(v390 + 72);
                      uint64_t v166 = *(void *)(v390 + 96);
                      uint64_t v167 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(v390 + 40) idsAccountForURI:v166 IDSServiceName:@"com.apple.madrid"]);
                      v168 = *(void **)(v390 + 56);
                      v404[0] = _NSConcreteStackBlock;
                      v404[1] = 3221225472LL;
                      v404[2] = sub_13588;
                      v404[3] = &unk_D5958;
                      id v405 = v168;
                      [v164 sendMessageError:502 toToken:0 toID:v165 toGroup:0 fromID:v166 fromAccount:v167 forMessageID:v405 completionBlock:v404];

                      goto LABEL_185;
                    }

                    int v158 = 1;
                  }
                }

                if (v142)
                {
LABEL_185:
                  objc_msgSend( *(id *)(v390 + 32),  "setFlags:",  (unint64_t)objc_msgSend(*(id *)(v390 + 32), "flags") | 0x2000);
                  int v158 = 1;
                }

LABEL_186:
                int v374 = v158;
                if (+[IMSpamFilterHelper isInternationalSpamFilteringEnabled]( &OBJC_CLASS___IMSpamFilterHelper,  "isInternationalSpamFilteringEnabled")
                  && [v389 receivedBlackholeError])
                {
                  [v389 updateReceivedBlackholeError:0];
                  v169 = (void *)objc_claimAutoreleasedReturnValue(+[IMDChatStore sharedInstance](&OBJC_CLASS___IMDChatStore, "sharedInstance"));
                  v402[0] = _NSConcreteStackBlock;
                  v402[1] = 3221225472LL;
                  v402[2] = sub_13700;
                  v402[3] = &unk_D5980;
                  v402[4] = *(void *)(v390 + 40);
                  id v403 = *(id *)(v390 + 80);
                  [v169 remapMessageError:43 toError:0 forChat:v389 completion:v402];
                }

                goto LABEL_189;
              }
            }
          }

          int v158 = 0;
          goto LABEL_186;
        }

        id v134 = *(id *)(*(void *)(*(void *)(a1 + 256) + 8LL) + 40LL);
        unsigned int v28 = *(void **)(v32 + 40);
        *(void *)(v32 + 40) = v134;
      }

      goto LABEL_37;
    }

    id v14 = (void *)objc_claimAutoreleasedReturnValue(+[IMDFileTransferCenter sharedInstance](&OBJC_CLASS___IMDFileTransferCenter, "sharedInstance"));
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( [v14 guidsForStoredAttachmentPayloadDataURLs:v380 messageGUID:*(void *)(a1 + 56)]);

    [*(id *)(a1 + 48) setFileTransferGUIDs:v15];
LABEL_20:

    goto LABEL_31;
  }

  id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) balloonBundleID]);
  unsigned __int8 v17 = [v16 isEqualToString:IMBalloonPluginIdentifierRichLinks];

  int v20 = IMOSLoggingEnabled(v18, v19);
  if ((v17 & 1) != 0)
  {
    if (v20)
    {
      uint64_t v21 = OSLogHandleForIMFoundationCategory("PayloadAttachments");
      uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        id v23 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
        *(_DWORD *)buf = 138412290;
        *(void *)v419 = v23;
        _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_INFO,  "Did not download payload data for message %@ but we are continuing",  buf,  0xCu);
      }
    }

    uint64_t v15 = v388;
    id v388 = 0LL;
    goto LABEL_20;
  }

  if (v20)
  {
    uint64_t v24 = OSLogHandleForIMFoundationCategory("Warning");
    int v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
      *(_DWORD *)buf = 138412290;
      *(void *)v419 = v26;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_INFO,  "PayloadAttachments Failed downloading payload data for message %@",  buf,  0xCu);
    }
  }

  uint64_t v27 = *(void *)(a1 + 240);
  if (v27)
  {
    if (*(_BYTE *)(a1 + 284))
    {
      [*(id *)(a1 + 40) noteLastItemProcessed];
      uint64_t v27 = *(void *)(a1 + 240);
    }

    (*(void (**)(void))(v27 + 16))();
  }

LABEL_369:
}

void sub_13588(uint64_t a1, void *a2, void *a3, int a4, int a5)
{
  id v9 = a2;
  id v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (a4)
  {
    if (v11)
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory("MessageService");
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v14 = *(void *)(a1 + 32);
        int v18 = 138412290;
        uint64_t v19 = v14;
        _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEBUG, "Succesfully blackholed message: %@", (uint8_t *)&v18, 0xCu);
      }
    }
  }

  else if (v11)
  {
    uint64_t v15 = OSLogHandleForIMFoundationCategory("MessageService");
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v17 = *(void *)(a1 + 32);
      int v18 = 138412546;
      uint64_t v19 = v17;
      __int16 v20 = 1024;
      int v21 = a5;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEBUG,  "** Failed to blackhole message: (%@) with error: %d",  (uint8_t *)&v18,  0x12u);
    }
  }
}

void sub_13700(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v14;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v13 + 1) + 8LL * (void)v7);
        id v9 = (void *)objc_claimAutoreleasedReturnValue(+[IMDMessageStore sharedInstance](&OBJC_CLASS___IMDMessageStore, "sharedInstance"));
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 messageWithGUID:v8]);

        int v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) broadcasterForChatListeners]);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountID]);
        [v11 account:v12 chat:0 style:0 chatProperties:0 messageUpdated:v10];

        uint64_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v5);
  }
}

void sub_13864(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7 = a2;
  id v8 = a3;
  int v9 = IMOSLoggingEnabled();
  if (a4)
  {
    if (v9)
    {
      uint64_t v10 = OSLogHandleForIMFoundationCategory("MessageService");
      int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        int v12 = *(_DWORD *)(a1 + 40);
        uint64_t v13 = *(void *)(a1 + 32);
        int v17 = 67109378;
        int v18 = v12;
        __int16 v19 = 2112;
        uint64_t v20 = v13;
        _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEBUG,  "Finished sending attachment download error: %d  to token: %@",  (uint8_t *)&v17,  0x12u);
      }

LABEL_9:
    }
  }

  else if (v9)
  {
    uint64_t v14 = OSLogHandleForIMFoundationCategory("MessageService");
    int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      int v15 = *(_DWORD *)(a1 + 40);
      uint64_t v16 = *(void *)(a1 + 32);
      int v17 = 67109378;
      int v18 = v15;
      __int16 v19 = 2112;
      uint64_t v20 = v16;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEBUG,  "** Failed sending attachment download error: %d  to token: %@",  (uint8_t *)&v17,  0x12u);
    }

    goto LABEL_9;
  }
}

    v12[2](v12, 0LL, 0LL);
    goto LABEL_21;
  }

  int v18 = (void *)objc_claimAutoreleasedReturnValue(-[MessageServiceSession idsServiceForIDSAccount:](self, "idsServiceForIDSAccount:", v9));
  if (v18)
  {
    __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(-[MessageServiceSession groupController](self, "groupController"));
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472LL;
    v26[2] = sub_189D4;
    v26[3] = &unk_D5BD0;
    uint64_t v27 = v8;
    unsigned int v28 = v12;
    [v19 engroupForChat:v27 service:v18 completionBlock:v26];
  }

  else
  {
    if (IMOSLoggingEnabled(0LL, v17))
    {
      uint64_t v24 = OSLogHandleForIMFoundationCategory("Warning");
      int v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v30 = v8;
        _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_INFO,  "Got a nil service back when trying to look up engroup for chat: %@",  buf,  0xCu);
      }
    }

    v12[2](v12, 0LL, 0LL);
  }

LABEL_21:
}
    }
  }

  else if (v9)
  {
    int v12 = OSLogHandleForIMFoundationCategory("Warning");
    int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = 138412290;
      uint64_t v14 = v8;
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_INFO, "*** Failed to leave chat: %@", (uint8_t *)&v13, 0xCu);
    }

    goto LABEL_9;
  }
}
    }
  }

  else if (v9)
  {
    uint64_t v14 = OSLogHandleForIMFoundationCategory("MessageService");
    int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      int v15 = *(void *)(a1 + 32);
      uint64_t v16 = *(void *)(a1 + 40);
      int v17 = 138412546;
      int v18 = v15;
      __int16 v19 = 2112;
      uint64_t v20 = v16;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_INFO,  "Failed sending nickname info for guid: %@    to people:  %@",  (uint8_t *)&v17,  0x16u);
    }

    goto LABEL_9;
  }
}
  }
}
  }
}
    }
  }

  else if (IMOSLoggingEnabled(v5, v6))
  {
    uint64_t v14 = OSLogHandleForIMFoundationCategory("MessageService_GroupPhoto");
    int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      int v15 = *(void *)(a1 + 64);
      uint64_t v16 = 138412546;
      int v17 = v15;
      int v18 = 2112;
      __int16 v19 = v7;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_INFO,  " => failed storing safe transfer (%@) with error: %@",  (uint8_t *)&v16,  0x16u);
    }

    goto LABEL_9;
  }
}
    }
  }

  else if (v10)
  {
    int v15 = OSLogHandleForIMFoundationCategory("MessageService");
    int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = *(_DWORD *)(a1 + 40);
      int v17 = *(void *)(a1 + 32);
      int v18 = 67109378;
      __int16 v19 = v16;
      uint64_t v20 = 2112;
      int v21 = v17;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "** Failed sending attachment download error: %d  to token: %@",  (uint8_t *)&v18,  0x12u);
    }

    goto LABEL_9;
  }
}
  }
}
  }
}

void sub_139E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = im_checkpointIDSService();
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  im_sendMessageCheckpointIfNecessary(v5, 10200LL, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 88));

  uint64_t v16 = _NSConcreteStackBlock;
  uint64_t v17 = 3221225472LL;
  int v18 = sub_13BA4;
  __int16 v19 = &unk_D5A70;
  id v21 = *(id *)(a1 + 72);
  id v6 = v3;
  char v23 = *(_BYTE *)(a1 + 89);
  uint64_t v7 = *(void *)(a1 + 40);
  id v22 = v6;
  uint64_t v20 = v7;
  id v8 = objc_retainBlock(&v16);
  if (*(_BYTE *)(a1 + 89)) {
    [*(id *)(a1 + 40) noteLastItemProcessed];
  }
  uint64_t v24 = *(void *)(a1 + 48);
  BOOL v9 = 1LL;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v24, 1LL));
  uint64_t v11 = IMServiceNameForCanonicalIDSAddresses();
  int v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[IMSenderContext businessChatContextWithServiceName:]( &OBJC_CLASS___IMSenderContext,  "businessChatContextWithServiceName:",  v12));
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) attachmentController]);
  int v15 = v14;
  if (!*(_BYTE *)(a1 + 90)) {
    BOOL v9 = *(_BYTE *)(a1 + 91) != 0;
  }
  objc_msgSend( v14,  "retrieveAttachmentsForMessage:inlineAttachments:displayID:topic:comingFromStorage:shouldForceAutoDownload:senderCont ext:completionBlock:",  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40),  v12,  v9,  0,  v13,  v8,  v16,  v17,  v18,  v19);
}

void sub_13BA4(uint64_t a1, void *a2, void *a3, char a4, int a5, void *a6, uint64_t a7, void *a8)
{
  id v15 = a2;
  id v16 = a3;
  id v17 = a6;
  id v18 = a8;
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472LL;
  v37[2] = sub_13E34;
  v37[3] = &unk_D5A20;
  id v43 = *(id *)(a1 + 40);
  id v19 = v15;
  id v38 = v19;
  id v20 = v16;
  id v39 = v20;
  char v47 = a4;
  int v46 = a5;
  id v21 = v17;
  id v40 = v21;
  uint64_t v45 = a7;
  id v22 = v18;
  id v41 = v22;
  id v23 = *(id *)(a1 + 48);
  char v48 = *(_BYTE *)(a1 + 56);
  uint64_t v24 = *(void *)(a1 + 32);
  id v44 = v23;
  uint64_t v42 = v24;
  int v25 = objc_retainBlock(v37);
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v19 balloonBundleID]);
  uint64_t v27 = IMBalloonExtensionIDWithSuffix(IMBalloonPluginIdentifierSurf);
  unsigned int v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
  LODWORD(v15) = [v26 isEqualToString:v28];

  if ((_DWORD)v15)
  {
    else {
      uint64_t v29 = objc_claimAutoreleasedReturnValue(+[IMSenderContext businessChatContext](&OBJC_CLASS___IMSenderContext, "businessChatContext"));
    }
    uint64_t v30 = (void *)v29;
    id v31 = (void *)objc_claimAutoreleasedReturnValue( +[MessageTranscodeController sharedInstance]( &OBJC_CLASS___MessageTranscodeController,  "sharedInstance"));
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v19 guid]);
    char v33 = (void *)objc_claimAutoreleasedReturnValue([v19 payloadData]);
    id v34 = (void *)objc_claimAutoreleasedReturnValue([v19 balloonBundleID]);
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472LL;
    v35[2] = sub_13EA8;
    v35[3] = &unk_D5A48;
    id v36 = v25;
    [v31 generateSnapshotForMessageGUID:v32 payloadData:v33 balloonBundleID:v34 senderContext:v30 completionBlock:v35];
  }

  else
  {
    ((void (*)(void *))v25[2])(v25);
  }
}

uint64_t sub_13E34(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, void, void, void, void, void, void, void, void))(v2 + 16))( v2,  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(unsigned __int8 *)(a1 + 100),  *(unsigned int *)(a1 + 96),  *(void *)(a1 + 48),  *(void *)(a1 + 88),  *(void *)(a1 + 56),  *(void *)(a1 + 80));
  }
  if (*(_BYTE *)(a1 + 101)) {
    [*(id *)(a1 + 64) noteLastItemProcessed];
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 80) + 16LL))();
}

uint64_t sub_13EA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_14128(uint64_t a1, void *a2)
{
  id v4 = a2;
  objc_msgSend( *(id *)(a1 + 32),  "_handleNicknameReceived:fromIdentifier:withMessageItem:isSnapTrustedUser:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  0,  objc_msgSend(*(id *)(a1 + 56), "BOOLValueForKey:withDefault:", @"stu", 1));
  id v3 = v4;
  if (v4)
  {
    (*((void (**)(id))v4 + 2))(v4);
    id v3 = v4;
  }
}

void sub_15C20(uint64_t a1, void *a2)
{
  id v4 = a2;
  [*(id *)(a1 + 32) _handleDeleteCommandWithMessageDictionary:*(void *)(a1 + 40)];
  id v3 = v4;
  if (v4)
  {
    (*((void (**)(id))v4 + 2))(v4);
    id v3 = v4;
  }
}

void sub_15FF8(uint64_t a1, void *a2)
{
  id v4 = a2;
  [*(id *)(a1 + 32) recoverChatsForCommandDictionary:*(void *)(a1 + 40)];
  id v3 = v4;
  if (v4)
  {
    (*((void (**)(id))v4 + 2))(v4);
    id v3 = v4;
  }
}

void sub_16318(uint64_t a1, void *a2)
{
  uint64_t v42 = a2;
  uint64_t v4 = IMOSLoggingEnabled(v42, v3);
  if ((_DWORD)v4)
  {
    uint64_t v6 = OSLogHandleForIMEventCategory("MessageService");
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      BOOL v9 = *(const __CFString **)(a1 + 40);
      uint64_t v10 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138412802;
      uint64_t v44 = v8;
      __int16 v45 = 2112;
      int v46 = v9;
      __int16 v47 = 2112;
      uint64_t v48 = v10;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_INFO,  "Received group message command: %@ from: %@   token: %@",  buf,  0x20u);
    }
  }

  if (IMOSLoggingEnabled(v4, v5))
  {
    uint64_t v11 = OSLogHandleForIMFoundationCategory("MessageService");
    int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = *(void *)(a1 + 56);
      if (*(void *)(a1 + 64)) {
        uint64_t v14 = @"YES";
      }
      else {
        uint64_t v14 = @"NO";
      }
      uint64_t v15 = *(void *)(a1 + 72);
      *(_DWORD *)buf = 138412802;
      uint64_t v44 = v13;
      __int16 v45 = 2112;
      int v46 = v14;
      __int16 v47 = 2112;
      uint64_t v48 = v15;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_INFO,  "fromIDSID:%@, needsDeliveryReceipt %@, deliveryContext %@",  buf,  0x20u);
    }
  }

  id v16 = *(id *)(a1 + 32);
  id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) _FTOptionallyDecompressData]);
  uint64_t v18 = JWDecodeDictionary(v17);
  id v19 = (void *)objc_claimAutoreleasedReturnValue(v18);

  if (v19)
  {
    if (IMOSLoggingEnabled(v20, v21))
    {
      uint64_t v22 = OSLogHandleForIMFoundationCategory("MessageService");
      id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v23, OS_LOG_TYPE_INFO, "Using encrypted group payload", buf, 2u);
      }
    }

    id v24 = v19;

    id v16 = v24;
  }

  int v25 = *(void **)(a1 + 88);
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 96) account]);
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v25 imdAccountForIDSAccount:v26]);

  unsigned int v28 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:@"rp"]);
  if (v28
    && (unsigned __int8 v29 = [*(id *)(a1 + 88) isReplicating], v28, (v29 & 1) == 0))
  {
    id v36 = (void *)objc_claimAutoreleasedReturnValue(+[IMDServiceController sharedController](&OBJC_CLASS___IMDServiceController, "sharedController"));
    id v37 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:@"rp"]);
    id v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "serviceWithReplicationSourceID:", objc_msgSend(v37, "integerValue")));

    id v39 = (void *)objc_claimAutoreleasedReturnValue( +[IMDAccountController sharedAccountController]( &OBJC_CLASS___IMDAccountController,  "sharedAccountController"));
    id v40 = (void *)objc_claimAutoreleasedReturnValue([v38 internalName]);
    id v41 = (void *)objc_claimAutoreleasedReturnValue([v39 sessionForReplicationSourceServiceName:v40 replicatingAccount:v27]);

    [v41 handler:*(void *)(a1 + 96) groupMessageCommand:*(void *)(a1 + 32) encryptedGroupCommand:*(void *)(a1 + 80) messageID:*(void *)(a1 + 104) toIdentifier:*(void *)(a1 + 112) fromIdentifier:*(void *)(a1 + 40) fromToken:*(void *)(a1 + 48) timeStamp:*(void *)(a1 + 120) fromID SID:*(void *)(a1 + 56) needsDeliveryReceipt:*(void *)(a1 + 64) deliveryContext:*(void *)(a1 + 72) storageContext:*(void *)(a1 + 128)];
    if (v42) {
      v42[2]();
    }
  }

  else
  {
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 88) groupController]);
    uint64_t v31 = *(void *)(a1 + 88);
    uint64_t v32 = *(void *)(a1 + 104);
    uint64_t v33 = *(void *)(a1 + 112);
    uint64_t v34 = *(void *)(a1 + 40);
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 96) service]);
    [v30 handler:v31 account:v27 groupMessagePayload:v16 messageID:v32 toIdentifier:v33 fromIdentifier:v34 idsService:v35 fromToken:*(void *)(a1 + 48) timeStamp:*(void *)(a1 + 120) storageContext:*(void *)(a1 + 128)];

    if (v42) {
      v42[2]();
    }
  }
}

void sub_16B68(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[IMDMessageStore sharedInstance](&OBJC_CLASS___IMDMessageStore, "sharedInstance"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 messageWithGUID:*(void *)(a1 + 32)]);

  if (v5)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[IMDMessageStore sharedInstance](&OBJC_CLASS___IMDMessageStore, "sharedInstance"));
    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v8 chatForMessage:v5]);

    if (v9)
    {
      int v12 = (void *)objc_claimAutoreleasedReturnValue([v5 balloonBundleID]);
      unsigned __int8 v13 = [v12 isEqualToString:*(void *)(a1 + 40)];

      if ((v13 & 1) != 0)
      {
        uint64_t v30 = _NSConcreteStackBlock;
        uint64_t v31 = 3221225472LL;
        uint64_t v32 = sub_16F30;
        uint64_t v33 = &unk_D5B60;
        id v16 = v5;
        uint64_t v17 = *(void *)(a1 + 48);
        id v34 = v16;
        uint64_t v35 = v17;
        id v36 = v9;
        id v37 = *(id *)(a1 + 32);
        id v38 = *(id *)(a1 + 56);
        id v39 = v3;
        uint64_t v18 = objc_retainBlock(&v30);
        if (objc_msgSend(*(id *)(a1 + 64), "length", v30, v31, v32, v33) && !objc_msgSend(*(id *)(a1 + 72), "count"))
        {
          id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) attachmentController]);
          uint64_t v29 = *(void *)(a1 + 64);
          uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v16 guid]);
          [v19 processDownloadedPayloadData:v29 forMessageGUID:v21 balloonBundleID:*(void *)(a1 + 40) fromIdentifier:*(void *)(a1 + 80) senderToken:*(void *)(a1 + 88) withCompletionBlock:v18];
        }

        else
        {
          id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) attachmentController]);
          uint64_t v20 = *(void *)(a1 + 72);
          uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v16 guid]);
          [v19 processMessageAttachmentDictionary:v20 forMessageGUID:v21 balloonBundleID:*(void *)(a1 + 40) fromIdentifier:*(void *)(a1 + 80) senderToken:*(void *)(a1 + 88) withCompletionBlock:v18];
        }

        goto LABEL_24;
      }

      if (IMOSLoggingEnabled(v14, v15))
      {
        uint64_t v27 = OSLogHandleForIMFoundationCategory("Warning");
        unsigned int v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          id v41 = v5;
          _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_INFO,  "PayloadAttachmentsBubbleUpdate: Could not find a chat for message: %@",  buf,  0xCu);
        }
      }
    }

    else if (IMOSLoggingEnabled(v10, v11))
    {
      uint64_t v25 = OSLogHandleForIMFoundationCategory("Warning");
      uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v41 = v5;
        _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_INFO,  "PayloadAttachmentsBubbleUpdate: Could not find a chat for message: %@",  buf,  0xCu);
      }
    }

    v3[2](v3);
LABEL_24:

    goto LABEL_25;
  }

  if (IMOSLoggingEnabled(v6, v7))
  {
    uint64_t v22 = OSLogHandleForIMFoundationCategory("Warning");
    id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      id v24 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      id v41 = v24;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_INFO,  "PayloadAttachmentsBubbleUpdate: Could not find chat for balloon payload for missing message GUID: %@",  buf,  0xCu);
    }
  }

  v3[2](v3);
LABEL_25:
}

void sub_16F30(uint64_t a1, void *a2, void *a3)
{
  id v22 = a2;
  id v21 = a3;
  id v5 = [v21 count];
  if (v5)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[IMDFileTransferCenter sharedInstance](&OBJC_CLASS___IMDFileTransferCenter, "sharedInstance"));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v7 guidsForStoredAttachmentPayloadDataURLs:v21 messageGUID:v8]);
  }

  else
  {
    BOOL v9 = 0LL;
  }

  if (IMOSLoggingEnabled(v5, v6))
  {
    uint64_t v10 = OSLogHandleForIMFoundationCategory("PayloadAttachmentsBubbleUpdate");
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218240;
      id v24 = [v22 length];
      __int16 v25 = 2048;
      id v26 = [v21 count];
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_INFO, "Updating payload to length: %lu with attachments: %lu", buf, 0x16u);
    }
  }

  [*(id *)(a1 + 32) setPayloadData:v22];
  if ([v9 count]) {
    [*(id *)(a1 + 32) setFileTransferGUIDs:v9];
  }
  int v12 = *(void **)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) chatIdentifier]);
  id v15 = [*(id *)(a1 + 48) style];
  id v16 = *(void **)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) account]);
  id v19 = (void *)objc_claimAutoreleasedReturnValue([v16 imdAccountForIDSAccount:v18]);
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 accountID]);
  [v12 didReceiveBalloonPayload:v13 forChat:v14 style:v15 messageGUID:v17 account:v20];

  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
}

void sub_17DCC(id a1, MessageDeliveryController *a2, NSArray *a3, BOOL a4, unsigned int a5, BOOL a6)
{
  BOOL v7 = a4;
  BOOL v9 = a2;
  uint64_t v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (v7)
  {
    if (v11)
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory("MessageService");
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        int v16 = 138412290;
        uint64_t v17 = v10;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_INFO,  "Finished sending P2P group message to person: %@",  (uint8_t *)&v16,  0xCu);
      }
    }
  }

  else if (v11)
  {
    uint64_t v14 = OSLogHandleForIMFoundationCategory("MessageService");
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      int v16 = 138412546;
      uint64_t v17 = v10;
      __int16 v18 = 1024;
      unsigned int v19 = a5;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_INFO,  "Failed sending P2P group message to people: %@  error: %d",  (uint8_t *)&v16,  0x12u);
    }
  }
}

void sub_182FC(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = a3;
  if (IMOSLoggingEnabled())
  {
    uint64_t v9 = OSLogHandleForIMFoundationCategory("MessageService");
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      int v11 = @"NO";
      uint64_t v12 = *(void *)(a1 + 32);
      if ((_DWORD)a4) {
        int v11 = @"YES";
      }
      int v14 = 138412546;
      uint64_t v15 = v12;
      __int16 v16 = 2112;
      uint64_t v17 = v11;
      _os_log_impl(&dword_0, v10, OS_LOG_TYPE_INFO, "Sent sharing info to %@ with success? %@", (uint8_t *)&v14, 0x16u);
    }
  }

  uint64_t v13 = *(void *)(a1 + 40);
  if (v13) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v13, a4);
  }
}

void sub_189D4(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a6;
  if (v13 && IMOSLoggingEnabled())
  {
    uint64_t v14 = OSLogHandleForIMFoundationCategory("Warning");
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      int v17 = 138412546;
      uint64_t v18 = v16;
      __int16 v19 = 2112;
      id v20 = v13;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_INFO,  "Error when looking up engroup for chat: %@ error: %@",  (uint8_t *)&v17,  0x16u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_190C4(uint64_t a1, void *a2, void *a3, void *a4, int a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  uint64_t v13 = IMOSLoggingEnabled(v11, v12);
  if (a5)
  {
    if (!(_DWORD)v13) {
      goto LABEL_10;
    }
    uint64_t v15 = OSLogHandleForIMFoundationCategory("Groups");
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = *(void *)(a1 + 32);
      int v25 = 138412802;
      uint64_t v26 = v17;
      __int16 v27 = 2112;
      id v28 = v10;
      __int16 v29 = 2112;
      id v30 = v11;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_INFO,  "Successfully invited people: %@  to chat: %@  new participants: %@",  (uint8_t *)&v25,  0x20u);
    }
  }

  else
  {
    if (!(_DWORD)v13) {
      goto LABEL_10;
    }
    uint64_t v18 = OSLogHandleForIMFoundationCategory("Warning");
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = *(void *)(a1 + 32);
      int v25 = 138412802;
      uint64_t v26 = v19;
      __int16 v27 = 2112;
      id v28 = v10;
      __int16 v29 = 2112;
      id v30 = v11;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_INFO,  "*** Failed to invite invite people: %@  to chat: %@  resulting participants: %@",  (uint8_t *)&v25,  0x20u);
    }
  }

LABEL_10:
  if (IMOSLoggingEnabled(v13, v14))
  {
    uint64_t v20 = OSLogHandleForIMFoundationCategory("Groups");
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      LOWORD(v25) = 0;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_INFO,  "Finished inviting participants to chat --> sending out notification to dismiss spinner if we have one",  (uint8_t *)&v25,  2u);
    }
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v23 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained broadcasterForChatListeners]);
  id v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) guid]);
  [v23 engroupParticipantsUpdatedForChat:v24];
}

id sub_1A560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, int a6)
{
  HIDWORD(v7) = a6;
  BYTE1(v7) = *(_BYTE *)(a1 + 72);
  LOBYTE(v7) = a5;
  return objc_msgSend( *(id *)(a1 + 32),  "groupPhotoUploadCompletedForChat:fileTransferGuid:callerURI:fromAccount:message:displayIDs:additionalContext: success:isPhotoRefresh:error:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  a2,  a3,  a4,  v7);
}

void sub_1A5B4(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  uint64_t v13 = IMOSLoggingEnabled(v11, v12);
  if ((_DWORD)v13)
  {
    uint64_t v15 = OSLogHandleForIMFoundationCategory("MessageService_GroupPhoto");
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      id v17 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
      uint64_t v18 = *(void *)(a1 + 40);
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a4));
      int v23 = 138413570;
      id v24 = v17;
      __int16 v25 = 2112;
      uint64_t v26 = v18;
      __int16 v27 = 2112;
      id v28 = v9;
      __int16 v29 = 2112;
      id v30 = v10;
      __int16 v31 = 2112;
      uint64_t v32 = v19;
      __int16 v33 = 2112;
      id v34 = v11;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_INFO,  "upload group photo failed. chatGuid %@ fileTransferGuid %@ transferError %@ requestURLString %@ outFileSize %@ a dditionalErrorInfo %@",  (uint8_t *)&v23,  0x3Eu);
    }
  }

  if (IMOSLoggingEnabled(v13, v14))
  {
    uint64_t v20 = OSLogHandleForIMFoundationCategory("MessageService_GroupPhoto");
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      id v22 = *(void **)(a1 + 32);
      int v23 = 138412290;
      id v24 = v22;
      _os_log_impl(&dword_0, v21, OS_LOG_TYPE_INFO, " => chat: %@", (uint8_t *)&v23, 0xCu);
    }
  }

  [*(id *)(a1 + 48) groupPhotoUploadFailedForChat:*(void *)(a1 + 32) fileTransferGuid:*(void *)(a1 + 40)];
}

LABEL_30:
}
}

  result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

void sub_1B710(uint64_t a1, void *a2, void *a3, void *a4, int a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  uint64_t v13 = IMOSLoggingEnabled(v11, v12);
  if (a5)
  {
    if (!(_DWORD)v13) {
      goto LABEL_10;
    }
    uint64_t v15 = OSLogHandleForIMFoundationCategory("Groups");
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = *(void *)(a1 + 32);
      int v24 = 138412802;
      uint64_t v25 = v17;
      __int16 v26 = 2112;
      id v27 = v10;
      __int16 v28 = 2112;
      id v29 = v11;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_INFO,  "Successfully removed people: %@  from chat: %@  new participants: %@",  (uint8_t *)&v24,  0x20u);
    }
  }

  else
  {
    if (!(_DWORD)v13) {
      goto LABEL_10;
    }
    uint64_t v18 = OSLogHandleForIMFoundationCategory("Warning");
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = *(void *)(a1 + 32);
      int v24 = 138412802;
      uint64_t v25 = v19;
      __int16 v26 = 2112;
      id v27 = v10;
      __int16 v28 = 2112;
      id v29 = v11;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_INFO,  "*** Failed to remove people: %@  from chat: %@  resulting participants: %@",  (uint8_t *)&v24,  0x20u);
    }
  }

LABEL_10:
  if (IMOSLoggingEnabled(v13, v14))
  {
    uint64_t v20 = OSLogHandleForIMFoundationCategory("Groups");
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      LOWORD(v24) = 0;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_INFO,  "Finished removing participants from chat --> sending out notification to dismiss spinner if we have one",  (uint8_t *)&v24,  2u);
    }
  }

  id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) broadcasterForChatListeners]);
  int v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) guid]);
  [v22 engroupParticipantsUpdatedForChat:v23];
}

void sub_1BCE4(id a1, MessageGroupController *a2, IMDChat *a3, BOOL a4, unsigned int a5)
{
  BOOL v5 = a4;
  uint64_t v7 = a2;
  id v8 = a3;
  int v9 = IMOSLoggingEnabled();
  if (v5)
  {
    if (v9)
    {
      uint64_t v10 = OSLogHandleForIMFoundationCategory("Groups");
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        int v13 = 138412290;
        uint64_t v14 = v8;
        _os_log_impl(&dword_0, v11, OS_LOG_TYPE_INFO, "Successfully left chat: %@", (uint8_t *)&v13, 0xCu);
      }

id sub_1C1D8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _flushQueuedMessageWrapperBlocks];
}

LABEL_27:
    if (IMOSLoggingEnabled(v20, v21))
    {
      id v22 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
      int v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        int v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  0LL));
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v6));
        *(_DWORD *)buf = 138412546;
        id v39 = v24;
        id v40 = 2112;
        id v41 = v25;
        _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_INFO,  "MessageServiceSession removing objects in range.location%@ range.length%@",  buf,  0x16u);
      }
    }

    __int16 v26 = objc_msgSend(*(id *)&self->IMDAppleServiceSession_opaque[v32], "removeObjectsInRange:", 0, v6);
    if (IMOSLoggingEnabled(v26, v27))
    {
      __int16 v28 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
      id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        id v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)&self->IMDAppleServiceSession_opaque[v32] count]));
        __int16 v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)&self->IMDAppleServiceSession_opaque[v32] firstObject]);
        *(_DWORD *)buf = 138412546;
        id v39 = v30;
        id v40 = 2112;
        id v41 = v31;
        _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_INFO,  "_flushQueuedMessageWrapperBlocks state at the end of dequeuing [_pendingSendBlockQueue count] %@ first block %@",  buf,  0x16u);
      }
    }
  }
    }
  }

  uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s firstObject](v79, "firstObject"));
  else {
    id v43 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s objectAtIndex:](v79, "objectAtIndex:", 1LL));
  }
  uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(+[IMMetricsCollector sharedInstance](&OBJC_CLASS___IMMetricsCollector, "sharedInstance"));
  __int16 v45 = *(void *)(a1 + 88);
  int v46 = *(void *)(a1 + 40);
  __int16 v47 = *(void *)(a1 + 48);
  uint64_t v48 = [*(id *)(a1 + 32) isSticker];
  BYTE1(v71) = *(_BYTE *)(a1 + 96);
  LOBYTE(v71) = a7;
  objc_msgSend( v44,  "trackiMessageTranscodeWithReason:sourceFile:highQualityFile:lowQualityFile:sizeLimits:isSticker:transcoded:lowQualityModeEnabled:",  v45,  v46,  v42,  v43,  v47,  v48,  v71);

  if ((IMOSLoggingEnabled(v49, v50) & 1) != 0)
  {
    id v51 = OSLogHandleForIMFoundationCategory("Attachments");
    uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
    if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v88 = v79;
      _os_log_impl(&dword_0, v52, OS_LOG_TYPE_INFO, "All URLs: %@", buf, 0xCu);
    }
  }

  uint64_t v53 = *(void *)(a1 + 72);
  if (v53) {
    (*(void (**)(uint64_t, void, os_log_s *, id))(v53 + 16))(v53, *(void *)(a1 + 32), v79, v76);
  }
  uint64_t v54 = (char *)-[os_log_s count](v79, "count") - 1;
  if ((uint64_t)v54 >= 0)
  {
    while (1)
    {
      id v55 = (char *)-[os_log_s count](v79, "count");
      id v56 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s objectAtIndex:](v79, "objectAtIndex:", v54));
      id v57 = v54 + 1;
      uint64_t v58 = v54 + 1 == v55;
      dispatch_group_enter(*(dispatch_group_t *)(a1 + 64));
      id v59 = (void *)objc_claimAutoreleasedReturnValue( +[IMTransferServicesCompressionController sharedInstance]( &OBJC_CLASS___IMTransferServicesCompressionController,  "sharedInstance"));
      v80[0] = _NSConcreteStackBlock;
      v80[1] = 3221225472LL;
      v80[2] = sub_533EC;
      v80[3] = &unk_D6CF0;
      BOOL v81 = *(id *)(a1 + 32);
      uint64_t v84 = *(id *)(a1 + 80);
      uint64_t v85 = a7;
      int v82 = *(id *)(a1 + 40);
      v86 = v58;
      uint64_t v83 = *(id *)(a1 + 64);
      [v59 compressFileTransfer:v56 completionBlock:v80];

      uint64_t v54 = v57 - 2;
    }
  }

  swift_bridgeObjectRelease_n(v8, 2LL);
}

    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    void *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain(v18);
  }

  id v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  id v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int v9 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    int v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    id v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

LABEL_18:
}
    }
  }

  else if (IMOSLoggingEnabled(0LL, v11))
  {
    uint64_t v18 = OSLogHandleForIMFoundationCategory("MessageService");
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      LOWORD(v20) = 0;
      _os_log_impl(&dword_0, v17, OS_LOG_TYPE_INFO, " => Empty property name", (uint8_t *)&v20, 2u);
    }

    goto LABEL_18;
  }
}
}

      int v61 = (const void *)IMStickerUserInfoStickerGUIDKey;
      id v27 = objc_msgSend(v8, "_stringForKey:");
      uint64_t v60 = (const void *)IMStickerUserInfoStickerPackGUIDKey;
      __int16 v28 = objc_msgSend(v8, "_stringForKey:");
      id v59 = (const void *)IMStickerUserInfoStickerHashKey;
      id v29 = objc_msgSend(v8, "_stringForKey:");
      uint64_t v58 = (const void *)IMStickerUserInfoLayoutIntentKey;
      id v30 = objc_msgSend(v8, "_stringForKey:");
      id v57 = (const void *)IMStickerUserInfoAssociatedLayoutIntentKey;
      __int16 v31 = objc_msgSend(v8, "_stringForKey:");
      key = (void *)IMStickerUserInfoParentPreviewWidthKey;
      uint64_t v32 = objc_msgSend(v8, "_stringForKey:");
      id v55 = (void *)IMStickerUserInfoXScalarKey;
      value = objc_msgSend(v8, "_stringForKey:");
      uint64_t v54 = (void *)IMStickerUserInfoYScalarKey;
      int v46 = objc_msgSend(v8, "_stringForKey:");
      uint64_t v53 = (void *)IMStickerUserInfoScaleKey;
      __int16 v45 = objc_msgSend(v8, "_stringForKey:");
      uint64_t v52 = (void *)IMStickerUserInfoRotationKey;
      uint64_t v44 = objc_msgSend(v8, "_stringForKey:");
      __int16 v33 = (const void *)IMStickerUserInfoStickerRecipeKey;
      id v43 = [v8 _stringForKey:IMStickerUserInfoStickerRecipeKey];
      id v34 = (const void *)IMStickerUserInfoStickerBundleIDKey;
      uint64_t v42 = [v8 _stringForKey:IMStickerUserInfoStickerBundleIDKey];
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      id v37 = Mutable;
      if (Mutable)
      {
        if (v27) {
          CFDictionarySetValue(Mutable, v61, v27);
        }
        if (v28) {
          CFDictionarySetValue(v37, v60, v28);
        }
        if (v29) {
          CFDictionarySetValue(v37, v59, v29);
        }
        if (v30) {
          CFDictionarySetValue(v37, v58, v30);
        }
        if (v31) {
          CFDictionarySetValue(v37, v57, v31);
        }
        if (v32) {
          CFDictionarySetValue(v37, key, v32);
        }
        if (value) {
          CFDictionarySetValue(v37, v55, value);
        }
        if (v46) {
          CFDictionarySetValue(v37, v54, v46);
        }
        if (v45) {
          CFDictionarySetValue(v37, v53, v45);
        }
        if (v44) {
          CFDictionarySetValue(v37, v52, v44);
        }
        if (v43) {
          CFDictionarySetValue(v37, v33, v43);
        }
        if (v42) {
          CFDictionarySetValue(v37, v34, v42);
        }
        [v64 setStickerUserInfo:v37];
      }

      else if (IMOSLoggingEnabled(0LL, v36))
      {
        id v38 = (os_log_s *)OSLogHandleForIMFoundationCategory("Warning");
        if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_INFO,  "MessageToSuperParser could not init stickerInfoDictionary",  buf,  2u);
        }
      }

      objc_msgSend( v67,  "removeObjectsForKeys:",  +[NSArray arrayWithObjects:]( NSArray,  "arrayWithObjects:",  v60,  v61,  v59,  v58,  v57,  key,  v55,  v54,  v53,  v52,  v33,  v34,  0));
      [v64 setUserInfo:v67];
      id v39 = [v63 length];
      if (v39)
      {
        [v64 setAdaptiveImageGlyphContentIdentifier:v63];
        [v64 setAdaptiveImageGlyphContentDescription:v51];
      }

      if (!v62) {
        [a4 appendInlineImageWithGUID:v41 filename:v66 width:v50 height:v49 isAnimoji:v48 isAdaptiveImageGlyph:v39 != 0];
      }
      goto LABEL_51;
    }

    uint64_t v14 = objc_msgSend(objc_msgSend(a4, "fileTransferGUIDs"), "lastObject");
    uint64_t v15 = -[IMDFileTransferCenter transferForGUID:]( +[IMDFileTransferCenter sharedInstance](&OBJC_CLASS___IMDFileTransferCenter, "sharedInstance"),  "transferForGUID:",  v14);
    if (v15)
    {
      [v15 setIsAuxImage:1];
      uint64_t v17 = +[IMFileTransfer AuxGUIDFromFileTransferGUID:]( &OBJC_CLASS___IMFileTransfer,  "AuxGUIDFromFileTransferGUID:",  v14);
      LOWORD(v40) = 0;
      -[IMDFileTransferCenter makeNewIncomingTransferWithGUID:filename:isDirectory:totalBytes:hfsType:hfsCreator:hfsFlags:]( +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance"),  "makeNewIncomingTransferWithGUID:filename:isDirectory:totalBytes:hfsType:hfsCreator:hfsFlags:",  v17,  [v66 lastPathComponent],  0,  objc_msgSend(v11, "longLongValue"),  0,  0,  v40);
      uint64_t v18 = -[IMDFileTransferCenter transferForGUID:]( +[IMDFileTransferCenter sharedInstance](&OBJC_CLASS___IMDFileTransferCenter, "sharedInstance"),  "transferForGUID:",  v17);
      if (v18)
      {
        uint64_t v20 = v18;
        id v21 = [v18 setIsAuxVideo:1];
        id v41 = v17;
        id v64 = v20;
        if (IMOSLoggingEnabled(v21, v22))
        {
          int v23 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageToSuperParser");
          if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            id v69 = v20;
            uint64_t v70 = 2112;
            uint64_t v71 = v8;
            _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_INFO,  "Successfully created AuxVideo transfer %@ \n\n with attributes %@",  buf,  0x16u);
          }
        }

        goto LABEL_18;
      }

      if (!IMOSLoggingEnabled(0LL, v19)
        || (uint64_t v25 = (os_log_s *)OSLogHandleForIMFoundationCategory("Warning"), !os_log_type_enabled(v25, OS_LOG_TYPE_INFO)))
      {
LABEL_51:

        goto LABEL_52;
      }

      *(_DWORD *)buf = 138412290;
      id v69 = v17;
      __int16 v26 = "Was not able to create Aux video transfer for guid %@";
    }

    else
    {
      uint64_t v25 = (os_log_s *)OSLogHandleForIMFoundationCategory("Warning");
      if (!os_log_type_enabled(v25, OS_LOG_TYPE_INFO)) {
        goto LABEL_51;
      }
      *(_DWORD *)buf = 138412290;
      id v69 = v14;
      __int16 v26 = "Could not find Aux image transfer with guid %@ while parsing message";
    }

    _os_log_impl(&dword_0, v25, OS_LOG_TYPE_INFO, v26, buf, 0xCu);
    goto LABEL_51;
  }

      goto LABEL_19;
    }
  }

  if (IMOSLoggingEnabled(v8, v9))
  {
    __int16 v31 = OSLogHandleForIMFoundationCategory("MessageService_GroupPhoto");
    int v13 = (void *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v7 displayName]);
      uint64_t v35 = 138412290;
      id v36 = v32;
      _os_log_impl(&dword_0, (os_log_t)v13, OS_LOG_TYPE_INFO, "Not refreshing for chat: %@ ", (uint8_t *)&v35, 0xCu);
    }

    goto LABEL_18;
  }

  __break(1u);
  return result;
}

void sub_1CD78(id a1, MessageDeliveryController *a2, NSArray *a3, BOOL a4, unsigned int a5, BOOL a6)
{
  BOOL v7 = a4;
  int v9 = a2;
  uint64_t v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (v7)
  {
    if (v11)
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory("MessageService");
      int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        LOWORD(v16[0]) = 0;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_INFO,  "Finished sending FTCommandIDUpdateAttachmentsMessage",  (uint8_t *)v16,  2u);
      }
    }
  }

  else if (v11)
  {
    uint64_t v14 = OSLogHandleForIMFoundationCategory("MessageService");
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      v16[0] = 67109120;
      v16[1] = a5;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_INFO,  "Failed sending FTCommandIDUpdateAttachmentsMessage: %d",  (uint8_t *)v16,  8u);
    }
  }
}

void sub_1CEC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (IMOSLoggingEnabled(v3, v4))
  {
    uint64_t v5 = OSLogHandleForIMFoundationCategory("MessageService");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v10 = v3;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_INFO,  "_sendHighResolutionImagesForMessage sending to engroup: %@",  buf,  0xCu);
    }
  }

  BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deliveryController]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionary](&OBJC_CLASS___NSDictionary, "dictionary"));
  [v7 sendMessageDictionary:v8 fromID:*(void *)(a1 + 40) fromAccount:*(void *)(a1 + 48) toURIs:*(void *)(a1 + 56) toGroup:v3 priority:300 options:*(void *)(a1 + 64) completionBlock:*(void *)(a1 + 72)];
}

LABEL_15:
      }
    }

    else if (IMOSLoggingEnabled(v14, v15))
    {
      id v29 = OSLogHandleForIMFoundationCategory("MessageService");
      id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v63) = v61;
        _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_INFO,  "Not sending remote read receipt for non 1-1 chat style: %c",  buf,  8u);
      }

      goto LABEL_15;
    }

    uint64_t v16 = 0;
LABEL_17:
    id v30 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    __int16 v31 = v30;
    if (v53) {
      -[NSMutableArray addObject:](v30, "addObject:", v53);
    }
    if (v16)
    {
      uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v54 participants]);
      __int16 v33 = URIsFromHandles(v32);
      id v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
      -[NSMutableArray addObjectsFromArray:](v31, "addObjectsFromArray:", v34);
    }

    v56[0] = _NSConcreteStackBlock;
    v56[1] = 3221225472LL;
    v56[2] = sub_1D5D8;
    v56[3] = &unk_D5D48;
    uint64_t v35 = v52;
    id v57 = v35;
    uint64_t v58 = v31;
    id v50 = v31;
    id v36 = objc_retainBlock(v56);
    id v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 102LL));
    id v38 = (void *)objc_claimAutoreleasedReturnValue([v35 guid]);
    id v39 = IDSGetUUIDData(v38);
    id v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
    id v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", IDSMaxMessageTimeout));
    uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  IDSSendMessageOptionTopLevelDictionaryKey,  &__kCFBooleanTrue,  IDSSendMessageOptionSkipPayloadCheckKey,  v37,  IDSSendMessageOptionCommandKey,  v40,  IDSSendMessageOptionUUIDKey,  v41,  IDSSendMessageOptionTimeoutKey,  0LL));

    id v43 = (void *)objc_claimAutoreleasedReturnValue(-[MessageServiceSession deliveryController](self, "deliveryController"));
    uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionary](&OBJC_CLASS___NSDictionary, "dictionary"));
    __int16 v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v50));
    [v43 sendMessageDictionary:v44 fromID:v53 fromAccount:v13 toURIs:v45 toGroup:0 priority:300 options:v42 completionBlock:v36];

    int v46 = (void *)objc_claimAutoreleasedReturnValue([v35 guid]);
    __int16 v47 = (void *)objc_claimAutoreleasedReturnValue(-[MessageServiceSession imdAccountForIDSAccount:](self, "imdAccountForIDSAccount:", v13));
    -[MessageServiceSession didSendMessageReadReceiptForMessageID:account:]( self,  "didSendMessageReadReceiptForMessageID:account:",  v46,  v47);

    goto LABEL_22;
  }

  int v23 = (void *)objc_claimAutoreleasedReturnValue([v52 guid]);
  int v24 = (void *)objc_claimAutoreleasedReturnValue(-[MessageServiceSession imdAccountForIDSAccount:](self, "imdAccountForIDSAccount:", v13));
  -[MessageServiceSession didSendMessageReadReceiptForMessageID:account:]( self,  "didSendMessageReadReceiptForMessageID:account:",  v23,  v24);

  if (IMOSLoggingEnabled(v25, v26))
  {
    id v27 = OSLogHandleForIMEventCategory("MessageService");
    __int16 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_0, v28, OS_LOG_TYPE_INFO, " ** Device is not regisistered, failing read receipt", buf, 2u);
    }
  }
      }
    }

    else if (IMOSLoggingEnabled(v12, v13))
    {
      id v27 = OSLogHandleForIMFoundationCategory("MessageService");
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v66) = v64;
        _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_INFO,  "Not sending remote played receipt for non 1-1 chat style: %c",  buf,  8u);
      }

      goto LABEL_15;
    }

    uint64_t v14 = 0;
LABEL_17:
    __int16 v28 = [v58 isBlackholed];
    if ((_DWORD)v28)
    {
      if (IMOSLoggingEnabled(v28, v29))
      {
        id v30 = OSLogHandleForIMFoundationCategory("MessageService");
        __int16 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          id v66 = v58;
          _os_log_impl( &dword_0,  v31,  OS_LOG_TYPE_INFO,  "Not sending remote played receipt for blackholed chat: %@",  buf,  0xCu);
        }
      }

      uint64_t v14 = 0;
    }

    uint64_t v32 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    __int16 v33 = v32;
    if (v55) {
      -[NSMutableArray addObject:](v32, "addObject:", v55);
    }
    if (v14)
    {
      id v34 = (void *)objc_claimAutoreleasedReturnValue([v58 participants]);
      uint64_t v35 = URIsFromHandles(v34);
      id v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
      -[NSMutableArray addObjectsFromArray:](v33, "addObjectsFromArray:", v36);
    }

    v59[0] = _NSConcreteStackBlock;
    v59[1] = 3221225472LL;
    v59[2] = sub_1DDFC;
    v59[3] = &unk_D5D48;
    id v37 = v54;
    uint64_t v60 = v37;
    int v61 = v33;
    id v38 = v33;
    id v39 = objc_retainBlock(v59);
    id v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 105LL));
    id v41 = (void *)objc_claimAutoreleasedReturnValue([v37 guid]);
    uint64_t v42 = IDSGetUUIDData(v41);
    id v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
    uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", IDSMaxMessageTimeout));
    __int16 v45 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  IDSSendMessageOptionTopLevelDictionaryKey,  &__kCFBooleanTrue,  IDSSendMessageOptionSkipPayloadCheckKey,  v40,  IDSSendMessageOptionCommandKey,  v43,  IDSSendMessageOptionUUIDKey,  v44,  IDSSendMessageOptionTimeoutKey,  0LL));

    int v46 = (void *)objc_claimAutoreleasedReturnValue(-[MessageServiceSession deliveryController](self, "deliveryController"));
    __int16 v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionary](&OBJC_CLASS___NSDictionary, "dictionary"));
    uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v38));
    [v46 sendMessageDictionary:v47 fromID:v55 fromAccount:v56 toURIs:v48 toGroup:0 priority:300 options:v45 completionBlock:v39];

    uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v37 guid]);
    id v50 = (void *)objc_claimAutoreleasedReturnValue(-[MessageServiceSession imdAccountForIDSAccount:](self, "imdAccountForIDSAccount:", v56));
    -[MessageServiceSession didSendMessagePlayedReceiptForMessageID:account:]( self,  "didSendMessagePlayedReceiptForMessageID:account:",  v49,  v50);

    goto LABEL_28;
  }

  id v21 = (void *)objc_claimAutoreleasedReturnValue([v54 guid]);
  id v22 = (void *)objc_claimAutoreleasedReturnValue(-[MessageServiceSession imdAccountForIDSAccount:](self, "imdAccountForIDSAccount:", v56));
  -[MessageServiceSession didSendMessagePlayedReceiptForMessageID:account:]( self,  "didSendMessagePlayedReceiptForMessageID:account:",  v21,  v22);

  if (IMOSLoggingEnabled(v23, v24))
  {
    uint64_t v25 = OSLogHandleForIMEventCategory("MessageService");
    __int16 v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_0, v26, OS_LOG_TYPE_INFO, " ** Device is not regisistered, failing played receipt", buf, 2u);
    }
  }

  if (IMOSLoggingEnabled(v3, v4))
  {
    uint64_t v12 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDelivery");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "Not connected to companion", buf, 2u);
    }
  }

  return 0LL;
}

  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

LABEL_22:
}
}

  return v23;
}

  int v23 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  int v24 = (uint64_t *)(*(void *)(v23 + 48) + 16 * a3);
  void *v24 = v8;
  v24[1] = a2;
  uint64_t v25 = *(void *)(v23 + 16);
  __int16 v26 = __OFADD__(v25, 1LL);
  id v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v23 + 16) = v27;
  }
  return result;
}

void sub_1D5D8(uint64_t a1, void *a2, void *a3, int a4, int a5)
{
  id v9 = a2;
  id v10 = a3;
  int v12 = IMOSLoggingEnabled(v10, v11);
  if (a4)
  {
    if (v12)
    {
      uint64_t v13 = OSLogHandleForIMFoundationCategory("MessageService");
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
        uint64_t v16 = *(void *)(a1 + 40);
        int v21 = 138412546;
        id v22 = v15;
        __int16 v23 = 2112;
        uint64_t v24 = v16;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_INFO,  "Finished sending read receipt for guid: %@   to people: %@",  (uint8_t *)&v21,  0x16u);
      }
    }
  }

  else if (v12)
  {
    uint64_t v17 = OSLogHandleForIMFoundationCategory("MessageService");
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
      uint64_t v20 = *(void *)(a1 + 40);
      int v21 = 138412802;
      id v22 = v19;
      __int16 v23 = 2112;
      uint64_t v24 = v20;
      __int16 v25 = 1024;
      int v26 = a5;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_INFO,  "Failed sending read receipt for guid: %@   to people: %@  error: %d",  (uint8_t *)&v21,  0x1Cu);
    }
  }
}

void sub_1D774(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D738LL);
  }

  _Unwind_Resume(a1);
}

LABEL_28:
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  uint64_t v19 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v19,  1046LL,  0);
  __break(1u);
  return result;
}

void sub_1DDFC(uint64_t a1, void *a2, void *a3, int a4, int a5)
{
  id v9 = a2;
  id v10 = a3;
  int v12 = IMOSLoggingEnabled(v10, v11);
  if (a4)
  {
    if (v12)
    {
      uint64_t v13 = OSLogHandleForIMFoundationCategory("MessageService");
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
        uint64_t v16 = *(void *)(a1 + 40);
        int v21 = 138412546;
        id v22 = v15;
        __int16 v23 = 2112;
        uint64_t v24 = v16;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_INFO,  "Finished sending played receipt for guid: %@   to people: %@",  (uint8_t *)&v21,  0x16u);
      }
    }
  }

  else if (v12)
  {
    uint64_t v17 = OSLogHandleForIMFoundationCategory("MessageService");
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
      uint64_t v20 = *(void *)(a1 + 40);
      int v21 = 138412802;
      id v22 = v19;
      __int16 v23 = 2112;
      uint64_t v24 = v20;
      __int16 v25 = 1024;
      int v26 = a5;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_INFO,  "Failed sending played receipt for guid: %@   to people: %@  error: %d",  (uint8_t *)&v21,  0x1Cu);
    }
  }
}

void sub_1DF98(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1DF5CLL);
  }

  _Unwind_Resume(a1);
}

void sub_1E5D4(uint64_t a1, void *a2, void *a3, int a4, int a5)
{
  id v9 = a2;
  id v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (a4)
  {
    if (v11)
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory("MessageService");
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v14 = *(void *)(a1 + 32);
        uint64_t v15 = *(void *)(a1 + 40);
        int v20 = 138412546;
        uint64_t v21 = v14;
        __int16 v22 = 2112;
        uint64_t v23 = v15;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_INFO,  "Finished sending delivered quietly receipt for guid: %@   to people: %@",  (uint8_t *)&v20,  0x16u);
      }
    }
  }

  else if (v11)
  {
    uint64_t v16 = OSLogHandleForIMFoundationCategory("MessageService");
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v19 = *(void *)(a1 + 40);
      int v20 = 138412802;
      uint64_t v21 = v18;
      __int16 v22 = 2112;
      uint64_t v23 = v19;
      __int16 v24 = 1024;
      int v25 = a5;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_INFO,  "Failed sending delivered quietly receipt for guid: %@   to people: %@  error: %d",  (uint8_t *)&v20,  0x1Cu);
    }
  }
}

void sub_1E764(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = [v8 count];
  int v12 = IMOSLoggingEnabled(v10, v11);
  if (!v10)
  {
    if (v12)
    {
      uint64_t v25 = OSLogHandleForIMFoundationCategory("MessageService");
      __int16 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        LOWORD(v27) = 0;
        _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_INFO,  "Sending delivered quietly receipt to all destinations, none skipped.",  (uint8_t *)&v27,  2u);
      }

      goto LABEL_20;
    }

LABEL_21:
    uint64_t v20 = 0LL;
    goto LABEL_22;
  }

  if (v12)
  {
    uint64_t v13 = OSLogHandleForIMFoundationCategory("MessageService");
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      int v27 = 138412290;
      id v28 = v8;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_INFO,  "Not sending delivered quietly receipt to skipped destinations: %@",  (uint8_t *)&v27,  0xCu);
    }
  }

  id v15 = [*(id *)(a1 + 32) length];
  if (!v15 || (id v15 = [v8 containsObject:*(void *)(a1 + 32)], !(_DWORD)v15))
  {
    if (IMOSLoggingEnabled(v15, v16))
    {
      uint64_t v21 = OSLogHandleForIMFoundationCategory("MessageService");
      __int16 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        uint64_t v23 = *(void **)(a1 + 32);
        id v24 = [v8 count];
        int v27 = 138412546;
        id v28 = v23;
        __int16 v29 = 2048;
        id v30 = v24;
        _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_INFO,  "Incoming message came from a device that does support delivered quietly receipts %@, but they also have %l d devices that do not support delivered quietly.",  (uint8_t *)&v27,  0x16u);
      }
}

    id v30 = 0;
    goto LABEL_22;
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue(-[IMDGroupPhotoRefreshController refreshRequests](self, "refreshRequests"));
  uint64_t v11 = [v10 containsObject:v9];

  if (v11)
  {
    if (IMOSLoggingEnabled(v12, v13))
    {
      uint64_t v14 = OSLogHandleForIMFoundationCategory("IMDGroupPhotoRefreshController");
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(-[IMDGroupPhotoRefreshController refreshRequests](self, "refreshRequests"));
        __int16 v33 = 138412290;
        id v34 = *(double *)&v16;
        _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_INFO,  "not requesting group photo - request already in flight. %@",  (uint8_t *)&v33,  0xCu);
      }
    }

    goto LABEL_21;
  }

  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v6 refreshDate]);
  [v19 timeIntervalSinceDate:v20];
  __int16 v22 = v21;

  if (IMOSLoggingEnabled(v23, v24))
  {
    uint64_t v25 = OSLogHandleForIMFoundationCategory("IMDGroupPhotoRefreshController");
    uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      __int16 v33 = 134218498;
      id v34 = v22;
      uint64_t v35 = 2112;
      id v36 = v9;
      id v37 = 2112;
      id v38 = v6;
      _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_INFO,  "Time since last refresh: %f for chat: %@, transfer: %@",  (uint8_t *)&v33,  0x20u);
    }
  }

  int v27 = -[IMDGroupPhotoRefreshController minRefreshTime](self, "minRefreshTime");
  if (v22 < v29)
  {
    if (IMOSLoggingEnabled(v27, v28))
    {
      __int16 v31 = OSLogHandleForIMFoundationCategory("IMDGroupPhotoRefreshController");
      uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        __int16 v33 = 134217984;
        id v34 = v22;
        _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_INFO,  "not requesting group photo - time since last refresh outside window %f",  (uint8_t *)&v33,  0xCu);
      }

          uint64_t v11 = (v17 - 1) & v17;
          int v12 = __clz(__rbit64(v17)) + (v13 << 6);
          id v9 = v13;
        }

        uint64_t v19 = (uint64_t *)(*(void *)(*a5 + 48LL) + 16 * v12);
        uint64_t v21 = *v19;
        uint64_t v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)(v41, *(void *)(a3 + 40));
        swift_bridgeObjectRetain(v20);
        String.hash(into:)(v41, v21, v20);
        __int16 v22 = Hasher._finalize()();
        uint64_t v23 = -1LL << *(_BYTE *)(a3 + 32);
        id v24 = v22 & ~v23;
        uint64_t v25 = v24 >> 6;
        uint64_t v26 = 1LL << v24;
        if (((1LL << v24) & *(void *)(v42 + 8 * (v24 >> 6))) != 0) {
          break;
        }
LABEL_3:
        result = (unint64_t *)swift_bridgeObjectRelease(v20);
      }

      int v27 = *(void *)(a3 + 48);
      id v28 = (void *)(v27 + 16 * v24);
      __int16 v29 = v28[1];
      id v30 = *v28 == v21 && v29 == v20;
      if (!v30 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v21, v20, 0LL) & 1) == 0)
      {
        uint64_t v32 = ~v23;
        for (i = v24 + 1; ; i = v34 + 1)
        {
          id v34 = i & v32;
          uint64_t v35 = (void *)(v27 + 16 * v34);
          id v36 = v35[1];
          id v37 = *v35 == v21 && v36 == v20;
          if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v35, v36, v21, v20, 0LL) & 1) != 0)
          {
            result = (unint64_t *)swift_bridgeObjectRelease(v20);
            uint64_t v25 = v34 >> 6;
            uint64_t v26 = 1LL << v34;
            goto LABEL_29;
          }
        }

        goto LABEL_3;
      }

      result = (unint64_t *)swift_bridgeObjectRelease(v20);
LABEL_29:
      __int16 v31 = v40[v25];
      v40[v25] = v31 & ~v26;
    }

    while ((v26 & v31) == 0);
    id v8 = v39 - 1;
    if (__OFSUB__(v39, 1LL))
    {
LABEL_45:
      __break(1u);
      return result;
    }

    if (v39 != 1) {
      continue;
    }
    return (unint64_t *)&_swiftEmptySetSingleton;
  }

LABEL_20:
      goto LABEL_21;
    }

    goto LABEL_21;
  }

  if (IMOSLoggingEnabled(v15, v16))
  {
    uint64_t v17 = OSLogHandleForIMFoundationCategory("MessageService");
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = *(void **)(a1 + 32);
      int v27 = 138412290;
      id v28 = v19;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_INFO,  "Incoming message came from a device that does not support delivered quietly receipts. Senders destination: %@",  (uint8_t *)&v27,  0xCu);
    }
  }

  uint64_t v20 = 1LL;
LABEL_22:
  uint64_t v26 = *(void *)(a1 + 40);
  if (v26) {
    (*(void (**)(uint64_t, uint64_t))(v26 + 16))(v26, v20);
  }
}
}

      goto LABEL_21;
    }

    goto LABEL_21;
  }

  id v30 = 1;
LABEL_22:

  return v30;
}

  id v36 = (void *)sub_86B24((uint64_t)&_swiftEmptyArrayStorage);
  int v12 = v13[2];
  if (v12)
  {
    swift_bridgeObjectRetain(v13);
    v13 += 5;
    while (1)
    {
      id v40 = *(v13 - 1);
      id v39 = *v13;
      swift_bridgeObjectRetain(*v13);
      id v15 = (uint64_t)String._bridgeToObjectiveC()();
      id v41 = (id)IMChatCanonicalIDSIDsForAddress(v15);

      if (!v41)
      {
        swift_bridgeObjectRetain(v39);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v36);
        v114[0] = (uint64_t)v36;
        id v55 = sub_8BF14(v40, v39);
        id v56 = v36[2];
        id v57 = (v54 & 1) == 0;
        uint64_t v58 = v56 + v57;
        if (__OFADD__(v56, v57)) {
          goto LABEL_63;
        }
        id v15 = v54;
        if (v36[3] >= v58)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            id v36 = (void *)v114[0];
            if ((v54 & 1) == 0) {
              goto LABEL_46;
            }
          }

          else
          {
            sub_8E140();
            id v36 = (void *)v114[0];
            if ((v15 & 1) == 0) {
              goto LABEL_46;
            }
          }
        }

        else
        {
          sub_8D664(v58, isUniquelyReferenced_nonNull_native);
          id v59 = sub_8BF14(v40, v39);
          if ((v15 & 1) != (v60 & 1))
          {
LABEL_67:
            result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
            __break(1u);
            return result;
          }

          id v55 = v59;
          id v36 = (void *)v114[0];
          if ((v15 & 1) == 0)
          {
LABEL_46:
            v36[(v55 >> 6) + 8] |= 1LL << v55;
            id v67 = (uint64_t *)(v36[6] + 16 * v55);
            *id v67 = v40;
            v67[1] = v39;
            id v68 = (uint64_t *)(v36[7] + 16 * v55);
            *id v68 = v40;
            v68[1] = v39;
            id v69 = v36[2];
            id v64 = __OFADD__(v69, 1LL);
            uint64_t v70 = v69 + 1;
            if (v64) {
              goto LABEL_65;
            }
            v36[2] = v70;
            swift_bridgeObjectRetain(v39);
            goto LABEL_48;
          }
        }

        id v66 = (uint64_t *)(v36[7] + 16 * v55);
        swift_bridgeObjectRelease(v66[1]);
        void *v66 = v40;
        v66[1] = v39;
LABEL_48:
        swift_bridgeObjectRelease(0x8000000000000000LL);
        id v38 = v39;
        goto LABEL_24;
      }

      uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
      id v15 = v43;

      uint64_t v44 = swift_isUniquelyReferenced_nonNull_native(v36);
      v114[0] = (uint64_t)v36;
      int v46 = sub_8BF14(v42, v15);
      __int16 v47 = v36[2];
      uint64_t v48 = (v45 & 1) == 0;
      uint64_t v49 = v47 + v48;
      if (__OFADD__(v47, v48))
      {
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }

      id v50 = v45;
      if (v36[3] >= v49)
      {
        if ((v44 & 1) != 0)
        {
          id v36 = (void *)v114[0];
          if ((v45 & 1) == 0) {
            goto LABEL_38;
          }
        }

        else
        {
          sub_8E140();
          id v36 = (void *)v114[0];
          if ((v50 & 1) == 0) {
            goto LABEL_38;
          }
        }
      }

      else
      {
        sub_8D664(v49, v44);
        id v51 = sub_8BF14(v42, v15);
        if ((v50 & 1) != (v52 & 1)) {
          goto LABEL_67;
        }
        int v46 = v51;
        id v36 = (void *)v114[0];
        if ((v50 & 1) == 0)
        {
LABEL_38:
          v36[(v46 >> 6) + 8] |= 1LL << v46;
          int v61 = (uint64_t *)(v36[6] + 16 * v46);
          *int v61 = v42;
          v61[1] = v15;
          uint64_t v62 = (uint64_t *)(v36[7] + 16 * v46);
          os_log_s *v62 = v40;
          v62[1] = v39;
          id v63 = v36[2];
          id v64 = __OFADD__(v63, 1LL);
          uint64_t v65 = v63 + 1;
          if (v64) {
            goto LABEL_64;
          }
          v36[2] = v65;
          swift_bridgeObjectRetain(v15);
          goto LABEL_23;
        }
      }

      id v37 = (uint64_t *)(v36[7] + 16 * v46);
      swift_bridgeObjectRelease(v37[1]);
      *id v37 = v40;
      v37[1] = v39;
LABEL_23:
      swift_bridgeObjectRelease(0x8000000000000000LL);
      id v38 = v15;
LABEL_24:
      swift_bridgeObjectRelease(v38);
      v13 += 2;
      if (!--v12)
      {
        swift_bridgeObjectRelease(a1);
        break;
      }
    }
  }

  uint64_t v71 = swift_allocObject(&unk_D80A8, 24LL, 7LL);
  *(void *)(v71 + 16) = v36;
  if (a5)
  {
    uint64_t v72 = String._bridgeToObjectiveC()();
    uint64_t v73 = [v72 _stripFZIDPrefix];

    unsigned int v74 = (id)IMChatCanonicalIDSIDsForAddress(v73);
    if (v74)
    {
      uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
      uint64_t v77 = v76;

      swift_bridgeObjectRetain_n(v77, 2LL);
      char v78 = swift_isUniquelyReferenced_nonNull_native(v36);
      v114[0] = *(void *)(v71 + 16);
      *(void *)(v71 + 16) = 0x8000000000000000LL;
      sub_8DE68(v75, v77, v75, v77, v78);
      id v79 = *(void *)(v71 + 16);
      *(void *)(v71 + 16) = v114[0];
      swift_bridgeObjectRelease(v79);
      swift_bridgeObjectRelease(v77);
      id v36 = *(void **)(v71 + 16);
    }

    else
    {
      uint64_t v75 = 0LL;
      uint64_t v77 = 0LL;
    }
  }

  else
  {
    uint64_t v77 = 0LL;
    uint64_t v75 = a4;
  }

  char v80 = swift_bridgeObjectRetain(v36);
  BOOL v81 = sub_8D580(v80);
  swift_bridgeObjectRelease(v36);
  int v82 = sub_837F8((uint64_t)v81);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v82);
  uint64_t v84 = (id)IMServiceNameForCanonicalIDSAddresses(isa);

  uint64_t v100 = v81;
  if (v84)
  {
    uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
    uint64_t v99 = v85;
  }

  else
  {
    uint64_t v98 = 0LL;
    uint64_t v99 = 0LL;
  }

  v86 = swift_allocObject(&unk_D80D0, 120LL, 7LL);
  *(void *)(v86 + 16) = v110;
  *(void *)(v86 + 24) = a2;
  *(void *)(v86 + 32) = a3;
  *(void *)(v86 + 40) = v75;
  *(void *)(v86 + 48) = v77;
  *(void *)(v86 + 56) = v71;
  *(void *)(v86 + 64) = a6;
  *(_BYTE *)(v86 + 72) = v104;
  *(void *)(v86 + 80) = a9;
  *(void *)(v86 + 88) = a10;
  *(void *)(v86 + 96) = a1;
  *(void *)(v86 + 104) = a4;
  *(void *)(v86 + 112) = a5;
  uint64_t v88 = *(void *)(v110 + 16);
  uint64_t v87 = *(void *)(v110 + 24);
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a1);
  swift_retain();
  swift_retain();
  uint64_t v89 = a6;
  swift_retain();
  v90 = [v89 senderLastAddressedHandle];
  id v101 = v71;
  if (v90)
  {
    uint64_t v91 = v90;
    v106 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
    uint64_t v108 = v92;
  }

  else
  {
    v106 = 0LL;
    uint64_t v108 = 0LL;
  }

  ObjectType = swift_getObjectType(v88);
  sub_8448C(0LL, &qword_E3218, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v94 = (void *)static OS_dispatch_queue.main.getter();
  v95 = swift_allocObject(&unk_D80F8, 88LL, 7LL);
  *(void *)(v95 + 16) = a2;
  *(void *)(v95 + 24) = a3;
  *(void *)(v95 + 32) = a9;
  *(void *)(v95 + 40) = a10;
  *(void *)(v95 + 48) = v110;
  *(void *)(v95 + 56) = a1;
  *(_BYTE *)(v95 + 64) = v104;
  *(void *)(v95 + 72) = &unk_E3210;
  *(void *)(v95 + 80) = v86;
  id v96 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id, unint64_t, unint64_t, void *, void (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v87 + 16);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a1);
  swift_retain();
  swift_retain();
  swift_retain();
  v96( v100,  v98,  v99,  v106,  v108,  2LL,  v102,  0xD000000000000022LL,  0x80000000000AB2C0LL,  v94,  sub_8EA1C,  v95,  ObjectType,  v87);
  swift_release(v86);
  swift_release(v95);

  swift_release(v100);
  swift_release(v101);
  swift_bridgeObjectRelease(v108);
  return swift_bridgeObjectRelease(v99);
}

void sub_1EF8C(uint64_t a1, void *a2, void *a3, int a4, int a5)
{
  id v9 = a2;
  id v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (a4)
  {
    if (v11)
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory("MessageService");
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v14 = *(void *)(a1 + 32);
        uint64_t v15 = *(void *)(a1 + 40);
        int v20 = 138412546;
        uint64_t v21 = v14;
        __int16 v22 = 2112;
        uint64_t v23 = v15;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_INFO,  "Finished sending notify recipient receipt for guid: %@   to people: %@",  (uint8_t *)&v20,  0x16u);
      }
    }
  }

  else if (v11)
  {
    uint64_t v16 = OSLogHandleForIMFoundationCategory("MessageService");
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v19 = *(void *)(a1 + 40);
      int v20 = 138412802;
      uint64_t v21 = v18;
      __int16 v22 = 2112;
      uint64_t v23 = v19;
      __int16 v24 = 1024;
      int v25 = a5;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_INFO,  "Failed sending notify recipient receipt for guid: %@   to people: %@  error: %d",  (uint8_t *)&v20,  0x1Cu);
    }
  }
}

void sub_1F780( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *exc_buf, uint64_t a14, id *location)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1F4B8LL);
  }

  objc_destroyWeak(v15);
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v16 - 184));
  _Unwind_Resume(a1);
}

void sub_1F7E8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v8 = [v5 count];
  if (v8)
  {
    if (IMOSLoggingEnabled(v8, v9))
    {
      uint64_t v10 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
      int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        int v16 = 138412290;
        id v17 = v5;
        _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_INFO,  "Message editing unsupported by destinations: %@",  (uint8_t *)&v16,  0xCu);
      }
    }

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained _handleIDsForDestinations:v5]);
    if (IMOSLoggingEnabled(v12, v13))
    {
      uint64_t v14 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
      uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        int v16 = 138412290;
        id v17 = v12;
        _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_INFO,  "Message editing unsupported by handles: %@",  (uint8_t *)&v16,  0xCu);
      }
    }

    [WeakRetained didReceiveMessageEditingUnsupportedHandleIDs:v12 forMessageGUID:*(void *)(a1 + 32) partIndex:*(void *)(a1 + 56) previousMessage:*(void *)(a1 + 40) backwardCompatibilityMessageGUID:v6];
  }
}

void sub_1F99C(uint64_t a1, void *a2, void *a3, char a4, uint64_t a5)
{
  id v9 = a2;
  id v10 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v13 = WeakRetained;
  if ((a4 & 1) != 0)
  {
    if (IMOSLoggingEnabled(WeakRetained, v12))
    {
      uint64_t v14 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
      uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)__int16 v24 = 0;
        _os_log_impl(&dword_0, v15, OS_LOG_TYPE_INFO, "Message editing success", v24, 2u);
      }
    }

    [v13 didSendMessageEditForMessageGUID:*(void *)(a1 + 32)];
  }

  else
  {
    uint64_t v16 = IMLogHandleForCategory("MessageServiceSession");
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      sub_8F504(a5, v17, v18, v19, v20, v21, v22, v23);
    }

    [v13 didReceiveMessageEditingSendFailure:a5 forMessageGUID:*(void *)(a1 + 32) partIndex:*(void *)(a1 + 48) editType:*(void *)(a1 + 56)];
  }
}

void sub_1FACC(uint64_t a1, uint64_t a2)
{
  if (IMOSLoggingEnabled(a1, a2))
  {
    uint64_t v3 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
      uint64_t v6 = *(void *)(a1 + 112);
      *(_DWORD *)buf = 138412546;
      id v9 = v5;
      __int16 v10 = 1024;
      int v11 = v6;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_INFO,  "Delivering message edit of %@ for replication after %u second delay",  buf,  0x12u);
    }
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deliveryController]);
  [v7 sendEditedMessage:*(void *)(a1 + 48) partIndex:*(void *)(a1 + 120) editType:*(void *)(a1 + 128) destinations:*(void *)(a1 + 56) chatIdentifier:*(void *)(a1 + 64) account:*(void *)(a1 + 72) fromID:*(void *)(a1 + 80) backwardCompatabilityText:*(void *)(a1 + 88) unsupporte dDestinationsHandler:*(void *)(a1 + 96) completionBlock:*(void *)(a1 + 104)];
}

LABEL_13:
}
  }

  if (IMOSLoggingEnabled(v6, v7))
  {
    uint64_t v14 = (os_log_s *)OSLogHandleForIMFoundationCategory("EngramGroup");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = +[NSDate dateWithTimeIntervalSinceNow:]( NSDate,  "dateWithTimeIntervalSinceNow:",  (double)(uint64_t)[a3 engroupCreationDate]);
      id v17 = 138412290;
      uint64_t v18 = v15;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_INFO,  "We are waiting for to create this group: %@",  (uint8_t *)&v17,  0xCu);
    }
  }

  return v9;
}

    result = sub_8BAE4(a5, a6);
    *a1 = v13;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    id v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  id v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  v14,  1173LL,  0);
    __break(1u);
    return result;
  }

void sub_1FFD8(uint64_t a1, void *a2, void *a3, int a4, int a5)
{
  id v9 = a2;
  id v10 = a3;
  int v12 = IMOSLoggingEnabled(v10, v11);
  if (a4)
  {
    if (v12)
    {
      uint64_t v13 = OSLogHandleForIMFoundationCategory("MessageService");
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
        uint64_t v16 = *(void *)(a1 + 40);
        int v21 = 138412546;
        uint64_t v22 = v15;
        __int16 v23 = 2112;
        uint64_t v24 = v16;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_INFO,  "Finished sending repositioned sticker for guid: %@   to people: %@",  (uint8_t *)&v21,  0x16u);
      }
    }
  }

  else if (v12)
  {
    uint64_t v17 = OSLogHandleForIMFoundationCategory("MessageService");
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
      uint64_t v20 = *(void *)(a1 + 40);
      int v21 = 138412802;
      uint64_t v22 = v19;
      __int16 v23 = 2112;
      uint64_t v24 = v20;
      __int16 v25 = 1024;
      int v26 = a5;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_INFO,  "Failed sending repositioned sticker for guid: %@   to people: %@  error: %d",  (uint8_t *)&v21,  0x1Cu);
    }
  }
}

void sub_20174(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x20138LL);
  }

  _Unwind_Resume(a1);
}

void sub_20948(uint64_t a1, void *a2, void *a3, int a4, int a5)
{
  id v9 = a2;
  id v10 = a3;
  int v12 = IMOSLoggingEnabled(v10, v11);
  if (a4)
  {
    if (v12)
    {
      uint64_t v13 = OSLogHandleForIMFoundationCategory("MessageService");
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
        uint64_t v16 = *(void *)(a1 + 40);
        int v21 = 138412546;
        uint64_t v22 = v15;
        __int16 v23 = 2112;
        uint64_t v24 = v16;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_INFO,  "Finished sending saved receipt for guid: %@   to people: %@",  (uint8_t *)&v21,  0x16u);
      }
    }
  }

  else if (v12)
  {
    uint64_t v17 = OSLogHandleForIMFoundationCategory("MessageService");
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
      uint64_t v20 = *(void *)(a1 + 40);
      int v21 = 138412802;
      uint64_t v22 = v19;
      __int16 v23 = 2112;
      uint64_t v24 = v20;
      __int16 v25 = 1024;
      int v26 = a5;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_INFO,  "Failed sending saved receipt for guid: %@   to people: %@  error: %d",  (uint8_t *)&v21,  0x1Cu);
    }
  }
}

void sub_20AE4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x20AA8LL);
  }

  _Unwind_Resume(a1);
}

LABEL_33:
}

    goto LABEL_34;
  }

  if (v17)
  {
    id v30 = OSLogHandleForIMFoundationCategory("MessageService");
    __int16 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v49 = v44;
      _os_log_impl( &dword_0,  v31,  OS_LOG_TYPE_INFO,  "Recently Deleted | iCloud syncing not enabled, dropping recover command to all other devices, (command %@) cloud kitSyncingEnabled: NO",  buf,  0xCu);
    }
  }

    id v9 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v8 << 6);
    goto LABEL_34;
  }

  __break(1u);
}

    uint64_t v11 = (v26 - 1) & v26;
    __int16 v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    uint64_t v32 = 16 * v23;
    __int16 v33 = (uint64_t *)(*(void *)(v5 + 48) + v32);
    uint64_t v35 = *v33;
    id v34 = v33[1];
    id v36 = (uint64_t *)(*(void *)(v5 + 56) + v32);
    id v37 = *v36;
    id v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      swift_bridgeObjectRetain(v38);
    }

    Hasher.init(_seed:)(v44, *(void *)(v8 + 40));
    String.hash(into:)(v44, v35, v34);
    result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v28 = 0;
      __int16 v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        id v30 = v17 == v29;
        if (v17 == v29) {
          uint64_t v17 = 0LL;
        }
        v28 |= v30;
        __int16 v31 = *(void *)(v12 + 8 * v17);
      }

      while (v31 == -1);
      uint64_t v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t v19 = 16 * v18;
    uint64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
    *uint64_t v20 = v35;
    v20[1] = v34;
    int v21 = (void *)(*(void *)(v8 + 56) + v19);
    *int v21 = v37;
    v21[1] = v38;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v40;
  __int16 v25 = (void *)(v5 + 64);
  if ((v43 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  id v39 = 1LL << *(_BYTE *)(v5 + 32);
  if (v39 >= 64) {
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v25 = -1LL << v39;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v24 - 1) & v24;
    int v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    id v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    __int16 v31 = v30[1];
    __int16 v33 = *(void **)(*(void *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      id v34 = v33;
    }

    Hasher.init(_seed:)(v40, *(void *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int v26 = 0;
      int v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        id v28 = v17 == v27;
        if (v17 == v27) {
          uint64_t v17 = 0LL;
        }
        v26 |= v28;
        __int16 v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      uint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    void *v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v36;
  __int16 v23 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v23 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

void sub_2133C(uint64_t a1, void *a2, void *a3, int a4, int a5)
{
  id v9 = a2;
  id v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (a4)
  {
    if (v11)
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory("SyndicationActions");
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v14 = *(void *)(a1 + 32);
        uint64_t v15 = *(void *)(a1 + 40);
        int v20 = 138412546;
        uint64_t v21 = v14;
        __int16 v22 = 2112;
        uint64_t v23 = v15;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_INFO,  "Finished sending SyndicationAction: %@ to people: %@",  (uint8_t *)&v20,  0x16u);
      }
    }
  }

  else if (v11)
  {
    uint64_t v16 = OSLogHandleForIMFoundationCategory("SyndicationActions");
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v19 = *(void *)(a1 + 40);
      int v20 = 138412802;
      uint64_t v21 = v18;
      __int16 v22 = 2112;
      uint64_t v23 = v19;
      __int16 v24 = 1024;
      int v25 = a5;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_INFO,  "Failed sending saved SyndicationAction: %@ to people: %@ error: %d",  (uint8_t *)&v20,  0x1Cu);
    }
  }
}

LABEL_45:
      }
    }

    else if (IMOSLoggingEnabled(v15, v16))
    {
      id v28 = OSLogHandleForIMFoundationCategory("Warning");
      int v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v75 = v12;
        _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_INFO,  "Chat: Could not send balloon payload for missing payload: %@",  buf,  0xCu);
      }

      goto LABEL_45;
    }
  }

  else if (IMOSLoggingEnabled(v15, v16))
  {
    uint64_t v58 = OSLogHandleForIMFoundationCategory("Warning");
    int v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v75 = v12;
      _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_INFO,  "Chat: Could not send balloon payload for missing bundle id: %@",  buf,  0xCu);
    }

    goto LABEL_45;
  }
}

void sub_21FB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) _richLinkPendSendingWithGUID:*(void *)(a1 + 40)];
  int v5 = (int)v4;
  int v7 = IMOSLoggingEnabled(v4, v6);
  if (v5)
  {
    if (v7)
    {
      uint64_t v8 = OSLogHandleForIMFoundationCategory("MessageService");
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, "Message pending to be sent. Not sending c 196", buf, 2u);
      }
    }

    uint64_t v10 = IMGetDomainBoolForKey(IMSMSDefaultsDomain, @"enforceRichLinkDelay");
    if ((v10 & 1) != 0)
    {
      if (IMOSLoggingEnabled(v10, v11))
      {
        uint64_t v12 = OSLogHandleForIMFoundationCategory("MessageService");
        uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_INFO,  "******** com.apple.sms defaults enforceRichLinkDelay set. Not flushing pending sends. Waiting for timer to fire ********",  buf,  2u);
        }
      }
    }

    else
    {
      [*(id *)(a1 + 32) _flushQueuedMessageWrapperBlocks];
    }
  }

  else
  {
    if (v7)
    {
      uint64_t v14 = OSLogHandleForIMFoundationCategory("MessageService");
      uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v15, OS_LOG_TYPE_INFO, "Proceeding sending c 196", buf, 2u);
      }
    }

    uint64_t v16 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    id v17 = *(id *)(a1 + 48);
    if (v17)
    {
      CFDictionarySetValue((CFMutableDictionaryRef)v16, @"bid", v17);
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_8F6E4();
    }

    uint64_t v18 = IMSharedHelperCombinedPluginPayloadDictionaryData(*(void *)(a1 + 56), *(void *)(a1 + 64));
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    id v20 = [v19 _FTCopyGzippedData];

    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472LL;
    v27[2] = sub_22408;
    v27[3] = &unk_D5E30;
    id v28 = v20;
    __int16 v29 = v16;
    id v21 = *(id *)(a1 + 40);
    uint64_t v22 = *(void *)(a1 + 32);
    id v30 = v21;
    uint64_t v31 = v22;
    id v32 = *(id *)(a1 + 72);
    id v33 = *(id *)(a1 + 80);
    id v34 = *(id *)(a1 + 88);
    id v35 = *(id *)(a1 + 96);
    id v36 = &stru_D5E08;
    uint64_t v23 = v16;
    id v24 = v20;
    int v25 = objc_retainBlock(v27);
    int v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) attachmentController]);
    [v26 sendPayloadData:v24 messageGUID:*(void *)(a1 + 40) fromID:*(void *)(a1 + 88) recipients:*(void *)(a1 + 96) completionBlock:v25];
  }
}

void sub_222E0(id a1, MessageDeliveryController *a2, NSArray *a3, BOOL a4, unsigned int a5, BOOL a6)
{
  BOOL v7 = a4;
  id v9 = a2;
  uint64_t v10 = a3;
  if (IMOSLoggingEnabled())
  {
    uint64_t v11 = OSLogHandleForIMFoundationCategory("MessageService");
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = @"NO";
      int v14 = 138412802;
      uint64_t v15 = v10;
      if (v7) {
        uint64_t v13 = @"YES";
      }
      __int16 v16 = 2112;
      id v17 = v13;
      __int16 v18 = 1024;
      unsigned int v19 = a5;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_INFO,  "Sent to IDs: %@ with success: %@ and error: %d",  (uint8_t *)&v14,  0x1Cu);
    }
  }
}

void sub_22408(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  int v7 = IMOSLoggingEnabled(v5, v6);
  if (a3)
  {
    if (v7)
    {
      uint64_t v8 = OSLogHandleForIMFoundationCategory("MessageService");
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v32 = v5;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_INFO,  "Finished uploading new payload data for message. Resulting payloadDictionary %@",  buf,  0xCu);
      }
    }

    if (v5)
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), @"bpdi", v5);
    }

    else
    {
      int v14 = *(const void **)(a1 + 32);
      if (v14) {
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), @"p", v14);
      }
    }

    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 196LL));
    uint64_t v16 = JWEncodeDictionary(*(void *)(a1 + 40));
    id v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    uint64_t v18 = IDSGetUUIDData(*(void *)(a1 + 48));
    unsigned int v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  IDSSendMessageOptionTopLevelDictionaryKey,  &__kCFBooleanTrue,  IDSSendMessageOptionSkipPayloadCheckKey,  v15,  IDSSendMessageOptionCommandKey,  &__kCFBooleanTrue,  IDSSendMessageOptionWantsDeliveryStatusKey,  v17,  IDSSendMessageOptionDataToEncryptKey,  v19,  IDSSendMessageOptionUUIDKey,  0LL));

    id v21 = *(void **)(a1 + 56);
    uint64_t v22 = *(void *)(a1 + 64);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    v25[2] = sub_22744;
    v25[3] = &unk_D5D20;
    v25[4] = v21;
    uint64_t v23 = *(void *)(a1 + 72);
    id v26 = *(id *)(a1 + 80);
    id v27 = *(id *)(a1 + 72);
    id v28 = *(id *)(a1 + 88);
    id v29 = v20;
    id v30 = *(id *)(a1 + 96);
    id v24 = v20;
    [v21 _engroupForChat:v22 idsAccount:v23 completion:v25];
  }

  else if (v7)
  {
    uint64_t v10 = OSLogHandleForIMFoundationCategory("Warning");
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = *(void **)(a1 + 48);
      uint64_t v13 = *(void *)(a1 + 88);
      *(_DWORD *)buf = 138412546;
      id v32 = v12;
      __int16 v33 = 2112;
      uint64_t v34 = v13;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_INFO,  "MessageService Failed processing new payload data for message: %@  for display IDs: %@",  buf,  0x16u);
    }
  }
}

void sub_22744(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (IMOSLoggingEnabled(v3, v4))
  {
    uint64_t v5 = OSLogHandleForIMFoundationCategory("MessageService");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v13 = v3;
      _os_log_impl(&dword_0, v6, OS_LOG_TYPE_INFO, "sendBalloonPayload to engroup: %@", buf, 0xCu);
    }
  }

  int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deliveryController]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionary](&OBJC_CLASS___NSDictionary, "dictionary"));
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", *(void *)(a1 + 56)));
  [v7 sendBubblePayloadMessageDictionary:v8 fromID:v9 fromAccount:v10 toURIs:v11 toGroup:v3 priority:300 options:*(void *)(a1 + 64) completionBlock:*(void *)(a1 + 72)];
}

void sub_22BF4(uint64_t a1, void *a2, void *a3, int a4, int a5)
{
  id v9 = a2;
  id v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (a4)
  {
    if (v11)
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory("MessageService");
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v14 = *(void *)(a1 + 32);
        uint64_t v15 = *(void *)(a1 + 40);
        int v20 = 138412546;
        uint64_t v21 = v14;
        __int16 v22 = 2112;
        uint64_t v23 = v15;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_INFO,  "Finished sending cross service association for replacementGUID: %@ guid: %@",  (uint8_t *)&v20,  0x16u);
      }
    }
  }

  else if (v11)
  {
    uint64_t v16 = OSLogHandleForIMFoundationCategory("MessageService");
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v19 = *(void *)(a1 + 40);
      int v20 = 138412802;
      uint64_t v21 = v18;
      __int16 v22 = 2112;
      uint64_t v23 = v19;
      __int16 v24 = 1024;
      int v25 = a5;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_INFO,  "Failed sending cross service association for replacementGUID: %@ guid: %@ error: %u",  (uint8_t *)&v20,  0x1Cu);
    }
  }
}

void sub_22EA8(id a1, MessageDeliveryController *a2, NSArray *a3, BOOL a4, unsigned int a5, BOOL a6)
{
  BOOL v7 = a4;
  id v9 = a2;
  id v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (v7)
  {
    if (v11)
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory("MessageService");
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        LOWORD(v16[0]) = 0;
        _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "Finished sending automation dictionary", (uint8_t *)v16, 2u);
      }
    }
  }

  else if (v11)
  {
    uint64_t v14 = OSLogHandleForIMFoundationCategory("MessageService");
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      v16[0] = 67109120;
      v16[1] = a5;
      _os_log_impl(&dword_0, v15, OS_LOG_TYPE_INFO, "Failed sending automation dictionary error %u", (uint8_t *)v16, 8u);
    }
  }
}

void sub_23364(uint64_t a1, void *a2, void *a3, int a4, int a5)
{
  id v9 = a2;
  id v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (a4)
  {
    if (v11)
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory("MessageService");
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v14 = *(void *)(a1 + 32);
        int v18 = 138412290;
        v19[0] = v14;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_INFO,  "Finished  sending Delivery receipt for guid: %@",  (uint8_t *)&v18,  0xCu);
      }
    }
  }

  else if (v11)
  {
    uint64_t v15 = OSLogHandleForIMFoundationCategory("MessageService");
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = *(void *)(a1 + 32);
      int v18 = 67109378;
      LODWORD(v19[0]) = a5;
      WORD2(v19[0]) = 2112;
      *(void *)((char *)v19 + 6) = v17;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_INFO,  "Failed  sending Delivery receipt error %u, guid %@",  (uint8_t *)&v18,  0x12u);
    }
  }
}

LABEL_35:
      goto LABEL_36;
    }

    if (IMOSLoggingEnabled(v11, v12))
    {
      int v20 = OSLogHandleForIMFoundationCategory("Warning");
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v21, OS_LOG_TYPE_INFO, "Nicknames are disabled, rejecting nickname send", buf, 2u);
      }
    }
  }

      goto LABEL_36;
    }
  }

  if (IMOSLoggingEnabled(isKindOfClass, v6))
  {
    __int16 v22 = OSLogHandleForIMFoundationCategory("MessageService_GroupPhoto");
    int v11 = (void *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v49 = 138412290;
      id v50 = v4;
      _os_log_impl( &dword_0,  (os_log_t)v11,  OS_LOG_TYPE_INFO,  "transfer updated called with non-transfer object %@",  (uint8_t *)&v49,  0xCu);
    }

    goto LABEL_35;
  }

  id v29 = objc_msgSend(a3, "idsAccountForFromURI:toURI:", v9, objc_msgSend(a1, "chatIdentifier"));
  if (IMStringIsPhoneNumber([v9 _stripFZIDPrefix])) {
    id v9 = objc_msgSend( (id)IMCanonicalizeFormattedString(objc_msgSend(v9, "_stripFZIDPrefix"), 3),  "_URIFromCanonicalizedPhoneNumber");
  }
  id v30 = [v29 _validateIDSAccount];
  if (!(_DWORD)v30)
  {
    id v9 = [a3 callerURIForMessageServiceType:v17];
    id v35 = objc_msgSend(a3, "idsAccountForFromURI:toURI:", v9, objc_msgSend(a1, "chatIdentifier"));
    id v36 = [v35 _validateIDSAccount];
    if ((_DWORD)v36)
    {
      if (a4) {
        *a4 = v35;
      }
      if (IMOSLoggingEnabled(v36, v37))
      {
        id v38 = (os_log_s *)OSLogHandleForIMFoundationCategory("CallerID");
        if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v94 = v9;
          _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_INFO,  "Ultimately decided the caller id was after falling back to session URI %@",  buf,  0xCu);
        }
      }

      if (a5)
      {
        id v39 = +[IMMetricsCollector sharedInstance](&OBJC_CLASS___IMMetricsCollector, "sharedInstance");
        -[IMMetricsCollector trackEvent:](v39, "trackEvent:", IMMetricsCollectorEventCallerIDSwitched);
      }

      return v9;
    }

    if (IMOSLoggingEnabled(v36, v37))
    {
      id v40 = (os_log_s *)OSLogHandleForIMFoundationCategory("CallerID");
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v94 = a2;
        _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_INFO,  "First try was no good based on lastAddressedHandle %@",  buf,  0xCu);
      }
    }

    uint64_t v83 = 0u;
    uint64_t v84 = 0u;
    BOOL v81 = 0u;
    int v82 = 0u;
    id v41 = [v18 countByEnumeratingWithState:&v81 objects:v91 count:16];
    id v43 = v41;
    if (v41)
    {
      uint64_t v44 = *(void *)v82;
LABEL_57:
      __int16 v45 = 0LL;
      while (1)
      {
        if (*(void *)v82 != v44) {
          objc_enumerationMutation(v18);
        }
        int v46 = *(void **)(*((void *)&v81 + 1) + 8 * v45);
        if ((_DWORD)v17 == [v46 serviceType])
        {
          id v9 = [a3 callerURIForIDSAccount:v46];
          __int16 v47 = [v46 _validateIDSAccount];
          if ((_DWORD)v47) {
            break;
          }
        }

        if (v43 == (id)++v45)
        {
          id v41 = [v18 countByEnumeratingWithState:&v81 objects:v91 count:16];
          id v43 = v41;
          if (v41) {
            goto LABEL_57;
          }
          goto LABEL_64;
        }
      }

      if (a4) {
        *a4 = v46;
      }
      id v57 = IMOSLoggingEnabled(v47, v48);
      if ((_DWORD)v57)
      {
        id v59 = (os_log_s *)OSLogHandleForIMFoundationCategory("CallerID");
        id v57 = os_log_type_enabled(v59, OS_LOG_TYPE_INFO);
        if ((_DWORD)v57)
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v94 = v9;
          _os_log_impl(&dword_0, v59, OS_LOG_TYPE_INFO, "Ultimately decided the caller id was %@", buf, 0xCu);
        }
      }

      if (a5)
      {
        uint64_t v60 = +[IMMetricsCollector sharedInstance](&OBJC_CLASS___IMMetricsCollector, "sharedInstance");
        id v57 = (uint64_t)-[IMMetricsCollector trackEvent:](v60, "trackEvent:", IMMetricsCollectorEventCallerIDSwitched);
      }

      if (v9) {
        return v9;
      }
      if (IMOSLoggingEnabled(v57, v58))
      {
        int v61 = (os_log_s *)OSLogHandleForIMFoundationCategory("CallerID");
        if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( &dword_0,  v61,  OS_LOG_TYPE_INFO,  "******** Did not find a callerURI ********. Logging accounts",  buf,  2u);
        }
      }

      id v79 = 0u;
      char v80 = 0u;
      uint64_t v77 = 0u;
      char v78 = 0u;
      uint64_t v62 = [a3 accounts];
      id v63 = (uint64_t)[v62 countByEnumeratingWithState:&v77 objects:v90 count:16];
      uint64_t v65 = v63;
      if (v63)
      {
        id v66 = *(void *)v78;
        do
        {
          id v67 = 0LL;
          do
          {
            if (*(void *)v78 != v66) {
              objc_enumerationMutation(v62);
            }
            id v68 = *(void **)(*((void *)&v77 + 1) + 8 * v67);
            id v63 = IMOSLoggingEnabled(v63, v64);
            if ((_DWORD)v63)
            {
              id v69 = (os_log_s *)OSLogHandleForIMFoundationCategory("CallerID");
              id v63 = os_log_type_enabled(v69, OS_LOG_TYPE_INFO);
              if ((_DWORD)v63)
              {
                *(_DWORD *)buf = 138412290;
                uint64_t v94 = v68;
                _os_log_impl(&dword_0, v69, OS_LOG_TYPE_INFO, "%@", buf, 0xCu);
              }
            }

            ++v67;
          }

          while (v65 != v67);
          id v63 = (uint64_t)[v62 countByEnumeratingWithState:&v77 objects:v90 count:16];
          uint64_t v65 = v63;
          id v9 = 0LL;
        }

        while (v63);
        return v9;
      }
    }

    else
    {
LABEL_64:
      if (IMOSLoggingEnabled(v41, v42))
      {
        uint64_t v49 = (os_log_s *)OSLogHandleForIMFoundationCategory("CallerID");
        if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( &dword_0,  v49,  OS_LOG_TYPE_INFO,  "******** Did not find a callerURI ********. Logging accounts",  buf,  2u);
        }
      }

      uint64_t v75 = 0u;
      uint64_t v76 = 0u;
      uint64_t v73 = 0u;
      unsigned int v74 = 0u;
      id v50 = (uint64_t)[v18 countByEnumeratingWithState:&v73 objects:v89 count:16];
      uint64_t v52 = v50;
      if (v50)
      {
        uint64_t v53 = *(void *)v74;
        do
        {
          uint64_t v54 = 0LL;
          do
          {
            if (*(void *)v74 != v53) {
              objc_enumerationMutation(v18);
            }
            id v55 = *(void **)(*((void *)&v73 + 1) + 8 * v54);
            id v50 = IMOSLoggingEnabled(v50, v51);
            if ((_DWORD)v50)
            {
              id v56 = (os_log_s *)OSLogHandleForIMFoundationCategory("CallerID");
              id v50 = os_log_type_enabled(v56, OS_LOG_TYPE_INFO);
              if ((_DWORD)v50)
              {
                *(_DWORD *)buf = 138412290;
                uint64_t v94 = v55;
                _os_log_impl(&dword_0, v56, OS_LOG_TYPE_INFO, "%@", buf, 0xCu);
              }
            }

            ++v54;
          }

          while (v52 != v54);
          id v50 = (uint64_t)[v18 countByEnumeratingWithState:&v73 objects:v89 count:16];
          uint64_t v52 = v50;
        }

        while (v50);
      }
    }

    return 0LL;
  }

  if (a4) {
    *a4 = v29;
  }
  if (IMOSLoggingEnabled(v30, v31))
  {
    id v32 = (os_log_s *)OSLogHandleForIMFoundationCategory("CallerID");
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      __int16 v33 = [v29 uniqueID];
      uint64_t v34 = objc_msgSend(v29, "im_registeredURIs");
      *(_DWORD *)buf = 138412802;
      uint64_t v94 = v9;
      v95 = 2112;
      id v96 = v33;
      uint64_t v97 = 2112;
      uint64_t v98 = v34;
      uint64_t v14 = "Ultimately decided the caller id was %@ using idsAccount %@, idsAccount im_registeredURIs: %@";
      uint64_t v15 = v32;
      uint64_t v16 = 32;
      goto LABEL_43;
    }
  }

  return v9;
}

LABEL_36:
}
}

    goto LABEL_37;
  }

  if (v23)
  {
    uint64_t v31 = OSLogHandleForIMFoundationCategory("MessageService");
    id v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138413058;
      *(void *)id v51 = v6;
      *(_WORD *)&v51[8] = 1024;
      *(_DWORD *)uint64_t v52 = 0;
      *(_WORD *)&v52[4] = 1024;
      *(_DWORD *)&v52[6] = 0;
      LOWORD(v53) = 1024;
      *(_DWORD *)((char *)&v53 + 2) = 0;
      _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_INFO,  "iCloud syncing not enabled, and was not reported junk, dropping delete command to all other devices, (command %@) cloudkitSyncingEnabled: %d wasReportedJunk: %d isScheduledMessage: %d",  buf,  0x1Eu);
    }
  }
    }
  }

  else
  {
    if (v11)
    {
      __int16 v24 = OSLogHandleForIMEventCategory("MessageService");
      int v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        id v26 = (void *)objc_claimAutoreleasedReturnValue([v5 body]);
        id v27 = (void *)objc_claimAutoreleasedReturnValue([v26 string]);
        id v28 = MarcoLoggingStringForMessageData(v27);
        id v29 = (id)objc_claimAutoreleasedReturnValue(v28);
        id v30 = (id)objc_claimAutoreleasedReturnValue([v5 guid]);
        uint64_t v31 = (id)objc_claimAutoreleasedReturnValue([v7 displayIDs]);
        *(_DWORD *)buf = 138413058;
        id v59 = v29;
        uint64_t v60 = 2112;
        int v61 = v30;
        uint64_t v62 = 2112;
        id v63 = v31;
        id v64 = 1024;
        uint64_t v65 = [v7 error];
        _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_INFO,  "Failed sending message: %@  withGUID: %@  to people: %@   error: %d",  buf,  0x26u);
      }
    }

    id v32 = [v7 error];
    if ((_DWORD)v32 == 40)
    {
      uint64_t v34 = IMOSLoggingEnabled(v32, v33);
      if ((_DWORD)v34)
      {
        id v36 = OSLogHandleForIMFoundationCategory("Warning");
        id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_INFO,  " **********************************************************************************",  buf,  2u);
        }
      }

      id v38 = IMOSLoggingEnabled(v34, v35);
      if ((_DWORD)v38)
      {
        id v40 = OSLogHandleForIMFoundationCategory("Warning");
        id v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_INFO,  " ************ INVALID LOCAL ENCRYPTION CREDENTIALS, DEACTIVATING SERVICE **********",  buf,  2u);
        }
      }

      if (IMOSLoggingEnabled(v38, v39))
      {
        uint64_t v42 = OSLogHandleForIMFoundationCategory("Warning");
        id v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( &dword_0,  v43,  OS_LOG_TYPE_INFO,  " **********************************************************************************",  buf,  2u);
        }
      }

      uint64_t v44 = objc_alloc(&OBJC_CLASS___MessageDeliveryContext);
      __int16 v45 = (void *)objc_claimAutoreleasedReturnValue([v7 displayIDs]);
      int v46 = -[MessageDeliveryContext initWithDisplayIDs:didSucceed:error:isFromMeToMe:shouldDeactivate:isBackwardsCompatibleMessage:]( v44,  "initWithDisplayIDs:didSucceed:error:isFromMeToMe:shouldDeactivate:isBackwardsCompatibleMessage:",  v45,  [v7 success],  objc_msgSend(v7, "error"),  objc_msgSend(v7, "fromMeToMe"),  1,  objc_msgSend(v5, "backwardsCompatibleVersion"));
      [v6 setMessageDeliveryContext:v46];
    }

    __int16 v47 = (void *)objc_claimAutoreleasedReturnValue(+[IMFeatureFlags sharedFeatureFlags](&OBJC_CLASS___IMFeatureFlags, "sharedFeatureFlags"));
    uint64_t v48 = [v47 isCarrierPigeonEnabled];

    uint64_t v49 = [v5 isTypingMessage];
    if ((v49 & 1) == 0 && IMOSLoggingEnabled(v49, v50))
    {
      id v51 = OSLogHandleForIMEventCategory("MessageService");
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v52 = (id)objc_claimAutoreleasedReturnValue([v5 guid]);
        uint64_t v53 = [v7 error];
        *(_DWORD *)buf = 138412546;
        id v59 = v52;
        uint64_t v60 = 1024;
        LODWORD(v61) = v53;
        _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "Error sending message:%@ error: %d", buf, 0x12u);
      }

      goto LABEL_36;
    }
  }

  objc_msgSend(v5, "setErrorCode:", objc_msgSend(v7, "error"));
  uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([v6 fromURI]);
  [v5 setDestinationCallerID:v54];
}

void sub_23C6C(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7 = a2;
  id v8 = a3;
  int v9 = IMOSLoggingEnabled();
  if (a4)
  {
    if (v9)
    {
      uint64_t v10 = OSLogHandleForIMFoundationCategory("MessageService");
      int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        uint64_t v13 = *(void *)(a1 + 40);
        int v17 = 138412546;
        uint64_t v18 = v12;
        __int16 v19 = 2112;
        uint64_t v20 = v13;
        _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_INFO,  "Finished sending nickname info for guid: %@    to people:  %@",  (uint8_t *)&v17,  0x16u);
      }

void sub_24520(id a1, MessageDeliveryController *a2, NSArray *a3, BOOL a4, unsigned int a5, BOOL a6)
{
  BOOL v6 = a4;
  id v8 = a2;
  int v9 = a3;
  int v10 = IMOSLoggingEnabled();
  if (v6)
  {
    if (v10)
    {
      uint64_t v11 = OSLogHandleForIMFoundationCategory("MessageService");
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        __int16 v17 = 0;
        uint64_t v13 = "Finished Reflecting nickname updates";
        uint64_t v14 = (uint8_t *)&v17;
LABEL_8:
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, v13, v14, 2u);
        goto LABEL_9;
      }

      goto LABEL_9;
    }
  }

  else if (v10)
  {
    uint64_t v15 = OSLogHandleForIMFoundationCategory("MessageService");
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      __int16 v16 = 0;
      uint64_t v13 = "Failed Reflecting nickname updates";
      uint64_t v14 = (uint8_t *)&v16;
      goto LABEL_8;
    }

void sub_24A28(id a1, MessageDeliveryController *a2, NSArray *a3, BOOL a4, unsigned int a5, BOOL a6)
{
  BOOL v6 = a4;
  id v8 = a2;
  int v9 = a3;
  int v10 = IMOSLoggingEnabled();
  if (v6)
  {
    if (v10)
    {
      uint64_t v11 = OSLogHandleForIMFoundationCategory("MessageService");
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        __int16 v17 = 0;
        uint64_t v13 = "Finished Reflecting sending Delivery receipt for guid:";
        uint64_t v14 = (uint8_t *)&v17;
LABEL_8:
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, v13, v14, 2u);
        goto LABEL_9;
      }

      goto LABEL_9;
    }
  }

  else if (v10)
  {
    uint64_t v15 = OSLogHandleForIMFoundationCategory("MessageService");
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      __int16 v16 = 0;
      uint64_t v13 = "Failed Reflecting sending Delivery receipt for guid:";
      uint64_t v14 = (uint8_t *)&v16;
      goto LABEL_8;
    }

void sub_25FAC(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v7 = v5;
  if (a2)
  {
    id v8 = [*(id *)(a1 + 32) _updateOrRemoveGroupPhotoForChat:*(void *)(a1 + 40) sender:*(void *)(a1 + 48) completedTransfer:*(void *)(a1 + 56) isHidden:*(unsigned __int8 *)(a1 + 72)];
    if (IMOSLoggingEnabled(v8, v9))
    {
      uint64_t v10 = OSLogHandleForIMFoundationCategory("MessageService_GroupPhoto");
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = *(void *)(a1 + 56);
        uint64_t v13 = *(void **)(a1 + 40);
        int v16 = 138412546;
        uint64_t v17 = v12;
        __int16 v18 = 2112;
        __int16 v19 = v13;
        _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_INFO,  " => stored attachment %@ and added to chat properties %@",  (uint8_t *)&v16,  0x16u);
      }

void sub_26BA0( uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void *a8, void *a9)
{
  id v14 = a2;
  id v15 = a3;
  id v16 = a6;
  id v17 = a8;
  id v18 = a9;
  if (IMOSLoggingEnabled(v18, v19))
  {
    uint64_t v20 = OSLogHandleForIMFoundationCategory("MessageService_GroupPhoto");
    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__int16 v22 = 0;
      _os_log_impl(&dword_0, v21, OS_LOG_TYPE_INFO, "All done getting new group photo.", v22, 2u);
    }
  }

  [*(id *)(a1 + 32) doneRetrievingAttachmentsForGroupPhotoForChat:*(void *)(a1 + 40) fileTransferError:v16 success:a4 transferGuid:*(void *)(a1 + 48) sender:*(void *)(a1 + 56) isHidden:*(unsigned __int8 *)(a1 + 64)];
}

LABEL_14:
    if (v9)
    {
      uint64_t v49 = 0LL;
      id v26 = _LastAddressedURIForChatLogMetricIfNeeded(v9, 0LL, self, &v49, 0);
      id v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
      id v28 = v49;
      id v30 = v28;
      if (!v28) {
        goto LABEL_26;
      }
    }

    else
    {
      id v30 = (void *)objc_claimAutoreleasedReturnValue(-[MessageServiceSession idsAccount](self, "idsAccount"));
      id v28 = (id)objc_claimAutoreleasedReturnValue(-[MessageServiceSession callerURIUsingCalleeURI:](self, "callerURIUsingCalleeURI:", 0LL));
      id v27 = v28;
      if (!v30) {
        goto LABEL_26;
      }
    }

    if (v27)
    {
      id v28 = [v27 length];
      if (v28)
      {
        uint64_t v48 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        if (v16) {
          -[NSMutableArray addObject:](v48, "addObject:", v27);
        }
        else {
          -[NSMutableArray addObject:](v48, "addObject:", IDSDefaultPairedDevice);
        }
        id v35 = JWEncodeDictionary(v6);
        id v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
        id v37 = [v36 _FTCopyGzippedData];

        if (IMOSLoggingEnabled(v38, v39))
        {
          id v40 = OSLogHandleForIMFoundationCategory("MessageService");
          id v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
          if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)id v51 = v6;
            _os_log_impl(&dword_0, v41, OS_LOG_TYPE_INFO, "Forwarding delete command :%@", buf, 0xCu);
          }
        }

        uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 181LL));
        id v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", IDSMaxMessageTimeout));
        uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  IDSSendMessageOptionTopLevelDictionaryKey,  &__kCFBooleanTrue,  IDSSendMessageOptionSkipPayloadCheckKey,  v42,  IDSSendMessageOptionCommandKey,  v37,  IDSSendMessageOptionDataToEncryptKey,  v43,  IDSSendMessageOptionTimeoutKey,  0LL));

        __int16 v45 = (void *)objc_claimAutoreleasedReturnValue(-[MessageServiceSession deliveryController](self, "deliveryController"));
        int v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionary](&OBJC_CLASS___NSDictionary, "dictionary"));
        __int16 v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v48));
        [v45 sendMessageDictionary:v46 encryptDictionary:1 fromID:v27 fromAccount:v30 toURIs:v47 toGroup:0 priority:300 options:v44 willSendBlock:0 completionBlock:&stru_D5F28];

        goto LABEL_36;
      }
    }

  if (IMOSLoggingEnabled(v3, v4))
  {
    uint64_t v12 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDelivery");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "No paired device found", buf, 2u);
    }
  }

  return 0LL;
}
      }
    }

    else if (v11)
    {
      id v16 = OSLogHandleForIMEventCategory("Attachments");
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v19 = v6;
        _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "_deleteTransferInfoForKey deleted file at path %@", buf, 0xCu);
      }

      goto LABEL_14;
    }

    goto LABEL_16;
  }

  if (IMOSLoggingEnabled(0LL, v4))
  {
    id v14 = OSLogHandleForIMFoundationCategory("Warning");
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_INFO,  "_deleteTransferInfoForKey nil key passed in. Not deleting",  buf,  2u);
    }
  }

LABEL_26:
    if (IMOSLoggingEnabled(v28, v29))
    {
      __int16 v33 = OSLogHandleForIMFoundationCategory("MessageService");
      uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412802;
        *(void *)id v51 = v30;
        *(_WORD *)&v51[8] = 2112;
        *(void *)uint64_t v52 = v27;
        *(_WORD *)&v52[8] = 2112;
        uint64_t v53 = v6;
        _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_INFO,  "Not enough information to forward delete command, idsAccount:%@ callerURI:%@ command:%@",  buf,  0x20u);
      }
    }

  id v59 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v30 = dispatch_group_create();
  uint64_t v76 = 0u;
  uint64_t v77 = 0u;
  char v78 = 0u;
  id v79 = 0u;
  id obj = v56;
  uint64_t v31 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v76,  v84,  16LL);
  if (v31)
  {
    id v57 = *(void *)v77;
    do
    {
      for (j = 0LL; j != v31; j = (char *)j + 1)
      {
        if (*(void *)v77 != v57) {
          objc_enumerationMutation(obj);
        }
        __int16 v33 = *(void **)(*((void *)&v76 + 1) + 8LL * (void)j);
        dispatch_group_enter(v30);
        uint64_t v34 = +[IMDAttachmentUtilities shouldEnablePreviewTranscodingQualityForTransfer:isSending:]( &OBJC_CLASS___IMDAttachmentUtilities,  "shouldEnablePreviewTranscodingQualityForTransfer:isSending:",  v33,  1LL);
        id v35 = (void *)objc_claimAutoreleasedReturnValue( +[MessageTranscodeController sharedInstance]( &OBJC_CLASS___MessageTranscodeController,  "sharedInstance"));
        id v36 = (void *)objc_claimAutoreleasedReturnValue([v33 localURL]);
        id v37 = (void *)objc_claimAutoreleasedReturnValue([v33 type]);
        id v38 = (void *)objc_claimAutoreleasedReturnValue([v33 transcoderUserInfo]);
        v72[0] = _NSConcreteStackBlock;
        v72[1] = 3221225472LL;
        v72[2] = sub_556B0;
        v72[3] = &unk_D6E08;
        uint64_t v73 = v59;
        unsigned int v74 = v33;
        uint64_t v75 = v30;
        LOBYTE(v45) = v34;
        [v35 transcodeFallbackFileTransferContents:v36 utiType:v37 transcoderUserInfo:v38 sizes:0 commonCapabilities:0 representations:0 isLQ MEnabled:v45 completionBlock:v72];
      }

      uint64_t v31 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v76,  v84,  16LL);
    }

    while (v31);
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_5589C;
  block[3] = &unk_D6E80;
  uint64_t v62 = v53;
  id v63 = v52;
  id v64 = v50;
  uint64_t v65 = v54;
  id v66 = self;
  id v67 = v49;
  id v68 = v48;
  id v69 = v59;
  uint64_t v71 = v51 & 1;
  uint64_t v70 = v46;
  uint64_t v58 = v46;
  id v39 = v59;
  id v40 = v48;
  id v41 = v49;
  uint64_t v42 = v54;
  uint64_t v60 = v50;
  id v43 = v52;
  uint64_t v44 = v53;
  dispatch_group_notify(v30, &_dispatch_main_q, block);
}
  }

  id v51 = (void *)objc_claimAutoreleasedReturnValue(+[IMMetricsCollector sharedInstance](&OBJC_CLASS___IMMetricsCollector, "sharedInstance"));
  uint64_t v52 = [v55 copy];
  [v51 trackEvent:IMMetricsCollectorEventIMessageSentMessageSingleComponent withDictionary:v52];
}

    id v68 = (void *)objc_opt_self(&OBJC_CLASS___IMServiceReachabilityResult);
    v62.super.isa = Array._bridgeToObjectiveC()().super.isa;
    id v63 = [v68 finalResultForService:v58 handleIDs:v62.super.isa allAreReachable:0 checkedServer:0 error:0];
LABEL_21:
    id v64 = v63;

    swift_bridgeObjectRelease(v57);
    [a2 reachabilityRequest:v34 updatedWithResult:v64];

    return;
  }

  id v69 = [v13 v26[156]];
  uint64_t v70 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v69, &type metadata for String);

  if (v70[2])
  {
    uint64_t v72 = v70[4];
    uint64_t v71 = v70[5];
    swift_bridgeObjectRetain(v71);
    swift_bridgeObjectRelease(v70);
    uint64_t v73 = v13;
    unsigned int v74 = [v13 v26[156]];
    uint64_t v75 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v74, &type metadata for String);

    uint64_t v76 = *(void *)(v75 + 16);
    swift_bridgeObjectRelease(v75);
    if (v76 == 1)
    {
      uint64_t v77 = String._bridgeToObjectiveC()();
      char v78 = [v10 hasValidDowngradeRequestForHandleID:v77];

      if ((v78 & 1) != 0)
      {
        uint64_t v34 = v13;
        id v79 = swift_bridgeObjectRetain(v71);
        char v80 = (os_log_s *)Logger.logObject.getter(v79);
        BOOL v81 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v80, v81))
        {
          typeb = v81;
          int v82 = swift_slowAlloc(22LL, -1LL);
          id v151 = swift_slowAlloc(64LL, -1LL);
          uint64_t v154 = v151;
          *(_DWORD *)int v82 = 136446466;
          uint64_t v83 = [v34 requestID];
          uint64_t v84 = v34;
          uint64_t v85 = v10;
          v86 = a2;
          uint64_t v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
          uint64_t v89 = v88;

          v90 = v87;
          a2 = v86;
          uint64_t v10 = v85;
          uint64_t v34 = v84;
          uint64_t v153 = sub_8B85C(v90, v89, &v154);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154, v82 + 4, v82 + 12);
          swift_bridgeObjectRelease(v89);

          *(_WORD *)(v82 + 12) = 2080;
          swift_bridgeObjectRetain(v71);
          uint64_t v153 = sub_8B85C(v72, v71, &v154);
          id v26 = &selRef_updateTransfer_currentBytes_totalBytes_;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154, v82 + 14, v82 + 22);
          swift_bridgeObjectRelease_n(v71, 3LL);
          _os_log_impl( &dword_0,  v80,  typeb,  "%{public}s Forcing iMessage unavailable due to downgrade request for %s",  (uint8_t *)v82,  0x16u);
          swift_arrayDestroy(v151, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v151, -1LL, -1LL);
          swift_slowDealloc(v82, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v71, 2LL);
        }

        id v122 = [v34 v26[156]];
        id v57 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v122, &type metadata for String);

        uint64_t v58 = [v10 internalServiceName];
        if (!v58)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
          uint64_t v124 = v123;
          uint64_t v58 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v124);
        }

        goto LABEL_26;
      }
    }

    swift_bridgeObjectRelease(v71);
  }

  else
  {
    uint64_t v73 = v13;
    swift_bridgeObjectRelease(v70);
  }

  uint64_t v91 = v73;
  uint64_t v92 = [v73 v26[156]];
  uint64_t v93 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v92, &type metadata for String);

  uint64_t v94 = *(void *)(v93 + 16);
  swift_bridgeObjectRelease(v93);
  if (v94 != 1) {
    goto LABEL_54;
  }
  v95 = [v73 context];
  id v96 = [v95 senderLastAddressedHandle];

  if (v96)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
    uint64_t v98 = v97;
    goto LABEL_38;
  }

  v116 = [v73 context];
  id v117 = [v116 senderLastAddressedSIMID];

  if (!v117)
  {
LABEL_54:
    uint64_t v129 = [v91 v26[156]];
    v130 = (uint64_t *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v129, &type metadata for String);

    uint64_t v131 = [v91 requestID];
    uint64_t v132 = static String._unconditionallyBridgeFromObjectiveC(_:)(v131);
    id v134 = v133;

    id v135 = [v91 context];
    uint64_t v136 = [v91 context];
    uint64_t v137 = [v136 shouldForceServerStatusRefresh];

    id v138 = swift_allocObject(&unk_D8080, 32LL, 7LL);
    *(void *)(v138 + 16) = a2;
    *(void *)(v138 + 24) = v91;
    id v139 = v91;
    swift_unknownObjectRetain(a2);
    sub_87DBC(v130, v132, v134, v142, a4, v135, v137, 2u, (uint64_t)sub_8BEE0, v138);
    swift_release(v138);

    swift_bridgeObjectRelease(v134);
    swift_bridgeObjectRelease(v130);
    return;
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)(v117);
  v119 = v118;

  swift_unknownObjectRetain(v10);
  swift_bridgeObjectRetain(v119);
  v120 = String._bridgeToObjectiveC()();
  id v96 = [v10 phoneNumberOnSubscriptionWithSIMID:v120];

  if (!v96)
  {
    swift_bridgeObjectRelease_n(v119, 2LL);
    swift_unknownObjectRelease(v10);
    goto LABEL_54;
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
  uint64_t v98 = v121;
  swift_bridgeObjectRelease_n(v119, 2LL);
  swift_unknownObjectRelease(v10);
LABEL_38:

  uint64_t v99 = [v91 v26[156]];
  uint64_t v100 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v99, &type metadata for String);

  if (*(void *)(v100 + 16))
  {
    id v101 = *(void *)(v100 + 40);
    swift_bridgeObjectRetain(v101);
    swift_bridgeObjectRelease(v100);
    uint64_t v102 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v101);
    uint64_t v103 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v98);
    uint64_t v104 = [v91 context];
    id v105 = v102;
    LODWORD(v102) = [v10 shouldDowngradeToRecipient:v102 fromSender:v103 withContext:v104];

    if ((_DWORD)v102)
    {
      uint64_t v34 = v91;
      v106 = (os_log_s *)Logger.logObject.getter(v34);
      uint64_t v107 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v106, v107))
      {
        id v152 = v10;
        uint64_t v108 = a2;
        uint64_t v109 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v110 = swift_slowAlloc(32LL, -1LL);
        uint64_t v154 = v110;
        *(_DWORD *)uint64_t v109 = 136446210;
        uint64_t v111 = [v34 requestID];
        uint64_t v112 = static String._unconditionallyBridgeFromObjectiveC(_:)(v111);
        uint64_t v114 = v113;

        uint64_t v153 = sub_8B85C(v112, v114, &v154);
        id v26 = &selRef_updateTransfer_currentBytes_totalBytes_;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154, v109 + 4, v109 + 12);
        uint64_t v115 = v114;
        a2 = v108;
        uint64_t v10 = v152;
        swift_bridgeObjectRelease(v115);

        _os_log_impl( &dword_0,  v106,  v107,  "%{public}s Forcing iMessage unavailable due to Hawking downgrade",  v109,  0xCu);
        swift_arrayDestroy(v110, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v110, -1LL, -1LL);
        swift_slowDealloc(v109, -1LL, -1LL);
      }

      else
      {
      }

      id v125 = [v34 v26[156]];
      id v57 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v125, &type metadata for String);

      uint64_t v58 = [v10 internalServiceName];
      if (!v58)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
        uint64_t v127 = v126;
        uint64_t v58 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v127);
      }

      uint64_t v128 = (void *)objc_opt_self(&OBJC_CLASS___IMServiceReachabilityResult);
      v62.super.isa = Array._bridgeToObjectiveC()().super.isa;
      id v63 = [v128 finalResultForService:v58 handleIDs:v62.super.isa allAreReachable:0 checkedServer:0 error:5];
      goto LABEL_21;
    }

    goto LABEL_54;
  }

  __break(1u);
}

      id v15 = (v19 - 1) & v19;
      id v16 = __clz(__rbit64(v19)) + (v17 << 6);
    }

    sub_8EBE4(*(void *)(v1 + 48) + 40 * v16, (uint64_t)v41);
    sub_8EC20(*(void *)(v1 + 56) + 32 * v16, (uint64_t)v7);
    v39[0] = v42[0];
    v39[1] = v42[1];
    id v40 = v43;
    v38[0] = v41[0];
    v38[1] = v41[1];
    sub_8EBE4((uint64_t)v38, (uint64_t)v37);
    if (!swift_dynamicCast(&v35, v37, &type metadata for AnyHashable, &type metadata for String, 6LL))
    {
      id v35 = 0LL;
      id v36 = 0LL;
      sub_8EC5C((uint64_t)v38, &qword_E3258);
      swift_bridgeObjectRelease(v36);
LABEL_35:
      sub_8452C(v1);
      swift_release(v3);
      return;
    }

    __int16 v22 = (uint64_t)v35;
    uint64_t v21 = v36;
    sub_8EC20((uint64_t)v8, (uint64_t)v37);
    sub_8EC5C((uint64_t)v38, &qword_E3258);
    uint64_t v23 = sub_8448C(0LL, &qword_E3260, &OBJC_CLASS___IDSIDInfoResult_ptr);
    if ((swift_dynamicCast(&v35, v37, (char *)&type metadata for Any + 8, v23, 6LL) & 1) == 0)
    {
      id v35 = 0LL;
      swift_bridgeObjectRelease(v21);

      goto LABEL_35;
    }

    __int16 v24 = v35;
    int v25 = sub_8BF14(v22, v21);
    id v26 = v25;
    if ((v27 & 1) != 0)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v7;
      uint64_t v12 = (uint64_t *)(v3[6] + 16 * v25);
      swift_bridgeObjectRelease(v12[1]);
      *uint64_t v12 = v22;
      v12[1] = v21;
      uint64_t v13 = v3[7];
      id v14 = 8 * v26;

      *(void *)(v13 + v14) = v24;
      id v7 = v11;
      id v8 = v10;
      unsigned int v1 = v32;
      goto LABEL_8;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << v25;
    id v28 = (uint64_t *)(v3[6] + 16 * v25);
    *id v28 = v22;
    v28[1] = v21;
    *(void *)(v3[7] + 8 * v25) = v24;
    id v29 = v3[2];
    id v30 = __OFADD__(v29, 1LL);
    uint64_t v31 = v29 + 1;
    if (v30) {
      goto LABEL_38;
    }
    v3[2] = v31;
LABEL_8:
    uint64_t v9 = v17;
    uint64_t v6 = v15;
  }

  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
}

        uint64_t v9 = (v19 - 1) & v19;
        id v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      uint64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
      __int16 v22 = *v21;
      uint64_t v23 = v21[1];
      Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      __int16 v24 = -1LL << *(_BYTE *)(v6 + 32);
      int v25 = result & ~v24;
      id v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        id v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        id v27 = 0;
        id v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          id v29 = v26 == v28;
          if (v26 == v28) {
            id v26 = 0LL;
          }
          v27 |= v29;
          id v30 = *(void *)(v11 + 8 * v26);
        }

        while (v30 == -1);
        id v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      id v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
      *id v15 = v22;
      v15[1] = v23;
      ++*(void *)(v6 + 16);
    }
  }

  result = swift_release(v3);
  void *v2 = v6;
  return result;
}

    uint64_t v10 = (v19 - 1) & v19;
    id v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    uint64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
    __int16 v22 = *v21;
    uint64_t v23 = v21[1];
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    __int16 v24 = -1LL << *(_BYTE *)(v6 + 32);
    int v25 = result & ~v24;
    id v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      id v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v27 = 0;
      id v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        id v29 = v26 == v28;
        if (v26 == v28) {
          id v26 = 0LL;
        }
        v27 |= v29;
        id v30 = *(void *)(v11 + 8 * v26);
      }

      while (v30 == -1);
      id v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    id v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
    *id v15 = v22;
    v15[1] = v23;
    ++*(void *)(v6 + 16);
  }

  uint64_t v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_38;
  }

  uint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    uint64_t v13 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v13 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_36;
    }
    uint64_t v19 = *(void *)(v8 + 8 * v13);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

LABEL_37:
}

      if (IMOSLoggingEnabled(v17, v18))
      {
        id v28 = (os_log_s *)OSLogHandleForIMFoundationCategory("Delivery");
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_INFO,  "There is more than one legacy recipient URI, generating keep receipts now.",  buf,  2u);
        }
      }

      if (*(void *)(a1 + 120))
      {
        id v29 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
        id v51 = 0u;
        uint64_t v52 = 0u;
        uint64_t v49 = 0u;
        id v50 = 0u;
        id v30 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v10,  "countByEnumeratingWithState:objects:count:",  &v49,  v62,  16LL);
        if (v30)
        {
          uint64_t v31 = *(void *)v50;
          do
          {
            for (j = 0LL; j != v30; j = (char *)j + 1)
            {
              if (*(void *)v50 != v31) {
                objc_enumerationMutation(v10);
              }
              __int16 v33 = [*(id *)(*((void *)&v49 + 1) + 8 * (void)j) _stripPotentialTokenURIWithToken:0];
              if ((-[NSMutableSet containsObject:](v29, "containsObject:", v33) & 1) == 0)
              {
                (*(void (**)(void))(*(void *)(a1 + 120) + 16LL))();
                -[NSMutableSet addObject:](v29, "addObject:", v33);
              }
            }

            id v30 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v10,  "countByEnumeratingWithState:objects:count:",  &v49,  v62,  16LL);
          }

          while (v30);
        }
      }
    }

    id v26 = 0LL;
LABEL_52:
    uint64_t v34 = *(void **)(a1 + 56);
    id v35 = *(void *)(a1 + 64);
    id v37 = *(void *)(a1 + 32);
    id v36 = *(void *)(a1 + 40);
    id v38 = *(void *)(a1 + 72);
    id v39 = *(void *)(a1 + 80);
    id v40 = *(void *)(a1 + 88);
    id v41 = *(void *)(a1 + 96);
    uint64_t v42 = *(void *)(a1 + 104);
    id v43 = *(void *)(a1 + 112);
    v48[1] = 3221225472LL;
    v48[2] = sub_4167C;
    v48[3] = &unk_D6370;
    v48[4] = *(void *)(a1 + 128);
    v48[0] = _NSConcreteStackBlock;
    LOBYTE(v47) = 0;
    [v34 _sendMessage:v36 context:v35 deliveryContext:v26 fromID:v37 fromAccount:v38 toID:0 chatIdentifier:v39 toSessionToken:0 toGroup:v40 toParticipants:a3  originallyToParticipants:v41 requiredRegProperties:0 interestingRegProperties:0 requiresLackOfRegProperties:0 canInlineAttac hments:v47 type:1 msgPayloadUploadDictionary:0 originalPayload:v42 replyToMessageGUID:v43 willSendBlock:0 completionBlock:v48];
  }

void sub_27518(id a1, MessageDeliveryController *a2, NSArray *a3, BOOL a4, unsigned int a5, BOOL a6)
{
  BOOL v7 = a4;
  uint64_t v9 = a2;
  uint64_t v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (v7)
  {
    if (v11)
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory("MessageService");
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        LOWORD(v16[0]) = 0;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_INFO,  "Finished sending delete command to all devices",  (uint8_t *)v16,  2u);
      }
    }
  }

  else if (v11)
  {
    uint64_t v14 = OSLogHandleForIMFoundationCategory("MessageService");
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      v16[0] = 67109120;
      v16[1] = a5;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_INFO,  "Failed Reflecting sending delete command. errorType: %d",  (uint8_t *)v16,  8u);
    }
  }
}

LABEL_19:
    if (IMOSLoggingEnabled(v23, v24))
    {
      id v28 = OSLogHandleForIMFoundationCategory("MessageService");
      id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412802;
        uint64_t v49 = v25;
        id v50 = 2112;
        id v51 = v22;
        uint64_t v52 = 2112;
        uint64_t v53 = v44;
        _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_INFO,  "Recently Deleted | Not enough information to forward Recover command, idsAccount:%@ callerURI:%@ command:%@",  buf,  0x20u);
      }
    }
}

LABEL_34:
}

        -[MessageServiceSession _storeSentMessage:withContext:](self, "_storeSentMessage:withContext:", v6, v7);
        -[MessageServiceSession _didSendMessage:withContext:forceDate:fromStorage:]( self,  "_didSendMessage:withContext:forceDate:fromStorage:",  v6,  v7,  0LL,  0LL);
        uint64_t v31 = 0;
        goto LABEL_35;
      }
    }
  }

  if (!-[MessageServiceSession _shouldSendAppTypingIndicator](self, "_shouldSendAppTypingIndicator"))
  {
    if ([v6 isTypingMessage])
    {
      __int16 v24 = (void *)objc_claimAutoreleasedReturnValue([v6 balloonBundleID]);
      int v25 = [v24 length] == 0;

      if (!v25)
      {
        if (IMOSLoggingEnabled(v26, v27))
        {
          id v28 = OSLogHandleForIMFoundationCategory("MessageService");
          id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
          {
            id v38 = 138412290;
            v39[0] = v6;
            _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_INFO,  "Not sending app typing indicator due to server overrride for msg %@",  (uint8_t *)&v38,  0xCu);
          }
        }

        goto LABEL_34;
      }
    }
  }

  if (([v6 isTypingMessage] & 1) == 0)
  {
    id v30 = (void *)objc_claimAutoreleasedReturnValue(+[IMMetricsCollector sharedInstance](&OBJC_CLASS___IMMetricsCollector, "sharedInstance"));
    [v30 trackEvent:IMMetricsCollectorEventiMessageSent];
  }

  uint64_t v31 = 1;
LABEL_35:

  return v31;
}

void sub_27BB0(id a1, MessageDeliveryController *a2, NSArray *a3, BOOL a4, unsigned int a5, BOOL a6)
{
  BOOL v6 = a4;
  id v8 = a2;
  uint64_t v9 = a3;
  if (IMOSLoggingEnabled())
  {
    uint64_t v10 = OSLogHandleForIMFoundationCategory("MessageService");
    int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = @"NO";
      if (v6) {
        uint64_t v12 = @"YES";
      }
      int v13 = 138412290;
      uint64_t v14 = v12;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_INFO,  "Recently Deleted | Sending Recover command to all devices with success: %@",  (uint8_t *)&v13,  0xCu);
    }
  }
}

void sub_27FF0(uint64_t a1, void *a2, void *a3, void *a4, int a5, int a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  int v14 = IMOSLoggingEnabled();
  if (a5)
  {
    if (v14)
    {
      uint64_t v15 = OSLogHandleForIMFoundationCategory("Group");
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        uint64_t v17 = *(void *)(a1 + 32);
        uint64_t v18 = *(void *)(a1 + 40);
        uint64_t v19 = *(void *)(a1 + 48);
        int v20 = *(unsigned __int8 *)(a1 + 56);
        int v27 = 138413314;
        uint64_t v28 = v17;
        __int16 v29 = 2112;
        id v30 = v12;
        __int16 v31 = 2112;
        *(void *)id v32 = v18;
        *(_WORD *)&v32[8] = 2112;
        *(void *)&v32[10] = v19;
        *(_WORD *)&v32[18] = 1024;
        *(_DWORD *)&v32[20] = v20;
        _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_INFO,  "Successfully updated name: %@   forChat: %@   (GUID: %@  Identifier: %@  Style: %c)",  (uint8_t *)&v27,  0x30u);
      }
    }
  }

  else if (v14)
  {
    uint64_t v21 = OSLogHandleForIMFoundationCategory("Warning");
    __int16 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      uint64_t v23 = *(void *)(a1 + 32);
      uint64_t v24 = *(void *)(a1 + 40);
      uint64_t v25 = *(void *)(a1 + 48);
      int v26 = *(unsigned __int8 *)(a1 + 56);
      int v27 = 138413570;
      uint64_t v28 = v23;
      __int16 v29 = 2112;
      id v30 = v12;
      __int16 v31 = 1024;
      *(_DWORD *)id v32 = a6;
      *(_WORD *)&v32[4] = 2112;
      *(void *)&v32[6] = v24;
      *(_WORD *)&v32[14] = 2112;
      *(void *)&v32[16] = v25;
      __int16 v33 = 1024;
      int v34 = v26;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_INFO,  "*** Failed to update name: %@   forChat: %@   Error: %d (GUID: %@  Identifier: %@  Style: %c)",  (uint8_t *)&v27,  0x36u);
    }
  }
}

void sub_284CC(id a1, MessageDeliveryController *a2, NSArray *a3, BOOL a4, unsigned int a5, BOOL a6)
{
  BOOL v7 = a4;
  uint64_t v9 = a2;
  uint64_t v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (v7)
  {
    if (v11)
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory("MessageService");
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        LOWORD(v16[0]) = 0;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_INFO,  "Successfully sent close session message to business",  (uint8_t *)v16,  2u);
      }
    }
  }

  else if (v11)
  {
    uint64_t v14 = OSLogHandleForIMFoundationCategory("MessageService");
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      v16[0] = 67109120;
      v16[1] = a5;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_INFO,  "Failed to send message for closing session with business. Error: %d",  (uint8_t *)v16,  8u);
    }
  }
}

LABEL_66:
      uint64_t v23 = v85;
      goto LABEL_67;
    }
  }

  else
  {
    uint64_t v89 = 0LL;
    v90 = 0LL;
    uint64_t v21 = 0LL;
  }

  __int16 v22 = objc_claimAutoreleasedReturnValue(-[MessageServiceSession callerURIUsingCalleeURI:](self, "callerURIUsingCalleeURI:", v89));

  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(-[MessageServiceSession idsAccount](self, "idsAccount"));
  if (v22)
  {
    uint64_t v21 = v23;
    v90 = (void *)v22;
    goto LABEL_12;
  }

  if (IMOSLoggingEnabled(v24, v25))
  {
    id v35 = OSLogHandleForIMEventCategory("MessageService");
    id v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_0, v36, OS_LOG_TYPE_INFO, " ** Not sending command, no caller URI", buf, 2u);
    }
  }

LABEL_67:
}

  id v41 = -[NSMutableString isEqualToString:](self->_AuxHTML, "isEqualToString:", self->_outHTML);
  if ((v41 & 1) == 0)
  {
    if (IMOSLoggingEnabled(v41, v42))
    {
      id v43 = (os_log_s *)OSLogHandleForIMFoundationCategory("Warning");
      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( &dword_0,  v43,  OS_LOG_TYPE_INFO,  "SuperToMessageParser parser:foundAtrributes:inRange:characters: _AuxHTML != _outHTML",  buf,  2u);
      }
    }
  }
}

void sub_294A4(id a1, MessageDeliveryController *a2, NSArray *a3, BOOL a4, unsigned int a5, BOOL a6)
{
  BOOL v7 = a4;
  uint64_t v9 = a2;
  uint64_t v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (v7)
  {
    if (v11)
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory("MessageService");
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        LOWORD(v16[0]) = 0;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_INFO,  "Finished reflecting chat properties across devices",  (uint8_t *)v16,  2u);
      }
    }
  }

  else if (v11)
  {
    uint64_t v14 = OSLogHandleForIMFoundationCategory("MessageService");
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      v16[0] = 67109120;
      v16[1] = a5;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_INFO,  "Failed reflecting chat properties across devices: %d",  (uint8_t *)v16,  8u);
    }
  }
}

void sub_295F0(id a1, MessageDeliveryController *a2, NSArray *a3, BOOL a4, unsigned int a5, BOOL a6)
{
  BOOL v7 = a4;
  uint64_t v9 = a2;
  uint64_t v10 = a3;
  int v11 = IMOSLoggingEnabled();
  if (v7)
  {
    if (v11)
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory("MessageService");
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        LOWORD(v16[0]) = 0;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_INFO,  "Finished reflecting global read receipt value across devices",  (uint8_t *)v16,  2u);
      }
    }
  }

  else if (v11)
  {
    uint64_t v14 = OSLogHandleForIMFoundationCategory("MessageService");
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      v16[0] = 67109120;
      v16[1] = a5;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_INFO,  "Failed reflecting global read receipt value across devices: %d",  (uint8_t *)v16,  8u);
    }
  }
}

void sub_29DD4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x29D9CLL);
  }

  _Unwind_Resume(a1);
}

void sub_2A624(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 104LL);
  int v4 = IMOSLoggingEnabled(a1, a2);
  if (v3)
  {
    if (!v4) {
      return;
    }
    uint64_t v5 = OSLogHandleForIMFoundationCategory("MessageService");
    BOOL v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LOWORD(v20) = 0;
      _os_log_impl(&dword_0, v6, OS_LOG_TYPE_INFO, "Already have a timer, waiting for it to fire", (uint8_t *)&v20, 2u);
    }

    goto LABEL_13;
  }

  if (v4)
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory("MessageService");
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      LOWORD(v20) = 0;
      _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "Sceduling Failure Retry reset timer", (uint8_t *)&v20, 2u);
    }
  }

  +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
  double v10 = v9;
  int v11 = objc_alloc(&OBJC_CLASS___IMTimer);
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v12 = a1 + 32;
  uint64_t v14 = -[IMTimer initWithTimeInterval:name:shouldWake:target:selector:userInfo:]( v11,  "initWithTimeInterval:name:shouldWake:target:selector:userInfo:",  @"com.apple.identityservicesd.resetFailureRetries",  0LL,  v13,  "_resetFailureRetries",  0LL,  v10 + 604800.0 - v10);
  uint64_t v15 = *(void **)(*(void *)v12 + 104LL);
  *(void *)(*(void *)v12 + 104LL) = v14;

  if (IMOSLoggingEnabled(v16, v17))
  {
    uint64_t v18 = OSLogHandleForIMFoundationCategory("MessageService");
    BOOL v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  v10 + 604800.0));
      int v20 = 138412290;
      uint64_t v21 = v19;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_INFO,  "Message Failure Retry Count Will Reset on date %@",  (uint8_t *)&v20,  0xCu);
    }

LABEL_52:
  __int16 v47 = (void *)objc_claimAutoreleasedReturnValue(-[MessageServiceSession callerURIForIDSAccount:](self, "callerURIForIDSAccount:", v22));
  uint64_t v48 = [v47 isEqualToIgnoringCase:kIDSServiceDefaultsSentinelAlias];
  if ((_DWORD)v48)
  {
    id v68 = 0u;
    id v69 = 0u;
    id v66 = 0u;
    id v67 = 0u;
    id v50 = v64;
    id v51 = [v50 countByEnumeratingWithState:&v66 objects:v85 count:16];
    if (v51)
    {
      uint64_t v52 = *(void *)v67;
      while (2)
      {
        for (j = 0LL; j != v51; j = (char *)j + 1)
        {
          if (*(void *)v67 != v52) {
            objc_enumerationMutation(v50);
          }
          uint64_t v54 = *(void **)(*((void *)&v66 + 1) + 8LL * (void)j);
          if (![v54 accountType])
          {
            id v55 = objc_claimAutoreleasedReturnValue(-[MessageServiceSession callerURIForIDSAccount:](self, "callerURIForIDSAccount:", v54));

            __int16 v47 = (void *)v55;
            goto LABEL_63;
          }
        }

        id v51 = [v50 countByEnumeratingWithState:&v66 objects:v85 count:16];
        if (v51) {
          continue;
        }
        break;
      }
    }
}

LABEL_63:
  }

  if (IMOSLoggingEnabled(v48, v49))
  {
    id v56 = OSLogHandleForIMFoundationCategory("CallerID");
    id v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
    if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
    {
      uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue([v22 registeredURIs]);
      *(_DWORD *)buf = 138412802;
      char v80 = v47;
      BOOL v81 = 2112;
      int v82 = v22;
      uint64_t v83 = 2112;
      uint64_t v84 = v58;
      _os_log_impl( &dword_0,  v57,  OS_LOG_TYPE_INFO,  "found caller id (%@) from ids account %@, registered URIs %@",  buf,  0x20u);
    }
  }

LABEL_69:
  return v47;
}

  -[NSMutableString appendString:](self->_outHTML, "appendString:", @"</texteffect>");
  -[NSMutableString appendString:](self->_AuxHTML, "appendString:", @"</texteffect>");
  if (!v29)
  {
LABEL_58:
    if (!v26) {
      goto LABEL_59;
    }
LABEL_65:
    -[NSMutableString appendString:](self->_outHTML, "appendString:", @"</span>");
    -[NSMutableString appendString:](self->_AuxHTML, "appendString:", @"</span>");
    if (!v55) {
      goto LABEL_66;
    }
    goto LABEL_60;
  }

id sub_2B55C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 callerURIForIDSAccount:a2]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) callerURIForIDSAccount:v6]);

  id v9 = [v7 compare:v8];
  return v9;
}

LABEL_47:
    [v29 replayMessage:v50];
  }
}

void sub_2BD04(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void (**)(uint64_t))(v2 + 16);
  int v4 = a2;
  v3(v2);
  v4[2]();
}

void sub_2C598(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (IMOSLoggingEnabled(a1, a2))
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v9 = @"NO";
      if (a3) {
        id v9 = @"YES";
      }
      int v15 = 138412546;
      uint64_t v16 = v9;
      __int16 v17 = 1024;
      int v18 = a4;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_INFO,  "Scheduled Message | Done sending FTMessage for refresh request. success %@ error %d",  (uint8_t *)&v15,  0x12u);
    }
  }

  double v10 = *(void **)(a1 + 32);
  int v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v10 setRefreshDate:v11];

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[IMDAttachmentStore sharedInstance](&OBJC_CLASS___IMDAttachmentStore, "sharedInstance"));
  uint64_t v13 = *(void **)(a1 + 32);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 messageGUID]);
  [v12 storeAttachment:v13 associateWithMessageWithGUID:v14];
}

void sub_2C968(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[IMDCKExitManager sharedInstance](&OBJC_CLASS___IMDCKExitManager, "sharedInstance"));
  [v1 submitCloudKitMetricWithOperationGroupName:IMPostingMissingMessageData];
}

void sub_2C9A8( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_2C9B8( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

void sub_2C9E0( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

void sub_2D838(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x2D004LL);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_2DA04()
{
  if ((IMGetDomainBoolForKeyWithDefaultValue(@"com.apple.madrid", @"JunkFilteringReceiptsEnabled", 1LL) & 1) != 0) {
    return 1LL;
  }
  else {
    return IMGetDomainBoolForKeyWithDefaultValue( @"com.apple.madrid",  @"ForceJunkFilteringReceiptsEnabled",  0LL);
  }
}

id sub_2DA50(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 _stripFZIDPrefix]);
  int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _stripFZIDPrefix]);
  unsigned __int8 v5 = [v3 isEqualToString:v4];

  if ((v5 & 1) != 0) {
    id v6 = 0LL;
  }
  else {
    id v6 = v3;
  }

  return v6;
}

uint64_t sub_2DAC4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_2DAD4(uint64_t a1)
{
}

void sub_2DADC(uint64_t a1, void *a2, void *a3, char a4, int a5, void *a6, uint64_t a7, void *a8, void *a9)
{
  id v16 = a2;
  id v17 = a3;
  id v18 = a6;
  id v19 = a8;
  int v20 = a9;
  if ((a4 & 1) != 0 || (uint64_t IsUnderAutomation = IMSharedHelperIsUnderAutomation(), !(_DWORD)IsUnderAutomation))
  {
    uint64_t v47 = a7;
    int v26 = v20;
    int v27 = v19;
    id v50 = v17;
    id v28 = v16;
    [*(id *)(a1 + 32) _updateTransfersForAttributionInfoArray:*(void *)(a1 + 40) message:v16];
    __int16 v29 = (void *)objc_claimAutoreleasedReturnValue([v16 messageSummaryInfo]);
    CFMutableDictionaryRef Mutable = (CFMutableDictionaryRef)[v29 mutableCopy];

    if (!Mutable) {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
    __int16 v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
    -[__CFDictionary setObject:forKey:]( Mutable,  "setObject:forKey:",  v31,  IMMessageSummaryInfoUpdatedDateWithServerTime);

    [v16 setMessageSummaryInfo:Mutable];
    v53[0] = _NSConcreteStackBlock;
    v53[1] = 3221225472LL;
    v53[2] = sub_2DFFC;
    v53[3] = &unk_D60B8;
    id v32 = v16;
    id v54 = v32;
    uint64_t v48 = v26;
    __int16 v33 = v26;
    char v83 = *(_BYTE *)(a1 + 232);
    uint64_t v34 = *(void *)(a1 + 32);
    id v79 = v33;
    uint64_t v55 = v34;
    id v56 = *(id *)(a1 + 48);
    id v57 = *(id *)(a1 + 56);
    id v35 = *(id *)(a1 + 64);
    uint64_t v36 = *(void *)(a1 + 224);
    id v58 = v35;
    uint64_t v80 = v36;
    id v59 = *(id *)(a1 + 72);
    char v84 = *(_BYTE *)(a1 + 233);
    id v60 = *(id *)(a1 + 80);
    id v61 = *(id *)(a1 + 88);
    id v62 = *(id *)(a1 + 96);
    id v63 = *(id *)(a1 + 104);
    char v85 = *(_BYTE *)(a1 + 234);
    id v64 = *(id *)(a1 + 112);
    char v86 = *(_BYTE *)(a1 + 235);
    char v87 = a4;
    int v82 = a5;
    id v65 = v18;
    uint64_t v81 = v47;
    id v66 = *(id *)(a1 + 120);
    uint64_t v49 = v27;
    id v67 = v27;
    id v68 = *(id *)(a1 + 128);
    id v69 = *(id *)(a1 + 136);
    char v88 = *(_BYTE *)(a1 + 236);
    id v70 = *(id *)(a1 + 144);
    __int16 v89 = *(_WORD *)(a1 + 237);
    id v71 = *(id *)(a1 + 152);
    char v90 = *(_BYTE *)(a1 + 239);
    id v72 = *(id *)(a1 + 160);
    id v73 = *(id *)(a1 + 168);
    id v74 = *(id *)(a1 + 176);
    id v75 = *(id *)(a1 + 184);
    id v76 = *(id *)(a1 + 192);
    id v77 = *(id *)(a1 + 200);
    id v78 = *(id *)(a1 + 208);
    id v37 = objc_retainBlock(v53);
    id v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) attachmentController]);
    uint64_t v39 = *(void *)(a1 + 216);
    id v40 = v18;
    id v41 = (void *)objc_claimAutoreleasedReturnValue([v32 guid]);
    uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v32 balloonBundleID]);
    uint64_t v25 = v28;
    uint64_t v45 = a1 + 104;
    uint64_t v44 = *(void *)(a1 + 104);
    uint64_t v43 = *(void *)(v45 + 8);
    v51[0] = _NSConcreteStackBlock;
    v51[1] = 3221225472LL;
    v51[2] = sub_31368;
    v51[3] = &unk_D60E0;
    id v52 = v37;
    int v46 = v37;
    [v38 processMessageAttachmentDictionary:v39 forMessageGUID:v41 balloonBundleID:v42 fromIdentifier:v43 senderToken:v44 withCompletionBlock:v51];

    id v18 = v40;
    int v20 = v48;

    id v19 = v49;
    id v17 = v50;
  }

  else
  {
    if (IMOSLoggingEnabled(IsUnderAutomation, v22))
    {
      uint64_t v23 = OSLogHandleForIMFoundationCategory("MessageService");
      uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_INFO,  "***************** Attachment download failed. Not persisting message as we are under automation ***************",  buf,  2u);
      }
    }

    uint64_t v25 = v16;
    if (v20)
    {
      if (*(_BYTE *)(a1 + 232)) {
        [*(id *)(a1 + 32) noteLastItemProcessed];
      }
      v20[2](v20);
      uint64_t v25 = v16;
    }
  }
}

void sub_2DFFC(uint64_t a1, void *a2, void *a3, char a4)
{
  id v7 = a2;
  id v8 = a3;
  v359 = v8;
  uint64_t v369 = a1;
  v364 = v7;
  if ((a4 & 1) != 0)
  {
    if (!v7)
    {
      v364 = 0LL;
      goto LABEL_26;
    }

    if (IMOSLoggingEnabled(v8, v9))
    {
      uint64_t v10 = OSLogHandleForIMFoundationCategory("PayloadAttachments");
      int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v11, OS_LOG_TYPE_INFO, " Setting message payload downloaded from MMCS", buf, 2u);
      }
    }

    [*(id *)(a1 + 48) setPayloadData:v7];
    if (![v359 count])
    {
LABEL_26:
      id v26 = [*(id *)(a1 + 64) count];
      BOOL v367 = (unint64_t)v26 > 2;
      id v368 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 240) + 8) + 40) chatIdentifier]);
      unsigned __int8 v388 = 0;
      id v27 = [*(id *)(*(void *)(*(void *)(a1 + 240) + 8) + 40) style];
      unsigned __int8 v388 = v27;
      if (IMOSLoggingEnabled(v27, v28))
      {
        uint64_t v29 = OSLogHandleForIMFoundationCategory("MessageService");
        id v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
        {
          uint64_t v31 = *(void *)(*(void *)(*(void *)(a1 + 240) + 8LL) + 40LL);
          *(_DWORD *)buf = 138412802;
          *(void *)__int128 v396 = v368;
          *(_WORD *)&v396[8] = 1024;
          *(_DWORD *)&v396[10] = v388;
          *(_WORD *)&v396[14] = 2112;
          *(void *)&v396[16] = v31;
          _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_INFO,  "Found chat with chatIdentifier (%@) style (%c): %@",  buf,  0x1Cu);
        }
      }

      id v32 = *(void **)(*(void *)(*(void *)(a1 + 240) + 8LL) + 40LL);
      if (v32)
      {
        __int16 v33 = (void *)objc_claimAutoreleasedReturnValue([v32 service]);
        uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) account]);
        id v35 = (void *)objc_claimAutoreleasedReturnValue([v34 service]);
        unsigned int v363 = v33 != v35;

        if (v363 && IMOSLoggingEnabled(v36, v37))
        {
          uint64_t v38 = OSLogHandleForIMFoundationCategory("MessageService");
          uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
          if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_0, v39, OS_LOG_TYPE_INFO, "Service of found chat not equal, lets register", buf, 2u);
          }
        }

        _UpdateLastAddressedHandle( *(void **)(a1 + 48),  *(void **)(a1 + 72),  *(void **)(*(void *)(*(void *)(a1 + 240) + 8LL) + 40LL));
        BOOL v367 = v388 != 45;
        uint64_t v40 = a1;
        if (*(_BYTE *)(a1 + 261))
        {
          id v41 = [*(id *)(*(void *)(*(void *)(a1 + 240) + 8) + 40) isBlackholed];
          uint64_t v40 = a1;
          if ((_DWORD)v41)
          {
            if (IMOSLoggingEnabled(v41, v42))
            {
              uint64_t v43 = OSLogHandleForIMFoundationCategory("MessageService");
              uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
              if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
              {
                id v45 = objc_retain((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 240) + 8)
                                                                                           + 40LL), "guid")));
                *(_DWORD *)buf = 138412290;
                *(void *)__int128 v396 = v45;
                _os_log_impl(&dword_0, v44, OS_LOG_TYPE_INFO, "Unblackholing chat %@ based on reflection", buf, 0xCu);
              }
            }

            [*(id *)(*(void *)(*(void *)(a1 + 240) + 8) + 40) updateIsBlackholed:0];
            uint64_t v40 = a1;
          }
        }

        if (*(void *)(v40 + 80))
        {
          unsigned int v46 = [*(id *)(v40 + 40) _convergesDisplayNames];
          uint64_t v40 = a1;
          if (v46)
          {
            [*(id *)(a1 + 40) didReceiveDisplayNameChange:*(void *)(a1 + 80) fromID:*(void *)(a1 + 88) toIdentifier:*(void *)(a1 + 72) forChat:v368 style:v388 account:*(void *)(a1 + 96)];
            uint64_t v40 = a1;
          }
        }

        if ([*(id *)(v40 + 40) isReplicating])
        {
          uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
          [*(id *)(*(void *)(*(void *)(a1 + 240) + 8) + 40) setLastReplicationSinceLoadDate:v47];
        }

        int v358 = 1;
      }

      else
      {
        if ((unint64_t)v26 <= 2)
        {
          id v49 = *(id *)(a1 + 88);
          char v50 = 45;
          uint64_t v48 = v368;
        }

        else
        {
          uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) chatRegistry]);
          id v49 = (id)objc_claimAutoreleasedReturnValue( [v48 generateUnusedChatIdentifierForGroupChatWithAccount:*(void *)(a1 + 96)]);

          char v50 = 43;
        }

        unsigned __int8 v388 = v50;
        if (IMOSLoggingEnabled(v51, v52))
        {
          uint64_t v53 = OSLogHandleForIMFoundationCategory("MessageService");
          id v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
          if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            *(void *)__int128 v396 = v49;
            *(_WORD *)&v396[8] = 1024;
            *(_DWORD *)&v396[10] = v388;
            _os_log_impl( &dword_0,  v54,  OS_LOG_TYPE_INFO,  "No chat was found, generating new chatIdentifier: %@ style %c",  buf,  0x12u);
          }
        }

        uint64_t v55 = *(void **)(a1 + 40);
        id v387 = v49;
        [v55 canonicalizeChatIdentifier:&v387 style:&v388];
        id v368 = v387;

        unsigned int v56 = [*(id *)(a1 + 48) isTypingMessage];
        id v57 = [*(id *)(a1 + 48) isTypingMessage];
        int v58 = (int)v57;
        unsigned int v363 = v56 ^ 1;
        int v358 = v57 ^ 1;
        if (IMOSLoggingEnabled(v57, v59))
        {
          uint64_t v60 = OSLogHandleForIMFoundationCategory("MessageService");
          id v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
          if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
          {
            id v62 = @"YES";
            *(_DWORD *)buf = 138413058;
            if (v56) {
              id v63 = @"NO";
            }
            else {
              id v63 = @"YES";
            }
            *(void *)__int128 v396 = v368;
            *(_WORD *)&v396[8] = 1024;
            if (v58) {
              id v62 = @"NO";
            }
            *(_DWORD *)&v396[10] = v388;
            *(_WORD *)&v396[14] = 2112;
            *(void *)&v396[16] = v63;
            *(_WORD *)&v396[24] = 2112;
            *(void *)&v396[26] = v62;
            _os_log_impl( &dword_0,  v61,  OS_LOG_TYPE_INFO,  "Canonicalized chatIdentifier: %@ style: %c shouldRegister: %@ shouldNotify: %@",  buf,  0x26u);
          }
        }
      }

      v357 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) _stripFZIDPrefix]);
      if (v367)
      {
        unsigned int v355 = 0;
      }

      else
      {
        unsigned int v355 = 0;
        uint64_t v64 = a1;
        if (!*(_BYTE *)(a1 + 261) || !v357) {
          goto LABEL_71;
        }
        unsigned int v355 = [*(id *)(a1 + 88) isEqualToString:v357];
      }

      uint64_t v64 = a1;
LABEL_71:
      if (*(_BYTE *)(v64 + 261))
      {
        __int128 v385 = 0u;
        __int128 v386 = 0u;
        __int128 v383 = 0u;
        __int128 v384 = 0u;
        id v65 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(v64 + 40) + 96) lastObject]);
        id v66 = (void *)objc_claimAutoreleasedReturnValue([v65 service]);
        id v67 = (void *)objc_claimAutoreleasedReturnValue([v66 devices]);

        id v68 = [v67 countByEnumeratingWithState:&v383 objects:v394 count:16];
        if (v68)
        {
          uint64_t v69 = *(void *)v384;
LABEL_74:
          uint64_t v70 = 0LL;
          while (1)
          {
            if (*(void *)v384 != v69) {
              objc_enumerationMutation(v67);
            }
            id v71 = *(void **)(*((void *)&v383 + 1) + 8 * v70);
            id v72 = (void *)objc_claimAutoreleasedReturnValue([v71 pushToken]);
            unsigned int v73 = [v72 isEqualToData:*(void *)(v369 + 104)];

            if (v73) {
              break;
            }
            if (v68 == (id)++v70)
            {
              id v68 = [v67 countByEnumeratingWithState:&v383 objects:v394 count:16];
              if (v68) {
                goto LABEL_74;
              }
              goto LABEL_80;
            }
          }

          id v74 = (void *)objc_claimAutoreleasedReturnValue([v71 uniqueID]);
          BOOL v75 = v74 == 0LL;

          if (!v75) {
            goto LABEL_86;
          }
        }

        else
        {
LABEL_80:
        }

        uint64_t v64 = v369;
        int v76 = *(unsigned __int8 *)(v369 + 261);
        char v77 = v367;
        if (!*(_BYTE *)(v369 + 261)) {
          char v77 = 1;
        }
        if ((v77 & 1) == 0)
        {
          objc_msgSend( *(id *)(v369 + 32),  "setFlags:",  (unint64_t)objc_msgSend(*(id *)(v369 + 32), "flags") | 0x1000);
LABEL_86:
          uint64_t v64 = v369;
          int v76 = *(unsigned __int8 *)(v369 + 261);
        }

        if (v76)
        {
          BOOL v356 = 0;
          int v353 = 0;
          goto LABEL_163;
        }
      }

      if ([*(id *)(v64 + 32) isTypingMessage])
      {
        BOOL v356 = 0;
        int v353 = 0;
LABEL_162:
        uint64_t v64 = v369;
LABEL_163:
        if (!*(_BYTE *)(v64 + 264))
        {
          unsigned int v140 = *(_DWORD *)(v369 + 256);
          if (v140) {
            uint64_t v141 = v140;
          }
          else {
            uint64_t v141 = 37LL;
          }
          id v142 = [*(id *)(v369 + 32) setErrorCode:v141];
          if (IMOSLoggingEnabled(v142, v143))
          {
            uint64_t v144 = OSLogHandleForIMEventCategory("MessageService");
            v145 = (os_log_s *)objc_claimAutoreleasedReturnValue(v144);
            if (os_log_type_enabled(v145, OS_LOG_TYPE_INFO))
            {
              int v146 = *(_DWORD *)(v369 + 256);
              uint64_t v147 = *(void *)(v369 + 120);
              uint64_t v148 = *(void *)(v369 + 248);
              *(_DWORD *)buf = 67109634;
              *(_DWORD *)__int128 v396 = v146;
              *(_WORD *)&v396[4] = 2112;
              *(void *)&v396[6] = v147;
              *(_WORD *)&v396[14] = 2048;
              *(void *)&v396[16] = v148;
              _os_log_impl( &dword_0,  v145,  OS_LOG_TYPE_INFO,  "** Had attachment download failure: %d, fileTransferError: %@, attachment size %lu",  buf,  0x1Cu);
            }
          }

          uint64_t v149 = v369;
          uint64_t v150 = *(void **)(v369 + 120);
          if (v150)
          {
            id v151 = (void *)objc_claimAutoreleasedReturnValue([v150 domain]);
            id v152 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"Error domain %@, error code %ld",  v151,  [*(id *)(v369 + 120) code]));

            uint64_t v149 = v369;
          }

          else
          {
            id v152 = @" ";
          }

          unint64_t v153 = *(void *)(v149 + 248);
          uint64_t v154 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v149 + 40) deliveryController]);
          uint64_t v155 = *(void *)(v369 + 112);
          uint64_t v361 = *(void *)(v369 + 104);
          uint64_t v365 = *(void *)(v369 + 72);
          uint64_t v156 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v369 + 96) idsAccount]);
          uint64_t v157 = *(void *)(v369 + 56);
          int v158 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  1000 * (v153 / 0x3E8)));
          uint64_t v159 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
          [v159 timeIntervalSinceDate:*(void *)(v369 + 128)];
          double v161 = v160;
          uint64_t v162 = *(void *)(v369 + 136);
          v376[0] = _NSConcreteStackBlock;
          v376[1] = 3221225472LL;
          v376[2] = sub_31038;
          v376[3] = &unk_D59A8;
          int v378 = *(_DWORD *)(v369 + 256);
          id v377 = *(id *)(v369 + 104);
          [v154 sendMessageErrorWithInfo:400 toToken:v361 toID:v155 toGroup:0 fromID:v365 fromAccount:v156 forMessageID:v161 additionalInfo:v157 fileSize:v152 failur eTimeSeconds:v158 failReasonMessage:v162 completionBlock:v376];
        }

        unsigned __int8 v360 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        if (v367)
        {
          +[MessageGroupController addMembers:toHandleInfo:]( &OBJC_CLASS___MessageGroupController,  "addMembers:toHandleInfo:",  *(void *)(v369 + 144),  v360);
        }

        else
        {
          id v163 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 2LL));
          v164 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v163,  kFZChatParticipantStatusKey,  v368,  kFZPersonID,  0LL));

          -[NSMutableArray addObject:](v360, "addObject:", v164);
        }

        uint64_t v165 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v369 + 32) balloonBundleID]);
        unsigned int v166 = [v165 containsString:IMBalloonPluginIdentifierRichLinks];

        if (v166)
        {
          uint64_t v167 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v369 + 32) richLinkURLs]);
          v168 = (void *)objc_claimAutoreleasedReturnValue([v167 lastObject]);

          if (v168
            || (v169 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v369 + 32) body]),
                unsigned int v170 = (void *)objc_claimAutoreleasedReturnValue([v169 string]),
                v168 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v170)),
                v170,
                v169,
                v168))
          {
            uint64_t v173 = (void *)objc_claimAutoreleasedReturnValue( +[IMSharedWithYouManager sharedManager]( &OBJC_CLASS___IMSharedWithYouManager,  "sharedManager"));
            id v374 = 0LL;
            id v375 = 0LL;
            [v173 appNameAndBundleIDFoURL:v168 outAppName:&v375 outBundleID:&v374];
            id v174 = v375;
            id v175 = v374;

            if ([v174 length]) {
              [*(id *)(v369 + 32) setSwyAppName:v174];
            }
            if ([v175 length]) {
              [*(id *)(v369 + 32) setSwyBundleID:v175];
            }
          }

          else if (IMOSLoggingEnabled(v171, v172))
          {
            uint64_t v191 = OSLogHandleForIMFoundationCategory("MessageService");
            uint64_t v192 = (os_log_s *)objc_claimAutoreleasedReturnValue(v191);
            if (os_log_type_enabled(v192, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v193 = *(void *)(v369 + 56);
              *(_DWORD *)buf = 138412290;
              *(void *)__int128 v396 = v193;
              _os_log_impl( &dword_0,  v192,  OS_LOG_TYPE_DEBUG,  "unable to extract URL for message identified as RichLink: %@",  buf,  0xCu);
            }
          }
        }

        int v176 = (void *)objc_claimAutoreleasedReturnValue( +[IMSafetyMonitorCoordinator sharedCoordinator]( &OBJC_CLASS___IMSafetyMonitorCoordinator,  "sharedCoordinator"));
        [v176 informOfIncomingMessageWithMessage:*(void *)(v369 + 32)];

        uint64_t v366 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", 2LL));
        v362 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(v369 + 40) storeBreadcrumbAndSetConsumedPayloadsForNewMessageItemIfNecessary:*(void *)(v369 + 48) inChatWithIdentifier:v368]);
        if (v362) {
          [v366 addObject:v362];
        }
        id v177 = [*(id *)(v369 + 48) isBreadcrumb];
        if ((_DWORD)v177 && IMOSLoggingEnabled(v177, v178))
        {
          uint64_t v179 = OSLogHandleForIMFoundationCategory("Breadcrumbs");
          unsigned int v180 = (os_log_s *)objc_claimAutoreleasedReturnValue(v179);
          if (os_log_type_enabled(v180, OS_LOG_TYPE_INFO))
          {
            v181 = *(void **)(v369 + 48);
            v182 = (void *)objc_claimAutoreleasedReturnValue([v181 consumedSessionPayloads]);
            id v183 = [v182 count];
            *(_DWORD *)buf = 138412546;
            *(void *)__int128 v396 = v181;
            *(_WORD *)&v396[8] = 2048;
            *(void *)&v396[10] = v183;
            _os_log_impl( &dword_0,  v180,  OS_LOG_TYPE_INFO,  "Receiving breadcrumb %@ with payload history: %tu items.",  buf,  0x16u);
          }
        }

        uint64_t v184 = v369;
        if (*(_BYTE *)(v369 + 261))
        {
          if (v363)
          {
            LOBYTE(v352) = v356;
            [*(id *)(v369 + 40) didJoinChat:v368 style:v388 displayName:*(void *)(v369 + 80) groupID:*(void *)(v369 + 152) handleInfo:v360 account:*(void *)(v369 + 96) isBlackholed:v352];
            uint64_t v185 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v369 + 40) chatForChatIdentifier:v368 style:v388]);
            _UpdateLastAddressedHandle(*(void **)(v369 + 48), *(void **)(v369 + 72), v185);
          }

          else
          {
            uint64_t v185 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(*(void *)(v369 + 240)
                                                                                            + 8LL)
                                                                                + 40LL), "chatIdentifier"));
            sub_311B8(v185, (uint64_t)[*(id *)(*(void *)(*(void *)(v369 + 240) + 8) + 40) style]);
          }

          if (!v358)
          {
LABEL_226:
            if (([*(id *)(v369 + 48) isTypingMessage] & 1) == 0)
            {
              uint64_t v201 = *(void *)(v369 + 160);
              if (v201) {
                [*(id *)(v369 + 40) _handleNicknameReceived:v201 fromIdentifier:*(void *)(v369 + 112) withMessageItem:*(void *)(v369 + 48) isSnapTrustedUser:*(unsigned __int8 *)(v369 + 266)];
              }
            }

            if (![v366 count]) {
              goto LABEL_244;
            }
            uint64_t v202 = v369;
            if (*(_BYTE *)(v369 + 267))
            {
              __int128 v372 = 0u;
              __int128 v373 = 0u;
              __int128 v370 = 0u;
              __int128 v371 = 0u;
              id v203 = v366;
              id v204 = [v203 countByEnumeratingWithState:&v370 objects:v393 count:16];
              if (v204)
              {
                uint64_t v205 = *(void *)v371;
                uint64_t v206 = kIMMessageItemHideLockScreenNotificationsKey;
                do
                {
                  for (i = 0LL; i != v204; i = (char *)i + 1)
                  {
                    if (*(void *)v371 != v205) {
                      objc_enumerationMutation(v203);
                    }
                    uint64_t v208 = *(void **)(*((void *)&v370 + 1) + 8LL * (void)i);
                    if (([*(id *)(v369 + 32) isTypingMessage] & 1) == 0)
                    {
                      uint64_t v209 = (void *)objc_claimAutoreleasedReturnValue([v208 messageSummaryInfo]);
                      uint64_t v210 = (NSMutableDictionary *)[v209 mutableCopy];

                      if (!v210) {
                        uint64_t v210 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
                      }
                      -[NSMutableDictionary setValue:forKey:](v210, "setValue:forKey:", &__kCFBooleanTrue, v206);
                      id v211 = -[NSMutableDictionary copy](v210, "copy");
                      [v208 setMessageSummaryInfo:v211];
                    }
                  }

                  id v204 = [v203 countByEnumeratingWithState:&v370 objects:v393 count:16];
                }

                while (v204);
              }

              uint64_t v202 = v369;
            }

            id v212 = [*(id *)(v202 + 40) didReceiveMessages:v366 forChat:v368 style:v388 account:*(void *)(v202 + 96) fromIDSID:*(void *)(v202 + 168)];
            if (!(_DWORD)v212)
            {
              if (IMOSLoggingEnabled(v212, v213))
              {
                uint64_t v216 = OSLogHandleForIMFoundationCategory("MessageService");
                BOOL v217 = (os_log_s *)objc_claimAutoreleasedReturnValue(v216);
                if (os_log_type_enabled(v217, OS_LOG_TYPE_INFO))
                {
                  uint64_t v218 = *(void *)(v369 + 56);
                  *(_DWORD *)buf = 138412290;
                  *(void *)__int128 v396 = v218;
                  _os_log_impl( &dword_0,  v217,  OS_LOG_TYPE_INFO,  "*** Not all messages successfully stored in database. Not sending IMMessageCheckpointLocationMessage Stored checkpoint. guid %@",  buf,  0xCu);
                }
              }

              int v354 = 0;
            }

            else
            {
LABEL_244:
              uint64_t v214 = im_checkpointIDSService();
              id v215 = (void *)objc_claimAutoreleasedReturnValue(v214);
              im_sendMessageCheckpointIfNecessary( v215,  10300LL,  *(void *)(v369 + 56),  *(unsigned __int8 *)(v369 + 268));

              int v354 = 1;
            }

            uint64_t v219 = v369;
            if (((v358 ^ 1 | v367) & 1) == 0 && ((v355 ^ 1) & 1) == 0)
            {
              [*(id *)(v369 + 40) _handleMessageSentToSelf:*(void *)(v369 + 32) chatIdentifier:v368 style:v388 isLocal:0 account:*(void *)(v369 + 96)];
              uint64_t v219 = v369;
            }

            if (([*(id *)(v219 + 32) isTypingMessage] & 1) == 0)
            {
              id v220 = (void *)objc_claimAutoreleasedReturnValue(+[IMMetricsCollector sharedInstance](&OBJC_CLASS___IMMetricsCollector, "sharedInstance"));
              [v220 trackEvent:IMMetricsCollectorEventiMessageReceived];
            }

            uint64_t v391 = IMMetricsCollectorError;
            uint64_t v221 = +[NSNumber numberWithLong:]( NSNumber,  "numberWithLong:",  sub_81188((uint64_t)[*(id *)(v369 + 32) errorCode]));
            uint64_t v222 = (void *)objc_claimAutoreleasedReturnValue(v221);
            __int128 v392 = v222;
            id v223 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v392,  &v391,  1LL));

            id v224 = (void *)objc_claimAutoreleasedReturnValue(+[IMMetricsCollector sharedInstance](&OBJC_CLASS___IMMetricsCollector, "sharedInstance"));
            [v224 trackEvent:IMMetricsCollectorEventIncomingMessage withDictionary:v223];

            uint64_t v225 = v369;
            if (*(void *)(v369 + 80))
            {
              uint64_t v225 = v369;
              if ([*(id *)(v369 + 40) _convergesDisplayNames])
              {
                [*(id *)(v369 + 40) didReceiveDisplayNameChange:*(void *)(v369 + 80) fromID:*(void *)(v369 + 88) toIdentifier:*(void *)(v369 + 72) forChat:v368 style:v388 account:*(void *)(v369 + 96)];
                uint64_t v225 = v369;
              }
            }

            id v227 = *(void **)(v225 + 32);
            id v226 = (id *)(v225 + 32);
            id v228 = (void *)objc_claimAutoreleasedReturnValue([v227 fileTransferGUIDs]);
            BOOL v229 = [v228 count] != 0;

            uint64_t v230 = (void *)objc_claimAutoreleasedReturnValue([*v226 sender]);
            uint64_t IsEmail = IMStringIsEmail(v230);

            v389[0] = IMMetricsCollectorFzErrorKey;
            uint64_t v232 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLong:]( NSNumber,  "numberWithLong:",  [*v226 errorCode]));
            v390[0] = v232;
            v389[1] = IMMetricsCollectorMessageErrorKey;
            v233 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](&OBJC_CLASS___NSNumber, "numberWithLong:", 0LL));
            v390[1] = v233;
            v389[2] = IMMetricsCollectorIsTypingIndicatorKey;
            uint64_t v234 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [*(id *)(v369 + 48) isTypingMessage]));
            v390[2] = v234;
            v389[3] = IMMetricsCollectorIsGroupMessageKey;
            uint64_t v235 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v367));
            v390[3] = v235;
            v389[4] = IMMetricsCollectorIsFromPhoneNumberKey;
            char v236 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  IsEmail ^ 1));
            v390[4] = v236;
            v389[5] = IMMetricsCollectorIsFromEmailKey;
            v237 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", IsEmail));
            v390[5] = v237;
            v389[6] = IMMetricsCollectorHasAttachmentsKey;
            v238 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v229));
            v390[6] = v238;
            BOOL v239 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v390,  v389,  7LL));

            id v240 = (void *)objc_claimAutoreleasedReturnValue(+[IMMetricsCollector sharedInstance](&OBJC_CLASS___IMMetricsCollector, "sharedInstance"));
            [v240 trackEvent:IMMetricsCollectorEventIMessageReceivedMessageSingleComponent withDictionary:v239];

            uint64_t v243 = v369;
            if (!*(_BYTE *)(v369 + 261))
            {
              if (!*(void *)(*(void *)(*(void *)(v369 + 240) + 8LL) + 40LL)) {
                goto LABEL_265;
              }
              if (IMOSLoggingEnabled(v241, v242))
              {
                uint64_t v244 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
                unsigned __int8 v245 = (os_log_s *)objc_claimAutoreleasedReturnValue(v244);
                if (os_log_type_enabled(v245, OS_LOG_TYPE_INFO))
                {
                  uint64_t v246 = *(void *)(v369 + 168);
                  uint64_t v247 = *(void *)(*(void *)(*(void *)(v369 + 240) + 8LL) + 40LL);
                  *(_DWORD *)buf = 138412546;
                  *(void *)__int128 v396 = v246;
                  *(_WORD *)&v396[8] = 2112;
                  *(void *)&v396[10] = v247;
                  _os_log_impl( &dword_0,  v245,  OS_LOG_TYPE_INFO,  "Updating last active device to be %@ for chat %@ on incoming message",  buf,  0x16u);
                }
              }

              unsigned __int8 v248 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v369 + 40) deliveryController]);
              uint64_t v249 = *(void *)(v369 + 168);
              unsigned int v250 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v369 + 112) _stripFZIDPrefix]);
              [v248 updateLatestActiveDestination:v249 ForHandle:v250 incomingType:0];

              uint64_t v243 = v369;
              if (!*(void *)(*(void *)(*(void *)(v369 + 240) + 8LL) + 40LL))
              {
LABEL_265:
                id v251 = *(void **)(v243 + 40);
                unsigned int v252 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v243 + 112) _stripFZIDPrefix]);
                v253 = (void *)objc_claimAutoreleasedReturnValue([v251 chatForChatIdentifier:v252 style:45]);

                if (IMOSLoggingEnabled(v254, v255))
                {
                  uint64_t v256 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
                  id v257 = (os_log_s *)objc_claimAutoreleasedReturnValue(v256);
                  if (os_log_type_enabled(v257, OS_LOG_TYPE_INFO))
                  {
                    uint64_t v258 = *(void *)(v369 + 168);
                    *(_DWORD *)buf = 138412546;
                    *(void *)__int128 v396 = v258;
                    *(_WORD *)&v396[8] = 2112;
                    *(void *)&v396[10] = v253;
                    _os_log_impl( &dword_0,  v257,  OS_LOG_TYPE_INFO,  "Updating last active device to be %@ for chat %@ on new incoming message",  buf,  0x16u);
                  }
                }

                v259 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v369 + 40) deliveryController]);
                uint64_t v260 = *(void *)(v369 + 168);
                uint64_t v261 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v369 + 112) _stripFZIDPrefix]);
                [v259 updateLatestActiveDestination:v260 ForHandle:v261 incomingType:0];

                id v262 = [*(id *)(v369 + 64) count];
                if ((unint64_t)v262 > 2)
                {
                  if (IMOSLoggingEnabled(v262, v263))
                  {
                    uint64_t v264 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
                    v265 = (os_log_s *)objc_claimAutoreleasedReturnValue(v264);
                    if (os_log_type_enabled(v265, OS_LOG_TYPE_INFO))
                    {
                      id v266 = (id)objc_claimAutoreleasedReturnValue([*(id *)(v369 + 32) guid]);
                      *(_DWORD *)buf = 138412290;
                      *(void *)__int128 v396 = v266;
                      _os_log_impl( &dword_0,  v265,  OS_LOG_TYPE_INFO,  "Not updating last addressed handle for msg guid %@ as we couldnt find a group for it",  buf,  0xCu);
                    }
                  }
                }

                else
                {
                  _UpdateLastAddressedHandle(*(void **)(v369 + 48), *(void **)(v369 + 72), v253);
                }
              }
            }

            uint64_t v267 = (void *)objc_claimAutoreleasedReturnValue( +[IMDRecentsController sharedInstance]( &OBJC_CLASS___IMDRecentsController,  "sharedInstance"));
            [v267 noteRecentMessageFromChatID:v368];

            if (!*(void *)(*(void *)(*(void *)(v369 + 240) + 8LL) + 40LL))
            {
              uint64_t v268 = (void *)objc_claimAutoreleasedReturnValue(+[IMDChatRegistry sharedInstance](&OBJC_CLASS___IMDChatRegistry, "sharedInstance"));
              uint64_t v269 = objc_claimAutoreleasedReturnValue([v268 existingChatWithIdentifier:v368 account:*(void *)(v369 + 96)]);
              uint64_t v270 = *(void *)(*(void *)(v369 + 240) + 8LL);
              v271 = *(void **)(v270 + 40);
              *(void *)(v270 + 40) = v269;

              if (IMOSLoggingEnabled(v272, v273))
              {
                uint64_t v274 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
                uint64_t v275 = (os_log_s *)objc_claimAutoreleasedReturnValue(v274);
                if (os_log_type_enabled(v275, OS_LOG_TYPE_INFO))
                {
                  uint64_t v276 = *(void *)(*(void *)(*(void *)(v369 + 240) + 8LL) + 40LL);
                  *(_DWORD *)buf = 138412546;
                  *(void *)__int128 v396 = v368;
                  *(_WORD *)&v396[8] = 2112;
                  *(void *)&v396[10] = v276;
                  _os_log_impl( &dword_0,  v275,  OS_LOG_TYPE_INFO,  "Failed to find or create chat with identifier %@, chat registry lookup found %@",  buf,  0x16u);
                }
              }
            }

            if (+[IMSpamFilterHelper isInternationalSpamFilteringEnabled]( &OBJC_CLASS___IMSpamFilterHelper,  "isInternationalSpamFilteringEnabled")
              && ([*(id *)(v369 + 32) isTypingMessage] & 1) == 0)
            {
              if ([*(id *)(*(void *)(*(void *)(v369 + 240) + 8) + 40) smsHandshakeState] == 1)
              {
                v277 = (void *)objc_claimAutoreleasedReturnValue( +[IMMetricsCollector sharedInstance]( &OBJC_CLASS___IMMetricsCollector,  "sharedInstance"));
                [v277 trackSpamEvent:4];

                [*(id *)(*(void *)(*(void *)(v369 + 240) + 8) + 40) updateSMSHandshakeState:2];
                uint64_t v278 = (void *)objc_claimAutoreleasedReturnValue(+[IMDChatRegistry sharedInstance](&OBJC_CLASS___IMDChatRegistry, "sharedInstance"));
                v279 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(v369 + 240) + 8) + 40) chatIdentifier]);
                uint64_t v280 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v278,  "existingSMSChatForID:withChatStyle:",  v279,  objc_msgSend(*(id *)(*(void *)(*(void *)(v369 + 240) + 8) + 40), "style")));

                if (v280)
                {
                  if (IMOSLoggingEnabled(v281, v282))
                  {
                    uint64_t v283 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
                    uint64_t v284 = (os_log_s *)objc_claimAutoreleasedReturnValue(v283);
                    if (os_log_type_enabled(v284, OS_LOG_TYPE_INFO))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl( &dword_0,  v284,  OS_LOG_TYPE_INFO,  "Updating sibling chat handshake state to IMChatSMSHandshakeStateSuccess",  buf,  2u);
                    }
                  }

                  [v280 updateSMSHandshakeState:2];
                }
              }

              if ([*(id *)(*(void *)(*(void *)(v369 + 240) + 8) + 40) messageHandshakeState] == 1)
              {
                id v285 = (void *)objc_claimAutoreleasedReturnValue( +[IMMetricsCollector sharedInstance]( &OBJC_CLASS___IMMetricsCollector,  "sharedInstance"));
                [v285 trackSpamEvent:3];

                [*(id *)(*(void *)(*(void *)(v369 + 240) + 8) + 40) updateMessageHandshakeState:2];
              }
            }

            uint64_t v286 = v369;
            if (!*(void *)(*(void *)(*(void *)(v369 + 240) + 8LL) + 40LL)) {
              goto LABEL_325;
            }
            char v287 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v369 + 96) service]);
            unsigned int v288 = (void *)objc_claimAutoreleasedReturnValue([v287 internalName]);
            [*(id *)(v369 + 48) setService:v288];

            uint64_t v289 = objc_claimAutoreleasedReturnValue( [*(id *)(v369 + 160) _stringForKey:MessageDictionaryNicknameParticipantTruncatedRIDKey]);
            if (v289) {
              v291 = (__CFString *)v289;
            }
            else {
              v291 = &stru_D8640;
            }
            if (IMOSLoggingEnabled(v289, v290))
            {
              uint64_t v292 = OSLogHandleForIMFoundationCategory("Nicknames");
              uint64_t v293 = (os_log_s *)objc_claimAutoreleasedReturnValue(v292);
              if (os_log_type_enabled(v293, OS_LOG_TYPE_INFO))
              {
                uint64_t v294 = *(void *)(v369 + 112);
                *(_DWORD *)buf = 138412546;
                *(void *)__int128 v396 = v291;
                *(_WORD *)&v396[8] = 2112;
                *(void *)&v396[10] = v294;
                _os_log_impl(&dword_0, v293, OS_LOG_TYPE_INFO, "Received truncated record id %@ from %@", buf, 0x16u);
              }
            }

            uint64_t v295 = (void *)objc_claimAutoreleasedReturnValue( +[IMDNicknameController sharedInstance]( &OBJC_CLASS___IMDNicknameController,  "sharedInstance"));
            [v295 verifyTruncatedRecordIDMatchesPersonalNickname:v291 forChat:*(void *)(*(void *)(*(void *)(v369 + 240) + 8) + 40)];

            uint64_t v286 = v369;
            if (!*(void *)(*(void *)(*(void *)(v369 + 240) + 8LL) + 40LL) || *(_BYTE *)(v369 + 261)) {
              goto LABEL_325;
            }
            id v296 = (void *)objc_claimAutoreleasedReturnValue(+[IMFeatureFlags sharedFeatureFlags](&OBJC_CLASS___IMFeatureFlags, "sharedFeatureFlags"));
            unsigned int v297 = [v296 isCarrierPigeonEnabled];

            if (v297)
            {
              if (*(void *)(v369 + 176))
              {
                id v300 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v369 + 112) _stripFZIDPrefix]);
                id v301 = (void *)objc_claimAutoreleasedReturnValue([v357 _stripFZIDPrefix]);
                uint64_t v302 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v369 + 32) time]);
                if (IMOSLoggingEnabled(v302, v303))
                {
                  uint64_t v304 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
                  uint64_t v305 = (os_log_s *)objc_claimAutoreleasedReturnValue(v304);
                  if (os_log_type_enabled(v305, OS_LOG_TYPE_INFO))
                  {
                    uint64_t v306 = *(void *)(v369 + 176);
                    *(_DWORD *)buf = 138412802;
                    *(void *)__int128 v396 = v306;
                    *(_WORD *)&v396[8] = 2112;
                    *(void *)&v396[10] = v300;
                    *(_WORD *)&v396[18] = 2112;
                    *(void *)&v396[20] = v301;
                    _os_log_impl( &dword_0,  v305,  OS_LOG_TYPE_INFO,  "Received availabilityOffGridRecipientEncryptionValidationToken = %@ from %@ to %@",  buf,  0x20u);
                  }
                }

                uint64_t v307 = (void *)objc_claimAutoreleasedReturnValue( +[IMDOffGridAvailabilityVerificationManager sharedInstance]( &OBJC_CLASS___IMDOffGridAvailabilityVerificationManager,  "sharedInstance"));
                [v307 verifyOffGridSubscriptionMatchesSubscriptionValidationToken:*(void *)(v369 + 184) encryptionValidationToken:*(void *)(v369 + 176) receivedByHandle ID:v301 fromHandleID:v300 messageDate:v302];
              }

              else
              {
                uint64_t v298 = IMOSLoggingEnabled(v298, v299);
                if ((_DWORD)v298)
                {
                  uint64_t v308 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
                  id v309 = (os_log_s *)objc_claimAutoreleasedReturnValue(v308);
                  if (os_log_type_enabled(v309, OS_LOG_TYPE_INFO))
                  {
                    uint64_t v310 = *(void *)(v369 + 112);
                    *(_DWORD *)buf = 138412290;
                    *(void *)__int128 v396 = v310;
                    _os_log_impl( &dword_0,  v309,  OS_LOG_TYPE_INFO,  "Message from %@ did not contain availabilityOffGridRecipientEncryptionValidationToken. Not performing validation.",  buf,  0xCu);
                  }
                }
              }
            }

            if (*(void *)(v369 + 192))
            {
              id v311 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v369 + 112) _stripFZIDPrefix]);
              uint64_t v312 = (void *)objc_claimAutoreleasedReturnValue([v357 _stripFZIDPrefix]);
              uint64_t v313 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v369 + 32) time]);
              if (IMOSLoggingEnabled(v313, v314))
              {
                uint64_t v315 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
                uint64_t v316 = (os_log_s *)objc_claimAutoreleasedReturnValue(v315);
                if (os_log_type_enabled(v316, OS_LOG_TYPE_INFO))
                {
                  uint64_t v317 = *(void *)(v369 + 192);
                  *(_DWORD *)buf = 138412802;
                  *(void *)__int128 v396 = v317;
                  *(_WORD *)&v396[8] = 2112;
                  *(void *)&v396[10] = v311;
                  *(_WORD *)&v396[18] = 2112;
                  *(void *)&v396[20] = v312;
                  _os_log_impl( &dword_0,  v316,  OS_LOG_TYPE_INFO,  "Received availabilityVerificationRecipientChannelID = %@ from %@ to %@",  buf,  0x20u);
                }
              }

              uint64_t v318 = (void *)objc_claimAutoreleasedReturnValue( +[IMDAvailabilityVerificationManager sharedInstance]( &OBJC_CLASS___IMDAvailabilityVerificationManager,  "sharedInstance"));
              [v318 verifyPersonalSubscriptionMatchesSubscriptionValidationToken:*(void *)(v369 + 192) encryptionValidationToken:*(void *)(v369 + 200) receivedByHandleI D:v312 fromHandleID:v311 messageDate:v313];
            }

            else
            {
              uint64_t v286 = v369;
              if (!IMOSLoggingEnabled(v298, v299))
              {
LABEL_325:
                [*(id *)(v286 + 40) _autoReportChatAsUnknown:*(void *)(*(void *)(*(void *)(v286 + 240) + 8) + 40) chatIsNew:v363];
                uint64_t v322 = *(void **)(v286 + 40);
                char v323 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v369 + 96) idsAccount]);
                uint64_t v324 = (void *)objc_claimAutoreleasedReturnValue([v322 _pushHandlerForIDSAccount:v323]);

                if (v354)
                {
                  uint64_t v325 = v369;
                  if (v356 && *(_BYTE *)(v369 + 263))
                  {
                    id v326 = 0LL;
                  }

                  else
                  {
                    id v326 = [*(id *)(v369 + 208) BOOLValue];
                    uint64_t v325 = v369;
                  }

                  if (v353)
                  {
                    uint64_t v327 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 503LL));
                    uint64_t v325 = v369;
                  }

                  else
                  {
                    uint64_t v327 = 0LL;
                  }

                  uint64_t v328 = *(void *)(v325 + 216);
                  uint64_t v329 = *(void *)(v325 + 224);
                  uint64_t v330 = *(void **)(v325 + 40);
                  v331 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v325 + 32) guid]);
                  LOBYTE(v328) = [v330 _sendCertifiedDeliveryReceiptIfPossible:v328 messageContext:v329 guid:v331 messageW asStored:1 needsDeliveryReceipt:v326 failureReason:v327];

                  if ((v328 & 1) == 0)
                  {
                    uint64_t v332 = (void *)objc_claimAutoreleasedReturnValue([v324 account]);
                    uint64_t v333 = (void *)v369;
                    if (!v332)
                    {
                      uint64_t v334 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v369 + 40) replicationAccount]);
                      uint64_t v335 = objc_opt_class(&OBJC_CLASS___IMDIDSAccount);
                      char isKindOfClass = objc_opt_isKindOfClass(v334, v335);

                      if ((isKindOfClass & 1) != 0)
                      {
                        __int16 v337 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v369 + 40) replicationAccount]);
                        uint64_t v332 = (void *)objc_claimAutoreleasedReturnValue([v337 idsAccount]);
                      }

                      else
                      {
                        uint64_t v332 = 0LL;
                      }

                      uint64_t v333 = (void *)v369;
                    }

                    uint64_t v338 = (void *)v333[5];
                    uint64_t v339 = v333[7];
                    uint64_t v340 = v333[21];
                    __int16 v341 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v326));
                    [v338 sendDeliveryReceiptForMessageID:v339 toID:v340 deliveryContext:0 needsDeliveryReceipt:v341 callerID:*(void *)(v369 + 72) account:v332];
                  }
                }

                if (([*(id *)(v369 + 32) isTypingMessage] & 1) == 0)
                {
                  [v324 sendManualAckForMessageWithContext:*(void *)(v369 + 224)];
                  if (([*(id *)(v369 + 32) isFromMe] & 1) == 0)
                  {
                    uint64_t v342 = (void *)objc_claimAutoreleasedReturnValue( +[IMMessageNotificationTimeManager sharedInstance]( &OBJC_CLASS___IMMessageNotificationTimeManager,  "sharedInstance"));
                    [v342 sendNotificationMessageIfNeededForIncomingMessageFromChatIdentifier:v368];
                  }

                  uint64_t v343 = (void *)objc_claimAutoreleasedReturnValue( +[IMMessageNotificationTimeManager sharedInstance]( &OBJC_CLASS___IMMessageNotificationTimeManager,  "sharedInstance"));
                  [v343 tearDownSessionForChatIdentifier:v368];
                }

                int v344 = (void *)objc_claimAutoreleasedReturnValue(+[IMPowerLog sharedInstance](&OBJC_CLASS___IMPowerLog, "sharedInstance"));
                uint64_t v345 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v369 + 32) guid]);
                v346 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v369 + 112) _stripFZIDPrefix]);
                __int16 v347 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v369 + 72) _stripFZIDPrefix]);
                id v348 = [*(id *)(*(void *)(*(void *)(v369 + 240) + 8) + 40) powerLogConversationType];
                id v349 = [*(id *)(v369 + 32) powerLogMessageType];
                id v350 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v369 + 32) service]);
                [v344 logMessageReceivedWithGUID:v345 fromIdentifier:v346 toIdentifier:v347 conversationType:v348 messageType:v349 messageProtocol:v350];

                uint64_t v351 = *(void *)(v369 + 232);
                if (v351)
                {
                  if (*(_BYTE *)(v369 + 260))
                  {
                    [*(id *)(v369 + 40) noteLastItemProcessed];
                    uint64_t v351 = *(void *)(v369 + 232);
                  }

                  (*(void (**)(void))(v351 + 16))();
                }

                goto LABEL_350;
              }

              uint64_t v319 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
              char v320 = (os_log_s *)objc_claimAutoreleasedReturnValue(v319);
              if (os_log_type_enabled(v320, OS_LOG_TYPE_INFO))
              {
                uint64_t v321 = *(void *)(v369 + 112);
                *(_DWORD *)buf = 138412290;
                *(void *)__int128 v396 = v321;
                _os_log_impl( &dword_0,  v320,  OS_LOG_TYPE_INFO,  "Message from %@ did not contain an availabilityVerificationRecipientChannelID. Not performing validation.",  buf,  0xCu);
              }
            }

            uint64_t v286 = v369;
            goto LABEL_325;
          }

          id v189 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v369 + 40) chatForChatIdentifier:v368 style:v388]);
          if (*(_BYTE *)(v369 + 265)) {
            BOOL v190 = 1LL;
          }
          else {
            BOOL v190 = *(_BYTE *)(v369 + 260) != 0;
          }
          [*(id *)(v369 + 40) didSendMessage:*(void *)(v369 + 32) forChat:v368 style:v388 account:*(void *)(v369 + 96) forceDate:0 itemIsComingFromStorage:v190];
LABEL_225:

          goto LABEL_226;
        }

        id v186 = *(id *)(*(void *)(*(void *)(v369 + 240) + 8LL) + 40LL);
        uint64_t v187 = v186;
        if (!v363)
        {
          id v189 = v186;
          goto LABEL_223;
        }

        LOBYTE(v352) = v356;
        [*(id *)(v369 + 40) didJoinChat:v368 style:v388 displayName:*(void *)(v369 + 80) groupID:*(void *)(v369 + 152) handleInfo:v360 account:*(void *)(v369 + 96) isBlackholed:v352];
        if (v367)
        {
          if ([*(id *)(v369 + 144) count])
          {
            v188 =  -[NSMutableSet initWithArray:]( objc_alloc(&OBJC_CLASS___NSMutableSet),  "initWithArray:",  *(void *)(v369 + 144));
          }

          else
          {
            v188 = 0LL;
          }

          if (v357) {
            -[NSMutableSet removeObject:](v188, "removeObject:", v357);
          }
          id v194 = (void *)objc_claimAutoreleasedReturnValue(+[IMDChatRegistry sharedInstance](&OBJC_CLASS___IMDChatRegistry, "sharedInstance"));
          v195 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v188, "allObjects"));
          id v189 = (void *)objc_claimAutoreleasedReturnValue( [v194 existingChatForIDs:v195 account:*(void *)(v369 + 96) displayName:*(void *)(v369 + 80) groupID:*(void *)(v369 + 152) style:43]);

          id v196 = [*(id *)(v369 + 152) length];
          if (!v196) {
            goto LABEL_222;
          }
          if (IMOSLoggingEnabled(v196, v197))
          {
            uint64_t v198 = OSLogHandleForIMFoundationCategory("MessageService");
            uint64_t v199 = (os_log_s *)objc_claimAutoreleasedReturnValue(v198);
            if (os_log_type_enabled(v199, OS_LOG_TYPE_INFO))
            {
              uint64_t v200 = *(void *)(v369 + 152);
              *(_DWORD *)buf = 138412546;
              *(void *)__int128 v396 = v200;
              *(_WORD *)&v396[8] = 2112;
              *(void *)&v396[10] = v189;
              _os_log_impl( &dword_0,  v199,  OS_LOG_TYPE_INFO,  "     ** Setting group_id to %@ on chat %@, as we just got invited to it!",  buf,  0x16u);
            }
          }

          [v189 setGroupID:*(void *)(v369 + 152)];
          uint64_t v187 = (void *)objc_claimAutoreleasedReturnValue(+[IMDChatStore sharedInstance](&OBJC_CLASS___IMDChatStore, "sharedInstance"));
          [v187 storeChat:v189];
        }

        else
        {
          v188 = (NSMutableSet *)objc_claimAutoreleasedReturnValue(+[IMDChatRegistry sharedInstance](&OBJC_CLASS___IMDChatRegistry, "sharedInstance"));
          id v189 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableSet existingChatForID:account:]( v188,  "existingChatForID:account:",  *(void *)(v369 + 88),  *(void *)(v369 + 96)));
        }

LABEL_222:
        uint64_t v184 = v369;
LABEL_223:
        [*(id *)(v184 + 40) _fixParticipantsForChat:v189];
        _UpdateLastAddressedHandle(*(void **)(v369 + 48), *(void **)(v369 + 72), v189);
        if (v358) {
          [v366 addObject:*(void *)(v369 + 32)];
        }
        goto LABEL_225;
      }

      id v78 = [*(id *)(*(void *)(*(void *)(v369 + 240) + 8) + 40) isOscarChat];
      if ((_DWORD)v78)
      {
        if (IMOSLoggingEnabled(v78, v79))
        {
          uint64_t v80 = OSLogHandleForIMFoundationCategory("MessageService");
          uint64_t v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
          if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
          {
            uint64_t v82 = *(void *)(v369 + 56);
            *(_DWORD *)buf = 138412290;
            *(void *)__int128 v396 = v82;
            _os_log_impl(&dword_0, v81, OS_LOG_TYPE_INFO, "Message %@ is a junk message.", buf, 0xCu);
          }
        }

        int v83 = 1;
      }

      else
      {
        if (*(void *)(*(void *)(*(void *)(v369 + 240) + 8LL) + 40LL)
          || *(_BYTE *)(v369 + 262)
          || (char v84 = (void *)objc_claimAutoreleasedReturnValue( +[IMDAccountController sharedAccountController]( IMDAccountController,  "sharedAccountController")),  v85 = [v84 receiverIsCandidateForJunk:*(void *)(v369 + 72) forAccount:*(void *)(v369 + 96)],  v84,  !v85))
        {
          int v353 = 0;
LABEL_108:
          uint64_t v92 = (void *)objc_claimAutoreleasedReturnValue( +[IMDAccountController sharedAccountController]( &OBJC_CLASS___IMDAccountController,  "sharedAccountController"));
          id v93 = [v92 activeAccountsAreEligibleForHawking];

          if (!+[IMSpamFilterHelper isBlackholeEnabledForEligibleAccounts:]( &OBJC_CLASS___IMSpamFilterHelper,  "isBlackholeEnabledForEligibleAccounts:",  v93))
          {
            BOOL v356 = 0;
LABEL_159:
            if (+[IMSpamFilterHelper isInternationalSpamFilteringEnabled]( &OBJC_CLASS___IMSpamFilterHelper,  "isInternationalSpamFilteringEnabled")
              && [*(id *)(*(void *)(*(void *)(v369 + 240) + 8) + 40) receivedBlackholeError])
            {
              [*(id *)(*(void *)(*(void *)(v369 + 240) + 8) + 40) updateReceivedBlackholeError:0];
              id v138 = (void *)objc_claimAutoreleasedReturnValue(+[IMDChatStore sharedInstance](&OBJC_CLASS___IMDChatStore, "sharedInstance"));
              uint64_t v139 = *(void *)(*(void *)(*(void *)(v369 + 240) + 8LL) + 40LL);
              v379[0] = _NSConcreteStackBlock;
              v379[1] = 3221225472LL;
              v379[2] = sub_30ED4;
              v379[3] = &unk_D5980;
              v379[4] = *(void *)(v369 + 40);
              id v380 = *(id *)(v369 + 96);
              [v138 remapMessageError:43 toError:0 forChat:v139 completion:v379];
            }

            goto LABEL_162;
          }

          uint64_t v94 = (void *)objc_claimAutoreleasedReturnValue(+[IMMetricsCollector sharedInstance](&OBJC_CLASS___IMMetricsCollector, "sharedInstance"));
          v95 = v94;
          if (v367) {
            uint64_t v96 = 12LL;
          }
          else {
            uint64_t v96 = 11LL;
          }
          [v94 trackSpamEvent:v96];

          uint64_t v98 = *(void **)(*(void *)(*(void *)(v369 + 240) + 8LL) + 40LL);
          if (v98) {
            BOOL v99 = v97 == 0LL;
          }
          else {
            BOOL v99 = 1;
          }
          if (!v99)
          {
            id v110 = [v98 isBlackholed];
            int v112 = (int)v110;
            if ((_DWORD)v110)
            {
              v113 = (void *)objc_claimAutoreleasedReturnValue(+[IMMetricsCollector sharedInstance](&OBJC_CLASS___IMMetricsCollector, "sharedInstance"));
              uint64_t v114 = v113;
              if (v367) {
                uint64_t v115 = 14LL;
              }
              else {
                uint64_t v115 = 13LL;
              }
              [v113 trackSpamEvent:v115];
            }

            id v103 = (id)IMOSLoggingEnabled(v110, v111);
            if ((_DWORD)v103)
            {
              uint64_t v116 = OSLogHandleForIMFoundationCategory("MessageService");
              id v117 = (os_log_s *)objc_claimAutoreleasedReturnValue(v116);
              if (os_log_type_enabled(v117, OS_LOG_TYPE_INFO))
              {
                id v118 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(v369 + 240) + 8) + 40) chatIdentifier]);
                v119 = v118;
                v120 = @"NO";
                if (v112) {
                  v120 = @"YES";
                }
                *(_DWORD *)buf = 138412546;
                *(void *)__int128 v396 = v118;
                *(_WORD *)&v396[8] = 2112;
                *(void *)&v396[10] = v120;
                _os_log_impl( &dword_0,  v117,  OS_LOG_TYPE_INFO,  "Found existing chat (%@) with blackhole status: %@",  buf,  0x16u);
              }
            }

            goto LABEL_145;
          }

          uint64_t v100 = *(void **)(v369 + 40);
          uint64_t v101 = *(void *)(v369 + 112);
          uint64_t v102 = *(void *)(v369 + 72);
          if (v367)
          {
            id v103 = [v100 _shouldBlackholeGroupChatFromSender:v101 toRecipient:v102 withOtherParticipants:*(void *)(v369 + 64) forAccount:*(void *)(v369 + 96)];
            if ((_DWORD)v103)
            {
              id v103 = (id)IMOSLoggingEnabled(v103, v104);
              if ((_DWORD)v103)
              {
                uint64_t v105 = OSLogHandleForIMFoundationCategory("MessageService");
                v106 = (os_log_s *)objc_claimAutoreleasedReturnValue(v105);
                if (os_log_type_enabled(v106, OS_LOG_TYPE_INFO))
                {
                  uint64_t v107 = *(void *)(v369 + 56);
                  uint64_t v108 = *(void *)(v369 + 112);
                  uint64_t v109 = *(void *)(v369 + 72);
                  *(_DWORD *)buf = 138412802;
                  *(void *)__int128 v396 = v107;
                  *(_WORD *)&v396[8] = 2112;
                  *(void *)&v396[10] = v108;
                  *(_WORD *)&v396[18] = 2112;
                  *(void *)&v396[20] = v109;
                  _os_log_impl( &dword_0,  v106,  OS_LOG_TYPE_INFO,  "Should blackhole group chat (%@) from (%@) to (%@)",  buf,  0x20u);
                }

LABEL_138:
                goto LABEL_139;
              }

              goto LABEL_139;
            }
          }

          else
          {
            id v103 = [v100 _shouldBlackholeChatFromSender:v101 toRecipient:v102 forAccount:*(void *)(v369 + 96)];
            if ((_DWORD)v103)
            {
              id v103 = (id)IMOSLoggingEnabled(v103, v104);
              if ((_DWORD)v103)
              {
                uint64_t v121 = OSLogHandleForIMFoundationCategory("MessageService");
                v106 = (os_log_s *)objc_claimAutoreleasedReturnValue(v121);
                if (os_log_type_enabled(v106, OS_LOG_TYPE_INFO))
                {
                  uint64_t v122 = *(void *)(v369 + 56);
                  uint64_t v123 = *(void *)(v369 + 112);
                  uint64_t v124 = *(void *)(v369 + 72);
                  *(_DWORD *)buf = 138412802;
                  *(void *)__int128 v396 = v122;
                  *(_WORD *)&v396[8] = 2112;
                  *(void *)&v396[10] = v123;
                  *(_WORD *)&v396[18] = 2112;
                  *(void *)&v396[20] = v124;
                  _os_log_impl( &dword_0,  v106,  OS_LOG_TYPE_INFO,  "Should blackhole message (%@) from (%@) to (%@)",  buf,  0x20u);
                }

                goto LABEL_138;
              }

LABEL_139:
              char v125 = 0;
              int v112 = 1;
              goto LABEL_141;
            }
          }

          int v112 = 0;
          char v125 = 1;
LABEL_141:
          uint64_t v126 = v369;
          if ((v125 & 1) != 0 || (id v103 = *(id *)(*(void *)(*(void *)(v369 + 240) + 8LL) + 40LL)) == 0LL || v97)
          {
LABEL_146:
            char v127 = v367;
            if (!v112) {
              char v127 = 1;
            }
            if ((v127 & 1) != 0)
            {
              if (!v112) {
                goto LABEL_158;
              }
            }

            else if (*(_BYTE *)(v126 + 263))
            {
              if (IMOSLoggingEnabled(v103, v104))
              {
                uint64_t v128 = OSLogHandleForIMEventCategory("MessageService");
                uint64_t v129 = (os_log_s *)objc_claimAutoreleasedReturnValue(v128);
                if (os_log_type_enabled(v129, OS_LOG_TYPE_INFO))
                {
                  uint64_t v130 = *(void *)(v369 + 56);
                  uint64_t v131 = *(void *)(v369 + 112);
                  id v132 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(v369 + 240) + 8) + 40) chatIdentifier]);
                  *(_DWORD *)buf = 138412802;
                  *(void *)__int128 v396 = v130;
                  *(_WORD *)&v396[8] = 2112;
                  *(void *)&v396[10] = v131;
                  *(_WORD *)&v396[18] = 2112;
                  *(void *)&v396[20] = v132;
                  _os_log_impl( &dword_0,  v129,  OS_LOG_TYPE_INFO,  "Blackholing message (%@) from (%@) to (%@)",  buf,  0x20u);
                }
              }

              uint64_t v133 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v369 + 40) deliveryController]);
              uint64_t v134 = *(void *)(v369 + 112);
              uint64_t v135 = *(void *)(v369 + 72);
              uint64_t v136 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(v369 + 40) idsAccountForURI:v135 IDSServiceName:@"com.apple.madrid"]);
              uint64_t v137 = *(void **)(v369 + 56);
              v381[0] = _NSConcreteStackBlock;
              v381[1] = 3221225472LL;
              v381[2] = sub_30D5C;
              v381[3] = &unk_D5958;
              id v382 = v137;
              [v133 sendMessageError:502 toToken:0 toID:v134 toGroup:0 fromID:v135 fromAccount:v136 forMessageID:v382 completionBlock:v381];
            }

            objc_msgSend( *(id *)(v369 + 32),  "setFlags:",  (unint64_t)objc_msgSend(*(id *)(v369 + 32), "flags") | 0x2000);
LABEL_158:
            BOOL v356 = v112 != 0;
            goto LABEL_159;
          }

          id v103 = [v103 updateIsBlackholed:1];
          int v112 = 1;
LABEL_145:
          uint64_t v126 = v369;
          goto LABEL_146;
        }

        id v86 = +[IMSpamFilterHelper isKnownContact:]( &OBJC_CLASS___IMSpamFilterHelper,  "isKnownContact:",  *(void *)(v369 + 112));
        int v88 = (int)v86;
        if ((v86 & 1) == 0 && IMOSLoggingEnabled(v86, v87))
        {
          uint64_t v89 = OSLogHandleForIMFoundationCategory("MessageService");
          char v90 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);
          if (os_log_type_enabled(v90, OS_LOG_TYPE_INFO))
          {
            uint64_t v91 = *(void *)(v369 + 56);
            *(_DWORD *)buf = 138412290;
            *(void *)__int128 v396 = v91;
            _os_log_impl(&dword_0, v90, OS_LOG_TYPE_INFO, "Message %@ is a junk message.", buf, 0xCu);
          }
        }

        int v83 = v88 ^ 1;
      }

      int v353 = v83;
      goto LABEL_108;
    }

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[IMDFileTransferCenter sharedInstance](&OBJC_CLASS___IMDFileTransferCenter, "sharedInstance"));
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( [v12 guidsForStoredAttachmentPayloadDataURLs:v359 messageGUID:*(void *)(a1 + 56)]);

    [*(id *)(a1 + 48) setFileTransferGUIDs:v13];
LABEL_15:

    goto LABEL_26;
  }

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) balloonBundleID]);
  unsigned __int8 v15 = [v14 isEqualToString:IMBalloonPluginIdentifierRichLinks];

  int v18 = IMOSLoggingEnabled(v16, v17);
  if ((v15 & 1) != 0)
  {
    if (v18)
    {
      uint64_t v19 = OSLogHandleForIMFoundationCategory("PayloadAttachments");
      int v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        id v21 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
        *(_DWORD *)buf = 138412290;
        *(void *)__int128 v396 = v21;
        _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_INFO,  "Did not download payload data for message %@ but we are continuing",  buf,  0xCu);
      }
    }

    uint64_t v13 = v7;
    v364 = 0LL;
    goto LABEL_15;
  }

  if (v18)
  {
    uint64_t v22 = OSLogHandleForIMFoundationCategory("Warning");
    uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
      *(_DWORD *)buf = 138412290;
      *(void *)__int128 v396 = v24;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_INFO,  "PayloadAttachments Failed downloading payload data for message %@",  buf,  0xCu);
    }
  }

  uint64_t v25 = *(void *)(a1 + 232);
  if (v25)
  {
    if (*(_BYTE *)(a1 + 260))
    {
      [*(id *)(a1 + 40) noteLastItemProcessed];
      uint64_t v25 = *(void *)(a1 + 232);
    }

    (*(void (**)(void))(v25 + 16))();
  }

LABEL_350:
}

void sub_30D5C(uint64_t a1, void *a2, void *a3, int a4, int a5)
{
  id v9 = a2;
  id v10 = a3;
  int v12 = IMOSLoggingEnabled(v10, v11);
  if (a4)
  {
    if (v12)
    {
      uint64_t v13 = OSLogHandleForIMFoundationCategory("MessageService");
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v15 = *(void *)(a1 + 32);
        int v19 = 138412290;
        uint64_t v20 = v15;
        _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEBUG, "Succesfully blackholed message: %@", (uint8_t *)&v19, 0xCu);
      }
    }
  }

  else if (v12)
  {
    uint64_t v16 = OSLogHandleForIMFoundationCategory("MessageService");
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      int v19 = 138412546;
      uint64_t v20 = v18;
      __int16 v21 = 1024;
      int v22 = a5;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_DEBUG,  "** Failed to blackhole message: (%@) with error: %d",  (uint8_t *)&v19,  0x12u);
    }
  }
}

void sub_30ED4(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v14;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v13 + 1) + 8LL * (void)v7);
        id v9 = (void *)objc_claimAutoreleasedReturnValue(+[IMDMessageStore sharedInstance](&OBJC_CLASS___IMDMessageStore, "sharedInstance"));
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 messageWithGUID:v8]);

        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) broadcasterForChatListeners]);
        int v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountID]);
        [v11 account:v12 chat:0 style:0 chatProperties:0 messageUpdated:v10];

        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v5);
  }
}

void sub_31038(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7 = a2;
  id v8 = a3;
  int v10 = IMOSLoggingEnabled(v8, v9);
  if (a4)
  {
    if (v10)
    {
      uint64_t v11 = OSLogHandleForIMFoundationCategory("MessageService");
      int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        int v13 = *(_DWORD *)(a1 + 40);
        uint64_t v14 = *(void *)(a1 + 32);
        int v18 = 67109378;
        int v19 = v13;
        __int16 v20 = 2112;
        uint64_t v21 = v14;
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "Finished sending attachment download error: %d  to token: %@",  (uint8_t *)&v18,  0x12u);
      }

void sub_311B8(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[IMDChatRegistry sharedInstance](&OBJC_CLASS___IMDChatRegistry, "sharedInstance"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 allExistingSupportedServiceChatsWithIdentifier:v3 style:a2]);

  if (IMOSLoggingEnabled(v6, v7))
  {
    uint64_t v8 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      id v20 = v3;
      __int16 v21 = 1024;
      int v22 = a2;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_INFO,  "Checking if chats with chatIdentifier %@ and style %hhu need to have shouldForceToSMS updated to NO.",  buf,  0x12u);
    }
  }

  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v10 = v5;
  id v11 = [v10 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v11)
  {
    uint64_t v12 = *(void *)v15;
    do
    {
      int v13 = 0LL;
      do
      {
        if (*(void *)v15 != v12) {
          objc_enumerationMutation(v10);
        }
        objc_msgSend(*(id *)(*((void *)&v14 + 1) + 8 * (void)v13), "updateShouldForceToSMS:", 0, (void)v14);
        int v13 = (char *)v13 + 1;
      }

      while (v11 != v13);
      id v11 = [v10 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }

    while (v11);
  }
}

void sub_31368(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (IMOSLoggingEnabled(v6, v7))
  {
    uint64_t v8 = OSLogHandleForIMFoundationCategory("PayloadAttachments");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v10 = 134218242;
      id v11 = [v5 length];
      __int16 v12 = 2112;
      id v13 = v6;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_INFO,  "Setting payload to length: %lu with attachments: %@",  (uint8_t *)&v10,  0x16u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_31490(uint64_t a1, void *a2, void *a3, char a4, int a5, void *a6, uint64_t a7, void *a8)
{
  id v15 = a2;
  id v16 = a3;
  id v17 = a6;
  id v18 = a8;
  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472LL;
  v41[2] = sub_31798;
  v41[3] = &unk_D5A20;
  id v47 = *(id *)(a1 + 40);
  id v19 = v15;
  id v42 = v19;
  id v20 = v16;
  id v43 = v20;
  char v51 = a4;
  int v50 = a5;
  id v21 = v17;
  id v44 = v21;
  uint64_t v49 = a7;
  id v22 = v18;
  id v45 = v22;
  id v23 = *(id *)(a1 + 48);
  char v52 = *(_BYTE *)(a1 + 56);
  uint64_t v24 = *(void *)(a1 + 32);
  id v48 = v23;
  uint64_t v46 = v24;
  uint64_t v25 = objc_retainBlock(v41);
  id v26 = (void *)objc_claimAutoreleasedReturnValue([v19 balloonBundleID]);
  uint64_t v27 = IMBalloonExtensionIDWithSuffix(IMBalloonPluginIdentifierSurf);
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
  LODWORD(v15) = [v26 isEqualToString:v28];

  if ((_DWORD)v15)
  {
    if ([v19 isFromMe])
    {
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v19 service]);
      id v30 =  +[IMSenderContext fromMeContextWithServiceName:]( &OBJC_CLASS___IMSenderContext,  "fromMeContextWithServiceName:",  v29);
    }

    else
    {
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(+[IMDChatRegistry sharedInstance](&OBJC_CLASS___IMDChatRegistry, "sharedInstance"));
      id v32 = (void *)objc_claimAutoreleasedReturnValue([v19 sender]);
      id v33 = [v31 hasKnownSenderChatWithChatIdentifier:v32];

      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v19 service]);
      id v34 =  +[IMSenderContext contextWithKnownSender:serviceName:]( &OBJC_CLASS___IMSenderContext,  "contextWithKnownSender:serviceName:",  v33,  v29);
    }

    id v35 = (void *)objc_claimAutoreleasedReturnValue( +[MessageTranscodeController sharedInstance]( &OBJC_CLASS___MessageTranscodeController,  "sharedInstance"));
    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v19 guid]);
    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v19 payloadData]);
    uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v19 balloonBundleID]);
    v39[0] = _NSConcreteStackBlock;
    v39[1] = 3221225472LL;
    v39[2] = sub_3180C;
    v39[3] = &unk_D5A48;
    uint64_t v40 = v25;
    [v35 generateSnapshotForMessageGUID:v36 payloadData:v37 balloonBundleID:v38 senderContext:0 completionBlock:v39];
  }

  else
  {
    ((void (*)(void *))v25[2])(v25);
  }
}

uint64_t sub_31798(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, void, void, void, void, void, void, void, void))(v2 + 16))( v2,  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(unsigned __int8 *)(a1 + 100),  *(unsigned int *)(a1 + 96),  *(void *)(a1 + 48),  *(void *)(a1 + 88),  *(void *)(a1 + 56),  *(void *)(a1 + 80));
  }
  if (*(_BYTE *)(a1 + 101)) {
    [*(id *)(a1 + 64) noteLastItemProcessed];
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 80) + 16LL))();
}

uint64_t sub_3180C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_31A14(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[IMDFileTransferCenter sharedInstance](&OBJC_CLASS___IMDFileTransferCenter, "sharedInstance"));
  id v10 = (id)objc_claimAutoreleasedReturnValue([v6 transferForGUID:v5]);

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndexedSubscript:a3]);
  uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  LOBYTE(v5) = objc_opt_isKindOfClass(v7, v8);

  if ((v5 & 1) != 0)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndexedSubscript:a3]);
    [v10 setAttributionInfo:v9];
  }
}

id sub_31DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _[*(id *)(a1 + 32) _nicknameFetchCompletedMessage:*(void *)(a1 + 40) synchronous:a5 profile:a2 nickNameWasInCache:a3 nickNameDownloadError:a4];
}

void sub_32838(id a1, MessageDeliveryController *a2, NSArray *a3, BOOL a4, unsigned int a5, BOOL a6)
{
  BOOL v6 = a4;
  uint64_t v8 = a2;
  uint64_t v9 = a3;
  int v11 = IMOSLoggingEnabled(v9, v10);
  if (v6)
  {
    if (v11)
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory("MessageService");
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        __int16 v18 = 0;
        __int128 v14 = "Completed reflecting mark as unread to peer devices.";
        id v15 = (uint8_t *)&v18;
LABEL_8:
        _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, v14, v15, 2u);
        goto LABEL_9;
      }

      goto LABEL_9;
    }
  }

  else if (v11)
  {
    uint64_t v16 = OSLogHandleForIMFoundationCategory("MessageService");
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      __int16 v17 = 0;
      __int128 v14 = "Failed to reflect mark unread to peer devices.";
      id v15 = (uint8_t *)&v17;
      goto LABEL_8;
    }

void sub_32D3C(id a1, MessageDeliveryController *a2, NSArray *a3, BOOL a4, unsigned int a5, BOOL a6)
{
  BOOL v6 = a4;
  uint64_t v8 = a2;
  uint64_t v9 = a3;
  int v11 = IMOSLoggingEnabled(v9, v10);
  if (v6)
  {
    if (v11)
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory("MessageService");
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        __int16 v18 = 0;
        __int128 v14 = "Completed reflecting recover junk chat to peer devices.";
        id v15 = (uint8_t *)&v18;
LABEL_8:
        _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, v14, v15, 2u);
        goto LABEL_9;
      }

      goto LABEL_9;
    }
  }

  else if (v11)
  {
    uint64_t v16 = OSLogHandleForIMFoundationCategory("MessageService");
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      __int16 v17 = 0;
      __int128 v14 = "Failed to reflect recover junk chat to peer devices.";
      id v15 = (uint8_t *)&v17;
      goto LABEL_8;
    }

BOOL sub_336AC(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 _stripFZIDPrefix]);
  CMFItemFromString = (const void *)CreateCMFItemFromString();
  uint64_t IsItemBlocked = CMFBlockListIsItemBlocked();
  int v6 = IsItemBlocked;
  if (CMFItemFromString) {
    CFRelease(CMFItemFromString);
  }
  if (IMOSLoggingEnabled(IsItemBlocked, v5))
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory("BlockList");
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = @"NO";
      if (v6) {
        uint64_t v9 = @"YES";
      }
      int v11 = 138412546;
      id v12 = v1;
      __int16 v13 = 2112;
      __int128 v14 = v9;
      _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "filtering message for handle: %@ = %@", (uint8_t *)&v11, 0x16u);
    }
  }

  return v6 != 0;
}

void sub_337E0(uint64_t a1)
{
  id v8 = [*(id *)(a1 + 32) copy];
  [v8 setSender:*(void *)(a1 + 40)];
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringGUID](&OBJC_CLASS___NSString, "stringGUID"));
  [v8 setGuid:v2];

  [v8 setFlags:1];
  if (!*(_BYTE *)(a1 + 64)) {
    objc_msgSend(v8, "setFlags:", (unint64_t)objc_msgSend(v8, "flags") | 0x2000);
  }
  [*(id *)(a1 + 48) didReceiveMessage:v8 forChat:*(void *)(a1 + 40) style:*(unsigned __int8 *)(a1 + 65) account:*(void *)(a1 + 56) fromIDSID:0];
  if (*(_BYTE *)(a1 + 65) == 45)
  {
    id v3 = *(void **)(a1 + 48);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v3 didReceiveMessageDeliveryReceiptForMessageID:v4 date:v5 account:*(void *)(a1 + 56)];

    if (*(_BYTE *)(a1 + 65) == 45 && *(_BYTE *)(a1 + 66) && *(_BYTE *)(a1 + 64))
    {
      int v6 = *(void **)(a1 + 48);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
      [v6 didSendMessageReadReceiptForMessageID:v7 account:*(void *)(a1 + 56)];
    }
  }
}

void sub_341B0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7 = a5;
  id v8 = a2;
  uint64_t v9 = IMLogHandleForCategory("MessagePushHandler");
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    int v13 = 138412290;
    uint64_t v14 = v11;
    _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_INFO,  "Executing NOOP command handler for local command: %@",  (uint8_t *)&v13,  0xCu);
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue([v8 service]);
  [v12 sendAckForMessageWithContext:v7];
}

LABEL_64:
  -[NSMutableString appendString:](self->_outHTML, "appendString:", @"</mention>");
  -[NSMutableString appendString:](self->_AuxHTML, "appendString:", @"</mention>");
  if (v26) {
    goto LABEL_65;
  }
LABEL_59:
  if (v55)
  {
LABEL_60:
    -[NSMutableString appendString:](self->_outHTML, "appendString:", @"</a>");
    -[NSMutableString appendString:](self->_AuxHTML, "appendString:", @"</a>");
  }

void sub_35F0C(uint64_t a1, uint64_t a2, id a3)
{
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSNumber);
  if ((objc_opt_isKindOfClass(a3, v6) & 1) != 0) {
    a3 = [a3 stringValue];
  }
  id v7 = (void *)IMCreateEscapedAttributeValueFromString(a2);
  id v8 = (id)IMCreateEscapedAttributeValueFromString(a3);
  if (v7 && v8)
  {
    [*(id *)(*(void *)(a1 + 32) + 8) appendFormat:@" %@=%@", v7, v8];
    [*(id *)(*(void *)(a1 + 32) + 24) appendFormat:@" %@=%@", v7, v8];
  }
}

void sub_35FDC(uint64_t a1, uint64_t a2, id a3)
{
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSNumber);
  if ((objc_opt_isKindOfClass(a3, v6) & 1) != 0) {
    a3 = [a3 stringValue];
  }
  id v7 = (void *)IMCreateEscapedAttributeValueFromString(a2);
  id v8 = (id)IMCreateEscapedAttributeValueFromString(a3);
  uint64_t v9 = IMStickerUserInfoStickerTranscodedStickerHashKey;
  id v10 = [v7 isEqualToString:IMStickerUserInfoStickerTranscodedStickerHashKey];
  if ((v10 & 1) != 0
    || (uint64_t v12 = IMStickerUserInfoTranscodedScaleKey,
        id v10 = [v7 isEqualToString:IMStickerUserInfoTranscodedScaleKey],
        (_DWORD)v10))
  {
    if (IMOSLoggingEnabled(v10, v11))
    {
      int v13 = (os_log_s *)OSLogHandleForIMFoundationCategory("Parser");
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "Not adding transcoded hash or scale key", buf, 2u);
      }
    }
  }

  else
  {
    if ([v7 isEqualToString:IMStickerUserInfoStickerHashKey]
      && objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", v9), "length"))
    {

      id v8 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", v9), "copy");
    }

    if ([v7 isEqualToString:IMStickerUserInfoScaleKey]
      && objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", v12), "length"))
    {

      id v8 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", v12), "copy");
    }

    if (v7 && v8)
    {
      [*(id *)(*(void *)(a1 + 40) + 8) appendFormat:@" %@=%@", v7, v8];
      [*(id *)(*(void *)(a1 + 40) + 24) appendFormat:@" %@=%@", v7, v8];
    }
  }
}

void sub_361D0(uint64_t a1, uint64_t a2, id a3)
{
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSNumber);
  if ((objc_opt_isKindOfClass(a3, v6) & 1) != 0) {
    a3 = [a3 stringValue];
  }
  id v7 = (void *)IMCreateEscapedAttributeValueFromString(a2);
  uint64_t v8 = IMCreateEscapedAttributeValueFromString(a3);
  id v9 = (id)v8;
  if (v7 && v8) {
    [*(id *)(*(void *)(a1 + 32) + 24) appendFormat:@" %@=%@", v7, v8];
  }
}

void sub_36824(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7 = a5;
  id v8 = a2;
  uint64_t v9 = IMLogHandleForCategory("MessagePushHandler");
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    int v13 = 138412290;
    uint64_t v14 = v11;
    _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_INFO,  "Executing NOOP command handler for command: %@",  (uint8_t *)&v13,  0xCu);
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v8 service]);
  [v12 sendAckForMessageWithContext:v7];
}

uint64_t sub_37754(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3) {
    return (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, *(unsigned int *)(result + 32));
  }
  return result;
}

void sub_39804(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x39518LL);
  }

  _Unwind_Resume(a1);
}

void sub_3B1C8(uint64_t a1, uint64_t a2, void *a3)
{
  int v4 = a2;
  if (IMOSLoggingEnabled(a1, a2))
  {
    uint64_t v6 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDeliveryController");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = [*(id *)(a1 + 32) ID];
      id v8 = @"NO";
      if (v4) {
        id v8 = @"YES";
      }
      int v13 = 138412546;
      uint64_t v14 = v8;
      __int16 v15 = 2112;
      id v16 = v7;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_INFO,  "Appending off grid status of %@ for handle ID %@ ",  (uint8_t *)&v13,  0x16u);
    }
  }

  if (v4)
  {
    id v9 = objc_msgSend( *(id *)(a1 + 40),  "setObject:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1),  @"sofg");
    if (a3)
    {
      id v11 = objc_msgSend(a3, "__imHexString");
      if (v11) {
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), @"sofgid", v11);
      }
    }

    else if (IMOSLoggingEnabled(v9, v10))
    {
      uint64_t v12 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDeliveryController");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        LOWORD(v13) = 0;
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_INFO,  "Missing identifier for this off grid status payload!",  (uint8_t *)&v13,  2u);
      }
    }
  }

LABEL_67:
  if (-[MessageServiceSession isReplicating]( -[MessageDeliveryController session](self, "session"),  "isReplicating"))
  {
    uint64_t v38 = [v41 isSOS];
    uint64_t v39 = &IDSRegistrationPropertySupportsSOSAlerting;
    if (!v38) {
      uint64_t v39 = &IDSRegistrationPropertySupportsHybridGroupsV1;
    }
    -[NSMutableSet addObject:](v8, "addObject:", *v39);
  }

  return +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v8,  @"req",  v42,  @"int",  +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v14 & 1),  @"newFeature",  0LL);
}

void sub_3CCF0(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x3C94CLL);
  }

  _Unwind_Resume(exception_object);
}

void sub_3CEBC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v12 = (char *)objc_msgSend( +[IMFeatureFlags sharedFeatureFlags](IMFeatureFlags, "sharedFeatureFlags"),  "isScheduledMessagesCoreEnabled");
  if ((_DWORD)v12)
  {
    uint64_t v12 = (char *)[a2 scheduleType];
    if (v12 == (_BYTE *)&dword_0 + 2)
    {
      uint64_t v12 = (char *)objc_msgSend(objc_msgSend(a2, "editedPartIndexes"), "count");
      if (v12)
      {
        BOOL v14 = 0;
        if (!a5) {
          goto LABEL_17;
        }
      }

      else
      {
        uint64_t v12 = (char *)objc_msgSend(objc_msgSend(a2, "retractedPartIndexes"), "count");
        BOOL v14 = v12 == 0LL;
        if (!a5) {
          goto LABEL_17;
        }
      }

      if (v14) {
        goto LABEL_17;
      }
      id v16 = -[IMDMessageStore messageWithGUID:]( +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance"),  "messageWithGUID:",  [a2 guid]);
      uint64_t v12 = (char *)[v16 scheduleType];
      unsigned int v15 = 3;
      if (v12 != (_BYTE *)&dword_0 + 2) {
        goto LABEL_23;
      }
      uint64_t v12 = (char *)[v16 scheduleState];
      unsigned int v15 = v12 == (_BYTE *)&dword_0 + 2 ? a6 : 3;
      if (v12 != (_BYTE *)&dword_0 + 2) {
        goto LABEL_23;
      }
    }

    else
    {
      unsigned int v15 = a6;
    }

    if ((a5 & 1) != 0) {
      goto LABEL_18;
    }
    goto LABEL_23;
  }

LABEL_17:
  unsigned int v15 = a6;
  if (a5)
  {
LABEL_18:
    id v17 = [*(id *)(a1 + 32) isTypingMessage];
    if ((v17 & 1) == 0 && IMOSLoggingEnabled(v17, v18))
    {
      id v19 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDelivery");
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        uint64_t v25 = a2;
        __int16 v26 = 2112;
        uint64_t v27 = a3;
        _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_INFO,  "Finished processing attachments for message: %@  for display IDs: %@",  buf,  0x16u);
      }
    }

    LOBYTE(v23) = *(_BYTE *)(a1 + 176);
    [*(id *)(a1 + 40) _sendMessage:a2 context:a4 deliveryContext:*(void *)(a1 + 48) fromID:*(void *)(a1 + 56) fromAccount:*(void *)(a1 + 64) toID:*(void *)(a1 + 72) chatIdentifier:*(void *)(a1 + 80) toSessionToken:0 toGroup:*(void *)(a1 + 88) toParticipants:*(void *)(a1 + 96)  originallyToParticipants:*(void *)(a1 + 104) requiredRegProperties:*(void *)(a1 + 112) interestingRegProperties:*(void *)(a1 + 120) requiresLackOfRegProperties:*(void *)(a1 + 128) canInlineAttac hments:v23 type:2 msgPayloadUploadDictionary:*(void *)(a1 + 136) originalPayload:*(void *)(a1 + 144) replyToMessageGUID:*(void *)(a1 + 152) willSendBlock:*(void *)(a1 + 160) completionBlock:*(void *)(a1 + 168)];
    return;
  }

void sub_3D190(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v5 = [a3 count];
  if (v5)
  {
    if (IMOSLoggingEnabled(v5, v6))
    {
      id v7 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDelivery");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v129 = a3;
        _os_log_impl(&dword_0, v7, OS_LOG_TYPE_INFO, "Couldn't send new features to these destinations: %@", buf, 0xCu);
      }
    }

    __int128 v125 = 0u;
    __int128 v126 = 0u;
    __int128 v123 = 0u;
    __int128 v124 = 0u;
    uint64_t v96 = (uint64_t *)a1;
    id obj = [*(id *)(a1 + 32) fileTransferGUIDs];
    id v98 = [obj countByEnumeratingWithState:&v123 objects:v135 count:16];
    if (v98)
    {
      int v8 = 0;
      char v94 = 0;
      char v99 = 0;
      int v9 = 0;
      int v10 = 0;
      int v11 = 0;
      uint64_t v97 = *(void *)v124;
      do
      {
        for (i = 0LL; i != v98; i = (char *)i + 1)
        {
          if (*(void *)v124 != v97) {
            objc_enumerationMutation(obj);
          }
          id v13 = -[IMDFileTransferCenter transferForGUID:]( +[IMDFileTransferCenter sharedInstance](&OBJC_CLASS___IMDFileTransferCenter, "sharedInstance"),  "transferForGUID:",  *(void *)(*((void *)&v123 + 1) + 8LL * (void)i));
          unsigned int v14 = [v13 isRecipeBasedSticker];
          unsigned int v15 = [v13 isAutoloopVideo];
          unsigned int v16 = [v13 isOpusAudioMessage];
          unsigned __int8 v17 = [v13 isAnimojiV2];
          if ([v13 isAdaptiveImageGlyph])
          {
            v8 |= objc_msgSend( objc_msgSend( +[IDSServerBag sharedInstanceForBagType:]( IDSServerBag,  "sharedInstanceForBagType:",  1),  "objectForKey:",  @"backwards-compat-enabled-adaptive-image-glyphs"),  "BOOLValue") ^ 1;
            char v94 = 1;
          }

          if ((objc_msgSend( +[IMFeatureFlags sharedFeatureFlags](IMFeatureFlags, "sharedFeatureFlags"),  "isClingBackwardsCompatibilityEnabled") & 1) == 0) {
            v8 |= [(id)v96[5] _transferIsUserGeneratedOrEmojiSticker:v13];
          }
          v11 |= v14;
          v10 |= v15;
          v9 |= v16;
          v99 |= v17;
        }

        id v98 = [obj countByEnumeratingWithState:&v123 objects:v135 count:16];
      }

      while (v98);
    }

    else
    {
      LOBYTE(v8) = 0;
      char v94 = 0;
      char v99 = 0;
      int v9 = 0;
      int v10 = 0;
      int v11 = 0;
    }

    uint64_t v18 = (char *)[(id)v96[4] associatedMessageType];
    if (v18 == (_BYTE *)&stru_790.reserved1 + 2
      || v18 == &stru_BA0.segname[14]
      || (id v19 = (char *)[(id)v96[4] associatedMessageType], v19 == &stru_BA0.segname[15])
      || v19 == (_BYTE *)&stru_790.reserved1 + 3)
    {
      LOBYTE(v8) = objc_msgSend( objc_msgSend( +[IDSServerBag sharedInstanceForBagType:]( IDSServerBag,  "sharedInstanceForBagType:",  1),  "objectForKey:",  @"backwards-compat-enabled-etap"),  "BOOLValue") ^ 1 | v8;
    }

    __int128 v114 = *((_OWORD *)v96 + 2);
    __int128 v20 = *((_OWORD *)v96 + 4);
    __int128 v118 = *((_OWORD *)v96 + 3);
    __int128 v119 = v20;
    __int128 v21 = *((_OWORD *)v96 + 6);
    __int128 v120 = *((_OWORD *)v96 + 5);
    v113[2] = sub_3DD74;
    v113[3] = &unk_D6398;
    v113[0] = _NSConcreteStackBlock;
    v113[1] = 3221225472LL;
    uint64_t v115 = a4;
    uint64_t v116 = a3;
    __int128 v121 = v21;
    uint64_t v22 = v96[15];
    uint64_t v117 = a2;
    uint64_t v122 = v22;
    uint64_t v23 = IMBalloonPluginIdentifierActivity;
    uint64_t v24 = IMBalloonExtensionIDWithSuffix(IMBalloonPluginIdentifierActivity);
    uint64_t v25 = IMBalloonBundleIdentifierLegacyScreenTime;
    __int16 v26 = +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  v24,  IMBalloonExtensionIDWithSuffix(IMBalloonBundleIdentifierLegacyScreenTime),  0LL);
    id v27 = [(id)v96[4] balloonBundleID];
    uint64_t v28 = v96;
    if (!v27) {
      goto LABEL_87;
    }
    if (!v96[14])
    {
      unsigned __int8 v39 = -[NSSet containsObject:](v26, "containsObject:", [(id)v96[4] balloonBundleID]);
      uint64_t v28 = v96;
      if (v11 & 1 | ((v39 & 1) == 0) | (v10 | v9) & 1) {
        goto LABEL_26;
      }
    }

    else
    {
LABEL_87:
      if (((v11 | v10 | v9) & 1) != 0)
      {
LABEL_26:
        uint64_t v30 = v28[4];
        uint64_t v29 = (void *)v28[5];
        uint64_t v32 = v28[6];
        uint64_t v31 = v28[7];
        uint64_t v33 = v28[8];
        uint64_t v34 = v28[9];
        uint64_t v35 = v28[10];
        uint64_t v36 = v28[11];
        uint64_t v37 = v28[12];
        uint64_t v38 = v28[13];
        v112[0] = _NSConcreteStackBlock;
        v112[1] = 3221225472LL;
        v112[2] = sub_3E3E8;
        v112[3] = &unk_D63C0;
        v112[4] = v28[15];
        v112[5] = v113;
        LOBYTE(v90) = 0;
        [v29 _sendMessage:v30 context:v31 deliveryContext:v33 fromID:v32 fromAccount:v34 toID:0 chatIdentifier:v35 toSessionToken:0 toGroup:0 toParticipa nts:a3 originallyToParticipants:v36 requiredRegProperties:0 interestingRegProperties:0 requiresLackOfRegProperties:0 canInl ineAttachments:v90 type:3 msgPayloadUploadDictionary:0 originalPayload:v37 replyToMessageGUID:v38 willSendBlock:0 completionBlock:v112];
        return;
      }
    }

    if ((v8 & 1) == 0)
    {
      if (objc_msgSend( objc_msgSend((id)v28[4], "balloonBundleID"),  "isEqualToString:",  IMBalloonExtensionIDWithSuffix(v23)))
      {
        uint64_t v40 = IMExtensionPayloadUnarchivingClasses();
        uint64_t v111 = 0LL;
        id v41 = -[NSKeyedUnarchiver initForReadingFromData:error:]( [NSKeyedUnarchiver alloc],  "initForReadingFromData:error:",  [(id)v96[4] payloadData],  &v111);
        id v42 = -[NSKeyedUnarchiver decodeObjectOfClasses:forKey:]( v41,  "decodeObjectOfClasses:forKey:",  v40,  NSKeyedArchiveRootObjectKey);
        id v44 = v42;
        if (v111)
        {
          if (IMOSLoggingEnabled(v42, v43))
          {
            id v45 = (os_log_s *)OSLogHandleForIMFoundationCategory("Warning");
            if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              id v129 = v111;
              _os_log_impl(&dword_0, v45, OS_LOG_TYPE_INFO, "Failed to unarchive attributionInfo. Error: %@", buf, 0xCu);
            }
          }
        }

        if (v44)
        {
          uint64_t v46 = objc_opt_class(&OBJC_CLASS___NSDictionary);
          if ((objc_opt_isKindOfClass(v44, v46) & 1) == 0) {
            goto LABEL_71;
          }
          id v47 = [v44 objectForKey:IMExtensionPayloadAlternateTextKey];
          BOOL v48 = [v47 objectForKey:@"messageText"] == 0;
          uint64_t v49 = objc_alloc(&OBJC_CLASS___NSMutableAttributedString);
          if (v48) {
            id v50 = [v44 objectForKey:@"ldtext"];
          }
          else {
            id v50 = [v47 objectForKey:@"messageText"];
          }
          id v67 = -[NSMutableAttributedString initWithString:](v49, "initWithString:", v50);
          id v68 = [v47 objectForKey:@"breadcrumbText"];
          if (v68)
          {
            v133[0] = IMBreadcrumbTextMarkerAttributeName;
            v133[1] = IMBreadcrumbTextOptionFlags;
            v134[0] = v68;
            v134[1] = &off_DB558;
            uint64_t v69 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v134,  v133,  2LL);
            uint64_t v70 = objc_alloc(&OBJC_CLASS___NSAttributedString);
            id v71 = -[NSAttributedString initWithString:attributes:]( v70,  "initWithString:attributes:",  IMBreadcrumbCharacterString,  v69);
            -[NSMutableAttributedString appendAttributedString:](v67, "appendAttributedString:", v71);
          }

          if (v67)
          {
            id v44 = objc_msgSend( [IMMessageItem alloc],  "initWithSender:time:body:attributes:fileTransferGUIDs:flags:error:guid:threadIdentifier:",  objc_msgSend((id)v96[4], "sender"),  objc_msgSend((id)v96[4], "time"),  v67,  0,  0,  objc_msgSend((id)v96[4], "flags"),  0,  objc_msgSend((id)v96[4], "guid"),  0);

            if (IMOSLoggingEnabled(v72, v73))
            {
              id v74 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDelivery");
              if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
              {
                id v75 = [v44 guid];
                *(_DWORD *)buf = 138412290;
                id v129 = v75;
                _os_log_impl( &dword_0,  v74,  OS_LOG_TYPE_INFO,  "Sending activity sharing fallback message msg guid %@",  buf,  0xCu);
              }
            }
          }

          else
          {
LABEL_71:
            id v44 = 0LL;
          }
        }

        goto LABEL_73;
      }

      if ((v99 & 1) != 0)
      {
        __int128 v109 = 0u;
        __int128 v110 = 0u;
        __int128 v107 = 0u;
        __int128 v108 = 0u;
        id v51 = [(id)v96[4] fileTransferGUIDs];
        id v52 = [v51 countByEnumeratingWithState:&v107 objects:v132 count:16];
        if (!v52) {
          return;
        }
        id v44 = 0LL;
        uint64_t v53 = *(void *)v108;
        uint64_t v54 = IMFileTransferAVTranscodeOptionRemoveAlpha;
        do
        {
          for (j = 0LL; j != v52; j = (char *)j + 1)
          {
            if (*(void *)v108 != v53) {
              objc_enumerationMutation(v51);
            }
            id v56 = -[IMDFileTransferCenter transferForGUID:]( +[IMDFileTransferCenter sharedInstance](&OBJC_CLASS___IMDFileTransferCenter, "sharedInstance"),  "transferForGUID:",  *(void *)(*((void *)&v107 + 1) + 8LL * (void)j));
            id v57 = [v56 isAnimojiV2];
            if ((_DWORD)v57)
            {
              if (IMOSLoggingEnabled(v57, v58))
              {
                uint64_t v59 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDelivery");
                if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( &dword_0,  v59,  OS_LOG_TYPE_INFO,  "Contains AnimojiV2. Setting RemoveAlpha transcoderUserInfo option",  buf,  2u);
                }
              }

              id v60 = objc_msgSend(objc_msgSend(v56, "transcoderUserInfo"), "mutableCopy");
              [v60 setObject:&__kCFBooleanTrue forKeyedSubscript:v54];
              [v56 setTranscoderUserInfo:v60];

              id v44 = (id)v96[4];
            }
          }

          id v52 = [v51 countByEnumeratingWithState:&v107 objects:v132 count:16];
        }

        while (v52);
        goto LABEL_73;
      }

      if ((v94 & 1) != 0)
      {
        id v61 =  [(id)v96[5] _fallbackMesssageItemByConvertingGenmojiToUnknownEmojiCharacterInOriginalMessageItem:v96[4]];
LABEL_63:
        id v44 = v61;
LABEL_73:
        if (v44)
        {
          uint64_t v76 = v96[7];
          uint64_t v77 = v96[8];
          id v78 = (void *)v96[5];
          uint64_t v79 = v96[6];
          uint64_t v80 = v96[9];
          uint64_t v81 = v96[10];
          uint64_t v82 = v96[11];
          uint64_t v83 = v96[12];
          uint64_t v84 = v96[13];
          v100[0] = _NSConcreteStackBlock;
          v100[1] = 3221225472LL;
          v100[2] = sub_3E530;
          v100[3] = &unk_D63E8;
          char v101 = v99 & 1;
          char v102 = v94 & 1;
          uint64_t v85 = v96[15];
          v100[4] = v44;
          v100[5] = v85;
          v100[6] = v113;
          LOBYTE(v90) = 0;
          [v78 _sendMessage:v44 context:v76 deliveryContext:v77 fromID:v79 fromAccount:v80 toID:0 chatIdentifier:v81 toSessionToken:0 toGroup:0 toPartici pants:a3 originallyToParticipants:v82 requiredRegProperties:0 interestingRegProperties:0 requiresLackOfRegProperties:0 ca nInlineAttachments:v90 type:1 msgPayloadUploadDictionary:0 originalPayload:v83 replyToMessageGUID:v84 willSendBlock:0 completionBlock:v100];
        }

        return;
      }

      id v62 = objc_msgSend( objc_msgSend((id)v96[4], "balloonBundleID"),  "isEqualToString:",  IMBalloonExtensionIDWithSuffix(v25));
      if (!(_DWORD)v62)
      {
        if (!v96[14])
        {
          id v44 = [(id)v96[4] copyForBackwardsCompatibility];
          if (objc_msgSend(objc_msgSend((id)v96[4], "expressiveSendStyleID"), "length"))
          {
            __int128 v105 = 0u;
            __int128 v106 = 0u;
            __int128 v103 = 0u;
            __int128 v104 = 0u;
            id v86 = [(id)v96[4] fileTransferGUIDs];
            id v87 = [v86 countByEnumeratingWithState:&v103 objects:v127 count:16];
            if (v87)
            {
              uint64_t v88 = *(void *)v104;
              do
              {
                for (k = 0LL; k != v87; k = (char *)k + 1)
                {
                  if (*(void *)v104 != v88) {
                    objc_enumerationMutation(v86);
                  }
                  objc_msgSend( -[IMDFileTransferCenter transferForGUID:]( +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance"),  "transferForGUID:",  *(void *)(*((void *)&v103 + 1) + 8 * (void)k)),  "setAppMessageFallbackImage:",  1);
                }

                id v87 = [v86 countByEnumeratingWithState:&v103 objects:v127 count:16];
              }

              while (v87);
            }
          }

          goto LABEL_73;
        }

        if (IMOSLoggingEnabled(v62, v63))
        {
          id v66 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDelivery");
          if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_0, v66, OS_LOG_TYPE_INFO, "Sending fallback message using linkMetadata", buf, 2u);
          }
        }

        id v61 = [(id)v96[5] _fallbackMessageItemFromLinkMetadata:v96[14] originalMessageItem:v96[4]];
        goto LABEL_63;
      }

      if (IMOSLoggingEnabled(v62, v63))
      {
        uint64_t v64 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDelivery");
        if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
        {
          id v65 = [(id)v96[4] balloonBundleID];
          *(_DWORD *)buf = 138412546;
          id v129 = v65;
          __int16 v130 = 2112;
          uint64_t v131 = a3;
          _os_log_impl( &dword_0,  v64,  OS_LOG_TYPE_INFO,  "Not sending incompatible payload with balloon bundle ID %@ to destinations %@",  buf,  0x16u);
        }
      }
    }
  }

void sub_3DD74(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) expressiveSendStyleID];
  id v3 = [v2 length];
  if (v3)
  {
    if (IMOSLoggingEnabled(v3, v4))
    {
      id v5 = (os_log_s *)OSLogHandleForIMFoundationCategory("Delivery");
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = (NSNumber *)[*(id *)(a1 + 32) guid];
        *(_DWORD *)buf = 138412290;
        uint64_t v40 = v6;
        _os_log_impl(&dword_0, v5, OS_LOG_TYPE_INFO, "Calling expressive send style block for msg guid %@", buf, 0xCu);
      }
    }

    id v7 = [*(id *)(a1 + 32) _localizedBackwardsCompatibleExpressiveSendText];
    id v8 = [*(id *)(a1 + 40) _propertyForExpressiveSendStyle:v2];
    if (v8)
    {
      id v8 = [*(id *)(a1 + 48) objectForKey:v8];
      int v10 = v8;
    }

    else
    {
      int v10 = 0LL;
    }

    int v11 = *(void **)(a1 + 56);
    if (IMOSLoggingEnabled(v8, v9))
    {
      uint64_t v12 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDelivery");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        id v13 = +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v11 count]);
        *(_DWORD *)buf = 138412546;
        uint64_t v40 = v13;
        __int16 v41 = 2112;
        id v42 = v11;
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_INFO,  "%@ Devices needing impact string before computation %@",  buf,  0x16u);
      }
    }

    id v14 = [*(id *)(a1 + 56) count];
    if (v14)
    {
      id v14 = [*(id *)(a1 + 64) count];
      if (v14)
      {
        id v14 = [v10 count];
        if (v14)
        {
          unsigned int v16 = +[NSMutableSet setWithArray:](&OBJC_CLASS___NSMutableSet, "setWithArray:", v10);
          unsigned __int8 v17 = +[NSMutableSet setWithArray:](&OBJC_CLASS___NSMutableSet, "setWithArray:", *(void *)(a1 + 64));
          -[NSMutableSet minusSet:](v17, "minusSet:", v16);
          id v14 = -[NSMutableSet count](v17, "count");
          if (v14)
          {
            id v14 = objc_msgSend(v11, "arrayByAddingObjectsFromArray:", -[NSMutableSet allObjects](v17, "allObjects"));
            int v11 = v14;
          }
        }
      }
    }

    uint64_t v18 = IMOSLoggingEnabled(v14, v15);
    if ((_DWORD)v18)
    {
      __int128 v20 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDelivery");
      uint64_t v18 = os_log_type_enabled(v20, OS_LOG_TYPE_INFO);
      if ((_DWORD)v18)
      {
        __int128 v21 = +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v11 count]);
        *(_DWORD *)buf = 138412546;
        uint64_t v40 = v21;
        __int16 v41 = 2112;
        id v42 = v11;
        _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_INFO,  "%@ Devices needing impact string after computation %@",  buf,  0x16u);
      }
    }

    if (v7 && (uint64_t v18 = (uint64_t)[v11 count]) != 0)
    {
      if (IMOSLoggingEnabled(v18, v19))
      {
        uint64_t v22 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDelivery");
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          uint64_t v23 = +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v11 count]);
          id v24 = [*(id *)(a1 + 32) guid];
          *(_DWORD *)buf = 138412546;
          uint64_t v40 = v23;
          __int16 v41 = 2112;
          id v42 = v24;
          _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_INFO,  "Sending backwards compatible expressive send style to %@ skipped devices for msg guid %@",  buf,  0x16u);
        }
      }

      id v25 = objc_msgSend( [IMMessageItem alloc],  "initWithSender:time:body:attributes:fileTransferGUIDs:flags:error:guid:threadIdentifier:",  objc_msgSend(*(id *)(a1 + 32), "sender"),  objc_msgSend(*(id *)(a1 + 32), "time"),   -[NSAttributedString initWithString:]( [NSAttributedString alloc],  "initWithString:",  v7),  0,  0,  objc_msgSend(*(id *)(a1 + 32), "flags"),  0,  +[NSString stringGUID](NSString, "stringGUID"),  0);
      objc_msgSend(v25, "setDestinationCallerID:", objc_msgSend(*(id *)(a1 + 72), "_stripFZIDPrefix"));
      __int16 v26 = *(void **)(a1 + 40);
      uint64_t v27 = *(void *)(a1 + 80);
      uint64_t v28 = *(void *)(a1 + 88);
      uint64_t v29 = *(void *)(a1 + 72);
      uint64_t v30 = *(void *)(a1 + 96);
      uint64_t v31 = *(void *)(a1 + 104);
      uint64_t v32 = *(void *)(a1 + 112);
      uint64_t v33 = *(void *)(a1 + 120);
      v38[0] = _NSConcreteStackBlock;
      v38[1] = 3221225472LL;
      v38[2] = sub_3E2B0;
      v38[3] = &unk_D6370;
      uint64_t v34 = *(void *)(a1 + 128);
      v38[4] = *(void *)(a1 + 136);
      LOBYTE(v37) = 0;
      [v26 _sendMessage:v25 context:v27 deliveryContext:v28 fromID:v29 fromAccount:v30 toID:0 chatIdentifier:v31 toSessionToken:0 toGroup:0 toParticipant s:v11 originallyToParticipants:v32 requiredRegProperties:0 interestingRegProperties:0 requiresLackOfRegProperties:0 canInlineA ttachments:v37 type:1 msgPayloadUploadDictionary:0 originalPayload:v33 replyToMessageGUID:v34 willSendBlock:0 completionBlock:v38];
    }

    else if (IMOSLoggingEnabled(v18, v19))
    {
      uint64_t v35 = (os_log_s *)OSLogHandleForIMFoundationCategory("Warning");
      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        uint64_t v36 = (NSNumber *)[*(id *)(a1 + 32) guid];
        *(_DWORD *)buf = 138412546;
        uint64_t v40 = v36;
        __int16 v41 = 2112;
        id v42 = v2;
        _os_log_impl( &dword_0,  v35,  OS_LOG_TYPE_INFO,  "No backwards compatibility string for msg %@ expressiveSendStyleID %@",  buf,  0x16u);
      }
    }
  }

uint64_t sub_3E2B0(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (*(void *)(result + 32))
  {
    uint64_t v7 = result;
    if (IMOSLoggingEnabled(result, a2))
    {
      id v8 = (os_log_s *)OSLogHandleForIMFoundationCategory("Delivery");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = @"NO";
        if (a4) {
          uint64_t v9 = @"YES";
        }
        int v10 = 138412546;
        int v11 = v9;
        __int16 v12 = 1024;
        int v13 = a5;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_INFO,  "Got success %@ error %d in legacy MessageDelivery block (impact additional message)",  (uint8_t *)&v10,  0x12u);
      }
    }

    return (*(uint64_t (**)(void))(*(void *)(v7 + 32) + 16LL))();
  }

  return result;
}

uint64_t sub_3E3E8(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (*(void *)(result + 32))
  {
    uint64_t v7 = result;
    uint64_t v8 = *(void *)(result + 40);
    if (v8) {
      uint64_t v8 = (*(uint64_t (**)(void))(v8 + 16))();
    }
    if (IMOSLoggingEnabled(v8, a2))
    {
      uint64_t v9 = (os_log_s *)OSLogHandleForIMFoundationCategory("Delivery");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        int v10 = @"NO";
        if (a4) {
          int v10 = @"YES";
        }
        int v11 = 138412546;
        __int16 v12 = v10;
        __int16 v13 = 1024;
        int v14 = a5;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_INFO,  "Got success %@ error %d in legacy MessageDelivery block",  (uint8_t *)&v11,  0x12u);
      }
    }

    return (*(uint64_t (**)(void))(*(void *)(v7 + 32) + 16LL))();
  }

  return result;
}

_BYTE *sub_3E530(_BYTE *result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  id v5 = result;
  if (result[56])
  {
    if (IMOSLoggingEnabled(result, a2))
    {
      uint64_t v6 = (os_log_s *)OSLogHandleForIMFoundationCategory("Delivery");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_INFO,  "Cleaning up compatibility TranscoderUserInfo for animojiv2",  buf,  2u);
      }
    }

    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    id v7 = objc_msgSend(*((id *)v5 + 4), "fileTransferGUIDs", v26, v27);
    result = [v7 countByEnumeratingWithState:&v34 objects:v43 count:16];
    uint64_t v8 = result;
    if (result)
    {
      uint64_t v9 = *(void *)v35;
      uint64_t v10 = IMFileTransferAVTranscodeOptionRemoveAlpha;
      do
      {
        int v11 = 0LL;
        do
        {
          if (*(void *)v35 != v9) {
            objc_enumerationMutation(v7);
          }
          id v12 = -[IMDFileTransferCenter transferForGUID:]( +[IMDFileTransferCenter sharedInstance](&OBJC_CLASS___IMDFileTransferCenter, "sharedInstance"),  "transferForGUID:",  *(void *)(*((void *)&v34 + 1) + 8LL * (void)v11));
          if ([v12 isAnimojiV2])
          {
            id v13 = [v12 transcoderUserInfo];
            int v14 = v13;
            if (v13)
            {
              if (objc_msgSend(objc_msgSend(v13, "objectForKeyedSubscript:", v10), "BOOLValue"))
              {
                id v15 = [v14 mutableCopy];
                [v15 setObject:0 forKeyedSubscript:v10];
                [v12 setTranscoderUserInfo:v15];

                -[IMDAttachmentStore storeAttachment:associateWithMessageWithGUID:]( +[IMDAttachmentStore sharedInstance](IMDAttachmentStore, "sharedInstance"),  "storeAttachment:associateWithMessageWithGUID:",  v12,  [*((id *)v5 + 4) guid]);
              }
            }
          }

          ++v11;
        }

        while (v8 != v11);
        result = [v7 countByEnumeratingWithState:&v34 objects:v43 count:16];
        uint64_t v8 = result;
      }

      while (result);
    }
  }

  if (v5[57])
  {
    if (IMOSLoggingEnabled(result, a2))
    {
      unsigned int v16 = (os_log_s *)OSLogHandleForIMFoundationCategory("Delivery");
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_INFO,  "Cleaning up compatibility file transfers for adaptive image glyphs",  buf,  2u);
      }
    }

    id v17 = objc_msgSend(*((id *)v5 + 4), "fileTransferGUIDs", v26, v27);
    uint64_t v18 = +[IMDAttachmentStore sharedInstance](&OBJC_CLASS___IMDAttachmentStore, "sharedInstance");
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    result = [v17 countByEnumeratingWithState:&v30 objects:v42 count:16];
    uint64_t v19 = result;
    if (result)
    {
      uint64_t v20 = *(void *)v31;
      do
      {
        __int128 v21 = 0LL;
        do
        {
          if (*(void *)v31 != v20) {
            objc_enumerationMutation(v17);
          }
          uint64_t v22 = *(void *)(*((void *)&v30 + 1) + 8LL * (void)v21);
          if (objc_msgSend( -[IMDAttachmentStore attachmentWithGUID:](v18, "attachmentWithGUID:", v22),  "isTemporaryBackwardCompatibilityAsset")) {
            -[IMDAttachmentStore deleteAttachmentWithGUID:](v18, "deleteAttachmentWithGUID:", v22);
          }
          ++v21;
        }

        while (v19 != v21);
        result = [v17 countByEnumeratingWithState:&v30 objects:v42 count:16];
        uint64_t v19 = result;
      }

      while (result);
    }
  }

  if (*((void *)v5 + 5))
  {
    uint64_t v23 = *((void *)v5 + 6);
    if (v23) {
      uint64_t v23 = (*(uint64_t (**)(void))(v23 + 16))();
    }
    if (IMOSLoggingEnabled(v23, a2))
    {
      id v24 = (os_log_s *)OSLogHandleForIMFoundationCategory("Delivery");
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        id v25 = @"NO";
        if (a4) {
          id v25 = @"YES";
        }
        *(_DWORD *)buf = 138412546;
        unsigned __int8 v39 = v25;
        __int16 v40 = 1024;
        int v41 = a5;
        _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_INFO,  "Got success %@ error %d in legacy MessageDelivery block",  buf,  0x12u);
      }
    }

    return (_BYTE *)(*(uint64_t (**)(void))(*((void *)v5 + 5) + 16LL))();
  }

  return result;
}

void sub_3E928(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (IMOSLoggingEnabled(a1, a2))
  {
    uint64_t v4 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDelivery");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 104);
      id v7 = @"NO";
      if (*(_BYTE *)(*(void *)(*(void *)(a1 + 112) + 8LL) + 24LL)) {
        id v7 = @"YES";
      }
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)id v24 = v2;
      *(_WORD *)&v24[4] = 2112;
      *(void *)&v24[6] = v5;
      *(_WORD *)&v24[14] = 1024;
      *(_DWORD *)&uint8_t v24[16] = v2;
      __int16 v25 = 2112;
      uint64_t v26 = v7;
      __int16 v27 = 2112;
      uint64_t v28 = v6;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_INFO,  "Wrapped block got error: %d   guid: %@   error: %d    hasNotified: %@   block: %@",  buf,  0x2Cu);
    }
  }

  if (*(void *)(a1 + 104))
  {
    id v8 = objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "session"), "isReplicating");
    char v10 = v8 ^ 1;
    if (!(_DWORD)v2) {
      char v10 = 1;
    }
    if ((v10 & 1) == 0)
    {
      if (IMOSLoggingEnabled(v8, v9))
      {
        int v11 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDelivery");
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          id v12 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v2);
          uint64_t v13 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 138412546;
          *(void *)id v24 = v12;
          *(_WORD *)&v24[8] = 2112;
          *(void *)&v24[10] = v13;
          _os_log_impl(&dword_0, v11, OS_LOG_TYPE_INFO, "Got error %@ while replicating %@, suppressing", buf, 0x16u);
        }
      }

      uint64_t v2 = 0LL;
    }

    uint64_t v14 = *(void *)(*(void *)(a1 + 112) + 8LL);
    if ((_DWORD)v2 || !*(_BYTE *)(v14 + 24))
    {
      *(_BYTE *)(v14 + 24) = 1;
      if ((_DWORD)v2)
      {
        NSErrorUserInfoKey v21 = NSLocalizedDescriptionKey;
        uint64_t v22 = @"Failed to send message.Please check FZErrorType with the above error code";
        id v15 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v22,  &v21,  1LL);
        unsigned int v16 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IMSafetyMonitorErrorDomain,  v2,  v15);
      }

      else
      {
        unsigned int v16 = 0LL;
      }

      BOOL v17 = [*(id *)(a1 + 48) scheduleType] == (char *)&dword_0 + 1;
      id v18 = +[IMSafetyMonitorCoordinator sharedCoordinator]( &OBJC_CLASS___IMSafetyMonitorCoordinator,  "sharedCoordinator");
      uint64_t v19 = *(void *)(a1 + 48);
      BOOL v20 = (_DWORD)v2 == 0;
      if (v17) {
        [v18 informOfScheduledMessage:v19 sentSuccessfully:v20 error:v16];
      }
      else {
        [v18 informOfOutgoingMessageWithMessage:v19 sentSuccessfully:v20 error:v16];
      }
      if ([*(id *)(a1 + 48) scheduleType] == (char *)&dword_0 + 2) {
        [*(id *)(a1 + 40) handleScheduledMessageSend:*(void *)(a1 + 48) sentSuccessfully:(_DWORD)v2 == 0 idsMessage:*(void *)(a1 + 56) messageDictionary:*(void *)(a1 + 64) canInlineAttachments:*(unsigned __int8 *)(a1 + 120) msgPayloadUpload Dictionary:*(void *)(a1 + 72) fromID:*(void *)(a1 + 80) fromAccount:*(void *)(a1 + 88) originalIDSIdentifier:*(void *)(a1 + 32)];
      }
      (*(void (**)(void, void, void, BOOL, uint64_t, id))(*(void *)(a1 + 104) + 16))( *(void *)(a1 + 104),  *(void *)(a1 + 40),  *(void *)(a1 + 96),  (_DWORD)v2 == 0,  v2,  [*(id *)(a1 + 48) backwardsCompatibleVersion]);
    }
  }

void sub_3EC38(uint64_t a1, NSDictionary *a2, char a3)
{
  if ((a3 & 1) != 0)
  {
LABEL_7:
    id v11 = [*(id *)(a1 + 32) isTypingMessage];
    if ((v11 & 1) == 0 && IMOSLoggingEnabled(v11, v12))
    {
      uint64_t v13 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDelivery");
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        BOOL v20 = a2;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_INFO,  "Finished uploading payload data for message. Resulting payloadDictionary %@",  buf,  0xCu);
      }
    }

    LOBYTE(v18) = *(_BYTE *)(a1 + 176);
    [*(id *)(a1 + 40) _sendMessage:*(void *)(a1 + 32) context:*(void *)(a1 + 48) deliveryContext:*(void *)(a1 + 56) fromID:*(void *)(a1 + 64) fromAccount:*(void *)(a1 + 72) toID:*(void *)(a1 + 80) chatIdentifier:*(void *)(a1 + 88) toSessionToken:0 toGroup:*(void *)(a1 + 96) toParticipants:*(void *)(a1 + 104)  originallyToParticipants:*(void *)(a1 + 112) requiredRegProperties:*(void *)(a1 + 120) interestingRegProperties:*(void *)(a1 + 128) requiresLackOfRegProperties:*(void *)(a1 + 136) canInlineAttac hments:v18 type:0 msgPayloadUploadDictionary:a2 originalPayload:*(void *)(a1 + 144) replyToMessageGUID:*(void *)(a1 + 152) willSendBlock:*(void *)(a1 + 160) completionBlock:*(void *)(a1 + 168)];
    return;
  }

  id v5 = [*(id *)(a1 + 32) balloonBundleID];
  id v6 = [v5 isEqualToString:IMBalloonPluginIdentifierRichLinks];
  int v7 = (int)v6;
  int v9 = IMOSLoggingEnabled(v6, v8);
  if (v7)
  {
    if (v9)
    {
      char v10 = (os_log_s *)OSLogHandleForIMFoundationCategory("Warning");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_INFO,  "MessageDelivery. Did not upload rich link data. Still continuing",  buf,  2u);
      }
    }

    a2 = +[NSDictionary dictionary](&OBJC_CLASS___NSDictionary, "dictionary");
    goto LABEL_7;
  }

  if (v9)
  {
    uint64_t v14 = (os_log_s *)OSLogHandleForIMFoundationCategory("Warning");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      id v15 = *(NSDictionary **)(a1 + 32);
      uint64_t v16 = *(void *)(a1 + 112);
      *(_DWORD *)buf = 138412546;
      BOOL v20 = v15;
      __int16 v21 = 2112;
      uint64_t v22 = v16;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_INFO,  "MessageDelivery Failed processing payload data for message: %@  for display IDs: %@",  buf,  0x16u);
    }
  }

  uint64_t v17 = *(void *)(a1 + 168);
  if (v17) {
    (*(void (**)(uint64_t, void, void, void, uint64_t, id))(v17 + 16))( v17,  *(void *)(a1 + 40),  *(void *)(a1 + 112),  0,  1,  [*(id *)(a1 + 32) backwardsCompatibleVersion]);
  }
}

void sub_3EEA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  LODWORD(v6) = a6;
  int v12 = IMOSLoggingEnabled(a1, a2);
  if (a5)
  {
    if (v12)
    {
      uint64_t v13 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDelivery");
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        uint64_t v18 = a2;
        __int16 v19 = 2112;
        uint64_t v20 = a3;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_INFO,  "Finished processing fallback attachments for message: %@  for display IDs: %@",  buf,  0x16u);
      }
    }

    LOBYTE(v16) = *(_BYTE *)(a1 + 176);
    [*(id *)(a1 + 32) _sendMessage:a2 context:a4 deliveryContext:*(void *)(a1 + 40) fromID:*(void *)(a1 + 48) fromAccount:*(void *)(a1 + 56) toID:*(void *)(a1 + 64) chatIdentifier:*(void *)(a1 + 72) toSessionToken:0 toGroup:*(void *)(a1 + 80) toParticipants:*(void *)(a1 + 88)  originallyToParticipants:*(void *)(a1 + 96) requiredRegProperties:*(void *)(a1 + 104) interestingRegProperties:*(void *)(a1 + 112) requiresLackOfRegProperties:*(void *)(a1 + 120) canInlineAttac hments:v16 type:1 msgPayloadUploadDictionary:*(void *)(a1 + 128) originalPayload:*(void *)(a1 + 136) replyToMessageGUID:*(void *)(a1 + 144) willSendBlock:*(void *)(a1 + 160) completionBlock:*(void *)(a1 + 168)];
  }

  else
  {
    if (v12)
    {
      uint64_t v14 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDelivery");
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        uint64_t v18 = a2;
        __int16 v19 = 2112;
        uint64_t v20 = a3;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_INFO,  "Failed processing attachments for message: %@  for display IDs: %@",  buf,  0x16u);
      }
    }

    uint64_t v15 = *(void *)(a1 + 168);
    if (v15)
    {
      if ((_DWORD)v6) {
        uint64_t v6 = v6;
      }
      else {
        uint64_t v6 = 34LL;
      }
      (*(void (**)(uint64_t, void, uint64_t, void, uint64_t, id))(v15 + 16))( v15,  *(void *)(a1 + 32),  a3,  0,  v6,  [*(id *)(a1 + 152) backwardsCompatibleVersion]);
    }
  }

id sub_3F3A0(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) addFailedEditPartIndex:a2];
}

id sub_3F3AC(uint64_t a1, uint64_t a2)
{
  id v4 = objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "historyForMessagePart:", a2), "firstObject"),  "messagePartText");
  return objc_msgSend( *(id *)(a1 + 32),  "setBody:",  objc_msgSend( objc_msgSend(*(id *)(a1 + 32), "body"),  "__im_messageTextByAddingMessagePart:atIndex:",  v4,  (int)objc_msgSend( objc_msgSend(v4, "attribute:atIndex:effectiveRange:", IMMessagePartAttributeName, 0, 0),  "intValue")));
}

BOOL sub_3FB38(id a1, IDSDevice *a2)
{
  id v2 = -[IDSDevice capabilities](a2, "capabilities");
  return [v2 valueForCapability:IDSRegistrationPropertySupportsSendLaterMessages] != 0;
}

id sub_3FCCC(id *a1, uint64_t a2)
{
  id v4 = objc_msgSend(objc_msgSend(a1[4], "historyForMessagePart:", a2), "firstObject");
  if ([v4 messagePartText])
  {
    id v5 = objc_msgSend( objc_msgSend(a1[5], "_fileTransferGUIDsInMessageBody:", objc_msgSend(v4, "messagePartText")),  "firstObject");
    if (v5) {
      [a1[6] addObject:v5];
    }
  }

  return _[a1[4] setHistory:0 forMessagePart:a2];
}

id sub_3FDC8(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) setHistory:0 forMessagePart:a2];
}

id sub_3FE78(uint64_t a1, void *a2)
{
  id result = [a2 length];
  if (result) {
    return [*(id *)(a1 + 32) addObject:a2];
  }
  return result;
}

id sub_40450(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 32) _receivingDevicesForHandle:IMStripLoginID(a2) skippedDestinations:*(void *)(a1 + 40)];
  return _[*(id *)(a1 + 48) unionSet:v3];
}

id sub_40BCC(uint64_t a1, uint64_t a2)
{
  if (IMOSLoggingEnabled(a1, a2))
  {
    id v4 = (os_log_s *)OSLogHandleForIMFoundationCategory("Delivery");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      id v5 = [*(id *)(a1 + 32) guid];
      *(_DWORD *)buf = 138412290;
      NSUInteger v51 = (NSUInteger)v5;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_INFO, "Queued block for msg: %@ released", buf, 0xCu);
    }
  }

  if (![*(id *)(a1 + 32) isAudioMessage]
    || ![*(id *)(a1 + 32) isFinished]
    || (uint64_t v6 = +[IMDFileTransferCenter sharedInstance](&OBJC_CLASS___IMDFileTransferCenter, "sharedInstance"),
        id v7 = [*(id *)(a1 + 32) fileTransferGUIDs],
        [v7 count] != (char *)&dword_0 + 1))
  {
LABEL_22:
    char v14 = 0;
    uint64_t v15 = 0LL;
    uint64_t v8 = 0LL;
    goto LABEL_23;
  }

  uint64_t v8 = (NSSet *)-[IMDFileTransferCenter transferForGUID:](v6, "transferForGUID:", [v7 lastObject]);
  if (v8)
  {
    id v9 = objc_msgSend( +[IDSServerBag sharedInstanceForBagType:](IDSServerBag, "sharedInstanceForBagType:", 1),  "objectForKey:",  @"md-max-pkcrypto-filesize-ios8");
    id v11 = v9;
    if (v9)
    {
      if (IMOSLoggingEnabled(v9, v10))
      {
        int v12 = (os_log_s *)OSLogHandleForIMFoundationCategory("Delivery");
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          NSUInteger v51 = (NSUInteger)v11;
          _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_INFO,  "Server override for max public key crypto data size for iOS 8: %@",  buf,  0xCu);
        }
      }

      id v13 = [v11 unsignedIntegerValue];
    }

    else
    {
      id v13 = &loc_C7FC + 4;
    }

    uint64_t v16 = +[NSData dataWithContentsOfURL:]( &OBJC_CLASS___NSData,  "dataWithContentsOfURL:",  -[NSSet localURL](v8, "localURL"));
    id v17 = -[NSData length](v16, "length");
    if (IMOSLoggingEnabled(v17, v18))
    {
      __int16 v19 = (os_log_s *)OSLogHandleForIMFoundationCategory("Delivery");
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        NSUInteger v20 = -[NSData length](v16, "length");
        __int16 v21 = @"NO";
        *(_DWORD *)buf = 134218498;
        NSUInteger v51 = v20;
        if (v17 < v13) {
          __int16 v21 = @"YES";
        }
        __int16 v52 = 2048;
        id v53 = v13;
        __int16 v54 = 2112;
        uint64_t v55 = v21;
        _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_INFO,  "Can we send this attachment inline based on size? %lu < %lu? %@",  buf,  0x20u);
      }
    }

    if (v17 < v13)
    {
      uint64_t v15 = +[NSSet setWithObject:]( &OBJC_CLASS___NSSet,  "setWithObject:",  IDSRegistrationPropertySupportsInlineAttachments);
      uint64_t v8 = +[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", IDSRegistrationPropertySupportsKeepReceipts);
      v42[0] = _NSConcreteStackBlock;
      v42[1] = 3221225472LL;
      v42[2] = sub_41060;
      v42[3] = &unk_D6590;
      __int128 v22 = *(_OWORD *)(a1 + 48);
      int8x16_t v43 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
      __int128 v44 = v22;
      __int128 v23 = *(_OWORD *)(a1 + 80);
      __int128 v45 = *(_OWORD *)(a1 + 64);
      __int128 v46 = v23;
      __int128 v49 = *(_OWORD *)(a1 + 128);
      __int128 v24 = *(_OWORD *)(a1 + 96);
      uint64_t v48 = *(void *)(a1 + 112);
      __int16 v25 = v42;
      char v14 = 1;
      __int128 v47 = v24;
      goto LABEL_24;
    }

    goto LABEL_22;
  }

  char v14 = 0;
  uint64_t v15 = 0LL;
LABEL_23:
  __int16 v25 = 0LL;
LABEL_24:
  if ([*(id *)(a1 + 32) isTypingMessage])
  {
    uint64_t v26 = +[NSSet setWithObject:]( &OBJC_CLASS___NSSet,  "setWithObject:",  IDSRegistrationPropertyOptionallyReceiveTypingIndicator);
    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3221225472LL;
    v41[2] = sub_417B4;
    v41[3] = &unk_D65B8;
    uint64_t v28 = *(void **)(a1 + 56);
    uint64_t v27 = *(void *)(a1 + 64);
    uint64_t v29 = *(void *)(a1 + 72);
    uint64_t v30 = *(void *)(a1 + 80);
    void v41[4] = v30;
    v41[5] = v28;
    uint64_t v31 = *(void *)(a1 + 40);
    v41[6] = *(void *)(a1 + 32);
    v41[7] = v27;
    v41[8] = v31;
    v41[9] = v29;
    uint64_t v32 = *(void *)(a1 + 96);
    uint64_t v33 = *(void *)(a1 + 104);
    v41[10] = v32;
    v41[11] = v33;
    uint64_t v34 = *(void *)(a1 + 112);
    uint64_t v35 = *(void *)(a1 + 136);
    __int16 v25 = v41;
    v41[12] = v34;
    v41[13] = v35;
  }

  else
  {
    uint64_t v26 = 0LL;
    uint64_t v28 = *(void **)(a1 + 56);
    uint64_t v30 = *(void *)(a1 + 80);
    uint64_t v32 = *(void *)(a1 + 96);
    uint64_t v33 = *(void *)(a1 + 104);
    uint64_t v34 = *(void *)(a1 + 112);
    uint64_t v35 = *(void *)(a1 + 136);
  }

  uint64_t v36 = *(void *)(a1 + 88);
  uint64_t v37 = *(void *)(a1 + 120);
  v40[1] = 3221225472LL;
  v40[2] = sub_41C6C;
  v40[3] = &unk_D63C0;
  v40[4] = v35;
  v40[5] = a2;
  v40[0] = _NSConcreteStackBlock;
  LOBYTE(v39) = v14;
  return objc_msgSend( v28,  "_sendMessage:context:deliveryContext:fromID:fromAccount:toID:chatIdentifier:toSessionToken:toGroup:toParticip ants:originallyToParticipants:requiredRegProperties:interestingRegProperties:requiresLackOfRegProperties:canI nlineAttachments:type:msgPayloadUploadDictionary:originalPayload:replyToMessageGUID:willSendBlock:completionBlock:",  v30,  0,  v36,  v37,  v32,  v15,  v8,  v26,  v39,  1,  0,  v33,  v34,  v25,  v40);
}

void sub_41060(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = [a3 count];
  if (v7)
  {
    if (IMOSLoggingEnabled(v7, v8))
    {
      id v9 = (os_log_s *)OSLogHandleForIMFoundationCategory("Delivery");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v66 = a3;
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, "Audio message needs to be sent the legacy way to %@", buf, 0xCu);
      }
    }

    uint64_t v10 = +[NSMutableSet setWithArray:](&OBJC_CLASS___NSMutableSet, "setWithArray:", a3);
    id v11 = (NSArray *)[a4 objectForKey:IDSRegistrationPropertySupportsKeepReceipts];
    if (!v11) {
      id v11 = +[NSArray array](&OBJC_CLASS___NSArray, "array");
    }
    -[NSMutableSet minusSet:](v10, "minusSet:", +[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v11));
    int v12 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    __int128 v60 = 0u;
    __int128 v61 = 0u;
    __int128 v58 = 0u;
    __int128 v59 = 0u;
    id v13 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v10,  "countByEnumeratingWithState:objects:count:",  &v58,  v64,  16LL);
    if (v13)
    {
      uint64_t v14 = *(void *)v59;
      do
      {
        for (i = 0LL; i != v13; i = (char *)i + 1)
        {
          if (*(void *)v59 != v14) {
            objc_enumerationMutation(v10);
          }
          uint64_t v16 = *(void **)(*((void *)&v58 + 1) + 8LL * (void)i);
          if (objc_msgSend( *(id *)(a1 + 32),  "isEqualToString:",  objc_msgSend(v16, "_stripPotentialTokenURIWithToken:", 0))) {
            -[NSMutableSet addObject:](v12, "addObject:", v16);
          }
        }

        id v13 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v10,  "countByEnumeratingWithState:objects:count:",  &v58,  v64,  16LL);
      }

      while (v13);
    }

    -[NSMutableSet minusSet:](v10, "minusSet:", v12);

    if (-[NSMutableSet count](v10, "count"))
    {
      value = 0LL;
      __int128 v53 = 0u;
      __int128 v54 = 0u;
      __int128 v55 = 0u;
      __int128 v56 = 0u;
      id v17 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v10,  "countByEnumeratingWithState:objects:count:",  &v53,  v63,  16LL);
      id v19 = v17;
      if (v17)
      {
        NSUInteger v20 = 0LL;
        uint64_t v21 = *(void *)v54;
        do
        {
          __int128 v22 = 0LL;
          do
          {
            if (*(void *)v54 != v21) {
              objc_enumerationMutation(v10);
            }
            if (value) {
              p_value = 0LL;
            }
            else {
              p_value = &value;
            }
            id v24 = [*(id *)(*((void *)&v53 + 1) + 8 * (void)v22) _stripPotentialTokenURIWithToken:p_value];
            if (v20)
            {
              id v17 = [v20 isEqualToString:v24];
              if ((v17 & 1) == 0)
              {
                value = 0LL;
                goto LABEL_37;
              }
            }

            else
            {
              NSUInteger v20 = v24;
            }

            __int128 v22 = (char *)v22 + 1;
          }

          while (v19 != v22);
          id v17 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v10,  "countByEnumeratingWithState:objects:count:",  &v53,  v63,  16LL);
          id v19 = v17;
        }

        while (v17);
        if (v20)
        {
          if (IMOSLoggingEnabled(0LL, v18))
          {
            __int16 v25 = (os_log_s *)OSLogHandleForIMFoundationCategory("Delivery");
            if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              id v66 = v20;
              _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_INFO,  "There's a single legacy destination %@. Key off of delivery context for keep receipt.",  buf,  0xCu);
            }
          }

          uint64_t v26 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
          uint64_t v27 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 106LL);
          if (v27)
          {
            CFDictionarySetValue((CFMutableDictionaryRef)v26, @"c", v27);
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            sub_8FB7C();
          }

          CFDictionarySetValue((CFMutableDictionaryRef)v26, @"sP", v20);
          if (value)
          {
            CFDictionarySetValue((CFMutableDictionaryRef)v26, @"t", value);
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            sub_8FAFC();
          }

          __int128 v44 = *(const void **)(a1 + 32);
          if (v44)
          {
            CFDictionarySetValue((CFMutableDictionaryRef)v26, @"tP", v44);
          }

          else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            sub_8FA7C();
          }

          __int128 v45 = +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [*(id *)(a1 + 40) isAudioMessage] ^ 1);
          if (v45) {
            CFDictionarySetValue((CFMutableDictionaryRef)v26, @"aT", v45);
          }
          __int128 v46 = *(const void **)(a1 + 48);
          if (v46) {
            CFDictionarySetValue((CFMutableDictionaryRef)v26, @"p", v46);
          }
          goto LABEL_52;
        }
      }

uint64_t sub_4167C(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (*(void *)(result + 32))
  {
    uint64_t v7 = result;
    if (IMOSLoggingEnabled(result, a2))
    {
      uint64_t v8 = (os_log_s *)OSLogHandleForIMFoundationCategory("Delivery");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        id v9 = @"NO";
        if (a4) {
          id v9 = @"YES";
        }
        int v10 = 138412546;
        id v11 = v9;
        __int16 v12 = 1024;
        int v13 = a5;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_INFO,  "Got success %@ error %d in legacy MessageDelivery block",  (uint8_t *)&v10,  0x12u);
      }
    }

    return (*(uint64_t (**)(void))(*(void *)(v7 + 32) + 16LL))();
  }

  return result;
}

void sub_417B4(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (IMOSLoggingEnabled(a1, a2))
  {
    uint64_t v7 = (os_log_s *)OSLogHandleForIMFoundationCategory("Delivery");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138413058;
      uint64_t v41 = a2;
      __int16 v42 = 2112;
      uint64_t v43 = a3;
      __int16 v44 = 2112;
      uint64_t v45 = a4;
      __int16 v46 = 2112;
      uint64_t v47 = v8;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_INFO,  "willSendBlock typing indicator, destinations %@, skippedDestionations: %@, registrationPropertyToDestinations %@ , chatIdentifier %@",  buf,  0x2Au);
    }
  }

  id v9 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  id v10 = [*(id *)(a1 + 40) activeDeviceForHandle:*(void *)(a1 + 32)];
  id v11 = v10;
  if (v10)
  {
    id v12 = [v10 idsDestination];
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    id v13 = [a3 countByEnumeratingWithState:&v35 objects:v39 count:16];
    if (v13)
    {
      uint64_t v14 = *(void *)v36;
      do
      {
        for (i = 0LL; i != v13; i = (char *)i + 1)
        {
          if (*(void *)v36 != v14) {
            objc_enumerationMutation(a3);
          }
          id v16 = [v12 isEqualToString:*(void *)(*((void *)&v35 + 1) + 8 * (void)i)];
          if ((_DWORD)v16)
          {
            if (IMOSLoggingEnabled(v16, v17))
            {
              uint64_t v18 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDelivery");
              if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412290;
                uint64_t v41 = v11;
                _os_log_impl(&dword_0, v18, OS_LOG_TYPE_INFO, "Found skipped active device %@", buf, 0xCu);
              }
            }

            id v19 = [v11 shouldSendTypingIndicator];
            if ((_DWORD)v19)
            {
              if (IMOSLoggingEnabled(v19, v20))
              {
                uint64_t v21 = (os_log_s *)OSLogHandleForIMFoundationCategory("Delivery");
                if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 138412290;
                  uint64_t v41 = v11;
                  _os_log_impl(&dword_0, v21, OS_LOG_TYPE_INFO, "Sending typing indicator to device %@", buf, 0xCu);
                }
              }

              -[NSMutableSet addObject:](v9, "addObject:", v12);
            }
          }
        }

        id v13 = [a3 countByEnumeratingWithState:&v35 objects:v39 count:16];
      }

      while (v13);
    }
  }

  else
  {
    -[NSMutableSet addObjectsFromArray:](v9, "addObjectsFromArray:", a3);
  }

  uint64_t v22 = *(void *)(a1 + 48);
  uint64_t v23 = *(void *)(a1 + 56);
  uint64_t v24 = *(void *)(a1 + 64);
  uint64_t v25 = *(void *)(a1 + 72);
  uint64_t v27 = *(void *)(a1 + 32);
  uint64_t v26 = *(void **)(a1 + 40);
  id v28 = -[NSMutableSet allObjects](v9, "allObjects");
  uint64_t v29 = *(void *)(a1 + 80);
  uint64_t v30 = *(void *)(a1 + 88);
  v34[0] = _NSConcreteStackBlock;
  v34[1] = 3221225472LL;
  v34[2] = sub_41B34;
  v34[3] = &unk_D6370;
  uint64_t v31 = *(void *)(a1 + 96);
  v34[4] = *(void *)(a1 + 104);
  LOBYTE(v32) = 0;
  [v26 _sendMessage:v22 context:v23 deliveryContext:0 fromID:v24 fromAccount:v25 toID:0 chatIdentifier:v27 toSessionToken:0 toGroup:0 toParticipants:v28 or iginallyToParticipants:v29 requiredRegProperties:0 interestingRegProperties:0 requiresLackOfRegProperties:0 canInlineAttachmen ts:v32 type:0 msgPayloadUploadDictionary:0 originalPayload:v30 replyToMessageGUID:v31 willSendBlock:0 completionBlock:v34];
}

uint64_t sub_41B34(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (*(void *)(result + 32))
  {
    uint64_t v7 = result;
    if (IMOSLoggingEnabled(result, a2))
    {
      uint64_t v8 = (os_log_s *)OSLogHandleForIMFoundationCategory("Delivery");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        id v9 = @"NO";
        if (a4) {
          id v9 = @"YES";
        }
        int v10 = 138412546;
        id v11 = v9;
        __int16 v12 = 1024;
        int v13 = a5;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_INFO,  "Got success %@ error %d in typing indicator block",  (uint8_t *)&v10,  0x12u);
      }
    }

    return (*(uint64_t (**)(void))(*(void *)(v7 + 32) + 16LL))();
  }

  return result;
}

uint64_t sub_41C6C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (*(void *)(a1 + 32))
  {
    if (IMOSLoggingEnabled(a1, a2))
    {
      uint64_t v8 = (os_log_s *)OSLogHandleForIMFoundationCategory("Delivery");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        id v9 = @"NO";
        if (a4) {
          id v9 = @"YES";
        }
        int v11 = 138412546;
        __int16 v12 = v9;
        __int16 v13 = 1024;
        int v14 = a5;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_INFO,  "Got success %@ error %d in MessageDelivery block",  (uint8_t *)&v11,  0x12u);
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_42464(uint64_t a1, uint64_t a2)
{
  if (IMOSLoggingEnabled(a1, a2))
  {
    id v4 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDelivery");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v8 = v5;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_INFO, "Dequeing message payload block for people %@", buf, 0xCu);
    }
  }

  id result = [*(id *)(a1 + 40) sendMessageDictionary:*(void *)(a1 + 48) fromID:*(void *)(a1 + 56) fromAccount:*(void *)(a1 + 64) toURIs:*(void *)(a1 + 72) toGroup:*(void *)(a1 + 80) priority:*(void *)(a1 + 104) options:*(void *)(a1 + 88) completionBlock:*(void *)(a1 + 96)];
  if (a2) {
    return (id)(*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
  }
  return result;
}

void sub_42F1C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x429A0LL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_42FA4(uint64_t a1, uint64_t a2)
{
  if (IMOSLoggingEnabled(a1, a2))
  {
    id v4 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDelivery");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 56);
      v8[0] = 67109890;
      v8[1] = a2;
      __int16 v9 = 2112;
      uint64_t v10 = v5;
      __int16 v11 = 1024;
      int v12 = a2;
      __int16 v13 = 2112;
      uint64_t v14 = v6;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_INFO,  "Wrapped block got error: %d   guid: %@   error: %d   block: %@",  (uint8_t *)v8,  0x22u);
    }
  }

  uint64_t result = *(void *)(a1 + 56);
  if (result && ((_DWORD)a2 || *(_BYTE *)(a1 + 64))) {
    return (*(uint64_t (**)(uint64_t, void, void, BOOL, uint64_t, void))(result + 16))( result,  *(void *)(a1 + 40),  *(void *)(a1 + 48),  (_DWORD)a2 == 0,  a2,  0LL);
  }
  return result;
}

void sub_44104(void *a1, void *a2, const void *a3, uint64_t a4, const void *a5)
{
  theDict = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  -[NSDate timeIntervalSinceDate:](+[NSDate date](&OBJC_CLASS___NSDate, "date"), "timeIntervalSinceDate:", a1[4]);
  double v11 = v10;
  if (a3) {
    CFDictionarySetValue((CFMutableDictionaryRef)theDict, @"url", a3);
  }
  id v12 = [a2 domain];
  if (v12) {
    CFDictionarySetValue((CFMutableDictionaryRef)theDict, @"eD", v12);
  }
  __int16 v13 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [a2 code]);
  if (v13) {
    CFDictionarySetValue((CFMutableDictionaryRef)theDict, @"eC", v13);
  }
  uint64_t v14 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a4);
  if (v14) {
    CFDictionarySetValue((CFMutableDictionaryRef)theDict, @"fS", v14);
  }
  if (IMSendAdditionalMMCSErrorInfoToMadrid())
  {
    unint64_t v15 = llround(v11 * 1000.0);
    if (a5) {
      CFDictionarySetValue((CFMutableDictionaryRef)theDict, @"fRM", a5);
    }
    id v16 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v15);
    if (v16) {
      CFDictionarySetValue((CFMutableDictionaryRef)theDict, @"fTE", v16);
    }
  }

  [*(id *)(a1[5] + 40) sendServerMessage:theDict command:&off_DB570 fromAccount:a1[6]];
}

void sub_44904(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x44708LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_4498C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, unsigned int a5)
{
  int v8 = IMOSLoggingEnabled(a1, a2);
  if ((a4 & 1) != 0)
  {
    if (v8)
    {
      __int16 v9 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDeliveryController");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        LOWORD(v11) = 0;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_INFO,  "Send of backward compatible message edit successful",  (uint8_t *)&v11,  2u);
      }
    }
  }

  else
  {
    if (v8)
    {
      double v10 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDeliveryController");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        int v11 = 134217984;
        uint64_t v12 = a5;
        _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_INFO,  "Send of backward compatible message edit not successful, error %ld",  (uint8_t *)&v11,  0xCu);
      }
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = a5;
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

id sub_44AE4(uint64_t a1, uint64_t a2, void *a3)
{
  id result = [a3 count];
  if (result)
  {
    if (IMOSLoggingEnabled(result, v6))
    {
      uint64_t v7 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDeliveryController");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v21 = a3;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_INFO,  "Edit message command will not be received by all destinations. SkippedDestinations: %@",  buf,  0xCu);
      }
    }

    int v8 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    id v9 = [*(id *)(a1 + 32) _stripFZIDPrefix];
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    id v10 = [a3 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v16;
      do
      {
        for (i = 0LL; i != v10; i = (char *)i + 1)
        {
          if (*(void *)v16 != v11) {
            objc_enumerationMutation(a3);
          }
          uint64_t v13 = *(void *)(*((void *)&v15 + 1) + 8LL * (void)i);
          uint64_t v14 = (void *)IDSCopyRawAddressForDestination(v13);
        }

        id v10 = [a3 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }

      while (v10);
    }

    if (-[NSMutableArray count](v8, "count")) {
      (*(void (**)(void, id, void))(*(void *)(a1 + 104) + 16LL))( *(void *)(a1 + 104),  -[NSMutableArray copy](v8, "copy"),  *(void *)(a1 + 40));
    }

    id result = [*(id *)(a1 + 48) length];
    if (result)
    {
      dispatch_group_enter(*(dispatch_group_t *)(a1 + 56));
      return [*(id *)(a1 + 64) _sendBackwardCompatibilityMessageForEditedMessage:*(void *)(a1 + 72) usingMessageGUID:*(void *)(a1 + 40) toBackwardCompatabilityDestinations:a3 wi thOriginalDestinations:*(void *)(a1 + 80) chatIdentifier:*(void *)(a1 + 88) fromAccount:*(void *)(a1 + 96) fromID:*(void *)(a1 + 32) backwardCompatabilityText:*(void *)(a1 + 48) completionBlock:*(void *)(a1 + 112)];
    }
  }

  return result;
}

void sub_44D08(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  if ((a4 & 1) != 0)
  {
    if (IMOSLoggingEnabled(a1, a2))
    {
      uint64_t v6 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDeliveryController");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = *(void *)(a1 + 32);
        int v10 = 138412290;
        uint64_t v11 = v7;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_INFO,  "Send of message edit successful, editCommandGuid %@",  (uint8_t *)&v10,  0xCu);
      }
    }
  }

  else
  {
    id v9 = (os_log_s *)IMLogHandleForCategory("MessageDeliveryController");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_8FC80();
    }
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = a5;
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_44E2C(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
  {
    if (IMOSLoggingEnabled(a1, a2))
    {
      id v3 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDeliveryController");
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl(&dword_0, v3, OS_LOG_TYPE_INFO, "All sends of message edit commands completed succesfully", v6, 2u);
      }
    }
  }

  else
  {
    id v4 = (os_log_s *)IMLogHandleForCategory("MessageDeliveryController");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_8FCEC();
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_4511C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v13 = objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "session"), "groupController"),  "newGroupMessagePayloadForChat:fromID:",  a3,  a5);
  uint64_t v14 = *(void **)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 48);
  uint64_t v16 = *(void *)(a1 + 56);
  id v18 = [*(id *)(a1 + 64) replyToGUID];
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  void v22[2] = sub_4523C;
  v22[3] = &unk_D6720;
  uint64_t v19 = *(void *)(a1 + 80);
  v22[4] = *(void *)(a1 + 48);
  v22[5] = v19;
  LOBYTE(v20) = 0;
  [v14 _sendMessage:a4 context:a7 deliveryContext:v13 fromID:a5 fromAccount:a6 toID:0 chatIdentifier:v15 toSessionToken:0 toGroup:a8 toParticipants:v17 or iginallyToParticipants:v16 requiredRegProperties:0 interestingRegProperties:0 requiresLackOfRegProperties:0 canInlineAttachmen ts:v20 type:1 msgPayloadUploadDictionary:0 originalPayload:0 replyToMessageGUID:v18 willSendBlock:0 completionBlock:v22];
}

uint64_t sub_4523C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5)
{
  int v10 = IMOSLoggingEnabled(a1, a2);
  if (a4)
  {
    if (v10)
    {
      uint64_t v11 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDeliveryController");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        int v19 = 138412290;
        uint64_t v20 = v12;
        id v13 = "Succesfully sent backward compatible edit message text to destinations: %@";
        uint64_t v14 = v11;
        uint32_t v15 = 12;
LABEL_8:
        _os_log_impl(&dword_0, v14, OS_LOG_TYPE_INFO, v13, (uint8_t *)&v19, v15);
      }
    }
  }

  else if (v10)
  {
    uint64_t v16 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDeliveryController");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = *(void *)(a1 + 32);
      int v19 = 134218242;
      uint64_t v20 = a5;
      __int16 v21 = 2112;
      uint64_t v22 = v17;
      id v13 = "Failed sending backward compatability edit message text. Error: %ld, Destinations: %@";
      uint64_t v14 = v16;
      uint32_t v15 = 22;
      goto LABEL_8;
    }
  }

  return (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  a2,  a3);
}

void sub_45880(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x456E8LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_45930(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, char a6)
{
  if ((a4 & 1) != 0)
  {
    if (IMOSLoggingEnabled(a1, a2))
    {
      int v8 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDeliveryController");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        int v12 = 138412290;
        uint64_t v13 = v9;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_INFO,  "Send of sticker reposition successful, editCommandGuid %@",  (uint8_t *)&v12,  0xCu);
      }
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = a6;
  }

  else
  {
    uint64_t v11 = (os_log_s *)IMLogHandleForCategory("MessageDeliveryController");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_8FD4C();
    }
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = a6;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = a5;
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_45A70(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
  {
    if (IMOSLoggingEnabled(a1, a2))
    {
      id v3 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDeliveryController");
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl(&dword_0, v3, OS_LOG_TYPE_INFO, "All sends of message edit commands completed succesfully", v6, 2u);
      }
    }
  }

  else
  {
    id v4 = (os_log_s *)IMLogHandleForCategory("MessageDeliveryController");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_8FCEC();
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_46804(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *exc_buf)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x467A4LL);
  }

  JUMPOUT(0x46850LL);
}

void sub_46824()
{
}

void sub_4683C()
{
}

void sub_468F4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40)
    && -[NSFileManager fileExistsAtPath:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "fileExistsAtPath:",  *(void *)(a1 + 32)))
  {
    uint64_t v13 = 0LL;
    BOOL v2 = -[NSFileManager removeItemAtPath:error:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "removeItemAtPath:error:",  *(void *)(a1 + 32),  &v13);
    BOOL v3 = v2;
    int v5 = IMOSLoggingEnabled(v2, v4);
    if (v3)
    {
      if (v5)
      {
        uint64_t v6 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDeliveryController");
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          uint64_t v7 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 138412290;
          uint64_t v15 = v7;
          int v8 = "Succeeded deleting file at path %@";
          uint64_t v9 = v6;
          uint32_t v10 = 12;
LABEL_10:
          _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, v8, buf, v10);
        }
      }
    }

    else if (v5)
    {
      uint64_t v11 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDeliveryController");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        uint64_t v15 = v12;
        __int16 v16 = 2112;
        uint64_t v17 = v13;
        int v8 = "Deleting file at path %@ failed with error %@";
        uint64_t v9 = v11;
        uint32_t v10 = 22;
        goto LABEL_10;
      }
    }
  }

uint64_t sub_46A64( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, const void *a6, void *a7, const void *a8, void *a9, uint64_t a10)
{
  id v16 = -[IMDFileTransferCenter transferForGUID:]( +[IMDFileTransferCenter sharedInstance](&OBJC_CLASS___IMDFileTransferCenter, "sharedInstance"),  "transferForGUID:",  *(void *)(a1 + 32));
  int v18 = IMOSLoggingEnabled(v16, v17);
  if ((a3 & 1) != 0)
  {
    if (v18)
    {
      int v19 = (os_log_s *)OSLogHandleForIMEventCategory("MessageDeliveryController");
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        int v28 = 138412802;
        id v29 = v16;
        __int16 v30 = 2112;
        uint64_t v31 = @"YES";
        __int16 v32 = 2112;
        uint64_t v33 = a4;
        _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_INFO,  "SendLogDump: Success - Finished uploading transfer: %@   success: %@  error: %@",  (uint8_t *)&v28,  0x20u);
      }
    }

    uint64_t v20 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  5LL);
    id v21 = objc_msgSend(a7, "__imHexString");
    if (v21) {
      CFDictionarySetValue((CFMutableDictionaryRef)v20, @"mmcs-signature-hex", v21);
    }
    if (a6) {
      CFDictionarySetValue((CFMutableDictionaryRef)v20, @"mmcs-owner", a6);
    }
    if (a8) {
      CFDictionarySetValue((CFMutableDictionaryRef)v20, @"mmcs-url", a8);
    }
    id v22 = objc_msgSend(a9, "__imHexString", v21);
    if (v22) {
      CFDictionarySetValue((CFMutableDictionaryRef)v20, @"decryption-key", v22);
    }
    uint64_t v23 = -[NSNumber stringValue]( +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a10),  "stringValue");
    if (v23) {
      CFDictionarySetValue((CFMutableDictionaryRef)v20, @"file-size", v23);
    }
    [v16 setUserInfo:v20];

    [*(id *)(a1 + 40) _sendIDSMessageWithTransferGUID:*(void *)(a1 + 32) andTransfer:v16 fromAccount:*(void *)(a1 + 48) fromID:*(void *)(a1 + 56) toRecipient:*(void *)(a1 + 64) withCompletion:*(void *)(a1 + 72)];
  }

  else
  {
    if (v18)
    {
      uint64_t v24 = (os_log_s *)OSLogHandleForIMEventCategory("MessageDeliveryController");
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        int v28 = 138412802;
        id v29 = v16;
        __int16 v30 = 2112;
        uint64_t v31 = @"NO";
        __int16 v32 = 2112;
        uint64_t v33 = a4;
        _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_INFO,  "SendLogDump: Failed uploading transfer: %@   success: %@  error: %@",  (uint8_t *)&v28,  0x20u);
      }
    }

    uint64_t v25 = *(void *)(a1 + 72);
    if (v25) {
      (*(void (**)(uint64_t, void))(v25 + 16))(v25, 0LL);
    }
  }

  uint64_t v26 = *(void *)(*(void *)(a1 + 88) + 8LL);
  if (!*(_BYTE *)(v26 + 24)) {
    *(_BYTE *)(v26 + 24) = 1;
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 80) + 16LL))();
}

void sub_46DDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = IMOSLoggingEnabled(a1, a2);
  if ((_DWORD)v3)
  {
    int v5 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDeliveryController");
    uint64_t v3 = os_log_type_enabled(v5, OS_LOG_TYPE_INFO);
    if ((_DWORD)v3)
    {
      if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) {
        uint64_t v6 = @"YES";
      }
      else {
        uint64_t v6 = @"NO";
      }
      int v8 = 138412290;
      uint64_t v9 = v6;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_INFO,  "SendLogDump: We hit our log dump time out and did we finish ? %@",  (uint8_t *)&v8,  0xCu);
    }
  }

  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    if (IMOSLoggingEnabled(v3, v4))
    {
      uint64_t v7 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDeliveryController");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        LOWORD(v8) = 0;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_INFO,  "SendLogDump: We failed to upload the sysdiagnose within 15 minutes, we are cancelling the upload",  (uint8_t *)&v8,  2u);
      }
    }

    -[IMTransferServicesController cancelSendTransferID:]( +[IMTransferServicesController sharedInstance](&OBJC_CLASS___IMTransferServicesController, "sharedInstance"),  "cancelSendTransferID:",  *(void *)(a1 + 32));
  }

void sub_4762C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x4742CLL);
  }

  _Unwind_Resume(a1);
}

void sub_47B04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

id sub_47B4C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) transferForGUID:a2];
}

NSString *__cdecl sub_47B58(id a1, IMFileTransfer *a2)
{
  return (NSString *)@"";
}

void sub_47B64(uint64_t a1, uint64_t a2)
{
}

void sub_47B74(uint64_t a1)
{
}

id sub_47B80(uint64_t a1, void *a2)
{
  id v3 = [a2 messagePartBody];
  unsigned int v4 = objc_msgSend( v3,  "__im_isOnlyAdaptiveImageGlyphFileTransfersAndWhitespaceUsingFileTransferProvider:",  *(void *)(a1 + 40));
  id v9 = 0LL;
  if (v4)
  {
    id v5 = objc_msgSend(objc_msgSend(v3, "__im_transferGUIDsInAttributedString"), "array");
    id v9 = v5;
  }

  else
  {
    id v6 = objc_msgSend( v3,  "__im_attributedStringByReplacingAdaptiveImageGlyphFileTransfersUsingFileTransferProvider:replacementTextProvi der:removedTransferGUIDsOut:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  &v9);
    id v7 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) mutableCopy];
    [v7 appendAttributedString:v6];
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = [v7 copy];

    id v5 = v9;
  }

  id result = [v5 count];
  if (result) {
    return [*(id *)(a1 + 32) addObjectsFromArray:v9];
  }
  return result;
}

NSData *_PayloadDataWithExtensionPayloadDataFromAttachmentForOutgoingMessage(void *a1)
{
  id v2 = objc_msgSend(objc_msgSend(a1, "payloadData"), "length");
  if (!v2) {
    return 0LL;
  }
  if (IMOSLoggingEnabled(v2, v3))
  {
    unsigned int v4 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDeliveryController");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v32 = a1;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_INFO,  "Request to _PayloadDataWithExtensionPayloadDataFromAttachmentForOutgoingMessage: %@",  buf,  0xCu);
    }
  }

  uint64_t v5 = IMExtensionPayloadUnarchivingClasses();
  id v29 = 0LL;
  id v6 = -[NSKeyedUnarchiver initForReadingFromData:error:]( [NSKeyedUnarchiver alloc],  "initForReadingFromData:error:",  [a1 payloadData],  &v29);
  id v7 = -[NSKeyedUnarchiver decodeObjectOfClasses:forKey:]( v6,  "decodeObjectOfClasses:forKey:",  v5,  NSKeyedArchiveRootObjectKey);
  id v9 = v7;
  if (v29)
  {
    if (IMOSLoggingEnabled(v7, v8))
    {
      uint32_t v10 = (os_log_s *)OSLogHandleForIMFoundationCategory("Warning");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v32 = v29;
        _os_log_impl(&dword_0, v10, OS_LOG_TYPE_INFO, "Failed to unarchive payload. Error: %@", buf, 0xCu);
      }
    }
  }

  uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  if ((objc_opt_isKindOfClass(v9, v11) & 1) != 0)
  {
    uint64_t v24 = IMExtensionPayloadDataKey;
    if (!objc_msgSend(v9, "objectForKey:"))
    {
      __int128 v27 = 0u;
      __int128 v28 = 0u;
      __int128 v25 = 0u;
      __int128 v26 = 0u;
      id v14 = [a1 fileTransferGUIDs];
      id v15 = [v14 countByEnumeratingWithState:&v25 objects:v30 count:16];
      if (v15)
      {
        uint64_t v16 = *(void *)v26;
        uint64_t v17 = IMFileTransferPluginPayloadAttachmentExtension;
LABEL_18:
        uint64_t v18 = 0LL;
        while (1)
        {
          if (*(void *)v26 != v16) {
            objc_enumerationMutation(v14);
          }
          id v19 = objc_msgSend( -[IMDFileTransferCenter transferForGUID:]( +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance"),  "transferForGUID:",  *(void *)(*((void *)&v25 + 1) + 8 * v18)),  "localURL");
          if (v15 == (id)++v18)
          {
            id v15 = [v14 countByEnumeratingWithState:&v25 objects:v30 count:16];
            uint64_t v12 = 0LL;
            if (v15) {
              goto LABEL_18;
            }
            goto LABEL_13;
          }
        }

        uint64_t v20 = +[NSData dataWithContentsOfURL:](&OBJC_CLASS___NSData, "dataWithContentsOfURL:", v19);
        if (IMOSLoggingEnabled(v20, v21))
        {
          id v22 = (os_log_s *)OSLogHandleForIMFoundationCategory("MessageDeliveryController");
          if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            id v32 = v19;
            _os_log_impl(&dword_0, v22, OS_LOG_TYPE_INFO, "Read extension payload data from path: %@", buf, 0xCu);
          }
        }

        if (v20)
        {
          id v23 = [v9 mutableCopy];
          [v23 setObject:v20 forKey:v24];
          [v23 removeObjectForKey:IMExtensionPayloadDataFilePathKey];
          uint64_t v12 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v23,  0LL,  0LL);
          [a1 setPayloadData:v12];

          goto LABEL_13;
        }
      }
    }
  }

  uint64_t v12 = 0LL;
LABEL_13:

  return v12;
}

void sub_4842C(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

  ;
}

  ;
}

void sub_48474(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

id sub_48F6C(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 balloonBundleID]);
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) balloonBundleID]);
  id v5 = [v3 isEqualToString:v4];

  return v5;
}

uint64_t sub_49438(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

LABEL_16:
}

int64_t sub_4B6F4(id a1, NSDictionary *a2, NSDictionary *a3)
{
  unsigned int v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", @"file-size"));
  id v6 = [v5 unsignedLongLongValue];

  id v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v4, "objectForKeyedSubscript:", @"file-size"));
  id v8 = [v7 unsignedLongLongValue];

  if (v6 < v8) {
    return -1LL;
  }
  else {
    return v6 > v8;
  }
}

void sub_4B77C(uint64_t a1, void *a2, uint64_t a3)
{
  id v19 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:@"file-size"]);
  id v6 = [v5 unsignedLongLongValue];

  if (a3)
  {
    id v7 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"-%d", a3));
  }

  else
  {
    if (!*(_BYTE *)(a1 + 48) && *(_BYTE *)(a1 + 49) && !*(_BYTE *)(a1 + 50)) {
      id v6 = +[IMDAttachmentUtilities mmcsTargetReportSizeForHighQualityPhotoSize:commonCapabilities:]( &OBJC_CLASS___IMDAttachmentUtilities,  "mmcsTargetReportSizeForHighQualityPhotoSize:commonCapabilities:",  v6,  *(void *)(a1 + 32));
    }
    id v7 = &stru_D8640;
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue([@"mmcs-signature-hex" stringByAppendingString:v7]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([@"mmcs-owner" stringByAppendingString:v7]);
  uint32_t v10 = (void *)objc_claimAutoreleasedReturnValue([@"mmcs-url" stringByAppendingString:v7]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([@"decryption-key" stringByAppendingString:v7]);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([@"file-size" stringByAppendingString:v7]);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:@"mmcs-signature-hex"]);
  if (v13) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v8, v13);
  }

  id v14 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:@"mmcs-owner"]);
  if (v14) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v9, v14);
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:@"mmcs-url"]);
  if (v15) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v10, v15);
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:@"decryption-key"]);
  if (v16) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v11, v16);
  }

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v6));
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 stringValue]);

  if (v18) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v12, v18);
  }
}

void sub_4BD10(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  double v7 = *(double *)(a1 + 40);
  [v6 expiration];
  if (v7 > v8)
  {
    [*(id *)(a1 + 32) addObject:v5];
    if (![v6 useCount])
    {
      if ([v6 isSuccess])
      {
        uint64_t v9 = _iMessageTelemetryLogHandle();
        uint32_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
        unsigned __int8 v11 = os_signpost_id_make_with_pointer(v10, v6);
        uint64_t v12 = v10;
        uint64_t v13 = v12;
        if (v11 && os_signpost_enabled(v12))
        {
          *(_WORD *)id v14 = 0;
          _os_signpost_emit_with_name_impl( &dword_0,  v13,  OS_SIGNPOST_EVENT,  v11,  "MessageAttachment.eager.notUsed",  " enableTelemetry=YES ",  v14,  2u);
        }
      }
    }
  }
}

void sub_4BEC8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  double v7 = (void *)objc_claimAutoreleasedReturnValue([v6 originalURL]);
  unsigned int v8 = [v7 isEqual:*(void *)(a1 + 32)];

  if (v8)
  {
    uint64_t v9 = (char *)[v6 state];
    id v10 = [v6 cancel];
    int v11 = (int)v10;
    int v13 = IMOSLoggingEnabled(v10, v12);
    if (v11)
    {
      if (v13)
      {
        uint64_t v14 = OSLogHandleForIMFoundationCategory("Attachments");
        id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          int v29 = 138412290;
          id v30 = v6;
          _os_log_impl(&dword_0, v15, OS_LOG_TYPE_INFO, "EAGER setting cancel %@", (uint8_t *)&v29, 0xCu);
        }
      }

      uint64_t v16 = _iMessageTelemetryLogHandle();
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      unsigned __int8 v18 = os_signpost_id_make_with_pointer(v17, v6);
      id v19 = v17;
      uint64_t v20 = v19;
      if (v18 && os_signpost_enabled(v19))
      {
        LOWORD(v29) = 0;
        _os_signpost_emit_with_name_impl( &dword_0,  v20,  OS_SIGNPOST_EVENT,  v18,  "MessageAttachment.eager.cancel",  " enableTelemetry=YES ",  (uint8_t *)&v29,  2u);
      }

      if (v9 == (_BYTE *)&dword_0 + 2)
      {
        if (IMOSLoggingEnabled(v21, v22))
        {
          uint64_t v23 = OSLogHandleForIMFoundationCategory("Attachments");
          uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            int v29 = 138412290;
            id v30 = v6;
            _os_log_impl(&dword_0, v24, OS_LOG_TYPE_INFO, "EAGER request send cancel %@", (uint8_t *)&v29, 0xCu);
          }
        }

        __int128 v25 = (void *)objc_claimAutoreleasedReturnValue( +[IMTransferServicesController sharedInstance]( &OBJC_CLASS___IMTransferServicesController,  "sharedInstance"));
        __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([v6 transferId]);
        [v25 cancelSendTransferID:v26];
      }

      [*(id *)(a1 + 40) addObject:v5];
    }

    else if (v13)
    {
      uint64_t v27 = OSLogHandleForIMFoundationCategory("Attachments");
      __int128 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        int v29 = 138412290;
        id v30 = v6;
        _os_log_impl(&dword_0, v28, OS_LOG_TYPE_INFO, "EAGER cancel failed %@", (uint8_t *)&v29, 0xCu);
      }
    }
  }
}

uint64_t sub_4C558(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_4C568(uint64_t a1)
{
}

void sub_4C570(uint64_t a1, void *a2)
{
  id v65 = a2;
  unsigned int v4 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) transcoderUserInfo]);
  uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue( [v4 eagerUploadKeyForURL:v65 sizes:v3 transcodeDictionary:v5 capabilities:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)]);

  unsigned int v8 = v64;
  if (v64)
  {
    uint64_t v9 = (MessageAttachmentEagerUploadStatus *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) eagerUploadStatusForKey:v64]);
    id v10 = v9;
    if (!v9) {
      goto LABEL_20;
    }
    int64_t v11 = -[MessageAttachmentEagerUploadStatus targetSize](v9, "targetSize");
    if (v11 < *(void *)(a1 + 80))
    {
      if (IMOSLoggingEnabled(v11, v12))
      {
        uint64_t v13 = OSLogHandleForIMFoundationCategory("Attachments");
        uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_0, v14, OS_LOG_TYPE_INFO, "EAGER reupload: previous is too small", buf, 2u);
        }
      }

      -[MessageAttachmentEagerUploadStatus cancel](v10, "cancel");

      id v10 = 0LL;
      goto LABEL_20;
    }

    if (-[MessageAttachmentEagerUploadStatus isComplete](v10, "isComplete")
      && !-[MessageAttachmentEagerUploadStatus isSuccess](v10, "isSuccess"))
    {
LABEL_20:
      uint64_t v23 = objc_alloc(&OBJC_CLASS___MessageAttachmentEagerUploadStatus);
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) localURL]);
      __int128 v25 = -[MessageAttachmentEagerUploadStatus initWithOriginalURL:transferId:targetSize:]( v23,  "initWithOriginalURL:transferId:targetSize:",  v24,  v64,  *(void *)(a1 + 80));

      id v26 = [*(id *)(*(void *)(a1 + 32) + 32) setObject:v25 forKeyedSubscript:v64];
      if (IMOSLoggingEnabled(v26, v27))
      {
        uint64_t v28 = OSLogHandleForIMFoundationCategory("Attachments");
        int v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v82 = v25;
          _os_log_impl(&dword_0, v29, OS_LOG_TYPE_INFO, "EAGER start: %@", buf, 0xCu);
        }
      }

      -[MessageAttachmentEagerUploadStatus start](v25, "start");
      id v30 = objc_alloc_init(&OBJC_CLASS___MessageAttachmentOverallStatus);
      -[MessageAttachmentOverallStatus setError:](v30, "setError:", 0LL);
      -[MessageAttachmentOverallStatus setFailed:](v30, "setFailed:", 0LL);
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v65 pathExtension]);
      if (![v31 length])
      {
        id v32 = (void *)objc_claimAutoreleasedReturnValue(+[IMFileManager defaultHFSFileManager](&OBJC_CLASS___IMFileManager, "defaultHFSFileManager"));
        uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) type]);
        uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v32 pathExtensionForUTIType:v33]);

        if ([v34 length])
        {
          __int128 v35 = v34;
        }

        else
        {
          __int128 v37 = (void *)objc_claimAutoreleasedReturnValue(+[IMFileManager defaultHFSFileManager](&OBJC_CLASS___IMFileManager, "defaultHFSFileManager"));
          __int128 v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) mimeType]);
          uint64_t v39 = objc_claimAutoreleasedReturnValue([v37 pathExtensionForMIMEType:v38]);

          __int128 v35 = (void *)v39;
        }

        uint64_t v40 = v35;
        if ([v35 length])
        {
          uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v65 absoluteString]);
          __int16 v42 = (void *)objc_claimAutoreleasedReturnValue([v41 stringByDeletingPathExtension]);

          uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v42 stringByAppendingPathExtension:v40]);
          __int16 v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "__im_apfsCompatibleFilename"));

          if ([v44 length])
          {
            uint64_t v45 = objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v44));

            id v65 = (id)v45;
          }
        }

        uint64_t v31 = v40;
      }

      uint64_t v63 = v31;
      if (v65)
      {
        __int16 v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
        uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "im_generateCopyForURL:", v65));
      }

      else
      {
        uint64_t v47 = 0LL;
      }

      dispatch_group_t v48 = dispatch_group_create();
      __int128 v49 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      v72[0] = _NSConcreteStackBlock;
      v72[1] = 3221225472LL;
      v72[2] = sub_4CCFC;
      v72[3] = &unk_D69D0;
      __int128 v50 = v25;
      uint64_t v51 = *(void *)(a1 + 32);
      uint64_t v73 = v50;
      uint64_t v74 = v51;
      id v75 = *(id *)(a1 + 56);
      id v76 = *(id *)(a1 + 64);
      id v77 = v64;
      __int128 v52 = v49;
      id v78 = v52;
      __int128 v53 = v30;
      uint64_t v79 = v53;
      dispatch_group_t v80 = v48;
      __int128 v54 = v48;
      __int128 v55 = objc_retainBlock(v72);
      -[MessageAttachmentEagerUploadStatus setState:](v50, "setState:", 1LL);
      __int128 v56 = *(void **)(a1 + 32);
      if (v47) {
        id v57 = v47;
      }
      else {
        id v57 = v65;
      }
      uint64_t v59 = *(void *)(a1 + 48);
      uint64_t v58 = a1 + 48;
      [v56 _transcodeURL:v57 reason:1 transfer:v59 sizes:*(void *)(v58 - 8) commonCapabilities:*(void *)(*(void *)(*(void *)(v58 + 24) + 8) + 40) sendStatus:v53 urlGroup:v54 didTranscode:0 handleURL:v55];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_4CEF8;
      block[3] = &unk_D5910;
      id v10 = v50;
      id v67 = v10;
      id v68 = v47;
      uint64_t v69 = v53;
      uint64_t v70 = v52;
      id v71 = *(id *)v58;
      __int128 v60 = v52;
      __int128 v61 = v53;
      id v62 = v47;
      dispatch_group_notify(v54, &_dispatch_main_q, block);

      goto LABEL_44;
    }

    BOOL v17 = -[MessageAttachmentEagerUploadStatus isComplete](v10, "isComplete");
    BOOL v18 = v17;
    int v20 = IMOSLoggingEnabled(v17, v19);
    if (v18)
    {
      if (!v20)
      {
LABEL_44:

LABEL_45:
        unsigned int v8 = v64;
        goto LABEL_46;
      }

      uint64_t v21 = OSLogHandleForIMFoundationCategory("Attachments");
      uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v82 = v10;
        _os_log_impl(&dword_0, v22, OS_LOG_TYPE_INFO, "EAGER already uploaded: %@", buf, 0xCu);
      }
    }

    else
    {
      if (!v20) {
        goto LABEL_44;
      }
      uint64_t v36 = OSLogHandleForIMFoundationCategory("Attachments");
      uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v82 = v10;
        _os_log_impl(&dword_0, v22, OS_LOG_TYPE_INFO, "EAGER in progress: %@", buf, 0xCu);
      }
    }

    goto LABEL_44;
  }

  if (IMOSLoggingEnabled(v6, v7))
  {
    uint64_t v15 = OSLogHandleForIMFoundationCategory("Attachments");
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_0, v16, OS_LOG_TYPE_INFO, "EAGER skip: no key", buf, 2u);
    }

    goto LABEL_45;
  }

LABEL_46:
}

void sub_4CCFC(uint64_t a1, void *a2, void *a3, char a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = [*(id *)(a1 + 32) isCanceled];
  if ((_DWORD)v9)
  {
    if (IMOSLoggingEnabled(v9, v10))
    {
      uint64_t v11 = OSLogHandleForIMFoundationCategory("Attachments");
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        uint64_t v13 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        uint64_t v29 = v13;
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "EAGER cancel before send: %@", buf, 0xCu);
      }
    }
  }

  else
  {
    char v27 = a4;
    id v14 = [*(id *)(a1 + 32) setState:2];
    if (IMOSLoggingEnabled(v14, v15))
    {
      uint64_t v16 = OSLogHandleForIMFoundationCategory("Attachments");
      BOOL v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        uint64_t v18 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        uint64_t v29 = v18;
        _os_log_impl(&dword_0, v17, OS_LOG_TYPE_INFO, "EAGER upload: %@", buf, 0xCu);
      }
    }

    uint64_t v20 = *(void *)(a1 + 48);
    uint64_t v19 = *(void *)(a1 + 56);
    uint64_t v21 = *(void *)(a1 + 64);
    uint64_t v22 = *(void *)(a1 + 72);
    uint64_t v23 = *(void *)(a1 + 80);
    uint64_t v24 = *(void **)(a1 + 40);
    __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) attachmentStatus]);
    LOBYTE(v26) = v27;
    [v24 _sendURL:v7 urlToRemove:v8 topic:v20 sessionInfo:0 messageGUID:v19 transferID:v21 fileTransferGUID:v21 attachmentSendContexts:v22 failIfError:v26  sendStatus:v23 attachmentStatus:v25 group:*(void *)(a1 + 88)];
  }
}

void sub_4CEF8(uint64_t a1, uint64_t a2)
{
  if (IMOSLoggingEnabled(a1, a2))
  {
    uint64_t v3 = OSLogHandleForIMFoundationCategory("Attachments");
    unsigned int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v36 = v5;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_INFO, "EAGER complete: %@", buf, 0xCu);
    }
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  uint64_t v7 = *(void *)(a1 + 40);
  id v34 = 0LL;
  [v6 removeItemAtURL:v7 error:&v34];
  id v8 = v34;

  unsigned __int8 v9 = [*(id *)(a1 + 48) failed];
  uint64_t v10 = *(void **)(a1 + 32);
  if ((v9 & 1) != 0)
  {
    id v11 = [v10 isCanceled];
    if (IMOSLoggingEnabled(v11, v12))
    {
      uint64_t v13 = OSLogHandleForIMFoundationCategory("MMCS");
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        uint64_t v15 = *(void *)(a1 + 64);
        *(_DWORD *)buf = 138412290;
        uint64_t v36 = v15;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_INFO,  "EAGER NOT setting userInfo: transfer %@ did not complete successfully.",  buf,  0xCu);
      }
    }

    uint64_t v16 = _iMessageTelemetryLogHandle();
    BOOL v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    unsigned __int8 v18 = os_signpost_id_make_with_pointer(v17, *(const void **)(a1 + 32));
    uint64_t v19 = v17;
    uint64_t v20 = v19;
    if (v18 && os_signpost_enabled(v19))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl( &dword_0,  v20,  OS_SIGNPOST_EVENT,  v18,  "MessageAttachment.eager.uploadFail",  " enableTelemetry=YES ",  buf,  2u);
    }
  }

  else
  {
    [v10 setState:5];
    uint64_t v21 = *(void **)(a1 + 56);
    uint64_t v29 = _NSConcreteStackBlock;
    uint64_t v30 = 3221225472LL;
    uint64_t v31 = sub_4D224;
    id v32 = &unk_D69F8;
    uint64_t v33 = (os_log_s *)*(id *)(a1 + 32);
    [v21 enumerateObjectsUsingBlock:&v29];
    objc_msgSend(*(id *)(a1 + 32), "setAttachmentSendContexts:", *(void *)(a1 + 56), v29, v30, v31, v32);
    uint64_t v22 = *(void **)(a1 + 32);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) transferredFilename]);
    [v22 setTransferredName:v23];

    uint64_t v24 = _iMessageTelemetryLogHandle();
    __int128 v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    unsigned __int8 v26 = os_signpost_id_make_with_pointer(v25, *(const void **)(a1 + 32));
    char v27 = v25;
    uint64_t v28 = v27;
    if (v26 && os_signpost_enabled(v27))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl( &dword_0,  v28,  OS_SIGNPOST_EVENT,  v26,  "MessageAttachment.eager.upload",  " enableTelemetry=YES ",  buf,  2u);
    }

    uint64_t v20 = v33;
  }

  [*(id *)(a1 + 32) finish];
}

id sub_4D224(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKeyedSubscript:@"file-size"]);
  unsigned int v4 = (char *)[v3 unsignedLongLongValue];

  return _objc_msgSend(*(id *)(a1 + 32), "setTotalBytes:", &v4[(void)objc_msgSend(*(id *)(a1 + 32), "totalBytes")]);
}

void sub_4D280(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (IMOSLoggingEnabled(v4, v5))
  {
    uint64_t v6 = OSLogHandleForIMFoundationCategory("Attachments");
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      id v19 = v4;
      __int16 v20 = 2112;
      id v21 = v8;
      _os_log_impl(&dword_0, v7, OS_LOG_TYPE_INFO, "EAGER Found Common Capabilities: %@ from recipients %@", buf, 0x16u);
    }
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), a2);
  unsigned __int8 v9 = objc_alloc_init(&OBJC_CLASS___NSFileCoordinator);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localURL]);
  id v17 = 0LL;
  -[NSFileCoordinator coordinateReadingItemAtURL:options:error:byAccessor:]( v9,  "coordinateReadingItemAtURL:options:error:byAccessor:",  v10,  0LL,  &v17,  *(void *)(a1 + 48));
  id v11 = v17;

  if (v11 && IMOSLoggingEnabled(v12, v13))
  {
    uint64_t v14 = OSLogHandleForIMFoundationCategory("Attachments");
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localURL]);
      *(_DWORD *)buf = 138412546;
      id v19 = v16;
      __int16 v20 = 2112;
      id v21 = v11;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_INFO,  "EAGER Failed coordinated read of url for fast upload: %@  (Error: %@)",  buf,  0x16u);
    }
  }
}

void sub_4D8B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, char a46)
{
}

uint64_t sub_4D8E8(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void, void, uint64_t))(a1[6] + 16LL))( a1[6],  a1[4],  a1[5],  0LL,  0LL,  3LL);
}

void sub_4D908(uint64_t a1, void *a2)
{
  id v3 = a2;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  void v21[2] = sub_4DAC8;
  v21[3] = &unk_D6A98;
  uint64_t v23 = *(void *)(a1 + 104);
  id v22 = *(id *)(a1 + 88);
  id v4 = objc_retainBlock(v21);
  unsigned int v5 = [*(id *)(a1 + 32) isEqualToString:IDSServiceNameiMessageForBusiness];
  uint64_t v6 = *(void **)(a1 + 40);
  if (v5)
  {
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_4DB64;
    v11[3] = &unk_D6AC0;
    v11[4] = v6;
    id v12 = *(id *)(a1 + 64);
    char v20 = *(_BYTE *)(a1 + 120);
    id v13 = *(id *)(a1 + 72);
    id v14 = *(id *)(a1 + 80);
    id v9 = v3;
    uint64_t v10 = *(void *)(a1 + 112);
    id v15 = v9;
    uint64_t v19 = v10;
    id v16 = *(id *)(a1 + 32);
    id v17 = v4;
    id v18 = *(id *)(a1 + 96);
    [v6 sessionInfoForBusinessReceipients:v7 fromID:v8 completion:v11];
  }

  else
  {
    [v6 sendAttachmentsForMessage:*(void *)(a1 + 64) canSendInline:*(unsigned __int8 *)(a1 + 120) displayIDs:*(void *)(a1 + 72) additionalContext:*(void *)(a1 + 80) commonCapabilities:v3 mode:*(void *)(a1 + 112) sessionInfo:0 topic:*(void *)(a1 + 32) com pletionBlock:v4 uploadFailureBlock:*(void *)(a1 + 96)];
  }
}

void sub_4DAC8(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v14 = a2;
  id v11 = a3;
  id v12 = a4;
  os_activity_scope_leave((os_activity_scope_state_t)(*(void *)(*(void *)(a1 + 40) + 8LL) + 32LL));
  uint64_t v13 = *(void *)(a1 + 32);
  if (v13) {
    (*(void (**)(uint64_t, id, id, id, uint64_t, uint64_t))(v13 + 16))(v13, v14, v11, v12, a5, a6);
  }
}

id sub_4DB64(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) sendAttachmentsForMessage:*(void *)(a1 + 40) canSendInline:*(unsigned __int8 *)(a1 + 104) displayIDs:*(void *)(a1 + 48) additionalContext:*(void *)(a1 + 56) commonCapabilities:*(void *)(a1 + 64) mode:*(void *)(a1 + 96) sessionInfo:a2 topi c:*(void *)(a1 + 72) completionBlock:*(void *)(a1 + 80) uploadFailureBlock:*(void *)(a1 + 88)];
}

void sub_4F098(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) userInfo]);
    CFMutableDictionaryRef Mutable = (__CFDictionary *)[v2 mutableCopy];

    if (!Mutable) {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@%d",  @"ia-",  *(void *)(a1 + 96)));
    if (v4) {
      CFDictionarySetValue(Mutable, @"inline-attachment", v4);
    }
    [*(id *)(a1 + 40) setUserInfo:Mutable];
    [*(id *)(a1 + 40) setMessageGUID:*(void *)(a1 + 48)];
    id v5 = [*(id *)(a1 + 32) length];
    [*(id *)(a1 + 56) updateTransfer:*(void *)(a1 + 64) currentBytes:v5 totalBytes:v5];
    id v6 = [*(id *)(a1 + 56) endTransfer:*(void *)(a1 + 64)];
    uint64_t v8 = *(const void **)(a1 + 32);
    if (v8) {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 72), v4, v8);
    }
    if (IMOSLoggingEnabled(v6, v7))
    {
      uint64_t v9 = OSLogHandleForIMFoundationCategory("Attachments");
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = *(void *)(a1 + 64);
        id v12 = [*(id *)(a1 + 32) length];
        *(_DWORD *)buf = 138412546;
        uint64_t v14 = v11;
        __int16 v15 = 2048;
        id v16 = v12;
        _os_log_impl(&dword_0, v10, OS_LOG_TYPE_INFO, "Inlined transfer %@ with %lu bytes.", buf, 0x16u);
      }
    }
  }

  else
  {
    [*(id *)(a1 + 56) failTransfer:*(void *)(a1 + 64) reason:8];
    [*(id *)(a1 + 80) setFailed:1];
    [*(id *)(a1 + 80) setError:34];
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 88));
}

void sub_4F298(uint64_t a1, uint64_t a2)
{
  if (IMOSLoggingEnabled(a1, a2))
  {
    uint64_t v3 = OSLogHandleForIMFoundationCategory("Attachments");
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      unsigned int v6 = [*(id *)(a1 + 40) failed];
      uint64_t v7 = @"YES";
      if (v6) {
        uint64_t v7 = @"NO";
      }
      int v9 = 138412546;
      uint64_t v10 = v5;
      __int16 v11 = 2112;
      id v12 = v7;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_INFO,  "  All done inline transfer set for: %@   success: %@",  (uint8_t *)&v9,  0x16u);
    }
  }

  uint64_t v8 = *(void *)(a1 + 72);
  if (v8) {
    (*(void (**)(uint64_t, void, void, void, void, id))(v8 + 16))( v8,  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  [*(id *)(a1 + 40) failed] ^ 1,  objc_msgSend(*(id *)(a1 + 40), "error"));
  }
}

void sub_4F3E4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isRecipeBasedSticker])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[IMMetricsCollector sharedInstance](&OBJC_CLASS___IMMetricsCollector, "sharedInstance"));
    [v2 trackEvent:IMMetricsCollectorEventMeStickerSent];

    if (IMOSLoggingEnabled(v3, v4))
    {
      uint64_t v5 = OSLogHandleForIMFoundationCategory("Attachments");
      unsigned int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stickerUserInfo]);
        double v8 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue([v7 objectForKey:IMStickerUserInfoStickerRecipeKey]));
        *(_DWORD *)buf = 138412290;
        double v106 = v8;
        _os_log_impl(&dword_0, v6, OS_LOG_TYPE_INFO, "Faking a me-sticker upload with recipe %@", buf, 0xCu);
      }
    }

    [*(id *)(a1 + 32) setUserInfo:0];
    [*(id *)(a1 + 32) setMessageGUID:*(void *)(a1 + 40)];
    id v9 = [*(id *)(a1 + 32) totalBytes];
    [*(id *)(a1 + 48) updateTransfer:*(void *)(a1 + 56) currentBytes:v9 totalBytes:v9];
    id v10 = [*(id *)(a1 + 48) endTransfer:*(void *)(a1 + 56)];
    if (IMOSLoggingEnabled(v10, v11))
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory("Attachments");
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        double v14 = *(double *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        double v106 = v14;
        _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "Done uploading me-sticker %@", buf, 0xCu);
      }
    }

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
  }

  else
  {
    if ([*(id *)(a1 + 32) isSticker])
    {
      __int16 v15 = (void *)objc_claimAutoreleasedReturnValue(+[IMMetricsCollector sharedInstance](&OBJC_CLASS___IMMetricsCollector, "sharedInstance"));
      [v15 trackEvent:IMMetricsCollectorEventStickerSent];
    }

    if ([*(id *)(a1 + 32) shouldFastSend])
    {
      if ([*(id *)(a1 + 32) isSticker])
      {
        id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stickerUserInfo]);
        double v17 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue([v16 objectForKey:IMStickerUserInfoStickerHashKey]));
      }

      else
      {
        double v17 = 0.0;
      }

      id v19 = [*(id *)&v17 length];
      if (v19)
      {
        uint64_t v21 = IMOSLoggingEnabled(v19, v20);
        if ((_DWORD)v21)
        {
          uint64_t v23 = OSLogHandleForIMFoundationCategory("Attachments");
          uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_INFO,  "Sticker file hash present in sticker user info dictionary",  buf,  2u);
          }
        }

        double v18 = v17;
      }

      else
      {
        __int128 v25 = *(void **)(a1 + 72);
        unsigned __int8 v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localURL]);
        char v27 = (void *)objc_claimAutoreleasedReturnValue([v26 path]);
        double v18 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue([v25 _fileHash:v27]));

        uint64_t v21 = IMOSLoggingEnabled(v28, v29);
        if ((_DWORD)v21)
        {
          uint64_t v30 = OSLogHandleForIMFoundationCategory("Warning");
          uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( &dword_0,  v31,  OS_LOG_TYPE_INFO,  "Client did not pass in sticker hash. Calculating hash at imagent",  buf,  2u);
          }
        }
      }

      if (IMOSLoggingEnabled(v21, v22))
      {
        uint64_t v32 = OSLogHandleForIMFoundationCategory("Attachments");
        uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          double v106 = v18;
          _os_log_impl(&dword_0, v33, OS_LOG_TYPE_INFO, "Sticker file hash %@", buf, 0xCu);
        }
      }

      id v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) _transferInfoForKey:*(void *)&v18]);
      __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([v34 objectForKey:@"sticker-TimeInterval"]);
      [v35 doubleValue];
      double v37 = v36;

      +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
      double v39 = v38;
      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v34 objectForKey:@"download-credentials"]);
      uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v34 objectForKey:@"v"]);
      __int16 v42 = (char *)[v41 integerValue];

      id v43 = [*(id *)(a1 + 72) _stickerUploadTTL];
      double v45 = v44;
      double v47 = v39 - v37;
      if (IMOSLoggingEnabled(v43, v46))
      {
        uint64_t v48 = OSLogHandleForIMFoundationCategory("Attachments");
        __int128 v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
        if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134219522;
          double v106 = v39;
          __int16 v107 = 2048;
          double v108 = v37;
          __int16 v109 = 2048;
          double v110 = v45;
          __int16 v111 = 2048;
          double v112 = v39 - v37;
          __int16 v113 = 2112;
          __int128 v114 = v34;
          __int16 v115 = 2048;
          id v116 = v42;
          __int16 v117 = 2048;
          uint64_t v118 = 1LL;
          _os_log_impl( &dword_0,  v49,  OS_LOG_TYPE_INFO,  "Sticker transfer currentTimeIntervale %f, uploadTimeInterval %f, kStickerUploadTTL %f, timeDifference %f, tr ansferInfo %@, version %ld, expectedVersion %ld",  buf,  0x48u);
        }
      }

      if (v34 && v47 >= 0.0 && v47 < v45 && v40 && v42 == (_BYTE *)&dword_0 + 1)
      {
        __int128 v50 = objc_alloc_init(&OBJC_CLASS___FTiMessageRequestMMCSFileRefreshToken);
        AttachmentRefreshUtilConfigureStickerToken(v50, v40);
        uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) attachmentRefreshDeliveryController]);
        v94[0] = _NSConcreteStackBlock;
        v94[1] = 3221225472LL;
        v94[2] = sub_4FDF4;
        v94[3] = &unk_D6B60;
        uint64_t v52 = *(void *)(a1 + 72);
        id v95 = v34;
        uint64_t v96 = v52;
        double v97 = v18;
        id v98 = *(id *)(a1 + 32);
        id v99 = v40;
        id v100 = *(id *)(a1 + 40);
        id v53 = *(id *)(a1 + 48);
        uint64_t v54 = *(void *)(a1 + 56);
        id v101 = v53;
        uint64_t v102 = v54;
        id v103 = *(id *)(a1 + 80);
        id v104 = *(id *)(a1 + 64);
        id v55 = v40;
        id v56 = *(id *)&v18;
        id v57 = v34;
        [v51 sendFTMessage:v50 attempts:0 withCompletionBlock:v94];

        return;
      }
    }

    else
    {
      double v18 = 0.0;
    }

    double v58 = COERCE_DOUBLE( objc_claimAutoreleasedReturnValue( +[IMDAttachmentUtilities fetchSizeLimitsForTransfer:mode:]( &OBJC_CLASS___IMDAttachmentUtilities,  "fetchSizeLimitsForTransfer:mode:",  *(void *)(a1 + 32),  *(void *)(a1 + 136))));
    uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([*(id *)&v58 firstObject]);
    id v60 = [v59 integerValue];

    if (IMOSLoggingEnabled(v61, v62))
    {
      uint64_t v63 = OSLogHandleForIMFoundationCategory("Attachments");
      uint64_t v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
      if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        double v106 = v58;
        _os_log_impl(&dword_0, v64, OS_LOG_TYPE_INFO, "Calculated size limits: %@", buf, 0xCu);
      }
    }

    v80[0] = _NSConcreteStackBlock;
    v80[1] = 3221225472LL;
    v80[2] = sub_504A8;
    v80[3] = &unk_D6C50;
    v80[4] = *(void *)(a1 + 72);
    id v65 = *(id *)&v58;
    id v81 = v65;
    id v82 = *(id *)(a1 + 32);
    id v83 = *(id *)(a1 + 88);
    id v93 = v60;
    id v84 = *(id *)(a1 + 96);
    id v85 = *(id *)(a1 + 64);
    id v92 = *(id *)(a1 + 128);
    id v86 = *(id *)(a1 + 80);
    id v66 = *(id *)&v18;
    id v87 = v66;
    id v88 = *(id *)(a1 + 104);
    id v89 = *(id *)(a1 + 112);
    id v90 = *(id *)(a1 + 40);
    int8x16_t v78 = *(int8x16_t *)(a1 + 48);
    id v67 = (id)v78.i64[0];
    int8x16_t v91 = vextq_s8(v78, v78, 8uLL);
    id v68 = objc_retainBlock(v80);
    uint64_t v69 = *(void **)(a1 + 120);
    uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localURL]);
    id v79 = 0LL;
    [v69 coordinateReadingItemAtURL:v70 options:0 error:&v79 byAccessor:v68];
    double v71 = COERCE_DOUBLE(v79);

    if (v71 != 0.0)
    {
      if (IMOSLoggingEnabled(v72, v73))
      {
        uint64_t v74 = OSLogHandleForIMFoundationCategory("Warning");
        id v75 = (os_log_s *)objc_claimAutoreleasedReturnValue(v74);
        if (os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
        {
          double v76 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localURL]));
          *(_DWORD *)buf = 138412546;
          double v106 = v76;
          __int16 v107 = 2112;
          double v108 = v71;
          _os_log_impl(&dword_0, v75, OS_LOG_TYPE_INFO, "Failed coordinated read of: %@  (Error: %@)", buf, 0x16u);
        }
      }

      id v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "localURL", *(_OWORD *)&v78));
      ((void (*)(void *, void *))v68[2])(v68, v77);
    }
  }

void sub_4FDF4(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  uint64_t v7 = v5;
  if (a3)
  {
    id v8 = [*(id *)(a1 + 32) mutableCopy];
    [v8 removeObjectForKey:@"sticker-TimeInterval"];
    +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v8 setObject:v9 forKey:@"sticker-TimeInterval"];

    [*(id *)(a1 + 40) _setTransferInfo:v8 key:*(void *)(a1 + 48)];
    id v10 = (const void *)IMStickerUserInfoStickerTranscodedStickerHashKey;
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:IMStickerUserInfoStickerTranscodedStickerHashKey]);
    if ([*(id *)(a1 + 40) _previewAttachmentEnabledForStickers])
    {
      id v12 = [v11 length];
      if (v12)
      {
        if (IMOSLoggingEnabled(v12, v13))
        {
          uint64_t v14 = OSLogHandleForIMFoundationCategory("StickerAttachment");
          __int16 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) stickerUserInfo]);
            *(_DWORD *)buf = 138412290;
            id v66 = v16;
            _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_INFO,  "_previewAttachmentEnabled Updating sticker user info original info %@",  buf,  0xCu);
          }
        }

        double v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) stickerUserInfo]);
        double v18 = (__CFDictionary *)[v17 mutableCopy];

        if (v18)
        {
          if (v11) {
            CFDictionarySetValue(v18, v10, v11);
          }
          id v19 = [*(id *)(a1 + 56) setStickerUserInfo:v18];
          if (IMOSLoggingEnabled(v19, v20))
          {
            uint64_t v21 = OSLogHandleForIMFoundationCategory("StickerAttachment");
            uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
            if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
            {
              uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) stickerUserInfo]);
              *(_DWORD *)buf = 138412290;
              id v66 = v23;
              _os_log_impl(&dword_0, v22, OS_LOG_TYPE_INFO, "Resulting sticker info %@", buf, 0xCu);
            }
          }
        }
      }
    }

    id v24 = [*(id *)(a1 + 40) _previewAttachmentEnabledForStickers];
    if ((_DWORD)v24)
    {
      uint64_t v26 = IMStickerUserInfoTranscodedScaleKey;
      char v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) valueForKey:IMStickerUserInfoTranscodedScaleKey]);
      BOOL v28 = v27 == 0LL;

      if (!v28)
      {
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) stickerUserInfo]);
        uint64_t v30 = IMStickerUserInfoScaleKey;
        uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v29 valueForKey:IMStickerUserInfoScaleKey]);
        BOOL v32 = v31 == 0LL;

        if (v32)
        {
          float v36 = 1.0;
        }

        else
        {
          uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) stickerUserInfo]);
          id v34 = (void *)objc_claimAutoreleasedReturnValue([v33 valueForKey:v30]);
          [v34 floatValue];
          float v36 = v35;
        }

        id v43 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) valueForKey:v26]);
        [v43 floatValue];
        float v45 = v44;

        uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) stickerUserInfo]);
        id v47 = [v46 mutableCopy];

        uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%.2f",  (float)(v36 * v45)));
        [v47 setObject:v48 forKey:v26];

        __int128 v49 = (void *)objc_claimAutoreleasedReturnValue([v47 valueForKey:v30]);
        BOOL v50 = v49 == 0LL;

        if (v50) {
          [v47 setObject:@"1.00" forKey:v30];
        }
        id v51 = [*(id *)(a1 + 56) setStickerUserInfo:v47];
        if (IMOSLoggingEnabled(v51, v52))
        {
          uint64_t v53 = OSLogHandleForIMFoundationCategory("StickerAttachment");
          uint64_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
          if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
          {
            id v55 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) stickerUserInfo]);
            *(_DWORD *)buf = 138412290;
            id v66 = v55;
            _os_log_impl(&dword_0, v54, OS_LOG_TYPE_INFO, "Update sticker user info dictionary %@", buf, 0xCu);
          }
        }
      }
    }

    if (IMOSLoggingEnabled(v24, v25))
    {
      uint64_t v56 = OSLogHandleForIMEventCategory("Attachments");
      id v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
      if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v57, OS_LOG_TYPE_INFO, "Done refreshing sticker with server", buf, 2u);
      }
    }

    [*(id *)(a1 + 56) setUserInfo:*(void *)(a1 + 64)];
    [*(id *)(a1 + 56) setMessageGUID:*(void *)(a1 + 72)];
    id v58 = [*(id *)(a1 + 56) totalBytes];
    [*(id *)(a1 + 80) updateTransfer:*(void *)(a1 + 88) currentBytes:v58 totalBytes:v58];
    id v59 = [*(id *)(a1 + 80) endTransfer:*(void *)(a1 + 88)];
    if (IMOSLoggingEnabled(v59, v60))
    {
      uint64_t v61 = OSLogHandleForIMFoundationCategory("Attachments");
      uint64_t v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
      if (os_log_type_enabled(v62, OS_LOG_TYPE_INFO))
      {
        uint64_t v63 = *(void **)(a1 + 56);
        *(_DWORD *)buf = 138412290;
        id v66 = v63;
        _os_log_impl(&dword_0, v62, OS_LOG_TYPE_INFO, "Done uploading sticker %@", buf, 0xCu);
      }
    }

    uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue(+[IMMetricsCollector sharedInstance](&OBJC_CLASS___IMMetricsCollector, "sharedInstance"));
    [v64 trackEvent:IMMetricsCollectorEventStickerSentUsingFastPath];
  }

  else
  {
    if (IMOSLoggingEnabled(v5, v6))
    {
      uint64_t v37 = OSLogHandleForIMFoundationCategory("Warning");
      double v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        double v39 = *(void **)(a1 + 72);
        *(_DWORD *)buf = 138412290;
        id v66 = v39;
        _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_INFO,  "Attachments Failed refreshing sticker with server for message GUID %@",  buf,  0xCu);
      }
    }

    [*(id *)(a1 + 40) _deleteTransferInfoForKey:*(void *)(a1 + 48)];
    uint64_t v40 = *(void **)(a1 + 80);
    uint64_t v41 = *(void *)(a1 + 88);
    __int16 v42 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"com.apple.private.AttachmentRefreshDelivery",  1LL,  0LL));
    [v40 failTransfer:v41 error:v42];

    [*(id *)(a1 + 96) setFailed:1];
    [*(id *)(a1 + 96) setError:34];
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 104));
}

void sub_50420(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x50000LL);
  }

  _Unwind_Resume(a1);
}

void sub_504A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (+[IMCTSMSUtilities IMIsEagerUploadEnabledForPhoneNumber:simID:]( &OBJC_CLASS___IMCTSMSUtilities,  "IMIsEagerUploadEnabledForPhoneNumber:simID:",  0LL,  0LL))
  {
    char v94 = v3;
    id v5 = *(void **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) transcoderUserInfo]);
    id v93 = (void *)objc_claimAutoreleasedReturnValue( [v5 eagerUploadKeyForURL:v94 sizes:v4 transcodeDictionary:v6 capabilities:*(void *)(a1 + 56)]);

    uint64_t v7 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) eagerUploadStatusForKey:v93]);
    id v8 = v7;
    if (!v7)
    {
      uint64_t v16 = ((uint64_t (*)(void))_iMessageTelemetryLogHandle)();
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_signpost_enabled(v11))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl( &dword_0,  v11,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "MessageAttachment.eager.noRecord",  " enableTelemetry=YES ",  buf,  2u);
      }

      goto LABEL_39;
    }

    id v9 = -[dispatch_group_s targetSize](v7, "targetSize");
    if ((uint64_t)v9 < *(void *)(a1 + 144))
    {
      uint64_t v10 = _iMessageTelemetryLogHandle(v9);
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      BOOL v12 = os_signpost_enabled(v11);
      if (v12)
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl( &dword_0,  v11,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "MessageAttachment.eager.tooSmall",  " enableTelemetry=YES ",  buf,  2u);
      }

      if (IMOSLoggingEnabled(v12, v13))
      {
        uint64_t v14 = OSLogHandleForIMFoundationCategory("Attachments");
        __int16 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_0, v15, OS_LOG_TYPE_INFO, "EAGER use - previous is too small, skipping", buf, 2u);
        }
      }

LABEL_39:
      id v3 = v94;
      goto LABEL_40;
    }

    id v17 = -[dispatch_group_s isComplete](v8, "isComplete");
    if ((_DWORD)v17)
    {
      id v19 = -[dispatch_group_s isSuccess](v8, "isSuccess");
      if (!(_DWORD)v19)
      {
        if (IMOSLoggingEnabled(v19, v20))
        {
          uint64_t v38 = OSLogHandleForIMFoundationCategory("Attachments");
          double v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
          if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = v8;
            _os_log_impl( &dword_0,  v39,  OS_LOG_TYPE_INFO,  "EAGER use -- previous upload failed, retrying: %@",  buf,  0xCu);
          }
        }

        uint64_t v40 = ((uint64_t (*)(void))_iMessageTelemetryLogHandle)();
        uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
        unsigned __int8 v42 = os_signpost_id_make_with_pointer(v41, v8);
        id v43 = v41;
        uint64_t v11 = v43;
        if (v42 && os_signpost_enabled(v43))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl( &dword_0,  v11,  OS_SIGNPOST_EVENT,  v42,  "MessageAttachment.eager.skipError",  " enableTelemetry=YES ",  buf,  2u);
        }

        goto LABEL_39;
      }

      -[dispatch_group_s attachToTransfer:message:commonCapabilities:]( v8,  "attachToTransfer:message:commonCapabilities:",  *(void *)(a1 + 48),  *(void *)(a1 + 64),  *(void *)(a1 + 56));
      uint64_t v21 = _iMessageTelemetryLogHandle(-[dispatch_group_s incrementUseCount](v8, "incrementUseCount"));
      uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      unsigned __int8 v23 = os_signpost_id_make_with_pointer(v22, v8);
      id v24 = v22;
      uint64_t v25 = v24;
      if (v23 && os_signpost_enabled(v24))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl( &dword_0,  v25,  OS_SIGNPOST_EVENT,  v23,  "MessageAttachment.eager.use",  " enableTelemetry=YES ",  buf,  2u);
      }

      if (IMOSLoggingEnabled(v26, v27))
      {
        uint64_t v28 = OSLogHandleForIMFoundationCategory("Attachments");
        uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
        {
          uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) userInfo]);
          *(_DWORD *)buf = 138412546;
          *(void *)&uint8_t buf[4] = v8;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v30;
          _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_INFO,  "EAGER use -- ready, use previous upload: %@, transfer %@",  buf,  0x16u);
        }
      }

      dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
    }

    else
    {
      if (IMOSLoggingEnabled(v17, v18))
      {
        uint64_t v31 = OSLogHandleForIMFoundationCategory("Attachments");
        BOOL v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = v8;
          _os_log_impl(&dword_0, v32, OS_LOG_TYPE_INFO, "EAGER use -- wait for complete: %@", buf, 0xCu);
        }
      }

      uint64_t v33 = ((uint64_t (*)(void))_iMessageTelemetryLogHandle)();
      id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
      unsigned __int8 v35 = os_signpost_id_make_with_pointer(v34, v8);
      float v36 = v34;
      uint64_t v37 = v36;
      if (v35 && os_signpost_enabled(v36))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl( &dword_0,  v37,  OS_SIGNPOST_INTERVAL_BEGIN,  v35,  "MessageAttachment.eager.wait",  " enableTelemetry=YES ",  buf,  2u);
      }

      v126[0] = _NSConcreteStackBlock;
      v126[1] = 3221225472LL;
      v126[2] = sub_51214;
      v126[3] = &unk_D6B88;
      char v127 = v37;
      unsigned __int8 v135 = v35;
      uint64_t v128 = v8;
      id v129 = *(id *)(a1 + 48);
      id v130 = *(id *)(a1 + 64);
      id v131 = *(id *)(a1 + 56);
      id v134 = *(id *)(a1 + 136);
      id v132 = *(id *)(a1 + 80);
      id v133 = *(id *)(a1 + 72);
      uint64_t v25 = v37;
      -[dispatch_group_s wait:](v128, "wait:", v126);
    }

    goto LABEL_71;
  }
}

LABEL_40:
  float v44 = v3;
  float v45 = (void *)objc_claimAutoreleasedReturnValue([v3 pathExtension]);
  id v46 = [v45 length];
  if (!v46)
  {
    uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(+[IMFileManager defaultHFSFileManager](&OBJC_CLASS___IMFileManager, "defaultHFSFileManager"));
    __int128 v49 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) type]);
    BOOL v50 = (void *)objc_claimAutoreleasedReturnValue([v48 pathExtensionForUTIType:v49]);

    if ([v50 length])
    {
      id v51 = v50;
    }

    else
    {
      uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(+[IMFileManager defaultHFSFileManager](&OBJC_CLASS___IMFileManager, "defaultHFSFileManager"));
      uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) mimeType]);
      uint64_t v54 = objc_claimAutoreleasedReturnValue([v52 pathExtensionForMIMEType:v53]);

      id v51 = (void *)v54;
    }

    id v55 = v51;
    id v46 = [v51 length];
    if (v46)
    {
      uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v44 absoluteString]);
      id v57 = (void *)objc_claimAutoreleasedReturnValue([v56 stringByDeletingPathExtension]);

      id v58 = (void *)objc_claimAutoreleasedReturnValue([v57 stringByAppendingPathExtension:v55]);
      id v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "__im_apfsCompatibleFilename"));

      if ([v59 length])
      {
        uint64_t v60 = objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v59));

        float v44 = (void *)v60;
      }
    }

    float v45 = v55;
  }

  id v93 = v45;
  char v94 = v44;
  if (v44)
  {
    uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    float v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "im_generateCopyForURL:", v44));
  }

  if (IMOSLoggingEnabled(v46, v47))
  {
    uint64_t v62 = OSLogHandleForIMFoundationCategory("Attachments");
    uint64_t v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
    if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      *(void *)&uint8_t buf[4] = v94;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v44;
      _os_log_impl(&dword_0, v63, OS_LOG_TYPE_INFO, "Source URL: %@  Link: %@", buf, 0x16u);
    }
  }

  dispatch_group_t v64 = dispatch_group_create();
  id v65 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v66 = objc_alloc_init(&OBJC_CLASS___MessageAttachmentSingleStatus);
  *(void *)buf = 0LL;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x3032000000LL;
  uint64_t v141 = sub_4C558;
  id v142 = sub_4C568;
  id v143 = 0LL;
  v124[0] = 0LL;
  v124[1] = v124;
  v124[2] = 0x3032000000LL;
  v124[3] = sub_4C558;
  v124[4] = sub_4C568;
  id v125 = 0LL;
  v119[0] = _NSConcreteStackBlock;
  v119[1] = 3221225472LL;
  v119[2] = sub_51608;
  v119[3] = &unk_D6BB0;
  id v67 = *(void **)(a1 + 48);
  v119[4] = *(void *)(a1 + 32);
  id v120 = v67;
  id v121 = *(id *)(a1 + 88);
  uint64_t v122 = buf;
  __int128 v123 = v124;
  id v92 = objc_retainBlock(v119);
  v110[0] = _NSConcreteStackBlock;
  v110[1] = 3221225472LL;
  v110[2] = sub_51AD4;
  v110[3] = &unk_D6BD8;
  v110[4] = *(void *)(a1 + 32);
  id v111 = *(id *)(a1 + 96);
  id v112 = *(id *)(a1 + 104);
  id v68 = *(id *)(a1 + 112);
  uint64_t v69 = *(void *)(a1 + 120);
  id v113 = v68;
  uint64_t v114 = v69;
  uint64_t v70 = v65;
  __int16 v115 = v70;
  id v116 = *(id *)(a1 + 80);
  double v71 = v66;
  __int16 v117 = v71;
  id v8 = v64;
  uint64_t v118 = v8;
  uint64_t v72 = objc_retainBlock(v110);
  uint64_t v73 = v94;
  if (v44) {
    uint64_t v73 = v44;
  }
  id v74 = v73;
  id v75 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) sandboxToken]);
  double v76 = v75;
  if (v75)
  {
    id v77 = v75;
    uint64_t v79 = sandbox_extension_consume([v77 UTF8String]);
    if (v79 != -1) {
      goto LABEL_64;
    }
    if (IMOSLoggingEnabled(-1LL, v78))
    {
      uint64_t v80 = OSLogHandleForIMFoundationCategory("Warning");
      id v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
      if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t v136 = 138412546;
        id v137 = v74;
        __int16 v138 = 2112;
        id v139 = v77;
        _os_log_impl(&dword_0, v81, OS_LOG_TYPE_INFO, "Failed to consume sandbox token, %@ token: %@", v136, 0x16u);
      }
    }
  }

  uint64_t v79 = -1LL;
LABEL_64:
  [*(id *)(a1 + 32) _transcodeURL:v74 reason:2 transfer:*(void *)(a1 + 48) sizes:*(void *)(a1 + 40) commonCapabilities:*(void *)(a1 + 56) sendStatus:*(void *)(a1 + 80) urlGroup:v8 didTranscode:v92 handleURL:v72];
  if (v79 != -1)
  {
    uint64_t v82 = sandbox_extension_release(v79);
    if ((_DWORD)v82 == -1)
    {
      if (IMOSLoggingEnabled(v82, v83))
      {
        uint64_t v84 = OSLogHandleForIMFoundationCategory("Warning");
        id v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
        if (os_log_type_enabled(v85, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t v136 = 138412546;
          id v137 = v74;
          __int16 v138 = 2112;
          id v139 = v76;
          _os_log_impl(&dword_0, v85, OS_LOG_TYPE_INFO, "Failed to release sandbox token, %@ token: %@", v136, 0x16u);
        }
      }
    }
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_51BA4;
  block[3] = &unk_D6C28;
  double v108 = v124;
  id v96 = *(id *)(a1 + 80);
  id v97 = v44;
  id v86 = *(id *)(a1 + 128);
  uint64_t v87 = *(void *)(a1 + 120);
  id v98 = v86;
  uint64_t v99 = v87;
  uint64_t v88 = *(void *)(a1 + 32);
  id v100 = v70;
  uint64_t v101 = v88;
  id v102 = *(id *)(a1 + 64);
  id v103 = *(id *)(a1 + 56);
  __int16 v109 = buf;
  id v104 = *(id *)(a1 + 88);
  id v107 = *(id *)(a1 + 136);
  __int128 v105 = v71;
  id v106 = *(id *)(a1 + 72);
  id v89 = v71;
  id v90 = v70;
  id v91 = v44;
  dispatch_group_notify(v8, &_dispatch_main_q, block);

  _Block_object_dispose(v124, 8);
  _Block_object_dispose(buf, 8);

LABEL_71:
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

void sub_51114( _Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x5078CLL);
  }

  _Unwind_Resume(exc_buf);
}

void sub_51214(uint64_t a1)
{
  id v2 = (os_log_s *)*(id *)(a1 + 32);
  id v3 = v2;
  os_signpost_id_t v4 = *(unsigned __int8 *)(a1 + 96);
  if (*(_BYTE *)(a1 + 96) && os_signpost_enabled(v2))
  {
    LOWORD(v35) = 0;
    _os_signpost_emit_with_name_impl( &dword_0,  v3,  OS_SIGNPOST_INTERVAL_END,  v4,  "MessageAttachment.eager.wait",  " enableTelemetry=YES ",  (uint8_t *)&v35,  2u);
  }

  unsigned int v5 = [*(id *)(a1 + 40) isSuccess];
  uint64_t v6 = *(void **)(a1 + 40);
  if (!v5)
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v6 attachmentStatus]);
    uint64_t v16 = (os_log_s *)*(id *)(a1 + 32);
    id v17 = v16;
    os_signpost_id_t v18 = *(unsigned __int8 *)(a1 + 96);
    if (*(_BYTE *)(a1 + 96) && os_signpost_enabled(v16))
    {
      LOWORD(v35) = 0;
      _os_signpost_emit_with_name_impl( &dword_0,  v17,  OS_SIGNPOST_EVENT,  v18,  "MessageAttachment.eager.useFail",  " enableTelemetry=YES ",  (uint8_t *)&v35,  2u);
    }

    if (IMOSLoggingEnabled(v19, v20))
    {
      uint64_t v21 = OSLogHandleForIMFoundationCategory("Attachments");
      uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        uint64_t v23 = *(void *)(a1 + 40);
        id v24 = (void *)objc_claimAutoreleasedReturnValue([v13 transferError]);
        int v35 = 138412546;
        uint64_t v36 = v23;
        __int16 v37 = 2112;
        uint64_t v38 = v24;
        _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_INFO,  "EAGER use -- waited, failed: %@, error %@",  (uint8_t *)&v35,  0x16u);
      }
    }

    uint64_t v25 = *(void *)(a1 + 88);
    if (v25)
    {
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v13 transferError]);
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v13 errorURLString]);
      id v28 = [v13 errorFileSize];
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v13 additionalErrorInfo]);
      (*(void (**)(uint64_t, void *, void *, id, void *))(v25 + 16))(v25, v26, v27, v28, v29);
    }

    [*(id *)(a1 + 72) setFailed:1];
    id v30 = [*(id *)(a1 + 72) setError:34];
    if (IMOSLoggingEnabled(v30, v31))
    {
      uint64_t v32 = OSLogHandleForIMFoundationCategory("Attachments");
      uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        uint64_t v34 = *(void *)(a1 + 72);
        int v35 = 138412290;
        uint64_t v36 = v34;
        _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_INFO,  "EAGER use -- Set overall status to fail %@",  (uint8_t *)&v35,  0xCu);
      }
    }

    goto LABEL_25;
  }

  [v6 attachToTransfer:*(void *)(a1 + 48) message:*(void *)(a1 + 56) commonCapabilities:*(void *)(a1 + 64)];
  [*(id *)(a1 + 40) incrementUseCount];
  uint64_t v7 = (os_log_s *)*(id *)(a1 + 32);
  id v8 = v7;
  os_signpost_id_t v9 = *(unsigned __int8 *)(a1 + 96);
  if (*(_BYTE *)(a1 + 96) && os_signpost_enabled(v7))
  {
    LOWORD(v35) = 0;
    _os_signpost_emit_with_name_impl( &dword_0,  v8,  OS_SIGNPOST_EVENT,  v9,  "MessageAttachment.eager.use",  " enableTelemetry=YES ",  (uint8_t *)&v35,  2u);
  }

  if (IMOSLoggingEnabled(v10, v11))
  {
    uint64_t v12 = OSLogHandleForIMFoundationCategory("Attachments");
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = *(void *)(a1 + 40);
      __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) userInfo]);
      int v35 = 138412546;
      uint64_t v36 = v14;
      __int16 v37 = 2112;
      uint64_t v38 = v15;
      _os_log_impl( &dword_0,  (os_log_t)v13,  OS_LOG_TYPE_INFO,  "EAGER use -- waited, use upload: %@, transfer %@",  (uint8_t *)&v35,  0x16u);
    }

void sub_515C0(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x5148CLL);
  }

  _Unwind_Resume(a1);
}

void sub_51608(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if ([v7 isSticker]
    && [v8 count]
    && [*(id *)(a1 + 32) _previewAttachmentEnabledForStickers])
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 valueForKey:IMTranscoderAdditionalContextScaleFactorKey]);
    if (IMOSLoggingEnabled(v10, v11))
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory("StickerAttachment");
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        id v55 = v10;
        __int16 v56 = 2112;
        id v57 = v9;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_INFO,  "scaleFactorArray after transcoding %@ additionalContext %@",  buf,  0x16u);
      }
    }

    if ([v10 count])
    {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v7 stickerUserInfo]);
      uint64_t v15 = IMStickerUserInfoScaleKey;
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v14 valueForKey:IMStickerUserInfoScaleKey]);
      BOOL v17 = v16 == 0LL;

      if (v17)
      {
        float v21 = 1.0;
      }

      else
      {
        os_signpost_id_t v18 = (void *)objc_claimAutoreleasedReturnValue([v7 stickerUserInfo]);
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 valueForKey:v15]);
        [v19 floatValue];
        float v21 = v20;
      }

      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v10 objectAtIndex:0]);
      [v22 floatValue];
      float v24 = v23;

      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v7 stickerUserInfo]);
      id v26 = [v25 mutableCopy];

      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%.2f",  (float)(v21 * v24)));
      [v26 setObject:v27 forKey:IMStickerUserInfoTranscodedScaleKey];

      id v28 = (void *)objc_claimAutoreleasedReturnValue([v26 valueForKey:v15]);
      LODWORD(v27) = v28 == 0LL;

      if ((_DWORD)v27) {
        [v26 setObject:@"1.00" forKey:v15];
      }
      id v29 = [v7 setStickerUserInfo:v26];
      if (IMOSLoggingEnabled(v29, v30))
      {
        uint64_t v31 = OSLogHandleForIMFoundationCategory("StickerAttachment");
        uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) stickerUserInfo]);
          *(_DWORD *)buf = 138412290;
          id v55 = v33;
          _os_log_impl(&dword_0, v32, OS_LOG_TYPE_INFO, "Update sticker user info dictionary %@", buf, 0xCu);
        }
      }
    }

    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v8 firstObject]);
    int v35 = (void *)objc_claimAutoreleasedReturnValue([v34 path]);
    uint64_t v36 = IMSharedHelperMD5HashOfFileAtPath(v35);
    __int16 v37 = (void *)objc_claimAutoreleasedReturnValue(v36);

    id v38 = [v37 isEqualToString:*(void *)(a1 + 48)];
    if ((v38 & 1) != 0)
    {
      if (IMOSLoggingEnabled(v38, v39))
      {
        uint64_t v40 = OSLogHandleForIMFoundationCategory("StickerAttachment");
        uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
        {
          unsigned __int8 v42 = *(void **)(a1 + 48);
          *(_DWORD *)buf = 138412546;
          id v55 = v37;
          __int16 v56 = 2112;
          id v57 = v42;
          _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_INFO,  "We tried to transcode sticker but output file is the same outPutHash hash %@ original hash %@",  buf,  0x16u);
        }
      }

      id v43 = 0LL;
    }

    else
    {
      id v43 = v37;
      if (IMOSLoggingEnabled(v43, v44))
      {
        uint64_t v45 = OSLogHandleForIMFoundationCategory("StickerAttachment");
        id v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
        {
          uint64_t v47 = *(void **)(a1 + 48);
          *(_DWORD *)buf = 138412546;
          id v55 = v43;
          __int16 v56 = 2112;
          id v57 = v47;
          _os_log_impl(&dword_0, v46, OS_LOG_TYPE_INFO, "Computed new transcoded hash %@ original hash %@ ", buf, 0x16u);
        }
      }
    }

    id v48 = [v43 copy];
    uint64_t v49 = *(void *)(*(void *)(a1 + 56) + 8LL);
    BOOL v50 = *(void **)(v49 + 40);
    *(void *)(v49 + 40) = v48;

    id v51 = [v8 copy];
    uint64_t v52 = *(void *)(*(void *)(a1 + 64) + 8LL);
    uint64_t v53 = *(void **)(v52 + 40);
    *(void *)(v52 + 40) = v51;
  }
}

void sub_51AD4(void *a1, void *a2, void *a3, char a4)
{
  id v7 = (void *)a1[4];
  uint64_t v8 = a1[5];
  uint64_t v9 = a1[6];
  uint64_t v10 = a1[7];
  id v11 = a3;
  id v12 = a2;
  id v15 = (id)objc_claimAutoreleasedReturnValue([v7 msgSession]);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v15 sessionSpecificTransferIDForTransferID:a1[8]]);
  LOBYTE(v14) = a4;
  [v7 _sendURL:v12 urlToRemove:v11 topic:v8 sessionInfo:v9 messageGUID:v10 transferID:v13 fileTransferGUID:a1[8] attachmentSendContexts:a1[9] failIfError:v14 se ndStatus:a1[10] attachmentStatus:a1[11] group:a1[12]];
}

void sub_51BA4(uint64_t a1, uint64_t a2)
{
  if (IMOSLoggingEnabled(a1, a2))
  {
    uint64_t v3 = OSLogHandleForIMFoundationCategory("Attachments");
    os_signpost_id_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      unsigned int v5 = *(__CFString **)(*(void *)(*(void *)(a1 + 128) + 8LL) + 40LL);
      unsigned int v6 = [*(id *)(a1 + 32) failed];
      id v7 = @"YES";
      if (v6) {
        id v7 = @"NO";
      }
      *(_DWORD *)buf = 138412546;
      uint64_t v47 = v5;
      __int16 v48 = 2112;
      uint64_t v49 = v7;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_INFO, "  All done url set for: %@   success: %@", buf, 0x16u);
    }
  }

  if (*(void *)(a1 + 40))
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    uint64_t v9 = *(void *)(a1 + 40);
    id v45 = 0LL;
    unsigned __int8 v10 = [v8 removeItemAtURL:v9 error:&v45];
    id v11 = (__CFString *)v45;

    if ((v10 & 1) == 0 && IMOSLoggingEnabled(v12, v13))
    {
      uint64_t v14 = OSLogHandleForIMFoundationCategory("Attachments");
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        uint64_t v16 = *(__CFString **)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        uint64_t v47 = v16;
        __int16 v48 = 2112;
        uint64_t v49 = v11;
        _os_log_impl(&dword_0, v15, OS_LOG_TYPE_INFO, "Error cleaning up linked path: %@  error: %@", buf, 0x16u);
      }
    }
  }

  else
  {
    id v11 = 0LL;
  }

  BOOL v17 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) transferForGUID:*(void *)(a1 + 56)]);
  id v18 = [*(id *)(a1 + 32) failed];
  if ((v18 & 1) == 0)
  {
    float v23 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString attachmentSendContexts](v17, "attachmentSendContexts"));
    id v27 = [(id)objc_opt_class(*(void *)(a1 + 72)) _combinedTransferUserInfoForAttachmentSendContexts:*(void *)(a1 + 64) transfer:v17 message:*(void *)(a1 + 80) commonCapabilities:*(void *)(a1 + 88)];
    id v28 = (__CFString *)objc_claimAutoreleasedReturnValue(v27);
    if (IMOSLoggingEnabled(v28, v29))
    {
      uint64_t v30 = OSLogHandleForIMFoundationCategory("MMCS");
      uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        uint64_t v47 = v28;
        __int16 v48 = 2112;
        uint64_t v49 = v17;
        _os_log_impl(&dword_0, v31, OS_LOG_TYPE_INFO, "  setting userinfo: %@  on transfer: %@", buf, 0x16u);
      }
    }

    -[__CFString setUserInfo:](v17, "setUserInfo:", v28);
    -[__CFString setAttachmentSendContexts:](v17, "setAttachmentSendContexts:", *(void *)(a1 + 64));
    uint64_t v32 = *(void **)(a1 + 64);
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472LL;
    v36[2] = sub_52050;
    v36[3] = &unk_D6C00;
    __int16 v37 = v17;
    id v38 = v28;
    uint64_t v33 = *(void *)(a1 + 136);
    uint64_t v39 = *(void *)(a1 + 72);
    uint64_t v44 = v33;
    id v40 = *(id *)(a1 + 96);
    id v41 = *(id *)(a1 + 80);
    id v34 = *(id *)(a1 + 48);
    uint64_t v35 = *(void *)(a1 + 56);
    id v42 = v34;
    uint64_t v43 = v35;
    float v24 = v28;
    [v32 enumerateObjectsUsingBlock:v36];

    id v26 = v37;
    goto LABEL_29;
  }

  if (IMOSLoggingEnabled(v18, v19))
  {
    uint64_t v20 = OSLogHandleForIMFoundationCategory("MMCS");
    float v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v47 = v17;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_INFO,  "  NOT setting userInfo: transfer %@ did not complete successfully.",  buf,  0xCu);
    }
  }

  uint64_t v22 = *(void *)(a1 + 120);
  if (v22)
  {
    float v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 104) transferError]);
    float v24 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 104) errorURLString]);
    id v25 = [*(id *)(a1 + 104) errorFileSize];
    id v26 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 104) additionalErrorInfo]);
    (*(void (**)(uint64_t, void *, __CFString *, id, __CFString *))(v22 + 16))(v22, v23, v24, v25, v26);
LABEL_29:
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 112));
}

void sub_52050(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) shouldFastSend])
  {
    os_signpost_id_t v4 = objc_alloc(&OBJC_CLASS___NSMutableDictionary);
    +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 1LL));
    uint64_t v8 = -[NSMutableDictionary initWithObjectsAndKeys:]( v4,  "initWithObjectsAndKeys:",  v5,  @"sticker-TimeInterval",  v6,  @"download-credentials",  v7,  @"v",  0LL);

    if ([*(id *)(a1 + 48) _previewAttachmentEnabledForStickers])
    {
      id v9 = [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) length];
      if (v9)
      {
        if (IMOSLoggingEnabled(v9, v10))
        {
          uint64_t v11 = OSLogHandleForIMFoundationCategory("StickerAttachment");
          uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stickerUserInfo]);
            *(_DWORD *)buf = 138412290;
            uint64_t v43 = v13;
            _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "Updating sticker user info original info %@", buf, 0xCu);
          }
        }

        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stickerUserInfo]);
        id v15 = (__CFDictionary *)[v14 mutableCopy];

        if (v15)
        {
          id v18 = *(const void **)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL);
          if (v18) {
            CFDictionarySetValue(v15, IMStickerUserInfoStickerTranscodedStickerHashKey, v18);
          }
          id v19 = [*(id *)(a1 + 32) setStickerUserInfo:v15];
          uint64_t v16 = IMOSLoggingEnabled(v19, v20);
          if ((_DWORD)v16)
          {
            uint64_t v21 = OSLogHandleForIMFoundationCategory("StickerAttachment");
            uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
            if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
            {
              float v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stickerUserInfo]);
              *(_DWORD *)buf = 138412290;
              uint64_t v43 = v23;
              _os_log_impl(&dword_0, v22, OS_LOG_TYPE_INFO, "Resulting sticker info %@", buf, 0xCu);
            }
          }
        }

        if (IMOSLoggingEnabled(v16, v17))
        {
          uint64_t v24 = OSLogHandleForIMFoundationCategory("StickerAttachment");
          id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_0, v25, OS_LOG_TYPE_INFO, "Adding transcodeded hash to transfer info plist", buf, 2u);
          }
        }

        id v26 = *(const void **)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL);
        if (v26) {
          CFDictionarySetValue(v8, IMStickerUserInfoStickerTranscodedStickerHashKey, v26);
        }
        id v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stickerUserInfo]);
        id v28 = (const void *)IMStickerUserInfoTranscodedScaleKey;
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v27 valueForKey:IMStickerUserInfoTranscodedScaleKey]);

        if (v29)
        {
          if (IMOSLoggingEnabled(v30, v31))
          {
            uint64_t v32 = OSLogHandleForIMFoundationCategory("StickerAttachment");
            uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
            if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_INFO,  "Adding transcodeded scale factor to transfer info plist",  buf,  2u);
            }
          }

          id v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stickerUserInfo]);
          uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v34 valueForKey:v28]);

          if (v35) {
            CFDictionarySetValue(v8, v28, v35);
          }
        }
      }
    }

    [*(id *)(a1 + 48) _setTransferInfo:v8 key:*(void *)(a1 + 56)];
  }

  uint64_t v36 = *(void **)(a1 + 32);
  __int16 v37 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) guid]);
  [v36 setMessageGUID:v37];

  id v38 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"file-size"]);
  id v39 = [v38 unsignedLongLongValue];

  id v41 = *(void **)(a1 + 72);
  uint64_t v40 = a1 + 72;
  [v41 updateTransfer:*(void *)(v40 + 8) currentBytes:v39 totalBytes:v39];
  [*(id *)v40 endTransfer:*(void *)(v40 + 8)];
}

void sub_52468(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x52274LL);
  }

  _Unwind_Resume(a1);
}

void sub_524C4(uint64_t a1, uint64_t a2)
{
  if (IMOSLoggingEnabled(a1, a2))
  {
    uint64_t v3 = OSLogHandleForIMFoundationCategory("Attachments");
    os_signpost_id_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      unsigned int v6 = [*(id *)(a1 + 40) failed];
      id v7 = @"YES";
      if (v6) {
        id v7 = @"NO";
      }
      *(_DWORD *)buf = 138412546;
      uint64_t v20 = v5;
      __int16 v21 = 2112;
      uint64_t v22 = v7;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_INFO, "  All done transfer set for: %@   success: %@", buf, 0x16u);
    }
  }

  uint64_t v8 = *(void *)(a1 + 72);
  if (v8) {
    (*(void (**)(uint64_t, void, void, void, void, id))(v8 + 16))( v8,  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  [*(id *)(a1 + 40) failed] ^ 1,  objc_msgSend(*(id *)(a1 + 40), "error"));
  }
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) guid]);
  uint64_t v10 = kAttachmentsAutomationMilestoneEndSendingMessage;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "guid", kAttachmentsAutomationMessageGUIDKey));
  v18[0] = v11;
  v17[1] = kAttachmentsAutomationSuccessKey;
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [*(id *)(a1 + 40) failed] ^ 1));
  v18[1] = v12;
  v17[2] = kAttachmentsAutomationErrorKey;
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [*(id *)(a1 + 40) error]));
  v18[2] = v13;
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v18,  v17,  3LL));
  AttachmentsAutomationLogMilestoneWithOptionFlags(v9, v10, v14, 2LL);

  uint64_t v15 = *(void *)(*(void *)(a1 + 80) + 8LL);
  uint64_t v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = 0LL;
}

uint64_t sub_52844(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    os_signpost_id_t v4 = v3;
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 stringByReplacingOccurrencesOfString:@"" withString:&stru_D8640]);

    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) body]);
    id v7 = [v6 length];

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) body]);
    id v9 = [v8 mutableCopy];

    objc_msgSend(v9, "addAttribute:value:range:", IMAudioTranscription, v5, 0, v7);
    [*(id *)(a1 + 40) setAudioTranscriptionText:v5];
    [*(id *)(a1 + 32) setBody:v9];
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[IMDMessageStore sharedInstance](&OBJC_CLASS___IMDMessageStore, "sharedInstance"));
    id v11 =  objc_msgSend( v10,  "storeMessage:forceReplace:modifyError:modifyFlags:flagMask:",  *(void *)(a1 + 32),  1,  0,  0,  objc_msgSend(*(id *)(a1 + 32), "flags"));
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_52BB4(uint64_t a1, void *a2, void *a3, void *a4, void *a5, int a6, int a7, void *a8)
{
  id v73 = a2;
  uint64_t v79 = a3;
  id v74 = a4;
  id v75 = a5;
  id v76 = a8;
  id v77 = (void *)objc_claimAutoreleasedReturnValue(+[IMDFileTransferCenter sharedInstance](&OBJC_CLASS___IMDFileTransferCenter, "sharedInstance"));
  uint64_t v15 = IMOSLoggingEnabled(v77, v14);
  if ((_DWORD)v15)
  {
    uint64_t v17 = OSLogHandleForIMEventCategory("Attachments");
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      id v19 = @"NO";
      uint64_t v20 = *(os_log_s **)(a1 + 32);
      if (a7) {
        id v19 = @"YES";
      }
      *(_DWORD *)buf = 138412546;
      uint64_t v88 = v20;
      __int16 v89 = 2112;
      id v90 = v19;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_INFO,  "Transcode processing complete for transfer: %@  (Attempted Transcode: %@)",  buf,  0x16u);
    }
  }

  if (!a6)
  {
    [*(id *)(a1 + 56) setFailed:1];
    id v60 = [*(id *)(a1 + 56) setError:25];
    uint64_t v62 = IMOSLoggingEnabled(v60, v61);
    if ((_DWORD)v62)
    {
      uint64_t v64 = OSLogHandleForIMFoundationCategory("Attachments");
      id v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
      if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v88 = v75;
        _os_log_impl(&dword_0, v65, OS_LOG_TYPE_INFO, "Transcoding failed with error: %@", buf, 0xCu);
      }
    }

    if (IMOSLoggingEnabled(v62, v63))
    {
      uint64_t v66 = OSLogHandleForIMEventCategory("Attachments");
      id v67 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
      if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
      {
        id v68 = *(os_log_s **)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        uint64_t v88 = v68;
        _os_log_impl(&dword_0, v67, OS_LOG_TYPE_INFO, "Failed transcoding transfer: %@", buf, 0xCu);
      }
    }

    uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
    [v77 failTransfer:v69 reason:15];

    uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue(+[IMMetricsCollector sharedInstance](&OBJC_CLASS___IMMetricsCollector, "sharedInstance"));
    objc_msgSend( v70,  "trackiMessageTranscodeFailureWithReason:sourceFile:sizeLimits:isSticker:lowQualityModeEnabled:",  *(void *)(a1 + 88),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  objc_msgSend(*(id *)(a1 + 32), "isSticker"),  *(unsigned __int8 *)(a1 + 96));

    goto LABEL_52;
  }

  if (IMOSLoggingEnabled(v15, v16))
  {
    uint64_t v21 = OSLogHandleForIMFoundationCategory("Attachments");
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v88 = v79;
      _os_log_impl(&dword_0, v22, OS_LOG_TYPE_INFO, "Transcoding succeeded with output URLs: %@", buf, 0xCu);
    }
  }

  float v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localPath]);
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v23 lastPathComponent]);

  id v25 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s __imFirstObject](v79, "__imFirstObject"));
  id v26 = (void *)objc_claimAutoreleasedReturnValue([v25 path]);
  id v27 = (void *)objc_claimAutoreleasedReturnValue([v26 lastPathComponent]);
  id v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "__im_apfsCompatibleFilename"));

  uint64_t v72 = (__CFString *)objc_claimAutoreleasedReturnValue([v24 pathExtension]);
  uint64_t v29 = objc_claimAutoreleasedReturnValue([v28 pathExtension]);
  uint64_t v30 = (void *)v29;
  if (v72 && v29 && (-[__CFString isEqualToString:](v72, "isEqualToString:", v29) & 1) == 0)
  {
    if (![*(id *)(a1 + 32) isAuxVideo]
      || (id v31 = -[__CFString isEqualToIgnoringCase:](v72, "isEqualToIgnoringCase:", v30), (v31 & 1) == 0))
    {
      if (![*(id *)(a1 + 32) isAuxImage]
        || (id v31 = -[__CFString isEqualToIgnoringCase:](v72, "isEqualToIgnoringCase:", v30), !(_DWORD)v31))
      {
        uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v24 stringByDeletingPathExtension]);
        __int16 v37 = (void *)objc_claimAutoreleasedReturnValue([v36 stringByAppendingPathExtension:v30]);
        id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "__im_apfsCompatibleFilename"));

        id v38 = [*(id *)(a1 + 32) setTransferredFilename:v34];
        if (IMOSLoggingEnabled(v38, v39))
        {
          uint64_t v40 = OSLogHandleForIMFoundationCategory("Attachments");
          id v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
          if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            uint64_t v88 = v34;
            _os_log_impl(&dword_0, v41, OS_LOG_TYPE_INFO, "          Setting transferred filename: %@", buf, 0xCu);
          }
        }

        goto LABEL_27;
      }
    }

    if (IMOSLoggingEnabled(v31, v32))
    {
      uint64_t v33 = OSLogHandleForIMFoundationCategory("Attachments");
      id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        uint64_t v35 = *(os_log_s **)(a1 + 32);
        *(_DWORD *)buf = 138412802;
        uint64_t v88 = v35;
        __int16 v89 = 2112;
        id v90 = v72;
        __int16 v91 = 2112;
        id v92 = v30;
        _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_INFO,  "Not setting transferred filename for Aux  transfer %@, localExtension %@ , newExtension %@ ",  buf,  0x20u);
      }

LABEL_42:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
LABEL_52:
}

void sub_533EC(uint64_t a1, void *a2, void *a3, void *a4, int a5, int a6)
{
  id v11 = a2;
  uint64_t v12 = a3;
  id v13 = a4;
  uint64_t v15 = IMOSLoggingEnabled(v13, v14);
  if ((_DWORD)v15)
  {
    uint64_t v17 = OSLogHandleForIMFoundationCategory("Attachments");
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      id v19 = @"NO";
      if (a6) {
        id v19 = @"YES";
      }
      int v47 = 138412290;
      id v48 = v19;
      _os_log_impl(&dword_0, v18, OS_LOG_TYPE_INFO, "Compressed attachment: %@", (uint8_t *)&v47, 0xCu);
    }
  }

  uint64_t v20 = IMOSLoggingEnabled(v15, v16);
  if ((_DWORD)v20)
  {
    uint64_t v22 = OSLogHandleForIMFoundationCategory("Attachments");
    float v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      int v47 = 138412290;
      id v48 = v11;
      _os_log_impl(&dword_0, v23, OS_LOG_TYPE_INFO, "           Input Path: %@", (uint8_t *)&v47, 0xCu);
    }
  }

  uint64_t v24 = IMOSLoggingEnabled(v20, v21);
  if ((_DWORD)v24)
  {
    uint64_t v26 = OSLogHandleForIMFoundationCategory("Attachments");
    id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      int v47 = 138412290;
      id v48 = v12;
      _os_log_impl(&dword_0, v27, OS_LOG_TYPE_INFO, "          Output Path: %@", (uint8_t *)&v47, 0xCu);
    }
  }

  if (IMOSLoggingEnabled(v24, v25))
  {
    uint64_t v28 = OSLogHandleForIMFoundationCategory("Attachments");
    uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      uint64_t v30 = @"NO";
      if (a5) {
        uint64_t v30 = @"YES";
      }
      int v47 = 138412290;
      id v48 = v30;
      _os_log_impl(&dword_0, v29, OS_LOG_TYPE_INFO, "              Success: %@", (uint8_t *)&v47, 0xCu);
    }
  }

  if (a6)
  {
    id v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localPath]);
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v31 lastPathComponent]);

    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString path](v12, "path"));
    id v34 = (void *)objc_claimAutoreleasedReturnValue([v33 lastPathComponent]);

    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v32 pathExtension]);
    uint64_t v36 = objc_claimAutoreleasedReturnValue([v34 pathExtension]);
    __int16 v37 = (void *)v36;
    if (v35)
    {
      if (v36)
      {
        if (([v35 isEqualToString:v36] & 1) == 0)
        {
          id v38 = *(void **)(a1 + 32);
          uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v32 stringByAppendingPathExtension:v37]);
          [v38 setTransferredFilename:v39];

          if (IMOSLoggingEnabled(v40, v41))
          {
            uint64_t v42 = OSLogHandleForIMFoundationCategory("Attachments");
            uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
            if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
            {
              uint64_t v44 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transferredFilename]);
              int v47 = 138412290;
              id v48 = v44;
              _os_log_impl( &dword_0,  v43,  OS_LOG_TYPE_INFO,  "          Setting transferred filename: %@",  (uint8_t *)&v47,  0xCu);
            }
          }
        }
      }
    }
  }

  uint64_t v45 = *(void *)(a1 + 56);
  if (v45)
  {
    if (*(_BYTE *)(a1 + 64)) {
      uint64_t v46 = *(void *)(a1 + 40);
    }
    else {
      uint64_t v46 = 0LL;
    }
    (*(void (**)(uint64_t, __CFString *, uint64_t, void))(v45 + 16))( v45,  v12,  v46,  *(unsigned __int8 *)(a1 + 65));
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_53B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (IMOSLoggingEnabled(a1, a2))
  {
    uint64_t v8 = OSLogHandleForIMFoundationCategory("Attachments");
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v11 = 134218496;
      uint64_t v12 = a2;
      __int16 v13 = 2048;
      uint64_t v14 = a3;
      __int16 v15 = 2048;
      uint64_t v16 = a4;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_INFO,  "Send progress updated to %lld of %lld (%lld bps)",  (uint8_t *)&v11,  0x20u);
    }
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[IMDFileTransferCenter sharedInstance](&OBJC_CLASS___IMDFileTransferCenter, "sharedInstance"));
  [v10 updateTransfer:*(void *)(a1 + 32) currentBytes:a2 totalBytes:a3];
}

void sub_53C9C( uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, uint64_t a10)
{
  id v86 = a2;
  *(double *)&id v93 = COERCE_DOUBLE(a4);
  id v92 = a5;
  id value = a6;
  id v89 = a7;
  id v91 = a8;
  id v88 = a9;
  uint64_t v17 = kAttachmentsAutomationMilestoneEndSendingURL;
  v102[0] = kAttachmentsAutomationURLKey;
  uint64_t v18 = *(void *)(a1 + 32);
  uint64_t v19 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) path]);
  uint64_t v20 = (void *)v19;
  if (v19) {
    uint64_t v21 = (const __CFString *)v19;
  }
  else {
    uint64_t v21 = &stru_D8640;
  }
  v103[0] = v21;
  v102[1] = kAttachmentsAutomationSuccessKey;
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a3));
  v103[1] = v22;
  float v23 = v92;
  if (!v92) {
    float v23 = &stru_D8640;
  }
  v103[2] = v23;
  v102[2] = kAttachmentsAutomationAdditionalErrorInfoKey;
  v102[3] = kAttachmentsAutomationFileSizeKey;
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:"));
  v103[3] = v24;
  uint64_t v25 = v93;
  v102[4] = kAttachmentsAutomationErrorKey;
  v102[5] = kAttachmentsAutomationTransferGUIDKey;
  uint64_t v26 = *(const __CFString **)(a1 + 48);
  if (!v26) {
    uint64_t v26 = &stru_D8640;
  }
  v103[4] = v25;
  v103[5] = v26;
  id v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v103,  v102,  6LL));
  AttachmentsAutomationLogMilestone(v18, v17, v27);

  double v87 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) transferForGUID:*(void *)(a1 + 48)]));
  uint64_t v29 = IMOSLoggingEnabled(*(void *)&v87, v28);
  if ((a3 & 1) != 0)
  {
    if ((_DWORD)v29)
    {
      uint64_t v31 = OSLogHandleForIMEventCategory("Attachments");
      uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412802;
        double v97 = v87;
        __int16 v98 = 2112;
        uint64_t v99 = @"YES";
        __int16 v100 = 2112;
        uint64_t v101 = v93;
        _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_INFO,  "Finished uploading transfer: %@   success: %@  error: %@",  buf,  0x20u);
      }
    }

    if (IMOSLoggingEnabled(v29, v30))
    {
      uint64_t v33 = OSLogHandleForIMFoundationCategory("Attachments");
      id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
        double v36 = v35 - *(double *)(a1 + 104);
        *(_DWORD *)buf = 134217984;
        double v97 = v36;
        _os_log_impl(&dword_0, v34, OS_LOG_TYPE_INFO, "Time taken: %f", buf, 0xCu);
      }
    }

    __int16 v37 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  5LL);
    id v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "__imHexString"));
    if (v38) {
      CFDictionarySetValue((CFMutableDictionaryRef)v37, @"mmcs-signature-hex", v38);
    }

    if (value) {
      CFDictionarySetValue((CFMutableDictionaryRef)v37, @"mmcs-owner", value);
    }
    if (v91) {
      CFDictionarySetValue((CFMutableDictionaryRef)v37, @"mmcs-url", v91);
    }
    uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "__imHexString"));
    if (v39) {
      CFDictionarySetValue((CFMutableDictionaryRef)v37, @"decryption-key", v39);
    }

    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a10));
    if (v40) {
      CFDictionarySetValue((CFMutableDictionaryRef)v37, @"file-size", v40);
    }

    [*(id *)(a1 + 80) addObject:v37];
  }

  else
  {
    if ((_DWORD)v29)
    {
      uint64_t v41 = OSLogHandleForIMEventCategory("Attachments");
      uint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412802;
        double v97 = v87;
        __int16 v98 = 2112;
        uint64_t v99 = @"NO";
        __int16 v100 = 2112;
        uint64_t v101 = v93;
        _os_log_impl( &dword_0,  v42,  OS_LOG_TYPE_INFO,  "Failed uploading transfer: %@   success: %@  error: %@",  buf,  0x20u);
      }
    }

    uint64_t v43 = IMOSLoggingEnabled(v29, v30);
    if ((_DWORD)v43)
    {
      uint64_t v45 = OSLogHandleForIMFoundationCategory("Attachments");
      uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
      {
        double v47 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue([*(id *)&v87 transferDataURL]));
        *(_DWORD *)buf = 138412290;
        double v97 = v47;
        _os_log_impl(&dword_0, v46, OS_LOG_TYPE_INFO, "transfer data url: %@", buf, 0xCu);
      }
    }

    uint64_t v48 = IMOSLoggingEnabled(v43, v44);
    if ((_DWORD)v48)
    {
      uint64_t v50 = OSLogHandleForIMFoundationCategory("Attachments");
      uint64_t v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
      {
        +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
        double v53 = v52 - *(double *)(a1 + 104);
        *(_DWORD *)buf = 134217984;
        double v97 = v53;
        _os_log_impl(&dword_0, v51, OS_LOG_TYPE_INFO, "Time taken: %f", buf, 0xCu);
      }
    }

    if (*(_BYTE *)(a1 + 112))
    {
      id v54 = -[__CFString code](v93, "code");
      if (v54 == (id)-6LL)
      {
        id v55 = [*(id *)(a1 + 56) failTransfer:*(void *)(a1 + 48) reason:23];
      }

      else if (v54 == (id)-5LL)
      {
        id v55 = [*(id *)(a1 + 56) failTransfer:*(void *)(a1 + 48) reason:22];
      }

      else
      {
        id v55 = [*(id *)(a1 + 56) failTransfer:*(void *)(a1 + 48) error:v93];
      }

      if (IMOSLoggingEnabled(v55, v56))
      {
        uint64_t v59 = OSLogHandleForIMFoundationCategory("MMCS");
        id v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
        if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          double v97 = *(double *)&v93;
          _os_log_impl( &dword_0,  v60,  OS_LOG_TYPE_INFO,  "  setting complete success to NO because the smallest attachment failed. (Error: %@)",  buf,  0xCu);
        }
      }

      [*(id *)(a1 + 64) setFailed:1];
      [*(id *)(a1 + 64) setError:_FZErrorTypeFromNSError(v93)];
      [*(id *)(a1 + 72) setTransferError:v93];
      [*(id *)(a1 + 72) setAdditionalErrorInfo:v92];
      [*(id *)(a1 + 72) setErrorURLString:v91];
      [*(id *)(a1 + 72) setErrorFileSize:a10];
    }

    else if (IMOSLoggingEnabled(v48, v49))
    {
      uint64_t v57 = OSLogHandleForIMFoundationCategory("MMCS");
      BOOL v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        double v97 = *(double *)&v93;
        _os_log_impl( &dword_0,  v58,  OS_LOG_TYPE_INFO,  "  attachment failed to upload, but the smaller version hasn't failed yet. (Error: %@)",  buf,  0xCu);
      }
    }
  }

  if (*(void *)(a1 + 88))
  {
    uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    uint64_t v62 = *(void *)(a1 + 88);
    id v95 = 0LL;
    unsigned __int8 v63 = [v61 removeItemAtURL:v62 error:&v95];
    uint64_t v64 = (__CFString *)v95;

    if ((v63 & 1) == 0 && IMOSLoggingEnabled(v65, v66))
    {
      uint64_t v67 = OSLogHandleForIMFoundationCategory("MMCS");
      id v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
      if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
      {
        double v69 = *(double *)(a1 + 88);
        *(_DWORD *)buf = 138412546;
        double v97 = v69;
        __int16 v98 = 2112;
        uint64_t v99 = v64;
        _os_log_impl(&dword_0, v68, OS_LOG_TYPE_INFO, "Error cleaning up transcoded path: %@  error: %@", buf, 0x16u);
      }
    }

    uint64_t v70 = *(void *)(a1 + 88);
  }

  else
  {
    uint64_t v70 = 0LL;
  }

  if (([*(id *)(a1 + 40) isEqual:v70] & 1) != 0
    || (uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) path])) == 0)
  {
    uint64_t v79 = 0LL;
  }

  else
  {
    uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) path]);
    uint64_t v73 = IMSafeTemporaryDirectory();
    id v74 = (void *)objc_claimAutoreleasedReturnValue(v73);
    id v75 = (void *)objc_claimAutoreleasedReturnValue([v74 path]);
    if ([v72 hasPrefix:v75])
    {
      id v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
      id v77 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) path]);
      id v94 = 0LL;
      unsigned int v78 = [v76 removeItemAtPath:v77 error:&v94];
      uint64_t v79 = (__CFString *)v94;

      int v80 = v78 ^ 1;
    }

    else
    {
      uint64_t v79 = 0LL;
      int v80 = 0;
    }

    if (v80 && IMOSLoggingEnabled(v81, v82))
    {
      uint64_t v83 = OSLogHandleForIMFoundationCategory("Attachments");
      id v84 = (os_log_s *)objc_claimAutoreleasedReturnValue(v83);
      if (os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
      {
        double v85 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) path]));
        *(_DWORD *)buf = 138412546;
        double v97 = v85;
        __int16 v98 = 2112;
        uint64_t v99 = v79;
        _os_log_impl(&dword_0, v84, OS_LOG_TYPE_INFO, "Error cleaning up output path: %@  error: %@", buf, 0x16u);
      }
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 96));
}

void sub_54A28(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v45 = 0LL;
  uint64_t v46 = &v45;
  uint64_t v47 = 0x3032000000LL;
  uint64_t v48 = sub_4C558;
  uint64_t v49 = sub_4C568;
  id v50 = 0LL;
  uint64_t v39 = 0LL;
  uint64_t v40 = &v39;
  uint64_t v41 = 0x3032000000LL;
  uint64_t v42 = sub_4C558;
  uint64_t v43 = sub_4C568;
  id v44 = 0LL;
  uint64_t v33 = 0LL;
  id v34 = &v33;
  uint64_t v35 = 0x3032000000LL;
  double v36 = sub_4C558;
  __int16 v37 = sub_4C568;
  id v38 = 0LL;
  uint64_t v27 = 0LL;
  uint64_t v28 = &v27;
  uint64_t v29 = 0x3032000000LL;
  uint64_t v30 = sub_4C558;
  uint64_t v31 = sub_4C568;
  id v32 = 0LL;
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472LL;
  v26[2] = sub_54E2C;
  v26[3] = &unk_D6DB8;
  v26[4] = &v27;
  v26[5] = &v45;
  v26[6] = &v39;
  v26[7] = &v33;
  [v3 enumerateKeysAndObjectsUsingBlock:v26];
  id v4 = [(id)v40[5] length];
  if (v4
    && (id v4 = [(id)v34[5] length]) != 0
    && (id v4 = [(id)v46[5] length]) != 0
    && (id v4 = [(id)v28[5] length]) != 0)
  {
    uint64_t v6 = v46[5];
    v59[0] = @"t";
    v59[1] = @"sT";
    uint64_t v7 = v40[5];
    v60[0] = v6;
    v60[1] = v7;
    v60[2] = v34[5];
    v59[2] = @"sI";
    v59[3] = @"sP";
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = IMChatCanonicalIDSIDsForAddress(*(void *)(a1 + 32));
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v59[4] = @"tP";
    uint64_t v11 = v28[5];
    v60[3] = v10;
    v60[4] = v11;
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v60,  v59,  5LL));
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v12);

    if (IMOSLoggingEnabled(v13, v14))
    {
      uint64_t v15 = OSLogHandleForIMFoundationCategory("Attachments");
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        uint64_t v17 = v46[5];
        uint64_t v18 = v40[5];
        uint64_t v19 = v34[5];
        *(_DWORD *)buf = 138412802;
        uint64_t v52 = v17;
        __int16 v53 = 2112;
        uint64_t v54 = v18;
        __int16 v55 = 2112;
        uint64_t v56 = v19;
        _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_INFO,  "-sessionInfoForBusinessReceipients:completion: found session info for business pushToken %@, sessionToken %@ a nd anonymizedSenderID %@",  buf,  0x20u);
      }
    }
  }

  else
  {
    if (IMOSLoggingEnabled(v4, v5))
    {
      uint64_t v20 = OSLogHandleForIMFoundationCategory("Attachments");
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        uint64_t v22 = v28[5];
        uint64_t v23 = v46[5];
        uint64_t v24 = v40[5];
        uint64_t v25 = v34[5];
        *(_DWORD *)buf = 138413058;
        uint64_t v52 = v22;
        __int16 v53 = 2112;
        uint64_t v54 = v23;
        __int16 v55 = 2112;
        uint64_t v56 = v24;
        __int16 v57 = 2112;
        uint64_t v58 = v25;
        _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_INFO,  "-sessionInfoForBusinessReceipients:completion: did not find session info for destinationID %@. pushToken %@ se ssionToken %@ and anonymizedSenderID %@",  buf,  0x2Au);
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  _Block_object_dispose(&v27, 8);

  _Block_object_dispose(&v33, 8);
  _Block_object_dispose(&v39, 8);

  _Block_object_dispose(&v45, 8);
}

id sub_54E2C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_54E90;
  v6[3] = &unk_D6D90;
  __int128 v4 = *(_OWORD *)(a1 + 48);
  __int128 v7 = *(_OWORD *)(a1 + 32);
  __int128 v8 = v4;
  uint64_t v9 = a4;
  return [a3 enumerateObjectsUsingBlock:v6];
}

void sub_54E90(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6 = a2;
  __int128 v7 = (void *)objc_claimAutoreleasedReturnValue([v6 URI]);
  uint64_t v8 = objc_claimAutoreleasedReturnValue([v7 prefixedURI]);
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  if (IMStringIsBusinessID(*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL)))
  {
    uint64_t v11 = objc_claimAutoreleasedReturnValue([v6 pushToken]);
    uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    uint64_t v14 = objc_claimAutoreleasedReturnValue([v6 sessionToken]);
    uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;

    uint64_t v17 = objc_claimAutoreleasedReturnValue([v6 anonymizedSenderID]);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8LL);
    uint64_t v19 = *(void **)(v18 + 40);
    *(void *)(v18 + 40) = v17;

    **(_BYTE **)(a1 + 64) = 1;
    *a4 = 1;
    if (IMOSLoggingEnabled(v20, v21))
    {
      uint64_t v22 = OSLogHandleForIMFoundationCategory("Attachments");
      uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        uint64_t v24 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
        int v25 = 138412546;
        id v26 = v6;
        __int16 v27 = 2112;
        uint64_t v28 = v24;
        _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_INFO,  "-sessionInfoForBusinessReceipients:completion: returned YES and found session info for business endpoint %@ an d anonymizedSenderID %@",  (uint8_t *)&v25,  0x16u);
      }
    }
  }
}

void sub_556B0(uint64_t a1, void *a2, void *a3, void *a4, void *a5, int a6, int a7, void *a8)
{
  id v15 = a2;
  id v16 = a3;
  id v17 = a4;
  id v18 = a5;
  id v19 = a8;
  if (IMOSLoggingEnabled(v19, v20))
  {
    uint64_t v21 = OSLogHandleForIMFoundationCategory("MessageAttachmentController");
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      uint64_t v23 = @"NO";
      int v30 = 138413314;
      id v31 = v15;
      if (a6) {
        uint64_t v24 = @"YES";
      }
      else {
        uint64_t v24 = @"NO";
      }
      if (a7) {
        uint64_t v23 = @"YES";
      }
      __int16 v32 = 2112;
      id v33 = v16;
      __int16 v34 = 2112;
      id v35 = v18;
      __int16 v36 = 2112;
      __int16 v37 = v24;
      __int16 v38 = 2112;
      uint64_t v39 = v23;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_INFO,  "transcoded URL {transferURL: %@, outputURLs: %@, error: %@, success: %@, attemptedTranscode: %@}",  (uint8_t *)&v30,  0x34u);
    }
  }

  if (a6)
  {
    if (a7)
    {
      int v25 = (void *)objc_claimAutoreleasedReturnValue([v16 lastObject]);
      BOOL v26 = v25 == 0LL;

      if (!v26)
      {
        __int16 v27 = *(void **)(a1 + 32);
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v16 lastObject]);
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) guid]);
        [v27 setObject:v28 forKey:v29];
      }
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_5589C(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  uint64_t v5 = v3;
  if (v2)
  {
    if (v3) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) balloonBundleID]);
    goto LABEL_3;
  }

  if (IMOSLoggingEnabled(v3, v4))
  {
    uint64_t v9 = OSLogHandleForIMFoundationCategory("MessageAttachmentController");
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_0, v10, OS_LOG_TYPE_INFO, "sending msg with payload data", buf, 2u);
    }
  }

  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) payloadData]);
  if (!v5) {
    goto LABEL_9;
  }
LABEL_3:
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) fileTransferGUIDs]);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_55AC0;
  void v18[3] = &unk_D6E30;
  id v19 = *(id *)(a1 + 56);
  __int128 v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "__imArrayByApplyingBlock:", v18));

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[MessageTranscodeController sharedInstance]( &OBJC_CLASS___MessageTranscodeController,  "sharedInstance"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_55B00;
  v11[3] = &unk_D6E58;
  v11[4] = *(void *)(a1 + 64);
  id v12 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 72);
  id v14 = *(id *)(a1 + 80);
  id v15 = *(id *)(a1 + 88);
  char v17 = *(_BYTE *)(a1 + 104);
  id v16 = *(id *)(a1 + 96);
  [v8 transcodePayloadData:v2 balloonBundleID:v5 attachments:v7 completionBlock:v11];
}

id sub_55AC0(uint64_t a1, uint64_t a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transferForGUID:a2]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 localPath]);

  return v3;
}

id sub_55B00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  LOBYTE(v7) = a5;
  return [*(id *)(a1 + 32) handleTranscodeCompletionBlockForMessage:*(void *)(a1 + 40) displayIDs:*(void *)(a1 + 48) additionalContext:*(void *)(a1 + 56) attemptedTranscode:a6 transcodedTransferGU IDs:*(void *)(a1 + 64) containsAutoLoopVideo:*(unsigned __int8 *)(a1 + 80) outputURLs:a2 text:a3 success:v7 error:a4 completionBlock:*(void *)(a1 + 72)];
}

void sub_56534(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x55F08LL);
  }

  _Unwind_Resume(a1);
}

LABEL_165:
        _Block_object_dispose(&v207, 8);
        _Block_object_dispose(&v211, 8);

        _Block_object_dispose(v225, 8);
        goto LABEL_166;
      }

      if (IMOSLoggingEnabled(v141, v142))
      {
        v145 = OSLogHandleForIMFoundationCategory("Attachments");
        int v146 = (os_log_s *)objc_claimAutoreleasedReturnValue(v145);
        if (os_log_type_enabled(v146, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t v219 = 0;
          _os_log_impl( &dword_0,  v146,  OS_LOG_TYPE_INFO,  "   We don't have all the attachments yet, we'll just re-download.",  v219,  2u);
        }
      }
    }

    v184[0] = _NSConcreteStackBlock;
    v184[1] = 3221225472LL;
    v184[2] = sub_581DC;
    v184[3] = &unk_D6F70;
    uint64_t v185 = (NSError *)v177;
    id v186 = v181;
    uint64_t v187 = v169;
    v188 = self;
    uint64_t v197 = a8;
    uint64_t v192 = &v211;
    uint64_t v193 = &v207;
    id v194 = &v215;
    id v189 = v168;
    uint64_t v198 = a7;
    BOOL v190 = v166;
    p_buf = &buf;
    id v196 = v225;
    uint64_t v191 = v167;
    uint64_t v147 = objc_retainBlock(v184);
    uint64_t v148 = IMIsRunningInUnitTesting();
    if ((v148 & 1) != 0
      || (uint64_t v150 = (void *)objc_claimAutoreleasedReturnValue(+[FTUserConfiguration sharedInstance](&OBJC_CLASS___FTUserConfiguration, "sharedInstance")),
          id v151 = [v150 allowAnyNetwork],
          v150,
          (v151 & 1) != 0))
    {
      if (IMOSLoggingEnabled(v148, v149))
      {
        id v152 = OSLogHandleForIMFoundationCategory("Attachments");
        unint64_t v153 = (os_log_s *)objc_claimAutoreleasedReturnValue(v152);
        if (os_log_type_enabled(v153, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t v219 = 0;
          _os_log_impl(&dword_0, v153, OS_LOG_TYPE_INFO, "Allowing any network, bypassing check", v219, 2u);
        }
      }

      ((void (*)(void *, void))v147[2])(v147, 0LL);
    }

    else
    {
      if (IMOSLoggingEnabled(v148, v149))
      {
        uint64_t v154 = OSLogHandleForIMEventCategory("Attachments");
        uint64_t v155 = (os_log_s *)objc_claimAutoreleasedReturnValue(v154);
        if (os_log_type_enabled(v155, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t v219 = 0;
          _os_log_impl(&dword_0, v155, OS_LOG_TYPE_INFO, "Starting network availablity check...", v219, 2u);
        }
      }

      uint64_t v156 = (void *)objc_claimAutoreleasedReturnValue(+[IMSystemMonitor sharedInstance](&OBJC_CLASS___IMSystemMonitor, "sharedInstance"));
      uint64_t v157 = [v156 isScreenLit];

      int v158 = objc_alloc(&OBJC_CLASS___IMNetworkAvailability);
      if (v157) {
        uint64_t v159 = 0LL;
      }
      else {
        uint64_t v159 = 9LL;
      }
      v182[0] = _NSConcreteStackBlock;
      v182[1] = 3221225472LL;
      v182[2] = sub_5C74C;
      v182[3] = &unk_D6F98;
      id v183 = v147;
      double v160 = [v158 initWithFlags:3 options:v159 timeout:v182 wifiTimeout:20.0 completionBlock:5.0];
      [v160 start];
    }

    unsigned int v170 = v185;
    goto LABEL_165;
  }

LABEL_128:
  if (IMOSLoggingEnabled(v23, v24))
  {
    id v134 = OSLogHandleForIMEventCategory("Attachments");
    unsigned __int8 v135 = (os_log_s *)objc_claimAutoreleasedReturnValue(v134);
    if (os_log_type_enabled(v135, OS_LOG_TYPE_INFO))
    {
      uint64_t v136 = (void *)objc_claimAutoreleasedReturnValue([v177 fileTransferGUIDs]);
      id v137 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v136 count]));
      __int16 v138 = objc_claimAutoreleasedReturnValue([v177 balloonBundleID]);
      id v139 = (void *)v138;
      unsigned int v140 = @"NO";
      *(_DWORD *)uint64_t v225 = 138412802;
      *(void *)&v225[4] = v137;
      *(_WORD *)&v225[12] = 2112;
      if (v14) {
        unsigned int v140 = @"YES";
      }
      *(void *)&v225[14] = v138;
      *(_WORD *)&v225[22] = 2112;
      id v226 = v140;
      _os_log_impl( &dword_0,  v135,  OS_LOG_TYPE_INFO,  "Not downloading attachments, transfer count:%@, bundle ID:%@ isUnderFirstDataProtectionLock %@",  v225,  0x20u);
    }
  }

  if (v167)
  {
    kdebug_trace(733872156LL, 0LL, 0LL, 0LL, 0LL);
    (*((void (**)(id, id, id, uint64_t, void, void, uint64_t, void, void))v167 + 2))( v167,  v177,  v169,  1LL,  0LL,  0LL,  v216[3],  *(void *)(*((void *)&buf + 1) + 40LL),  0LL);
  }

LABEL_166:
  _Block_object_dispose(&buf, 8);
  _Block_object_dispose(&v215, 8);
}

void sub_581DC(uint64_t a1)
{
  group = dispatch_group_create();
  if (IMOSLoggingEnabled(group, v1))
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory("Attachments");
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fileTransferGUIDs]);
      *(_DWORD *)buf = 138412290;
      id v247 = v4;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_INFO, "Checking message file tranfers: %@", buf, 0xCu);
    }
  }

  uint64_t v159 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  __int128 v244 = 0u;
  __int128 v245 = 0u;
  __int128 v242 = 0u;
  __int128 v243 = 0u;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fileTransferGUIDs]);
  id v7 = [v6 countByEnumeratingWithState:&v242 objects:v259 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v243;
    do
    {
      for (i = 0LL; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v243 != v8) {
          objc_enumerationMutation(v6);
        }
        uint64_t v10 = *(void *)(*((void *)&v242 + 1) + 8LL * (void)i);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[IMDFileTransferCenter sharedInstance](&OBJC_CLASS___IMDFileTransferCenter, "sharedInstance"));
        id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 transferForGUID:v10]);

        if (v12)
        {
          -[NSMutableSet addObject:](v5, "addObject:", v10);
          id v15 = [v12 isAuxImage];
          if ((_DWORD)v15)
          {
            if (IMOSLoggingEnabled(v15, v16))
            {
              uint64_t v17 = OSLogHandleForIMFoundationCategory("Attachments");
              id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
              if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412290;
                id v247 = v12;
                _os_log_impl(&dword_0, v18, OS_LOG_TYPE_INFO, "transfer %@ is Aux image", buf, 0xCu);
              }
            }

            id v19 = (void *)objc_claimAutoreleasedReturnValue( +[IMFileTransfer AuxGUIDFromFileTransferGUID:]( &OBJC_CLASS___IMFileTransfer,  "AuxGUIDFromFileTransferGUID:",  v10));
            uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[IMDFileTransferCenter sharedInstance]( &OBJC_CLASS___IMDFileTransferCenter,  "sharedInstance"));
            uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 transferForGUID:v19]);

            if (v21
              && (id v22 = +[IMDAttachmentUtilities isPreviewAttachmentSizeEnabled]( &OBJC_CLASS___IMDAttachmentUtilities,  "isPreviewAttachmentSizeEnabled"),  !(_DWORD)v22))
            {
              -[NSMutableSet addObject:](v5, "addObject:", v19);
            }

            else
            {
              if (IMOSLoggingEnabled(v22, v23))
              {
                uint64_t v24 = OSLogHandleForIMFoundationCategory("Attachments");
                int v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
                if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
                {
                  unsigned int v26 = +[IMDAttachmentUtilities isPreviewAttachmentSizeEnabled]( &OBJC_CLASS___IMDAttachmentUtilities,  "isPreviewAttachmentSizeEnabled");
                  *(_DWORD *)buf = 138412546;
                  __int16 v27 = @"YES";
                  if (!v26) {
                    __int16 v27 = @"NO";
                  }
                  id v247 = v21;
                  __int16 v248 = 2112;
                  uint64_t v249 = (void *)v27;
                  _os_log_impl(&dword_0, v25, OS_LOG_TYPE_INFO, "Did not find Aux video transfer %@ %@", buf, 0x16u);
                }
              }

              [v12 setIsAuxImage:0];
              [v12 setAuxStateWasDowngraded:1];
            }
          }
        }

        else if (IMOSLoggingEnabled(v13, v14))
        {
          uint64_t v28 = OSLogHandleForIMFoundationCategory("Warning");
          uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            id v247 = 0LL;
            _os_log_impl(&dword_0, v29, OS_LOG_TYPE_INFO, "Did not find transfer for guid %@", buf, 0xCu);
          }
        }
      }

      id v7 = [v6 countByEnumeratingWithState:&v242 objects:v259 count:16];
    }

    while (v7);
  }

  theArray = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  if (-[NSMutableSet count](v5, "count"))
  {
    unint64_t v30 = 0LL;
    do
    {
      if (theArray)
      {
        id v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
        BOOL v32 = v31 == 0LL;

        if (!v32)
        {
          id v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
          CFArrayAppendValue((CFMutableArrayRef)theArray, v33);
        }
      }

      ++v30;
    }

    while (v30 < (unint64_t)-[NSMutableSet count](v5, "count"));
  }

  __int16 v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
  uint64_t v35 = kAttachmentsAutomationMilestoneBeginReceivingMessage;
  v257[0] = kAttachmentsAutomationMessageGUIDKey;
  uint64_t v36 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
  __int16 v37 = (void *)v36;
  v257[1] = kAttachmentsAutomationTransferGUIDsKey;
  __int16 v38 = (NSMutableSet *)&__NSArray0__struct;
  if (v5) {
    __int16 v38 = v5;
  }
  v258[0] = v36;
  v258[1] = v38;
  uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v258,  v257,  2LL));
  AttachmentsAutomationLogMilestoneWithOptionFlags(v34, v35, v39, 1LL);

  uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) payloadData]);
  id v169 = [v40 length];

  int v158 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  v240[0] = 0LL;
  v240[1] = v240;
  v240[2] = 0x3032000000LL;
  v240[3] = sub_4C558;
  v240[4] = sub_4C568;
  id v241 = 0LL;
  __int128 v236 = 0u;
  __int128 v237 = 0u;
  __int128 v238 = 0u;
  __int128 v239 = 0u;
  uint64_t v41 = v5;
  id v42 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v41,  "countByEnumeratingWithState:objects:count:",  &v236,  v256,  16LL);
  id v44 = v42;
  if (v42)
  {
    id obj = v41;
    uint64_t v180 = 0LL;
    char v45 = 0;
    uint64_t v168 = *(void *)v237;
    while (1)
    {
      uint64_t v46 = 0LL;
      id v171 = v44;
      do
      {
        if (*(void *)v237 != v168) {
          objc_enumerationMutation(obj);
        }
        uint64_t v47 = *(void **)(*((void *)&v236 + 1) + 8 * v46);
        if (IMOSLoggingEnabled(v42, v43))
        {
          uint64_t v48 = v46;
          uint64_t v49 = OSLogHandleForIMFoundationCategory("Attachmets");
          id v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
          if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            id v247 = v47;
            _os_log_impl(&dword_0, v50, OS_LOG_TYPE_INFO, "About to download transfer guid %@", buf, 0xCu);
          }

          uint64_t v46 = v48;
        }

        uint64_t v187 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) transferForGUID:v47]);
        if (v169) {
          [v187 setHideAttachment:1];
        }
        uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([v187 userInfo]);
        uint64_t v179 = v46;
        uint64_t v52 = objc_claimAutoreleasedReturnValue([v51 _stringForKey:@"inline-attachment"]);
        uint64_t v54 = (void *)v52;
        if (v187) {
          BOOL v55 = v52 == 0;
        }
        else {
          BOOL v55 = 0;
        }
        uint64_t v191 = v51;
        if (!v55)
        {
          if (IMOSLoggingEnabled(v52, v53))
          {
            uint64_t v56 = OSLogHandleForIMFoundationCategory("Warning");
            __int16 v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
            if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              id v247 = v47;
              _os_log_impl(&dword_0, v57, OS_LOG_TYPE_INFO, "No transfer found for guid: %@", buf, 0xCu);
            }
          }

          goto LABEL_162;
        }

        dispatch_group_enter(group);
        uint64_t v58 = *(void **)(a1 + 40);
        uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountID]);
        [v58 assignTransfer:v47 toAccount:v59 otherPerson:*(void *)(a1 + 48)];
        uint64_t v172 = v47;
        uint64_t v167 = v54;

        int v176 = -[NSMutableArray initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableArray), "initWithCapacity:", 1LL);
        id v177 = -[NSMutableArray initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableArray), "initWithCapacity:", 1LL);
        id v175 = -[NSMutableArray initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableArray), "initWithCapacity:", 1LL);
        uint64_t v178 = -[NSMutableArray initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableArray), "initWithCapacity:", 1LL);
        id v174 = -[NSMutableArray initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableArray), "initWithCapacity:", 1LL);
        uint64_t v173 = -[NSMutableArray initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableArray), "initWithCapacity:", 1LL);
        uint64_t v232 = 0LL;
        v233 = &v232;
        uint64_t v234 = 0x2020000000LL;
        char v235 = 0;
        id v60 = (void *)objc_claimAutoreleasedReturnValue([v51 _stringForKey:@"mmcs-url"]);
        uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue([v51 _stringForKey:@"mmcs-signature-hex"]);
        uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue([v51 _stringForKey:@"mmcs-owner"]);
        unsigned __int8 v63 = (void *)objc_claimAutoreleasedReturnValue([v51 objectForKey:@"file-size"]);
        v188 = (void *)objc_claimAutoreleasedReturnValue([v63 stringValue]);

        uint64_t v185 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([v51 _stringForKey:@"decryption-key"]);
        v181 = (void *)objc_claimAutoreleasedReturnValue([v187 type]);
        BOOL v183 = v60 != 0LL;
        unsigned int v182 = +[IMDAttachmentUtilities shouldEnablePreviewTranscodingQualityForTransfer:isSending:]( &OBJC_CLASS___IMDAttachmentUtilities,  "shouldEnablePreviewTranscodingQualityForTransfer:isSending:",  v187,  0LL);
        id v186 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 56),  "_downloadRestrictionForUTIType:fileSize:qualityType:isSticker:forceAutoDownloadIfPossible:lqmEnabled:",  v181,  objc_msgSend(v188, "integerValue"),  1,  objc_msgSend(v187, "isSticker"),  *(unsigned __int8 *)(a1 + 128),  v182));
        id v64 = [v186 allowDownload];
        *((_BYTE *)v233 + 24) = (_BYTE)v64;
        if ((v64 ^ 1 | v182) == 1)
        {
          if (IMOSLoggingEnabled(v64, v65))
          {
            uint64_t v66 = OSLogHandleForIMFoundationCategory("MessageService");
            uint64_t v67 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
            if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
            {
              id v68 = @"YES";
              if (*((_BYTE *)v233 + 24)) {
                double v69 = @"YES";
              }
              else {
                double v69 = @"NO";
              }
              if (!v182) {
                id v68 = @"NO";
              }
              *(_DWORD *)buf = 138412546;
              id v247 = (id)v69;
              __int16 v248 = 2112;
              uint64_t v249 = (void *)v68;
              _os_log_impl( &dword_0,  v67,  OS_LOG_TYPE_INFO,  "The first file wasn't allowed to auto download, let's look and see what we have... shouldAutoDownloadFil e %@, lowQualityModeEnabled %@",  buf,  0x16u);
            }
          }

          uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v188 integerValue]));
          [v186 collectMetricsForLimitExceededWithReportedSize:v70];

          uint64_t v71 = -9LL;
          while (1)
          {
            uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%d",  @"mmcs-url",  v71 + 10));
            id v189 = (void *)objc_claimAutoreleasedReturnValue([v191 _stringForKey:v72]);

            uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%d",  @"mmcs-signature-hex",  v71 + 10));
            BOOL v190 = (void *)objc_claimAutoreleasedReturnValue([v191 _stringForKey:v73]);

            id v74 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%d",  @"mmcs-owner",  v71 + 10));
            id v75 = (void *)objc_claimAutoreleasedReturnValue([v191 _stringForKey:v74]);

            id v76 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%d",  @"decryption-key",  v71 + 10));
            id v77 = (void *)objc_claimAutoreleasedReturnValue([v191 _stringForKey:v76]);

            unsigned int v78 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%d",  @"file-size",  v71 + 10));
            uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue([v191 objectForKey:v78]);
            int v80 = (void *)objc_claimAutoreleasedReturnValue([v79 stringValue]);

            if (!v77 || !v75 || !v190 || !v189)
            {

              goto LABEL_105;
            }

            id v83 = 0LL;
            if (!v80 || !v188) {
              goto LABEL_91;
            }
            id v83 = (id)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 56),  "_downloadRestrictionForUTIType:fileSize:qualityType:isSticker:lqmEnabled:",  v181,  objc_msgSend(v80, "integerValue"),  2,  objc_msgSend(v187, "isSticker"),  v182));
            unsigned __int8 v84 = [v83 allowDownload];
            *((_BYTE *)v233 + 24) = v84;
            if ((v84 & 1) != 0
              || (double v85 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v80 integerValue])),  objc_msgSend(v83, "collectMetricsForLimitExceededWithReportedSize:", v85),  v85,  *((_BYTE *)v233 + 24)))
            {
              [v80 floatValue];
              float v89 = v88;
              id v86 = [v188 floatValue];
              if (v89 <= v90) {
                break;
              }
            }

            if (IMOSLoggingEnabled(v86, v87))
            {
              uint64_t v91 = OSLogHandleForIMFoundationCategory("MessageService");
              id v92 = (os_log_s *)objc_claimAutoreleasedReturnValue(v91);
              if (os_log_type_enabled(v92, OS_LOG_TYPE_INFO))
              {
                id v93 = @"YES";
                if (!*((_BYTE *)v233 + 24)) {
                  id v93 = @"NO";
                }
                *(_DWORD *)buf = 138412802;
                id v247 = v80;
                __int16 v248 = 2112;
                uint64_t v249 = v188;
                __int16 v250 = 2112;
                id v251 = (void *)v93;
                _os_log_impl( &dword_0,  v92,  OS_LOG_TYPE_INFO,  "Ignoring this file, still not allowed to auto download (localFileSizeString: %@), (fileSizeString:%@), shouldAutoDownload:%@ ",  buf,  0x20u);
              }
            }

            BOOL v183 = 1;
LABEL_96:

            if (__CFADD__(v71++, 1LL)) {
              goto LABEL_105;
            }
          }

          uint64_t v81 = IMOSLoggingEnabled(v86, v87);
          if ((_DWORD)v81)
          {
            uint64_t v94 = OSLogHandleForIMFoundationCategory("MessageService");
            id v95 = (os_log_s *)objc_claimAutoreleasedReturnValue(v94);
            if (os_log_type_enabled(v95, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412546;
              id v247 = v80;
              __int16 v248 = 2112;
              uint64_t v249 = v188;
              _os_log_impl( &dword_0,  v95,  OS_LOG_TYPE_INFO,  "Taking this file, we're good to grab it (this: %@ vs fileSizeString: %@)",  buf,  0x16u);
            }
          }

          BOOL v183 = 1;
LABEL_91:
          if (IMOSLoggingEnabled(v81, v82))
          {
            uint64_t v96 = OSLogHandleForIMFoundationCategory("MessageService");
            double v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(v96);
            if (os_log_type_enabled(v97, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412546;
              id v247 = v61;
              __int16 v248 = 2112;
              uint64_t v249 = v188;
              _os_log_impl(&dword_0, v97, OS_LOG_TYPE_INFO, " => Assigning this one: %@ fileSize: %@", buf, 0x16u);
            }
          }

          id v98 = v189;

          id v99 = v190;
          id v100 = v75;

          id v101 = v80;
          id v102 = v77;

          id v83 = v83;
          id v103 = v99;
          id v60 = v98;
          v188 = v101;
          uint64_t v62 = v100;
          uint64_t v185 = v102;
          id v186 = v83;
          uint64_t v61 = v103;
          goto LABEL_96;
        }

        uint64_t v104 = IMOSLoggingEnabled(v64, v65);
        if ((_DWORD)v104)
        {
          uint64_t v107 = OSLogHandleForIMFoundationCategory("MessageService");
          double v108 = (os_log_s *)objc_claimAutoreleasedReturnValue(v107);
          if (os_log_type_enabled(v108, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            id v247 = v188;
            _os_log_impl( &dword_0,  v108,  OS_LOG_TYPE_INFO,  "Grabbing the largest file we can find (size: %@)",  buf,  0xCu);
          }
        }

        BOOL v183 = 1;
LABEL_105:
        uint64_t v109 = IMOSLoggingEnabled(v104, v105);
        if ((_DWORD)v109)
        {
          uint64_t v111 = OSLogHandleForIMFoundationCategory("MessageService");
          id v112 = (os_log_s *)objc_claimAutoreleasedReturnValue(v111);
          if (os_log_type_enabled(v112, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            id v247 = v188;
            _os_log_impl(&dword_0, v112, OS_LOG_TYPE_INFO, "Will download file of size %@ ", buf, 0xCu);
          }
        }

        if (v183 && v60 != 0LL)
        {
          if ((!v61 || !v62 || !v188 || !v185) && IMOSLoggingEnabled(v109, v110))
          {
            uint64_t v113 = OSLogHandleForIMFoundationCategory("Warning");
            uint64_t v114 = (os_log_s *)objc_claimAutoreleasedReturnValue(v113);
            if (os_log_type_enabled(v114, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138413058;
              id v247 = v61;
              __int16 v248 = 2112;
              uint64_t v249 = v62;
              __int16 v250 = 2112;
              id v251 = v188;
              __int16 v252 = 2112;
              v253 = v185;
              _os_log_impl( &dword_0,  v114,  OS_LOG_TYPE_INFO,  "MessageService: Attachment download context is missing entries (signature = %@, ownerID = %@, fileSizeSt ring = %@, encryptionKey = %@)",  buf,  0x2Au);
            }
          }

          -[NSMutableArray addObject:](v176, "addObject:", v60);
          __int16 v115 = v61;
          if (!v61)
          {
            v164 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
            __int16 v115 = v164;
          }

          -[NSMutableArray addObject:](v177, "addObject:", v115);
          if (!v61) {

          }
          id v116 = v62;
          if (!v62)
          {
            id v163 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
            id v116 = v163;
          }

          -[NSMutableArray addObject:](v175, "addObject:", v116);
          if (!v62) {

          }
          __int16 v117 = v188;
          if (!v188)
          {
            uint64_t v162 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
            __int16 v117 = v162;
          }

          -[NSMutableArray addObject:](v178, "addObject:", v117);
          if (!v188) {

          }
          uint64_t v118 = v185;
          if (!v185)
          {
            double v161 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
            uint64_t v118 = v161;
          }

          -[NSMutableArray addObject:](v174, "addObject:", v118);
          if (!v185) {

          }
          __int128 v119 = v186;
          if (!v186)
          {
            double v160 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
            __int128 v119 = v160;
          }

          -[NSMutableArray addObject:](v173, "addObject:", v119);
          if (!v186) {
        }
          }

        if (v183)
        {
          uint64_t v122 = IMOSLoggingEnabled(v120, v121);
          __int128 v124 = v172;
          if ((_DWORD)v122)
          {
            uint64_t v125 = OSLogHandleForIMFoundationCategory("MessageService");
            __int128 v126 = (os_log_s *)objc_claimAutoreleasedReturnValue(v125);
            if (os_log_type_enabled(v126, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              id v247 = v177;
              _os_log_impl(&dword_0, v126, OS_LOG_TYPE_INFO, " => Settled on signatures: %@", buf, 0xCu);
            }

            __int128 v124 = v172;
          }

          uint64_t v127 = IMOSLoggingEnabled(v122, v123);
          if ((_DWORD)v127)
          {
            uint64_t v129 = OSLogHandleForIMFoundationCategory("Attachments");
            id v130 = (os_log_s *)objc_claimAutoreleasedReturnValue(v129);
            if (os_log_type_enabled(v130, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              id v247 = v187;
              _os_log_impl(&dword_0, v130, OS_LOG_TYPE_INFO, " transfer: %@", buf, 0xCu);
            }

            __int128 v124 = v172;
          }

          uint64_t v131 = IMOSLoggingEnabled(v127, v128);
          if ((_DWORD)v131)
          {
            uint64_t v133 = OSLogHandleForIMFoundationCategory("Attachments");
            id v134 = (os_log_s *)objc_claimAutoreleasedReturnValue(v133);
            if (os_log_type_enabled(v134, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              id v247 = v191;
              _os_log_impl(&dword_0, v134, OS_LOG_TYPE_INFO, "    user info: %@", buf, 0xCu);
            }

            __int128 v124 = v172;
          }

          if (IMOSLoggingEnabled(v131, v132))
          {
            uint64_t v135 = OSLogHandleForIMFoundationCategory("Attachments");
            uint64_t v136 = (os_log_s *)objc_claimAutoreleasedReturnValue(v135);
            if (os_log_type_enabled(v136, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138413314;
              id v247 = v176;
              __int16 v248 = 2112;
              uint64_t v249 = v175;
              __int16 v250 = 2112;
              id v251 = v177;
              __int16 v252 = 2112;
              v253 = v174;
              __int16 v254 = 2112;
              uint64_t v255 = v178;
              _os_log_impl( &dword_0,  v136,  OS_LOG_TYPE_INFO,  " urlStrings: %@   owners: %@    signatures: %@  keys: %@  fileSizeStrings: %@",  buf,  0x34u);
            }

            __int128 v124 = v172;
          }

          id v137 = (void *)objc_claimAutoreleasedReturnValue(+[IMDStickerRegistry sharedInstance](&OBJC_CLASS___IMDStickerRegistry, "sharedInstance"));
          __int16 v138 = (void *)objc_claimAutoreleasedReturnValue([v187 stickerUserInfo]);
          id v139 = [v187 isAdaptiveImageGlyph];
          v204[0] = _NSConcreteStackBlock;
          v204[1] = 3221225472LL;
          v204[2] = sub_59C7C;
          v204[3] = &unk_D6EF8;
          id v205 = v187;
          id v206 = *(id *)(a1 + 64);
          id v207 = *(id *)(a1 + 40);
          unsigned int v140 = group;
          uint64_t v222 = &v232;
          char v229 = 0;
          uint64_t v208 = v140;
          uint64_t v209 = v124;
          id v141 = *(id *)(a1 + 32);
          uint64_t v142 = *(void *)(a1 + 56);
          id v210 = v141;
          uint64_t v211 = v142;
          uint64_t v228 = v180;
          char v230 = *(_BYTE *)(a1 + 129);
          id v212 = theArray;
          uint64_t v213 = v176;
          uint64_t v214 = v175;
          id v215 = v178;
          uint64_t v216 = v177;
          BOOL v217 = v174;
          uint64_t v218 = v173;
          id v219 = *(id *)(a1 + 72);
          id v143 = v158;
          uint64_t v144 = *(void *)(a1 + 88);
          uint64_t v145 = *(void *)(a1 + 96);
          id v220 = v143;
          uint64_t v223 = v144;
          uint64_t v146 = *(void *)(a1 + 104);
          uint64_t v224 = *(void *)(a1 + 112);
          uint64_t v225 = v145;
          id v226 = v240;
          uint64_t v227 = v146;
          char v231 = 0;
          uint64_t v221 = v159;
          [v137 retrieveStickerWithProperties:v138 isAdaptiveImageGlyph:v139 completionBlock:v204];
        }

        else
        {
          if (IMOSLoggingEnabled(v120, v121))
          {
            uint64_t v147 = OSLogHandleForIMFoundationCategory("MessageService");
            uint64_t v148 = (os_log_s *)objc_claimAutoreleasedReturnValue(v147);
            if (os_log_type_enabled(v148, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( &dword_0,  v148,  OS_LOG_TYPE_INFO,  " => No signature found, nothing to download here",  buf,  2u);
            }
          }

          uint64_t v149 = *(void **)(a1 + 40);
          uint64_t v150 = (void *)objc_claimAutoreleasedReturnValue([v187 guid]);
          [v149 failTransfer:v150 error:0];

          *(_BYTE *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL) = 0;
          *(_DWORD *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 24LL) = 35;
          id v151 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray firstObject](v178, "firstObject"));
          *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) = [v151 integerValue];

          dispatch_group_leave(group);
        }

        _Block_object_dispose(&v232, 8);

        char v45 = 1;
        uint64_t v54 = v167;
LABEL_162:

        ++v180;
        uint64_t v46 = v179 + 1;
      }

      while ((id)(v179 + 1) != v171);
      id v42 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v236,  v256,  16LL);
      id v44 = v42;
      if (!v42)
      {

        if ((v45 & 1) != 0)
        {
          id v152 = &_dispatch_main_q;
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472LL;
          block[2] = sub_5C1F4;
          block[3] = &unk_D6F48;
          unint64_t v153 = (NSMutableSet *)*(id *)(a1 + 32);
          uint64_t v154 = *(void *)(a1 + 96);
          id v194 = v153;
          uint64_t v155 = *(void *)(a1 + 120);
          uint64_t v200 = v154;
          uint64_t v201 = v155;
          __int128 v192 = *(_OWORD *)(a1 + 80);
          id v156 = (id)v192;
          __int128 v199 = v192;
          id v195 = *(id *)(a1 + 48);
          uint64_t v202 = v240;
          __int128 v203 = *(_OWORD *)(a1 + 104);
          id v196 = v158;
          uint64_t v197 = v159;
          id v198 = *(id *)(a1 + 40);
          dispatch_group_notify(group, &_dispatch_main_q, block);

          uint64_t v157 = v194;
          goto LABEL_167;
        }

        goto LABEL_168;
      }
    }
  }

  uint64_t v157 = v41;
LABEL_167:

LABEL_168:
  _Block_object_dispose(v240, 8);
}

void sub_59C7C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v113 = a3;
  uint64_t v114 = v5;
  uint64_t v126 = a1;
  if (v5
    && (id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager")),
        unsigned int v7 = [v6 fileExistsAtPath:v5 isDirectory:0],
        v6,
        v7))
  {
    if (IMOSLoggingEnabled(v8, v9))
    {
      uint64_t v10 = OSLogHandleForIMEventCategory("Attachments");
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = v114;
        _os_log_impl(&dword_0, v11, OS_LOG_TYPE_INFO, "Sticker found in cache %@", buf, 0xCu);
      }
    }

    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v114));
    id v13 = [*(id *)(a1 + 32) setUserInfo:0];
    if (v12
      && (id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager")),
          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v12 path]),
          unsigned int v17 = [v15 fileExistsAtPath:v16],
          v16,
          v15,
          v17))
    {
      if (IMOSLoggingEnabled(v13, v14))
      {
        uint64_t v18 = OSLogHandleForIMFoundationCategory("Attachments");
        id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = v114;
          _os_log_impl(&dword_0, v19, OS_LOG_TYPE_INFO, "Adding gatekeeper properties to: %@", buf, 0xCu);
        }
      }

      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[IMDFileTransferCenter sharedInstance](&OBJC_CLASS___IMDFileTransferCenter, "sharedInstance"));
      [v20 addDefaultGatekeeperPropertiesToDirectory:v114];

      id v21 = [*(id *)(a1 + 32) _setLocalURL:v12];
      if (IMOSLoggingEnabled(v21, v22))
      {
        uint64_t v23 = OSLogHandleForIMFoundationCategory("Attachments");
        uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = v12;
          _os_log_impl(&dword_0, v24, OS_LOG_TYPE_INFO, "Set transfer local url to: %@", buf, 0xCu);
        }
      }

      int v25 = (void *)objc_claimAutoreleasedReturnValue( +[IMCommSafetyRequestsManager sharedManager]( &OBJC_CLASS___IMCommSafetyRequestsManager,  "sharedManager"));
      objc_msgSend( v25,  "checkExistingAttachmentSensitivityIfNeededFor:attachmentURL:isFromMe:",  *(void *)(a1 + 32),  v12,  objc_msgSend(*(id *)(a1 + 40), "isFromMe"));
      unsigned int v26 = *(void **)(a1 + 48);
      __int16 v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
      [v26 startFinalizingTransfer:v27];

      dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
    }

    else if (IMOSLoggingEnabled(v13, v14))
    {
      uint64_t v54 = OSLogHandleForIMEventCategory("Attachments");
      BOOL v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v55, OS_LOG_TYPE_INFO, "Sticker not in cache. Attempting to download sticker ", buf, 2u);
      }
    }
  }

  else
  {
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[IMLockdownManager sharedInstance](&OBJC_CLASS___IMLockdownManager, "sharedInstance"));
    unsigned int v29 = [v28 isInternalInstall];

    if (v29)
    {
      BOOL v32 = (void *)objc_claimAutoreleasedReturnValue(+[IMDefaults sharedInstance](&OBJC_CLASS___IMDefaults, "sharedInstance"));
      unsigned int v33 = [v32 getBoolFromDomain:IMCloudKitDefinesDomain forKey:@"ForceNoAutoDownload.iMessage" defaultValue:0];

      if (v33)
      {
        uint64_t v30 = IMOSLoggingEnabled(v30, v31);
        if ((_DWORD)v30)
        {
          uint64_t v34 = OSLogHandleForIMFoundationCategory("Attachments");
          uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( &dword_0,  v35,  OS_LOG_TYPE_INFO,  "Forcing auto download behavior OFF due to default com.apple.madrid ForceNoAutoDownload.iMessage",  buf,  2u);
          }
        }

        *(_BYTE *)(*(void *)(*(void *)(a1 + 168) + 8LL) + 24LL) = 0;
      }
    }

    BOOL v36 = *(_BYTE *)(*(void *)(*(void *)(a1 + 168) + 8LL) + 24LL) == 0;
    int v37 = IMOSLoggingEnabled(v30, v31);
    if (v36)
    {
      if (v37)
      {
        uint64_t v52 = OSLogHandleForIMFoundationCategory("Attachments");
        uint64_t v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
        if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_0, v53, OS_LOG_TYPE_INFO, " ** Not auto downloading file!", buf, 2u);
        }
      }

      dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
      if (*(_BYTE *)(a1 + 226)) {
        [*(id *)(a1 + 160) addObject:*(void *)(a1 + 32)];
      }
    }

    else
    {
      if (v37)
      {
        uint64_t v38 = OSLogHandleForIMFoundationCategory("Attachments");
        uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_0, v39, OS_LOG_TYPE_INFO, " ** Auto downloading file!", buf, 2u);
        }
      }

      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) filename]);
      id v112 = (void *)objc_claimAutoreleasedReturnValue([v40 lastPathComponent]);

      uint64_t v41 = objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
      id v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v41, "im_randomTemporaryFileURLWithFileName:", v112));
      __int16 v115 = (void *)objc_claimAutoreleasedReturnValue([v42 path]);

      [*(id *)(a1 + 48) acceptTransfer:*(void *)(a1 + 64) path:v115];
      +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
      uint64_t v44 = v43;
      uint64_t v111 = (void *)objc_claimAutoreleasedReturnValue( +[IDSServerBag sharedInstanceForBagType:]( &OBJC_CLASS___IDSServerBag,  "sharedInstanceForBagType:",  0LL));
      id v45 = [*(id *)(a1 + 80) _shouldDisableFasterDownload:v111 message:*(void *)(a1 + 72)];
      LOBYTE(v41) = (_BYTE)v45;
      int v47 = IMOSLoggingEnabled(v45, v46);
      if ((v41 & 1) != 0)
      {
        if (v47)
        {
          uint64_t v48 = OSLogHandleForIMFoundationCategory("Attachments");
          uint64_t v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
          if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
          {
            id v50 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) balloonBundleID]);
            id v51 = [v50 length];
            *(_DWORD *)buf = 138412546;
            *(void *)&uint8_t buf[4] = @"YES";
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v51;
            _os_log_impl( &dword_0,  v49,  OS_LOG_TYPE_INFO,  "Not dispatching timer shouldDisableFasterDownload:%@ [[message balloonBundleID] length] %lu",  buf,  0x16u);
          }
        }
      }

      else
      {
        if (v47)
        {
          uint64_t v56 = OSLogHandleForIMFoundationCategory("Attachments");
          __int16 v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
          if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = @"NO";
            _os_log_impl(&dword_0, v57, OS_LOG_TYPE_INFO, "Dispatching timer shouldDisableFasterDownload:%@", buf, 0xCu);
          }
        }

        if (*(_BYTE *)(a1 + 225)) {
          double v58 = 2.0;
        }
        else {
          double v58 = 30.0;
        }
        v171[0] = _NSConcreteStackBlock;
        v171[1] = 3221225472LL;
        v171[2] = sub_5AEA8;
        v171[3] = &unk_D6EA8;
        id v59 = *(id *)(a1 + 88);
        uint64_t v60 = *(void *)(a1 + 216);
        id v172 = v59;
        uint64_t v175 = v60;
        id v173 = *(id *)(a1 + 72);
        id v174 = *(id *)(a1 + 56);
        im_dispatch_after(v171, v58);
      }

      v169[0] = 0LL;
      v169[1] = v169;
      v169[2] = 0x2020000000LL;
      id v170 = 0LL;
      id v170 = [*(id *)(a1 + 96) count];
      v168[0] = 0LL;
      v168[1] = v168;
      v168[2] = 0x2020000000LL;
      v168[3] = 0LL;
      *(void *)buf = 0LL;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0x3032000000LL;
      BOOL v183 = sub_4C558;
      uint64_t v184 = sub_4C568;
      id v185 = 0LL;
      v166[0] = 0LL;
      v166[1] = v166;
      v166[2] = 0x3032000000LL;
      v166[3] = sub_4C558;
      v166[4] = sub_4C568;
      id v167 = 0LL;
      v165[0] = 0LL;
      v165[1] = v165;
      v165[2] = 0x2020000000LL;
      v165[3] = 0LL;
      v163[0] = 0LL;
      v163[1] = v163;
      v163[2] = 0x3032000000LL;
      v163[3] = sub_4C558;
      v163[4] = sub_4C568;
      id v164 = 0LL;
      v161[0] = 0LL;
      v161[1] = v161;
      v161[2] = 0x3032000000LL;
      v161[3] = sub_4C558;
      v161[4] = sub_4C568;
      id v162 = 0LL;
      v159[0] = 0LL;
      v159[1] = v159;
      v159[2] = 0x2020000000LL;
      char v160 = 0;
      uint64_t v61 = (char *)[*(id *)(a1 + 96) count];
      if ((uint64_t)(v61 - 1) >= 0)
      {
        do
        {
          uint64_t v62 = v61 - 1;
          uint64_t v122 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 96) objectAtIndexedSubscript:v62]);
          uint64_t v127 = (uint64_t)v62;
          unsigned __int8 v63 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 104) objectAtIndexedSubscript:v62]);
          id v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
          if (v63 == v64) {
            uint64_t v121 = 0LL;
          }
          else {
            uint64_t v121 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 104) objectAtIndexedSubscript:v127]);
          }

          uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 112) objectAtIndexedSubscript:v127]);
          uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
          if (v65 == v66) {
            uint64_t v123 = 0LL;
          }
          else {
            uint64_t v123 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 112) objectAtIndexedSubscript:v127]);
          }

          uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 120) objectAtIndexedSubscript:v127]);
          id v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
          if (v67 == v68) {
            uint64_t v120 = 0LL;
          }
          else {
            uint64_t v120 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 120) objectAtIndexedSubscript:v127]);
          }

          double v69 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 128) objectAtIndexedSubscript:v127]);
          uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
          if (v69 == v70) {
            __int128 v119 = 0LL;
          }
          else {
            __int128 v119 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 128) objectAtIndexedSubscript:v127]);
          }

          uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 136) objectAtIndexedSubscript:v127]);
          uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
          if (v71 == v72) {
            __int16 v117 = 0LL;
          }
          else {
            __int16 v117 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 136) objectAtIndexedSubscript:v127]);
          }

          uint64_t v155 = 0LL;
          id v156 = &v155;
          uint64_t v157 = 0x2020000000LL;
          uint64_t v158 = 0LL;
          uint64_t v158 = [v123 unsignedIntValue];
          id v73 = v115;
          id v74 = (void *)objc_claimAutoreleasedReturnValue([v73 stringByDeletingLastPathComponent]);
          id v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%tu", v127));
          uint64_t v76 = objc_claimAutoreleasedReturnValue([v73 lastPathComponent]);

          id v77 = (void *)objc_claimAutoreleasedReturnValue([v74 stringByAppendingPathComponent:v75]);
          uint64_t v125 = (void *)objc_claimAutoreleasedReturnValue([v77 stringByAppendingPathComponent:v76]);

          unsigned int v78 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
          uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue([v125 stringByDeletingLastPathComponent]);
          id v154 = 0LL;
          LOBYTE(v76) = [v78 createDirectoryAtPath:v79 withIntermediateDirectories:0 attributes:0 error:&v154];
          id v118 = v154;

          uint64_t v80 = v126;
          if ((v76 & 1) == 0)
          {
            uint64_t v80 = v126;
            if (IMOSLoggingEnabled(v81, v82))
            {
              uint64_t v83 = OSLogHandleForIMFoundationCategory("Warning");
              unsigned __int8 v84 = (os_log_s *)objc_claimAutoreleasedReturnValue(v83);
              if (os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
              {
                double v85 = (void *)objc_claimAutoreleasedReturnValue([v125 stringByDeletingLastPathComponent]);
                id v86 = (void *)objc_claimAutoreleasedReturnValue([v85 stringByResolvingAndStandardizingPath]);
                *(_DWORD *)uint64_t v178 = 138412546;
                uint64_t v179 = v86;
                __int16 v180 = 2112;
                id v181 = v118;
                _os_log_impl( &dword_0,  v84,  OS_LOG_TYPE_INFO,  "Attachments: Error while creating a temp directory at %@: %@",  v178,  0x16u);
              }
            }
          }

          uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v80 + 72) guid]);
          uint64_t v88 = kAttachmentsAutomationMilestoneBeginReceivingURL;
          float v89 = &stru_D8640;
          if (v122) {
            float v89 = v122;
          }
          v176[0] = kAttachmentsAutomationURLKey;
          v176[1] = kAttachmentsAutomationFileSizeKey;
          float v90 = &off_DB5A0;
          if (v123) {
            float v90 = (_UNKNOWN **)v123;
          }
          v177[0] = v89;
          v177[1] = v90;
          uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v177,  v176,  2LL));
          AttachmentsAutomationLogMilestone(v87, v88, v91);

          if (IMOSLoggingEnabled(v92, v93))
          {
            uint64_t v94 = OSLogHandleForIMFoundationCategory("Attachments");
            id v95 = (os_log_s *)objc_claimAutoreleasedReturnValue(v94);
            if (os_log_type_enabled(v95, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)uint64_t v178 = 138412290;
              uint64_t v179 = v125;
              _os_log_impl(&dword_0, v95, OS_LOG_TYPE_INFO, "Receiving file at temporary local URL: %@", v178, 0xCu);
            }
          }

          uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue( +[IMTransferServicesController sharedInstance]( &OBJC_CLASS___IMTransferServicesController,  "sharedInstance"));
          double v97 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringGUID](&OBJC_CLASS___NSString, "stringGUID"));
          id v98 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v126 + 32) guid]);
          uint64_t v99 = *(void *)(v126 + 144);
          id v100 = (void *)objc_claimAutoreleasedReturnValue([v125 stringByResolvingAndStandardizingPath]);
          id v101 = (void *)objc_claimAutoreleasedReturnValue([v120 _FTDataFromHexString]);
          id v102 = (void *)objc_claimAutoreleasedReturnValue([v119 _FTDataFromHexString]);
          uint64_t v103 = v156[3];
          uint64_t v104 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v126 + 72) balloonBundleID]);
          v153[0] = _NSConcreteStackBlock;
          v153[1] = 3221225472LL;
          v153[2] = sub_5B0D4;
          v153[3] = &unk_D6D40;
          v153[4] = *(void *)(v126 + 64);
          v128[0] = _NSConcreteStackBlock;
          v128[1] = 3221225472LL;
          v128[2] = sub_5B1F4;
          v128[3] = &unk_D6ED0;
          id v139 = v169;
          uint64_t v116 = *(void *)(v126 + 40);
          id v129 = *(id *)(v126 + 32);
          uint64_t v151 = v44;
          id v130 = *(id *)(v126 + 72);
          id v131 = v73;
          id v124 = v123;
          id v132 = v124;
          unsigned int v140 = &v155;
          id v141 = v168;
          uint64_t v142 = buf;
          id v143 = v166;
          id v105 = v117;
          id v133 = v105;
          uint64_t v144 = v165;
          uint64_t v145 = v163;
          uint64_t v146 = v161;
          uint64_t v147 = v159;
          id v134 = *(id *)(v126 + 48);
          id v106 = *(id *)(v126 + 152);
          uint64_t v107 = *(void *)(v126 + 64);
          id v135 = v106;
          uint64_t v136 = v107;
          __int128 v108 = *(_OWORD *)(v126 + 192);
          __int128 v148 = *(_OWORD *)(v126 + 176);
          __int128 v149 = v108;
          uint64_t v150 = *(void *)(v126 + 208);
          id v109 = *(id *)(v126 + 88);
          uint64_t v110 = *(void *)(v126 + 216);
          id v137 = v109;
          uint64_t v152 = v110;
          id v138 = *(id *)(v126 + 56);
          [v96 receiveFileTransfer:v97 transferGUID:v98 topic:v99 path:v100 requestURLString:v122 ownerID:v121 signature:v101 decryptionKey:v102 fileSize:v103 balloo nBundleID:v104 senderContext:v116 progressBlock:v153 completionBlock:v128];

          a1 = v126;
          _Block_object_dispose(&v155, 8);

          uint64_t v61 = (char *)v127;
        }

        while (v127 > 0);
      }

      _Block_object_dispose(v159, 8);
      _Block_object_dispose(v161, 8);

      _Block_object_dispose(v163, 8);
      _Block_object_dispose(v165, 8);
      _Block_object_dispose(v166, 8);

      _Block_object_dispose(buf, 8);
      _Block_object_dispose(v168, 8);
      _Block_object_dispose(v169, 8);
    }
  }
}

void sub_5AEA8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndexedSubscript:*(void *)(a1 + 56)]);
  unsigned __int8 v3 = [v2 BOOLValue];

  uint64_t v6 = IMOSLoggingEnabled(v4, v5);
  if ((v3 & 1) != 0)
  {
    if ((_DWORD)v6)
    {
      uint64_t v8 = OSLogHandleForIMFoundationCategory("Attachments");
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        LOWORD(v16) = 0;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_INFO,  "Not Calling dispatch group leave in timer block ",  (uint8_t *)&v16,  2u);
      }
    }
  }

  else
  {
    if ((_DWORD)v6)
    {
      uint64_t v10 = OSLogHandleForIMFoundationCategory("Attachments");
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = *(void *)(a1 + 56);
        id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) guid]);
        int v16 = 134218242;
        uint64_t v17 = v12;
        __int16 v18 = 2112;
        id v19 = v13;
        _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_INFO,  "Timed out downloading attachment at index %lu for message %@",  (uint8_t *)&v16,  0x16u);
      }
    }

    if (IMOSLoggingEnabled(v6, v7))
    {
      uint64_t v14 = OSLogHandleForIMFoundationCategory("Attachments");
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        LOWORD(v16) = 0;
        _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_INFO,  "Calling dispatch group leave in timer block",  (uint8_t *)&v16,  2u);
      }
    }

    [*(id *)(a1 + 32) setObject:&__kCFBooleanTrue atIndexedSubscript:*(void *)(a1 + 56)];
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  }

void sub_5B0D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (IMOSLoggingEnabled(a1, a2))
  {
    uint64_t v8 = OSLogHandleForIMFoundationCategory("Attachments");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v11 = 134218496;
      uint64_t v12 = a2;
      __int16 v13 = 2048;
      uint64_t v14 = a3;
      __int16 v15 = 2048;
      uint64_t v16 = a4;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_INFO,  "Receive progress updated to %lld of %lld (%lld bps)",  (uint8_t *)&v11,  0x20u);
    }
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[IMDFileTransferCenter sharedInstance](&OBJC_CLASS___IMDFileTransferCenter, "sharedInstance"));
  [v10 updateTransfer:*(void *)(a1 + 32) currentBytes:a2 totalBytes:a3];
}

void sub_5B1F4(uint64_t a1, void *a2, void *a3, uint64_t a4, char a5, void *a6, void *a7)
{
  id v155 = a2;
  double v12 = COERCE_DOUBLE(a3);
  __int16 v13 = a6;
  uint64_t v14 = a7;
  --*(void *)(*(void *)(*(void *)(a1 + 112) + 8LL) + 24LL);
  uint64_t v16 = IMOSLoggingEnabled(v14, v15);
  if ((_DWORD)v16)
  {
    uint64_t v18 = OSLogHandleForIMEventCategory("Attachments");
    id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      double v20 = *(double *)(a1 + 32);
      id v21 = @"NO";
      *(_DWORD *)buf = 138412802;
      if ((_DWORD)a4) {
        id v21 = @"YES";
      }
      double v162 = v20;
      __int16 v163 = 2112;
      id v164 = v21;
      __int16 v165 = 2112;
      unsigned int v166 = v13;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_INFO,  "Finished downloading transfer: %@   success: %@  error: %@",  buf,  0x20u);
    }
  }

  if (IMOSLoggingEnabled(v16, v17))
  {
    uint64_t v22 = OSLogHandleForIMFoundationCategory("Attachments");
    uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
      double v25 = v24 - *(double *)(a1 + 224);
      *(_DWORD *)buf = 134217984;
      double v162 = v25;
      _os_log_impl(&dword_0, v23, OS_LOG_TYPE_INFO, "Time taken: %f", buf, 0xCu);
    }
  }

  unsigned int v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) guid]);
  uint64_t v27 = kAttachmentsAutomationMilestoneEndReceivingURL;
  v159[0] = kAttachmentsAutomationURLKey;
  uint64_t v28 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) stringByResolvingAndStandardizingPath]);
  unsigned int v29 = (void *)v28;
  if (v28) {
    uint64_t v30 = (const __CFString *)v28;
  }
  else {
    uint64_t v30 = &stru_D8640;
  }
  uint64_t v31 = *(_UNKNOWN ***)(a1 + 56);
  if (!v31) {
    uint64_t v31 = &off_DB5A0;
  }
  v160[0] = v30;
  v160[1] = v31;
  v159[1] = kAttachmentsAutomationFileSizeKey;
  v159[2] = kAttachmentsAutomationSuccessKey;
  BOOL v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a4));
  v160[2] = v32;
  void v159[3] = kAttachmentsAutomationErrorKey;
  v159[4] = kAttachmentsAutomationAdditionalErrorInfoKey;
  if (v13) {
    unsigned int v33 = v13;
  }
  else {
    unsigned int v33 = &stru_D8640;
  }
  if (v14) {
    uint64_t v34 = v14;
  }
  else {
    uint64_t v34 = &stru_D8640;
  }
  v160[3] = v33;
  v160[4] = v34;
  uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v160,  v159,  5LL));
  AttachmentsAutomationLogMilestone(v26, v27, v35);

  if ((_DWORD)a4)
  {
    uint64_t v38 = objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", *(void *)&v12));
    uint64_t v40 = (void *)v38;
    if (!v38
      || (uint64_t v38 = IMIsRunningInUnitTesting(), (v38 & 1) == 0)
      && (uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager")),
          unsigned int v42 = [v41 fileExistsAtPath:*(void *)&v12],
          v41,
          !v42))
    {
      if (IMOSLoggingEnabled(v38, v39))
      {
        uint64_t v66 = OSLogHandleForIMFoundationCategory("Warning");
        uint64_t v67 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
        if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
        {
          double v68 = *(double *)(a1 + 32);
          *(_DWORD *)buf = 138412290;
          double v162 = v68;
          _os_log_impl(&dword_0, v67, OS_LOG_TYPE_INFO, "Could not locate file for transfer: %@", buf, 0xCu);
        }
      }

      uint64_t v69 = *(void *)(*(void *)(a1 + 152) + 8LL);
      unint64_t v70 = *(void *)(*(void *)(*(void *)(a1 + 120) + 8LL) + 24LL);
      if (*(void *)(v69 + 24) < v70)
      {
        *(void *)(v69 + 24) = v70;
        uint64_t v71 = -[NSError initWithDomain:code:userInfo:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithDomain:code:userInfo:",  @"com.apple.MessageAttachmentControllerErrorDomain",  41LL,  0LL);
        uint64_t v72 = *(void *)(*(void *)(a1 + 160) + 8LL);
        id v73 = *(void **)(v72 + 40);
        *(void *)(v72 + 40) = v71;

        id v74 = -[__CFString copy](v14, "copy");
        uint64_t v75 = *(void *)(*(void *)(a1 + 168) + 8LL);
        uint64_t v76 = *(void **)(v75 + 40);
        *(void *)(v75 + 40) = v74;

        *(_BYTE *)(*(void *)(*(void *)(a1 + 176) + 8LL) + 24LL) = 0;
      }

      goto LABEL_78;
    }

    unint64_t v43 = *(void *)(*(void *)(*(void *)(a1 + 120) + 8LL) + 24LL);
    if (v43)
    {
LABEL_53:
      if (*(void *)(*(void *)(*(void *)(a1 + 128) + 8LL) + 24LL) >= v43)
      {
        id v102 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
        id v156 = 0LL;
        [v102 removeItemAtPath:*(void *)&v12 error:&v156];
        uint64_t v103 = (__CFString *)v156;

        uint64_t v106 = IMOSLoggingEnabled(v104, v105);
        if ((_DWORD)v106)
        {
          uint64_t v108 = OSLogHandleForIMFoundationCategory("Attachments");
          id v109 = (os_log_s *)objc_claimAutoreleasedReturnValue(v108);
          if (os_log_type_enabled(v109, OS_LOG_TYPE_INFO))
          {
            double v110 = *(double *)(*(void *)(*(void *)(a1 + 120) + 8LL) + 24LL);
            uint64_t v111 = *(const __CFString **)(*(void *)(*(void *)(a1 + 128) + 8LL) + 24LL);
            *(_DWORD *)buf = 134218240;
            double v162 = v110;
            __int16 v163 = 2048;
            id v164 = v111;
            _os_log_impl( &dword_0,  v109,  OS_LOG_TYPE_INFO,  "Incoming successful download of size %tu is superseded by previous successful download of size %tu.",  buf,  0x16u);
          }
        }

        if (IMOSLoggingEnabled(v106, v107))
        {
          uint64_t v112 = OSLogHandleForIMFoundationCategory("Attachments");
          id v113 = (os_log_s *)objc_claimAutoreleasedReturnValue(v112);
          if (os_log_type_enabled(v113, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            double v162 = v12;
            __int16 v163 = 2112;
            id v164 = v103;
            _os_log_impl(&dword_0, v113, OS_LOG_TYPE_INFO, " => Cleaned up local file at %@ with error: %@", buf, 0x16u);
          }
        }
      }

      else
      {
        if (*(void *)(*(void *)(*(void *)(a1 + 136) + 8LL) + 40LL))
        {
          uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
          id v157 = 0LL;
          [v82 removeItemAtPath:v83 error:&v157];
          unsigned __int8 v84 = (__CFString *)v157;

          uint64_t v87 = IMOSLoggingEnabled(v85, v86);
          if ((_DWORD)v87)
          {
            uint64_t v89 = OSLogHandleForIMFoundationCategory("Attachments");
            float v90 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);
            if (os_log_type_enabled(v90, OS_LOG_TYPE_INFO))
            {
              double v91 = *(double *)(*(void *)(*(void *)(a1 + 120) + 8LL) + 24LL);
              uint64_t v92 = *(const __CFString **)(*(void *)(*(void *)(a1 + 128) + 8LL) + 24LL);
              *(_DWORD *)buf = 134218240;
              double v162 = v91;
              __int16 v163 = 2048;
              id v164 = v92;
              _os_log_impl( &dword_0,  v90,  OS_LOG_TYPE_INFO,  "Incoming successful download of size %tu supersedes previous successful download of size %tu.",  buf,  0x16u);
            }
          }

          if (IMOSLoggingEnabled(v87, v88))
          {
            uint64_t v93 = OSLogHandleForIMFoundationCategory("Attachments");
            uint64_t v94 = (os_log_s *)objc_claimAutoreleasedReturnValue(v93);
            if (os_log_type_enabled(v94, OS_LOG_TYPE_INFO))
            {
              double v95 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 136) + 8)
                                                                                       + 40LL), "path")));
              *(_DWORD *)buf = 138412546;
              double v162 = v95;
              __int16 v163 = 2112;
              id v164 = v84;
              _os_log_impl( &dword_0,  v94,  OS_LOG_TYPE_INFO,  " => Cleaned up local file at %@ with error: %@",  buf,  0x16u);
            }
          }
        }

        if (IMOSLoggingEnabled(v38, v39))
        {
          uint64_t v96 = OSLogHandleForIMFoundationCategory("Attachments");
          double v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(v96);
          if (os_log_type_enabled(v97, OS_LOG_TYPE_INFO))
          {
            id v98 = *(const __CFString **)(*(void *)(*(void *)(a1 + 120) + 8LL) + 24LL);
            *(_DWORD *)buf = 138412546;
            double v162 = v12;
            __int16 v163 = 2048;
            id v164 = v98;
            _os_log_impl( &dword_0,  v97,  OS_LOG_TYPE_INFO,  "Setting transfer result to file at path %@ with size %tu.",  buf,  0x16u);
          }
        }

        id v99 = [v40 copy];
        uint64_t v100 = *(void *)(*(void *)(a1 + 136) + 8LL);
        id v101 = *(void **)(v100 + 40);
        *(void *)(v100 + 40) = v99;

        *(void *)(*(void *)(*(void *)(a1 + 128) + 8LL) + 24LL) = *(void *)(*(void *)(*(void *)(a1 + 120)
                                                                                             + 8LL)
                                                                                 + 24LL);
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 144) + 8LL) + 40LL), *(id *)(a1 + 64));
      }

LABEL_78:
      goto LABEL_79;
    }

    if (IMOSLoggingEnabled(v38, v39))
    {
      uint64_t v44 = OSLogHandleForIMEventCategory("Attachments");
      id v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( &dword_0,  v45,  OS_LOG_TYPE_INFO,  "Over the wire file size was zero. Could be animated emoji. Let's look at file size on disk",  buf,  2u);
      }
    }

    uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    id v158 = 0LL;
    int v47 = (void *)objc_claimAutoreleasedReturnValue([v46 attributesOfItemAtPath:*(void *)&v12 error:&v158]);
    uint64_t v48 = (__CFString *)v158;

    if (v48)
    {
      if (IMOSLoggingEnabled(v49, v50))
      {
        uint64_t v51 = OSLogHandleForIMFoundationCategory("Warning");
        uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
        if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          double v162 = v12;
          __int16 v163 = 2112;
          id v164 = v48;
          _os_log_impl( &dword_0,  v52,  OS_LOG_TYPE_INFO,  "Attachments error reading file size attributes at path %@ error %@",  buf,  0x16u);
        }

LABEL_51:
      }
    }

    else
    {
      id v77 = (void *)objc_claimAutoreleasedReturnValue([v47 objectForKey:NSFileSize]);
      *(void *)(*(void *)(*(void *)(a1 + 120) + 8) + 24) = (int)[v77 intValue];

      if (IMOSLoggingEnabled(v78, v79))
      {
        uint64_t v80 = OSLogHandleForIMEventCategory("Attachments");
        uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
        if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
        {
          double v81 = *(double *)(*(void *)(*(void *)(a1 + 120) + 8LL) + 24LL);
          *(_DWORD *)buf = 134217984;
          double v162 = v81;
          _os_log_impl(&dword_0, v52, OS_LOG_TYPE_INFO, "On disk file size %lu ", buf, 0xCu);
        }

        goto LABEL_51;
      }
    }

    unint64_t v43 = *(void *)(*(void *)(*(void *)(a1 + 120) + 8LL) + 24LL);
    goto LABEL_53;
  }

  uint64_t v53 = IMOSLoggingEnabled(v36, v37);
  if ((_DWORD)v53)
  {
    uint64_t v55 = OSLogHandleForIMFoundationCategory("Warning");
    uint64_t v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
    {
      double v57 = *(double *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      double v162 = v57;
      __int16 v163 = 2112;
      id v164 = v13;
      _os_log_impl(&dword_0, v56, OS_LOG_TYPE_INFO, "Failed retrieving file transfer: %@   error: %@", buf, 0x16u);
    }
  }

  uint64_t v58 = *(void *)(*(void *)(a1 + 152) + 8LL);
  uint64_t v59 = *(void *)(*(void *)(*(void *)(a1 + 120) + 8LL) + 24LL);
  if ((unint64_t)(v59 - 1) >= *(void *)(v58 + 24))
  {
    *(void *)(v58 + 24) = v59;
    id v60 = -[__CFString copy](v13, "copy");
    uint64_t v61 = *(void *)(*(void *)(a1 + 160) + 8LL);
    uint64_t v62 = *(void **)(v61 + 40);
    *(void *)(v61 + 40) = v60;

    id v63 = -[__CFString copy](v14, "copy");
    uint64_t v64 = *(void *)(*(void *)(a1 + 168) + 8LL);
    uint64_t v65 = *(void **)(v64 + 40);
    *(void *)(v64 + 40) = v63;

    *(_BYTE *)(*(void *)(*(void *)(a1 + 176) + 8LL) + 24LL) = 1;
  }

LABEL_79:
  if (*(void *)(*(void *)(*(void *)(a1 + 112) + 8LL) + 24LL)) {
    goto LABEL_115;
  }
  uint64_t v114 = *(void *)(*(void *)(*(void *)(a1 + 136) + 8LL) + 40LL);
  if (v114)
  {
    if (IMOSLoggingEnabled(v53, v54))
    {
      uint64_t v115 = OSLogHandleForIMFoundationCategory("Attachments");
      uint64_t v116 = (os_log_s *)objc_claimAutoreleasedReturnValue(v115);
      if (os_log_type_enabled(v116, OS_LOG_TYPE_INFO))
      {
        double v117 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 136)
                                                                                              + 8LL)
                                                                                  + 40LL), "path")));
        *(_DWORD *)buf = 138412290;
        double v162 = v117;
        _os_log_impl(&dword_0, v116, OS_LOG_TYPE_INFO, "Adding gatekeeper properties to: %@", buf, 0xCu);
      }
    }

    id v118 = (void *)objc_claimAutoreleasedReturnValue(+[IMDFileTransferCenter sharedInstance](&OBJC_CLASS___IMDFileTransferCenter, "sharedInstance"));
    __int128 v119 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 136) + 8) + 40) path]);
    [v118 addDefaultGatekeeperPropertiesToDirectory:v119];

    id v120 = [*(id *)(a1 + 32) _setLocalURL:*(void *)(*(void *)(*(void *)(a1 + 136) + 8) + 40)];
    if (IMOSLoggingEnabled(v120, v121))
    {
      uint64_t v122 = OSLogHandleForIMFoundationCategory("Attachments");
      uint64_t v123 = (os_log_s *)objc_claimAutoreleasedReturnValue(v122);
      if (os_log_type_enabled(v123, OS_LOG_TYPE_INFO))
      {
        double v124 = *(double *)(*(void *)(*(void *)(a1 + 136) + 8LL) + 40LL);
        *(_DWORD *)buf = 138412290;
        double v162 = v124;
        _os_log_impl(&dword_0, v123, OS_LOG_TYPE_INFO, "Set transfer local url to: %@", buf, 0xCu);
      }
    }

    uint64_t v125 = *(void **)(a1 + 72);
    uint64_t v126 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
    [v125 startFinalizingTransfer:v126];

    if ((a5 & 1) == 0) {
      [*(id *)(a1 + 80) addObject:*(void *)(a1 + 88)];
    }
    [*(id *)(*(void *)(*(void *)(a1 + 144) + 8) + 40) collectMetricsForDownloadedFile:*(void *)(*(void *)(*(void *)(a1 + 136) + 8) + 40)];
    goto LABEL_99;
  }

  uint64_t v127 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 160) + 8) + 40) domain]);
  if (![v127 isEqualToString:IMFileTransferErrorDomain])
  {

    goto LABEL_96;
  }

  BOOL v128 = [*(id *)(*(void *)(*(void *)(a1 + 160) + 8) + 40) code] == &dword_1C;

  if (!v128)
  {
LABEL_96:
    if (*(_BYTE *)(*(void *)(*(void *)(a1 + 176) + 8LL) + 24LL))
    {
      id v131 = *(void **)(a1 + 72);
      id v132 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
      [v131 resetTransfer:v132 andPostError:*(void *)(*(void *)(*(void *)(a1 + 160) + 8) + 40)];
    }

    id v133 = [*(id *)(*(void *)(*(void *)(a1 + 160) + 8) + 40) copy];
    uint64_t v134 = *(void *)(*(void *)(a1 + 208) + 8LL);
    id v135 = *(void **)(v134 + 40);
    *(void *)(v134 + 40) = v133;

    *(void *)(*(void *)(*(void *)(a1 + 216) + 8LL) + 24LL) = *(void *)(*(void *)(*(void *)(a1 + 152) + 8LL)
                                                                             + 24LL);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 184) + 8LL) + 24LL) = 0;
    id v136 = [*(id *)(*(void *)(*(void *)(a1 + 168) + 8) + 40) copy];
    uint64_t v137 = *(void *)(*(void *)(a1 + 192) + 8LL);
    id v138 = *(void **)(v137 + 40);
    *(void *)(v137 + 40) = v136;

    *(_DWORD *)(*(void *)(*(void *)(a1 + 200) + 8LL) + 24LL) = 35;
    goto LABEL_99;
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 184) + 8LL) + 24LL) = 1;
  uint64_t v129 = *(void *)(*(void *)(a1 + 192) + 8LL);
  id v130 = *(void **)(v129 + 40);
  *(void *)(v129 + 40) = 0LL;

  *(_DWORD *)(*(void *)(*(void *)(a1 + 200) + 8LL) + 24LL) = 0;
LABEL_99:
  id v139 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 96) objectAtIndexedSubscript:*(void *)(a1 + 232)]);
  unsigned __int8 v140 = [v139 BOOLValue];

  uint64_t v143 = IMOSLoggingEnabled(v141, v142);
  if ((v140 & 1) != 0)
  {
    if ((_DWORD)v143)
    {
      uint64_t v145 = OSLogHandleForIMFoundationCategory("Attachments");
      uint64_t v146 = (os_log_s *)objc_claimAutoreleasedReturnValue(v145);
      if (os_log_type_enabled(v146, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v146, OS_LOG_TYPE_INFO, "Not Calling dispatch group leave in completion block", buf, 2u);
      }
    }

    if (v114)
    {
      if (IMOSLoggingEnabled(v143, v144))
      {
        uint64_t v147 = OSLogHandleForIMFoundationCategory("Attachments");
        __int128 v148 = (os_log_s *)objc_claimAutoreleasedReturnValue(v147);
        if (os_log_type_enabled(v148, OS_LOG_TYPE_INFO))
        {
          double v149 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]));
          *(_DWORD *)buf = 138412290;
          double v162 = v149;
          _os_log_impl(&dword_0, v148, OS_LOG_TYPE_INFO, "Setting transfer ended %@", buf, 0xCu);
        }
      }

      uint64_t v150 = *(void **)(a1 + 72);
      uint64_t v151 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
      [v150 endTransfer:v151];
    }
  }

  else
  {
    if ((_DWORD)v143)
    {
      uint64_t v152 = OSLogHandleForIMFoundationCategory("Attachments");
      unint64_t v153 = (os_log_s *)objc_claimAutoreleasedReturnValue(v152);
      if (os_log_type_enabled(v153, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v153, OS_LOG_TYPE_INFO, "Calling dispatch group leave in completion block", buf, 2u);
      }
    }

    [*(id *)(a1 + 96) setObject:&__kCFBooleanTrue atIndexedSubscript:*(void *)(a1 + 232)];
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 104));
  }

LABEL_115:
}

void sub_5C098(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x5B9E8LL);
  }

  _Unwind_Resume(a1);
}

void sub_5C1F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (IMOSLoggingEnabled(a1, a2))
  {
    uint64_t v3 = OSLogHandleForIMFoundationCategory("Attachments");
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fileTransferGUIDs]);
      uint64_t v6 = (void *)v5;
      if (*(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL)) {
        uint64_t v7 = @"YES";
      }
      else {
        uint64_t v7 = @"NO";
      }
      *(_DWORD *)buf = 138412546;
      uint64_t v48 = v5;
      __int16 v49 = 2112;
      uint64_t v50 = v7;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_INFO, "  All done transfer set for: %@   success: %@", buf, 0x16u);
    }

    uint64_t v2 = a1;
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v2 + 32) guid]);
  uint64_t v9 = kAttachmentsAutomationMilestoneEndReceivingMessage;
  v45[0] = kAttachmentsAutomationMessageGUIDKey;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v2 + 32) guid]);
  v46[0] = v10;
  v45[1] = kAttachmentsAutomationSuccessKey;
  int v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL)));
  v46[1] = v11;
  v45[2] = kAttachmentsAutomationErrorKey;
  double v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL)));
  v46[2] = v12;
  __int16 v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v46,  v45,  3LL));
  AttachmentsAutomationLogMilestoneWithOptionFlags(v8, v9, v13, 2LL);

  uint64_t v14 = a1;
  os_activity_scope_leave((os_activity_scope_state_t)(*(void *)(*(void *)(a1 + 96) + 8LL) + 32LL));
  uint64_t v15 = *(void *)(a1 + 72);
  if (v15)
  {
    (*(void (**)(uint64_t, void, void, void, void, void, void, void, void))(v15 + 16))( v15,  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL),  *(unsigned int *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL),  *(void *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 40LL),  *(void *)(*(void *)(*(void *)(a1 + 112) + 8LL) + 24LL),  *(void *)(*(void *)(*(void *)(a1 + 120) + 8LL) + 40LL),  0LL);
    uint64_t v14 = a1;
  }

  uint64_t v16 = *(void *)(*(void *)(v14 + 104) + 8LL);
  uint64_t v17 = *(void **)(v16 + 40);
  *(void *)(v16 + 40) = 0LL;

  uint64_t v18 = *(void *)(*(void *)(a1 + 120) + 8LL);
  id v19 = *(void **)(v18 + 40);
  *(void *)(v18 + 40) = 0LL;

  if (IMOSLoggingEnabled(v20, v21))
  {
    uint64_t v22 = OSLogHandleForIMFoundationCategory("Attachments");
    uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      uint64_t v24 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      uint64_t v48 = v24;
      _os_log_impl(&dword_0, v23, OS_LOG_TYPE_INFO, "GUIDS failing preview generation %@", buf, 0xCu);
    }
  }

  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  id obj = *(id *)(a1 + 56);
  id v25 = [obj countByEnumeratingWithState:&v40 objects:v44 count:16];
  id v27 = v25;
  if (v25)
  {
    uint64_t v28 = *(void *)v41;
    do
    {
      unsigned int v29 = 0LL;
      do
      {
        if (*(void *)v41 != v28) {
          objc_enumerationMutation(obj);
        }
        uint64_t v30 = *(void **)(*((void *)&v40 + 1) + 8LL * (void)v29);
        if (IMOSLoggingEnabled(v25, v26))
        {
          uint64_t v31 = OSLogHandleForIMFoundationCategory("Attachments");
          BOOL v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
          {
            id v33 = (id)objc_claimAutoreleasedReturnValue([v30 guid]);
            uint64_t v34 = (__CFString *)objc_claimAutoreleasedReturnValue([v30 messageGUID]);
            *(_DWORD *)buf = 138412546;
            uint64_t v48 = (uint64_t)v33;
            __int16 v49 = 2112;
            uint64_t v50 = v34;
            _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_INFO,  "Auto accepting transfer: %@ for message GUID: %@",  buf,  0x16u);
          }
        }

        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_5C6F8;
        block[3] = &unk_D6F20;
        id v38 = *(id *)(a1 + 64);
        uint64_t v39 = v30;
        dispatch_async(&_dispatch_main_q, block);

        unsigned int v29 = (char *)v29 + 1;
      }

      while (v27 != v29);
      id v25 = [obj countByEnumeratingWithState:&v40 objects:v44 count:16];
      id v27 = v25;
    }

    while (v25);
  }
}

void sub_5C6F8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) guid]);
  [v1 _handleFileTransfer:v2 acceptedWithPath:0 autoRename:1 overwrite:1 options:0 postNotification:1];
}

uint64_t sub_5C74C(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  uint64_t v4 = IMOSLoggingEnabled(a1, a2);
  if ((_DWORD)v4)
  {
    uint64_t v6 = OSLogHandleForIMFoundationCategory("Attachments");
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      LOWORD(v17) = 0;
      _os_log_impl(&dword_0, v7, OS_LOG_TYPE_INFO, "Network availability check complete:", (uint8_t *)&v17, 2u);
    }
  }

  uint64_t v8 = IMOSLoggingEnabled(v4, v5);
  if ((_DWORD)v8)
  {
    uint64_t v10 = OSLogHandleForIMFoundationCategory("Attachments");
    int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      double v12 = @"YES";
      if ((v2 & 2) == 0) {
        double v12 = @"NO";
      }
      int v17 = 138412290;
      uint64_t v18 = v12;
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_INFO, "   Cell available: %@", (uint8_t *)&v17, 0xCu);
    }
  }

  if (IMOSLoggingEnabled(v8, v9))
  {
    uint64_t v13 = OSLogHandleForIMFoundationCategory("Attachments");
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = @"YES";
      if ((v2 & 1) == 0) {
        uint64_t v15 = @"NO";
      }
      int v17 = 138412290;
      uint64_t v18 = v15;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_INFO, "   WiFi available: %@", (uint8_t *)&v17, 0xCu);
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_5CF14(void *a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([(id)qword_E32B8 objectForKey:a1[4]]);
  uint64_t v4 = (void (**)(void, void, void, void, void, void, void))v2;
  if (v2)
  {
    if (IMOSLoggingEnabled(v2, v3))
    {
      uint64_t v5 = OSLogHandleForIMFoundationCategory("LocalAttachments");
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = a1[4];
        int v9 = 138412290;
        uint64_t v10 = v7;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_INFO,  "Timed out waiting for peer attachment completion for attachment: %@",  (uint8_t *)&v9,  0xCu);
      }
    }

    v4[2](v4, a1[5], a1[6], 0LL, 0LL, 0LL, 0LL);
    [(id)qword_E32B8 removeObjectForKey:a1[4]];
    if (![(id)qword_E32B8 count])
    {
      uint64_t v8 = (void *)qword_E32B8;
      qword_E32B8 = 0LL;
    }
  }
}

id sub_5ED28(uint64_t a1)
{
  return [*(id *)(a1 + 32) remotefileRequest:*(void *)(a1 + 40) attempts:*(void *)(a1 + 48) + 1 shouldRetry:1];
}

void sub_5ED40(uint64_t a1, void *a2, void *a3, void *a4, void *a5, int a6, int a7, void *a8)
{
  id v58 = a2;
  uint64_t v15 = a3;
  id v60 = a4;
  id v16 = a5;
  id v17 = a8;
  uint64_t v19 = IMOSLoggingEnabled(v17, v18);
  if ((_DWORD)v19)
  {
    uint64_t v21 = OSLogHandleForIMEventCategory("LocalAttachments");
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      uint64_t v23 = @"NO";
      uint64_t v24 = *(const __CFString **)(a1 + 32);
      if (a7) {
        uint64_t v23 = @"YES";
      }
      *(_DWORD *)buf = 138412546;
      id v63 = v24;
      __int16 v64 = 2112;
      uint64_t v65 = v23;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_INFO,  "Transcode processing complete for transfer: %@  (Attempted Transcode: %@)",  buf,  0x16u);
    }
  }

  int v25 = IMOSLoggingEnabled(v19, v20);
  if (a6)
  {
    if (v25)
    {
      uint64_t v26 = OSLogHandleForIMFoundationCategory("LocalAttachments");
      id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v63 = v15;
        _os_log_impl(&dword_0, v27, OS_LOG_TYPE_INFO, "Transcoding succeeded with output URLs: %@", buf, 0xCu);
      }
    }

    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString lastObject](v15, "lastObject", v58, v60));
    id v29 = (id)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfURL:](&OBJC_CLASS___NSData, "dataWithContentsOfURL:", v28));
    uint64_t v31 = v29;
    uint64_t v32 = *(void *)(*(void *)(a1 + 64) + 8LL);
    if (*(_BYTE *)(v32 + 24))
    {
      BOOL v33 = 1;
    }

    else
    {
      id v29 = [v29 length];
      BOOL v33 = (unint64_t)v29 > 0x100000;
      uint64_t v32 = *(void *)(*(void *)(a1 + 64) + 8LL);
    }

    *(_BYTE *)(v32 + 24) = v33;
    if (IMOSLoggingEnabled(v29, v30))
    {
      uint64_t v46 = OSLogHandleForIMFoundationCategory("LocalAttachments");
      int v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
      {
        int v48 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
        __int16 v49 = (const __CFString *)[v31 length];
        uint64_t v50 = @"YES";
        if (!v48) {
          uint64_t v50 = @"NO";
        }
        *(_DWORD *)buf = 138412546;
        id v63 = v50;
        __int16 v64 = 2048;
        uint64_t v65 = v49;
        _os_log_impl(&dword_0, v47, OS_LOG_TYPE_INFO, "useLocalPeersFileAPI: %@ fileSize:%lu", buf, 0x16u);
      }
    }

    [*(id *)(a1 + 40) _sendAttachmentToPeerDevice:*(void *)(a1 + 72) fileTransferGUID:*(void *)(a1 + 48) messageGuid:*(void *)(a1 + 56) fileURL:v28 useLocalPeersFileAPI:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) error:0];
  }

  else
  {
    if (v25)
    {
      uint64_t v34 = OSLogHandleForIMFoundationCategory("LocalAttachments");
      uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v35, OS_LOG_TYPE_INFO, "Transcoding Failed for Peer Relay:", buf, 2u);
      }
    }

    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "localURL", v58, v60));
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v36 path]);

    if (v28)
    {
      uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
      __int128 v40 = (void *)objc_claimAutoreleasedReturnValue([v39 attributesOfItemAtPath:v28 error:0]);

      __int128 v41 = (void *)objc_claimAutoreleasedReturnValue([v40 objectForKeyedSubscript:NSFileSize]);
      __int128 v42 = (const __CFString *)[v41 longValue];

      uint64_t v43 = *(void *)(*(void *)(a1 + 64) + 8LL);
      if (*(_BYTE *)(v43 + 24)) {
        BOOL v44 = 1;
      }
      else {
        BOOL v44 = (unint64_t)v42 > 0x100000;
      }
      char v45 = v44;
      *(_BYTE *)(v43 + 24) = v45;
    }

    else
    {
      __int128 v42 = 0LL;
    }

    if (IMOSLoggingEnabled(v37, v38))
    {
      uint64_t v51 = OSLogHandleForIMFoundationCategory("LocalAttachments");
      uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
      {
        if (*(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL)) {
          uint64_t v53 = @"YES";
        }
        else {
          uint64_t v53 = @"NO";
        }
        *(_DWORD *)buf = 138412546;
        id v63 = v53;
        __int16 v64 = 2048;
        uint64_t v65 = v42;
        _os_log_impl(&dword_0, v52, OS_LOG_TYPE_INFO, "useLocalPeersFileAPI: %@ fileSize:%ld", buf, 0x16u);
      }
    }

    uint64_t v54 = *(void *)(a1 + 72);
    uint64_t v56 = *(void *)(a1 + 48);
    uint64_t v55 = *(void *)(a1 + 56);
    double v57 = *(void **)(a1 + 40);
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localURL]);
    [v57 _sendAttachmentToPeerDevice:v54 fileTransferGUID:v56 messageGuid:v55 fileURL:v31 useLocalPeersFileAPI:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) error:5];
  }
}

void sub_5F248(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  int v9 = IMOSLoggingEnabled(v7, v8);
  if (!v6 || v7)
  {
    if (v9)
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory("LocalAttachments");
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        int v19 = 138412290;
        id v20 = v7;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_INFO,  "File safe render failed for Peer Relay: %@",  (uint8_t *)&v19,  0xCu);
      }
    }

    uint64_t v14 = *(void *)(a1 + 72);
    id v16 = *(void **)(a1 + 32);
    uint64_t v15 = *(void *)(a1 + 40);
    uint64_t v17 = *(void *)(a1 + 48);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) localURL]);
    [v16 _sendAttachmentToPeerDevice:v14 fileTransferGUID:v15 messageGuid:v17 fileURL:v18 useLocalPeersFileAPI:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) error:5];
  }

  else
  {
    if (v9)
    {
      uint64_t v10 = OSLogHandleForIMFoundationCategory("LocalAttachments");
      int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        LOWORD(v19) = 0;
        _os_log_impl(&dword_0, v11, OS_LOG_TYPE_INFO, "File safe render success.", (uint8_t *)&v19, 2u);
      }
    }

    [*(id *)(a1 + 32) _sendAttachmentToPeerDevice:*(void *)(a1 + 72) fileTransferGUID:*(void *)(a1 + 40) messageGuid:*(void *)(a1 + 48) fileURL:v6 useLocalPeersFileAPI:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) error:0];
  }
}

id sub_5F418(uint64_t a1)
{
  return [*(id *)(a1 + 32) remotefileRequest:*(void *)(a1 + 40) attempts:*(void *)(a1 + 48) + 1 shouldRetry:1];
}

id sub_5F430(uint64_t a1)
{
  return [*(id *)(a1 + 32) remotefileRequest:*(void *)(a1 + 40) attempts:*(void *)(a1 + 48) + 1 shouldRetry:1];
}

void sub_5F968(void *a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 24) objectForKey:a1[5]]);
  uint64_t v4 = (void (**)(void, void))v2;
  if (v2)
  {
    if (IMOSLoggingEnabled(v2, v3))
    {
      uint64_t v5 = OSLogHandleForIMFoundationCategory("Warning");
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = a1[6];
        int v8 = 138412290;
        uint64_t v9 = v7;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_INFO,  "PayloadAttachments. Timed out waiting for a payload data from companion for message guid %@",  (uint8_t *)&v8,  0xCu);
      }
    }

    v4[2](v4, 0LL);
  }
}

LABEL_60:
      }
    }

    else if (v55)
    {
      id v58 = OSLogHandleForIMFoundationCategory("Warning");
      double v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
      if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v77 = v65;
        _os_log_impl( &dword_0,  v57,  OS_LOG_TYPE_INFO,  "PayloadAttachments Sent message payload successfully for guid %@",  buf,  0xCu);
      }

      goto LABEL_60;
    }

    goto LABEL_62;
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[IMDMessageStore sharedInstance](&OBJC_CLASS___IMDMessageStore, "sharedInstance"));
  uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue([v10 messageWithGUID:v65]);

  int v11 = (void *)objc_claimAutoreleasedReturnValue([v62 payloadData]);
  LODWORD(v10) = v11 == 0LL;

  uint64_t v14 = IMOSLoggingEnabled(v12, v13);
  if (!(_DWORD)v10)
  {
    uint64_t v15 = v62;
    if (v14)
    {
      id v16 = OSLogHandleForIMEventCategory("PayloadAttachments");
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        id v77 = v65;
        uint64_t v78 = 2048;
        uint64_t v79 = a4;
        _os_log_impl(&dword_0, v17, OS_LOG_TYPE_INFO, "Found messageitem %@ with payload attempt %lul ", buf, 0x16u);
      }

      uint64_t v15 = v62;
    }

    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v15 payloadData]);
    uint64_t v61 = [v18 _FTCopyGzippedData];

    unint64_t v70 = 0u;
    uint64_t v71 = 0u;
    double v68 = 0u;
    uint64_t v69 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue([v62 fileTransferGUIDs]);
    int v19 = [obj countByEnumeratingWithState:&v68 objects:v75 count:16];
    if (v19)
    {
      id v20 = 0LL;
      uint64_t v21 = *(void *)v69;
      do
      {
        for (i = 0LL; i != v19; i = (char *)i + 1)
        {
          if (*(void *)v69 != v21) {
            objc_enumerationMutation(obj);
          }
          uint64_t v23 = *(void **)(*((void *)&v68 + 1) + 8LL * (void)i);
          uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[IMDFileTransferCenter sharedInstance](&OBJC_CLASS___IMDFileTransferCenter, "sharedInstance"));
          int v25 = (void *)objc_claimAutoreleasedReturnValue([v24 transferForGUID:v23]);

          if (v25)
          {
            id v29 = (void *)objc_claimAutoreleasedReturnValue([v25 localURL]);
            if (v29)
            {
              uint64_t v67 = 0LL;
              uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithContentsOfURL:options:error:]( &OBJC_CLASS___NSData,  "dataWithContentsOfURL:options:error:",  v29,  1LL,  &v67));
              uint64_t v31 = v67;
              uint64_t v32 = [v30 length];
              if (v32) {
                uint64_t v34 = v31 == 0LL;
              }
              else {
                uint64_t v34 = 0;
              }
              if (v34)
              {
                __int128 v41 = v20;
                if (!v20) {
                  __int128 v41 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
                }
                id v20 = v41;
                -[NSMutableArray addObject:](v41, "addObject:", v30);
              }

              else if (IMOSLoggingEnabled(v32, v33))
              {
                uint64_t v35 = OSLogHandleForIMFoundationCategory("Warning");
                uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
                if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 138412546;
                  id v77 = v23;
                  uint64_t v78 = 2112;
                  uint64_t v79 = (unint64_t)v31;
                  _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_INFO,  "PayloadAttachments Missing attachment data for attachment with file transfer GUID %@, possible read error %@",  buf,  0x16u);
                }
              }
            }

            else if (IMOSLoggingEnabled(0LL, v28))
            {
              uint64_t v39 = OSLogHandleForIMFoundationCategory("Warning");
              __int128 v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
              if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412290;
                id v77 = v23;
                _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_INFO,  "PayloadAttachments Missing attachment URL for attachment with file transfer GUID %@",  buf,  0xCu);
              }
            }
          }

          else if (IMOSLoggingEnabled(v26, v27))
          {
            uint64_t v37 = OSLogHandleForIMFoundationCategory("Warning");
            uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
            if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              id v77 = v23;
              _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_INFO,  "PayloadAttachments Did not find file transfer with GUID %@",  buf,  0xCu);
            }
          }
        }

        int v19 = [obj countByEnumeratingWithState:&v68 objects:v75 count:16];
      }

      while (v19);

      __int128 v42 = v61;
      uint64_t v43 = v20;
    }

    else
    {

      uint64_t v43 = 0LL;
      __int128 v42 = v61;
    }

    goto LABEL_48;
  }

  if (v14)
  {
    uint64_t v59 = OSLogHandleForIMFoundationCategory("Warning");
    id v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412802;
      id v77 = v65;
      uint64_t v78 = 2112;
      uint64_t v79 = (unint64_t)v62;
      uint64_t v80 = 2048;
      double v81 = a4;
      _os_log_impl( &dword_0,  v60,  OS_LOG_TYPE_INFO,  "PayloadAttachments Did not find data for guid %@ messageItem %@ attempts %lu",  buf,  0x20u);
    }
  }

  v72[0] = _NSConcreteStackBlock;
  v72[1] = 3221225472LL;
  v72[2] = sub_60890;
  v72[3] = &unk_D6FC0;
  void v72[4] = self;
  id v73 = v64;
  id v74 = a4;
  im_dispatch_after(v72, 10.0);

  uint64_t v46 = v62;
LABEL_62:
}

    swift_release(v1[21]);
    uint64_t v18 = (uint64_t)&selRef_updateTransfer_currentBytes_totalBytes_;
    if ([v173 allAreReachable])
    {
      unint64_t v70 = v1[12];
      v1[31] = v70;
      uint64_t v71 = *(int **)(v158 + 32);
      uint64_t v72 = v71[1];
      id v181 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v71 + *v71);
      swift_bridgeObjectRetain(v70);
      id v73 = (uint64_t **)swift_task_alloc(v72);
      v1[32] = (uint64_t)v73;
      void *v73 = v1;
      v73[1] = (uint64_t *)sub_8A2CC;
      return v181(v70, ObjectType, v158);
    }

    if (![(id)v1[30] error])
    {
      uint64_t v75 = *(void *)(*v159 + 16);
      if ((unint64_t)v75 >= 2
        && (uint64_t)[(id)v1[29] maxChatParticipantsForContext:v1[22]] < v75)
      {
        [(id)v1[30] setError:1];
      }
    }

    uint64_t v76 = [(id)v1[22] lastUsedServiceName];
    if (!v76) {
      goto LABEL_98;
    }
    id v77 = v76;
    uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
    uint64_t v80 = v79;

    if (!v80) {
      goto LABEL_98;
    }
    if (v78 == 0x6567617373654D69LL && v80 == 0xE800000000000000LL)
    {
      swift_bridgeObjectRelease(0xE800000000000000LL);
    }

    else
    {
      double v95 = _stringCompareWithSmolCheck(_:_:expecting:)(v78, v80, 0x6567617373654D69LL, 0xE800000000000000LL, 0LL);
      swift_bridgeObjectRelease(v80);
      if ((v95 & 1) == 0) {
        goto LABEL_98;
      }
    }

    if ([(id)v1[22] chatStyle] == 43)
    {
      uint64_t v96 = [(id)v1[22] chatIdentifier];
      if (v96)
      {
        double v97 = (void *)v1[22];

        id v98 = [v97 isForPendingConversation];
        BOOL v44 = v1[12];
        if ((v98 & 1) == 0)
        {
          id v99 = *(void *)(v44 + 16);
          if (v99)
          {
            swift_bridgeObjectRetain(v1[12]);
            uint64_t v100 = (void *)(v44 + 40);
            while (1)
            {
              id v101 = *v100;
              swift_bridgeObjectRetain(*v100);
              id v102 = String._bridgeToObjectiveC()();
              uint64_t IsEmail = IMStringIsEmail(v102);

              swift_bridgeObjectRelease(v101);
              if ((IsEmail & 1) != 0) {
                break;
              }
              v100 += 2;
              if (!--v99)
              {
                swift_bridgeObjectRelease_n(v44, 2LL);
                goto LABEL_100;
              }
            }

id sub_60890(uint64_t a1)
{
  return [*(id *)(a1 + 32) handlePayloadDataRequest:*(void *)(a1 + 40) attempts:*(void *)(a1 + 48) + 1];
}

id sub_60BB4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) sendPayloadData:*(void *)(a1 + 40) messageGUID:*(void *)(a1 + 48) sessionInfo:a2 topic:*(void *)(a1 + 56) completionBlock:*(void *)(a1 + 64)];
}

void sub_61090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (IMOSLoggingEnabled(a1, a2))
  {
    uint64_t v8 = OSLogHandleForIMFoundationCategory("PayloadAttachments");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v11 = 138413058;
      uint64_t v12 = v10;
      __int16 v13 = 2048;
      uint64_t v14 = a2;
      __int16 v15 = 2048;
      uint64_t v16 = a3;
      __int16 v17 = 2048;
      uint64_t v18 = a4;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_INFO,  "Send progress updated to for transferID %@ %lld of %lld (%lld bps)",  (uint8_t *)&v11,  0x2Au);
    }
  }

void sub_611BC( void *a1, void *a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, uint64_t a10)
{
  id v47 = a2;
  id v17 = a4;
  id v46 = a5;
  id v18 = a6;
  id v19 = a7;
  id v20 = a8;
  id v21 = a9;
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  uint64_t v23 = a1[4];
  id v48 = 0LL;
  [v22 removeItemAtPath:v23 error:&v48];
  id v24 = v48;

  uint64_t v27 = IMOSLoggingEnabled(v25, v26);
  if (v24)
  {
    if (!(_DWORD)v27) {
      goto LABEL_10;
    }
    uint64_t v29 = OSLogHandleForIMFoundationCategory("Warning");
    uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      uint64_t v31 = a1[4];
      *(_DWORD *)buf = 138412546;
      uint64_t v50 = v31;
      __int16 v51 = 2112;
      id v52 = v24;
      _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_INFO,  "PayloadAttachments. Could not delete temp payload data file at path %@ error %@",  buf,  0x16u);
    }
  }

  else
  {
    if (!(_DWORD)v27) {
      goto LABEL_10;
    }
    uint64_t v32 = OSLogHandleForIMFoundationCategory("PayloadAttachments");
    uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      uint64_t v33 = a1[4];
      *(_DWORD *)buf = 138412290;
      uint64_t v50 = v33;
      _os_log_impl(&dword_0, v30, OS_LOG_TYPE_INFO, "deleted temp file at path %@", buf, 0xCu);
    }
  }

LABEL_10:
  int v34 = IMOSLoggingEnabled(v27, v28);
  if ((_DWORD)a3)
  {
    if (v34)
    {
      uint64_t v35 = OSLogHandleForIMEventCategory("PayloadAttachments");
      uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        uint64_t v37 = a1[5];
        *(_DWORD *)buf = 138414082;
        uint64_t v50 = v37;
        __int16 v51 = 2112;
        id v52 = v47;
        __int16 v53 = 2112;
        uint64_t v54 = @"YES";
        __int16 v55 = 2112;
        id v56 = v17;
        __int16 v57 = 2112;
        id v58 = v18;
        __int16 v59 = 2112;
        id v60 = v19;
        __int16 v61 = 2112;
        id v62 = v20;
        __int16 v63 = 2048;
        uint64_t v64 = a10;
        _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_INFO,  "Payload upload completed transferID %@ sent path %@ success %@ error %@ ownerID %@ signature %@ requestURLStri ng %@ outFileSize %ld",  buf,  0x52u);
      }
    }

    uint64_t v38 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v39 = (__CFDictionary *)v38;
    if (v18) {
      CFDictionarySetValue((CFMutableDictionaryRef)v38, @"o", v18);
    }
    if (v19) {
      CFDictionarySetValue(v39, @"s", v19);
    }
    if (v20) {
      CFDictionarySetValue(v39, @"r", v20);
    }
    if (v21) {
      CFDictionarySetValue(v39, @"e", v21);
    }
    __int128 v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a10));
    if (v40) {
      CFDictionarySetValue(v39, @"f", v40);
    }
  }

  else
  {
    if (v34)
    {
      uint64_t v41 = OSLogHandleForIMFoundationCategory("Warning");
      __int128 v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
      {
        uint64_t v43 = a1[5];
        BOOL v44 = (const __CFString *)a1[6];
        *(_DWORD *)buf = 138412802;
        uint64_t v50 = v43;
        __int16 v51 = 2112;
        id v52 = v17;
        __int16 v53 = 2112;
        uint64_t v54 = v44;
        _os_log_impl( &dword_0,  v42,  OS_LOG_TYPE_INFO,  "PayloadAttachments. Failed uploading payload attachment %@ with error %@ msg GUID %@",  buf,  0x20u);
      }
    }

    uint64_t v39 = 0LL;
  }

  uint64_t v45 = a1[7];
  if (v45) {
    (*(void (**)(uint64_t, __CFDictionary *, uint64_t))(v45 + 16))(v45, v39, a3);
  }
}

void sub_61B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (IMOSLoggingEnabled(a1, a2))
  {
    uint64_t v8 = OSLogHandleForIMFoundationCategory("PayloadAttachments");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v11 = 138413058;
      uint64_t v12 = v10;
      __int16 v13 = 2048;
      uint64_t v14 = a2;
      __int16 v15 = 2048;
      uint64_t v16 = a3;
      __int16 v17 = 2048;
      uint64_t v18 = a4;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_INFO,  "Downlaod progress updated to for transferID %@ %lld of %lld (%lld bps)",  (uint8_t *)&v11,  0x2Au);
    }
  }

void sub_61C60(uint64_t a1, void *a2, void *a3, int a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a5;
  id v14 = a6;
  int v16 = IMOSLoggingEnabled(v14, v15);
  if (a4)
  {
    if (!v16) {
      goto LABEL_10;
    }
    uint64_t v17 = OSLogHandleForIMFoundationCategory("PayloadAttachments");
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = *(void *)(a1 + 32);
      int v28 = 138412546;
      uint64_t v29 = v19;
      __int16 v30 = 2112;
      id v31 = v12;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_INFO,  "Download payload data for message %@ to path %@",  (uint8_t *)&v28,  0x16u);
    }
  }

  else
  {
    if (!v16) {
      goto LABEL_10;
    }
    uint64_t v20 = OSLogHandleForIMFoundationCategory("Warning");
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      uint64_t v21 = *(void *)(a1 + 32);
      int v28 = 138412546;
      uint64_t v29 = v21;
      __int16 v30 = 2112;
      id v31 = v13;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_INFO,  "PayloadAttachments Failed downloading payload data for message %@ error %@",  (uint8_t *)&v28,  0x16u);
    }
  }

LABEL_10:
  if (*(void *)(a1 + 40))
  {
    if ([v12 length])
    {
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v12));
    }

    else
    {
      if (IMOSLoggingEnabled(0LL, v22))
      {
        uint64_t v24 = OSLogHandleForIMFoundationCategory("Warning");
        uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
        {
          uint64_t v26 = *(void *)(a1 + 32);
          uint64_t v27 = @"NO";
          int v28 = 138412802;
          if (a4) {
            uint64_t v27 = @"YES";
          }
          uint64_t v29 = v26;
          __int16 v30 = 2112;
          id v31 = v13;
          __int16 v32 = 2112;
          uint64_t v33 = v27;
          _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_INFO,  "PayloadAttachments: Failed to get path for message %@ with error %@, result %@",  (uint8_t *)&v28,  0x20u);
        }
      }

      uint64_t v23 = 0LL;
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_622C0(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  id v7 = v5;
  if (!a3)
  {
    id v6 = *(void (**)(void))(*(void *)(a1 + 72) + 16LL);
LABEL_6:
    v6();
    goto LABEL_7;
  }

  if (!v5)
  {
    id v6 = *(void (**)(void))(*(void *)(a1 + 72) + 16LL);
    goto LABEL_6;
  }

  [*(id *)(a1 + 32) _processDownloadedPayload:v5 forMessageGUID:*(void *)(a1 + 40) balloonBundleID:*(void *)(a1 + 48) fromIdentifier:*(void *)(a1 + 56) senderToken:*(void *)(a1 + 64) withCompletionBlock:*(void *)(a1 + 72)];
LABEL_7:
}

void sub_62D74(id a1)
{
  qword_E4520 = objc_alloc_init(&OBJC_CLASS___MessageEngramGroupController);
}

id sub_62E04(uint64_t a1)
{
  return _[*(id *)(a1 + 32) appendMiddleware:*(void *)(a1 + 40)];
}

void sub_62F7C(uint64_t a1, void *a2)
{
  id v4 = [[ENStableGroupID alloc] initWithDataRepresentation:*(void *)(a1 + 40)];
  if (v4)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_630FC;
    v9[3] = &unk_D71A0;
    v9[4] = *(void *)(a1 + 56);
    [a2 fetchLatestGroupWithStableID:v4 completion:v9];
  }

  else
  {
    if (IMOSLoggingEnabled(0LL, v5))
    {
      id v6 = (os_log_s *)OSLogHandleForIMFoundationCategory("Warning");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        id v7 = [*(id *)(a1 + 48) engramID];
        *(_DWORD *)buf = 138412290;
        id v11 = v7;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_INFO,  "Couldn't create a valid stableID with for engramid: %@",  buf,  0xCu);
      }
    }

    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    _DWORD v8[2] = sub_63174;
    v8[3] = &unk_D71C8;
    v8[4] = *(void *)(a1 + 56);
    dispatch_async(&_dispatch_main_q, v8);
  }

void sub_630FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_6315C;
  block[3] = &unk_D7178;
  uint64_t v3 = *(void *)(a1 + 32);
  block[5] = a3;
  block[6] = v3;
  void block[4] = a2;
  dispatch_async(&_dispatch_main_q, block);
}

uint64_t sub_6315C(void *a1)
{
  return (*(uint64_t (**)(void, void, uint64_t, void))(a1[6] + 16LL))(a1[6], a1[4], 1LL, a1[5]);
}

uint64_t sub_63174(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, NSError *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  0LL,  0LL,  +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  EngramControllerErrorDomain,  3LL,  0LL));
}

id sub_636DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a4)
  {
    if (IMOSLoggingEnabled(a1, a2))
    {
      uint64_t v5 = (os_log_s *)OSLogHandleForIMFoundationCategory("EngramGroup");
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        id v6 = [*(id *)(a1 + 32) engramID];
        uint64_t v7 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        id v31 = v6;
        __int16 v32 = 2112;
        uint64_t v33 = v7;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_INFO,  "We failed to look up the engram group for the id: %@ on chat: %@",  buf,  0x16u);
      }
    }

    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 96) + 16LL))(*(void *)(a1 + 96));
  }

  else
  {
    id v11 = [*(id *)(a1 + 32) pendingENGroupParticipantUpdate];
    int v12 = (int)v11;
    int v14 = IMOSLoggingEnabled(v11, v13);
    if (v12)
    {
      if (v14)
      {
        uint64_t v15 = (os_log_s *)OSLogHandleForIMFoundationCategory("EngramGroup");
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_INFO,  "We are still pending participants on send so let's try to update the group with destinations",  buf,  2u);
        }
      }

      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472LL;
      v24[2] = sub_63978;
      v24[3] = &unk_D7218;
      uint64_t v16 = *(void *)(a1 + 88);
      uint64_t v17 = *(void *)(a1 + 96);
      int8x16_t v18 = *(int8x16_t *)(a1 + 32);
      uint64_t v26 = *(void *)(a1 + 48);
      __int128 v27 = *(_OWORD *)(a1 + 56);
      uint64_t v19 = *(void **)(a1 + 80);
      uint64_t v28 = *(void *)(a1 + 72);
      uint64_t v29 = v17;
      int8x16_t v25 = vextq_s8(v18, v18, 8uLL);
      return [v19 _createParticipantsAndUpdateGroup:v18.i64[0] addParticipantsURIs:0 removeParticipantURIs:0 fromID:(void)v27 service:v16 completion:v24];
    }

    else
    {
      if (v14)
      {
        uint64_t v20 = (os_log_s *)OSLogHandleForIMFoundationCategory("EngramGroup");
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          id v21 = [*(id *)(a1 + 32) engramID];
          *(_DWORD *)buf = 138412290;
          id v31 = v21;
          _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_INFO,  "We will be sending message to group with engram id: %@",  buf,  0xCu);
        }
      }

      if (a3) {
        uint64_t v22 = a2;
      }
      else {
        uint64_t v22 = 0LL;
      }
      LOBYTE(v23) = 1;
      return (id)(*(uint64_t (**)(void, void, void, void, void, void, void, uint64_t, void))(*(void *)(a1 + 96) + 16LL))( *(void *)(a1 + 96),  *(void *)(a1 + 40),  *(void *)(a1 + 32),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  v22,  v23);
    }
  }

uint64_t sub_63978(uint64_t a1, uint64_t a2, int a3)
{
  int v5 = IMOSLoggingEnabled(a1, a2);
  if (a3)
  {
    if (v5)
    {
      id v6 = (os_log_s *)OSLogHandleForIMFoundationCategory("EngramGroup");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_INFO,  "We successfully updated the group with our pending participants, sending to the updated group we got back",  buf,  2u);
      }
    }

    return (*(uint64_t (**)(void))(*(void *)(a1 + 80) + 16LL))(*(void *)(a1 + 80));
  }

  else
  {
    if (v5)
    {
      uint64_t v8 = (os_log_s *)OSLogHandleForIMFoundationCategory("EngramGroup");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_INFO,  "We weren't able to update the participants so sending with device to device crypto",  v9,  2u);
      }
    }

    return (*(uint64_t (**)(void))(*(void *)(a1 + 80) + 16LL))(*(void *)(a1 + 80));
  }

uint64_t sub_63AC0(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  int v7 = IMOSLoggingEnabled(a1, a2);
  if ((a3 & 1) != 0)
  {
    if (v7)
    {
      uint64_t v8 = (os_log_s *)OSLogHandleForIMFoundationCategory("EngramGroup");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, "We successfully created the engram group prior to send", buf, 2u);
      }
    }
  }

  else if (v7)
  {
    uint64_t v9 = (os_log_s *)OSLogHandleForIMFoundationCategory("EngramGroup");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v12 = a4;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_INFO,  "We failed to create the engram group prior to send with error: %@",  buf,  0xCu);
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 80) + 16LL))(*(void *)(a1 + 80));
}

void sub_63C84(id *a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    if (IMOSLoggingEnabled(a1, a2))
    {
      int v5 = (os_log_s *)OSLogHandleForIMFoundationCategory("Warning");
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        id v6 = [a1[4] engramID];
        *(_DWORD *)buf = 138412290;
        id v21 = v6;
        int v7 = "We failed to look up the group for engram id: %@ to compare to the incoming group";
LABEL_5:
        uint64_t v8 = v5;
LABEL_10:
        uint32_t v12 = 12;
LABEL_11:
        _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, v7, buf, v12);
      }
    }
  }

  else
  {
    int8x16_t v18 = 0LL;
    uint64_t v19 = 0LL;
    id v9 = objc_msgSend( objc_msgSend(a1[5], "groupID"),  "compare:withResult:error:",  objc_msgSend(a2, "groupID"),  &v19,  &v18);
    if (v18)
    {
      if (IMOSLoggingEnabled(v9, v10))
      {
        id v11 = (os_log_s *)OSLogHandleForIMFoundationCategory("Warning");
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          id v21 = v18;
          int v7 = "There was an error comparing groupIDs on message receive: %@";
          uint64_t v8 = v11;
          goto LABEL_10;
        }
      }
    }

    else
    {
      if (v19 != 1)
      {
        if (v19)
        {
          if (v19 != -1) {
            return;
          }
          uint64_t v13 = (os_log_s *)OSLogHandleForIMFoundationCategory("EngramGroup");
          if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO)) {
            return;
          }
          *(_WORD *)buf = 0;
          int v7 = "Incoming groupID is older than our current group so we want to bail on converging the participants";
        }

        else
        {
          uint64_t v13 = (os_log_s *)OSLogHandleForIMFoundationCategory("EngramGroup");
          if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO)) {
            return;
          }
          *(_WORD *)buf = 0;
          int v7 = "Incoming groupID is older than our current group so we want to bail on converging the participants";
        }

        uint64_t v8 = v13;
        uint32_t v12 = 2;
        goto LABEL_11;
      }

      if (IMOSLoggingEnabled(v9, v10))
      {
        int v14 = (os_log_s *)OSLogHandleForIMFoundationCategory("EngramGroup");
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_INFO,  "Incoming groupID is newer than our current group's so we want to converge the participants",  buf,  2u);
        }
      }

      id v15 = [a1[6] _callerURIForChat:a1[4]];
      if ([v15 length])
      {
        [a1[6] _updateLocalParticipantsFromEngroup:a1[5] chat:a1[4] fromID:v15];
        return;
      }

      if (IMOSLoggingEnabled(0LL, v16))
      {
        int v5 = (os_log_s *)OSLogHandleForIMFoundationCategory("Warning");
        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          id v17 = a1[4];
          *(_DWORD *)buf = 138412290;
          id v21 = v17;
          int v7 = "We could not update the local chat's participants to the incoming group's participants: %@";
          goto LABEL_5;
        }
      }
    }
  }

uint64_t sub_6444C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_6468C(uint64_t a1, void *a2)
{
  if ([a2 count])
  {
    int v5 = *(void **)(a1 + 32);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    _DWORD v8[2] = sub_6478C;
    v8[3] = &unk_D72B8;
    __int128 v9 = *(_OWORD *)(a1 + 40);
    uint64_t v10 = a2;
    __int128 v11 = *(_OWORD *)(a1 + 56);
    return [v5 performGroupTask:v8];
  }

  else
  {
    if (IMOSLoggingEnabled(0LL, v4))
    {
      int v7 = (os_log_s *)OSLogHandleForIMFoundationCategory("EngramGroup");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_INFO,  "We didn't get any ENParticipants back from participantsForDestinations --> Not creating engram group",  buf,  2u);
      }
    }

    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

void sub_6478C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = [*(id *)(a1 + 32) _checkAndSetUpContext:a2];
  if (a3)
  {
    if (IMOSLoggingEnabled(v6, v7))
    {
      uint64_t v8 = (os_log_s *)OSLogHandleForIMFoundationCategory("EngramGroup");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        uint64_t v11 = a2;
        __int16 v12 = 2112;
        uint64_t v13 = a3;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_INFO,  "We failed to performGroupTask to create group with ENGroupContext: %@ error: %@",  buf,  0x16u);
      }
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_648F8;
    block[3] = &unk_D71C8;
    void block[4] = *(void *)(a1 + 64);
    dispatch_async(&_dispatch_main_q, block);
  }

  else
  {
    _[*(id *)(a1 + 32) _createGroupFromGroupContext:a2 chat:*(void *)(a1 + 40) enparticipants:*(void *)(a1 + 48) destinations:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
  }

uint64_t sub_648F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_64A40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_64AA8;
  block[3] = &unk_D7308;
  void block[4] = a2;
  void block[5] = a3;
  uint64_t v5 = *(void *)(a1 + 48);
  __int128 v4 = *(_OWORD *)(a1 + 32);
  dispatch_async(&_dispatch_main_q, block);
}

uint64_t sub_64AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  if (!v3 || *(void *)(a1 + 40))
  {
    if (IMOSLoggingEnabled(v3, a2))
    {
      __int128 v4 = (os_log_s *)OSLogHandleForIMFoundationCategory("EngramGroup");
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        uint64_t v5 = *(void **)(a1 + 56);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v6 = *(void *)(a1 + 40);
        int v16 = 138412802;
        id v17 = v5;
        __int16 v18 = 2112;
        uint64_t v19 = v6;
        __int16 v20 = 2112;
        uint64_t v21 = v7;
        _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_INFO,  "We failed to create an engramGroup for engramParticipants: %@ with error: %@ group: %@",  (uint8_t *)&v16,  0x20u);
      }
    }

    return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  id v9 = objc_msgSend( objc_msgSend(objc_msgSend(objc_msgSend(v3, "groupID"), "stableGroupID"), "dataRepresentation"),  "__im_engramStringRepresentation");
  id v10 = [v9 length];
  int v12 = IMOSLoggingEnabled(v10, v11);
  if (!v10)
  {
    if (v12)
    {
      int v14 = (os_log_s *)OSLogHandleForIMFoundationCategory("EngramGroup");
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        id v15 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "groupID"), "stableGroupID");
        int v16 = 138412290;
        id v17 = v15;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_INFO,  "stableIDStringRepresentation has length 0 for stableID: %@",  (uint8_t *)&v16,  0xCu);
      }
    }

    return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  if (v12)
  {
    uint64_t v13 = (os_log_s *)OSLogHandleForIMFoundationCategory("EngramGroup");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      int v16 = 138412290;
      id v17 = v9;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_INFO,  "Successfully created an engramGroup with stableGroupID stringRep: %@",  (uint8_t *)&v16,  0xCu);
    }
  }

  [*(id *)(a1 + 48) updateEngramID:v9];
  [*(id *)(a1 + 48) setCreateEngramGroupOnMessageSend:0];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_64E4C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v8 = (char *)[a4 code];
  int v10 = IMOSLoggingEnabled(v8, v9);
  if (v8 == (_BYTE *)&dword_0 + 1)
  {
    if (v10)
    {
      uint64_t v11 = (os_log_s *)OSLogHandleForIMFoundationCategory("EngramGroup");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        LOWORD(v22) = 0;
        _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_INFO,  "We tried to add or remove participants to the group, but the group had already been updated",  (uint8_t *)&v22,  2u);
      }
    }

    id v12 = objc_msgSend( objc_msgSend(*(id *)(a1 + 32), "_URIsFromApplicationData:", objc_msgSend(a2, "sharedApplicationData")),  "count");
    BOOL v13 = v12 == 0LL;
    int v15 = IMOSLoggingEnabled(v12, v14);
    if (v13)
    {
      if (v15)
      {
        uint64_t v21 = (os_log_s *)OSLogHandleForIMFoundationCategory("Warning");
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          LOWORD(v22) = 0;
          _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_INFO,  "//**-----We did not get back destinations and cannot update the group!!! Please file a radar!!!-----*///",  (uint8_t *)&v22,  2u);
        }
      }

      +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  EngramControllerErrorDomain,  5LL,  0LL);
      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    }

    else if (v15)
    {
      int v16 = (os_log_s *)OSLogHandleForIMFoundationCategory("EngramGroup");
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        id v17 = *(const __CFString **)(a1 + 40);
        int v22 = 138412290;
        unsigned int v23 = v17;
        _os_log_impl(&dword_0, v16, OS_LOG_TYPE_INFO, "Going to retry adding participants: %@", (uint8_t *)&v22, 0xCu);
      }
    }
  }

  else
  {
    if (v10)
    {
      __int16 v18 = (os_log_s *)OSLogHandleForIMFoundationCategory("EngramGroup");
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        uint64_t v19 = @"NO";
        if ((_DWORD)a3) {
          uint64_t v19 = @"YES";
        }
        int v22 = 138412290;
        unsigned int v23 = v19;
        _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_INFO,  "Going to call completion on adding participants with success: %@",  (uint8_t *)&v22,  0xCu);
      }
    }

    if ((_DWORD)a3) {
      __int16 v20 = a2;
    }
    else {
      __int16 v20 = 0LL;
    }
    (*(void (**)(void, void *, uint64_t, void *))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  v20,  a3,  a4);
  }

id sub_6515C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v4 = [*(id *)(a1 + 32) _URIsForChatParticipants:*(void *)(a1 + 40) fromID:*(void *)(a1 + 48)];
    if ([*(id *)(a1 + 56) count]) {
      id v4 = [v4 arrayByAddingObjectsFromArray:*(void *)(a1 + 56)];
    }
    if ([*(id *)(a1 + 64) count]) {
      id v4 = [v4 arrayByExcludingObjectsInArray:*(void *)(a1 + 64)];
    }
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_6530C;
    v9[3] = &unk_D7380;
    uint64_t v5 = *(void **)(a1 + 32);
    v9[4] = *(void *)(a1 + 40);
    void v9[5] = v4;
    v9[6] = v5;
    v9[7] = a2;
    __int128 v10 = *(_OWORD *)(a1 + 72);
    return [v5 _enparticipantsForDestinations:v4 completion:v9];
  }

  else
  {
    if (IMOSLoggingEnabled(a1, 0LL))
    {
      uint64_t v7 = (os_log_s *)OSLogHandleForIMFoundationCategory("EngramGroup");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        id v8 = [*(id *)(a1 + 40) engramID];
        *(_DWORD *)buf = 138412290;
        id v12 = v8;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_INFO,  "We failed to look up an engram group for engram id: %@ so not updating engram group",  buf,  0xCu);
      }
    }

    return (id)(*(uint64_t (**)(void, void, void, NSError *))(*(void *)(a1 + 80) + 16LL))( *(void *)(a1 + 80),  0LL,  0LL,  +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  EngramControllerErrorDomain,  3LL,  0LL));
  }

id sub_6530C(uint64_t a1, void *a2)
{
  if (IMOSLoggingEnabled(a1, a2))
  {
    id v4 = (os_log_s *)OSLogHandleForIMFoundationCategory("EngramGroup");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      LOWORD(v15) = 0;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_INFO, "We were able to update the destinations", (uint8_t *)&v15, 2u);
    }
  }

  id v5 = [a2 count];
  BOOL v6 = v5 == 0LL;
  int v8 = IMOSLoggingEnabled(v5, v7);
  if (v6)
  {
    if (v8)
    {
      id v12 = (os_log_s *)OSLogHandleForIMFoundationCategory("EngramGroup");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        BOOL v13 = (NSNumber *)[*(id *)(a1 + 32) engramID];
        uint64_t v14 = *(void *)(a1 + 40);
        int v15 = 138412546;
        int v16 = v13;
        __int16 v17 = 2112;
        uint64_t v18 = v14;
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_INFO,  "We failed to create enparticipants when trying to update group [engram id: %@] with destinations: %@",  (uint8_t *)&v15,  0x16u);
      }
    }

    +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  EngramControllerErrorDomain,  4LL,  0LL);
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

  else
  {
    if (v8)
    {
      uint64_t v9 = (os_log_s *)OSLogHandleForIMFoundationCategory("EngramGroup");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        __int128 v10 = +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [a2 count]);
        int v15 = 138412290;
        int v16 = v10;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_INFO,  "Participants were are updating to for engroup count: %@",  (uint8_t *)&v15,  0xCu);
      }
    }

    return [*(id *)(a1 + 48) _updateGroupWithParticipants:*(void *)(a1 + 56) chat:*(void *)(a1 + 32) service:*(void *)(a1 + 64) participants:a2 destinations:*(void *)(a1 + 40) completion:*(void *)(a1 + 72)];
  }

void sub_65598(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = [*(id *)(a1 + 32) _checkAndSetUpContext:a2];
  if (a3)
  {
    if (IMOSLoggingEnabled(v6, v7))
    {
      int v8 = (os_log_s *)OSLogHandleForIMFoundationCategory("EngramGroup");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v19 = a3;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_INFO,  "We failed to perform the group task to update the participants with error: %@",  buf,  0xCu);
      }
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_65714;
    block[3] = &unk_D73D0;
    uint64_t v9 = *(void *)(a1 + 72);
    void block[4] = a3;
    void block[5] = v9;
    dispatch_async(&_dispatch_main_q, block);
  }

  else
  {
    id v10 = [*(id *)(a1 + 32) _createApplicationDataForDestinations:*(void *)(a1 + 40)];
    uint64_t v11 = *(void *)(a1 + 48);
    uint64_t v12 = *(void *)(a1 + 56);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_6572C;
    v14[3] = &unk_D7420;
    __int128 v13 = *(_OWORD *)(a1 + 64);
    __int128 v15 = *(_OWORD *)(a1 + 32);
    __int128 v16 = v13;
    [a2 updateGroup:v11 withParticipants:v12 sharedApplicationData:v10 completion:v14];
  }

uint64_t sub_65714(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  0LL,  *(void *)(a1 + 32));
}

void sub_6572C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_6578C;
  v4[3] = &unk_D73F8;
  v4[4] = a2;
  v4[5] = a3;
  __int128 v3 = *(_OWORD *)(a1 + 48);
  __int128 v5 = *(_OWORD *)(a1 + 32);
  __int128 v6 = v3;
  dispatch_async(&_dispatch_main_q, v4);
}

uint64_t sub_6578C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  __int128 v3 = *(void **)(a1 + 40);
  if (v4) {
    BOOL v5 = v3 == 0LL;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    uint64_t v11 = IMOSLoggingEnabled(v3, a2);
    if (!(_DWORD)v11) {
      goto LABEL_14;
    }
    __int16 v17 = (os_log_s *)OSLogHandleForIMFoundationCategory("EngramGroup");
    uint64_t v11 = os_log_type_enabled(v17, OS_LOG_TYPE_INFO);
    if (!(_DWORD)v11) {
      goto LABEL_14;
    }
    id v18 = objc_msgSend( objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "groupID"), "stableGroupID"), "dataRepresentation"),  "__im_engramStringRepresentation");
    *(_DWORD *)__int16 v30 = 138412290;
    *(void *)&v30[4] = v18;
    uint64_t v14 = "We successfully updated the participants for engroup with stable id: %@";
    __int128 v15 = v17;
    uint32_t v16 = 12;
    goto LABEL_13;
  }

  __int128 v6 = (char *)[v3 code];
  if (v6 != (_BYTE *)&dword_0 + 1)
  {
    uint64_t v11 = IMOSLoggingEnabled(v6, v7);
    if (!(_DWORD)v11) {
      goto LABEL_25;
    }
    uint64_t v21 = (os_log_s *)OSLogHandleForIMFoundationCategory("EngramGroup");
    uint64_t v11 = os_log_type_enabled(v21, OS_LOG_TYPE_INFO);
    if (!(_DWORD)v11) {
      goto LABEL_25;
    }
    *(_WORD *)__int16 v30 = 0;
    int v22 = "Update failed, will need to retry at some point";
    goto LABEL_24;
  }

  id v8 = objc_msgSend( objc_msgSend( objc_msgSend( *(id *)(a1 + 48),  "_URIsFromApplicationData:",  objc_msgSend(*(id *)(a1 + 32), "sharedApplicationData")),  "__imSetFromArray"),  "isEqualToSet:",  objc_msgSend(*(id *)(a1 + 56), "__imSetFromArray"));
  int v9 = (int)v8;
  uint64_t v11 = IMOSLoggingEnabled(v8, v10);
  if (!v9)
  {
    if (!(_DWORD)v11) {
      goto LABEL_25;
    }
    uint64_t v21 = (os_log_s *)OSLogHandleForIMFoundationCategory("EngramGroup");
    uint64_t v11 = os_log_type_enabled(v21, OS_LOG_TYPE_INFO);
    if (!(_DWORD)v11) {
      goto LABEL_25;
    }
    *(_WORD *)__int16 v30 = 0;
    int v22 = "We need to retry the update, group has already been updated";
LABEL_24:
    _os_log_impl(&dword_0, v21, OS_LOG_TYPE_INFO, v22, v30, 2u);
LABEL_25:
    uint64_t v20 = 0LL;
    goto LABEL_26;
  }

  if (!(_DWORD)v11) {
    goto LABEL_14;
  }
  __int128 v13 = (os_log_s *)OSLogHandleForIMFoundationCategory("EngramGroup");
  uint64_t v11 = os_log_type_enabled(v13, OS_LOG_TYPE_INFO);
  if (!(_DWORD)v11) {
    goto LABEL_14;
  }
  *(_WORD *)__int16 v30 = 0;
  uint64_t v14 = "We got back that we couldn't update the group, but the updated participants match the ones we want to update to "
        "so marking as successful";
  __int128 v15 = v13;
  uint32_t v16 = 2;
LABEL_13:
  _os_log_impl(&dword_0, v15, OS_LOG_TYPE_INFO, v14, v30, v16);
LABEL_14:
  if (IMOSLoggingEnabled(v11, v12))
  {
    uint64_t v19 = (os_log_s *)OSLogHandleForIMFoundationCategory("EngramGroup");
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__int16 v30 = 0;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_INFO,  "We successfully updated the engram group so we will set pending off",  v30,  2u);
    }
  }

  uint64_t v11 = (uint64_t)objc_msgSend(*(id *)(a1 + 64), "setPendingENGroupParticipantUpdate:", 0, *(_OWORD *)v30);
  uint64_t v20 = 1LL;
LABEL_26:
  if (IMOSLoggingEnabled(v11, v12))
  {
    unsigned int v23 = (os_log_s *)OSLogHandleForIMFoundationCategory("EngramGroup");
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      uint64_t v24 = @"NO";
      uint64_t v25 = *(void *)(a1 + 72);
      if ((_DWORD)v20) {
        uint64_t v24 = @"YES";
      }
      uint64_t v26 = *(void *)(a1 + 32);
      uint64_t v27 = *(void *)(a1 + 40);
      *(_DWORD *)__int16 v30 = 138413058;
      *(void *)&v30[4] = v25;
      *(_WORD *)&v30[12] = 2112;
      *(void *)&v30[14] = v26;
      __int16 v31 = 2112;
      __int16 v32 = v24;
      __int16 v33 = 2112;
      uint64_t v34 = v27;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_INFO,  "About to call completion: %@ group: %@ success: %@ error: %@",  v30,  0x2Au);
    }
  }

  if ((_DWORD)v20) {
    uint64_t v28 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v28 = 0LL;
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(*(void *)(a1 + 72) + 16LL))( *(void *)(a1 + 72),  v28,  v20,  *(void *)(a1 + 40));
}

void sub_65A94(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x659A8LL);
  }

  _Unwind_Resume(a1);
}

void sub_66170(uint64_t a1)
{
  id v2 = objc_msgSend( objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "groupID"), "stableGroupID"), "dataRepresentation"),  "__im_engramStringRepresentation");
  id v3 = -[IMDChatRegistry existingChatWithEngramID:]( +[IMDChatRegistry sharedInstance](&OBJC_CLASS___IMDChatRegistry, "sharedInstance"),  "existingChatWithEngramID:",  v2);
  if (v3)
  {
    BOOL v5 = v3;
    id v6 = [*(id *)(a1 + 40) _callerURIForChat:v3];
    if ([v6 length])
    {
      [*(id *)(a1 + 40) _updateLocalParticipantsFromEngroup:*(void *)(a1 + 48) chat:v5 fromID:v6];
      [v5 setPendingENGroupParticipantUpdate:0];
      return;
    }

    if (IMOSLoggingEnabled(0LL, v7))
    {
      uint64_t v11 = (os_log_s *)OSLogHandleForIMFoundationCategory("Warning");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        int v12 = 138412290;
        id v13 = v5;
        int v9 = "We did not get back a callerURI when trying to update the local participants for the chat: %@ ---- PLEASE F"
             "ILE A RADAR!! -----";
        uint64_t v10 = v11;
        goto LABEL_10;
      }
    }
  }

  else if (IMOSLoggingEnabled(0LL, v4))
  {
    id v8 = (os_log_s *)OSLogHandleForIMFoundationCategory("Warning");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      int v12 = 138412290;
      id v13 = v2;
      int v9 = "We did not find an IMDChat for engramID: %@";
      uint64_t v10 = v8;
LABEL_10:
      _os_log_impl(&dword_0, v10, OS_LOG_TYPE_INFO, v9, (uint8_t *)&v12, 0xCu);
    }
  }

void sub_667CC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x66784LL);
  }

  _Unwind_Resume(a1);
}

void sub_66C64(id *a1, void *a2, int a3, int a4)
{
  id inited = objc_initWeak(&location, a2);
  if (IMOSLoggingEnabled(inited, v8))
  {
    uint64_t v9 = OSLogHandleForIMFoundationCategory("IMDGroupPhotoRefreshController");
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = @"NO";
      if (a3) {
        uint64_t v11 = @"YES";
      }
      *(_DWORD *)buf = 138412546;
      uint64_t v38 = v11;
      __int16 v39 = 1024;
      LODWORD(v40) = a4;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_INFO,  "Done sending FTMessage for refresh request. success %@ error %d",  buf,  0x12u);
    }
  }

  int v12 = (void *)objc_claimAutoreleasedReturnValue([a1[4] refreshRequests]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([a1[5] guid]);
  [v12 removeObject:v13];

  id v14 = objc_loadWeakRetained(&location);
  __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 responseCode]);
  if ((int)[v15 intValue] <= 0)
  {
  }

  else
  {
    id v16 = objc_loadWeakRetained(&location);
    __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 failReason]);
    BOOL v18 = (int)[v17 intValue] > 0;

    if (v18)
    {
      if (IMOSLoggingEnabled(v19, v20))
      {
        uint64_t v21 = OSLogHandleForIMFoundationCategory("IMDGroupPhotoRefreshController");
        int v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          id v23 = objc_loadWeakRetained(&location);
          uint64_t v24 = (__CFString *)objc_claimAutoreleasedReturnValue([v23 responseCode]);
          id v25 = objc_loadWeakRetained(&location);
          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 failReason]);
          *(_DWORD *)buf = 138412546;
          uint64_t v38 = v24;
          __int16 v39 = 2112;
          __int128 v40 = v26;
          _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_INFO,  "Received %@/%@ from server following refresh request. re-uploading group photo.",  buf,  0x16u);
        }
      }

      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([a1[4] session]);
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([a1[6] guid]);
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([a1[5] guid]);
      __int16 v30 = (void *)objc_claimAutoreleasedReturnValue([a1[5] chatIdentifier]);
      id v31 = [a1[5] style];
      __int16 v32 = (void *)objc_claimAutoreleasedReturnValue([a1[5] accountID]);
      [v27 sendGroupPhotoUpdate:v28 toChatID:v29 identifier:v30 style:v31 account:v32];

      goto LABEL_17;
    }
  }

  if (a3)
  {
    id v33 = a1[6];
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v33 setRefreshDate:v34];

    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[IMDAttachmentStore sharedInstance](&OBJC_CLASS___IMDAttachmentStore, "sharedInstance"));
    id v35 = a1[6];
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v35 messageGUID]);
    [v27 storeAttachment:v35 associateWithMessageWithGUID:v28];
LABEL_17:
  }

  objc_destroyWeak(&location);
}

void sub_66FA0( _Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x66E64LL);
  }

  objc_destroyWeak(&location);
  _Unwind_Resume(exc_buf);
}

void sub_671F0(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = objc_alloc_init(&OBJC_CLASS___MessagePushHandlerCommandHandlerRegistry);
  uint64_t v4 = (void *)qword_E4528;
  qword_E4528 = (uint64_t)v3;

  [*(id *)(a1 + 32) addStandardCommandHandlersToRegistry:qword_E4528];
  objc_autoreleasePoolPop(v2);
}

void sub_67AA4(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  __int16 v61 = a2;
  uint64_t v54 = a3;
  id v77 = a4;
  id v53 = a5;
  id v60 = a6;
  if (IMOSLoggingEnabled(v60, v11))
  {
    uint64_t v12 = OSLogHandleForIMFoundationCategory("MessagePushHandler");
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v83 = v77;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEBUG, "_handleIncomingMessageError: %@", buf, 0xCu);
    }
  }

  __int16 v59 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v54, "objectForKey:", @"IDSIncomingMessageShouldShowPeerErrors"));
  __int128 v80 = 0u;
  __int128 v81 = 0u;
  __int128 v78 = 0u;
  __int128 v79 = 0u;
  id obj = -[MessagePushHandler copyHandlersForEnumerating](v61, "copyHandlersForEnumerating");
  id v67 = [obj countByEnumeratingWithState:&v78 objects:v84 count:16];
  if (v67)
  {
    uint64_t v66 = *(void *)v79;
    do
    {
      for (i = 0LL; i != v67; i = (char *)i + 1)
      {
        if (*(void *)v79 != v66) {
          objc_enumerationMutation(obj);
        }
        __int128 v15 = *(void **)(*((void *)&v78 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector( v15,  "handler:receivedError:forMessageID:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDelive ryReceipt:deliveryContext:storageContext:additionalInfo:shouldShowPeerErrors:") & 1) != 0)
        {
          uint64_t v16 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v17 = sub_68284(v16, v77, @"fR");
          id v73 = (void *)objc_claimAutoreleasedReturnValue(v17);
          uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v77, "objectForKey:", @"fU"));
          uint64_t v18 = objc_opt_class(&OBJC_CLASS___NSString);
          char isKindOfClass = objc_opt_isKindOfClass(v75, v18);
          if ((isKindOfClass & 1) != 0)
          {
            uint64_t v19 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v77, "objectForKey:", @"fU"));
            id v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v19));
            uint64_t v64 = (void *)v19;
            goto LABEL_15;
          }

          uint64_t v20 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v77, "objectForKey:", @"fU"));
          uint64_t v21 = objc_opt_class(&OBJC_CLASS___NSData);
          if ((objc_opt_isKindOfClass(v20, v21) & 1) != 0)
          {
            uint64_t v69 = (void *)v20;
            __int16 v55 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v77, "objectForKey:", @"fU"));
LABEL_15:
            char v65 = isKindOfClass ^ 1;
          }

          else
          {
            char v65 = 0;
            uint64_t v69 = (void *)v20;
          }

          uint64_t v22 = JWUUIDPushObjectToString();
          uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue(v22);
          uint64_t v23 = objc_opt_class(&OBJC_CLASS___NSString);
          id v24 = sub_68284(v23, v77, @"tP");
          uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue(v24);
          uint64_t v25 = objc_opt_class(&OBJC_CLASS___NSString);
          id v26 = sub_68284(v25, v77, @"sP");
          unint64_t v70 = (void *)objc_claimAutoreleasedReturnValue(v26);
          id v74 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v77, "objectForKey:", @"t"));
          uint64_t v27 = objc_opt_class(&OBJC_CLASS___NSString);
          char v28 = objc_opt_isKindOfClass(v74, v27);
          if ((v28 & 1) != 0)
          {
            uint64_t v29 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v77, "objectForKey:", @"t"));
            uint64_t v30 = objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v29));
            __int16 v57 = (void *)v30;
            __int16 v63 = (void *)v29;
            goto LABEL_21;
          }

          uint64_t v31 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v77, "objectForKey:", @"t"));
          uint64_t v32 = objc_opt_class(&OBJC_CLASS___NSData);
          if ((objc_opt_isKindOfClass(v31, v32) & 1) != 0)
          {
            uint64_t v30 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v77, "objectForKey:", @"t"));
            double v68 = (void *)v31;
            id v56 = (void *)v30;
LABEL_21:
            char v33 = v28 ^ 1;
          }

          else
          {
            char v33 = 0;
            uint64_t v30 = 0LL;
            double v68 = (void *)v31;
          }

          uint64_t v34 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v35 = sub_68284(v34, v77, @"e");
          uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
          uint64_t v37 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v38 = sub_68284(v37, v77, @"D");
          __int16 v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
          uint64_t v40 = objc_opt_class(&OBJC_CLASS___NSDictionary);
          id v41 = sub_68284(v40, v77, @"Dc");
          __int128 v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
          uint64_t v43 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v44 = sub_68284(v43, v77, @"H");
          uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
          uint64_t v46 = objc_opt_class(&OBJC_CLASS___NSString);
          id v47 = sub_68284(v46, v77, @"aDI");
          id v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
          if (v59) {
            unsigned __int8 v49 = [v59 BOOLValue];
          }
          else {
            unsigned __int8 v49 = 1;
          }
          LOBYTE(v52) = v49;
          [v15 handler:v61 receivedError:v73 forMessageID:v72 toIdentifier:v71 fromIdentifier:v70 fromToken:v30 timeStamp:v36 fromIDSID:v60 needsDeliveryRe ceipt:v39 deliveryContext:v42 storageContext:v45 additionalInfo:v48 shouldShowPeerErrors:v52];

          if ((v33 & 1) != 0) {
          uint64_t v50 = v68;
          }
          if ((v28 & 1) != 0)
          {

            uint64_t v50 = v63;
          }

          if ((v65 & 1) != 0) {
          __int16 v51 = v69;
          }
          if ((isKindOfClass & 1) != 0)
          {

            __int16 v51 = v64;
          }

          continue;
        }
      }

      id v67 = [obj countByEnumeratingWithState:&v78 objects:v84 count:16];
    }

    while (v67);
  }
}

void sub_68184()
{
}

id sub_68284(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKey:v5]);
  if ((objc_opt_isKindOfClass(v6, a1) & 1) != 0)
  {
    id v7 = v6;
  }

  else
  {
    if (v6)
    {
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)) {
        sub_902CC((uint64_t)v5, a1, v8);
      }
    }

    id v7 = 0LL;
  }

  return v7;
}

void sub_6832C(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  __int16 v51 = a2;
  uint64_t v46 = a3;
  id v60 = a4;
  id v47 = a5;
  uint64_t v50 = a6;
  if (IMOSLoggingEnabled(v50, v11))
  {
    uint64_t v12 = OSLogHandleForIMFoundationCategory("MessagePushHandler");
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v66 = v60;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEBUG, "_handleIncomingDeliveryReceipt: %@", buf, 0xCu);
    }
  }

  __int128 v63 = 0u;
  __int128 v64 = 0u;
  __int128 v61 = 0u;
  __int128 v62 = 0u;
  id obj = -[MessagePushHandler copyHandlersForEnumerating](v51, "copyHandlersForEnumerating");
  id v56 = [obj countByEnumeratingWithState:&v61 objects:v67 count:16];
  if (v56)
  {
    uint64_t v55 = *(void *)v62;
    *(void *)&__int128 v14 = 138412802LL;
    __int128 v45 = v14;
    do
    {
      for (i = 0LL; i != v56; i = (char *)i + 1)
      {
        if (*(void *)v62 != v55) {
          objc_enumerationMutation(obj);
        }
        uint64_t v16 = *(void **)(*((void *)&v61 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector( v16,  "handler:messageIDDelivered:toIdentifier:status:deliveryContext:timeStamp:fromIDSID:needsDeliveryReceipt: deliveryContext:storageContext:") & 1) != 0)
        {
          id v58 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v60, "objectForKey:", @"U"));
          uint64_t v17 = objc_opt_class(&OBJC_CLASS___NSString);
          char isKindOfClass = objc_opt_isKindOfClass(v58, v17);
          if ((isKindOfClass & 1) != 0)
          {
            uint64_t v18 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v60, "objectForKey:", @"U"));
            unsigned __int8 v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v18));
            id v53 = (void *)v18;
            goto LABEL_15;
          }

          uint64_t v19 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v60, "objectForKey:", @"U"));
          uint64_t v20 = objc_opt_class(&OBJC_CLASS___NSData);
          if ((objc_opt_isKindOfClass(v19, v20) & 1) != 0)
          {
            __int16 v57 = (void *)v19;
            id v48 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v60, "objectForKey:", @"U"));
LABEL_15:
            char v54 = isKindOfClass ^ 1;
          }

          else
          {
            char v54 = 0;
            __int16 v57 = (void *)v19;
          }

          uint64_t v21 = JWUUIDPushObjectToString();
          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
          uint64_t v23 = objc_opt_class(&OBJC_CLASS___NSString);
          id v24 = sub_68284(v23, v60, @"tP");
          uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
          uint64_t v26 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v27 = sub_68284(v26, v60, @"s");
          char v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
          uint64_t v29 = objc_opt_class(&OBJC_CLASS___NSDictionary);
          id v30 = sub_68284(v29, v60, @"Dc");
          uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
          uint64_t v32 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v33 = sub_68284(v32, v60, @"e");
          uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
          uint64_t v35 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v36 = sub_68284(v35, v60, @"D");
          uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
          uint64_t v38 = objc_opt_class(&OBJC_CLASS___NSDictionary);
          id v39 = sub_68284(v38, v60, @"Dc");
          uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
          uint64_t v41 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v42 = sub_68284(v41, v60, @"H");
          uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
          objc_msgSend( v16,  "handler:messageIDDelivered:toIdentifier:status:deliveryContext:timeStamp:fromIDSID:needsDeliveryReceipt:deli veryContext:storageContext:",  v51,  v22,  v25,  v28,  v31,  v34,  v50,  v37,  v40,  v43,  v45,  v46,  v47);

          if ((v54 & 1) != 0) {
          id v44 = v57;
          }
          if ((isKindOfClass & 1) != 0)
          {

            id v44 = v53;
          }

          continue;
        }
      }

      id v56 = [obj countByEnumeratingWithState:&v61 objects:v67 count:16];
    }

    while (v56);
  }
}

void sub_68884()
{
}

void sub_68980(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  id v53 = a2;
  uint64_t v52 = a3;
  __int128 v64 = a4;
  id v48 = a5;
  __int16 v51 = a6;
  if (IMOSLoggingEnabled(v51, v11))
  {
    uint64_t v12 = OSLogHandleForIMFoundationCategory("MessagePushHandler");
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      unint64_t v70 = v64;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEBUG, "_handleIncomingReflectedDeliveryReceipt: %@", buf, 0xCu);
    }
  }

  __int128 v67 = 0u;
  __int128 v68 = 0u;
  __int128 v65 = 0u;
  __int128 v66 = 0u;
  id obj = -[MessagePushHandler copyHandlersForEnumerating](v53, "copyHandlersForEnumerating");
  id v58 = [obj countByEnumeratingWithState:&v65 objects:v71 count:16];
  if (v58)
  {
    uint64_t v57 = *(void *)v66;
    *(void *)&__int128 v14 = 138412802LL;
    __int128 v47 = v14;
    do
    {
      for (i = 0LL; i != v58; i = (char *)i + 1)
      {
        if (*(void *)v66 != v57) {
          objc_enumerationMutation(obj);
        }
        uint64_t v16 = *(void **)(*((void *)&v65 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector( v16,  "handler:messageIDReflectedDelivered:incomingMessage:toIdentifier:fromIdentifier:status:deliveryContext:t imeStamp:fromIDSID:needsDeliveryReceipt:deliveryContext:storageContext:") & 1) != 0)
        {
          __int128 v62 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v64, "objectForKey:", @"U"));
          uint64_t v17 = objc_opt_class(&OBJC_CLASS___NSString);
          char isKindOfClass = objc_opt_isKindOfClass(v62, v17);
          if ((isKindOfClass & 1) != 0)
          {
            uint64_t v18 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v64, "objectForKey:", @"U"));
            uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v18));
            uint64_t v55 = (void *)v18;
            goto LABEL_15;
          }

          uint64_t v19 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v64, "objectForKey:", @"U"));
          uint64_t v20 = objc_opt_class(&OBJC_CLASS___NSData);
          if ((objc_opt_isKindOfClass(v19, v20) & 1) != 0)
          {
            __int16 v59 = (void *)v19;
            unsigned __int8 v49 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v64, "objectForKey:", @"U"));
LABEL_15:
            char v56 = isKindOfClass ^ 1;
          }

          else
          {
            char v56 = 0;
            __int16 v59 = (void *)v19;
          }

          uint64_t v21 = JWUUIDPushObjectToString();
          id v60 = (void *)objc_claimAutoreleasedReturnValue(v21);
          __int128 v61 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v52, "objectForKey:", @"IDSIncomingMessageDecryptedData"));
          uint64_t v22 = objc_opt_class(&OBJC_CLASS___NSString);
          id v23 = sub_68284(v22, v64, @"tP");
          id v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
          uint64_t v25 = objc_opt_class(&OBJC_CLASS___NSString);
          id v26 = sub_68284(v25, v64, @"sP");
          id v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
          uint64_t v28 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v29 = sub_68284(v28, v64, @"s");
          id v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
          uint64_t v31 = objc_opt_class(&OBJC_CLASS___NSDictionary);
          id v32 = sub_68284(v31, v64, @"Dc");
          id v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
          uint64_t v34 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v35 = sub_68284(v34, v64, @"e");
          id v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
          uint64_t v37 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v38 = sub_68284(v37, v64, @"D");
          id v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
          uint64_t v40 = objc_opt_class(&OBJC_CLASS___NSDictionary);
          id v41 = sub_68284(v40, v64, @"Dc");
          id v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
          uint64_t v43 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v44 = sub_68284(v43, v64, @"H");
          __int128 v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
          objc_msgSend( v16,  "handler:messageIDReflectedDelivered:incomingMessage:toIdentifier:fromIdentifier:status:deliveryContext:timeS tamp:fromIDSID:needsDeliveryReceipt:deliveryContext:storageContext:",  v53,  v60,  v61,  v24,  v27,  v30,  v33,  v36,  v51,  v39,  v42,  v45,  v47,  v48);

          if ((v56 & 1) != 0) {
          uint64_t v46 = v59;
          }
          if ((isKindOfClass & 1) != 0)
          {

            uint64_t v46 = v55;
          }

          continue;
        }
      }

      id v58 = [obj countByEnumeratingWithState:&v65 objects:v71 count:16];
    }

    while (v58);
  }
}

void sub_68F28()
{
}

void sub_69024(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  char v56 = a2;
  unsigned __int8 v49 = a3;
  uint64_t v11 = a4;
  id v50 = a5;
  uint64_t v55 = a6;
  if (IMOSLoggingEnabled(v55, v12))
  {
    uint64_t v13 = OSLogHandleForIMFoundationCategory("MessagePushHandler");
    __int128 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v76 = v11;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEBUG, "_handleIncomingReadReceipt: %@", buf, 0xCu);
    }
  }

  __int128 v73 = 0u;
  __int128 v74 = 0u;
  __int128 v71 = 0u;
  __int128 v72 = 0u;
  id obj = -[MessagePushHandler copyHandlersForEnumerating](v56, "copyHandlersForEnumerating");
  id v62 = [obj countByEnumeratingWithState:&v71 objects:v77 count:16];
  if (v62)
  {
    uint64_t v61 = *(void *)v72;
    *(void *)&__int128 v15 = 138412802LL;
    __int128 v48 = v15;
    do
    {
      for (i = 0LL; i != v62; i = (char *)i + 1)
      {
        if (*(void *)v72 != v61) {
          objc_enumerationMutation(obj);
        }
        uint64_t v17 = *(void **)(*((void *)&v71 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector( v17,  "handler:messageIDRead:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:del iveryContext:storageContext:") & 1) != 0)
        {
          uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"U"));
          uint64_t v18 = objc_opt_class(&OBJC_CLASS___NSString);
          char isKindOfClass = objc_opt_isKindOfClass(v69, v18);
          if ((isKindOfClass & 1) != 0)
          {
            uint64_t v19 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"U"));
            char v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v19));
            __int16 v59 = (void *)v19;
            goto LABEL_15;
          }

          uint64_t v20 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"U"));
          uint64_t v21 = objc_opt_class(&OBJC_CLASS___NSData);
          if ((objc_opt_isKindOfClass(v20, v21) & 1) != 0)
          {
            __int128 v64 = (void *)v20;
            __int16 v51 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"U"));
LABEL_15:
            char v60 = isKindOfClass ^ 1;
          }

          else
          {
            char v60 = 0;
            __int128 v64 = (void *)v20;
          }

          uint64_t v22 = JWUUIDPushObjectToString();
          __int128 v67 = (void *)objc_claimAutoreleasedReturnValue(v22);
          uint64_t v23 = objc_opt_class(&OBJC_CLASS___NSString);
          id v24 = sub_68284(v23, v11, @"tP");
          __int128 v66 = (void *)objc_claimAutoreleasedReturnValue(v24);
          uint64_t v25 = objc_opt_class(&OBJC_CLASS___NSString);
          id v26 = sub_68284(v25, v11, @"sP");
          __int128 v65 = (void *)objc_claimAutoreleasedReturnValue(v26);
          __int128 v68 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
          uint64_t v27 = objc_opt_class(&OBJC_CLASS___NSString);
          char v28 = objc_opt_isKindOfClass(v68, v27);
          if ((v28 & 1) != 0)
          {
            uint64_t v29 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
            uint64_t v30 = objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v29));
            id v53 = (void *)v30;
            id v58 = (void *)v29;
            goto LABEL_21;
          }

          uint64_t v31 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
          uint64_t v32 = objc_opt_class(&OBJC_CLASS___NSData);
          if ((objc_opt_isKindOfClass(v31, v32) & 1) != 0)
          {
            uint64_t v30 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
            __int128 v63 = (void *)v31;
            uint64_t v52 = (void *)v30;
LABEL_21:
            char v33 = v28 ^ 1;
          }

          else
          {
            char v33 = 0;
            uint64_t v30 = 0LL;
            __int128 v63 = (void *)v31;
          }

          uint64_t v34 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v35 = sub_68284(v34, v11, @"e");
          id v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
          uint64_t v37 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v38 = sub_68284(v37, v11, @"D");
          id v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
          uint64_t v40 = objc_opt_class(&OBJC_CLASS___NSDictionary);
          id v41 = sub_68284(v40, v11, @"Dc");
          id v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
          uint64_t v43 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v44 = sub_68284(v43, v11, @"H");
          __int128 v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
          objc_msgSend( v17,  "handler:messageIDRead:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:deliver yContext:storageContext:",  v56,  v67,  v66,  v65,  v30,  v36,  v55,  v39,  v42,  v45,  v48);

          if ((v33 & 1) != 0) {
          uint64_t v46 = v63;
          }
          if ((v28 & 1) != 0)
          {

            uint64_t v46 = v58;
          }

          if ((v60 & 1) != 0) {
          __int128 v47 = v64;
          }
          if ((isKindOfClass & 1) != 0)
          {

            __int128 v47 = v59;
          }

          continue;
        }
      }

      id v62 = [obj countByEnumeratingWithState:&v71 objects:v77 count:16];
    }

    while (v62);
  }
}

void sub_69670()
{
}

void sub_6976C(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  uint64_t v55 = a2;
  char v54 = a3;
  __int128 v72 = a4;
  id v48 = a5;
  id v53 = a6;
  if (IMOSLoggingEnabled(v53, v11))
  {
    uint64_t v12 = OSLogHandleForIMFoundationCategory("MessagePushHandler");
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      __int128 v78 = v72;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEBUG, "_handleIncomingUpdateAttachments: %@", buf, 0xCu);
    }
  }

  __int128 v75 = 0u;
  __int128 v76 = 0u;
  __int128 v73 = 0u;
  __int128 v74 = 0u;
  id obj = -[MessagePushHandler copyHandlersForEnumerating](v55, "copyHandlersForEnumerating");
  id v62 = [obj countByEnumeratingWithState:&v73 objects:v79 count:16];
  if (v62)
  {
    uint64_t v61 = *(void *)v74;
    do
    {
      for (i = 0LL; i != v62; i = (char *)i + 1)
      {
        if (*(void *)v74 != v61) {
          objc_enumerationMutation(obj);
        }
        __int128 v15 = *(void **)(*((void *)&v73 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector( v15,  "handler:updateAttachments:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt :deliveryContext:storageContext:fileTransferUpdates:") & 1) != 0)
        {
          uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v72, "objectForKey:", @"U"));
          uint64_t v16 = objc_opt_class(&OBJC_CLASS___NSString);
          char isKindOfClass = objc_opt_isKindOfClass(v69, v16);
          if ((isKindOfClass & 1) != 0)
          {
            uint64_t v17 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v72, "objectForKey:", @"U"));
            uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v17));
            id v58 = (void *)v17;
            goto LABEL_15;
          }

          uint64_t v18 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v72, "objectForKey:", @"U"));
          uint64_t v19 = objc_opt_class(&OBJC_CLASS___NSData);
          if ((objc_opt_isKindOfClass(v18, v19) & 1) != 0)
          {
            __int128 v64 = (void *)v18;
            unsigned __int8 v49 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v72, "objectForKey:", @"U"));
LABEL_15:
            char v60 = isKindOfClass ^ 1;
          }

          else
          {
            char v60 = 0;
            __int128 v64 = (void *)v18;
          }

          uint64_t v20 = JWUUIDPushObjectToString();
          __int128 v67 = (void *)objc_claimAutoreleasedReturnValue(v20);
          uint64_t v21 = objc_opt_class(&OBJC_CLASS___NSString);
          id v22 = sub_68284(v21, v72, @"tP");
          __int128 v66 = (void *)objc_claimAutoreleasedReturnValue(v22);
          uint64_t v23 = objc_opt_class(&OBJC_CLASS___NSString);
          id v24 = sub_68284(v23, v72, @"sP");
          __int128 v65 = (void *)objc_claimAutoreleasedReturnValue(v24);
          __int128 v68 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v72, "objectForKey:", @"t"));
          uint64_t v25 = objc_opt_class(&OBJC_CLASS___NSString);
          char v70 = objc_opt_isKindOfClass(v68, v25);
          if ((v70 & 1) != 0)
          {
            uint64_t v26 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v72, "objectForKey:", @"t"));
            uint64_t v27 = objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v26));
            __int16 v51 = (void *)v27;
            uint64_t v57 = (void *)v26;
            goto LABEL_21;
          }

          uint64_t v28 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v72, "objectForKey:", @"t"));
          uint64_t v29 = objc_opt_class(&OBJC_CLASS___NSData);
          if ((objc_opt_isKindOfClass(v28, v29) & 1) != 0)
          {
            uint64_t v27 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v72, "objectForKey:", @"t"));
            __int128 v63 = (void *)v28;
            id v50 = (void *)v27;
LABEL_21:
            char v59 = v70 ^ 1;
          }

          else
          {
            char v59 = 0;
            uint64_t v27 = 0LL;
            __int128 v63 = (void *)v28;
          }

          uint64_t v30 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v31 = sub_68284(v30, v72, @"e");
          uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
          uint64_t v33 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v34 = sub_68284(v33, v72, @"D");
          id v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
          uint64_t v36 = objc_opt_class(&OBJC_CLASS___NSDictionary);
          id v37 = sub_68284(v36, v72, @"Dc");
          id v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
          uint64_t v39 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v40 = sub_68284(v39, v72, @"H");
          id v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
          id v42 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v54, "objectForKey:", @"IDSIncomingMessageDecryptedData"));
          uint64_t v43 = JWDecodeDictionary(v42);
          id v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
          __int128 v45 = (void *)objc_claimAutoreleasedReturnValue([v44 objectForKeyedSubscript:@"fileTransferUpdates"]);
          [v15 handler:v55 updateAttachments:v67 toIdentifier:v66 fromIdentifier:v65 fromToken:v27 timeStamp:v32 fromIDSID:v53 needsDeliveryReceipt:v35 del iveryContext:v38 storageContext:v41 fileTransferUpdates:v45];

          if ((v59 & 1) != 0) {
          uint64_t v46 = v63;
          }
          if ((v70 & 1) != 0)
          {

            uint64_t v46 = v57;
          }

          if ((v60 & 1) != 0) {
          __int128 v47 = v64;
          }
          if ((isKindOfClass & 1) != 0)
          {

            __int128 v47 = v58;
          }

          continue;
        }
      }

      id v62 = [obj countByEnumeratingWithState:&v73 objects:v79 count:16];
    }

    while (v62);
  }
}

void sub_69E20()
{
}

void sub_69F1C(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  char v56 = a2;
  unsigned __int8 v49 = a3;
  uint64_t v11 = a4;
  id v50 = a5;
  uint64_t v55 = a6;
  if (IMOSLoggingEnabled(v55, v12))
  {
    uint64_t v13 = OSLogHandleForIMFoundationCategory("MessagePushHandler");
    __int128 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      __int128 v76 = v11;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEBUG, "_handleIncomingPlayedReceipt: %@", buf, 0xCu);
    }
  }

  __int128 v73 = 0u;
  __int128 v74 = 0u;
  __int128 v71 = 0u;
  __int128 v72 = 0u;
  id obj = -[MessagePushHandler copyHandlersForEnumerating](v56, "copyHandlersForEnumerating");
  id v62 = [obj countByEnumeratingWithState:&v71 objects:v77 count:16];
  if (v62)
  {
    uint64_t v61 = *(void *)v72;
    *(void *)&__int128 v15 = 138412802LL;
    __int128 v48 = v15;
    do
    {
      for (i = 0LL; i != v62; i = (char *)i + 1)
      {
        if (*(void *)v72 != v61) {
          objc_enumerationMutation(obj);
        }
        uint64_t v17 = *(void **)(*((void *)&v71 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector( v17,  "handler:messageIDPlayed:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:d eliveryContext:storageContext:") & 1) != 0)
        {
          uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"U"));
          uint64_t v18 = objc_opt_class(&OBJC_CLASS___NSString);
          char isKindOfClass = objc_opt_isKindOfClass(v69, v18);
          if ((isKindOfClass & 1) != 0)
          {
            uint64_t v19 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"U"));
            char v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v19));
            char v59 = (void *)v19;
            goto LABEL_15;
          }

          uint64_t v20 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"U"));
          uint64_t v21 = objc_opt_class(&OBJC_CLASS___NSData);
          if ((objc_opt_isKindOfClass(v20, v21) & 1) != 0)
          {
            __int128 v64 = (void *)v20;
            __int16 v51 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"U"));
LABEL_15:
            char v60 = isKindOfClass ^ 1;
          }

          else
          {
            char v60 = 0;
            __int128 v64 = (void *)v20;
          }

          uint64_t v22 = JWUUIDPushObjectToString();
          __int128 v67 = (void *)objc_claimAutoreleasedReturnValue(v22);
          uint64_t v23 = objc_opt_class(&OBJC_CLASS___NSString);
          id v24 = sub_68284(v23, v11, @"tP");
          __int128 v66 = (void *)objc_claimAutoreleasedReturnValue(v24);
          uint64_t v25 = objc_opt_class(&OBJC_CLASS___NSString);
          id v26 = sub_68284(v25, v11, @"sP");
          __int128 v65 = (void *)objc_claimAutoreleasedReturnValue(v26);
          __int128 v68 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
          uint64_t v27 = objc_opt_class(&OBJC_CLASS___NSString);
          char v28 = objc_opt_isKindOfClass(v68, v27);
          if ((v28 & 1) != 0)
          {
            uint64_t v29 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
            uint64_t v30 = objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v29));
            id v53 = (void *)v30;
            id v58 = (void *)v29;
            goto LABEL_21;
          }

          uint64_t v31 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
          uint64_t v32 = objc_opt_class(&OBJC_CLASS___NSData);
          if ((objc_opt_isKindOfClass(v31, v32) & 1) != 0)
          {
            uint64_t v30 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
            __int128 v63 = (void *)v31;
            uint64_t v52 = (void *)v30;
LABEL_21:
            char v33 = v28 ^ 1;
          }

          else
          {
            char v33 = 0;
            uint64_t v30 = 0LL;
            __int128 v63 = (void *)v31;
          }

          uint64_t v34 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v35 = sub_68284(v34, v11, @"e");
          uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
          uint64_t v37 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v38 = sub_68284(v37, v11, @"D");
          uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
          uint64_t v40 = objc_opt_class(&OBJC_CLASS___NSDictionary);
          id v41 = sub_68284(v40, v11, @"Dc");
          id v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
          uint64_t v43 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v44 = sub_68284(v43, v11, @"H");
          __int128 v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
          objc_msgSend( v17,  "handler:messageIDPlayed:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:deliv eryContext:storageContext:",  v56,  v67,  v66,  v65,  v30,  v36,  v55,  v39,  v42,  v45,  v48);

          if ((v33 & 1) != 0) {
          uint64_t v46 = v63;
          }
          if ((v28 & 1) != 0)
          {

            uint64_t v46 = v58;
          }

          if ((v60 & 1) != 0) {
          __int128 v47 = v64;
          }
          if ((isKindOfClass & 1) != 0)
          {

            __int128 v47 = v59;
          }

          continue;
        }
      }

      id v62 = [obj countByEnumeratingWithState:&v71 objects:v77 count:16];
    }

    while (v62);
  }
}

void sub_6A568()
{
}

void sub_6A664(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  char v60 = a2;
  id v53 = a3;
  uint64_t v11 = a4;
  id v54 = a5;
  char v59 = a6;
  if (IMOSLoggingEnabled(v59, v12))
  {
    uint64_t v13 = OSLogHandleForIMFoundationCategory("MessagePushHandler");
    __int128 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v82 = v11;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEBUG, "_handleIncomingSavedReceipt: %@", buf, 0xCu);
    }
  }

  __int128 v79 = 0u;
  __int128 v80 = 0u;
  __int128 v77 = 0u;
  __int128 v78 = 0u;
  id obj = -[MessagePushHandler copyHandlersForEnumerating](v60, "copyHandlersForEnumerating");
  id v66 = [obj countByEnumeratingWithState:&v77 objects:v83 count:16];
  if (v66)
  {
    uint64_t v65 = *(void *)v78;
    *(void *)&__int128 v15 = 138412802LL;
    __int128 v52 = v15;
    do
    {
      for (i = 0LL; i != v66; i = (char *)i + 1)
      {
        if (*(void *)v78 != v65) {
          objc_enumerationMutation(obj);
        }
        uint64_t v17 = *(void **)(*((void *)&v77 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector( v17,  "handler:messageIDSaved:ofType:toIdentifier:fromIdentifier:groupContext:fromToken:timeStamp:fromIDSID:nee dsDeliveryReceipt:deliveryContext:storageContext:") & 1) != 0)
        {
          __int128 v75 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"U"));
          uint64_t v18 = objc_opt_class(&OBJC_CLASS___NSString);
          char isKindOfClass = objc_opt_isKindOfClass(v75, v18);
          if ((isKindOfClass & 1) != 0)
          {
            uint64_t v19 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"U"));
            id v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v19));
            __int128 v63 = (void *)v19;
            goto LABEL_15;
          }

          uint64_t v20 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"U"));
          uint64_t v21 = objc_opt_class(&OBJC_CLASS___NSData);
          if ((objc_opt_isKindOfClass(v20, v21) & 1) != 0)
          {
            __int128 v68 = (void *)v20;
            uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"U"));
LABEL_15:
            char v64 = isKindOfClass ^ 1;
          }

          else
          {
            char v64 = 0;
            __int128 v68 = (void *)v20;
          }

          uint64_t v22 = JWUUIDPushObjectToString();
          __int128 v73 = (void *)objc_claimAutoreleasedReturnValue(v22);
          uint64_t v23 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v24 = sub_68284(v23, v11, @"aT");
          __int128 v72 = (void *)objc_claimAutoreleasedReturnValue(v24);
          uint64_t v25 = objc_opt_class(&OBJC_CLASS___NSString);
          id v26 = sub_68284(v25, v11, @"tP");
          __int128 v71 = (void *)objc_claimAutoreleasedReturnValue(v26);
          uint64_t v27 = objc_opt_class(&OBJC_CLASS___NSString);
          id v28 = sub_68284(v27, v11, @"sP");
          char v70 = (void *)objc_claimAutoreleasedReturnValue(v28);
          uint64_t v29 = objc_opt_class(&OBJC_CLASS___NSString);
          id v30 = sub_68284(v29, v11, @"p");
          uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue(v30);
          __int128 v74 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
          uint64_t v31 = objc_opt_class(&OBJC_CLASS___NSString);
          char v32 = objc_opt_isKindOfClass(v74, v31);
          if ((v32 & 1) != 0)
          {
            uint64_t v33 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
            uint64_t v34 = objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v33));
            uint64_t v57 = (void *)v34;
            id v62 = (void *)v33;
            goto LABEL_21;
          }

          uint64_t v35 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
          uint64_t v36 = objc_opt_class(&OBJC_CLASS___NSData);
          if ((objc_opt_isKindOfClass(v35, v36) & 1) != 0)
          {
            uint64_t v34 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
            __int128 v67 = (void *)v35;
            char v56 = (void *)v34;
LABEL_21:
            char v37 = v32 ^ 1;
          }

          else
          {
            char v37 = 0;
            uint64_t v34 = 0LL;
            __int128 v67 = (void *)v35;
          }

          uint64_t v38 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v39 = sub_68284(v38, v11, @"e");
          uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
          uint64_t v41 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v42 = sub_68284(v41, v11, @"D");
          uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
          uint64_t v44 = objc_opt_class(&OBJC_CLASS___NSDictionary);
          id v45 = sub_68284(v44, v11, @"Dc");
          uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
          uint64_t v47 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v48 = sub_68284(v47, v11, @"H");
          unsigned __int8 v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
          objc_msgSend( v17,  "handler:messageIDSaved:ofType:toIdentifier:fromIdentifier:groupContext:fromToken:timeStamp:fromIDSID:needsDe liveryReceipt:deliveryContext:storageContext:",  v60,  v73,  v72,  v71,  v70,  v69,  v34,  v40,  v59,  v43,  v46,  v49,  v52);

          if ((v37 & 1) != 0) {
          id v50 = v67;
          }
          if ((v32 & 1) != 0)
          {

            id v50 = v62;
          }

          if ((v64 & 1) != 0) {
          __int16 v51 = v68;
          }
          if ((isKindOfClass & 1) != 0)
          {

            __int16 v51 = v63;
          }

          continue;
        }
      }

      id v66 = [obj countByEnumeratingWithState:&v77 objects:v83 count:16];
    }

    while (v66);
  }
}

void sub_6AD08()
{
}

void sub_6AE04(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  char v64 = a2;
  unsigned __int8 v84 = a3;
  uint64_t v85 = a4;
  id v63 = a5;
  id v62 = a6;
  uint64_t v12 = IMOSLoggingEnabled(v62, v11);
  if ((_DWORD)v12)
  {
    uint64_t v14 = OSLogHandleForIMFoundationCategory("MessagePushHandler");
    __int128 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      double v91 = v85;
      _os_log_impl(&dword_0, v15, OS_LOG_TYPE_DEBUG, "_handleIncomingTextMessage: %@", buf, 0xCu);
    }
  }

  if (IMOSLoggingEnabled(v12, v13))
  {
    uint64_t v16 = OSLogHandleForIMFoundationCategory("MessagePushHandler");
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_INFO,  "Processing in MessagePushHandler becuase BlastDoor is not enabled for this message yet",  buf,  2u);
    }
  }

  __int128 v88 = 0u;
  __int128 v89 = 0u;
  __int128 v86 = 0u;
  __int128 v87 = 0u;
  id obj = -[MessagePushHandler copyHandlersForEnumerating](v64, "copyHandlersForEnumerating");
  id v18 = [obj countByEnumeratingWithState:&v86 objects:v92 count:16];
  if (v18)
  {
    uint64_t v70 = *(void *)v87;
    uint64_t v60 = IDSIncomingMessageEngramGroupKey;
    do
    {
      uint64_t v19 = 0LL;
      id v71 = v18;
      do
      {
        if (*(void *)v87 != v70) {
          objc_enumerationMutation(obj);
        }
        uint64_t v20 = *(void **)(*((void *)&v86 + 1) + 8LL * (void)v19);
        if ((objc_opt_respondsToSelector( v20,  "handler:incomingMessage:originalEncryptionType:messageID:toIdentifier:fromIdentifier:fromToken:timeStamp :fromIDSID:incomingEngroup:needsDeliveryReceipt:deliveryContext:storageContext:messageContext:isBeingRep layed:mergeID:wantsCheckpointing:isSnapTrustedUser:") & 1) != 0)
        {
          __int128 v79 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v84, "objectForKey:", @"IDSIncomingMessageDecryptedData"));
          __int128 v78 = (void *)objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKey:]( v84,  "objectForKey:",  @"IDSIncomingMessageOriginalEncryptionType"));
          __int128 v81 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v85, "objectForKey:", @"U"));
          uint64_t v21 = objc_opt_class(&OBJC_CLASS___NSString);
          char isKindOfClass = objc_opt_isKindOfClass(v81, v21);
          if ((isKindOfClass & 1) != 0)
          {
            uint64_t v22 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v85, "objectForKey:", @"U"));
            char v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v22));
            __int128 v67 = (void *)v22;
            goto LABEL_19;
          }

          uint64_t v23 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v85, "objectForKey:", @"U"));
          uint64_t v24 = objc_opt_class(&OBJC_CLASS___NSData);
          if ((objc_opt_isKindOfClass(v23, v24) & 1) != 0)
          {
            __int128 v74 = (void *)v23;
            char v56 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v85, "objectForKey:", @"U"));
LABEL_19:
            char v69 = isKindOfClass ^ 1;
          }

          else
          {
            char v69 = 0;
            __int128 v74 = (void *)v23;
          }

          uint64_t v25 = JWUUIDPushObjectToString();
          __int128 v77 = (void *)objc_claimAutoreleasedReturnValue(v25);
          uint64_t v26 = objc_opt_class(&OBJC_CLASS___NSString);
          id v27 = sub_68284(v26, v85, @"tP");
          __int128 v76 = (void *)objc_claimAutoreleasedReturnValue(v27);
          uint64_t v28 = objc_opt_class(&OBJC_CLASS___NSString);
          id v29 = sub_68284(v28, v85, @"sP");
          __int128 v75 = (void *)objc_claimAutoreleasedReturnValue(v29);
          __int128 v80 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v85, "objectForKey:", @"t"));
          uint64_t v30 = objc_opt_class(&OBJC_CLASS___NSString);
          char v82 = objc_opt_isKindOfClass(v80, v30);
          if ((v82 & 1) != 0)
          {
            uint64_t v31 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v85, "objectForKey:", @"t"));
            uint64_t v73 = objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v31));
            id v58 = (void *)v73;
            id v66 = (void *)v31;
            goto LABEL_25;
          }

          uint64_t v32 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v85, "objectForKey:", @"t"));
          uint64_t v33 = objc_opt_class(&OBJC_CLASS___NSData);
          if ((objc_opt_isKindOfClass(v32, v33) & 1) != 0)
          {
            uint64_t v73 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v85, "objectForKey:", @"t"));
            __int128 v72 = (void *)v32;
            uint64_t v57 = (void *)v73;
LABEL_25:
            char v68 = v82 ^ 1;
          }

          else
          {
            char v68 = 0;
            __int128 v72 = (void *)v32;
            uint64_t v73 = 0LL;
          }

          uint64_t v34 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v35 = sub_68284(v34, v85, @"e");
          uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
          char v37 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v84, "objectForKey:", v60));
          uint64_t v38 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v39 = sub_68284(v38, v85, @"D");
          uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
          uint64_t v41 = objc_opt_class(&OBJC_CLASS___NSDictionary);
          id v42 = sub_68284(v41, v85, @"Dc");
          uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
          uint64_t v44 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v45 = sub_68284(v44, v85, @"H");
          uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
          uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v84, "objectForKey:", @"mid"));
          uint64_t v48 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v49 = sub_68284(v48, v85, @"mc");
          id v50 = (void *)objc_claimAutoreleasedReturnValue(v49);
          unsigned __int8 v51 = [v50 BOOLValue];
          BYTE1(v55) = -[NSDictionary BOOLValueForKey:withDefault:]( v85,  "BOOLValueForKey:withDefault:",  @"stu",  1LL);
          LOBYTE(v55) = v51;
          LOBYTE(v54) = a7;
          objc_msgSend( v20,  "handler:incomingMessage:originalEncryptionType:messageID:toIdentifier:fromIdentifier:fromToken:timeStamp:fro mIDSID:incomingEngroup:needsDeliveryReceipt:deliveryContext:storageContext:messageContext:isBeingReplayed:me rgeID:wantsCheckpointing:isSnapTrustedUser:",  v64,  v79,  v78,  v77,  v76,  v75,  v73,  v36,  v62,  v37,  v40,  v43,  v46,  v63,  v54,  v47,  v55);

          if ((v68 & 1) != 0) {
          __int128 v52 = v72;
          }
          if ((v82 & 1) != 0)
          {

            __int128 v52 = v66;
          }

          if ((v69 & 1) != 0) {
          id v53 = v74;
          }
          if ((isKindOfClass & 1) != 0)
          {

            id v53 = v67;
          }
        }

        uint64_t v19 = (char *)v19 + 1;
      }

      while (v71 != v19);
      id v18 = [obj countByEnumeratingWithState:&v86 objects:v92 count:16];
    }

    while (v18);
  }
}

void sub_6B5A8()
{
}

void sub_6B6C0(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  id v50 = a2;
  id v45 = a3;
  uint64_t v11 = a4;
  id v46 = a5;
  id v49 = a6;
  if (IMOSLoggingEnabled(v49, v12))
  {
    uint64_t v13 = OSLogHandleForIMFoundationCategory("MessagePushHandler");
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v65 = v11;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEBUG, "_handleLocationShareCommandPush: %@", buf, 0xCu);
    }
  }

  __int128 v62 = 0u;
  __int128 v63 = 0u;
  __int128 v60 = 0u;
  __int128 v61 = 0u;
  id obj = -[MessagePushHandler copyHandlersForEnumerating](v50, "copyHandlersForEnumerating");
  id v54 = [obj countByEnumeratingWithState:&v60 objects:v66 count:16];
  if (v54)
  {
    uint64_t v53 = *(void *)v61;
    *(void *)&__int128 v15 = 138412802LL;
    __int128 v44 = v15;
    do
    {
      for (i = 0LL; i != v54; i = (char *)i + 1)
      {
        if (*(void *)v61 != v53) {
          objc_enumerationMutation(obj);
        }
        uint64_t v17 = *(void **)(*((void *)&v60 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector( v17,  "handler:locationShareInfo:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt :deliveryContext:storageContext:") & 1) != 0)
        {
          uint64_t v18 = objc_opt_class(&OBJC_CLASS___NSDictionary);
          id v19 = sub_68284(v18, v11, @"p");
          id v58 = (void *)objc_claimAutoreleasedReturnValue(v19);
          uint64_t v20 = objc_opt_class(&OBJC_CLASS___NSString);
          id v21 = sub_68284(v20, v11, @"tP");
          uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue(v21);
          uint64_t v22 = objc_opt_class(&OBJC_CLASS___NSString);
          id v23 = sub_68284(v22, v11, @"sP");
          char v56 = (void *)objc_claimAutoreleasedReturnValue(v23);
          char v59 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
          uint64_t v24 = objc_opt_class(&OBJC_CLASS___NSString);
          char isKindOfClass = objc_opt_isKindOfClass(v59, v24);
          if ((isKindOfClass & 1) != 0)
          {
            uint64_t v26 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
            uint64_t v27 = objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v26));
            uint64_t v48 = (void *)v27;
            __int128 v52 = (void *)v26;
            goto LABEL_15;
          }

          uint64_t v28 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
          uint64_t v29 = objc_opt_class(&OBJC_CLASS___NSData);
          if ((objc_opt_isKindOfClass(v28, v29) & 1) != 0)
          {
            uint64_t v27 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
            uint64_t v55 = (void *)v28;
            uint64_t v47 = (void *)v27;
LABEL_15:
            char v30 = isKindOfClass ^ 1;
          }

          else
          {
            char v30 = 0;
            uint64_t v27 = 0LL;
            uint64_t v55 = (void *)v28;
          }

          uint64_t v31 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v32 = sub_68284(v31, v11, @"e");
          uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
          uint64_t v34 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v35 = sub_68284(v34, v11, @"D");
          uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
          uint64_t v37 = objc_opt_class(&OBJC_CLASS___NSDictionary);
          id v38 = sub_68284(v37, v11, @"Dc");
          id v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
          uint64_t v40 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v41 = sub_68284(v40, v11, @"H");
          id v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
          objc_msgSend( v17,  "handler:locationShareInfo:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:del iveryContext:storageContext:",  v50,  v58,  v57,  v56,  v27,  v33,  v49,  v36,  v39,  v42,  v44,  v45,  v46);

          if ((v30 & 1) != 0) {
          uint64_t v43 = v55;
          }
          if ((isKindOfClass & 1) != 0)
          {

            uint64_t v43 = v52;
          }

          continue;
        }
      }

      id v54 = [obj countByEnumeratingWithState:&v60 objects:v66 count:16];
    }

    while (v54);
  }
}

void sub_6BBFC()
{
}

void sub_6BCF8(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  id v50 = a2;
  id v49 = a3;
  uint64_t v11 = a4;
  id v45 = a5;
  uint64_t v48 = a6;
  if (IMOSLoggingEnabled(v48, v12))
  {
    uint64_t v13 = OSLogHandleForIMFoundationCategory("MessagePushHandler");
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      id v66 = v11;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEBUG, "_handleGenericCommandPush: %@", buf, 0xCu);
    }
  }

  __int128 v63 = 0u;
  __int128 v64 = 0u;
  __int128 v61 = 0u;
  __int128 v62 = 0u;
  id obj = -[MessagePushHandler copyHandlersForEnumerating](v50, "copyHandlersForEnumerating");
  id v54 = [obj countByEnumeratingWithState:&v61 objects:v67 count:16];
  if (v54)
  {
    uint64_t v53 = *(void *)v62;
    *(void *)&__int128 v15 = 138412802LL;
    __int128 v44 = v15;
    do
    {
      for (i = 0LL; i != v54; i = (char *)i + 1)
      {
        if (*(void *)v62 != v53) {
          objc_enumerationMutation(obj);
        }
        uint64_t v17 = *(void **)(*((void *)&v61 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector( v17,  "handler:genericNotification:incomingMessage:userInfo:toIdentifier:fromIdentifier:fromToken:timeStamp:fro mIDSID:needsDeliveryReceipt:deliveryContext:storageContext:") & 1) != 0)
        {
          uint64_t v18 = objc_opt_class(&OBJC_CLASS___NSDictionary);
          id v19 = sub_68284(v18, v11, @"Dc");
          id v58 = (void *)objc_claimAutoreleasedReturnValue(v19);
          char v59 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v49, "objectForKey:", @"IDSIncomingMessageDecryptedData"));
          uint64_t v20 = objc_opt_class(&OBJC_CLASS___NSString);
          id v21 = sub_68284(v20, v11, @"tP");
          uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue(v21);
          uint64_t v22 = objc_opt_class(&OBJC_CLASS___NSString);
          id v23 = sub_68284(v22, v11, @"sP");
          char v56 = (void *)objc_claimAutoreleasedReturnValue(v23);
          __int128 v60 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
          uint64_t v24 = objc_opt_class(&OBJC_CLASS___NSString);
          char isKindOfClass = objc_opt_isKindOfClass(v60, v24);
          if ((isKindOfClass & 1) != 0)
          {
            uint64_t v26 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
            uint64_t v27 = objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v26));
            uint64_t v47 = (void *)v27;
            __int128 v52 = (void *)v26;
            goto LABEL_15;
          }

          uint64_t v28 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
          uint64_t v29 = objc_opt_class(&OBJC_CLASS___NSData);
          if ((objc_opt_isKindOfClass(v28, v29) & 1) != 0)
          {
            uint64_t v27 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
            uint64_t v55 = (void *)v28;
            id v46 = (void *)v27;
LABEL_15:
            char v30 = isKindOfClass ^ 1;
          }

          else
          {
            char v30 = 0;
            uint64_t v27 = 0LL;
            uint64_t v55 = (void *)v28;
          }

          uint64_t v31 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v32 = sub_68284(v31, v11, @"e");
          uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
          uint64_t v34 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v35 = sub_68284(v34, v11, @"D");
          uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
          uint64_t v37 = objc_opt_class(&OBJC_CLASS___NSDictionary);
          id v38 = sub_68284(v37, v11, @"Dc");
          id v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
          uint64_t v40 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v41 = sub_68284(v40, v11, @"H");
          id v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
          objc_msgSend( v17,  "handler:genericNotification:incomingMessage:userInfo:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDS ID:needsDeliveryReceipt:deliveryContext:storageContext:",  v50,  v58,  v59,  v11,  v57,  v56,  v27,  v33,  v48,  v36,  v39,  v42,  v44);

          if ((v30 & 1) != 0) {
          uint64_t v43 = v55;
          }
          if ((isKindOfClass & 1) != 0)
          {

            uint64_t v43 = v52;
          }

          continue;
        }
      }

      id v54 = [obj countByEnumeratingWithState:&v61 objects:v67 count:16];
    }

    while (v54);
  }
}

void sub_6C258()
{
}

void sub_6C354(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  id v46 = a2;
  id v45 = a3;
  uint64_t v11 = a4;
  id v41 = a5;
  __int128 v44 = a6;
  if (IMOSLoggingEnabled(v44, v12))
  {
    uint64_t v13 = OSLogHandleForIMFoundationCategory("MessagePushHandler");
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      __int128 v61 = v11;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEBUG, "_handleNicknameCommand: %@", buf, 0xCu);
    }
  }

  __int128 v58 = 0u;
  __int128 v59 = 0u;
  __int128 v56 = 0u;
  __int128 v57 = 0u;
  id obj = -[MessagePushHandler copyHandlersForEnumerating](v46, "copyHandlersForEnumerating");
  id v50 = [obj countByEnumeratingWithState:&v56 objects:v62 count:16];
  if (v50)
  {
    uint64_t v49 = *(void *)v57;
    do
    {
      for (i = 0LL; i != v50; i = (char *)i + 1)
      {
        if (*(void *)v57 != v49) {
          objc_enumerationMutation(obj);
        }
        uint64_t v16 = *(void **)(*((void *)&v56 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector( v16,  "handler:nicknameInfoReceived:userInfo:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDel iveryReceipt:deliveryContext:storageContext:") & 1) != 0)
        {
          id v54 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v45, "objectForKey:", @"IDSIncomingMessageDecryptedData"));
          uint64_t v17 = objc_opt_class(&OBJC_CLASS___NSString);
          id v18 = sub_68284(v17, v11, @"tP");
          uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue(v18);
          uint64_t v19 = objc_opt_class(&OBJC_CLASS___NSString);
          id v20 = sub_68284(v19, v11, @"sP");
          __int128 v52 = (void *)objc_claimAutoreleasedReturnValue(v20);
          uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
          uint64_t v21 = objc_opt_class(&OBJC_CLASS___NSString);
          char isKindOfClass = objc_opt_isKindOfClass(v55, v21);
          if ((isKindOfClass & 1) != 0)
          {
            uint64_t v23 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
            uint64_t v24 = objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v23));
            uint64_t v43 = (void *)v24;
            uint64_t v48 = (void *)v23;
            goto LABEL_15;
          }

          uint64_t v25 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
          uint64_t v26 = objc_opt_class(&OBJC_CLASS___NSData);
          if ((objc_opt_isKindOfClass(v25, v26) & 1) != 0)
          {
            uint64_t v24 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
            unsigned __int8 v51 = (void *)v25;
            id v42 = (void *)v24;
LABEL_15:
            char v27 = isKindOfClass ^ 1;
          }

          else
          {
            char v27 = 0;
            uint64_t v24 = 0LL;
            unsigned __int8 v51 = (void *)v25;
          }

          uint64_t v28 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v29 = sub_68284(v28, v11, @"e");
          char v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
          uint64_t v31 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v32 = sub_68284(v31, v11, @"D");
          uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
          uint64_t v34 = objc_opt_class(&OBJC_CLASS___NSDictionary);
          id v35 = sub_68284(v34, v11, @"Dc");
          uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
          uint64_t v37 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v38 = sub_68284(v37, v11, @"H");
          id v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
          [v16 handler:v46 nicknameInfoReceived:v54 userInfo:v11 toIdentifier:v53 fromIdentifier:v52 fromToken:v24 timeStamp:v30 fromIDSID:v44 needsDeliver yReceipt:v33 deliveryContext:v36 storageContext:v39];

          if ((v27 & 1) != 0) {
          uint64_t v40 = v51;
          }
          if ((isKindOfClass & 1) != 0)
          {

            uint64_t v40 = v48;
          }

          continue;
        }
      }

      id v50 = [obj countByEnumeratingWithState:&v56 objects:v62 count:16];
    }

    while (v50);
  }
}

void sub_6C898()
{
}

void sub_6C998(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  uint64_t v48 = a2;
  uint64_t v47 = a3;
  __int128 v57 = a4;
  id v43 = a5;
  id v46 = a6;
  if (IMOSLoggingEnabled(v46, v11))
  {
    uint64_t v12 = OSLogHandleForIMFoundationCategory("MessagePushHandler");
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      __int128 v63 = v57;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEBUG, "_handleDeleteCommand: %@", buf, 0xCu);
    }
  }

  __int128 v60 = 0u;
  __int128 v61 = 0u;
  __int128 v58 = 0u;
  __int128 v59 = 0u;
  id obj = -[MessagePushHandler copyHandlersForEnumerating](v48, "copyHandlersForEnumerating");
  id v52 = [obj countByEnumeratingWithState:&v58 objects:v64 count:16];
  if (v52)
  {
    uint64_t v51 = *(void *)v59;
    *(void *)&__int128 v14 = 138412802LL;
    __int128 v42 = v14;
    do
    {
      for (i = 0LL; i != v52; i = (char *)i + 1)
      {
        if (*(void *)v59 != v51) {
          objc_enumerationMutation(obj);
        }
        uint64_t v16 = *(void **)(*((void *)&v58 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector( v16,  "handler:deleteCommand:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:del iveryContext:storageContext:") & 1) != 0)
        {
          __int128 v56 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v47, "objectForKey:", @"IDSIncomingMessageDecryptedData"));
          uint64_t v17 = objc_opt_class(&OBJC_CLASS___NSString);
          id v18 = sub_68284(v17, v57, @"tP");
          uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue(v18);
          uint64_t v19 = objc_opt_class(&OBJC_CLASS___NSString);
          id v20 = sub_68284(v19, v57, @"sP");
          id v54 = (void *)objc_claimAutoreleasedReturnValue(v20);
          uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v57, "objectForKey:", @"t"));
          uint64_t v22 = objc_opt_class(&OBJC_CLASS___NSString);
          char isKindOfClass = objc_opt_isKindOfClass(v21, v22);
          if ((isKindOfClass & 1) != 0)
          {
            uint64_t v24 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v57, "objectForKey:", @"t"));
            uint64_t v25 = objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v24));
            id v45 = (void *)v25;
            id v50 = (void *)v24;
            goto LABEL_15;
          }

          uint64_t v26 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v57, "objectForKey:", @"t"));
          uint64_t v27 = objc_opt_class(&OBJC_CLASS___NSData);
          if ((objc_opt_isKindOfClass(v26, v27) & 1) != 0)
          {
            uint64_t v25 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v57, "objectForKey:", @"t"));
            uint64_t v53 = (void *)v26;
            __int128 v44 = (void *)v25;
LABEL_15:
            char v28 = isKindOfClass ^ 1;
          }

          else
          {
            char v28 = 0;
            uint64_t v25 = 0LL;
            uint64_t v53 = (void *)v26;
          }

          uint64_t v29 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v30 = sub_68284(v29, v57, @"e");
          uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
          uint64_t v32 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v33 = sub_68284(v32, v57, @"D");
          uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
          uint64_t v35 = objc_opt_class(&OBJC_CLASS___NSDictionary);
          id v36 = sub_68284(v35, v57, @"Dc");
          uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
          uint64_t v38 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v39 = sub_68284(v38, v57, @"H");
          uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
          objc_msgSend( v16,  "handler:deleteCommand:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:deliver yContext:storageContext:",  v48,  v56,  v55,  v54,  v25,  v31,  v46,  v34,  v37,  v40,  v42,  v43);

          if ((v28 & 1) != 0) {
          id v41 = v53;
          }
          if ((isKindOfClass & 1) != 0)
          {

            id v41 = v50;
          }

          continue;
        }
      }

      id v52 = [obj countByEnumeratingWithState:&v58 objects:v64 count:16];
    }

    while (v52);
  }
}

void sub_6CED0()
{
}

void sub_6CFCC(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  uint64_t v48 = a2;
  uint64_t v47 = a3;
  __int128 v57 = a4;
  id v43 = a5;
  id v46 = a6;
  if (IMOSLoggingEnabled(v46, v11))
  {
    uint64_t v12 = OSLogHandleForIMFoundationCategory("MessagePushHandler");
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      __int128 v63 = v57;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEBUG, "_handleRecoverCommand: %@", buf, 0xCu);
    }
  }

  __int128 v60 = 0u;
  __int128 v61 = 0u;
  __int128 v58 = 0u;
  __int128 v59 = 0u;
  id obj = -[MessagePushHandler copyHandlersForEnumerating](v48, "copyHandlersForEnumerating");
  id v52 = [obj countByEnumeratingWithState:&v58 objects:v64 count:16];
  if (v52)
  {
    uint64_t v51 = *(void *)v59;
    *(void *)&__int128 v14 = 138412802LL;
    __int128 v42 = v14;
    do
    {
      for (i = 0LL; i != v52; i = (char *)i + 1)
      {
        if (*(void *)v59 != v51) {
          objc_enumerationMutation(obj);
        }
        uint64_t v16 = *(void **)(*((void *)&v58 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector( v16,  "handler:recoverCommand:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:de liveryContext:storageContext:") & 1) != 0)
        {
          __int128 v56 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v47, "objectForKey:", @"IDSIncomingMessageDecryptedData"));
          uint64_t v17 = objc_opt_class(&OBJC_CLASS___NSString);
          id v18 = sub_68284(v17, v57, @"tP");
          uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue(v18);
          uint64_t v19 = objc_opt_class(&OBJC_CLASS___NSString);
          id v20 = sub_68284(v19, v57, @"sP");
          id v54 = (void *)objc_claimAutoreleasedReturnValue(v20);
          uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v57, "objectForKey:", @"t"));
          uint64_t v22 = objc_opt_class(&OBJC_CLASS___NSString);
          char isKindOfClass = objc_opt_isKindOfClass(v21, v22);
          if ((isKindOfClass & 1) != 0)
          {
            uint64_t v24 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v57, "objectForKey:", @"t"));
            uint64_t v25 = objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v24));
            id v45 = (void *)v25;
            id v50 = (void *)v24;
            goto LABEL_15;
          }

          uint64_t v26 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v57, "objectForKey:", @"t"));
          uint64_t v27 = objc_opt_class(&OBJC_CLASS___NSData);
          if ((objc_opt_isKindOfClass(v26, v27) & 1) != 0)
          {
            uint64_t v25 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v57, "objectForKey:", @"t"));
            uint64_t v53 = (void *)v26;
            __int128 v44 = (void *)v25;
LABEL_15:
            char v28 = isKindOfClass ^ 1;
          }

          else
          {
            char v28 = 0;
            uint64_t v25 = 0LL;
            uint64_t v53 = (void *)v26;
          }

          uint64_t v29 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v30 = sub_68284(v29, v57, @"e");
          uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
          uint64_t v32 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v33 = sub_68284(v32, v57, @"D");
          uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
          uint64_t v35 = objc_opt_class(&OBJC_CLASS___NSDictionary);
          id v36 = sub_68284(v35, v57, @"Dc");
          uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
          uint64_t v38 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v39 = sub_68284(v38, v57, @"H");
          uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
          objc_msgSend( v16,  "handler:recoverCommand:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:delive ryContext:storageContext:",  v48,  v56,  v55,  v54,  v25,  v31,  v46,  v34,  v37,  v40,  v42,  v43);

          if ((v28 & 1) != 0) {
          id v41 = v53;
          }
          if ((isKindOfClass & 1) != 0)
          {

            id v41 = v50;
          }

          continue;
        }
      }

      id v52 = [obj countByEnumeratingWithState:&v58 objects:v64 count:16];
    }

    while (v52);
  }
}

void sub_6D504()
{
}

void sub_6D600(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  __int128 v58 = a2;
  __int128 v57 = a3;
  uint64_t v11 = a4;
  id v51 = a5;
  __int128 v56 = a6;
  if (IMOSLoggingEnabled(v56, v12))
  {
    uint64_t v13 = OSLogHandleForIMFoundationCategory("MessagePushHandler");
    __int128 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      __int128 v80 = v11;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEBUG, "_handleGroupMessageCommand: %@", buf, 0xCu);
    }
  }

  __int128 v77 = 0u;
  __int128 v78 = 0u;
  __int128 v75 = 0u;
  __int128 v76 = 0u;
  id obj = -[MessagePushHandler copyHandlersForEnumerating](v58, "copyHandlersForEnumerating");
  id v64 = [obj countByEnumeratingWithState:&v75 objects:v81 count:16];
  if (v64)
  {
    uint64_t v63 = *(void *)v76;
    *(void *)&__int128 v15 = 138412802LL;
    __int128 v50 = v15;
    do
    {
      for (i = 0LL; i != v64; i = (char *)i + 1)
      {
        if (*(void *)v76 != v63) {
          objc_enumerationMutation(obj);
        }
        uint64_t v17 = *(void **)(*((void *)&v75 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector( v17,  "handler:groupMessageCommand:encryptedGroupCommand:messageID:toIdentifier:fromIdentifier:fromToken:timeSt amp:fromIDSID:needsDeliveryReceipt:deliveryContext:storageContext:") & 1) != 0)
        {
          uint64_t v18 = objc_opt_class(&OBJC_CLASS___NSDictionary);
          id v19 = sub_68284(v18, v11, @"p");
          id v71 = (void *)objc_claimAutoreleasedReturnValue(v19);
          uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v57, "objectForKey:", @"IDSIncomingMessageDecryptedData"));
          uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"U"));
          uint64_t v20 = objc_opt_class(&OBJC_CLASS___NSString);
          char isKindOfClass = objc_opt_isKindOfClass(v73, v20);
          if ((isKindOfClass & 1) != 0)
          {
            uint64_t v21 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"U"));
            uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v21));
            __int128 v61 = (void *)v21;
            goto LABEL_15;
          }

          uint64_t v22 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"U"));
          uint64_t v23 = objc_opt_class(&OBJC_CLASS___NSData);
          if ((objc_opt_isKindOfClass(v22, v23) & 1) != 0)
          {
            id v66 = (void *)v22;
            id v52 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"U"));
LABEL_15:
            char v62 = isKindOfClass ^ 1;
          }

          else
          {
            char v62 = 0;
            id v66 = (void *)v22;
          }

          uint64_t v24 = JWUUIDPushObjectToString();
          char v69 = (void *)objc_claimAutoreleasedReturnValue(v24);
          uint64_t v25 = objc_opt_class(&OBJC_CLASS___NSString);
          id v26 = sub_68284(v25, v11, @"tP");
          char v68 = (void *)objc_claimAutoreleasedReturnValue(v26);
          uint64_t v27 = objc_opt_class(&OBJC_CLASS___NSString);
          id v28 = sub_68284(v27, v11, @"sP");
          __int128 v67 = (void *)objc_claimAutoreleasedReturnValue(v28);
          __int128 v72 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
          uint64_t v29 = objc_opt_class(&OBJC_CLASS___NSString);
          char v30 = objc_opt_isKindOfClass(v72, v29);
          if ((v30 & 1) != 0)
          {
            uint64_t v31 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
            uint64_t v32 = objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v31));
            id v54 = (void *)v32;
            __int128 v60 = (void *)v31;
            goto LABEL_21;
          }

          uint64_t v33 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
          uint64_t v34 = objc_opt_class(&OBJC_CLASS___NSData);
          if ((objc_opt_isKindOfClass(v33, v34) & 1) != 0)
          {
            uint64_t v32 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
            uint64_t v65 = (void *)v33;
            uint64_t v53 = (void *)v32;
LABEL_21:
            char v35 = v30 ^ 1;
          }

          else
          {
            char v35 = 0;
            uint64_t v32 = 0LL;
            uint64_t v65 = (void *)v33;
          }

          uint64_t v36 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v37 = sub_68284(v36, v11, @"e");
          uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
          uint64_t v39 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v40 = sub_68284(v39, v11, @"D");
          id v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
          uint64_t v42 = objc_opt_class(&OBJC_CLASS___NSDictionary);
          id v43 = sub_68284(v42, v11, @"Dc");
          __int128 v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
          uint64_t v45 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v46 = sub_68284(v45, v11, @"H");
          uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue(v46);
          objc_msgSend( v17,  "handler:groupMessageCommand:encryptedGroupCommand:messageID:toIdentifier:fromIdentifier:fromToken:timeStamp: fromIDSID:needsDeliveryReceipt:deliveryContext:storageContext:",  v58,  v71,  v70,  v69,  v68,  v67,  v32,  v38,  v56,  v41,  v44,  v47,  v50);

          if ((v35 & 1) != 0) {
          uint64_t v48 = v65;
          }
          if ((v30 & 1) != 0)
          {

            uint64_t v48 = v60;
          }

          if ((v62 & 1) != 0) {
          uint64_t v49 = v66;
          }
          if ((isKindOfClass & 1) != 0)
          {

            uint64_t v49 = v61;
          }

          continue;
        }
      }

      id v64 = [obj countByEnumeratingWithState:&v75 objects:v81 count:16];
    }

    while (v64);
  }
}

void sub_6DC9C()
{
}

void sub_6DD98(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  id v54 = a2;
  uint64_t v53 = a3;
  uint64_t v11 = a4;
  id v47 = a5;
  id v52 = a6;
  if (IMOSLoggingEnabled(v52, v12))
  {
    uint64_t v13 = OSLogHandleForIMFoundationCategory("MessagePushHandler");
    __int128 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      __int128 v75 = v11;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEBUG, "bubblePayloadMessage: %@", buf, 0xCu);
    }
  }

  __int128 v72 = 0u;
  __int128 v73 = 0u;
  __int128 v70 = 0u;
  __int128 v71 = 0u;
  id obj = -[MessagePushHandler copyHandlersForEnumerating](v54, "copyHandlersForEnumerating");
  id v60 = [obj countByEnumeratingWithState:&v70 objects:v76 count:16];
  if (v60)
  {
    uint64_t v59 = *(void *)v71;
    do
    {
      for (i = 0LL; i != v60; i = (char *)i + 1)
      {
        if (*(void *)v71 != v59) {
          objc_enumerationMutation(obj);
        }
        uint64_t v16 = *(void **)(*((void *)&v70 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector( v16,  "handler:bubblePayloadData:forMessageID:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDe liveryReceipt:deliveryContext:storageContext:") & 1) != 0)
        {
          id v66 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v53, "objectForKey:", @"IDSIncomingMessageDecryptedData"));
          char v68 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"U"));
          uint64_t v17 = objc_opt_class(&OBJC_CLASS___NSString);
          char isKindOfClass = objc_opt_isKindOfClass(v68, v17);
          if ((isKindOfClass & 1) != 0)
          {
            uint64_t v18 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"U"));
            id v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v18));
            __int128 v57 = (void *)v18;
            goto LABEL_15;
          }

          uint64_t v19 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"U"));
          uint64_t v20 = objc_opt_class(&OBJC_CLASS___NSData);
          if ((objc_opt_isKindOfClass(v19, v20) & 1) != 0)
          {
            char v62 = (void *)v19;
            uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"U"));
LABEL_15:
            char v58 = isKindOfClass ^ 1;
          }

          else
          {
            char v58 = 0;
            char v62 = (void *)v19;
          }

          uint64_t v21 = JWUUIDPushObjectToString();
          uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue(v21);
          uint64_t v22 = objc_opt_class(&OBJC_CLASS___NSString);
          id v23 = sub_68284(v22, v11, @"tP");
          id v64 = (void *)objc_claimAutoreleasedReturnValue(v23);
          uint64_t v24 = objc_opt_class(&OBJC_CLASS___NSString);
          id v25 = sub_68284(v24, v11, @"sP");
          uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue(v25);
          __int128 v67 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
          uint64_t v26 = objc_opt_class(&OBJC_CLASS___NSString);
          char v27 = objc_opt_isKindOfClass(v67, v26);
          if ((v27 & 1) != 0)
          {
            uint64_t v28 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
            uint64_t v29 = objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v28));
            __int128 v50 = (void *)v29;
            __int128 v56 = (void *)v28;
            goto LABEL_21;
          }

          uint64_t v30 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
          uint64_t v31 = objc_opt_class(&OBJC_CLASS___NSData);
          if ((objc_opt_isKindOfClass(v30, v31) & 1) != 0)
          {
            uint64_t v29 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v11, "objectForKey:", @"t"));
            __int128 v61 = (void *)v30;
            uint64_t v49 = (void *)v29;
LABEL_21:
            char v32 = v27 ^ 1;
          }

          else
          {
            char v32 = 0;
            uint64_t v29 = 0LL;
            __int128 v61 = (void *)v30;
          }

          uint64_t v33 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v34 = sub_68284(v33, v11, @"e");
          char v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
          uint64_t v36 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v37 = sub_68284(v36, v11, @"D");
          uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
          uint64_t v39 = objc_opt_class(&OBJC_CLASS___NSDictionary);
          id v40 = sub_68284(v39, v11, @"Dc");
          id v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
          uint64_t v42 = objc_opt_class(&OBJC_CLASS___NSNumber);
          id v43 = sub_68284(v42, v11, @"H");
          __int128 v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
          [v16 handler:v54 bubblePayloadData:v66 forMessageID:v65 toIdentifier:v64 fromIdentifier:v63 fromToken:v29 timeStamp:v35 fromIDSID:v52 needsDelive ryReceipt:v38 deliveryContext:v41 storageContext:v44];

          if ((v32 & 1) != 0) {
          uint64_t v45 = v61;
          }
          if ((v27 & 1) != 0)
          {

            uint64_t v45 = v56;
          }

          if ((v58 & 1) != 0) {
          id v46 = v62;
          }
          if ((isKindOfClass & 1) != 0)
          {

            id v46 = v57;
          }

          continue;
        }
      }

      id v60 = [obj countByEnumeratingWithState:&v70 objects:v76 count:16];
    }

    while (v60);
  }
}

void sub_6E408()
{
}

void sub_6E580(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = objc_alloc_init(&OBJC_CLASS___LocalMessagePushHandlerCommandHandlerRegistry);
  uint64_t v4 = (void *)qword_E32C8;
  qword_E32C8 = (uint64_t)v3;

  [*(id *)(a1 + 32) addLocalStandardCommandHandlersToRegistry:qword_E32C8];
  objc_autoreleasePoolPop(v2);
}

void sub_6E85C(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v19 = a4;
  id v20 = a5;
  uint64_t v13 = a6;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v14 = -[MessagePushHandler copyHandlersForEnumerating](v11, "copyHandlersForEnumerating");
  id v15 = [v14 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v15)
  {
    uint64_t v16 = *(void *)v22;
    do
    {
      for (i = 0LL; i != v15; i = (char *)i + 1)
      {
        if (*(void *)v22 != v16) {
          objc_enumerationMutation(v14);
        }
        uint64_t v18 = *(void **)(*((void *)&v21 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v18, "handler:remoteFileRequest:") & 1) != 0) {
          [v18 handler:v11 remoteFileRequest:v12];
        }
      }

      id v15 = [v14 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }

    while (v15);
  }
}

void sub_6EAE8( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, __int128 buf)
{
  if (a2 == 1)
  {
    id v25 = objc_begin_catch(a1);
    if (IMOSLoggingEnabled(v25, v26))
    {
      uint64_t v27 = OSLogHandleForIMFoundationCategory("Warning");
      uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v25;
        _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_INFO,  "Exception handling incomming Remote File Request push: %@",  (uint8_t *)&buf,  0xCu);
      }
    }

    objc_end_catch();
    JUMPOUT(0x6EA64LL);
  }

  _Unwind_Resume(a1);
}

void sub_6EBA0(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v19 = a4;
  id v20 = a5;
  uint64_t v13 = a6;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v14 = -[MessagePushHandler copyHandlersForEnumerating](v11, "copyHandlersForEnumerating");
  id v15 = [v14 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v15)
  {
    uint64_t v16 = *(void *)v22;
    do
    {
      for (i = 0LL; i != v15; i = (char *)i + 1)
      {
        if (*(void *)v22 != v16) {
          objc_enumerationMutation(v14);
        }
        uint64_t v18 = *(void **)(*((void *)&v21 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v18, "handler:remoteFileResponse:") & 1) != 0) {
          [v18 handler:v11 remoteFileResponse:v12];
        }
      }

      id v15 = [v14 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }

    while (v15);
  }
}

void sub_6EE2C( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, __int128 buf)
{
  if (a2 == 1)
  {
    id v25 = objc_begin_catch(a1);
    if (IMOSLoggingEnabled(v25, v26))
    {
      uint64_t v27 = OSLogHandleForIMFoundationCategory("Warning");
      uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v25;
        _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_INFO,  "Exception handling incomming Remote File response push: %@",  (uint8_t *)&buf,  0xCu);
      }
    }

    objc_end_catch();
    JUMPOUT(0x6EDA8LL);
  }

  _Unwind_Resume(a1);
}

void sub_6EEE4(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v19 = a4;
  id v20 = a5;
  uint64_t v13 = a6;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v14 = -[MessagePushHandler copyHandlersForEnumerating](v11, "copyHandlersForEnumerating");
  id v15 = [v14 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v15)
  {
    uint64_t v16 = *(void *)v22;
    do
    {
      for (i = 0LL; i != v15; i = (char *)i + 1)
      {
        if (*(void *)v22 != v16) {
          objc_enumerationMutation(v14);
        }
        uint64_t v18 = *(void **)(*((void *)&v21 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v18, "handler:payloadDataRequest:") & 1) != 0) {
          [v18 handler:v11 payloadDataRequest:v12];
        }
      }

      id v15 = [v14 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }

    while (v15);
  }
}

void sub_6F170( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, __int128 buf)
{
  if (a2 == 1)
  {
    id v25 = objc_begin_catch(a1);
    if (IMOSLoggingEnabled(v25, v26))
    {
      uint64_t v27 = OSLogHandleForIMFoundationCategory("Warning");
      uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v25;
        _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_INFO,  "Exception handling incoming local payload data request push: %@",  (uint8_t *)&buf,  0xCu);
      }
    }

    objc_end_catch();
    JUMPOUT(0x6F0ECLL);
  }

  _Unwind_Resume(a1);
}

void sub_6F228(id a1, MessagePushHandler *a2, NSDictionary *a3, NSDictionary *a4, id a5, NSString *a6, BOOL a7)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v19 = a4;
  id v20 = a5;
  uint64_t v13 = a6;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v14 = -[MessagePushHandler copyHandlersForEnumerating](v11, "copyHandlersForEnumerating");
  id v15 = [v14 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v15)
  {
    uint64_t v16 = *(void *)v22;
    do
    {
      for (i = 0LL; i != v15; i = (char *)i + 1)
      {
        if (*(void *)v22 != v16) {
          objc_enumerationMutation(v14);
        }
        uint64_t v18 = *(void **)(*((void *)&v21 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v18, "handler:payloadDataResponse:") & 1) != 0) {
          [v18 handler:v11 payloadDataResponse:v12];
        }
      }

      id v15 = [v14 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }

    while (v15);
  }
}

void sub_6F4B4( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, __int128 buf)
{
  if (a2 == 1)
  {
    id v25 = objc_begin_catch(a1);
    if (IMOSLoggingEnabled(v25, v26))
    {
      uint64_t v27 = OSLogHandleForIMFoundationCategory("Warning");
      uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v25;
        _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_INFO,  "Exception handling incoming local payload data response push: %@",  (uint8_t *)&buf,  0xCu);
      }
    }

    objc_end_catch();
    JUMPOUT(0x6F430LL);
  }

  _Unwind_Resume(a1);
}

void sub_70820(id a1)
{
  off_E32D8 = (_UNKNOWN *)IMWeakLinkSymbol("IMDNotificationsPostFirstUnlockMessage", @"IMDPersistence");
}

id sub_708E4(void *a1)
{
  id v2 = -[IMDAccountController activeiMessageAliases]( +[IMDAccountController sharedInstance](&OBJC_CLASS___IMDAccountController, "sharedInstance"),  "activeiMessageAliases");
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id result = [a1 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (result)
  {
    id v4 = result;
    uint64_t v5 = *(void *)v8;
    while (2)
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(a1);
        }
        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id result = [a1 countByEnumeratingWithState:&v7 objects:v11 count:16];
      id v4 = result;
      if (result) {
        continue;
      }
      break;
    }
  }

  return result;
}

void _ConvergeGroupParticipants( void *a1, void *a2, uint64_t a3, __CFString *a4, void *a5, void *a6, int a7, int a8, uint64_t a9, void *a10)
{
  id v13 = a10;
  if (!a10) {
    id v13 = [a1 account];
  }
  id v14 = [a5 _stripFZIDPrefix];
  id v15 = [a6 _stripFZIDPrefix];
  uint64_t v17 = IMOSLoggingEnabled(v15, v16);
  if ((_DWORD)v17)
  {
    uint64_t v19 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group");
    uint64_t v17 = os_log_type_enabled(v19, OS_LOG_TYPE_INFO);
    if ((_DWORD)v17)
    {
      id v20 = @"NO";
      *(_DWORD *)buf = 138413314;
      uint64_t v114 = a4;
      __int16 v115 = 2112;
      if (a8) {
        id v20 = @"YES";
      }
      id v116 = v14;
      __int16 v117 = 2112;
      id v118 = v15;
      __int16 v119 = 2048;
      uint64_t v120 = a9;
      __int16 v121 = 2112;
      uint64_t v122 = v20;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_INFO,  " Updating participants: %@   toIdentifier: %@, fromIdentifier :%@, updateType %lu, allowSelfRemoval %@",  buf,  0x34u);
    }
  }

  if (IMOSLoggingEnabled(v17, v18))
  {
    __int128 v21 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group");
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      __int128 v22 = (const __CFString *)[a2 participants];
      *(_DWORD *)buf = 138412290;
      uint64_t v114 = v22;
      _os_log_impl(&dword_0, v21, OS_LOG_TYPE_INFO, "Chat participants before converge %@", buf, 0xCu);
    }
  }

  id v23 = objc_msgSend(objc_msgSend(a2, "participants"), "arrayByApplyingSelector:", "ID");
  __int128 v24 = +[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v23);
  if (a9 == 2)
  {
    id v40 = v24;
    float v90 = (__CFString *)[v23 mutableCopy];
    __int128 v99 = 0u;
    __int128 v100 = 0u;
    __int128 v97 = 0u;
    __int128 v98 = 0u;
    char v39 = 0;
    id v42 = -[__CFString countByEnumeratingWithState:objects:count:]( a4,  "countByEnumeratingWithState:objects:count:",  &v97,  v110,  16LL);
    if (v42)
    {
      uint64_t v43 = *(void *)v98;
      if (a7) {
        id v44 = 0LL;
      }
      else {
        id v44 = v15;
      }
      id v86 = v44;
      int v88 = 1;
      do
      {
        for (i = 0LL; i != v42; i = (char *)i + 1)
        {
          if (*(void *)v98 != v43) {
            objc_enumerationMutation(a4);
          }
          id v46 = *(__CFString **)(*((void *)&v97 + 1) + 8LL * (void)i);
          if ((-[__CFString isEqualToIgnoringCase:](v46, "isEqualToIgnoringCase:", v14) & 1) != 0)
          {
            int v88 = 0;
          }

          else
          {
            BOOL v47 = -[NSSet containsObject:](v40, "containsObject:", v46);
            if (!v47)
            {
              if (IMOSLoggingEnabled(v47, v48))
              {
                uint64_t v49 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group");
                if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 138412290;
                  uint64_t v114 = v46;
                  _os_log_impl(&dword_0, v49, OS_LOG_TYPE_INFO, "   Adding participant: %@", buf, 0xCu);
                }
              }

              id v50 = [a2 chatIdentifier];
              LOBYTE(v83) = [a2 style];
              [a1 didChangeMemberStatus:2 forHandle:v46 fromHandle:v86 unformattedNumber:0 countryCode:0 forChat:v50 style:v83 account:v13 destinationCallerID:v14];
              char v39 = 1;
            }

            -[__CFString removeObject:](v90, "removeObject:", v46);
          }
        }

        id v42 = -[__CFString countByEnumeratingWithState:objects:count:]( a4,  "countByEnumeratingWithState:objects:count:",  &v97,  v110,  16LL);
      }

      while (v42);
    }

    else
    {
      int v88 = 1;
    }

    if (IMOSLoggingEnabled(0LL, v41))
    {
      __int128 v61 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group");
      if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v114 = v90;
        _os_log_impl(&dword_0, v61, OS_LOG_TYPE_INFO, "   Participants to be removed %@", buf, 0xCu);
      }
    }

    __int128 v95 = 0u;
    __int128 v96 = 0u;
    __int128 v93 = 0u;
    __int128 v94 = 0u;
    id v62 = -[__CFString countByEnumeratingWithState:objects:count:]( v90,  "countByEnumeratingWithState:objects:count:",  &v93,  v109,  16LL);
    if (v62)
    {
      uint64_t v63 = *(void *)v94;
      if (a7) {
        id v64 = 0LL;
      }
      else {
        id v64 = v15;
      }
      do
      {
        for (j = 0LL; j != v62; j = (char *)j + 1)
        {
          if (*(void *)v94 != v63) {
            objc_enumerationMutation(v90);
          }
          id v66 = *(__CFString **)(*((void *)&v93 + 1) + 8LL * (void)j);
          id v67 = -[__CFString isEqualToIgnoringCase:](v66, "isEqualToIgnoringCase:", v14);
          if ((_DWORD)v67) {
            BOOL v69 = a8 == 0;
          }
          else {
            BOOL v69 = 0;
          }
          if (!v69)
          {
            if (IMOSLoggingEnabled(v67, v68))
            {
              __int128 v70 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group");
              if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412290;
                uint64_t v114 = v66;
                _os_log_impl(&dword_0, v70, OS_LOG_TYPE_INFO, "   Removing participant: %@", buf, 0xCu);
              }
            }

            id v71 = [a2 chatIdentifier];
            LOBYTE(v83) = [a2 style];
            [a1 didChangeMemberStatus:3 forHandle:v66 fromHandle:v64 unformattedNumber:0 countryCode:0 forChat:v71 style:v83 account:v13 destinationCallerID:v14];
            char v39 = 1;
          }
        }

        id v62 = -[__CFString countByEnumeratingWithState:objects:count:]( v90,  "countByEnumeratingWithState:objects:count:",  &v93,  v109,  16LL);
      }

      while (v62);
    }
  }

  else if (a9 == 1)
  {
    __int128 v103 = 0u;
    __int128 v104 = 0u;
    __int128 v101 = 0u;
    __int128 v102 = 0u;
    id v51 = -[__CFString countByEnumeratingWithState:objects:count:]( a4,  "countByEnumeratingWithState:objects:count:",  &v101,  v111,  16LL);
    id v53 = v51;
    if (v51)
    {
      char v54 = 0;
      uint64_t v55 = *(void *)v102;
      if (a7) {
        id v56 = 0LL;
      }
      else {
        id v56 = v15;
      }
      do
      {
        __int128 v57 = 0LL;
        do
        {
          if (*(void *)v102 != v55) {
            objc_enumerationMutation(a4);
          }
          char v58 = *(__CFString **)(*((void *)&v101 + 1) + 8LL * (void)v57);
          if (IMOSLoggingEnabled(v51, v52))
          {
            uint64_t v59 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group");
            if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              uint64_t v114 = v58;
              _os_log_impl(&dword_0, v59, OS_LOG_TYPE_INFO, " Removing participant explicitly: %@", buf, 0xCu);
            }
          }

          id v60 = [a2 chatIdentifier];
          LOBYTE(v83) = [a2 style];
          [a1 didChangeMemberStatus:3 forHandle:v58 fromHandle:v56 unformattedNumber:0 countryCode:0 forChat:v60 style:v83 account:v13 destinationCallerID:v14];
          id v51 = -[__CFString isEqualToIgnoringCase:](v58, "isEqualToIgnoringCase:", v14);
          if ((_DWORD)v51) {
            char v54 = 1;
          }
          __int128 v57 = (char *)v57 + 1;
        }

        while (v53 != v57);
        id v51 = -[__CFString countByEnumeratingWithState:objects:count:]( a4,  "countByEnumeratingWithState:objects:count:",  &v101,  v111,  16LL);
        id v53 = v51;
      }

      while (v51);
      int v88 = v54 & 1;
      char v39 = 1;
    }

    else
    {
      int v88 = 0;
      char v39 = 0;
    }
  }

  else if (a9)
  {
    char v39 = 0;
    int v88 = 1;
  }

  else
  {
    __int128 v107 = 0u;
    __int128 v108 = 0u;
    __int128 v105 = 0u;
    __int128 v106 = 0u;
    char v25 = 0;
    id v26 = -[__CFString countByEnumeratingWithState:objects:count:]( a4,  "countByEnumeratingWithState:objects:count:",  &v105,  v112,  16LL);
    if (v26)
    {
      uint64_t v27 = *(void *)v106;
      if (a7) {
        id v15 = 0LL;
      }
      do
      {
        for (k = 0LL; k != v26; k = (char *)k + 1)
        {
          if (*(void *)v106 != v27) {
            objc_enumerationMutation(a4);
          }
          uint64_t v29 = *(__CFString **)(*((void *)&v105 + 1) + 8LL * (void)k);
          id v30 = -[__CFString isEqualToIgnoringCase:](v29, "isEqualToIgnoringCase:", v14);
          int v31 = (int)v30;
          int v33 = IMOSLoggingEnabled(v30, v32);
          if (v31)
          {
            if (v33)
            {
              id v34 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group");
              if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_INFO,  " I was added to a chat, so updating chat status",  buf,  2u);
              }
            }

            id v35 = [a2 chatIdentifier];
            id v36 = [a2 style];
            LOBYTE(v84) = [a2 isBlackholed];
            [a1 didUpdateChatStatus:2 chat:v35 style:v36 displayName:0 groupID:a3 handleInfo:0 account:v13 isBlackholed:v84];
          }

          else
          {
            if (v33)
            {
              id v37 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group");
              if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412290;
                uint64_t v114 = v29;
                _os_log_impl(&dword_0, v37, OS_LOG_TYPE_INFO, " Adding participant explicitly: %@", buf, 0xCu);
              }
            }

            id v38 = [a2 chatIdentifier];
            LOBYTE(v83) = [a2 style];
            [a1 didChangeMemberStatus:2 forHandle:v29 fromHandle:v15 unformattedNumber:0 countryCode:0 forChat:v38 style:v83 account:v13 destinationCallerID:v14];
            char v25 = 1;
          }
        }

        id v26 = -[__CFString countByEnumeratingWithState:objects:count:]( a4,  "countByEnumeratingWithState:objects:count:",  &v105,  v112,  16LL);
      }

      while (v26);
    }

    int v88 = 0;
    char v39 = v25 & 1;
  }

  id v72 = sub_708E4(a4);
  if (((v88 & a8 ^ 1 | v72) & 1) == 0)
  {
    if (IMOSLoggingEnabled(v72, v73))
    {
      __int128 v74 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group");
      if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v74, OS_LOG_TYPE_INFO, "   I was removed from this chat, leaving", buf, 2u);
      }
    }

    id v75 = [a2 chatIdentifier];
    id v76 = [a2 style];
    LOBYTE(v84) = [a2 isBlackholed];
    id v72 = [a1 didUpdateChatStatus:3 chat:v75 style:v76 displayName:0 groupID:a3 handleInfo:0 account:v13 isBlackholed:v84];
    char v39 = 1;
  }

  uint64_t v77 = IMOSLoggingEnabled(v72, v73);
  if ((_DWORD)v77)
  {
    __int128 v79 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group");
    uint64_t v77 = os_log_type_enabled(v79, OS_LOG_TYPE_INFO);
    if ((_DWORD)v77)
    {
      __int128 v80 = (const __CFString *)[a2 participants];
      *(_DWORD *)buf = 138412290;
      uint64_t v114 = v80;
      _os_log_impl(&dword_0, v79, OS_LOG_TYPE_INFO, "Chat participants after converge %@", buf, 0xCu);
    }
  }

  if (IMOSLoggingEnabled(v77, v78))
  {
    __int128 v81 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group");
    if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
    {
      char v82 = @"NO";
      if ((v39 & 1) != 0) {
        char v82 = @"YES";
      }
      *(_DWORD *)buf = 138412290;
      uint64_t v114 = v82;
      _os_log_impl(&dword_0, v81, OS_LOG_TYPE_INFO, "Group changed and will write to db? %@", buf, 0xCu);
    }
  }

  if ((v39 & 1) != 0) {
    -[IMDChatStore storeChat:]( +[IMDChatStore sharedInstance](&OBJC_CLASS___IMDChatStore, "sharedInstance"),  "storeChat:",  a2);
  }
}

id incrementParticipantVersionForChat(void *a1)
{
  id v2 = (char *)[a1 groupParticipantVersion];
  if (IMOSLoggingEnabled(v2, v3))
  {
    id v4 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v6 = 138412546;
      id v7 = [a1 groupID];
      __int16 v8 = 2048;
      __int128 v9 = v2;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_INFO,  "Incrementing participant version of chat %@ to %ld",  (uint8_t *)&v6,  0x16u);
    }
  }

  return [a1 setGroupParticipantVersion:v2 + 1];
}

void setParticipantVersionForChat(void *a1, uint64_t a2)
{
  int v4 = IMOSLoggingEnabled(a1, a2);
  if (a2 < 0)
  {
    if (v4)
    {
      int v6 = (os_log_s *)OSLogHandleForIMFoundationCategory("Warning");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        LOWORD(v7) = 0;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_INFO,  "Received a negative participant version. This is not right!",  (uint8_t *)&v7,  2u);
      }
    }
  }

  else
  {
    if (v4)
    {
      uint64_t v5 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group");
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        int v7 = 138412546;
        id v8 = [a1 groupID];
        __int16 v9 = 2048;
        uint64_t v10 = a2;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_INFO,  "Setting participant version of chat %@ to %ld",  (uint8_t *)&v7,  0x16u);
      }
    }

    [a1 setGroupParticipantVersion:a2];
  }

void sub_7177C(void *a1, uint64_t a2)
{
  if (a2 < 0)
  {
    if (IMOSLoggingEnabled(a1, a2))
    {
      __int16 v9 = (os_log_s *)OSLogHandleForIMFoundationCategory("Warning");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        LOWORD(v10) = 0;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_INFO,  "Received a negative last group photo participant version. This is not right!",  (uint8_t *)&v10,  2u);
      }
    }
  }

  else
  {
    int v4 = -[NSNumber initWithInteger:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithInteger:", a2);
    if (IMOSLoggingEnabled(v4, v5))
    {
      int v6 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        int v10 = 138412546;
        id v11 = [a1 groupID];
        __int16 v12 = 2048;
        uint64_t v13 = a2;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_INFO,  "Setting last group photo-related participant version of chat %@ to %ld",  (uint8_t *)&v10,  0x16u);
      }
    }

    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    id v8 = Mutable;
    if (v4) {
      CFDictionarySetValue(Mutable, off_E2F28[0], v4);
    }
    [a1 updateProperties:v8];
  }

void sub_719B8(id a1)
{
  qword_E4540 = objc_alloc_init(&OBJC_CLASS___MessageGroupController);
}

NSMutableArray *sub_71B44(NSMutableArray *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    int v4 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    id v5 = -[NSMutableArray participants](v3, "participants", 0LL);
    id v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v12;
      do
      {
        for (i = 0LL; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v12 != v8) {
            objc_enumerationMutation(v5);
          }
          if (v4)
          {
            int v10 = *(void **)(*((void *)&v11 + 1) + 8LL * (void)i);
            if ([v10 ID]) {
              CFArrayAppendValue((CFMutableArrayRef)v4, [v10 ID]);
            }
          }
        }

        id v7 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }

      while (v7);
    }

    if (a2 && v4)
    {
      if ([a2 _stripFZIDPrefix]) {
        CFArrayAppendValue((CFMutableArrayRef)v4, [a2 _stripFZIDPrefix]);
      }
    }

    return v4;
  }

  return result;
}

uint64_t sub_72954(uint64_t a1, void *a2)
{
  return [a2 isEqualToString:*(void *)(a1 + 32)] ^ 1;
}

id sub_737B4(id a1, NSString *a2)
{
  return -[NSString _stripFZIDPrefix](a2, "_stripFZIDPrefix");
}

void *sub_737BC(uint64_t a1, void *a2)
{
  else {
    return a2;
  }
}

id sub_737EC(id a1, NSString *a2)
{
  return -[NSString _stripFZIDPrefix](a2, "_stripFZIDPrefix");
}

uint64_t sub_73A58(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  int v8 = IMOSLoggingEnabled(a1, a2);
  if (a2)
  {
    if (!v8) {
      goto LABEL_9;
    }
    __int16 v9 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group");
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
      goto LABEL_9;
    }
    int v14 = 138412290;
    id v15 = a2;
    int v10 = "Successfully found engroup: %@";
  }

  else
  {
    if (!v8) {
      goto LABEL_9;
    }
    __int16 v9 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group");
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
      goto LABEL_9;
    }
    id v11 = [*(id *)(a1 + 32) engramID];
    int v14 = 138412290;
    id v15 = v11;
    int v10 = "We failed to look up an engroup for engram id: %@";
  }

  _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, v10, (uint8_t *)&v14, 0xCu);
LABEL_9:
  if ((_DWORD)a3) {
    __int128 v12 = a2;
  }
  else {
    __int128 v12 = 0LL;
  }
  return (*(uint64_t (**)(void, void, void, void *, uint64_t, uint64_t))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  *(void *)(a1 + 40),  *(void *)(a1 + 32),  v12,  a3,  a4);
}

void sub_73B8C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x73B38LL);
  }

  _Unwind_Resume(a1);
}

void sub_74518(void *a1, void *a2)
{
  if (a2)
  {
    int v4 = objc_alloc(&OBJC_CLASS___NSNumber);
    [a2 doubleValue];
    double v6 = v5 / 1000000000.0;
    id v7 = v4;
  }

  else
  {
    -[NSDate timeIntervalSince1970](+[NSDate date](&OBJC_CLASS___NSDate, "date"), "timeIntervalSince1970");
    double v9 = v8;
    id v7 = objc_alloc(&OBJC_CLASS___NSNumber);
    double v6 = v9;
  }

  int v10 = -[NSNumber initWithDouble:](v7, "initWithDouble:", v6);
  if (IMOSLoggingEnabled(v10, v11))
  {
    __int128 v12 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      int v15 = 138412546;
      id v16 = [a1 groupID];
      __int16 v17 = 2048;
      uint64_t v18 = -[NSNumber longLongValue](v10, "longLongValue");
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_INFO,  "Updating timestamp for chat gid: %@ to %lld",  (uint8_t *)&v15,  0x16u);
    }
  }

  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  int v14 = Mutable;
  if (v10) {
    CFDictionarySetValue(Mutable, off_E2F30[0], v10);
  }
  [a1 updateProperties:v14];
}

void sub_746B8(uint64_t a1, void *a2, int a3, void *a4)
{
  if (a3)
  {
    if (IMOSLoggingEnabled(a1, a2))
    {
      id v7 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        int v11 = 138412546;
        __int128 v12 = a2;
        __int16 v13 = 2048;
        int v14 = a4;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_INFO,  "We added participants to the engroup: %@ with error: %lu",  (uint8_t *)&v11,  0x16u);
      }
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL) = 0;
    goto LABEL_7;
  }

  double v8 = (char *)[a4 code];
  if (v8 == (_BYTE *)&dword_0 + 3)
  {
LABEL_7:
    if (*(void *)(a1 + 56))
    {
      if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL))
      {
        (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
        objc_msgSend( *(id *)(a1 + 56),  "_forwardP2PGroupCommand:fromPerson:toPerson:toGroup:",  *(void *)(a1 + 64),  *(void *)(a1 + 72),  objc_msgSend(*(id *)(a1 + 72), "_stripFZIDPrefix"),  a2);
      }
    }

    return;
  }

  if (IMOSLoggingEnabled(v8, v9))
  {
    int v10 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      int v11 = 134217984;
      __int128 v12 = a4;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_INFO,  "We failed to add participants to the engroup with error: %lu",  (uint8_t *)&v11,  0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
}

void sub_74D98( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x74BE4LL);
  }

  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_74E24(uint64_t a1, void *a2, int a3, void *a4)
{
  if (a3)
  {
    if (IMOSLoggingEnabled(a1, a2))
    {
      id v7 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        int v18 = 138412546;
        uint64_t v19 = a2;
        __int16 v20 = 2048;
        id v21 = a4;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_INFO,  "We removed participants to our engroup: %@ with error: %lu",  (uint8_t *)&v18,  0x16u);
      }
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL) = 0;
    goto LABEL_7;
  }

  double v8 = (char *)[a4 code];
  if (v8 == (_BYTE *)&dword_0 + 3)
  {
LABEL_7:
    if (*(void *)(a1 + 56) && !*(_BYTE *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL))
    {
      uint64_t v10 = (*(uint64_t (**)(void))(*(void *)(a1 + 80) + 16LL))();
      if (IMOSLoggingEnabled(v10, v11))
      {
        __int128 v12 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group");
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          __int16 v13 = *(void **)(a1 + 48);
          id v14 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "session"), "groupIDForChat:", *(void *)(a1 + 40));
          uint64_t v15 = *(void *)(a1 + 40);
          uint64_t v16 = *(void *)(a1 + 64);
          int v18 = 138413058;
          uint64_t v19 = v13;
          __int16 v20 = 2112;
          id v21 = v14;
          __int16 v22 = 2112;
          uint64_t v23 = v15;
          __int16 v24 = 2112;
          uint64_t v25 = v16;
          _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_INFO,  "* Removing engroup participants: %@    groupID: %@   chat: %@   dictionary: %@",  (uint8_t *)&v18,  0x2Au);
        }
      }

      objc_msgSend( *(id *)(a1 + 56),  "_forwardP2PGroupCommand:fromPerson:toPerson:toGroup:",  *(void *)(a1 + 64),  *(void *)(a1 + 72),  objc_msgSend(*(id *)(a1 + 72), "_stripFZIDPrefix"),  a2);
    }

    return;
  }

  if (IMOSLoggingEnabled(v8, v9))
  {
    __int16 v17 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      int v18 = 134217984;
      uint64_t v19 = a4;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_INFO,  "we failed to remove participants to the engroup with error: %lu",  (uint8_t *)&v18,  0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
}

void sub_75658(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x75378LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_75708(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = IMOSLoggingEnabled(a1, a2);
  if (a3)
  {
    if (v6)
    {
      id v7 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v7, OS_LOG_TYPE_INFO, "We got an engroup back to send the P2P leave command to", buf, 2u);
      }
    }

    double v8 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL);
    if (v8) {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), off_E2F40[0], v8);
    }
    *(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = 0;
    uint64_t v9 = *(void *)(a1 + 72);
    if (v9) {
      (*(void (**)(uint64_t, void, void, uint64_t, void))(v9 + 16))( v9,  *(void *)(a1 + 40),  *(void *)(a1 + 48),  1LL,  0LL);
    }
    objc_msgSend( *(id *)(a1 + 56),  "_forwardP2PGroupCommand:fromPerson:toPerson:toGroup:",  *(void *)(a1 + 32),  *(void *)(a1 + 64),  objc_msgSend(*(id *)(a1 + 64), "_stripFZIDPrefix"),  a2);
  }

  else if (v6)
  {
    uint64_t v10 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_INFO,  "We failed to look up an engroup, so sending w/ legacy methods",  v11,  2u);
    }
  }

id sub_76850(uint64_t a1)
{
  return objc_msgSend( objc_msgSend(*(id *)(a1 + 32), "groupPhotoRequestsInFlight"),  "removeObjectForKey:",  objc_msgSend(*(id *)(a1 + 40), "guid"));
}

void sub_76C38(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x76AA8LL);
  }

  _Unwind_Resume(a1);
}

id sub_76DB4(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_requestGroupPhotoUpdate:fromIdentifier:toIdentifier:session:",  objc_msgSend(a3, "objectForKey:", @"chat"),  objc_msgSend(a3, "objectForKey:", @"fromIdentifier"),  objc_msgSend(a3, "objectForKey:", @"toIdentifier"),  objc_msgSend(a3, "objectForKey:", @"session"));
}

void sub_775CC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x77538LL);
  }

  _Unwind_Resume(a1);
}

void sub_78FD0(uint64_t a1, uint64_t a2, int a3)
{
  int v5 = IMOSLoggingEnabled(a1, a2);
  if (a3)
  {
    if (v5)
    {
      int v6 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = *(void *)(a1 + 32);
        int v13 = 138412546;
        uint64_t v14 = v7;
        __int16 v15 = 2112;
        uint64_t v16 = v7;
        double v8 = "We successfully removed the participant: %@ from the engroup after %@ left the chat";
        uint64_t v9 = v6;
        uint32_t v10 = 22;
LABEL_8:
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, v8, (uint8_t *)&v13, v10);
      }
    }
  }

  else if (v5)
  {
    uint64_t v11 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      int v13 = 138412290;
      uint64_t v14 = v12;
      double v8 = "We failed to remove the participant from the engroup after: %@ left the chat";
      uint64_t v9 = v11;
      uint32_t v10 = 12;
      goto LABEL_8;
    }
  }

void sub_792F8(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x7929CLL);
  }

  _Unwind_Resume(a1);
}

void sub_7932C(id a1, ENGroup *a2, BOOL a3, NSError *a4)
{
  BOOL v5 = a3;
  int v6 = IMOSLoggingEnabled(a1, a2);
  if (v5)
  {
    if (v6)
    {
      uint64_t v7 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        LOWORD(v12) = 0;
        double v8 = "Successfully added participants from legacy device";
        uint64_t v9 = v7;
        uint32_t v10 = 2;
LABEL_8:
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, v8, (uint8_t *)&v12, v10);
      }
    }
  }

  else if (v6)
  {
    uint64_t v11 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      int v12 = 138412290;
      int v13 = a4;
      double v8 = "We did not update the group -- add: %@";
      uint64_t v9 = v11;
      uint32_t v10 = 12;
      goto LABEL_8;
    }
  }

void sub_79460(id a1, ENGroup *a2, BOOL a3, NSError *a4)
{
  BOOL v5 = a3;
  int v6 = IMOSLoggingEnabled(a1, a2);
  if (v5)
  {
    if (v6)
    {
      uint64_t v7 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        LOWORD(v12) = 0;
        double v8 = "Successfully removed participants from legacy device";
        uint64_t v9 = v7;
        uint32_t v10 = 2;
LABEL_8:
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, v8, (uint8_t *)&v12, v10);
      }
    }
  }

  else if (v6)
  {
    uint64_t v11 = (os_log_s *)OSLogHandleForIMFoundationCategory("Group");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      int v12 = 138412290;
      int v13 = a4;
      double v8 = "We did not update the group -- remove: %@";
      uint64_t v9 = v11;
      uint32_t v10 = 12;
      goto LABEL_8;
    }
  }

void sub_799E4(id a1)
{
  qword_E4550 = objc_alloc_init(&OBJC_CLASS___MessageTranscodeController);
}

uint64_t sub_7A070(uint64_t a1, void *a2)
{
  if (!qword_E4558)
  {
    int v4 = (uint64_t *)IMWeakLinkSymbol("APSErrorDomain", @"ApplePushService");
    if (v4) {
      uint64_t v5 = *v4;
    }
    else {
      uint64_t v5 = 0LL;
    }
    qword_E4558 = v5;
  }

  id v6 = objc_msgSend(objc_msgSend(a2, "userInfo"), "objectForKey:", NSUnderlyingErrorKey);
  if (v6) {
    a2 = v6;
  }
  if (a2)
  {
    if (objc_msgSend(objc_msgSend(a2, "domain"), "isEqualToString:", NSURLErrorDomain))
    {
      unint64_t v7 = (unint64_t)[a2 code] + 1020;
      if (v7 < 0x15 && ((0x1ADA07u >> v7) & 1) != 0)
      {
        double v8 = (unsigned int *)&unk_9E1C0;
        return v8[v7];
      }
    }

    else
    {
      id v9 = [a2 domain];
      if (qword_E4558)
      {
        id v11 = [a2 domain];
        if ([v11 isEqualToString:qword_E4558])
        {
          unint64_t v7 = (unint64_t)[a2 code] - 2;
          if (v7 < 5)
          {
            double v8 = (unsigned int *)&unk_9E214;
            return v8[v7];
          }
        }
      }
    }
  }

  uint64_t result = 0LL;
  if (a1 > 1)
  {
    if (a1 == 28) {
      return result;
    }
  }

  else
  {
    if (!a1) {
      return result;
    }
    if (a1 == 1) {
      return 22LL;
    }
  }

  return 4LL;
}

id *sub_7A990(id *result, uint64_t a2)
{
  if (a2)
  {
    id v2 = result;
    [result[4] setMessageDeliveryContext:a2];
    [v2[5] _handleIsMeToMeForMessage:v2[6] withContext:v2[4]];
    [v2[5] _handleDeliveryFailureForMessage:v2[6] withContext:v2[4]];
    [v2[5] _handleUpdateNotificationTimeManagerForMessage:v2[6] withContext:v2[4]];
    [v2[5] _stopTimingMessageSend];
    [v2[5] _notifyDidSendMessage:v2[6] withContext:v2[4]];
    [v2[5] _logCompletedMessage:v2[6] withContext:v2[4]];
    return (id *)_[v2[5] _deactivateServiceIfNeededForContext:v2[4]];
  }

  return result;
}

id sub_7BAF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = IMOSLoggingEnabled(a1, a2);
  if ((_DWORD)v3)
  {
    uint64_t v5 = OSLogHandleForIMFoundationCategory("Warning");
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_0, v6, OS_LOG_TYPE_INFO, " ** FailSendingMessages is enabled, failing send message", buf, 2u);
    }
  }

  if (IMOSLoggingEnabled(v3, v4))
  {
    uint64_t v7 = OSLogHandleForIMEventCategory("MessageService");
    double v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint32_t v10 = 0;
      _os_log_impl(&dword_0, v8, OS_LOG_TYPE_INFO, " ** FailSendingMessages is enabled, failing send message", v10, 2u);
    }
  }

  [*(id *)(a1 + 32) setErrorCode:5];
  return [*(id *)(a1 + 40) _didSendMessage:*(void *)(a1 + 32) withContext:*(void *)(a1 + 48) forceDate:0 fromStorage:0];
}

void sub_7C2C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

uint64_t sub_7C2E0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_7C2F0(uint64_t a1)
{
}

void sub_7C2F8(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if ([v7 scheduleType] == (char *)&dword_0 + 2
    || [v5 scheduleType] == (char *)&dword_0 + 2)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scheduledMessageCoordinator]);
    [v6 handleMessageDidReplace:v7 newMessage:v5];
  }
}

void sub_7C378(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "_handleDeviceRegistrationForMessage:withContext:")
    && ([*(id *)(a1 + 32) _failSendingMessageIfNeeded:v4 withContext:*(void *)(a1 + 40)] & 1) == 0 && objc_msgSend( *(id *)(a1 + 32),  "_handleTypingIndicatorMessage:withContext:",  v4,  *(void *)(a1 + 40)))
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), a2);
  }
}

void sub_7CA00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_7CA18( uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, char a9, unsigned int a10)
{
  id v50 = a2;
  id v53 = a3;
  id v17 = a4;
  id v51 = a5;
  id v52 = a6;
  id v18 = a7;
  id v19 = a8;
  id v21 = v19;
  if ((a9 & 1) != 0)
  {
    __int16 v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) groupController]);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) chat]);
    __int16 v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fromURI]);
    id v25 = [v22 newGroupMessagePayloadForChat:v23 fromID:v24];

    if (v21 && IMOSLoggingEnabled(v26, v27))
    {
      uint64_t v28 = OSLogHandleForIMFoundationCategory("MessageService");
      uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        id v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) guid]);
        *(_DWORD *)buf = 138412546;
        id v57 = v30;
        __int16 v58 = 2112;
        id v59 = v21;
        _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_INFO,  "We will be sending message with guid: %@ to engram group: %@",  buf,  0x16u);
      }
    }

    int v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) chat]);
    BOOL v32 = [v31 style] != 45;

    int v33 = -[GroupMessageContext initWithGroupPayload:additionalPayload:isGroupChat:]( objc_alloc(&OBJC_CLASS___GroupMessageContext),  "initWithGroupPayload:additionalPayload:isGroupChat:",  v25,  v18,  v32);
    uint64_t v34 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v35 = *(void **)(v34 + 40);
    *(void *)(v34 + 40) = v33;
  }

  else
  {
    uint64_t v36 = IMOSLoggingEnabled(v19, v20);
    if ((_DWORD)v36)
    {
      uint64_t v38 = OSLogHandleForIMFoundationCategory("Warning");
      char v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        id v57 = v53;
        __int16 v58 = 1024;
        LODWORD(v59) = a10;
        _os_log_impl( &dword_0,  v39,  OS_LOG_TYPE_INFO,  "Group message controler failed to prepare chat: %@  error: %d",  buf,  0x12u);
      }
    }

    if (IMOSLoggingEnabled(v36, v37))
    {
      uint64_t v40 = OSLogHandleForIMEventCategory("MessageService");
      uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
      {
        uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v17 body]);
        id v42 = (void *)objc_claimAutoreleasedReturnValue([v49 string]);
        uint64_t v43 = MarcoLoggingStringForMessageData(v42);
        id v44 = (id)objc_claimAutoreleasedReturnValue(v43);
        id v45 = (id)objc_claimAutoreleasedReturnValue([v17 guid]);
        id v46 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) participantURIs]);
        *(_DWORD *)buf = 138413058;
        id v57 = v44;
        __int16 v58 = 2112;
        id v59 = v45;
        __int16 v60 = 2112;
        __int128 v61 = v46;
        __int16 v62 = 1024;
        unsigned int v63 = a10;
        _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_INFO,  "Failed sending message: %@  withGUID: %@  to people: %@   error: %d",  buf,  0x26u);
      }
    }

    [v17 setErrorCode:a10];
    [*(id *)(a1 + 40) _didSendMessage:v17 withContext:*(void *)(a1 + 32) forceDate:0 fromStorage:0];
    uint64_t v54 = IMMetricsCollectorError;
    BOOL v47 = +[NSNumber numberWithLong:]( NSNumber,  "numberWithLong:",  sub_81188((uint64_t)[v17 errorCode]));
    uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
    uint64_t v55 = v48;
    id v25 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v55,  &v54,  1LL));

    id v35 = (void *)objc_claimAutoreleasedReturnValue(+[IMMetricsCollector sharedInstance](&OBJC_CLASS___IMMetricsCollector, "sharedInstance"));
    [v35 trackEvent:IMMetricsCollectorEventOutgoingMessage withDictionary:v25];
  }
}

void sub_7D400(uint64_t a1)
{
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serviceSession]);
  int v13 = (void *)objc_claimAutoreleasedReturnValue([v16 deliveryController]);
  uint64_t v14 = *(void *)(a1 + 40);
  __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) groupMessageContext]);
  int v12 = (void *)objc_claimAutoreleasedReturnValue([v15 additionalPayload]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) groupMessageContext]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 groupPayload]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) participantURIs]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) originalParticipantURIs]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fromURI]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) idsAccount]);
  double v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) chat]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 chatIdentifier]);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  void v21[2] = sub_7D638;
  v21[3] = &unk_D7A30;
  void v21[4] = *(void *)(a1 + 48);
  id v22 = *(id *)(a1 + 32);
  id v23 = *(id *)(a1 + 40);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  v17[2] = sub_7D64C;
  void v17[3] = &unk_D7A58;
  id v18 = *(id *)(a1 + 32);
  int8x16_t v11 = *(int8x16_t *)(a1 + 40);
  id v10 = (id)v11.i64[0];
  int8x16_t v19 = vextq_s8(v11, v11, 8uLL);
  id v20 = *(id *)(a1 + 56);
  [v13 sendMessage:v14 context:v12 groupContext:v3 toGroup:0 toParticipants:v4 originallyToParticipants:v5 fromID:v6 fromAccount:v7 chatIdentifier:v9 o riginalPayload:0 replyToMessageGUID:0 fakeSavedReceiptBlock:v21 completionBlock:v17];
}

id sub_7D638(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleFakeReceiptBlock:a2 withContext:*(void *)(a1 + 40) withMsg:*(void *)(a1 + 48)];
}

void sub_7D64C(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11 = a2;
  id v12 = a3;
  if ([v12 count] == (char *)&dword_0 + 1)
  {
    int v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fromURI]);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "__imFirstObject"));
    id v15 = [v13 isEqualToString:v14];
  }

  else
  {
    id v15 = 0LL;
  }

  id v16 = [*(id *)(a1 + 40) _updateOffGridStatusIfNeededWithMessage:*(void *)(a1 + 48) context:*(void *)(a1 + 32)];
  if (IMOSLoggingEnabled(v16, v17))
  {
    uint64_t v18 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
    int8x16_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      id v20 = @"NO";
      if ((_DWORD)a6) {
        id v20 = @"YES";
      }
      int v22 = 138412290;
      id v23 = v20;
      _os_log_impl(&dword_0, v19, OS_LOG_TYPE_INFO, "isBackwardsCompatibleMessage %@", (uint8_t *)&v22, 0xCu);
    }
  }

  id v21 = -[MessageDeliveryContext initWithDisplayIDs:didSucceed:error:isFromMeToMe:shouldDeactivate:isBackwardsCompatibleMessage:]( objc_alloc(&OBJC_CLASS___MessageDeliveryContext),  "initWithDisplayIDs:didSucceed:error:isFromMeToMe:shouldDeactivate:isBackwardsCompatibleMessage:",  v12,  a4,  a5,  v15,  0LL,  a6);
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_7DB94(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x7DB24LL);
  }

  _Unwind_Resume(a1);
}

void sub_7DBC8(uint64_t a1, char a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_7DC70;
  block[3] = &unk_D7AA8;
  char v11 = a2;
  id v3 = *(id *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = *(void **)(a1 + 48);
  id v7 = v3;
  uint64_t v8 = v4;
  char v12 = *(_BYTE *)(a1 + 64);
  id v9 = v5;
  id v10 = *(id *)(a1 + 56);
  dispatch_async(&_dispatch_main_q, block);
}

id sub_7DC70(uint64_t a1, uint64_t a2)
{
  if (IMOSLoggingEnabled(a1, a2))
  {
    uint64_t v3 = OSLogHandleForIMFoundationCategory("MessageServiceSession");
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      if (*(_BYTE *)(a1 + 64)) {
        id v6 = @"YES";
      }
      else {
        id v6 = @"NO";
      }
      int v9 = 138412546;
      id v10 = v6;
      __int16 v11 = 2112;
      uint64_t v12 = v5;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_INFO, "Got off grid mode %@ for %@", (uint8_t *)&v9, 0x16u);
    }
  }

  if (*(_BYTE *)(a1 + 64)) {
    BOOL v7 = 1LL;
  }
  else {
    BOOL v7 = *(_BYTE *)(a1 + 65) != 0;
  }
  return [*(id *)(a1 + 40) didReceiveOffGridStatus:v7 forID:*(void *)(a1 + 32) messageGUID:*(void *)(a1 + 48) account:*(void *)(a1 + 56)];
}

void sub_7E73C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x7E698LL);
  }

  _Unwind_Resume(a1);
}

void sub_7F2D4(uint64_t a1)
{
  id v20 = [*(id *)(a1 + 32) copy];
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) chat]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 chatIdentifier]);
  [v20 setSender:v3];

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringGUID](&OBJC_CLASS___NSString, "stringGUID"));
  [v20 setGuid:v4];

  [v20 setFlags:1];
  if (!*(_BYTE *)(a1 + 48)) {
    objc_msgSend(v20, "setFlags:", (unint64_t)objc_msgSend(v20, "flags") | 0x2000);
  }
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) serviceSession]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) chat]);
  BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([v6 chatIdentifier]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) chat]);
  id v9 = [v8 style];
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) imdAccount]);
  [v5 didReceiveMessage:v20 forChat:v7 style:v9 account:v10 fromIDSID:0];

  __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) chat]);
  LODWORD(v6) = [v11 style];

  if ((_DWORD)v6 == 45)
  {
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) serviceSession]);
    int v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) imdAccount]);
    [v12 didReceiveMessageDeliveryReceiptForMessageID:v13 date:v14 account:v15];
  }

  id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) chat]);
  int v17 = *(unsigned __int8 *)(a1 + 48);

  if (v17)
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) serviceSession]);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
    int8x16_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) imdAccount]);
    [v16 didSendMessageReadReceiptForMessageID:v18 account:v19];

LABEL_9:
  }
}

LABEL_38:
    goto LABEL_39;
  }

  if (IMOSLoggingEnabled(v12, v13))
  {
    uint64_t v55 = OSLogHandleForIMFoundationCategory("Warning");
    id v15 = (void *)objc_claimAutoreleasedReturnValue(v55);
    if (os_log_type_enabled((os_log_t)v15, OS_LOG_TYPE_INFO))
    {
      id v56 = (void *)objc_claimAutoreleasedReturnValue([v9 guid]);
      *(_DWORD *)buf = 138412290;
      id v71 = v56;
      _os_log_impl( &dword_0,  (os_log_t)v15,  OS_LOG_TYPE_INFO,  "Failed to find group activity while attempting to initiate TUConversation for msg guid %@",  buf,  0xCu);
    }

    goto LABEL_38;
  }

void sub_7FC70(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x7F97CLL);
  }

  _Unwind_Resume(a1);
}

id sub_7FD14(id a1, IMDHandle *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(-[IMDHandle ID](a2, "ID"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[TUHandle normalizedHandleWithDestinationID:]( &OBJC_CLASS___TUHandle,  "normalizedHandleWithDestinationID:",  v2));

  return v3;
}

id sub_7FD60(id a1, TUHandle *a2)
{
  id v2 = a2;
  id v3 = [[TUConversationMember alloc] initWithHandle:v2];

  return v3;
}

uint64_t sub_81188(uint64_t result)
{
  return result;
}

NSMutableString *AttachmentRefreshUtilGetMMCSRefreshHeaders(uint64_t a1, uint64_t a2)
{
  if (qword_E32F0 != -1) {
    dispatch_once(&qword_E32F0, &stru_D7D68);
  }
  if (!off_E32E8)
  {
    if (IMOSLoggingEnabled(a1, a2))
    {
      int v17 = (os_log_s *)OSLogHandleForIMFoundationCategory("Warning");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_INFO,  "AttachmentRefreshUtilGetMMCSRefreshHeaders could not load MMCS function",  buf,  2u);
      }
    }

    return 0LL;
  }

  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableString);
  id v3 = (uint64_t (*)(uint64_t))off_E32E8;
  if (qword_E3300 != -1) {
    dispatch_once(&qword_E3300, &stru_D7D88);
  }
  uint64_t v4 = (NSMutableString *)v3(qword_E32F8);
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v5 = -[NSMutableString countByEnumeratingWithState:objects:count:]( v4,  "countByEnumeratingWithState:objects:count:",  &v19,  v25,  16LL);
  id v7 = v5;
  if (v5)
  {
    uint64_t v8 = *(void *)v20;
    do
    {
      id v9 = 0LL;
      do
      {
        if (*(void *)v20 != v8) {
          objc_enumerationMutation(v4);
        }
        -[NSMutableString appendString:]( v2,  "appendString:",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@:%@\n",  *(void *)(*((void *)&v19 + 1) + 8LL * (void)v9),  -[NSMutableString objectForKey:](v4, "objectForKey:", *(void *)(*((void *)&v19 + 1) + 8LL * (void)v9))));
        id v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v5 = -[NSMutableString countByEnumeratingWithState:objects:count:]( v4,  "countByEnumeratingWithState:objects:count:",  &v19,  v25,  16LL);
      id v7 = v5;
    }

    while (v5);
  }

  if (IMOSLoggingEnabled(v5, v6))
  {
    id v10 = (os_log_s *)OSLogHandleForIMFoundationCategory("AttachmentRefreshUtilGetMMCSRefreshHeaders");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      __int16 v24 = v4;
      _os_log_impl(&dword_0, v10, OS_LOG_TYPE_INFO, "Got mmcs header info dict%@", buf, 0xCu);
    }
  }

  id v11 = -[NSMutableString length](v2, "length");
  BOOL v12 = v11 == 0LL;
  int v14 = IMOSLoggingEnabled(v11, v13);
  if (v12)
  {
    if (v14)
    {
      uint64_t v18 = (os_log_s *)OSLogHandleForIMFoundationCategory("Warning");
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_INFO,  "AttachmentRefreshUtilGetMMCSRefreshHeaders could not get mmcs headers",  buf,  2u);
      }
    }

    return 0LL;
  }

  if (v14)
  {
    id v15 = (os_log_s *)OSLogHandleForIMFoundationCategory("AttachmentRefreshUtilGetMMCSRefreshHeaders");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      __int16 v24 = v2;
      _os_log_impl(&dword_0, v15, OS_LOG_TYPE_INFO, "Got mmcs header %@", buf, 0xCu);
    }
  }

  return v2;
}

void sub_817C4(id a1)
{
  off_E32E8 = (_UNKNOWN *)IMWeakLinkSymbol("MMCSICloudRequestHeadersCopy", @"MMCS");
}

id AttachmentRefreshUtilConfigureStickerToken(void *a1, void *a2)
{
  if ([a2 objectForKey:@"mmcs-url"])
  {
    id v5 = +[NSURL URLWithString:]( NSURL,  "URLWithString:",  [a2 objectForKey:@"mmcs-url"]);
    uint64_t v6 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@://%@",  -[NSURL scheme](v5, "scheme"),  -[NSURL host](v5, "host"));
  }

  else
  {
    if (IMOSLoggingEnabled(0LL, v4))
    {
      id v7 = (os_log_s *)OSLogHandleForIMFoundationCategory("Warning");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_INFO,  "AttachmentRefreshUtilConfigureStickerToken dictionary has not auth url",  buf,  2u);
      }
    }

    uint64_t v6 = 0LL;
  }

  [a1 setAuthURL:v6];
  objc_msgSend(a1, "setOwner:", objc_msgSend(a2, "objectForKey:", @"mmcs-owner"));
  objc_msgSend(a1, "setFileLength:", objc_msgSend(a2, "objectForKey:", @"file-size"));
  id v8 = objc_msgSend( a1,  "setSignature:",  objc_msgSend(objc_msgSend(a2, "objectForKey:", @"mmcs-signature-hex"), "_FTDataFromHexString"));
  return objc_msgSend(a1, "setRequestContentHeaders:", AttachmentRefreshUtilGetMMCSRefreshHeaders((uint64_t)v8, v9));
}

void sub_81970(id a1)
{
  qword_E32F8 = (uint64_t)@"com.apple.Messenger/1.0";
}

id PeopleSetByAddingMyID(void *a1, void *a2)
{
  if (![a1 length] || !objc_msgSend(a2, "count")) {
    return a2;
  }
  if ([a2 count]) {
    uint64_t v4 = -[NSMutableSet initWithArray:](objc_alloc(&OBJC_CLASS___NSMutableSet), "initWithArray:", a2);
  }
  else {
    uint64_t v4 = 0LL;
  }
  -[NSMutableSet addObject:](v4, "addObject:", a1);
  id v6 = -[NSMutableSet allObjects](v4, "allObjects");

  return v6;
}

id URIsFromHandles(void *a1)
{
  return objc_msgSend(objc_msgSend(a1, "arrayByApplyingSelector:", "ID"), "_URIsFromIDs");
}

id _LastAddressedURIForChatLogMetricIfNeeded(void *a1, id a2, void *a3, void *a4, int a5)
{
  if ([a3 isReplicating])
  {
    id v8 = objc_msgSend(objc_msgSend(a3, "mainSession"), "outgoingReplicationCallerIDForChat:", a1);
    id v9 = objc_msgSend(objc_msgSend((id)IMChatCanonicalIDSIDsForAddress(), "_stripFZIDPrefix"), "_bestGuessURI");
    id v10 = objc_msgSend(a3, "idsAccountForFromURI:toURI:", v9, objc_msgSend(a1, "chatIdentifier"));
    id v11 = [v10 _validateIDSAccount];
    if ((_DWORD)v11)
    {
      if (a4) {
        *a4 = v10;
      }
      if (IMOSLoggingEnabled(v11, v12))
      {
        uint64_t v13 = (os_log_s *)OSLogHandleForIMFoundationCategory("CallerID");
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138413058;
          id v94 = v9;
          __int16 v95 = 2112;
          id v96 = v8;
          __int16 v97 = 2112;
          id v98 = [v10 uniqueID];
          __int16 v99 = 2112;
          id v100 = objc_msgSend(v10, "im_registeredURIs");
          int v14 = "Using caller URI %@ to replicate caller ID %@ idsAccount %@, idsAccount im_registeredURIs: %@";
          id v15 = v13;
          uint32_t v16 = 42;
LABEL_43:
          _os_log_impl(&dword_0, v15, OS_LOG_TYPE_INFO, v14, buf, v16);
          return v9;
        }
      }

      return v9;
    }

    if (IMOSLoggingEnabled(v11, v12))
    {
      id v23 = (os_log_s *)OSLogHandleForIMFoundationCategory("Warning");
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v94 = v8;
        _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_INFO,  "Did not find valid IDS Account for replication caller ID %@",  buf,  0xCu);
      }
    }

    return 0LL;
  }

  id v17 = objc_msgSend(a3, "messageServiceTypeForURI:", objc_msgSend(a1, "chatIdentifier"));
  if (!a2) {
    a2 = [a1 lastAddressedLocalHandle];
  }
  id v18 = [(id)objc_opt_class(a3) idsAccounts];
  if (![a2 length])
  {
    id v9 = [a3 callerURIForMessageServiceType:v17];
    id v25 = (os_log_s *)OSLogHandleForIMFoundationCategory("CallerID");
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_INFO)) {
      goto LABEL_35;
    }
    *(_DWORD *)buf = 138412290;
    id v94 = v9;
    uint64_t v26 = "lastAddressedLocalHandle was nil, falling back to [session callerURI] %@";
LABEL_33:
    _os_log_impl(&dword_0, v25, OS_LOG_TYPE_INFO, v26, buf, 0xCu);
    goto LABEL_35;
  }

  if (![a2 isEqualToIgnoringCase:kFZServiceDefaultsSentinelAlias])
  {
    id v9 = [a2 _bestGuessURI];
    id v25 = (os_log_s *)OSLogHandleForIMFoundationCategory("CallerID");
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_INFO)) {
      goto LABEL_35;
    }
    *(_DWORD *)buf = 138412290;
    id v94 = v9;
    uint64_t v26 = "lastAddressedLocalHandle is %@";
    goto LABEL_33;
  }

  __int128 v87 = 0u;
  __int128 v88 = 0u;
  __int128 v85 = 0u;
  __int128 v86 = 0u;
  id v19 = [v18 countByEnumeratingWithState:&v85 objects:v92 count:16];
  if (v19)
  {
    uint64_t v20 = *(void *)v86;
LABEL_14:
    uint64_t v21 = 0LL;
    while (1)
    {
      if (*(void *)v86 != v20) {
        objc_enumerationMutation(v18);
      }
      __int128 v22 = *(void **)(*((void *)&v85 + 1) + 8 * v21);
      if (v19 == (id)++v21)
      {
        id v19 = [v18 countByEnumeratingWithState:&v85 objects:v92 count:16];
        id v9 = 0LL;
        if (v19) {
          goto LABEL_14;
        }
        goto LABEL_35;
      }
    }

    id v9 = [a3 callerURIForIDSAccount:v22];
    if (IMOSLoggingEnabled(v9, v28))
    {
      id v25 = (os_log_s *)OSLogHandleForIMFoundationCategory("CallerID");
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v94 = v9;
        uint64_t v26 = "lastAddressedLocalHandle was sentinel alias, falling back to [session callerURI] %@";
        goto LABEL_33;
      }
    }
  }

  else
  {
    id v9 = 0LL;
  }

void *IMDAccountForIDSAccount(id a1, void *a2, void *a3)
{
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v6 = [a2 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v14;
    while (2)
    {
      id v9 = 0LL;
      do
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(a2);
        }
        id v10 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)v9);
        uint64_t v11 = objc_opt_class(&OBJC_CLASS___IMDIDSAccount);
        if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0 && [v10 idsAccount] == a1)
        {
          IMDInconsistencyResolved(a3);
          return v10;
        }

        id v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [a2 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }

  if ([a3 isActive]) {
    IMDNoticedInconsistency( a3,  @"********** We couldn't find an IMDAccount for the IDSAccount, please file a radar ********** State: service session = %@, IDSAccount = %@, accounts = %@");
  }
  return 0LL;
}

void sub_829D0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v10 = a2;
  if (IMOSLoggingEnabled(v10, v11))
  {
    uint64_t v12 = (os_log_s *)OSLogHandleForIMEventCategory("AttachmentRefreshDelivery");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      int v33 = 138412290;
      v34[0] = v10;
      _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "    Delivered FTMessage: %@", (uint8_t *)&v33, 0xCu);
    }
  }

  uint64_t v13 = _FZErrorTypeFromResponseCodeAndError(a4, a3);
  uint64_t v15 = v13;
  if (a3) {
    BOOL v16 = 0;
  }
  else {
    BOOL v16 = (_DWORD)v13 == 0;
  }
  uint64_t v17 = v16;
  uint64_t v18 = IMOSLoggingEnabled(v13, v14);
  if ((_DWORD)v18)
  {
    uint64_t v20 = (os_log_s *)OSLogHandleForIMFoundationCategory("AttachmentRefreshDelivery");
    uint64_t v18 = os_log_type_enabled(v20, OS_LOG_TYPE_INFO);
    if ((_DWORD)v18)
    {
      int v33 = 67109376;
      LODWORD(v34[0]) = a4;
      WORD2(v34[0]) = 1024;
      *(_DWORD *)((char *)v34 + 6) = v15;
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_INFO, "    Result code: %d, errorType = %d", (uint8_t *)&v33, 0xEu);
    }
  }

  uint64_t v21 = IMOSLoggingEnabled(v18, v19);
  if ((_DWORD)v21)
  {
    id v23 = (os_log_s *)OSLogHandleForIMFoundationCategory("AttachmentRefreshDelivery");
    uint64_t v21 = os_log_type_enabled(v23, OS_LOG_TYPE_INFO);
    if ((_DWORD)v21)
    {
      int v33 = 138412290;
      v34[0] = a5;
      _os_log_impl(&dword_0, v23, OS_LOG_TYPE_INFO, "    Result dictionary: %@", (uint8_t *)&v33, 0xCu);
    }
  }

  uint64_t v24 = IMOSLoggingEnabled(v21, v22);
  if ((_DWORD)v24)
  {
    uint64_t v26 = (os_log_s *)OSLogHandleForIMFoundationCategory("AttachmentRefreshDelivery");
    uint64_t v24 = os_log_type_enabled(v26, OS_LOG_TYPE_INFO);
    if ((_DWORD)v24)
    {
      int v33 = 138412290;
      v34[0] = a3;
      _os_log_impl(&dword_0, v26, OS_LOG_TYPE_INFO, "    Error: %@", (uint8_t *)&v33, 0xCu);
    }
  }

  uint64_t v27 = IMOSLoggingEnabled(v24, v25);
  if ((_DWORD)v27)
  {
    id v29 = (os_log_s *)OSLogHandleForIMFoundationCategory("AttachmentRefreshDelivery");
    uint64_t v27 = os_log_type_enabled(v29, OS_LOG_TYPE_INFO);
    if ((_DWORD)v27)
    {
      id v30 = @"NO";
      if ((_DWORD)v17) {
        id v30 = @"YES";
      }
      int v33 = 138412290;
      v34[0] = v30;
      _os_log_impl(&dword_0, v29, OS_LOG_TYPE_INFO, "  Success: %@", (uint8_t *)&v33, 0xCu);
    }
  }

  if (IMOSLoggingEnabled(v27, v28))
  {
    uint64_t v31 = (os_log_s *)OSLogHandleForIMFoundationCategory("AttachmentRefreshDelivery");
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      LOWORD(v33) = 0;
      _os_log_impl(&dword_0, v31, OS_LOG_TYPE_INFO, "Sending callback for FTMessage send", (uint8_t *)&v33, 2u);
    }
  }

  uint64_t v32 = *(void *)(a1 + 32);
  if (v32) {
    (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(v32 + 16))(v32, a2, v17, v15);
  }
}

void sub_83104(uint64_t a1, void *a2, char a3)
{
  int v6 = IMOSLoggingEnabled(a1, a2);
  if ((a3 & 1) != 0)
  {
    if (v6)
    {
      id v7 = (os_log_s *)OSLogHandleForIMEventCategory("AttachmentRefreshDelivery");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id Weak = objc_loadWeak((id *)(a1 + 48));
        _os_log_impl(&dword_0, v7, OS_LOG_TYPE_INFO, "Got a successful reply for message %@", buf, 0xCu);
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    if (v6)
    {
      uint64_t v8 = (os_log_s *)OSLogHandleForIMFoundationCategory("Warning");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id Weak = a2;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_INFO,  "AttachmentRefreshDeliveryController failed to refresh sticker using message %@",  buf,  0xCu);
      }
    }

    uint64_t v9 = *(void *)(a1 + 56);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_83308;
    v11[3] = &unk_D7DD8;
    v11[4] = *(void *)(a1 + 32);
    objc_copyWeak(v12, (id *)(a1 + 48));
    uint64_t v10 = *(void *)(a1 + 40);
    v12[1] = *(id *)(a1 + 56);
    void v11[5] = v10;
    im_dispatch_after(v11, (double)(unint64_t)(v9 + 3));
    objc_destroyWeak(v12);
  }

id sub_83308(uint64_t a1)
{
  return [*(id *)(a1 + 32) sendFTMessage:objc_loadWeak((id *)(a1 + 48)) attempts:*(void *)(a1 + 56) + 1 withCompletionBlock:*(void *)(a1 + 40)];
}

id sub_83364(void *a1)
{
  id v3 = (char *)objc_allocWithZone(v1);
  uint64_t v4 = swift_unknownObjectWeakInit( &v3[OBJC_IVAR____TtC8iMessage34MessageServiceReachabilityDelegate_messageServiceSession],  0LL);
  swift_unknownObjectWeakAssign(v4, a1);
  v7.receiver = v3;
  v7.super_class = v1;
  id v5 = objc_msgSendSuper2(&v7, "initWithServiceSession:", a1);

  return v5;
}

uint64_t type metadata accessor for MessageServiceReachabilityDelegate()
{
  return objc_opt_self(&OBJC_CLASS____TtC8iMessage34MessageServiceReachabilityDelegate);
}

void sub_833FC()
{
  id v1 = [v0 serviceSession];
  if (!v1) {
    return;
  }
  id v2 = v1;
  id v3 = [(id)objc_opt_self(IMDAccountController) sharedAccountController];
  if (!v3)
  {
    __break(1u);
    goto LABEL_30;
  }

  uint64_t v4 = v3;
  id v5 = [v2 service];
  id v6 = [v4 accountsForService:v5];

  if (!v6)
  {
LABEL_30:
    __break(1u);
    return;
  }

  uint64_t v7 = sub_8448C(0LL, &qword_E2F58, &OBJC_CLASS___IMDAccount_ptr);
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  uint64_t v9 = *(void *)((char *)&dword_10 + (v8 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(v8);
  for (; v9; uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v23))
  {
    unint64_t v10 = 0LL;
    if ((v8 & 0xC000000000000001LL) != 0)
    {
LABEL_7:
      id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v8);
      goto LABEL_11;
    }

    while ((v10 & 0x8000000000000000LL) == 0)
    {
      id v11 = *(id *)(v8 + 8 * v10 + 32);
LABEL_11:
      uint64_t v12 = v11;
      unint64_t v13 = v10 + 1;
      if (__OFADD__(v10, 1LL))
      {
        __break(1u);
        break;
      }

      uint64_t v14 = objc_opt_self(&OBJC_CLASS___IMDIDSAccount);
      uint64_t v15 = (void *)swift_dynamicCastObjCClass(v12, v14);
      if (v15
        && (BOOL v16 = v15, (v17 = [v15 idsAccount]) != 0)
        && (uint64_t v18 = v17, v19 = [v17 canSend], v18, (v19 & 1) != 0))
      {
        id v20 = v12;
        id v21 = [v16 aliases];
        uint64_t v22 = (char *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, &type metadata for String);

        sub_84054(v22);
        if (v13 == v9) {
          goto LABEL_27;
        }
      }

      else
      {

        if (v13 == v9) {
          goto LABEL_27;
        }
      }

      ++v10;
      if ((v8 & 0xC000000000000001LL) != 0) {
        goto LABEL_7;
      }
    }

    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    if (v8 < 0) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v8 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v8);
  }

void sub_83690( uint64_t a1, uint64_t a2, NSString a3, uint64_t a4, NSString a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15 = sub_837F8(a1);
  v16.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v15);
  if (a3) {
    a3 = String._bridgeToObjectiveC()();
  }
  if (a5) {
    a5 = String._bridgeToObjectiveC()();
  }
  id v17 = (void *)objc_opt_self(&OBJC_CLASS___IMIDSIDQueryController);
  NSString v18 = String._bridgeToObjectiveC()();
  aBlock[4] = a11;
  uint64_t v23 = a12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_8391C;
  aBlock[3] = &unk_D7E20;
  unsigned __int8 v19 = _Block_copy(aBlock);
  uint64_t v20 = v23;
  swift_retain(a12);
  swift_release(v20);
  [v17 idInfoForDestinations:v16.super.isa service:a3 fromID:a5 infoTypes:a6 options:a7 listenerID:v18 queue:a10 completionBlock:v19];
  _Block_release(v19);
}

void *sub_837F8(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  id v2 = &_swiftEmptyArrayStorage;
  if (v1)
  {
    id v11 = &_swiftEmptyArrayStorage;
    sub_8423C(0LL, v1, 0);
    id v2 = &_swiftEmptyArrayStorage;
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *v4;
      v9[0] = *(v4 - 1);
      v9[1] = v5;
      swift_bridgeObjectRetain(v5);
      swift_dynamicCast(v10, v9, &type metadata for String, (char *)&type metadata for Any + 8, 7LL);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_8423C(0LL, v2[2] + 1LL, 1);
        id v2 = v11;
      }

      unint64_t v7 = v2[2];
      unint64_t v6 = v2[3];
      if (v7 >= v6 >> 1)
      {
        sub_8423C((char *)(v6 > 1), v7 + 1, 1);
        id v2 = v11;
      }

      v4 += 2;
      v2[2] = v7 + 1;
      sub_84534(v10, &v2[4 * v7 + 4]);
      --v1;
    }

    while (v1);
  }

  return v2;
}

uint64_t sub_8391C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  if (a2) {
    uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a2,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  }
  else {
    uint64_t v6 = 0LL;
  }
  swift_retain(v4);
  id v7 = a3;
  v5(v6, a3);
  swift_release(v4);

  return swift_bridgeObjectRelease(v6);
}

void sub_83A80(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v2 = a1;
    }
    else {
      uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = __CocoaSet.makeIterator()(v2);
    uint64_t v4 = sub_8448C(0LL, &qword_E2F68, &OBJC_CLASS___IDSAccount_ptr);
    unint64_t v5 = sub_844C4();
    uint64_t v6 = Set.Iterator.init(_cocoa:)(v38, v3, v4, v5);
    uint64_t v1 = v38[0];
    uint64_t v35 = v38[1];
    uint64_t v7 = v38[2];
    uint64_t v8 = v38[3];
    unint64_t v9 = v38[4];
  }

  else
  {
    uint64_t v10 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v35 = a1 + 56;
    uint64_t v7 = ~v10;
    uint64_t v11 = -v10;
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v9 = v12 & *(void *)(a1 + 56);
    uint64_t v6 = (void *)swift_bridgeObjectRetain(a1);
    uint64_t v8 = 0LL;
  }

  int64_t v34 = (unint64_t)(v7 + 64) >> 6;
  uint64_t v36 = IDSServiceNameiMessage;
  while (1)
  {
    uint64_t v13 = v8;
    if (v1 < 0)
    {
      uint64_t v16 = __CocoaSet.Iterator.next()(v6);
      uint64_t v17 = v16;
      if (!v16) {
        goto LABEL_48;
      }
      uint64_t v37 = v16;
      uint64_t v18 = sub_8448C(0LL, &qword_E2F68, &OBJC_CLASS___IDSAccount_ptr);
      swift_unknownObjectRetain(v17);
      swift_dynamicCast(&v39, &v37, (char *)&type metadata for Swift.AnyObject + 8, v18, 7LL);
      id v19 = v39;
      swift_unknownObjectRelease(v17);
      if (!v19) {
        goto LABEL_48;
      }
      goto LABEL_35;
    }

    if (!v9) {
      break;
    }
    unint64_t v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v15 = v14 | (v8 << 6);
LABEL_34:
    id v19 = *(id *)(*(void *)(v1 + 48) + 8 * v15);
    if (!v19) {
      goto LABEL_48;
    }
LABEL_35:
    if ([v19 canSend])
    {
      id v23 = [v19 serviceName];
      if (!v23)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
        uint64_t v31 = v33;
        goto LABEL_44;
      }

      uint64_t v24 = v23;
      uint64_t v25 = v1;
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      uint64_t v28 = v27;

      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      uint64_t v31 = v30;
      if (v28)
      {
        if (v26 == v29 && v28 == v30)
        {

          swift_bridgeObjectRelease_n(v28, 2LL);
          uint64_t v1 = v25;
LABEL_48:
          sub_8452C(v1);
          return;
        }

        char v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v28, v29, v30, 0LL);

        swift_bridgeObjectRelease(v28);
        uint64_t v6 = (void *)swift_bridgeObjectRelease(v31);
        uint64_t v1 = v25;
        if ((v32 & 1) != 0) {
          goto LABEL_48;
        }
      }

      else
      {
        uint64_t v1 = v25;
LABEL_44:

        uint64_t v6 = (void *)swift_bridgeObjectRelease(v31);
      }
    }

    else
    {
    }
  }

  int64_t v20 = v8 + 1;
  if (!__OFADD__(v8, 1LL))
  {
    if (v20 >= v34) {
      goto LABEL_48;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v8;
    if (!v21)
    {
      uint64_t v8 = v13 + 2;
      if (v13 + 2 >= v34) {
        goto LABEL_48;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v8);
      if (!v21)
      {
        uint64_t v8 = v13 + 3;
        if (v13 + 3 >= v34) {
          goto LABEL_48;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v8);
        if (!v21)
        {
          uint64_t v8 = v13 + 4;
          if (v13 + 4 >= v34) {
            goto LABEL_48;
          }
          unint64_t v21 = *(void *)(v35 + 8 * v8);
          if (!v21)
          {
            uint64_t v8 = v13 + 5;
            if (v13 + 5 >= v34) {
              goto LABEL_48;
            }
            unint64_t v21 = *(void *)(v35 + 8 * v8);
            if (!v21)
            {
              uint64_t v22 = v13 + 6;
              while (v34 != v22)
              {
                unint64_t v21 = *(void *)(v35 + 8 * v22++);
                if (v21)
                {
                  uint64_t v8 = v22 - 1;
                  goto LABEL_33;
                }
              }

              goto LABEL_48;
            }
          }
        }
      }
    }

uint64_t sub_83E50()
{
  return 1LL;
}

uint64_t sub_83E58()
{
  return 0LL;
}

uint64_t sub_83E64()
{
  return sub_8451C(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 0LL);
}

id sub_83ED0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MessageServiceReachabilityDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_83F10()
{
  return (*(uint64_t (**)(void))&stru_68.segname[swift_isaMask & *v0])();
}

uint64_t sub_83F2C()
{
  return (*(uint64_t (**)(void))&stru_68.segname[(swift_isaMask & *v0) + 8])();
}

uint64_t sub_83F58()
{
  return (*(uint64_t (**)(void))&stru_68.segname[(swift_isaMask & *v0) + 16])();
}

uint64_t sub_83F74(uint64_t a1)
{
  uint64_t v4 = *(int **)((char *)&stru_68.offset + (swift_isaMask & *v1));
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  unint64_t v5 = (void *)swift_task_alloc(v4[1]);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_83FE8;
  return v7(a1);
}

uint64_t sub_83FE8(uint64_t a1)
{
  uint64_t v6 = *v1;
  uint64_t v3 = *(void *)(v6 + 16);
  uint64_t v4 = *v1;
  uint64_t v6 = v4;
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_84038()
{
  return (*(uint64_t (**)(void))((char *)&stru_68.size + (swift_isaMask & *v0)))();
}

char *sub_84054(char *result)
{
  uint64_t v2 = *((void *)result + 2);
  uint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v6 = result;
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= *((void *)v3 + 3) >> 1)
  {
    if (*((void *)v6 + 2)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

  if (v4 <= v5) {
    int64_t v11 = v4 + v2;
  }
  else {
    int64_t v11 = v4;
  }
  uint64_t result = sub_8413C(result, v11, 1, v3);
  uint64_t v3 = result;
  if (!*((void *)v6 + 2))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

LABEL_5:
  uint64_t v7 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t result = (char *)swift_arrayInitWithCopy(&v3[16 * v7 + 32], v6 + 32, v2, &type metadata for String);
  if (!v2)
  {
LABEL_14:
    uint64_t result = (char *)swift_bridgeObjectRelease(v6);
    *uint64_t v1 = v3;
    return result;
  }

  uint64_t v8 = *((void *)v3 + 2);
  BOOL v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    *((void *)v3 + 2) = v10;
    goto LABEL_14;
  }

    if (qword_E3090 != -1) {
      swift_once(&qword_E3090, sub_848F8);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    sub_8BE9C(v24, (uint64_t)qword_E3098);
    swift_bridgeObjectRetain_n(a5, 2LL);
    uint64_t v25 = swift_bridgeObjectRetain_n(a3, 2LL);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    uint64_t v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc(22LL, -1LL);
      uint64_t v54 = v22;
      uint64_t v29 = swift_slowAlloc(64LL, -1LL);
      id v59 = v29;
      *(_DWORD *)uint64_t v28 = 136446466;
      swift_bridgeObjectRetain(a3);
      uint64_t v58 = sub_8B85C(a2, a3, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v28 + 4, v28 + 12);
      swift_bridgeObjectRelease_n(a3, 3LL);
      *(_WORD *)(v28 + 12) = 2080;
      swift_bridgeObjectRetain(a5);
      uint64_t v58 = sub_8B85C(a4, a5, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v28 + 14, v28 + 22);
      swift_bridgeObjectRelease_n(a5, 3LL);
      _os_log_impl(&dword_0, v26, v27, "%{public}s Destination is unknown: %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy(v29, 2LL, (char *)&type metadata for Any + 8);
      uint64_t v30 = v29;
      uint64_t v22 = v54;
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a5, 2LL);
      swift_bridgeObjectRelease_n(a3, 2LL);
    }

    uint64_t v31 = [a6 lastUsedServiceName];
    if (v31)
    {
      char v32 = v31;
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      uint64_t v35 = v34;

      uint64_t v36 = [v55 internalServiceName];
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      char v39 = v38;

      if (v33 == v37 && v35 == v39)
      {
        swift_bridgeObjectRelease_n(v35, 2LL);
LABEL_21:
        *a8 = 1;
        goto LABEL_24;
      }

      id v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v37, v39, 0LL);
      swift_bridgeObjectRelease(v39);
      swift_bridgeObjectRelease(v35);
      if ((v46 & 1) != 0) {
        goto LABEL_21;
      }
    }

    [a7 setAllAreReachable:0];
    goto LABEL_21;
  }

  if (qword_E3090 != -1) {
    swift_once(&qword_E3090, sub_848F8);
  }
  uint64_t v40 = type metadata accessor for Logger(0LL);
  sub_8BE9C(v40, (uint64_t)qword_E3098);
  swift_bridgeObjectRetain_n(a5, 2LL);
  id v41 = swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
  id v43 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = swift_slowAlloc(22LL, -1LL);
    uint64_t v45 = swift_slowAlloc(64LL, -1LL);
    id v59 = v45;
    *(_DWORD *)uint64_t v44 = 136446466;
    swift_bridgeObjectRetain(a3);
    uint64_t v58 = sub_8B85C(a2, a3, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v44 + 4, v44 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    *(_WORD *)(v44 + 12) = 2080;
    swift_bridgeObjectRetain(a5);
    uint64_t v58 = sub_8B85C(a4, a5, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v44 + 14, v44 + 22);
    swift_bridgeObjectRelease_n(a5, 3LL);
    _os_log_impl(&dword_0, v42, v43, "%{public}s Destination is invalid: %s", (uint8_t *)v44, 0x16u);
    swift_arrayDestroy(v45, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1LL, -1LL);
    swift_slowDealloc(v44, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a5, 2LL);
    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  [a7 setAllAreReachable:0];
LABEL_24:
  swift_bridgeObjectRetain(a5);
  id v47 = v22;
  uint64_t v48 = [a7 handleResults];
  uint64_t v49 = sub_8448C(0LL, &qword_E3290, &OBJC_CLASS___IMServiceReachabilityHandleResult_ptr);
  uint64_t v50 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v48,  &type metadata for String,  v49,  &protocol witness table for String);

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v50);
  id v59 = v50;
  sub_8DFDC((uint64_t)v47, a4, a5, isUniquelyReferenced_nonNull_native);
  uint64_t v52 = v59;
  swift_bridgeObjectRelease(a5);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v52);
  [a7 setHandleResults:isa];
}

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    int64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    unint64_t v21 = *v20;
    uint64_t v22 = (-1LL << v3) - 1;
  }

  else
  {
    int64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    unint64_t v21 = (-1LL << result) - 1;
  }

  *int64_t v20 = v22 & v21;
  id v23 = *(void *)(a2 + 16);
  uint64_t v24 = __OFSUB__(v23, 1LL);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

char *sub_8413C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_84544(&qword_E3080);
    int64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    int64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for String);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_8423C(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_84258(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_84258(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_84544(&qword_E3070);
    int64_t v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }

  else
  {
    int64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8]) {
      memmove(v14, v15, 32 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, (char *)&type metadata for Any + 8);
  }

  swift_release(a4);
  return v11;
}

uint64_t sub_84474(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_84484(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_8448C(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

unint64_t sub_844C4()
{
  unint64_t result = qword_E2F70;
  if (!qword_E2F70)
  {
    uint64_t v1 = sub_8448C(255LL, &qword_E2F68, &OBJC_CLASS___IDSAccount_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_E2F70);
  }

  return result;
}

uint64_t sub_8451C(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_8452C(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

_OWORD *sub_84534(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_84544(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_84588(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_84544(&qword_E3078);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_845D0(uint64_t a1)
{
  uint64_t v2 = sub_84544(&qword_E3078);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

id MessageServiceSession.calculateReachability(with:responseHandler:)(void *a1, uint64_t a2)
{
  id result = [(id)objc_opt_self(IMDAccountController) sharedAccountController];
  if (result)
  {
    unint64_t v6 = result;
    NSString v7 = [a1 accountID];
    if (!v7)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v9 = v8;
      NSString v7 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v9);
    }

    id v10 = [v6 accountForAccountID:v7];

    if (v10)
    {
      id v11 = [v10 loginID];
      if (v11)
      {
        int64_t v12 = v11;
        uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
        uint64_t v15 = v14;

        goto LABEL_9;
      }
    }

    uint64_t v13 = 0LL;
    uint64_t v15 = 0LL;
LABEL_9:
    swift_beginAccess(&unk_E3088, v23, 32LL, 0LL);
    id v16 = objc_getAssociatedObject(v2, &unk_E3088);
    swift_endAccess(v23);
    if (v16)
    {
      _bridgeAnyObjectToAny(_:)(v23, v16);
      swift_unknownObjectRelease(v16);
    }

    else
    {
      memset(v23, 0, sizeof(v23));
    }

    sub_84588((uint64_t)v23, (uint64_t)v24);
    if (v25)
    {
      uint64_t v17 = type metadata accessor for MessageReachabilityController();
      if ((swift_dynamicCast(&v22, v24, (char *)&type metadata for Any + 8, v17, 6LL) & 1) != 0)
      {
        uint64_t v18 = v22;
LABEL_17:
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*v18 + 152LL))(a1, a2, v13, v15);
        swift_release(v18);
        return (id)swift_bridgeObjectRelease(v15);
      }
    }

    else
    {
      sub_845D0((uint64_t)v24);
    }

    type metadata accessor for MessageServiceReachabilityDelegate();
    id v19 = v2;
    id v20 = sub_83364(v19);
    uint64_t v21 = type metadata accessor for MessageReachabilityController();
    uint64_t v18 = (void *)swift_allocObject(v21, 32LL, 7LL);
    v18[2] = v20;
    void v18[3] = &off_D7E48;
    swift_beginAccess(&unk_E3088, v24, 32LL, 0LL);
    swift_retain(v18);
    objc_setAssociatedObject(v19, &unk_E3088, v18, (char *)&dword_0 + 1);
    swift_endAccess(v24);
    swift_release(v18);
    goto LABEL_17;
  }

  __break(1u);
  return result;
}

uint64_t sub_848F8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_8F374(v0, qword_E3098);
  sub_8BE9C(v0, (uint64_t)qword_E3098);
  return Logger.init(subsystem:category:)( 0xD000000000000012LL,  0x80000000000AB570LL,  0xD00000000000001CLL,  0x80000000000AB590LL);
}

uint64_t MessageReachabilityController.delegate.getter()
{
  return swift_unknownObjectRetain(*(void *)(v0 + 16));
}

uint64_t MessageReachabilityController.__allocating_init(delegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_allocObject(v2, 32LL, 7LL);
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t MessageReachabilityController.init(delegate:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

uint64_t sub_849E0(uint64_t a1, uint64_t a2)
{
  NSString v5 = String._bridgeToObjectiveC()();
  int IsPhoneNumber = IMStringIsPhoneNumber(v5);

  if (IsPhoneNumber
    && (NSString v7 = String._bridgeToObjectiveC()(),
        id v8 = (id)IMCanonicalizeFormattedString(v7, 3LL),
        v7,
        v8))
  {
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v11 = v10;
  }

  else
  {
    uint64_t v9 = 0LL;
    uint64_t v11 = 0LL;
  }

  uint64_t v12 = *(void *)(v2 + 24);
  uint64_t ObjectType = swift_getObjectType(*(void *)(v2 + 16));
  uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(ObjectType, v12);
  if ((sub_84B08(a1, a2, v14) & 1) != 0)
  {
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v11);
    return 1LL;
  }

  if (v11)
  {
    char v16 = sub_84B08(v9, v11, v14);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v11);
    if ((v16 & 1) != 0) {
      return 1LL;
    }
  }

  else
  {
    swift_bridgeObjectRelease(v14);
  }

  return 0LL;
}

uint64_t sub_84B08(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0LL;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1LL;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) != 0) {
    return 1LL;
  }
  if (v3 == 1) {
    return 0LL;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1LL; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1LL)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1LL;
    }
    uint64_t result = 0LL;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_84BCC(uint64_t a1, uint64_t a2)
{
  NSString v5 = String._bridgeToObjectiveC()();
  int IsPhoneNumber = IMStringIsPhoneNumber(v5);

  if (!IsPhoneNumber) {
    return 0LL;
  }
  NSString v7 = String._bridgeToObjectiveC()();
  uint64_t v9 = *(void **)(v2 + 16);
  uint64_t v8 = *(void *)(v2 + 24);
  uint64_t ObjectType = swift_getObjectType(v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 40))(a1, a2, ObjectType, v8);
  if (v11)
  {
    uint64_t v12 = v11;
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v12);
  }

  else
  {
    NSString v13 = 0LL;
  }

  id v15 = (id)IMInternationalForPhoneNumberWithOptions(v7, v13, 0LL);

  if (v15)
  {
    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    a2 = v16;
  }

  else
  {
    swift_bridgeObjectRetain(a2);
  }

  id v17 = [v9 phoneNumbersOfActiveSubscriptions];
  uint64_t v18 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, &type metadata for String);

  LOBYTE(v17) = sub_84B08(a1, a2, v18);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(a2);
  return v17 & 1;
}

uint64_t sub_84D14(void *a1)
{
  id v3 = [a1 context];
  id v4 = [v3 senderLastAddressedHandle];

  if (v4)
  {
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v7 = v6;

    char v8 = sub_84BCC(v5, v7);
    swift_bridgeObjectRelease(v7);
    if ((v8 & 1) != 0) {
      return 1LL;
    }
  }

  id v9 = [a1 context];
  id v10 = [v9 senderLastAddressedSIMID];

  if (!v10) {
    return 0LL;
  }
  id v11 = [*(id *)(v1 + 16) phoneNumberOnSubscriptionWithSIMID:v10];

  if (v11
    && (uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11),
        uint64_t v14 = v13,
        v11,
        LOBYTE(v12) = sub_84BCC(v12, v14),
        swift_bridgeObjectRelease(v14),
        (v12 & 1) != 0))
  {
    return 1LL;
  }

  else
  {
    return 0LL;
  }

uint64_t sub_84E44()
{
  uint64_t v0 = sub_84544(&qword_E3080);
  uint64_t inited = swift_initStackObject(v0, &v6);
  *(_OWORD *)(inited + 16) = xmmword_9E290;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(IMServiceNameiMessage);
  *(void *)(inited + 40) = v2;
  *(void *)(inited + 4_Block_object_dispose(va, 8) = static String._unconditionallyBridgeFromObjectiveC(_:)(IMServiceNameiMessageLite);
  *(void *)(inited + 56) = v3;
  Swift::Int v4 = sub_8E6B0(inited);
  swift_setDeallocating(inited);
  uint64_t result = swift_arrayDestroy(inited + 32, 2LL, &type metadata for String);
  qword_E30B8 = v4;
  return result;
}

uint64_t sub_84EF0(void *a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  id v4 = [v3 idsRegisteredSIMIDs];
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, &type metadata for String);

  uint64_t v6 = *(void *)(v5 + 16);
  swift_bridgeObjectRelease(v5);
  id v7 = [a1 context];
  id v8 = [v7 serviceOfLastMessage];

  if (v8)
  {
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    unint64_t v11 = v10;

    if (qword_E30B0 != -1) {
      swift_once(&qword_E30B0, sub_84E44);
    }
    if ((sub_85560(v9, v11, qword_E30B8) & 1) != 0)
    {
      if (qword_E3090 != -1) {
        swift_once(&qword_E3090, sub_848F8);
      }
      uint64_t v12 = type metadata accessor for Logger(0LL);
      sub_8BE9C(v12, (uint64_t)qword_E3098);
      id v13 = a1;
      uint64_t v14 = swift_bridgeObjectRetain(v11);
      id v15 = (os_log_s *)Logger.logObject.getter(v14);
      os_log_type_t v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = swift_slowAlloc(22LL, -1LL);
        uint64_t v18 = swift_slowAlloc(64LL, -1LL);
        uint64_t v48 = v18;
        *(_DWORD *)uint64_t v17 = 136315394;
        id v19 = [v13 requestID];
        uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        uint64_t v46 = v9;
        unint64_t v22 = v21;

        uint64_t v47 = sub_8B85C(v20, v22, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v17 + 4, v17 + 12);

        swift_bridgeObjectRelease(v22);
        *(_WORD *)(v17 + 12) = 2080;
        swift_bridgeObjectRetain(v11);
        uint64_t v47 = sub_8B85C(v46, v11, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v17 + 14, v17 + 22);
        swift_bridgeObjectRelease_n(v11, 3LL);
        _os_log_impl( &dword_0,  v15,  v16,  "No phone numbers registered - iMessage is eligible for request %s because last used service is %s",  (uint8_t *)v17,  0x16u);
        swift_arrayDestroy(v18, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v18, -1LL, -1LL);
        swift_slowDealloc(v17, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v11, 2LL);
      }

      return 1LL;
    }

    if (qword_E3090 != -1) {
      swift_once(&qword_E3090, sub_848F8);
    }
    uint64_t v34 = type metadata accessor for Logger(0LL);
    sub_8BE9C(v34, (uint64_t)qword_E3098);
    id v35 = a1;
    uint64_t v36 = swift_bridgeObjectRetain(v11);
    uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = swift_slowAlloc(22LL, -1LL);
      uint64_t v40 = swift_slowAlloc(64LL, -1LL);
      uint64_t v48 = v40;
      *(_DWORD *)uint64_t v39 = 136315394;
      id v41 = [v35 requestID];
      uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
      unint64_t v44 = v43;

      uint64_t v47 = sub_8B85C(v42, v44, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v39 + 4, v39 + 12);

      swift_bridgeObjectRelease(v44);
      *(_WORD *)(v39 + 12) = 2080;
      swift_bridgeObjectRetain(v11);
      uint64_t v47 = sub_8B85C(v9, v11, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v39 + 14, v39 + 22);
      swift_bridgeObjectRelease_n(v11, 3LL);
      _os_log_impl( &dword_0,  v37,  v38,  "No phone numbers registered - iMessage is ineligible for request %s because last used service is %s",  (uint8_t *)v39,  0x16u);
      swift_arrayDestroy(v40, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1LL, -1LL);
      swift_slowDealloc(v39, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v11, 2LL);
    }

    return 0LL;
  }

  if (qword_E3090 != -1) {
    swift_once(&qword_E3090, sub_848F8);
  }
  uint64_t v23 = type metadata accessor for Logger(0LL);
  sub_8BE9C(v23, (uint64_t)qword_E3098);
  id v24 = a1;
  uint64_t v25 = (void *)((uint64_t (*)(void))Logger.logObject.getter)();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled((os_log_t)v25, v26))
  {

    return 1LL;
  }

  uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v28 = swift_slowAlloc(32LL, -1LL);
  uint64_t v48 = v28;
  *(_DWORD *)uint64_t v27 = 136315138;
  id v29 = [v24 requestID];
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  unint64_t v32 = v31;

  uint64_t v47 = sub_8B85C(v30, v32, &v48);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v27 + 4, v27 + 12);

  swift_bridgeObjectRelease(v32);
  _os_log_impl( &dword_0,  (os_log_t)v25,  v26,  "No phone numbers registered - iMessage is eligible for request %s because this is a new chat",  v27,  0xCu);
  uint64_t v33 = 1LL;
  swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v28, -1LL, -1LL);
  swift_slowDealloc(v27, -1LL, -1LL);

  return v33;
}

uint64_t sub_85560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)(v18, *(void *)(a3 + 40));
    String.hash(into:)(v18, a1, a2);
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1LL << *(_BYTE *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if (((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      unint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1LL;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) != 0)
      {
        while (1)
        {
          os_log_type_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0LL;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) == 0) {
            return result;
          }
        }

        return 1LL;
      }
    }
  }

  return 0LL;
}

id sub_85694(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = ((uint64_t (*)(void))__chkstk_darwin)();
  unint64_t v8 = (char *)&v157 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  unint64_t v11 = (char *)&v157 - v10;
  __chkstk_darwin(v9);
  id v13 = (char *)&v157 - v12;
  id v169 = a1;
  id v14 = [a1 handleIDs];
  uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, &type metadata for String);

  uint64_t v16 = *(void *)(v15 + 16);
  if (!v16)
  {
LABEL_6:
    swift_bridgeObjectRelease(v15);
    return [*(id *)(v2 + 16) isUsableForSending];
  }

  uint64_t v167 = (uint64_t)v11;
  uint64_t v168 = (uint64_t)v8;
  BOOL v17 = (void *)v4;
  swift_bridgeObjectRetain(v15);
  uint64_t v18 = (void *)(v15 + 40);
  while (1)
  {
    uint64_t v19 = *v18;
    swift_bridgeObjectRetain(*v18);
    NSString v20 = String._bridgeToObjectiveC()();
    int IsBusinessID = IMStringIsBusinessID(v20);
    swift_bridgeObjectRelease(v19);

    if (!IsBusinessID) {
      break;
    }
    v18 += 2;
    if (!--v16)
    {
      swift_bridgeObjectRelease(v15);
      goto LABEL_6;
    }
  }

  swift_bridgeObjectRelease_n(v15, 2LL);
  uint64_t v25 = *(void **)(v2 + 16);
  os_log_type_t v26 = v169;
  if ((sub_84EF0(v169) & 1) != 0) {
    return &dword_0 + 1;
  }
  id v27 = [v26 context];
  id v28 = [v27 senderLastAddressedHandle];

  if (v28)
  {
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    uint64_t v31 = v30;
  }

  else
  {
    uint64_t v29 = 0LL;
    uint64_t v31 = 0LL;
  }

  id v32 = [v26 context];
  id v33 = [v32 senderLastAddressedSIMID];

  uint64_t v166 = v5;
  if (v33)
  {
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    unint64_t v36 = v35;

    BOOL v37 = v36 == 0;
    if (!v31 && v36)
    {
      swift_bridgeObjectRetain(v36);
      NSString v38 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v36);
      id v39 = [v25 phoneNumberOnSubscriptionWithSIMID:v38];

      if (!v39) {
        goto LABEL_25;
      }
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      uint64_t v31 = v40;

      BOOL v37 = 0;
    }
  }

  else
  {
    unint64_t v36 = 0LL;
    uint64_t v34 = 0LL;
    BOOL v37 = 1;
  }

  if (v31)
  {
    char v41 = sub_849E0(v29, v31);
    unsigned __int8 v173 = v41 & 1;
    unsigned int v42 = [v25 isUsableForSending];
    BOOL v165 = v37;
    uint64_t v164 = v34;
    if (((v42 | v37) & 1) != 0)
    {
      if ((v41 & 1) != 0) {
        goto LABEL_84;
      }
    }

    else
    {
      uint64_t v162 = v31;
      swift_bridgeObjectRetain(v36);
      id v53 = [v25 idsRegisteredSIMIDs];
      uint64_t v54 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v53, &type metadata for String);

      LOBYTE(v53) = sub_84B08(v34, v36, v54);
      swift_bridgeObjectRelease(v54);
      if ((v53 & 1) != 0)
      {
        swift_bridgeObjectRelease(v36);
        unsigned __int8 v173 = 1;
        uint64_t v31 = v162;
        goto LABEL_84;
      }

      if (qword_E3090 != -1) {
        swift_once(&qword_E3090, sub_848F8);
      }
      sub_8BE9C((uint64_t)v17, (uint64_t)qword_E3098);
      uint64_t v55 = v169;
      swift_bridgeObjectRetain(v36);
      id v56 = v55;
      uint64_t v57 = (os_log_s *)Logger.logObject.getter(v56);
      os_log_type_t v58 = static os_log_type_t.default.getter();
      int v59 = v58;
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v60 = swift_slowAlloc(22LL, -1LL);
        os_log_t v160 = v57;
        uint64_t v61 = v60;
        uint64_t v161 = swift_slowAlloc(64LL, -1LL);
        v170[0] = v161;
        *(_DWORD *)uint64_t v61 = 136446466;
        uint64_t v158 = v61 + 4;
        id v62 = [v56 requestID];
        int v159 = v59;
        id v63 = v62;
        uint64_t v157 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
        uint64_t v163 = v29;
        unint64_t v65 = v64;

        uint64_t v171 = sub_8B85C(v157, v65, v170);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172, v158, v61 + 12);

        unint64_t v66 = v65;
        uint64_t v29 = v163;
        swift_bridgeObjectRelease(v66);
        *(_WORD *)(v61 + 12) = 2080;
        swift_bridgeObjectRetain(v36);
        uint64_t v171 = sub_8B85C(v34, v36, v170);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172, v61 + 14, v61 + 22);
        swift_bridgeObjectRelease_n(v36, 3LL);
        os_log_t v67 = v160;
        _os_log_impl( &dword_0,  v160,  (os_log_type_t)v159,  "%{public}s SIMID %s not found in registered good list",  (uint8_t *)v61,  0x16u);
        uint64_t v68 = v161;
        swift_arrayDestroy(v161, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v68, -1LL, -1LL);
        swift_slowDealloc(v61, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v36, 2LL);
      }

      uint64_t v31 = v162;
      unsigned __int8 v173 = 0;
    }

    BOOL v69 = v169;
    if ((sub_84D14(v169) & 1) != 0)
    {
      uint64_t v70 = v166;
      if (qword_E3090 != -1) {
        swift_once(&qword_E3090, sub_848F8);
      }
      uint64_t v71 = sub_8BE9C((uint64_t)v17, (uint64_t)qword_E3098);
      (*(void (**)(char *, uint64_t, void *))(v70 + 16))(v13, v71, v17);
      swift_bridgeObjectRetain(v36);
      id v72 = v69;
      swift_bridgeObjectRetain(v31);
      id v73 = v72;
      __int128 v74 = (os_log_s *)Logger.logObject.getter(v73);
      os_log_type_t v75 = static os_log_type_t.default.getter();
      int v76 = v75;
      if (os_log_type_enabled(v74, v75))
      {
        uint64_t v77 = swift_slowAlloc(32LL, -1LL);
        id v169 = v17;
        uint64_t v163 = v29;
        uint64_t v78 = v77;
        uint64_t v168 = swift_slowAlloc(96LL, -1LL);
        v170[0] = v168;
        *(_DWORD *)uint64_t v78 = 136446722;
        id v79 = [v73 requestID];
        LODWORD(v167) = v76;
        unint64_t v80 = v31;
        id v81 = v79;
        uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
        unint64_t v84 = v83;

        uint64_t v171 = sub_8B85C(v82, v84, v170);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172, v78 + 4, v78 + 12);

        swift_bridgeObjectRelease(v84);
        *(_WORD *)(v78 + 12) = 2080;
        swift_bridgeObjectRetain(v80);
        uint64_t v171 = sub_8B85C(v163, v80, v170);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172, v78 + 14, v78 + 22);
        swift_bridgeObjectRelease_n(v80, 3LL);
        *(_WORD *)(v78 + 22) = 2080;
        if (v165) {
          uint64_t v85 = 0x3E6C696E3CLL;
        }
        else {
          uint64_t v85 = v164;
        }
        if (v165) {
          unint64_t v86 = 0xE500000000000000LL;
        }
        else {
          unint64_t v86 = v36;
        }
        swift_bridgeObjectRetain(v36);
        uint64_t v171 = sub_8B85C(v85, v86, v170);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172, v78 + 24, v78 + 32);
        swift_bridgeObjectRelease_n(v36, 2LL);
        swift_bridgeObjectRelease(v86);
        _os_log_impl( &dword_0,  v74,  (os_log_type_t)v167,  "%{public}s alias %s SIMID %s not registered but active in CT. deferring to other services",  (uint8_t *)v78,  0x20u);
        uint64_t v87 = v168;
        swift_arrayDestroy(v168, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v87, -1LL, -1LL);
        swift_slowDealloc(v78, -1LL, -1LL);

        (*(void (**)(char *, void *))(v166 + 8))(v13, v169);
      }

      else
      {

        swift_bridgeObjectRelease_n(v36, 2LL);
        swift_bridgeObjectRelease_n(v31, 2LL);

        (*(void (**)(char *, void *))(v70 + 8))(v13, v17);
      }

      return 0LL;
    }

    if ((sub_84D14(v69) & 1) != 0)
    {
      if (v165) {
        goto LABEL_84;
      }
      uint64_t v88 = HIBYTE(v36) & 0xF;
      if ((v36 & 0x2000000000000000LL) == 0) {
        uint64_t v88 = v164 & 0xFFFFFFFFFFFFLL;
      }
      if (!v88) {
        goto LABEL_84;
      }
      unint64_t v89 = v31;
      id v90 = [v169 context];
      id v91 = [v90 lastUsedServiceName];

      uint64_t v31 = v89;
      if (v91)
      {

        id v92 = [v169 context];
        id v93 = [v92 lastUsedServiceName];

        if (v93)
        {
          uint64_t v94 = static String._unconditionallyBridgeFromObjectiveC(_:)(v93);
          uint64_t v96 = v95;

          uint64_t v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMServiceNameiMessage);
          uint64_t v99 = v98;
          if (v96)
          {
            if (v94 == v97 && v96 == v98)
            {
              swift_bridgeObjectRelease_n(v96, 2LL);
              uint64_t v31 = v89;
            }

            else
            {
              char v120 = _stringCompareWithSmolCheck(_:_:expecting:)(v94, v96, v97, v98, 0LL);
              swift_bridgeObjectRelease(v96);
              swift_bridgeObjectRelease(v99);
              uint64_t v31 = v89;
              if ((v120 & 1) == 0) {
                goto LABEL_84;
              }
            }

            goto LABEL_77;
          }
        }

        else
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(IMServiceNameiMessage);
          uint64_t v99 = v119;
        }

        swift_bridgeObjectRelease(v99);
LABEL_83:
        uint64_t v31 = v89;
        goto LABEL_84;
      }

LABEL_77:
      if ((sub_84BCC(v29, v31) & 1) == 0)
      {
        unsigned int v121 = [v25 isUsableForSending];
        unsigned __int8 v173 = v121;
        if (qword_E3090 != -1) {
          swift_once(&qword_E3090, sub_848F8);
        }
        sub_8BE9C((uint64_t)v17, (uint64_t)qword_E3098);
        uint64_t v122 = v169;
        swift_bridgeObjectRetain_n(v89, 2LL);
        id v123 = v122;
        double v124 = (os_log_s *)Logger.logObject.getter(v123);
        os_log_type_t v125 = static os_log_type_t.default.getter();
        int v126 = v125;
        if (os_log_type_enabled(v124, v125))
        {
          uint64_t v127 = swift_slowAlloc(28LL, -1LL);
          uint64_t v167 = swift_slowAlloc(64LL, -1LL);
          v170[0] = v167;
          *(_DWORD *)uint64_t v127 = 136446722;
          uint64_t v161 = v127 + 4;
          id v128 = [v123 requestID];
          LODWORD(v162) = v121;
          unint64_t v129 = v36;
          id v130 = v128;
          uint64_t v131 = static String._unconditionallyBridgeFromObjectiveC(_:)(v128);
          LODWORD(v163) = v126;
          uint64_t v132 = v131;
          unint64_t v134 = v133;

          unint64_t v36 = v129;
          uint64_t v171 = sub_8B85C(v132, v134, v170);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172, v161, v127 + 12);

          swift_bridgeObjectRelease(v134);
          *(_WORD *)(v127 + 12) = 2080;
          swift_bridgeObjectRetain(v89);
          uint64_t v171 = sub_8B85C(v29, v89, v170);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172, v127 + 14, v127 + 22);
          swift_bridgeObjectRelease_n(v89, 3LL);
          *(_WORD *)(v127 + 22) = 1024;
          LODWORD(v171) = v162;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, (char *)&v171 + 4, v127 + 24, v127 + 28);
          _os_log_impl( &dword_0,  v124,  (os_log_type_t)v163,  "%{public}s alias %s is not from an active CT subscription. set hasAccountsOnService=%{BOOL}d",  (uint8_t *)v127,  0x1Cu);
          uint64_t v135 = v167;
          swift_arrayDestroy(v167, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v135, -1LL, -1LL);
          swift_slowDealloc(v127, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v89, 2LL);
        }

        goto LABEL_83;
      }

LABEL_84:
      uint64_t v163 = v29;
      if (qword_E3090 != -1) {
        swift_once(&qword_E3090, sub_848F8);
      }
      uint64_t v136 = sub_8BE9C((uint64_t)v17, (uint64_t)qword_E3098);
      uint64_t v137 = v166;
      uint64_t v138 = v168;
      (*(void (**)(uint64_t, uint64_t, void *))(v166 + 16))(v168, v136, v17);
      int v139 = v173;
      swift_bridgeObjectRetain(v36);
      unsigned __int8 v140 = v169;
      swift_bridgeObjectRetain(v31);
      id v141 = v140;
      uint64_t v142 = (os_log_s *)Logger.logObject.getter(v141);
      os_log_type_t v143 = static os_log_type_t.default.getter();
      int v144 = v143;
      if (os_log_type_enabled(v142, v143))
      {
        uint64_t v145 = swift_slowAlloc(38LL, -1LL);
        LODWORD(v160) = v139;
        uint64_t v146 = v145;
        uint64_t v147 = swift_slowAlloc(96LL, -1LL);
        uint64_t v167 = v147;
        *(_DWORD *)uint64_t v146 = 136446978;
        id v169 = v17;
        v170[0] = v147;
        uint64_t v161 = v36;
        unint64_t v148 = v31;
        id v149 = [v141 requestID];
        uint64_t v150 = static String._unconditionallyBridgeFromObjectiveC(_:)(v149);
        LODWORD(v162) = v144;
        unint64_t v152 = v151;

        uint64_t v171 = sub_8B85C(v150, v152, v170);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172, v146 + 4, v146 + 12);

        swift_bridgeObjectRelease(v152);
        *(_WORD *)(v146 + 12) = 1024;
        LODWORD(v171) = (_DWORD)v160;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, (char *)&v171 + 4, v146 + 14, v146 + 18);
        *(_WORD *)(v146 + 1_Block_object_dispose(va, 8) = 2080;
        swift_bridgeObjectRetain(v148);
        uint64_t v171 = sub_8B85C(v163, v148, v170);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172, v146 + 20, v146 + 28);
        swift_bridgeObjectRelease_n(v148, 3LL);
        *(_WORD *)(v146 + 2_Block_object_dispose(va, 8) = 2080;
        if (v165) {
          uint64_t v153 = 0x3E6C696E3CLL;
        }
        else {
          uint64_t v153 = v164;
        }
        uint64_t v154 = v161;
        if (v165) {
          unint64_t v155 = 0xE500000000000000LL;
        }
        else {
          unint64_t v155 = v161;
        }
        swift_bridgeObjectRetain(v161);
        uint64_t v171 = sub_8B85C(v153, v155, v170);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172, v146 + 30, v146 + 38);
        swift_bridgeObjectRelease_n(v154, 2LL);
        swift_bridgeObjectRelease(v155);
        _os_log_impl( &dword_0,  v142,  (os_log_type_t)v162,  "%{public}s iMessage enabled for multiple subscriptions: %{BOOL}d alias: %s sim: %s",  (uint8_t *)v146,  0x26u);
        uint64_t v156 = v167;
        swift_arrayDestroy(v167, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v156, -1LL, -1LL);
        swift_slowDealloc(v146, -1LL, -1LL);

        (*(void (**)(uint64_t, void *))(v166 + 8))(v138, v169);
      }

      else
      {

        swift_bridgeObjectRelease_n(v36, 2LL);
        swift_bridgeObjectRelease_n(v31, 2LL);

        (*(void (**)(uint64_t, void *))(v137 + 8))(v138, v17);
      }

      swift_beginAccess(&v173, v170, 0LL, 0LL);
      return (id)v173;
    }

    uint64_t v100 = v166;
    if (qword_E3090 != -1) {
      swift_once(&qword_E3090, sub_848F8);
    }
    uint64_t v101 = sub_8BE9C((uint64_t)v17, (uint64_t)qword_E3098);
    uint64_t v102 = v167;
    (*(void (**)(uint64_t, uint64_t, void *))(v100 + 16))(v167, v101, v17);
    swift_bridgeObjectRetain(v36);
    id v103 = v69;
    swift_bridgeObjectRetain(v31);
    id v104 = v103;
    __int128 v105 = (os_log_s *)Logger.logObject.getter(v104);
    os_log_type_t v106 = static os_log_type_t.default.getter();
    int v107 = v106;
    if (os_log_type_enabled(v105, v106))
    {
      uint64_t v108 = swift_slowAlloc(32LL, -1LL);
      uint64_t v168 = swift_slowAlloc(96LL, -1LL);
      v170[0] = v168;
      *(_DWORD *)uint64_t v108 = 136446722;
      uint64_t v162 = v108 + 4;
      unint64_t v109 = v31;
      id v110 = [v104 requestID];
      uint64_t v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(v110);
      id v169 = v17;
      uint64_t v112 = v29;
      uint64_t v113 = v111;
      LODWORD(v163) = v107;
      unint64_t v115 = v114;

      uint64_t v171 = sub_8B85C(v113, v115, v170);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172, v162, v108 + 12);

      swift_bridgeObjectRelease(v115);
      *(_WORD *)(v108 + 12) = 2080;
      swift_bridgeObjectRetain(v109);
      uint64_t v171 = sub_8B85C(v112, v109, v170);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172, v108 + 14, v108 + 22);
      swift_bridgeObjectRelease_n(v109, 3LL);
      *(_WORD *)(v108 + 22) = 2080;
      if (v165) {
        uint64_t v116 = 0x3E6C696E3CLL;
      }
      else {
        uint64_t v116 = v164;
      }
      if (v165) {
        unint64_t v117 = 0xE500000000000000LL;
      }
      else {
        unint64_t v117 = v36;
      }
      swift_bridgeObjectRetain(v36);
      uint64_t v171 = sub_8B85C(v116, v117, v170);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172, v108 + 24, v108 + 32);
      swift_bridgeObjectRelease_n(v36, 2LL);
      swift_bridgeObjectRelease(v117);
      _os_log_impl( &dword_0,  v105,  (os_log_type_t)v163,  "%{public}s alias %s SIMID %s no longer a valid subscription, defaulting to whether iMessage is available",  (uint8_t *)v108,  0x20u);
      uint64_t v118 = v168;
      swift_arrayDestroy(v168, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v118, -1LL, -1LL);
      swift_slowDealloc(v108, -1LL, -1LL);

      (*(void (**)(uint64_t, void *))(v166 + 8))(v167, v169);
    }

    else
    {

      swift_bridgeObjectRelease_n(v36, 2LL);
      swift_bridgeObjectRelease_n(v31, 2LL);

      (*(void (**)(uint64_t, void *))(v100 + 8))(v102, v17);
    }

    return [v25 isUsableForSending];
  }

unint64_t sub_86A0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_84544(&qword_E3298);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }

  swift_retain();
  uint64_t v5 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v6 = (uint64_t)*(v5 - 2);
    uint64_t v7 = (uint64_t)*(v5 - 1);
    unint64_t v8 = *v5;
    swift_bridgeObjectRetain(v7);
    id v9 = v8;
    unint64_t result = sub_8BF14(v6, v7);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v12 = v6;
    v12[1] = v7;
    *(void *)(v3[7] + 8 * result) = v9;
    uint64_t v13 = v3[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v3[2] = v15;
    v5 += 3;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_86B24(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_84544(&qword_E3220);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v7 = *(v6 - 3);
    uint64_t v8 = *(v6 - 2);
    uint64_t v10 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    unint64_t result = sub_8BF14(v7, v8);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v13 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v13 = v7;
    v13[1] = v8;
    BOOL v14 = (void *)(v4[7] + 16 * result);
    *BOOL v14 = v10;
    v14[1] = v9;
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void MessageReachabilityController.calculateReachability(with:responseHandler:requestingSelfHandle:)( void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *(void **)(v5 + 16);
  uint64_t v149 = *(void *)(v5 + 24);
  *(void *)type = swift_getObjectType(v10);
  unsigned int v145 = [v10 networkDataAvailable];
  if (qword_E3090 != -1) {
    swift_once(&qword_E3090, sub_848F8);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_8BE9C(v11, (uint64_t)qword_E3098);
  id v12 = a1;
  swift_retain_n(v5, 2LL);
  id v13 = v12;
  BOOL v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.info.getter();
  uint64_t v142 = a3;
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc(24LL, -1LL);
    uint64_t v140 = swift_slowAlloc(32LL, -1LL);
    uint64_t v141 = a4;
    uint64_t v154 = v140;
    *(_DWORD *)uint64_t v16 = 136446722;
    uint64_t v17 = v13;
    id v18 = [v13 requestID];
    uint64_t v19 = v5;
    NSString v20 = v10;
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    os_log_type_t v143 = a2;
    unint64_t v23 = v22;

    uint64_t v24 = v21;
    uint64_t v10 = v20;
    uint64_t v153 = sub_8B85C(v24, v23, &v154);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v23);

    *(_WORD *)(v16 + 12) = 1024;
    char v25 = (*(uint64_t (**)(os_log_type_t *))(v149 + 24))(*(os_log_type_t **)type);
    swift_release(v19);
    LODWORD(v153) = v25 & 1;
    id v13 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, (char *)&v153 + 4, v16 + 14, v16 + 18);
    swift_release(v19);
    *(_WORD *)(v16 + 1_Block_object_dispose(va, 8) = 1024;
    a2 = v143;
    LODWORD(v153) = v145;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, (char *)&v153 + 4, v16 + 20, v16 + 24);
    _os_log_impl( &dword_0,  v14,  v15,  "%{public}s Always online %{BOOL}d, network data available %{BOOL}d",  (uint8_t *)v16,  0x18u);
    swift_arrayDestroy(v140, 1LL, (char *)&type metadata for Any + 8);
    a4 = v141;
    swift_slowDealloc(v140, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);

    os_log_type_t v26 = &selRef_updateTransfer_currentBytes_totalBytes_;
    if ((v145 & 1) != 0) {
      goto LABEL_8;
    }
  }

  else
  {
    swift_release_n(v5, 2LL);

    os_log_type_t v26 = &selRef_updateTransfer_currentBytes_totalBytes_;
    if ((v145 & 1) != 0) {
      goto LABEL_8;
    }
  }

  if (((*(uint64_t (**)(os_log_type_t *))(v149 + 24))(*(os_log_type_t **)type) & 1) == 0)
  {
LABEL_14:
    int v46 = 0;
LABEL_15:
    id v34 = v13;
    uint64_t v47 = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v48 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = swift_slowAlloc(18LL, -1LL);
      int typea = v46;
      uint64_t v50 = swift_slowAlloc(32LL, -1LL);
      uint64_t v154 = v50;
      *(_DWORD *)uint64_t v49 = 136446466;
      uint64_t v150 = v10;
      unint64_t v51 = a2;
      id v52 = [v34 requestID];
      uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
      unint64_t v55 = v54;

      uint64_t v153 = sub_8B85C(v53, v55, &v154);
      os_log_type_t v26 = &selRef_updateTransfer_currentBytes_totalBytes_;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154, v49 + 4, v49 + 12);
      swift_bridgeObjectRelease(v55);

      *(_WORD *)(v49 + 12) = 1024;
      LODWORD(v153) = typea;
      a2 = v51;
      uint64_t v10 = v150;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, (char *)&v153 + 4, v49 + 14, v49 + 18);
      _os_log_impl( &dword_0,  v47,  v48,  "%{public}s IMChatCalculateServiceForSending iMessage not available (%{BOOL}d) or no addresses, bailing",  (uint8_t *)v49,  0x12u);
      swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1LL, -1LL);
      swift_slowDealloc(v49, -1LL, -1LL);
    }

    else
    {
    }

    id v56 = [v34 v26[156]];
    uint64_t v57 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v56, &type metadata for String);

    NSString v58 = [v10 internalServiceName];
    if (!v58)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v60 = v59;
      NSString v58 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v60);
    }

    uint64_t v61 = (void *)objc_opt_self(&OBJC_CLASS___IMServiceReachabilityResult);
    v62.super.isa = Array._bridgeToObjectiveC()().super.isa;
    id v63 = [v61 finalResultForService:v58 handleIDs:v62.super.isa allAreReachable:0 checkedServer:0 error:3];
    goto LABEL_21;
  }

LABEL_8:
  id v27 = [v13 v26[156]];
  uint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, &type metadata for String);

  uint64_t v29 = *(void *)(v28 + 16);
  swift_bridgeObjectRelease(v28);
  if (!v29)
  {
    int v46 = 1;
    goto LABEL_15;
  }

  id v30 = [v13 context];
  unsigned __int8 v31 = [v30 forceMMS];

  if ((v31 & 1) != 0
    || (id v32 = [v13 context],
        unsigned int v33 = [v32 conversationWasDowngraded],
        v32,
        v33))
  {
    id v34 = v13;
    unint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v36 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = swift_slowAlloc(24LL, -1LL);
      uint64_t v38 = swift_slowAlloc(32LL, -1LL);
      uint64_t v154 = v38;
      *(_DWORD *)uint64_t v37 = 136446722;
      int v144 = a2;
      id v39 = [v34 requestID];
      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      unint64_t v42 = v41;

      uint64_t v153 = sub_8B85C(v40, v42, &v154);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154, v37 + 4, v37 + 12);
      swift_bridgeObjectRelease(v42);

      *(_WORD *)(v37 + 12) = 1024;
      id v43 = [v34 context];
      LODWORD(v39) = [v43 forceMMS];

      LODWORD(v153) = (_DWORD)v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, (char *)&v153 + 4, v37 + 14, v37 + 18);

      *(_WORD *)(v37 + 1_Block_object_dispose(va, 8) = 1024;
      id v44 = [v34 context];
      LODWORD(v40) = [v44 conversationWasDowngraded];

      a2 = v144;
      LODWORD(v153) = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, (char *)&v153 + 4, v37 + 20, v37 + 24);

      _os_log_impl( &dword_0,  v35,  v36,  "%{public}s Forcing iMessage unavailable due to forceMMS: %{BOOL}d conversationWasDowngraded: %{BOOL}d",  (uint8_t *)v37,  0x18u);
      swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v45 = v38;
      os_log_type_t v26 = &selRef_updateTransfer_currentBytes_totalBytes_;
      swift_slowDealloc(v45, -1LL, -1LL);
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    else
    {
    }

    id v65 = [v34 v26[156]];
    uint64_t v57 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v65, &type metadata for String);

    NSString v58 = [v10 internalServiceName];
    if (!v58)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v67 = v66;
      NSString v58 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v67);
    }

uint64_t sub_87DBC( uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, id a6, char a7, unsigned __int16 a8, uint64_t a9, uint64_t a10)
{
  unint64_t v12 = a3;
  id v13 = a1;
  if ((a7 & 1) != 0 || [a6 shouldForceServerStatusRefresh])
  {
    unsigned int v14 = a8;
    uint64_t v15 = (uint64_t)[(id)objc_opt_self(IDSIDInfoOptions) refreshIDInfo];
    objc_msgSend((id)v15, "setForceRefresh:", objc_msgSend(a6, "shouldForceServerStatusRefresh"));
    if (v14 == 2)
    {
      if (qword_E3090 != -1) {
LABEL_66:
      }
        swift_once(&qword_E3090, sub_848F8);
      uint64_t v16 = type metadata accessor for Logger(0LL);
      sub_8BE9C(v16, (uint64_t)qword_E3098);
      swift_bridgeObjectRetain_n(v12, 2LL);
      id v17 = (id)v15;
      id v18 = (os_log_s *)Logger.logObject.getter(v17);
      os_log_type_t v19 = static os_log_type_t.info.getter();
      id v102 = v17;
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = swift_slowAlloc(18LL, -1LL);
        uint64_t v21 = swift_slowAlloc(32LL, -1LL);
        v114[0] = v21;
        *(_DWORD *)uint64_t v20 = 136446466;
        swift_bridgeObjectRetain(v12);
        uint64_t v113 = sub_8B85C(a2, v12, v114);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v20 + 4, v20 + 12);
        swift_bridgeObjectRelease_n(v12, 3LL);
        *(_WORD *)(v20 + 12) = 1024;
        unsigned int v22 = [v17 forceRefresh];

        LODWORD(v113) = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, (char *)&v113 + 4, v20 + 14, v20 + 18);

        _os_log_impl( &dword_0,  v18,  v19,  "%{public}s Refreshing ID info due to explicit request. Force refresh: %{BOOL}d",  (uint8_t *)v20,  0x12u);
        char v104 = 1;
        swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v21, -1LL, -1LL);
        swift_slowDealloc(v20, -1LL, -1LL);

        goto LABEL_20;
      }

      swift_bridgeObjectRelease_n(v12, 2LL);
    }

    else
    {
      if (qword_E3090 != -1) {
        swift_once(&qword_E3090, sub_848F8);
      }
      uint64_t v23 = type metadata accessor for Logger(0LL);
      sub_8BE9C(v23, (uint64_t)qword_E3098);
      swift_bridgeObjectRetain_n(v12, 2LL);
      id v24 = (id)v15;
      char v25 = (os_log_s *)Logger.logObject.getter(v24);
      os_log_type_t v26 = static os_log_type_t.info.getter();
      id v102 = v24;
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = swift_slowAlloc(30LL, -1LL);
        uint64_t v28 = swift_slowAlloc(32LL, -1LL);
        v114[0] = v28;
        *(_DWORD *)uint64_t v27 = 136446978;
        swift_bridgeObjectRetain(v12);
        uint64_t v113 = sub_8B85C(a2, v12, v114);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v27 + 4, v27 + 12);
        swift_bridgeObjectRelease_n(v12, 3LL);
        *(_WORD *)(v27 + 12) = 1024;
        LODWORD(v113) = v14 & 1;
        id v13 = a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, (char *)&v113 + 4, v27 + 14, v27 + 18);
        *(_WORD *)(v27 + 1_Block_object_dispose(va, 8) = 1024;
        LODWORD(v113) = (v14 >> 8) & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, (char *)&v113 + 4, v27 + 20, v27 + 24);
        *(_WORD *)(v27 + 24) = 1024;
        unsigned int v29 = [v24 forceRefresh];

        LODWORD(v113) = v29;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, (char *)&v113 + 4, v27 + 26, v27 + 30);

        _os_log_impl( &dword_0,  v25,  v26,  "%{public}s Refreshing ID info due to results: allAreReachable=%{BOOL}d hadUnknownAddress=%{BOOL}d. Force refresh: %{BOOL}d",  (uint8_t *)v27,  0x1Eu);
        swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v28, -1LL, -1LL);
        swift_slowDealloc(v27, -1LL, -1LL);

        char v104 = 1;
        goto LABEL_20;
      }

      swift_bridgeObjectRelease_n(v12, 2LL);
    }

    char v104 = 1;
  }

  else
  {
    id v102 = [(id)objc_opt_self(IDSIDInfoOptions) currentIDInfo];
    if (qword_E3090 != -1) {
      swift_once(&qword_E3090, sub_848F8);
    }
    uint64_t v30 = type metadata accessor for Logger(0LL);
    sub_8BE9C(v30, (uint64_t)qword_E3098);
    uint64_t v31 = swift_bridgeObjectRetain_n(v12, 2LL);
    id v32 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v33 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v32, v33))
    {
      id v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v35 = swift_slowAlloc(32LL, -1LL);
      v114[0] = v35;
      *(_DWORD *)id v34 = 136446210;
      swift_bridgeObjectRetain(v12);
      uint64_t v113 = sub_8B85C(a2, v12, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v34 + 4, v34 + 12);
      swift_bridgeObjectRelease_n(v12, 3LL);
      _os_log_impl(&dword_0, v32, v33, "%{public}s Doing a cached ID query", v34, 0xCu);
      swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1LL, -1LL);
      swift_slowDealloc(v34, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v12, 2LL);
    }

    char v104 = 0;
  }

uint64_t MessageReachabilityController.deinit()
{
  return v0;
}

uint64_t MessageReachabilityController.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

void sub_88A44( void *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, void *a6, void *a7, _BYTE *a8)
{
  uint64_t v15 = *(void **)(v8 + 16);
  swift_bridgeObjectRetain(a5);
  id v55 = v15;
  id v16 = [v15 internalServiceName];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  uint64_t v18 = v17;

  id v19 = objc_allocWithZone(&OBJC_CLASS___IMServiceReachabilityHandleResult);
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a5);
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v18);
  id v22 = [v19 initWithHandleID:v20 service:v21 isReachable:0];

  if (!a1) {
    goto LABEL_5;
  }
  uint64_t v23 = (char *)[a1 status];
  if (v23 != (_BYTE *)&dword_0 + 2)
  {
    if (v23 == (_BYTE *)&dword_0 + 1)
    {
      [v22 setReachable:1];
      goto LABEL_24;
    }

uint64_t sub_89104( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(void *)(v9 + 184) = v13;
  *(void *)(v9 + 192) = v8;
  *(_BYTE *)(v9 + 26_Block_object_dispose(va, 8) = a8;
  *(void *)(v9 + 16_Block_object_dispose(va, 8) = a6;
  *(void *)(v9 + 176) = a7;
  *(void *)(v9 + 152) = a4;
  *(void *)(v9 + 160) = a5;
  *(void *)(v9 + 136) = a2;
  *(void *)(v9 + 144) = a3;
  *(void *)(v9 + 12_Block_object_dispose(va, 8) = a1;
  uint64_t v10 = type metadata accessor for Logger(0LL);
  *(void *)(v9 + 200) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v9 + 20_Block_object_dispose(va, 8) = v11;
  *(void *)(v9 + 216) = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_8917C, 0LL, 0LL);
}

uint64_t sub_8917C()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 16;
  unint64_t v155 = v0 + 9;
  uint64_t v156 = v0 + 10;
  int v159 = v0 + 12;
  if (!*(void *)(v0[16] + 16))
  {
    if (qword_E3090 != -1) {
      goto LABEL_118;
    }
    goto LABEL_3;
  }

LABEL_7:
  uint64_t v15 = v1[20];
  uint64_t v14 = v1[21];
  uint64_t v16 = v1[16];
  uint64_t v17 = ((uint64_t (*)(uint64_t))swift_bridgeObjectRetain)(v14);
  uint64_t v18 = (uint64_t)sub_8D580(v17);
  swift_bridgeObjectRelease(v14);
  v1[12] = v18;
  v1[5] = v16;
  uint64_t v175 = v15;
  uint64_t v154 = v2;
  if (!v15) {
    goto LABEL_14;
  }
  uint64_t v19 = v1[19];
  v184[0] = v1[16];
  swift_bridgeObjectRetain_n(v184[0], 2LL);
  NSString v20 = (void *)sub_8D4AC(v19, v15);
  uint64_t v21 = v184[0];
  uint64_t v22 = *(void *)(v184[0] + 16);
  BOOL v165 = v22 != 0;
  if (!v22)
  {
    swift_bridgeObjectRelease(v184[0]);
    uint64_t v21 = *v2;
    goto LABEL_18;
  }

  uint64_t v23 = v1[19];
  uint64_t v24 = v1[16];
  v1[5] = v184[0];
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v24);
  uint64_t v25 = sub_8F15C(v18, v23, v15);
  if ((v26 & 1) != 0)
  {
    uint64_t v27 = *(void *)(v18 + 16);
    unint64_t v28 = v27;
LABEL_17:
    sub_8F1EC(v27, v28);
    swift_bridgeObjectRelease(v21);
    uint64_t v18 = *v159;
LABEL_18:
    uint64_t v30 = v2 - 11;
    uint64_t v161 = v2 - 9;
    uint64_t v162 = v2 - 10;
    uint64_t v164 = v2 - 8;
    uint64_t v150 = v2 - 5;
    uint64_t v151 = v2 - 14;
    unint64_t v152 = v2 - 3;
    uint64_t v153 = v2 - 2;
    uint64_t v149 = v2 + 17;
    v1[28] = (uint64_t)v20;
    uint64_t v31 = v1[24];
    uint64_t v147 = v2 - 1;
    unint64_t v148 = (char *)v1 + 268;
    uint64_t v32 = *((unsigned __int8 *)v1 + 268);
    uint64_t v33 = v1[21];
    uint64_t v34 = *(void **)(v31 + 16);
    v1[29] = (uint64_t)v34;
    uint64_t v158 = *(void *)(v31 + 24);
    uint64_t ObjectType = swift_getObjectType(v34);
    id v35 = [v34 internalServiceName];
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    uint64_t v38 = v37;

    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v18);
    id v39 = sub_8ED2C(v36, v38, (uint64_t)v20, v21, v18);
    v1[30] = (uint64_t)v39;
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v21);
    uint64_t v40 = v38;
    uint64_t v41 = v30;
    swift_bridgeObjectRelease(v40);
    unsigned __int8 v173 = v39;
    [v39 setDidCheckServer:v32];
    uint64_t v169 = v33 + 64;
    uint64_t v42 = -1LL;
    uint64_t v43 = -1LL << *(_BYTE *)(v33 + 32);
    if (-v43 < 64) {
      uint64_t v42 = ~(-1LL << -(char)v43);
    }
    unint64_t v44 = v42 & *(void *)(v33 + 64);
    int64_t v170 = (unint64_t)(63 - v43) >> 6;
    swift_bridgeObjectRetain(v33);
    uint64_t v18 = 0LL;
    int v163 = 136446466;
    uint64_t v45 = v175;
    id v172 = v1;
    uint64_t v168 = v30;
    uint64_t v160 = v33;
    if (v44) {
      goto LABEL_23;
    }
LABEL_24:
    BOOL v47 = __OFADD__(v18++, 1LL);
    if (v47)
    {
      __break(1u);
      goto LABEL_107;
    }

    if (v18 < v170)
    {
      unint64_t v48 = *(void *)(v169 + 8 * v18);
      if (v48)
      {
LABEL_34:
        uint64_t v180 = (v48 - 1) & v48;
        for (unint64_t i = __clz(__rbit64(v48)) + (v18 << 6); ; unint64_t i = __clz(__rbit64(v44)) | (v18 << 6))
        {
          uint64_t v50 = 16 * i;
          uint64_t v51 = *(void *)(v33 + 48) + v50;
          NSString v20 = *(void **)v51;
          uint64_t v21 = *(void *)(v51 + 8);
          uint64_t v52 = (uint64_t *)(*(void *)(v33 + 56) + v50);
          unint64_t v53 = v52[1];
          uint64_t v177 = *v52;
          uint64_t v54 = *v41;
          uint64_t v55 = *(void *)(*v41 + 16);
          swift_bridgeObjectRetain(v21);
          if (v55)
          {
            swift_bridgeObjectRetain(v21);
            swift_bridgeObjectRetain(v53);
            unint64_t v56 = sub_8BF14((uint64_t)v20, v21);
            if ((v57 & 1) != 0)
            {
              uint64_t v58 = *(void **)(*(void *)(v54 + 56) + 8 * v56);
              id v59 = v58;
              swift_bridgeObjectRelease_n(v21, 2LL);
              goto LABEL_54;
            }

            swift_bridgeObjectRelease(v21);
            if (v45)
            {
LABEL_41:
              char v60 = (void *)v1[19];
              if (v20 == v60 && v1[20] == v21)
              {
                if (v165)
                {
LABEL_22:
                  swift_bridgeObjectRelease(v53);
                  swift_bridgeObjectRelease(v21);
                  unint64_t v44 = v180;
                  if (!v180) {
                    goto LABEL_24;
                  }
                  goto LABEL_23;
                }
              }

              else if ((v165 & _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, v60, v45, 0LL) & 1) != 0)
              {
                goto LABEL_22;
              }
            }
          }

          else
          {
            swift_bridgeObjectRetain(v53);
            if (v45) {
              goto LABEL_41;
            }
          }

          if (qword_E3090 != -1) {
            swift_once(&qword_E3090, sub_848F8);
          }
          uint64_t v62 = v1[18];
          sub_8BE9C(v1[25], (uint64_t)qword_E3098);
          swift_bridgeObjectRetain_n(v62, 2LL);
          swift_bridgeObjectRetain(v21);
          BOOL v64 = (os_log_s *)Logger.logObject.getter(v63);
          os_log_type_t v65 = static os_log_type_t.error.getter();
          BOOL v66 = os_log_type_enabled(v64, v65);
          unint64_t v67 = v1[18];
          if (v66)
          {
            uint64_t v166 = v1[17];
            uint64_t v68 = swift_slowAlloc(22LL, -1LL);
            uint64_t v167 = swift_slowAlloc(64LL, -1LL);
            v184[0] = v167;
            *(_DWORD *)uint64_t v68 = 136446466;
            swift_bridgeObjectRetain(v67);
            v172[6] = sub_8B85C(v166, v67, v184);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v162, v161, v68 + 4, v68 + 12);
            swift_bridgeObjectRelease_n(v67, 3LL);
            *(_WORD *)(v68 + 12) = 2080;
            swift_bridgeObjectRetain(v21);
            _BYTE v172[7] = sub_8B85C((uint64_t)v20, v21, v184);
            uint64_t v33 = v160;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v161, v164, v68 + 14, v68 + 22);
            swift_bridgeObjectRelease_n(v21, 3LL);
            _os_log_impl( &dword_0,  v64,  v65,  "%{public}s Missing IDS info result for destination %s",  (uint8_t *)v68,  0x16u);
            swift_arrayDestroy(v167, 2LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v167, -1LL, -1LL);
            uint64_t v69 = v68;
            uint64_t v1 = v172;
            swift_slowDealloc(v69, -1LL, -1LL);
          }

          else
          {
            swift_bridgeObjectRelease_n(v1[18], 2LL);
            swift_bridgeObjectRelease_n(v21, 2LL);
          }

          uint64_t v58 = 0LL;
          uint64_t v41 = v168;
LABEL_54:
          sub_88A44(v58, v1[17], v1[18], v177, v53, (void *)v1[22], v173, (_BYTE *)v1[23]);
          swift_bridgeObjectRelease(v53);

          uint64_t v45 = v175;
          unint64_t v44 = v180;
          if (!v180) {
            goto LABEL_24;
          }
LABEL_23:
          uint64_t v180 = (v44 - 1) & v44;
        }
      }

      uint64_t v49 = v18 + 1;
      if (v18 + 1 < v170)
      {
        unint64_t v48 = *(void *)(v169 + 8 * v49);
        if (v48) {
          goto LABEL_33;
        }
        uint64_t v49 = v18 + 2;
        if (v18 + 2 >= v170) {
          goto LABEL_60;
        }
        unint64_t v48 = *(void *)(v169 + 8 * v49);
        if (v48)
        {
LABEL_33:
          uint64_t v18 = v49;
          goto LABEL_34;
        }

        uint64_t v49 = v18 + 3;
        if (v18 + 3 < v170)
        {
          unint64_t v48 = *(void *)(v169 + 8 * v49);
          if (v48) {
            goto LABEL_33;
          }
          while (1)
          {
            uint64_t v18 = v49 + 1;
            if (__OFADD__(v49, 1LL)) {
              break;
            }
            if (v18 >= v170) {
              goto LABEL_60;
            }
            unint64_t v48 = *(void *)(v169 + 8 * v18);
            ++v49;
            if (v48) {
              goto LABEL_34;
            }
          }

          __break(1u);
          goto LABEL_111;
        }
      }
    }

LABEL_107:
            swift_bridgeObjectRelease_n(v44, 2LL);
            if (qword_E3090 == -1) {
              goto LABEL_108;
            }
            goto LABEL_121;
          }
        }

        uint64_t v104 = v1[12];
LABEL_99:
        swift_bridgeObjectRelease(v104);
        goto LABEL_100;
      }
    }

LABEL_98:
    uint64_t v104 = *v159;
    goto LABEL_99;
  }

  uint64_t v27 = v25;
  uint64_t v179 = v20;
  unint64_t v28 = v25 + 1;
  if (__OFADD__(v25, 1LL))
  {
    __break(1u);
  }

  else
  {
    unint64_t v29 = *(void *)(v18 + 16);
    if (v28 == v29)
    {
LABEL_12:
      NSString v20 = v179;
      if ((uint64_t)v28 < v27)
      {
        __break(1u);
LABEL_14:
        uint64_t v21 = *v2;
        swift_bridgeObjectRetain(*v2);
        BOOL v165 = 0;
        NSString v20 = 0LL;
        goto LABEL_18;
      }

      goto LABEL_17;
    }

    if ((v28 & 0x8000000000000000LL) == 0)
    {
      uint64_t v81 = 16 * v25;
      while (v28 < v29)
      {
        uint64_t v84 = v1[19];
        uint64_t v85 = v18 + v81;
        uint64_t v86 = *(void *)(v18 + v81 + 48);
        uint64_t v87 = *(void *)(v18 + v81 + 56);
        BOOL v88 = v86 == v84 && v1[20] == v87;
        if (!v88 && (_stringCompareWithSmolCheck(_:_:expecting:)(v86, v87, v84, v175, 0LL) & 1) == 0)
        {
          if (v28 != v27)
          {
            if (v27 >= v29)
            {
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              swift_once(&qword_E3090, sub_848F8);
LABEL_3:
              uint64_t v3 = v1[18];
              sub_8BE9C(v1[25], (uint64_t)qword_E3098);
              uint64_t v4 = swift_bridgeObjectRetain_n(v3, 2LL);
              uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
              os_log_type_t v6 = static os_log_type_t.error.getter();
              BOOL v7 = os_log_type_enabled(v5, v6);
              unint64_t v8 = v1[18];
              if (v7)
              {
                uint64_t v9 = v2;
                uint64_t v10 = v1[17];
                uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                uint64_t v12 = swift_slowAlloc(32LL, -1LL);
                v184[0] = v12;
                *(_DWORD *)uint64_t v11 = 136446210;
                swift_bridgeObjectRetain(v8);
                uint64_t v13 = v10;
                uint64_t v2 = v9;
                v1[9] = sub_8B85C(v13, v8, v184);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(v155, v156, v11 + 4, v11 + 12);
                swift_bridgeObjectRelease_n(v8, 3LL);
                _os_log_impl(&dword_0, v5, v6, "%{public}s IDS cache did not return any results", v11, 0xCu);
                swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v12, -1LL, -1LL);
                swift_slowDealloc(v11, -1LL, -1LL);
              }

              else
              {
                swift_bridgeObjectRelease_n(v1[18], 2LL);
              }

              goto LABEL_7;
            }

            uint64_t v2 = v1;
            id v89 = (uint64_t *)(v18 + 32 + 16 * v27);
            uint64_t v91 = *v89;
            uint64_t v90 = v89[1];
            uint64_t v1 = *(uint64_t **)(v85 + 48);
            uint64_t v92 = *(void *)(v85 + 56);
            swift_bridgeObjectRetain(v90);
            swift_bridgeObjectRetain(v92);
            if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0) {
              uint64_t v18 = (uint64_t)sub_8E69C(v18);
            }
            uint64_t v93 = v18 + 16 * v27;
            uint64_t v94 = *(void *)(v93 + 40);
            *(void *)(v93 + 32) = v1;
            *(void *)(v93 + 40) = v92;
            swift_bridgeObjectRelease(v94);
            if (v28 >= *(void *)(v18 + 16)) {
              goto LABEL_117;
            }
            uint64_t v82 = v18 + v81;
            uint64_t v83 = *(void *)(v18 + v81 + 56);
            *(void *)(v82 + 4_Block_object_dispose(va, 8) = v91;
            *(void *)(v82 + 56) = v90;
            swift_bridgeObjectRelease(v83);
            uint64_t *v159 = v18;
            uint64_t v1 = v2;
            uint64_t v2 = v154;
          }

          BOOL v47 = __OFADD__(v27++, 1LL);
          if (v47) {
            goto LABEL_114;
          }
        }

        ++v28;
        unint64_t v29 = *(void *)(v18 + 16);
        v81 += 16LL;
        if (v28 == v29) {
          goto LABEL_12;
        }
      }

      __break(1u);
LABEL_114:
      __break(1u);
      goto LABEL_115;
    }
  }

  __break(1u);
LABEL_121:
  swift_once(&qword_E3090, sub_848F8);
LABEL_108:
  char v137 = (void *)v1[22];
  uint64_t v138 = v1[18];
  sub_8BE9C(v1[25], (uint64_t)qword_E3098);
  swift_bridgeObjectRetain_n(v138, 2LL);
  unint64_t v44 = Logger.logObject.getter(v137);
  os_log_type_t v139 = static os_log_type_t.info.getter();
  BOOL v140 = os_log_type_enabled((os_log_t)v44, v139);
  NSString v20 = (void *)v1[22];
  uint64_t v21 = v1[18];
  if (!v140)
  {
LABEL_111:
    swift_bridgeObjectRelease_n(v21, 2LL);

    goto LABEL_112;
  }

  uint64_t v141 = v1[17];
  uint64_t v142 = swift_slowAlloc(22LL, -1LL);
  os_log_type_t v143 = (void *)swift_slowAlloc(8LL, -1LL);
  uint64_t v183 = swift_slowAlloc(32LL, -1LL);
  v184[0] = v183;
  *(_DWORD *)uint64_t v142 = v163;
  swift_bridgeObjectRetain(v21);
  v1[14] = sub_8B85C(v141, v21, v184);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v153, v147, v142 + 4, v142 + 12);
  swift_bridgeObjectRelease_n(v21, 3LL);
  *(_WORD *)(v142 + 12) = 2112;
  v1[15] = (uint64_t)v20;
  id v144 = v20;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v147, v154, v142 + 14, v142 + 22);
  void *v143 = v20;

  uint64_t v18 = 925696LL;
  _os_log_impl( &dword_0,  (os_log_t)v44,  v139,  "%{public}s This group contains emails, don't downgrade: %@",  (uint8_t *)v142,  0x16u);
  uint64_t v145 = sub_84544(&qword_E3288);
  swift_arrayDestroy(v143, 1LL, v145);
  swift_slowDealloc(v143, -1LL, -1LL);
  swift_arrayDestroy(v183, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v183, -1LL, -1LL);
  swift_slowDealloc(v142, -1LL, -1LL);
LABEL_112:

  uint64_t v146 = (void *)v1[30];
  [v146 setAllAreReachable:1];
  [v146 setError:0];
  [v146 setReachabilityOverriddenToSuccessByPolicy:1];
LABEL_100:
  if (qword_E3090 != -1) {
LABEL_115:
  }
    swift_once(&qword_E3090, sub_848F8);
  __int128 v105 = (void *)v1[30];
  uint64_t v107 = v1[26];
  uint64_t v106 = v1[27];
  uint64_t v108 = v1[25];
  uint64_t v109 = v1[21];
  uint64_t v110 = v1[18];
  uint64_t v111 = sub_8BE9C(v108, (uint64_t)qword_E3098);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 16))(v106, v111, v108);
  swift_bridgeObjectRetain_n(v110, 2LL);
  swift_bridgeObjectRetain_n(v109, 2LL);
  uint64_t v112 = (os_log_s *)Logger.logObject.getter(v105);
  os_log_type_t v113 = static os_log_type_t.info.getter();
  BOOL v114 = os_log_type_enabled(v112, v113);
  unint64_t v115 = (void *)v1[30];
  uint64_t v116 = v1[27];
  id v117 = (void *)v1[28];
  uint64_t v118 = v1[25];
  uint64_t v182 = v1[26];
  uint64_t v119 = v1[21];
  NSString v120 = v1;
  unint64_t v121 = v1[18];
  if (v114)
  {
    uint64_t v178 = v116;
    uint64_t v122 = v120[17];
    int v176 = v117;
    uint64_t v123 = swift_slowAlloc(38LL, -1LL);
    uint64_t v171 = swift_slowAlloc(96LL, -1LL);
    v184[0] = v171;
    *(_DWORD *)uint64_t v123 = 136446978;
    uint64_t v174 = v118;
    swift_bridgeObjectRetain(v121);
    v120[8] = sub_8B85C(v122, v121, v184);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v164, v155, v123 + 4, v123 + 12);
    swift_bridgeObjectRelease_n(v121, 3LL);
    *(_WORD *)(v123 + 12) = 1024;
    LODWORD(v122) = [v115 *(SEL *)(v18 + 1184)];

    *((_DWORD *)v120 + 66) = v122;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v149, v148, v123 + 14, v123 + 18);

    *(_WORD *)(v123 + 1_Block_object_dispose(va, 8) = 2080;
    v120[10] = v119;
    swift_bridgeObjectRetain(v119);
    uint64_t v124 = sub_84544(&qword_E3270);
    unint64_t v125 = sub_8F088();
    unint64_t v126 = sub_8F118();
    uint64_t v127 = Sequence<>.joined(separator:)(44LL, 0xE100000000000000LL, v124, v125, v126);
    unint64_t v129 = v128;
    swift_bridgeObjectRelease(v119);
    v120[11] = sub_8B85C(v127, v129, v184);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v150, v159, v123 + 20, v123 + 28);
    swift_bridgeObjectRelease(v129);
    swift_bridgeObjectRelease_n(v119, 2LL);
    *(_WORD *)(v123 + 2_Block_object_dispose(va, 8) = 2080;
    swift_beginAccess(v168, v151, 0LL, 0LL);
    uint64_t v130 = v120[5];
    uint64_t v131 = sub_8448C(0LL, &qword_E3260, &OBJC_CLASS___IDSIDInfoResult_ptr);
    swift_bridgeObjectRetain(v130);
    uint64_t v133 = Dictionary.description.getter(v132, &type metadata for String, v131, &protocol witness table for String);
    unint64_t v135 = v134;
    swift_bridgeObjectRelease(v130);
    v120[13] = sub_8B85C(v133, v135, v184);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v152, v153, v123 + 30, v123 + 38);
    swift_bridgeObjectRelease(v135);
    _os_log_impl( &dword_0,  v112,  v113,  "%{public}s Choosing all iMessageable(%{BOOL}d) requestedRecipients:(%s) perRecipientAvailability:(%s)",  (uint8_t *)v123,  0x26u);
    swift_arrayDestroy(v171, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v171, -1LL, -1LL);
    swift_slowDealloc(v123, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v182 + 8))(v178, v174);
    uint64_t v136 = v120[5];
  }

  else
  {

    swift_bridgeObjectRelease_n(v121, 2LL);
    swift_bridgeObjectRelease_n(v119, 2LL);

    (*(void (**)(uint64_t, uint64_t))(v182 + 8))(v116, v118);
    uint64_t v136 = *v168;
  }

  swift_bridgeObjectRelease(v136);
  swift_task_dealloc(v120[27]);
  return ((uint64_t (*)(uint64_t))v120[1])(v120[30]);
}

uint64_t sub_8A2CC(char a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 248LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 256LL);
  *(_BYTE *)(*(void *)v1 + 269LL) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_8A330, 0LL, 0LL);
}

uint64_t sub_8A330()
{
  if (*(_BYTE *)(v0 + 269) == 1) {
    [*(id *)(v0 + 240) setError:4];
  }
  uint64_t v1 = v0 + 112;
  uint64_t v2 = (uint64_t *)(v0 + 96);
  if (![*(id *)(v0 + 240) error])
  {
    uint64_t v3 = *(void *)(*v2 + 16);
    if ((unint64_t)v3 >= 2
      && (uint64_t)[*(id *)(v0 + 232) maxChatParticipantsForContext:*(void *)(v0 + 176)] < v3)
    {
      [*(id *)(v0 + 240) setError:1];
    }
  }

  uint64_t v4 = &selRef_updateTransfer_currentBytes_totalBytes_;
  id v5 = [*(id *)(v0 + 176) lastUsedServiceName];
  if (!v5) {
    goto LABEL_22;
  }
  os_log_type_t v6 = v5;
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v9 = v8;

  if (!v9) {
    goto LABEL_22;
  }
  if (v7 == 0x6567617373654D69LL && v9 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease(0xE800000000000000LL);
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, 0x6567617373654D69LL, 0xE800000000000000LL, 0LL);
    swift_bridgeObjectRelease(v9);
    if ((v10 & 1) == 0)
    {
LABEL_22:
      uint64_t v20 = *v2;
LABEL_23:
      swift_bridgeObjectRelease(v20);
      goto LABEL_24;
    }
  }

  id v11 = [*(id *)(v0 + 176) chatIdentifier];
  if (!v11) {
    goto LABEL_22;
  }
  uint64_t v12 = *(void **)(v0 + 176);

  unsigned __int8 v13 = [v12 isForPendingConversation];
  uint64_t v14 = *(void *)(v0 + 96);
  if ((v13 & 1) != 0 || (uint64_t v15 = *(void *)(v14 + 16)) == 0)
  {
    uint64_t v20 = *(void *)(v0 + 96);
    goto LABEL_23;
  }

  uint64_t v74 = v0 + 120;
  swift_bridgeObjectRetain(v14);
  uint64_t v16 = (void *)(v14 + 40);
  while (1)
  {
    uint64_t v17 = *v16;
    swift_bridgeObjectRetain(*v16);
    NSString v18 = String._bridgeToObjectiveC()();
    char IsEmail = IMStringIsEmail(v18);

    swift_bridgeObjectRelease(v17);
    if ((IsEmail & 1) != 0) {
      break;
    }
    v16 += 2;
    if (!--v15)
    {
      swift_bridgeObjectRelease_n(v14, 2LL);
      uint64_t v4 = &selRef_updateTransfer_currentBytes_totalBytes_;
      goto LABEL_24;
    }
  }

  swift_bridgeObjectRelease_n(v14, 2LL);
  if (qword_E3090 != -1) {
    swift_once(&qword_E3090, sub_848F8);
  }
  uint64_t v52 = *(void **)(v0 + 176);
  uint64_t v53 = *(void *)(v0 + 144);
  sub_8BE9C(*(void *)(v0 + 200), (uint64_t)qword_E3098);
  swift_bridgeObjectRetain_n(v53, 2LL);
  uint64_t v54 = (os_log_s *)Logger.logObject.getter(v52);
  os_log_type_t v55 = static os_log_type_t.info.getter();
  BOOL v56 = os_log_type_enabled(v54, v55);
  char v57 = *(void **)(v0 + 176);
  unint64_t v58 = *(void *)(v0 + 144);
  if (v56)
  {
    uint64_t v59 = *(void *)(v0 + 136);
    uint64_t v60 = swift_slowAlloc(22LL, -1LL);
    uint64_t v71 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v73 = swift_slowAlloc(32LL, -1LL);
    uint64_t v76 = v73;
    *(_DWORD *)uint64_t v60 = 136446466;
    swift_bridgeObjectRetain(v58);
    *(void *)(v0 + 112) = sub_8B85C(v59, v58, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v74, v60 + 4, v60 + 12);
    swift_bridgeObjectRelease_n(v58, 3LL);
    *(_WORD *)(v60 + 12) = 2112;
    *(void *)(v0 + 120) = v57;
    id v61 = v57;
    uint64_t v2 = (uint64_t *)(v0 + 96);
    uint64_t v1 = v0 + 112;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v74, v0 + 128, v60 + 14, v60 + 22);
    void *v71 = v57;

    _os_log_impl( &dword_0,  v54,  v55,  "%{public}s This group contains emails, don't downgrade: %@",  (uint8_t *)v60,  0x16u);
    uint64_t v62 = sub_84544(&qword_E3288);
    swift_arrayDestroy(v71, 1LL, v62);
    swift_slowDealloc(v71, -1LL, -1LL);
    swift_arrayDestroy(v73, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v73, -1LL, -1LL);
    swift_slowDealloc(v60, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(*(void *)(v0 + 144), 2LL);
  }

  uint64_t v63 = *(void **)(v0 + 240);
  [v63 setAllAreReachable:1];
  [v63 setError:0];
  [v63 setReachabilityOverriddenToSuccessByPolicy:1];
  uint64_t v4 = &selRef_updateTransfer_currentBytes_totalBytes_;
LABEL_24:
  if (qword_E3090 != -1) {
    swift_once(&qword_E3090, sub_848F8);
  }
  uint64_t v70 = (uint64_t *)(v0 + 40);
  uint64_t v21 = *(void **)(v0 + 240);
  uint64_t v23 = *(void *)(v0 + 208);
  uint64_t v22 = *(void *)(v0 + 216);
  uint64_t v24 = *(void *)(v0 + 200);
  uint64_t v25 = *(void *)(v0 + 168);
  uint64_t v26 = *(void *)(v0 + 144);
  uint64_t v27 = sub_8BE9C(v24, (uint64_t)qword_E3098);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v22, v27, v24);
  swift_bridgeObjectRetain_n(v26, 2LL);
  swift_bridgeObjectRetain_n(v25, 2LL);
  unint64_t v28 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t type = static os_log_type_t.info.getter();
  BOOL v29 = os_log_type_enabled(v28, type);
  uint64_t v30 = *(void **)(v0 + 240);
  uint64_t v31 = *(void *)(v0 + 216);
  uint64_t v75 = *(void **)(v0 + 224);
  uint64_t v32 = *(void *)(v0 + 200);
  uint64_t v72 = *(void *)(v0 + 208);
  uint64_t v33 = *(void *)(v0 + 168);
  unint64_t v34 = *(void *)(v0 + 144);
  if (v29)
  {
    uint64_t v66 = *(void *)(v0 + 200);
    uint64_t v68 = v1;
    uint64_t v35 = *(void *)(v0 + 136);
    unint64_t v67 = v2;
    uint64_t v36 = swift_slowAlloc(38LL, -1LL);
    uint64_t v64 = swift_slowAlloc(96LL, -1LL);
    uint64_t v76 = v64;
    *(_DWORD *)uint64_t v36 = 136446978;
    uint64_t v65 = v31;
    swift_bridgeObjectRetain(v34);
    *(void *)(v0 + 64) = sub_8B85C(v35, v34, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v36 + 4, v36 + 12);
    swift_bridgeObjectRelease_n(v34, 3LL);
    *(_WORD *)(v36 + 12) = 1024;
    unsigned int v37 = [v30 v4[148]];

    *(_DWORD *)(v0 + 264) = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 268, v36 + 14, v36 + 18);

    *(_WORD *)(v36 + 1_Block_object_dispose(va, 8) = 2080;
    *(void *)(v0 + 80) = v33;
    swift_bridgeObjectRetain(v33);
    uint64_t v38 = sub_84544(&qword_E3270);
    unint64_t v39 = sub_8F088();
    unint64_t v40 = sub_8F118();
    uint64_t v41 = Sequence<>.joined(separator:)(44LL, 0xE100000000000000LL, v38, v39, v40);
    unint64_t v43 = v42;
    swift_bridgeObjectRelease(v33);
    *(void *)(v0 + 8_Block_object_dispose(va, 8) = sub_8B85C(v41, v43, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v67, v36 + 20, v36 + 28);
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease_n(v33, 2LL);
    *(_WORD *)(v36 + 2_Block_object_dispose(va, 8) = 2080;
    swift_beginAccess(v70, v0 + 16, 0LL, 0LL);
    uint64_t v44 = *(void *)(v0 + 40);
    uint64_t v45 = sub_8448C(0LL, &qword_E3260, &OBJC_CLASS___IDSIDInfoResult_ptr);
    uint64_t v46 = swift_bridgeObjectRetain(v44);
    uint64_t v47 = Dictionary.description.getter(v46, &type metadata for String, v45, &protocol witness table for String);
    unint64_t v49 = v48;
    swift_bridgeObjectRelease(v44);
    *(void *)(v0 + 104) = sub_8B85C(v47, v49, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v68, v36 + 30, v36 + 38);
    swift_bridgeObjectRelease(v49);
    _os_log_impl( &dword_0,  v28,  type,  "%{public}s Choosing all iMessageable(%{BOOL}d) requestedRecipients:(%s) perRecipientAvailability:(%s)",  (uint8_t *)v36,  0x26u);
    swift_arrayDestroy(v64, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v64, -1LL, -1LL);
    swift_slowDealloc(v36, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v65, v66);
    uint64_t v50 = *(void *)(v0 + 40);
  }

  else
  {

    swift_bridgeObjectRelease_n(v34, 2LL);
    swift_bridgeObjectRelease_n(v33, 2LL);

    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v31, v32);
    uint64_t v50 = *v70;
  }

  swift_bridgeObjectRelease(v50);
  swift_task_dealloc(*(void *)(v0 + 216));
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 240));
}

uint64_t sub_8AB90( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 136) = v13;
  *(_OWORD *)(v8 + 120) = v12;
  *(_OWORD *)(v8 + 104) = v11;
  *(_BYTE *)(v8 + 169) = v10;
  *(void *)(v8 + 8_Block_object_dispose(va, 8) = a7;
  *(void *)(v8 + 96) = a8;
  *(void *)(v8 + 72) = a5;
  *(void *)(v8 + 80) = a6;
  *(void *)(v8 + 56) = a3;
  *(void *)(v8 + 64) = a4;
  *(void *)(v8 + 40) = a1;
  *(void *)(v8 + 4_Block_object_dispose(va, 8) = a2;
  return swift_task_switch(sub_8ABD8, 0LL, 0LL);
}

uint64_t sub_8ABD8()
{
  uint64_t v1 = *(void *)(v0 + 88);
  *(_BYTE *)(v0 + 16_Block_object_dispose(va, 8) = 0;
  swift_beginAccess(v1 + 16, v0 + 16, 0LL, 0LL);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 144) = v2;
  uint64_t v3 = dword_E326C;
  swift_bridgeObjectRetain(v2);
  uint64_t v4 = (void *)swift_task_alloc(v3);
  *(void *)(v0 + 152) = v4;
  void *v4 = v0;
  v4[1] = sub_8AC78;
  return sub_89104( *(void *)(v0 + 40),  *(void *)(v0 + 56),  *(void *)(v0 + 64),  *(void *)(v0 + 72),  *(void *)(v0 + 80),  v2,  *(void *)(v0 + 96),  *(_BYTE *)(v0 + 169));
}

uint64_t sub_8AC78(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 144LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 152LL);
  *(void *)(*(void *)v1 + 160LL) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_8ACDC, 0LL, 0LL);
}

uint64_t sub_8ACDC()
{
  if ([*(id *)(v0 + 160) allAreReachable] && *(_BYTE *)(v0 + 168) != 1)
  {
    uint64_t v13 = *(void **)(v0 + 160);
    uint64_t v14 = *(void (**)(void *))(v0 + 104);
    [v13 setFinal:1];
    v14(v13);
  }

  else
  {
    uint64_t v1 = *(void **)(v0 + 160);
    uint64_t v2 = *(void (**)(void *))(v0 + 104);
    unsigned __int8 v3 = *(_BYTE *)(v0 + 169);
    [v1 setFinal:v3];
    v2(v1);
    if ((v3 & 1) == 0)
    {
      uint64_t v4 = *(void *)(v0 + 128);
      uint64_t v16 = *(void *)(v0 + 136);
      uint64_t v6 = *(void *)(v0 + 112);
      id v5 = *(uint64_t **)(v0 + 120);
      uint64_t v7 = *(void **)(v0 + 96);
      uint64_t v8 = *(void *)(v0 + 104);
      uint64_t v10 = *(void *)(v0 + 56);
      unint64_t v9 = *(void *)(v0 + 64);
      unsigned __int16 v11 = (unsigned __int16)[*(id *)(v0 + 160) allAreReachable];
      if (*(_BYTE *)(v0 + 168)) {
        __int16 v12 = 256;
      }
      else {
        __int16 v12 = 0;
      }
      sub_87DBC(v5, v10, v9, v4, v16, v7, 1, v12 | v11, v8, v6);
    }
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_8AE00( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(void), uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17 = sub_84544(&qword_E3228);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1 && (sub_8B154(a1), v20))
  {
    uint64_t v21 = v20;
    static TaskPriority.userInitiated.getter();
    uint64_t v22 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v19, 0LL, 1LL, v22);
    type metadata accessor for MainActor(0LL);
    uint64_t v23 = swift_retain(a11);
    uint64_t v24 = static MainActor.shared.getter(v23);
    uint64_t v25 = (void *)swift_allocObject(&unk_D8120, 56LL, 7LL);
    v25[2] = v24;
    v25[3] = &protocol witness table for MainActor;
    v25[4] = a10;
    void v25[5] = a11;
    v25[6] = v21;
    uint64_t v26 = sub_8B660((uint64_t)v19, (uint64_t)&unk_E3238, (uint64_t)v25);
    swift_release(v26);
  }

  else
  {
    if (qword_E3090 != -1) {
      swift_once(&qword_E3090, sub_848F8);
    }
    uint64_t v27 = type metadata accessor for Logger(0LL);
    sub_8BE9C(v27, (uint64_t)qword_E3098);
    uint64_t v28 = swift_bridgeObjectRetain_n(a4, 2LL);
    BOOL v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc(12LL, -1LL);
      v44[0] = a7;
      uint64_t v32 = (uint8_t *)v31;
      uint64_t v33 = swift_slowAlloc(32LL, -1LL);
      v44[1] = a6;
      unint64_t v34 = a5;
      uint64_t v35 = v33;
      uint64_t v46 = v33;
      *(_DWORD *)uint64_t v32 = 136446210;
      swift_bridgeObjectRetain(a4);
      uint64_t v45 = sub_8B85C(a3, a4, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v32 + 4, v32 + 12);
      swift_bridgeObjectRelease_n(a4, 3LL);
      _os_log_impl(&dword_0, v29, v30, "%{public}s Did not get a [String: IDSIDInfoResult] from IDS!?", v32, 0xCu);
      swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v36 = v35;
      a5 = v34;
      swift_slowDealloc(v36, -1LL, -1LL);
      unsigned int v37 = v32;
      a7 = v44[0];
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a4, 2LL);
    }

    NSString v38 = [*(id *)(a7 + 16) internalServiceName];
    if (!v38)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v40 = v39;
      NSString v38 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v40);
    }

    uint64_t v41 = (void *)objc_opt_self(&OBJC_CLASS___IMServiceReachabilityResult);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    id v43 =  [v41 finalResultForService:v38 handleIDs:isa allAreReachable:0 checkedServer:a9 & 1 error:-1];

    a5(v43);
  }

void sub_8B154(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_84544(&qword_E3250);
    unsigned __int8 v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    unsigned __int8 v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v34 = v1 + 64;
  uint64_t v4 = -1LL;
  uint64_t v5 = -1LL << *(_BYTE *)(v1 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1LL << -(char)v5);
  }
  unint64_t v6 = v4 & *(void *)(v1 + 64);
  int64_t v33 = (unint64_t)(63 - v5) >> 6;
  uint64_t v7 = (char *)v42 + 8;
  uint64_t v8 = (char *)v39 + 8;
  swift_bridgeObjectRetain(v1);
  int64_t v9 = 0LL;
  uint64_t v32 = v1;
  while (1)
  {
    if (v6)
    {
      uint64_t v15 = (v6 - 1) & v6;
      unint64_t v16 = __clz(__rbit64(v6)) | (v9 << 6);
      int64_t v17 = v9;
    }

    else
    {
      int64_t v18 = v9 + 1;
      if (__OFADD__(v9, 1LL)) {
        goto LABEL_39;
      }
      if (v18 >= v33)
      {
LABEL_36:
        sub_8452C(v1);
        return;
      }

      unint64_t v19 = *(void *)(v34 + 8 * v18);
      int64_t v17 = v9 + 1;
      if (!v19)
      {
        int64_t v17 = v9 + 2;
        if (v9 + 2 >= v33) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v34 + 8 * v17);
        if (!v19)
        {
          int64_t v17 = v9 + 3;
          if (v9 + 3 >= v33) {
            goto LABEL_36;
          }
          unint64_t v19 = *(void *)(v34 + 8 * v17);
          if (!v19)
          {
            int64_t v17 = v9 + 4;
            if (v9 + 4 >= v33) {
              goto LABEL_36;
            }
            unint64_t v19 = *(void *)(v34 + 8 * v17);
            if (!v19)
            {
              int64_t v20 = v9 + 5;
              if (v9 + 5 >= v33) {
                goto LABEL_36;
              }
              unint64_t v19 = *(void *)(v34 + 8 * v20);
              if (!v19)
              {
                while (1)
                {
                  int64_t v17 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_40;
                  }
                  if (v17 >= v33) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = *(void *)(v34 + 8 * v17);
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v17 = v9 + 5;
            }
          }
        }
      }

uint64_t sub_8B538(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = type metadata accessor for MainActor(0LL);
  v6[2] = v9;
  v6[3] = static MainActor.shared.getter(v9);
  __int16 v12 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v10 = (void *)swift_task_alloc(a4[1]);
  void v6[4] = v10;
  *uint64_t v10 = v6;
  v10[1] = sub_8B5C0;
  return v12(a6);
}

uint64_t sub_8B5C0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 32LL));
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_8B630, v2, v3);
}

uint64_t sub_8B630()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_8B660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) == 1)
  {
    sub_8EC5C(a1, &qword_E3228);
    uint64_t v8 = "/usr/lib/swift/libswiftOSLog.dylib";
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      uint64_t v10 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      uint64_t v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v8 = (char *)(v15 | 0x1C00LL);
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9) {
      goto LABEL_3;
    }
  }

  uint64_t v12 = 0LL;
  uint64_t v14 = 0LL;
LABEL_6:
  uint64_t v16 = swift_allocObject(&unk_D8148, 32LL, 7LL);
  *(void *)(v16 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    int64_t v17 = v19;
    void v19[2] = v12;
    v19[3] = v14;
  }

  else
  {
    int64_t v17 = 0LL;
  }

  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_E3248, v16);
}

uint64_t sub_8B7AC(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_8B810;
  return v6(a1);
}

uint64_t sub_8B810()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_8B85C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_8B92C(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_8EC20((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_8EC20((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  sub_8F354(v12);
  return v7;
}

uint64_t sub_8B92C(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
            uint64_t result = 0LL;
            *a1 = (uint64_t)__dst;
            return result;
          }

          goto LABEL_17;
        }
      }
    }

uint64_t sub_8BAE4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_8BB78(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_8BD50(0, *(void *)(v2 + 16) + 1LL, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_8BD50(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_8BB78(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = sub_8BCEC(v4, 0LL);
      if (v4 < 0) {
        break;
      }
      uint64_t v6 = v5;
      uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0) {
        goto LABEL_14;
      }
      if (v7 == v4) {
        return v6;
      }
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  v10,  1122LL,  0);
      __break(1u);
LABEL_10:
      uint64_t v4 = String.UTF8View._foreignCount()();
      if (!v4) {
        return &_swiftEmptyArrayStorage;
      }
    }

    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  v10,  71LL,  0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    __break(1u);
  }

  else
  {
    return &_swiftEmptyArrayStorage;
  }

  return result;
}

void *sub_8BCEC(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_84544(&qword_E32A0);
  uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_8BD50(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_84544(&qword_E32A0);
    unsigned __int16 v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    unsigned __int16 v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  int v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }

uint64_t sub_8BE9C(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_8BEB4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

id sub_8BEE0(uint64_t a1)
{
  return [*(id *)(v1 + 16) reachabilityRequest:*(void *)(v1 + 24) updatedWithResult:a1];
}

uint64_t type metadata accessor for MessageReachabilityController()
{
  return objc_opt_self(&OBJC_CLASS____TtC12iMessageCore29MessageReachabilityController);
}

unint64_t sub_8BF14(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_8D3CC(a1, a2, v5);
}

uint64_t sub_8BF78(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v24, *(void *)(*v3 + 40LL));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v7 + 48);
    size_t v12 = (void *)(v11 + 16 * v10);
    uint64_t v13 = v12[1];
    BOOL v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0LL) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      unsigned __int8 v15 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0LL;
    }

    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        break;
      }
      unint64_t v19 = (void *)(v11 + 16 * v10);
      uint64_t v20 = v19[1];
      BOOL v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0LL) & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  swift_bridgeObjectRelease(v7);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *unint64_t v3 = 0x8000000000000000LL;
  swift_bridgeObjectRetain(a3);
  sub_8CDD8(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t v23 = *v3;
  *unint64_t v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

unint64_t *sub_8C124(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 64);
    uint64_t v41 = a1 + 64;
    uint64_t v5 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v39 = ~v5;
    if (-v5 < 64) {
      uint64_t v6 = ~(-1LL << -(char)v5);
    }
    else {
      uint64_t v6 = -1LL;
    }
    unint64_t v7 = v6 & v4;
    int64_t v40 = (unint64_t)(63 - v5) >> 6;
    uint64_t v8 = a2 + 56;
    swift_bridgeObjectRetain(a1);
    int64_t v9 = 0LL;
    while (1)
    {
      if (v7)
      {
        unint64_t v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v11 = v10 | (v9 << 6);
      }

      else
      {
        int64_t v12 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
          __break(1u);
          goto LABEL_49;
        }

        if (v12 >= v40) {
          goto LABEL_47;
        }
        unint64_t v13 = *(void *)(v41 + 8 * v12);
        int64_t v14 = v9 + 1;
        if (!v13)
        {
          int64_t v14 = v9 + 2;
          if (v9 + 2 >= v40) {
            goto LABEL_47;
          }
          unint64_t v13 = *(void *)(v41 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 3;
            if (v9 + 3 >= v40) {
              goto LABEL_47;
            }
            unint64_t v13 = *(void *)(v41 + 8 * v14);
            if (!v13)
            {
              int64_t v14 = v9 + 4;
              if (v9 + 4 >= v40) {
                goto LABEL_47;
              }
              unint64_t v13 = *(void *)(v41 + 8 * v14);
              if (!v13)
              {
                int64_t v15 = v9 + 5;
                if (v9 + 5 >= v40)
                {
LABEL_47:
                  sub_8452C(a1);
                  return (unint64_t *)v2;
                }

                unint64_t v13 = *(void *)(v41 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    int64_t v14 = v15 + 1;
                    if (__OFADD__(v15, 1LL)) {
                      break;
                    }
                    if (v14 >= v40) {
                      goto LABEL_47;
                    }
                    unint64_t v13 = *(void *)(v41 + 8 * v14);
                    ++v15;
                    if (v13) {
                      goto LABEL_24;
                    }
                  }

LABEL_49:
                  __break(1u);
                }

                int64_t v14 = v9 + 5;
              }
            }
          }
        }

uint64_t sub_8C58C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_84544(&qword_E3200);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    unsigned int v32 = v2;
    unint64_t v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }

      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v10) {
          goto LABEL_36;
        }
        unint64_t v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v10) {
            goto LABEL_36;
          }
          unint64_t v19 = v33[v13];
          if (!v19)
          {
            int64_t v13 = v18 + 2;
            if (v18 + 2 >= v10) {
              goto LABEL_36;
            }
            unint64_t v19 = v33[v13];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v32;
                uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
                if (v31 > 63) {
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *unint64_t v33 = -1LL << v31;
                }
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v13 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v13 >= v10) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v33[v13];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v13 = v20;
            }
          }
        }

unint64_t *sub_8C868( unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  int64_t v40 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v42 = a3 + 56;
  while (2)
  {
    uint64_t v39 = v8;
    do
    {
      while (1)
      {
        int64_t v9 = a5[3];
        unint64_t v10 = a5[4];
        if (v10)
        {
          uint64_t v11 = (v10 - 1) & v10;
          unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
        }

        else
        {
          int64_t v13 = v9 + 1;
          if (__OFADD__(v9, 1LL))
          {
            __break(1u);
            goto LABEL_45;
          }

          int64_t v14 = (unint64_t)(a5[2] + 64LL) >> 6;
          int64_t v15 = a5[3];
          if (v13 >= v14) {
            goto LABEL_43;
          }
          uint64_t v16 = a5[1];
          unint64_t v17 = *(void *)(v16 + 8 * v13);
          if (!v17)
          {
            int64_t v15 = v9 + 1;
            if (v9 + 2 >= v14) {
              goto LABEL_43;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v9 + 2));
            if (v17)
            {
              int64_t v13 = v9 + 2;
            }

            else
            {
              int64_t v15 = v9 + 2;
              if (v9 + 3 >= v14) {
                goto LABEL_43;
              }
              unint64_t v17 = *(void *)(v16 + 8 * (v9 + 3));
              if (v17)
              {
                int64_t v13 = v9 + 3;
              }

              else
              {
                int64_t v13 = v9 + 4;
                int64_t v15 = v9 + 3;
                if (v9 + 4 >= v14) {
                  goto LABEL_43;
                }
                unint64_t v17 = *(void *)(v16 + 8 * v13);
                if (!v17)
                {
                  int64_t v15 = v14 - 1;
                  int64_t v18 = v9 + 5;
                  while (v14 != v18)
                  {
                    unint64_t v17 = *(void *)(v16 + 8 * v18++);
                    if (v17)
                    {
                      int64_t v13 = v18 - 1;
                      goto LABEL_21;
                    }
                  }

LABEL_43:
                  a5[3] = v15;
                  a5[4] = 0LL;
                  swift_retain();
                  return (unint64_t *)sub_8CB44(v40, a2, v39, a3);
                }
              }
            }
          }

Swift::Int sub_8CB44(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v8;
  }

  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_84544(&qword_E3200);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v5);
  uint64_t v8 = (void *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0LL;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0LL;
  Swift::Int v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }

    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1LL)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }

uint64_t sub_8CDD8(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_8C58C(v11);
  }

  else
  {
    if (v10 > v9)
    {
      Swift::Int result = (uint64_t)sub_8CF70();
      goto LABEL_22;
    }

    sub_8D120(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v28, *(void *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  Swift::Int result = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  uint64_t v14 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v15 = *(void *)(v12 + 48);
    uint64_t v16 = (void *)(v15 + 16 * a3);
    uint64_t v17 = v16[1];
    BOOL v18 = *v16 == v8 && v17 == a2;
    if (v18 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0LL), (result & 1) != 0))
    {
LABEL_21:
      Swift::Int result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v20 = (void *)(v15 + 16 * a3);
        uint64_t v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0LL);
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_21;
      }
    }
  }

void *sub_8CF70()
{
  uint64_t v1 = v0;
  sub_84544(&qword_E3200);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    Swift::Int result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  Swift::Int result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }

uint64_t sub_8D120(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_84544(&qword_E3200);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release(v3);
LABEL_38:
    uint64_t *v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  unint64_t v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v32) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v32) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v13);
      if (!v19)
      {
        int64_t v13 = v18 + 2;
        if (v18 + 2 >= v32) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v13);
        if (!v19) {
          break;
        }
      }
    }

unint64_t sub_8D3CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    unint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        int64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }

      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }

  return v6;
}

uint64_t sub_8D4AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_8BF14(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v10 = *v3;
  uint64_t v14 = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_8E2F8(&qword_E3250);
    uint64_t v10 = v14;
  }

  swift_bridgeObjectRelease(*(void *)(*(void *)(v10 + 48) + 16 * v7 + 8));
  uint64_t v11 = *(void *)(*(void *)(v10 + 56) + 8 * v7);
  sub_8DC94(v7, v10);
  uint64_t v12 = *v3;
  *uint64_t v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

void *sub_8D580(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_84544(&qword_E3080);
  uint64_t v4 = (void *)swift_allocObject(v3, 16 * v1 + 32, 7LL);
  int64_t v5 = j__malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 17;
  }
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  uint64_t v7 = sub_8E4A0((uint64_t)&v10, v4 + 4, v1, a1);
  uint64_t v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_8452C(v8);
  if (v7 != v1)
  {
    __break(1u);
    return &_swiftEmptyArrayStorage;
  }

  return v4;
}

Swift::Int sub_8D664(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_84544(&qword_E3220);
  char v43 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v42 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v40 = v3;
  int64_t v41 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v24 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v24 >= v41) {
      break;
    }
    unint64_t v25 = (void *)(v5 + 64);
    unint64_t v26 = *(void *)(v42 + 8 * v24);
    ++v14;
    if (!v26)
    {
      int64_t v14 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_36;
      }
      unint64_t v26 = *(void *)(v42 + 8 * v14);
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v40;
          if ((v43 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v26 = *(void *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            int64_t v14 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v41) {
              goto LABEL_36;
            }
            unint64_t v26 = *(void *)(v42 + 8 * v14);
            ++v27;
            if (v26) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v27;
      }
    }

uint64_t sub_8D988(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_84544(&qword_E3298);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v37) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v37) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

unint64_t sub_8DC94(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v26, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease(v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          unint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *uint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          unint64_t v18 = (void *)(v17 + 8 * v3);
          uint64_t v19 = (void *)(v17 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *unint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }

uint64_t sub_8DE68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_8BF14(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_8E140();
LABEL_7:
    unint64_t v20 = (void *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease(v21[1]);
      *uint64_t v21 = a1;
      v21[1] = a2;
      return result;
    }

void sub_8DFDC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_8BF14(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_8E2F8(&qword_E3298);
LABEL_7:
    char v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }

void *sub_8E140()
{
  uint64_t v1 = v0;
  sub_84544(&qword_E3220);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }

id sub_8E2F8(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_84544(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v3);
    uint64_t *v2 = v5;
    return result;
  }

  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }

uint64_t sub_8E4A0(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }

    v11 += 2;
    id result = swift_bridgeObjectRetain(v21);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

LABEL_41:
  __break(1u);
  return result;
}

char *sub_8E69C(uint64_t a1)
{
  return sub_8413C(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

Swift::Int sub_8E6B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_84544(&qword_E3200);
    uint64_t v3 = static _SetStorage.allocate(capacity:)(v1);
    uint64_t v4 = 0LL;
    uint64_t v5 = v3 + 56;
    uint64_t v27 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v27 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      Hasher.init(_seed:)(v28, *(void *)(v3 + 40));
      swift_bridgeObjectRetain(v7);
      String.hash(into:)(v28, v8, v7);
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1LL << *(_BYTE *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1LL << v11;
      if (((1LL << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        unint64_t v16 = (void *)(v15 + 16 * v11);
        uint64_t v17 = v16[1];
        BOOL v18 = *v16 == v8 && v17 == v7;
        if (v18 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, v7, 0LL), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease(v7);
          goto LABEL_4;
        }

        uint64_t v19 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v19;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1LL << v11;
          if ((v13 & (1LL << v11)) == 0) {
            break;
          }
          uint64_t v20 = (void *)(v15 + 16 * v11);
          uint64_t v21 = v20[1];
          if (*v20 != v8 || v21 != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, v7, 0LL);
            if ((result & 1) == 0) {
              continue;
            }
          }

          goto LABEL_3;
        }
      }

      *(void *)(v5 + 8 * v12) = v14 | v13;
      int64_t v23 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      void *v23 = v8;
      v23[1] = v7;
      uint64_t v24 = *(void *)(v3 + 16);
      BOOL v25 = __OFADD__(v24, 1LL);
      uint64_t v26 = v24 + 1;
      if (v25)
      {
        __break(1u);
        return result;
      }

      *(void *)(v3 + 16) = v26;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }

  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_8E850()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_8E874()
{
  swift_release(*(void *)(v0 + 88));
  swift_bridgeObjectRelease(*(void *)(v0 + 96));
  swift_bridgeObjectRelease(*(void *)(v0 + 112));
  return swift_deallocObject(v0, 120LL, 7LL);
}

uint64_t sub_8E8D0(uint64_t a1)
{
  __int128 v12 = *(_OWORD *)(v1 + 32);
  __int128 v13 = *(_OWORD *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 48);
  char v5 = *(_BYTE *)(v1 + 72);
  __int128 v11 = *(_OWORD *)(v1 + 96);
  uint64_t v6 = *(void *)(v1 + 112);
  uint64_t v7 = swift_task_alloc(dword_E320C);
  __int128 v8 = *(_OWORD *)(v1 + 56);
  __int128 v9 = *(_OWORD *)(v1 + 80);
  *(void *)(v2 + 16) = v7;
  *(void *)uint64_t v7 = v2;
  *(void *)(v7 + _Block_object_dispose(va, 8) = sub_8E990;
  *(void *)(v7 + 136) = v6;
  *(_OWORD *)(v7 + 120) = v11;
  *(_OWORD *)(v7 + 104) = v9;
  *(_BYTE *)(v7 + 169) = v5;
  *(_OWORD *)(v7 + 8_Block_object_dispose(va, 8) = v8;
  *(void *)(v7 + 80) = v4;
  *(_OWORD *)(v7 + 4_Block_object_dispose(va, 8) = v13;
  *(_OWORD *)(v7 + 64) = v12;
  *(void *)(v7 + 40) = a1;
  return swift_task_switch(sub_8ABD8, 0LL, 0LL);
}

uint64_t sub_8E990()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_8E9D8()
{
  return swift_deallocObject(v0, 88LL, 7LL);
}

void sub_8EA1C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_8EA54()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_8EA88(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  __int128 v9 = (void *)swift_task_alloc(dword_E3234);
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_8F3B4;
  return sub_8B538(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_8EB08()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_8EB2C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_E3244);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_8EB9C;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_E3240 + dword_E3240))(a1, v4);
}

uint64_t sub_8EB9C()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_8EBE4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_8EC20(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_8EC5C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_84544(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_8EC98(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_8BF78(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }

    while (v2);
    return v8;
  }

  return result;
}

id sub_8ED2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9 = sub_86A0C((uint64_t)&_swiftEmptyArrayStorage);
  BOOL v10 = *(void *)(a4 + 16) != 0LL;
  id v11 = objc_allocWithZone(&OBJC_CLASS___IMServiceReachabilityResult);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  sub_8448C(0LL, &qword_E3290, &OBJC_CLASS___IMServiceReachabilityHandleResult_ptr);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v9);
  id v14 = [v11 initWithService:v12 error:0 handleResults:isa isFinal:0 allAreReachable:v10 didCheckServer:0];

  [v14 setSelfKTData:a3];
  sub_8448C(0LL, &qword_E3260, &OBJC_CLASS___IDSIDInfoResult_ptr);
  Class v15 = Dictionary._bridgeToObjectiveC()().super.isa;
  [v14 setKtData:v15];

  uint64_t v16 = swift_bridgeObjectRetain(a5);
  uint64_t v17 = sub_8EC98(v16);
  swift_bridgeObjectRelease(a5);
  uint64_t v18 = swift_bridgeObjectRetain(a4);
  uint64_t v19 = sub_8C124(v18, v17);
  swift_bridgeObjectRelease(a4);
  if (v19[2])
  {
    if (qword_E3090 != -1) {
      swift_once(&qword_E3090, sub_848F8);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    sub_8BE9C(v20, (uint64_t)qword_E3098);
    uint64_t v21 = swift_retain();
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v25 = swift_slowAlloc(32LL, -1LL);
      uint64_t v32 = v25;
      *(_DWORD *)uint64_t v24 = 136315138;
      uint64_t v26 = swift_retain();
      uint64_t v27 = Set.description.getter(v26, &type metadata for String, &protocol witness table for String);
      unint64_t v29 = v28;
      swift_release(v19);
      uint64_t v31 = sub_8B85C(v27, v29, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v24 + 4, v24 + 12);
      swift_release_n(v19, 2LL);
      swift_bridgeObjectRelease(v29);
      _os_log_impl(&dword_0, v22, v23, "IDS didn't give us back all the results we asked about: %s", v24, 0xCu);
      swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1LL, -1LL);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v19, 2LL);
    }

    [v14 setAllAreReachable:0];
  }

  else
  {
    swift_release(v19);
  }

  return v14;
}

unint64_t sub_8F088()
{
  unint64_t result = qword_E3278;
  if (!qword_E3278)
  {
    uint64_t v1 = sub_8F0D4(&qword_E3270);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Keys, v1);
    atomic_store(result, (unint64_t *)&qword_E3278);
  }

  return result;
}

uint64_t sub_8F0D4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

unint64_t sub_8F118()
{
  unint64_t result = qword_E3280;
  if (!qword_E3280)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_E3280);
  }

  return result;
}

uint64_t sub_8F15C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return 0LL;
  }
  uint64_t v6 = 0LL;
  for (unint64_t i = (void *)(a1 + 40); ; i += 2)
  {
    BOOL v8 = *(i - 1) == a2 && *i == a3;
    if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      break;
    }
    if (v3 == ++v6) {
      return 0LL;
    }
  }

  return v6;
}

void *sub_8F1EC(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  int isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *((void *)v4 + 3) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_8413C(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }

  unint64_t result = (void *)swift_arrayDestroy(&v4[16 * a1 + 32], v7, &type metadata for String);
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = *((void *)v4 + 2);
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000LL) == 0)
  {
    uint64_t v16 = &v4[16 * a2 + 32];
    if (a1 != a2 || &v4[16 * a1 + 32] >= &v16[16 * v15]) {
      unint64_t result = memmove(&v4[16 * a1 + 32], v16, 16 * v15);
    }
    uint64_t v17 = *((void *)v4 + 2);
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      *((void *)v4 + 2) = v18;
LABEL_20:
      uint64_t *v2 = v4;
      return result;
    }

    goto LABEL_27;
  }

uint64_t sub_8F354(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t *sub_8F374(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

void sub_8F3B8(void *a1)
{
}

void sub_8F3D8()
{
}

void sub_8F458()
{
}

void sub_8F4D8()
{
}

void sub_8F504( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_8F56C( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_8F5D0()
{
}

void sub_8F5FC()
{
}

void sub_8F628( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_8F68C()
{
}

void sub_8F6B8()
{
}

void sub_8F6E4()
{
}

void sub_8F764(void *a1)
{
}

void sub_8F780()
{
}

void sub_8F7F4()
{
}

void sub_8F868()
{
}

void sub_8F894()
{
}

void sub_8F8C0()
{
}

void sub_8F8EC( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_8F950( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_8F9B4( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_8FA18()
{
}

void sub_8FA7C()
{
}

void sub_8FAFC()
{
}

void sub_8FB7C()
{
}

void sub_8FBFC()
{
}

void sub_8FC80()
{
}

void sub_8FCEC()
{
}

void sub_8FD4C()
{
}

void sub_8FDB8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_8FE28()
{
}

void sub_8FE54()
{
}

void sub_8FE80()
{
}

void sub_8FEE4()
{
}

void sub_8FF48()
{
}

void sub_8FFCC()
{
}

void sub_9004C()
{
}

void sub_900CC()
{
}

void sub_9014C()
{
}

void sub_901CC()
{
}

void sub_9024C()
{
}

void sub_902CC(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_fault_impl(&dword_0, log, OS_LOG_TYPE_FAULT, "_handleIncomingMessageError: %@", (uint8_t *)&v3, 0x16u);
}

id objc_msgSend_APNSMessageDeliveryClass(void *a1, const char *a2, ...)
{
  return _[a1 APNSMessageDeliveryClass];
}

id objc_msgSend_AuxGUIDFromFileTransferGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "AuxGUIDFromFileTransferGUID:");
}

id objc_msgSend_AuxHTML(void *a1, const char *a2, ...)
{
  return _[a1 AuxHTML];
}

id objc_msgSend_BIAContext(void *a1, const char *a2, ...)
{
  return _[a1 BIAContext];
}

id objc_msgSend_GUID(void *a1, const char *a2, ...)
{
  return _[a1 GUID];
}

id objc_msgSend_ID(void *a1, const char *a2, ...)
{
  return _[a1 ID];
}

id objc_msgSend_IDSServerBagiMessageSharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 IDSServerBagiMessageSharedInstance];
}

id objc_msgSend_IMIsEagerUploadEnabledForPhoneNumber_simID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "IMIsEagerUploadEnabledForPhoneNumber:simID:");
}

id objc_msgSend_MIMETypeOfPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "MIMETypeOfPath:");
}

id objc_msgSend_NicknameWithRecordID_URI_decryptionKey_wallpaperDataTag_wallpaperLowResDataTag_wallpaperMetadataTag_hasWallpaperUpdate_dropNicknameForUnknownContacts_withCompletionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "NicknameWithRecordID:URI:decryptionKey:wallpaperDataTag:wallpaperLowResDataTag:wallpaperMetadataTag:hasWallpa perUpdate:dropNicknameForUnknownContacts:withCompletionBlock:");
}

id objc_msgSend_URI(void *a1, const char *a2, ...)
{
  return _[a1 URI];
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _[a1 URL];
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UTITypeOfPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UTITypeOfPath:");
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _[a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend__FTAWDLogForMessage_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_FTAWDLogForMessage:withContext:");
}

id objc_msgSend__FTCopyGzippedData(void *a1, const char *a2, ...)
{
  return _[a1 _FTCopyGzippedData];
}

id objc_msgSend__FTDataFromHexString(void *a1, const char *a2, ...)
{
  return _[a1 _FTDataFromHexString];
}

id objc_msgSend__FTOptionallyDecompressData(void *a1, const char *a2, ...)
{
  return _[a1 _FTOptionallyDecompressData];
}

id objc_msgSend__IDSDataFromBase64String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_IDSDataFromBase64String:");
}

id objc_msgSend__IDsFromURIs(void *a1, const char *a2, ...)
{
  return _[a1 _IDsFromURIs];
}

id objc_msgSend__URIFromCanonicalizedPhoneNumber(void *a1, const char *a2, ...)
{
  return _[a1 _URIFromCanonicalizedPhoneNumber];
}

id objc_msgSend__URIsForChatParticipants_fromID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_URIsForChatParticipants:fromID:");
}

id objc_msgSend__URIsFromApplicationData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_URIsFromApplicationData:");
}

id objc_msgSend__URIsFromHandles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_URIsFromHandles:");
}

id objc_msgSend__URIsFromIDs(void *a1, const char *a2, ...)
{
  return _[a1 _URIsFromIDs];
}

id objc_msgSend___imArrayByApplyingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__imArrayByApplyingBlock:");
}

id objc_msgSend___imArrayByFilteringWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__imArrayByFilteringWithBlock:");
}

id objc_msgSend___imFirstObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__imFirstObject");
}

id objc_msgSend___imHexString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__imHexString");
}

id objc_msgSend___imSetFromArray(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__imSetFromArray");
}

id objc_msgSend___im_apfsCompatibleFilename(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_apfsCompatibleFilename");
}

id objc_msgSend___im_associatedMessagePluginBundleID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_associatedMessagePluginBundleID");
}

id objc_msgSend___im_attributedStringByAppendingFileTransfers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_attributedStringByAppendingFileTransfers:");
}

id objc_msgSend___im_attributedStringByAssigningMessagePartNumbers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_attributedStringByAssigningMessagePartNumbers");
}

id objc_msgSend___im_attributedStringByReplacingAdaptiveImageGlyphFileTransfersUsingFileTransferProvider_replacementTextProvider_removedTransferGUIDsOut_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "__im_attributedStringByReplacingAdaptiveImageGlyphFileTransfersUsingFileTransferProvider:replacementTextProvi der:removedTransferGUIDsOut:");
}

id objc_msgSend___im_attributedStringWithFileTransfers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_attributedStringWithFileTransfers:");
}

id objc_msgSend___im_canonicalIDSIDsFromAddresses(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_canonicalIDSIDsFromAddresses");
}

id objc_msgSend___im_engramDataRepresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_engramDataRepresentation");
}

id objc_msgSend___im_engramStringRepresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_engramStringRepresentation");
}

id objc_msgSend___im_iMessageDateFromTimeStamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_iMessageDateFromTimeStamp:");
}

id objc_msgSend___im_isOnlyAdaptiveImageGlyphFileTransfersAndWhitespaceUsingFileTransferProvider_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_isOnlyAdaptiveImageGlyphFileTransfersAndWhitespaceUsingFileTransferProvider:");
}

id objc_msgSend___im_messagePartMatchingPartIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_messagePartMatchingPartIndex:");
}

id objc_msgSend___im_messageTextByAddingMessagePart_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_messageTextByAddingMessagePart:atIndex:");
}

id objc_msgSend___im_nanosecondTimeIntervalSinceEpochTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_nanosecondTimeIntervalSinceEpochTime");
}

id objc_msgSend___im_transferGUIDsInAttributedString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_transferGUIDsInAttributedString");
}

id objc_msgSend___im_visitMessageParts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__im_visitMessageParts:");
}

id objc_msgSend__addGroupPhotoRefreshDate_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addGroupPhotoRefreshDate:context:");
}

id objc_msgSend__addOriginalTimestampIfNecessary_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addOriginalTimestampIfNecessary:context:");
}

id objc_msgSend__addRemoveParticipantsToENGroupForChat_participantsToAdd_participantsToRemove_service_fromID_attemptCount_completion_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_addRemoveParticipantsToENGroupForChat:participantsToAdd:participantsToRemove:service:fromID:attemptCount:completion:");
}

id objc_msgSend__amIMentioned_inMentions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_amIMentioned:inMentions:");
}

id objc_msgSend__appearsToBeEmail(void *a1, const char *a2, ...)
{
  return _[a1 _appearsToBeEmail];
}

id objc_msgSend__appendFilePathsWithGUIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appendFilePathsWithGUIDs:");
}

id objc_msgSend__appendMyNicknameToMessageDictionary_forMessage_chat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appendMyNicknameToMessageDictionary:forMessage:chat:");
}

id objc_msgSend__appendOffGridAvailabilityPropertiesToMessageDictionary_participantHandleID_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appendOffGridAvailabilityPropertiesToMessageDictionary:participantHandleID:");
}

id objc_msgSend__appendRecipientAvailabilityVerificationInfoToMessageDictionary_forChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appendRecipientAvailabilityVerificationInfoToMessageDictionary:forChat:");
}

id objc_msgSend__appendRecipientNicknameTruncatedRecordIDToMessageDictionary_forChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appendRecipientNicknameTruncatedRecordIDToMessageDictionary:forChat:");
}

id objc_msgSend__appendSeenOffGridStatusToMessageDictionary_forChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appendSeenOffGridStatusToMessageDictionary:forChat:");
}

id objc_msgSend__arrayForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_arrayForKey:");
}

id objc_msgSend__associatedMessageFallbackHashForMessageItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_associatedMessageFallbackHashForMessageItem:");
}

id objc_msgSend__autoReportChatAsUnknown_chatIsNew_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_autoReportChatAsUnknown:chatIsNew:");
}

id objc_msgSend__bestGuessURI(void *a1, const char *a2, ...)
{
  return _[a1 _bestGuessURI];
}

id objc_msgSend__buildSendMessageContextWithChatIdentifier_withChatStyle_withServiceSession_withMessage_destinations_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_buildSendMessageContextWithChatIdentifier:withChatStyle:withServiceSession:withMessage:destinations:");
}

id objc_msgSend__callerURIForChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_callerURIForChat:");
}

id objc_msgSend__canSendMessagesWithEngram(void *a1, const char *a2, ...)
{
  return _[a1 _canSendMessagesWithEngram];
}

id objc_msgSend__capabilitiesForTransfers_supportsASTC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_capabilitiesForTransfers:supportsASTC:");
}

id objc_msgSend__chatForChatIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_chatForChatIdentifier:");
}

id objc_msgSend__checkAndPerformLegacyAddRemove_participantsToAdd_participantsToRemove_service_fromIdentifier_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_checkAndPerformLegacyAddRemove:participantsToAdd:participantsToRemove:service:fromIdentifier:");
}

id objc_msgSend__checkAndSetUpContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkAndSetUpContext:");
}

id objc_msgSend__checkForParticipantLeaveOnENGroup_groupMessagePayload_toIdentifier_fromIdentifier_service_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_checkForParticipantLeaveOnENGroup:groupMessagePayload:toIdentifier:fromIdentifier:service:");
}

id objc_msgSend__checkGlobalReadReceiptValueAndUpdateIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkGlobalReadReceiptValueAndUpdateIfNeeded:");
}

id objc_msgSend__checkStickerRepositioningMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkStickerRepositioningMetadata:");
}

id objc_msgSend__clearDowngradeMarkersForChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearDowngradeMarkersForChat:");
}

id objc_msgSend__combinedTransferUserInfoForAttachmentSendContexts_transfer_message_commonCapabilities_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_combinedTransferUserInfoForAttachmentSendContexts:transfer:message:commonCapabilities:");
}

id objc_msgSend__compressedAttributionInfoForMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_compressedAttributionInfoForMessage:");
}

id objc_msgSend__computeFlagsForIncomingMessage_isFromMe_unfinished_isAudioMessage_isAutoReply_isExpirable_messageSource_participants_hasUnseenMention_isSOS_isCritical_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_computeFlagsForIncomingMessage:isFromMe:unfinished:isAudioMessage:isAutoReply:isExpirable:messageSource:part icipants:hasUnseenMention:isSOS:isCritical:");
}

id objc_msgSend__computeRegPropertiesForNewFeatures_currentRegProperties_currentInterestingProp_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_computeRegPropertiesForNewFeatures:currentRegProperties:currentInterestingProp:");
}

id objc_msgSend__configurePrimaryServiceSessionWithAccount_service_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configurePrimaryServiceSessionWithAccount:service:");
}

id objc_msgSend__convergesDisplayNames(void *a1, const char *a2, ...)
{
  return _[a1 _convergesDisplayNames];
}

id objc_msgSend__copyGenmojiHEICFileToTemporaryDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyGenmojiHEICFileToTemporaryDirectory:");
}

id objc_msgSend__copyiMessageDictionaryForLogging(void *a1, const char *a2, ...)
{
  return _[a1 _copyiMessageDictionaryForLogging];
}

id objc_msgSend__createApplicationDataForDestinations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createApplicationDataForDestinations:");
}

id objc_msgSend__createEngramGroupForChat_fromID_service_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createEngramGroupForChat:fromID:service:completion:");
}

id objc_msgSend__createGroupForExistingChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createGroupForExistingChat:");
}

id objc_msgSend__createParticipantsAndUpdateGroup_addParticipantsURIs_removeParticipantURIs_fromID_service_completion_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_createParticipantsAndUpdateGroup:addParticipantsURIs:removeParticipantURIs:fromID:service:completion:");
}

id objc_msgSend__createPayloadRequestDictionaryForMessageGUID_requestKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createPayloadRequestDictionaryForMessageGUID:requestKey:");
}

id objc_msgSend__createPayloadResponseDictionaryWithDictionary_payloadData_attachments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createPayloadResponseDictionaryWithDictionary:payloadData:attachments:");
}

id objc_msgSend__currentCachedRemoteDevicesForDestinations_service_listenerID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_currentCachedRemoteDevicesForDestinations:service:listenerID:");
}

id objc_msgSend__dataForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dataForKey:");
}

id objc_msgSend__daysToWaitBeforeCreatingEngroup(void *a1, const char *a2, ...)
{
  return _[a1 _daysToWaitBeforeCreatingEngroup];
}

id objc_msgSend__deleteTransferInfoForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deleteTransferInfoForKey:");
}

id objc_msgSend__deliverMessage_withContext_withBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deliverMessage:withContext:withBlock:");
}

id objc_msgSend__dictionaryForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dictionaryForKey:");
}

id objc_msgSend__dictionaryToSend(void *a1, const char *a2, ...)
{
  return _[a1 _dictionaryToSend];
}

id objc_msgSend__didSendMessage_withContext_forceDate_fromStorage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didSendMessage:withContext:forceDate:fromStorage:");
}

id objc_msgSend__downloadRestrictionForUTIType_fileSize_qualityType_isSticker_forceAutoDownloadIfPossible_lqmEnabled_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_downloadRestrictionForUTIType:fileSize:qualityType:isSticker:forceAutoDownloadIfPossible:lqmEnabled:");
}

id objc_msgSend__downloadRestrictionForUTIType_fileSize_qualityType_isSticker_lqmEnabled_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_downloadRestrictionForUTIType:fileSize:qualityType:isSticker:lqmEnabled:");
}

id objc_msgSend__enableStrictSecureDecodingMode(void *a1, const char *a2, ...)
{
  return _[a1 _enableStrictSecureDecodingMode];
}

id objc_msgSend__engroupForChat_idsAccount_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_engroupForChat:idsAccount:completion:");
}

id objc_msgSend__enparticipantsForDestinations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enparticipantsForDestinations:completion:");
}

id objc_msgSend__enqueueBlock_withTimeout_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enqueueBlock:withTimeout:description:");
}

id objc_msgSend__enqueueSendMessageWorkBlock_forURIs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enqueueSendMessageWorkBlock:forURIs:");
}

id objc_msgSend__enqueueUpdateBlock_willSendBlock_identifier_callbackID_messageCommandOption_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enqueueUpdateBlock:willSendBlock:identifier:callbackID:messageCommandOption:");
}

id objc_msgSend__failSendingMessageIfNeeded_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_failSendingMessageIfNeeded:withContext:");
}

id objc_msgSend__failuresForID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_failuresForID:");
}

id objc_msgSend__fallbackMessageItemFromLinkMetadata_originalMessageItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fallbackMessageItemFromLinkMetadata:originalMessageItem:");
}

id objc_msgSend__fallbackMesssageItemByConvertingGenmojiToUnknownEmojiCharacterInOriginalMessageItem_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fallbackMesssageItemByConvertingGenmojiToUnknownEmojiCharacterInOriginalMessageItem:");
}

id objc_msgSend__fileHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fileHash:");
}

id objc_msgSend__fileTransferGUIDsInMessageBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fileTransferGUIDsInMessageBody:");
}

id objc_msgSend__findChatFromIdentifier_toIdentifier_displayName_participants_groupID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_findChatFromIdentifier:toIdentifier:displayName:participants:groupID:");
}

id objc_msgSend__firstiMessageChat(void *a1, const char *a2, ...)
{
  return _[a1 _firstiMessageChat];
}

id objc_msgSend__fixParticipantsForChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fixParticipantsForChat:");
}

id objc_msgSend__flushQueuedMessageWrapperBlocks(void *a1, const char *a2, ...)
{
  return _[a1 _flushQueuedMessageWrapperBlocks];
}

id objc_msgSend__forwardP2PGroupCommand_fromPerson_toPerson_toGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forwardP2PGroupCommand:fromPerson:toPerson:toGroup:");
}

id objc_msgSend__forwardP2PGroupCommand_fromPerson_toPerson_toGroup_toToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forwardP2PGroupCommand:fromPerson:toPerson:toGroup:toToken:");
}

id objc_msgSend__forwardP2PGroupCommand_fromPerson_toPerson_toGroup_toToken_messageID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forwardP2PGroupCommand:fromPerson:toPerson:toGroup:toToken:messageID:");
}

id objc_msgSend__generateAndStoreGroupActionItemForChat_sender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_generateAndStoreGroupActionItemForChat:sender:");
}

id objc_msgSend__getQueueIdentifierFromGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getQueueIdentifierFromGUID:");
}

id objc_msgSend__groupPhotoRequestRateLimit(void *a1, const char *a2, ...)
{
  return _[a1 _groupPhotoRequestRateLimit];
}

id objc_msgSend__handleDeleteCommandWithMessageDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDeleteCommandWithMessageDictionary:");
}

id objc_msgSend__handleDeliveryFailureForMessage_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDeliveryFailureForMessage:withContext:");
}

id objc_msgSend__handleDeviceRegistrationForMessage_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDeviceRegistrationForMessage:withContext:");
}

id objc_msgSend__handleFileTransfer_acceptedWithPath_autoRename_overwrite_options_postNotification_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleFileTransfer:acceptedWithPath:autoRename:overwrite:options:postNotification:");
}

id objc_msgSend__handleGroupVisualIdentityRequest_fromParticipants_groupID_identifier_session_toIdentifier_fromToken_requestGUID_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_handleGroupVisualIdentityRequest:fromParticipants:groupID:identifier:session:toIdentifier:fromToken:requestGUID:");
}

id objc_msgSend__handleIDsForDestinations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleIDsForDestinations:");
}

id objc_msgSend__handleIsMeToMeForMessage_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleIsMeToMeForMessage:withContext:");
}

id objc_msgSend__handleMessageSentToSelf_chatIdentifier_style_isLocal_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleMessageSentToSelf:chatIdentifier:style:isLocal:account:");
}

id objc_msgSend__handleMessageSentToSelf_withContext_isLocal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleMessageSentToSelf:withContext:isLocal:");
}

id objc_msgSend__handleNicknameReceived_fromIdentifier_withMessageItem_isSnapTrustedUser_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleNicknameReceived:fromIdentifier:withMessageItem:isSnapTrustedUser:");
}

id objc_msgSend__handleScheduledMessageSendFailure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleScheduledMessageSendFailure:");
}

id objc_msgSend__handleTypingIndicatorMessage_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleTypingIndicatorMessage:withContext:");
}

id objc_msgSend__handleUpdateNotificationTimeManagerForMessage_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleUpdateNotificationTimeManagerForMessage:withContext:");
}

id objc_msgSend__hasRecentlyMessaged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hasRecentlyMessaged:");
}

id objc_msgSend__hasValidSendParametersForMessage_toChat_fromID_fromAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hasValidSendParametersForMessage:toChat:fromID:fromAccount:");
}

id objc_msgSend__incrementDecryptionFailureForID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_incrementDecryptionFailureForID:");
}

id objc_msgSend__initiateTelephonyConversationForMessage_chatIdentifier_chatStyle_onSession_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initiateTelephonyConversationForMessage:chatIdentifier:chatStyle:onSession:");
}

id objc_msgSend__isAllowlistedUnencryptedSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isAllowlistedUnencryptedSender:");
}

id objc_msgSend__isDeviceRegisteredForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isDeviceRegisteredForAccount:");
}

id objc_msgSend__isFromLinkedID_fromID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isFromLinkedID:fromID:");
}

id objc_msgSend__isRegisteredURI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isRegisteredURI:");
}

id objc_msgSend__keyTransparencyEnforcementDictionaryForChatIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_keyTransparencyEnforcementDictionaryForChatIdentifier:");
}

id objc_msgSend__lastAddressedURIForChatLogMetricIfNeededOnChat_withIDSAccount_withServiceSession_shouldLog_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_lastAddressedURIForChatLogMetricIfNeededOnChat:withIDSAccount:withServiceSession:shouldLog:");
}

id objc_msgSend__localizedBackwardsCompatibleExpressiveSendText(void *a1, const char *a2, ...)
{
  return _[a1 _localizedBackwardsCompatibleExpressiveSendText];
}

id objc_msgSend__logCompletedMessage_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_logCompletedMessage:withContext:");
}

id objc_msgSend__logLocalInfo(void *a1, const char *a2, ...)
{
  return _[a1 _logLocalInfo];
}

id objc_msgSend__maxCompressedPayloadDataLength(void *a1, const char *a2, ...)
{
  return _[a1 _maxCompressedPayloadDataLength];
}

id objc_msgSend__maxFailuresAllowed(void *a1, const char *a2, ...)
{
  return _[a1 _maxFailuresAllowed];
}

id objc_msgSend__messageDictionaryForDeleteCommandShouldResetPreference_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_messageDictionaryForDeleteCommandShouldResetPreference:");
}

id objc_msgSend__messageDictionaryToReflectWithDeliveryReceipt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_messageDictionaryToReflectWithDeliveryReceipt:");
}

id objc_msgSend__messageItemToConsumeForNewBreadcrumbMessage_outBreadcrumbItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_messageItemToConsumeForNewBreadcrumbMessage:outBreadcrumbItems:");
}

id objc_msgSend__messageRetryTimeout(void *a1, const char *a2, ...)
{
  return _[a1 _messageRetryTimeout];
}

id objc_msgSend__newSendContextForMessage_withChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_newSendContextForMessage:withChat:");
}

id objc_msgSend__nicknameFeatureEnabled(void *a1, const char *a2, ...)
{
  return _[a1 _nicknameFeatureEnabled];
}

id objc_msgSend__nonAdaptiveFileTransferForAdaptiveImageFileTransfer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nonAdaptiveFileTransferForAdaptiveImageFileTransfer:");
}

id objc_msgSend__notifyDidSendMessage_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyDidSendMessage:withContext:");
}

id objc_msgSend__notifyNameAndPhotoControllerOfMessage_onChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyNameAndPhotoControllerOfMessage:onChat:");
}

id objc_msgSend__notifyOfSendMessage_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyOfSendMessage:withContext:");
}

id objc_msgSend__numberForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_numberForKey:");
}

id objc_msgSend__numberOfOffGridCapableDevicesForDestination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_numberOfOffGridCapableDevicesForDestination:");
}

id objc_msgSend__originalTimestampWithinAcceptableWindow_timestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_originalTimestampWithinAcceptableWindow:timestamp:");
}

id objc_msgSend__participantsContainBizID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_participantsContainBizID:");
}

id objc_msgSend__populateP2PDictionary_chat_fromID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_populateP2PDictionary:chat:fromID:");
}

id objc_msgSend__populateP2PDictionary_chat_omitName_fromID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_populateP2PDictionary:chat:omitName:fromID:");
}

id objc_msgSend__previewAttachmentEnabledForStickers(void *a1, const char *a2, ...)
{
  return _[a1 _previewAttachmentEnabledForStickers];
}

id objc_msgSend__primeServerBags(void *a1, const char *a2, ...)
{
  return _[a1 _primeServerBags];
}

id objc_msgSend__processDownloadedPayload_forMessageGUID_balloonBundleID_fromIdentifier_senderToken_withCompletionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_processDownloadedPayload:forMessageGUID:balloonBundleID:fromIdentifier:senderToken:withCompletionBlock:");
}

id objc_msgSend__processMessageForSending_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processMessageForSending:withContext:");
}

id objc_msgSend__processMessageForSendingToGroupIfNeeded_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processMessageForSendingToGroupIfNeeded:withContext:");
}

id objc_msgSend__propertyForExpressiveSendStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_propertyForExpressiveSendStyle:");
}

id objc_msgSend__pushHandlerForIDSAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pushHandlerForIDSAccount:");
}

id objc_msgSend__reAttemptMessageDeliveryForGUID_toIdentifier_fromIdentifier_fromIDSID_isReflection_shouldShowError_cacheFlushError_imdAccount_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_reAttemptMessageDeliveryForGUID:toIdentifier:fromIdentifier:fromIDSID:isReflection:shouldShowError:cacheFlus hError:imdAccount:");
}

id objc_msgSend__receivingDevicesForHandle_skippedDestinations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_receivingDevicesForHandle:skippedDestinations:");
}

id objc_msgSend__refreshGroupPhotoTTLIfNecessary_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshGroupPhotoTTLIfNecessary:withContext:");
}

id objc_msgSend__registerKeepMessagesSettingReflection(void *a1, const char *a2, ...)
{
  return _[a1 _registerKeepMessagesSettingReflection];
}

id objc_msgSend__registerReadReceiptSettingReflection(void *a1, const char *a2, ...)
{
  return _[a1 _registerReadReceiptSettingReflection];
}

id objc_msgSend__replicationEditDelay(void *a1, const char *a2, ...)
{
  return _[a1 _replicationEditDelay];
}

id objc_msgSend__replicationSourceIDForSending(void *a1, const char *a2, ...)
{
  return _[a1 _replicationSourceIDForSending];
}

id objc_msgSend__requestGroupPhotoUpdate_fromIdentifier_toIdentifier_session_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestGroupPhotoUpdate:fromIdentifier:toIdentifier:session:");
}

id objc_msgSend__richLinkDelayTimeInterval(void *a1, const char *a2, ...)
{
  return _[a1 _richLinkDelayTimeInterval];
}

id objc_msgSend__richLinkPendSendingWithGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_richLinkPendSendingWithGUID:");
}

id objc_msgSend__sendAttachmentToPeerDevice_fileTransferGUID_messageGuid_fileURL_useLocalPeersFileAPI_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_sendAttachmentToPeerDevice:fileTransferGUID:messageGuid:fileURL:useLocalPeersFileAPI:error:");
}

id objc_msgSend__sendAttachmentsForMessage_canSendInline_displayIDs_additionalContext_fromID_recipients_uploadStartTime_fromAccount_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_sendAttachmentsForMessage:canSendInline:displayIDs:additionalContext:fromID:recipients:uploadStartTime:fromA ccount:completionBlock:");
}

id objc_msgSend__sendBackwardCompatibilityMessageForEditedMessage_usingMessageGUID_toBackwardCompatabilityDestinations_withOriginalDestinations_chatIdentifier_fromAccount_fromID_backwardCompatabilityText_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_sendBackwardCompatibilityMessageForEditedMessage:usingMessageGUID:toBackwardCompatabilityDestinations:withOr iginalDestinations:chatIdentifier:fromAccount:fromID:backwardCompatabilityText:completionBlock:");
}

id objc_msgSend__sendCertifiedDeliveryReceiptIfPossible_messageContext_guid_messageWasStored_needsDeliveryReceipt_failureReason_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_sendCertifiedDeliveryReceiptIfPossible:messageContext:guid:messageWasStored:needsDeliveryReceipt:failureReason:");
}

id objc_msgSend__sendFTMessage_withCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendFTMessage:withCompletionBlock:");
}

id objc_msgSend__sendGroupPhoto_toIdentifier_fromIdentifier_toToken_session_requestGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendGroupPhoto:toIdentifier:fromIdentifier:toToken:session:requestGUID:");
}

id objc_msgSend__sendIDSMessageWithTransferGUID_andTransfer_fromAccount_fromID_toRecipient_withCompletion_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendIDSMessageWithTransferGUID:andTransfer:fromAccount:fromID:toRecipient:withCompletion:");
}

id objc_msgSend__sendMessage_context_deliveryContext_fromID_fromAccount_toID_chatIdentifier_toSessionToken_toGroup_toParticipants_originallyToParticipants_requiredRegProperties_interestingRegProperties_requiresLackOfRegProperties_canInlineAttachments_type_msgPayloadUploadDictionary_originalPayload_replyToMessageGUID_willSendBlock_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_sendMessage:context:deliveryContext:fromID:fromAccount:toID:chatIdentifier:toSessionToken:toGroup:toParticip ants:originallyToParticipants:requiredRegProperties:interestingRegProperties:requiresLackOfRegProperties:canI nlineAttachments:type:msgPayloadUploadDictionary:originalPayload:replyToMessageGUID:willSendBlock:completionBlock:");
}

id objc_msgSend__sendNicknameToRecipientsIfNeededForChat_forMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendNicknameToRecipientsIfNeededForChat:forMessage:");
}

id objc_msgSend__sendSyndicationAction_toChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendSyndicationAction:toChat:");
}

id objc_msgSend__sendURL_urlToRemove_topic_sessionInfo_messageGUID_transferID_fileTransferGUID_attachmentSendContexts_failIfError_sendStatus_attachmentStatus_group_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_sendURL:urlToRemove:topic:sessionInfo:messageGUID:transferID:fileTransferGUID:attachmentSendContexts:failIfE rror:sendStatus:attachmentStatus:group:");
}

id objc_msgSend__service_account_incomingTopLevelMessage_fromID_messageContext_isBeingReplayed_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_service:account:incomingTopLevelMessage:fromID:messageContext:isBeingReplayed:");
}

id objc_msgSend__setCallerIDOnMessage_onChat_withIDSAccount_withServiceSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setCallerIDOnMessage:onChat:withIDSAccount:withServiceSession:");
}

id objc_msgSend__setExpectedOffGridDeliveriesForMessage_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setExpectedOffGridDeliveriesForMessage:context:");
}

id objc_msgSend__setLocalPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setLocalPath:");
}

id objc_msgSend__setLocalURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setLocalURL:");
}

id objc_msgSend__setMessageID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setMessageID:");
}

id objc_msgSend__setNeedsWrapper_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setNeedsWrapper:");
}

id objc_msgSend__setReplyToGUIDForMessage_messageDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setReplyToGUIDForMessage:messageDictionary:");
}

id objc_msgSend__setTransferInfo_key_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setTransferInfo:key:");
}

id objc_msgSend__setWeeklyFailureResetTimer(void *a1, const char *a2, ...)
{
  return _[a1 _setWeeklyFailureResetTimer];
}

id objc_msgSend__setupPushHandlerWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupPushHandlerWithAccount:");
}

id objc_msgSend__shouldAdjustTimestampOfResentMessages(void *a1, const char *a2, ...)
{
  return _[a1 _shouldAdjustTimestampOfResentMessages];
}

id objc_msgSend__shouldBlackholeChatFromSender_toRecipient_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldBlackholeChatFromSender:toRecipient:forAccount:");
}

id objc_msgSend__shouldBlackholeGroupChatFromSender_toRecipient_withOtherParticipants_forAccount_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldBlackholeGroupChatFromSender:toRecipient:withOtherParticipants:forAccount:");
}

id objc_msgSend__shouldDisableFasterDownload_message_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldDisableFasterDownload:message:");
}

id objc_msgSend__shouldDropMessageGroupID_participants_fromIdentifier_toIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldDropMessageGroupID:participants:fromIdentifier:toIdentifier:");
}

id objc_msgSend__shouldIgnoreMessageFromSender_balloonBID_fromMe_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldIgnoreMessageFromSender:balloonBID:fromMe:");
}

id objc_msgSend__shouldImmediatelySendAckForMessage_command_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldImmediatelySendAckForMessage:command:");
}

id objc_msgSend__shouldInitiateTelephonyConversationForMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldInitiateTelephonyConversationForMessage:");
}

id objc_msgSend__shouldOptimizedDeliveryReceiptForConversation_withMessageTimeStamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldOptimizedDeliveryReceiptForConversation:withMessageTimeStamp:");
}

id objc_msgSend__shouldOverrideTypingIndicator(void *a1, const char *a2, ...)
{
  return _[a1 _shouldOverrideTypingIndicator];
}

id objc_msgSend__shouldRequestGroupPhoto_incomingParticipantVersion_incomingGroupPhotoCreationDate_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldRequestGroupPhoto:incomingParticipantVersion:incomingGroupPhotoCreationDate:");
}

id objc_msgSend__shouldSendAppTypingIndicator(void *a1, const char *a2, ...)
{
  return _[a1 _shouldSendAppTypingIndicator];
}

id objc_msgSend__shouldSendAuxXML_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldSendAuxXML:");
}

id objc_msgSend__shouldSendEngramOnChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldSendEngramOnChat:");
}

id objc_msgSend__shouldUploadPayloadDataOverMMCS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldUploadPayloadDataOverMMCS:");
}

id objc_msgSend__startTimingMessageSend(void *a1, const char *a2, ...)
{
  return _[a1 _startTimingMessageSend];
}

id objc_msgSend__stickerUploadTTL(void *a1, const char *a2, ...)
{
  return _[a1 _stickerUploadTTL];
}

id objc_msgSend__stopTimingMessageSend(void *a1, const char *a2, ...)
{
  return _[a1 _stopTimingMessageSend];
}

id objc_msgSend__storeSentMessage_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_storeSentMessage:withContext:");
}

id objc_msgSend__stringForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringForKey:");
}

id objc_msgSend__stripFZIDPrefix(void *a1, const char *a2, ...)
{
  return _[a1 _stripFZIDPrefix];
}

id objc_msgSend__stripPotentialTokenURIWithToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stripPotentialTokenURIWithToken:");
}

id objc_msgSend__threadOriginatorFallbackHashForMessageItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_threadOriginatorFallbackHashForMessageItem:");
}

id objc_msgSend__transcodeURL_reason_transfer_sizes_commonCapabilities_sendStatus_urlGroup_didTranscode_handleURL_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_transcodeURL:reason:transfer:sizes:commonCapabilities:sendStatus:urlGroup:didTranscode:handleURL:");
}

id objc_msgSend__transferInfoFileForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_transferInfoFileForKey:");
}

id objc_msgSend__transferInfoForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_transferInfoForKey:");
}

id objc_msgSend__transferIsUserGeneratedOrEmojiSticker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_transferIsUserGeneratedOrEmojiSticker:");
}

id objc_msgSend__updateBlackholeStatusIfNeededWithMessage_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateBlackholeStatusIfNeededWithMessage:withContext:");
}

id objc_msgSend__updateChatProperties_withProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateChatProperties:withProperties:");
}

id objc_msgSend__updateExpireStateTimerWithInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateExpireStateTimerWithInterval:");
}

id objc_msgSend__updateGlobalReadReceiptValue_withVersionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateGlobalReadReceiptValue:withVersionID:");
}

id objc_msgSend__updateGroupWithParticipants_chat_service_participants_destinations_completion_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateGroupWithParticipants:chat:service:participants:destinations:completion:");
}

id objc_msgSend__updateLastDeviceActivityForCloudKit(void *a1, const char *a2, ...)
{
  return _[a1 _updateLastDeviceActivityForCloudKit];
}

id objc_msgSend__updateLocalParticipantsFromEngroup_chat_fromID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateLocalParticipantsFromEngroup:chat:fromID:");
}

id objc_msgSend__updateNetworkOverride(void *a1, const char *a2, ...)
{
  return _[a1 _updateNetworkOverride];
}

id objc_msgSend__updateOffGridStatusIfNeededWithMessage_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateOffGridStatusIfNeededWithMessage:context:");
}

id objc_msgSend__updateOrRemoveGroupPhotoForChat_sender_completedTransfer_isHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateOrRemoveGroupPhotoForChat:sender:completedTransfer:isHidden:");
}

id objc_msgSend__updateReadReceiptProperties_withIncomingProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateReadReceiptProperties:withIncomingProperties:");
}

id objc_msgSend__updateRoutingTimerWithInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateRoutingTimerWithInterval:");
}

id objc_msgSend__updateStoredBreadcrumbIfNeeded_onChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateStoredBreadcrumbIfNeeded:onChat:");
}

id objc_msgSend__updateSuccessfulEditsForScheduledMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSuccessfulEditsForScheduledMessage:");
}

id objc_msgSend__updateSuccessfulRetractionsForScheduledMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSuccessfulRetractionsForScheduledMessage:");
}

id objc_msgSend__updateTimeStampForMessageIdentifierIfNeeded_pendingTimeStampUpdateIdentifier_alternateCallbackID_messageContext_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_updateTimeStampForMessageIdentifierIfNeeded:pendingTimeStampUpdateIdentifier:alternateCallbackID:messageContext:");
}

id objc_msgSend__updateTransfersForAttributionInfoArray_message_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTransfersForAttributionInfoArray:message:");
}

id objc_msgSend__updateWithDictionaryRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateWithDictionaryRepresentation:");
}

id objc_msgSend__updateWithDictionaryRepresentationForWhitelistedKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateWithDictionaryRepresentationForWhitelistedKeys:");
}

id objc_msgSend__validateIDSAccount(void *a1, const char *a2, ...)
{
  return _[a1 _validateIDSAccount];
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _[a1 absoluteString];
}

id objc_msgSend_acceptTransfer_path_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acceptTransfer:path:");
}

id objc_msgSend_account(void *a1, const char *a2, ...)
{
  return _[a1 account];
}

id objc_msgSend_account_capabilitiesChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "account:capabilitiesChanged:");
}

id objc_msgSend_account_chat_style_chatProperties_groupID_chatPersonCentricID_messageReceived_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "account:chat:style:chatProperties:groupID:chatPersonCentricID:messageReceived:");
}

id objc_msgSend_account_chat_style_chatProperties_groupID_chatPersonCentricID_messageSent_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "account:chat:style:chatProperties:groupID:chatPersonCentricID:messageSent:");
}

id objc_msgSend_account_chat_style_chatProperties_messageUpdated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "account:chat:style:chatProperties:messageUpdated:");
}

id objc_msgSend_account_chat_style_chatProperties_messagesUpdated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "account:chat:style:chatProperties:messagesUpdated:");
}

id objc_msgSend_accountID(void *a1, const char *a2, ...)
{
  return _[a1 accountID];
}

id objc_msgSend_accountType(void *a1, const char *a2, ...)
{
  return _[a1 accountType];
}

id objc_msgSend_accountUniqueID(void *a1, const char *a2, ...)
{
  return _[a1 accountUniqueID];
}

id objc_msgSend_accounts(void *a1, const char *a2, ...)
{
  return _[a1 accounts];
}

id objc_msgSend_accountsForService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountsForService:");
}

id objc_msgSend_acquireAssertionToUnsuspendProcess(void *a1, const char *a2, ...)
{
  return _[a1 acquireAssertionToUnsuspendProcess];
}

id objc_msgSend_activeAccountsAreEligibleForHawking(void *a1, const char *a2, ...)
{
  return _[a1 activeAccountsAreEligibleForHawking];
}

id objc_msgSend_activeAccountsForService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeAccountsForService:");
}

id objc_msgSend_activeDeviceForHandle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeDeviceForHandle:");
}

id objc_msgSend_activeiMessageAliases(void *a1, const char *a2, ...)
{
  return _[a1 activeiMessageAliases];
}

id objc_msgSend_adaptiveImageGlyphContentDescription(void *a1, const char *a2, ...)
{
  return _[a1 adaptiveImageGlyphContentDescription];
}

id objc_msgSend_adaptiveImageGlyphContentIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 adaptiveImageGlyphContentIdentifier];
}

id objc_msgSend_addAttribute_value_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttribute:value:range:");
}

id objc_msgSend_addBIAContextWithUserID_referenceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBIAContextWithUserID:referenceID:");
}

id objc_msgSend_addBlock_withTimeout_forKey_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBlock:withTimeout:forKey:description:");
}

id objc_msgSend_addDefaultGatekeeperPropertiesToDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDefaultGatekeeperPropertiesToDirectory:");
}

id objc_msgSend_addDelegate_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDelegate:queue:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addFailedRetractPartIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFailedRetractPartIndex:");
}

id objc_msgSend_addGroupContextToSendMessageDictionary_callerID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addGroupContextToSendMessageDictionary:callerID:");
}

id objc_msgSend_addItem_toChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addItem:toChat:");
}

id objc_msgSend_addListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addListener:");
}

id objc_msgSend_addLocalStandardCommandHandlersToRegistry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addLocalStandardCommandHandlersToRegistry:");
}

id objc_msgSend_addMembers_toHandleInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMembers:toHandleInfo:");
}

id objc_msgSend_addMessageWithGUID_toChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMessageWithGUID:toChat:");
}

id objc_msgSend_addMessagesID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMessagesID:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addParametersToSendMessageDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addParametersToSendMessageDictionary:");
}

id objc_msgSend_addParticipants_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addParticipants:");
}

id objc_msgSend_addParticipants_toChat_fromID_fromAccount_session_service_groupPhoto_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addParticipants:toChat:fromID:fromAccount:session:service:groupPhoto:completionBlock:");
}

id objc_msgSend_addParticipantsToENGroup_chat_service_fromID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addParticipantsToENGroup:chat:service:fromID:completion:");
}

id objc_msgSend_addRecentItemWithData_GUID_infoDictionary_forDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRecentItemWithData:GUID:infoDictionary:forDomain:");
}

id objc_msgSend_addStandardCommandHandlersToRegistry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addStandardCommandHandlersToRegistry:");
}

id objc_msgSend_addTransfer_forGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTransfer:forGUID:");
}

id objc_msgSend_additionalErrorInfo(void *a1, const char *a2, ...)
{
  return _[a1 additionalErrorInfo];
}

id objc_msgSend_additionalPayload(void *a1, const char *a2, ...)
{
  return _[a1 additionalPayload];
}

id objc_msgSend_allExistingChatsWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allExistingChatsWithIdentifier:");
}

id objc_msgSend_allExistingChatsWithIdentifier_style_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allExistingChatsWithIdentifier:style:");
}

id objc_msgSend_allExistingSupportedServiceChatsWithIdentifier_style_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allExistingSupportedServiceChatsWithIdentifier:style:");
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _[a1 allKeys];
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _[a1 allObjects];
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _[a1 allValues];
}

id objc_msgSend_allowAnyNetwork(void *a1, const char *a2, ...)
{
  return _[a1 allowAnyNetwork];
}

id objc_msgSend_allowDownload(void *a1, const char *a2, ...)
{
  return _[a1 allowDownload];
}

id objc_msgSend_anonymizedSenderID(void *a1, const char *a2, ...)
{
  return _[a1 anonymizedSenderID];
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return _[a1 anyObject];
}

id objc_msgSend_appMessageFallbackImage(void *a1, const char *a2, ...)
{
  return _[a1 appMessageFallbackImage];
}

id objc_msgSend_appNameAndBundleIDFoURL_outAppName_outBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appNameAndBundleIDFoURL:outAppName:outBundleID:");
}

id objc_msgSend_appendAttributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendAttributedString:");
}

id objc_msgSend_appendChatRelatedPropertiesToMessageDictionary_forMessage_chatIdentifier_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendChatRelatedPropertiesToMessageDictionary:forMessage:chatIdentifier:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendInlineImageWithGUID_filename_width_height_isAnimoji_isAdaptiveImageGlyph_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendInlineImageWithGUID:filename:width:height:isAnimoji:isAdaptiveImageGlyph:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_applicationDataDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationDataDictionary:");
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _[a1 array];
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObjectsFromArray:");
}

id objc_msgSend_arrayByApplyingSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByApplyingSelector:");
}

id objc_msgSend_arrayByExcludingObjectsInArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByExcludingObjectsInArray:");
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_assignTransfer_toAccount_otherPerson_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assignTransfer:toAccount:otherPerson:");
}

id objc_msgSend_associatedMessageEmoji(void *a1, const char *a2, ...)
{
  return _[a1 associatedMessageEmoji];
}

id objc_msgSend_associatedMessageGUID(void *a1, const char *a2, ...)
{
  return _[a1 associatedMessageGUID];
}

id objc_msgSend_associatedMessageRange(void *a1, const char *a2, ...)
{
  return _[a1 associatedMessageRange];
}

id objc_msgSend_associatedMessageType(void *a1, const char *a2, ...)
{
  return _[a1 associatedMessageType];
}

id objc_msgSend_attachToTransfer_message_commonCapabilities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachToTransfer:message:commonCapabilities:");
}

id objc_msgSend_attachmentController(void *a1, const char *a2, ...)
{
  return _[a1 attachmentController];
}

id objc_msgSend_attachmentRefreshDeliveryController(void *a1, const char *a2, ...)
{
  return _[a1 attachmentRefreshDeliveryController];
}

id objc_msgSend_attachmentSendContexts(void *a1, const char *a2, ...)
{
  return _[a1 attachmentSendContexts];
}

id objc_msgSend_attachmentStatus(void *a1, const char *a2, ...)
{
  return _[a1 attachmentStatus];
}

id objc_msgSend_attachmentWithGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentWithGUID:");
}

id objc_msgSend_attribute_atIndex_effectiveRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attribute:atIndex:effectiveRange:");
}

id objc_msgSend_attributesOfItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributesOfItemAtPath:error:");
}

id objc_msgSend_attributionInfo(void *a1, const char *a2, ...)
{
  return _[a1 attributionInfo];
}

id objc_msgSend_authURL(void *a1, const char *a2, ...)
{
  return _[a1 authURL];
}

id objc_msgSend_backwardsCompatibleVersion(void *a1, const char *a2, ...)
{
  return _[a1 backwardsCompatibleVersion];
}

id objc_msgSend_balloonBundleID(void *a1, const char *a2, ...)
{
  return _[a1 balloonBundleID];
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_biaReferenceID(void *a1, const char *a2, ...)
{
  return _[a1 biaReferenceID];
}

id objc_msgSend_bizIDSAccountFromMadridIDSAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bizIDSAccountFromMadridIDSAccount:");
}

id objc_msgSend_bizIntent(void *a1, const char *a2, ...)
{
  return _[a1 bizIntent];
}

id objc_msgSend_block(void *a1, const char *a2, ...)
{
  return _[a1 block];
}

id objc_msgSend_body(void *a1, const char *a2, ...)
{
  return _[a1 body];
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_BOOLValueForKey_withDefault_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLValueForKey:withDefault:");
}

id objc_msgSend_breadcrumbText(void *a1, const char *a2, ...)
{
  return _[a1 breadcrumbText];
}

id objc_msgSend_broadcaster(void *a1, const char *a2, ...)
{
  return _[a1 broadcaster];
}

id objc_msgSend_broadcasterForChatListeners(void *a1, const char *a2, ...)
{
  return _[a1 broadcasterForChatListeners];
}

id objc_msgSend_broadcasterForChatListenersUsingBlackholeRegistry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "broadcasterForChatListenersUsingBlackholeRegistry:");
}

id objc_msgSend_broadcasterForChatListenersWithBlackholeStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "broadcasterForChatListenersWithBlackholeStatus:");
}

id objc_msgSend_broadcasterForKeyTransparencyListeners(void *a1, const char *a2, ...)
{
  return _[a1 broadcasterForKeyTransparencyListeners];
}

id objc_msgSend_businessChatContext(void *a1, const char *a2, ...)
{
  return _[a1 businessChatContext];
}

id objc_msgSend_businessChatContextWithServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "businessChatContextWithServiceName:");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _[a1 bytes];
}

id objc_msgSend_cachedAvailabilityTokensForHandleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedAvailabilityTokensForHandleID:");
}

id objc_msgSend_cachedAvailabilityVerificationTokensForHandleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedAvailabilityVerificationTokensForHandleID:");
}

id objc_msgSend_cachedOffGridMode(void *a1, const char *a2, ...)
{
  return _[a1 cachedOffGridMode];
}

id objc_msgSend_cachedOffGridModeAndLastPublisherWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedOffGridModeAndLastPublisherWithCompletion:");
}

id objc_msgSend_callerURIForIDSAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callerURIForIDSAccount:");
}

id objc_msgSend_callerURIForMessageServiceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callerURIForMessageServiceType:");
}

id objc_msgSend_callerURIUsingCalleeURI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callerURIUsingCalleeURI:");
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _[a1 cancel];
}

id objc_msgSend_cancelMessageWithOptions_destinations_identifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelMessageWithOptions:destinations:identifier:error:");
}

id objc_msgSend_cancelMessageWithOptions_identifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelMessageWithOptions:identifier:error:");
}

id objc_msgSend_cancelScheduledMessageWithGUID_fromID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelScheduledMessageWithGUID:fromID:");
}

id objc_msgSend_cancelScheduledMessageWithGUID_fromID_destinations_cancelType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelScheduledMessageWithGUID:fromID:destinations:cancelType:");
}

id objc_msgSend_cancelSendTransferID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelSendTransferID:");
}

id objc_msgSend_canonicalizeChatIdentifier_style_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canonicalizeChatIdentifier:style:");
}

id objc_msgSend_capabilities(void *a1, const char *a2, ...)
{
  return _[a1 capabilities];
}

id objc_msgSend_certifiedDeliveryEnabled(void *a1, const char *a2, ...)
{
  return _[a1 certifiedDeliveryEnabled];
}

id objc_msgSend_chat(void *a1, const char *a2, ...)
{
  return _[a1 chat];
}

id objc_msgSend_chat_propertiesUpdated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chat:propertiesUpdated:");
}

id objc_msgSend_chatForChatIdentifier_style_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chatForChatIdentifier:style:");
}

id objc_msgSend_chatForGroupMessagePayload_fromIdentifier_toIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chatForGroupMessagePayload:fromIdentifier:toIdentifier:");
}

id objc_msgSend_chatForMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chatForMessage:");
}

id objc_msgSend_chatForMessageGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chatForMessageGUID:");
}

id objc_msgSend_chatIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 chatIdentifier];
}

id objc_msgSend_chatProperties(void *a1, const char *a2, ...)
{
  return _[a1 chatProperties];
}

id objc_msgSend_chatRegistry(void *a1, const char *a2, ...)
{
  return _[a1 chatRegistry];
}

id objc_msgSend_chatStore(void *a1, const char *a2, ...)
{
  return _[a1 chatStore];
}

id objc_msgSend_chatWithGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chatWithGUID:");
}

id objc_msgSend_chats(void *a1, const char *a2, ...)
{
  return _[a1 chats];
}

id objc_msgSend_chatsGUIDsForMessageWithGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chatsGUIDsForMessageWithGUID:");
}

id objc_msgSend_checkExistingAttachmentSensitivityIfNeededFor_attachmentURL_isFromMe_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkExistingAttachmentSensitivityIfNeededFor:attachmentURL:isFromMe:");
}

id objc_msgSend_ckUtilities(void *a1, const char *a2, ...)
{
  return _[a1 ckUtilities];
}

id objc_msgSend_cloudKitSyncingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 cloudKitSyncingEnabled];
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _[a1 code];
}

id objc_msgSend_collectMetricsForDownloadedFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectMetricsForDownloadedFile:");
}

id objc_msgSend_collectMetricsForLimitExceededWithReportedSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectMetricsForLimitExceededWithReportedSize:");
}

id objc_msgSend_command(void *a1, const char *a2, ...)
{
  return _[a1 command];
}

id objc_msgSend_commandHandlerRegistry(void *a1, const char *a2, ...)
{
  return _[a1 commandHandlerRegistry];
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:");
}

id objc_msgSend_compare_withResult_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:withResult:error:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_compressFileTransfer_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compressFileTransfer:completionBlock:");
}

id objc_msgSend_conformsToType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conformsToType:");
}

id objc_msgSend_consumedSessionPayloads(void *a1, const char *a2, ...)
{
  return _[a1 consumedSessionPayloads];
}

id objc_msgSend_contactsAvatarRecipeData(void *a1, const char *a2, ...)
{
  return _[a1 contactsAvatarRecipeData];
}

id objc_msgSend_containsActiveBIASession(void *a1, const char *a2, ...)
{
  return _[a1 containsActiveBIASession];
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsObjectIdenticalTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObjectIdenticalTo:");
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsString:");
}

id objc_msgSend_contextWithKnownSender_serviceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextWithKnownSender:serviceName:");
}

id objc_msgSend_convergeOnIncomingGroup_chat_service_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convergeOnIncomingGroup:chat:service:");
}

id objc_msgSend_coordinateReadingItemAtURL_options_error_byAccessor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coordinateReadingItemAtURL:options:error:byAccessor:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_copyForBackwardsCompatibility(void *a1, const char *a2, ...)
{
  return _[a1 copyForBackwardsCompatibility];
}

id objc_msgSend_copyHandlersForEnumerating(void *a1, const char *a2, ...)
{
  return _[a1 copyHandlersForEnumerating];
}

id objc_msgSend_copyItemAtPath_toPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyItemAtPath:toPath:error:");
}

id objc_msgSend_copyWithFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyWithFlags:");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countryCode(void *a1, const char *a2, ...)
{
  return _[a1 countryCode];
}

id objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createEngramGroupOnMessageSend(void *a1, const char *a2, ...)
{
  return _[a1 createEngramGroupOnMessageSend];
}

id objc_msgSend_createGroupWithParticipants_sharedApplicationData_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createGroupWithParticipants:sharedApplicationData:completion:");
}

id objc_msgSend_createNewOutgoingTransferWithLocalFileURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createNewOutgoingTransferWithLocalFileURL:");
}

id objc_msgSend_currentMessageSendServerVersion(void *a1, const char *a2, ...)
{
  return _[a1 currentMessageSendServerVersion];
}

id objc_msgSend_currentRemoteDevicesForDestinations_service_listenerID_queue_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentRemoteDevicesForDestinations:service:listenerID:queue:completionBlock:");
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _[a1 data];
}

id objc_msgSend_dataActiveAndReachable(void *a1, const char *a2, ...)
{
  return _[a1 dataActiveAndReachable];
}

id objc_msgSend_dataRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 dataRepresentation];
}

id objc_msgSend_dataRepresentationWithOutOfLineAttachments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataRepresentationWithOutOfLineAttachments:");
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfURL:");
}

id objc_msgSend_dataWithContentsOfURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfURL:options:error:");
}

id objc_msgSend_dataWithMessageSummaryInfoDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithMessageSummaryInfoDictionary:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _[a1 date];
}

id objc_msgSend_dateByAddingTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingTimeInterval:");
}

id objc_msgSend_dateEdited(void *a1, const char *a2, ...)
{
  return _[a1 dateEdited];
}

id objc_msgSend_dateWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSince1970:");
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceNow:");
}

id objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_deactivateAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deactivateAccount:");
}

id objc_msgSend_deactivateAndPurgeIdentify(void *a1, const char *a2, ...)
{
  return _[a1 deactivateAndPurgeIdentify];
}

id objc_msgSend_decodeEncodedDataSecurely_ofClass_includesAllowlistedClasses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeEncodedDataSecurely:ofClass:includesAllowlistedClasses:");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClasses:forKey:");
}

id objc_msgSend_decrementPendingReadReceiptFromStorageCount(void *a1, const char *a2, ...)
{
  return _[a1 decrementPendingReadReceiptFromStorageCount];
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _[a1 defaultCenter];
}

id objc_msgSend_defaultEmojiStickerPackID(void *a1, const char *a2, ...)
{
  return _[a1 defaultEmojiStickerPackID];
}

id objc_msgSend_defaultHFSFileManager(void *a1, const char *a2, ...)
{
  return _[a1 defaultHFSFileManager];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _[a1 defaultManager];
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _[a1 delegate];
}

id objc_msgSend_deleteAttachmentWithGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAttachmentWithGUID:");
}

id objc_msgSend_deleteAttachmentsWithGUIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAttachmentsWithGUIDs:");
}

id objc_msgSend_deleteBIAContext(void *a1, const char *a2, ...)
{
  return _[a1 deleteBIAContext];
}

id objc_msgSend_deleteChatsForCommandDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteChatsForCommandDictionary:");
}

id objc_msgSend_deleteCommandDictionaryWithIncomingDictionary_inferredRecoverableDeleteForLegacyCommandsWithDate_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "deleteCommandDictionaryWithIncomingDictionary:inferredRecoverableDeleteForLegacyCommandsWithDate:");
}

id objc_msgSend_deleteMessagePartsForCommandDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteMessagePartsForCommandDictionary:");
}

id objc_msgSend_deleteMessagesForCommandDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteMessagesForCommandDictionary:");
}

id objc_msgSend_deleteMessagesWithChatIdentifiers_style_onServices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteMessagesWithChatIdentifiers:style:onServices:");
}

id objc_msgSend_deliveryController(void *a1, const char *a2, ...)
{
  return _[a1 deliveryController];
}

id objc_msgSend_destinationCallerID(void *a1, const char *a2, ...)
{
  return _[a1 destinationCallerID];
}

id objc_msgSend_destinationWithAlias_pushToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "destinationWithAlias:pushToken:");
}

id objc_msgSend_deviceSupportsSubscriptionValidationTokens(void *a1, const char *a2, ...)
{
  return _[a1 deviceSupportsSubscriptionValidationTokens];
}

id objc_msgSend_devices(void *a1, const char *a2, ...)
{
  return _[a1 devices];
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _[a1 dictionary];
}

id objc_msgSend_dictionaryValue(void *a1, const char *a2, ...)
{
  return _[a1 dictionaryValue];
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_dictionaryWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithContentsOfFile:");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithMessageSummaryInfoData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithMessageSummaryInfoData:");
}

id objc_msgSend_dictionaryWithObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObject:forKey:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_dictionaryWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjectsAndKeys:");
}

id objc_msgSend_didChangeMemberStatus_forHandle_fromHandle_unformattedNumber_countryCode_forChat_style_account_destinationCallerID_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "didChangeMemberStatus:forHandle:fromHandle:unformattedNumber:countryCode:forChat:style:account:destinationCallerID:");
}

id objc_msgSend_didJoinChat_style_displayName_groupID_handleInfo_account_isBlackholed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didJoinChat:style:displayName:groupID:handleInfo:account:isBlackholed:");
}

id objc_msgSend_didJoinChat_style_displayName_groupID_lastAddressedHandle_lastAddressedSIMID_handleInfo_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didJoinChat:style:displayName:groupID:lastAddressedHandle:lastAddressedSIMID:handleInfo:");
}

id objc_msgSend_didLeaveChat_style_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didLeaveChat:style:account:");
}

id objc_msgSend_didReceiveBalloonPayload_forChat_style_messageGUID_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveBalloonPayload:forChat:style:messageGUID:account:");
}

id objc_msgSend_didReceiveDisplayNameChange_fromID_toIdentifier_forChat_style_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveDisplayNameChange:fromID:toIdentifier:forChat:style:account:");
}

id objc_msgSend_didReceiveDisplayNameChange_guid_fromID_toIdentifier_forChat_style_account_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveDisplayNameChange:guid:fromID:toIdentifier:forChat:style:account:");
}

id objc_msgSend_didReceiveError_forMessageID_forceError_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveError:forMessageID:forceError:account:");
}

id objc_msgSend_didReceiveMessage_forChat_style_account_fromIDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveMessage:forChat:style:account:fromIDSID:");
}

id objc_msgSend_didReceiveMessageDeliveryReceiptForMessageID_date_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveMessageDeliveryReceiptForMessageID:date:account:");
}

id objc_msgSend_didReceiveMessageEditingSendFailure_forMessageGUID_partIndex_editType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveMessageEditingSendFailure:forMessageGUID:partIndex:editType:");
}

id objc_msgSend_didReceiveMessageEditingUnsupportedHandleIDs_forMessageGUID_partIndex_previousMessage_backwardCompatibilityMessageGUID_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "didReceiveMessageEditingUnsupportedHandleIDs:forMessageGUID:partIndex:previousMessage:backwardCompatibilityMessageGUID:");
}

id objc_msgSend_didReceiveMessagePlayedForMessageID_date_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveMessagePlayedForMessageID:date:completionBlock:");
}

id objc_msgSend_didReceiveMessagePlayedReceiptForMessageID_date_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveMessagePlayedReceiptForMessageID:date:completionBlock:");
}

id objc_msgSend_didReceiveMessageReadForMessageID_date_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveMessageReadForMessageID:date:completionBlock:");
}

id objc_msgSend_didReceiveMessageReadReceiptForMessageID_date_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveMessageReadReceiptForMessageID:date:completionBlock:");
}

id objc_msgSend_didReceiveMessageSavedForMessageID_ofType_forChat_fromHandle_fromMe_date_account_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "didReceiveMessageSavedForMessageID:ofType:forChat:fromHandle:fromMe:date:account:completionBlock:");
}

id objc_msgSend_didReceiveMessages_forChat_style_account_fromIDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveMessages:forChat:style:account:fromIDSID:");
}

id objc_msgSend_didReceiveOffGridStatus_forID_messageGUID_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveOffGridStatus:forID:messageGUID:account:");
}

id objc_msgSend_didSendBalloonPayload_forChat_style_messageGUID_account_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSendBalloonPayload:forChat:style:messageGUID:account:completionBlock:");
}

id objc_msgSend_didSendDeliveredQuietlyReceiptForMessageID_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSendDeliveredQuietlyReceiptForMessageID:account:");
}

id objc_msgSend_didSendMessage_forChat_style_account_forceDate_itemIsComingFromStorage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSendMessage:forChat:style:account:forceDate:itemIsComingFromStorage:");
}

id objc_msgSend_didSendMessageEditForMessageGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSendMessageEditForMessageGUID:");
}

id objc_msgSend_didSendMessagePlayedReceiptForMessageID_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSendMessagePlayedReceiptForMessageID:account:");
}

id objc_msgSend_didSendMessageReadReceiptForMessageID_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSendMessageReadReceiptForMessageID:account:");
}

id objc_msgSend_didSendMessageSavedReceiptForMessageID_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSendMessageSavedReceiptForMessageID:account:");
}

id objc_msgSend_didSendNotifyRecipientCommandForMessageID_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSendNotifyRecipientCommandForMessageID:account:");
}

id objc_msgSend_didSendSyndicationActionItem_forChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSendSyndicationActionItem:forChat:");
}

id objc_msgSend_didUpdateChatStatus_chat_style_displayName_groupID_handleInfo_account_isBlackholed_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didUpdateChatStatus:chat:style:displayName:groupID:handleInfo:account:isBlackholed:");
}

id objc_msgSend_displayIDs(void *a1, const char *a2, ...)
{
  return _[a1 displayIDs];
}

id objc_msgSend_displayName(void *a1, const char *a2, ...)
{
  return _[a1 displayName];
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _[a1 domain];
}

id objc_msgSend_doneRetrievingAttachmentsForGroupPhotoForChat_fileTransferError_success_transferGuid_sender_isHidden_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "doneRetrievingAttachmentsForGroupPhotoForChat:fileTransferError:success:transferGuid:sender:isHidden:");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _[a1 doubleValue];
}

id objc_msgSend_downloadPayloadDataForMessageGUID_payLoadDictionary_topic_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadPayloadDataForMessageGUID:payLoadDictionary:topic:completionBlock:");
}

id objc_msgSend_eagerUploadCancel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eagerUploadCancel:");
}

id objc_msgSend_eagerUploadKeyForURL_sizes_transcodeDictionary_capabilities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eagerUploadKeyForURL:sizes:transcodeDictionary:capabilities:");
}

id objc_msgSend_eagerUploadStatusForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eagerUploadStatusForKey:");
}

id objc_msgSend_eagerUploadTransfer_recipients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eagerUploadTransfer:recipients:");
}

id objc_msgSend_editedPartIndexes(void *a1, const char *a2, ...)
{
  return _[a1 editedPartIndexes];
}

id objc_msgSend_encodedMessagePartGUID(void *a1, const char *a2, ...)
{
  return _[a1 encodedMessagePartGUID];
}

id objc_msgSend_encryptionValidationToken(void *a1, const char *a2, ...)
{
  return _[a1 encryptionValidationToken];
}

id objc_msgSend_endTransfer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endTransfer:");
}

id objc_msgSend_engramControllerSharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 engramControllerSharedInstance];
}

id objc_msgSend_engramID(void *a1, const char *a2, ...)
{
  return _[a1 engramID];
}

id objc_msgSend_engroupCreationDate(void *a1, const char *a2, ...)
{
  return _[a1 engroupCreationDate];
}

id objc_msgSend_engroupForChat_service_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "engroupForChat:service:completionBlock:");
}

id objc_msgSend_engroupParticipantsUpdatedForChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "engroupParticipantsUpdatedForChat:");
}

id objc_msgSend_enumerateAttribute_inRange_options_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateAttribute:inRange:options:usingBlock:");
}

id objc_msgSend_enumerateIndexesUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateIndexesUsingBlock:");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return _[a1 error];
}

id objc_msgSend_errorCode(void *a1, const char *a2, ...)
{
  return _[a1 errorCode];
}

id objc_msgSend_errorFileSize(void *a1, const char *a2, ...)
{
  return _[a1 errorFileSize];
}

id objc_msgSend_errorURLString(void *a1, const char *a2, ...)
{
  return _[a1 errorURLString];
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_evaluateAccountStateForFeatureEligibility(void *a1, const char *a2, ...)
{
  return _[a1 evaluateAccountStateForFeatureEligibility];
}

id objc_msgSend_existingChatForID_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingChatForID:account:");
}

id objc_msgSend_existingChatForIDs_account_displayName_groupID_style_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingChatForIDs:account:displayName:groupID:style:");
}

id objc_msgSend_existingChatWithEngramID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingChatWithEngramID:");
}

id objc_msgSend_existingChatWithGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingChatWithGUID:");
}

id objc_msgSend_existingChatWithIdentifier_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingChatWithIdentifier:account:");
}

id objc_msgSend_existingChatsWithGroupID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingChatsWithGroupID:");
}

id objc_msgSend_existingSMSChatForID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingSMSChatForID:");
}

id objc_msgSend_existingSMSChatForID_withChatStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingSMSChatForID:withChatStyle:");
}

id objc_msgSend_existingiMessageChatForID_withChatStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingiMessageChatForID:withChatStyle:");
}

id objc_msgSend_existsAtLocalPath(void *a1, const char *a2, ...)
{
  return _[a1 existsAtLocalPath];
}

id objc_msgSend_expiration(void *a1, const char *a2, ...)
{
  return _[a1 expiration];
}

id objc_msgSend_expireState(void *a1, const char *a2, ...)
{
  return _[a1 expireState];
}

id objc_msgSend_expressiveSendStyleID(void *a1, const char *a2, ...)
{
  return _[a1 expressiveSendStyleID];
}

id objc_msgSend_failMessageSendWithMessageDictionary_URIs_error_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failMessageSendWithMessageDictionary:URIs:error:completionHandler:");
}

id objc_msgSend_failReason(void *a1, const char *a2, ...)
{
  return _[a1 failReason];
}

id objc_msgSend_failTransfer_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failTransfer:error:");
}

id objc_msgSend_failTransfer_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failTransfer:reason:");
}

id objc_msgSend_failed(void *a1, const char *a2, ...)
{
  return _[a1 failed];
}

id objc_msgSend_fallBackBizIDSAccount(void *a1, const char *a2, ...)
{
  return _[a1 fallBackBizIDSAccount];
}

id objc_msgSend_fallbackHash(void *a1, const char *a2, ...)
{
  return _[a1 fallbackHash];
}

id objc_msgSend_fetchLatestGroupWithStableID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLatestGroupWithStableID:completion:");
}

id objc_msgSend_fetchSizeLimitsForTransfer_mode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchSizeLimitsForTransfer:mode:");
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:");
}

id objc_msgSend_fileExistsAtPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:isDirectory:");
}

id objc_msgSend_fileLength(void *a1, const char *a2, ...)
{
  return _[a1 fileLength];
}

id objc_msgSend_fileSize(void *a1, const char *a2, ...)
{
  return _[a1 fileSize];
}

id objc_msgSend_fileTransferDictionaryForChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileTransferDictionaryForChat:");
}

id objc_msgSend_fileTransferGUIDs(void *a1, const char *a2, ...)
{
  return _[a1 fileTransferGUIDs];
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:");
}

id objc_msgSend_fileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:isDirectory:");
}

id objc_msgSend_filename(void *a1, const char *a2, ...)
{
  return _[a1 filename];
}

id objc_msgSend_findChatWithMessageData_account_session_toIdentifier_fromIdentifier_timestamp_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findChatWithMessageData:account:session:toIdentifier:fromIdentifier:timestamp:");
}

id objc_msgSend_findCommonCapabilitiesAcrossRecipients_serviceName_capsToCheck_completion_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findCommonCapabilitiesAcrossRecipients:serviceName:capsToCheck:completion:");
}

id objc_msgSend_findTranscoderCapabilitiesAcrossRecipients_forTransfers_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findTranscoderCapabilitiesAcrossRecipients:forTransfers:completion:");
}

id objc_msgSend_finish(void *a1, const char *a2, ...)
{
  return _[a1 finish];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_flags(void *a1, const char *a2, ...)
{
  return _[a1 flags];
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _[a1 floatValue];
}

id objc_msgSend_forceAutoBugCaptureWithSubType_errorPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceAutoBugCaptureWithSubType:errorPayload:");
}

id objc_msgSend_forceAutoBugCaptureWithSubType_errorPayload_type_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceAutoBugCaptureWithSubType:errorPayload:type:context:");
}

id objc_msgSend_forwardDeliveryReceiptForMessageID_withAccount_callerURI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forwardDeliveryReceiptForMessageID:withAccount:callerURI:");
}

id objc_msgSend_freeSpaceInHomeDirectory(void *a1, const char *a2, ...)
{
  return _[a1 freeSpaceInHomeDirectory];
}

id objc_msgSend_fromID(void *a1, const char *a2, ...)
{
  return _[a1 fromID];
}

id objc_msgSend_fromMeContext(void *a1, const char *a2, ...)
{
  return _[a1 fromMeContext];
}

id objc_msgSend_fromMeContextWithServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fromMeContextWithServiceName:");
}

id objc_msgSend_fromMeToMe(void *a1, const char *a2, ...)
{
  return _[a1 fromMeToMe];
}

id objc_msgSend_fromURI(void *a1, const char *a2, ...)
{
  return _[a1 fromURI];
}

id objc_msgSend_generateAndStoreGroupPhotoChangeStatusItemForChat_sender_fileTransferGuid_isHidden_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateAndStoreGroupPhotoChangeStatusItemForChat:sender:fileTransferGuid:isHidden:");
}

id objc_msgSend_generatePreviewForTransfer_messageItem_senderContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generatePreviewForTransfer:messageItem:senderContext:");
}

id objc_msgSend_generateSafeRender_constraints_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateSafeRender:constraints:completionBlock:");
}

id objc_msgSend_generateSnapshotForMessageGUID_payloadData_balloonBundleID_senderContext_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateSnapshotForMessageGUID:payloadData:balloonBundleID:senderContext:completionBlock:");
}

id objc_msgSend_generateSnapshotForMessageGUID_payloadURL_balloonBundleID_senderContext_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateSnapshotForMessageGUID:payloadURL:balloonBundleID:senderContext:completionBlock:");
}

id objc_msgSend_generateUnusedChatIdentifierForGroupChatWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateUnusedChatIdentifierForGroupChatWithAccount:");
}

id objc_msgSend_getBoolFromDomain_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBoolFromDomain:forKey:");
}

id objc_msgSend_getBoolFromDomain_forKey_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBoolFromDomain:forKey:defaultValue:");
}

id objc_msgSend_getValueFromDomain_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getValueFromDomain:forKey:");
}

id objc_msgSend_globalReadReceiptSettingVersion(void *a1, const char *a2, ...)
{
  return _[a1 globalReadReceiptSettingVersion];
}

id objc_msgSend_groupActivity(void *a1, const char *a2, ...)
{
  return _[a1 groupActivity];
}

id objc_msgSend_groupController(void *a1, const char *a2, ...)
{
  return _[a1 groupController];
}

id objc_msgSend_groupID(void *a1, const char *a2, ...)
{
  return _[a1 groupID];
}

id objc_msgSend_groupIDForChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "groupIDForChat:");
}

id objc_msgSend_groupMessageContext(void *a1, const char *a2, ...)
{
  return _[a1 groupMessageContext];
}

id objc_msgSend_groupParticipantVersion(void *a1, const char *a2, ...)
{
  return _[a1 groupParticipantVersion];
}

id objc_msgSend_groupPayload(void *a1, const char *a2, ...)
{
  return _[a1 groupPayload];
}

id objc_msgSend_groupPhotoDownloadCompletedForChat_fileTransferError_success_transferGuid_sender_isHidden_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "groupPhotoDownloadCompletedForChat:fileTransferError:success:transferGuid:sender:isHidden:");
}

id objc_msgSend_groupPhotoGuid(void *a1, const char *a2, ...)
{
  return _[a1 groupPhotoGuid];
}

id objc_msgSend_groupPhotoRefreshController(void *a1, const char *a2, ...)
{
  return _[a1 groupPhotoRefreshController];
}

id objc_msgSend_groupPhotoRequestsFromStorage(void *a1, const char *a2, ...)
{
  return _[a1 groupPhotoRequestsFromStorage];
}

id objc_msgSend_groupPhotoRequestsInFlight(void *a1, const char *a2, ...)
{
  return _[a1 groupPhotoRequestsInFlight];
}

id objc_msgSend_groupPhotoUpdatedForChatIdentifier_style_account_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "groupPhotoUpdatedForChatIdentifier:style:account:userInfo:");
}

id objc_msgSend_groupPhotoUploadCompletedForChat_fileTransferGuid_callerURI_fromAccount_message_displayIDs_additionalContext_success_isPhotoRefresh_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "groupPhotoUploadCompletedForChat:fileTransferGuid:callerURI:fromAccount:message:displayIDs:additionalContext: success:isPhotoRefresh:error:");
}

id objc_msgSend_groupPhotoUploadFailedForChat_fileTransferGuid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "groupPhotoUploadFailedForChat:fileTransferGuid:");
}

id objc_msgSend_groupPhotoUploadFailureCount(void *a1, const char *a2, ...)
{
  return _[a1 groupPhotoUploadFailureCount];
}

id objc_msgSend_guid(void *a1, const char *a2, ...)
{
  return _[a1 guid];
}

id objc_msgSend_guidForFileTransferDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "guidForFileTransferDictionary:");
}

id objc_msgSend_guidForNewIncomingTransferWithFilename_isDirectory_totalBytes_hfsType_hfsCreator_hfsFlags_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "guidForNewIncomingTransferWithFilename:isDirectory:totalBytes:hfsType:hfsCreator:hfsFlags:");
}

id objc_msgSend_guidForNewOutgoingTransferWithFilename_isDirectory_totalBytes_hfsType_hfsCreator_hfsFlags_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "guidForNewOutgoingTransferWithFilename:isDirectory:totalBytes:hfsType:hfsCreator:hfsFlags:");
}

id objc_msgSend_guidsForStoredAttachmentPayloadData_messageGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "guidsForStoredAttachmentPayloadData:messageGUID:");
}

id objc_msgSend_guidsForStoredAttachmentPayloadDataURLs_messageGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "guidsForStoredAttachmentPayloadDataURLs:messageGUID:");
}

id objc_msgSend_handle(void *a1, const char *a2, ...)
{
  return _[a1 handle];
}

id objc_msgSend_handleAddToNewGroup_groupID_groupPhotoTransferDict_identifier_session_toIdentifier_toName_toParticipants_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "handleAddToNewGroup:groupID:groupPhotoTransferDict:identifier:session:toIdentifier:toName:toParticipants:");
}

id objc_msgSend_handleBreadcrumbForNewSentMessageItemIfNecessary_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleBreadcrumbForNewSentMessageItemIfNecessary:withContext:");
}

id objc_msgSend_handleMessageDidReplace_newMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleMessageDidReplace:newMessage:");
}

id objc_msgSend_handleNicknameUpdatesFromPeerDevice_fromPeerDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleNicknameUpdatesFromPeerDevice:fromPeerDevice:");
}

id objc_msgSend_handlePayloadDataRequest_attempts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handlePayloadDataRequest:attempts:");
}

id objc_msgSend_handlePayloadDataResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handlePayloadDataResponse:");
}

id objc_msgSend_handleScheduledMessageSend_sentSuccessfully_idsMessage_messageDictionary_canInlineAttachments_msgPayloadUploadDictionary_fromID_fromAccount_originalIDSIdentifier_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "handleScheduledMessageSend:sentSuccessfully:idsMessage:messageDictionary:canInlineAttachments:msgPayloadUploa dDictionary:fromID:fromAccount:originalIDSIdentifier:");
}

id objc_msgSend_handleScheduledMessageSendFailure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleScheduledMessageSendFailure:");
}

id objc_msgSend_handleTranscodeCompletionBlockForMessage_displayIDs_additionalContext_attemptedTranscode_transcodedTransferGUIDs_containsAutoLoopVideo_outputURLs_text_success_error_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "handleTranscodeCompletionBlockForMessage:displayIDs:additionalContext:attemptedTranscode:transcodedTransferGU IDs:containsAutoLoopVideo:outputURLs:text:success:error:completionBlock:");
}

id objc_msgSend_handler_account_groupMessagePayload_messageID_toIdentifier_fromIdentifier_idsService_fromToken_timeStamp_storageContext_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "handler:account:groupMessagePayload:messageID:toIdentifier:fromIdentifier:idsService:fromToken:timeStamp:storageContext:");
}

id objc_msgSend_handler_bubblePayloadData_forMessageID_toIdentifier_fromIdentifier_fromToken_timeStamp_fromIDSID_needsDeliveryReceipt_deliveryContext_storageContext_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "handler:bubblePayloadData:forMessageID:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliver yReceipt:deliveryContext:storageContext:");
}

id objc_msgSend_handler_deleteCommand_toIdentifier_fromIdentifier_fromToken_timeStamp_fromIDSID_needsDeliveryReceipt_deliveryContext_storageContext_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "handler:deleteCommand:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:delivery Context:storageContext:");
}

id objc_msgSend_handler_genericNotification_incomingMessage_userInfo_toIdentifier_fromIdentifier_fromToken_timeStamp_fromIDSID_needsDeliveryReceipt_deliveryContext_storageContext_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "handler:genericNotification:incomingMessage:userInfo:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSI D:needsDeliveryReceipt:deliveryContext:storageContext:");
}

id objc_msgSend_handler_groupMessageCommand_encryptedGroupCommand_messageID_toIdentifier_fromIdentifier_fromToken_timeStamp_fromIDSID_needsDeliveryReceipt_deliveryContext_storageContext_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "handler:groupMessageCommand:encryptedGroupCommand:messageID:toIdentifier:fromIdentifier:fromToken:timeStamp:f romIDSID:needsDeliveryReceipt:deliveryContext:storageContext:");
}

id objc_msgSend_handler_incomingMessage_originalEncryptionType_messageID_toIdentifier_fromIdentifier_fromToken_timeStamp_fromIDSID_incomingEngroup_needsDeliveryReceipt_deliveryContext_storageContext_messageContext_isBeingReplayed_mergeID_wantsCheckpointing_isSnapTrustedUser_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "handler:incomingMessage:originalEncryptionType:messageID:toIdentifier:fromIdentifier:fromToken:timeStamp:from IDSID:incomingEngroup:needsDeliveryReceipt:deliveryContext:storageContext:messageContext:isBeingReplayed:merg eID:wantsCheckpointing:isSnapTrustedUser:");
}

id objc_msgSend_handler_locationShareInfo_toIdentifier_fromIdentifier_fromToken_timeStamp_fromIDSID_needsDeliveryReceipt_deliveryContext_storageContext_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "handler:locationShareInfo:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:deli veryContext:storageContext:");
}

id objc_msgSend_handler_messageIDDelivered_toIdentifier_status_deliveryContext_timeStamp_fromIDSID_needsDeliveryReceipt_deliveryContext_storageContext_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "handler:messageIDDelivered:toIdentifier:status:deliveryContext:timeStamp:fromIDSID:needsDeliveryReceipt:deliv eryContext:storageContext:");
}

id objc_msgSend_handler_messageIDPlayed_toIdentifier_fromIdentifier_fromToken_timeStamp_fromIDSID_needsDeliveryReceipt_deliveryContext_storageContext_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "handler:messageIDPlayed:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:delive ryContext:storageContext:");
}

id objc_msgSend_handler_messageIDRead_toIdentifier_fromIdentifier_fromToken_timeStamp_fromIDSID_needsDeliveryReceipt_deliveryContext_storageContext_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "handler:messageIDRead:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:delivery Context:storageContext:");
}

id objc_msgSend_handler_messageIDReflectedDelivered_incomingMessage_toIdentifier_fromIdentifier_status_deliveryContext_timeStamp_fromIDSID_needsDeliveryReceipt_deliveryContext_storageContext_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "handler:messageIDReflectedDelivered:incomingMessage:toIdentifier:fromIdentifier:status:deliveryContext:timeSt amp:fromIDSID:needsDeliveryReceipt:deliveryContext:storageContext:");
}

id objc_msgSend_handler_messageIDSaved_ofType_toIdentifier_fromIdentifier_groupContext_fromToken_timeStamp_fromIDSID_needsDeliveryReceipt_deliveryContext_storageContext_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "handler:messageIDSaved:ofType:toIdentifier:fromIdentifier:groupContext:fromToken:timeStamp:fromIDSID:needsDel iveryReceipt:deliveryContext:storageContext:");
}

id objc_msgSend_handler_nicknameInfoReceived_userInfo_toIdentifier_fromIdentifier_fromToken_timeStamp_fromIDSID_needsDeliveryReceipt_deliveryContext_storageContext_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "handler:nicknameInfoReceived:userInfo:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDelivery Receipt:deliveryContext:storageContext:");
}

id objc_msgSend_handler_payloadDataRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handler:payloadDataRequest:");
}

id objc_msgSend_handler_payloadDataResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handler:payloadDataResponse:");
}

id objc_msgSend_handler_receivedError_forMessageID_toIdentifier_fromIdentifier_fromToken_timeStamp_fromIDSID_needsDeliveryReceipt_deliveryContext_storageContext_additionalInfo_shouldShowPeerErrors_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "handler:receivedError:forMessageID:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryRec eipt:deliveryContext:storageContext:additionalInfo:shouldShowPeerErrors:");
}

id objc_msgSend_handler_recoverCommand_toIdentifier_fromIdentifier_fromToken_timeStamp_fromIDSID_needsDeliveryReceipt_deliveryContext_storageContext_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "handler:recoverCommand:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:deliver yContext:storageContext:");
}

id objc_msgSend_handler_remoteFileRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handler:remoteFileRequest:");
}

id objc_msgSend_handler_remoteFileResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handler:remoteFileResponse:");
}

id objc_msgSend_handler_updateAttachments_toIdentifier_fromIdentifier_fromToken_timeStamp_fromIDSID_needsDeliveryReceipt_deliveryContext_storageContext_fileTransferUpdates_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "handler:updateAttachments:toIdentifier:fromIdentifier:fromToken:timeStamp:fromIDSID:needsDeliveryReceipt:deli veryContext:storageContext:fileTransferUpdates:");
}

id objc_msgSend_handlers(void *a1, const char *a2, ...)
{
  return _[a1 handlers];
}

id objc_msgSend_hasActivePhoneAccount(void *a1, const char *a2, ...)
{
  return _[a1 hasActivePhoneAccount];
}

id objc_msgSend_hasKnownSenderChatWithChatIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasKnownSenderChatWithChatIdentifier:");
}

id objc_msgSend_hasLTEDataConnection(void *a1, const char *a2, ...)
{
  return _[a1 hasLTEDataConnection];
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasStoredMessageWithGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasStoredMessageWithGUID:");
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_hfsCreator(void *a1, const char *a2, ...)
{
  return _[a1 hfsCreator];
}

id objc_msgSend_hfsFlags(void *a1, const char *a2, ...)
{
  return _[a1 hfsFlags];
}

id objc_msgSend_hfsType(void *a1, const char *a2, ...)
{
  return _[a1 hfsType];
}

id objc_msgSend_historicalMessageGUIDsDeleted_chatGUIDs_queryID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "historicalMessageGUIDsDeleted:chatGUIDs:queryID:");
}

id objc_msgSend_historyForMessagePart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "historyForMessagePart:");
}

id objc_msgSend_host(void *a1, const char *a2, ...)
{
  return _[a1 host];
}

id objc_msgSend_idsAccount(void *a1, const char *a2, ...)
{
  return _[a1 idsAccount];
}

id objc_msgSend_idsAccountForFromURI_toURI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "idsAccountForFromURI:toURI:");
}

id objc_msgSend_idsAccountForURI_IDSServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "idsAccountForURI:IDSServiceName:");
}

id objc_msgSend_idsAccounts(void *a1, const char *a2, ...)
{
  return _[a1 idsAccounts];
}

id objc_msgSend_idsAccountsDidChange(void *a1, const char *a2, ...)
{
  return _[a1 idsAccountsDidChange];
}

id objc_msgSend_idsDestination(void *a1, const char *a2, ...)
{
  return _[a1 idsDestination];
}

id objc_msgSend_idsDeviceForFromID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "idsDeviceForFromID:");
}

id objc_msgSend_idsDeviceFromPushToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "idsDeviceFromPushToken:");
}

id objc_msgSend_idsOptionsWithMessageItem_toID_fromID_sendGUIDData_alternateCallbackID_isBusinessMessage_chatIdentifier_requiredRegProperties_interestingRegProperties_requiresLackOfRegProperties_deliveryContext_isGroupChat_canInlineAttachments_msgPayloadUploadDictionary_messageDictionary_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "idsOptionsWithMessageItem:toID:fromID:sendGUIDData:alternateCallbackID:isBusinessMessage:chatIdentifier:requi redRegProperties:interestingRegProperties:requiresLackOfRegProperties:deliveryContext:isGroupChat:canInlineAt tachments:msgPayloadUploadDictionary:messageDictionary:");
}

id objc_msgSend_idsService(void *a1, const char *a2, ...)
{
  return _[a1 idsService];
}

id objc_msgSend_idsServiceForIDSAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "idsServiceForIDSAccount:");
}

id objc_msgSend_im_URLByAppendingPathComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "im_URLByAppendingPathComponents:");
}

id objc_msgSend_im_enqueuiMessageBlock_withTimeout_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "im_enqueuiMessageBlock:withTimeout:description:");
}

id objc_msgSend_im_generateCopyForURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "im_generateCopyForURL:");
}

id objc_msgSend_im_randomTemporaryFileURLWithFileName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "im_randomTemporaryFileURLWithFileName:");
}

id objc_msgSend_im_registeredURIs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "im_registeredURIs");
}

id objc_msgSend_imdAccount(void *a1, const char *a2, ...)
{
  return _[a1 imdAccount];
}

id objc_msgSend_imdAccountForIDSAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imdAccountForIDSAccount:");
}

id objc_msgSend_incrementPendingReadReceiptFromStorageCount(void *a1, const char *a2, ...)
{
  return _[a1 incrementPendingReadReceiptFromStorageCount];
}

id objc_msgSend_incrementUseCount(void *a1, const char *a2, ...)
{
  return _[a1 incrementUseCount];
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_indexSet(void *a1, const char *a2, ...)
{
  return _[a1 indexSet];
}

id objc_msgSend_informOfCancelledMessageWithMessageGUID_success_cancelType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "informOfCancelledMessageWithMessageGUID:success:cancelType:error:");
}

id objc_msgSend_informOfCancelledScheduledMessageSendWithMessageGUID_sentSuccessfully_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "informOfCancelledScheduledMessageSendWithMessageGUID:sentSuccessfully:error:");
}

id objc_msgSend_informOfChangedGroupPhoto_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "informOfChangedGroupPhoto:");
}

id objc_msgSend_informOfIncomingMessageWithMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "informOfIncomingMessageWithMessage:");
}

id objc_msgSend_informOfOutgoingMessageWithMessage_sentSuccessfully_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "informOfOutgoingMessageWithMessage:sentSuccessfully:error:");
}

id objc_msgSend_informOfScheduledMessage_sentSuccessfully_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "informOfScheduledMessage:sentSuccessfully:error:");
}

id objc_msgSend_initForReadingFromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initForReadingFromData:error:");
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_initWithAttributedString_includeMessageParts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAttributedString:includeMessageParts:");
}

id objc_msgSend_initWithAttributedString_includeMessageParts_isAudioMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAttributedString:includeMessageParts:isAudioMessage:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithCharacters_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCharacters:length:");
}

id objc_msgSend_initWithChat_withIMDAccount_withIDSAccount_withCallerURI_serviceSession_withIDSService_withParticipantURIs_withOriginalParticipantURIs_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithChat:withIMDAccount:withIDSAccount:withCallerURI:serviceSession:withIDSService:withParticipantURIs:wi thOriginalParticipantURIs:");
}

id objc_msgSend_initWithContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContent:");
}

id objc_msgSend_initWithDataRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDataRepresentation:");
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:");
}

id objc_msgSend_initWithDictionary_accountUniqueID_fromID_loginID_serviceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:accountUniqueID:fromID:loginID:serviceName:");
}

id objc_msgSend_initWithDisplayIDs_didSucceed_error_isFromMeToMe_shouldDeactivate_isBackwardsCompatibleMessage_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithDisplayIDs:didSucceed:error:isFromMeToMe:shouldDeactivate:isBackwardsCompatibleMessage:");
}

id objc_msgSend_initWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomain:code:userInfo:");
}

id objc_msgSend_initWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDouble:");
}

id objc_msgSend_initWithFlags_options_timeout_wifiTimeout_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFlags:options:timeout:wifiTimeout:completionBlock:");
}

id objc_msgSend_initWithGroupPayload_additionalPayload_isGroupChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithGroupPayload:additionalPayload:isGroupChat:");
}

id objc_msgSend_initWithHandle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHandle:");
}

id objc_msgSend_initWithIDSAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIDSAccount:");
}

id objc_msgSend_initWithIdentifier_timeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:timeout:");
}

id objc_msgSend_initWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInt:");
}

id objc_msgSend_initWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInteger:");
}

id objc_msgSend_initWithLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLength:");
}

id objc_msgSend_initWithLimitType_limitSize_qualityType_isSticker_allowDownload_lqmEnabled_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLimitType:limitSize:qualityType:isSticker:allowDownload:lqmEnabled:");
}

id objc_msgSend_initWithMessageItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMessageItem:");
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjects:");
}

id objc_msgSend_initWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjectsAndKeys:");
}

id objc_msgSend_initWithOriginalURL_transferId_targetSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOriginalURL:transferId:targetSize:");
}

id objc_msgSend_initWithRemoteMembers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRemoteMembers:");
}

id objc_msgSend_initWithSender_time_body_attributes_fileTransferGUIDs_flags_error_guid_associatedMessageGUID_associatedMessageType_associatedMessageRange_associatedMessageEmoji_messageSummaryInfo_threadIdentifier_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithSender:time:body:attributes:fileTransferGUIDs:flags:error:guid:associatedMessageGUID:associatedMessag eType:associatedMessageRange:associatedMessageEmoji:messageSummaryInfo:threadIdentifier:");
}

id objc_msgSend_initWithSender_time_body_attributes_fileTransferGUIDs_flags_error_guid_threadIdentifier_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSender:time:body:attributes:fileTransferGUIDs:flags:error:guid:threadIdentifier:");
}

id objc_msgSend_initWithSender_time_guid_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSender:time:guid:type:");
}

id objc_msgSend_initWithSenderInfo_time_timeRead_timeDelivered_timePlayed_subject_body_bodyData_attributes_fileTransferGUIDs_flags_guid_messageID_account_accountID_service_handle_roomName_unformattedID_countryCode_expireState_balloonBundleID_payloadData_expressiveSendStyleID_timeExpressiveSendPlayed_errorType_associatedMessageGUID_associatedMessageType_associatedMessageRange_bizIntent_locale_biaReferenceID_messageSummaryInfo_partCount_threadIdentifier_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithSenderInfo:time:timeRead:timeDelivered:timePlayed:subject:body:bodyData:attributes:fileTransferGUIDs: flags:guid:messageID:account:accountID:service:handle:roomName:unformattedID:countryCode:expireState:balloonB undleID:payloadData:expressiveSendStyleID:timeExpressiveSendPlayed:errorType:associatedMessageGUID:associated MessageType:associatedMessageRange:bizIntent:locale:biaReferenceID:messageSummaryInfo:partCount:threadIdentifier:");
}

id objc_msgSend_initWithService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithService:");
}

id objc_msgSend_initWithService_commands_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithService:commands:");
}

id objc_msgSend_initWithService_commands_manuallyAckMessages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithService:commands:manuallyAckMessages:");
}

id objc_msgSend_initWithService_manuallyAckMessages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithService:manuallyAckMessages:");
}

id objc_msgSend_initWithServiceSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServiceSession:");
}

id objc_msgSend_initWithSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSession:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithString_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:attributes:");
}

id objc_msgSend_initWithTimeInterval_name_shouldWake_target_selector_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimeInterval:name:shouldWake:target:selector:userInfo:");
}

id objc_msgSend_initWithUUIDString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUIDString:");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _[a1 intValue];
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _[a1 integerValue];
}

id objc_msgSend_internalName(void *a1, const char *a2, ...)
{
  return _[a1 internalName];
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _[a1 invalidate];
}

id objc_msgSend_invitationPreferencesForAllHandlesWithStyles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invitationPreferencesForAllHandlesWithStyles:");
}

id objc_msgSend_invitePersonInfo_withMessage_toChatID_identifier_style_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invitePersonInfo:withMessage:toChatID:identifier:style:");
}

id objc_msgSend_isAVLessSharePlayEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isAVLessSharePlayEnabled];
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return _[a1 isActive];
}

id objc_msgSend_isAdaptiveImageGlyph(void *a1, const char *a2, ...)
{
  return _[a1 isAdaptiveImageGlyph];
}

id objc_msgSend_isAnimojiV2(void *a1, const char *a2, ...)
{
  return _[a1 isAnimojiV2];
}

id objc_msgSend_isAudioMessage(void *a1, const char *a2, ...)
{
  return _[a1 isAudioMessage];
}

id objc_msgSend_isAutoReply(void *a1, const char *a2, ...)
{
  return _[a1 isAutoReply];
}

id objc_msgSend_isAutoloopVideo(void *a1, const char *a2, ...)
{
  return _[a1 isAutoloopVideo];
}

id objc_msgSend_isAuxImage(void *a1, const char *a2, ...)
{
  return _[a1 isAuxImage];
}

id objc_msgSend_isAuxVideo(void *a1, const char *a2, ...)
{
  return _[a1 isAuxVideo];
}

id objc_msgSend_isBIAEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isBIAEnabled];
}

id objc_msgSend_isBackwardsCompatibleMessage(void *a1, const char *a2, ...)
{
  return _[a1 isBackwardsCompatibleMessage];
}

id objc_msgSend_isBeingRetried(void *a1, const char *a2, ...)
{
  return _[a1 isBeingRetried];
}

id objc_msgSend_isBizAccount(void *a1, const char *a2, ...)
{
  return _[a1 isBizAccount];
}

id objc_msgSend_isBlackholeEnabledForEligibleAccounts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBlackholeEnabledForEligibleAccounts:");
}

id objc_msgSend_isBlackholed(void *a1, const char *a2, ...)
{
  return _[a1 isBlackholed];
}

id objc_msgSend_isBreadcrumb(void *a1, const char *a2, ...)
{
  return _[a1 isBreadcrumb];
}

id objc_msgSend_isCanceled(void *a1, const char *a2, ...)
{
  return _[a1 isCanceled];
}

id objc_msgSend_isCarrierPigeonEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isCarrierPigeonEnabled];
}

id objc_msgSend_isClingBackwardsCompatibilityEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isClingBackwardsCompatibilityEnabled];
}

id objc_msgSend_isComplete(void *a1, const char *a2, ...)
{
  return _[a1 isComplete];
}

id objc_msgSend_isConnected(void *a1, const char *a2, ...)
{
  return _[a1 isConnected];
}

id objc_msgSend_isCritical(void *a1, const char *a2, ...)
{
  return _[a1 isCritical];
}

id objc_msgSend_isDefaultPairedDevice(void *a1, const char *a2, ...)
{
  return _[a1 isDefaultPairedDevice];
}

id objc_msgSend_isDelayedRichLinkBlock(void *a1, const char *a2, ...)
{
  return _[a1 isDelayedRichLinkBlock];
}

id objc_msgSend_isDirectory(void *a1, const char *a2, ...)
{
  return _[a1 isDirectory];
}

id objc_msgSend_isEmpty(void *a1, const char *a2, ...)
{
  return _[a1 isEmpty];
}

id objc_msgSend_isEngramEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isEngramEnabled];
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToData:");
}

id objc_msgSend_isEqualToIgnoringCase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToIgnoringCase:");
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToNumber:");
}

id objc_msgSend_isEqualToSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToSet:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isExpirable(void *a1, const char *a2, ...)
{
  return _[a1 isExpirable];
}

id objc_msgSend_isFiltered(void *a1, const char *a2, ...)
{
  return _[a1 isFiltered];
}

id objc_msgSend_isFinished(void *a1, const char *a2, ...)
{
  return _[a1 isFinished];
}

id objc_msgSend_isFromExternalSource(void *a1, const char *a2, ...)
{
  return _[a1 isFromExternalSource];
}

id objc_msgSend_isFromMe(void *a1, const char *a2, ...)
{
  return _[a1 isFromMe];
}

id objc_msgSend_isFromMomentShare(void *a1, const char *a2, ...)
{
  return _[a1 isFromMomentShare];
}

id objc_msgSend_isGroupChat(void *a1, const char *a2, ...)
{
  return _[a1 isGroupChat];
}

id objc_msgSend_isGroupInBlocklist_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isGroupInBlocklist:");
}

id objc_msgSend_isHighQualityPhotosEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isHighQualityPhotosEnabled];
}

id objc_msgSend_isInternalInstall(void *a1, const char *a2, ...)
{
  return _[a1 isInternalInstall];
}

id objc_msgSend_isInternationalSpamFilteringEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isInternationalSpamFilteringEnabled];
}

id objc_msgSend_isKnownContact_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isKnownContact:");
}

id objc_msgSend_isLocation(void *a1, const char *a2, ...)
{
  return _[a1 isLocation];
}

id objc_msgSend_isMainThread(void *a1, const char *a2, ...)
{
  return _[a1 isMainThread];
}

id objc_msgSend_isOffGridModeWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOffGridModeWithCompletion:");
}

id objc_msgSend_isOpusAudioMessage(void *a1, const char *a2, ...)
{
  return _[a1 isOpusAudioMessage];
}

id objc_msgSend_isOscarChat(void *a1, const char *a2, ...)
{
  return _[a1 isOscarChat];
}

id objc_msgSend_isPendingSatelliteSend(void *a1, const char *a2, ...)
{
  return _[a1 isPendingSatelliteSend];
}

id objc_msgSend_isPreviewAttachmentSizeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isPreviewAttachmentSizeEnabled];
}

id objc_msgSend_isRecipeBasedSticker(void *a1, const char *a2, ...)
{
  return _[a1 isRecipeBasedSticker];
}

id objc_msgSend_isReplicating(void *a1, const char *a2, ...)
{
  return _[a1 isReplicating];
}

id objc_msgSend_isSOS(void *a1, const char *a2, ...)
{
  return _[a1 isSOS];
}

id objc_msgSend_isScheduledMessagesCoreEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isScheduledMessagesCoreEnabled];
}

id objc_msgSend_isScreenLit(void *a1, const char *a2, ...)
{
  return _[a1 isScreenLit];
}

id objc_msgSend_isSimpleString(void *a1, const char *a2, ...)
{
  return _[a1 isSimpleString];
}

id objc_msgSend_isSticker(void *a1, const char *a2, ...)
{
  return _[a1 isSticker];
}

id objc_msgSend_isSuccess(void *a1, const char *a2, ...)
{
  return _[a1 isSuccess];
}

id objc_msgSend_isTapToRetry(void *a1, const char *a2, ...)
{
  return _[a1 isTapToRetry];
}

id objc_msgSend_isTemporaryBackwardCompatibilityAsset(void *a1, const char *a2, ...)
{
  return _[a1 isTemporaryBackwardCompatibilityAsset];
}

id objc_msgSend_isTypingMessage(void *a1, const char *a2, ...)
{
  return _[a1 isTypingMessage];
}

id objc_msgSend_isUnderFirstDataProtectionLock(void *a1, const char *a2, ...)
{
  return _[a1 isUnderFirstDataProtectionLock];
}

id objc_msgSend_isWiFiUsable(void *a1, const char *a2, ...)
{
  return _[a1 isWiFiUsable];
}

id objc_msgSend_itemWithGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemWithGUID:");
}

id objc_msgSend_joinChat_handleInfo_style_groupID_lastAddressedHandle_lastAddressedSIMID_joinProperties_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "joinChat:handleInfo:style:groupID:lastAddressedHandle:lastAddressedSIMID:joinProperties:");
}

id objc_msgSend_largeFileSizeFor_allowedLargerRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "largeFileSizeFor:allowedLargerRepresentation:");
}

id objc_msgSend_lastAddressedLocalHandle(void *a1, const char *a2, ...)
{
  return _[a1 lastAddressedLocalHandle];
}

id objc_msgSend_lastMessage(void *a1, const char *a2, ...)
{
  return _[a1 lastMessage];
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _[a1 lastObject];
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 lastPathComponent];
}

id objc_msgSend_lastSeenMessageGuid(void *a1, const char *a2, ...)
{
  return _[a1 lastSeenMessageGuid];
}

id objc_msgSend_lastSentMessageDate(void *a1, const char *a2, ...)
{
  return _[a1 lastSentMessageDate];
}

id objc_msgSend_lastUsedBIAReferenceID(void *a1, const char *a2, ...)
{
  return _[a1 lastUsedBIAReferenceID];
}

id objc_msgSend_lastUsedBIAUserID(void *a1, const char *a2, ...)
{
  return _[a1 lastUsedBIAUserID];
}

id objc_msgSend_launchAppForJoinRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchAppForJoinRequest:");
}

id objc_msgSend_leaveChat_fromID_fromAccount_session_service_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leaveChat:fromID:fromAccount:session:service:completionBlock:");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_limitSize(void *a1, const char *a2, ...)
{
  return _[a1 limitSize];
}

id objc_msgSend_limitType(void *a1, const char *a2, ...)
{
  return _[a1 limitType];
}

id objc_msgSend_linkQualityValueForInterfaceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "linkQualityValueForInterfaceType:");
}

id objc_msgSend_localCommandHandlerRegistry(void *a1, const char *a2, ...)
{
  return _[a1 localCommandHandlerRegistry];
}

id objc_msgSend_localDevice(void *a1, const char *a2, ...)
{
  return _[a1 localDevice];
}

id objc_msgSend_localPath(void *a1, const char *a2, ...)
{
  return _[a1 localPath];
}

id objc_msgSend_localURL(void *a1, const char *a2, ...)
{
  return _[a1 localURL];
}

id objc_msgSend_locale(void *a1, const char *a2, ...)
{
  return _[a1 locale];
}

id objc_msgSend_lockDownManager(void *a1, const char *a2, ...)
{
  return _[a1 lockDownManager];
}

id objc_msgSend_logDumpAndSendMessageTo_forHours_reason_requirePreviousPrompt_willSendBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logDumpAndSendMessageTo:forHours:reason:requirePreviousPrompt:willSendBlock:");
}

id objc_msgSend_logMessageReceivedWithGUID_fromIdentifier_toIdentifier_conversationType_messageType_messageProtocol_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "logMessageReceivedWithGUID:fromIdentifier:toIdentifier:conversationType:messageType:messageProtocol:");
}

id objc_msgSend_logMessageSendFailureWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logMessageSendFailureWithError:");
}

id objc_msgSend_logMessageSentWithGUID_fromIdentifier_toIdentifier_conversationType_messageType_sendDuration_errorCode_messageProtocol_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "logMessageSentWithGUID:fromIdentifier:toIdentifier:conversationType:messageType:sendDuration:errorCode:messageProtocol:");
}

id objc_msgSend_loginID(void *a1, const char *a2, ...)
{
  return _[a1 loginID];
}

id objc_msgSend_loginServiceSessionWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loginServiceSessionWithAccount:");
}

id objc_msgSend_loginStatus(void *a1, const char *a2, ...)
{
  return _[a1 loginStatus];
}

id objc_msgSend_logoutServiceSessionWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logoutServiceSessionWithAccount:");
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return _[a1 longLongValue];
}

id objc_msgSend_longValue(void *a1, const char *a2, ...)
{
  return _[a1 longValue];
}

id objc_msgSend_lookUpENGroupForChat_service_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lookUpENGroupForChat:service:completion:");
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return _[a1 lowercaseString];
}

id objc_msgSend_lqmEnabled(void *a1, const char *a2, ...)
{
  return _[a1 lqmEnabled];
}

id objc_msgSend_mainSession(void *a1, const char *a2, ...)
{
  return _[a1 mainSession];
}

id objc_msgSend_makeNewIncomingTransferWithGUID_filename_isDirectory_totalBytes_hfsType_hfsCreator_hfsFlags_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "makeNewIncomingTransferWithGUID:filename:isDirectory:totalBytes:hfsType:hfsCreator:hfsFlags:");
}

id objc_msgSend_manuallyAckMessagesEnabled(void *a1, const char *a2, ...)
{
  return _[a1 manuallyAckMessagesEnabled];
}

id objc_msgSend_markAsSpamForIDs_style_onServices_chatID_queryID_autoReport_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markAsSpamForIDs:style:onServices:chatID:queryID:autoReport:");
}

id objc_msgSend_markHandlesAsAllowed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markHandlesAsAllowed:");
}

id objc_msgSend_maxRefreshTime(void *a1, const char *a2, ...)
{
  return _[a1 maxRefreshTime];
}

id objc_msgSend_meCardUpdated(void *a1, const char *a2, ...)
{
  return _[a1 meCardUpdated];
}

id objc_msgSend_memberDisplayIDsFromParticipants_toIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "memberDisplayIDsFromParticipants:toIdentifier:");
}

id objc_msgSend_messageAttachmentSendableUTIs(void *a1, const char *a2, ...)
{
  return _[a1 messageAttachmentSendableUTIs];
}

id objc_msgSend_messageBody(void *a1, const char *a2, ...)
{
  return _[a1 messageBody];
}

id objc_msgSend_messageDeliveryContext(void *a1, const char *a2, ...)
{
  return _[a1 messageDeliveryContext];
}

id objc_msgSend_messageDeliveryController_serverUpdatedTimestampMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageDeliveryController:serverUpdatedTimestampMessage:");
}

id objc_msgSend_messageDeliveryController_service_didFlushCacheForKTPeerURI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageDeliveryController:service:didFlushCacheForKTPeerURI:");
}

id objc_msgSend_messageDeliveryController_service_didFlushCacheForRemoteURI_fromURI_guid_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageDeliveryController:service:didFlushCacheForRemoteURI:fromURI:guid:");
}

id objc_msgSend_messageDictionaryWithMessageItem_isBusiness_chatIdentifier_toParticipants_originallyToParticipants_additionalContext_msgPayloadUploadDictionary_originalPayload_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "messageDictionaryWithMessageItem:isBusiness:chatIdentifier:toParticipants:originallyToParticipants:additional Context:msgPayloadUploadDictionary:originalPayload:");
}

id objc_msgSend_messageGUID(void *a1, const char *a2, ...)
{
  return _[a1 messageGUID];
}

id objc_msgSend_messageHadEncryptedData(void *a1, const char *a2, ...)
{
  return _[a1 messageHadEncryptedData];
}

id objc_msgSend_messageHandshakeState(void *a1, const char *a2, ...)
{
  return _[a1 messageHandshakeState];
}

id objc_msgSend_messageID(void *a1, const char *a2, ...)
{
  return _[a1 messageID];
}

id objc_msgSend_messagePartBody(void *a1, const char *a2, ...)
{
  return _[a1 messagePartBody];
}

id objc_msgSend_messagePartGUID(void *a1, const char *a2, ...)
{
  return _[a1 messagePartGUID];
}

id objc_msgSend_messagePartRange(void *a1, const char *a2, ...)
{
  return _[a1 messagePartRange];
}

id objc_msgSend_messagePartText(void *a1, const char *a2, ...)
{
  return _[a1 messagePartText];
}

id objc_msgSend_messageServiceTypeForURI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageServiceTypeForURI:");
}

id objc_msgSend_messageStore(void *a1, const char *a2, ...)
{
  return _[a1 messageStore];
}

id objc_msgSend_messageSummaryInfo(void *a1, const char *a2, ...)
{
  return _[a1 messageSummaryInfo];
}

id objc_msgSend_messageSummaryInfoForSending(void *a1, const char *a2, ...)
{
  return _[a1 messageSummaryInfoForSending];
}

id objc_msgSend_messageWithGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageWithGUID:");
}

id objc_msgSend_messagesWithAssociatedGUID_shouldLoadAttachments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messagesWithAssociatedGUID:shouldLoadAttachments:");
}

id objc_msgSend_mimeType(void *a1, const char *a2, ...)
{
  return _[a1 mimeType];
}

id objc_msgSend_minRefreshTime(void *a1, const char *a2, ...)
{
  return _[a1 minRefreshTime];
}

id objc_msgSend_minimumFreeSpace(void *a1, const char *a2, ...)
{
  return _[a1 minimumFreeSpace];
}

id objc_msgSend_minusSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minusSet:");
}

id objc_msgSend_mmcsTargetReportSizeForHighQualityPhotoSize_commonCapabilities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mmcsTargetReportSizeForHighQualityPhotoSize:commonCapabilities:");
}

id objc_msgSend_modernHighQualityPhotoSizeLimit(void *a1, const char *a2, ...)
{
  return _[a1 modernHighQualityPhotoSizeLimit];
}

id objc_msgSend_mostRecentGroupPhotoRequestDates(void *a1, const char *a2, ...)
{
  return _[a1 mostRecentGroupPhotoRequestDates];
}

id objc_msgSend_msgSession(void *a1, const char *a2, ...)
{
  return _[a1 msgSession];
}

id objc_msgSend_mutableBytes(void *a1, const char *a2, ...)
{
  return _[a1 mutableBytes];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_nanoSecondsFromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nanoSecondsFromDate:");
}

id objc_msgSend_needsRelay(void *a1, const char *a2, ...)
{
  return _[a1 needsRelay];
}

id objc_msgSend_newGroupMessagePayloadForChat_fromID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newGroupMessagePayloadForChat:fromID:");
}

id objc_msgSend_newNicknameInfoToSend(void *a1, const char *a2, ...)
{
  return _[a1 newNicknameInfoToSend];
}

id objc_msgSend_newlineCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 newlineCharacterSet];
}

id objc_msgSend_nicknameForHandleURI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nicknameForHandleURI:");
}

id objc_msgSend_noSpaceForHighQualityLimit_qualityType_isSticker_lqmEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noSpaceForHighQualityLimit:qualityType:isSticker:lqmEnabled:");
}

id objc_msgSend_noSpaceForLowQualityLimit_qualityType_isSticker_lqmEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noSpaceForLowQualityLimit:qualityType:isSticker:lqmEnabled:");
}

id objc_msgSend_nonRetainingArray(void *a1, const char *a2, ...)
{
  return _[a1 nonRetainingArray];
}

id objc_msgSend_normalizedHandleWithDestinationID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "normalizedHandleWithDestinationID:");
}

id objc_msgSend_noteItemFromStorage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteItemFromStorage:");
}

id objc_msgSend_noteLastItemFromStorage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteLastItemFromStorage:");
}

id objc_msgSend_noteLastItemProcessed(void *a1, const char *a2, ...)
{
  return _[a1 noteLastItemProcessed];
}

id objc_msgSend_noteRecentMessageForPeople_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteRecentMessageForPeople:");
}

id objc_msgSend_noteRecentMessageFromChatID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteRecentMessageFromChatID:");
}

id objc_msgSend_notificationIDSTokenURI(void *a1, const char *a2, ...)
{
  return _[a1 notificationIDSTokenURI];
}

id objc_msgSend_notifyDidSendMessageID_account_shouldNotify_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyDidSendMessageID:account:shouldNotify:");
}

id objc_msgSend_notifyPeersWithScheduledMessageUpdate_scheduleState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyPeersWithScheduledMessageUpdate:scheduleState:");
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return _[a1 now];
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _[a1 null];
}

id objc_msgSend_numMessagesSent(void *a1, const char *a2, ...)
{
  return _[a1 numMessagesSent];
}

id objc_msgSend_numberFromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberFromString:");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLong:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_numberWithUnsignedChar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedChar:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return _[a1 object];
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_originalParticipantURIs(void *a1, const char *a2, ...)
{
  return _[a1 originalParticipantURIs];
}

id objc_msgSend_originalTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 originalTimestamp];
}

id objc_msgSend_originalURL(void *a1, const char *a2, ...)
{
  return _[a1 originalURL];
}

id objc_msgSend_outHTML(void *a1, const char *a2, ...)
{
  return _[a1 outHTML];
}

id objc_msgSend_outgoingReplicationCallerIDForChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outgoingReplicationCallerIDForChat:");
}

id objc_msgSend_overwritePerChatReadReceiptSettingsWithGlobalValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overwritePerChatReadReceiptSettingsWithGlobalValue:");
}

id objc_msgSend_owner(void *a1, const char *a2, ...)
{
  return _[a1 owner];
}

id objc_msgSend_pairedDevice(void *a1, const char *a2, ...)
{
  return _[a1 pairedDevice];
}

id objc_msgSend_parentChatID(void *a1, const char *a2, ...)
{
  return _[a1 parentChatID];
}

id objc_msgSend_parseContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseContext:");
}

id objc_msgSend_parser_foundAttributes_atCharacterIndex_fileTransferGUID_filename_bookmark_width_height_isAnimoji_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "parser:foundAttributes:atCharacterIndex:fileTransferGUID:filename:bookmark:width:height:isAnimoji:");
}

id objc_msgSend_parser_foundAttributes_inRange_fileTransferGUID_filename_bookmark_width_height_isAnimoji_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parser:foundAttributes:inRange:fileTransferGUID:filename:bookmark:width:height:isAnimoji:");
}

id objc_msgSend_participantURIs(void *a1, const char *a2, ...)
{
  return _[a1 participantURIs];
}

id objc_msgSend_participants(void *a1, const char *a2, ...)
{
  return _[a1 participants];
}

id objc_msgSend_participantsForDestinations_service_listenerID_queue_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "participantsForDestinations:service:listenerID:queue:completionBlock:");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _[a1 path];
}

id objc_msgSend_pathExtension(void *a1, const char *a2, ...)
{
  return _[a1 pathExtension];
}

id objc_msgSend_pathExtensionForMIMEType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathExtensionForMIMEType:");
}

id objc_msgSend_pathExtensionForUTIType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathExtensionForUTIType:");
}

id objc_msgSend_payloadData(void *a1, const char *a2, ...)
{
  return _[a1 payloadData];
}

id objc_msgSend_pendingENGroupParticipantUpdate(void *a1, const char *a2, ...)
{
  return _[a1 pendingENGroupParticipantUpdate];
}

id objc_msgSend_pendingGroupPhotoDownloads(void *a1, const char *a2, ...)
{
  return _[a1 pendingGroupPhotoDownloads];
}

id objc_msgSend_pendingRemoteFileRequests(void *a1, const char *a2, ...)
{
  return _[a1 pendingRemoteFileRequests];
}

id objc_msgSend_performGroupTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performGroupTask:");
}

id objc_msgSend_performSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:");
}

id objc_msgSend_personCentricID(void *a1, const char *a2, ...)
{
  return _[a1 personCentricID];
}

id objc_msgSend_populateCacheForHandleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "populateCacheForHandleID:");
}

id objc_msgSend_populateCacheWithAvailabilityVerificationTokensForHandleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "populateCacheWithAvailabilityVerificationTokensForHandleID:");
}

id objc_msgSend_postNotificationName_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:");
}

id objc_msgSend_powerLogConversationType(void *a1, const char *a2, ...)
{
  return _[a1 powerLogConversationType];
}

id objc_msgSend_powerLogMessageType(void *a1, const char *a2, ...)
{
  return _[a1 powerLogMessageType];
}

id objc_msgSend_preWarmMMCSForOwnerID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preWarmMMCSForOwnerID:");
}

id objc_msgSend_prefixedURI(void *a1, const char *a2, ...)
{
  return _[a1 prefixedURI];
}

id objc_msgSend_processDownloadedPayloadData_forMessageGUID_balloonBundleID_fromIdentifier_senderToken_withCompletionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "processDownloadedPayloadData:forMessageGUID:balloonBundleID:fromIdentifier:senderToken:withCompletionBlock:");
}

id objc_msgSend_processMessageAttachmentDictionary_forMessageGUID_balloonBundleID_fromIdentifier_senderToken_withCompletionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "processMessageAttachmentDictionary:forMessageGUID:balloonBundleID:fromIdentifier:senderToken:withCompletionBlock:");
}

id objc_msgSend_processMessageForSending_toChat_style_allowWatchdog_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processMessageForSending:toChat:style:allowWatchdog:account:");
}

id objc_msgSend_processMessageForSending_toChat_style_allowWatchdog_account_didReplaceMessageBlock_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "processMessageForSending:toChat:style:allowWatchdog:account:didReplaceMessageBlock:completionBlock:");
}

id objc_msgSend_productVersion(void *a1, const char *a2, ...)
{
  return _[a1 productVersion];
}

id objc_msgSend_properties(void *a1, const char *a2, ...)
{
  return _[a1 properties];
}

id objc_msgSend_pushToken(void *a1, const char *a2, ...)
{
  return _[a1 pushToken];
}

id objc_msgSend_qualityType(void *a1, const char *a2, ...)
{
  return _[a1 qualityType];
}

id objc_msgSend_queueChatToSendNicknamePostUploadIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queueChatToSendNicknamePostUploadIfNeeded:");
}

id objc_msgSend_readReceiptsGloballyEnabled(void *a1, const char *a2, ...)
{
  return _[a1 readReceiptsGloballyEnabled];
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return _[a1 reason];
}

id objc_msgSend_receiveFileTransfer_topic_path_requestURLString_ownerID_signature_decryptionKey_fileSize_progressBlock_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "receiveFileTransfer:topic:path:requestURLString:ownerID:signature:decryptionKey:fileSize:progressBlock:completionBlock:");
}

id objc_msgSend_receiveFileTransfer_transferGUID_topic_path_requestURLString_ownerID_signature_decryptionKey_fileSize_balloonBundleID_senderContext_progressBlock_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "receiveFileTransfer:transferGUID:topic:path:requestURLString:ownerID:signature:decryptionKey:fileSize:balloon BundleID:senderContext:progressBlock:completionBlock:");
}

id objc_msgSend_receiveGroupUpdate_chat_service_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiveGroupUpdate:chat:service:");
}

id objc_msgSend_receiveMessageData_account_session_toIdentifier_fromIdentifier_incomingEngroup_service_timestamp_fromStorage_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "receiveMessageData:account:session:toIdentifier:fromIdentifier:incomingEngroup:service:timestamp:fromStorage: completionBlock:");
}

id objc_msgSend_receivedBlackholeError(void *a1, const char *a2, ...)
{
  return _[a1 receivedBlackholeError];
}

id objc_msgSend_receivedGroupPhotoUpdate_chat_sender_isHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivedGroupPhotoUpdate:chat:sender:isHidden:");
}

id objc_msgSend_receivedIncomingLocationSharePacket_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivedIncomingLocationSharePacket:");
}

id objc_msgSend_receiverIsCandidateForHawking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiverIsCandidateForHawking:");
}

id objc_msgSend_receiverIsCandidateForJunk_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiverIsCandidateForJunk:forAccount:");
}

id objc_msgSend_recipient(void *a1, const char *a2, ...)
{
  return _[a1 recipient];
}

id objc_msgSend_recoverChatsForCommandDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recoverChatsForCommandDictionary:");
}

id objc_msgSend_recoverParticipantsIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 recoverParticipantsIfNeeded];
}

id objc_msgSend_refreshDate(void *a1, const char *a2, ...)
{
  return _[a1 refreshDate];
}

id objc_msgSend_refreshRequests(void *a1, const char *a2, ...)
{
  return _[a1 refreshRequests];
}

id objc_msgSend_refreshStatusForKTPeerURI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshStatusForKTPeerURI:");
}

id objc_msgSend_refreshTTLForGroupPhoto_chat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshTTLForGroupPhoto:chat:");
}

id objc_msgSend_registeredURIs(void *a1, const char *a2, ...)
{
  return _[a1 registeredURIs];
}

id objc_msgSend_registration(void *a1, const char *a2, ...)
{
  return _[a1 registration];
}

id objc_msgSend_remapMessageError_toError_forChat_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remapMessageError:toError:forChat:completion:");
}

id objc_msgSend_remoteFileResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteFileResponse:");
}

id objc_msgSend_remotefileRequest_attempts_shouldRetry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remotefileRequest:attempts:shouldRetry:");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _[a1 removeAllObjects];
}

id objc_msgSend_removeDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDelegate:");
}

id objc_msgSend_removeFastDormancyDisableToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeFastDormancyDisableToken:");
}

id objc_msgSend_removeItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtPath:error:");
}

id objc_msgSend_removeItemAtURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtURL:error:");
}

id objc_msgSend_removeListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeListener:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectIdenticalTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectIdenticalTo:");
}

id objc_msgSend_removeObjectsForKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsForKeys:");
}

id objc_msgSend_removeObjectsInArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInArray:");
}

id objc_msgSend_removeObjectsInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInRange:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_removeParticipants_toChat_fromID_fromAccount_session_service_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeParticipants:toChat:fromID:fromAccount:session:service:completionBlock:");
}

id objc_msgSend_removeParticipantsFromENGroup_chat_service_fromID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeParticipantsFromENGroup:chat:service:fromID:completion:");
}

id objc_msgSend_removeTransferForGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeTransferForGUID:");
}

id objc_msgSend_replaceObjectAtIndex_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceObjectAtIndex:withObject:");
}

id objc_msgSend_replaceTransferWithSafeTransfer_constraints_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceTransferWithSafeTransfer:constraints:completionBlock:");
}

id objc_msgSend_replayMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replayMessage:");
}

id objc_msgSend_replicatedFallbackGUIDs(void *a1, const char *a2, ...)
{
  return _[a1 replicatedFallbackGUIDs];
}

id objc_msgSend_replicationAccount(void *a1, const char *a2, ...)
{
  return _[a1 replicationAccount];
}

id objc_msgSend_replicationSourceID(void *a1, const char *a2, ...)
{
  return _[a1 replicationSourceID];
}

id objc_msgSend_replicationSourceIDForSending(void *a1, const char *a2, ...)
{
  return _[a1 replicationSourceIDForSending];
}

id objc_msgSend_replyToGUID(void *a1, const char *a2, ...)
{
  return _[a1 replyToGUID];
}

id objc_msgSend_requestContentHeaders(void *a1, const char *a2, ...)
{
  return _[a1 requestContentHeaders];
}

id objc_msgSend_requestContentVersion(void *a1, const char *a2, ...)
{
  return _[a1 requestContentVersion];
}

id objc_msgSend_requestGroupPhotoIfNecessary_incomingParticipantVersion_incomingGroupPhotoCreationDate_toIdentifier_fromIdentifier_messageIsFromStorage_session_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "requestGroupPhotoIfNecessary:incomingParticipantVersion:incomingGroupPhotoCreationDate:toIdentifier:fromIdent ifier:messageIsFromStorage:session:");
}

id objc_msgSend_resetTransfer_andPostError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetTransfer:andPostError:");
}

id objc_msgSend_responseCode(void *a1, const char *a2, ...)
{
  return _[a1 responseCode];
}

id objc_msgSend_responseContentBody(void *a1, const char *a2, ...)
{
  return _[a1 responseContentBody];
}

id objc_msgSend_responseContentHeaders(void *a1, const char *a2, ...)
{
  return _[a1 responseContentHeaders];
}

id objc_msgSend_responseContentVersion(void *a1, const char *a2, ...)
{
  return _[a1 responseContentVersion];
}

id objc_msgSend_restrictionAllowedBySettingWithQualityType_isSticker_lqmEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restrictionAllowedBySettingWithQualityType:isSticker:lqmEnabled:");
}

id objc_msgSend_restrictionDisallowedBySettingWithQualityType_isSticker_lqmEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restrictionDisallowedBySettingWithQualityType:isSticker:lqmEnabled:");
}

id objc_msgSend_restrictionForceAllowedWithQualityType_isSticker_lqmEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restrictionForceAllowedWithQualityType:isSticker:lqmEnabled:");
}

id objc_msgSend_restrictionWithLimitType_limitSize_qualityType_isSticker_allowDownload_lqmEnabled_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restrictionWithLimitType:limitSize:qualityType:isSticker:allowDownload:lqmEnabled:");
}

id objc_msgSend_retractedPartIndexes(void *a1, const char *a2, ...)
{
  return _[a1 retractedPartIndexes];
}

id objc_msgSend_retrieveAttachmentsForMessage_inlineAttachments_displayID_topic_comingFromStorage_shouldForceAutoDownload_senderContext_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "retrieveAttachmentsForMessage:inlineAttachments:displayID:topic:comingFromStorage:shouldForceAutoDownload:sen derContext:completionBlock:");
}

id objc_msgSend_retrieveStickerWithProperties_isAdaptiveImageGlyph_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrieveStickerWithProperties:isAdaptiveImageGlyph:completionBlock:");
}

id objc_msgSend_retryToParticipant(void *a1, const char *a2, ...)
{
  return _[a1 retryToParticipant];
}

id objc_msgSend_richLinkURLs(void *a1, const char *a2, ...)
{
  return _[a1 richLinkURLs];
}

id objc_msgSend_roomName(void *a1, const char *a2, ...)
{
  return _[a1 roomName];
}

id objc_msgSend_sandboxToken(void *a1, const char *a2, ...)
{
  return _[a1 sandboxToken];
}

id objc_msgSend_sanitizeParticipants_excludingHandles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sanitizeParticipants:excludingHandles:");
}

id objc_msgSend_scheduleState(void *a1, const char *a2, ...)
{
  return _[a1 scheduleState];
}

id objc_msgSend_scheduleType(void *a1, const char *a2, ...)
{
  return _[a1 scheduleType];
}

id objc_msgSend_scheduledMessageCoordinator(void *a1, const char *a2, ...)
{
  return _[a1 scheduledMessageCoordinator];
}

id objc_msgSend_scheduledMessageOriginalTransferGUIDs(void *a1, const char *a2, ...)
{
  return _[a1 scheduledMessageOriginalTransferGUIDs];
}

id objc_msgSend_scheme(void *a1, const char *a2, ...)
{
  return _[a1 scheme];
}

id objc_msgSend_sendAckForMessageWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAckForMessageWithContext:");
}

id objc_msgSend_sendAttachmentsForMessage_canSendInline_displayIDs_additionalContext_commonCapabilities_mode_sessionInfo_topic_completionBlock_uploadFailureBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendAttachmentsForMessage:canSendInline:displayIDs:additionalContext:commonCapabilities:mode:sessionInfo:topi c:completionBlock:uploadFailureBlock:");
}

id objc_msgSend_sendAttachmentsForMessage_canSendInline_displayIDs_additionalContext_mode_fromID_recipients_completionBlock_uploadFailureBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendAttachmentsForMessage:canSendInline:displayIDs:additionalContext:mode:fromID:recipients:completionBlock:u ploadFailureBlock:");
}

id objc_msgSend_sendBubblePayloadMessageDictionary_fromID_fromAccount_toURIs_toGroup_priority_options_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendBubblePayloadMessageDictionary:fromID:fromAccount:toURIs:toGroup:priority:options:completionBlock:");
}

id objc_msgSend_sendCloseSessionMessageDictionary_toBusinessURI_fromURI_fromAccount_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendCloseSessionMessageDictionary:toBusinessURI:fromURI:fromAccount:completionBlock:");
}

id objc_msgSend_sendCommand_withProperties_toPerson_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendCommand:withProperties:toPerson:");
}

id objc_msgSend_sendCommand_withProperties_toPerson_toChatID_identifier_style_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendCommand:withProperties:toPerson:toChatID:identifier:style:");
}

id objc_msgSend_sendDate(void *a1, const char *a2, ...)
{
  return _[a1 sendDate];
}

id objc_msgSend_sendDeleteCommand_forChatGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendDeleteCommand:forChatGUID:");
}

id objc_msgSend_sendDeliveryReceiptForMessageID_toID_deliveryContext_needsDeliveryReceipt_callerID_account_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendDeliveryReceiptForMessageID:toID:deliveryContext:needsDeliveryReceipt:callerID:account:");
}

id objc_msgSend_sendDuration(void *a1, const char *a2, ...)
{
  return _[a1 sendDuration];
}

id objc_msgSend_sendEditedMessage_partIndex_editType_destinations_chatIdentifier_account_fromID_backwardCompatabilityText_unsupportedDestinationsHandler_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendEditedMessage:partIndex:editType:destinations:chatIdentifier:account:fromID:backwardCompatabilityText:uns upportedDestinationsHandler:completionBlock:");
}

id objc_msgSend_sendFTMessage_attempts_withCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendFTMessage:attempts:withCompletionBlock:");
}

id objc_msgSend_sendFallbackAttachmentsForMessage_displayIDs_additionalContext_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendFallbackAttachmentsForMessage:displayIDs:additionalContext:completionBlock:");
}

id objc_msgSend_sendFilePath_topic_userInfo_transferID_encryptFile_progressBlock_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendFilePath:topic:userInfo:transferID:encryptFile:progressBlock:completionBlock:");
}

id objc_msgSend_sendGroupPhotoUpdate_toChatID_identifier_style_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendGroupPhotoUpdate:toChatID:identifier:style:account:");
}

id objc_msgSend_sendGroupPhotoUpdate_toChatID_identifier_style_account_isPhotoRefresh_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendGroupPhotoUpdate:toChatID:identifier:style:account:isPhotoRefresh:");
}

id objc_msgSend_sendLogDumpMessageAtFilePath_fromAccount_fromID_toRecipient_shouldDeleteFile_withCompletion_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendLogDumpMessageAtFilePath:fromAccount:fromID:toRecipient:shouldDeleteFile:withCompletion:");
}

id objc_msgSend_sendManualAckForMessageWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendManualAckForMessageWithContext:");
}

id objc_msgSend_sendMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessage:");
}

id objc_msgSend_sendMessage_context_groupContext_toGroup_toParticipants_originallyToParticipants_fromID_fromAccount_chatIdentifier_originalPayload_replyToMessageGUID_fakeSavedReceiptBlock_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendMessage:context:groupContext:toGroup:toParticipants:originallyToParticipants:fromID:fromAccount:chatIdent ifier:originalPayload:replyToMessageGUID:fakeSavedReceiptBlock:completionBlock:");
}

id objc_msgSend_sendMessage_toChat_fromID_fromAccount_session_service_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessage:toChat:fromID:fromAccount:session:service:completionBlock:");
}

id objc_msgSend_sendMessage_toChat_style_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessage:toChat:style:");
}

id objc_msgSend_sendMessage_toChat_style_account_destinationHandles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessage:toChat:style:account:destinationHandles:");
}

id objc_msgSend_sendMessageDictionary_encryptDictionary_fromID_fromAccount_toURIs_toGroup_priority_options_willSendBlock_callCompletionOnSuccess_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendMessageDictionary:encryptDictionary:fromID:fromAccount:toURIs:toGroup:priority:options:willSendBlock:call CompletionOnSuccess:completionBlock:");
}

id objc_msgSend_sendMessageDictionary_encryptDictionary_fromID_fromAccount_toURIs_toGroup_priority_options_willSendBlock_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendMessageDictionary:encryptDictionary:fromID:fromAccount:toURIs:toGroup:priority:options:willSendBlock:completionBlock:");
}

id objc_msgSend_sendMessageDictionary_fromID_fromAccount_toURIs_toGroup_priority_options_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageDictionary:fromID:fromAccount:toURIs:toGroup:priority:options:completionBlock:");
}

id objc_msgSend_sendMessageDictionary_fromID_fromAccount_toURIs_toGroup_priority_options_willSendBlock_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendMessageDictionary:fromID:fromAccount:toURIs:toGroup:priority:options:willSendBlock:completionBlock:");
}

id objc_msgSend_sendMessageError_toToken_toID_toGroup_fromID_fromAccount_forMessageID_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageError:toToken:toID:toGroup:fromID:fromAccount:forMessageID:completionBlock:");
}

id objc_msgSend_sendMessageErrorWithInfo_toToken_toID_toGroup_fromID_fromAccount_forMessageID_additionalInfo_fileSize_failureTimeSeconds_failReasonMessage_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendMessageErrorWithInfo:toToken:toID:toGroup:fromID:fromAccount:forMessageID:additionalInfo:fileSize:failure TimeSeconds:failReasonMessage:completionBlock:");
}

id objc_msgSend_sendMessageWithEngram_chat_service_fromID_fromAccount_session_context_groupController_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendMessageWithEngram:chat:service:fromID:fromAccount:session:context:groupController:completionBlock:");
}

id objc_msgSend_sendNotificationMessageIfNeededForIncomingMessageFromChatIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendNotificationMessageIfNeededForIncomingMessageFromChatIdentifier:");
}

id objc_msgSend_sendPayloadData_messageGUID_fromID_recipients_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendPayloadData:messageGUID:fromID:recipients:completionBlock:");
}

id objc_msgSend_sendPayloadData_messageGUID_sessionInfo_topic_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendPayloadData:messageGUID:sessionInfo:topic:completionBlock:");
}

id objc_msgSend_sendPersonalNicknameToRecipients_chatGUID_fromHandle_onlySendToThoseLoggedOutOfIMessage_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendPersonalNicknameToRecipients:chatGUID:fromHandle:onlySendToThoseLoggedOutOfIMessage:");
}

id objc_msgSend_sendReceivedPhotoEvent(void *a1, const char *a2, ...)
{
  return _[a1 sendReceivedPhotoEvent];
}

id objc_msgSend_sendRepositionedStickerMetadata_forEditedMessage_destinations_account_fromID_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendRepositionedStickerMetadata:forEditedMessage:destinations:account:fromID:completionBlock:");
}

id objc_msgSend_sendResourceAtURL_metadata_toDestinations_priority_options_identifier_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendResourceAtURL:metadata:toDestinations:priority:options:identifier:error:");
}

id objc_msgSend_sendServerMessage_command_fromAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendServerMessage:command:fromAccount:");
}

id objc_msgSend_sendToLocalPeers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendToLocalPeers:");
}

id objc_msgSend_sendToLocalPeersFile_dictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendToLocalPeersFile:dictionary:");
}

id objc_msgSend_sender(void *a1, const char *a2, ...)
{
  return _[a1 sender];
}

id objc_msgSend_senderInfo(void *a1, const char *a2, ...)
{
  return _[a1 senderInfo];
}

id objc_msgSend_serverReceivedTime(void *a1, const char *a2, ...)
{
  return _[a1 serverReceivedTime];
}

id objc_msgSend_service(void *a1, const char *a2, ...)
{
  return _[a1 service];
}

id objc_msgSend_service_sendMessage_fromAccount_toDestinations_priority_options_identifier_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "service:sendMessage:fromAccount:toDestinations:priority:options:identifier:error:");
}

id objc_msgSend_serviceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 serviceIdentifier];
}

id objc_msgSend_serviceName(void *a1, const char *a2, ...)
{
  return _[a1 serviceName];
}

id objc_msgSend_serviceSession(void *a1, const char *a2, ...)
{
  return _[a1 serviceSession];
}

id objc_msgSend_serviceSessionDelegates(void *a1, const char *a2, ...)
{
  return _[a1 serviceSessionDelegates];
}

id objc_msgSend_serviceType(void *a1, const char *a2, ...)
{
  return _[a1 serviceType];
}

id objc_msgSend_serviceWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serviceWithName:");
}

id objc_msgSend_serviceWithReplicationSourceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serviceWithReplicationSourceID:");
}

id objc_msgSend_session(void *a1, const char *a2, ...)
{
  return _[a1 session];
}

id objc_msgSend_sessionForReplicationSourceServiceName_replicatingAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionForReplicationSourceServiceName:replicatingAccount:");
}

id objc_msgSend_sessionInfoForBusinessReceipients_fromID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionInfoForBusinessReceipients:fromID:completion:");
}

id objc_msgSend_sessionSpecificTransferIDForTransferID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionSpecificTransferIDForTransferID:");
}

id objc_msgSend_sessionToken(void *a1, const char *a2, ...)
{
  return _[a1 sessionToken];
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _[a1 set];
}

id objc_msgSend_setAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccount:");
}

id objc_msgSend_setAccountID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountID:");
}

id objc_msgSend_setActionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActionType:");
}

id objc_msgSend_setActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivity:");
}

id objc_msgSend_setAdaptiveImageGlyphContentDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdaptiveImageGlyphContentDescription:");
}

id objc_msgSend_setAdaptiveImageGlyphContentIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdaptiveImageGlyphContentIdentifier:");
}

id objc_msgSend_setAdditionalErrorInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdditionalErrorInfo:");
}

id objc_msgSend_setAppMessageFallbackImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppMessageFallbackImage:");
}

id objc_msgSend_setAssociatedMessageGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssociatedMessageGUID:");
}

id objc_msgSend_setAssociatedMessageType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssociatedMessageType:");
}

id objc_msgSend_setAttachmentSendContexts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttachmentSendContexts:");
}

id objc_msgSend_setAttributes_ofItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributes:ofItemAtPath:error:");
}

id objc_msgSend_setAttributionInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributionInfo:");
}

id objc_msgSend_setAudioTranscriptionText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAudioTranscriptionText:");
}

id objc_msgSend_setAuthURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthURL:");
}

id objc_msgSend_setAuxStateWasDowngraded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuxStateWasDowngraded:");
}

id objc_msgSend_setAvMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAvMode:");
}

id objc_msgSend_setBackwardsCompatibleVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackwardsCompatibleVersion:");
}

id objc_msgSend_setBalloonBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBalloonBundleID:");
}

id objc_msgSend_setBiaReferenceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBiaReferenceID:");
}

id objc_msgSend_setBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBlock:");
}

id objc_msgSend_setBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBody:");
}

id objc_msgSend_setByAddingObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setByAddingObject:");
}

id objc_msgSend_setCallerID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCallerID:");
}

id objc_msgSend_setCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletionBlock:");
}

id objc_msgSend_setConsumedSessionPayloads_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConsumedSessionPayloads:");
}

id objc_msgSend_setContactsAvatarRecipeData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContactsAvatarRecipeData:");
}

id objc_msgSend_setCreateEngramGroupOnMessageSend_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCreateEngramGroupOnMessageSend:");
}

id objc_msgSend_setDate_forChatIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDate:forChatIdentifier:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDestinationCallerID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDestinationCallerID:");
}

id objc_msgSend_setEditedPartIndexes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEditedPartIndexes:");
}

id objc_msgSend_setError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setError:");
}

id objc_msgSend_setErrorCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setErrorCode:");
}

id objc_msgSend_setErrorFileSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setErrorFileSize:");
}

id objc_msgSend_setErrorURLString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setErrorURLString:");
}

id objc_msgSend_setExpectedOffGridCapableDeliveries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpectedOffGridCapableDeliveries:");
}

id objc_msgSend_setExpressiveSendStyleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpressiveSendStyleID:");
}

id objc_msgSend_setFailReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFailReason:");
}

id objc_msgSend_setFailed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFailed:");
}

id objc_msgSend_setFileLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileLength:");
}

id objc_msgSend_setFileTransferGUIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileTransferGUIDs:");
}

id objc_msgSend_setFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFlags:");
}

id objc_msgSend_setGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGUID:");
}

id objc_msgSend_setGlobalReadReceiptSettingVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGlobalReadReceiptSettingVersion:");
}

id objc_msgSend_setGroupID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroupID:");
}

id objc_msgSend_setGroupMessageContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroupMessageContext:");
}

id objc_msgSend_setGroupParticipantVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroupParticipantVersion:");
}

id objc_msgSend_setGroupPhoto_forChat_fromID_fromAccount_session_isPhotoRefresh_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroupPhoto:forChat:fromID:fromAccount:session:isPhotoRefresh:");
}

id objc_msgSend_setGuid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGuid:");
}

id objc_msgSend_setHideAttachment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHideAttachment:");
}

id objc_msgSend_setInvitationPreferences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvitationPreferences:");
}

id objc_msgSend_setIsAuxImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsAuxImage:");
}

id objc_msgSend_setIsAuxVideo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsAuxVideo:");
}

id objc_msgSend_setIsBeingRetried_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsBeingRetried:");
}

id objc_msgSend_setIsDelayedRichLinkBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsDelayedRichLinkBlock:");
}

id objc_msgSend_setIsGenmojiFallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsGenmojiFallback:");
}

id objc_msgSend_setIsTapToRetry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsTapToRetry:");
}

id objc_msgSend_setIsTemporaryBackwardCompatibilityAsset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsTemporaryBackwardCompatibilityAsset:");
}

id objc_msgSend_setLastMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastMessage:");
}

id objc_msgSend_setLastReplicationSinceLoadDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastReplicationSinceLoadDate:");
}

id objc_msgSend_setLatestNotificationIDSTokenURI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLatestNotificationIDSTokenURI:");
}

id objc_msgSend_setMaxConcurrentMessages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxConcurrentMessages:");
}

id objc_msgSend_setMeCardUpdated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMeCardUpdated:");
}

id objc_msgSend_setMessageDeliveryContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessageDeliveryContext:");
}

id objc_msgSend_setMessageGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessageGUID:");
}

id objc_msgSend_setMessageSummaryInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessageSummaryInfo:");
}

id objc_msgSend_setMessagesGroupName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessagesGroupName:");
}

id objc_msgSend_setMessagesGroupUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessagesGroupUUID:");
}

id objc_msgSend_setMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetadata:");
}

id objc_msgSend_setName_fromName_forChat_fromID_fromAccount_messageID_session_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setName:fromName:forChat:fromID:fromAccount:messageID:session:completionBlock:");
}

id objc_msgSend_setNetworkDataAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNetworkDataAvailable:");
}

id objc_msgSend_setObject_atIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:atIndexedSubscript:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setOwner_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOwner:");
}

id objc_msgSend_setPayloadData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadData:");
}

id objc_msgSend_setPendingENGroupParticipantUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingENGroupParticipantUpdate:");
}

id objc_msgSend_setPendingRemoteFileRequests_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingRemoteFileRequests:");
}

id objc_msgSend_setPresentationMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPresentationMode:");
}

id objc_msgSend_setReadReceiptsGloballyEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReadReceiptsGloballyEnabled:");
}

id objc_msgSend_setRecoverableErrorForTransfer_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecoverableErrorForTransfer:error:");
}

id objc_msgSend_setRefreshDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRefreshDate:");
}

id objc_msgSend_setReplyToGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReplyToGUID:");
}

id objc_msgSend_setRequestContentHeaders_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestContentHeaders:");
}

id objc_msgSend_setRequestContentVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestContentVersion:");
}

id objc_msgSend_setResponseContentBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResponseContentBody:");
}

id objc_msgSend_setResponseContentHeaders_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResponseContentHeaders:");
}

id objc_msgSend_setResponseContentVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResponseContentVersion:");
}

id objc_msgSend_setRetractedPartIndexes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRetractedPartIndexes:");
}

id objc_msgSend_setRetryToParticipant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRetryToParticipant:");
}

id objc_msgSend_setRoomName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRoomName:");
}

id objc_msgSend_setScheduleState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScheduleState:");
}

id objc_msgSend_setScheduleType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScheduleType:");
}

id objc_msgSend_setScheduledMessageLastModifiedTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScheduledMessageLastModifiedTime:");
}

id objc_msgSend_setSendDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSendDate:");
}

id objc_msgSend_setSendDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSendDuration:");
}

id objc_msgSend_setSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSender:");
}

id objc_msgSend_setService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setService:");
}

id objc_msgSend_setSignature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSignature:");
}

id objc_msgSend_setStandardHandler_forCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStandardHandler:forCommand:");
}

id objc_msgSend_setState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setState:");
}

id objc_msgSend_setStickerUserInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStickerUserInfo:");
}

id objc_msgSend_setSubject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubject:");
}

id objc_msgSend_setSwyAppName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSwyAppName:");
}

id objc_msgSend_setSwyBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSwyBundleID:");
}

id objc_msgSend_setTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTime:");
}

id objc_msgSend_setTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTopic:");
}

id objc_msgSend_setTranscoderUserInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTranscoderUserInfo:");
}

id objc_msgSend_setTransferError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransferError:");
}

id objc_msgSend_setTransferredFilename_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransferredFilename:");
}

id objc_msgSend_setTransferredName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransferredName:");
}

id objc_msgSend_setTypingIndicatorIcon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTypingIndicatorIcon:");
}

id objc_msgSend_setUserInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInfo:");
}

id objc_msgSend_setValue_forDomain_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forDomain:forKey:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setWantsResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWantsResponse:");
}

id objc_msgSend_setWatchesScreenLightState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWatchesScreenLightState:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_setWithSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithSet:");
}

id objc_msgSend_sharedAccountController(void *a1, const char *a2, ...)
{
  return _[a1 sharedAccountController];
}

id objc_msgSend_sharedApplicationData(void *a1, const char *a2, ...)
{
  return _[a1 sharedApplicationData];
}

id objc_msgSend_sharedController(void *a1, const char *a2, ...)
{
  return _[a1 sharedController];
}

id objc_msgSend_sharedCoordinator(void *a1, const char *a2, ...)
{
  return _[a1 sharedCoordinator];
}

id objc_msgSend_sharedFeatureFlags(void *a1, const char *a2, ...)
{
  return _[a1 sharedFeatureFlags];
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 sharedInstance];
}

id objc_msgSend_sharedInstanceForBagType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedInstanceForBagType:");
}

id objc_msgSend_sharedManager(void *a1, const char *a2, ...)
{
  return _[a1 sharedManager];
}

id objc_msgSend_sharedProvider(void *a1, const char *a2, ...)
{
  return _[a1 sharedProvider];
}

id objc_msgSend_sharedTracker(void *a1, const char *a2, ...)
{
  return _[a1 sharedTracker];
}

id objc_msgSend_shouldBlackholeGroupMessageFromSender_toRecipient_ifRecipientIsCandidate_withOtherParticipants_givenHistory_forEligibleAccounts_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "shouldBlackholeGroupMessageFromSender:toRecipient:ifRecipientIsCandidate:withOtherParticipants:givenHistory:f orEligibleAccounts:");
}

id objc_msgSend_shouldBlackholeMessageFromSender_toRecipient_ifRecipientIsCandidate_givenHistory_forEligibleAccounts_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "shouldBlackholeMessageFromSender:toRecipient:ifRecipientIsCandidate:givenHistory:forEligibleAccounts:");
}

id objc_msgSend_shouldCompressGroupPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldCompressGroupPayload:");
}

id objc_msgSend_shouldDeactivate(void *a1, const char *a2, ...)
{
  return _[a1 shouldDeactivate];
}

id objc_msgSend_shouldDisplayAttachmentDownloadFailure(void *a1, const char *a2, ...)
{
  return _[a1 shouldDisplayAttachmentDownloadFailure];
}

id objc_msgSend_shouldDisplayRemoteDecryptionFailure(void *a1, const char *a2, ...)
{
  return _[a1 shouldDisplayRemoteDecryptionFailure];
}

id objc_msgSend_shouldDownloadGroupPhoto_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldDownloadGroupPhoto:");
}

id objc_msgSend_shouldDropDueToGroupSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldDropDueToGroupSize:");
}

id objc_msgSend_shouldEnablePreviewTranscodingQualityForTransfer_isSending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldEnablePreviewTranscodingQualityForTransfer:isSending:");
}

id objc_msgSend_shouldFastSend(void *a1, const char *a2, ...)
{
  return _[a1 shouldFastSend];
}

id objc_msgSend_shouldInferRecoverableDeleteForCommandDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldInferRecoverableDeleteForCommandDictionary:");
}

id objc_msgSend_shouldRefreshTTLForGroupPhoto_chatGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRefreshTTLForGroupPhoto:chatGUID:");
}

id objc_msgSend_shouldSendBackwardsCompatibleMessageForBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldSendBackwardsCompatibleMessageForBundleID:");
}

id objc_msgSend_shouldSendLowResolutionOnly(void *a1, const char *a2, ...)
{
  return _[a1 shouldSendLowResolutionOnly];
}

id objc_msgSend_shouldSendMeCard(void *a1, const char *a2, ...)
{
  return _[a1 shouldSendMeCard];
}

id objc_msgSend_shouldSendPartIndexesInMessageBody(void *a1, const char *a2, ...)
{
  return _[a1 shouldSendPartIndexesInMessageBody];
}

id objc_msgSend_shouldSendReadReceiptsForChat_style_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldSendReadReceiptsForChat:style:");
}

id objc_msgSend_shouldSendTypingIndicator(void *a1, const char *a2, ...)
{
  return _[a1 shouldSendTypingIndicator];
}

id objc_msgSend_shouldUploadGroupPhoto_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUploadGroupPhoto:");
}

id objc_msgSend_signature(void *a1, const char *a2, ...)
{
  return _[a1 signature];
}

id objc_msgSend_smsHandshakeState(void *a1, const char *a2, ...)
{
  return _[a1 smsHandshakeState];
}

id objc_msgSend_sortUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortUsingComparator:");
}

id objc_msgSend_sortedArrayUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingComparator:");
}

id objc_msgSend_stableGroupID(void *a1, const char *a2, ...)
{
  return _[a1 stableGroupID];
}

id objc_msgSend_stageMessageWrapperBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stageMessageWrapperBlock:");
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return _[a1 start];
}

id objc_msgSend_startFinalizingTransfer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startFinalizingTransfer:");
}

id objc_msgSend_startTrackingHandle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startTrackingHandle:");
}

id objc_msgSend_startTransfer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startTransfer:");
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _[a1 state];
}

id objc_msgSend_stickerUserInfo(void *a1, const char *a2, ...)
{
  return _[a1 stickerUserInfo];
}

id objc_msgSend_storeAttachment_associateWithMessageWithGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeAttachment:associateWithMessageWithGUID:");
}

id objc_msgSend_storeAttachment_associateWithMessageWithGUID_chatGUID_storeAtExternalLocation_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeAttachment:associateWithMessageWithGUID:chatGUID:storeAtExternalLocation:");
}

id objc_msgSend_storeBreadcrumbAndSetConsumedPayloadsForNewMessageItemIfNecessary_inChatWithIdentifier_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeBreadcrumbAndSetConsumedPayloadsForNewMessageItemIfNecessary:inChatWithIdentifier:");
}

id objc_msgSend_storeChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeChat:");
}

id objc_msgSend_storeEditedMessage_editedPartIndex_editType_previousMessage_chat_updatedAssociatedMessageItems_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "storeEditedMessage:editedPartIndex:editType:previousMessage:chat:updatedAssociatedMessageItems:");
}

id objc_msgSend_storeEditedMessage_editedPartIndexes_editType_previousMessage_chat_updatedAssociatedMessageItems_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "storeEditedMessage:editedPartIndexes:editType:previousMessage:chat:updatedAssociatedMessageItems:");
}

id objc_msgSend_storeItem_forceReplace_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeItem:forceReplace:");
}

id objc_msgSend_storeMessage_forceReplace_modifyError_modifyFlags_flagMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeMessage:forceReplace:modifyError:modifyFlags:flagMask:");
}

id objc_msgSend_storeMessage_forceReplace_modifyError_modifyFlags_flagMask_updateMessageCache_calculateUnreadCount_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "storeMessage:forceReplace:modifyError:modifyFlags:flagMask:updateMessageCache:calculateUnreadCount:");
}

id objc_msgSend_storeRepositionedStickerLocally_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeRepositionedStickerLocally:");
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return _[a1 string];
}

id objc_msgSend_stringByAddingPercentEncodingWithAllowedCharacters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAddingPercentEncodingWithAllowedCharacters:");
}

id objc_msgSend_stringByAppendingFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingFormat:");
}

id objc_msgSend_stringByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingPathComponent:");
}

id objc_msgSend_stringByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingPathExtension:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 stringByDeletingLastPathComponent];
}

id objc_msgSend_stringByDeletingPathExtension(void *a1, const char *a2, ...)
{
  return _[a1 stringByDeletingPathExtension];
}

id objc_msgSend_stringByExpandingTildeInPath(void *a1, const char *a2, ...)
{
  return _[a1 stringByExpandingTildeInPath];
}

id objc_msgSend_stringByRemovingCharactersFromSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByRemovingCharactersFromSet:");
}

id objc_msgSend_stringByRemovingURLEscapes(void *a1, const char *a2, ...)
{
  return _[a1 stringByRemovingURLEscapes];
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_stringByResolvingAndStandardizingPath(void *a1, const char *a2, ...)
{
  return _[a1 stringByResolvingAndStandardizingPath];
}

id objc_msgSend_stringGUID(void *a1, const char *a2, ...)
{
  return _[a1 stringGUID];
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return _[a1 stringValue];
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_style(void *a1, const char *a2, ...)
{
  return _[a1 style];
}

id objc_msgSend_subarrayWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subarrayWithRange:");
}

id objc_msgSend_subject(void *a1, const char *a2, ...)
{
  return _[a1 subject];
}

id objc_msgSend_submitCloudKitMetricWithOperationGroupName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitCloudKitMetricWithOperationGroupName:");
}

id objc_msgSend_subscriptionValidationToken(void *a1, const char *a2, ...)
{
  return _[a1 subscriptionValidationToken];
}

id objc_msgSend_substringRecordIDForNickname_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringRecordIDForNickname:");
}

id objc_msgSend_success(void *a1, const char *a2, ...)
{
  return _[a1 success];
}

id objc_msgSend_supportsCapability_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsCapability:");
}

id objc_msgSend_supportsFaceTime(void *a1, const char *a2, ...)
{
  return _[a1 supportsFaceTime];
}

id objc_msgSend_syndicatedItemType(void *a1, const char *a2, ...)
{
  return _[a1 syndicatedItemType];
}

id objc_msgSend_syndicationActionType(void *a1, const char *a2, ...)
{
  return _[a1 syndicationActionType];
}

id objc_msgSend_syndicationStartDate(void *a1, const char *a2, ...)
{
  return _[a1 syndicationStartDate];
}

id objc_msgSend_targetSize(void *a1, const char *a2, ...)
{
  return _[a1 targetSize];
}

id objc_msgSend_tearDownSessionForChatIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tearDownSessionForChatIdentifier:");
}

id objc_msgSend_threadIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 threadIdentifier];
}

id objc_msgSend_time(void *a1, const char *a2, ...)
{
  return _[a1 time];
}

id objc_msgSend_timeDelivered(void *a1, const char *a2, ...)
{
  return _[a1 timeDelivered];
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSince1970];
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceNow];
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceReferenceDate];
}

id objc_msgSend_totalBytes(void *a1, const char *a2, ...)
{
  return _[a1 totalBytes];
}

id objc_msgSend_trackAttachmentDownloadLimitExceeded_limitSize_fileSize_qualityType_isSticker_lowQualityModeEnabled_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "trackAttachmentDownloadLimitExceeded:limitSize:fileSize:qualityType:isSticker:lowQualityModeEnabled:");
}

id objc_msgSend_trackAttachmentDownloadSuccess_limitType_limitSize_qualityType_isSticker_lowQualityModeEnabled_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "trackAttachmentDownloadSuccess:limitType:limitSize:qualityType:isSticker:lowQualityModeEnabled:");
}

id objc_msgSend_trackEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackEvent:");
}

id objc_msgSend_trackEvent_withDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackEvent:withDictionary:");
}

id objc_msgSend_trackSpamEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackSpamEvent:");
}

id objc_msgSend_trackiMessageTranscodeFailureWithReason_sourceFile_sizeLimits_isSticker_lowQualityModeEnabled_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "trackiMessageTranscodeFailureWithReason:sourceFile:sizeLimits:isSticker:lowQualityModeEnabled:");
}

id objc_msgSend_trackiMessageTranscodeWithReason_sourceFile_highQualityFile_lowQualityFile_sizeLimits_isSticker_transcoded_lowQualityModeEnabled_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "trackiMessageTranscodeWithReason:sourceFile:highQualityFile:lowQualityFile:sizeLimits:isSticker:transcoded:lo wQualityModeEnabled:");
}

id objc_msgSend_transcodeFallbackFileTransferContents_utiType_allowUnfilteredUTIs_target_sizes_commonCapabilities_maxDimension_transcoderUserInfo_representations_isLQMEnabled_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "transcodeFallbackFileTransferContents:utiType:allowUnfilteredUTIs:target:sizes:commonCapabilities:maxDimensio n:transcoderUserInfo:representations:isLQMEnabled:completionBlock:");
}

id objc_msgSend_transcodeFallbackFileTransferContents_utiType_transcoderUserInfo_sizes_commonCapabilities_representations_isLQMEnabled_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "transcodeFallbackFileTransferContents:utiType:transcoderUserInfo:sizes:commonCapabilities:representations:isL QMEnabled:completionBlock:");
}

id objc_msgSend_transcodeFallbackFileTransferPayloadData_balloonBundleID_attachments_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transcodeFallbackFileTransferPayloadData:balloonBundleID:attachments:completionBlock:");
}

id objc_msgSend_transcodeFileTransferContents_utiType_isSticker_allowUnfilteredUTIs_target_sizes_commonCapabilities_maxDimension_transcoderUserInfo_representations_isLQMEnabled_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "transcodeFileTransferContents:utiType:isSticker:allowUnfilteredUTIs:target:sizes:commonCapabilities:maxDimens ion:transcoderUserInfo:representations:isLQMEnabled:completionBlock:");
}

id objc_msgSend_transcodeFileTransferContents_utiType_isSticker_transcoderUserInfo_sizes_commonCapabilities_representations_isLQMEnabled_completionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "transcodeFileTransferContents:utiType:isSticker:transcoderUserInfo:sizes:commonCapabilities:representations:i sLQMEnabled:completionBlock:");
}

id objc_msgSend_transcodePayloadData_balloonBundleID_attachments_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transcodePayloadData:balloonBundleID:attachments:completionBlock:");
}

id objc_msgSend_transcoderUserInfo(void *a1, const char *a2, ...)
{
  return _[a1 transcoderUserInfo];
}

id objc_msgSend_transcribeAudioForAudioTransferURL_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transcribeAudioForAudioTransferURL:withCompletion:");
}

id objc_msgSend_transcribeMessageIfNeeded_forTransfer_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transcribeMessageIfNeeded:forTransfer:completion:");
}

id objc_msgSend_transferDataURL(void *a1, const char *a2, ...)
{
  return _[a1 transferDataURL];
}

id objc_msgSend_transferError(void *a1, const char *a2, ...)
{
  return _[a1 transferError];
}

id objc_msgSend_transferForGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transferForGUID:");
}

id objc_msgSend_transferId(void *a1, const char *a2, ...)
{
  return _[a1 transferId];
}

id objc_msgSend_transferState(void *a1, const char *a2, ...)
{
  return _[a1 transferState];
}

id objc_msgSend_transferredFilename(void *a1, const char *a2, ...)
{
  return _[a1 transferredFilename];
}

id objc_msgSend_transferredName(void *a1, const char *a2, ...)
{
  return _[a1 transferredName];
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _[a1 type];
}

id objc_msgSend_typeWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "typeWithIdentifier:");
}

id objc_msgSend_typingIndicatorIcon(void *a1, const char *a2, ...)
{
  return _[a1 typingIndicatorIcon];
}

id objc_msgSend_unformattedID(void *a1, const char *a2, ...)
{
  return _[a1 unformattedID];
}

id objc_msgSend_uniqueID(void *a1, const char *a2, ...)
{
  return _[a1 uniqueID];
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntValue];
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntegerValue];
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedLongLongValue];
}

id objc_msgSend_updateEngramID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateEngramID:");
}

id objc_msgSend_updateEngroupCreationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateEngroupCreationDate:");
}

id objc_msgSend_updateFaceTimeGroupPhoto_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateFaceTimeGroupPhoto:");
}

id objc_msgSend_updateGroup_withParticipants_sharedApplicationData_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateGroup:withParticipants:sharedApplicationData:completion:");
}

id objc_msgSend_updateGroupPhoto_forChat_messageGuid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateGroupPhoto:forChat:messageGuid:");
}

id objc_msgSend_updateGroupPhotoGuid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateGroupPhotoGuid:");
}

id objc_msgSend_updateGroupPhotoUploadFailureCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateGroupPhotoUploadFailureCount:");
}

id objc_msgSend_updateIsBlackholed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateIsBlackholed:");
}

id objc_msgSend_updateLastAddressedHandle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateLastAddressedHandle:");
}

id objc_msgSend_updateLastSeenMessageGuidIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateLastSeenMessageGuidIfNeeded:");
}

id objc_msgSend_updateLatestActiveDestination_ForHandle_incomingType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateLatestActiveDestination:ForHandle:incomingType:");
}

id objc_msgSend_updateMessageHandshakeState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateMessageHandshakeState:");
}

id objc_msgSend_updateNicknameData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateNicknameData:");
}

id objc_msgSend_updatePersonCentricIDForHandlesInChatWithMessage_fromIdentifier_personCentricID_chat_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePersonCentricIDForHandlesInChatWithMessage:fromIdentifier:personCentricID:chat:");
}

id objc_msgSend_updateProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateProperties:");
}

id objc_msgSend_updateReceivedBlackholeError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateReceivedBlackholeError:");
}

id objc_msgSend_updateSMSHandshakeState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSMSHandshakeState:");
}

id objc_msgSend_updateShouldForceToSMS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateShouldForceToSMS:");
}

id objc_msgSend_updateTimerForTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTimerForTimeInterval:");
}

id objc_msgSend_updateTransfer_currentBytes_totalBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTransfer:currentBytes:totalBytes:");
}

id objc_msgSend_uploadGroupPhotoForChat_fileTransferGUID_itemGUID_callerURI_idsAccount_isPhotoRefresh_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadGroupPhotoForChat:fileTransferGUID:itemGUID:callerURI:idsAccount:isPhotoRefresh:");
}

id objc_msgSend_useCount(void *a1, const char *a2, ...)
{
  return _[a1 useCount];
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _[a1 userInfo];
}

id objc_msgSend_valueForCapability_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForCapability:");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_verifyOffGridSubscriptionMatchesSubscriptionValidationToken_encryptionValidationToken_receivedByHandleID_fromHandleID_messageDate_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "verifyOffGridSubscriptionMatchesSubscriptionValidationToken:encryptionValidationToken:receivedByHandleID:from HandleID:messageDate:");
}

id objc_msgSend_verifyPersonalSubscriptionMatchesSubscriptionValidationToken_encryptionValidationToken_receivedByHandleID_fromHandleID_messageDate_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "verifyPersonalSubscriptionMatchesSubscriptionValidationToken:encryptionValidationToken:receivedByHandleID:fro mHandleID:messageDate:");
}

id objc_msgSend_verifyTruncatedRecordIDMatchesPersonalNickname_forChat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verifyTruncatedRecordIDMatchesPersonalNickname:forChat:");
}

id objc_msgSend_version(void *a1, const char *a2, ...)
{
  return _[a1 version];
}

id objc_msgSend_vettedAliases(void *a1, const char *a2, ...)
{
  return _[a1 vettedAliases];
}

id objc_msgSend_wait_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wait:");
}

id objc_msgSend_wantsAlphaRemoved(void *a1, const char *a2, ...)
{
  return _[a1 wantsAlphaRemoved];
}

id objc_msgSend_wasMessageDeduplicatedWithGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wasMessageDeduplicatedWithGUID:");
}

id objc_msgSend_wasReportedAsJunk(void *a1, const char *a2, ...)
{
  return _[a1 wasReportedAsJunk];
}

id objc_msgSend_wiFiActiveAndReachable(void *a1, const char *a2, ...)
{
  return _[a1 wiFiActiveAndReachable];
}

id objc_msgSend_writeAccountDefaults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeAccountDefaults:");
}

id objc_msgSend_writeToFile_atomically_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToFile:atomically:");
}

id objc_msgSend_writeToURL_atomically_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToURL:atomically:");
}

id objc_msgSend_writeToURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToURL:options:error:");
}