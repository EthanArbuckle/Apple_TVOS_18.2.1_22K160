uint64_t RCSServiceSession.cancelTypingIndicator(chatID:guid:sender:subscriptionInfo:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void *v15;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_76210 + dword_76210);
  v15 = (void *)swift_task_alloc(unk_76214);
  *(void *)(v8 + 16) = v15;
  *v15 = v8;
  v15[1] = sub_51A0;
  return v17(a3, a4, a5, a6, a7, a8);
}

uint64_t sub_51A0()
{
  uint64_t v4 = *v0;
  uint64_t v1 = *(void *)(v4 + 16);
  uint64_t v2 = *v0;
  uint64_t v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_51E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_76210 + dword_76210);
  v15 = (void *)((uint64_t (*)(void))swift_task_alloc)(unk_76214);
  *(void *)(v8 + 16) = v15;
  void *v15 = v8;
  v15[1] = sub_5E14;
  return v17(a3, a4, a5, a6, a7, a8);
}

id variable initialization expression of RCSOutgoingMessageController.client()
{
  id v0 = (id)im_primary_queue();
  id v1 = [objc_allocWithZone(CoreTelephonyClient) initWithQueue:v0];

  return v1;
}

_DWORD *sub_52E4@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_52F4(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

void sub_5300(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_530C(void *a1, void *a2)
{
  return *a1 == *a2;
}

void sub_5320(void *a1@<X8>)
{
  *a1 = *v1;
}

void *sub_532C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_533C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[32] = a7;
  v8[33] = v7;
  v8[30] = a5;
  v8[31] = a6;
  v8[28] = a3;
  v8[29] = a4;
  v8[26] = a1;
  v8[27] = a2;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  v8[34] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[35] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[36] = swift_task_alloc(v11);
  v8[37] = swift_task_alloc(v11);
  uint64_t v12 = sub_5C28(&qword_76228);
  v8[38] = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for RCSMessage(0LL);
  v8[39] = v13;
  unint64_t v14 = (*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[40] = swift_task_alloc(v14);
  v8[41] = swift_task_alloc(v14);
  uint64_t v15 = type metadata accessor for MainActor(0LL);
  v8[42] = static MainActor.shared.getter();
  uint64_t v16 = dispatch thunk of Actor.unownedExecutor.getter(v15, &protocol witness table for MainActor);
  v8[43] = v16;
  v8[44] = v17;
  return swift_task_switch(sub_5444, v16, v17);
}

uint64_t sub_5444()
{
  id v1 = *(void **)(v0 + 320);
  uint64_t v2 = *(_BYTE **)(v0 + 304);
  v3 = *(int **)(v0 + 312);
  uint64_t v28 = *(void *)(v0 + 328);
  uint64_t v29 = *(void *)(v0 + 264);
  uint64_t v22 = *(void *)(v0 + 256);
  uint64_t v27 = *(void *)(v0 + 248);
  uint64_t v4 = *(__int128 **)(v0 + 224);
  uint64_t v26 = *(void *)(v0 + 232);
  uint64_t v5 = *(void *)(v0 + 216);
  uint64_t v24 = *(void *)(v0 + 240);
  uint64_t v25 = *(void *)(v0 + 208);
  __int128 v7 = v4[1];
  __int128 v6 = v4[2];
  __int128 v8 = *v4;
  *(_OWORD *)(v0 + 57) = *(__int128 *)((char *)v4 + 41);
  *(_OWORD *)(v0 + 32) = v7;
  *(_OWORD *)(v0 + 48) = v6;
  *(_OWORD *)(v0 + 16) = v8;
  __int128 v10 = v4[1];
  __int128 v9 = v4[2];
  __int128 v11 = *v4;
  *(_OWORD *)(v0 + 121) = *(__int128 *)((char *)v4 + 41);
  *(_OWORD *)(v0 + 96) = v10;
  *(_OWORD *)(v0 + 112) = v9;
  *(_OWORD *)(v0 + 80) = v11;
  *(_WORD *)(v0 + 137) = 256;
  *uint64_t v2 = 0;
  uint64_t v12 = type metadata accessor for RCSMessage.Content(0LL);
  swift_storeEnumTagMultiPayload(v2, v12, 4LL);
  uint64_t v13 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL);
  v13(v2, 0LL, 1LL, v12);
  *(_OWORD *)(v0 + 144) = 0u;
  *(void *)(v0 + 176) = 0LL;
  *(_OWORD *)(v0 + 160) = 0u;
  sub_5C68(v4);
  sub_5C68(v4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  rawValue = RCSMessageMetadata.init()().entries._rawValue;
  uint64_t v14 = (uint64_t)v1 + v3[7];
  v13((_BYTE *)v14, 1LL, 1LL, v12);
  uint64_t v15 = (uint64_t)v1 + v3[8];
  *(void *)(v15 + 32) = 0LL;
  *(_OWORD *)uint64_t v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *((_BYTE *)v1 + v3[11]) = 0;
  *(void *)((char *)v1 + v3[12]) = 0LL;
  sub_5CB8((__int128 *)(v0 + 16), (uint64_t)v1);
  v1[16] = v25;
  v1[17] = v5;
  v1[18] = 0LL;
  v1[19] = 0LL;
  uint64_t v16 = (void *)((char *)v1 + v3[13]);
  *uint64_t v16 = v26;
  v16[1] = v24;
  v16[2] = v27;
  v16[3] = v22;
  sub_5CF4((uint64_t)v2, v14, &qword_76228);
  sub_5CF4(v0 + 144, v15, &qword_76230);
  *(void *)((char *)v1 + v3[9]) = rawValue;
  *((_BYTE *)v1 + v3[10]) = 0;
  uint64_t result = sub_5D38((uint64_t)v1, v28);
  uint64_t v18 = *(void *)(*(void *)(v29 + OBJC_IVAR___RCSServiceSession_state) + 16LL);
  *(void *)(v0 + 360) = v18;
  if (v18)
  {
    v19 = *(int **)(*(void *)v18 + 144LL);
    uint64_t v20 = v19[1];
    v30 = (uint64_t (*)(void))((char *)v19 + *v19);
    swift_retain(v18);
    v21 = (void *)swift_task_alloc(v20);
    *(void *)(v0 + 368) = v21;
    void *v21 = v0;
    v21[1] = sub_569C;
    return v30(*(void *)(v0 + 328));
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_569C()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 368LL);
  *(void *)(*(void *)v1 + 376LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = v2[43];
    uint64_t v5 = v2[44];
    __int128 v6 = sub_5928;
  }

  else
  {
    swift_release(v2[45]);
    uint64_t v4 = v2[43];
    uint64_t v5 = v2[44];
    __int128 v6 = sub_5708;
  }

  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_5708()
{
  uint64_t v1 = *(void *)(v0 + 296);
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v3 = *(void *)(v0 + 280);
  uint64_t v4 = *(void *)(v0 + 216);
  swift_release(*(void *)(v0 + 336));
  uint64_t v5 = Logger.rcs.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v5, v2);
  uint64_t v6 = swift_bridgeObjectRetain_n(v4, 2LL);
  __int128 v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v26 = *(void *)(v0 + 296);
    uint64_t v27 = *(void *)(v0 + 328);
    uint64_t v24 = *(void *)(v0 + 280);
    uint64_t v25 = *(void *)(v0 + 272);
    unint64_t v9 = *(void *)(v0 + 216);
    uint64_t v10 = *(void *)(v0 + 208);
    __int128 v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v28 = v12;
    *(_DWORD *)__int128 v11 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 200) = sub_B004(v10, v9, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208);
    swift_bridgeObjectRelease_n(v9, 3LL);
    _os_log_impl(&dword_0, v7, v8, "Cancelled typing indicator for %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v26, v25);
    uint64_t v13 = v27;
  }

  else
  {
    uint64_t v14 = *(void *)(v0 + 328);
    uint64_t v15 = *(void *)(v0 + 296);
    uint64_t v16 = *(void *)(v0 + 272);
    uint64_t v17 = *(void *)(v0 + 280);
    uint64_t v18 = *(void *)(v0 + 216);

    swift_bridgeObjectRelease_n(v18, 2LL);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
    uint64_t v13 = v14;
  }

  sub_5D7C(v13);
  uint64_t v19 = *(void *)(v0 + 320);
  uint64_t v21 = *(void *)(v0 + 296);
  uint64_t v20 = *(void *)(v0 + 304);
  uint64_t v22 = *(void *)(v0 + 288);
  swift_task_dealloc(*(void *)(v0 + 328));
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_5928()
{
  uint64_t v1 = *(void *)(v0 + 376);
  uint64_t v2 = *(void *)(v0 + 360);
  uint64_t v4 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 288);
  uint64_t v5 = *(void *)(v0 + 272);
  swift_release(*(void *)(v0 + 336));
  swift_release(v2);
  uint64_t v6 = Logger.rcs.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
  swift_bridgeObjectRetain();
  swift_errorRetain(v1);
  swift_bridgeObjectRetain();
  uint64_t v7 = swift_errorRetain(v1);
  os_log_type_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = *(void *)(v0 + 376);
    uint64_t v32 = *(void *)(v0 + 288);
    uint64_t v33 = *(void *)(v0 + 328);
    uint64_t v30 = *(void *)(v0 + 280);
    uint64_t v31 = *(void *)(v0 + 272);
    uint64_t v12 = *(void *)(v0 + 208);
    unint64_t v11 = *(void *)(v0 + 216);
    uint64_t v13 = swift_slowAlloc(22LL, -1LL);
    uint64_t v14 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v29 = swift_slowAlloc(32LL, -1LL);
    uint64_t v34 = v29;
    *(_DWORD *)uint64_t v13 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 184) = sub_B004(v12, v11, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192);
    swift_bridgeObjectRelease_n(v11, 3LL);
    *(_WORD *)(v13 + 12) = 2112;
    swift_errorRetain(v10);
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError(v10);
    *(void *)(v0 + 192) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200);
    *uint64_t v14 = v15;
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl(&dword_0, v8, v9, "Failed to cancel typing indicator for %s: %@", (uint8_t *)v13, 0x16u);
    uint64_t v16 = sub_5C28(&qword_76238);
    swift_arrayDestroy(v14, 1LL, v16);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);

    swift_errorRelease(v10);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v32, v31);
    uint64_t v17 = v33;
  }

  else
  {
    uint64_t v18 = *(void *)(v0 + 376);
    uint64_t v19 = *(void *)(v0 + 328);
    uint64_t v21 = *(void *)(v0 + 280);
    uint64_t v20 = *(void *)(v0 + 288);
    uint64_t v22 = *(void *)(v0 + 272);
    uint64_t v23 = *(void *)(v0 + 216);

    swift_errorRelease(v18);
    swift_errorRelease(v18);
    swift_bridgeObjectRelease_n(v23, 2LL);
    swift_errorRelease(v18);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    uint64_t v17 = v19;
  }

  sub_5D7C(v17);
  uint64_t v24 = *(void *)(v0 + 320);
  uint64_t v26 = *(void *)(v0 + 296);
  uint64_t v25 = *(void *)(v0 + 304);
  uint64_t v27 = *(void *)(v0 + 288);
  swift_task_dealloc(*(void *)(v0 + 328));
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void type metadata accessor for IMAccountRegistrationStatus(uint64_t a1)
{
}

uint64_t sub_5C28(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

void *sub_5C68(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  swift_bridgeObjectRetain(a1[6]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t sub_5CB8(__int128 *a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_5CF4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_5C28(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_5D38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RCSMessage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_5D7C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RCSMessage(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void type metadata accessor for FZChatMemberStatus(uint64_t a1)
{
}

void sub_5DCC(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

Swift::Int64 __swiftcall RCSServiceSession.maxSizePerAttachment(withCount:lastAddressedHandle:lastAddressedSIMID:)( Swift::Int32 withCount, Swift::String lastAddressedHandle, Swift::String_optional lastAddressedSIMID)
{
  return 104857600LL;
}

id _sSo17RCSServiceSessionC3RCSE23isGroupMessagingEnabled3forSbSo7IMDChatC_tF_0(void *a1)
{
  id v2 = [a1 lastAddressedLocalHandle];
  if (v2)
  {
    uint64_t v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  id v6 = [a1 lastAddressedSIMID];
  if (v6)
  {
    uint64_t v7 = v6;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  id v10 = [(id)objc_opt_self(IMCTRCSUtilitiesManager) sharedManager];
  if (!v5)
  {
    NSString v11 = 0LL;
    if (v9) {
      goto LABEL_9;
    }
LABEL_11:
    NSString v12 = 0LL;
    goto LABEL_12;
  }

  NSString v11 = String._bridgeToObjectiveC()();
  if (!v9) {
    goto LABEL_11;
  }
LABEL_9:
  NSString v12 = String._bridgeToObjectiveC()();
LABEL_12:
  id v13 = [v10 groupMessagingEnabledForPhoneNumber:v11 simID:v12];
  swift_bridgeObjectRelease(v9);

  swift_bridgeObjectRelease(v5);
  return v13;
}

uint64_t sub_5FB4()
{
  uint64_t v0 = sub_5C28(&qword_762F0);
  __chkstk_darwin(v0);
  id v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_5C28(&qword_762F8);
  sub_6258(v3, qword_76248);
  sub_6298(v3, (uint64_t)qword_76248);
  uint64_t v4 = sub_5C28(&qword_76300);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v2, 1LL, 1LL, v4);
  unsigned int v5 = [(id)objc_opt_self(IMDeviceUtilities) isInternalCarryDevice];
  return PrototypingSetting.init<A>(_:domain:default:internalDefault:)( 0xD000000000000017LL,  0x8000000000064A10LL,  v2,  0LL,  v5 ^ 1);
}

uint64_t sub_60AC(uint64_t a1)
{
  return sub_6100(60.0, a1, qword_76260, 0xD00000000000001BLL, 0x8000000000064A60LL);
}

uint64_t sub_60D8(uint64_t a1)
{
  return sub_6100(30.0, a1, qword_76278, 0xD00000000000002ALL, 0x8000000000064A30LL);
}

uint64_t sub_6100(double a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_5C28(&qword_76308);
  __chkstk_darwin(v9);
  NSString v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_5C28(&qword_76310);
  sub_6258(v12, a3);
  sub_6298(v12, (uint64_t)a3);
  uint64_t v13 = sub_5C28(&qword_76318);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v11, 1LL, 1LL, v13);
  return PrototypingSetting.init<A>(_:domain:default:internalDefault:)(a4, a5, v11, 0LL, 1LL, a1);
}

uint64_t sub_61EC(uint64_t a1)
{
  return sub_62D4(a1, qword_76290, 0xD00000000000001CLL, 0x80000000000649D0LL);
}

uint64_t sub_6210(uint64_t a1)
{
  return sub_62D4(a1, qword_762A8, 0xD000000000000012LL, 0x8000000000064A80LL);
}

uint64_t sub_6234(uint64_t a1)
{
  return sub_62D4(a1, qword_762C0, 0xD000000000000012LL, 0x80000000000649B0LL);
}

uint64_t *sub_6258(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

uint64_t sub_6298(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_62B0(uint64_t a1)
{
  return sub_62D4(a1, qword_762D8, 0xD00000000000001FLL, 0x80000000000649F0LL);
}

uint64_t sub_62D4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_5C28(&qword_762F0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_5C28(&qword_762F8);
  sub_6258(v10, a2);
  sub_6298(v10, (uint64_t)a2);
  uint64_t v11 = sub_5C28(&qword_76300);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v9, 1LL, 1LL, v11);
  return PrototypingSetting.init<A>(_:domain:default:internalDefault:)(a3, a4, v9, 0LL, 2LL);
}

void sub_63B0()
{
  uint64_t v81 = type metadata accessor for Logger(0LL);
  uint64_t v0 = *(void *)(v81 - 8);
  uint64_t v1 = __chkstk_darwin(v81);
  uint64_t v3 = (char *)&v79 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __chkstk_darwin(v1);
  id v6 = (char *)&v79 - v5;
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v79 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v79 - v10;
  uint64_t v12 = sub_5C28(&qword_762F8);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_761F8 != -1) {
    swift_once(&qword_761F8, sub_6234);
  }
  uint64_t v16 = sub_6298(v12, (uint64_t)qword_762C0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v16, v12);
  PrototypingSetting.wrappedValue.getter(&v82, v12);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  if (v82 == 1)
  {
    uint64_t v17 = Logger.rcs.unsafeMutableAddressor();
    uint64_t v18 = v81;
    uint64_t v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v0 + 16))(v11, v17, v81);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_0, v20, v21, "Dropping send success due to override", v22, 2u);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v0 + 8))(v11, v18);
  }

  else
  {
    uint64_t v23 = (void *)objc_opt_self(&OBJC_CLASS___IMDMessageStore);
    id v24 = [v23 sharedInstance];
    NSString v25 = String._bridgeToObjectiveC()();
    id v26 = [v24 messageWithGUID:v25];

    if (v26)
    {
      if ([v26 isFromMe])
      {
        NSString v27 = String._bridgeToObjectiveC()();
        id v28 = v80;
        [v80 _markMessageAsSent:v27];

        id v29 = [v28 relayController];
        NSString v30 = String._bridgeToObjectiveC()();
        id v31 = [v28 service];
        NSString v32 = [v31 internalName];

        if (!v32)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
          uint64_t v34 = v33;
          NSString v32 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v34, v35, v36, v37, v38, v39, v40, v41);
        }

        id v42 = [v28 service];
        NSString v43 = [v42 internalName];

        if (!v43)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
          v45 = v44;
          NSString v43 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v45, v46, v47, v48, v49, v50, v51, v52);
        }

        [v29 messageSent:v30 onService:v32 compatibilityService:v43];

        id v53 = [v23 sharedInstance];
        id v54 = [v53 chatForMessage:v26];

        if (v54)
        {
          id v55 = [v54 style];
          id v56 = [v54 chatIdentifier];
          if (v56)
          {
            v57 = v56;
            [v80 didSendMessage:v26 forChat:v56 style:v55];
          }

          else
          {
            __break(1u);
          }

          return;
        }

        uint64_t v73 = Logger.rcs.unsafeMutableAddressor();
        uint64_t v65 = v81;
        uint64_t v74 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v0 + 16))(v6, v73, v81);
        v75 = (os_log_s *)Logger.logObject.getter(v74);
        os_log_type_t v76 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v75, v76))
        {
          v77 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)v77 = 0;
          _os_log_impl(&dword_0, v75, v76, "Ignoring message sent due to due to missing chat", v77, 2u);
          swift_slowDealloc(v77, -1LL, -1LL);
          v78 = (os_log_s *)v26;
        }

        else
        {
          v78 = v75;
          v75 = (os_log_s *)v26;
        }

        v71 = *(void (**)(char *, uint64_t))(v0 + 8);
        v72 = v6;
      }

      else
      {
        uint64_t v64 = Logger.rcs.unsafeMutableAddressor();
        uint64_t v65 = v81;
        uint64_t v66 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v0 + 16))(v9, v64, v81);
        v67 = (os_log_s *)Logger.logObject.getter(v66);
        os_log_type_t v68 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v67, v68))
        {
          v69 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)v69 = 0;
          _os_log_impl(&dword_0, v67, v68, "Ignoring message sent for a message I didn't send", v69, 2u);
          swift_slowDealloc(v69, -1LL, -1LL);
          v70 = (os_log_s *)v26;
        }

        else
        {
          v70 = v67;
          v67 = (os_log_s *)v26;
        }

        v71 = *(void (**)(char *, uint64_t))(v0 + 8);
        v72 = v9;
      }

      v71(v72, v65);
      return;
    }

    uint64_t v58 = Logger.rcs.unsafeMutableAddressor();
    uint64_t v59 = v81;
    uint64_t v60 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v0 + 16))(v3, v58, v81);
    v61 = (os_log_s *)Logger.logObject.getter(v60);
    os_log_type_t v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      v63 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v63 = 0;
      _os_log_impl(&dword_0, v61, v62, "Ignoring message sent due to unknown message UUID", v63, 2u);
      swift_slowDealloc(v63, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v0 + 8))(v3, v59);
  }

id RCSAttachmentController.init(session:)(void *a1)
{
  id v3 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1)) initWithSession:a1];

  return v3;
}

{
  id v2;
  objc_super v4;
  v4.super_class = (Class)&OBJC_CLASS___RCSAttachmentController;
  uint64_t v2 = objc_msgSendSuper2(&v4, "initWithSession:", a1);

  return v2;
}

void __swiftcall RCSAttachmentController.init()(RCSAttachmentController *__return_ptr retstr)
{
}

id RCSAttachmentController.init()()
{
  v1.super_class = (Class)&OBJC_CLASS___RCSAttachmentController;
  return objc_msgSendSuper2(&v1, "init");
}

unint64_t type metadata accessor for RCSAttachmentController()
{
  unint64_t result = qword_76348;
  if (!qword_76348)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___RCSAttachmentController);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_76348);
  }

  return result;
}

uint64_t sub_6BA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = (void *)(a1 + *(int *)(type metadata accessor for RCSFile(0LL) + 20));
  NSString v8 = String._bridgeToObjectiveC()();
  if ((*v7 & 0x8000000000000000LL) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t v9 = v8;
    id v10 =  objc_msgSend( v4,  "guidForNewIncomingTransferWithFilename:isDirectory:totalBytes:hfsType:hfsCreator:hfsFlags:",  v8,  0);

    if (!v10) {
      return 0LL;
    }
    id v11 = [v4 transferForGUID:v10];

    if (v11)
    {
      unint64_t v12 = RCSFile.userInfoRepresentation(simID:)(a2, a3);
      uint64_t v13 = sub_6D3C(v12);
      swift_bridgeObjectRelease(v12);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v13);
      [v11 setUserInfo:isa];
    }

    return (uint64_t)v11;
  }

  return result;
}

uint64_t sub_6D3C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_5C28(&qword_765A0);
    id v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    id v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v29 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v28 = (unint64_t)(63 - v4) >> 6;
  uint64_t v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain(v3);
  int64_t v9 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }

    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v14 >= v28) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v29 + 8 * v14);
    int64_t v16 = v9 + 1;
    if (!v15)
    {
      int64_t v16 = v9 + 2;
      if (v9 + 2 >= v28) {
        goto LABEL_37;
      }
      unint64_t v15 = *(void *)(v29 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v9 + 3;
        if (v9 + 3 >= v28) {
          goto LABEL_37;
        }
        unint64_t v15 = *(void *)(v29 + 8 * v16);
        if (!v15)
        {
          int64_t v16 = v9 + 4;
          if (v9 + 4 >= v28) {
            goto LABEL_37;
          }
          unint64_t v15 = *(void *)(v29 + 8 * v16);
          if (!v15) {
            break;
          }
        }
      }
    }

LABEL_27:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    int64_t v9 = v16;
LABEL_28:
    uint64_t v18 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v13);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    sub_12224(*(void *)(a1 + 56) + 32 * v13, (uint64_t)v41);
    *(void *)&__int128 v40 = v20;
    *((void *)&v40 + 1) = v19;
    v38[2] = v40;
    v39[0] = v41[0];
    v39[1] = v41[1];
    *(void *)&v38[0] = v20;
    *((void *)&v38[0] + 1) = v19;
    swift_bridgeObjectRetain();
    swift_dynamicCast(&v30, v38, &type metadata for String, &type metadata for AnyHashable, 7LL);
    sub_121F4(v39, v33);
    __int128 v34 = v30;
    __int128 v35 = v31;
    uint64_t v36 = v32;
    sub_121F4(v33, v37);
    __int128 v30 = v34;
    __int128 v31 = v35;
    uint64_t v32 = v36;
    sub_121F4(v37, v38);
    sub_121F4(v38, &v34);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v3[5]);
    uint64_t v21 = -1LL << *((_BYTE *)v3 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)&v7[8 * (v22 >> 6)]) != 0)
    {
      unint64_t v10 = __clz(__rbit64((-1LL << v22) & ~*(void *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)&v7[8 * v23];
      }

      while (v27 == -1);
      unint64_t v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v10;
    uint64_t v11 = v3[6] + 40 * v10;
    *(_OWORD *)uint64_t v11 = v30;
    *(_OWORD *)(v11 + 16) = v31;
    *(void *)(v11 + 32) = v32;
    uint64_t result = (uint64_t)sub_121F4(&v34, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }

  int64_t v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_122D0(a1);
    return (uint64_t)v3;
  }

  unint64_t v15 = *(void *)(v29 + 8 * v17);
  if (v15)
  {
    int64_t v16 = v9 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    int64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v16 >= v28) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v29 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_27;
    }
  }

  v69 = v25;
  v70 = sub_121B8(0LL, (unint64_t *)&qword_76368, &OBJC_CLASS___IMDChat_ptr);
  v80[4] = (uint64_t)&protocol witness table for IMDChat;
  v80[3] = v70;
  v80[0] = (uint64_t)v69;
  IMDChatRCSGroupIdentity.converge(identity:)(a1);
  sub_CA5C(v80);
}

    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    int64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    int *v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }

  unint64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

LABEL_39:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

          __break(1u);
          return;
        }
      }

      uint64_t v74 = v59;
    }

    swift_bridgeObjectRelease(v74);
    goto LABEL_37;
  }

  int64_t v17 = v16;
  v84 = v7;
  uint64_t v18 = (void *)objc_opt_self(&OBJC_CLASS___NSData);
  uint64_t v19 = String._bridgeToObjectiveC()();
  uint64_t v20 = objc_msgSend(v18, "__imDataWithHexString:", v19);

  if (!v20)
  {
    swift_bridgeObjectRelease(v17);
    goto LABEL_23;
  }

  uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v85 = v9;
  unint64_t v22 = v21;
  char v24 = v23;

  static String.Encoding.utf8.getter();
  unint64_t v25 = String.init(data:encoding:)(v22, v24, v13);
  uint64_t v27 = v26;
  int64_t v28 = v22;
  int64_t v9 = v85;
  sub_F5F8(v28, v24);
  swift_bridgeObjectRelease(v17);
  if (!v27) {
    goto LABEL_23;
  }
  if (v25 == countAndFlagsBits && v27 == object)
  {
    swift_bridgeObjectRelease(v27);
  }

  else
  {
    uint64_t v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v27, countAndFlagsBits, object, 0LL);
    swift_bridgeObjectRelease(v27);
    if ((v29 & 1) == 0) {
      goto LABEL_23;
    }
  }

  IMDChatRCSGroupIdentity.uri.getter((uint64_t)v112);
  __int128 v30 = v112[0];
  __int128 v31 = (void *)v112[1];
  uint64_t v33 = v112[2];
  uint64_t v32 = v112[3];
  __int128 v34 = v112[6];
  uint64_t v82 = v112[5];
  v83 = v112[4];
  __int128 v35 = v113;
  sub_122D8((uint64_t)v112, (uint64_t)v114, &qword_76370);
  if (!v115)
  {
    v95 = v30;
    v96 = (unint64_t)v31;
    v97 = v33;
    v98 = v32;
    v99 = v83;
    v100 = v82;
    v101 = v34;
    v102 = v35;
    v103 = v84;
    v104 = v90;
    v105 = v89;
    v106 = v91;
    v107 = v88;
    v108 = v87;
    v109 = botStatus;
    sub_5C68(groupURI);
    sub_5B098(&v95);
LABEL_22:
    int64_t v9 = v85;
    goto LABEL_23;
  }

  uint64_t v36 = groupURI->scheme._object;
  if ((v30 != groupURI->scheme._countAndFlagsBits || v31 != v36)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, groupURI->scheme._countAndFlagsBits, v36, 0LL) & 1) == 0
    || ((id v37 = groupURI->id._countAndFlagsBits, v38 = groupURI->id._object, v33 != v37) || (void *)v32 != v38)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v33, v32, v37, v38, 0LL) & 1) == 0)
  {
    sub_CA90( (uint64_t)v112,  (void (*)(void, void, void, void, void, void, void, void))sub_C9E8);
    goto LABEL_22;
  }

  rawValue = groupURI->attributes._rawValue;
  sub_5C68(groupURI);
  __int128 v40 = sub_544B8(v83, (uint64_t)rawValue);
  sub_15F40(groupURI);
  sub_CA90((uint64_t)v112, (void (*)(void, void, void, void, void, void, void, void))sub_C9E8);
  int64_t v9 = v85;
  if ((v40 & 1) == 0) {
    goto LABEL_23;
  }
}

Swift::Bool __swiftcall RCSServiceSession.hasStoredMessage(withGUID:)(Swift::String withGUID)
{
  id v1 = [(id)objc_opt_self(IMDMessageStore) sharedInstance];
  NSString v2 = String._bridgeToObjectiveC()();
  unsigned __int8 v3 = [v1 hasStoredMessageWithGUID:v2];

  return v3;
}

void RCSServiceSession.didNativelyReceive(_:for:alreadyReceivedReplicatedVersion:)( uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a3 & 1) != 0)
  {
    uint64_t v12 = Logger.rcs.unsafeMutableAddressor();
    uint64_t v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
    int64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      int64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)int64_t v16 = 0;
      _os_log_impl(&dword_0, v14, v15, "Skipped didReceiveMessage, already has replicated version", v16, 2u);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

  else
  {
    id v17 = [a2 chatIdentifier];
    if (!v17)
    {
      __break(1u);
      return;
    }

    uint64_t v18 = v17;
    objc_msgSend(v4, "didReceiveMessage:forChat:style:fromIDSID:", a1, v17, objc_msgSend(a2, "style"), 0);
  }

  id v19 = [v4 relayController];
  id v20 = [v4 service];
  NSString v21 = [v20 internalName];

  if (!v21)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v23 = v22;
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v23);
  }

  [v19 relayMessageToPeers:a1 forChat:a2 serviceName:v21 reflectOnly:0 requiredCapabilities:0];
}

void RCSServiceSession.didReceiveMessage(_:forChat:style:fromIDSID:)( void *a1, uint64_t a2, void *a3, unsigned __int8 a4, uint64_t a5, uint64_t a6)
{
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v6 chatForChatIdentifier:v12 style:a4];

  if (v13)
  {
    id v14 = [v6 tapbackInterpreter];
    id v15 = [v14 interpretMessageItem:a1 inChat:v13];

    NSString v16 = String._bridgeToObjectiveC()();
    if (a6) {
      NSString v17 = String._bridgeToObjectiveC()();
    }
    else {
      NSString v17 = 0LL;
    }
    v36.receiver = v6;
    v36.super_class = (Class)&OBJC_CLASS___RCSServiceSession;
    objc_msgSendSuper2(&v36, "didReceiveMessage:forChat:style:fromIDSID:", v15, v16, a4, v17);
  }

  else
  {
    id v18 = [(id)objc_opt_self(IMMetricsCollector) sharedInstance];
    if (v18)
    {
      id v19 = v18;
      _StringGuts.grow(_:)(41LL);
      swift_bridgeObjectRelease(0xE000000000000000LL);
      uint64_t v38 = 0x206567617373656DLL;
      unint64_t v39 = 0xEB00000000204449LL;
      id v20 = [a1 guid];
      if (v20)
      {
        NSString v21 = v20;
        uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        uint64_t v24 = v23;
      }

      else
      {
        uint64_t v24 = (void *)0xE500000000000000LL;
        uint64_t v22 = 0x3E6C696E3CLL;
      }

      v25._countAndFlagsBits = v22;
      v25._object = v24;
      String.append(_:)(v25);
      swift_bridgeObjectRelease(v24);
      v26._object = (void *)0x8000000000064B00LL;
      v26._countAndFlagsBits = 0xD000000000000011LL;
      String.append(_:)(v26);
      v27._countAndFlagsBits = a2;
      v27._object = a3;
      String.append(_:)(v27);
      v28._countAndFlagsBits = 0x20656C79747320LL;
      v28._object = (void *)0xE700000000000000LL;
      String.append(_:)(v28);
      unsigned __int8 v37 = a4;
      v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
      object = v29._object;
      String.append(_:)(v29);
      swift_bridgeObjectRelease(object);
      uint64_t v32 = v38;
      unint64_t v31 = v39;
      uint64_t v33 = StaticString.description.getter("Couldn't find chat for received message", 39LL, 2LL);
      uint64_t v35 = v34;
      LOBYTE(v38) = 3;
      unint64_t v39 = v33;
      uint64_t v40 = v34;
      uint64_t v41 = v32;
      unint64_t v42 = v31;
      uint64_t v43 = 0LL;
      char v44 = 1;
      swift_bridgeObjectRetain();
      sub_1A3D8(&v38);
      swift_bridgeObjectRelease(v31);
      swift_bridgeObjectRelease(v35);
      swift_errorRelease(0LL);

      swift_bridgeObjectRelease(v31);
    }

    else
    {
      __break(1u);
    }
  }

uint64_t RCSServiceSession.createTransfer(withFilename:size:localURL:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_BE78(a1, a2, a3, a4);
}

id RCSServiceSession.newTransfer(file:simID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id result = [(id)objc_opt_self(IMDFileTransferCenter) sharedInstance];
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = sub_6BA8(a1, a2, a3);

    return (id)v8;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_77F4(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  uint64_t v8 = a2;
  sub_B934(a1, (uint64_t)sub_B654, 0LL, isUniquelyReferenced_nonNull_native, &v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  if (v2) {
    swift_bridgeObjectRelease(v6);
  }
  return v6;
}

uint64_t RCSServiceSession.downloadTransfer(on:transferURL:destURL:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_76358 + dword_76358);
  uint64_t v9 = (void *)swift_task_alloc(unk_7635C);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_78F8;
  return v11(a1, a2, a3, a4);
}

uint64_t sub_78F8(uint64_t a1)
{
  uint64_t v4 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 16));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_7948(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  **(void **)(*(void *)(v2 + 64) + 40LL) = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a2,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  return swift_continuation_resume(v2);
}

void RCSServiceSession.startFinalizingTransfer(_:)(void *a1)
{
  id v2 = [(id)objc_opt_self(IMDFileTransferCenter) sharedInstance];
  if (v2)
  {
    unsigned __int8 v3 = v2;
    id v4 = [a1 guid];
    [v3 startFinalizingTransfer:v4];
  }

  else
  {
    __break(1u);
  }

void RCSServiceSession.endTransfer(_:endState:updateByteCounts:)(void *a1, uint64_t a2, char a3)
{
  id v6 = [(id)objc_opt_self(IMDFileTransferCenter) sharedInstance];
  if (v6)
  {
    uint64_t v7 = v6;
    id v8 = [a1 guid];
    [v7 endTransfer:v8 endState:a2 updateByteCounts:a3 & 1];
  }

  else
  {
    __break(1u);
  }

void RCSServiceSession.failTransfer(_:error:)(void *a1, uint64_t a2)
{
  id v4 = [(id)objc_opt_self(IMDFileTransferCenter) sharedInstance];
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = [a1 guid];
    id v7 = (id)_convertErrorToNSError(_:)(a2);
    [v5 failTransfer:v6 error:v7];
  }

  else
  {
    __break(1u);
  }

Swift::UInt64 __swiftcall RCSServiceSession.freeSpaceInHomeDirectory()()
{
  return (Swift::UInt64)[(id)objc_opt_self(IMDAttachmentUtilities) freeSpaceInHomeDirectory];
}

Swift::UInt64 __swiftcall RCSServiceSession.minimumFreeSpace()()
{
  return (Swift::UInt64)[(id)objc_opt_self(IMDAttachmentUtilities) minimumFreeSpace];
}

uint64_t RCSServiceSession.ChatResolutionError.errorDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for RCSMessage(0LL);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  id v7 = (char *)&v53 - v6;
  uint64_t v8 = type metadata accessor for RCSServiceSession.ChatResolutionError(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_C934(v1, (uint64_t)v10, v11);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v8);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      id v13 = (uint64_t *)&v10[*(int *)(sub_5C28(&qword_76360) + 48)];
      uint64_t v15 = *v13;
      id v14 = (void *)v13[1];
      sub_5D38((uint64_t)v10, (uint64_t)v7);
      *(void *)&v70[0] = 0LL;
      *((void *)&v70[0] + 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(53LL);
      v16._countAndFlagsBits = 0xD00000000000002FLL;
      v16._object = (void *)0x8000000000064B50LL;
      String.append(_:)(v16);
    }

    else
    {
      uint64_t v41 = (uint64_t *)&v10[*(int *)(sub_5C28(&qword_76360) + 48)];
      uint64_t v15 = *v41;
      id v14 = (void *)v41[1];
      sub_5D38((uint64_t)v10, (uint64_t)v7);
      *(void *)&v70[0] = 0LL;
      *((void *)&v70[0] + 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(49LL);
      swift_bridgeObjectRelease(*((void *)&v70[0] + 1));
      *(void *)&v70[0] = 0xD00000000000002BLL;
      *((void *)&v70[0] + 1) = 0x8000000000064B20LL;
    }

    sub_C934((uint64_t)v7, (uint64_t)v5, type metadata accessor for RCSMessage);
    v42._countAndFlagsBits = String.init<A>(describing:)(v5, v2);
    object = v42._object;
    String.append(_:)(v42);
    swift_bridgeObjectRelease(object);
    v44._countAndFlagsBits = 8250LL;
    v44._object = (void *)0xE200000000000000LL;
    String.append(_:)(v44);
    v45._countAndFlagsBits = v15;
    v45._object = v14;
    String.append(_:)(v45);
    swift_bridgeObjectRelease(v14);
    uint64_t v46 = *(void *)&v70[0];
    sub_11324((uint64_t)v7, type metadata accessor for RCSMessage);
  }

  else
  {
    uint64_t v17 = *(void *)v10;
    uint64_t v18 = *((void *)v10 + 1);
    uint64_t v19 = *((void *)v10 + 2);
    uint64_t v20 = *((void *)v10 + 3);
    uint64_t v21 = *((void *)v10 + 4);
    uint64_t v22 = *((void *)v10 + 5);
    uint64_t v23 = *((void *)v10 + 6);
    char v24 = v10[56];
    uint64_t v25 = *((void *)v10 + 8);
    uint64_t v57 = *((void *)v10 + 9);
    uint64_t v58 = v25;
    uint64_t v56 = *((void *)v10 + 10);
    uint64_t v26 = *((void *)v10 + 11);
    uint64_t v54 = v17;
    uint64_t v55 = v26;
    __int128 v27 = *((_OWORD *)v10 + 11);
    v70[4] = *((_OWORD *)v10 + 10);
    v70[5] = v27;
    v70[6] = *((_OWORD *)v10 + 12);
    __int128 v28 = *((_OWORD *)v10 + 7);
    v70[0] = *((_OWORD *)v10 + 6);
    v70[1] = v28;
    __int128 v29 = *((_OWORD *)v10 + 9);
    v70[2] = *((_OWORD *)v10 + 8);
    v70[3] = v29;
    uint64_t v60 = 0LL;
    unint64_t v61 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(69LL);
    uint64_t v68 = v60;
    unint64_t v69 = v61;
    v30._countAndFlagsBits = 0xD000000000000024LL;
    v30._object = (void *)0x8000000000064B80LL;
    String.append(_:)(v30);
    sub_C978((uint64_t)v70, (uint64_t)&v60);
    v31._countAndFlagsBits = String.init<A>(describing:)(&v60, &type metadata for RCSGroup);
    uint64_t v32 = v31._object;
    String.append(_:)(v31);
    swift_bridgeObjectRelease(v32);
    v33._countAndFlagsBits = 0x207265646E657320LL;
    v33._object = (void *)0xE800000000000000LL;
    String.append(_:)(v33);
    if (v18)
    {
      uint64_t v34 = v54;
      uint64_t v60 = v54;
      unint64_t v61 = v18;
      uint64_t v62 = v19;
      uint64_t v63 = v20;
      uint64_t v64 = v21;
      uint64_t v65 = v22;
      uint64_t v66 = v23;
      char v67 = v24;
      uint64_t v35 = RCSHandle.rawValue.getter();
      uint64_t v36 = v34;
      uint64_t v37 = v35;
      unint64_t v39 = v38;
      sub_C9E8(v36, v18, v19, v20, v21, v22, v23);
      uint64_t v40 = v37;
    }

    else
    {
      unint64_t v39 = 0xE500000000000000LL;
      uint64_t v40 = 0x3E6C696E3CLL;
    }

    unint64_t v47 = v39;
    String.append(_:)(*(Swift::String *)&v40);
    swift_bridgeObjectRelease(v39);
    v48._object = (void *)0x8000000000064BB0LL;
    v48._countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v48);
    v59[0] = v58;
    v59[1] = v57;
    v59[2] = v56;
    v59[3] = v55;
    v49._countAndFlagsBits = String.init<A>(describing:)(v59, &type metadata for RCSMessage.SubscriptionInfo);
    id v50 = v49._object;
    String.append(_:)(v49);
    swift_bridgeObjectRelease(v50);
    v51._countAndFlagsBits = 46LL;
    v51._object = (void *)0xE100000000000000LL;
    String.append(_:)(v51);
    uint64_t v46 = v68;
    sub_C9B4(v70);
  }

  return v46;
}

void RCSServiceSession.existingGroupChat(for:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v71 - v9;
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_CA38(a1, v11);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 16))(v11, v12);
  id v78 = v1;
  if (!v14)
  {
    id v25 = 0LL;
    if ((static IMDChatRCSGroupIdentity.migrationEnabled.getter() & 1) != 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }

  uint64_t v15 = v13;
  unint64_t v16 = v14;
  id v17 = [(id)objc_opt_self(IMDChatRegistry) sharedInstance];
  uint64_t v76 = v15;
  static IMDChatRCSGroupIdentity.encodeGroupID(_:)(v15, v16);
  uint64_t v19 = v18;
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  id v21 = [v2 service];
  NSString v22 = [v21 internalName];

  if (!v22)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v24 = v23;
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v24);
  }

  id v25 = [v17 newestExistingChatWithOriginalGroupID:v20 onService:v22];

  if (!v25)
  {
    swift_bridgeObjectRelease(v16);
    if ((static IMDChatRCSGroupIdentity.migrationEnabled.getter() & 1) != 0) {
      goto LABEL_14;
    }
LABEL_26:
    if (!v25) {
      return;
    }
    goto LABEL_27;
  }

  v77 = v8;
  id v26 = v25;
  uint64_t v27 = Logger.rcs.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, v27, v4);
  id v28 = v26;
  uint64_t v29 = swift_bridgeObjectRetain();
  Swift::String v30 = (os_log_s *)Logger.logObject.getter(v29);
  int v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, (os_log_type_t)v31))
  {
    int v72 = v31;
    uint64_t v75 = v5;
    uint64_t v73 = v4;
    uint64_t v74 = a1;
    uint64_t v32 = swift_slowAlloc(22LL, -1LL);
    uint64_t v71 = swift_slowAlloc(64LL, -1LL);
    *(void *)&v84[0] = v71;
    *(_DWORD *)uint64_t v32 = 136315394;
    id v33 = [v28 guid];
    if (!v33)
    {

      swift_bridgeObjectRelease(v16);
      __break(1u);
      goto LABEL_30;
    }

    uint64_t v34 = v33;
    uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    unint64_t v37 = v36;

    *(void *)&v82[0] = sub_B004(v35, v37, (uint64_t *)v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v82, (char *)v82 + 8);

    swift_bridgeObjectRelease(v37);
    *(_WORD *)(v32 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)&v82[0] = sub_B004(v76, v16, (uint64_t *)v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v82, (char *)v82 + 8);
    swift_bridgeObjectRelease_n(v16, 3LL);
    _os_log_impl(&dword_0, v30, (os_log_type_t)v72, "Found chat %s for conversation ID %s", (uint8_t *)v32, 0x16u);
    uint64_t v38 = v71;
    swift_arrayDestroy(v71, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v32, -1LL, -1LL);

    uint64_t v5 = v75;
    uint64_t v4 = v73;
    (*(void (**)(char *, uint64_t))(v75 + 8))(v10, v73);
    a1 = v74;
  }

  else
  {

    swift_bridgeObjectRelease_n(v16, 2LL);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }

  uint64_t v8 = v77;
  if ((static IMDChatRCSGroupIdentity.migrationEnabled.getter() & 1) == 0) {
    goto LABEL_26;
  }
LABEL_14:
  if (!v25)
  {
    uint64_t v75 = v5;
    uint64_t v39 = a1[3];
    uint64_t v40 = a1[4];
    sub_CA38(a1, v39);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v40 + 8))(v81, v39, v40);
    sub_122D8((uint64_t)v81, (uint64_t)v82, &qword_76370);
    if (!*((void *)&v82[0] + 1)) {
      return;
    }
    v84[0] = v82[0];
    v84[1] = v82[1];
    *(_OWORD *)v85 = v83[0];
    *(_OWORD *)&v85[9] = *(_OWORD *)((char *)v83 + 9);
    id v41 = [(id)objc_opt_self(IMDChatRegistry) sharedInstance];
    uint64_t v42 = RCSHandle.rawValue.getter();
    unint64_t v44 = v43;
    static IMDChatRCSGroupIdentity.encodeGroupID(_:)(v42, v43);
    uint64_t v46 = v45;
    swift_bridgeObjectRelease(v44);
    NSString v47 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v46);
    id v48 = [v78 service];
    NSString v49 = [v48 internalName];

    if (!v49)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v51 = v50;
      NSString v49 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v51);
    }

    id v25 = [v41 newestExistingChatWithOriginalGroupID:v47 onService:v49];

    if (!v25)
    {
      sub_CA90( (uint64_t)v81,  (void (*)(void, void, void, void, void, void, void, void))sub_C9E8);
      return;
    }

    uint64_t v74 = a1;
    id v52 = v25;
    uint64_t v53 = Logger.rcs.unsafeMutableAddressor();
    uint64_t v54 = v75;
    (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v8, v53, v4);
    a1 = v52;
    uint64_t v55 = sub_CA90( (uint64_t)v81,  (void (*)(void, void, void, void, void, void, void, void))sub_CACC);
    uint64_t v56 = (void *)Logger.logObject.getter(v55);
    uint64_t v57 = v4;
    os_log_type_t v58 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled((os_log_t)v56, v58))
    {

      sub_CA90( (uint64_t)v81,  (void (*)(void, void, void, void, void, void, void, void))sub_C9E8);
      sub_CA90( (uint64_t)v81,  (void (*)(void, void, void, void, void, void, void, void))sub_C9E8);

      (*(void (**)(char *, uint64_t))(v54 + 8))(v8, v57);
      goto LABEL_25;
    }

    v77 = v8;
    uint64_t v73 = v57;
    uint64_t v59 = swift_slowAlloc(22LL, -1LL);
    uint64_t v60 = swift_slowAlloc(64LL, -1LL);
    v80[0] = v60;
    *(_DWORD *)uint64_t v59 = 136315394;
    id v61 = [a1 guid];
    if (v61)
    {
      uint64_t v62 = v61;
      uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
      unint64_t v65 = v64;

      uint64_t v79 = sub_B004(v63, v65, v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, v80);

      swift_bridgeObjectRelease(v65);
      *(_WORD *)(v59 + 12) = 2080;
      uint64_t v66 = RCSHandle.rawValue.getter();
      unint64_t v68 = v67;
      uint64_t v79 = sub_B004(v66, v67, v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, v80);
      swift_bridgeObjectRelease(v68);
      sub_CA90( (uint64_t)v81,  (void (*)(void, void, void, void, void, void, void, void))sub_C9E8);
      sub_CA90( (uint64_t)v81,  (void (*)(void, void, void, void, void, void, void, void))sub_C9E8);
      _os_log_impl(&dword_0, (os_log_t)v56, v58, "Found chat %s for group URI %s", (uint8_t *)v59, 0x16u);
      swift_arrayDestroy(v60, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v60, -1LL, -1LL);
      swift_slowDealloc(v59, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v75 + 8))(v77, v73);
LABEL_25:
      a1 = v74;
      goto LABEL_26;
    }

LABEL_30:
    sub_CA90( (uint64_t)v81,  (void (*)(void, void, void, void, void, void, void, void))sub_C9E8);
    __break(1u);
    return;
  }

  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

      swift_release(a1);
      return (uint64_t)v7;
    }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

void sub_885C(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  id v78 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v74 = (char *)&v73 - v6;
  id v75 = (id)objc_opt_self(&OBJC_CLASS___IMDChatRegistry);
  id v7 = [v75 sharedInstance];
  uint64_t v8 = a1[5];
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_9064(v9);
  swift_bridgeObjectRelease(v8);
  v11.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v10);
  if (a1[7]) {
    NSString v12 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v12 = 0LL;
  }
  uint64_t v77 = v3;
  uint64_t v79 = v2;
  id v13 = [v7 existingChatsForIDs:v11.super.isa displayName:v12 groupID:0 style:43];

  uint64_t v14 = sub_121B8(0LL, (unint64_t *)&qword_76368, &OBJC_CLASS___IMDChat_ptr);
  uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

  uint64_t v85 = 0LL;
  unint64_t v86 = 0xE000000000000000LL;
  if ((unint64_t)v15 >> 62)
  {
LABEL_37:
    if (v15 < 0) {
      uint64_t v54 = v15;
    }
    else {
      uint64_t v54 = v15 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter(v54);
    swift_bridgeObjectRelease(v15);
    if (v16) {
      goto LABEL_6;
    }
  }

  else
  {
    uint64_t v16 = *(void *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFF8LL));
    if (v16)
    {
LABEL_6:
      unint64_t v80 = v15 & 0xC000000000000001LL;
      uint64_t v17 = 4LL;
      while (1)
      {
        if (v80) {
          id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17 - 4, v15);
        }
        else {
          id v18 = *(id *)(v15 + 8 * v17);
        }
        uint64_t v19 = v18;
        uint64_t v20 = v17 - 3;
        if (__OFADD__(v17 - 4, 1LL))
        {
          __break(1u);
          goto LABEL_37;
        }

        id v21 = [v18 displayName];
        if (v21)
        {
          NSString v22 = v21;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
          uint64_t v24 = v23;

          swift_bridgeObjectRelease(v24);
          sub_C978((uint64_t)a1, (uint64_t)v84);
          if (v24)
          {
            sub_C9B4(v84);
            goto LABEL_16;
          }
        }

        else
        {
          sub_C978((uint64_t)a1, (uint64_t)v84);
        }

        uint64_t v25 = v84[7];
        sub_C9B4(v84);
        if (!v25)
        {
          swift_bridgeObjectRelease(v86);
          id v33 = [v19 chatIdentifier];
          if (!v33) {
            goto LABEL_26;
          }
          goto LABEL_22;
        }

LABEL_16:
        id v26 = [v19 displayName];
        if (!v26) {
          goto LABEL_28;
        }
        uint64_t v27 = v26;
        uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        uint64_t v30 = v29;

        uint64_t v31 = a1[7];
        if (!v31)
        {
          swift_bridgeObjectRelease(v30);
          goto LABEL_28;
        }

        uint64_t v32 = a1[6];
        if (v28 == v32 && v31 == v30)
        {
          swift_bridgeObjectRelease(v30);
        }

        else
        {
          char v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, v32, v31, 0LL);
          swift_bridgeObjectRelease(v30);
          if ((v38 & 1) == 0) {
            goto LABEL_28;
          }
        }

        swift_bridgeObjectRelease(v86);
        id v33 = [v19 chatIdentifier];
        if (!v33)
        {
LABEL_26:
          uint64_t v35 = 0LL;
          unint64_t v37 = 0xE000000000000000LL;
          goto LABEL_27;
        }

  __break(1u);
  return result;
}

    uint64_t v8 = (v13 - 1) & v13;
  }

  uint64_t v14 = v12 + 2;
  if (v14 >= v23) {
    return v3;
  }
  id v13 = *(void *)(v24 + 8 * v14);
  if (v13)
  {
    uint64_t v4 = v14;
    goto LABEL_16;
  }

  while (1)
  {
    uint64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v4 >= v23) {
      return v3;
    }
    id v13 = *(void *)(v24 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_16;
    }
  }

LABEL_22:
        uint64_t v34 = v33;
        uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
        unint64_t v37 = v36;

LABEL_27:
        uint64_t v85 = v35;
        unint64_t v86 = v37;
LABEL_28:
        uint64_t v40 = v85;
        unint64_t v39 = v86;
        uint64_t v41 = HIBYTE(v86) & 0xF;
        if ((v86 & 0x2000000000000000LL) == 0) {
          uint64_t v41 = v85 & 0xFFFFFFFFFFFFLL;
        }
        if (v41)
        {
          swift_bridgeObjectRelease(v15);
          uint64_t v42 = Logger.rcs.unsafeMutableAddressor();
          uint64_t v43 = v77;
          unint64_t v44 = v74;
          uint64_t v45 = v79;
          (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v74, v42, v79);
          sub_C978((uint64_t)a1, (uint64_t)v84);
          uint64_t v46 = swift_bridgeObjectRetain_n(v39, 2LL);
          NSString v47 = (os_log_s *)Logger.logObject.getter(v46);
          os_log_type_t v48 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v47, v48))
          {
            uint64_t v49 = swift_slowAlloc(22LL, -1LL);
            uint64_t v50 = swift_slowAlloc(64LL, -1LL);
            uint64_t v83 = v50;
            *(_DWORD *)uint64_t v49 = 136315394;
            swift_bridgeObjectRetain();
            uint64_t v81 = sub_B004(v40, v39, &v83);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, v82);
            swift_bridgeObjectRelease_n(v39, 3LL);
            *(_WORD *)(v49 + 12) = 2080;
            sub_C978((uint64_t)v84, (uint64_t)&v81);
            uint64_t v51 = String.init<A>(describing:)(&v81, &type metadata for RCSGroup);
            unint64_t v53 = v52;
            uint64_t v81 = sub_B004(v51, v52, &v83);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, v82);
            swift_bridgeObjectRelease(v53);
            sub_C9B4(v84);
            _os_log_impl( &dword_0,  v47,  v48,  "reusing existing chatIdentifer %s for incoming group %s",  (uint8_t *)v49,  0x16u);
            swift_arrayDestroy(v50, 2LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v50, -1LL, -1LL);
            swift_slowDealloc(v49, -1LL, -1LL);

            (*(void (**)(char *, uint64_t))(v43 + 8))(v74, v79);
          }

          else
          {
            swift_bridgeObjectRelease_n(v39, 2LL);
            sub_C9B4(v84);

            (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v45);
          }

  uint64_t v23 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  uint64_t v24 = (uint64_t *)(*(void *)(v23 + 48) + 16 * a3);
  *uint64_t v24 = v8;
  v24[1] = a2;
  uint64_t v25 = *(void *)(v23 + 16);
  id v26 = __OFADD__(v25, 1LL);
  uint64_t v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v23 + 16) = v27;
  }
  return result;
}

        id v13 = (v20 - 1) & v20;
        uint64_t v17 = __clz(__rbit64(v20)) + (v15 << 6);
      }

      NSString v22 = *(void *)(v9 + 56);
      uint64_t v23 = *(void *)(v9 + 48) + (v17 << 6);
      uint64_t v24 = *(void *)v23;
      uint64_t v25 = *(void *)(v23 + 8);
      id v26 = *(void *)(v23 + 16);
      uint64_t v27 = *(void *)(v23 + 24);
      uint64_t v29 = *(void *)(v23 + 32);
      uint64_t v28 = *(void *)(v23 + 40);
      uint64_t v30 = *(void *)(v23 + 48);
      uint64_t v31 = *(_BYTE *)(v23 + 56);
      uint64_t v32 = v22 + *(void *)(v41 + 72) * v17;
      unint64_t v44 = v15;
      id v33 = (uint64_t)v39;
      if ((v42 & 1) != 0)
      {
        sub_21A68(v32, (uint64_t)v39);
      }

      else
      {
        sub_51498(v32, (uint64_t)v39);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      v45[0] = v24;
      v45[1] = v25;
      v45[2] = v26;
      v45[3] = v27;
      v45[4] = v29;
      v45[5] = v28;
      v45[6] = v30;
      uint64_t v46 = v31;
      id result = sub_501B0(v45, v33, v43);
      uint64_t v9 = v40;
      uint64_t v15 = v44;
    }
  }

  id result = swift_release(v9);
LABEL_32:
  void *v3 = v43;
  return result;
}

    uint64_t v5 = (v12 - 1) & v12;
    uint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_5:
    id result = (uint64_t)[*(id *)(*(void *)(a1 + 56) + 8 * v10) isReachable];
    if ((result & 1) == 0)
    {
      uint64_t v14 = 0LL;
LABEL_25:
      swift_release(a1);
      return v14;
    }
  }

  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

    v89 = (uint64_t *)(v4 + 8 * (v3 >> 6));
    v90 = *v89;
    v91 = (-1LL << v3) - 1;
  }

  else
  {
    v89 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v91 = *v89;
    v90 = (-1LL << a1) - 1;
  }

  *v89 = v91 & v90;
  v92 = *(void *)(v2 + 16);
  v93 = __OFSUB__(v92, 1LL);
  v94 = v92 - 1;
  if (v93)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v2 + 16) = v94;
    ++*(_DWORD *)(v2 + 36);
  }

LABEL_46:
          swift_beginAccess(&v85, v84, 0LL, 0LL);
          return;
        }

        ++v17;
        if (v20 == v16) {
          goto LABEL_42;
        }
      }
    }
  }

  unint64_t v39 = 0xE000000000000000LL;
LABEL_42:
  swift_bridgeObjectRelease(v15);
  id v55 = [v75 sharedInstance];
  id v56 = [v76 account];
  id v57 = [v55 generateUnusedChatIdentifierForGroupChatWithAccount:v56];

  if (v57)
  {
    uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
    unint64_t v60 = v59;
    swift_bridgeObjectRelease(v39);

    uint64_t v85 = v58;
    unint64_t v86 = v60;
    swift_bridgeObjectRetain();
    uint64_t v61 = Logger.rcs.unsafeMutableAddressor();
    uint64_t v63 = v77;
    uint64_t v62 = v78;
    uint64_t v64 = v79;
    (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v78, v61, v79);
    sub_C978((uint64_t)a1, (uint64_t)v84);
    uint64_t v65 = swift_bridgeObjectRetain();
    uint64_t v66 = (os_log_s *)Logger.logObject.getter(v65);
    os_log_type_t v67 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = swift_slowAlloc(22LL, -1LL);
      uint64_t v69 = swift_slowAlloc(64LL, -1LL);
      uint64_t v83 = v69;
      *(_DWORD *)uint64_t v68 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v81 = sub_B004(v58, v60, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, v82);
      swift_bridgeObjectRelease_n(v60, 3LL);
      *(_WORD *)(v68 + 12) = 2080;
      sub_C978((uint64_t)v84, (uint64_t)&v81);
      uint64_t v70 = String.init<A>(describing:)(&v81, &type metadata for RCSGroup);
      unint64_t v72 = v71;
      uint64_t v81 = sub_B004(v70, v71, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, v82);
      swift_bridgeObjectRelease(v72);
      sub_C9B4(v84);
      _os_log_impl(&dword_0, v66, v67, "creating a new chatIdentifer %sfor incoming group %s", (uint8_t *)v68, 0x16u);
      swift_arrayDestroy(v69, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v69, -1LL, -1LL);
      swift_slowDealloc(v68, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v63 + 8))(v78, v64);
    }

    else
    {
      swift_bridgeObjectRelease_n(v60, 2LL);
      sub_C9B4(v84);

      (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v64);
    }

    goto LABEL_46;
  }

  __break(1u);
}

void *sub_9064(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1EC80(0, v1, 0);
    uint64_t v3 = (uint64_t *)(a1 + 56);
    do
    {
      uint64_t v5 = *(v3 - 1);
      uint64_t v4 = *v3;
      unint64_t v7 = _swiftEmptyArrayStorage[2];
      unint64_t v6 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain();
      if (v7 >= v6 >> 1) {
        sub_1EC80(v6 > 1, v7 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v7 + 1;
      uint64_t v8 = (char *)&_swiftEmptyArrayStorage[2 * v7];
      *((void *)v8 + 4) = v5;
      *((void *)v8 + 5) = v4;
      v3 += 8;
      --v1;
    }

    while (v1);
  }

  return _swiftEmptyArrayStorage;
}

uint64_t RCSServiceSession.groupChat(for:group:)(uint64_t a1, void *a2)
{
  if ((v18[58] & 1) != 0)
  {
    uint64_t v3 = v16[0];
    uint64_t v4 = v16[1];
    uint64_t v5 = v16[2];
    uint64_t v6 = v16[3];
    uint64_t v7 = v16[4];
    uint64_t v8 = v16[5];
    uint64_t v9 = v16[6];
    char v10 = v17;
    sub_CB58((uint64_t)v18);
  }

  else
  {
    sub_CB8C((uint64_t)v16);
    uint64_t v3 = 0LL;
    uint64_t v4 = 0LL;
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    char v10 = 0;
  }

  v19[0] = v3;
  v19[1] = v4;
  v19[2] = v5;
  v19[3] = v6;
  v19[4] = v7;
  v19[5] = v8;
  v19[6] = v9;
  char v20 = v10;
  uint64_t v11 = type metadata accessor for RCSMessage(0LL);
  RCSServiceSession.groupChat(from:subscriptionInfo:group:)( (uint64_t)v19,  *(void *)(a1 + *(int *)(v11 + 52)),  *(void *)(a1 + *(int *)(v11 + 52) + 8),  *(void *)(a1 + *(int *)(v11 + 52) + 16),  *(void *)(a1 + *(int *)(v11 + 52) + 24),  a2);
  uint64_t v13 = v12;
  sub_C9E8(v3, v4, v5, v6, v7, v8, v9);
  return v13;
}

void RCSServiceSession.groupChat(from:subscriptionInfo:group:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v126 = a5;
  uint64_t v121 = a4;
  uint64_t v147 = a3;
  uint64_t v119 = a1;
  uint64_t v120 = a2;
  sub_122D8(a1, (uint64_t)v131, &qword_76370);
  uint64_t v123 = v131[0];
  uint64_t v116 = v131[1];
  uint64_t v125 = v131[2];
  uint64_t v8 = v131[4];
  v118 = (uint8_t *)v131[3];
  uint64_t v9 = v131[5];
  uint64_t v10 = v131[6];
  LODWORD(v124) = v132;
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v112 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v122 = a6;
  RCSServiceSession.existingGroupChat(for:)(a6);
  if (v15)
  {
    v136[0] = v123;
    uint64_t v16 = v116;
    v136[1] = v116;
    uint64_t v17 = v126;
    v136[2] = v125;
    uint64_t v18 = (uint64_t)v118;
    v136[3] = v118;
    v114 = (char *)v9;
    uint64_t v115 = v8;
    v136[4] = v8;
    v136[5] = v9;
    uint64_t v113 = v10;
    v136[6] = v10;
    char v137 = (char)v124;
    uint64_t v138 = v120;
    uint64_t v139 = v147;
    uint64_t v140 = v121;
    uint64_t v141 = v126;
    v142 = v15;
    id v19 = v15;
    sub_CA90(v119, (void (*)(void, void, void, void, void, void, void, void))sub_CACC);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v20 = v117;
    sub_1E540((uint64_t)v136, v122);
    if (!v20)
    {
      uint64_t v28 = v18;
      id v21 = v19;
      uint64_t v27 = v125;
      goto LABEL_8;
    }

    id v21 = v19;
    id v22 = [(id)objc_opt_self(IMMetricsCollector) sharedInstance];
    if (v22)
    {
      uint64_t v23 = v22;
      uint64_t v24 = StaticString.description.getter("Group Convergance Error", 23LL, 2LL);
      uint64_t v26 = v25;
      LOBYTE(v143[0]) = 1;
      v143[1] = v24;
      v143[2] = v25;
      v143[3] = 0LL;
      v143[4] = 0LL;
      v143[5] = v20;
      char v144 = 0;
      swift_errorRetain(v20);
      sub_1A3D8(v143);
      swift_bridgeObjectRelease(0LL);
      swift_bridgeObjectRelease(v26);
      swift_errorRelease(v20);

      swift_errorRelease(v20);
      uint64_t v27 = v125;
      uint64_t v17 = v126;
      uint64_t v28 = (uint64_t)v118;
LABEL_8:
      sub_1E78C((uint64_t)v136);
      sub_C9E8(v123, v16, v27, v28, v115, (uint64_t)v114, v113);

      swift_bridgeObjectRelease(v17);
      swift_bridgeObjectRelease(v147);
      return;
    }

    __break(1u);
    goto LABEL_41;
  }

  v114 = v14;
  uint64_t v115 = v12;
  uint64_t v113 = v11;
  uint64_t v29 = v122;
  id v124 = v6;
  sub_885C(v122);
  int v31 = v30;
  uint64_t v125 = v32;
  uint64_t v34 = v33;
  uint64_t v35 = v29[3];
  uint64_t v36 = v29[4];
  sub_CA38(v29, v35);
  uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 16))(v35, v36);
  LODWORD(v123) = v31;
  if (v38)
  {
    unint64_t v39 = v38;
    static IMDChatRCSGroupIdentity.encodeGroupID(_:)(v37, v38);
    uint64_t v41 = v40;
    swift_bridgeObjectRelease(v39);
    uint64_t v42 = v147;
    uint64_t v43 = v117;
  }

  else
  {
    char v44 = static IMDChatRCSGroupIdentity.legacyInteractionEnabled.getter();
    uint64_t v42 = v147;
    uint64_t v43 = v117;
    if ((v44 & 1) != 0
      && (uint64_t v45 = v29[3],
          uint64_t v46 = v29[4],
          sub_CA38(v29, v45),
          (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v46 + 8))(v130, v45, v46),
          sub_122D8((uint64_t)v130, (uint64_t)v133, &qword_76370),
          *((void *)&v133[0] + 1)))
    {
      v134[2] = v133[0];
      v134[3] = v133[1];
      v135[0] = v134[0];
      *(_OWORD *)((char *)v135 + 9) = *(_OWORD *)((char *)v134 + 9);
      uint64_t v47 = RCSHandle.rawValue.getter();
      unint64_t v49 = v48;
      sub_CA90( (uint64_t)v130,  (void (*)(void, void, void, void, void, void, void, void))sub_C9E8);
      static IMDChatRCSGroupIdentity.encodeGroupID(_:)(v47, v49);
      uint64_t v41 = v50;
      swift_bridgeObjectRelease(v49);
    }

    else
    {
      id v51 = [(id)objc_opt_self(IMMetricsCollector) sharedInstance];
      if (!v51)
      {
LABEL_42:
        __break(1u);
        return;
      }

      unint64_t v52 = v51;
      uint64_t v128 = 0x70756F7247534352LL;
      unint64_t v129 = 0xE900000000000020LL;
      sub_C978((uint64_t)v29, (uint64_t)v127);
      v53._countAndFlagsBits = String.init<A>(reflecting:)(v127, &type metadata for RCSGroup);
      object = v53._object;
      String.append(_:)(v53);
      swift_bridgeObjectRelease(object);
      uint64_t v55 = v128;
      unint64_t v56 = v129;
      uint64_t v57 = StaticString.description.getter("Failed to find a suitable identifier for the RCS group ID", 57LL, 2LL);
      uint64_t v59 = v58;
      LOBYTE(v145[0]) = 1;
      v145[1] = v57;
      v145[2] = v58;
      v145[3] = v55;
      v145[4] = v56;
      v145[5] = 0LL;
      char v146 = 0;
      swift_bridgeObjectRetain();
      sub_1A3D8(v145);
      swift_bridgeObjectRelease(v56);
      swift_bridgeObjectRelease(v59);
      swift_errorRelease(0LL);

      swift_bridgeObjectRelease(v56);
      uint64_t v41 = 0LL;
    }
  }

  NSString v60 = String._bridgeToObjectiveC()();
  if (v29[7])
  {
    NSString v61 = String._bridgeToObjectiveC()();
    if (v41) {
      goto LABEL_16;
    }
LABEL_19:
    NSString v62 = 0LL;
    if (v42) {
      goto LABEL_17;
    }
    goto LABEL_20;
  }

  NSString v61 = 0LL;
  if (!v41) {
    goto LABEL_19;
  }
LABEL_16:
  NSString v62 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v41);
  if (v42)
  {
LABEL_17:
    NSString v63 = String._bridgeToObjectiveC()();
    goto LABEL_21;
  }

LABEL_20:
  NSString v63 = 0LL;
LABEL_21:
  v118 = v34;
  if (v126) {
    NSString v64 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v64 = 0LL;
  }
  uint64_t v65 = v29[5];
  uint64_t v66 = swift_bridgeObjectRetain();
  uint64_t v67 = v43;
  uint64_t v68 = v29;
  uint64_t v69 = sub_9064(v66);
  uint64_t v117 = v67;
  swift_bridgeObjectRelease(v65);
  uint64_t v70 = sub_CBC0((uint64_t)v69);
  swift_bridgeObjectRelease(v69);
  unint64_t v71 = sub_9C24((uint64_t)v70);
  swift_bridgeObjectRelease(v70);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v71);
  id v73 = v124;
  [v124 didJoinChat:v60 style:43 displayName:v61 groupID:v62 lastAddressedHandle:v63 lastAddressedSIMID:v64 handleInfo:isa];

  if ((v123 & 1) == 0)
  {
    swift_bridgeObjectRelease(v118);
    RCSServiceSession.existingGroupChat(for:)(v68);
    uint64_t v78 = v147;
    uint64_t v82 = v68;
    uint64_t v79 = v119;
    if (v87) {
      return;
    }
LABEL_39:
    uint64_t v105 = type metadata accessor for RCSServiceSession.ChatResolutionError(0LL);
    unint64_t v106 = sub_CD80();
    swift_allocError(v105, v106, 0LL, 0LL);
    v108 = (void *)v107;
    uint64_t v109 = v107 + 96;
    sub_122D8(v79, v107, &qword_76370);
    v108[8] = v120;
    v108[9] = v78;
    uint64_t v110 = v126;
    v108[10] = v121;
    v108[11] = v110;
    sub_C978((uint64_t)v82, v109);
    swift_storeEnumTagMultiPayload(v108, v105, 0LL);
    sub_CA90(v79, (void (*)(void, void, void, void, void, void, void, void))sub_CACC);
    swift_bridgeObjectRetain();
    uint64_t v111 = swift_bridgeObjectRetain();
    swift_willThrow(v111);
    return;
  }

  uint64_t v74 = v118;
  NSString v75 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v74);
  id v76 = [v73 service];
  NSString v77 = [v76 internalName];

  uint64_t v78 = v147;
  uint64_t v79 = v119;
  if (!v77)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v81 = v80;
    NSString v77 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v81);
  }

  uint64_t v6 = (void *)IMCopyGUIDForChat(v75, v77, 43LL);

  uint64_t v82 = v122;
  uint64_t v84 = (uint64_t)v114;
  uint64_t v83 = v115;
  if (v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    uint64_t v86 = v85;
  }

  else
  {
    uint64_t v86 = 0LL;
  }

  id v88 = [(id)objc_opt_self(IMDChatRegistry) sharedInstance];
  if (!v86)
  {
LABEL_41:

    __break(1u);
    goto LABEL_42;
  }

  v89 = v88;
  swift_bridgeObjectRelease(v86);
  id v90 = [v89 existingChatWithGUID:v6];

  if (!v90) {
    goto LABEL_39;
  }
  uint64_t v125 = (uint64_t)v90;
  id v91 = v90;
  uint64_t v92 = Logger.rcs.unsafeMutableAddressor();
  uint64_t v93 = v113;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 16))(v84, v92, v113);
  id v94 = v91;
  v95 = (os_log_s *)Logger.logObject.getter(v94);
  os_log_type_t v96 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v95, v96))
  {
    v97 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v123 = swift_slowAlloc(32LL, -1LL);
    v127[0] = v123;
    *(_DWORD *)v97 = 136315138;
    v118 = v97 + 4;
    id v124 = v94;
    id v98 = v94;
    id v99 = [v98 description];
    uint64_t v100 = static String._unconditionallyBridgeFromObjectiveC(_:)(v99);
    unint64_t v102 = v101;

    uint64_t v103 = v100;
    uint64_t v82 = v122;
    uint64_t v128 = sub_B004(v103, v102, v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129);

    uint64_t v79 = v119;
    swift_bridgeObjectRelease(v102);
    _os_log_impl(&dword_0, v95, v96, "Updating identity for chat: %s", v97, 0xCu);
    uint64_t v104 = v123;
    swift_arrayDestroy(v123, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v104, -1LL, -1LL);
    swift_slowDealloc(v97, -1LL, -1LL);

    id v94 = v124;
    (*(void (**)(char *, uint64_t))(v115 + 8))(v114, v113);
  }

  else
  {

    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v84, v93);
  }

  v127[3] = sub_121B8(0LL, (unint64_t *)&qword_76368, &OBJC_CLASS___IMDChat_ptr);
  v127[4] = (uint64_t)&protocol witness table for IMDChat;
  v127[0] = (uint64_t)v94;
  IMDChatRCSGroupIdentity.converge(identity:)(v82);
  sub_CA5C(v127);
  uint64_t v78 = v147;
  if (!v125) {
    goto LABEL_39;
  }
}

    uint64_t v9 = (v25 - 1) & v25;
    uint64_t v11 = __clz(__rbit64(v25)) + (v6 << 6);
LABEL_5:
    uint64_t v12 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v11);
    uint64_t v13 = *v12;
    uint64_t v14 = (RCSServiceSession *)v12[1];
    uint64_t v15 = *(void *)(*(void *)(a3 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    swift_retain(v15);
    uint64_t v16 = a4(v13, v14, v15);
    swift_release(v15);
    swift_bridgeObjectRelease(v14, v17, v18, v19, v20, v21, v22, v23);
    if ((v16 & 1) != 0)
    {
      *(unint64_t *)((char *)a1 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v11;
      if (__OFADD__(v30++, 1LL))
      {
        __break(1u);
LABEL_24:
        sub_293DC(a1, a2, v30, a3);
        return;
      }
    }
  }

  uint64_t v26 = v24 + 3;
  if (v26 >= v32) {
    goto LABEL_24;
  }
  uint64_t v25 = *(void *)(v31 + 8 * v26);
  if (v25)
  {
    uint64_t v6 = v26;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v6 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v6 >= v32) {
      goto LABEL_24;
    }
    uint64_t v25 = *(void *)(v31 + 8 * v6);
    ++v26;
    if (v25) {
      goto LABEL_20;
    }
  }

    NSString v63 = 0LL;
    goto LABEL_21;
  }

  if (qword_76B90 != -1) {
    swift_once(&qword_76B90, sub_21C04);
  }
  uint64_t v4 = *(void *)(v1 + 120);
  uint64_t v5 = *(void *)(v1 + 72);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_6298(v6, (uint64_t)static Logger.rcs);
  uint64_t v7 = sub_C934(v5, v4, type metadata accessor for RCSFile);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  uint64_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = *(void *)(v1 + 288);
    uint64_t v11 = *(void *)(v1 + 112);
    uint64_t v12 = *(void *)(v1 + 120);
    uint64_t v13 = swift_slowAlloc(22LL, -1LL);
    *(_DWORD *)uint64_t v13 = 134218240;
    uint64_t v14 = *(void *)(v12 + *(int *)(v11 + 20));
    sub_11324(v12, type metadata accessor for RCSFile);
    *(void *)(v1 + 16) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24);
    *(_WORD *)(v13 + 12) = 2048;
    *(void *)(v1 + 24) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32);
    _os_log_impl( &dword_0,  v8,  v9,  "RCS File's size %ld is larger than the autodownload size %lld, not auto downloading",  (uint8_t *)v13,  0x16u);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {
    sub_11324(*(void *)(v1 + 120), type metadata accessor for RCSFile);
  }

  uint64_t v59 = [objc_allocWithZone(NSNumber) initWithLongLong:*(void *)(v1 + 288)];
  id result = [(id)objc_opt_self(IMMetricsCollector) sharedInstance];
  if (result)
  {
    NSString v61 = result;
    NSString v62 = [objc_allocWithZone(NSNumber) initWithInteger:*(void *)(*(void *)(v1 + 72) + *(int *)(v1 + 300))];
    [v61 trackAttachmentDownloadLimitExceeded:3 limitSize:v59 fileSize:v62 qualityType:0 isSticker:0 lowQualityModeEnabled:0];

    goto LABEL_20;
  }

  __break(1u);
  return result;
}

void *sub_9C24(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
    sub_1ECB8(0, v1, 0);
    uint64_t v4 = (uint64_t *)(a1 + 32);
    uint64_t v2 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v9 = *v4;
      swift_bridgeObjectRetain();
      uint64_t v5 = sub_5C28(&qword_76568);
      swift_dynamicCast(v10, &v9, v5, (char *)&type metadata for Any + 8, 7LL);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_1ECB8(0, v2[2] + 1LL, 1);
        uint64_t v2 = v11;
      }

      unint64_t v7 = v2[2];
      unint64_t v6 = v2[3];
      if (v7 >= v6 >> 1)
      {
        sub_1ECB8(v6 > 1, v7 + 1, 1);
        uint64_t v2 = v11;
      }

      v2[2] = v7 + 1;
      sub_121F4(v10, &v2[4 * v7 + 4]);
      ++v4;
      --v1;
    }

    while (v1);
  }

  return v2;
}

id RCSServiceSession.instantMessageChat(for:)(uint64_t a1)
{
  id v2 = (id)a1;
  sub_CB1C(a1, (uint64_t)v58);
  if (v61 == 1)
  {
    sub_CB1C((uint64_t)v58, (uint64_t)&v46);
    uint64_t v3 = v47;
    uint64_t v4 = v49;
    uint64_t v5 = v52;
    swift_bridgeObjectRelease(v50);
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(v5);
    if ((v57 & 1) != 0)
    {
      unint64_t v6 = v55;
LABEL_6:
      sub_CB58((uint64_t)v6);
      uint64_t v7 = type metadata accessor for RCSServiceSession.ChatResolutionError(0LL);
      unint64_t v8 = sub_CD80();
      swift_allocError(v7, v8, 0LL, 0LL);
      uint64_t v10 = v9;
      uint64_t v11 = (void *)(v9 + *(int *)(sub_5C28(&qword_76360) + 48));
      sub_C934((uint64_t)v2, v10, type metadata accessor for RCSMessage);
      *uint64_t v11 = 0xD00000000000005CLL;
      v11[1] = 0x8000000000064C30LL;
      uint64_t v12 = swift_storeEnumTagMultiPayload(v10, v7, 2LL);
      swift_willThrow(v12);
      sub_CB8C((uint64_t)v58);
      return v2;
    }

    uint64_t v45 = (uint64_t)v2;
    uint64_t v76 = v1;
    uint64_t v13 = v55[0];
    uint64_t v14 = v55[1];
    uint64_t v16 = v55[2];
    uint64_t v15 = v55[3];
    uint64_t v17 = v55[4];
    uint64_t v18 = v55[5];
    uint64_t v19 = v55[6];
    int v20 = v56;
  }

  else
  {
    sub_CB1C((uint64_t)v58, (uint64_t)&v46);
    if ((v54 & 1) != 0)
    {
      unint64_t v6 = &v46;
      goto LABEL_6;
    }

    uint64_t v45 = (uint64_t)v2;
    uint64_t v76 = v1;
    uint64_t v13 = v46;
    uint64_t v14 = v47;
    uint64_t v16 = v48;
    uint64_t v15 = v49;
    uint64_t v17 = v50;
    uint64_t v18 = v51;
    uint64_t v19 = v52;
    int v20 = v53;
  }

  sub_CB8C((uint64_t)v58);
  uint64_t v68 = v13;
  uint64_t v69 = v14;
  uint64_t v70 = v16;
  uint64_t v71 = v15;
  uint64_t v72 = v17;
  uint64_t v73 = v18;
  uint64_t v74 = v19;
  char v21 = (v20 - 1) < 2;
  char v75 = v20;
  uint64_t v22 = RCSHandle.chatBotId.getter();
  unint64_t v24 = v23;
  id v2 = sub_20748(v16, v15, v21, v22, v23);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v19);
  if (v2)
  {
    sub_CB1C(v45, (uint64_t)v58);
    if ((v61 & 1) != 0)
    {
      uint64_t v25 = v58[0];
      uint64_t v26 = v58[1];
      uint64_t v27 = v58[3];
      uint64_t v44 = v58[2];
      uint64_t v28 = v58[4];
      uint64_t v29 = v58[5];
      uint64_t v30 = v58[6];
      char v31 = v59;
      sub_CB58((uint64_t)&v60);
    }

    else
    {
      sub_CB8C((uint64_t)v58);
      uint64_t v25 = 0LL;
      uint64_t v26 = 0LL;
      uint64_t v44 = 0LL;
      uint64_t v27 = 0LL;
      uint64_t v28 = 0LL;
      uint64_t v29 = 0LL;
      uint64_t v30 = 0LL;
      char v31 = 0;
    }

    uint64_t v43 = v27;
    uint64_t v38 = v45 + *(int *)(type metadata accessor for RCSMessage(0LL) + 52);
    uint64_t v39 = *(void *)v38;
    uint64_t v40 = *(void *)(v38 + 24);
    v62[0] = v25;
    v62[1] = v26;
    v62[2] = v44;
    v62[3] = v27;
    v62[4] = v28;
    v62[5] = v29;
    v62[6] = v30;
    char v63 = v31;
    uint64_t v64 = v39;
    __int128 v65 = *(_OWORD *)(v38 + 8);
    uint64_t v66 = v40;
    id v67 = v2;
    uint64_t v41 = v65;
    swift_bridgeObjectRetain();
    id v2 = v2;
    swift_bridgeObjectRetain();
    sub_1E78C((uint64_t)v62);
    sub_C9E8(v25, v26, v44, v43, v28, v29, v30);

    swift_bridgeObjectRelease(v40);
    swift_bridgeObjectRelease(v41);
  }

  else
  {
    uint64_t v32 = type metadata accessor for RCSServiceSession.ChatResolutionError(0LL);
    unint64_t v33 = sub_CD80();
    swift_allocError(v32, v33, 0LL, 0LL);
    uint64_t v35 = v34;
    uint64_t v36 = (void *)(v34 + *(int *)(sub_5C28(&qword_76360) + 48));
    sub_C934(v45, v35, type metadata accessor for RCSMessage);
    *uint64_t v36 = 0xD000000000000013LL;
    v36[1] = 0x8000000000064C90LL;
    uint64_t v37 = swift_storeEnumTagMultiPayload(v35, v32, 1LL);
    swift_willThrow(v37);
  }

  return v2;
}

uint64_t RCSServiceSession.generatePreview(for:attachmentPath:balloonBundleID:senderContext:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 56) = a1;
  uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_76388
                                                                                              + dword_76388);
  uint64_t v14 = (void *)swift_task_alloc(unk_7638C);
  *(void *)(v7 + 64) = v14;
  *uint64_t v14 = v7;
  v14[1] = sub_A1B8;
  return v16(v7 + 16, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_A1B8()
{
  uint64_t v2 = *(void *)(*v1 + 64);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = *(void *)(v3 + 24);
  char v6 = *(_BYTE *)(v3 + 32);
  uint64_t v7 = *(void *)(v3 + 40);
  uint64_t v8 = *(void *)(v3 + 48);
  swift_task_dealloc(v2);
  if (!v0)
  {
    uint64_t v9 = *(void *)(v3 + 56);
    *(void *)uint64_t v9 = v4;
    *(void *)(v9 + 8) = v5;
    *(_BYTE *)(v9 + 16) = v6;
    *(void *)(v9 + 24) = v7;
    *(void *)(v9 + 32) = v8;
  }

  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_A234(uint64_t a1, uint64_t a2, char a3, void *a4, double a5, double a6)
{
  uint64_t v6 = *(void *)(a1 + 32);
  if (a4)
  {
    uint64_t v8 = sub_5C28(&qword_76560);
    uint64_t v9 = swift_allocError(v8, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *uint64_t v10 = a4;
    id v11 = a4;
    return swift_continuation_throwingResumeWithError(v6, v9);
  }

  else
  {
    if (a2) {
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
    }
    else {
      uint64_t v16 = 0LL;
    }
    uint64_t v17 = *(void *)(*(void *)(v6 + 64) + 40LL);
    *(void *)uint64_t v17 = v16;
    *(void *)(v17 + 8) = a2;
    *(_BYTE *)(v17 + 16) = a3;
    *(double *)(v17 + 24) = a5;
    *(double *)(v17 + 32) = a6;
    return swift_continuation_throwingResume(v6);
  }

uint64_t RCSServiceSession.generateSafeRender(for:)(uint64_t a1, uint64_t a2)
{
  v2[15] = a1;
  v2[16] = a2;
  uint64_t v3 = sub_5C28(&qword_76398);
  v2[17] = v3;
  unint64_t v4 = (*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[18] = swift_task_alloc(v4);
  v2[19] = swift_task_alloc(v4);
  uint64_t v5 = type metadata accessor for MainActor(0LL);
  v2[20] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v2[21] = v6;
  v2[22] = v7;
  return swift_task_switch(sub_A38C, v6, v7);
}

uint64_t sub_A38C()
{
  id v1 = [(id)objc_opt_self(IMTranscodeController) sharedInstance];
  *(void *)(v0 + 184) = v1;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = v0 + 16;
    uint64_t v5 = *(void *)(v0 + 152);
    URL._bridgeToObjectiveC()(v2);
    uint64_t v7 = v6;
    *(void *)(v0 + 192) = v6;
    *(void *)(v0 + 56) = v5;
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_A4C4;
    uint64_t v8 = swift_continuation_init(v0 + 16, 1LL);
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    uint64_t v9 = (void *)(v0 + 80);
    v9[1] = 0x40000000LL;
    v9[2] = sub_A650;
    v9[3] = &unk_713B8;
    v9[4] = v8;
    [v3 generateSafeRender:v7 completionBlock:v9];
    return swift_continuation_await(v4);
  }

  else
  {
    uint64_t v11 = *(void *)(v0 + 120);
    swift_release(*(void *)(v0 + 160));
    uint64_t v12 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
    uint64_t v13 = *(void *)(v0 + 144);
    swift_task_dealloc(*(void *)(v0 + 152));
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))(0LL);
  }

uint64_t sub_A4C4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 200) = v2;
  if (v2) {
    return swift_task_switch(sub_A5E0, *(void *)(v1 + 168), *(void *)(v1 + 176));
  }
  *(_DWORD *)(v1 + 208) = *(_DWORD *)(*(void *)(v1 + 136) + 48LL);
  return swift_task_switch(sub_A530, *(void *)(v1 + 168), *(void *)(v1 + 176));
}

uint64_t sub_A530()
{
  uint64_t v1 = *(int *)(v0 + 208);
  uint64_t v2 = *(void **)(v0 + 192);
  uint64_t v4 = *(unsigned __int8 **)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v6 = *(void *)(v0 + 136);
  uint64_t v5 = *(void *)(v0 + 144);
  uint64_t v7 = *(void *)(v0 + 120);

  swift_release(v3);
  uint64_t v8 = (uint64_t)&v4[v1];
  uint64_t v9 = v5 + *(int *)(v6 + 48);
  uint64_t v10 = *v4;
  sub_122D8(v8, v9, &qword_763A0);
  sub_122D8(v9, v7, &qword_763A0);

  uint64_t v11 = *(void *)(v0 + 144);
  swift_task_dealloc(*(void *)(v0 + 152));
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v10);
}

uint64_t sub_A5E0()
{
  uint64_t v1 = *(void **)(v0 + 192);
  uint64_t v2 = *(void **)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v5 = swift_release(*(void *)(v0 + 160));
  swift_willThrow(v5);

  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t sub_A650(uint64_t a1, char a2, uint64_t a3, void *a4)
{
  uint64_t v8 = sub_5C28(&qword_763A0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_5C28(&qword_76398);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void *)(a1 + 32);
  if (a4)
  {
    uint64_t v15 = sub_5C28(&qword_76560);
    uint64_t v16 = swift_allocError(v15, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *uint64_t v17 = a4;
    id v18 = a4;
    return swift_continuation_throwingResumeWithError(v14, v16);
  }

  else
  {
    *uint64_t v13 = a2;
    if (a3)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)(a3);
      uint64_t v20 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v10, 0LL, 1LL, v20);
    }

    else
    {
      uint64_t v21 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v10, 1LL, 1LL, v21);
    }

    sub_122D8((uint64_t)v10, (uint64_t)&v13[*(int *)(v11 + 48)], &qword_763A0);
    sub_122D8((uint64_t)v13, *(void *)(*(void *)(v14 + 64) + 40LL), &qword_76398);
    return swift_continuation_throwingResume(v14);
  }

uint64_t RCSServiceSession.categorize(_:rcsMessage:foundChat:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_763B0 + dword_763B0);
  uint64_t v7 = (void *)swift_task_alloc(unk_763B4);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_A870;
  return v9(a1, a2, a3);
}

uint64_t sub_A870(void *a1)
{
  uint64_t v4 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 16));
  return (*(uint64_t (**)(void *))(v4 + 8))(a1);
}

uint64_t RCSServiceSession.shouldCategorize(_:)(uint64_t a1)
{
  uint64_t v2 = sub_5C28(&qword_76228);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v12 - v6;
  uint64_t v8 = type metadata accessor for RCSMessage(0LL);
  sub_E08C(a1 + *(int *)(v8 + 28), (uint64_t)v7);
  uint64_t v9 = type metadata accessor for RCSMessage.Content(0LL);
  uint64_t v10 = 1LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v7, 1LL, v9) != 1)
  {
    sub_E08C((uint64_t)v7, (uint64_t)v5);
    else {
      sub_11324((uint64_t)v5, type metadata accessor for RCSMessage.Content);
    }
  }

  sub_1231C((uint64_t)v7, &qword_76228);
  return v10;
}

void sub_A9D8(uint64_t a1, void **a2, char a3)
{
}

uint64_t sub_A9E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_76358 + dword_76358);
  uint64_t v9 = (void *)swift_task_alloc(unk_7635C);
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_1239C;
  return v11(a1, a2, a3, a4);
}

uint64_t sub_AA64@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  id v18 = a3;
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  if ((v23[58] & 1) != 0)
  {
    uint64_t v7 = v21[0];
    uint64_t v8 = v21[1];
    uint64_t v10 = v21[2];
    uint64_t v9 = v21[3];
    uint64_t v11 = v21[4];
    uint64_t v12 = v21[5];
    uint64_t v13 = v21[6];
    char v14 = v22;
    sub_CB58((uint64_t)v23);
  }

  else
  {
    sub_CB8C((uint64_t)v21);
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v10 = 0LL;
    uint64_t v9 = 0LL;
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    char v14 = 0;
  }

  v24[0] = v7;
  v24[1] = v8;
  v24[2] = v10;
  v24[3] = v9;
  v24[4] = v11;
  v24[5] = v12;
  v24[6] = v13;
  char v25 = v14;
  uint64_t v15 = type metadata accessor for RCSMessage(0LL);
  RCSServiceSession.groupChat(from:subscriptionInfo:group:)( (uint64_t)v24,  *(void *)(v19 + *(int *)(v15 + 52)),  *(void *)(v19 + *(int *)(v15 + 52) + 8),  *(void *)(v19 + *(int *)(v15 + 52) + 16),  *(void *)(v19 + *(int *)(v15 + 52) + 24),  v20);
  uint64_t v26 = v16;
  uint64_t result = sub_C9E8(v7, v8, v10, v9, v11, v12, v13);
  if (!v3) {
    *id v18 = v26;
  }
  return result;
}

void sub_AB98(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = v3;
}

id sub_ABBC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = RCSServiceSession.instantMessageChat(for:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_ABE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 56) = a1;
  uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_76388
                                                                                              + dword_76388);
  char v14 = (void *)swift_task_alloc(unk_7638C);
  *(void *)(v7 + 64) = v14;
  *char v14 = v7;
  v14[1] = sub_123A0;
  return v16(v7 + 16, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_AC94(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_76394);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_ACEC;
  return RCSServiceSession.generateSafeRender(for:)(a1, a2);
}

uint64_t sub_ACEC(char a1)
{
  uint64_t v4 = *(void *)(*v2 + 16);
  uint64_t v5 = *v2;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = a1 & 1;
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_AD48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  *(void *)(v4 + 16) = a1;
  uint64_t v7 = *a4;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_763B0 + dword_763B0);
  uint64_t v8 = (void *)swift_task_alloc(unk_763B4);
  *(void *)(v4 + 24) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_ADC4;
  return v10(a2, a3, v7);
}

uint64_t sub_ADC4(void *a1)
{
  uint64_t v3 = *(void **)(*v1 + 16);
  uint64_t v7 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 24));
  void *v3 = a1;
  uint64_t v6 = *(uint64_t (**)(void))(v7 + 8);
  id v4 = a1;
  return v6();
}

uint64_t sub_AE24(uint64_t result, _BYTE **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_AE34(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

char *sub_AE68(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_5C28(&qword_76558);
      uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      *((void *)v11 + 2) = v8;
      *((void *)v11 + 3) = 2 * (v13 >> 4);
      char v14 = v11 + 32;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
      char v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[16 * v8 + 32]) {
          memmove(v14, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0LL;
        goto LABEL_24;
      }
    }

    sub_BD88(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_AF74(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_AF94(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  unint64_t v8 = v7;
  uint64_t v9 = sub_B004(v6, v7, a3);
  uint64_t v10 = *a1 + 8;
  uint64_t v12 = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
  uint64_t result = swift_bridgeObjectRelease(v8);
  *a1 = v10;
  return result;
}

uint64_t sub_B004(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_B0D4(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_12224((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_12224((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain();
  }

  sub_12204(v12);
  return v7;
}

uint64_t sub_B0D4(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
            uint64_t result = 0LL;
            *a1 = (uint64_t)__dst;
            return result;
          }

          goto LABEL_17;
        }
      }
    }

LABEL_13:
    uint64_t result = sub_B28C(a5, a6);
    *a1 = v13;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  v14,  1173LL,  0);
    __break(1u);
    return result;
  }

LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  id v18 = *(void *)(v3 + 16);
  uint64_t v19 = __OFSUB__(v18, 1LL);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

    ++v40;
    if (v251 == v245)
    {
      swift_bridgeObjectRelease((RCSServiceSession *)v31, v41, v42, v43, v44, v45, v46, v47);
      return v250;
    }
  }

  uint64_t v52 = v51;
  v249 = v40 - 4;
  unsigned __int8 v53 = [v51 mediaUrl];

  char v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
  unsigned __int8 v56 = v55;

  URL.init(string:)(v54, v56);
  swift_bridgeObjectRelease(v56, v57, v58, v59, v60, v61, v62, v63);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1LL, v24) == 1)
  {
    sub_46F54((uint64_t)v23);
LABEL_31:
    uint64_t v48 = v249;
    goto LABEL_32;
  }

  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v244, v23, v24);
  v253 = 0x5F616964656DLL;
  v254 = 0xE600000000000000LL;
  v252 = v249;
  v64._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  __int128 v65 = (RCSServiceSession *)v64._object;
  String.append(_:)(v64);
  swift_bridgeObjectRelease(v65, v66, v67, v68, v69, v70, v71, v72);
  uint64_t v74 = v253;
  uint64_t v73 = (RCSServiceSession *)v254;
  char v75 = (void *)objc_opt_self(&OBJC_CLASS___IMFileManager);
  swift_bridgeObjectRetain();
  uint64_t result = (RCSServiceSession *)[v75 defaultHFSFileManager];
  if (result)
  {
    NSString v77 = result;
    uint64_t v78 = [v50 media];
    if (v78)
    {
      uint64_t v79 = v78;
      uint64_t v80 = [v78 mediaContentType];

      static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
      uint64_t v82 = v81;

      uint64_t v83 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v82, v84, v85, v86, v87, v88, v89, v90);
    }

    else
    {
      uint64_t v83 = 0LL;
    }

    id v91 = -[RCSServiceSession pathExtensionForMIMEType:](v77, "pathExtensionForMIMEType:", v83);

    if (v91
      && (id v99 = String._bridgeToObjectiveC()(),
          uint64_t v100 = [v99 stringByAppendingPathExtension:v91],
          v99,
          v91,
          v100))
    {
      v239 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
      unint64_t v102 = v101;

      swift_bridgeObjectRelease_n(v73, 2LL);
      uint64_t v73 = v102;
    }

    else
    {
      v239 = v74;
      swift_bridgeObjectRelease(v73, v92, v93, v94, v95, v96, v97, v98);
    }

    uint64_t v103 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
    uint64_t v104 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v103 - 8) + 56LL);
    v104(v243, 1LL, 1LL, v103);
    uint64_t v105 = [v50 media];
    unint64_t v106 = v105;
    if (v105)
    {
      uint64_t v107 = [v105 mediaFileSize];

      unint64_t v106 = [v107 integerValue];
    }

    v108 = [v50 media];
    uint64_t v109 = v108;
    if (v108)
    {
      uint64_t v110 = [v108 mediaContentType];

      uint64_t v109 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v110);
      uint64_t v112 = v111;
    }

    else
    {
      uint64_t v112 = 0xE000000000000000LL;
    }

    uint64_t v113 = v238;
    v114 = v227;
    uint64_t v115 = (*(uint64_t (**)(char *, char *, uint64_t))(v247 + 16))(&v227[*(int *)(v238 + 28)], v244, v248);
    static Date.distantFuture.getter(v115);
    v114[3] = v109;
    v114[4] = v112;
    uint64_t v116 = *(int *)(v113 + 36);
    uint64_t v117 = (char *)v114 + *(int *)(v113 + 40);
    v118 = v239;
    char *v114 = v106;
    v114[1] = v118;
    v114[2] = v73;
    *((_BYTE *)v114 + v116) = 1;
    *(void *)uint64_t v117 = 0LL;
    v117[8] = 1;
    uint64_t v119 = (uint64_t)v235;
    v104((uint64_t)v235, 1LL, 1LL, v103);
    swift_bridgeObjectRetain();
    sub_46F94(v243, v119);
    sub_34FA8((uint64_t)v114, v119 + *(int *)(v237 + 20), type metadata accessor for RCSFile.DispositionInformation);
    uint64_t v120 = v119;
    uint64_t v121 = v241;
    sub_34FA8(v120, v241, type metadata accessor for RCSFile);
    sub_46FDC(v121, v242);
    v122 = v250;
    if ((swift_isUniquelyReferenced_nonNull_native(v250) & 1) == 0) {
      v122 = (RCSServiceSession *)sub_4717C( 0,  *(void *)v122[1].IMDTelephonyServiceSession_opaque + 1LL,  1,  v122,  &qword_776E8,  type metadata accessor for RCSFile);
    }
    uint64_t v21 = v234;
    unint64_t v23 = v233;
    char v31 = v232;
    id v124 = *(void *)v122[1].IMDTelephonyServiceSession_opaque;
    uint64_t v123 = *(void *)v122[1].state;
    v250 = v122;
    char v25 = v247;
    unint64_t v24 = v248;
    if (v124 >= v123 >> 1) {
      v250 = (RCSServiceSession *)sub_4717C( v123 > 1,  v124 + 1,  1,  v250,  &qword_776E8,  type metadata accessor for RCSFile);
    }
    uint64_t v125 = v250;
    *(void *)v250[1].IMDTelephonyServiceSession_opaque = v124 + 1;
    sub_34FA8( v242,  (uint64_t)&v125->IMDTelephonyServiceSession_opaque[((*(unsigned __int8 *)(v236 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v236 + 80))
                                                      + *(void *)(v236 + 72) * v124],
      type metadata accessor for RCSFile);
    swift_bridgeObjectRelease(v73, v126, v127, v128, v129, v130, v131, v132);
    sub_4712C(v241);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v244, v24);
    goto LABEL_31;
  }

  __break(1u);
LABEL_68:
  __break(1u);
  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    char v22 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    char v22 = *v20;
    uint64_t v21 = (-1LL << result) - 1;
  }

  *uint64_t v20 = v22 & v21;
  unint64_t v23 = *(void *)(a2 + 16);
  unint64_t v24 = __OFSUB__(v23, 1LL);
  char v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    char v22 = *v21;
    unint64_t v23 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    unint64_t v23 = *v21;
    char v22 = (-1LL << result) - 1;
  }

  void *v21 = v23 & v22;
  unint64_t v24 = *(void *)(a2 + 16);
  char v25 = __OFSUB__(v24, 1LL);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    char v22 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    char v22 = *v20;
    uint64_t v21 = (-1LL << result) - 1;
  }

  *uint64_t v20 = v22 & v21;
  unint64_t v23 = *(void *)(a2 + 16);
  unint64_t v24 = __OFSUB__(v23, 1LL);
  char v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_B28C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_B320(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_B4F8(0, *(void *)(v2 + 16) + 1LL, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_B4F8(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_B320(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    while (1)
    {
      char v5 = sub_B494(v4, 0LL);
      if (v4 < 0) {
        break;
      }
      uint64_t v6 = v5;
      uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0) {
        goto LABEL_14;
      }
      if (v7 == v4) {
        return v6;
      }
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  v10,  1122LL,  0);
      __break(1u);
LABEL_10:
      uint64_t v4 = String.UTF8View._foreignCount()();
      if (!v4) {
        return &_swiftEmptyArrayStorage;
      }
    }

    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  v10,  71LL,  0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    __break(1u);
  }

  else
  {
    return &_swiftEmptyArrayStorage;
  }

  return result;
}

void *sub_B494(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_5C28(&qword_76578);
  char v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_B4F8(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_5C28(&qword_76578);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  int v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }

_BYTE **sub_B644(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  *uint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t sub_B654@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1 + 40;
  uint64_t v3 = a2 + 40;
  sub_12294(a1, a2);
  return sub_12224(v2, v3);
}

double sub_B684@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_14460(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v10 = *v3;
    uint64_t v13 = *v3;
    uint64_t *v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_14CD0();
      uint64_t v10 = v13;
    }

    sub_12260(*(void *)(v10 + 48) + 40 * v7);
    sub_121F4((_OWORD *)(*(void *)(v10 + 56) + 32 * v7), a2);
    sub_B76C(v7, v10);
    uint64_t v11 = *v3;
    uint64_t *v3 = v10;
    swift_bridgeObjectRelease(v11);
  }

  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }

  return result;
}

unint64_t sub_B76C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_12294(*(void *)(a2 + 48) + 40 * v6, (uint64_t)v28);
        Swift::Int v10 = AnyHashable._rawHashValue(seed:)(*(void *)(a2 + 40));
        double result = sub_12260((uint64_t)v28);
        Swift::Int v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= v11)
          {
LABEL_16:
            uint64_t v14 = *(void *)(a2 + 48);
            unint64_t v15 = v14 + 40 * v3;
            uint64_t v16 = (__int128 *)(v14 + 40 * v6);
            if (v3 != v6 || v15 >= (unint64_t)v16 + 40)
            {
              __int128 v17 = *v16;
              __int128 v18 = v16[1];
              *(void *)(v15 + 32) = *((void *)v16 + 4);
              *(_OWORD *)unint64_t v15 = v17;
              *(_OWORD *)(v15 + 16) = v18;
            }

            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (_OWORD *)(v19 + 32 * v3);
            uint64_t v21 = (_OWORD *)(v19 + 32 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 2))
            {
              __int128 v9 = v21[1];
              *uint64_t v20 = *v21;
              v20[1] = v9;
              int64_t v3 = v6;
            }
          }
        }

        else if (v11 >= v8 || v3 >= v11)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    char v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1LL << v3) - 1;
  }

  else
  {
    char v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1LL << result) - 1;
  }

  *char v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1LL);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

uint64_t sub_B934(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v9 = -1LL << *(_BYTE *)(a1 + 32);
  uint64_t v10 = ~v9;
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v12 = -v9;
  uint64_t v41 = a1;
  uint64_t v42 = a1 + 64;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  else {
    uint64_t v13 = -1LL;
  }
  uint64_t v43 = v10;
  uint64_t v44 = 0LL;
  uint64_t v45 = v13 & v11;
  uint64_t v46 = a2;
  uint64_t v47 = a3;
  swift_bridgeObjectRetain();
  swift_retain(a3);
  sub_BB8C((uint64_t)&v37);
  if (!*((void *)&v38 + 1))
  {
LABEL_19:
    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    sub_122D0(v41);
    return swift_release(v47);
  }

  while (1)
  {
    __int128 v34 = v37;
    __int128 v35 = v38;
    uint64_t v36 = v39;
    sub_121F4(&v40, v33);
    uint64_t v15 = *a5;
    unint64_t v17 = sub_14460((uint64_t)&v34);
    uint64_t v18 = *(void *)(v15 + 16);
    BOOL v19 = (v16 & 1) == 0;
    uint64_t v20 = v18 + v19;
    if (__OFADD__(v18, v19)) {
      break;
    }
    char v21 = v16;
    if (*(void *)(v15 + 24) >= v20)
    {
      if ((a4 & 1) != 0)
      {
        if ((v16 & 1) != 0) {
          goto LABEL_6;
        }
      }

      else
      {
        sub_14CD0();
        if ((v21 & 1) != 0) {
          goto LABEL_6;
        }
      }
    }

    else
    {
      sub_14698(v20, a4 & 1);
      unint64_t v22 = sub_14460((uint64_t)&v34);
      if ((v21 & 1) != (v23 & 1)) {
        goto LABEL_22;
      }
      unint64_t v17 = v22;
      if ((v21 & 1) != 0)
      {
LABEL_6:
        sub_12224((uint64_t)v33, (uint64_t)v32);
        sub_12204(v33);
        sub_12260((uint64_t)&v34);
        uint64_t v14 = (void *)(*(void *)(*a5 + 56) + 32 * v17);
        sub_12204(v14);
        sub_121F4(v32, v14);
        goto LABEL_7;
      }
    }

    uint64_t v24 = (void *)*a5;
    *(void *)(*a5 + 8 * (v17 >> 6) + 64) |= 1LL << v17;
    uint64_t v25 = v24[6] + 40 * v17;
    __int128 v26 = v34;
    __int128 v27 = v35;
    *(void *)(v25 + 32) = v36;
    *(_OWORD *)uint64_t v25 = v26;
    *(_OWORD *)(v25 + 16) = v27;
    sub_121F4(v33, (_OWORD *)(v24[7] + 32 * v17));
    uint64_t v28 = v24[2];
    BOOL v29 = __OFADD__(v28, 1LL);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_21;
    }
    v24[2] = v30;
LABEL_7:
    sub_BB8C((uint64_t)&v37);
    a4 = 1;
    if (!*((void *)&v38 + 1)) {
      goto LABEL_19;
    }
  }

  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

uint64_t sub_BB8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    sub_12294(*(void *)(v3 + 48) + 40 * v10, (uint64_t)v25);
    sub_12224(*(void *)(v3 + 56) + 32 * v10, (uint64_t)&v25[2] + 8);
    goto LABEL_23;
  }

  int64_t v11 = v5 + 1;
  if (__OFADD__(v5, 1LL))
  {
    __break(1u);
    return result;
  }

  int64_t v12 = (unint64_t)(v6 + 64) >> 6;
  if (v11 < v12)
  {
    unint64_t v13 = *(void *)(v4 + 8 * v11);
    if (v13)
    {
LABEL_7:
      uint64_t v9 = (v13 - 1) & v13;
      unint64_t v10 = __clz(__rbit64(v13)) + (v11 << 6);
      int64_t v7 = v11;
      goto LABEL_3;
    }

    int64_t v14 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v12)
    {
      unint64_t v13 = *(void *)(v4 + 8 * v14);
      if (v13)
      {
LABEL_10:
        int64_t v11 = v14;
        goto LABEL_7;
      }

      int64_t v7 = v5 + 2;
      if (v5 + 3 < v12)
      {
        unint64_t v13 = *(void *)(v4 + 8 * (v5 + 3));
        if (v13)
        {
          int64_t v11 = v5 + 3;
          goto LABEL_7;
        }

        int64_t v14 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v12)
        {
          unint64_t v13 = *(void *)(v4 + 8 * v14);
          if (v13) {
            goto LABEL_10;
          }
          int64_t v11 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v12)
          {
            unint64_t v13 = *(void *)(v4 + 8 * v11);
            if (v13) {
              goto LABEL_7;
            }
            int64_t v7 = v12 - 1;
            int64_t v15 = v5 + 6;
            while (v12 != v15)
            {
              unint64_t v13 = *(void *)(v4 + 8 * v15++);
              if (v13)
              {
                int64_t v11 = v15 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }

  uint64_t v9 = 0LL;
  uint64_t v26 = 0LL;
  memset(v25, 0, sizeof(v25));
LABEL_23:
  *uint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  char v16 = (void (*)(_OWORD *))v1[5];
  uint64_t result = sub_122D8((uint64_t)v25, (uint64_t)&v20, &qword_76590);
  if (*((void *)&v21 + 1))
  {
    v18[2] = v22;
    v18[3] = v23;
    uint64_t v19 = v24;
    v18[0] = v20;
    v18[1] = v21;
    v16(v18);
    return sub_1231C((uint64_t)v18, &qword_76598);
  }

  else
  {
    *(void *)(a1 + 64) = 0LL;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }

  return result;
}

uint64_t sub_BD88(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_BE78(uint64_t a1, uint64_t a2, uint64_t a3, id a4)
{
  id v8 = (id)objc_opt_self(&OBJC_CLASS___IMDFileTransferCenter);
  id v9 = [v8 sharedInstance];
  if (!v9)
  {
    __break(1u);
LABEL_10:

    __break(1u);
    goto LABEL_11;
  }

  unint64_t v10 = v9;
  NSString v11 = String._bridgeToObjectiveC()();
  if ((a3 & 0x8000000000000000LL) == 0)
  {
    int64_t v12 = v11;
    a4 =  [v10 guidForNewIncomingTransferWithFilename:v11 isDirectory:0 totalBytes:a3 hfsType:0 hfsCreator:0 hfsFlags:0];

    if (!a4) {
      goto LABEL_7;
    }
    id v13 = [v8 sharedInstance];
    if (v13)
    {
      int64_t v14 = v13;
      id v8 = [v13 transferForGUID:a4];

      if (v8)
      {
        URL._bridgeToObjectiveC()(v15);
        unint64_t v17 = v16;
        [v8 _setLocalURL:v16];

        return (uint64_t)v8;
      }

LABEL_7:
      unint64_t v18 = sub_12358();
      swift_allocError(&type metadata for RCSServiceSession.TransferCreationError, v18, 0LL, 0LL);
      void *v19 = a1;
      v19[1] = a2;
      v19[2] = a3;
      uint64_t v20 = swift_bridgeObjectRetain();
      swift_willThrow(v20);
      return (uint64_t)v8;
    }

    goto LABEL_10;
  }

    *uint64_t v4 = *v6;
    goto LABEL_8;
  }

  if (!v5)
  {
    swift_release(*(void *)(a1 + 24));
    goto LABEL_7;
  }

  int64_t v7 = *(void *)(a2 + 24);
  id v8 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v7;
  swift_retain(v7);
  swift_release(v8);
LABEL_8:
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

    *uint64_t v4 = *v6;
    goto LABEL_8;
  }

  if (!v5)
  {
    swift_release(*(void *)(a1 + 24));
    goto LABEL_7;
  }

  int64_t v7 = *(void *)(a2 + 24);
  id v8 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v7;
  swift_release(v8);
LABEL_8:
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

          uint64_t v69 = (v16 - 1) & v16;
        }
      }

      uint64_t v24 = i + 5;
      if (i + 5 < v57)
      {
        __int128 v22 = *(void *)(v58 + 8 * v24);
        if (v22)
        {
          __int128 v23 = i + 5;
          goto LABEL_23;
        }

        while (1)
        {
          __int128 v23 = v24 + 1;
          if (__OFADD__(v24, 1LL)) {
            goto LABEL_35;
          }
          if (v23 >= v57) {
            break;
          }
          __int128 v22 = *(void *)(v58 + 8 * v23);
          ++v24;
          if (v22) {
            goto LABEL_23;
          }
        }
      }
    }

LABEL_11:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
  __break(1u);
  return result;
}

    v20[(v14 >> 6) + 8] |= 1LL << v14;
    uint64_t v26 = (uint64_t *)(v20[6] + 16 * v14);
    *uint64_t v26 = a3;
    v26[1] = a4;
    __int128 v27 = (void *)(v20[7] + 16 * v14);
    *__int128 v27 = a1;
    v27[1] = a2;
    uint64_t v28 = v20[2];
    BOOL v29 = __OFADD__(v28, 1LL);
    uint64_t v30 = v28 + 1;
    if (!v29)
    {
      v20[2] = v30;
      return swift_bridgeObjectRetain();
    }

    goto LABEL_14;
  }

  sub_149AC(v17, a5 & 1);
  uint64_t v24 = sub_14490(a3, a4);
  if ((v18 & 1) == (v25 & 1))
  {
    int64_t v14 = v24;
    uint64_t v20 = (void *)*v6;
    if ((v18 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    __break(1u);
LABEL_12:
    __break(1u);
    return;
  }

  uint64_t v20 = Logger.rcs.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v20, v12);
  __int128 v21 = swift_bridgeObjectRetain_n(a3, 2LL);
  __int128 v22 = (os_log_s *)Logger.logObject.getter(v21);
  __int128 v23 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v25 = swift_slowAlloc(32LL, -1LL);
    BOOL v29 = v25;
    *(_DWORD *)uint64_t v24 = 136315138;
    __int128 v27 = v24 + 4;
    swift_bridgeObjectRetain();
    uint64_t v28 = sub_B004(a2, a3, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl( &dword_0,  v22,  v23,  "Received request to send read receipt to chat %s but could not find chat",  v24,  0xCu);
    swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

void _sSo17RCSServiceSessionC3RCSE4mark_15asThumbnailModeySo14IMFileTransferC_So0hifG0VtF_0( id a1, uint64_t a2)
{
  if (a2)
  {
    id v4 = [a1 userInfo];
    if (v4)
    {
      unint64_t v5 = v4;
      uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v4,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

      uint64_t v7 = sub_5C28(&qword_76570);
      uint64_t inited = swift_initStackObject(v7, v22);
      *(_OWORD *)(inited + 16) = xmmword_5F530;
      v20[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(IMFileTransferUserInfoThumbnailModeKey);
      v20[1] = v9;
      AnyHashable.init<A>(_:)( (void *)(inited + 32),  v20,  &type metadata for String,  &protocol witness table for String);
      *(void *)(inited + 96) = &type metadata for Int;
      *(void *)(inited + 72) = a2;
      unint64_t v10 = sub_123A4(inited);
      uint64_t v11 = sub_77F4(v10, v6);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v11);
      [a1 setUserInfo:isa];

      return;
    }

    __break(1u);
    goto LABEL_11;
  }

  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMFileTransferUserInfoThumbnailModeKey);
  uint64_t v15 = v14;
  *(void *)&v21[0] = v13;
  *((void *)&v21[0] + 1) = v14;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)(v20, v21, &type metadata for String, &protocol witness table for String);
  id v16 = [a1 userInfo];
  if (!v16)
  {
LABEL_11:
    __break(1u);
    return;
  }

  unint64_t v17 = v16;
  uint64_t v18 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v16,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  swift_bridgeObjectRelease(v15);

  sub_B684((uint64_t)v20, v21);
  sub_12260((uint64_t)v20);
  sub_1231C((uint64_t)v21, &qword_76588);
  if (v18)
  {
    v19.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v18);
  }

  else
  {
    v19.super.Class isa = 0LL;
  }

  objc_msgSend(a1, "setUserInfo:", v19.super.isa, v18);
}

void _sSo17RCSServiceSessionC3RCSE14acceptTransferyySo06IMFileE0CF_0(void *a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_5C28(&qword_763A0);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v20 - v10;
  id v12 = [(id)objc_opt_self(IMDFileTransferCenter) sharedInstance];
  if (v12)
  {
    uint64_t v13 = v12;
    id v14 = [a1 guid];
    id v15 = [a1 localURL];
    if (v15)
    {
      id v16 = v15;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v15);

      uint64_t v17 = 0LL;
    }

    else
    {
      uint64_t v17 = 1LL;
    }

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v9, v17, 1LL, v2);
    sub_122D8((uint64_t)v9, (uint64_t)v11, &qword_763A0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1LL, v2))
    {
      sub_1231C((uint64_t)v11, &qword_763A0);
      NSString v18 = 0LL;
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v11, v2);
      sub_1231C((uint64_t)v11, &qword_763A0);
      object = URL.path(percentEncoded:)(1)._object;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      NSString v18 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(object);
    }

    [v13 acceptTransfer:v14 path:v18];
  }

  else
  {
    __break(1u);
  }

uint64_t sub_C4D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[18] = a3;
  v4[19] = a4;
  v4[16] = a1;
  v4[17] = a2;
  uint64_t v5 = type metadata accessor for MainActor(0LL);
  v4[20] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[21] = v6;
  v4[22] = v7;
  return swift_task_switch(sub_C548, v6, v7);
}

uint64_t sub_C548()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 2;
  id v3 = [(id)objc_opt_self(IMTransferAgentClient) sharedInstance];
  v1[23] = v3;
  NSString v4 = String._bridgeToObjectiveC()();
  v1[24] = v4;
  URL._bridgeToObjectiveC()(v5);
  uint64_t v7 = v6;
  v1[25] = v6;
  URL._bridgeToObjectiveC()(v8);
  uint64_t v10 = v9;
  v1[26] = v9;
  v1[7] = v1 + 15;
  v1[2] = v1;
  v1[3] = sub_C660;
  uint64_t v11 = swift_continuation_init(v2, 0LL);
  v1[10] = _NSConcreteStackBlock;
  v1 += 10;
  v1[1] = 0x40000000LL;
  v1[2] = sub_7948;
  v1[3] = &unk_71478;
  v1[4] = v11;
  [v3 downloadRCSTransferOnSimID:v4 transferURL:v7 destURL:v10 completion:v1];
  return swift_continuation_await(v2);
}

uint64_t sub_C660()
{
  return swift_task_switch(sub_C6A4, *(void *)(*(void *)v0 + 168LL), *(void *)(*(void *)v0 + 176LL));
}

uint64_t sub_C6A4()
{
  uint64_t v2 = *(void **)(v0 + 200);
  uint64_t v1 = *(void **)(v0 + 208);
  NSString v4 = *(void **)(v0 + 184);
  id v3 = *(void **)(v0 + 192);
  swift_release(*(void *)(v0 + 160));
  uint64_t v5 = *(void *)(v0 + 120);

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
}

id _sSo17RCSServiceSessionC3RCSE19maxAutoDownloadSize3forAEs5Int64V04CoreC07RCSFileV_SStF_0(uint64_t a1)
{
  uint64_t v2 = sub_5C28(&qword_76580);
  __chkstk_darwin(v2);
  NSString v4 = &v23[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = type metadata accessor for UTType(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = &v23[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v7);
  uint64_t v11 = &v23[-v10];
  uint64_t v12 = a1 + *(int *)(type metadata accessor for RCSFile(0LL) + 20);
  uint64_t v13 = *(void *)(v12 + 24);
  uint64_t v14 = *(void *)(v12 + 32);
  uint64_t v15 = swift_bridgeObjectRetain();
  static UTType.data.getter(v15);
  UTType.init(mimeType:conformingTo:)(v13, v14, v9);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
  {
    sub_1231C((uint64_t)v4, &qword_76580);
    unint64_t v16 = 0xE700000000000000LL;
  }

  else
  {
    uint64_t v17 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(v11, v4, v5);
    UTType.identifier.getter(v17);
    unint64_t v16 = v18;
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v5);
  }

  char v24 = 0;
  NSDictionary v19 = (void *)objc_opt_self(&OBJC_CLASS___IMDAttachmentUtilities);
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16);
  id v21 = [v19 largeFileSizeFor:v20 allowedLargerRepresentation:&v24];

  return v21;
}

uint64_t type metadata accessor for RCSServiceSession.ChatResolutionError(uint64_t a1)
{
  uint64_t result = qword_76518;
  if (!qword_76518) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RCSServiceSession.ChatResolutionError);
  }
  return result;
}

uint64_t sub_C934(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_C978(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_C9B4(void *a1)
{
  return a1;
}

uint64_t sub_C9E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a5);
    return swift_bridgeObjectRelease(a7);
  }

  return result;
}

void *sub_CA38(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

void *sub_CA5C(void *a1)
{
  return a1;
}

uint64_t sub_CA90( uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_CACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a2)
  {
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a5);
  }

  return result;
}

uint64_t sub_CB1C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_CB58(uint64_t a1)
{
  return a1;
}

uint64_t sub_CB8C(uint64_t a1)
{
  return a1;
}

void *sub_CBC0(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    id v21 = _swiftEmptyArrayStorage;
    sub_1EC9C(0, v1, 0);
    uint64_t v17 = kFZChatParticipantStatusKey;
    uint64_t v4 = kFZPersonID;
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v5 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v6 = *(v5 - 1);
      uint64_t v7 = *v5;
      uint64_t v8 = sub_5C28(&qword_76570);
      uint64_t inited = swift_initStackObject(v8, v20);
      *(_OWORD *)(inited + 16) = xmmword_5F540;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      uint64_t v19 = v10;
      swift_bridgeObjectRetain();
      AnyHashable.init<A>(_:)( (void *)(inited + 32),  &v18,  &type metadata for String,  &protocol witness table for String);
      type metadata accessor for FZChatMemberStatus(0LL);
      *(void *)(inited + 96) = v11;
      *(_DWORD *)(inited + 72) = 2;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
      uint64_t v19 = v12;
      AnyHashable.init<A>(_:)( (void *)(inited + 104),  &v18,  &type metadata for String,  &protocol witness table for String);
      *(void *)(inited + 168) = &type metadata for String;
      *(void *)(inited + 144) = v6;
      *(void *)(inited + 152) = v7;
      unint64_t v13 = sub_123A4(inited);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_1EC9C(0, v2[2] + 1LL, 1);
        uint64_t v2 = v21;
      }

      unint64_t v15 = v2[2];
      unint64_t v14 = v2[3];
      if (v15 >= v14 >> 1)
      {
        sub_1EC9C(v14 > 1, v15 + 1, 1);
        uint64_t v2 = v21;
      }

      v5 += 2;
      v2[2] = v15 + 1;
      v2[v15 + 4] = v13;
      --v1;
    }

    while (v1);
  }

  return v2;
}

unint64_t sub_CD80()
{
  unint64_t result = qword_76378;
  if (!qword_76378)
  {
    uint64_t v1 = type metadata accessor for RCSServiceSession.ChatResolutionError(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for RCSServiceSession.ChatResolutionError, v1);
    atomic_store(result, (unint64_t *)&qword_76378);
  }

  return result;
}

uint64_t sub_CDC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[25] = a6;
  v7[26] = a7;
  v7[23] = a4;
  v7[24] = a5;
  v7[21] = a2;
  v7[22] = a3;
  v7[20] = a1;
  uint64_t v8 = type metadata accessor for MainActor(0LL);
  v7[27] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  v7[28] = v9;
  v7[29] = v10;
  return swift_task_switch(sub_CE40, v9, v10);
}

uint64_t sub_CE40()
{
  id v1 = [(id)objc_opt_self(IMTransferServicesController) sharedInstance];
  *(void *)(v0 + 240) = v1;
  if (v1)
  {
    NSString v2 = *(NSString *)(v0 + 200);
    NSString v3 = String._bridgeToObjectiveC()();
    *(void *)(v0 + 248) = v3;
    if (v2) {
      NSString v2 = String._bridgeToObjectiveC()();
    }
    uint64_t v4 = v0 + 16;
    *(void *)(v0 + 256) = v2;
    uint64_t v5 = *(void *)(v0 + 208);
    uint64_t v6 = *(void *)(v0 + 168);
    *(void *)(v0 + 56) = v0 + 80;
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_CF8C;
    uint64_t v7 = swift_continuation_init(v0 + 16, 1LL);
    *(void *)(v0 + 120) = _NSConcreteStackBlock;
    uint64_t v8 = (void *)(v0 + 120);
    v8[1] = 0x40000000LL;
    v8[2] = sub_A234;
    v8[3] = &unk_71460;
    v8[4] = v7;
    [v1 generatePreviewForTransfer:v6 attachmentPath:v3 balloonBundleID:v2 senderContext:v5 completionBlock:v8];
    return swift_continuation_await(v4);
  }

  else
  {
    swift_release(*(void *)(v0 + 216));
    uint64_t v10 = *(void *)(v0 + 160);
    *(void *)uint64_t v10 = 0LL;
    *(void *)(v10 + 8) = 0LL;
    *(_BYTE *)(v10 + 16) = 0;
    *(void *)(v10 + 24) = 0LL;
    *(void *)(v10 + 32) = 0LL;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_CF8C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 264) = v2;
  if (v2) {
    NSString v3 = sub_D064;
  }
  else {
    NSString v3 = sub_CFE8;
  }
  return swift_task_switch(v3, *(void *)(v1 + 224), *(void *)(v1 + 232));
}

uint64_t sub_CFE8()
{
  uint64_t v2 = *(void **)(v0 + 248);
  uint64_t v1 = *(void **)(v0 + 256);
  uint64_t v3 = *(void *)(v0 + 216);

  swift_release(v3);
  LOBYTE(v3) = *(_BYTE *)(v0 + 96);
  __int128 v6 = *(_OWORD *)(v0 + 80);
  __int128 v7 = *(_OWORD *)(v0 + 104);

  uint64_t v4 = *(void *)(v0 + 160);
  *(_OWORD *)uint64_t v4 = v6;
  *(_BYTE *)(v4 + 16) = v3;
  *(_OWORD *)(v4 + 24) = v7;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_D064()
{
  uint64_t v1 = *(void **)(v0 + 256);
  uint64_t v3 = *(void **)(v0 + 240);
  uint64_t v2 = *(void **)(v0 + 248);
  uint64_t v4 = swift_release(*(void *)(v0 + 216));
  swift_willThrow(v4);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

id _sSo17RCSServiceSessionC3RCSE13senderContext3forSo08IMSenderE0C04CoreC010RCSMessageV_tF_0(uint64_t a1)
{
  if ((v15[58] & 1) != 0)
  {
    uint64_t v1 = v14[1];
    uint64_t v2 = v14[3];
    uint64_t v3 = v14[4];
    uint64_t v4 = v14[6];
    id v5 = [(id)objc_opt_self(IMDChatRegistry) sharedInstance];
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v4);
    id v7 = [v5 hasKnownSenderChatWithChatIdentifier:v6];

    static String._unconditionallyBridgeFromObjectiveC(_:)(IMServiceNameRCS);
    uint64_t v9 = v8;
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v9);
    id v11 =  [(id)objc_opt_self(IMSenderContext) contextWithKnownSender:v7 serviceName:v10];

    sub_CB58((uint64_t)v15);
    return v11;
  }

  else
  {
    id v13 =  [(id)objc_opt_self(IMSenderContext) fromMeContextWithServiceName:IMServiceNameRCS];
    sub_CB8C((uint64_t)v14);
    return v13;
  }

BOOL _sSo17RCSServiceSessionC3RCSE15isSenderBlocked3forSb04CoreC010RCSMessageV_tF_0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  NSString v6 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v70 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v70 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  unint64_t v15 = (char *)&v70 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v70 - v16;
  sub_CB1C(a1, (uint64_t)v76);
  if (v77[58] == 1)
  {
    uint64_t v72 = v2;
    uint64_t v19 = v76[1];
    uint64_t v18 = v76[2];
    unint64_t v20 = v76[3];
    uint64_t v21 = v76[4];
    uint64_t v22 = v76[6];
    sub_CB58((uint64_t)v77);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v22);
    BOOL v75 = 0;
    uint64_t v71 = v18;
    NSString v23 = String._bridgeToObjectiveC()();
    NSString v24 = String._bridgeToObjectiveC()();
    uint64_t v25 = (void *)IMPhoneNumberRefCopyForPhoneNumber(v23, v24, 0LL);

    if (v25)
    {
      uint64_t v26 = CMFItemCreateWithPhoneNumber(v25);
      if (v26)
      {
        uint64_t v27 = v26;
        uint64_t v28 = swift_unknownObjectRetain(v26);
        int IsItemBlocked = CMFBlockListIsItemBlocked(v28);
        swift_unknownObjectRelease_n(v27, 2LL);

        BOOL v75 = IsItemBlocked != 0;
        uint64_t v30 = v72;
        if (IsItemBlocked) {
          goto LABEL_23;
        }
LABEL_17:
        NSString v49 = String._bridgeToObjectiveC()();
        uint64_t v50 = CMFItemCreateWithEmailAddress();
        if (v50)
        {
          uint64_t v51 = v50;
          uint64_t v52 = swift_unknownObjectRetain(v50);
          int v53 = CMFBlockListIsItemBlocked(v52);
          swift_unknownObjectRelease_n(v51, 2LL);

          BOOL v75 = v53 != 0;
        }

        else
        {
          uint64_t v54 = Logger.rcs.unsafeMutableAddressor();
          uint64_t v55 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v54, v30);
          unsigned __int8 v56 = (os_log_s *)Logger.logObject.getter(v55);
          os_log_type_t v57 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v56, v57))
          {
            uint64_t v58 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v58 = 0;
            _os_log_impl(&dword_0, v56, v57, "Couldn't create email item", v58, 2u);
            char v59 = v58;
            uint64_t v30 = v72;
            swift_slowDealloc(v59, -1LL, -1LL);
            uint64_t v60 = (os_log_s *)v49;
          }

          else
          {
            uint64_t v60 = v56;
            unsigned __int8 v56 = (os_log_s *)v49;
          }

          (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v30);
        }

LABEL_23:
        uint64_t v61 = Logger.rcs.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v9, v61, v30);
        BOOL v62 = v75;
        uint64_t v63 = swift_bridgeObjectRetain();
        uint64_t v64 = (os_log_s *)Logger.logObject.getter(v63);
        os_log_type_t v65 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v64, v65))
        {
          uint64_t v66 = swift_slowAlloc(22LL, -1LL);
          uint64_t v67 = swift_slowAlloc(64LL, -1LL);
          v76[0] = v67;
          *(_DWORD *)uint64_t v66 = 136315394;
          swift_bridgeObjectRetain();
          uint64_t v73 = sub_B004(v71, v20, v76);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
          swift_bridgeObjectRelease_n(v20, 3LL);
          *(_WORD *)(v66 + 12) = 2080;
          if (v62) {
            uint64_t v68 = 0LL;
          }
          else {
            uint64_t v68 = 7630702LL;
          }
          if (v62) {
            unint64_t v69 = 0xE000000000000000LL;
          }
          else {
            unint64_t v69 = 0xE300000000000000LL;
          }
          uint64_t v73 = sub_B004(v68, v69, v76);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74);
          swift_bridgeObjectRelease(v69);
          _os_log_impl(&dword_0, v64, v65, "Message for sender handle: %s is %s blocked.", (uint8_t *)v66, 0x16u);
          swift_arrayDestroy(v67, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v67, -1LL, -1LL);
          swift_slowDealloc(v66, -1LL, -1LL);

          (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v72);
        }

        else
        {

          swift_bridgeObjectRelease_n(v20, 2LL);
          (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v30);
        }

        swift_beginAccess(&v75, v76, 0LL, 0LL);
        return v75;
      }

      uint64_t v43 = Logger.rcs.unsafeMutableAddressor();
      uint64_t v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v17, v43, v72);
      uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v47 = 0;
        _os_log_impl(&dword_0, v45, v46, "Couldn't create phone item.", v47, 2u);
        swift_slowDealloc(v47, -1LL, -1LL);
        uint64_t v48 = (os_log_s *)v25;
      }

      else
      {
        uint64_t v48 = v45;
        uint64_t v45 = (os_log_s *)v25;
      }

      uint64_t v30 = v72;

      (*(void (**)(char *, uint64_t))(v3 + 8))(v17, v30);
    }

    else
    {
      uint64_t v37 = Logger.rcs.unsafeMutableAddressor();
      uint64_t v30 = v72;
      uint64_t v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v15, v37, v72);
      uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
      uint64_t v40 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v39, (os_log_type_t)v40))
      {
        uint64_t v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v41 = 0;
        _os_log_impl(&dword_0, v39, (os_log_type_t)v40, "Couldn't create phone number.", v41, 2u);
        uint64_t v42 = v41;
        uint64_t v30 = v72;
        swift_slowDealloc(v42, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v15, v30);
    }

    if (v75) {
      goto LABEL_23;
    }
    goto LABEL_17;
  }

  sub_CB8C((uint64_t)v76);
  uint64_t v31 = Logger.rcs.unsafeMutableAddressor();
  uint64_t v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v31, v2);
  unint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
  os_log_type_t v34 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v33, v34))
  {
    __int128 v35 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)__int128 v35 = 0;
    _os_log_impl(&dword_0, v33, v34, "Cannot determine whether sender is blocked because the sender is nil.", v35, 2u);
    swift_slowDealloc(v35, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return 0LL;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
LABEL_24:
  uint64_t v17 = 2;
  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v17,  1092LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_D8A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a1;
  v3[8] = a3;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  v3[9] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[10] = v5;
  v3[11] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for MainActor(0LL);
  v3[12] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_D938, v7, v8);
}

void sub_D938()
{
  uint64_t v2 = *(void **)(v0 + 64);
  swift_release(*(void *)(v0 + 96));
  id v3 = [v2 participants];
  if (!v3) {
    goto LABEL_58;
  }
  uint64_t v4 = v3;
  uint64_t v5 = sub_121B8(0LL, &qword_76550, &OBJC_CLASS___IMDHandle_ptr);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  id v88 = (void *)v0;
  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0) {
      uint64_t v20 = v6;
    }
    else {
      uint64_t v20 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v20);
    if (v7) {
      goto LABEL_4;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFF8LL));
    swift_bridgeObjectRetain();
    if (v7)
    {
LABEL_4:
      if (v7 >= 1)
      {
        uint64_t v8 = 0LL;
        uint64_t v9 = (char *)_swiftEmptyArrayStorage;
        do
        {
          if ((v6 & 0xC000000000000001LL) != 0) {
            id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v6);
          }
          else {
            id v10 = *(id *)(v6 + 8 * v8 + 32);
          }
          uint64_t v11 = v10;
          id v12 = [v10 ID];
          if (v12)
          {
            uint64_t v13 = v12;
            uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
            uint64_t v16 = v15;

            if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0) {
              uint64_t v9 = sub_AE68(0LL, *((void *)v9 + 2) + 1LL, 1, v9);
            }
            unint64_t v18 = *((void *)v9 + 2);
            unint64_t v17 = *((void *)v9 + 3);
            if (v18 >= v17 >> 1) {
              uint64_t v9 = sub_AE68((char *)(v17 > 1), v18 + 1, 1, v9);
            }
            *((void *)v9 + 2) = v18 + 1;
            uint64_t v19 = &v9[16 * v18];
            *((void *)v19 + 4) = v14;
            *((void *)v19 + 5) = v16;
          }

          else
          {
          }

          ++v8;
        }

        while (v7 != v8);
        goto LABEL_22;
      }

      __break(1u);
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
  }

  uint64_t v9 = (char *)_swiftEmptyArrayStorage;
LABEL_22:
  uint64_t v21 = *(void **)(v0 + 64);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease_n(v6, 2LL);
  id v22 = [v21 lastAddressedLocalHandle];
  NSString v23 = v22;
  if (v22)
  {
    uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    unint64_t v25 = v24;
  }

  else
  {
    uint64_t v86 = 0LL;
    unint64_t v25 = 0LL;
  }

  id v26 = [*(id *)(v0 + 64) lastAddressedSIMID];
  if (v26)
  {
    uint64_t v27 = v26;
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    unint64_t v30 = v29;
  }

  else
  {
    uint64_t v28 = 0LL;
    unint64_t v30 = 0xE000000000000000LL;
  }

  uint64_t v31 = (void *)objc_opt_self(&OBJC_CLASS___IMCTSMSUtilities);
  NSString v32 = String._bridgeToObjectiveC()();
  id v33 = [v31 IMMMSEmailAddressToMatchForPhoneNumber:v23 simID:v32];

  if (v33)
  {
    uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    unint64_t v35 = v34;
  }

  else
  {
    uint64_t v85 = 0LL;
    unint64_t v35 = 0LL;
  }

  NSString v36 = String._bridgeToObjectiveC()();
  id v37 = [v31 IMCountryCodeForPhoneNumber:v23 simID:v36];

  uint64_t v87 = v28;
  if (v37)
  {
    uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    unint64_t v39 = v38;
  }

  else
  {
    uint64_t v84 = 0LL;
    unint64_t v39 = 0LL;
  }

  uint64_t v1 = (void **)(v0 + 56);
  uint64_t v40 = *(void **)(v0 + 56);
  uint64_t v41 = v88[10];
  uint64_t v42 = v88[11];
  uint64_t v43 = v88[9];
  uint64_t v44 = Logger.rcs.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v42, v44, v43);
  swift_bridgeObjectRetain();
  id v45 = v40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v46 = swift_bridgeObjectRetain();
  uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
  os_log_type_t v48 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v47, v48))
  {
    uint64_t v64 = v47;
    uint64_t v66 = v88[10];
    uint64_t v65 = v88[11];
    uint64_t v67 = v88[9];
    unint64_t v68 = v39;
    unint64_t v69 = (void *)v88[7];

    swift_bridgeObjectRelease_n(v25, 2LL);
    swift_bridgeObjectRelease_n(v30, 2LL);
    swift_bridgeObjectRelease_n(v35, 2LL);
    swift_bridgeObjectRelease_n(v68, 2LL);

    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v65, v67);
    int v53 = v88;
LABEL_56:
    swift_task_dealloc(v53[11]);
    ((void (*)(void))v53[1])(v53[8]);
    return;
  }

  os_log_type_t v78 = v48;
  log = v47;
  unint64_t v80 = v39;
  unint64_t v81 = v35;
  unint64_t v82 = v30;
  unint64_t v83 = v25;
  NSString v49 = *v1;
  uint64_t v50 = swift_slowAlloc(52LL, -1LL);
  uint64_t v77 = swift_slowAlloc(160LL, -1LL);
  uint64_t v89 = v77;
  *(_DWORD *)uint64_t v50 = 136316162;
  id v51 = [v49 guid];
  if (v51)
  {
    uint64_t v52 = v51;
    int v53 = v88;
    uint64_t v71 = v88 + 4;
    uint64_t v72 = v88 + 5;
    uint64_t v73 = v88 + 6;
    uint64_t v74 = v88[10];
    uint64_t v75 = v88[9];
    uint64_t v76 = v88[11];
    uint64_t v54 = (void *)v88[7];
    uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
    unint64_t v57 = v56;

    v88[2] = sub_B004(v55, v57, &v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v53 + 2, v53 + 3);
    swift_bridgeObjectRelease(v57);

    *(_WORD *)(v50 + 12) = 2080;
    if (v83) {
      uint64_t v58 = v86;
    }
    else {
      uint64_t v58 = 7104878LL;
    }
    if (v83) {
      unint64_t v59 = v83;
    }
    else {
      unint64_t v59 = 0xE300000000000000LL;
    }
    swift_bridgeObjectRetain();
    v88[3] = sub_B004(v58, v59, &v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v88 + 3, v71);
    swift_bridgeObjectRelease(v59);
    swift_bridgeObjectRelease_n(v83, 2LL);
    *(_WORD *)(v50 + 22) = 2080;
    swift_bridgeObjectRetain();
    v88[4] = sub_B004(v87, v30, &v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v71, v72);
    swift_bridgeObjectRelease_n(v30, 3LL);
    *(_WORD *)(v50 + 32) = 2080;
    if (v81) {
      uint64_t v60 = v85;
    }
    else {
      uint64_t v60 = 7104878LL;
    }
    if (v81) {
      unint64_t v61 = v81;
    }
    else {
      unint64_t v61 = 0xE300000000000000LL;
    }
    swift_bridgeObjectRetain();
    v88[5] = sub_B004(v60, v61, &v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v72, v73);
    swift_bridgeObjectRelease(v61);
    swift_bridgeObjectRelease_n(v81, 2LL);
    *(_WORD *)(v50 + 42) = 2080;
    if (v80) {
      uint64_t v62 = v84;
    }
    else {
      uint64_t v62 = 7104878LL;
    }
    if (v80) {
      unint64_t v63 = v80;
    }
    else {
      unint64_t v63 = 0xE300000000000000LL;
    }
    swift_bridgeObjectRetain();
    v88[6] = sub_B004(v62, v63, &v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v73, v1);
    swift_bridgeObjectRelease(v63);
    swift_bridgeObjectRelease_n(v80, 2LL);
    _os_log_impl(&dword_0, log, v78, "Categorizing %s simNumber %s simID %s myEmail %s cc %s", (uint8_t *)v50, 0x34u);
    swift_arrayDestroy(v77, 5LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v77, -1LL, -1LL);
    swift_slowDealloc(v50, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v76, v75);
    goto LABEL_56;
  }

LABEL_59:
  uint64_t v70 = *v1;
  swift_bridgeObjectRelease(v80);
  swift_bridgeObjectRelease(v81);
  swift_bridgeObjectRelease(v82);
  swift_bridgeObjectRelease(v83);

  __break(1u);
}

uint64_t sub_E08C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_5C28(&qword_76228);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t _s21TransferCreationErrorOwxx(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

void *_s21TransferCreationErrorOwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain(v3);
  return a1;
}

void *_s21TransferCreationErrorOwca(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

__n128 _s21TransferCreationErrorOwtk(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *_s21TransferCreationErrorOwta(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

uint64_t _s21TransferCreationErrorOwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s21TransferCreationErrorOwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

Swift::Bool __swiftcall RCSServiceSession.replicationRequiredForMultipleMessageParts()()
{
  return 0;
}

ValueMetadata *type metadata accessor for RCSServiceSession.TransferCreationError()
{
  return &type metadata for RCSServiceSession.TransferCreationError;
}

uint64_t _s19ChatResolutionErrorOwCP(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *(void *)a1 = *a2;
    a1 = v14 + ((v5 + 16LL) & ~(unint64_t)v5);
    swift_retain(v14);
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      char v15 = *((_BYTE *)a2 + 122);
      if ((v15 & 1) != 0)
      {
        uint64_t v16 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v16;
        uint64_t v17 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v17;
        uint64_t v18 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v18;
        *(void *)(a1 + 48) = a2[6];
        *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
        char v19 = *((_BYTE *)a2 + 121);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((v19 & 1) != 0)
        {
          __int128 v20 = *(_OWORD *)(a2 + 11);
          *(_OWORD *)(a1 + 88) = v20;
          (**(void (***)(uint64_t, uint64_t))(v20 - 8))(a1 + 64, (uint64_t)(a2 + 8));
        }

        else
        {
          uint64_t v46 = a2[9];
          *(void *)(a1 + 64) = a2[8];
          *(void *)(a1 + 72) = v46;
          uint64_t v47 = a2[11];
          *(void *)(a1 + 80) = a2[10];
          *(void *)(a1 + 88) = v47;
          uint64_t v48 = a2[13];
          *(void *)(a1 + 96) = a2[12];
          *(void *)(a1 + 104) = v48;
          *(void *)(a1 + 112) = a2[14];
          *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        *(_BYTE *)(a1 + 121) = v19;
      }

      else
      {
        char v26 = *((_BYTE *)a2 + 57);
        if ((v26 & 1) != 0)
        {
          __int128 v27 = *(_OWORD *)(a2 + 3);
          *(_OWORD *)(a1 + 24) = v27;
          (**(void (***)(uint64_t, uint64_t *))(v27 - 8))(a1, a2);
        }

        else
        {
          uint64_t v69 = a2[1];
          *(void *)a1 = *a2;
          *(void *)(a1 + 8) = v69;
          uint64_t v70 = a2[3];
          *(void *)(a1 + 16) = a2[2];
          *(void *)(a1 + 24) = v70;
          uint64_t v71 = a2[5];
          *(void *)(a1 + 32) = a2[4];
          *(void *)(a1 + 40) = v71;
          *(void *)(a1 + 48) = a2[6];
          *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        *(_BYTE *)(a1 + 57) = v26;
      }

      *(_BYTE *)(a1 + 122) = v15;
      uint64_t v72 = a2[17];
      *(void *)(a1 + 128) = a2[16];
      *(void *)(a1 + 136) = v72;
      uint64_t v73 = a2[19];
      *(void *)(a1 + 144) = a2[18];
      *(void *)(a1 + 152) = v73;
      uint64_t v74 = (int *)type metadata accessor for RCSMessage(0LL);
      uint64_t v75 = v74[7];
      uint64_t v76 = (void *)(a1 + v75);
      uint64_t v77 = (uint64_t *)((char *)a2 + v75);
      uint64_t v78 = type metadata accessor for RCSMessage.Content(0LL);
      uint64_t v79 = *(void *)(v78 - 8);
      unint64_t v80 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v79 + 48);
      uint64_t v81 = v78;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v80(v77, 1LL, v81))
      {
        uint64_t v82 = sub_5C28(&qword_76228);
        memcpy(v76, v77, *(void *)(*(void *)(v82 - 8) + 64LL));
      }

      else
      {
        uint64_t v217 = v79;
        switch(swift_getEnumCaseMultiPayload(v77, v81))
        {
          case 0u:
            uint64_t v83 = v77[1];
            uint64_t v84 = v76;
            *uint64_t v76 = *v77;
            v76[1] = v83;
            uint64_t v85 = v77[2];
            v76[2] = v85;
            swift_bridgeObjectRetain();
            swift_retain(v85);
            uint64_t v86 = v76;
            uint64_t v87 = v81;
            uint64_t v88 = 0LL;
            goto LABEL_70;
          case 1u:
            uint64_t v215 = v81;
            uint64_t v105 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
            uint64_t v106 = *(void *)(v105 - 8);
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v106 + 48))(v77, 1LL, v105))
            {
              uint64_t v107 = sub_5C28(&qword_76498);
              v108 = v76;
              memcpy(v76, v77, *(void *)(*(void *)(v107 - 8) + 64LL));
            }

            else
            {
              uint64_t v212 = v106;
              v108 = v76;
              *(_OWORD *)uint64_t v76 = *(_OWORD *)v77;
              v76[2] = v77[2];
              uint64_t v160 = *(int *)(v105 + 24);
              v206 = (char *)v77 + v160;
              v209 = (char *)v76 + v160;
              uint64_t v161 = type metadata accessor for URL(0LL);
              v162 = *(void (**)(char *, char *, uint64_t))(*(void *)(v161 - 8) + 16LL);
              swift_bridgeObjectRetain();
              v162(v209, v206, v161);
              uint64_t v163 = *(int *)(v105 + 28);
              v164 = (char *)v76 + v163;
              v165 = (char *)v77 + v163;
              uint64_t v166 = type metadata accessor for Date(0LL);
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v166 - 8) + 16LL))(v164, v165, v166);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v212 + 56))(v76, 0LL, 1LL, v105);
            }

            uint64_t v167 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
            v168 = (char *)v108 + v167;
            v169 = (char *)v77 + v167;
            *(_OWORD *)v168 = *(_OWORD *)((char *)v77 + v167);
            uint64_t v171 = *(void *)((char *)v77 + v167 + 16);
            uint64_t v170 = *(void *)((char *)v77 + v167 + 24);
            *((void *)v168 + 2) = v171;
            *((void *)v168 + 3) = v170;
            *((void *)v168 + 4) = *((void *)v169 + 4);
            v172 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
            uint64_t v173 = v172[7];
            v203 = &v169[v173];
            v207 = &v168[v173];
            uint64_t v174 = type metadata accessor for URL(0LL);
            v201 = *(void (**)(char *, char *, uint64_t))(*(void *)(v174 - 8) + 16LL);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v201(v207, v203, v174);
            uint64_t v84 = v76;
            uint64_t v175 = v172[8];
            v176 = &v168[v175];
            v213 = &v169[v175];
            uint64_t v177 = type metadata accessor for Date(0LL);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v177 - 8) + 16LL))(v176, v213, v177);
            v168[v172[9]] = v169[v172[9]];
            uint64_t v178 = v172[10];
            v179 = &v168[v178];
            v180 = &v169[v178];
            v179[8] = v180[8];
            *(void *)v179 = *(void *)v180;
            uint64_t v181 = *(int *)(sub_5C28(&qword_764A0) + 48);
            uint64_t v182 = *(void *)((char *)v77 + v181);
            *(void *)((char *)v84 + v181) = v182;
            swift_retain(v182);
            uint64_t v86 = v84;
            uint64_t v81 = v215;
            uint64_t v87 = v215;
            uint64_t v88 = 1LL;
            goto LABEL_70;
          case 2u:
            uint64_t v84 = v76;
            *(_OWORD *)uint64_t v76 = *(_OWORD *)v77;
            uint64_t v109 = v77[3];
            v76[2] = v77[2];
            v76[3] = v109;
            uint64_t v110 = v77[4];
            v76[4] = v110;
            swift_bridgeObjectRetain();
            swift_retain(v110);
            uint64_t v86 = v76;
            uint64_t v87 = v81;
            uint64_t v88 = 2LL;
            goto LABEL_70;
          case 3u:
            uint64_t v111 = v81;
            __int128 v112 = *(_OWORD *)(v77 + 3);
            uint64_t v84 = v76;
            *(_OWORD *)(v76 + 3) = v112;
            (**(void (***)(void *, void *))(v112 - 8))(v76, v77);
            uint64_t v113 = v77[6];
            v76[5] = v77[5];
            v76[6] = v113;
            v76[7] = v77[7];
            uint64_t v114 = v77[9];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v114)
            {
              uint64_t v76[8] = v77[8];
              v76[9] = v114;
              uint64_t v116 = v77[10];
              unint64_t v115 = v77[11];
              swift_bridgeObjectRetain();
              sub_F120(v116, v115);
              v84[10] = v116;
              v84[11] = v115;
              uint64_t v117 = v77[13];
              v84[12] = v77[12];
              v84[13] = v117;
              swift_bridgeObjectRetain();
            }

            else
            {
              __int128 v183 = *((_OWORD *)v77 + 5);
              *((_OWORD *)v76 + 4) = *((_OWORD *)v77 + 4);
              *((_OWORD *)v76 + 5) = v183;
              *((_OWORD *)v76 + 6) = *((_OWORD *)v77 + 6);
            }

            uint64_t v86 = v84;
            uint64_t v81 = v111;
            uint64_t v87 = v111;
            uint64_t v88 = 3LL;
            goto LABEL_70;
          case 5u:
            uint64_t v118 = *v77;
            uint64_t v84 = v76;
            *uint64_t v76 = *v77;
            swift_retain(v118);
            uint64_t v86 = v76;
            uint64_t v87 = v81;
            uint64_t v88 = 5LL;
            goto LABEL_70;
          case 6u:
            uint64_t v119 = *v77;
            uint64_t v84 = v76;
            *uint64_t v76 = *v77;
            swift_retain(v119);
            uint64_t v86 = v76;
            uint64_t v87 = v81;
            uint64_t v88 = 6LL;
            goto LABEL_70;
          case 7u:
            uint64_t v120 = *v77;
            uint64_t v84 = v76;
            *uint64_t v76 = *v77;
            swift_retain(v120);
            uint64_t v86 = v76;
            uint64_t v87 = v81;
            uint64_t v88 = 7LL;
LABEL_70:
            swift_storeEnumTagMultiPayload(v86, v87, v88);
            uint64_t v79 = v217;
            break;
          default:
            uint64_t v84 = v76;
            memcpy(v76, v77, *(void *)(v79 + 64));
            break;
        }

        (*(void (**)(void *, void, uint64_t, uint64_t))(v79 + 56))(v84, 0LL, 1LL, v81);
      }

      uint64_t v184 = v74[8];
      uint64_t v185 = a1 + v184;
      uint64_t v186 = (uint64_t)a2 + v184;
      uint64_t v187 = *(uint64_t *)((char *)a2 + v184 + 24);
      if (v187)
      {
        uint64_t v188 = *(void *)(v186 + 32);
        *(void *)(v185 + 24) = v187;
        *(void *)(v185 + 32) = v188;
        (**(void (***)(void))(v187 - 8))();
      }

      else
      {
        __int128 v189 = *(_OWORD *)(v186 + 16);
        *(_OWORD *)uint64_t v185 = *(_OWORD *)v186;
        *(_OWORD *)(v185 + 16) = v189;
        *(void *)(v185 + 32) = *(void *)(v186 + 32);
      }

      *(void *)(a1 + v74[9]) = *(uint64_t *)((char *)a2 + v74[9]);
      *(_BYTE *)(a1 + v74[10]) = *((_BYTE *)a2 + v74[10]);
      *(_BYTE *)(a1 + v74[11]) = *((_BYTE *)a2 + v74[11]);
      *(void *)(a1 + v74[12]) = *(uint64_t *)((char *)a2 + v74[12]);
      uint64_t v190 = v74[13];
      v191 = (void *)(a1 + v190);
      v192 = (uint64_t *)((char *)a2 + v190);
      uint64_t v193 = v192[1];
      void *v191 = *v192;
      v191[1] = v193;
      uint64_t v194 = v192[3];
      v191[2] = v192[2];
      v191[3] = v194;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v195 = *(int *)(sub_5C28(&qword_76360) + 48);
      v196 = (void *)(a1 + v195);
      v197 = (uint64_t *)((char *)a2 + v195);
      uint64_t v198 = v197[1];
      void *v196 = *v197;
      v196[1] = v198;
      swift_bridgeObjectRetain();
      uint64_t v40 = a1;
      uint64_t v41 = a3;
      uint64_t v42 = 2LL;
    }

    else if (EnumCaseMultiPayload == 1)
    {
      char v8 = *((_BYTE *)a2 + 122);
      if ((v8 & 1) != 0)
      {
        uint64_t v9 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v9;
        uint64_t v10 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v10;
        uint64_t v11 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v11;
        *(void *)(a1 + 48) = a2[6];
        *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
        char v12 = *((_BYTE *)a2 + 121);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((v12 & 1) != 0)
        {
          __int128 v13 = *(_OWORD *)(a2 + 11);
          *(_OWORD *)(a1 + 88) = v13;
          (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 64, (uint64_t)(a2 + 8));
        }

        else
        {
          uint64_t v43 = a2[9];
          *(void *)(a1 + 64) = a2[8];
          *(void *)(a1 + 72) = v43;
          uint64_t v44 = a2[11];
          *(void *)(a1 + 80) = a2[10];
          *(void *)(a1 + 88) = v44;
          uint64_t v45 = a2[13];
          *(void *)(a1 + 96) = a2[12];
          *(void *)(a1 + 104) = v45;
          *(void *)(a1 + 112) = a2[14];
          *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        *(_BYTE *)(a1 + 121) = v12;
      }

      else
      {
        char v24 = *((_BYTE *)a2 + 57);
        if ((v24 & 1) != 0)
        {
          __int128 v25 = *(_OWORD *)(a2 + 3);
          *(_OWORD *)(a1 + 24) = v25;
          (**(void (***)(uint64_t, uint64_t *))(v25 - 8))(a1, a2);
        }

        else
        {
          uint64_t v49 = a2[1];
          *(void *)a1 = *a2;
          *(void *)(a1 + 8) = v49;
          uint64_t v50 = a2[3];
          *(void *)(a1 + 16) = a2[2];
          *(void *)(a1 + 24) = v50;
          uint64_t v51 = a2[5];
          *(void *)(a1 + 32) = a2[4];
          *(void *)(a1 + 40) = v51;
          *(void *)(a1 + 48) = a2[6];
          *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        *(_BYTE *)(a1 + 57) = v24;
      }

      *(_BYTE *)(a1 + 122) = v8;
      uint64_t v52 = a2[17];
      *(void *)(a1 + 128) = a2[16];
      *(void *)(a1 + 136) = v52;
      uint64_t v53 = a2[19];
      *(void *)(a1 + 144) = a2[18];
      *(void *)(a1 + 152) = v53;
      uint64_t v54 = (int *)type metadata accessor for RCSMessage(0LL);
      uint64_t v55 = v54[7];
      unint64_t v56 = (void *)(a1 + v55);
      unint64_t v57 = (uint64_t *)((char *)a2 + v55);
      uint64_t v58 = type metadata accessor for RCSMessage.Content(0LL);
      uint64_t v59 = *(void *)(v58 - 8);
      uint64_t v60 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v59 + 48);
      uint64_t v61 = v58;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v60(v57, 1LL, v61))
      {
        uint64_t v62 = sub_5C28(&qword_76228);
        memcpy(v56, v57, *(void *)(*(void *)(v62 - 8) + 64LL));
      }

      else
      {
        uint64_t v216 = v59;
        switch(swift_getEnumCaseMultiPayload(v57, v61))
        {
          case 0u:
            uint64_t v63 = v57[1];
            uint64_t v64 = v56;
            *unint64_t v56 = *v57;
            v56[1] = v63;
            uint64_t v65 = v57[2];
            v56[2] = v65;
            swift_bridgeObjectRetain();
            swift_retain(v65);
            uint64_t v66 = v56;
            uint64_t v67 = v61;
            uint64_t v68 = 0LL;
            goto LABEL_60;
          case 1u:
            uint64_t v214 = v61;
            uint64_t v89 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
            uint64_t v90 = *(void *)(v89 - 8);
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v90 + 48))(v57, 1LL, v89))
            {
              uint64_t v91 = sub_5C28(&qword_76498);
              uint64_t v92 = v56;
              memcpy(v56, v57, *(void *)(*(void *)(v91 - 8) + 64LL));
            }

            else
            {
              uint64_t v210 = v90;
              uint64_t v92 = v56;
              *(_OWORD *)unint64_t v56 = *(_OWORD *)v57;
              v56[2] = v57[2];
              uint64_t v121 = *(int *)(v89 + 24);
              v204 = (char *)v57 + v121;
              v208 = (char *)v56 + v121;
              uint64_t v122 = type metadata accessor for URL(0LL);
              uint64_t v123 = *(void (**)(char *, char *, uint64_t))(*(void *)(v122 - 8) + 16LL);
              swift_bridgeObjectRetain();
              v123(v208, v204, v122);
              uint64_t v124 = *(int *)(v89 + 28);
              uint64_t v125 = (char *)v56 + v124;
              uint64_t v126 = (char *)v57 + v124;
              uint64_t v127 = type metadata accessor for Date(0LL);
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v127 - 8) + 16LL))(v125, v126, v127);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v210 + 56))(v56, 0LL, 1LL, v89);
            }

            uint64_t v128 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
            unint64_t v129 = (char *)v92 + v128;
            v130 = (char *)v57 + v128;
            *(_OWORD *)unint64_t v129 = *(_OWORD *)((char *)v57 + v128);
            uint64_t v132 = *(void *)((char *)v57 + v128 + 16);
            uint64_t v131 = *(void *)((char *)v57 + v128 + 24);
            *((void *)v129 + 2) = v132;
            *((void *)v129 + 3) = v131;
            *((void *)v129 + 4) = *((void *)v130 + 4);
            v133 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
            uint64_t v134 = v133[7];
            v202 = &v130[v134];
            v205 = &v129[v134];
            uint64_t v135 = type metadata accessor for URL(0LL);
            v200 = *(void (**)(char *, char *, uint64_t))(*(void *)(v135 - 8) + 16LL);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v200(v205, v202, v135);
            uint64_t v64 = v56;
            uint64_t v136 = v133[8];
            char v137 = &v129[v136];
            v211 = &v130[v136];
            uint64_t v138 = type metadata accessor for Date(0LL);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v138 - 8) + 16LL))(v137, v211, v138);
            v129[v133[9]] = v130[v133[9]];
            uint64_t v139 = v133[10];
            uint64_t v140 = &v129[v139];
            uint64_t v141 = &v130[v139];
            v140[8] = v141[8];
            *(void *)uint64_t v140 = *(void *)v141;
            uint64_t v142 = *(int *)(sub_5C28(&qword_764A0) + 48);
            uint64_t v143 = *(void *)((char *)v57 + v142);
            *(void *)((char *)v64 + v142) = v143;
            swift_retain(v143);
            uint64_t v66 = v64;
            uint64_t v61 = v214;
            uint64_t v67 = v214;
            uint64_t v68 = 1LL;
            goto LABEL_60;
          case 2u:
            uint64_t v64 = v56;
            *(_OWORD *)unint64_t v56 = *(_OWORD *)v57;
            uint64_t v93 = v57[3];
            v56[2] = v57[2];
            v56[3] = v93;
            uint64_t v94 = v57[4];
            v56[4] = v94;
            swift_bridgeObjectRetain();
            swift_retain(v94);
            uint64_t v66 = v56;
            uint64_t v67 = v61;
            uint64_t v68 = 2LL;
            goto LABEL_60;
          case 3u:
            uint64_t v95 = v61;
            __int128 v96 = *(_OWORD *)(v57 + 3);
            uint64_t v64 = v56;
            *(_OWORD *)(v56 + 3) = v96;
            (**(void (***)(void *, void *))(v96 - 8))(v56, v57);
            uint64_t v97 = v57[6];
            v56[5] = v57[5];
            v56[6] = v97;
            v56[7] = v57[7];
            uint64_t v98 = v57[9];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v98)
            {
              v56[8] = v57[8];
              v56[9] = v98;
              uint64_t v100 = v57[10];
              unint64_t v99 = v57[11];
              swift_bridgeObjectRetain();
              sub_F120(v100, v99);
              v64[10] = v100;
              v64[11] = v99;
              uint64_t v101 = v57[13];
              v64[12] = v57[12];
              v64[13] = v101;
              swift_bridgeObjectRetain();
            }

            else
            {
              __int128 v144 = *((_OWORD *)v57 + 5);
              *((_OWORD *)v56 + 4) = *((_OWORD *)v57 + 4);
              *((_OWORD *)v56 + 5) = v144;
              *((_OWORD *)v56 + 6) = *((_OWORD *)v57 + 6);
            }

            uint64_t v66 = v64;
            uint64_t v61 = v95;
            uint64_t v67 = v95;
            uint64_t v68 = 3LL;
            goto LABEL_60;
          case 5u:
            uint64_t v102 = *v57;
            uint64_t v64 = v56;
            *unint64_t v56 = *v57;
            swift_retain(v102);
            uint64_t v66 = v56;
            uint64_t v67 = v61;
            uint64_t v68 = 5LL;
            goto LABEL_60;
          case 6u:
            uint64_t v103 = *v57;
            uint64_t v64 = v56;
            *unint64_t v56 = *v57;
            swift_retain(v103);
            uint64_t v66 = v56;
            uint64_t v67 = v61;
            uint64_t v68 = 6LL;
            goto LABEL_60;
          case 7u:
            uint64_t v104 = *v57;
            uint64_t v64 = v56;
            *unint64_t v56 = *v57;
            swift_retain(v104);
            uint64_t v66 = v56;
            uint64_t v67 = v61;
            uint64_t v68 = 7LL;
LABEL_60:
            swift_storeEnumTagMultiPayload(v66, v67, v68);
            uint64_t v59 = v216;
            break;
          default:
            uint64_t v64 = v56;
            memcpy(v56, v57, *(void *)(v59 + 64));
            break;
        }

        (*(void (**)(void *, void, uint64_t, uint64_t))(v59 + 56))(v64, 0LL, 1LL, v61);
      }

      uint64_t v145 = v54[8];
      uint64_t v146 = a1 + v145;
      uint64_t v147 = (uint64_t)a2 + v145;
      uint64_t v148 = *(uint64_t *)((char *)a2 + v145 + 24);
      if (v148)
      {
        uint64_t v149 = *(void *)(v147 + 32);
        *(void *)(v146 + 24) = v148;
        *(void *)(v146 + 32) = v149;
        (**(void (***)(void))(v148 - 8))();
      }

      else
      {
        __int128 v150 = *(_OWORD *)(v147 + 16);
        *(_OWORD *)uint64_t v146 = *(_OWORD *)v147;
        *(_OWORD *)(v146 + 16) = v150;
        *(void *)(v146 + 32) = *(void *)(v147 + 32);
      }

      *(void *)(a1 + v54[9]) = *(uint64_t *)((char *)a2 + v54[9]);
      *(_BYTE *)(a1 + v54[10]) = *((_BYTE *)a2 + v54[10]);
      *(_BYTE *)(a1 + v54[11]) = *((_BYTE *)a2 + v54[11]);
      *(void *)(a1 + v54[12]) = *(uint64_t *)((char *)a2 + v54[12]);
      uint64_t v151 = v54[13];
      v152 = (void *)(a1 + v151);
      v153 = (uint64_t *)((char *)a2 + v151);
      uint64_t v154 = v153[1];
      void *v152 = *v153;
      v152[1] = v154;
      uint64_t v155 = v153[3];
      v152[2] = v153[2];
      v152[3] = v155;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v156 = *(int *)(sub_5C28(&qword_76360) + 48);
      v157 = (void *)(a1 + v156);
      v158 = (uint64_t *)((char *)a2 + v156);
      uint64_t v159 = v158[1];
      void *v157 = *v158;
      v157[1] = v159;
      swift_bridgeObjectRetain();
      uint64_t v40 = a1;
      uint64_t v41 = a3;
      uint64_t v42 = 1LL;
    }

    else
    {
      uint64_t v21 = a2[1];
      if (v21)
      {
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v21;
        uint64_t v22 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v22;
        uint64_t v23 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v23;
        *(void *)(a1 + 48) = a2[6];
        *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      else
      {
        __int128 v28 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v28;
        *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
        *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 41);
      }

      uint64_t v29 = a2[9];
      *(void *)(a1 + 64) = a2[8];
      *(void *)(a1 + 72) = v29;
      uint64_t v30 = a2[11];
      *(void *)(a1 + 80) = a2[10];
      *(void *)(a1 + 88) = v30;
      __int128 v31 = *(_OWORD *)(a2 + 15);
      *(_OWORD *)(a1 + 120) = v31;
      uint64_t v32 = v31;
      id v33 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v31 - 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v33(a1 + 96, a2 + 12, v32);
      uint64_t v34 = a2[18];
      *(void *)(a1 + 136) = a2[17];
      *(void *)(a1 + 144) = v34;
      *(void *)(a1 + 152) = a2[19];
      uint64_t v35 = a2[21];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v35)
      {
        *(void *)(a1 + 160) = a2[20];
        *(void *)(a1 + 168) = v35;
        uint64_t v36 = a2[22];
        unint64_t v37 = a2[23];
        swift_bridgeObjectRetain();
        sub_F120(v36, v37);
        *(void *)(a1 + 176) = v36;
        *(void *)(a1 + 184) = v37;
        uint64_t v38 = a2[25];
        *(void *)(a1 + 192) = a2[24];
        *(void *)(a1 + 200) = v38;
        swift_bridgeObjectRetain();
      }

      else
      {
        __int128 v39 = *((_OWORD *)a2 + 11);
        *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
        *(_OWORD *)(a1 + 176) = v39;
        *(_OWORD *)(a1 + 192) = *((_OWORD *)a2 + 12);
      }

      uint64_t v40 = a1;
      uint64_t v41 = a3;
      uint64_t v42 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v40, v41, v42);
  }

  return a1;
}

uint64_t sub_F120(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    ((void (*)(void))swift_retain)();
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t _s19ChatResolutionErrorOwxx(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((_DWORD)result)
  {
    case 2:
      if ((*(_BYTE *)(a1 + 122) & 1) != 0)
      {
        swift_bridgeObjectRelease(*(void *)(a1 + 8));
        swift_bridgeObjectRelease(*(void *)(a1 + 24));
        swift_bridgeObjectRelease(*(void *)(a1 + 32));
        swift_bridgeObjectRelease(*(void *)(a1 + 48));
        if ((*(_BYTE *)(a1 + 121) & 1) != 0)
        {
          uint64_t v6 = (void *)(a1 + 64);
LABEL_17:
          sub_12204(v6);
          goto LABEL_25;
        }

        swift_bridgeObjectRelease(*(void *)(a1 + 72));
        swift_bridgeObjectRelease(*(void *)(a1 + 88));
        swift_bridgeObjectRelease(*(void *)(a1 + 96));
        uint64_t v8 = *(void *)(a1 + 112);
      }

      else
      {
        if ((*(_BYTE *)(a1 + 57) & 1) != 0)
        {
          uint64_t v6 = (void *)a1;
          goto LABEL_17;
        }

        swift_bridgeObjectRelease(*(void *)(a1 + 8));
        swift_bridgeObjectRelease(*(void *)(a1 + 24));
        swift_bridgeObjectRelease(*(void *)(a1 + 32));
        uint64_t v8 = *(void *)(a1 + 48);
      }

      swift_bridgeObjectRelease(v8);
LABEL_25:
      swift_bridgeObjectRelease(*(void *)(a1 + 136));
      swift_bridgeObjectRelease(*(void *)(a1 + 152));
      uint64_t v10 = (int *)type metadata accessor for RCSMessage(0LL);
      uint64_t v11 = (uint64_t *)(a1 + v10[7]);
      uint64_t v12 = type metadata accessor for RCSMessage.Content(0LL);
      if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48LL))(v11, 1LL, v12))
      {
        switch(swift_getEnumCaseMultiPayload(v11, v12))
        {
          case 0u:
LABEL_32:
            swift_bridgeObjectRelease(v11[1]);
            uint64_t v14 = v11[2];
            goto LABEL_37;
          case 1u:
LABEL_33:
            uint64_t v15 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
            if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))( v11,  1LL,  v15))
            {
              swift_bridgeObjectRelease(v11[2]);
              uint64_t v16 = (char *)v11 + *(int *)(v15 + 24);
              uint64_t v17 = type metadata accessor for URL(0LL);
              (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8LL))(v16, v17);
              uint64_t v18 = (char *)v11 + *(int *)(v15 + 28);
              uint64_t v19 = type metadata accessor for Date(0LL);
              (*(void (**)(char *, uint64_t))(*(void *)(v19 - 8) + 8LL))(v18, v19);
            }

            __int128 v20 = (char *)v11 + *(int *)(type metadata accessor for RCSFile(0LL) + 20);
            swift_bridgeObjectRelease(*((void *)v20 + 2));
            swift_bridgeObjectRelease(*((void *)v20 + 4));
            uint64_t v21 = type metadata accessor for RCSFile.DispositionInformation(0LL);
            uint64_t v22 = &v20[*(int *)(v21 + 28)];
            uint64_t v23 = type metadata accessor for URL(0LL);
            (*(void (**)(char *, uint64_t))(*(void *)(v23 - 8) + 8LL))(v22, v23);
            char v24 = &v20[*(int *)(v21 + 32)];
            uint64_t v25 = type metadata accessor for Date(0LL);
            (*(void (**)(char *, uint64_t))(*(void *)(v25 - 8) + 8LL))(v24, v25);
            uint64_t v14 = *(uint64_t *)((char *)v11 + *(int *)(sub_5C28(&qword_764A0) + 48));
            goto LABEL_37;
          case 2u:
LABEL_36:
            swift_bridgeObjectRelease(v11[3]);
            uint64_t v14 = v11[4];
            goto LABEL_37;
          case 3u:
LABEL_42:
            sub_12204(v11);
            swift_bridgeObjectRelease(v11[5]);
            swift_bridgeObjectRelease(v11[7]);
            uint64_t v28 = v11[9];
            if (v28)
            {
              swift_bridgeObjectRelease(v28);
              sub_F5F8(v11[10], v11[11]);
              swift_bridgeObjectRelease(v11[13]);
            }

            goto LABEL_38;
          case 5u:
          case 6u:
          case 7u:
LABEL_31:
            uint64_t v14 = *v11;
LABEL_37:
            swift_release(v14);
            break;
          default:
            goto LABEL_38;
        }
      }

      goto LABEL_38;
    case 1:
      if ((*(_BYTE *)(a1 + 122) & 1) != 0)
      {
        swift_bridgeObjectRelease(*(void *)(a1 + 8));
        swift_bridgeObjectRelease(*(void *)(a1 + 24));
        swift_bridgeObjectRelease(*(void *)(a1 + 32));
        swift_bridgeObjectRelease(*(void *)(a1 + 48));
        if ((*(_BYTE *)(a1 + 121) & 1) != 0)
        {
          uint64_t v7 = (void *)(a1 + 64);
LABEL_20:
          sub_12204(v7);
          goto LABEL_29;
        }

        swift_bridgeObjectRelease(*(void *)(a1 + 72));
        swift_bridgeObjectRelease(*(void *)(a1 + 88));
        swift_bridgeObjectRelease(*(void *)(a1 + 96));
        uint64_t v9 = *(void *)(a1 + 112);
      }

      else
      {
        if ((*(_BYTE *)(a1 + 57) & 1) != 0)
        {
          uint64_t v7 = (void *)a1;
          goto LABEL_20;
        }

        swift_bridgeObjectRelease(*(void *)(a1 + 8));
        swift_bridgeObjectRelease(*(void *)(a1 + 24));
        swift_bridgeObjectRelease(*(void *)(a1 + 32));
        uint64_t v9 = *(void *)(a1 + 48);
      }

      swift_bridgeObjectRelease(v9);
LABEL_29:
      swift_bridgeObjectRelease(*(void *)(a1 + 136));
      swift_bridgeObjectRelease(*(void *)(a1 + 152));
      uint64_t v10 = (int *)type metadata accessor for RCSMessage(0LL);
      uint64_t v11 = (uint64_t *)(a1 + v10[7]);
      uint64_t v13 = type metadata accessor for RCSMessage.Content(0LL);
      if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48LL))(v11, 1LL, v13))
      {
        switch(swift_getEnumCaseMultiPayload(v11, v13))
        {
          case 0u:
            goto LABEL_32;
          case 1u:
            goto LABEL_33;
          case 2u:
            goto LABEL_36;
          case 3u:
            goto LABEL_42;
          case 5u:
          case 6u:
          case 7u:
            goto LABEL_31;
          default:
            break;
        }
      }

LABEL_38:
      char v26 = (void *)(a1 + v10[8]);
      if (v26[3]) {
        sub_12204(v26);
      }
      swift_bridgeObjectRelease(*(void *)(a1 + v10[9]));
      swift_bridgeObjectRelease(*(void *)(a1 + v10[12]));
      uint64_t v27 = a1 + v10[13];
      swift_bridgeObjectRelease(*(void *)(v27 + 8));
      swift_bridgeObjectRelease(*(void *)(v27 + 24));
      int v5 = (void *)(a1 + *(int *)(sub_5C28(&qword_76360) + 48) + 8);
      return swift_bridgeObjectRelease(*v5);
    case 0:
      uint64_t v4 = *(void *)(a1 + 8);
      if (v4)
      {
        swift_bridgeObjectRelease(v4);
        swift_bridgeObjectRelease(*(void *)(a1 + 24));
        swift_bridgeObjectRelease(*(void *)(a1 + 32));
        swift_bridgeObjectRelease(*(void *)(a1 + 48));
      }

      swift_bridgeObjectRelease(*(void *)(a1 + 72));
      swift_bridgeObjectRelease(*(void *)(a1 + 88));
      sub_12204((void *)(a1 + 96));
      swift_bridgeObjectRelease(*(void *)(a1 + 136));
      swift_bridgeObjectRelease(*(void *)(a1 + 152));
      uint64_t result = *(void *)(a1 + 168);
      if (result)
      {
        swift_bridgeObjectRelease(result);
        sub_F5F8(*(void *)(a1 + 176), *(void *)(a1 + 184));
        int v5 = (void *)(a1 + 200);
        return swift_bridgeObjectRelease(*v5);
      }

      break;
  }

  return result;
}

uint64_t sub_F5F8(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t _s19ChatResolutionErrorOwcp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  uint64_t v7 = EnumCaseMultiPayload;
  if ((_DWORD)EnumCaseMultiPayload == 2)
  {
    char v14 = *(_BYTE *)(a2 + 122);
    uint64_t v192 = v3;
    unsigned int v193 = 2;
    if ((v14 & 1) != 0)
    {
      uint64_t v15 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v15;
      uint64_t v16 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v16;
      uint64_t v17 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v17;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      char v18 = *(_BYTE *)(a2 + 121);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((v18 & 1) != 0)
      {
        __int128 v19 = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 88) = v19;
        (**(void (***)(uint64_t, uint64_t))(v19 - 8))(a1 + 64, a2 + 64);
      }

      else
      {
        uint64_t v42 = *(void *)(a2 + 72);
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        *(void *)(a1 + 72) = v42;
        uint64_t v43 = *(void *)(a2 + 88);
        *(void *)(a1 + 80) = *(void *)(a2 + 80);
        *(void *)(a1 + 88) = v43;
        uint64_t v44 = *(void *)(a2 + 104);
        *(void *)(a1 + 96) = *(void *)(a2 + 96);
        *(void *)(a1 + 104) = v44;
        *(void *)(a1 + 112) = *(void *)(a2 + 112);
        *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      *(_BYTE *)(a1 + 121) = v18;
    }

    else
    {
      char v25 = *(_BYTE *)(a2 + 57);
      if ((v25 & 1) != 0)
      {
        __int128 v26 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v26;
        (**(void (***)(uint64_t, uint64_t))(v26 - 8))(a1, a2);
      }

      else
      {
        uint64_t v65 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v65;
        uint64_t v66 = *(void *)(a2 + 24);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = v66;
        uint64_t v67 = *(void *)(a2 + 40);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = v67;
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      *(_BYTE *)(a1 + 57) = v25;
    }

    *(_BYTE *)(a1 + 122) = v14;
    uint64_t v68 = *(void *)(a2 + 136);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = v68;
    uint64_t v69 = *(void *)(a2 + 152);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = v69;
    uint64_t v50 = (int *)type metadata accessor for RCSMessage(0LL);
    uint64_t v70 = v50[7];
    uint64_t v71 = (void *)(a1 + v70);
    uint64_t v72 = (char *)(a2 + v70);
    uint64_t v73 = type metadata accessor for RCSMessage.Content(0LL);
    uint64_t v74 = *(void *)(v73 - 8);
    uint64_t v75 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v75(v72, 1LL, v73))
    {
      uint64_t v191 = v74;
      switch(swift_getEnumCaseMultiPayload(v72, v73))
      {
        case 0u:
          uint64_t v76 = *((void *)v72 + 1);
          *uint64_t v71 = *(void *)v72;
          v71[1] = v76;
          uint64_t v77 = *((void *)v72 + 2);
          v71[2] = v77;
          swift_bridgeObjectRetain();
          swift_retain(v77);
          uint64_t v78 = v71;
          uint64_t v79 = v73;
          uint64_t v80 = 0LL;
          goto LABEL_54;
        case 1u:
          uint64_t v95 = v72;
          uint64_t v187 = v73;
          uint64_t v96 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
          uint64_t v97 = *(void *)(v96 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v97 + 48))(v95, 1LL, v96))
          {
            uint64_t v98 = sub_5C28(&qword_76498);
            memcpy(v71, v95, *(void *)(*(void *)(v98 - 8) + 64LL));
          }

          else
          {
            *(_OWORD *)uint64_t v71 = *(_OWORD *)v95;
            v71[2] = v95[2];
            uint64_t v152 = *(int *)(v96 + 24);
            __int128 v183 = (char *)v95 + v152;
            uint64_t v185 = (char *)v71 + v152;
            uint64_t v153 = type metadata accessor for URL(0LL);
            uint64_t v154 = *(void (**)(char *, char *, uint64_t))(*(void *)(v153 - 8) + 16LL);
            swift_bridgeObjectRetain();
            v154(v185, v183, v153);
            uint64_t v155 = *(int *)(v96 + 28);
            uint64_t v156 = (char *)v71 + v155;
            v157 = (char *)v95 + v155;
            uint64_t v158 = type metadata accessor for Date(0LL);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v158 - 8) + 16LL))(v156, v157, v158);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v97 + 56))(v71, 0LL, 1LL, v96);
          }

          uint64_t v7 = 2LL;
          uint64_t v159 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
          uint64_t v160 = (char *)v71 + v159;
          uint64_t v161 = (char *)v95 + v159;
          *(_OWORD *)uint64_t v160 = *(_OWORD *)((char *)v95 + v159);
          uint64_t v163 = *(void *)((char *)v95 + v159 + 16);
          uint64_t v162 = *(void *)((char *)v95 + v159 + 24);
          *((void *)v160 + 2) = v163;
          *((void *)v160 + 3) = v162;
          uint64_t v186 = v95;
          *((void *)v160 + 4) = *((void *)v161 + 4);
          v164 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
          uint64_t v165 = v164[7];
          v179 = &v161[v165];
          uint64_t v181 = &v160[v165];
          uint64_t v166 = type metadata accessor for URL(0LL);
          uint64_t v167 = *(void (**)(char *, char *, uint64_t))(*(void *)(v166 - 8) + 16LL);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v167(v181, v179, v166);
          uint64_t v168 = v164[8];
          v169 = &v160[v168];
          uint64_t v170 = &v161[v168];
          uint64_t v171 = type metadata accessor for Date(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v171 - 8) + 16LL))(v169, v170, v171);
          v160[v164[9]] = v161[v164[9]];
          uint64_t v172 = v164[10];
          uint64_t v173 = &v160[v172];
          uint64_t v174 = &v161[v172];
          v173[8] = v174[8];
          *(void *)uint64_t v173 = *(void *)v174;
          uint64_t v175 = *(int *)(sub_5C28(&qword_764A0) + 48);
          uint64_t v176 = *(void *)((char *)v186 + v175);
          *(void *)((char *)v71 + v175) = v176;
          swift_retain(v176);
          uint64_t v73 = v187;
          swift_storeEnumTagMultiPayload(v71, v187, 1LL);
          uint64_t v74 = v191;
          uint64_t v3 = v192;
          goto LABEL_56;
        case 2u:
          *(_OWORD *)uint64_t v71 = *(_OWORD *)v72;
          uint64_t v99 = *((void *)v72 + 3);
          v71[2] = *((void *)v72 + 2);
          v71[3] = v99;
          uint64_t v100 = *((void *)v72 + 4);
          v71[4] = v100;
          swift_bridgeObjectRetain();
          swift_retain(v100);
          uint64_t v78 = v71;
          uint64_t v79 = v73;
          uint64_t v80 = 2LL;
          goto LABEL_54;
        case 3u:
          uint64_t v101 = v72;
          uint64_t v102 = v73;
          __int128 v103 = *(_OWORD *)(v72 + 24);
          *(_OWORD *)(v71 + 3) = v103;
          (**(void (***)(void *, const void *))(v103 - 8))(v71, v72);
          uint64_t v104 = *((void *)v72 + 6);
          v71[5] = *((void *)v72 + 5);
          v71[6] = v104;
          v71[7] = *((void *)v72 + 7);
          uint64_t v105 = *((void *)v72 + 9);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v105)
          {
            v71[8] = *((void *)v72 + 8);
            v71[9] = v105;
            uint64_t v107 = *((void *)v72 + 10);
            unint64_t v106 = *((void *)v72 + 11);
            swift_bridgeObjectRetain();
            sub_F120(v107, v106);
            v71[10] = v107;
            v71[11] = v106;
            uint64_t v108 = *((void *)v101 + 13);
            v71[12] = *((void *)v101 + 12);
            v71[13] = v108;
            swift_bridgeObjectRetain();
          }

          else
          {
            __int128 v177 = *((_OWORD *)v72 + 5);
            *((_OWORD *)v71 + 4) = *((_OWORD *)v72 + 4);
            *((_OWORD *)v71 + 5) = v177;
            *((_OWORD *)v71 + 6) = *((_OWORD *)v72 + 6);
          }

          uint64_t v3 = v192;
          uint64_t v7 = 2LL;
          uint64_t v73 = v102;
          swift_storeEnumTagMultiPayload(v71, v102, 3LL);
          goto LABEL_56;
        case 5u:
          uint64_t v109 = *(void *)v72;
          *uint64_t v71 = *(void *)v72;
          swift_retain(v109);
          uint64_t v78 = v71;
          uint64_t v79 = v73;
          uint64_t v80 = 5LL;
          goto LABEL_54;
        case 6u:
          uint64_t v110 = *(void *)v72;
          *uint64_t v71 = *(void *)v72;
          swift_retain(v110);
          uint64_t v78 = v71;
          uint64_t v79 = v73;
          uint64_t v80 = 6LL;
          goto LABEL_54;
        case 7u:
          uint64_t v111 = *(void *)v72;
          *uint64_t v71 = *(void *)v72;
          swift_retain(v111);
          uint64_t v78 = v71;
          uint64_t v79 = v73;
          uint64_t v80 = 7LL;
LABEL_54:
          swift_storeEnumTagMultiPayload(v78, v79, v80);
          uint64_t v3 = v192;
          break;
        default:
          memcpy(v71, v72, *(void *)(v74 + 64));
          uint64_t v3 = v192;
          break;
      }

      uint64_t v7 = 2LL;
LABEL_56:
      (*(void (**)(void *, void, uint64_t, uint64_t))(v74 + 56))(v71, 0LL, 1LL, v73);
      goto LABEL_62;
    }

    size_t v57 = *(void *)(*(void *)(sub_5C28(&qword_76228) - 8) + 64LL);
    uint64_t v58 = v71;
    uint64_t v59 = v72;
    goto LABEL_33;
  }

  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    char v8 = *(_BYTE *)(a2 + 122);
    uint64_t v192 = v3;
    unsigned int v193 = 1;
    if ((v8 & 1) != 0)
    {
      uint64_t v9 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v9;
      uint64_t v10 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v10;
      uint64_t v11 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v11;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      char v12 = *(_BYTE *)(a2 + 121);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((v12 & 1) != 0)
      {
        __int128 v13 = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 88) = v13;
        (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 64, a2 + 64);
      }

      else
      {
        uint64_t v39 = *(void *)(a2 + 72);
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        *(void *)(a1 + 72) = v39;
        uint64_t v40 = *(void *)(a2 + 88);
        *(void *)(a1 + 80) = *(void *)(a2 + 80);
        *(void *)(a1 + 88) = v40;
        uint64_t v41 = *(void *)(a2 + 104);
        *(void *)(a1 + 96) = *(void *)(a2 + 96);
        *(void *)(a1 + 104) = v41;
        *(void *)(a1 + 112) = *(void *)(a2 + 112);
        *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      *(_BYTE *)(a1 + 121) = v12;
    }

    else
    {
      char v23 = *(_BYTE *)(a2 + 57);
      if ((v23 & 1) != 0)
      {
        __int128 v24 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v24;
        (**(void (***)(uint64_t, uint64_t))(v24 - 8))(a1, a2);
      }

      else
      {
        uint64_t v45 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v45;
        uint64_t v46 = *(void *)(a2 + 24);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = v46;
        uint64_t v47 = *(void *)(a2 + 40);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = v47;
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      *(_BYTE *)(a1 + 57) = v23;
    }

    *(_BYTE *)(a1 + 122) = v8;
    uint64_t v48 = *(void *)(a2 + 136);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = v48;
    uint64_t v49 = *(void *)(a2 + 152);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = v49;
    uint64_t v50 = (int *)type metadata accessor for RCSMessage(0LL);
    uint64_t v51 = v50[7];
    uint64_t v52 = (void *)(a1 + v51);
    uint64_t v53 = (void *)(a2 + v51);
    uint64_t v54 = type metadata accessor for RCSMessage.Content(0LL);
    uint64_t v55 = *(void *)(v54 - 8);
    unint64_t v56 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v55 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v56(v53, 1LL, v54))
    {
      uint64_t v190 = v55;
      switch(swift_getEnumCaseMultiPayload(v53, v54))
      {
        case 0u:
          uint64_t v60 = v53[1];
          *uint64_t v52 = *v53;
          v52[1] = v60;
          uint64_t v61 = v53[2];
          v52[2] = v61;
          swift_bridgeObjectRetain();
          swift_retain(v61);
          uint64_t v62 = v52;
          uint64_t v63 = v54;
          uint64_t v64 = 0LL;
          goto LABEL_59;
        case 1u:
          uint64_t v81 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
          uint64_t v82 = *(void *)(v81 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v82 + 48))(v53, 1LL, v81))
          {
            uint64_t v83 = sub_5C28(&qword_76498);
            memcpy(v52, v53, *(void *)(*(void *)(v83 - 8) + 64LL));
          }

          else
          {
            *(_OWORD *)uint64_t v52 = *(_OWORD *)v53;
            v52[2] = v53[2];
            uint64_t v112 = *(int *)(v81 + 24);
            uint64_t v184 = (char *)v53 + v112;
            uint64_t v188 = (char *)v52 + v112;
            uint64_t v113 = type metadata accessor for URL(0LL);
            uint64_t v114 = *(void (**)(char *, char *, uint64_t))(*(void *)(v113 - 8) + 16LL);
            swift_bridgeObjectRetain();
            v114(v188, v184, v113);
            uint64_t v115 = *(int *)(v81 + 28);
            uint64_t v116 = (char *)v52 + v115;
            uint64_t v117 = (char *)v53 + v115;
            uint64_t v118 = type metadata accessor for Date(0LL);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v118 - 8) + 16LL))(v116, v117, v118);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v82 + 56))(v52, 0LL, 1LL, v81);
          }

          uint64_t v119 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
          uint64_t v120 = (char *)v52 + v119;
          uint64_t v121 = (char *)v53 + v119;
          *(_OWORD *)uint64_t v120 = *(_OWORD *)((char *)v53 + v119);
          uint64_t v123 = *(void *)((char *)v53 + v119 + 16);
          uint64_t v122 = *(void *)((char *)v53 + v119 + 24);
          *((void *)v120 + 2) = v123;
          *((void *)v120 + 3) = v122;
          *((void *)v120 + 4) = *((void *)v121 + 4);
          uint64_t v124 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
          uint64_t v125 = v124[7];
          v180 = &v121[v125];
          uint64_t v182 = &v120[v125];
          uint64_t v126 = type metadata accessor for URL(0LL);
          uint64_t v178 = *(void (**)(char *, char *, uint64_t))(*(void *)(v126 - 8) + 16LL);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v178(v182, v180, v126);
          uint64_t v127 = v124[8];
          uint64_t v128 = &v120[v127];
          __int128 v189 = &v121[v127];
          uint64_t v129 = type metadata accessor for Date(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v129 - 8) + 16LL))(v128, v189, v129);
          v120[v124[9]] = v121[v124[9]];
          uint64_t v130 = v124[10];
          uint64_t v131 = &v120[v130];
          uint64_t v132 = &v121[v130];
          v131[8] = v132[8];
          *(void *)uint64_t v131 = *(void *)v132;
          uint64_t v133 = *(int *)(sub_5C28(&qword_764A0) + 48);
          uint64_t v134 = *(void *)((char *)v53 + v133);
          *(void *)((char *)v52 + v133) = v134;
          swift_retain(v134);
          uint64_t v62 = v52;
          uint64_t v63 = v54;
          uint64_t v64 = 1LL;
          goto LABEL_59;
        case 2u:
          *(_OWORD *)uint64_t v52 = *(_OWORD *)v53;
          uint64_t v84 = v53[3];
          v52[2] = v53[2];
          v52[3] = v84;
          uint64_t v85 = v53[4];
          v52[4] = v85;
          swift_bridgeObjectRetain();
          swift_retain(v85);
          uint64_t v62 = v52;
          uint64_t v63 = v54;
          uint64_t v64 = 2LL;
          goto LABEL_59;
        case 3u:
          __int128 v86 = *(_OWORD *)(v53 + 3);
          *(_OWORD *)(v52 + 3) = v86;
          (**(void (***)(void *, void *))(v86 - 8))(v52, v53);
          uint64_t v87 = v53[6];
          v52[5] = v53[5];
          v52[6] = v87;
          v52[7] = v53[7];
          uint64_t v88 = v53[9];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v88)
          {
            v52[8] = v53[8];
            v52[9] = v88;
            uint64_t v90 = v53[10];
            unint64_t v89 = v53[11];
            swift_bridgeObjectRetain();
            sub_F120(v90, v89);
            v52[10] = v90;
            v52[11] = v89;
            uint64_t v91 = v53[13];
            v52[12] = v53[12];
            v52[13] = v91;
            swift_bridgeObjectRetain();
          }

          else
          {
            __int128 v151 = *((_OWORD *)v53 + 5);
            *((_OWORD *)v52 + 4) = *((_OWORD *)v53 + 4);
            *((_OWORD *)v52 + 5) = v151;
            *((_OWORD *)v52 + 6) = *((_OWORD *)v53 + 6);
          }

          uint64_t v3 = v192;
          swift_storeEnumTagMultiPayload(v52, v54, 3LL);
          break;
        case 5u:
          uint64_t v92 = *v53;
          *uint64_t v52 = *v53;
          swift_retain(v92);
          uint64_t v62 = v52;
          uint64_t v63 = v54;
          uint64_t v64 = 5LL;
          goto LABEL_59;
        case 6u:
          uint64_t v93 = *v53;
          *uint64_t v52 = *v53;
          swift_retain(v93);
          uint64_t v62 = v52;
          uint64_t v63 = v54;
          uint64_t v64 = 6LL;
          goto LABEL_59;
        case 7u:
          uint64_t v94 = *v53;
          *uint64_t v52 = *v53;
          swift_retain(v94);
          uint64_t v62 = v52;
          uint64_t v63 = v54;
          uint64_t v64 = 7LL;
LABEL_59:
          swift_storeEnumTagMultiPayload(v62, v63, v64);
          uint64_t v55 = v190;
          uint64_t v3 = v192;
          break;
        default:
          memcpy(v52, v53, *(void *)(v55 + 64));
          uint64_t v3 = v192;
          break;
      }

      (*(void (**)(void *, void, uint64_t, uint64_t))(v55 + 56))(v52, 0LL, 1LL, v54);
      goto LABEL_61;
    }

    size_t v57 = *(void *)(*(void *)(sub_5C28(&qword_76228) - 8) + 64LL);
    uint64_t v58 = v52;
    uint64_t v59 = v53;
LABEL_33:
    memcpy(v58, v59, v57);
    uint64_t v3 = v192;
LABEL_61:
    uint64_t v7 = v193;
LABEL_62:
    uint64_t v135 = v50[8];
    uint64_t v136 = a1 + v135;
    uint64_t v137 = a2 + v135;
    uint64_t v138 = *(void *)(a2 + v135 + 24);
    if (v138)
    {
      uint64_t v139 = *(void *)(v137 + 32);
      *(void *)(v136 + 24) = v138;
      *(void *)(v136 + 32) = v139;
      (**(void (***)(void))(v138 - 8))();
    }

    else
    {
      __int128 v140 = *(_OWORD *)(v137 + 16);
      *(_OWORD *)uint64_t v136 = *(_OWORD *)v137;
      *(_OWORD *)(v136 + 16) = v140;
      *(void *)(v136 + 32) = *(void *)(v137 + 32);
    }

    *(void *)(a1 + v50[9]) = *(void *)(a2 + v50[9]);
    *(_BYTE *)(a1 + v50[10]) = *(_BYTE *)(a2 + v50[10]);
    *(_BYTE *)(a1 + v50[11]) = *(_BYTE *)(a2 + v50[11]);
    *(void *)(a1 + v50[12]) = *(void *)(a2 + v50[12]);
    uint64_t v141 = v50[13];
    uint64_t v142 = (void *)(a1 + v141);
    uint64_t v143 = (void *)(a2 + v141);
    uint64_t v144 = v143[1];
    void *v142 = *v143;
    v142[1] = v144;
    uint64_t v145 = v143[3];
    v142[2] = v143[2];
    v142[3] = v145;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v146 = *(int *)(sub_5C28(&qword_76360) + 48);
    uint64_t v147 = (void *)(a1 + v146);
    uint64_t v148 = (void *)(a2 + v146);
    uint64_t v149 = v148[1];
    *uint64_t v147 = *v148;
    v147[1] = v149;
    goto LABEL_66;
  }

  uint64_t v20 = *(void *)(a2 + 8);
  if (v20)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v20;
    uint64_t v21 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v21;
    uint64_t v22 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v22;
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v27 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v27;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  }

  uint64_t v28 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v28;
  uint64_t v29 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v29;
  __int128 v30 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 120) = v30;
  uint64_t v31 = v30;
  uint64_t v32 = **(void (***)(uint64_t, uint64_t, uint64_t))(v30 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v32(a1 + 96, a2 + 96, v31);
  uint64_t v33 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v33;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  uint64_t v34 = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v34)
  {
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(void *)(a1 + 168) = v34;
    uint64_t v35 = *(void *)(a2 + 176);
    unint64_t v36 = *(void *)(a2 + 184);
    swift_bridgeObjectRetain();
    sub_F120(v35, v36);
    *(void *)(a1 + 176) = v35;
    *(void *)(a1 + 184) = v36;
    uint64_t v37 = *(void *)(a2 + 200);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(void *)(a1 + 200) = v37;
LABEL_66:
    swift_bridgeObjectRetain();
    goto LABEL_67;
  }

  __int128 v38 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v38;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
LABEL_67:
  swift_storeEnumTagMultiPayload(a1, v3, v7);
  return a1;
}

uint64_t _s19ChatResolutionErrorOwca(uint64_t a1, __int128 *a2, uint64_t a3)
{
  if ((__int128 *)a1 != a2)
  {
    sub_11324(a1, type metadata accessor for RCSServiceSession.ChatResolutionError);
    uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    uint64_t v7 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      char v11 = *((_BYTE *)a2 + 122);
      uint64_t v152 = a3;
      unsigned int v153 = 2;
      if ((v11 & 1) != 0)
      {
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *((void *)a2 + 1);
        *(void *)(a1 + 16) = *((void *)a2 + 2);
        *(void *)(a1 + 24) = *((void *)a2 + 3);
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        *(void *)(a1 + 40) = *((void *)a2 + 5);
        *(void *)(a1 + 48) = *((void *)a2 + 6);
        *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
        char v12 = *((_BYTE *)a2 + 121);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((v12 & 1) != 0)
        {
          uint64_t v13 = *((void *)a2 + 11);
          *(void *)(a1 + 88) = v13;
          *(void *)(a1 + 96) = *((void *)a2 + 12);
          (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 64, (uint64_t)(a2 + 4));
        }

        else
        {
          *(void *)(a1 + 64) = *((void *)a2 + 8);
          *(void *)(a1 + 72) = *((void *)a2 + 9);
          *(void *)(a1 + 80) = *((void *)a2 + 10);
          *(void *)(a1 + 88) = *((void *)a2 + 11);
          *(void *)(a1 + 96) = *((void *)a2 + 12);
          *(void *)(a1 + 104) = *((void *)a2 + 13);
          *(void *)(a1 + 112) = *((void *)a2 + 14);
          *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        *(_BYTE *)(a1 + 121) = v12;
      }

      else
      {
        char v16 = *((_BYTE *)a2 + 57);
        if ((v16 & 1) != 0)
        {
          uint64_t v17 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v17;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, __int128 *))(v17 - 8))(a1, a2);
        }

        else
        {
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = *((void *)a2 + 1);
          *(void *)(a1 + 16) = *((void *)a2 + 2);
          *(void *)(a1 + 24) = *((void *)a2 + 3);
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          *(void *)(a1 + 40) = *((void *)a2 + 5);
          *(void *)(a1 + 48) = *((void *)a2 + 6);
          *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        *(_BYTE *)(a1 + 57) = v16;
      }

      *(_BYTE *)(a1 + 122) = v11;
      *(void *)(a1 + 128) = *((void *)a2 + 16);
      *(void *)(a1 + 136) = *((void *)a2 + 17);
      *(void *)(a1 + 144) = *((void *)a2 + 18);
      *(void *)(a1 + 152) = *((void *)a2 + 19);
      uint64_t v28 = (int *)type metadata accessor for RCSMessage(0LL);
      uint64_t v41 = v28[7];
      uint64_t v42 = (void *)(a1 + v41);
      uint64_t v31 = (void *)((char *)a2 + v41);
      uint64_t v43 = type metadata accessor for RCSMessage.Content(0LL);
      uint64_t v44 = *(void *)(v43 - 8);
      uint64_t v45 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v44 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v45(v31, 1LL, v43))
      {
        uint64_t v151 = v44;
        switch(swift_getEnumCaseMultiPayload(v31, v43))
        {
          case 0u:
            uint64_t v46 = v42;
            *uint64_t v42 = *v31;
            v42[1] = v31[1];
            uint64_t v47 = v31[2];
            v42[2] = v47;
            swift_bridgeObjectRetain();
            swift_retain(v47);
            uint64_t v48 = v42;
            uint64_t v49 = v43;
            uint64_t v50 = 0LL;
            goto LABEL_71;
          case 1u:
            uint64_t v147 = v43;
            uint64_t v62 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
            uint64_t v63 = *(void *)(v62 - 8);
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v63 + 48))(v31, 1LL, v62))
            {
              uint64_t v64 = sub_5C28(&qword_76498);
              uint64_t v46 = v42;
              memcpy(v42, v31, *(void *)(*(void *)(v64 - 8) + 64LL));
            }

            else
            {
              uint64_t v46 = v42;
              *uint64_t v42 = *v31;
              v42[1] = v31[1];
              v42[2] = v31[2];
              uint64_t v112 = *(int *)(v62 + 24);
              uint64_t v113 = (char *)v42 + v112;
              uint64_t v146 = (char *)v31 + v112;
              uint64_t v114 = type metadata accessor for URL(0LL);
              uint64_t v143 = v63;
              uint64_t v115 = *(void (**)(char *, char *, uint64_t))(*(void *)(v114 - 8) + 16LL);
              swift_bridgeObjectRetain();
              v115(v113, v146, v114);
              uint64_t v116 = *(int *)(v62 + 28);
              uint64_t v117 = (char *)v42 + v116;
              uint64_t v118 = (char *)v31 + v116;
              uint64_t v119 = type metadata accessor for Date(0LL);
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v119 - 8) + 16LL))(v117, v118, v119);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v143 + 56))(v42, 0LL, 1LL, v62);
            }

            uint64_t v120 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
            uint64_t v121 = (void *)((char *)v46 + v120);
            uint64_t v122 = (char *)v31 + v120;
            *uint64_t v121 = *(void *)((char *)v31 + v120);
            v121[1] = *(void *)((char *)v31 + v120 + 8);
            v121[2] = *(void *)((char *)v31 + v120 + 16);
            v121[3] = *(void *)((char *)v31 + v120 + 24);
            v121[4] = *(void *)((char *)v31 + v120 + 32);
            uint64_t v123 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
            uint64_t v124 = v123[7];
            uint64_t v141 = &v122[v124];
            uint64_t v144 = (char *)v121 + v124;
            uint64_t v125 = type metadata accessor for URL(0LL);
            uint64_t v126 = *(void (**)(char *, char *, uint64_t))(*(void *)(v125 - 8) + 16LL);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v126(v144, v141, v125);
            uint64_t v127 = v123[8];
            uint64_t v128 = (char *)v121 + v127;
            uint64_t v129 = &v122[v127];
            uint64_t v130 = type metadata accessor for Date(0LL);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v130 - 8) + 16LL))(v128, v129, v130);
            *((_BYTE *)v121 + v123[9]) = v122[v123[9]];
            uint64_t v131 = v123[10];
            uint64_t v132 = (char *)v121 + v131;
            uint64_t v133 = &v122[v131];
            char v134 = v133[8];
            *(void *)uint64_t v132 = *(void *)v133;
            v132[8] = v134;
            uint64_t v135 = *(int *)(sub_5C28(&qword_764A0) + 48);
            uint64_t v136 = *(void *)((char *)v31 + v135);
            *(void *)((char *)v46 + v135) = v136;
            swift_retain(v136);
            uint64_t v48 = v46;
            uint64_t v43 = v147;
            uint64_t v49 = v147;
            uint64_t v50 = 1LL;
            goto LABEL_71;
          case 2u:
            uint64_t v46 = v42;
            *uint64_t v42 = *v31;
            v42[1] = v31[1];
            v42[2] = v31[2];
            v42[3] = v31[3];
            uint64_t v65 = v31[4];
            v42[4] = v65;
            swift_bridgeObjectRetain();
            swift_retain(v65);
            uint64_t v48 = v42;
            uint64_t v49 = v43;
            uint64_t v50 = 2LL;
            goto LABEL_71;
          case 3u:
            uint64_t v66 = v31[3];
            uint64_t v46 = v42;
            v42[3] = v66;
            v42[4] = v31[4];
            (**(void (***)(void *, void *))(v66 - 8))(v42, v31);
            v42[5] = v31[5];
            v42[6] = v31[6];
            v42[7] = v31[7];
            uint64_t v67 = v31[9];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v67)
            {
              v42[8] = v31[8];
              v42[9] = v31[9];
              uint64_t v68 = v43;
              uint64_t v69 = v31[10];
              unint64_t v70 = v31[11];
              swift_bridgeObjectRetain();
              sub_F120(v69, v70);
              v42[10] = v69;
              v42[11] = v70;
              uint64_t v43 = v68;
              v42[12] = v31[12];
              v42[13] = v31[13];
              swift_bridgeObjectRetain();
            }

            else
            {
              __int128 v137 = *((_OWORD *)v31 + 4);
              __int128 v138 = *((_OWORD *)v31 + 6);
              *((_OWORD *)v42 + 5) = *((_OWORD *)v31 + 5);
              *((_OWORD *)v42 + 6) = v138;
              *((_OWORD *)v42 + 4) = v137;
            }

            uint64_t v71 = v151;
            a3 = v152;
            uint64_t v7 = v7;
            swift_storeEnumTagMultiPayload(v42, v43, 3LL);
            goto LABEL_73;
          case 5u:
            uint64_t v72 = *v31;
            uint64_t v46 = v42;
            *uint64_t v42 = *v31;
            swift_retain(v72);
            uint64_t v48 = v42;
            uint64_t v49 = v43;
            uint64_t v50 = 5LL;
            goto LABEL_71;
          case 6u:
            uint64_t v73 = *v31;
            uint64_t v46 = v42;
            *uint64_t v42 = *v31;
            swift_retain(v73);
            uint64_t v48 = v42;
            uint64_t v49 = v43;
            uint64_t v50 = 6LL;
            goto LABEL_71;
          case 7u:
            uint64_t v74 = *v31;
            uint64_t v46 = v42;
            *uint64_t v42 = *v31;
            swift_retain(v74);
            uint64_t v48 = v42;
            uint64_t v49 = v43;
            uint64_t v50 = 7LL;
LABEL_71:
            swift_storeEnumTagMultiPayload(v48, v49, v50);
            uint64_t v71 = v151;
            a3 = v152;
            break;
          default:
            uint64_t v71 = v44;
            uint64_t v46 = v42;
            memcpy(v42, v31, *(void *)(v151 + 64));
            a3 = v152;
            break;
        }

        uint64_t v7 = 2LL;
LABEL_73:
        (*(void (**)(void *, void, uint64_t, uint64_t))(v71 + 56))(v46, 0LL, 1LL, v43);
        goto LABEL_60;
      }

      size_t v35 = *(void *)(*(void *)(sub_5C28(&qword_76228) - 8) + 64LL);
      unint64_t v36 = v42;
    }

    else
    {
      if ((_DWORD)EnumCaseMultiPayload != 1)
      {
        if (*((void *)a2 + 1))
        {
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = *((void *)a2 + 1);
          *(void *)(a1 + 16) = *((void *)a2 + 2);
          *(void *)(a1 + 24) = *((void *)a2 + 3);
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          *(void *)(a1 + 40) = *((void *)a2 + 5);
          *(void *)(a1 + 48) = *((void *)a2 + 6);
          *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        else
        {
          __int128 v18 = *a2;
          __int128 v19 = a2[1];
          __int128 v20 = a2[2];
          *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
          *(_OWORD *)(a1 + 16) = v19;
          *(_OWORD *)(a1 + 32) = v20;
          *(_OWORD *)a1 = v18;
        }

        *(void *)(a1 + 64) = *((void *)a2 + 8);
        *(void *)(a1 + 72) = *((void *)a2 + 9);
        *(void *)(a1 + 80) = *((void *)a2 + 10);
        *(void *)(a1 + 88) = *((void *)a2 + 11);
        uint64_t v21 = *((void *)a2 + 15);
        *(void *)(a1 + 120) = v21;
        *(void *)(a1 + 128) = *((void *)a2 + 16);
        uint64_t v22 = **(void (***)(uint64_t, __int128 *, uint64_t))(v21 - 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v22(a1 + 96, a2 + 6, v21);
        *(void *)(a1 + 136) = *((void *)a2 + 17);
        *(void *)(a1 + 144) = *((void *)a2 + 18);
        *(void *)(a1 + 152) = *((void *)a2 + 19);
        uint64_t v23 = *((void *)a2 + 21);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (!v23)
        {
          __int128 v26 = a2[10];
          __int128 v27 = a2[12];
          *(_OWORD *)(a1 + 176) = a2[11];
          *(_OWORD *)(a1 + 192) = v27;
          *(_OWORD *)(a1 + 160) = v26;
LABEL_65:
          swift_storeEnumTagMultiPayload(a1, a3, v7);
          return a1;
        }

        *(void *)(a1 + 160) = *((void *)a2 + 20);
        *(void *)(a1 + 168) = *((void *)a2 + 21);
        uint64_t v24 = *((void *)a2 + 22);
        unint64_t v25 = *((void *)a2 + 23);
        swift_bridgeObjectRetain();
        sub_F120(v24, v25);
        *(void *)(a1 + 176) = v24;
        *(void *)(a1 + 184) = v25;
        *(void *)(a1 + 192) = *((void *)a2 + 24);
        *(void *)(a1 + 200) = *((void *)a2 + 25);
LABEL_64:
        swift_bridgeObjectRetain();
        goto LABEL_65;
      }

      char v8 = *((_BYTE *)a2 + 122);
      uint64_t v152 = a3;
      unsigned int v153 = 1;
      if ((v8 & 1) != 0)
      {
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *((void *)a2 + 1);
        *(void *)(a1 + 16) = *((void *)a2 + 2);
        *(void *)(a1 + 24) = *((void *)a2 + 3);
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        *(void *)(a1 + 40) = *((void *)a2 + 5);
        *(void *)(a1 + 48) = *((void *)a2 + 6);
        *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
        char v9 = *((_BYTE *)a2 + 121);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((v9 & 1) != 0)
        {
          uint64_t v10 = *((void *)a2 + 11);
          *(void *)(a1 + 88) = v10;
          *(void *)(a1 + 96) = *((void *)a2 + 12);
          (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 64, (uint64_t)(a2 + 4));
        }

        else
        {
          *(void *)(a1 + 64) = *((void *)a2 + 8);
          *(void *)(a1 + 72) = *((void *)a2 + 9);
          *(void *)(a1 + 80) = *((void *)a2 + 10);
          *(void *)(a1 + 88) = *((void *)a2 + 11);
          *(void *)(a1 + 96) = *((void *)a2 + 12);
          *(void *)(a1 + 104) = *((void *)a2 + 13);
          *(void *)(a1 + 112) = *((void *)a2 + 14);
          *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        *(_BYTE *)(a1 + 121) = v9;
      }

      else
      {
        char v14 = *((_BYTE *)a2 + 57);
        if ((v14 & 1) != 0)
        {
          uint64_t v15 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v15;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, __int128 *))(v15 - 8))(a1, a2);
        }

        else
        {
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = *((void *)a2 + 1);
          *(void *)(a1 + 16) = *((void *)a2 + 2);
          *(void *)(a1 + 24) = *((void *)a2 + 3);
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          *(void *)(a1 + 40) = *((void *)a2 + 5);
          *(void *)(a1 + 48) = *((void *)a2 + 6);
          *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        *(_BYTE *)(a1 + 57) = v14;
      }

      *(_BYTE *)(a1 + 122) = v8;
      *(void *)(a1 + 128) = *((void *)a2 + 16);
      *(void *)(a1 + 136) = *((void *)a2 + 17);
      *(void *)(a1 + 144) = *((void *)a2 + 18);
      *(void *)(a1 + 152) = *((void *)a2 + 19);
      uint64_t v28 = (int *)type metadata accessor for RCSMessage(0LL);
      uint64_t v29 = v28[7];
      __int128 v30 = (void *)(a1 + v29);
      uint64_t v31 = (void *)((char *)a2 + v29);
      uint64_t v32 = type metadata accessor for RCSMessage.Content(0LL);
      uint64_t v33 = *(void *)(v32 - 8);
      uint64_t v34 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v33 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v34(v31, 1LL, v32))
      {
        uint64_t v150 = v33;
        switch(swift_getEnumCaseMultiPayload(v31, v32))
        {
          case 0u:
            *__int128 v30 = *v31;
            v30[1] = v31[1];
            uint64_t v37 = v31[2];
            v30[2] = v37;
            swift_bridgeObjectRetain();
            swift_retain(v37);
            __int128 v38 = v30;
            uint64_t v39 = v32;
            uint64_t v40 = 0LL;
            goto LABEL_57;
          case 1u:
            uint64_t v51 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
            uint64_t v52 = *(void *)(v51 - 8);
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v52 + 48))(v31, 1LL, v51))
            {
              uint64_t v53 = sub_5C28(&qword_76498);
              memcpy(v30, v31, *(void *)(*(void *)(v53 - 8) + 64LL));
            }

            else
            {
              *__int128 v30 = *v31;
              v30[1] = v31[1];
              v30[2] = v31[2];
              uint64_t v75 = *(int *)(v51 + 24);
              uint64_t v145 = (char *)v31 + v75;
              uint64_t v148 = (char *)v30 + v75;
              uint64_t v76 = type metadata accessor for URL(0LL);
              uint64_t v77 = *(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 16LL);
              swift_bridgeObjectRetain();
              v77(v148, v145, v76);
              uint64_t v78 = *(int *)(v51 + 28);
              uint64_t v79 = (char *)v30 + v78;
              uint64_t v80 = (char *)v31 + v78;
              uint64_t v81 = type metadata accessor for Date(0LL);
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v81 - 8) + 16LL))(v79, v80, v81);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v52 + 56))(v30, 0LL, 1LL, v51);
            }

            uint64_t v82 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
            uint64_t v83 = (void *)((char *)v30 + v82);
            uint64_t v84 = (char *)v31 + v82;
            *uint64_t v83 = *(void *)((char *)v31 + v82);
            v83[1] = *(void *)((char *)v31 + v82 + 8);
            _OWORD v83[2] = *(void *)((char *)v31 + v82 + 16);
            v83[3] = *(void *)((char *)v31 + v82 + 24);
            v83[4] = *(void *)((char *)v31 + v82 + 32);
            uint64_t v85 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
            uint64_t v86 = v85[7];
            __int128 v140 = &v84[v86];
            uint64_t v142 = (char *)v83 + v86;
            uint64_t v87 = type metadata accessor for URL(0LL);
            uint64_t v139 = *(void (**)(char *, char *, uint64_t))(*(void *)(v87 - 8) + 16LL);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v139(v142, v140, v87);
            uint64_t v88 = v85[8];
            unint64_t v89 = (char *)v83 + v88;
            uint64_t v149 = &v84[v88];
            uint64_t v90 = type metadata accessor for Date(0LL);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v90 - 8) + 16LL))(v89, v149, v90);
            *((_BYTE *)v83 + v85[9]) = v84[v85[9]];
            uint64_t v91 = v85[10];
            uint64_t v92 = (char *)v83 + v91;
            uint64_t v93 = &v84[v91];
            char v94 = v93[8];
            *(void *)uint64_t v92 = *(void *)v93;
            v92[8] = v94;
            uint64_t v95 = *(int *)(sub_5C28(&qword_764A0) + 48);
            uint64_t v96 = *(void *)((char *)v31 + v95);
            *(void *)((char *)v30 + v95) = v96;
            swift_retain(v96);
            __int128 v38 = v30;
            uint64_t v39 = v32;
            uint64_t v40 = 1LL;
            goto LABEL_57;
          case 2u:
            *__int128 v30 = *v31;
            v30[1] = v31[1];
            v30[2] = v31[2];
            v30[3] = v31[3];
            uint64_t v54 = v31[4];
            v30[4] = v54;
            swift_bridgeObjectRetain();
            swift_retain(v54);
            __int128 v38 = v30;
            uint64_t v39 = v32;
            uint64_t v40 = 2LL;
            goto LABEL_57;
          case 3u:
            uint64_t v55 = v31[3];
            v30[3] = v55;
            v30[4] = v31[4];
            (**(void (***)(void *, void *))(v55 - 8))(v30, v31);
            v30[5] = v31[5];
            v30[6] = v31[6];
            v30[7] = v31[7];
            uint64_t v56 = v31[9];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v56)
            {
              v30[8] = v31[8];
              v30[9] = v31[9];
              uint64_t v57 = v31[10];
              unint64_t v58 = v31[11];
              swift_bridgeObjectRetain();
              sub_F120(v57, v58);
              v30[10] = v57;
              v30[11] = v58;
              v30[12] = v31[12];
              v30[13] = v31[13];
              swift_bridgeObjectRetain();
            }

            else
            {
              __int128 v110 = *((_OWORD *)v31 + 4);
              __int128 v111 = *((_OWORD *)v31 + 6);
              *((_OWORD *)v30 + 5) = *((_OWORD *)v31 + 5);
              *((_OWORD *)v30 + 6) = v111;
              *((_OWORD *)v30 + 4) = v110;
            }

            a3 = v152;
            swift_storeEnumTagMultiPayload(v30, v32, 3LL);
            break;
          case 5u:
            uint64_t v59 = *v31;
            *__int128 v30 = *v31;
            swift_retain(v59);
            __int128 v38 = v30;
            uint64_t v39 = v32;
            uint64_t v40 = 5LL;
            goto LABEL_57;
          case 6u:
            uint64_t v60 = *v31;
            *__int128 v30 = *v31;
            swift_retain(v60);
            __int128 v38 = v30;
            uint64_t v39 = v32;
            uint64_t v40 = 6LL;
            goto LABEL_57;
          case 7u:
            uint64_t v61 = *v31;
            *__int128 v30 = *v31;
            swift_retain(v61);
            __int128 v38 = v30;
            uint64_t v39 = v32;
            uint64_t v40 = 7LL;
LABEL_57:
            swift_storeEnumTagMultiPayload(v38, v39, v40);
            uint64_t v33 = v150;
            a3 = v152;
            break;
          default:
            memcpy(v30, v31, *(void *)(v33 + 64));
            a3 = v152;
            break;
        }

        (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0LL, 1LL, v32);
        goto LABEL_59;
      }

      size_t v35 = *(void *)(*(void *)(sub_5C28(&qword_76228) - 8) + 64LL);
      unint64_t v36 = v30;
    }

    memcpy(v36, v31, v35);
    a3 = v152;
LABEL_59:
    uint64_t v7 = v153;
LABEL_60:
    uint64_t v97 = v28[8];
    uint64_t v98 = a1 + v97;
    uint64_t v99 = (__int128 *)((char *)a2 + v97);
    uint64_t v100 = *(void *)((char *)a2 + v97 + 24);
    if (v100)
    {
      *(void *)(v98 + 24) = v100;
      *(void *)(v98 + 32) = *((void *)v99 + 4);
      (**(void (***)(void))(v100 - 8))();
    }

    else
    {
      __int128 v101 = *v99;
      __int128 v102 = v99[1];
      *(void *)(v98 + 32) = *((void *)v99 + 4);
      *(_OWORD *)uint64_t v98 = v101;
      *(_OWORD *)(v98 + 16) = v102;
    }

    *(void *)(a1 + v28[9]) = *(void *)((char *)a2 + v28[9]);
    *(_BYTE *)(a1 + v28[10]) = *((_BYTE *)a2 + v28[10]);
    *(_BYTE *)(a1 + v28[11]) = *((_BYTE *)a2 + v28[11]);
    *(void *)(a1 + v28[12]) = *(void *)((char *)a2 + v28[12]);
    uint64_t v103 = v28[13];
    uint64_t v104 = (void *)(a1 + v103);
    uint64_t v105 = (void *)((char *)a2 + v103);
    *uint64_t v104 = *v105;
    v104[1] = v105[1];
    v104[2] = v105[2];
    v104[3] = v105[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v106 = *(int *)(sub_5C28(&qword_76360) + 48);
    uint64_t v107 = (void *)(a1 + v106);
    uint64_t v108 = (void *)((char *)a2 + v106);
    *uint64_t v107 = *v108;
    v107[1] = v108[1];
    goto LABEL_64;
  }

  return a1;
}

uint64_t sub_11324(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

_OWORD *_s19ChatResolutionErrorOwtk(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    __int128 v18 = a2[5];
    a1[4] = a2[4];
    a1[5] = v18;
    a1[6] = a2[6];
    *(_OWORD *)((char *)a1 + 107) = *(_OWORD *)((char *)a2 + 107);
    __int128 v19 = a2[1];
    *a1 = *a2;
    a1[1] = v19;
    __int128 v20 = a2[3];
    a1[2] = a2[2];
    a1[3] = v20;
    __int128 v21 = a2[9];
    a1[8] = a2[8];
    a1[9] = v21;
    uint64_t v22 = (int *)type metadata accessor for RCSMessage(0LL);
    uint64_t v23 = v22[7];
    uint64_t v24 = (void *)((char *)a1 + v23);
    unint64_t v25 = (void *)((char *)a2 + v23);
    uint64_t v26 = type metadata accessor for RCSMessage.Content(0LL);
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26))
    {
      uint64_t v28 = sub_5C28(&qword_76228);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
    }

    else
    {
      if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
      {
        uint64_t v106 = v27;
        uint64_t v32 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
        uint64_t v33 = *(void *)(v32 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v33 + 48))(v25, 1LL, v32))
        {
          uint64_t v34 = sub_5C28(&qword_76498);
          memcpy(v24, v25, *(void *)(*(void *)(v34 - 8) + 64LL));
        }

        else
        {
          *uint64_t v24 = *v25;
          *(_OWORD *)(v24 + 1) = *(_OWORD *)(v25 + 1);
          uint64_t v65 = *(int *)(v32 + 24);
          uint64_t v66 = (char *)v24 + v65;
          __int128 v101 = (char *)v25 + v65;
          uint64_t v67 = type metadata accessor for URL(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 32LL))(v66, v101, v67);
          uint64_t v68 = *(int *)(v32 + 28);
          uint64_t v69 = (char *)v24 + v68;
          __int128 v102 = (char *)v25 + v68;
          uint64_t v70 = type metadata accessor for Date(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v70 - 8) + 32LL))(v69, v102, v70);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v24, 0LL, 1LL, v32);
        }

        uint64_t v71 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
        uint64_t v72 = (char *)v24 + v71;
        uint64_t v73 = (char *)v25 + v71;
        *(void *)uint64_t v72 = *(void *)((char *)v25 + v71);
        *(_OWORD *)(v72 + 8) = *(_OWORD *)((char *)v25 + v71 + 8);
        *(_OWORD *)(v72 + 24) = *(_OWORD *)((char *)v25 + v71 + 24);
        uint64_t v74 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
        uint64_t v75 = v74[7];
        uint64_t v95 = &v73[v75];
        uint64_t v103 = &v72[v75];
        uint64_t v76 = type metadata accessor for URL(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 32LL))(v103, v95, v76);
        uint64_t v77 = v74[8];
        uint64_t v96 = &v73[v77];
        uint64_t v104 = &v72[v77];
        uint64_t v78 = type metadata accessor for Date(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v78 - 8) + 32LL))(v104, v96, v78);
        v72[v74[9]] = v73[v74[9]];
        uint64_t v79 = v74[10];
        uint64_t v80 = &v72[v79];
        uint64_t v81 = &v73[v79];
        v80[8] = v81[8];
        *(void *)uint64_t v80 = *(void *)v81;
        uint64_t v82 = sub_5C28(&qword_764A0);
        *(void *)((char *)v24 + *(int *)(v82 + 48)) = *(void *)((char *)v25 + *(int *)(v82 + 48));
        swift_storeEnumTagMultiPayload(v24, v26, 1LL);
        uint64_t v27 = v106;
      }

      else
      {
        memcpy(v24, v25, *(void *)(v27 + 64));
      }

      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
    }

    uint64_t v83 = v22[8];
    uint64_t v84 = (char *)a1 + v83;
    uint64_t v85 = (char *)a2 + v83;
    __int128 v86 = *((_OWORD *)v85 + 1);
    *(_OWORD *)uint64_t v84 = *(_OWORD *)v85;
    *((_OWORD *)v84 + 1) = v86;
    *((void *)v84 + 4) = *((void *)v85 + 4);
    *(void *)((char *)a1 + v22[9]) = *(void *)((char *)a2 + v22[9]);
    *((_BYTE *)a1 + v22[10]) = *((_BYTE *)a2 + v22[10]);
    *((_BYTE *)a1 + v22[11]) = *((_BYTE *)a2 + v22[11]);
    *(void *)((char *)a1 + v22[12]) = *(void *)((char *)a2 + v22[12]);
    uint64_t v87 = v22[13];
    uint64_t v88 = (_OWORD *)((char *)a1 + v87);
    unint64_t v89 = (_OWORD *)((char *)a2 + v87);
    __int128 v90 = v89[1];
    *uint64_t v88 = *v89;
    v88[1] = v90;
    uint64_t v91 = sub_5C28(&qword_76360);
    *(_OWORD *)((char *)a1 + *(int *)(v91 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v91 + 48));
    uint64_t v62 = a1;
    uint64_t v63 = a3;
    uint64_t v64 = 2LL;
    goto LABEL_24;
  }

  if (EnumCaseMultiPayload == 1)
  {
    __int128 v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    a1[6] = a2[6];
    *(_OWORD *)((char *)a1 + 107) = *(_OWORD *)((char *)a2 + 107);
    __int128 v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    __int128 v9 = a2[3];
    a1[2] = a2[2];
    a1[3] = v9;
    __int128 v10 = a2[9];
    a1[8] = a2[8];
    a1[9] = v10;
    char v11 = (int *)type metadata accessor for RCSMessage(0LL);
    uint64_t v12 = v11[7];
    uint64_t v13 = (void *)((char *)a1 + v12);
    char v14 = (void *)((char *)a2 + v12);
    uint64_t v15 = type metadata accessor for RCSMessage.Content(0LL);
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
    {
      uint64_t v17 = sub_5C28(&qword_76228);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
      {
        uint64_t v105 = v16;
        uint64_t v29 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
        uint64_t v30 = *(void *)(v29 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v30 + 48))(v14, 1LL, v29))
        {
          uint64_t v31 = sub_5C28(&qword_76498);
          memcpy(v13, v14, *(void *)(*(void *)(v31 - 8) + 64LL));
        }

        else
        {
          *uint64_t v13 = *v14;
          *(_OWORD *)(v13 + 1) = *(_OWORD *)(v14 + 1);
          uint64_t v35 = *(int *)(v29 + 24);
          unint64_t v36 = (char *)v13 + v35;
          uint64_t v97 = (char *)v14 + v35;
          uint64_t v37 = type metadata accessor for URL(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32LL))(v36, v97, v37);
          uint64_t v38 = *(int *)(v29 + 28);
          uint64_t v39 = (char *)v13 + v38;
          uint64_t v98 = (char *)v14 + v38;
          uint64_t v40 = type metadata accessor for Date(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32LL))(v39, v98, v40);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v13, 0LL, 1LL, v29);
        }

        uint64_t v41 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
        uint64_t v42 = (char *)v13 + v41;
        uint64_t v43 = (char *)v14 + v41;
        *(void *)uint64_t v42 = *(void *)((char *)v14 + v41);
        *(_OWORD *)(v42 + 8) = *(_OWORD *)((char *)v14 + v41 + 8);
        *(_OWORD *)(v42 + 24) = *(_OWORD *)((char *)v14 + v41 + 24);
        uint64_t v44 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
        uint64_t v45 = v44[7];
        uint64_t v93 = &v43[v45];
        uint64_t v99 = &v42[v45];
        uint64_t v46 = type metadata accessor for URL(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 32LL))(v99, v93, v46);
        uint64_t v47 = v44[8];
        char v94 = &v43[v47];
        uint64_t v100 = &v42[v47];
        uint64_t v48 = type metadata accessor for Date(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 32LL))(v100, v94, v48);
        v42[v44[9]] = v43[v44[9]];
        uint64_t v49 = v44[10];
        uint64_t v50 = &v42[v49];
        uint64_t v51 = &v43[v49];
        v50[8] = v51[8];
        *(void *)uint64_t v50 = *(void *)v51;
        uint64_t v52 = sub_5C28(&qword_764A0);
        *(void *)((char *)v13 + *(int *)(v52 + 48)) = *(void *)((char *)v14 + *(int *)(v52 + 48));
        swift_storeEnumTagMultiPayload(v13, v15, 1LL);
        uint64_t v16 = v105;
      }

      else
      {
        memcpy(v13, v14, *(void *)(v16 + 64));
      }

      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
    }

    uint64_t v53 = v11[8];
    uint64_t v54 = (char *)a1 + v53;
    uint64_t v55 = (char *)a2 + v53;
    __int128 v56 = *((_OWORD *)v55 + 1);
    *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
    *((_OWORD *)v54 + 1) = v56;
    *((void *)v54 + 4) = *((void *)v55 + 4);
    *(void *)((char *)a1 + v11[9]) = *(void *)((char *)a2 + v11[9]);
    *((_BYTE *)a1 + v11[10]) = *((_BYTE *)a2 + v11[10]);
    *((_BYTE *)a1 + v11[11]) = *((_BYTE *)a2 + v11[11]);
    *(void *)((char *)a1 + v11[12]) = *(void *)((char *)a2 + v11[12]);
    uint64_t v57 = v11[13];
    unint64_t v58 = (_OWORD *)((char *)a1 + v57);
    uint64_t v59 = (_OWORD *)((char *)a2 + v57);
    __int128 v60 = v59[1];
    *unint64_t v58 = *v59;
    v58[1] = v60;
    uint64_t v61 = sub_5C28(&qword_76360);
    *(_OWORD *)((char *)a1 + *(int *)(v61 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v61 + 48));
    uint64_t v62 = a1;
    uint64_t v63 = a3;
    uint64_t v64 = 1LL;
LABEL_24:
    swift_storeEnumTagMultiPayload(v62, v63, v64);
    return a1;
  }

  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  return a1;
}

_OWORD *_s19ChatResolutionErrorOwta(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_11324((uint64_t)a1, type metadata accessor for RCSServiceSession.ChatResolutionError);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      __int128 v18 = a2[5];
      a1[4] = a2[4];
      a1[5] = v18;
      a1[6] = a2[6];
      *(_OWORD *)((char *)a1 + 107) = *(_OWORD *)((char *)a2 + 107);
      __int128 v19 = a2[1];
      *a1 = *a2;
      a1[1] = v19;
      __int128 v20 = a2[3];
      a1[2] = a2[2];
      a1[3] = v20;
      __int128 v21 = a2[9];
      a1[8] = a2[8];
      a1[9] = v21;
      uint64_t v22 = (int *)type metadata accessor for RCSMessage(0LL);
      uint64_t v23 = v22[7];
      uint64_t v24 = (void *)((char *)a1 + v23);
      unint64_t v25 = (void *)((char *)a2 + v23);
      uint64_t v26 = type metadata accessor for RCSMessage.Content(0LL);
      uint64_t v27 = *(void *)(v26 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26))
      {
        uint64_t v28 = sub_5C28(&qword_76228);
        memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
      }

      else
      {
        if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
        {
          uint64_t v106 = v27;
          uint64_t v32 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
          uint64_t v33 = *(void *)(v32 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v33 + 48))(v25, 1LL, v32))
          {
            uint64_t v34 = sub_5C28(&qword_76498);
            memcpy(v24, v25, *(void *)(*(void *)(v34 - 8) + 64LL));
          }

          else
          {
            *uint64_t v24 = *v25;
            *(_OWORD *)(v24 + 1) = *(_OWORD *)(v25 + 1);
            uint64_t v65 = *(int *)(v32 + 24);
            uint64_t v66 = (char *)v24 + v65;
            __int128 v101 = (char *)v25 + v65;
            uint64_t v67 = type metadata accessor for URL(0LL);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 32LL))(v66, v101, v67);
            uint64_t v68 = *(int *)(v32 + 28);
            uint64_t v69 = (char *)v24 + v68;
            __int128 v102 = (char *)v25 + v68;
            uint64_t v70 = type metadata accessor for Date(0LL);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v70 - 8) + 32LL))(v69, v102, v70);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v24, 0LL, 1LL, v32);
          }

          uint64_t v71 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
          uint64_t v72 = (char *)v24 + v71;
          uint64_t v73 = (char *)v25 + v71;
          *(void *)uint64_t v72 = *(void *)((char *)v25 + v71);
          *(_OWORD *)(v72 + 8) = *(_OWORD *)((char *)v25 + v71 + 8);
          *(_OWORD *)(v72 + 24) = *(_OWORD *)((char *)v25 + v71 + 24);
          uint64_t v74 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
          uint64_t v75 = v74[7];
          uint64_t v95 = &v73[v75];
          uint64_t v103 = &v72[v75];
          uint64_t v76 = type metadata accessor for URL(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 32LL))(v103, v95, v76);
          uint64_t v77 = v74[8];
          uint64_t v96 = &v73[v77];
          uint64_t v104 = &v72[v77];
          uint64_t v78 = type metadata accessor for Date(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v78 - 8) + 32LL))(v104, v96, v78);
          v72[v74[9]] = v73[v74[9]];
          uint64_t v79 = v74[10];
          uint64_t v80 = &v72[v79];
          uint64_t v81 = &v73[v79];
          v80[8] = v81[8];
          *(void *)uint64_t v80 = *(void *)v81;
          uint64_t v82 = sub_5C28(&qword_764A0);
          *(void *)((char *)v24 + *(int *)(v82 + 48)) = *(void *)((char *)v25 + *(int *)(v82 + 48));
          swift_storeEnumTagMultiPayload(v24, v26, 1LL);
          uint64_t v27 = v106;
        }

        else
        {
          memcpy(v24, v25, *(void *)(v27 + 64));
        }

        (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
      }

      uint64_t v83 = v22[8];
      uint64_t v84 = (char *)a1 + v83;
      uint64_t v85 = (char *)a2 + v83;
      __int128 v86 = *((_OWORD *)v85 + 1);
      *(_OWORD *)uint64_t v84 = *(_OWORD *)v85;
      *((_OWORD *)v84 + 1) = v86;
      *((void *)v84 + 4) = *((void *)v85 + 4);
      *(void *)((char *)a1 + v22[9]) = *(void *)((char *)a2 + v22[9]);
      *((_BYTE *)a1 + v22[10]) = *((_BYTE *)a2 + v22[10]);
      *((_BYTE *)a1 + v22[11]) = *((_BYTE *)a2 + v22[11]);
      *(void *)((char *)a1 + v22[12]) = *(void *)((char *)a2 + v22[12]);
      uint64_t v87 = v22[13];
      uint64_t v88 = (_OWORD *)((char *)a1 + v87);
      unint64_t v89 = (_OWORD *)((char *)a2 + v87);
      __int128 v90 = v89[1];
      *uint64_t v88 = *v89;
      v88[1] = v90;
      uint64_t v91 = sub_5C28(&qword_76360);
      *(_OWORD *)((char *)a1 + *(int *)(v91 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v91 + 48));
      uint64_t v62 = a1;
      uint64_t v63 = a3;
      uint64_t v64 = 2LL;
      goto LABEL_25;
    }

    if (EnumCaseMultiPayload == 1)
    {
      __int128 v7 = a2[5];
      a1[4] = a2[4];
      a1[5] = v7;
      a1[6] = a2[6];
      *(_OWORD *)((char *)a1 + 107) = *(_OWORD *)((char *)a2 + 107);
      __int128 v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      __int128 v9 = a2[3];
      a1[2] = a2[2];
      a1[3] = v9;
      __int128 v10 = a2[9];
      a1[8] = a2[8];
      a1[9] = v10;
      char v11 = (int *)type metadata accessor for RCSMessage(0LL);
      uint64_t v12 = v11[7];
      uint64_t v13 = (void *)((char *)a1 + v12);
      char v14 = (void *)((char *)a2 + v12);
      uint64_t v15 = type metadata accessor for RCSMessage.Content(0LL);
      uint64_t v16 = *(void *)(v15 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15))
      {
        uint64_t v17 = sub_5C28(&qword_76228);
        memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
      }

      else
      {
        if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
        {
          uint64_t v105 = v16;
          uint64_t v29 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
          uint64_t v30 = *(void *)(v29 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v30 + 48))(v14, 1LL, v29))
          {
            uint64_t v31 = sub_5C28(&qword_76498);
            memcpy(v13, v14, *(void *)(*(void *)(v31 - 8) + 64LL));
          }

          else
          {
            *uint64_t v13 = *v14;
            *(_OWORD *)(v13 + 1) = *(_OWORD *)(v14 + 1);
            uint64_t v35 = *(int *)(v29 + 24);
            unint64_t v36 = (char *)v13 + v35;
            uint64_t v97 = (char *)v14 + v35;
            uint64_t v37 = type metadata accessor for URL(0LL);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32LL))(v36, v97, v37);
            uint64_t v38 = *(int *)(v29 + 28);
            uint64_t v39 = (char *)v13 + v38;
            uint64_t v98 = (char *)v14 + v38;
            uint64_t v40 = type metadata accessor for Date(0LL);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32LL))(v39, v98, v40);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v13, 0LL, 1LL, v29);
          }

          uint64_t v41 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
          uint64_t v42 = (char *)v13 + v41;
          uint64_t v43 = (char *)v14 + v41;
          *(void *)uint64_t v42 = *(void *)((char *)v14 + v41);
          *(_OWORD *)(v42 + 8) = *(_OWORD *)((char *)v14 + v41 + 8);
          *(_OWORD *)(v42 + 24) = *(_OWORD *)((char *)v14 + v41 + 24);
          uint64_t v44 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
          uint64_t v45 = v44[7];
          uint64_t v93 = &v43[v45];
          uint64_t v99 = &v42[v45];
          uint64_t v46 = type metadata accessor for URL(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 32LL))(v99, v93, v46);
          uint64_t v47 = v44[8];
          char v94 = &v43[v47];
          uint64_t v100 = &v42[v47];
          uint64_t v48 = type metadata accessor for Date(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 32LL))(v100, v94, v48);
          v42[v44[9]] = v43[v44[9]];
          uint64_t v49 = v44[10];
          uint64_t v50 = &v42[v49];
          uint64_t v51 = &v43[v49];
          v50[8] = v51[8];
          *(void *)uint64_t v50 = *(void *)v51;
          uint64_t v52 = sub_5C28(&qword_764A0);
          *(void *)((char *)v13 + *(int *)(v52 + 48)) = *(void *)((char *)v14 + *(int *)(v52 + 48));
          swift_storeEnumTagMultiPayload(v13, v15, 1LL);
          uint64_t v16 = v105;
        }

        else
        {
          memcpy(v13, v14, *(void *)(v16 + 64));
        }

        (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
      }

      uint64_t v53 = v11[8];
      uint64_t v54 = (char *)a1 + v53;
      uint64_t v55 = (char *)a2 + v53;
      __int128 v56 = *((_OWORD *)v55 + 1);
      *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
      *((_OWORD *)v54 + 1) = v56;
      *((void *)v54 + 4) = *((void *)v55 + 4);
      *(void *)((char *)a1 + v11[9]) = *(void *)((char *)a2 + v11[9]);
      *((_BYTE *)a1 + v11[10]) = *((_BYTE *)a2 + v11[10]);
      *((_BYTE *)a1 + v11[11]) = *((_BYTE *)a2 + v11[11]);
      *(void *)((char *)a1 + v11[12]) = *(void *)((char *)a2 + v11[12]);
      uint64_t v57 = v11[13];
      unint64_t v58 = (_OWORD *)((char *)a1 + v57);
      uint64_t v59 = (_OWORD *)((char *)a2 + v57);
      __int128 v60 = v59[1];
      *unint64_t v58 = *v59;
      v58[1] = v60;
      uint64_t v61 = sub_5C28(&qword_76360);
      *(_OWORD *)((char *)a1 + *(int *)(v61 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v61 + 48));
      uint64_t v62 = a1;
      uint64_t v63 = a3;
      uint64_t v64 = 1LL;
LABEL_25:
      swift_storeEnumTagMultiPayload(v62, v63, v64);
      return a1;
    }

    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for RCSMessage.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t storeEnumTagSinglePayload for RCSMessage.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t sub_120FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_1210C(uint64_t a1)
{
  v7[0] = &unk_5F6C8;
  uint64_t result = type metadata accessor for RCSMessage(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_getTupleTypeLayout2(v6, v4, &unk_5F6E0);
    v7[1] = v6;
    swift_getTupleTypeLayout2(v5, v4, &unk_5F6E0);
    v7[2] = v5;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 3LL, v7);
    return 0LL;
  }

  return result;
}

uint64_t sub_121B8(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

_OWORD *sub_121F4(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_12204(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_12224(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_12260(uint64_t a1)
{
  return a1;
}

uint64_t sub_12294(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_122D0(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_122D8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_5C28(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1231C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_5C28(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

unint64_t sub_12358()
{
  unint64_t result = qword_765A8;
  if (!qword_765A8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RCSServiceSession.TransferCreationError,  &type metadata for RCSServiceSession.TransferCreationError);
    atomic_store(result, (unint64_t *)&qword_765A8);
  }

  return result;
}

unint64_t sub_123A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_5C28(&qword_765A0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_15F90(v7, (uint64_t)v16);
    unint64_t result = sub_14460((uint64_t)v16);
    if ((v9 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v10 = v4[6] + 40 * result;
    __int128 v11 = v16[0];
    __int128 v12 = v16[1];
    *(void *)(v10 + 32) = v17;
    *(_OWORD *)uint64_t v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    unint64_t result = (unint64_t)sub_121F4(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v7 += 72LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_124D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_5C28(&qword_765D0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v7 = *(v6 - 3);
    uint64_t v8 = *(v6 - 2);
    uint64_t v10 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_14490(v7, v8);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v13 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v13 = v7;
    v13[1] = v8;
    BOOL v14 = (void *)(v4[7] + 16 * result);
    *BOOL v14 = v10;
    v14[1] = v9;
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void RCSServiceSession.leaveChat(_:style:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  NSString v9 = String._bridgeToObjectiveC()();
  id v16 = [v3 chatForChatIdentifier:v9 style:a3];

  if (v16)
  {
    sub_12770(v16, 0);
  }

  else
  {
    uint64_t v10 = Logger.rcs.unsafeMutableAddressor();
    uint64_t v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v10, v5);
    char v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      BOOL v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)BOOL v14 = 0;
      _os_log_impl(&dword_0, v12, v13, "Received request to update display name but could not find a chat", v14, 2u);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

void sub_12770(void *a1, int a2)
{
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v32[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = _s17ParticipantChangeVMa(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = &v32[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  id v12 = [a1 lastAddressedLocalHandle];
  if (v12
    || (id v26 = [v2 account],
        id v27 = [v26 loginID],
        v26,
        v27)
    && (id v12 = [v27 _stripFZIDPrefix], v27, v12))
  {
    int v33 = a2;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    uint64_t v15 = v14;

    swift_bridgeObjectRetain();
    v16._uint64_t countAndFlagsBits = v13;
    v16._object = v15;
    RCSHandle.init(rawValue:botStatus:alternateHandle:)( &v37,  v16,  CoreRCS_RCSHandle_BotStatus_notChatBot,  (Swift::String_optional)0);
    if (v17)
    {
      swift_bridgeObjectRelease(v15);
      uint64_t v18 = Logger.rcs.unsafeMutableAddressor();
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v8, v18, v5);
      swift_errorRetain(v17);
      uint64_t v19 = swift_errorRetain(v17);
      __int128 v20 = (os_log_s *)Logger.logObject.getter(v19);
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = swift_slowAlloc(18LL, -1LL);
        uint64_t v23 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v22 = 138412546;
        swift_errorRetain(v17);
        uint64_t v24 = _swift_stdlib_bridgeErrorToNSError(v17);
        uint64_t v35 = v24;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
        *uint64_t v23 = v24;
        swift_errorRelease(v17);
        swift_errorRelease(v17);
        *(_WORD *)(v22 + 12) = 1024;
        LODWORD(v35) = v33 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, (char *)&v35 + 4);
        _os_log_impl( &dword_0,  v20,  v21,  "Error processing self leaving a group chat: %@, occurredLocally: %{BOOL}d",  (uint8_t *)v22,  0x12u);
        uint64_t v25 = sub_5C28(&qword_76238);
        swift_arrayDestroy(v23, 1LL, v25);
        swift_slowDealloc(v23, -1LL, -1LL);
        swift_slowDealloc(v22, -1LL, -1LL);

        swift_errorRelease(v17);
      }

      else
      {
        swift_errorRelease(v17);
        swift_errorRelease(v17);
        swift_errorRelease(v17);
      }

      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    }

    else
    {
      uint64_t countAndFlagsBits = v37.id._countAndFlagsBits;
      object = v37.id._object;
      swift_bridgeObjectRetain();
      sub_15F40(&v37);
      uint64_t v30 = sub_5C28(&qword_76558);
      uint64_t inited = swift_initStackObject(v30, v34);
      *(_OWORD *)(inited + 16) = xmmword_5F530;
      *(void *)(inited + 32) = countAndFlagsBits;
      *(void *)(inited + 40) = object;
      swift_bridgeObjectRetain();
      sub_12B5C(a1, 1, inited, countAndFlagsBits, (uint64_t)object, v13, (uint64_t)v15, 1, (uint64_t)v11);
      sub_12E44((uint64_t)v11, v33 & 1);
      sub_15E7C((uint64_t)v11);
    }
  }

void sub_12B5C( void *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  char v17 = a2 & 1;
  uint64_t v18 = type metadata accessor for UUID(0LL);
  uint64_t v65 = *(void *)(v18 - 8);
  uint64_t v66 = v18;
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v64 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  UUID.init()(v19);
  uint64_t v21 = _s17ParticipantChangeVMa(0LL);
  *(void *)(a9 + *(int *)(v21 + 20)) = a1;
  uint64_t v63 = (int *)v21;
  *(_BYTE *)(a9 + *(int *)(v21 + 24)) = v17;
  id v22 = a1;
  uint64_t v23 = a3;
  id v62 = v22;
  uint64_t v24 = (void *)sub_124D0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v25 = *(void *)(v23 + 16);
  if (!v25)
  {
LABEL_17:
    swift_bridgeObjectRelease(v23);

    uint64_t v52 = v63;
    *(void *)(a9 + v63[7]) = v24;
    uint64_t v53 = (void *)(a9 + v52[8]);
    *uint64_t v53 = a4;
    v53[1] = a5;
    uint64_t v54 = (void *)(a9 + v52[9]);
    *uint64_t v54 = a6;
    v54[1] = a7;
    *(_BYTE *)(a9 + v52[10]) = a8 & 1;
    return;
  }

  uint64_t v56 = a4;
  uint64_t v57 = a5;
  uint64_t v58 = a9;
  uint64_t v59 = a6;
  uint64_t v60 = a7;
  int v61 = a8;
  swift_bridgeObjectRetain();
  uint64_t v55 = v23;
  id v26 = (uint64_t *)(v23 + 40);
  while (1)
  {
    uint64_t v67 = v25;
    uint64_t v30 = *(v26 - 1);
    uint64_t v29 = *v26;
    uint64_t v31 = swift_bridgeObjectRetain_n(*v26, 2LL);
    uint64_t v32 = v64;
    uint64_t v33 = UUID.init()(v31);
    uint64_t v34 = UUID.uuidString.getter(v33);
    uint64_t v36 = v35;
    (*(void (**)(char *, uint64_t))(v65 + 8))(v32, v66);
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v24);
    uint64_t v68 = v24;
    unint64_t v39 = sub_14490(v30, v29);
    uint64_t v40 = v24[2];
    BOOL v41 = (v38 & 1) == 0;
    uint64_t v42 = v40 + v41;
    if (__OFADD__(v40, v41)) {
      break;
    }
    char v43 = v38;
    if (v24[3] >= v42)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        uint64_t v46 = v67;
        uint64_t v24 = v68;
        if ((v38 & 1) != 0) {
          goto LABEL_3;
        }
      }

      else
      {
        sub_14EB4();
        uint64_t v46 = v67;
        uint64_t v24 = v68;
        if ((v43 & 1) != 0) {
          goto LABEL_3;
        }
      }
    }

    else
    {
      sub_149AC(v42, isUniquelyReferenced_nonNull_native);
      unint64_t v44 = sub_14490(v30, v29);
      if ((v43 & 1) != (v45 & 1)) {
        goto LABEL_20;
      }
      unint64_t v39 = v44;
      uint64_t v46 = v67;
      uint64_t v24 = v68;
      if ((v43 & 1) != 0)
      {
LABEL_3:
        id v27 = (uint64_t *)(v24[7] + 16 * v39);
        uint64_t v28 = v27[1];
        *id v27 = v34;
        v27[1] = v36;
        swift_bridgeObjectRelease(v28);
        goto LABEL_4;
      }
    }

    v24[(v39 >> 6) + 8] |= 1LL << v39;
    uint64_t v47 = (uint64_t *)(v24[6] + 16 * v39);
    *uint64_t v47 = v30;
    v47[1] = v29;
    uint64_t v48 = (uint64_t *)(v24[7] + 16 * v39);
    *uint64_t v48 = v34;
    v48[1] = v36;
    uint64_t v49 = v24[2];
    BOOL v50 = __OFADD__(v49, 1LL);
    uint64_t v51 = v49 + 1;
    if (v50) {
      goto LABEL_19;
    }
    v24[2] = v51;
    swift_bridgeObjectRetain();
LABEL_4:
    v26 += 2;
    swift_bridgeObjectRelease_n(v29, 2LL);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    uint64_t v25 = v46 - 1;
    if (!v25)
    {
      uint64_t v23 = v55;
      swift_bridgeObjectRelease(v55);
      LOBYTE(a8) = v61;
      a6 = v59;
      a7 = v60;
      a5 = v57;
      a9 = v58;
      a4 = v56;
      goto LABEL_17;
    }
  }

  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_12E44(uint64_t a1, int a2)
{
  uint64_t v80 = type metadata accessor for UUID(0LL);
  __chkstk_darwin(v80);
  uint64_t v79 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = (int *)_s17ParticipantChangeVMa(0LL);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v74 - v9;
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  char v17 = (char *)&v74 - v16;
  uint64_t v18 = Logger.rcs.unsafeMutableAddressor();
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  int v77 = a2;
  if ((a2 & 1) != 0)
  {
    v19(v17, v18, v11);
    uint64_t v20 = sub_15C9C(a1, (uint64_t)v10);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc(12LL, -1LL);
      uint64_t v78 = a1;
      uint64_t v24 = (uint8_t *)v23;
      uint64_t v76 = swift_slowAlloc(32LL, -1LL);
      uint64_t v83 = v76;
      *(_DWORD *)uint64_t v24 = 136446210;
      uint64_t v75 = v24 + 4;
      unint64_t v25 = sub_15EB8();
      uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter(v80, v25);
      unint64_t v28 = v27;
      uint64_t v82 = sub_B004(v26, v27, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
      swift_bridgeObjectRelease(v28);
      sub_15E7C((uint64_t)v10);
      _os_log_impl(&dword_0, v21, v22, "Relaying finished participant change ID %{public}s", v24, 0xCu);
      uint64_t v29 = v76;
      swift_arrayDestroy(v76, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1LL, -1LL);
      uint64_t v30 = v24;
      a1 = v78;
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    else
    {
      sub_15E7C((uint64_t)v10);
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  }

  else
  {
    v19(v15, v18, v11);
    uint64_t v31 = sub_15C9C(a1, (uint64_t)v8);
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v33 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v76 = swift_slowAlloc(32LL, -1LL);
      uint64_t v83 = v76;
      uint64_t v78 = a1;
      *(_DWORD *)uint64_t v34 = 136446210;
      uint64_t v75 = v34 + 4;
      unint64_t v35 = sub_15EB8();
      uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter(v80, v35);
      unint64_t v38 = v37;
      uint64_t v82 = sub_B004(v36, v37, &v83);
      a1 = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
      swift_bridgeObjectRelease(v38);
      sub_15E7C((uint64_t)v8);
      _os_log_impl(&dword_0, v32, v33, "Asking phone to execute participant change ID %{public}s", v34, 0xCu);
      uint64_t v39 = v76;
      swift_arrayDestroy(v76, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1LL, -1LL);
      swift_slowDealloc(v34, -1LL, -1LL);
    }

    else
    {
      sub_15E7C((uint64_t)v8);
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }

  uint64_t v40 = *(unsigned __int8 *)(a1 + v5[6]);
  uint64_t v41 = *(void *)(a1 + v5[7]);
  uint64_t v42 = (uint64_t *)(a1 + v5[8]);
  uint64_t v43 = *v42;
  uint64_t v44 = v42[1];
  swift_bridgeObjectRetain();
  uint64_t v80 = v41;
  swift_bridgeObjectRetain();
  id v45 = [v81 service];
  id v46 = [v45 internalName];

  uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
  uint64_t v78 = v48;

  uint64_t v49 = a1;
  BOOL v50 = *(void **)(a1 + v5[5]);
  id v51 = [v50 groupID];
  if (!v51)
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v52 = v51;
  uint64_t v74 = v47;
  uint64_t v75 = (uint8_t *)v44;
  uint64_t v76 = v43;
  uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
  uint64_t v55 = v54;

  id v56 = [v50 originalGroupID];
  if (!v56)
  {
LABEL_17:
    __break(1u);
    return;
  }

  uint64_t v57 = v56;
  uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
  uint64_t v60 = v59;

  uint64_t v61 = (uint64_t)v79;
  UUID.init()(v62);
  uint64_t v63 = v5[10];
  uint64_t v64 = (uint64_t *)(v49 + v5[9]);
  uint64_t v66 = *v64;
  uint64_t v65 = v64[1];
  char v67 = *(_BYTE *)(v49 + v63);
  id v68 = objc_allocWithZone(&OBJC_CLASS___IMDRelayGroupParticipantsUpdateMessage);
  swift_bridgeObjectRetain();
  HIBYTE(v73) = v67;
  LOBYTE(v73) = 0;
  id v69 = sub_14190(v40, v80, v76, (uint64_t)v75, v74, v78, v53, v55, v58, v60, v61, v66, v65, v73);
  id v70 = [v81 relayController];
  id v71 = v69;
  if (v65) {
    NSString v72 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v72 = 0LL;
  }
  [v70 reflectGroupMutation:v71 callerID:v72 didOccurLocally:v77 & 1];
}

uint64_t sub_13400(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  uint64_t v56 = a3;
  int v57 = a1;
  uint64_t v55 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_5C28(&qword_765B0);
  __chkstk_darwin(v14);
  uint64_t v60 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = (int *)_s17ParticipantChangeVMa(0LL);
  uint64_t v58 = *((void *)v16 - 1);
  uint64_t v17 = *(void *)(v58 + 64);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v59 = (uint64_t)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v55 - v19;
  if (a6)
  {
    NSString v21 = String._bridgeToObjectiveC()();
    id v22 = [v61 chatForChatIdentifier:v21 style:a7];

    if (v22) {
      goto LABEL_5;
    }
  }

  if (a4
    && (NSString v21 = [(id)objc_opt_self(IMDChatRegistry) sharedInstance],
        NSString v23 = String._bridgeToObjectiveC()(),
        id v22 = [v21 existingChatWithGUID:v23],
        v21,
        v23,
        v22))
  {
LABEL_5:
    if (a2)
    {
      uint64_t v24 = &_swiftEmptyDictionarySingleton;
      uint64_t v63 = &_swiftEmptyDictionarySingleton;
      uint64_t v25 = *(void *)(a2 + 16);
      if (v25)
      {
        swift_bridgeObjectRetain_n(a2, 2LL);
        for (uint64_t i = 0LL; i != v25; ++i)
        {
          uint64_t v62 = *(void *)(a2 + 8 * i + 32);
          uint64_t v27 = v62;
          swift_bridgeObjectRetain();
          sub_1387C(&v63, &v62);
          swift_bridgeObjectRelease(v27);
        }

        swift_bridgeObjectRelease_n(a2, 2LL);
        uint64_t v24 = v63;
      }

      id v28 = objc_msgSend(v22, "lastAddressedLocalHandle", v55, v56);
      if (v28)
      {
        uint64_t v29 = v28;
        uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
        uint64_t v32 = v31;
      }

      else
      {
        uint64_t v30 = 0LL;
        uint64_t v32 = 0LL;
      }

      BOOL v40 = v57 != 2;
      id v41 = v22;
      UUID.init()(v41);
      *(void *)&v20[v16[5]] = v41;
      v20[v16[6]] = v40;
      *(void *)&v20[v16[7]] = v24;
      uint64_t v42 = &v20[v16[8]];
      *(void *)uint64_t v42 = 0LL;
      *((void *)v42 + 1) = 0LL;
      uint64_t v43 = (uint64_t *)&v20[v16[9]];
      *uint64_t v43 = v30;
      v43[1] = v32;
      v20[v16[10]] = 1;
      id v44 = v61;
      sub_154BC((uint64_t)v20);
      uint64_t v45 = (uint64_t)v60;
      static TaskPriority.userInitiated.getter();
      uint64_t v46 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56LL))(v45, 0LL, 1LL, v46);
      uint64_t v47 = v59;
      sub_15C9C((uint64_t)v20, v59);
      type metadata accessor for MainActor(0LL);
      id v48 = v44;
      uint64_t v49 = static MainActor.shared.getter();
      uint64_t v50 = *(unsigned __int8 *)(v58 + 80);
      uint64_t v51 = (v50 + 40) & ~v50;
      uint64_t v52 = (void *)swift_allocObject(&unk_71500, v51 + v17, v50 | 7);
      v52[2] = v49;
      v52[3] = &protocol witness table for MainActor;
      v52[4] = v48;
      sub_15DA4(v47, (uint64_t)v52 + v51);
      uint64_t v53 = sub_1DB20(v45, (uint64_t)&unk_765C0, (uint64_t)v52);

      swift_release(v53);
      return sub_15E7C((uint64_t)v20);
    }

    else
    {
      __break(1u);
      uint64_t v54 = v63;
      swift_bridgeObjectRelease(0LL);
      swift_bridgeObjectRelease(v21);
      uint64_t result = swift_bridgeObjectRelease(v54);
      __break(1u);
    }
  }

  else
  {
    uint64_t v33 = Logger.rcs.unsafeMutableAddressor();
    uint64_t v34 = v55;
    uint64_t v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v33, v55);
    uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      unint64_t v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v38 = 0;
      _os_log_impl(&dword_0, v36, v37, "Received request to update display name but could not find a chat", v38, 2u);
      swift_slowDealloc(v38, -1LL, -1LL);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v34);
  }

  return result;
}

uint64_t sub_1387C(void *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *a2;
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(kFZPersonID);
  uint64_t v26 = v9;
  AnyHashable.init<A>(_:)(v27, &v25, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v8 + 16) && (unint64_t v10 = sub_14460((uint64_t)v27), (v11 & 1) != 0))
  {
    sub_12224(*(void *)(v8 + 56) + 32 * v10, (uint64_t)&v28);
  }

  else
  {
    __int128 v28 = 0u;
    __int128 v29 = 0u;
  }

  sub_12260((uint64_t)v27);
  if (!*((void *)&v29 + 1)) {
    return sub_15F00((uint64_t)&v28);
  }
  uint64_t result = swift_dynamicCast(&v25, &v28, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
  if ((result & 1) == 0) {
    return result;
  }
  uint64_t v13 = v26;
  uint64_t v30 = v25;
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMPersonStatusChangeID);
  uint64_t v26 = v14;
  AnyHashable.init<A>(_:)(v27, &v25, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v8 + 16) && (unint64_t v15 = sub_14460((uint64_t)v27), (v16 & 1) != 0))
  {
    sub_12224(*(void *)(v8 + 56) + 32 * v15, (uint64_t)&v28);
  }

  else
  {
    __int128 v28 = 0u;
    __int128 v29 = 0u;
  }

  sub_12260((uint64_t)v27);
  if (!*((void *)&v29 + 1))
  {
    uint64_t v17 = sub_15F00((uint64_t)&v28);
    goto LABEL_16;
  }

  uint64_t v17 = swift_dynamicCast(&v25, &v28, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
  if (!(_DWORD)v17)
  {
LABEL_16:
    uint64_t v20 = UUID.init()(v17);
    uint64_t v18 = UUID.uuidString.getter(v20);
    uint64_t v19 = v21;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    goto LABEL_17;
  }

  uint64_t v18 = v25;
  uint64_t v19 = v26;
LABEL_17:
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  v27[0] = *a1;
  *a1 = 0x8000000000000000LL;
  sub_15150(v18, v19, v30, v13, isUniquelyReferenced_nonNull_native);
  uint64_t v23 = *a1;
  *a1 = v27[0];
  swift_bridgeObjectRelease(v13);
  return swift_bridgeObjectRelease(v23);
}

uint64_t sub_13ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  uint64_t v6 = type metadata accessor for MainActor(0LL);
  v5[4] = v6;
  v5[5] = static MainActor.shared.getter();
  v5[6] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_13B48, v7, v8);
}

uint64_t sub_13B48()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  swift_release(v0[6]);
  sub_12E44(v2, 0);
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_13BBC, v3, v4);
}

uint64_t sub_13BBC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RCSServiceSession.invitePersonInfo(_:withMessage:toChatID:identifier:style:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  return sub_13400(2, a1, a3, a4, a5, a6, a7);
}

uint64_t RCSServiceSession.removePersonInfo(_:chatID:identifier:style:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  return sub_13400(3, a1, a2, a3, a4, a5, a6);
}

BOOL sub_13DE0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_13DF8()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_13E3C()
{
}

Swift::Int sub_13E64(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_13EA4()
{
  if (*v0) {
    return 0x65766F6D6552LL;
  }
  else {
    return 6579265LL;
  }
}

uint64_t sub_13ED4()
{
  uint64_t v1 = v0;
  _StringGuts.grow(_:)(73LL);
  v2._object = (void *)0x8000000000065080LL;
  v2._uint64_t countAndFlagsBits = 0xD000000000000016LL;
  String.append(_:)(v2);
  uint64_t v3 = type metadata accessor for UUID(0LL);
  unint64_t v4 = sub_15EB8();
  v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v3, v4);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._uint64_t countAndFlagsBits = 0x3D6570797420LL;
  v7._object = (void *)0xE600000000000000LL;
  String.append(_:)(v7);
  uint64_t v8 = (int *)_s17ParticipantChangeVMa(0LL);
  if (*(_BYTE *)(v0 + v8[6])) {
    uint64_t v9 = 0x65766F6D6552LL;
  }
  else {
    uint64_t v9 = 6579265LL;
  }
  if (*(_BYTE *)(v0 + v8[6])) {
    unint64_t v10 = 0xE600000000000000LL;
  }
  else {
    unint64_t v10 = 0xE300000000000000LL;
  }
  unint64_t v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease(v10);
  v12._uint64_t countAndFlagsBits = 0x3D7461686320LL;
  v12._object = (void *)0xE600000000000000LL;
  String.append(_:)(v12);
  id v13 = [*(id *)(v0 + v8[5]) guid];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    uint64_t v17 = v16;
  }

  else
  {
    uint64_t v15 = 0x296C6C756E28LL;
    uint64_t v17 = (void *)0xE600000000000000LL;
  }

  v18._uint64_t countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v17);
  v19._uint64_t countAndFlagsBits = 0x6963697472617020LL;
  v19._object = (void *)0xEF5B3D73746E6170LL;
  String.append(_:)(v19);
  uint64_t v20 = *(void *)(v1 + v8[7]);
  uint64_t v21 = swift_bridgeObjectRetain();
  id v22 = sub_1506C(v21);
  swift_bridgeObjectRelease(v20);
  v23._uint64_t countAndFlagsBits = Array.description.getter(v22, &type metadata for String);
  uint64_t v24 = v23._object;
  String.append(_:)(v23);
  swift_release(v22);
  swift_bridgeObjectRelease(v24);
  v25._uint64_t countAndFlagsBits = 0x3D6D6F7266205DLL;
  v25._object = (void *)0xE700000000000000LL;
  String.append(_:)(v25);
  uint64_t v26 = (uint64_t *)(v1 + v8[8]);
  uint64_t v27 = v26[1];
  if (v27) {
    uint64_t v28 = *v26;
  }
  else {
    uint64_t v28 = 0x296C6C756E28LL;
  }
  if (v27) {
    __int128 v29 = (void *)v26[1];
  }
  else {
    __int128 v29 = (void *)0xE600000000000000LL;
  }
  swift_bridgeObjectRetain();
  v30._uint64_t countAndFlagsBits = v28;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease(v29);
  v31._uint64_t countAndFlagsBits = 1030714400LL;
  v31._object = (void *)0xE400000000000000LL;
  String.append(_:)(v31);
  uint64_t v32 = (uint64_t *)(v1 + v8[9]);
  uint64_t v33 = v32[1];
  if (v33) {
    uint64_t v34 = *v32;
  }
  else {
    uint64_t v34 = 0x296C6C756E28LL;
  }
  if (v33) {
    uint64_t v35 = (void *)v32[1];
  }
  else {
    uint64_t v35 = (void *)0xE600000000000000LL;
  }
  swift_bridgeObjectRetain();
  v36._uint64_t countAndFlagsBits = v34;
  v36._object = v35;
  String.append(_:)(v36);
  swift_bridgeObjectRelease(v35);
  v37._uint64_t countAndFlagsBits = 62LL;
  v37._object = (void *)0xE100000000000000LL;
  String.append(_:)(v37);
  return 0LL;
}

id sub_14190( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, __int16 a14)
{
  v28.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2);
  if (a4)
  {
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a4);
  }

  else
  {
    NSString v18 = 0LL;
  }

  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a6);
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a8);
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a10);
  v22.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  if (a13)
  {
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a13);
  }

  else
  {
    NSString v23 = 0LL;
  }

  LOWORD(v27) = a14 & 0x101;
  id v24 = objc_msgSend( v30,  "initWithChangeType:changedParticipants:sender:service:groupID:originalGroupID:guid:destinationCallerID:failed:fromMe:",  a1,  v28.super.isa,  v18,  v19,  v20,  v21,  v22.super.isa,  v23,  v27);

  uint64_t v25 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8LL))(a11, v25);
  return v24;
}

uint64_t _s17ParticipantChangeVMa(uint64_t a1)
{
  uint64_t result = qword_76638;
  if (!qword_76638) {
    return swift_getSingletonMetadata(a1, &_s17ParticipantChangeVMn);
  }
  return result;
}

uint64_t sub_14390(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  return _swift_stdlib_bridgeErrorToNSError(v1);
}

void sub_143B0(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  Swift::String v7 = (void *)v6;
  uint64_t v8 = *a1 + 8;
  if (v6) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 0LL;
  }
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
  *a1 = v8;
  uint64_t v9 = *a2;
  if (*a2)
  {
    *uint64_t v9 = v7;
    *a2 = v9 + 1;
  }

  else
  {
  }

unint64_t sub_14460(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_144F4(a1, v4);
}

unint64_t sub_14490(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_145B8(a1, a2, v5);
}

unint64_t sub_144F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_12294(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_12260((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

unint64_t sub_145B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        id v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }

      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }

  return v6;
}

uint64_t sub_14698(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_5C28(&qword_765A0);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_44;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v15 << 6);
      goto LABEL_25;
    }

    int64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }

    if (v22 >= v12) {
      break;
    }
    NSString v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v15;
    if (!v24)
    {
      int64_t v15 = v22 + 1;
      if (v22 + 1 >= v12) {
        goto LABEL_37;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v15);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }

        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v15 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_46;
            }
            if (v15 >= v12) {
              goto LABEL_37;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v15);
            ++v25;
            if (v24) {
              goto LABEL_24;
            }
          }
        }

        int64_t v15 = v25;
      }
    }

LABEL_24:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v15 << 6);
LABEL_25:
    uint64_t v26 = *(void *)(v5 + 48) + 40 * v21;
    if ((a2 & 1) != 0)
    {
      __int128 v27 = *(_OWORD *)v26;
      __int128 v28 = *(_OWORD *)(v26 + 16);
      uint64_t v41 = *(void *)(v26 + 32);
      __int128 v39 = v27;
      __int128 v40 = v28;
      sub_121F4((_OWORD *)(*(void *)(v5 + 56) + 32 * v21), v38);
    }

    else
    {
      sub_12294(v26, (uint64_t)&v39);
      sub_12224(*(void *)(v5 + 56) + 32 * v21, (uint64_t)v38);
    }

    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v8 + 40));
    uint64_t v29 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v30 = result & ~v29;
    unint64_t v31 = v30 >> 6;
    if (((-1LL << v30) & ~*(void *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1LL << v30) & ~*(void *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v32 = 0;
      unint64_t v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        BOOL v34 = v31 == v33;
        if (v31 == v33) {
          unint64_t v31 = 0LL;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v13 + 8 * v31);
      }

      while (v35 == -1);
      unint64_t v16 = __clz(__rbit64(~v35)) + (v31 << 6);
    }

    *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
    uint64_t v17 = *(void *)(v8 + 48) + 40 * v16;
    __int128 v18 = v39;
    __int128 v19 = v40;
    *(void *)(v17 + 32) = v41;
    *(_OWORD *)uint64_t v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    uint64_t result = (uint64_t)sub_121F4(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v16));
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  NSString v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  uint64_t v36 = 1LL << *(_BYTE *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *NSString v23 = -1LL << v36;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_44:
  uint64_t result = swift_release(v5);
  uint64_t *v3 = v8;
  return result;
}

    uint64_t v36 = (v43 - 1) & v43;
    uint64_t v41 = __clz(__rbit64(v43)) + (v37 << 6);
LABEL_25:
    uint64_t v45 = 16 * v41;
    uint64_t v46 = (void *)(*(void *)(v80 + 48) + v45);
    uint64_t v47 = v46[1];
    id v48 = *(void *)(*(void *)(v80 + 56) + v45 + 8);
    uint64_t v49 = (void *)(a1 + v83[9]);
    uint64_t v50 = v49[1];
    if (v50
      && (*v46 == *v49 ? (uint64_t v51 = v50 == v47) : (uint64_t v51 = 0),
          v51 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v46, v46[1], *v49, v49[1], 0LL) & 1) != 0))
    {
      uint64_t v52 = *(void **)(a1 + v83[5]);
      if (*(_BYTE *)(a1 + v83[6]) == 1)
      {
        swift_bridgeObjectRetain();
        uint64_t v53 = [v52 chatIdentifier];
        if (!v53) {
          goto LABEL_50;
        }
        uint64_t v54 = v53;
        uint64_t v55 = [v52 style];
        uint64_t v56 = v82;
        int v57 = [v82 account];
        uint64_t v58 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v48);
        [v56 didLeaveChat:v54 style:v55 account:v57 messageID:v58];
      }

      else
      {
        uint64_t v65 = [*(id *)(a1 + v83[5]) chatIdentifier];
        if (!v65) {
          goto LABEL_51;
        }
        uint64_t v66 = v65;
        char v67 = [v52 style];
        [v82 didJoinChat:v66 style:v67];
      }
    }

    else
    {
      uint64_t v59 = objc_allocWithZone(&OBJC_CLASS___IMDChatMemberStatusChangeContext);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v60 = objc_msgSend(v59, "init", v76);
      id v61 = v60;
      if (*(_BYTE *)(a1 + v83[6])) {
        uint64_t v62 = 3LL;
      }
      else {
        uint64_t v62 = 2LL;
      }
      [v60 setStatus:v62];
      uint64_t v63 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v47);
      [v61 setHandleID:v63];

      if (v81) {
        uint64_t v64 = String._bridgeToObjectiveC()();
      }
      else {
        uint64_t v64 = 0LL;
      }
      [v61 setFromHandleID:v64];

      id v68 = *(void **)(a1 + v83[5]);
      id v69 = [v68 chatIdentifier];
      [v61 setChatIdentifier:v69];

      objc_msgSend(v61, "setStyle:", objc_msgSend(v68, "style"));
      id v70 = [v82 account];
      [v61 setAccount:v70];

      if (v50) {
        id v71 = String._bridgeToObjectiveC()();
      }
      else {
        id v71 = 0LL;
      }
      [v61 setDestinationCallerID:v71];

      NSString v72 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v48);
      [v61 setMessageID:v72];

      __int16 v73 = v77;
      sub_15C9C(a1, v77);
      if (v81) {
        unint64_t v38 = 0;
      }
      else {
        unint64_t v38 = *(_BYTE *)(v73 + v83[10]) ^ 1;
      }
      sub_15E7C(v73);
      [v61 setUnattributed:v38 & 1];
      __int128 v39 = [v82 didChangeMemberStatus:v61];
    }
  }

  id v44 = v42 + 3;
  if (v44 >= v79)
  {
LABEL_47:
    swift_release(v80);
    uint64_t v74 = (void *)objc_opt_self(&OBJC_CLASS___IMDChatStore);
    uint64_t v75 = objc_msgSend(v74, "sharedInstance", v76);
    [v75 storeChat:*(void *)(a1 + v83[5])];

    return;
  }

  uint64_t v43 = *(void *)(v78 + 8 * v44);
  if (v43)
  {
    uint64_t v37 = v44;
    goto LABEL_24;
  }

  while (1)
  {
    uint64_t v37 = v44 + 1;
    if (__OFADD__(v44, 1LL)) {
      break;
    }
    if (v37 >= v79) {
      goto LABEL_47;
    }
    uint64_t v43 = *(void *)(v78 + 8 * v37);
    ++v44;
    if (v43) {
      goto LABEL_24;
    }
  }

      uint64_t v10 = (v16 - 1) & v16;
      BOOL v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }

    __int128 v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    unint64_t v20 = *v18;
    __int128 v19 = v18[1];
    unint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)(v34, *(void *)(v9 + 40));
    swift_bridgeObjectRetain();
    swift_retain(v21);
    String.hash(into:)(v34, v20, v19);
    uint64_t result = Hasher._finalize()();
    int64_t v22 = -1LL << *(_BYTE *)(v9 + 32);
    NSString v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      int64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v26 = 0;
      __int128 v27 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        __int128 v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v24);
      }

      while (v29 == -1);
      int64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
    }

    *(void *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
    unint64_t v30 = (void *)(*(void *)(v9 + 48) + 16 * v25);
    *unint64_t v30 = v20;
    v30[1] = v19;
    *(void *)(*(void *)(v9 + 56) + 8 * v25) = v21;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1LL)) {
      break;
    }
    if (!v5) {
      return v9;
    }
  }

    unint64_t v11 = (v21 - 1) & v21;
    __int128 v18 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_25:
    NSString v23 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v18);
    unint64_t v24 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v18);
    uint64_t v26 = *v24;
    int64_t v25 = v24[1];
    if ((v40 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)(v41, *(void *)(v8 + 40));
    if (v23)
    {
      if (v23 == 1)
      {
        __int128 v27 = 0xE400000000000000LL;
        __int128 v28 = 1919251317LL;
      }

      else
      {
        __int128 v27 = 0xEA00000000006563LL;
        __int128 v28 = 0x6E657265666E6F63LL;
      }
    }

    else
    {
      __int128 v27 = 0xED0000747865746ELL;
      __int128 v28 = 0x6F632D656E6F6870LL;
    }

    String.hash(into:)(v41, v28, v27);
    swift_bridgeObjectRelease(v27);
    uint64_t result = Hasher._finalize()();
    uint64_t v29 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v30 = result & ~v29;
    unint64_t v31 = v30 >> 6;
    if (((-1LL << v30) & ~*(void *)(v12 + 8 * (v30 >> 6))) != 0)
    {
      int64_t v15 = __clz(__rbit64((-1LL << v30) & ~*(void *)(v12 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v32 = 0;
      unint64_t v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_49;
        }

        BOOL v34 = v31 == v33;
        if (v31 == v33) {
          unint64_t v31 = 0LL;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v12 + 8 * v31);
      }

      while (v35 == -1);
      int64_t v15 = __clz(__rbit64(~v35)) + (v31 << 6);
    }

    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    *(_BYTE *)(*(void *)(v8 + 48) + v15) = v23;
    unint64_t v16 = (void *)(*(void *)(v8 + 56) + 16 * v15);
    *unint64_t v16 = v26;
    v16[1] = v25;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v37;
  unint64_t v20 = (void *)(v5 + 64);
  if ((v40 & 1) == 0) {
    goto LABEL_48;
  }
LABEL_44:
  uint64_t v36 = 1LL << *(_BYTE *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v20, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *unint64_t v20 = -1LL << v36;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_48:
  uint64_t result = swift_release(v5);
  uint64_t *v3 = v8;
  return result;
}

        unint64_t v11 = (v20 - 1) & v20;
        __int128 v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }

      int64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
      unint64_t v24 = *v22;
      NSString v23 = v22[1];
      int64_t v25 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_121F4(v25, v38);
      }

      else
      {
        sub_12224((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain();
      }

      Hasher.init(_seed:)(v37, *(void *)(v8 + 40));
      String.hash(into:)(v37, v24, v23);
      uint64_t result = Hasher._finalize()();
      uint64_t v26 = -1LL << *(_BYTE *)(v8 + 32);
      __int128 v27 = result & ~v26;
      __int128 v28 = v27 >> 6;
      if (((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        int64_t v15 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v29 = 0;
        unint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }

          unint64_t v31 = v28 == v30;
          if (v28 == v30) {
            __int128 v28 = 0LL;
          }
          v29 |= v31;
          char v32 = *(void *)(v12 + 8 * v28);
        }

        while (v32 == -1);
        int64_t v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      unint64_t v16 = (void *)(*(void *)(v8 + 48) + 16 * v15);
      *unint64_t v16 = v24;
      v16[1] = v23;
      uint64_t result = (uint64_t)sub_121F4(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v15));
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
  uint64_t *v3 = v8;
  return result;
}

    uint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_25:
    int64_t v15 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v11);
    uint64_t v17 = *v15;
    unint64_t v16 = v15[1];
    __int128 v18 = *(unsigned __int8 *)(*(void *)(v3 + 48) + v11);
    swift_bridgeObjectRetain();
    __int128 v19 = sub_28CF0(v18);
    if ((v20 & 1) == 0)
    {
      swift_bridgeObjectRelease(v16);
      return 0LL;
    }

    unint64_t v21 = (void *)(*(void *)(a2 + 56) + 16 * v19);
    int64_t v22 = v21[1];
    if (*v21 == v17 && v22 == v16)
    {
      uint64_t result = swift_bridgeObjectRelease(v16);
    }

    else
    {
      unint64_t v24 = _stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, v17, v16, 0LL);
      uint64_t result = swift_bridgeObjectRelease(v16);
      if ((v24 & 1) == 0) {
        return 0LL;
      }
    }
  }

  BOOL v14 = v12 + 4;
  if (v14 >= v9) {
    return 1LL;
  }
  uint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    uint64_t v4 = v14;
    goto LABEL_24;
  }

  while (1)
  {
    uint64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v4 >= v9) {
      return 1LL;
    }
    uint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_24;
    }
  }

Swift::Int sub_149AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_5C28(&qword_765D0);
  char v43 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v42 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  __int128 v40 = v3;
  int64_t v41 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v24 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v24 >= v41) {
      break;
    }
    int64_t v25 = (void *)(v5 + 64);
    unint64_t v26 = *(void *)(v42 + 8 * v24);
    ++v14;
    if (!v26)
    {
      int64_t v14 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_36;
      }
      unint64_t v26 = *(void *)(v42 + 8 * v14);
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v40;
          if ((v43 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v26 = *(void *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            int64_t v14 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v41) {
              goto LABEL_36;
            }
            unint64_t v26 = *(void *)(v42 + 8 * v14);
            ++v27;
            if (v26) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v27;
      }
    }

LABEL_33:
    unint64_t v11 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    uint64_t v32 = 16 * v23;
    unint64_t v33 = (uint64_t *)(*(void *)(v5 + 48) + v32);
    uint64_t v35 = *v33;
    uint64_t v34 = v33[1];
    uint64_t v36 = (uint64_t *)(*(void *)(v5 + 56) + v32);
    uint64_t v37 = *v36;
    uint64_t v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    Hasher.init(_seed:)(v44, *(void *)(v8 + 40));
    String.hash(into:)(v44, v35, v34);
    Swift::Int result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        BOOL v30 = v17 == v29;
        if (v17 == v29) {
          unint64_t v17 = 0LL;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v12 + 8 * v17);
      }

      while (v31 == -1);
      unint64_t v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t v19 = 16 * v18;
    unint64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
    *unint64_t v20 = v35;
    v20[1] = v34;
    unint64_t v21 = (void *)(*(void *)(v8 + 56) + v19);
    void *v21 = v37;
    v21[1] = v38;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v40;
  int64_t v25 = (void *)(v5 + 64);
  if ((v43 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v39 = 1LL << *(_BYTE *)(v5 + 32);
  if (v39 >= 64) {
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *int64_t v25 = -1LL << v39;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  Swift::Int result = swift_release(v5);
  uint64_t *v3 = v8;
  return result;
}

    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    BOOL v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    unint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain(v33);
    }

    Hasher.init(_seed:)(v38, *(void *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    Swift::Int result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v26 = 0;
      int64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        char v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0LL;
        }
        v26 |= v28;
        unint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    char *v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  unint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *unint64_t v23 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  Swift::Int result = swift_release(v5);
  uint64_t *v3 = v8;
  return result;
}

    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    BOOL v30 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v21);
    uint64_t v31 = *v30;
    uint64_t v32 = v30[1];
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)(v38, *(void *)(v8 + 40));
    String.hash(into:)(v38, 0xD000000000000015LL, 0x8000000000065640LL);
    Swift::Int result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v26 = 0;
      int64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        char v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0LL;
        }
        v26 |= v28;
        unint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 56) + 16 * v18);
    char *v19 = v31;
    v19[1] = v32;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v34;
  unint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  unint64_t v33 = 1LL << *(_BYTE *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v23, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *unint64_t v23 = -1LL << v33;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  Swift::Int result = swift_release(v5);
  uint64_t *v3 = v8;
  return result;
}

    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    BOOL v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    unint64_t v33 = *(void **)(*(void *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v34 = v33;
    }

    Hasher.init(_seed:)(v40, *(void *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    Swift::Int result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v26 = 0;
      int64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        char v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0LL;
        }
        v26 |= v28;
        unint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    char *v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v36;
  unint64_t v23 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *unint64_t v23 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  Swift::Int result = swift_release(v5);
  uint64_t *v3 = v8;
  return result;
}

    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    BOOL v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    unint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    Hasher.init(_seed:)(v38, *(void *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    Swift::Int result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v26 = 0;
      int64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        char v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0LL;
        }
        v26 |= v28;
        unint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    char *v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  unint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *unint64_t v23 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  Swift::Int result = swift_release(v5);
  uint64_t *v3 = v8;
  return result;
}

    sub_122D0(v65);
    return (uint64_t)v72;
  }

  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

void *sub_14CD0()
{
  uint64_t v1 = v0;
  sub_5C28(&qword_765A0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    Swift::Int result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  Swift::Int result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }

LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_12294(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    sub_12224(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    __int128 v19 = v25[0];
    __int128 v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    Swift::Int result = sub_121F4(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }

  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    __int128 v19 = *v17;
    uint64_t v18 = v17[1];
    __int128 v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    int64_t v21 = *v20;
    unint64_t v22 = v20[1];
    int64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v23 = v19;
    v23[1] = v18;
    int64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *int64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    Swift::Int result = (void *)swift_bridgeObjectRetain();
  }

  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  uint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = (uint64_t *)(*(void *)(v2 + 56) + 16 * v15);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    *(_BYTE *)(*(void *)(v4 + 48) + v15) = *(_BYTE *)(*(void *)(v2 + 48) + v15);
    __int128 v19 = (void *)(*(void *)(v4 + 56) + 16 * v15);
    char *v19 = v18;
    v19[1] = v17;
    Swift::Int result = (void *)swift_bridgeObjectRetain();
  }

  unint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  int64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    __int128 v19 = 8 * v15;
    __int128 v20 = *(void *)(*(void *)(v2 + 56) + v19);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    Swift::Int result = (void *)swift_retain(v20);
  }

  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  int64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    __int128 v19 = *v17;
    uint64_t v18 = v17[1];
    __int128 v20 = 32 * v15;
    sub_12224(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = v19;
    v21[1] = v18;
    sub_121F4(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    Swift::Int result = (void *)swift_bridgeObjectRetain();
  }

  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    Swift::Int result = (void *)swift_release(v2);
    uint64_t v1 = v25;
    goto LABEL_28;
  }

  int64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 56) + v16);
    uint64_t v18 = v17[1];
    __int128 v19 = (void *)(*(void *)(v4 + 56) + v16);
    char *v19 = *v17;
    v19[1] = v18;
    Swift::Int result = (void *)swift_bridgeObjectRetain();
  }

  unint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  int64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    __int128 v19 = 8 * v15;
    __int128 v20 = *(void **)(*(void *)(v2 + 56) + v19);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    Swift::Int result = v20;
  }

  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  int64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    char v43 = (v31 - 1) & v31;
    id v44 = v32;
    unint64_t v15 = __clz(__rbit64(v31)) + (v32 << 6);
LABEL_12:
    uint64_t v17 = v15 << 6;
    uint64_t v18 = *(void *)(result + 56);
    __int128 v19 = *(void *)(result + 48) + (v15 << 6);
    __int128 v20 = *(void *)v19;
    int64_t v21 = *(void *)(v19 + 8);
    unint64_t v22 = *(void *)(v19 + 16);
    int64_t v23 = *(void *)(v19 + 24);
    int64_t v24 = *(void *)(v19 + 32);
    int64_t v25 = *(void *)(v19 + 40);
    uint64_t v26 = *(void *)(v19 + 48);
    uint64_t v45 = *(unsigned __int8 *)(v19 + 56);
    int64_t v27 = *(void *)(v40 + 72) * v15;
    sub_51498(v18 + v27, v14);
    char v28 = v42;
    unint64_t v29 = *(void *)(v42 + 48) + v17;
    *(void *)unint64_t v29 = v20;
    *(void *)(v29 + 8) = v21;
    *(void *)(v29 + 16) = v22;
    *(void *)(v29 + 24) = v23;
    *(void *)(v29 + 32) = v24;
    *(void *)(v29 + 40) = v25;
    *(void *)(v29 + 48) = v26;
    *(_BYTE *)(v29 + 56) = v45;
    sub_21A68(v14, *(void *)(v28 + 56) + v27);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int64_t v13 = v43;
    uint64_t v10 = v44;
  }

  unint64_t v33 = v10 + 3;
  if (v10 + 3 >= v38)
  {
LABEL_26:
    Swift::Int result = swift_release(v41);
    uint64_t v34 = v36;
    uint64_t v35 = v42;
    goto LABEL_28;
  }

  uint64_t v31 = *((void *)v37 + v33);
  if (v31)
  {
    uint64_t v32 = v10 + 3;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v32 = v33 + 1;
    if (__OFADD__(v33, 1LL)) {
      break;
    }
    if (v32 >= v38) {
      goto LABEL_26;
    }
    uint64_t v31 = *((void *)v37 + v32);
    ++v33;
    if (v31) {
      goto LABEL_25;
    }
  }

    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    __int128 v19 = 8 * v15;
    __int128 v20 = *(void *)(*(void *)(v2 + 56) + v19);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    Swift::Int result = (void *)swift_bridgeObjectRetain();
  }

  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  int64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

LABEL_28:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    uint64_t v6 = (v24 - 1) & v24;
    uint64_t v11 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_5:
    unint64_t v12 = *(unsigned __int8 *)(*(void *)(a2 + 48) + v11);
    int64_t v13 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v11);
    unint64_t v15 = *v13;
    unint64_t v14 = v13[1];
    uint64_t v16 = *(void *)(a1 + 64);
    uint64_t v17 = *(_OWORD *)(a1 + 16);
    v27[0] = *(_OWORD *)a1;
    v27[1] = v17;
    uint64_t v18 = *(_OWORD *)(a1 + 48);
    v27[2] = *(_OWORD *)(a1 + 32);
    v27[3] = v18;
    char v28 = v16;
    __int128 v19 = 1919251317LL;
    if (v12 != 1) {
      __int128 v19 = 0x6E657265666E6F63LL;
    }
    __int128 v20 = 0xE400000000000000LL;
    if (v12 != 1) {
      __int128 v20 = 0xEA00000000006563LL;
    }
    if (v12) {
      int64_t v21 = v19;
    }
    else {
      int64_t v21 = 0x6F632D656E6F6870LL;
    }
    if (v12) {
      unint64_t v22 = v20;
    }
    else {
      unint64_t v22 = 0xED0000747865746ELL;
    }
    swift_bridgeObjectRetain();
    String.hash(into:)(v27, v21, v22);
    swift_bridgeObjectRelease(v22);
    String.hash(into:)(v27, v15, v14);
    swift_bridgeObjectRelease(v14);
    v8 ^= Hasher._finalize()();
  }

  int64_t v25 = v23 + 2;
  if (v25 >= v7)
  {
LABEL_29:
    swift_release(a2);
    Hasher._combine(_:)(v8);
    return;
  }

  int64_t v24 = *(void *)(v26 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_28;
  }

  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v9 >= v7) {
      goto LABEL_29;
    }
    int64_t v24 = *(void *)(v26 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_28;
    }
  }

    uint64_t v5 = 0LL;
    memset(v95, 0, sizeof(v95));
    uint64_t v93 = 0u;
    char v94 = 0u;
LABEL_29:
    sub_122D8((uint64_t)&v93, (uint64_t)&v96, &qword_76590);
    if (!*((void *)&v97 + 1))
    {
      swift_release(rawValue);
      return 1;
    }

    uint64_t v93 = v96;
    char v94 = v97;
    v95[0] = v98;
    sub_121F4(v8, v92);
    sub_12224((uint64_t)v92, (uint64_t)v91);
    uint64_t v16 = sub_57908();
    if (!swift_dynamicCast(&v89, v91, (char *)&type metadata for Any + 8, v16, 6LL))
    {
      sub_12294((uint64_t)&v93, (uint64_t)v91);
      sub_12224((uint64_t)v92, (uint64_t)&v89);
      swift_beginAccess(v6, v88, 33LL, 0LL);
      if (!*v6) {
        goto LABEL_63;
      }
      if (v90)
      {
        uint64_t v37 = v8;
        uint64_t v38 = v7;
        sub_121F4(&v89, v87);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
        __int128 v40 = *v6;
        uint64_t v85 = (void *)*v6;
        *uint64_t v6 = 0x8000000000000000LL;
        uint64_t v42 = sub_14460((uint64_t)v91);
        char v43 = *(void *)(v40 + 16);
        id v44 = (v41 & 1) == 0;
        uint64_t v45 = v43 + v44;
        if (__OFADD__(v43, v44)) {
          goto LABEL_59;
        }
        uint64_t v46 = v41;
        if (*(void *)(v40 + 24) >= v45)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            uint64_t v49 = v85;
            if ((v41 & 1) == 0) {
              goto LABEL_42;
            }
          }

          else
          {
            sub_14CD0();
            uint64_t v49 = v85;
            if ((v46 & 1) == 0) {
              goto LABEL_42;
            }
          }
        }

        else
        {
          sub_14698(v45, isUniquelyReferenced_nonNull_native);
          uint64_t v47 = sub_14460((uint64_t)v91);
          if ((v46 & 1) != (v48 & 1)) {
            goto LABEL_65;
          }
          uint64_t v42 = v47;
          uint64_t v49 = v85;
          if ((v46 & 1) == 0)
          {
LABEL_42:
            v49[(v42 >> 6) + 8] |= 1LL << v42;
            sub_12294((uint64_t)v91, v49[6] + 40 * v42);
            sub_121F4(v87, (_OWORD *)(v49[7] + 32 * v42));
            int v57 = v49[2];
            uint64_t v58 = __OFADD__(v57, 1LL);
            uint64_t v59 = v57 + 1;
            if (v58) {
              goto LABEL_60;
            }
            v49[2] = v59;
LABEL_51:
            id v81 = (RCSServiceSession *)*v6;
            *uint64_t v6 = (uint64_t)v49;
            swift_bridgeObjectRelease(v81, v50, v51, v52, v53, v54, v55, v56);
            sub_12260((uint64_t)v91);
            unint64_t v7 = v38;
            uint64_t v8 = v37;
LABEL_54:
            uint64_t v10 = (__int128 *)v88;
            goto LABEL_7;
          }
        }

        uint64_t v80 = (void *)(v49[7] + 32 * v42);
        sub_12204(v80);
        sub_121F4(v87, v80);
        goto LABEL_51;
      }

      sub_1231C((uint64_t)&v89, &qword_76588);
      uint64_t v60 = (RCSServiceSession *)*v6;
      swift_bridgeObjectRetain();
      id v61 = sub_14460((uint64_t)v91);
      uint64_t v63 = (char)v62;
      swift_bridgeObjectRelease(v60, v62, v64, v65, v66, v67, v68, v69);
      if ((v63 & 1) != 0)
      {
        id v70 = swift_isUniquelyReferenced_nonNull_native(*v6);
        id v71 = *v6;
        __int128 v86 = (RCSServiceSession *)*v6;
        *uint64_t v6 = 0x8000000000000000LL;
        if ((v70 & 1) == 0)
        {
          sub_14CD0();
          id v71 = (uint64_t)v86;
        }

        sub_12260(*(void *)(v71 + 48) + 40 * v61);
        sub_121F4((_OWORD *)(*(void *)(v71 + 56) + 32 * v61), v87);
        sub_B76C(v61, v71);
        NSString v72 = (RCSServiceSession *)*v6;
        *uint64_t v6 = v71;
        swift_bridgeObjectRelease(v72, v73, v74, v75, v76, v77, v78, v79);
      }

      else
      {
        memset(v87, 0, sizeof(v87));
      }

      sub_12260((uint64_t)v91);
      sub_1231C((uint64_t)v87, &qword_76588);
      goto LABEL_54;
    }

    swift_beginAccess(v6, &v89, 33LL, 0LL);
    uint64_t v17 = (RCSServiceSession *)*v6;
    if (!*v6) {
      goto LABEL_62;
    }
    swift_bridgeObjectRetain();
    uint64_t v18 = sub_14460((uint64_t)&v93);
    __int128 v20 = (char)v19;
    swift_bridgeObjectRelease(v17, v19, v21, v22, v23, v24, v25, v26);
    if ((v20 & 1) != 0)
    {
      int64_t v27 = swift_isUniquelyReferenced_nonNull_native(*v6);
      char v28 = *v6;
      *(void *)&v87[0] = *v6;
      *uint64_t v6 = 0x8000000000000000LL;
      if ((v27 & 1) == 0)
      {
        sub_14CD0();
        char v28 = *(void *)&v87[0];
      }

      sub_12260(*(void *)(v28 + 48) + 40 * v18);
      sub_121F4((_OWORD *)(*(void *)(v28 + 56) + 32 * v18), v91);
      sub_B76C(v18, v28);
      unint64_t v29 = (RCSServiceSession *)*v6;
      *uint64_t v6 = v28;
      swift_bridgeObjectRelease(v29, v30, v31, v32, v33, v34, v35, v36);
    }

    else
    {
      memset(v91, 0, 32);
    }

    sub_1231C((uint64_t)v91, &qword_76588);
    uint64_t v10 = &v89;
LABEL_7:
    swift_endAccess(v10);
    sub_12204(v92);
    sub_12260((uint64_t)&v93);
  }

  unint64_t v14 = *(void *)&v83[8 * v15];
  if (v14)
  {
LABEL_17:
    int64_t v13 = v15;
LABEL_14:
    uint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v13 << 6);
    int64_t v9 = v13;
    goto LABEL_10;
  }

  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v13 >= v84)
    {
      int64_t v9 = v84 - 1;
      goto LABEL_28;
    }

    unint64_t v14 = *(void *)&v83[8 * v13];
    ++v15;
    if (v14) {
      goto LABEL_14;
    }
  }

void *sub_14EB4()
{
  uint64_t v1 = v0;
  sub_5C28(&qword_765D0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    Swift::Int result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  Swift::Int result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }

void *sub_1506C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_5C28(&qword_76558);
  uint64_t v4 = (void *)swift_allocObject(v3, 16 * v1 + 32, 7LL);
  int64_t v5 = j__malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 17;
  }
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  uint64_t v7 = sub_152C0((uint64_t)&v10, v4 + 4, v1, a1);
  uint64_t v8 = v10;
  swift_bridgeObjectRetain();
  sub_122D0(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

uint64_t sub_15150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_14490(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_14EB4();
LABEL_7:
    __int128 v20 = (void *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = (void *)(v20[7] + 16 * v14);
      uint64_t v22 = v21[1];
      void *v21 = a1;
      v21[1] = a2;
      return swift_bridgeObjectRelease(v22);
    }

LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  if (v5 == v3 && v6 == v2)
  {
    uint64_t v8 = 1;
    uint64_t v2 = v6;
  }

  else
  {
    uint64_t v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v3, v2, 0LL);
  }

  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v2);
  return v8 & 1;
}

uint64_t sub_152C0(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  int64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *int64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    __int128 v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }

    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain(v21);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

LABEL_41:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

void sub_154BC(uint64_t a1)
{
  uint64_t v83 = (int *)_s17ParticipantChangeVMa(0LL);
  uint64_t v2 = __chkstk_darwin(v83);
  uint64_t v77 = (uint64_t)&v76 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v76 - v5;
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v76 - v7;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  int64_t v12 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = Logger.rcs.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v9);
  sub_15C9C(a1, (uint64_t)v8);
  uint64_t v14 = sub_15C9C(a1, (uint64_t)v6);
  unint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc(22LL, -1LL);
    uint64_t v80 = swift_slowAlloc(64LL, -1LL);
    uint64_t v85 = v80;
    *(_DWORD *)uint64_t v17 = 136446466;
    int64_t v79 = v17 + 4;
    uint64_t v18 = type metadata accessor for UUID(0LL);
    uint64_t v81 = v9;
    uint64_t v19 = v18;
    unint64_t v20 = sub_15EB8();
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter(v19, v20);
    unint64_t v23 = v22;
    uint64_t v84 = sub_B004(v21, v22, &v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85);
    swift_bridgeObjectRelease(v23);
    sub_15E7C((uint64_t)v8);
    *(_WORD *)(v17 + 12) = 2080;
    uint64_t v24 = sub_13ED4();
    unint64_t v26 = v25;
    uint64_t v84 = sub_B004(v24, v25, &v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85);
    swift_bridgeObjectRelease(v26);
    sub_15E7C((uint64_t)v6);
    _os_log_impl(&dword_0, v15, v16, "Internalizing participant change %{public}s: %s", (uint8_t *)v17, 0x16u);
    uint64_t v27 = v80;
    swift_arrayDestroy(v80, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v81);
  }

  else
  {
    sub_15E7C((uint64_t)v8);
    sub_15E7C((uint64_t)v6);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  uint64_t v28 = v83[7];
  BOOL v29 = (uint64_t *)(a1 + v83[8]);
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  uint64_t v76 = v31;
  uint64_t v81 = v30;
  uint64_t v32 = *(void *)(a1 + v28);
  uint64_t v33 = *(void *)(v32 + 64);
  uint64_t v78 = v32 + 64;
  uint64_t v34 = 1LL << *(_BYTE *)(v32 + 32);
  uint64_t v35 = -1LL;
  if (v34 < 64) {
    uint64_t v35 = ~(-1LL << v34);
  }
  unint64_t v36 = v35 & v33;
  int64_t v79 = (unint64_t)(v34 + 63) >> 6;
  uint64_t v80 = v32;
  swift_bridgeObjectRetain();
  int64_t v37 = 0LL;
  while (1)
  {
    if (v36)
    {
      unint64_t v40 = __clz(__rbit64(v36));
      v36 &= v36 - 1;
      unint64_t v41 = v40 | (v37 << 6);
      goto LABEL_25;
    }

    int64_t v42 = v37 + 1;
    if (__OFADD__(v37, 1LL))
    {
      __break(1u);
      goto LABEL_49;
    }

    if (v42 >= v79) {
      goto LABEL_47;
    }
    unint64_t v43 = *(void *)(v78 + 8 * v42);
    ++v37;
    if (!v43)
    {
      int64_t v37 = v42 + 1;
      if (v42 + 1 >= v79) {
        goto LABEL_47;
      }
      unint64_t v43 = *(void *)(v78 + 8 * v37);
      if (!v43)
      {
        int64_t v37 = v42 + 2;
        if (v42 + 2 >= v79) {
          goto LABEL_47;
        }
        unint64_t v43 = *(void *)(v78 + 8 * v37);
        if (!v43) {
          break;
        }
      }
    }

LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
}

uint64_t sub_15C9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s17ParticipantChangeVMa(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_15CE0()
{
  uint64_t v1 = (int *)_s17ParticipantChangeVMa(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));

  uint64_t v7 = v0 + v4;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);

  swift_bridgeObjectRelease(*(void *)(v7 + v1[7]));
  swift_bridgeObjectRelease(*(void *)(v7 + v1[8] + 8));
  swift_bridgeObjectRelease(*(void *)(v7 + v1[9] + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_15DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s17ParticipantChangeVMa(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_15DE8(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(_s17ParticipantChangeVMa(0LL) - 8) + 80LL);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  uint64_t v9 = (void *)swift_task_alloc(dword_765BC);
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_51A0;
  return sub_13ACC(a1, v5, v6, v7, v8);
}

uint64_t sub_15E7C(uint64_t a1)
{
  uint64_t v2 = _s17ParticipantChangeVMa(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_15EB8()
{
  unint64_t result = qword_765C8;
  if (!qword_765C8)
  {
    uint64_t v1 = type metadata accessor for UUID(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_765C8);
  }

  return result;
}

uint64_t sub_15F00(uint64_t a1)
{
  uint64_t v2 = sub_5C28(&qword_76588);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *sub_15F40(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[6];
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_15F90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_5C28(&qword_765D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void *sub_15FD8(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *a1 = *a2;
    a1 = (void *)(v23 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v23);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = *(void **)((char *)a2 + v8);
    *(void *)((char *)a1 + v8) = v10;
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
    uint64_t v11 = a3[7];
    uint64_t v12 = a3[8];
    uint64_t v13 = *(void *)((char *)a2 + v11);
    *(void *)((char *)a1 + v11) = v13;
    uint64_t v14 = (void *)((char *)a1 + v12);
    unint64_t v15 = (void *)((char *)a2 + v12);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    uint64_t v17 = a3[9];
    uint64_t v18 = a3[10];
    uint64_t v19 = (void *)((char *)a1 + v17);
    unint64_t v20 = (void *)((char *)a2 + v17);
    uint64_t v21 = v20[1];
    void *v19 = *v20;
    v19[1] = v21;
    *((_BYTE *)a1 + v18) = *((_BYTE *)a2 + v18);
    id v22 = v10;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v21);
  }

  return a1;
}

uint64_t sub_160C4(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);

  swift_bridgeObjectRelease(*(void *)(a1 + a2[7]));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[8] + 8));
  return swift_bridgeObjectRelease(*(void *)(a1 + a2[9] + 8));
}

uint64_t sub_16134(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v9;
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = *(void *)(a2 + v10);
  *(void *)(a1 + v10) = v12;
  uint64_t v13 = (void *)(a1 + v11);
  uint64_t v14 = (void *)(a2 + v11);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = a3[9];
  uint64_t v17 = a3[10];
  uint64_t v18 = (void *)(a1 + v16);
  uint64_t v19 = (void *)(a2 + v16);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  id v21 = v9;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v20);
  return a1;
}

uint64_t sub_161F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void **)(a2 + v7);
  uint64_t v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  uint64_t v11 = a3[7];
  uint64_t v12 = *(void *)(a2 + v11);
  uint64_t v13 = *(void *)(a1 + v11);
  *(void *)(a1 + v11) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = a3[8];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  void *v15 = *v16;
  uint64_t v17 = v16[1];
  uint64_t v18 = v15[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  uint64_t v19 = a3[9];
  uint64_t v20 = (void *)(a1 + v19);
  id v21 = (void *)(a2 + v19);
  *uint64_t v20 = *v21;
  uint64_t v22 = v21[1];
  uint64_t v23 = v20[1];
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_162E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  return a1;
}

uint64_t sub_16374(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  uint64_t v9 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  uint64_t v10 = *(void *)(a1 + v9);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = a3[8];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  uint64_t v16 = v12[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = a3[9];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  uint64_t v22 = v18[1];
  *uint64_t v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease(v22);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_16438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_16444);
}

uint64_t sub_16444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_164C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_164CC);
}

uint64_t sub_164CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_16544(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = &unk_5F738;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[4] = &unk_5F750;
    v4[5] = &unk_5F750;
    v4[6] = &unk_5F738;
    swift_initStructMetadata(a1, 256LL, 7LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for RCSHandle.Attribute(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t _s17ParticipantChangeV10ChangeTypeOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

    int v4 = (v11 - 1) & v11;
  }

  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t _s17ParticipantChangeV10ChangeTypeOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_166CC + 4 * byte_5F715[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_16700 + 4 * byte_5F710[v4]))();
}

uint64_t sub_16700(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_16708(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x16710LL);
  }
  return result;
}

uint64_t sub_1671C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x16724LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_16728(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_16730(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1673C(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_16744(_BYTE *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *_s17ParticipantChangeV10ChangeTypeOMa()
{
  return &_s17ParticipantChangeV10ChangeTypeON;
}

unint64_t sub_16764()
{
  unint64_t result = qword_76688;
  if (!qword_76688)
  {
    unint64_t result = swift_getWitnessTable(&unk_5F804, &_s17ParticipantChangeV10ChangeTypeON);
    atomic_store(result, (unint64_t *)&qword_76688);
  }

  return result;
}

uint64_t RCSServiceSession.replicationPhoneNumbers()()
{
  v3.super_class = (Class)&OBJC_CLASS___RCSServiceSession;
  id v0 = objc_msgSendSuper2(&v3, "replicationPhoneNumbers");
  uint64_t v1 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

Swift::Bool __swiftcall RCSServiceSession.replicationRequirementsSatisfied(forPhoneNumber:simID:)( Swift::String forPhoneNumber, Swift::String_optional simID)
{
  objc_super v3 = v2;
  object = simID.value._object;
  uint64_t countAndFlagsBits = simID.value._countAndFlagsBits;
  unsigned int v6 = forPhoneNumber._object;
  uint64_t v7 = forPhoneNumber._countAndFlagsBits;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v44 = *(void *)(v8 - 8);
  uint64_t v45 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (void *)objc_opt_self(&OBJC_CLASS___IMCTRCSUtilitiesManager);
  id v12 = [v11 sharedManager];
  uint64_t v42 = v7;
  NSString v13 = String._bridgeToObjectiveC()();
  uint64_t v41 = countAndFlagsBits;
  if (object) {
    NSString v14 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v14 = 0LL;
  }
  unsigned int v43 = [v12 groupTextReplicationSupportedForPhoneNumber:v13 simID:v14];

  IMSharedHelperRetrieveSimDetailsFromTelephony();
  id v15 = [v3 relayController];
  unsigned int v46 = [v15 hasRelayDevice];

  id v16 = [v11 sharedManager];
  NSString v17 = String._bridgeToObjectiveC()();
  if (object) {
    NSString v18 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v18 = 0LL;
  }
  uint64_t v19 = (uint64_t)v10;
  unsigned int v20 = [v16 groupMessagingEnabledForPhoneNumber:v17 simID:v18];

  id v21 = [v3 relayController];
  unsigned int v22 = [v21 hasRelayDevice];

  if (v22)
  {
    id v23 = [v3 relayController];
    unsigned int v39 = [v23 _canRelayMMS];

    uint64_t v24 = v44;
    if ((v46 & v20 & v43 & 1) != 0)
    {
      BOOL v40 = 1;
      unsigned int v46 = 1;
      uint64_t v25 = v45;
      goto LABEL_14;
    }

    uint64_t v25 = v45;
  }

  else
  {
    unsigned int v39 = 0;
    uint64_t v24 = v44;
    uint64_t v25 = v45;
    if ((v46 & v20 & v43 & 1) != 0)
    {
      BOOL v40 = 1;
      unsigned int v46 = 1;
      goto LABEL_14;
    }
  }

  BOOL v40 = 0;
LABEL_14:
  uint64_t v26 = Logger.rcs.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v19, v26, v25);
  swift_bridgeObjectRetain_n(object, 4LL);
  swift_bridgeObjectRetain_n(v6, 4LL);
  id v27 = v3;
  uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v29 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = swift_slowAlloc(58LL, -1LL);
    uint64_t v38 = swift_slowAlloc(64LL, -1LL);
    uint64_t v48 = v38;
    *(_DWORD *)uint64_t v30 = 136316930;
    swift_bridgeObjectRetain();
    uint64_t v47 = sub_B004(v42, (unint64_t)v6, &v48);
    unsigned int v37 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
    swift_bridgeObjectRelease_n(v6, 3LL);
    *(_WORD *)(v30 + 12) = 2080;
    if (object) {
      uint64_t v31 = v41;
    }
    else {
      uint64_t v31 = 0x3E6C696E3CLL;
    }
    uint64_t v42 = v19;
    if (object) {
      unint64_t v32 = (unint64_t)object;
    }
    else {
      unint64_t v32 = 0xE500000000000000LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v47 = sub_B004(v31, v32, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
    swift_bridgeObjectRelease_n(object, 2LL);
    swift_bridgeObjectRelease(v32);
    *(_WORD *)(v30 + 22) = 1024;
    Swift::Bool v33 = v40;
    LODWORD(v47) = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, (char *)&v47 + 4);
    *(_WORD *)(v30 + 28) = 1024;
    LODWORD(v47) = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, (char *)&v47 + 4);
    *(_WORD *)(v30 + 34) = 1024;
    LODWORD(v47) = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, (char *)&v47 + 4);
    *(_WORD *)(v30 + 40) = 1024;
    LODWORD(v47) = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, (char *)&v47 + 4);
    *(_WORD *)(v30 + 46) = 1024;
    swift_bridgeObjectRelease(object);
    swift_bridgeObjectRelease(v6);

    LODWORD(v47) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, (char *)&v47 + 4);
    swift_bridgeObjectRelease(object);
    swift_bridgeObjectRelease(v6);

    *(_WORD *)(v30 + 52) = 1024;
    LODWORD(v47) = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, (char *)&v47 + 4);
    _os_log_impl( &dword_0,  v28,  v29,  "Phone number %s and simID %s satisfy replication requirements %{BOOL}d (RCS: %{BOOL}d groups: %{BOOL}d isEnabledBy Carrier: %{BOOL}d local RCS: %{BOOL}d relay: %{BOOL}d)",  (uint8_t *)v30,  0x3Au);
    uint64_t v34 = v38;
    swift_arrayDestroy(v38, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_slowDealloc(v30, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v42, v45);
  }

  else
  {

    swift_bridgeObjectRelease_n(object, 4LL);
    swift_bridgeObjectRelease_n(v6, 4LL);

    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v19, v25);
    return v40;
  }

  return v33;
}

void RCSServiceSession.replicationRequiredForFeaturesUsed(by:)(void *a1)
{
  int v2 = v1;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v43 - v9;
  uint64_t v11 = sub_5C28(&qword_762F8);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  NSString v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_761F0 != -1) {
    swift_once(&qword_761F0, sub_6210);
  }
  uint64_t v15 = sub_6298(v11, (uint64_t)qword_762A8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v15, v11);
  PrototypingSetting.wrappedValue.getter(&v46, v11);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if (v46 == 1)
  {
    uint64_t v16 = Logger.rcs.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, v16, v4);
    id v17 = a1;
    NSString v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v43 = v5;
      uint64_t v44 = v4;
      unsigned int v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      uint64_t v46 = v21;
      *(_DWORD *)unsigned int v20 = 136315138;
      id v22 = [v17 guid];
      if (v22)
      {
        id v23 = v22;
        uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
        unint64_t v26 = v25;

        uint64_t v45 = sub_B004(v24, v26, &v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);

        swift_bridgeObjectRelease(v26);
        _os_log_impl(&dword_0, v18, v19, "Replicating message %s due to override", v20, 0xCu);
        swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v21, -1LL, -1LL);
        swift_slowDealloc(v20, -1LL, -1LL);

        (*(void (**)(char *, uint64_t))(v43 + 8))(v10, v44);
        return;
      }

      __break(1u);
LABEL_20:

      __break(1u);
      return;
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }

  else
  {
    v47.receiver = v2;
    v47.super_class = (Class)&OBJC_CLASS___RCSServiceSession;
    if ((objc_msgSendSuper2(&v47, "replicationRequiredForFeaturesUsedByMessageItem:", a1) & 1) == 0)
    {
      id v27 = [a1 threadIdentifier];
      if (v27)
      {
        uint64_t v28 = v27;
        uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
        unint64_t v31 = v30;

        swift_bridgeObjectRelease(v31);
        uint64_t v32 = HIBYTE(v31) & 0xF;
        if ((v31 & 0x2000000000000000LL) == 0) {
          uint64_t v32 = v29 & 0xFFFFFFFFFFFFLL;
        }
        if (v32)
        {
          uint64_t v33 = Logger.rcs.unsafeMutableAddressor();
          (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v33, v4);
          uint64_t v10 = a1;
          uint64_t v34 = (void *)Logger.logObject.getter(v10);
          os_log_type_t v35 = static os_log_type_t.debug.getter();
          if (!os_log_type_enabled((os_log_t)v34, v35))
          {

            (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
            return;
          }

          uint64_t v43 = v5;
          uint64_t v44 = v4;
          uint64_t v36 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v37 = swift_slowAlloc(32LL, -1LL);
          uint64_t v46 = v37;
          *(_DWORD *)uint64_t v36 = 136315138;
          id v38 = [v10 guid];
          if (v38)
          {
            unsigned int v39 = v38;
            uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
            unint64_t v42 = v41;

            uint64_t v45 = sub_B004(v40, v42, &v46);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);

            swift_bridgeObjectRelease(v42);
            _os_log_impl(&dword_0, (os_log_t)v34, v35, "Replicating message %s due to thread", v36, 0xCu);
            swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v37, -1LL, -1LL);
            swift_slowDealloc(v36, -1LL, -1LL);

            (*(void (**)(char *, uint64_t))(v43 + 8))(v8, v44);
            return;
          }

          goto LABEL_20;
        }
      }
    }
  }

Swift::Bool __swiftcall RCSServiceSession.replicationRequired(forMessageBodyAttributeName:)( Swift::String forMessageBodyAttributeName)
{
  object = forMessageBodyAttributeName._object;
  if (static String._unconditionallyBridgeFromObjectiveC(_:)(IMFileTransferGUIDAttributeName) == forMessageBodyAttributeName._countAndFlagsBits
    && v3 == object)
  {
    swift_bridgeObjectRelease(object);
    return 0;
  }

  else
  {
    uint64_t v5 = v3;
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease(v5);
    unsigned __int8 v7 = 0;
    if ((v6 & 1) == 0)
    {
      NSString v8 = String._bridgeToObjectiveC()();
      v10.receiver = v1;
      v10.super_class = (Class)&OBJC_CLASS___RCSServiceSession;
      unsigned __int8 v7 = objc_msgSendSuper2(&v10, "replicationRequiredForMessageBodyAttributeName:", v8);
    }
  }

  return v7;
}

void *sub_175A8(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  if (__src) {
    uint64_t v4 = a2 - (void)__src;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (!__dst)
  {
    if (v4 <= 0) {
      return __src;
    }
LABEL_10:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawBufferPointer.copyMemory source has too many elements",  69LL,  2LL,  "Swift/UnsafeRawBufferPointer.swift",  34LL,  2,  487LL,  0);
    __break(1u);
    return __src;
  }

  if (__src) {
    return memmove(__dst, __src, a2 - (void)__src);
  }
  return __src;
}

uint64_t sub_1763C(uint64_t (*a1)(void))
{
  return a1() & 1;
}

uint64_t sub_17660@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t RCSServiceSession.readIdentity(for:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *((void *)&v8 + 1) = sub_17734();
  uint64_t v9 = &protocol witness table for IMDChat;
  *(void *)&__int128 v7 = a1;
  id v4 = a1;
  if ((IMDChatRCSGroupIdentity.isValid.getter() & 1) != 0)
  {
    *(void *)(a2 + 24) = &type metadata for IMDChatRCSGroupIdentity;
    *(void *)(a2 + 32) = &protocol witness table for IMDChatRCSGroupIdentity;
    uint64_t result = swift_allocObject(&unk_71610, 56LL, 7LL);
    __int128 v6 = v8;
    *(_OWORD *)(result + 16) = v7;
    *(_OWORD *)(result + 32) = v6;
    *(void *)(result + 48) = v9;
  }

  else
  {
    sub_CA5C(&v7);
    uint64_t result = 0LL;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
  }

  *(void *)a2 = result;
  return result;
}

unint64_t sub_17734()
{
  unint64_t result = qword_76368;
  if (!qword_76368)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___IMDChat);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_76368);
  }

  return result;
}

uint64_t sub_17770()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_17794()
{
  swift_release(*(void *)(v0 + 48));
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

id RCSServiceSession.init(account:service:replicatingFor:)(void *a1, void *a2, void *a3)
{
  id v6 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithAccount:a1 service:a2 replicatingForSession:a3];

  return v6;
}

void RCSServiceSession.init(account:service:replicatingFor:)(void *a1, void *a2, void *a3)
{
  uint64_t v7 = sub_5C28(&qword_762F8);
  uint64_t v78 = *(void *)(v7 - 8);
  uint64_t v79 = v7;
  __chkstk_darwin(v7);
  uint64_t v77 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v81 = type metadata accessor for Logger(0LL);
  uint64_t v76 = *(void *)(v81 - 8);
  uint64_t v9 = __chkstk_darwin(v81);
  uint64_t v80 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  id v75 = (char *)&v74 - v11;
  uint64_t v12 = sub_5C28(&qword_76310);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = _s5StateCMa();
  uint64_t v17 = swift_allocObject(v16, 56LL, 7LL);
  *(_OWORD *)(v17 + 16) = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
  *(void *)(v17 + 48) = 0LL;
  *(void *)&v3[OBJC_IVAR___RCSServiceSession_state] = v17;
  v87.receiver = v3;
  v87.super_class = (Class)&OBJC_CLASS___RCSServiceSession;
  id v82 = a1;
  id v83 = a2;
  id v84 = a3;
  NSString v18 = (char *)objc_msgSendSuper2(&v87, "initWithAccount:service:replicatingForSession:", a1, a2, a3);
  uint64_t v19 = OBJC_IVAR___RCSServiceSession_state;
  uint64_t v20 = *(void *)&v18[OBJC_IVAR___RCSServiceSession_state];
  uint64_t v21 = sub_5C28(&qword_76698);
  uint64_t v22 = swift_allocObject(v21, 24LL, 7LL);
  *(void *)(v22 + 16) = v18;
  uint64_t v23 = *(void *)(v20 + 16);
  *(void *)(v20 + 16) = v22;
  uint64_t v24 = v18;
  swift_release(v23);
  uint64_t v25 = *(void *)&v18[v19];
  type metadata accessor for RCSTypingTracker();
  unint64_t v26 = v24;
  swift_retain(v25);
  id v27 = RCSTypingTracker.__allocating_init(delegate:)( (uint64_t)v26,  (uint64_t)&protocol witness table for RCSServiceSession);
  uint64_t v28 = *(void *)(v25 + 24);
  *(void *)(v25 + 24) = v27;
  swift_release(v25);
  swift_release(v28);
  uint64_t v29 = *(void *)&v18[v19];
  unint64_t v30 = (objc_class *)type metadata accessor for RCSServiceReachabilityDelegate();
  unint64_t v31 = (char *)objc_allocWithZone(v30);
  swift_unknownObjectUnownedInit(&v31[OBJC_IVAR____TtC3RCS30RCSServiceReachabilityDelegate_rcsServiceSession], v26);
  v86.receiver = v31;
  v86.super_class = v30;
  swift_retain(v29);
  id v32 = objc_msgSendSuper2(&v86, "initWithServiceSession:", v26);
  uint64_t v33 = *(void **)(v29 + 40);
  *(void *)(v29 + 40) = v32;
  swift_release(v29);

  uint64_t v34 = *(void *)&v18[v19];
  os_log_type_t v35 = *(void **)(v34 + 40);
  if (v35)
  {
    uint64_t v36 = qword_761D8;
    swift_retain(*(void *)&v18[v19]);
    id v37 = v35;
    if (v36 != -1) {
      swift_once(&qword_761D8, sub_60AC);
    }
    uint64_t v38 = sub_6298(v12, (uint64_t)qword_76260);
    unsigned int v39 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v39(v15, v38, v12);
    PrototypingSetting.wrappedValue.getter(v88, v12);
    uint64_t v40 = *(void (**)(char *, uint64_t))(v13 + 8);
    v40(v15, v12);
    uint64_t v41 = v88[0];
    if (qword_761E0 != -1) {
      swift_once(&qword_761E0, sub_60D8);
    }
    uint64_t v42 = sub_6298(v12, (uint64_t)qword_76278);
    v39(v15, v42, v12);
    PrototypingSetting.wrappedValue.getter(v88, v12);
    v40(v15, v12);
    uint64_t v43 = v88[0];
    v88[0] = v41;
    v88[1] = v43;
    v88[2] = 0LL;
    v88[3] = 0LL;
    char v89 = 1;
    uint64_t v44 = sub_5C28(&qword_766A0);
    swift_allocObject(v44, 32LL, 7LL);
    uint64_t v45 = RCSReachabilityController.init(delegate:operationConfiguration:)((uint64_t)v37, (uint64_t)v88);
    uint64_t v46 = *(void *)(v34 + 32);
    *(void *)(v34 + 32) = v45;
    swift_release(v34);
    swift_release(v46);
    uint64_t v47 = *(void *)&v18[v19];
    uint64_t v48 = sub_5C28(&qword_766A8);
    swift_allocObject(v48, *(unsigned int *)(v48 + 48), *(unsigned __int16 *)(v48 + 52));
    uint64_t v49 = v26;
    swift_retain(v47);
    uint64_t v50 = RCSMessageProcessingQueue.init(delegate:)((uint64_t)v49);
    uint64_t v51 = *(void *)(v47 + 48);
    *(void *)(v47 + 48) = v50;
    swift_release(v47);
    swift_release(v51);
    id v52 = [(id)objc_opt_self(IMDRelayPushHandler) sharedInstance];
    [v52 addListener:v49];

    uint64_t v53 = Logger.rcs.unsafeMutableAddressor();
    uint64_t v54 = v76;
    id v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v76 + 16);
    id v56 = v75;
    uint64_t v57 = v81;
    uint64_t v58 = v55(v75, v53, v81);
    id v59 = (os_log_s *)Logger.logObject.getter(v58);
    os_log_type_t v60 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v59, v60))
    {
      id v61 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v61 = 0;
      _os_log_impl(&dword_0, v59, v60, "RCSServiceSession is ready to go!", v61, 2u);
      swift_slowDealloc(v61, -1LL, -1LL);
    }

    uint64_t v62 = *(void (**)(char *, uint64_t))(v54 + 8);
    v62(v56, v57);
    if (qword_761D0 != -1) {
      swift_once(&qword_761D0, sub_5FB4);
    }
    uint64_t v63 = v79;
    uint64_t v64 = sub_6298(v79, (uint64_t)qword_76248);
    id v65 = v77;
    uint64_t v66 = v78;
    (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v77, v64, v63);
    PrototypingSetting.wrappedValue.getter(&v85, v63);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v65, v63);
    if (v85 == 1)
    {
      uint64_t v67 = v55(v80, v53, v57);
      id v68 = (os_log_s *)Logger.logObject.getter(v67);
      os_log_type_t v69 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v68, v69))
      {
        id v70 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)id v70 = 0;
        _os_log_impl(&dword_0, v68, v69, "RCSServiceSession will prompt for radars when capturing an ABC", v70, 2u);
        swift_slowDealloc(v70, -1LL, -1LL);
      }

      v62(v80, v57);
    }

    id v71 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
    uint64_t v72 = IMDFileTransferAcceptedNotification;
    uint64_t v73 = v49;
    [v71 addObserver:v73 selector:"_handleFileTransferAccepted:" name:v72 object:0];
  }

  else
  {
    __break(1u);
  }

uint64_t _s5StateCMa()
{
  return objc_opt_self(&OBJC_CLASS____TtCE3RCSCSo17RCSServiceSessionP33_958ECB92F450204EAA2FDAC5B6065F4A5State);
}

Swift::Int __swiftcall RCSServiceSession.maxRecipients(forPhoneNumber:simID:)( Swift::String forPhoneNumber, Swift::String simID)
{
  id v2 = [(id)objc_opt_self(IMCTRCSUtilitiesManager) sharedManager];
  NSString v3 = String._bridgeToObjectiveC()();
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v2 groupMessagingMaxGroupSizeForPhoneNumber:v3 simID:v4];

  return (Swift::Int)v5;
}

Swift::Bool __swiftcall RCSServiceSession._isActiveServiceForRelay()()
{
  id v0 = [(id)objc_opt_self(IMFeatureFlags) sharedFeatureFlags];
  unsigned __int8 v1 = [v0 isLazuliEnabled];

  return v1;
}

uint64_t RCSServiceSession.makeSender(for:for:chatStyle:recipients:)()
{
  return 0LL;
}

void RCSServiceSession.sendMessageDirect(sourceMessage:rcsMessage:chat:)(void *a1)
{
  id v2 = v1;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = Logger.rcs.unsafeMutableAddressor();
  uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl( &dword_0,  v10,  v11,  "Asked to send a message over RCS but RCS is not supported on this platform yet!",  v12,  2u);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  id v13 = [a1 guid];
  if (v13)
  {
    uint64_t v14 = v13;
    [v2 processMessageSendFailure:v13];
  }

  else
  {
    __break(1u);
  }

id RCSServiceSession.shouldSendReadReceipts(forChat:style:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  v8.receiver = v3;
  v8.super_class = (Class)&OBJC_CLASS___RCSServiceSession;
  id v6 = objc_msgSendSuper2(&v8, "shouldSendReadReceiptsForChat:style:", v5, a3);

  return v6;
}

void RCSServiceSession.sendReadReceipt(forMessage:toChatID:identifier:style:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3)
  {
    NSString v8 = 0LL;
    if (a5) {
      goto LABEL_3;
    }
LABEL_5:
    NSString v9 = 0LL;
    goto LABEL_6;
  }

  NSString v8 = String._bridgeToObjectiveC()();
  if (!a5) {
    goto LABEL_5;
  }
LABEL_3:
  NSString v9 = String._bridgeToObjectiveC()();
LABEL_6:
  id v10 = v9;
  objc_msgSend(v5, "sendReadReceiptForMessage:toChatID:identifier:style:reflectOnly:", a1, v8);
}

void RCSServiceSession.sendReadReceipt(forMessage:toChatID:identifier:style:reflectOnly:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unsigned __int8 a6, char a7)
{
}

void RCSServiceSession.updateDisplayName(_:fromDisplayName:fromID:forChatID:identifier:style:messageID:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11, uint64_t a12, uint64_t a13)
{
}

void sub_186F8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3) {
    NSString v11 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v11 = 0LL;
  }
  swift_beginAccess(a5, v15, 0LL, 0LL);
  uint64_t v12 = *(void *)(a5 + 8);
  if (v12)
  {
    swift_bridgeObjectRetain(v12);
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v12);
    if (a7)
    {
      NSString v14 = String._bridgeToObjectiveC()();
      [a1 relayDisplayNameChange:v11 forChat:a4 fromID:v13 messageID:v14 didOccurLocally:0];

      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

LABEL_9:
  uint64_t v20 = 0LL;
LABEL_10:
  uint64_t v21 = a7;
  uint64_t v22 = a9;
  uint64_t v23 = self;
  if (!v21)
  {
    uint64_t v24 = 0LL;
    unint64_t v26 = 0LL;
    if (v22) {
      goto LABEL_12;
    }
LABEL_14:
    id v27 = 0LL;
    uint64_t v29 = 0LL;
    goto LABEL_15;
  }

  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(a7);
  unint64_t v26 = v25;

  if (!v22) {
    goto LABEL_14;
  }
LABEL_12:
  id v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(a9);
  uint64_t v29 = v28;

LABEL_15:
  sub_199AC(v78, (uint64_t)v80, v16, (uint64_t)v18, (uint64_t)a6, (uint64_t)v20, v24, (uint64_t)v26, a8, v27, (uint64_t)v29);

  swift_bridgeObjectRelease(v77, v30, v31, v32, v33, v34, v35, v36, v72);
  swift_bridgeObjectRelease(v29, v37, v38, v39, v40, v41, v42, v43, v73);
  swift_bridgeObjectRelease(v26, v44, v45, v46, v47, v48, v49, v50, v74);
  swift_bridgeObjectRelease(v20, v51, v52, v53, v54, v55, v56, v57, v75);
  swift_bridgeObjectRelease(v18, v58, v59, v60, v61, v62, v63, v64, v76);
  swift_bridgeObjectRelease(v80, v65, v66, v67, v68, v69, v70, v71, a9);
}

  __break(1u);
  return result;
}

void RCSServiceSession.sendGroupPhotoUpdate(_:toChatID:identifier:style:account:isPhotoRefresh:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, char a10)
{
  int v21 = a7;
  uint64_t v11 = sub_5C28(&qword_762F8);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  NSString v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_76200 != -1) {
    swift_once(&qword_76200, sub_62B0);
  }
  uint64_t v15 = sub_6298(v11, (uint64_t)qword_762D8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v15, v11);
  PrototypingSetting.wrappedValue.getter(&v23, v11);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if ((v23 & 1) == 0)
  {
    if (a2) {
      NSString v16 = String._bridgeToObjectiveC()();
    }
    else {
      NSString v16 = 0LL;
    }
    NSString v17 = String._bridgeToObjectiveC()();
    NSString v18 = String._bridgeToObjectiveC()();
    NSString v19 = String._bridgeToObjectiveC()();
    v22.receiver = (id)v20[1];
    v22.super_class = (Class)&OBJC_CLASS___RCSServiceSession;
    objc_msgSendSuper2( &v22,  "sendGroupPhotoUpdate:toChatID:identifier:style:account:isPhotoRefresh:",  v16,  v17,  v18,  v21,  v19,  a10 & 1);
  }

Swift::Void __swiftcall RCSServiceSession._updatePhoneNumberCallerID()()
{
  v0.super_class = (Class)&OBJC_CLASS___RCSServiceSession;
  objc_msgSendSuper2(&v0, "_updatePhoneNumberCallerID");
}

id RCSServiceSession.groupID(for:)(void *a1)
{
  id result = [a1 chatIdentifier];
  if (!result)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }

  uint64_t v4 = result;
  id v5 = objc_msgSend(v1, "chatForChatIdentifier:style:", result, objc_msgSend(a1, "style"));

  if (v5)
  {
    id result = [v5 originalGroupID];
    if (result)
    {
      id v6 = result;
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);

      return (id)v7;
    }

    goto LABEL_8;
  }

  v10.receiver = v1;
  v10.super_class = (Class)&OBJC_CLASS___RCSServiceSession;
  id v8 = objc_msgSendSuper2(&v10, "groupIDForChat:", a1);
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

  return (id)v9;
}

void RCSServiceSession.allowed(toSendMessage:to:)(void *a1, void *a2)
{
  NSString v3 = v2;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_5C28(&qword_762F8);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_761E8 != -1) {
    swift_once(&qword_761E8, sub_61EC);
  }
  uint64_t v14 = sub_6298(v10, (uint64_t)qword_76290);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  PrototypingSetting.wrappedValue.getter(&v36, v10);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if ((v36 & 1) != 0)
  {
LABEL_6:
    v37.receiver = v3;
    v37.super_class = (Class)&OBJC_CLASS___RCSServiceSession;
    objc_msgSendSuper2(&v37, "allowedToSendMessage:toChat:", a1, a2);
    return;
  }

  uint64_t v15 = Logger.rcs.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v15, v6);
  id v16 = a1;
  NSString v17 = (void *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled((os_log_t)v17, v18))
  {

    goto LABEL_11;
  }

  NSString v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v34 = swift_slowAlloc(32LL, -1LL);
  uint64_t v36 = v34;
  *(_DWORD *)NSString v19 = 136315138;
  id v20 = [v16 guid];
  if (v20)
  {
    int v21 = v20;
    uint64_t v33 = v19 + 4;
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    uint64_t v24 = v23;

    uint64_t v35 = sub_B004(v22, (unint64_t)v24, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);

    swift_bridgeObjectRelease(v24, v25, v26, v27, v28, v29, v30, v31);
    _os_log_impl( &dword_0,  (os_log_t)v17,  v18,  "Not sending typing indicator message %s as it is for a group chat",  v19,  0xCu);
    uint64_t v32 = v34;
    swift_arrayDestroy(v34, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);

LABEL_11:
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return;
  }

  __break(1u);
}

uint64_t RCSServiceSession._enqueue(_:withTimeout:)(uint64_t result, uint64_t a2, double a3)
{
  uint64_t v4 = *(void *)(*(void *)(v3 + OBJC_IVAR___RCSServiceSession_state) + 48LL);
  if (v4)
  {
    uint64_t v7 = result;
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, double))(*(void *)v4 + 136LL);
    swift_retain(v4);
    v8(v7, a2, a3);
    return swift_release(v4);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_19290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    v7[4] = a1;
    uint64_t v8 = a2;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 1107296256LL;
    v7[2] = sub_19334;
    void v7[3] = &unk_71650;
    id v5 = _Block_copy(v7);
    uint64_t v6 = v8;
    swift_retain(a2);
    swift_release(v6);
  }

  else
  {
    id v5 = 0LL;
  }

  (*(void (**)(uint64_t, void *))(a3 + 16))(a3, v5);
  _Block_release(v5);
}

uint64_t sub_19334(uint64_t a1)
{
  unsigned __int8 v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t RCSServiceSession.wait(forChatRelayReadiness:with:)(void *a1, uint64_t (*a2)(id))
{
  id SimDetailsFromTelephony = (id)IMSharedHelperRetrieveSimDetailsFromTelephony();
  if ((_DWORD)SimDetailsFromTelephony) {
    id SimDetailsFromTelephony = [a1 style];
  }
  return a2(SimDetailsFromTelephony);
}

BOOL static IMAccountRegistrationStatus.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 < a2;
}

BOOL sub_194E4(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL sub_194F8(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL sub_1950C(void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL sub_19520(void *a1, void *a2)
{
  return *a2 < *a1;
}

uint64_t _sSo17RCSServiceSessionC3RCSE17revokeSentMessage_2inySo13IMMessageItemC_So7IMDChatCtF_0()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = Logger.rcs.unsafeMutableAddressor();
  uint64_t v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl( &dword_0,  v6,  v7,  "Asked to revoke a message over RCS but RCS is not supported on this platform yet!",  v8,  2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

void sub_1962C(void *a1, uint64_t a2, unint64_t a3, unsigned __int8 a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a3)
  {
    __break(1u);
    goto LABEL_11;
  }

  NSString v16 = String._bridgeToObjectiveC()();
  id v17 = [v6 chatForChatIdentifier:v16 style:a4];

  if (v17)
  {
    id v18 = [v6 relayController];
    [v18 sendReadReceiptForMessage:a1 toChat:v17 reflectOnly:a5 & 1];

    if (a1)
    {
      id v19 = [a1 guid];
      if (v19)
      {
        id v27 = v19;
        objc_msgSend(v6, "didSendMessageReadReceiptForMessageID:");

        return;
      }

      goto LABEL_12;
    }

BOOL _sSo17RCSServiceSessionC3RCSE12chatCanMerge13withSuperChatSbSo7IMDChatC_tF_0(void *a1)
{
  *((void *)&v8 + 1) = sub_121B8(0LL, (unint64_t *)&qword_76368, &OBJC_CLASS___IMDChat_ptr);
  uint64_t v9 = &protocol witness table for IMDChat;
  *(void *)&__int128 v7 = a1;
  id v2 = a1;
  char v3 = IMDChatRCSGroupIdentity.isValid.getter();
  if ((v3 & 1) != 0)
  {
    *(void *)&__int128 v12 = &type metadata for IMDChatRCSGroupIdentity;
    *((void *)&v12 + 1) = &protocol witness table for IMDChatRCSGroupIdentity;
    uint64_t v4 = swift_allocObject(&unk_71688, 56LL, 7LL);
    __int128 v5 = v8;
    *(_OWORD *)(v4 + 16) = v7;
    *(_OWORD *)(v4 + 32) = v5;
    *(void *)(v4 + 48) = v9;
  }

  else
  {
    sub_CA5C(&v7);
    uint64_t v4 = 0LL;
    __int128 v11 = 0u;
    __int128 v12 = 0u;
  }

  uint64_t v10 = v4;
  sub_19E60((uint64_t)&v10);
  return (v3 & 1) == 0;
}

void sub_199AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11)
{
  uint64_t v33 = a3;
  uint64_t v17 = type metadata accessor for Logger(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v32 = (char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a8)
  {
    uint64_t v31 = a6;
    NSString v20 = String._bridgeToObjectiveC()();
    a6 = v31;
    id v21 = [v11 chatForChatIdentifier:v20 style:a9];

    if (v21) {
      goto LABEL_5;
    }
  }

  if (a6
    && (id v22 = [(id)objc_opt_self(IMDChatRegistry) sharedInstance],
        NSString v23 = String._bridgeToObjectiveC()(),
        id v21 = [v22 existingChatWithGUID:v23],
        v22,
        v23,
        v21))
  {
LABEL_5:
    v34[0] = v33;
    v34[1] = a4;
    swift_bridgeObjectRetain();
    sub_186F8(v11, a1, a2, (uint64_t)v21, (uint64_t)v34, a10, a11);
    swift_bridgeObjectRelease(a4);
  }

  else
  {
    uint64_t v24 = Logger.rcs.unsafeMutableAddressor();
    uint64_t v25 = v32;
    uint64_t v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 16))(v32, v24, v17);
    id v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl(&dword_0, v27, v28, "Received request to update display name but could not find a chat", v29, 2u);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v25, v17);
  }

uint64_t _sSo17RCSServiceSessionC3RCSE33allowedToOverwriteOriginalGroupID3forSbSo7IMDChatC_tF_0(void *a1)
{
  if (IMSharedHelperRetrieveSimDetailsFromTelephony())
  {
    *((void *)&v9 + 1) = sub_121B8(0LL, (unint64_t *)&qword_76368, &OBJC_CLASS___IMDChat_ptr);
    uint64_t v10 = &protocol witness table for IMDChat;
    *(void *)&__int128 v8 = a1;
    id v2 = a1;
    char v3 = IMDChatRCSGroupIdentity.isValid.getter();
    if ((v3 & 1) != 0)
    {
      *(void *)&__int128 v13 = &type metadata for IMDChatRCSGroupIdentity;
      *((void *)&v13 + 1) = &protocol witness table for IMDChatRCSGroupIdentity;
      uint64_t v4 = swift_allocObject(&unk_71688, 56LL, 7LL);
      __int128 v5 = v9;
      *(_OWORD *)(v4 + 16) = v8;
      *(_OWORD *)(v4 + 32) = v5;
      *(void *)(v4 + 48) = v10;
    }

    else
    {
      sub_CA5C(&v8);
      uint64_t v4 = 0LL;
      __int128 v12 = 0u;
      __int128 v13 = 0u;
    }

    char v6 = v3 ^ 1;
    uint64_t v11 = v4;
    sub_19E60((uint64_t)&v11);
  }

  else
  {
    char v6 = 1;
  }

  return v6 & 1;
}

uint64_t _sSo17RCSServiceSessionC3RCSE24_messageUpgradesWhenSent18fromCurrentServiceSbSo13IMMessageItemC_tF_0( void *a1)
{
  id v1 = [a1 service];
  if (!v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(IMServiceNameSMS);
    uint64_t v8 = v12;
    goto LABEL_9;
  }

  id v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  uint64_t v5 = v4;

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMServiceNameSMS);
  uint64_t v8 = v7;
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(v8);
    return 0LL;
  }

  if (v3 == v6 && v5 == v7)
  {
    swift_bridgeObjectRelease_n(v5, 2LL);
    return 1LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v8);
    return v10 & 1;
  }

unint64_t sub_19DC0()
{
  unint64_t result = qword_766B0;
  if (!qword_766B0)
  {
    type metadata accessor for IMAccountRegistrationStatus(255LL);
    unint64_t result = swift_getWitnessTable(&unk_5F4A0, v1);
    atomic_store(result, (unint64_t *)&qword_766B0);
  }

  return result;
}

uint64_t type metadata accessor for RCSServiceSession(uint64_t a1)
{
  return sub_121B8(a1, &qword_76818, &off_70D48);
}

uint64_t sub_19E1C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_19E40(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_19E48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_19E58(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_19E60(uint64_t a1)
{
  uint64_t v2 = sub_5C28(&qword_76230);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_19EA0()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_19EC4(char a1)
{
  __asm { BR              X11 }

uint64_t sub_19F1C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_19F9C + 4 * byte_5F8C5[a2]))(0x7370756F7247LL);
}

uint64_t sub_19F9C(uint64_t a1)
{
  if (a1 == 0x7370756F7247LL && v1 == 0xE600000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x7370756F7247LL, 0xE600000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE600000000000000LL);
  return v2 & 1;
}

void sub_1A064(char *a1)
{
}

void sub_1A070()
{
}

void sub_1A078(char a1)
{
  __asm { BR              X10 }

Swift::Int sub_1A0D0()
{
  return Hasher._finalize()();
}

void sub_1A15C()
{
  __asm { BR              X10 }

uint64_t sub_1A1A0(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE600000000000000LL);
}

void sub_1A218(uint64_t a1)
{
}

void sub_1A220(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_1A274()
{
  return Hasher._finalize()();
}

unint64_t sub_1A300@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1C5A4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1A32C()
{
  return ((uint64_t (*)(void))((char *)sub_1A364 + 4 * byte_5F8D9[*v0]))();
}

void sub_1A364(void *a1@<X8>)
{
  *a1 = 0x7370756F7247LL;
  a1[1] = 0xE600000000000000LL;
}

void sub_1A37C(void *a1@<X8>)
{
  *a1 = 0xD000000000000016LL;
  a1[1] = 0x8000000000064950LL;
}

void sub_1A39C(void *a1@<X8>)
{
  *a1 = 0x6E6967617373654DLL;
  a1[1] = 0xE900000000000067LL;
}

void sub_1A3BC(void *a1@<X8>)
{
  *a1 = 0x79636176697250LL;
  a1[1] = 0xE700000000000000LL;
}

void sub_1A3D8(void *a1)
{
  uint64_t v2 = sub_5C28(&qword_765B0);
  __chkstk_darwin(v2);
  uint64_t v3 = sub_5C28(&qword_76820);
  __chkstk_darwin(v3);
  uint64_t v24 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for TapToRadarDraft(0LL);
  uint64_t v25 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v21 = v7;
  id v22 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  NSString v23 = (char *)&v18 - v8;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = Logger.rcs.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v9);
  sub_1C1B0(a1);
  sub_1C1B0(a1);
  sub_1C1B0(a1);
  sub_1C1B0(a1);
  sub_1C1B0(a1);
  sub_1C1B0(a1);
  sub_1C1B0(a1);
  uint64_t v14 = sub_1C1B0(a1);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v20 = v5;
    uint64_t v17 = (_DWORD *)swift_slowAlloc(42LL, -1LL);
    uint64_t v19 = swift_slowAlloc(128LL, -1LL);
    uint64_t v26 = v19;
    *uint64_t v17 = 136446978;
    __asm { BR              X10 }
  }

  sub_1C1F4(a1);
  sub_1C1F4(a1);
  sub_1C1F4(a1);
  sub_1C1F4(a1);
  sub_1C1F4(a1);
  sub_1C1F4(a1);
  sub_1C1F4(a1);
  sub_1C1F4(a1);

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  __asm { BR              X10 }

uint64_t sub_1A938()
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xE600000000000000LL);
  sub_122D8(v0 + 40, v4 - 96, &qword_76828);
  sub_122D8(v4 - 96, v4 - 88, &qword_76828);
  uint64_t v6 = *(void *)(v4 - 88);
  if (v6) {
    uint64_t v7 = (void *)_convertErrorToNSError(_:)(v6);
  }
  else {
    uint64_t v7 = 0LL;
  }
  NSString v8 = String._bridgeToObjectiveC()();
  if (*(void *)(v0 + 16))
  {
    uint64_t v9 = *(void *)(v0 + 16);
LABEL_8:
    swift_bridgeObjectRetain();
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v9);
    goto LABEL_9;
  }

  uint64_t v9 = *(void *)(v0 + 32);
  if (v9)
  {
    swift_bridgeObjectRetain();
    goto LABEL_8;
  }

  NSString v10 = 0LL;
LABEL_9:
  [*(id *)(v4 - 120) forceAutoBugCaptureWithSubType:v5 errorPayload:v7 type:v8 context:v10];

  uint64_t v11 = *(void *)(v4 - 112);
  sub_1B3C0(v11);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  uint64_t v14 = *(void *)(v4 - 128);
  v13(v14, v11, v3);
  uint64_t v15 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v1, 1LL, 1LL, v15);
  uint64_t v16 = *(void *)(v4 - 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v16, v14, v3);
  uint64_t v17 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v18 = (v17 + 32) & ~v17;
  unint64_t v19 = (*(void *)(v4 - 144) + v18 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v20 = swift_allocObject(&unk_716E0, v19 + 49, v17 | 7);
  *(void *)(v20 + 16) = 0LL;
  *(void *)(v20 + 24) = 0LL;
  v13(v20 + v18, v16, v3);
  unint64_t v21 = v20 + v19;
  __int128 v22 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)unint64_t v21 = *(_OWORD *)v0;
  *(_OWORD *)(v21 + 16) = v22;
  *(_OWORD *)(v21 + 32) = *(_OWORD *)(v0 + 32);
  *(_BYTE *)(v21 + 48) = *(_BYTE *)(v0 + 48);
  sub_1C1B0((void *)v0);
  uint64_t v23 = sub_1DB20(v1, (uint64_t)&unk_76838, v20);
  swift_release(v23);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v14, v3);
}

void sub_1ABCC()
{
  __asm { BR              X10 }

uint64_t sub_1AC24()
{
  v1._uint64_t countAndFlagsBits = 0x6E6F6870656C6554LL;
  v1._object = (void *)0xE900000000000079LL;
  String.append(_:)(v1);
  swift_bridgeObjectRelease((RCSServiceSession *)0xE900000000000079LL, v2, v3, v4, v5, v6, v7, v8);
  v9._uint64_t countAndFlagsBits = 8285LL;
  v9._object = (void *)0xE200000000000000LL;
  String.append(_:)(v9);
  NSString v10 = (RCSServiceSession *)v0[2];
  if (v10)
  {
    uint64_t v11 = v0[1];
    uint64_t v12 = v10;
  }

  else
  {
    uint64_t v13 = (RCSServiceSession *)v0[4];
    if (v13)
    {
      uint64_t v11 = v0[3];
      uint64_t v12 = v13;
    }

    else
    {
      sub_122D8((uint64_t)(v0 + 5), (uint64_t)&v26, &qword_76828);
      sub_122D8((uint64_t)&v26, (uint64_t)&v27, &qword_76828);
      if (!v27)
      {
        __break(1u);
        JUMPOUT(0x1AD74LL);
      }

      swift_getErrorValue(v27, v25, v24);
      uint64_t v11 = Error.localizedDescription.getter(v24[1], v24[2]);
      uint64_t v12 = v14;
    }

    swift_bridgeObjectRetain();
  }

  swift_bridgeObjectRetain();
  v15._uint64_t countAndFlagsBits = v11;
  v15._object = v12;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v12, v16, v17, v18, v19, v20, v21, v22);
  return v25[1];
}

uint64_t sub_1AD88()
{
  uint64_t v1 = sub_5C28(&qword_76558);
  SEL v2 = (char *)swift_allocObject(v1, 48LL, 7LL);
  *((_OWORD *)v2 + 1) = xmmword_5F530;
  *((void *)v2 + 4) = 0xD000000000000032LL;
  *((void *)v2 + 5) = 0x8000000000065360LL;
  sub_122D8(v0 + 8, (uint64_t)v61, &qword_76860);
  sub_122D8((uint64_t)v61, (uint64_t)&v62, &qword_76860);
  object = v62._object;
  if (v62._object)
  {
    uint64_t countAndFlagsBits = v62._countAndFlagsBits;
    uint64_t v63 = 0x3A747865746E6F43LL;
    unint64_t v64 = 0xE900000000000020LL;
    String.append(_:)(*(Swift::String *)(&object - 1));
    uint64_t v5 = v63;
    unint64_t v6 = v64;
    unint64_t v8 = *((void *)v2 + 2);
    unint64_t v7 = *((void *)v2 + 3);
    if (v8 >= v7 >> 1) {
      SEL v2 = sub_AE68((char *)(v7 > 1), v8 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v8 + 1;
    Swift::String v9 = &v2[16 * v8];
    *((void *)v9 + 4) = v5;
    *((void *)v9 + 5) = v6;
  }

  sub_122D8(v0 + 24, (uint64_t)v60, &qword_76860);
  sub_122D8((uint64_t)v60, (uint64_t)&v63, &qword_76860);
  NSString v10 = (void *)v64;
  if (v64)
  {
    uint64_t v11 = v63;
    _StringGuts.grow(_:)(21LL);
    swift_bridgeObjectRelease((RCSServiceSession *)0xE000000000000000LL, v12, v13, v14, v15, v16, v17, v18);
    unint64_t v58 = 0xD000000000000013LL;
    unint64_t v59 = 0x80000000000653C0LL;
    v19._uint64_t countAndFlagsBits = v11;
    v19._object = v10;
    String.append(_:)(v19);
    unint64_t v21 = *((void *)v2 + 2);
    unint64_t v20 = *((void *)v2 + 3);
    if (v21 >= v20 >> 1) {
      SEL v2 = sub_AE68((char *)(v20 > 1), v21 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v21 + 1;
    unsigned __int8 v22 = &v2[16 * v21];
    *((void *)v22 + 4) = 0xD000000000000013LL;
    *((void *)v22 + 5) = 0x80000000000653C0LL;
  }

  uint64_t v23 = *(void *)(v0 + 40);
  if (v23)
  {
    swift_errorRetain(v23);
    _StringGuts.grow(_:)(21LL);
    swift_bridgeObjectRelease((RCSServiceSession *)0xE000000000000000LL, v24, v25, v26, v27, v28, v29, v30);
    unint64_t v58 = 0xD000000000000013LL;
    unint64_t v59 = 0x80000000000653A0LL;
    swift_getErrorValue(v23, v57, v56);
    v31._uint64_t countAndFlagsBits = Error.localizedDescription.getter(v56[1], v56[2]);
    uint64_t v32 = (RCSServiceSession *)v31._object;
    String.append(_:)(v31);
    swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
    unint64_t v40 = v58;
    unint64_t v41 = v59;
    unint64_t v43 = *((void *)v2 + 2);
    unint64_t v42 = *((void *)v2 + 3);
    if (v43 >= v42 >> 1) {
      SEL v2 = sub_AE68((char *)(v42 > 1), v43 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v43 + 1;
    uint64_t v44 = &v2[16 * v43];
    *((void *)v44 + 4) = v40;
    *((void *)v44 + 5) = v41;
    swift_errorRelease(v23);
  }

  unint64_t v58 = (unint64_t)v2;
  uint64_t v45 = sub_5C28(&qword_76868);
  unint64_t v46 = sub_1C368();
  uint64_t v47 = BidirectionalCollection<>.joined(separator:)(2570LL, 0xE200000000000000LL, v45, v46);
  swift_bridgeObjectRelease((RCSServiceSession *)v2, v48, v49, v50, v51, v52, v53, v54);
  return v47;
}

uint64_t sub_1B058()
{
  uint64_t v1 = sub_5C28(&qword_76558);
  SEL v2 = (char *)swift_allocObject(v1, 48LL, 7LL);
  *((_OWORD *)v2 + 1) = xmmword_5F530;
  *((void *)v2 + 4) = 0xD000000000000032LL;
  *((void *)v2 + 5) = 0x8000000000065360LL;
  sub_122D8(v0 + 8, (uint64_t)v41, &qword_76860);
  sub_122D8((uint64_t)v41, (uint64_t)&v42, &qword_76860);
  object = v42._object;
  if (v42._object)
  {
    uint64_t countAndFlagsBits = v42._countAndFlagsBits;
    uint64_t v43 = 0x3A747865746E6F43LL;
    unint64_t v44 = 0xE900000000000020LL;
    String.append(_:)(*(Swift::String *)(&object - 1));
    uint64_t v5 = v43;
    unint64_t v6 = v44;
    unint64_t v8 = *((void *)v2 + 2);
    unint64_t v7 = *((void *)v2 + 3);
    if (v8 >= v7 >> 1) {
      SEL v2 = sub_AE68((char *)(v7 > 1), v8 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v8 + 1;
    Swift::String v9 = &v2[16 * v8];
    *((void *)v9 + 4) = v5;
    *((void *)v9 + 5) = v6;
  }

  sub_122D8(v0 + 24, (uint64_t)v40, &qword_76860);
  sub_122D8((uint64_t)v40, (uint64_t)&v43, &qword_76860);
  NSString v10 = (void *)v44;
  if (v44)
  {
    uint64_t v11 = v43;
    _StringGuts.grow(_:)(21LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    v39[0] = 0xD000000000000013LL;
    v39[1] = 0x80000000000653C0LL;
    v12._uint64_t countAndFlagsBits = v11;
    v12._object = v10;
    String.append(_:)(v12);
    unint64_t v14 = *((void *)v2 + 2);
    unint64_t v13 = *((void *)v2 + 3);
    if (v14 >= v13 >> 1) {
      SEL v2 = sub_AE68((char *)(v13 > 1), v14 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v14 + 1;
    id v15 = &v2[16 * v14];
    *((void *)v15 + 4) = 0xD000000000000013LL;
    *((void *)v15 + 5) = 0x80000000000653C0LL;
  }

  uint64_t v16 = *(void *)(v0 + 40);
  if (v16)
  {
    swift_errorRetain(v16);
    _StringGuts.grow(_:)(21LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    v39[0] = 0xD000000000000013LL;
    v39[1] = 0x80000000000653A0LL;
    swift_getErrorValue(v16, v38, v37);
    v17._uint64_t countAndFlagsBits = Error.localizedDescription.getter(v37[1], v37[2]);
    unsigned __int8 v18 = v17._object;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(v18);
    uint64_t v19 = v39[0];
    uint64_t v20 = v39[1];
    unint64_t v22 = *((void *)v2 + 2);
    unint64_t v21 = *((void *)v2 + 3);
    if (v22 >= v21 >> 1) {
      SEL v2 = sub_AE68((char *)(v21 > 1), v22 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v22 + 1;
    uint64_t v23 = &v2[16 * v22];
    *((void *)v23 + 4) = v19;
    *((void *)v23 + 5) = v20;
    strcpy((char *)v39, "Error Dump: ");
    BYTE5(v39[1]) = 0;
    HIWORD(v39[1]) = -5120;
    uint64_t v36 = v16;
    swift_errorRetain(v16);
    uint64_t v24 = sub_5C28(&qword_76560);
    v25._uint64_t countAndFlagsBits = String.init<A>(reflecting:)(&v36, v24);
    id v26 = v25._object;
    String.append(_:)(v25);
    swift_bridgeObjectRelease(v26);
    uint64_t v27 = v39[0];
    uint64_t v28 = v39[1];
    unint64_t v30 = *((void *)v2 + 2);
    unint64_t v29 = *((void *)v2 + 3);
    if (v30 >= v29 >> 1) {
      SEL v2 = sub_AE68((char *)(v29 > 1), v30 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v30 + 1;
    Swift::String v31 = &v2[16 * v30];
    *((void *)v31 + 4) = v27;
    *((void *)v31 + 5) = v28;
    swift_errorRelease(v16);
  }

  v39[0] = v2;
  uint64_t v32 = sub_5C28(&qword_76868);
  unint64_t v33 = sub_1C368();
  uint64_t v34 = BidirectionalCollection<>.joined(separator:)(2570LL, 0xE200000000000000LL, v32, v33);
  swift_bridgeObjectRelease(v2);
  return v34;
}

uint64_t sub_1B3C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v44 = a1;
  uint64_t v1 = type metadata accessor for TapToRadarDraft.Reproducibility(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v43 = type metadata accessor for TapToRadarDraft.Classification(0LL);
  uint64_t v5 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  unint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for TapToRadarDraft.Component(0LL);
  uint64_t v41 = *(void *)(v8 - 8);
  uint64_t v42 = v8;
  __chkstk_darwin(v8);
  NSString v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_5C28(&qword_762F8);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_761D0 != -1) {
    swift_once(&qword_761D0, sub_5FB4);
  }
  uint64_t v15 = sub_6298(v11, (uint64_t)qword_76248);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v15, v11);
  PrototypingSetting.wrappedValue.getter(&v45, v11);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if (v45 == 1)
  {
    sub_1ABCC();
    uint64_t v38 = v17;
    uint64_t v39 = v16;
    uint64_t v37 = sub_1B058();
    uint64_t v19 = v18;
    static TapToRadarDraft.Component.messagesNewBugs.getter();
    uint64_t v40 = v5;
    (*(void (**)(char *, void, uint64_t))(v5 + 104))( v7,  enum case for TapToRadarDraft.Classification.crashHangDataLoss(_:),  v43);
    (*(void (**)(char *, void, uint64_t))(v2 + 104))( v4,  enum case for TapToRadarDraft.Reproducibility.iDidntTry(_:),  v1);
    uint64_t v20 = sub_5C28(&qword_76878);
    uint64_t v21 = type metadata accessor for TapToRadarDraft.DeviceClass(0LL);
    uint64_t v35 = v2;
    uint64_t v36 = v1;
    uint64_t v22 = *(void *)(v21 - 8);
    uint64_t v23 = v44;
    uint64_t v24 = *(void *)(v22 + 72);
    uint64_t v25 = *(unsigned __int8 *)(v22 + 80);
    uint64_t v26 = (v25 + 32) & ~v25;
    uint64_t v27 = swift_allocObject(v20, v26 + 2 * v24, v25 | 7);
    *(_OWORD *)(v27 + 16) = xmmword_5F540;
    uint64_t v28 = v27 + v26;
    unint64_t v29 = *(void (**)(uint64_t, void, uint64_t))(v22 + 104);
    v29(v28, enum case for TapToRadarDraft.DeviceClass.iPhone(_:), v21);
    v29(v28 + v24, enum case for TapToRadarDraft.DeviceClass.appleWatch(_:), v21);
    uint64_t v30 = v38;
    static TapToRadarDraft.submitTapToRadar(title:problemDescription:deviceClasses:component:classification:reproducibility:)( v39,  v38,  v37,  v19,  v27,  v10,  v7,  v4);
    swift_bridgeObjectRelease(v30);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v27);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v4, v36);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v7, v43);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v10, v42);
    uint64_t v31 = type metadata accessor for TapToRadarDraft(0LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))( v23,  0LL,  1LL,  v31);
  }

  else
  {
    uint64_t v33 = type metadata accessor for TapToRadarDraft(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56LL))( v44,  1LL,  1LL,  v33);
  }

uint64_t sub_1B708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return swift_task_switch(sub_1B720, 0LL, 0LL);
}

uint64_t sub_1B720()
{
  uint64_t v1 = sub_1AD88();
  uint64_t v3 = v2;
  *(void *)(v0 + 32) = v2;
  id v4 = (void *)swift_task_alloc(dword_76844);
  *(void *)(v0 + 40) = v4;
  *id v4 = v0;
  v4[1] = sub_1B7A4;
  return sub_1B7F4(0xD000000000000017LL, 0x8000000000065320LL, v1, v3);
}

uint64_t sub_1B7A4()
{
  uint64_t v1 = *(void *)(*v0 + 32);
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 40));
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1B7F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[38] = a4;
  v5[39] = v4;
  v5[36] = a2;
  v5[37] = a3;
  v5[35] = a1;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v5[40] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[41] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[42] = swift_task_alloc(v8);
  v5[43] = swift_task_alloc(v8);
  v5[44] = swift_task_alloc(v8);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  v5[45] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[46] = v10;
  v5[47] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1B8A0, 0LL, 0LL);
}

id sub_1B8A0()
{
  uint64_t v46 = v0 + 120;
  uint64_t v2 = *(void *)(v0 + 368);
  uint64_t v1 = *(void *)(v0 + 376);
  uint64_t v3 = *(void *)(v0 + 360);
  id v45 = (id)objc_opt_self(&OBJC_CLASS___IMUserNotification);
  uint64_t v4 = UUID.init()(v45);
  UUID.uuidString.getter(v4);
  uint64_t v6 = v5;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6, v8, v9, v10, v11, v12, v13, v14);
  NSString v15 = String._bridgeToObjectiveC()();
  NSString v16 = String._bridgeToObjectiveC()();
  NSString v17 = String._bridgeToObjectiveC()();
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 =  [v45 userNotificationWithIdentifier:v7 title:v15 message:v16 defaultButton:v17 alternateButton:v18 otherButton:0];

  if (v19)
  {
    _bridgeAnyObjectToAny(_:)(v19);
    swift_unknownObjectRelease(v19);
  }

  else
  {
    *(_OWORD *)(v0 + 152) = 0u;
    *(_OWORD *)(v0 + 168) = 0u;
  }

  sub_122D8(v0 + 152, v46, &qword_76588);
  if (*(void *)(v0 + 144))
  {
    uint64_t v20 = sub_121B8(0LL, &qword_76848, &OBJC_CLASS___IMUserNotification_ptr);
    if ((swift_dynamicCast(v0 + 264, v46, (char *)&type metadata for Any + 8, v20, 6LL) & 1) != 0)
    {
      uint64_t v21 = *(void **)(v0 + 264);
      *(void *)(v0 + 384) = v21;
      uint64_t v22 = (void *)objc_opt_self(&OBJC_CLASS___IMUserNotificationCenter);
      id v23 = v21;
      id result = [v22 sharedInstance];
      if (result)
      {
        id v25 = result;
        uint64_t v26 = v0 + 16;
        _bridgeAnyObjectToAny(_:)(result);
        swift_unknownObjectRelease(v25);
        sub_121F4((_OWORD *)(v0 + 216), (_OWORD *)(v0 + 184));
        uint64_t v27 = sub_121B8(0LL, &qword_76850, &OBJC_CLASS___IMUserNotificationCenter_ptr);
        swift_dynamicCast(v0 + 256, v0 + 184, (char *)&type metadata for Any + 8, v27, 7LL);
        uint64_t v28 = *(void **)(v0 + 256);
        *(void *)(v0 + 392) = v28;
        *(void *)(v0 + 56) = v0 + 248;
        *(void *)(v0 + 16) = v0;
        *(void *)(v0 + 24) = sub_1BC9C;
        uint64_t v29 = swift_continuation_init(v0 + 16, 0LL);
        *(void *)(v0 + 80) = _NSConcreteStackBlock;
        uint64_t v30 = (void *)(v0 + 80);
        v30[1] = 0x40000000LL;
        v30[2] = sub_1C160;
        v30[3] = &unk_716F8;
        v30[4] = v29;
        [v28 addUserNotification:v23 listener:0 completionHandler:v30];
        return (id)swift_continuation_await(v26);
      }

      else
      {
        __break(1u);
      }

      return result;
    }
  }

  else
  {
    sub_1231C(v46, &qword_76588);
  }

  uint64_t v31 = *(void *)(v0 + 344);
  uint64_t v32 = *(void *)(v0 + 320);
  uint64_t v33 = *(void *)(v0 + 328);
  uint64_t v34 = Logger.rcs.unsafeMutableAddressor();
  uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v31, v34, v32);
  uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
  os_log_type_t v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v38 = 0;
    _os_log_impl(&dword_0, v36, v37, "Failed to create IMUserNotification for TTR, TTR will not proceed", v38, 2u);
    swift_slowDealloc(v38, -1LL, -1LL);
  }

  uint64_t v39 = *(void *)(v0 + 344);
  uint64_t v40 = *(void *)(v0 + 320);
  uint64_t v41 = *(void *)(v0 + 328);

  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v40);
  uint64_t v42 = *(void *)(v0 + 344);
  uint64_t v43 = *(void *)(v0 + 352);
  uint64_t v44 = *(void *)(v0 + 336);
  swift_task_dealloc(*(void *)(v0 + 376));
  swift_task_dealloc(v43);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  return (id)(*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t sub_1BC9C()
{
  return swift_task_switch(sub_1BCE8, 0LL, 0LL);
}

uint64_t sub_1BCE8()
{
  uint64_t v1 = *(void **)(v0 + 248);
  uint64_t v2 = *(void **)(v0 + 384);
  if (v1)
  {

    uint64_t v2 = *(void **)(v0 + 384);
  }

  else
  {
    uint64_t v1 = *(void **)(v0 + 384);
  }

  *(void *)(v0 + 400) = v1;

  if ([v1 response])
  {
    uint64_t v3 = *(void *)(v0 + 352);
    uint64_t v4 = *(void *)(v0 + 320);
    uint64_t v5 = *(void *)(v0 + 328);
    uint64_t v6 = Logger.rcs.unsafeMutableAddressor();
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v6, v4);
    SEL v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      id v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v10 = 0;
      _os_log_impl(&dword_0, v8, v9, "User declined TTR, not proceeding", v10, 2u);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    id v11 = *(void **)(v0 + 392);
    uint64_t v12 = *(void *)(v0 + 352);
    uint64_t v13 = *(void *)(v0 + 320);
    uint64_t v14 = *(void *)(v0 + 328);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
    uint64_t v15 = *(void *)(v0 + 344);
    uint64_t v16 = *(void *)(v0 + 352);
    uint64_t v17 = *(void *)(v0 + 336);
    swift_task_dealloc(*(void *)(v0 + 376));
    swift_task_dealloc(v16);
    swift_task_dealloc(v15);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))(0LL);
  }

  else
  {
    id v19 = (void *)swift_task_alloc(async function pointer to TapToRadarDraft.open()[1]);
    *(void *)(v0 + 408) = v19;
    void *v19 = v0;
    v19[1] = sub_1BE80;
    return TapToRadarDraft.open()();
  }

uint64_t sub_1BE80()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 408LL);
  *(void *)(*(void *)v1 + 416LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1BF4C;
  }
  else {
    uint64_t v3 = sub_1BEE4;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1BEE4()
{
  uint64_t v1 = *(void **)(v0 + 392);

  uint64_t v2 = *(void *)(v0 + 344);
  uint64_t v3 = *(void *)(v0 + 352);
  uint64_t v4 = *(void *)(v0 + 336);
  swift_task_dealloc(*(void *)(v0 + 376));
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1LL);
}

uint64_t sub_1BF4C()
{
  uint64_t v1 = *(void *)(v0 + 416);
  uint64_t v3 = *(void *)(v0 + 328);
  uint64_t v2 = *(void *)(v0 + 336);
  uint64_t v4 = *(void *)(v0 + 320);
  uint64_t v5 = Logger.rcs.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain(v1);
  uint64_t v6 = swift_errorRetain(v1);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = *(void *)(v0 + 416);
    uint64_t v20 = *(void **)(v0 + 400);
    uint64_t v21 = *(void **)(v0 + 392);
    id v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v11 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)id v10 = 138412290;
    swift_errorRetain(v9);
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(void *)(v0 + 272) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280);
    *id v11 = v12;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl(&dword_0, v7, v8, "Failed to open TTR: %@", v10, 0xCu);
    uint64_t v13 = sub_5C28(&qword_76238);
    swift_arrayDestroy(v11, 1LL, v13);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);

    swift_errorRelease(v9);
  }

  else
  {
    uint64_t v14 = *(void *)(v0 + 416);
    uint64_t v15 = *(void **)(v0 + 392);

    swift_errorRelease(v14);
    swift_errorRelease(v14);
    swift_errorRelease(v14);
  }

  (*(void (**)(void, void))(*(void *)(v0 + 328) + 8LL))(*(void *)(v0 + 336), *(void *)(v0 + 320));
  uint64_t v16 = *(void *)(v0 + 344);
  uint64_t v17 = *(void *)(v0 + 352);
  uint64_t v18 = *(void *)(v0 + 336);
  swift_task_dealloc(*(void *)(v0 + 376));
  swift_task_dealloc(v17);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t sub_1C160(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v6 = a2;
  uint64_t v3 = *(void *)(*(void *)(v2 + 64) + 40LL);
  id v4 = a2;
  sub_122D8((uint64_t)&v6, v3, &qword_76858);
  return swift_continuation_resume(v2);
}

void *sub_1C1B0(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  swift_bridgeObjectRetain(a1[2]);
  swift_bridgeObjectRetain(v2);
  swift_errorRetain(v3);
  return a1;
}

void *sub_1C1F4(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(v2);
  swift_errorRelease(v3);
  return a1;
}

uint64_t sub_1C238()
{
  uint64_t v1 = type metadata accessor for TapToRadarDraft(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(void *)(v0 + v6 + 16));
  swift_bridgeObjectRelease(*(void *)(v0 + v6 + 32));
  swift_errorRelease(*(void *)(v0 + v6 + 40));
  return swift_deallocObject(v0, v6 + 49, v5);
}

uint64_t sub_1C2DC()
{
  uint64_t v2 = *(void *)(type metadata accessor for TapToRadarDraft(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v6 = (void *)swift_task_alloc(dword_76834);
  *(void *)(v1 + 16) = v6;
  *unint64_t v6 = v1;
  v6[1] = sub_51A0;
  v6[2] = v4;
  v6[3] = v5;
  return swift_task_switch(sub_1B720, 0LL, 0LL);
}

unint64_t sub_1C368()
{
  unint64_t result = qword_76870;
  if (!qword_76870)
  {
    uint64_t v1 = sub_1C3B4(&qword_76868);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_76870);
  }

  return result;
}

uint64_t sub_1C3B4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

uint64_t _s10RCSBugTypeOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

uint64_t _s10RCSBugTypeOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1C4D4 + 4 * byte_5F8ED[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1C508 + 4 * byte_5F8E8[v4]))();
}

uint64_t sub_1C508(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C510(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1C518LL);
  }
  return result;
}

uint64_t sub_1C524(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1C52CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1C530(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C538(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1C544(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *_s10RCSBugTypeOMa()
{
  return &_s10RCSBugTypeON;
}

unint64_t sub_1C560()
{
  unint64_t result = qword_76880;
  if (!qword_76880)
  {
    unint64_t result = swift_getWitnessTable(&unk_5F980, &_s10RCSBugTypeON);
    atomic_store(result, (unint64_t *)&qword_76880);
  }

  return result;
}

unint64_t sub_1C5A4(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_71298, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5) {
    return 5LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1C5EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(a1, v1, v3);
}

uint64_t variable initialization expression of RCSHandle.alternateHandle()
{
  return 0LL;
}

unint64_t sub_1C634(uint64_t a1)
{
  uint64_t v2 = sub_1D39C(&qword_768C0, (uint64_t)&unk_5FA24);
  return RCSOperationController.OperationID.description.getter(a1, v2);
}

char *RCSOutgoingMessageController.__allocating_init(session:operationConfiguration:)(void *a1, uint64_t *a2)
{
  id v5 = objc_allocWithZone(v2);
  return RCSOutgoingMessageController.init(session:operationConfiguration:)(a1, a2);
}

char *RCSOutgoingMessageController.init(session:operationConfiguration:)(void *a1, uint64_t *a2)
{
  uint64_t v5 = OBJC_IVAR____TtC3RCS28RCSOutgoingMessageController_client;
  unsigned int v6 = v2;
  id v7 = (id)im_primary_queue();
  id v8 = [objc_allocWithZone(CoreTelephonyClient) initWithQueue:v7];

  *(void *)&v2[v5] = v8;
  swift_unknownObjectUnownedInit(&v6[OBJC_IVAR____TtC3RCS28RCSOutgoingMessageController_session], a1);
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = swift_allocObject(&unk_71808, 24LL, 7LL);
  swift_unknownObjectWeakInit(v11 + 16, a1);
  v19[0] = v9;
  v19[1] = v10;
  v19[2] = &unk_768A8;
  v19[3] = v11;
  char v20 = 0;
  uint64_t v12 = type metadata accessor for RCSOperationController();
  swift_allocObject(v12, 184LL, 15LL);
  swift_retain(v11);
  *(void *)&v6[OBJC_IVAR____TtC3RCS28RCSOutgoingMessageController_operationController] = RCSOperationController.init(configuration:)((uint64_t)v19);

  v18.receiver = v6;
  v18.super_class = (Class)type metadata accessor for RCSOutgoingMessageController();
  uint64_t v13 = (char *)objc_msgSendSuper2(&v18, "init");
  uint64_t v14 = *(void **)&v13[OBJC_IVAR____TtC3RCS28RCSOutgoingMessageController_client];
  uint64_t v15 = v13;
  id v16 = v14;
  [v16 setDelegate:v15];
  sub_1CC6C((uint64_t)a2);

  swift_release(v11);
  return v15;
}

uint64_t sub_1C82C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1C850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[15] = a3;
  v4[16] = a4;
  v4[13] = a1;
  v4[14] = a2;
  return swift_task_switch(sub_1C86C, 0LL, 0LL);
}

uint64_t sub_1C86C()
{
  char v1 = *(_BYTE *)(v0 + 48);
  sub_1D424(v0 + 16);
  if ((v1 & 1) != 0)
  {
    uint64_t v2 = *(void *)(v0 + 128) + 16LL;
    swift_beginAccess(v2, v0 + 56, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2);
    *(void *)(v0 + 152) = Strong;
    if (Strong)
    {
      *(void *)(v0 + 160) = String._bridgeToObjectiveC()();
      uint64_t v4 = type metadata accessor for MainActor(0LL);
      *(void *)(v0 + 168) = static MainActor.shared.getter();
      uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
      uint64_t v7 = v6;
      id v8 = sub_1CA70;
      return swift_task_switch(v8, v5, v7);
    }

    uint64_t v13 = *(void *)(v0 + 128) + 16LL;
    swift_beginAccess(v13, v0 + 80, 0LL, 0LL);
    uint64_t v14 = swift_unknownObjectWeakLoadStrong(v13);
    *(void *)(v0 + 176) = v14;
    if (v14)
    {
      *(void *)(v0 + 184) = String._bridgeToObjectiveC()();
      uint64_t v15 = type metadata accessor for MainActor(0LL);
      *(void *)(v0 + 192) = static MainActor.shared.getter();
      uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter(v15, &protocol witness table for MainActor);
      uint64_t v7 = v16;
      id v8 = sub_1CB88;
      return swift_task_switch(v8, v5, v7);
    }
  }

  else
  {
    uint64_t v9 = *(void *)(v0 + 128) + 16LL;
    swift_beginAccess(v9, v0 + 16, 0LL, 0LL);
    uint64_t v10 = swift_unknownObjectWeakLoadStrong(v9);
    *(void *)(v0 + 136) = v10;
    if (v10)
    {
      uint64_t v11 = type metadata accessor for MainActor(0LL);
      *(void *)(v0 + 144) = static MainActor.shared.getter();
      uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter(v11, &protocol witness table for MainActor);
      uint64_t v7 = v12;
      id v8 = sub_1CA24;
      return swift_task_switch(v8, v5, v7);
    }
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CA24()
{
  char v1 = *(void **)(v0 + 136);
  swift_release(*(void *)(v0 + 144));
  sub_63B0();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CA70()
{
  char v1 = (void *)v0[20];
  uint64_t v2 = (void *)v0[19];
  swift_release(v0[21]);
  [v2 didReceiveError:4 forMessageID:v1 forceError:1];

  return swift_task_switch(sub_1CAD4, 0LL, 0LL);
}

uint64_t sub_1CAD4()
{
  uint64_t v1 = *(void *)(v0 + 128) + 16LL;
  swift_beginAccess(v1, v0 + 80, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  *(void *)(v0 + 176) = Strong;
  if (!Strong) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  *(void *)(v0 + 184) = String._bridgeToObjectiveC()();
  uint64_t v3 = type metadata accessor for MainActor(0LL);
  *(void *)(v0 + 192) = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  return swift_task_switch(sub_1CB88, v4, v5);
}

uint64_t sub_1CB88()
{
  uint64_t v1 = *(void **)(v0 + 184);
  uint64_t v2 = *(void **)(v0 + 176);
  swift_release(*(void *)(v0 + 192));
  [v2 processMessageSendFailure:v1];

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CBD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v8 = (void *)swift_task_alloc(dword_768A4);
  *(void *)(v4 + sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = v8;
  *id v8 = v4;
  v8[1] = sub_51A0;
  v8[15] = a3;
  v8[16] = v3;
  v8[13] = a1;
  v8[14] = a2;
  return swift_task_switch(sub_1C86C, 0LL, 0LL);
}

uint64_t type metadata accessor for RCSOutgoingMessageController()
{
  return objc_opt_self(&OBJC_CLASS____TtC3RCS28RCSOutgoingMessageController);
}

uint64_t sub_1CC6C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1CC98(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

uint64_t RCSOutgoingMessageController.sendMessage(id:executeBlock:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[9] = a3;
  v4[10] = v3;
  void v4[7] = a1;
  v4[8] = a2;
  return swift_task_switch(sub_1CCC4, 0LL, 0LL);
}

uint64_t sub_1CCC4()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v4 = *(void *)(v0[10] + OBJC_IVAR____TtC3RCS28RCSOutgoingMessageController_operationController);
  v0[5] = type metadata accessor for RCSOutgoingMessageController.OperationID(0LL);
  v0[6] = sub_1D39C(&qword_768C0, (uint64_t)&unk_5FA24);
  uint64_t v5 = sub_1CECC(v0 + 2);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(v5, v2, v6);
  uint64_t v7 = swift_allocObject(&unk_71830, 32LL, 7LL);
  v0[11] = v7;
  *(void *)(v7 + sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = v3;
  *(void *)(v7 + 24) = v1;
  id v8 = *(int **)(*(void *)v4 + 216LL);
  uint64_t v9 = v8[1];
  uint64_t v12 = (int *)((char *)v8 + *v8);
  swift_retain(v1);
  uint64_t v10 = (void *)swift_task_alloc(v9);
  v0[12] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1CDD4;
  return ((uint64_t (*)(void *, void *, uint64_t))v12)(v0 + 2, &unk_768D0, v7);
}

uint64_t sub_1CDD4()
{
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v2 = *(void *)(*v1 + 96);
  uint64_t v4 = *v1;
  *(void *)(v4 + 104) = v0;
  swift_task_dealloc(v2);
  swift_release(v3);
  if (v0) {
    return swift_task_switch(sub_1CE5C, 0LL, 0LL);
  }
  sub_12204((void *)(v4 + 16));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1CE5C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for RCSOutgoingMessageController.OperationID(uint64_t a1)
{
  uint64_t result = qword_769B8;
  if (!qword_769B8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RCSOutgoingMessageController.OperationID);
  }
  return result;
}

void *sub_1CECC(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

uint64_t sub_1CF08(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc(a3[1]);
  *(void *)(v3 + sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_51A0;
  return v6();
}

uint64_t sub_1CF5C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1CF80()
{
  uint64_t v2 = *(int **)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc(dword_768CC);
  *(void *)(v1 + sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_51A0;
  uint64_t v6 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v4 = (void *)swift_task_alloc(v2[1]);
  v3[2] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_51A0;
  return v6();
}

id RCSOutgoingMessageController.__allocating_init()()
{
  return [objc_allocWithZone(v0) init];
}

void RCSOutgoingMessageController.init()()
{
}

id RCSOutgoingMessageController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RCSOutgoingMessageController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1D0EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_1D128(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t sub_1D15C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_1D1A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_1D1E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_1D228(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_1D26C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1D278);
}

uint64_t sub_1D278(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t sub_1D2B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1D2C0);
}

uint64_t sub_1D2C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t sub_1D300(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 1LL, &v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1D368(uint64_t a1)
{
  uint64_t result = sub_1D39C(&qword_769F0, (uint64_t)&unk_5F9FC);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1D39C(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for RCSOutgoingMessageController.OperationID(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1D3DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_5C28(&qword_769F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D424(uint64_t a1)
{
  uint64_t v2 = sub_5C28(&qword_769F8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void RCSServiceSession.handler(_:messageIDDelivered:toIdentifier:fromIdentifier:timeStamp:storageContext:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

LABEL_4:
  if (a6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(a6);
    a6 = v18;
  }

  id v19 = a3;
  char v20 = a7;
  uint64_t v21 = a8;
  uint64_t v22 = self;
  sub_1D554(v14, (uint64_t)v16);

  swift_bridgeObjectRelease(v11, v23, v24, v25, v26, v27, v28, v29);
  swift_bridgeObjectRelease((RCSServiceSession *)a6, v30, v31, v32, v33, v34, v35, v36);
  swift_bridgeObjectRelease(v16, v37, v38, v39, v40, v41, v42, v43);
}

void sub_1D554(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  v31[1] = a1;
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v31 - v14;
  unsigned int v16 = [v3 _isActiveServiceForRelay];
  uint64_t v17 = Logger.rcs.unsafeMutableAddressor();
  objc_super v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16);
  if (v16)
  {
    uint64_t v19 = v18(v15, v17, v9);
    char v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      v31[0] = a2;
      id v23 = v22;
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_0, v20, v21, "RCS Relay received message delivered", v22, 2u);
      uint64_t v24 = v23;
      a2 = v31[0];
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    if (a2)
    {
      NSString v25 = String._bridgeToObjectiveC()();
      static Date.now.getter();
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      [v3 didReceiveMessageDeliveryReceiptForMessageID:v25 date:isa];
    }
  }

  else
  {
    uint64_t v27 = v18(v13, v17, v9);
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl(&dword_0, v28, v29, "RCS Relay ignoring message delivered message", v30, 2u);
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }

uint64_t sub_1D7C8()
{
  id v1 = [*v0 originalGroupID];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void sub_1D82C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  if (a2)
  {
    id v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    id v5 = 0LL;
  }

  [v3 setOriginalGroupID:v5];
}

void (*sub_1D890(uint64_t **a1))(void *a1)
{
  uint64_t v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)sub_1D904(v2);
  return sub_1D8D8;
}

void sub_1D8D8(void *a1)
{
  id v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

void (*sub_1D904(uint64_t *a1))(uint64_t a1, char a2)
{
  a1[2] = (uint64_t)v1;
  id v3 = [v1 originalGroupID];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    uint64_t v7 = v6;
  }

  else
  {
    uint64_t v5 = 0LL;
    uint64_t v7 = 0LL;
  }

  *a1 = v5;
  a1[1] = v7;
  return sub_1D978;
}

void sub_1D978(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((a2 & 1) != 0)
  {
    if (v3)
    {
      swift_bridgeObjectRetain(*(void *)(a1 + 8));
      id v4 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v3);
    }

    else
    {
      id v4 = 0LL;
    }

    [*(id *)(a1 + 16) setOriginalGroupID:v4];
    swift_bridgeObjectRelease(v3);
  }

  else if (v3)
  {
    id v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v3);
    [*(id *)(a1 + 16) setOriginalGroupID:v4];
  }

  else
  {
    id v4 = 0LL;
    [*(id *)(a1 + 16) setOriginalGroupID:0];
  }
}

uint64_t sub_1DA38()
{
  id v1 = [*v0 properties];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v1,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  return v3;
}

id sub_1DAA4(uint64_t a1)
{
  uint64_t v2 = *v1;
  if (a1) {
    v3.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  else {
    v3.super.Class isa = 0LL;
  }
  id v4 = [v2 updateProperties:v3.super.isa];

  return v4;
}

id sub_1DB10()
{
  return [*v0 resetCKSyncState];
}

uint64_t sub_1DB20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) == 1)
  {
    sub_1E140(a1);
    uint64_t v8 = 7168LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      uint64_t v10 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      uint64_t v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v8 = v15 | 0x1C00LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9) {
      goto LABEL_3;
    }
  }

  uint64_t v12 = 0LL;
  uint64_t v14 = 0LL;
LABEL_6:
  uint64_t v16 = swift_allocObject(&unk_71938, 32LL, 7LL);
  *(void *)(v16 + sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    uint64_t v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_76AE0, v16);
}

uint64_t RCSServiceSession.calculateReachability(with:responseHandler:)(void *a1, uint64_t a2)
{
  uint64_t v5 = sub_5C28(&qword_765B0);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static TaskPriority.userInitiated.getter(v6);
  uint64_t v9 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 0LL, 1LL, v9);
  type metadata accessor for MainActor(0LL);
  id v10 = v2;
  id v11 = a1;
  uint64_t v12 = swift_unknownObjectRetain(a2);
  uint64_t v13 = static MainActor.shared.getter(v12);
  uint64_t v14 = (void *)swift_allocObject(&unk_718E8, 56LL, 7LL);
  v14[2] = v13;
  v14[3] = &protocol witness table for MainActor;
  v14[4] = v10;
  v14[5] = v11;
  v14[6] = a2;
  uint64_t v15 = sub_1DB20((uint64_t)v8, (uint64_t)&unk_76AC8, (uint64_t)v14);
  return swift_release(v15);
}

uint64_t sub_1DD6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  uint64_t v7 = type metadata accessor for MainActor(0LL);
  v6[5] = static MainActor.shared.getter(v7);
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v6[6] = v8;
  v6[7] = v9;
  return swift_task_switch(sub_1DDDC, v8, v9);
}

void sub_1DDDC()
{
  uint64_t v1 = *(void *)(*(void *)(v0[2] + OBJC_IVAR___RCSServiceSession_state) + 32LL);
  v0[8] = v1;
  if (v1)
  {
    uint64_t v2 = *(int **)(*(void *)v1 + 160LL);
    uint64_t v3 = v2[1];
    uint64_t v5 = (int *)((char *)v2 + *v2);
    swift_retain(v1);
    id v4 = (void *)swift_task_alloc(v3);
    v0[9] = v4;
    *id v4 = v0;
    v4[1] = sub_1DE6C;
    ((void (*)(void, void))v5)(v0[3], v0[4]);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1DE6C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 64);
  swift_task_dealloc(*(void *)(*v0 + 72));
  swift_release(v2);
  return swift_task_switch(sub_13BBC, *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_1DEC4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc(dword_76A64);
  *(void *)(v2 + sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_5E14;
  return sub_1DD6C(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1E084()
{
  swift_unknownObjectRelease(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1E0C0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc(dword_76A64);
  *(void *)(v2 + sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_51A0;
  return sub_1DD6C(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1E140(uint64_t a1)
{
  uint64_t v2 = sub_5C28(&qword_765B0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1E180(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1E1E4;
  return v6(a1);
}

uint64_t sub_1E1E4()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1E230()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1E254(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_76ADC);
  *(void *)(v2 + sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_51A0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_76AD8 + dword_76AD8))(a1, v4);
}

uint64_t sub_1E2C4(uint64_t a1)
{
  uint64_t v23 = a1 + 56;
  uint64_t v2 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 56);
  int64_t v25 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v6 = 0LL;
  uint64_t v7 = (char *)_swiftEmptyArrayStorage;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v8 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  for (unint64_t i = v8 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v11)) + (v6 << 6))
  {
    uint64_t v13 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v14 = *v13;
    uint64_t v15 = (void *)v13[1];
    swift_bridgeObjectRetain_n(v15, 2LL);
    v16._uint64_t countAndFlagsBits = v14;
    v16._object = v15;
    RCSHandle.init(rawValue:botStatus:alternateHandle:)( &v24,  v16,  CoreRCS_RCSHandle_BotStatus_notChatBot,  (Swift::String_optional)0);
    if (v17)
    {
      swift_bridgeObjectRelease(v7);
      swift_release(a1);
      swift_bridgeObjectRelease(v15);
      return (uint64_t)v7;
    }

    uint64_t countAndFlagsBits = v24.id._countAndFlagsBits;
    object = v24.id._object;
    swift_bridgeObjectRetain();
    sub_15F40(&v24);
    swift_bridgeObjectRelease(v15);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v7);
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_AE68(0LL, *((void *)v7 + 2) + 1LL, 1, v7);
      uint64_t v7 = (char *)result;
    }

    unint64_t v21 = *((void *)v7 + 2);
    unint64_t v20 = *((void *)v7 + 3);
    if (v21 >= v20 >> 1)
    {
      uint64_t result = (uint64_t)sub_AE68((char *)(v20 > 1), v21 + 1, 1, v7);
      uint64_t v7 = (char *)result;
    }

    *((void *)v7 + 2) = v21 + 1;
    uint64_t v22 = &v7[16 * v21];
    *((void *)v22 + 4) = countAndFlagsBits;
    *((void *)v22 + 5) = object;
    if (v4) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v6++, 1LL)) {
      break;
    }
    if (v6 >= v25) {
      goto LABEL_30;
    }
    unint64_t v11 = *(void *)(v23 + 8 * v6);
    if (!v11)
    {
      int64_t v12 = v6 + 1;
      if (v6 + 1 >= v25) {
        goto LABEL_30;
      }
      unint64_t v11 = *(void *)(v23 + 8 * v12);
      if (v11) {
        goto LABEL_16;
      }
      int64_t v12 = v6 + 2;
      if (v6 + 2 >= v25) {
        goto LABEL_30;
      }
      unint64_t v11 = *(void *)(v23 + 8 * v12);
      if (v11) {
        goto LABEL_16;
      }
      int64_t v12 = v6 + 3;
      if (v6 + 3 >= v25) {
        goto LABEL_30;
      }
      unint64_t v11 = *(void *)(v23 + 8 * v12);
      if (v11)
      {
LABEL_16:
        int64_t v6 = v12;
        goto LABEL_17;
      }

      int64_t v12 = v6 + 4;
      if (v6 + 4 < v25)
      {
        unint64_t v11 = *(void *)(v23 + 8 * v12);
        if (!v11)
        {
          while (1)
          {
            int64_t v6 = v12 + 1;
            if (__OFADD__(v12, 1LL)) {
              goto LABEL_33;
            }
            if (v6 >= v25) {
              goto LABEL_30;
            }
            unint64_t v11 = *(void *)(v23 + 8 * v6);
            ++v12;
            if (v11) {
              goto LABEL_17;
            }
          }
        }

        goto LABEL_16;
      }

void sub_1E540(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  NSString v8 = (NSString)__chkstk_darwin(v6);
  id v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a2[7];
  uint64_t v27 = a2;
  if (v11)
  {
    NSString v8 = String._bridgeToObjectiveC()();
    int64_t v12 = v8;
  }

  else
  {
    int64_t v12 = 0LL;
  }

  uint64_t v13 = UUID.init()(v8);
  UUID.uuidString.getter(v13);
  uint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  sub_122D8(a1, (uint64_t)v30, &qword_76370);
  sub_122D8((uint64_t)v30, (uint64_t)v31, &qword_76370);
  if (v32) {
    NSString v17 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v17 = 0LL;
  }
  __int128 v18 = *(_OWORD *)(a1 + 80);
  v28[0] = *(_OWORD *)(a1 + 64);
  v28[1] = v18;
  sub_122D8((uint64_t)v28, (uint64_t)v29, &qword_76860);
  sub_122D8((uint64_t)v29, (uint64_t)v33, &qword_76860);
  if (v33[1]) {
    NSString v19 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v19 = 0LL;
  }
  unint64_t v20 = *(void **)(a1 + 96);
  id v21 = [v20 chatIdentifier];
  if (v21)
  {
    uint64_t v22 = v21;
    id v23 = [v20 style];
    id v24 = [v3 account];
    LOBYTE(v25) = 1;
    [v3 didReceiveDisplayNameChange:v12 guid:v16 fromID:v17 toIdentifier:v19 forChat:v22 style:v23 account:v24 shouldRelay:v25];

    sub_1E8BC(a1, v27);
  }

  else
  {
    __break(1u);
  }

void sub_1E78C(uint64_t a1)
{
  uint64_t v3 = *(void **)(a1 + 96);
  id v4 = [v3 chatIdentifier];
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = [v3 style];
    __int128 v7 = *(_OWORD *)(a1 + 80);
    __int128 v10 = *(_OWORD *)(a1 + 64);
    __int128 v11 = v7;
    sub_122D8((uint64_t)&v10, (uint64_t)v13, &qword_76860);
    sub_122D8((uint64_t)v13, (uint64_t)v14, &qword_76860);
    if (v14[1]) {
      NSString v8 = String._bridgeToObjectiveC()();
    }
    else {
      NSString v8 = 0LL;
    }
    sub_122D8((uint64_t)&v11, (uint64_t)v12, &qword_76860);
    sub_122D8((uint64_t)v12, (uint64_t)v15, &qword_76860);
    if (v15[1]) {
      NSString v9 = String._bridgeToObjectiveC()();
    }
    else {
      NSString v9 = 0LL;
    }
    [v1 _updateLastAddressedIDsIfNeededForChatWithIdentifier:v5 style:v6 lastAddressedHandle:v8 lastAddressedSIMID:v9];
  }

  else
  {
    __break(1u);
  }

void sub_1E8BC(uint64_t a1, void *a2)
{
  uint64_t v4 = v3;
  uint64_t v7 = _s17ParticipantChangeVMa(0LL);
  uint64_t v8 = __chkstk_darwin(v7);
  __int128 v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  int64_t v12 = (char *)&v53 - v11;
  RCSServiceSession.existingGroupChat(for:)(a2);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v55 = v2;
    id v15 = [*(id *)(a1 + 96) participantHandles];
    unsigned __int8 v54 = v10;
    id v56 = v14;
    uint64_t v57 = a1;
    if (v15)
    {
      NSString v16 = v15;
      NSString v17 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, &type metadata for String);
    }

    else
    {
      NSString v17 = _swiftEmptyArrayStorage;
    }

    uint64_t v18 = a2[5];
    uint64_t v19 = swift_bridgeObjectRetain();
    unint64_t v20 = sub_9064(v19);
    swift_bridgeObjectRelease(v18);
    uint64_t v21 = swift_bridgeObjectRetain();
    uint64_t v22 = sub_1FEFC(v21);
    swift_bridgeObjectRelease(v17);
    uint64_t v59 = v22;
    uint64_t v23 = swift_bridgeObjectRetain();
    uint64_t v24 = sub_1FEFC(v23);
    swift_bridgeObjectRelease(v20);
    uint64_t v58 = v24;
    uint64_t v25 = v20[2];
    if (v25)
    {
      uint64_t v26 = v20 + 5;
      do
      {
        uint64_t v27 = *(v26 - 1);
        uint64_t v28 = *v26;
        swift_bridgeObjectRetain();
        sub_1F2DC(v27, v28);
        uint64_t v30 = v29;
        swift_bridgeObjectRelease(v28);
        swift_bridgeObjectRelease(v30);
        v26 += 2;
        --v25;
      }

      while (v25);
    }

    swift_bridgeObjectRelease(v20);
    uint64_t v31 = v17[2];
    if (v31)
    {
      uint64_t v32 = v17 + 5;
      do
      {
        uint64_t v33 = *(v32 - 1);
        uint64_t v34 = *v32;
        swift_bridgeObjectRetain();
        sub_1F2DC(v33, v34);
        uint64_t v36 = v35;
        swift_bridgeObjectRelease(v34);
        swift_bridgeObjectRelease(v36);
        v32 += 2;
        --v31;
      }

      while (v31);
    }

    swift_bridgeObjectRelease(v17);
    uint64_t v37 = v59;
    uint64_t v38 = v56;
    if (*(void *)(v59 + 16))
    {
      uint64_t v39 = sub_1E2C4(v59);
      swift_bridgeObjectRelease(v37);
      uint64_t v40 = v57;
      if (v4)
      {

        uint64_t v41 = v58;
LABEL_23:
        swift_bridgeObjectRelease(v41);
        return;
      }

      sub_122D8(v57, (uint64_t)v61, &qword_76370);
      sub_122D8((uint64_t)v61, (uint64_t)v62, &qword_76370);
      if (v62[1])
      {
        uint64_t v42 = v62[3];
        uint64_t v53 = v62[2];
        swift_bridgeObjectRetain();
      }

      else
      {
        uint64_t v53 = 0LL;
        uint64_t v42 = 0LL;
      }

      uint64_t v44 = *(void *)(v40 + 64);
      uint64_t v43 = *(void *)(v40 + 72);
      swift_bridgeObjectRetain();
      id v45 = v38;
      sub_12B5C(v45, 1, v39, v53, v42, v44, v43, 0, (uint64_t)v12);
      sub_154BC((uint64_t)v12);
      sub_15E7C((uint64_t)v12);
    }

    else
    {
      swift_bridgeObjectRelease(v59);
      uint64_t v40 = v57;
    }

    uint64_t v46 = v58;
    if (!*(void *)(v58 + 16))
    {

      uint64_t v41 = v46;
      goto LABEL_23;
    }

    uint64_t v47 = sub_1E2C4(v58);
    swift_bridgeObjectRelease(v46);
    if (v4)
    {
    }

    else
    {
      sub_122D8(v40, (uint64_t)v60, &qword_76370);
      sub_122D8((uint64_t)v60, (uint64_t)v63, &qword_76370);
      if (v64)
      {
        uint64_t v48 = v66;
        uint64_t v55 = v65;
        swift_bridgeObjectRetain();
      }

      else
      {
        uint64_t v55 = 0LL;
        uint64_t v48 = 0LL;
      }

      uint64_t v49 = *(void *)(v40 + 64);
      uint64_t v50 = *(void *)(v40 + 72);
      swift_bridgeObjectRetain();
      id v51 = v38;
      uint64_t v52 = (uint64_t)v54;
      sub_12B5C(v51, 0, v47, v55, v48, v49, v50, 0, (uint64_t)v54);
      sub_154BC(v52);

      sub_15E7C(v52);
    }
  }

uint64_t sub_1EC80(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1ECD4(a1, a2, a3, *v3);
  void *v3 = (char *)result;
  return result;
}

uint64_t sub_1EC9C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1EE3C(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1ECB8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1EFC4(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1ECD4(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_5C28(&qword_76558);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  id v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_1EE3C(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_5C28(&qword_76AF8);
    uint64_t v11 = (void *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v14 = (unint64_t)(v11 + 4);
  unint64_t v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 8 * v8) {
      memmove(v11 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_30;
  }

  if (v15 >= v14 + 8 * v8 || v14 >= v15 + 8 * v8)
  {
    sub_5C28(&qword_76568);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_1EFC4(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_5C28(&qword_76AF0);
    uint64_t v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8]) {
      memmove(v14, v15, 32 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_1F130(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v24, *(void *)(*v3 + 40LL));
  swift_bridgeObjectRetain();
  String.hash(into:)(v24, a2, a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v7 + 48);
    int64_t v12 = (void *)(v11 + 16 * v10);
    uint64_t v13 = v12[1];
    BOOL v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0LL) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      unint64_t v15 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain();
      return 0LL;
    }

    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v19 = (void *)(v11 + 16 * v10);
      uint64_t v20 = v19[1];
      BOOL v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0LL) & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  swift_bridgeObjectRelease(v7);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  void *v3 = 0x8000000000000000LL;
  swift_bridgeObjectRetain();
  sub_1FD64(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t v23 = *v3;
  void *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

uint64_t sub_1F2DC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)(v22, *(void *)(*v2 + 40LL));
  swift_bridgeObjectRetain();
  String.hash(into:)(v22, a1, a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  uint64_t v9 = *(void *)(v5 + 48);
  unint64_t v10 = (void *)(v9 + 16 * v8);
  uint64_t v11 = v10[1];
  BOOL v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
  {
    uint64_t v17 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v17;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v18 = (void *)(v9 + 16 * v8);
      uint64_t v19 = v18[1];
      BOOL v20 = *v18 == a1 && v19 == a2;
    }

    while (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, a1, a2, 0LL) & 1) == 0);
  }

  swift_bridgeObjectRelease(v5);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v14 = *v2;
  v22[0] = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1F468();
    uint64_t v14 = v22[0];
  }

  uint64_t v15 = *(void *)(*(void *)(v14 + 48) + 16 * v8);
  sub_1FBA0(v8);
  uint64_t v16 = *v2;
  *uint64_t v2 = v22[0];
  swift_bridgeObjectRelease(v16);
  return v15;
}

void *sub_1F468()
{
  uint64_t v1 = v0;
  sub_5C28(&qword_76AE8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }

Swift::Int sub_1F618(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_5C28(&qword_76AE8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  uint64_t v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v32) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v32) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v13);
      if (!v19)
      {
        int64_t v13 = v18 + 2;
        if (v18 + 2 >= v32) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v13);
        if (!v19) {
          break;
        }
      }
    }

LABEL_26:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    unint64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    swift_bridgeObjectRetain();
    String.hash(into:)(v33, v22, v23);
    Swift::Int result = Hasher._finalize()();
    uint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        BOOL v29 = v26 == v28;
        if (v26 == v28) {
          unint64_t v26 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v26);
      }

      while (v30 == -1);
      unint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    unint64_t v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
    void *v15 = v22;
    v15[1] = v23;
    ++*(void *)(v6 + 16);
  }

  int64_t v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    Swift::Int result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_38;
  }

  unint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    int64_t v13 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    int64_t v13 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v13);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

        uint64_t v9 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      unint64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
      uint64_t v22 = *v21;
      uint64_t v23 = v21[1];
      Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      Swift::Int result = Hasher._finalize()();
      uint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          BOOL v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0LL;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v11 + 8 * v26);
        }

        while (v30 == -1);
        unint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      unint64_t v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
      void *v15 = v22;
      v15[1] = v23;
      ++*(void *)(v6 + 16);
    }
  }

  Swift::Int result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

  __break(1u);
}

LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_1F8C4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_5C28(&qword_76AE8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    int64_t v32 = v2;
    uint64_t v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v13 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }

      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v10) {
          goto LABEL_36;
        }
        unint64_t v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v10) {
            goto LABEL_36;
          }
          unint64_t v19 = v33[v13];
          if (!v19)
          {
            int64_t v13 = v18 + 2;
            if (v18 + 2 >= v10) {
              goto LABEL_36;
            }
            unint64_t v19 = v33[v13];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v32;
                uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
                if (v31 > 63) {
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v33 = -1LL << v31;
                }
                *(void *)(v3 + sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v13 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v13 >= v10) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v33[v13];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v13 = v20;
            }
          }
        }

unint64_t sub_1FBA0(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        int64_t v10 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v21, *(void *)(v3 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v21, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        unint64_t v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v9)
        {
          goto LABEL_11;
        }

        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(v3 + 48);
          unint64_t v16 = (_OWORD *)(v15 + 16 * v2);
          unint64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v16 >= v17 + 1))
          {
            *unint64_t v16 = *v17;
            int64_t v2 = v6;
          }
        }

uint64_t sub_1FD64(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_1F8C4(v11);
  }

  else
  {
    if (v10 > v9)
    {
      Swift::Int result = (uint64_t)sub_1F468();
      goto LABEL_22;
    }

    sub_1F618(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v28, *(void *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  Swift::Int result = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  uint64_t v14 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v15 = *(void *)(v12 + 48);
    unint64_t v16 = (void *)(v15 + 16 * a3);
    uint64_t v17 = v16[1];
    BOOL v18 = *v16 == v8 && v17 == a2;
    if (v18 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0LL), (result & 1) != 0))
    {
LABEL_21:
      Swift::Int result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v20 = (void *)(v15 + 16 * a3);
        uint64_t v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0LL);
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_21;
      }
    }
  }

uint64_t sub_1FEFC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1F130(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }

    while (v2);
    return v8;
  }

  return result;
}

id sub_20084()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RCSServiceReachabilityDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RCSServiceReachabilityDelegate()
{
  return objc_opt_self(&OBJC_CLASS____TtC3RCS30RCSServiceReachabilityDelegate);
}

uint64_t sub_200E8()
{
  NSString v0 = String._bridgeToObjectiveC()();
  uint64_t v1 = IMBagBoolValueWithDefault(1LL, v0);

  return v1;
}

void sub_20138(uint64_t a1, uint64_t a2)
{
  id v4 = [(id)objc_opt_self(IMDRelayServiceReachabilityController) sharedInstance];
  [v4 calculateReachabilityWithRequest:a1 responseHandler:a2];
}

void sub_2019C(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v58 = *(void *)(v2 - 8);
  uint64_t v59 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v56 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v56 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v56 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v57 = (char *)&v56 - v16;
  __chkstk_darwin(v15);
  BOOL v18 = (char *)&v56 - v17;
  uint64_t v19 = (void *)objc_opt_self(&OBJC_CLASS___IMDRelayServiceController);
  id v20 = [v19 sharedInstance];
  if (!v20)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  uint64_t v21 = v20;
  unsigned int v22 = [v20 hasRelayDevice];

  if (!v22)
  {
    uint64_t v39 = Logger.reachability.unsafeMutableAddressor();
    uint64_t v32 = v58;
    uint64_t v34 = v59;
    uint64_t v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 16))(v5, v39, v59);
    uint64_t v36 = (os_log_s *)Logger.logObject.getter(v40);
    os_log_type_t v41 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v36, v41))
    {
      BOOL v18 = v5;
      goto LABEL_30;
    }

    uint64_t v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v38 = 0;
    _os_log_impl(&dword_0, v36, v41, "Returning that RCS relay is unavailable, we have no relay devices", v38, 2u);
    BOOL v18 = v5;
LABEL_29:
    swift_slowDealloc(v38, -1LL, -1LL);
    goto LABEL_30;
  }

  id v23 = [v19 sharedInstance];
  if (!v23) {
    goto LABEL_34;
  }
  uint64_t v24 = v23;
  id v25 = [v23 enrollmentController];

  if (!v25)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  unsigned int v26 = [v25 hasBeenRemoteApproved];

  if (!v26)
  {
    uint64_t v42 = Logger.reachability.unsafeMutableAddressor();
    uint64_t v32 = v58;
    uint64_t v34 = v59;
    uint64_t v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 16))(v8, v42, v59);
    uint64_t v36 = (os_log_s *)Logger.logObject.getter(v43);
    os_log_type_t v44 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v36, v44))
    {
      BOOL v18 = v8;
      goto LABEL_30;
    }

    uint64_t v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v38 = 0;
    _os_log_impl(&dword_0, v36, v44, "Returning that RCS relay is unavailable, we are not approved for relay", v38, 2u);
    BOOL v18 = v8;
    goto LABEL_29;
  }

  id v27 = [a1 senderLastAddressedHandle];
  if (!v27) {
    goto LABEL_19;
  }
  a1 = v27;
  if (!IMStringIsPhoneNumber())
  {

LABEL_19:
    id v45 = [v19 sharedInstance];
    if (v45)
    {
      uint64_t v46 = v45;
      unsigned int v47 = [v45 hasPhoneNumberAliasActiveCheckingSelf:0];

      uint64_t v48 = Logger.reachability.unsafeMutableAddressor();
      uint64_t v32 = v58;
      uint64_t v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 16);
      if (!v47)
      {
        uint64_t v34 = v59;
        uint64_t v52 = v49(v11, v48, v59);
        uint64_t v36 = (os_log_s *)Logger.logObject.getter(v52);
        os_log_type_t v53 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v36, v53))
        {
          uint64_t v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v38 = 0;
          unsigned __int8 v54 = "Returning that RCS relay is unavailable, we are approved but have no phone number aliases that provide relay";
LABEL_28:
          _os_log_impl(&dword_0, v36, v53, v54, v38, 2u);
          BOOL v18 = v11;
          goto LABEL_29;
        }

LABEL_31:
        BOOL v18 = v11;
        goto LABEL_30;
      }

      uint64_t v34 = v59;
      uint64_t v50 = v49(v14, v48, v59);
      uint64_t v36 = (os_log_s *)Logger.logObject.getter(v50);
      os_log_type_t v51 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v36, v51))
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v38 = 0;
        _os_log_impl( &dword_0,  v36,  v51,  "Returning that RCS relay is available, we are approved and have a phone number alias that provides relay",  v38,  2u);
        BOOL v18 = v14;
        goto LABEL_29;
      }

      BOOL v18 = v14;
LABEL_30:

      (*(void (**)(char *, uint64_t))(v32 + 8))(v18, v34);
      return;
    }

  __break(1u);
}

LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  id v28 = [v19 sharedInstance];
  if (v28)
  {
    BOOL v29 = v28;
    unsigned __int8 v30 = [v28 isAliasActiveAndRelayCapable:a1 checkingSelf:0];

    uint64_t v31 = Logger.reachability.unsafeMutableAddressor();
    uint64_t v32 = v58;
    uint64_t v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 16);
    if ((v30 & 1) != 0)
    {
      uint64_t v34 = v59;
      uint64_t v35 = v33(v18, v31, v59);
      uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
      os_log_type_t v37 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v36, v37)) {
        goto LABEL_30;
      }
      uint64_t v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl( &dword_0,  v36,  v37,  "Returning that RCS relay is available, we are approved and the last-addressed handle is from a device that supports relay",  v38,  2u);
      goto LABEL_29;
    }

    uint64_t v11 = v57;
    uint64_t v34 = v59;
    uint64_t v55 = v33(v57, v31, v59);
    uint64_t v36 = (os_log_s *)Logger.logObject.getter(v55);
    os_log_type_t v53 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v36, v53))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v38 = 0;
      unsigned __int8 v54 = "Returning that RCS relay is unavailable, we are approved but the last-addressed handle is not from a device "
            "that supports relay";
      goto LABEL_28;
    }

    goto LABEL_31;
  }

  __break(1u);
  return result;
}

LABEL_37:
  __break(1u);
}

id sub_20748(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5)
{
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [v5 chatForChatIdentifier:v11 style:45];

  if (!v12)
  {
    uint64_t v13 = sub_5C28(&qword_76570);
    uint64_t inited = swift_initStackObject(v13, v31);
    *(_OWORD *)(inited + sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = xmmword_5FAF0;
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(kFZChatParticipantStatusKey);
    uint64_t v30 = v15;
    AnyHashable.init<A>(_:)( (void *)(inited + 32),  &v29,  &type metadata for String,  &protocol witness table for String);
    type metadata accessor for FZChatMemberStatus(0LL);
    *(void *)(inited + 96) = v16;
    *(_DWORD *)(inited + 72) = 2;
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(kFZPersonID);
    uint64_t v30 = v17;
    AnyHashable.init<A>(_:)( (void *)(inited + 104),  &v29,  &type metadata for String,  &protocol witness table for String);
    *(void *)(inited + 168) = &type metadata for String;
    *(void *)(inited + 144) = a1;
    *(void *)(inited + 152) = a2;
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMCouldBeChatBotKey);
    uint64_t v30 = v18;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)( (void *)(inited + 176),  &v29,  &type metadata for String,  &protocol witness table for String);
    *(void *)(inited + 240) = &type metadata for Bool;
    *(_BYTE *)(inited + 2sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = a3 & 1;
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMChatBotIDKey);
    uint64_t v30 = v19;
    AnyHashable.init<A>(_:)( (void *)(inited + 248),  &v29,  &type metadata for String,  &protocol witness table for String);
    *(void *)(inited + 312) = &type metadata for String;
    if (a5) {
      uint64_t v20 = a4;
    }
    else {
      uint64_t v20 = 0LL;
    }
    unint64_t v21 = 0xE000000000000000LL;
    if (a5) {
      unint64_t v21 = a5;
    }
    *(void *)(inited + 288) = v20;
    *(void *)(inited + 296) = v21;
    swift_bridgeObjectRetain();
    unint64_t v22 = sub_123A4(inited);
    NSString v23 = String._bridgeToObjectiveC()();
    uint64_t v24 = sub_5C28(&qword_76AF0);
    uint64_t v25 = swift_allocObject(v24, 64LL, 7LL);
    *(_OWORD *)(v25 + sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = xmmword_5F530;
    *(void *)(v25 + 56) = sub_5C28(&qword_76568);
    *(void *)(v25 + 32) = v22;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v25);
    [v5 didJoinChat:v23 style:45 displayName:0 groupID:0 handleInfo:isa];

    NSString v27 = String._bridgeToObjectiveC()();
    id v12 = [v5 chatForChatIdentifier:v27 style:45];
  }

  return v12;
}

uint64_t variable initialization expression of RCSOperationController.operationQueues()
{
  uint64_t v0 = sub_5C28(&qword_76BE8);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_5C28(&qword_765B0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for AsyncMultiQueue(0LL);
  static TaskPriority.userInitiated.getter(v7);
  uint64_t v8 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v6, 0LL, 1LL, v8);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v3,  enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:),  v0);
  return AsyncMultiQueue.__allocating_init(priority:bufferingPolicy:)(v6, v3);
}

unint64_t variable initialization expression of RCSOperationController.operations()
{
  return sub_20B08((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t sub_20AFC(uint64_t a1)
{
  return sub_20F60(a1, sub_28CF0);
}

unint64_t sub_20B08(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_5C28(&qword_76C60);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *(v6 - 2);
    uint64_t v8 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain();
    swift_retain(v9);
    unint64_t result = sub_14490(v7, v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    id v12 = (uint64_t *)(v4[6] + 16 * result);
    *id v12 = v7;
    v12[1] = v8;
    *(void *)(v4[7] + 8 * result) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_20C20(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_5C28(&qword_76C58);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v8 = *(v6 - 1);
    uint64_t v7 = *v6;
    swift_bridgeObjectRetain();
    unint64_t result = sub_2A1F4();
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    char v11 = (void *)(v4[7] + 16 * result);
    *char v11 = v8;
    v11[1] = v7;
    uint64_t v12 = v4[2];
    BOOL v13 = __OFADD__(v12, 1LL);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v6 += 2;
    v4[2] = v14;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_20D14(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_5C28(&qword_76C48);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_21AAC(v7, (uint64_t)&v16, &qword_76C50);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_14490(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_121F4(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_20E48( RCSServiceSession *a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, unsigned __int8 a8)
{
  uint64_t v9 = *(void *)a1[1].IMDTelephonyServiceSession_opaque;
  if (!v9)
  {
    char v11 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_5C28(&qword_76C20);
  uint64_t v10 = static _DictionaryStorage.allocate(capacity:)(v9);
  char v11 = (void *)v10;
  uint64_t v12 = *(void *)a1[1].IMDTelephonyServiceSession_opaque;
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1, a2, a3, a4, a5, a6, a7, a8);
    return (unint64_t)v11;
  }

  swift_retain(v10);
  uint64_t v13 = (void **)&a1[3];
  while (1)
  {
    uint64_t v14 = (uint64_t)*(v13 - 2);
    uint64_t v15 = (uint64_t)*(v13 - 1);
    uint64_t v16 = *v13;
    swift_bridgeObjectRetain();
    id v17 = v16;
    unint64_t result = sub_14490(v14, v15);
    if ((v19 & 1) != 0) {
      break;
    }
    *(void *)((char *)v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v20 = (uint64_t *)(v11[6] + 16 * result);
    *uint64_t v20 = v14;
    v20[1] = v15;
    *(void *)(v11[7] + 8 * result) = v17;
    uint64_t v21 = v11[2];
    BOOL v22 = __OFADD__(v21, 1LL);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    v11[2] = v23;
    v13 += 3;
    if (!--v12)
    {
      swift_release(v11);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_20F60(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    uint64_t v6 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_5C28(&qword_76C40);
  uint64_t v5 = static _DictionaryStorage.allocate(capacity:)(v3);
  uint64_t v6 = (void *)v5;
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v6;
  }

  swift_retain(v5);
  uint64_t v8 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v9 = *((unsigned __int8 *)v8 - 16);
    uint64_t v11 = *(v8 - 1);
    uint64_t v10 = *v8;
    swift_bridgeObjectRetain();
    unint64_t result = a2(v9);
    if ((v13 & 1) != 0) {
      break;
    }
    *(void *)((char *)v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(_BYTE *)(v6[6] + result) = v9;
    uint64_t v14 = (void *)(v6[7] + 16 * result);
    *uint64_t v14 = v11;
    v14[1] = v10;
    uint64_t v15 = v6[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v8 += 3;
    v6[2] = v17;
    if (!--v7)
    {
      swift_release(v6);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_21070(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_5C28(&qword_76C38);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *(v6 - 2);
    uint64_t v8 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_14490(v7, v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v7;
    v12[1] = v8;
    *(void *)(v4[7] + 8 * result) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_21188(RCSServiceSession *a1)
{
  uint64_t v2 = sub_5C28(&qword_76C28);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v12 = (__int128 *)((char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = *(void *)a1[1].IMDTelephonyServiceSession_opaque;
  if (!v13)
  {
    uint64_t v15 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v33 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v33, v4, v5, v6, v7, v8, v9, v10);
    return (unint64_t)v15;
  }

  sub_5C28(&qword_76C30);
  uint64_t v14 = static _DictionaryStorage.allocate(capacity:)(v13);
  uint64_t v15 = (void *)v14;
  uint64_t v16 = *(void *)a1[1].IMDTelephonyServiceSession_opaque;
  if (!v16) {
    goto LABEL_9;
  }
  uint64_t v17 = (uint64_t)v12 + *(int *)(v2 + 48);
  uint64_t v18 = v14 + 64;
  unint64_t v19 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v35 = a1;
  uint64_t v20 = (uint64_t)&a1->IMDTelephonyServiceSession_opaque[v19];
  uint64_t v21 = *(void *)(v3 + 72);
  swift_retain(v14);
  while (1)
  {
    sub_21AAC(v20, (uint64_t)v12, &qword_76C28);
    __int128 v22 = v12[1];
    __int128 v36 = *v12;
    __int128 v37 = v22;
    v38[0] = v12[2];
    *(_OWORD *)((char *)v38 + 9) = *(__int128 *)((char *)v12 + 41);
    unint64_t result = sub_28E3C((uint64_t)&v36);
    if ((v24 & 1) != 0) {
      break;
    }
    unint64_t v25 = result;
    *(void *)(v18 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    unsigned int v26 = (_OWORD *)(v15[6] + (result << 6));
    __int128 v27 = v37;
    *unsigned int v26 = v36;
    v26[1] = v27;
    v26[2] = v38[0];
    *(_OWORD *)((char *)v26 + 41) = *(_OWORD *)((char *)v38 + 9);
    uint64_t v28 = v15[7];
    uint64_t v29 = type metadata accessor for TypingIndicator(0LL);
    unint64_t result = sub_21A68(v17, v28 + *(void *)(*(void *)(v29 - 8) + 72LL) * v25);
    uint64_t v30 = v15[2];
    BOOL v31 = __OFADD__(v30, 1LL);
    uint64_t v32 = v30 + 1;
    if (v31) {
      goto LABEL_12;
    }
    void v15[2] = v32;
    v20 += v21;
    if (!--v16)
    {
      swift_release(v15);
      uint64_t v33 = v35;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t variable initialization expression of RCSOperationController.dedupeToOperationID()
{
  return sub_124D0((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t variable initialization expression of RCSMessage.content@<X0>(uint64_t a1@<X8>)
{
  return sub_21394(type metadata accessor for RCSMessage.Content, a1);
}

double variable initialization expression of RCSMessage.groupIdentity@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0LL;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = 0u;
  return result;
}

double variable initialization expression of RCSGroup.icon@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t variable initialization expression of RCSFile.DispositionInformation.timeLength()
{
  return 0LL;
}

uint64_t variable initialization expression of RCSFile.thumbnail@<X0>(uint64_t a1@<X8>)
{
  return sub_21394(type metadata accessor for RCSFile.ThumbnailInformation, a1);
}

uint64_t sub_21394@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(a2, 1LL, 1LL, v3);
}

CoreRCS::RCSMessageMetadata __swiftcall RCSMessageMetadata.init()()
{
  return (CoreRCS::RCSMessageMetadata)sub_20C20((uint64_t)&_swiftEmptyArrayStorage);
}

unint64_t variable initialization expression of RCSHandle.attributes()
{
  return sub_20F60((uint64_t)_swiftEmptyArrayStorage, sub_28CF0);
}

unint64_t variable initialization expression of RCSTypingTracker.allIndicators()
{
  return sub_21070((uint64_t)_swiftEmptyArrayStorage);
}

void type metadata accessor for Key(uint64_t a1)
{
}

void sub_21424(void *a1@<X8>)
{
  *a1 = 0LL;
}

void *sub_2142C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_21440@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_21454@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_21468(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_21498@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_214C4@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_214E8(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_214FC(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_21510(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_21524@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_21538(void *a1)
{
  return (*v1 & ~*a1) == 0LL;
}

BOOL sub_2154C(void *a1)
{
  return (*v1 & *a1) == 0LL;
}

BOOL sub_21560(void *a1)
{
  return (*a1 & ~*v1) == 0LL;
}

BOOL sub_21574()
{
  return *v0 == 0LL;
}

uint64_t sub_21584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

void *sub_2159C(void *result)
{
  *v1 &= ~*result;
  return result;
}

void *sub_215B0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_215BC(uint64_t a1, uint64_t a2)
{
  return sub_21684(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_215C8(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_21608(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  Swift::Int v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_21678(uint64_t a1, uint64_t a2)
{
  return sub_21684(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_21684(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  uint64_t v7 = v6;
  uint64_t v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_216C0(uint64_t a1, id *a2)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  uint64_t v5 = v8;
  if (v8)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    uint64_t result = swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return result;
}

uint64_t sub_21734(uint64_t a1, id *a2)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  char v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  uint64_t v5 = v9;
  if (v9)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_217B0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = v3;
  NSString v5 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v4);
  *a2 = v5;
  return result;
}

void sub_217F0(RCSServiceSession *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_21AF0((uint64_t)a1);
  swift_bridgeObjectRelease(a1, v5, v6, v7, v8, v9, v10, v11);
  *a2 = v4;
}

uint64_t sub_2182C(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_218B4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_218F8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_21920(uint64_t a1)
{
  uint64_t v2 = sub_219FC( (unint64_t *)&qword_76C10,  (uint64_t (*)(uint64_t))type metadata accessor for Key,  (uint64_t)&unk_5FC50);
  uint64_t v3 = sub_219FC(&qword_76C18, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_5FBA4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_219A4()
{
  return sub_219FC(&qword_76BF8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_5FB68);
}

uint64_t sub_219D0()
{
  return sub_219FC(&qword_76C00, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_5FB3C);
}

uint64_t sub_219FC(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_21A3C()
{
  return sub_219FC(&qword_76C08, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_5FBD8);
}

uint64_t sub_21A68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TypingIndicator(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_21AAC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_5C28(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_21AF0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t result = 0LL;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0LL;
    }
    result |= v5;
    --v1;
  }

  while (v1);
  return result;
}

void type metadata accessor for FZMessageFlags(uint64_t a1)
{
}

uint64_t sub_21B3C()
{
  return sub_219FC( &qword_76C70,  (uint64_t (*)(uint64_t))type metadata accessor for FZMessageFlags,  (uint64_t)&unk_5FCF8);
}

uint64_t sub_21B68()
{
  return sub_219FC( &qword_76C78,  (uint64_t (*)(uint64_t))type metadata accessor for FZMessageFlags,  (uint64_t)&unk_5FCC4);
}

uint64_t sub_21B94()
{
  return sub_219FC( &qword_76C80,  (uint64_t (*)(uint64_t))type metadata accessor for FZMessageFlags,  (uint64_t)&unk_5FD24);
}

uint64_t sub_21BC0()
{
  return sub_219FC( &qword_76C88,  (uint64_t (*)(uint64_t))type metadata accessor for FZMessageFlags,  (uint64_t)&unk_5FD60);
}

uint64_t sub_21C04(uint64_t a1)
{
  return sub_21E44(a1, static Logger.rcs);
}

uint64_t Logger.rcs.unsafeMutableAddressor()
{
  return sub_21C9C(&qword_76B90, (uint64_t)static Logger.rcs);
}

uint64_t static Logger.rcs.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21CF8(&qword_76B90, (uint64_t)static Logger.rcs, (uint64_t)sub_21C04, a1);
}

uint64_t sub_21C54(uint64_t a1)
{
  return sub_21E44(a1, static Logger.reachability);
}

uint64_t Logger.reachability.unsafeMutableAddressor()
{
  return sub_21C9C(&qword_76B98, (uint64_t)static Logger.reachability);
}

uint64_t sub_21C9C(void *a1, uint64_t a2)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  return sub_6298(v3, a2);
}

uint64_t static Logger.reachability.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21CF8(&qword_76B98, (uint64_t)static Logger.reachability, (uint64_t)sub_21C54, a1);
}

uint64_t sub_21CF8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_6298(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a4, v7, v6);
}

uint64_t sub_21D60(uint64_t a1)
{
  return sub_21E44(a1, static Logger.chatbot);
}

uint64_t Logger.chatbot.unsafeMutableAddressor()
{
  return sub_21C9C(&qword_76BA0, (uint64_t)static Logger.chatbot);
}

uint64_t static Logger.chatbot.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21CF8(&qword_76BA0, (uint64_t)static Logger.chatbot, (uint64_t)sub_21D60, a1);
}

uint64_t sub_21DBC(uint64_t a1)
{
  return sub_21E44(a1, static Logger.groups);
}

uint64_t Logger.groups.unsafeMutableAddressor()
{
  return sub_21C9C(&qword_76BA8, (uint64_t)static Logger.groups);
}

uint64_t static Logger.groups.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21CF8(&qword_76BA8, (uint64_t)static Logger.groups, (uint64_t)sub_21DBC, a1);
}

uint64_t sub_21E18(uint64_t a1)
{
  return sub_21E44(a1, static Logger.operations);
}

uint64_t sub_21E44(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_6258(v3, a2);
  sub_6298(v3, (uint64_t)a2);
  uint64_t v4 = static Logger.messagesSubsystem.getter();
  return Logger.init(subsystem:category:)(v4);
}

uint64_t Logger.operations.unsafeMutableAddressor()
{
  return sub_21C9C(&qword_76BB0, (uint64_t)static Logger.operations);
}

uint64_t static Logger.operations.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21CF8(&qword_76BB0, (uint64_t)static Logger.operations, (uint64_t)sub_21E18, a1);
}

unint64_t RCSDestination.description.getter()
{
  if ((v61 & 1) != 0)
  {
    sub_22168(v59, (uint64_t)v56);
    *(void *)&__int128 v65 = 0LL;
    *((void *)&v65 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(46LL);
    swift_bridgeObjectRelease(*((RCSServiceSession **)&v65 + 1), v1, v2, v3, v4, v5, v6, v7);
    uint64_t v8 = v57;
    uint64_t v9 = v58;
    sub_CA38(v56, v57);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v9 + 8))(v62, v8, v9);
    sub_22180((uint64_t)v62, (uint64_t)v63);
    if (*((void *)&v63[0] + 1))
    {
      __int128 v65 = v63[0];
      __int128 v66 = v63[1];
      v67[0] = v64[0];
      *(_OWORD *)((char *)v67 + 9) = *(_OWORD *)((char *)v64 + 9);
      uint64_t v10 = RCSHandle.rawValue.getter();
      uint64_t v12 = v11;
      sub_221C8(v62);
    }

    else
    {
      uint64_t v10 = 0x3E6C696E3CLL;
      uint64_t v12 = (RCSServiceSession *)0xE500000000000000LL;
    }

    v33._uint64_t countAndFlagsBits = v10;
    v33._object = v12;
    String.append(_:)(v33);
    swift_bridgeObjectRelease(v12, v34, v35, v36, v37, v38, v39, v40);
    v41._object = (void *)0x8000000000065680LL;
    v41._uint64_t countAndFlagsBits = 0xD000000000000011LL;
    String.append(_:)(v41);
    uint64_t v42 = v57;
    uint64_t v43 = v58;
    sub_CA38(v56, v57);
    uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 16))(v42, v43);
    if (v45)
    {
      uint64_t v46 = v45;
    }

    else
    {
      uint64_t v44 = 0x3E6C696E3CLL;
      uint64_t v46 = (RCSServiceSession *)0xE500000000000000LL;
    }

    unsigned int v47 = v46;
    String.append(_:)(*(Swift::String *)&v44);
    swift_bridgeObjectRelease(v46, v48, v49, v50, v51, v52, v53, v54);
    unint64_t v32 = 0xD000000000000019LL;
    sub_12204(v56);
  }

  else
  {
    __int128 v65 = v59[0];
    __int128 v66 = v59[1];
    v67[0] = *(_OWORD *)v60;
    *(_OWORD *)((char *)v67 + 9) = *(_OWORD *)&v60[9];
    *(void *)&v63[0] = 0LL;
    *((void *)&v63[0] + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(25LL);
    swift_bridgeObjectRelease(*((RCSServiceSession **)&v63[0] + 1), v13, v14, v15, v16, v17, v18, v19);
    *(void *)&v63[0] = 0xD000000000000016LL;
    *((void *)&v63[0] + 1) = 0x80000000000656A0LL;
    uint64_t v20 = RCSHandle.rawValue.getter();
    __int128 v22 = v21;
    sub_15F40(&v65);
    v23._uint64_t countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease(v22, v24, v25, v26, v27, v28, v29, v30);
    v31._uint64_t countAndFlagsBits = 41LL;
    v31._object = (void *)0xE100000000000000LL;
    String.append(_:)(v31);
    return *(void *)&v63[0];
  }

  return v32;
}

uint64_t sub_22134(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_22168(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = v3;
  return a2;
}

uint64_t sub_22180(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_5C28(&qword_76370);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t *sub_221C8(uint64_t *a1)
{
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for RCSHandle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for RCSDestination(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 57);
  if (v2 >= 2) {
    unsigned int v2 = *(_DWORD *)a1 + 2;
  }
  if (v2 == 1) {
    return sub_12204((void *)a1);
  }
  swift_bridgeObjectRelease(*(void *)(a1 + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + 24));
  swift_bridgeObjectRelease(*(void *)(a1 + 32));
  return swift_bridgeObjectRelease(*(void *)(a1 + 48));
}

uint64_t initializeWithCopy for RCSDestination(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 57);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    __int128 v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    char v5 = 1;
  }

  else
  {
    uint64_t v6 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v6;
    uint64_t v7 = *(void *)(a2 + 24);
    *(void *)(a1 + sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v7;
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v8 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v9;
    *(void *)(a1 + 40) = v8;
    uint64_t v10 = *(void *)(a2 + 48);
    *(void *)(a1 + 48) = v10;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    char v5 = 0;
  }

  *(_BYTE *)(a1 + 57) = v5;
  return a1;
}

uint64_t assignWithCopy for RCSDestination( uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, unsigned __int8 a8)
{
  if (a1 != a2)
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + 57);
    if (v10 >= 2) {
      unsigned int v10 = *(_DWORD *)a1 + 2;
    }
    if (v10 == 1)
    {
      sub_12204((void *)a1);
    }

    else
    {
      swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 8), (SEL)a2, a3, a4, a5, a6, a7, a8);
      swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 24), v11, v12, v13, v14, v15, v16, v17);
      swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 32), v18, v19, v20, v21, v22, v23, v24);
      swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 48), v25, v26, v27, v28, v29, v30, v31);
    }

    unsigned int v32 = *(unsigned __int8 *)(a2 + 57);
    if (v32 >= 2) {
      unsigned int v32 = *(_DWORD *)a2 + 2;
    }
    if (v32 == 1)
    {
      uint64_t v33 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v33;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v33 - 8))(a1, a2);
      *(_BYTE *)(a1 + 57) = 1;
    }

    else
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(_WORD *)(a1 + 56) = *(unsigned __int8 *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }

  return a1;
}

__n128 initializeWithTake for RCSDestination(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for RCSDestination( uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, unsigned __int8 a8)
{
  if (a1 != a2)
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + 57);
    if (v10 >= 2) {
      unsigned int v10 = *(_DWORD *)a1 + 2;
    }
    if (v10 == 1)
    {
      sub_12204((void *)a1);
    }

    else
    {
      swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 8), (SEL)a2, a3, a4, a5, a6, a7, a8);
      swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 24), v11, v12, v13, v14, v15, v16, v17);
      swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 32), v18, v19, v20, v21, v22, v23, v24);
      swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 48), v25, v26, v27, v28, v29, v30, v31);
    }

    unsigned int v32 = *(unsigned __int8 *)(a2 + 57);
    if (v32 >= 2) {
      unsigned int v32 = *(_DWORD *)a2 + 2;
    }
    if (v32 == 1)
    {
      __int128 v33 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = v33;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      char v34 = 1;
    }

    else
    {
      char v34 = 0;
      __int128 v35 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = v35;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    }

    *(_BYTE *)(a1 + 57) = v34;
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for RCSDestination(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 58)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 57);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for RCSDestination(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 42) = 0u;
    *(_OWORD *)(result + sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_DWORD *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 58) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 58) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 57) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_225E8(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 57);
  return result;
}

uint64_t sub_22604(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_OWORD *)(result + 41) = 0u;
    *(_OWORD *)(result + sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }

  *(_BYTE *)(result + 57) = a2;
  return result;
}

ValueMetadata *type metadata accessor for RCSDestination()
{
  return &type metadata for RCSDestination;
}

uint64_t sub_22640()
{
  id v0 = [objc_allocWithZone(NSISO8601DateFormatter) init];
  [v0 setFormatOptions:3955];
  id v1 = [objc_allocWithZone(NSISO8601DateFormatter) init];
  [v1 setFormatOptions:1907];
  uint64_t v2 = sub_5C28(&qword_76C90);
  uint64_t v3 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v3 + sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = xmmword_5FE90;
  *(void *)(v3 + 32) = v0;
  *(void *)(v3 + 40) = v1;
  uint64_t v5 = v3;
  uint64_t result = specialized Array._endMutation()();
  qword_7BBD8 = v5;
  return result;
}

uint64_t sub_226F4()
{
  if (qword_76BB8 != -1) {
    swift_once(&qword_76BB8, sub_22640);
  }
  unint64_t v0 = qword_7BBD8;
  if (!((unint64_t)qword_7BBD8 >> 62))
  {
    uint64_t v1 = *(void *)((char *)&dword_10 + (qword_7BBD8 & 0xFFFFFFFFFFFFF8LL));
    uint64_t result = swift_bridgeObjectRetain();
    if (v1) {
      goto LABEL_5;
    }
LABEL_13:
    swift_bridgeObjectRelease((RCSServiceSession *)v0, v3, v4, v5, v6, v7, v8, v9);
    return 0LL;
  }

  if (qword_7BBD8 < 0) {
    uint64_t v22 = qword_7BBD8;
  }
  else {
    uint64_t v22 = qword_7BBD8 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter(v22);
  if (!result) {
    goto LABEL_13;
  }
LABEL_5:
  if ((v0 & 0xC000000000000001LL) != 0)
  {
    id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v0);
    goto LABEL_8;
  }

  if (*(void *)((char *)&dword_10 + (v0 & 0xFFFFFFFFFFFFF8LL)))
  {
    id v10 = *(id *)(v0 + 32);
LABEL_8:
    SEL v18 = v10;
    swift_bridgeObjectRelease((RCSServiceSession *)v0, v11, v12, v13, v14, v15, v16, v17);
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v20 = [v18 stringFromDate:isa];

    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    return v21;
  }

  __break(1u);
  return result;
}

void *RCSChipList.chipList.getter()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

uint64_t RCSChipList.attributes.getter()
{
  uint64_t v1 = v0;
  if (qword_76BA0 != -1) {
    swift_once(&qword_76BA0, sub_21D60);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_6298(v2, (uint64_t)static Logger.chatbot);
  uint64_t v3 = swift_retain_n(v0, 2LL);
  __int128 v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v6 = 134217984;
    uint64_t v7 = *(void **)(v1 + 16);
    if (v7)
    {
      id v8 = [v7 chipList];
      uint64_t v9 = type metadata accessor for IMChip(0LL);
      uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

      if ((unint64_t)v10 >> 62)
      {
        if (v10 < 0) {
          uint64_t v23 = v10;
        }
        else {
          uint64_t v23 = v10 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain();
        uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v23);
        swift_release(v1);
        swift_bridgeObjectRelease_n(v10, 2LL);
      }

      else
      {
        uint64_t v11 = *(void *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFF8LL));
        swift_release(v1);
        swift_bridgeObjectRelease((RCSServiceSession *)v10, v12, v13, v14, v15, v16, v17, v18);
      }
    }

    else
    {
      swift_release(v1);
      uint64_t v11 = 0LL;
    }

    uint64_t v24 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
    swift_release(v1);
    _os_log_impl(&dword_0, v4, v5, "Apply %ld chip list attributes", v6, 0xCu);
    swift_slowDealloc(v6, -1LL, -1LL);

    id v19 = *(void **)(v1 + 16);
    if (!v19) {
      return 0LL;
    }
  }

  else
  {

    swift_release_n(v1, 2LL);
    id v19 = *(void **)(v1 + 16);
    if (!v19) {
      return 0LL;
    }
  }

  id v20 = [v19 dictionaryRepresentation];
  uint64_t v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v20,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  return v21;
}

uint64_t RCSSuggestedReply.deinit()
{
  return v0;
}

uint64_t RCSSuggestedReply.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t sub_22AAC@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for RCSChipList()
{
  return objc_opt_self(&OBJC_CLASS____TtC7CoreRCS11RCSChipList);
}

uint64_t sub_22AF4()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_6258(v0, qword_76D38);
  uint64_t v1 = sub_6298(v0, (uint64_t)qword_76D38);
  if (qword_76BB0 != -1) {
    swift_once(&qword_76BB0, sub_21E18);
  }
  uint64_t v2 = sub_6298(v0, (uint64_t)static Logger.operations);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t RCSOperationController.OperationError.errorDescription.getter()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  __int128 v4 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_22E44(v0, (uint64_t)&v54);
  if ((v57 & 1) != 0)
  {
    uint64_t v5 = v56;
    sub_121F4(&v54, &v47);
    uint64_t v50 = 0LL;
    unint64_t v51 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(61LL);
    uint64_t v52 = v50;
    unint64_t v53 = v51;
    v6._uint64_t countAndFlagsBits = 0xD000000000000019LL;
    v6._object = (void *)0x80000000000656F0LL;
    String.append(_:)(v6);
    sub_12224((uint64_t)&v47, (uint64_t)&v50);
    v7._uint64_t countAndFlagsBits = String.init<A>(reflecting:)(&v50, (char *)&type metadata for Any + 8);
    object = (RCSServiceSession *)v7._object;
    String.append(_:)(v7);
    swift_bridgeObjectRelease(object, v9, v10, v11, v12, v13, v14, v15);
    v16._object = (void *)0x8000000000065710LL;
    v16._uint64_t countAndFlagsBits = 0xD000000000000020LL;
    String.append(_:)(v16);
    uint64_t v50 = v5;
    uint64_t v17 = sub_5C28(&qword_76D50);
    v18._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v50, v17);
    id v19 = (RCSServiceSession *)v18._object;
    String.append(_:)(v18);
    swift_bridgeObjectRelease(v19, v20, v21, v22, v23, v24, v25, v26);
    uint64_t v27 = v52;
  }

  else
  {
    __int128 v28 = v54;
    sub_22168(&v55, (uint64_t)&v47);
    uint64_t v50 = 0LL;
    unint64_t v51 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(83LL);
    v29._object = (void *)0x8000000000065740LL;
    v29._uint64_t countAndFlagsBits = 0xD000000000000020LL;
    String.append(_:)(v29);
    uint64_t v30 = v48;
    uint64_t v31 = v49;
    sub_CA38(&v47, v48);
    (*(void (**)(uint64_t, uint64_t))(v31 + 16))(v30, v31);
    uint64_t v32 = sub_219FC( (unint64_t *)&qword_765C8,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    v33._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v32);
    char v34 = (RCSServiceSession *)v33._object;
    String.append(_:)(v33);
    swift_bridgeObjectRelease(v34, v35, v36, v37, v38, v39, v40, v41);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    v42._uint64_t countAndFlagsBits = 0xD000000000000016LL;
    v42._object = (void *)0x8000000000065770LL;
    String.append(_:)(v42);
    Double.write<A>(to:)( &v50,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation,  *(double *)&v28);
    v43._uint64_t countAndFlagsBits = 0x73646E6F63657320LL;
    v43._object = (void *)0xEF2064657375202CLL;
    String.append(_:)(v43);
    Double.write<A>(to:)( &v50,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation,  *((double *)&v28 + 1));
    v44._uint64_t countAndFlagsBits = 0x73646E6F63657320LL;
    v44._object = (void *)0xE800000000000000LL;
    String.append(_:)(v44);
    uint64_t v27 = v50;
  }

  sub_12204(&v47);
  return v27;
}

uint64_t sub_22E44(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_22E7C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  LODWORD(v4) = a2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  SEL v9 = (char *)v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v76 = (char *)v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = (RCSServiceSession *)type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)v77[-1].state;
  __chkstk_darwin(v77);
  unsigned __int8 v15 = (char *)v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_76BC0 != -1) {
    swift_once(&qword_76BC0, sub_22AF4);
  }
  uint64_t v73 = v10;
  uint64_t v74 = v9;
  uint64_t v16 = type metadata accessor for Logger(0LL);
  sub_6298(v16, (uint64_t)qword_76D38);
  uint64_t v17 = swift_retain_n(v3, 4LL);
  Swift::String v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter();
  int v20 = v19;
  BOOL v21 = os_log_type_enabled(v18, v19);
  int v75 = v4;
  uint64_t v72 = v11;
  uint64_t v71 = v6;
  if (v21)
  {
    uint64_t v22 = swift_slowAlloc(32LL, -1LL);
    uint64_t v70 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v70;
    *(_DWORD *)uint64_t v22 = 141558531;
    uint64_t v86 = 1752392040LL;
    uint64_t v67 = v87;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v87);
    *(_WORD *)(v22 + 12) = 2081;
    v66[1] = v22 + 14;
    uint64_t v23 = *(void *)(v3
                    + OBJC_IVAR____TtCC7CoreRCS22RCSOperationControllerP33_1B0F715D17C82627C67D971FB94137349Operation_id
                    + 24);
    uint64_t v24 = *(void *)(v3
                    + OBJC_IVAR____TtCC7CoreRCS22RCSOperationControllerP33_1B0F715D17C82627C67D971FB94137349Operation_id
                    + 32);
    sub_CA38( (void *)(v3 + OBJC_IVAR____TtCC7CoreRCS22RCSOperationControllerP33_1B0F715D17C82627C67D971FB94137349Operation_id),  v23);
    id v25 = *(void (**)(uint64_t, uint64_t))(v24 + 16);
    LODWORD(v69) = v20;
    v25(v23, v24);
    uint64_t v26 = sub_219FC( (unint64_t *)&qword_765C8,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v27 = v77;
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter(v77, v26);
    unint64_t v4 = v29;
    (*(void (**)(char *, RCSServiceSession *))(v13 + 8))(v15, v27);
    uint64_t v86 = sub_B004(v28, v4, aBlock);
    uint64_t v30 = v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v67);
    swift_release_n(v3, 2LL);
    uint64_t v31 = (RCSServiceSession *)v4;
    LOBYTE(v4) = v75;
    swift_bridgeObjectRelease(v31, v32, v33, v34, v35, v36, v37, v38);
    *(_WORD *)(v22 + 22) = 2048;
    swift_beginAccess(v3 + 152, v78, 0LL, 0LL);
    uint64_t v39 = *(void *)(*(void *)(v3 + 152) + 16LL);
    swift_release(v3);
    uint64_t v86 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v30);
    swift_release(v3);
    _os_log_impl( &dword_0,  v18,  (os_log_type_t)v69,  "Operation completed with ID %{private,mask.hash}s - notifying %ld listener(s)",  (uint8_t *)v22,  0x20u);
    uint64_t v40 = v70;
    swift_arrayDestroy(v70, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);

    if ((v4 & 1) == 0)
    {
LABEL_5:
      uint64_t v81 = &type metadata for Never;
      LOBYTE(v82) = 0;
      goto LABEL_8;
    }
  }

  else
  {

    swift_release_n(v3, 4LL);
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
  }

  aBlock[0] = a1;
  LOBYTE(v82) = 1;
  swift_errorRetain(a1);
LABEL_8:
  sub_122D8((uint64_t)aBlock, (uint64_t)&v86, &qword_76FF0);
  swift_beginAccess(v3 + 112, &v84, 33LL, 0LL);
  sub_2AD3C((uint64_t)&v86, v3 + 112);
  swift_endAccess(&v84);
  swift_beginAccess(v3 + 152, &v86, 0LL, 0LL);
  uint64_t v77 = *(RCSServiceSession **)(v3 + 152);
  uint64_t v41 = *(void *)v77[1].IMDTelephonyServiceSession_opaque;
  if (v41)
  {
    unint64_t v69 = sub_2AD84();
    swift_bridgeObjectRetain();
    uint64_t v42 = 0LL;
    uint64_t v70 = v41;
    uint64_t v68 = v7;
    Swift::String v43 = v74;
    uint64_t v44 = v71;
    do
    {
      id v45 = &v77[v42++];
      uint64_t v46 = swift_allocObject(&unk_72110, 32LL, 7LL);
      RCSServiceSession v47 = v45[2];
      *(RCSServiceSession *)(v46 + sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = v47;
      uint64_t v48 = swift_retain(*(void *)v47.state);
      uint64_t v49 = (void *)static OS_dispatch_queue.main.getter(v48);
      uint64_t v84 = a1;
      LOBYTE(v45) = v4 & 1;
      char v85 = v4 & 1;
      uint64_t v50 = swift_allocObject(&unk_72138, 48LL, 7LL);
      sub_122D8((uint64_t)&v84, v50 + 16, &qword_77000);
      *(void *)(v50 + 32) = sub_2ADE4;
      *(void *)(v50 + 40) = v46;
      id v82 = sub_2AE40;
      uint64_t v83 = v50;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_19334;
      uint64_t v81 = &unk_72150;
      unint64_t v4 = (unint64_t)_Block_copy(aBlock);
      sub_2AE68(a1, (char)v45);
      swift_retain(v46);
      sub_2AE68(a1, (char)v45);
      uint64_t v51 = swift_retain(v46);
      static DispatchQoS.unspecified.getter(v51);
      uint64_t v79 = _swiftEmptyArrayStorage;
      sub_219FC( &qword_77008,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v52 = sub_5C28(&qword_77010);
      unint64_t v53 = sub_2AE74();
      __int128 v54 = v76;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v52, v53);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v54, v43, v4);
      __int128 v55 = (const void *)v4;
      LOBYTE(v4) = v75;
      uint64_t v56 = v68;
      _Block_release(v55);
      swift_release_n(v46, 2LL);

      (*(void (**)(char *, uint64_t))(v56 + 8))(v43, v44);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v54, v73);
      char v57 = (char)v45;
      uint64_t v58 = v70;
      sub_2AE34(a1, v57);
      swift_release(v83);
    }

    while (v58 != v42);
    swift_bridgeObjectRelease(v77, v59, v60, v61, v62, v63, v64, v65);
  }

void sub_234FC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v71 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v68 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_76BC0 != -1) {
    swift_once(&qword_76BC0, sub_22AF4);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  sub_6298(v14, (uint64_t)qword_76D38);
  uint64_t v15 = swift_retain_n(v1, 4LL);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  LODWORD(v72) = v17;
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v70 = v8;
  uint64_t v69 = v9;
  if (v18)
  {
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    uint64_t v66 = swift_slowAlloc(32LL, -1LL);
    *(void *)&__int128 aBlock = v66;
    *(_DWORD *)uint64_t v19 = 141558531;
    uint64_t v81 = 1752392040LL;
    uint64_t v64 = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, v82);
    *(_WORD *)(v19 + 12) = 2081;
    uint64_t v63 = v19 + 14;
    unint64_t v67 = a1;
    uint64_t v21 = *(void *)(v2
                    + OBJC_IVAR____TtCC7CoreRCS22RCSOperationControllerP33_1B0F715D17C82627C67D971FB94137349Operation_id
                    + 24);
    uint64_t v20 = *(void *)(v2
                    + OBJC_IVAR____TtCC7CoreRCS22RCSOperationControllerP33_1B0F715D17C82627C67D971FB94137349Operation_id
                    + 32);
    sub_CA38( (void *)(v2 + OBJC_IVAR____TtCC7CoreRCS22RCSOperationControllerP33_1B0F715D17C82627C67D971FB94137349Operation_id),  v21);
    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v20 + 16);
    os_log_t v65 = v16;
    v22(v21, v20);
    uint64_t v23 = sub_219FC( (unint64_t *)&qword_765C8,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v11, v23);
    unint64_t v26 = v25;
    (*(void (**)(char *, uint64_t))(v68 + 8))(v13, v11);
    uint64_t v81 = sub_B004(v24, v26, (uint64_t *)&aBlock);
    uint64_t v27 = v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, v64);
    swift_release_n(v2, 2LL);
    uint64_t v28 = (RCSServiceSession *)v26;
    a1 = v67;
    swift_bridgeObjectRelease(v28, v29, v30, v31, v32, v33, v34, v35);
    *(_WORD *)(v19 + 22) = 2048;
    swift_beginAccess(v2 + 152, v73, 0LL, 0LL);
    uint64_t v36 = *(void *)(*(void *)(v2 + 152) + 16LL);
    swift_release(v2);
    uint64_t v81 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, v27);
    swift_release(v2);
    os_log_t v37 = v65;
    _os_log_impl( &dword_0,  v65,  (os_log_type_t)v72,  "Operation completed with ID %{private,mask.hash}s - notifying %ld listener(s)",  (uint8_t *)v19,  0x20u);
    uint64_t v38 = v66;
    swift_arrayDestroy(v66, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v2, 4LL);
  }

  sub_21AAC(a1, (uint64_t)&aBlock, &qword_77020);
  char v39 = v79;
  if ((v79 & 1) != 0)
  {
    uint64_t v81 = aBlock;
  }

  else
  {
    _OWORD v82[2] = sub_5C28(&qword_77028);
    uint64_t v81 = swift_allocObject(&unk_72200, 56LL, 7LL);
    sub_22168(&aBlock, v81 + 16);
  }

  char v83 = v39;
  sub_122D8((uint64_t)&v81, (uint64_t)&aBlock, &qword_76FF0);
  swift_beginAccess(v2 + 112, v80, 33LL, 0LL);
  sub_2AD3C((uint64_t)&aBlock, v2 + 112);
  swift_endAccess(v80);
  swift_beginAccess(v2 + 152, v84, 0LL, 0LL);
  uint64_t v72 = *(RCSServiceSession **)(v2 + 152);
  uint64_t v40 = *(void *)v72[1].IMDTelephonyServiceSession_opaque;
  if (v40)
  {
    unint64_t v67 = sub_2AD84();
    swift_bridgeObjectRetain();
    uint64_t v41 = 0LL;
    uint64_t v68 = v40;
    do
    {
      uint64_t v42 = &v72[v41++];
      uint64_t v43 = swift_allocObject(&unk_72188, 32LL, 7LL);
      RCSServiceSession v44 = v42[2];
      *(RCSServiceSession *)(v43 + sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = v44;
      uint64_t v45 = swift_retain(*(void *)v44.state);
      uint64_t v46 = (void *)static OS_dispatch_queue.main.getter(v45);
      sub_21AAC(a1, (uint64_t)&v81, &qword_77020);
      sub_21AAC((uint64_t)&v81, (uint64_t)v80, &qword_77020);
      uint64_t v47 = swift_allocObject(&unk_721B0, 80LL, 7LL);
      sub_122D8((uint64_t)v80, v47 + 16, &qword_77020);
      *(void *)(v47 + 64) = sub_2B3C8;
      *(void *)(v47 + 72) = v43;
      uint64_t v78 = sub_2AF44;
      uint64_t v79 = v47;
      *(void *)&__int128 aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256LL;
      uint64_t v76 = sub_19334;
      uint64_t v77 = &unk_721C8;
      uint64_t v48 = _Block_copy(&aBlock);
      uint64_t v49 = swift_retain_n(v43, 2LL);
      static DispatchQoS.unspecified.getter(v49);
      uint64_t v74 = _swiftEmptyArrayStorage;
      sub_219FC( &qword_77008,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v50 = v5;
      uint64_t v51 = sub_5C28(&qword_77010);
      unint64_t v52 = sub_2AE74();
      uint64_t v53 = v51;
      uint64_t v5 = v50;
      __int128 v54 = v71;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v74, v53, v52);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v54, v7, v48);
      _Block_release(v48);
      swift_release_n(v43, 2LL);

      uint64_t v55 = v68;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v54, v70);
      sub_1231C((uint64_t)&v81, &qword_77020);
      swift_release(v79);
    }

    while (v55 != v41);
    swift_bridgeObjectRelease(v72, v56, v57, v58, v59, v60, v61, v62);
  }

void sub_23BC0(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v89 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v88 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  uint64_t v79 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_1C3B4(&qword_76560);
  uint64_t v81 = (void *)type metadata accessor for Result(0LL, a2, v11, &protocol self-conformance witness table for Error);
  uint64_t v94 = *(v81 - 1);
  uint64_t v12 = __chkstk_darwin(v81);
  objc_super v87 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v84 = v13;
  __chkstk_darwin(v12);
  uint64_t v92 = (char *)&v79 - v14;
  unint64_t v85 = type metadata accessor for UUID(0LL);
  uint64_t v15 = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  os_log_type_t v17 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_76BC0 != -1) {
    swift_once(&qword_76BC0, sub_22AF4);
  }
  uint64_t v18 = type metadata accessor for Logger(0LL);
  sub_6298(v18, (uint64_t)qword_76D38);
  uint64_t v19 = swift_retain_n(v2, 4LL);
  uint64_t v20 = (RCSServiceSession *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.default.getter();
  uint64_t v93 = v20;
  LODWORD(v86) = v21;
  BOOL v22 = os_log_type_enabled((os_log_t)v20, v21);
  uint64_t v91 = v6;
  uint64_t v90 = v7;
  uint64_t v80 = v9;
  if (v22)
  {
    uint64_t v23 = swift_slowAlloc(32LL, -1LL);
    uint64_t v83 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v83;
    *(_DWORD *)uint64_t v23 = 141558531;
    uint64_t v99 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100);
    *(_WORD *)(v23 + 12) = 2081;
    uint64_t v82 = v23 + 14;
    uint64_t v24 = a1;
    unint64_t v25 = a2;
    uint64_t v27 = *(void *)(v3
                    + OBJC_IVAR____TtCC7CoreRCS22RCSOperationControllerP33_1B0F715D17C82627C67D971FB94137349Operation_id
                    + 24);
    uint64_t v26 = *(void *)(v3
                    + OBJC_IVAR____TtCC7CoreRCS22RCSOperationControllerP33_1B0F715D17C82627C67D971FB94137349Operation_id
                    + 32);
    sub_CA38( (void *)(v3 + OBJC_IVAR____TtCC7CoreRCS22RCSOperationControllerP33_1B0F715D17C82627C67D971FB94137349Operation_id),  v27);
    (*(void (**)(uint64_t, uint64_t))(v26 + 16))(v27, v26);
    uint64_t v28 = sub_219FC( (unint64_t *)&qword_765C8,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    unint64_t v29 = v85;
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter(v85, v28);
    unint64_t v32 = v31;
    (*(void (**)(char *, unint64_t))(v15 + 8))(v17, v29);
    uint64_t v99 = sub_B004(v30, v32, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100);
    swift_release_n(v3, 2LL);
    id v33 = (RCSServiceSession *)v32;
    a2 = v25;
    a1 = v24;
    swift_bridgeObjectRelease(v33, v34, v35, v36, v37, v38, v39, v40);
    *(_WORD *)(v23 + 22) = 2048;
    swift_beginAccess(v3 + 152, v95, 0LL, 0LL);
    uint64_t v41 = *(void *)(*(void *)(v3 + 152) + 16LL);
    swift_release(v3);
    uint64_t v99 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100);
    swift_release(v3);
    uint64_t v42 = v93;
    _os_log_impl( &dword_0,  (os_log_t)v93,  (os_log_type_t)v86,  "Operation completed with ID %{private,mask.hash}s - notifying %ld listener(s)",  (uint8_t *)v23,  0x20u);
    uint64_t v43 = v83;
    swift_arrayDestroy(v83, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  else
  {

    uint64_t v44 = swift_release_n(v3, 4LL);
  }

  __chkstk_darwin(v44);
  *(&v79 - 2) = a2;
  uint64_t v45 = v81;
  sub_2435C((void (*)(char *))sub_2B228, v81, (uint64_t)&type metadata for Any + 8, (uint64_t)aBlock);
  sub_122D8((uint64_t)aBlock, (uint64_t)&v99, &qword_76FF0);
  swift_beginAccess(v3 + 112, v98, 33LL, 0LL);
  sub_2AD3C((uint64_t)&v99, v3 + 112);
  swift_endAccess(v98);
  swift_beginAccess(v3 + 152, &v99, 0LL, 0LL);
  uint64_t v93 = *(RCSServiceSession **)(v3 + 152);
  uint64_t v46 = *(void *)v93[1].IMDTelephonyServiceSession_opaque;
  if (v46)
  {
    unint64_t v85 = sub_2AD84();
    v84 += 7LL;
    swift_bridgeObjectRetain();
    uint64_t v47 = 0LL;
    uint64_t v83 = a1;
    uint64_t v82 = (uint64_t)a2;
    uint64_t v48 = v80;
    uint64_t v49 = v79;
    uint64_t v50 = v94;
    uint64_t v51 = v92;
    uint64_t v86 = v46;
    do
    {
      unint64_t v52 = &v93[v47++];
      uint64_t v53 = swift_allocObject(&unk_722A0, 32LL, 7LL);
      RCSServiceSession v54 = v52[2];
      *(RCSServiceSession *)(v53 + sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = v54;
      uint64_t v55 = swift_retain(*(void *)v54.state);
      uint64_t v56 = (void *)static OS_dispatch_queue.main.getter(v55);
      char v57 = *(void (**)(char *, uint64_t, void *))(v50 + 16);
      v57(v51, v83, v45);
      uint64_t v58 = v87;
      v57(v87, (uint64_t)v51, v45);
      uint64_t v59 = *(unsigned __int8 *)(v50 + 80);
      uint64_t v60 = (v59 + 24) & ~v59;
      unint64_t v61 = (v84 + v60) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v62 = swift_allocObject(&unk_722C8, v61 + 16, v59 | 7);
      *(void *)(v62 + sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = v82;
      (*(void (**)(uint64_t, char *, void *))(v94 + 32))(v62 + v60, v58, v45);
      uint64_t v63 = (uint64_t (**)())(v62 + v61);
      void *v63 = sub_2B3CC;
      v63[1] = (uint64_t (*)())v53;
      aBlock[4] = (uint64_t)sub_2B330;
      uint64_t v97 = v62;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_19334;
      uint64_t aBlock[3] = (uint64_t)&unk_722E0;
      uint64_t v64 = _Block_copy(aBlock);
      uint64_t v65 = swift_retain_n(v53, 2LL);
      static DispatchQoS.unspecified.getter(v65);
      v98[0] = _swiftEmptyArrayStorage;
      sub_219FC( &qword_77008,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v66 = sub_5C28(&qword_77010);
      unint64_t v67 = sub_2AE74();
      uint64_t v68 = v91;
      dispatch thunk of SetAlgebra.init<A>(_:)(v98, v66, v67);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v49, v48, v64);
      uint64_t v69 = v64;
      uint64_t v51 = v92;
      uint64_t v50 = v94;
      _Block_release(v69);
      uint64_t v70 = v53;
      uint64_t v71 = v86;
      swift_release_n(v70, 2LL);

      (*(void (**)(char *, uint64_t))(v90 + 8))(v48, v68);
      (*(void (**)(char *, uint64_t))(v88 + 8))(v49, v89);
      (*(void (**)(char *, void *))(v50 + 8))(v51, v45);
      swift_release(v97);
    }

    while (v71 != v47);
    swift_bridgeObjectRelease(v93, v72, v73, v74, v75, v76, v77, v78);
  }

uint64_t sub_2435C@<X0>( void (*a1)(char *)@<X0>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = a2[2];
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v15 + 16))(v14, v16);
  if (swift_getEnumCaseMultiPayload(v14, a2) == 1)
  {
    uint64_t v17 = a2[3];
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v17 - 8) + 32LL))(a4, v14, v17);
    uint64_t v18 = 1LL;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v14, v8);
    a1(v12);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    uint64_t v18 = 0LL;
    uint64_t v17 = a2[3];
  }

  uint64_t v19 = type metadata accessor for Result(0LL, a3, v17, a2[4]);
  return swift_storeEnumTagMultiPayload(a4, v19, v18);
}

uint64_t sub_244B0(uint64_t a1, char a2, void (*a3)(void *))
{
  if ((a2 & 1) != 0)
  {
    v5[0] = a1;
    char v6 = 1;
    swift_errorRetain(a1);
  }

  else
  {
    v5[3] = &type metadata for Never;
    char v6 = 0;
  }

  a3(v5);
  return sub_1231C((uint64_t)v5, &qword_769F8);
}

uint64_t sub_24518(uint64_t a1, void (*a2)(void *))
{
  if ((v11 & 1) != 0)
  {
    uint64_t v3 = *(void *)&v10[0];
    v8[0] = *(void *)&v10[0];
    char v9 = 1;
    swift_errorRetain(*(void *)&v10[0]);
    a2(v8);
    swift_errorRelease(v3);
    uint64_t v4 = v8;
  }

  else
  {
    sub_22168(v10, (uint64_t)v8);
    v6[3] = sub_5C28(&qword_77028);
    v6[0] = swift_allocObject(&unk_72200, 56LL, 7LL);
    sub_2AF74((uint64_t)v8, v6[0] + 16LL);
    char v7 = 0;
    a2(v6);
    sub_12204(v8);
    uint64_t v4 = v6;
  }

  return sub_1231C((uint64_t)v4, &qword_769F8);
}

uint64_t sub_245FC(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 - 8);
  __chkstk_darwin(a1);
  char v9 = (char *)&v19[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_1C3B4(&qword_76560);
  uint64_t v11 = type metadata accessor for Result(0LL, a4, v10, &protocol self-conformance witness table for Error);
  __chkstk_darwin(v11);
  uint64_t v13 = (void *)((char *)&v19[-1] - v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v19[-1] - v12, a1, v11);
  if (swift_getEnumCaseMultiPayload(v13, v11) == 1)
  {
    v19[0] = *v13;
    uint64_t v15 = v19[0];
    char v20 = 1;
    swift_errorRetain(v19[0]);
    a2(v19);
    swift_errorRelease(v15);
  }

  else
  {
    (*(void (**)(char *, void *, uint64_t))(v7 + 32))(v9, v13, a4);
    v19[3] = a4;
    uint64_t v16 = sub_1CECC(v19);
    (*(void (**)(void *, char *, uint64_t))(v7 + 16))(v16, v9, a4);
    char v20 = 0;
    a2(v19);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a4);
  }

  return sub_1231C((uint64_t)v19, &qword_769F8);
}

uint64_t sub_24770(uint64_t a1)
{
  v2[27] = a1;
  v2[28] = v1;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[29] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[30] = v4;
  v2[31] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_247D0, v1, 0LL);
}

uint64_t sub_247D0()
{
  uint64_t v1 = *(void *)(v0 + 224) + 112LL;
  swift_beginAccess(v1, v0 + 176, 0LL, 0LL);
  sub_21AAC(v1, v0 + 56, &qword_76FF0);
  if (*(unsigned __int8 *)(v0 + 88) == 255)
  {
    uint64_t v28 = *(void *)(v0 + 224);
    sub_1231C(v0 + 56, &qword_76FF0);
    uint64_t v29 = sub_219FC(&qword_77040, type metadata accessor for RCSOperationController.Operation, (uint64_t)&unk_60090);
    uint64_t v30 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(void *)(v0 + 256) = v30;
    *uint64_t v30 = v0;
    v30[1] = sub_24BF4;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)( *(void *)(v0 + 216),  v28,  v29,  0x292874696177LL,  0xE600000000000000LL,  sub_2B074,  *(void *)(v0 + 224),  (char *)&type metadata for Any + 8);
  }

  uint64_t v2 = v0 + 16;
  uint64_t v3 = (void *)(v0 + 96);
  sub_122D8(v0 + 56, v0 + 16, &qword_769F8);
  if (qword_76BC0 != -1) {
    swift_once(&qword_76BC0, sub_22AF4);
  }
  uint64_t v4 = *(void *)(v0 + 224);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_6298(v5, (uint64_t)qword_76D38);
  uint64_t v6 = swift_retain_n(v4, 2LL);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = *(void *)(v0 + 248);
    uint64_t v37 = *(void *)(v0 + 240);
    uint64_t v11 = *(void *)(v0 + 224);
    uint64_t v10 = *(void *)(v0 + 232);
    uint64_t v36 = v11;
    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v38 = swift_slowAlloc(32LL, -1LL);
    uint64_t v39 = v38;
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v13 = (void *)(v11
                   + OBJC_IVAR____TtCC7CoreRCS22RCSOperationControllerP33_1B0F715D17C82627C67D971FB94137349Operation_id);
    uint64_t v15 = *(void *)(v11
                    + OBJC_IVAR____TtCC7CoreRCS22RCSOperationControllerP33_1B0F715D17C82627C67D971FB94137349Operation_id
                    + 24);
    uint64_t v14 = *(void *)(v11
                    + OBJC_IVAR____TtCC7CoreRCS22RCSOperationControllerP33_1B0F715D17C82627C67D971FB94137349Operation_id
                    + 32);
    sub_CA38(v13, v15);
    (*(void (**)(uint64_t, uint64_t))(v14 + 16))(v15, v14);
    uint64_t v16 = sub_219FC( (unint64_t *)&qword_765C8,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v10, v16);
    uint64_t v19 = v18;
    uint64_t v20 = v10;
    uint64_t v2 = v0 + 16;
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v9, v20);
    *(void *)(v0 + 208) = sub_B004(v17, (unint64_t)v19, &v39);
    uint64_t v3 = (void *)(v0 + 96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216);
    swift_release_n(v36, 2LL);
    swift_bridgeObjectRelease(v19, v21, v22, v23, v24, v25, v26, v27);
    _os_log_impl(&dword_0, v7, v8, "Fulfilling operation %s with already-received result", v12, 0xCu);
    swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {
    uint64_t v32 = *(void *)(v0 + 224);

    swift_release_n(v32, 2LL);
  }

  sub_21AAC(v2, (uint64_t)v3, &qword_769F8);
  if (*(_BYTE *)(v0 + 128) == 1)
  {
    uint64_t v33 = *(void *)(v0 + 96);
    *(void *)(v0 + 136) = v33;
    *(_BYTE *)(v0 + 168) = 1;
  }

  else
  {
    sub_12224((uint64_t)v3, v0 + 136);
    *(_BYTE *)(v0 + 168) = 0;
    sub_12204(v3);
    if (*(_BYTE *)(v0 + 168) != 1)
    {
      sub_121F4((_OWORD *)(v0 + 136), *(_OWORD **)(v0 + 216));
      sub_1231C(v2, &qword_769F8);
      swift_task_dealloc(*(void *)(v0 + 248));
      id v35 = *(uint64_t (**)(void))(v0 + 8);
      return v35();
    }

    uint64_t v33 = *(void *)(v0 + 136);
  }

  *(void *)(v0 + 200) = v33;
  uint64_t v34 = sub_5C28(&qword_76560);
  swift_willThrowTypedImpl(v0 + 200, v34, &protocol self-conformance witness table for Error);
  sub_1231C(v2, &qword_769F8);
  swift_task_dealloc(*(void *)(v0 + 248));
  id v35 = *(uint64_t (**)(void))(v0 + 8);
  return v35();
}

uint64_t sub_24BF4()
{
  uint64_t v2 = *(void *)(*v1 + 256);
  uint64_t v3 = *v1;
  *(void *)(v3 + 264) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_24C68, *(void *)(v3 + 224), 0LL);
  }
  swift_task_dealloc(*(void *)(v3 + 248));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_24C68()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24C9C(uint64_t a1, uint64_t a2)
{
  v3[18] = a2;
  v3[19] = v2;
  v3[17] = a1;
  uint64_t v5 = sub_1C3B4(&qword_76560);
  uint64_t v6 = type metadata accessor for Result(0LL, a2, v5, &protocol self-conformance witness table for Error);
  v3[20] = v6;
  v3[21] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  v3[22] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[23] = v8;
  v3[24] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_24D44, v2, 0LL);
}

uint64_t sub_24D44()
{
  uint64_t v1 = *(void *)(v0 + 152) + 112LL;
  swift_beginAccess(v1, v0 + 96, 0LL, 0LL);
  sub_21AAC(v1, v0 + 56, &qword_76FF0);
  if (*(unsigned __int8 *)(v0 + 88) == 255)
  {
    uint64_t v29 = *(void *)(v0 + 144);
    uint64_t v28 = *(void *)(v0 + 152);
    sub_1231C(v0 + 56, &qword_76FF0);
    uint64_t v30 = sub_219FC(&qword_77040, type metadata accessor for RCSOperationController.Operation, (uint64_t)&unk_60090);
    uint64_t v31 = swift_task_alloc(32LL);
    *(void *)(v0 + 200) = v31;
    *(void *)(v31 + sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = v29;
    *(void *)(v31 + 24) = v28;
    uint64_t v32 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(void *)(v0 + 208) = v32;
    *uint64_t v32 = v0;
    v32[1] = sub_25120;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)( *(void *)(v0 + 136),  v28,  v30,  0x292874696177LL,  0xE600000000000000LL,  sub_2B130,  v31,  *(void *)(v0 + 144));
  }

  else
  {
    uint64_t v2 = v0 + 16;
    uint64_t v3 = v0 + 120;
    sub_122D8(v0 + 56, v0 + 16, &qword_769F8);
    if (qword_76BC0 != -1) {
      swift_once(&qword_76BC0, sub_22AF4);
    }
    uint64_t v4 = *(void *)(v0 + 152);
    uint64_t v5 = type metadata accessor for Logger(0LL);
    sub_6298(v5, (uint64_t)qword_76D38);
    uint64_t v6 = swift_retain_n(v4, 2LL);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = *(void *)(v0 + 192);
      uint64_t v39 = *(void *)(v0 + 184);
      uint64_t v10 = *(void *)(v0 + 176);
      uint64_t v11 = *(void *)(v0 + 152);
      uint64_t v38 = v11;
      uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v40 = swift_slowAlloc(32LL, -1LL);
      uint64_t v41 = v40;
      *(_DWORD *)uint64_t v12 = 136315138;
      uint64_t v13 = (void *)(v11
                     + OBJC_IVAR____TtCC7CoreRCS22RCSOperationControllerP33_1B0F715D17C82627C67D971FB94137349Operation_id);
      uint64_t v14 = *(void *)(v11
                      + OBJC_IVAR____TtCC7CoreRCS22RCSOperationControllerP33_1B0F715D17C82627C67D971FB94137349Operation_id
                      + 24);
      uint64_t v15 = v13[4];
      sub_CA38(v13, v14);
      (*(void (**)(uint64_t, uint64_t))(v15 + 16))(v14, v15);
      uint64_t v16 = sub_219FC( (unint64_t *)&qword_765C8,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v10, v16);
      uint64_t v19 = v18;
      uint64_t v20 = v9;
      uint64_t v2 = v0 + 16;
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v20, v10);
      *(void *)(v0 + 128) = sub_B004(v17, (unint64_t)v19, &v41);
      uint64_t v3 = v0 + 120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136);
      swift_release_n(v38, 2LL);
      swift_bridgeObjectRelease(v19, v21, v22, v23, v24, v25, v26, v27);
      _os_log_impl(&dword_0, v7, v8, "Fulfilling operation %s with already-received result", v12, 0xCu);
      swift_arrayDestroy(v40, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    else
    {
      uint64_t v34 = *(void *)(v0 + 152);

      swift_release_n(v34, 2LL);
    }

    id v35 = *(void **)(v0 + 160);
    uint64_t v36 = *(void *)(v0 + 136);
    sub_251F4(v2, *(void *)(v0 + 144), *(uint64_t **)(v0 + 168));
    sub_25370(v35, v3, v36);
    sub_1231C(v2, &qword_769F8);
    uint64_t v37 = *(void *)(v0 + 168);
    swift_task_dealloc(*(void *)(v0 + 192));
    swift_task_dealloc(v37);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_25120()
{
  uint64_t v2 = *(void *)(*v1 + 208);
  uint64_t v3 = *v1;
  *(void *)(v3 + 2sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_251AC, *(void *)(v3 + 152), 0LL);
  }
  swift_task_dealloc(*(void *)(v3 + 200));
  uint64_t v5 = *(void *)(v3 + 168);
  swift_task_dealloc(*(void *)(v3 + 192));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_251AC()
{
  uint64_t v1 = *(void *)(v0 + 168);
  swift_task_dealloc(*(void *)(v0 + 192));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_251F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = __chkstk_darwin(a1);
  os_log_type_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_21AAC(v6, (uint64_t)v20, &qword_769F8);
  if ((v21 & 1) != 0)
  {
    *a3 = *(void *)&v20[0];
  }

  else
  {
    if (swift_dynamicCast(v8, v20, (char *)&type metadata for Any + 8, a2, 0LL))
    {
      (*(void (**)(uint64_t *, char *, uint64_t))(v5 + 32))(a3, v8, a2);
      uint64_t v9 = sub_1C3B4(&qword_76560);
      uint64_t v10 = type metadata accessor for Result(0LL, a2, v9, &protocol self-conformance witness table for Error);
      swift_storeEnumTagMultiPayload(a3, v10, 0LL);
      return sub_12204(v20);
    }

    sub_121F4(v20, v19);
    unint64_t v12 = sub_2A310();
    uint64_t v13 = swift_allocError(&type metadata for RCSOperationController.OperationError, v12, 0LL, 0LL);
    uint64_t v15 = v14;
    sub_12224((uint64_t)v19, v14);
    *(void *)(v15 + 32) = a2;
    *(_BYTE *)(v15 + 56) = 1;
    sub_12204(v19);
    *a3 = v13;
  }

  uint64_t v16 = sub_1C3B4(&qword_76560);
  uint64_t v17 = type metadata accessor for Result(0LL, a2, v16, &protocol self-conformance witness table for Error);
  return swift_storeEnumTagMultiPayload(a3, v17, 1LL);
}

uint64_t sub_25370@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = a1[3];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(a2, v3, v7);
  return swift_willThrowTypedImpl(a2, v7, a1[4]);
}

uint64_t sub_25404(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_5C28(&qword_77048);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8], a1, v4);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (v7 + 16) & ~v7;
  uint64_t v9 = swift_allocObject(&unk_72250, v8 + v6, v7 | 7);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v5 + 32))( v9 + v8,  &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8],  v4);
  uint64_t v10 = (RCSServiceSession **)(a2 + 152);
  swift_beginAccess(a2 + 152, v22, 33LL, 0LL);
  uint64_t v11 = *(RCSServiceSession **)(a2 + 152);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
  *(void *)(a2 + 152) = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v11 = sub_47020(0LL, *(void *)v11[1].IMDTelephonyServiceSession_opaque + 1LL, 1, v11, v13, v14, v15, v16);
    *uint64_t v10 = v11;
  }

  unint64_t v18 = *(void *)v11[1].IMDTelephonyServiceSession_opaque;
  unint64_t v17 = *(void *)v11[1].state;
  if (v18 >= v17 >> 1)
  {
    uint64_t v11 = sub_47020((RCSServiceSession *)(v17 > 1), v18 + 1, 1, v11, v13, v14, v15, v16);
    *uint64_t v10 = v11;
  }

  *(void *)v11[1].IMDTelephonyServiceSession_opaque = v18 + 1;
  uint64_t v19 = &v11[v18];
  *(void *)v19[2].IMDTelephonyServiceSession_opaque = sub_2B0E0;
  *(void *)v19[2].state = v9;
  return swift_endAccess(v22);
}

uint64_t sub_2556C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C3B4(&qword_76560);
  uint64_t v7 = type metadata accessor for CheckedContinuation(0LL, a3, v6, &protocol self-conformance witness table for Error);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v11 = &v27[-v10 - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(&v27[-v10 - 8], a1, v7);
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = (v12 + 24) & ~v12;
  uint64_t v14 = swift_allocObject(&unk_72278, v13 + v9, v12 | 7);
  *(void *)(v14 + sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = a3;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v8 + 32))(v14 + v13, v11, v7);
  uint64_t v15 = (RCSServiceSession **)(a2 + 152);
  swift_beginAccess(a2 + 152, v27, 33LL, 0LL);
  unsigned __int8 v16 = *(RCSServiceSession **)(a2 + 152);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
  *(void *)(a2 + 152) = v16;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unsigned __int8 v16 = sub_47020(0LL, *(void *)v16[1].IMDTelephonyServiceSession_opaque + 1LL, 1, v16, v18, v19, v20, v21);
    void *v15 = v16;
  }

  unint64_t v23 = *(void *)v16[1].IMDTelephonyServiceSession_opaque;
  unint64_t v22 = *(void *)v16[1].state;
  if (v23 >= v22 >> 1)
  {
    unsigned __int8 v16 = sub_47020((RCSServiceSession *)(v22 > 1), v23 + 1, 1, v16, v18, v19, v20, v21);
    void *v15 = v16;
  }

  *(void *)v16[1].IMDTelephonyServiceSession_opaque = v23 + 1;
  id v24 = &v16[v23];
  *(void *)v24[2].IMDTelephonyServiceSession_opaque = sub_2B1B8;
  *(void *)v24[2].state = v14;
  return swift_endAccess(v27);
}

uint64_t sub_256F4(uint64_t a1)
{
  if ((v6 & 1) != 0)
  {
    v7[0] = *(void *)&v5[0];
    char v8 = 1;
  }

  else
  {
    sub_12224((uint64_t)v5, (uint64_t)v7);
    char v8 = 0;
    sub_12204(v5);
  }

  sub_21AAC((uint64_t)v7, (uint64_t)v5, &qword_769F8);
  if ((v6 & 1) != 0)
  {
    *(void *)&v4[0] = *(void *)&v5[0];
    uint64_t v1 = sub_5C28(&qword_77048);
    CheckedContinuation.resume(throwing:)(v4, v1);
  }

  else
  {
    sub_121F4(v5, v4);
    uint64_t v2 = sub_5C28(&qword_77048);
    CheckedContinuation.resume(returning:)(v4, v2);
  }

  return sub_1231C((uint64_t)v7, &qword_769F8);
}

uint64_t sub_257D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1C3B4(&qword_76560);
  uint64_t v6 = type metadata accessor for Result(0LL, a3, v5, &protocol self-conformance witness table for Error);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v12 - v8;
  sub_251F4(a1, a3, (uint64_t *)((char *)&v12 - v8));
  uint64_t v10 = type metadata accessor for CheckedContinuation(0LL, a3, v5, &protocol self-conformance witness table for Error);
  sub_258A8((uint64_t)v9, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_258A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(a1);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(v9 + 24);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v6);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Result(0LL, v4, v10, *(void *)(v14 + 32));
  __chkstk_darwin(v15);
  unint64_t v17 = (char *)&v20 - v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v20 - v16, a1, v15);
  if (swift_getEnumCaseMultiPayload(v17, v15) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v17, v10);
    return CheckedContinuation.resume(throwing:)(v13, a2);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v17, v4);
    return CheckedContinuation.resume(returning:)(v8, a2);
  }

uint64_t sub_25A08()
{
  uint64_t v8 = v0 + OBJC_IVAR____TtCC7CoreRCS22RCSOperationControllerP33_1B0F715D17C82627C67D971FB94137349Operation_creationDate;
  uint64_t v9 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  sub_12204((void *)(v0
                     + OBJC_IVAR____TtCC7CoreRCS22RCSOperationControllerP33_1B0F715D17C82627C67D971FB94137349Operation_id));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t RCSActor.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_25A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Date.advanced(by:)(v9, *(double *)(a5 + 120));
  LOBYTE(a5) = static Date.> infix(_:_:)(a4, v11);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return a5 & 1;
}

uint64_t RCSOperationController.Configuration.init(maxOperationDuration:operationExpirationWatchdogInterval:untrackedFulfillmentHandler:verifiesUniqueOperationIDs:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  *(double *)a4 = a5;
  *(double *)(a4 + 8) = a6;
  *(void *)(a4 + sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = result;
  *(void *)(a4 + 24) = a2;
  *(_BYTE *)(a4 + 32) = a3;
  return result;
}

double RCSOperationController.Configuration.maxOperationDuration.getter()
{
  return *(double *)v0;
}

void RCSOperationController.Configuration.maxOperationDuration.setter(double a1)
{
  *SEL v1 = a1;
}

uint64_t (*RCSOperationController.Configuration.maxOperationDuration.modify())()
{
  return nullsub_1;
}

double RCSOperationController.Configuration.operationExpirationWatchdogInterval.getter()
{
  return *(double *)(v0 + 8);
}

void RCSOperationController.Configuration.operationExpirationWatchdogInterval.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*RCSOperationController.Configuration.operationExpirationWatchdogInterval.modify())()
{
  return nullsub_2;
}

uint64_t RCSOperationController.Configuration.untrackedFulfillmentHandler.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_25BBC(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t sub_25BBC(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_retain(a2);
  }
  return result;
}

uint64_t RCSOperationController.Configuration.untrackedFulfillmentHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1CC98(*(void *)(v2 + 16), *(void *)(v2 + 24));
  *(void *)(v2 + sub_1D3DC(*(void *)(v0 + 120), v0 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*RCSOperationController.Configuration.untrackedFulfillmentHandler.modify())()
{
  return nullsub_3;
}

uint64_t RCSOperationController.Configuration.verifiesUniqueOperationIDs.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t RCSOperationController.Configuration.verifiesUniqueOperationIDs.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 32) = result;
  return result;
}

uint64_t (*RCSOperationController.Configuration.verifiesUniqueOperationIDs.modify())()
{
  return nullsub_4;
}

uint64_t RCSOperationController.__allocating_init(configuration:)(uint64_t a1)
{
  uint64_t v3 = swift_allocObject(v1, 184LL, 15LL);
  RCSOperationController.init(configuration:)(a1);
  return v3;
}

uint64_t RCSOperationController.init(configuration:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for TaskPriority(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v23[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v8 = sub_5C28(&qword_76BE8);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v12 = sub_5C28(&qword_765B0);
  __chkstk_darwin(v12);
  uint64_t v14 = &v23[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_defaultActor_initialize(v2);
  type metadata accessor for AsyncMultiQueue(0LL);
  ((void (*)(void))static TaskPriority.userInitiated.getter)();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v14, 0LL, 1LL, v4);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))( v11,  enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:),  v8);
  *(void *)(v2 + 112) = AsyncMultiQueue.__allocating_init(priority:bufferingPolicy:)(v14, v11);
  *(void *)(v2 + 160) = sub_20B08((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v2 + 168) = sub_124D0((uint64_t)_swiftEmptyArrayStorage);
  __int128 v15 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 120) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 136) = v15;
  *(_BYTE *)(v2 + 152) = *(_BYTE *)(a1 + 32);
  uint64_t v16 = swift_allocObject(&unk_71FA8, 24LL, 7LL);
  swift_weakInit(v16 + 16, 0LL);
  uint64_t v17 = sub_25BBC(*(void *)(a1 + 16), *(void *)(a1 + 24));
  static TaskPriority.userInitiated.getter(v17);
  double v18 = *(double *)(a1 + 8);
  uint64_t v19 = type metadata accessor for AsyncPersistentTimer(0LL);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  swift_retain(v16);
  uint64_t v20 = sub_4DD74((uint64_t)v7, (uint64_t)&unk_76D60, v16, v18);
  swift_release(v16);
  sub_1CC6C(a1);
  *(void *)(v2 + 176) = v20;
  swift_beginAccess(v16 + 16, v23, 1LL, 0LL);
  swift_weakAssign(v16 + 16, v2);
  swift_release(v16);
  return v2;
}

uint64_t sub_25EC0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_25EE4(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return swift_task_switch(sub_25EFC, 0LL, 0LL);
}

uint64_t sub_25EFC()
{
  uint64_t v1 = *(void *)(v0 + 40) + 16LL;
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  *(void *)(v0 + 48) = Strong;
  if (!Strong) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  uint64_t v3 = (void *)swift_task_alloc(dword_76DDC);
  *(void *)(v0 + 56) = v3;
  void *v3 = v0;
  v3[1] = sub_25F84;
  return sub_26078();
}

uint64_t sub_25F84()
{
  uint64_t v1 = *(void *)(*v0 + 48);
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 56));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_25FD4()
{
  uint64_t v2 = (void *)swift_task_alloc(dword_76D5C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_26030;
  v2[5] = v0;
  return swift_task_switch(sub_25EFC, 0LL, 0LL);
}

uint64_t sub_26030()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_26078()
{
  v1[13] = v0;
  uint64_t v2 = type metadata accessor for Date(0LL);
  v1[14] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[15] = v3;
  v1[16] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_260D8, v0, 0LL);
}

uint64_t sub_260D8(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(v1 + 104);
  uint64_t v3 = *(void *)(v1 + 104);
  uint64_t v5 = *(void *)(v1 + 120);
  uint64_t v4 = *(void *)(v1 + 128);
  uint64_t v6 = *(void *)(v1 + 112);
  static Date.now.getter(a1);
  swift_beginAccess(v3 + 160, v1 + 16, 0LL, 0LL);
  uint64_t v7 = *(RCSServiceSession **)(v3 + 160);
  uint64_t v8 = swift_task_alloc(32LL);
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = v4;
  *(void *)(v8 + 24) = v3;
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_2ABCC(v9, (uint64_t (*)(uint64_t, RCSServiceSession *, uint64_t))sub_2A9C8, v8);
  swift_bridgeObjectRelease(v7, v11, v12, v13, v14, v15, v16, v17);
  swift_task_dealloc(v8);
  double v18 = sub_3503C(v10);
  *(void *)(v1 + 136) = v18;
  swift_release(v10);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  *(void *)(v1 + 144) = v19;
  v19(v4, v6);
  uint64_t v20 = v18[2];
  *(void *)(v1 + 152) = v20;
  if (v20)
  {
    uint64_t v21 = 0LL;
    unint64_t v22 = (uint64_t *)(v1 + 64);
    uint64_t v91 = (void *)(v1 + 72);
    uint64_t v92 = (uint64_t *)(v1 + 80);
    uint64_t v93 = (double *)(v1 + 88);
    while (1)
    {
      *(void *)(v1 + 160) = v21;
      uint64_t v23 = *(void *)(v1 + 104);
      uint64_t v24 = *(void *)(v1 + 136) + 16 * v21;
      uint64_t v26 = *(void *)(v24 + 32);
      id v25 = *(RCSServiceSession **)(v24 + 40);
      swift_beginAccess(v23 + 160, v1 + 40, 33LL, 0LL);
      unsigned __int8 v27 = *(RCSServiceSession **)(v23 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v28 = sub_14490(v26, (uint64_t)v25);
      char v30 = (char)v29;
      swift_bridgeObjectRelease(v27, v29, v31, v32, v33, v34, v35, v36);
      if ((v30 & 1) != 0) {
        break;
      }
      swift_endAccess(v1 + 40);
      swift_bridgeObjectRelease(v25, v37, v38, v39, v40, v41, v42, v43);
      uint64_t v21 = *(void *)(v1 + 160) + 1LL;
      if (v21 == *(void *)(v1 + 152)) {
        goto LABEL_5;
      }
    }

    uint64_t v86 = (void *)(v1 + 96);
    uint64_t v46 = *v2;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*v2 + 160));
    uint64_t v55 = *(void *)(v46 + 160);
    *unint64_t v22 = v55;
    *(void *)(v46 + 160) = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_504F0();
      uint64_t v55 = *v22;
    }

    uint64_t v56 = *(void *)(v1 + 128);
    uint64_t v57 = *(void *)(v1 + 104);
    uint64_t v87 = *(void *)(v1 + 112);
    uint64_t v89 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 144);
    swift_bridgeObjectRelease( *(RCSServiceSession **)(*(void *)(v55 + 48) + 16 * v28 + 8),  v48,  v49,  v50,  v51,  v52,  v53,  v54);
    uint64_t v58 = *(void *)(*(void *)(v55 + 56) + 8 * v28);
    *(void *)(v1 + 168) = v58;
    sub_5A2DC(v28, v55);
    uint64_t v59 = *(RCSServiceSession **)(v57 + 160);
    *(void *)(v57 + 160) = v55;
    swift_bridgeObjectRelease(v59, v60, v61, v62, v63, v64, v65, v66);
    uint64_t v67 = swift_endAccess(v1 + 40);
    uint64_t v68 = static Date.now.getter(v67);
    double v69 = Date.timeIntervalSince1970.getter(v68);
    uint64_t v70 = v89(v56, v87);
    uint64_t v90 = v58;
    double v71 = Date.timeIntervalSince1970.getter(v70);
    if (qword_76BC0 != -1) {
      swift_once(&qword_76BC0, sub_22AF4);
    }
    double v72 = v69 - v71;
    uint64_t v73 = *v2;
    uint64_t v74 = type metadata accessor for Logger(0LL);
    sub_6298(v74, (uint64_t)qword_76D38);
    swift_retain_n(v73, 2LL);
    uint64_t v75 = swift_bridgeObjectRetain();
    uint64_t v76 = (os_log_s *)Logger.logObject.getter(v75);
    os_log_type_t v77 = static os_log_type_t.default.getter();
    BOOL v78 = os_log_type_enabled(v76, v77);
    uint64_t v79 = *v2;
    if (v78)
    {
      uint64_t v80 = swift_slowAlloc(42LL, -1LL);
      uint64_t v88 = swift_slowAlloc(32LL, -1LL);
      uint64_t v94 = v88;
      *(_DWORD *)uint64_t v80 = 141558787;
      *uint64_t v91 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v91, v92);
      *(_WORD *)(v80 + 12) = 2081;
      swift_bridgeObjectRetain();
      *uint64_t v92 = sub_B004(v26, (unint64_t)v25, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v92, v93);
      swift_bridgeObjectRelease_n(v25, 3LL);
      *(_WORD *)(v80 + 22) = 2048;
      *uint64_t v93 = v72;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v93, v86);
      *(_WORD *)(v80 + 32) = 2048;
      *uint64_t v86 = *(void *)(v79 + 120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v86, v1 + 104);
      swift_release_n(v79, 2LL);
      _os_log_impl( &dword_0,  v76,  v77,  "Terminating operation with ID %{private,mask.hash}s - took %f seconds, allowed %f seconds",  (uint8_t *)v80,  0x2Au);
      swift_arrayDestroy(v88, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v88, -1LL, -1LL);
      swift_slowDealloc(v80, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v79, 2LL);
      swift_bridgeObjectRelease_n(v25, 2LL);
    }

    uint64_t v81 = *(void *)(v1 + 104);
    unint64_t v82 = sub_2A310();
    uint64_t v83 = swift_allocError(&type metadata for RCSOperationController.OperationError, v82, 0LL, 0LL);
    uint64_t v85 = v84;
    *(void *)(v1 + 176) = v83;
    *(void *)uint64_t v84 = *(void *)(v81 + 120);
    *(double *)(v84 + 8) = v72;
    sub_2AF74( v90 + OBJC_IVAR____TtCC7CoreRCS22RCSOperationControllerP33_1B0F715D17C82627C67D971FB94137349Operation_id,  v84 + 16);
    *(_BYTE *)(v85 + 56) = 0;
    return swift_task_switch(sub_265B0, v90, 0LL);
  }

  else
  {
LABEL_5:
    uint64_t v44 = *(void *)(v1 + 128);
    swift_release(*(void *)(v1 + 136));
    swift_task_dealloc(v44);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

uint64_t sub_265B0()
{
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 104);
  sub_22E7C(v1, 1);
  swift_errorRelease(v1);
  return swift_task_switch(sub_26608, v2, 0LL);
}

uint64_t sub_26608()
{
  uint64_t v1 = *(void *)(v0 + 160) + 1LL;
  if (v1 == *(void *)(v0 + 152))
  {
LABEL_5:
    uint64_t v25 = *(void *)(v0 + 128);
    swift_release(*(void *)(v0 + 136));
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v2 = (uint64_t *)(v0 + 64);
    uint64_t v74 = (void *)(v0 + 72);
    uint64_t v75 = (uint64_t *)(v0 + 80);
    uint64_t v76 = (double *)(v0 + 88);
    uint64_t v3 = (uint64_t *)(v0 + 104);
    while (1)
    {
      *(void *)(v0 + 160) = v1;
      uint64_t v4 = *(void *)(v0 + 104);
      uint64_t v5 = *(void *)(v0 + 136) + 16 * v1;
      uint64_t v7 = *(void *)(v5 + 32);
      uint64_t v6 = *(RCSServiceSession **)(v5 + 40);
      swift_beginAccess(v4 + 160, v0 + 40, 33LL, 0LL);
      uint64_t v8 = *(RCSServiceSession **)(v4 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v9 = sub_14490(v7, (uint64_t)v6);
      char v11 = (char)v10;
      swift_bridgeObjectRelease(v8, v10, v12, v13, v14, v15, v16, v17);
      if ((v11 & 1) != 0) {
        break;
      }
      swift_endAccess(v0 + 40);
      swift_bridgeObjectRelease(v6, v18, v19, v20, v21, v22, v23, v24);
      uint64_t v1 = *(void *)(v0 + 160) + 1LL;
      if (v1 == *(void *)(v0 + 152)) {
        goto LABEL_5;
      }
    }

    double v71 = (void *)(v0 + 96);
    uint64_t v73 = (uint64_t *)(v0 + 104);
    uint64_t v27 = *v3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(*v3 + 160));
    uint64_t v36 = *(void *)(v27 + 160);
    *uint64_t v2 = v36;
    *(void *)(v27 + 160) = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_504F0();
      uint64_t v36 = *v2;
    }

    double v72 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 144);
    uint64_t v37 = *(void *)(v0 + 128);
    uint64_t v38 = *(void *)(v0 + 104);
    uint64_t v39 = *(void *)(v0 + 112);
    swift_bridgeObjectRelease( *(RCSServiceSession **)(*(void *)(v36 + 48) + 16 * v9 + 8),  v29,  v30,  v31,  v32,  v33,  v34,  v35);
    uint64_t v40 = *(void *)(*(void *)(v36 + 56) + 8 * v9);
    *(void *)(v0 + 168) = v40;
    sub_5A2DC(v9, v36);
    id v41 = *(RCSServiceSession **)(v38 + 160);
    *(void *)(v38 + 160) = v36;
    swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
    uint64_t v49 = swift_endAccess(v0 + 40);
    uint64_t v50 = static Date.now.getter(v49);
    double v51 = Date.timeIntervalSince1970.getter(v50);
    uint64_t v52 = v72(v37, v39);
    double v53 = Date.timeIntervalSince1970.getter(v52);
    if (qword_76BC0 != -1)
    {
      double v70 = v53;
      swift_once(&qword_76BC0, sub_22AF4);
      double v53 = v70;
    }

    double v54 = v51 - v53;
    uint64_t v55 = *v73;
    uint64_t v56 = type metadata accessor for Logger(0LL);
    sub_6298(v56, (uint64_t)qword_76D38);
    swift_retain_n(v55, 2LL);
    uint64_t v57 = swift_bridgeObjectRetain();
    uint64_t v58 = (os_log_s *)Logger.logObject.getter(v57);
    os_log_type_t v59 = static os_log_type_t.default.getter();
    BOOL v60 = os_log_type_enabled(v58, v59);
    uint64_t v61 = *v73;
    if (v60)
    {
      os_log_type_t type = v59;
      uint64_t v62 = swift_slowAlloc(42LL, -1LL);
      uint64_t v69 = swift_slowAlloc(32LL, -1LL);
      uint64_t v77 = v69;
      *(_DWORD *)uint64_t v62 = 141558787;
      *uint64_t v74 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v74, v75);
      *(_WORD *)(v62 + 12) = 2081;
      swift_bridgeObjectRetain();
      uint64_t *v75 = sub_B004(v7, (unint64_t)v6, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v75, v76);
      swift_bridgeObjectRelease_n(v6, 3LL);
      *(_WORD *)(v62 + 22) = 2048;
      *uint64_t v76 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v76, v71);
      *(_WORD *)(v62 + 32) = 2048;
      *double v71 = *(void *)(v61 + 120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v71, v73);
      swift_release_n(v61, 2LL);
      _os_log_impl( &dword_0,  v58,  type,  "Terminating operation with ID %{private,mask.hash}s - took %f seconds, allowed %f seconds",  (uint8_t *)v62,  0x2Au);
      swift_arrayDestroy(v69, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v69, -1LL, -1LL);
      swift_slowDealloc(v62, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v61, 2LL);
      swift_bridgeObjectRelease_n(v6, 2LL);
    }

    uint64_t v63 = *(void *)(v0 + 104);
    unint64_t v64 = sub_2A310();
    uint64_t v65 = swift_allocError(&type metadata for RCSOperationController.OperationError, v64, 0LL, 0LL);
    uint64_t v67 = v66;
    *(void *)(v0 + 176) = v65;
    *(void *)uint64_t v66 = *(void *)(v63 + 120);
    *(double *)(v66 + 8) = v54;
    sub_2AF74( v40 + OBJC_IVAR____TtCC7CoreRCS22RCSOperationControllerP33_1B0F715D17C82627C67D971FB94137349Operation_id,  v66 + 16);
    *(_BYTE *)(v67 + 56) = 0;
    return swift_task_switch(sub_265B0, v40, 0LL);
  }

uint64_t RCSOperationController.operation<A>(id:completedWithResult:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[18] = a4;
  v5[19] = v4;
  v5[16] = a2;
  v5[17] = a3;
  v5[15] = a1;
  return swift_task_switch(sub_26A80, v4, 0LL);
}

uint64_t sub_26A80()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 128);
  swift_beginAccess(*(void *)(v0 + 152) + 160LL, v0 + 56, 33LL, 0LL);
  uint64_t v3 = sub_29870( v1,  v2,  (void (*)(unint64_t, RCSServiceSession *))sub_5A2DC,  (void (*)(void))sub_504F0);
  *(void *)(v0 + 160) = v3;
  swift_endAccess(v0 + 56);
  if (v3)
  {
    uint64_t v4 = *(void *)(v0 + 152);
    uint64_t v5 = *(void *)(v3
                   + OBJC_IVAR____TtCC7CoreRCS22RCSOperationControllerP33_1B0F715D17C82627C67D971FB94137349Operation_id
                   + 24);
    uint64_t v6 = *(void *)(v3
                   + OBJC_IVAR____TtCC7CoreRCS22RCSOperationControllerP33_1B0F715D17C82627C67D971FB94137349Operation_id
                   + 32);
    sub_CA38( (void *)(v3 + OBJC_IVAR____TtCC7CoreRCS22RCSOperationControllerP33_1B0F715D17C82627C67D971FB94137349Operation_id),  v5);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 24))(v5, v6);
    unint64_t v9 = v8;
    swift_beginAccess(v4 + 168, v0 + 80, 33LL, 0LL);
    sub_29688(v7, (uint64_t)v9);
    char v11 = v10;
    swift_endAccess(v0 + 80);
    swift_bridgeObjectRelease(v9, v12, v13, v14, v15, v16, v17, v18);
    swift_bridgeObjectRelease(v11, v19, v20, v21, v22, v23, v24, v25);
    return swift_task_switch(sub_26E38, v3, 0LL);
  }

  else
  {
    if (qword_76BC0 != -1) {
      swift_once(&qword_76BC0, sub_22AF4);
    }
    uint64_t v27 = *(void *)(v0 + 128);
    uint64_t v28 = type metadata accessor for Logger(0LL);
    sub_6298(v28, (uint64_t)qword_76D38);
    uint64_t v29 = swift_bridgeObjectRetain_n(v27, 2LL);
    char v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.default.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    unint64_t v33 = *(void *)(v0 + 128);
    if (v32)
    {
      uint64_t v34 = *(void *)(v0 + 120);
      uint64_t v35 = swift_slowAlloc(22LL, -1LL);
      uint64_t v36 = swift_slowAlloc(32LL, -1LL);
      uint64_t v44 = v36;
      *(_DWORD *)uint64_t v35 = 141558275;
      *(void *)(v0 + 104) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112);
      *(_WORD *)(v35 + 12) = 2081;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 112) = sub_B004(v34, v33, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120);
      swift_bridgeObjectRelease_n(v33, 3LL);
      _os_log_impl( &dword_0,  v30,  v31,  "Operation completed with ID %{private,mask.hash}s but no operation with that ID is being tracked",  (uint8_t *)v35,  0x16u);
      swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1LL, -1LL);
      swift_slowDealloc(v35, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 128), 2LL);
    }

    uint64_t v37 = *(int **)(*(void *)(v0 + 152) + 136LL);
    if (v37)
    {
      uint64_t v38 = *(void *)(v0 + 144);
      uint64_t v39 = swift_task_alloc(32LL);
      *(void *)(v39 + swift_weakDestroy(v0 + 16) = v38;
      uint64_t v40 = sub_1C3B4(&qword_76560);
      id v41 = (void *)type metadata accessor for Result( 0LL,  v38,  v40,  &protocol self-conformance witness table for Error);
      sub_2435C((void (*)(char *))sub_2A24C, v41, (uint64_t)&type metadata for Any + 8, v0 + 16);
      swift_task_dealloc(v39);
      id v43 = (int *)((char *)v37 + *v37);
      SEL v42 = (void *)swift_task_alloc(v37[1]);
      *(void *)(v0 + 168) = v42;
      *SEL v42 = v0;
      v42[1] = sub_26EA8;
      return ((uint64_t (*)(void, void, uint64_t))v43)( *(void *)(v0 + 120),  *(void *)(v0 + 128),  v0 + 16);
    }

    else
    {
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }

uint64_t sub_26E38()
{
  uint64_t v1 = *(void *)(v0 + 152);
  sub_23BC0(*(void *)(v0 + 136), *(char **)(v0 + 144));
  return swift_task_switch(sub_26E78, v1, 0LL);
}

uint64_t sub_26E78()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_26EA8()
{
  uint64_t v1 = *v0 + 16;
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 168));
  sub_1231C(v1, &qword_769F8);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_26F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[59] = a4;
  v5[60] = v4;
  v5[57] = a2;
  v5[58] = a3;
  v5[56] = a1;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  v5[61] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[62] = v7;
  v5[63] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_26F6C, v4, 0LL);
}

uint64_t sub_26F6C()
{
  uint64_t v195 = v0 + 432;
  uint64_t v1 = *(void *)(v0 + 480);
  uint64_t v2 = *(void **)(v0 + 456);
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  sub_CA38(v2, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
  uint64_t v7 = v6;
  v196 = (RCSServiceSession **)(v1 + 168);
  swift_beginAccess(v1 + 168, v0 + 344, 0LL, 0LL);
  id v15 = *(RCSServiceSession **)(v1 + 168);
  if (*(void *)v15[1].IMDTelephonyServiceSession_opaque)
  {
    swift_bridgeObjectRetain();
    unint64_t v16 = sub_14490(v5, (uint64_t)v7);
    if ((v17 & 1) != 0)
    {
      uint64_t v24 = *(void *)(v0 + 480);
      unsigned __int8 v25 = (uint64_t *)(*(void *)v15[3].state + 16 * v16);
      uint64_t v27 = *v25;
      uint64_t v26 = (RCSServiceSession *)v25[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease(v7, v28, v29, v30, v31, v32, v33, v34);
      swift_bridgeObjectRelease(v15, v35, v36, v37, v38, v39, v40, v41);
      swift_beginAccess(v24 + 160, v0 + 320, 0LL, 0LL);
      SEL v42 = *(RCSServiceSession **)(v24 + 160);
      if (*(void *)v42[1].IMDTelephonyServiceSession_opaque)
      {
        swift_bridgeObjectRetain();
        unint64_t v43 = sub_14490(v27, (uint64_t)v26);
        if ((v44 & 1) != 0)
        {
          uint64_t v51 = *(void *)(*(void *)v42[3].state + 8 * v43);
          swift_retain(v51);
          swift_bridgeObjectRelease(v26, v52, v53, v54, v55, v56, v57, v58);
          swift_bridgeObjectRelease(v42, v59, v60, v61, v62, v63, v64, v65);
          sub_2AF74( v51 + OBJC_IVAR____TtCC7CoreRCS22RCSOperationControllerP33_1B0F715D17C82627C67D971FB94137349Operation_id,  v0 + 56);
          swift_release(v51);
          sub_22168((__int128 *)(v0 + 56), v0 + 96);
          sub_22168((__int128 *)(v0 + 96), v0 + 16);
          goto LABEL_11;
        }

        swift_bridgeObjectRelease(v42, v44, v45, v46, v47, v48, v49, v50);
      }

      uint64_t v66 = v26;
    }

    else
    {
      swift_bridgeObjectRelease(v7, v17, v18, v19, v20, v21, v22, v23);
      uint64_t v66 = v15;
    }
  }

  else
  {
    uint64_t v66 = v7;
  }

  swift_bridgeObjectRelease(v66, v8, v9, v10, v11, v12, v13, v14);
  sub_2AF74(*(void *)(v0 + 456), v0 + 16);
LABEL_11:
  uint64_t v68 = *(void *)(v0 + 496);
  uint64_t v67 = *(void *)(v0 + 504);
  uint64_t v70 = *(void *)(v0 + 480);
  uint64_t v69 = *(void *)(v0 + 488);
  uint64_t v71 = *(void *)(v0 + 40);
  uint64_t v72 = *(void *)(v0 + 48);
  sub_CA38((void *)(v0 + 16), v71);
  uint64_t v73 = (*(uint64_t (**)(uint64_t, uint64_t))(v72 + 16))(v71, v72);
  uint64_t v197 = UUID.uuidString.getter(v73);
  uint64_t v75 = v74;
  *(void *)(v0 + 512) = v74;
  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v69);
  uint64_t v76 = (RCSServiceSession **)(v70 + 160);
  swift_beginAccess(v70 + 160, v0 + 392, 0LL, 0LL);
  uint64_t v77 = *(RCSServiceSession **)(v70 + 160);
  if (*(void *)v77[1].IMDTelephonyServiceSession_opaque)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v78 = sub_14490(v197, (uint64_t)v75);
    if ((v79 & 1) != 0)
    {
      uint64_t v86 = *(void *)(*(void *)v77[3].state + 8 * v78);
      swift_retain(v86);
      swift_bridgeObjectRelease_n(v75, 2LL);
      swift_bridgeObjectRelease(v77, v87, v88, v89, v90, v91, v92, v93);
      if (qword_76BC0 != -1) {
        swift_once(&qword_76BC0, sub_22AF4);
      }
      uint64_t v94 = type metadata accessor for Logger(0LL);
      sub_6298(v94, (uint64_t)qword_76D38);
      uint64_t v95 = sub_2AF74(v0 + 16, v0 + 176);
      uint64_t v96 = (os_log_s *)Logger.logObject.getter(v95);
      os_log_type_t v97 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v96, v97))
      {
        uint64_t v98 = swift_slowAlloc(22LL, -1LL);
        uint64_t v99 = swift_slowAlloc(32LL, -1LL);
        v199 = (RCSServiceSession *)v99;
        *(_DWORD *)uint64_t v98 = 141558275;
        *(void *)(v0 + 424) = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 424, v195);
        *(_WORD *)(v98 + 12) = 2081;
        uint64_t v101 = *(void *)(v0 + 200);
        uint64_t v100 = *(void *)(v0 + 208);
        sub_CA38((void *)(v0 + 176), v101);
        uint64_t v102 = dispatch thunk of CustomStringConvertible.description.getter(v101, *(void *)(v100 + 8));
        uint64_t v104 = (RCSServiceSession *)v103;
        *(void *)(v0 + 4swift_weakDestroy(v0 + 16) = sub_B004(v102, v103, (uint64_t *)&v199);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 416, v0 + 424);
        swift_bridgeObjectRelease(v104, v105, v106, v107, v108, v109, v110, v111);
        sub_12204((void *)(v0 + 176));
        _os_log_impl( &dword_0,  v96,  v97,  "Existing operation found for ID %{private,mask.hash}s, waiting for existing operation",  (uint8_t *)v98,  0x16u);
        swift_arrayDestroy(v99, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v99, -1LL, -1LL);
        swift_slowDealloc(v98, -1LL, -1LL);
      }

      else
      {
        sub_12204((void *)(v0 + 176));
      }

      *(void *)(v0 + 560) = v86;
      uint64_t v190 = (void *)swift_task_alloc(dword_77034);
      *(void *)(v0 + 568) = v190;
      *uint64_t v190 = v0;
      v190[1] = sub_27934;
      return sub_24770(*(void *)(v0 + 448));
    }

    swift_bridgeObjectRelease(v75, v79, v80, v81, v82, v83, v84, v85);
    swift_bridgeObjectRelease(v77, v112, v113, v114, v115, v116, v117, v118);
  }

  uint64_t v192 = (__int128 *)(v0 + 216);
  uint64_t v193 = v0 + 296;
  uint64_t v119 = v0 + 368;
  if (qword_76BC0 != -1) {
    swift_once(&qword_76BC0, sub_22AF4);
  }
  uint64_t v120 = type metadata accessor for Logger(0LL);
  sub_6298(v120, (uint64_t)qword_76D38);
  uint64_t v194 = (void *)(v0 + 16);
  uint64_t v121 = sub_2AF74(v0 + 16, v0 + 136);
  uint64_t v122 = (os_log_s *)Logger.logObject.getter(v121);
  os_log_type_t v123 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v122, v123))
  {
    uint64_t v124 = swift_slowAlloc(22LL, -1LL);
    uint64_t v191 = swift_slowAlloc(32LL, -1LL);
    v199 = (RCSServiceSession *)v191;
    *(_DWORD *)uint64_t v124 = 141558275;
    *(void *)(v0 + 440) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 440, v0 + 448);
    *(_WORD *)(v124 + 12) = 2081;
    uint64_t v125 = *(void *)(v0 + 160);
    uint64_t v126 = *(void *)(v0 + 168);
    sub_CA38((void *)(v0 + 136), v125);
    uint64_t v127 = dispatch thunk of CustomStringConvertible.description.getter(v125, *(void *)(v126 + 8));
    uint64_t v129 = (RCSServiceSession *)v128;
    *(void *)(v0 + 432) = sub_B004(v127, v128, (uint64_t *)&v199);
    uint64_t v119 = v0 + 368;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v195, v0 + 440);
    swift_bridgeObjectRelease(v129, v130, v131, v132, v133, v134, v135, v136);
    sub_12204((void *)(v0 + 136));
    _os_log_impl(&dword_0, v122, v123, "Creating a new operation with ID %{private,mask.hash}s", (uint8_t *)v124, 0x16u);
    swift_arrayDestroy(v191, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v191, -1LL, -1LL);
    swift_slowDealloc(v124, -1LL, -1LL);
  }

  else
  {
    sub_12204((void *)(v0 + 136));
  }

  uint64_t v137 = *(void *)(v0 + 40);
  uint64_t v138 = *(void *)(v0 + 48);
  sub_CA38(v194, v137);
  uint64_t v139 = (*(uint64_t (**)(uint64_t, uint64_t))(v138 + 24))(v137, v138);
  uint64_t v141 = v140;
  swift_beginAccess(v196, v119, 33LL, 0LL);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v196);
  v199 = *v196;
  void *v196 = (RCSServiceSession *)0x8000000000000000LL;
  sub_15150(v197, (uint64_t)v75, v139, (uint64_t)v141, isUniquelyReferenced_nonNull_native);
  uint64_t v143 = *v196;
  void *v196 = v199;
  swift_bridgeObjectRelease(v141, v144, v145, v146, v147, v148, v149, v150);
  swift_bridgeObjectRelease(v143, v151, v152, v153, v154, v155, v156, v157);
  swift_endAccess(v119);
  sub_2AF74((uint64_t)v194, (uint64_t)v192);
  uint64_t v158 = type metadata accessor for RCSOperationController.Operation(0LL);
  swift_allocObject(v158, *(unsigned int *)(v158 + 48), *(unsigned __int16 *)(v158 + 52));
  uint64_t v159 = sub_29F38(v192);
  *(void *)(v0 + 520) = v159;
  swift_beginAccess(v76, v193, 33LL, 0LL);
  swift_bridgeObjectRetain();
  swift_retain(v159);
  char v160 = swift_isUniquelyReferenced_nonNull_native(*v76);
  v199 = *v76;
  *uint64_t v76 = (RCSServiceSession *)0x8000000000000000LL;
  sub_29A8C(v159, v197, (uint64_t)v75, v160);
  uint64_t v161 = *v76;
  *uint64_t v76 = v199;
  swift_bridgeObjectRelease(v75, v162, v163, v164, v165, v166, v167, v168);
  swift_bridgeObjectRelease(v161, v169, v170, v171, v172, v173, v174, v175);
  swift_endAccess(v193);
  uint64_t v176 = *(void *)(v0 + 40);
  uint64_t v177 = *(void *)(v0 + 48);
  sub_CA38(v194, v176);
  uint64_t v178 = (*(uint64_t (**)(uint64_t, uint64_t))(v177 + 32))(v176, v177);
  *(void *)(v0 + 528) = v179;
  if (v179)
  {
    uint64_t v180 = v178;
    uint64_t v181 = v179;
    uint64_t v183 = *(void *)(v0 + 472);
    uint64_t v182 = *(void *)(v0 + 480);
    uint64_t v184 = *(void *)(v0 + 464);
    sub_2AF74((uint64_t)v194, v0 + 256);
    uint64_t v185 = (void *)swift_allocObject(&unk_72228, 96LL, 7LL);
    *(void *)(v0 + 536) = v185;
    sub_22168((__int128 *)(v0 + 256), (uint64_t)(v185 + 2));
    v185[7] = v184;
    v185[8] = v183;
    v185[9] = v197;
    v185[10] = v75;
    v185[11] = v182;
    uint64_t v186 = *((unsigned int *)&async function pointer to dispatch thunk of AsyncMultiQueue.perform(key:_:) + 1);
    swift_retain(v183);
    swift_retain(v182);
    uint64_t v187 = (void *)swift_task_alloc(v186);
    *(void *)(v0 + 544) = v187;
    *uint64_t v187 = v0;
    v187[1] = sub_27828;
    return ((uint64_t (*)(uint64_t, uint64_t, void *, void *))v198)(v180, v181, &unk_77038, v185);
  }

  else
  {
    __int128 v189 = (void *)swift_task_alloc(dword_76D84);
    *(void *)(v0 + 552) = v189;
    *__int128 v189 = v0;
    v189[1] = sub_278B4;
    return sub_28568( (uint64_t)v194,  *(void *)(v0 + 464),  *(void *)(v0 + 472),  v197,  (uint64_t)v75,  *(void *)(v0 + 480));
  }

uint64_t sub_27828()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (*v0)[67];
  uint64_t v3 = (RCSServiceSession *)(*v0)[66];
  uint64_t v4 = *v0;
  swift_task_dealloc((*v0)[68]);
  swift_release(v2);
  swift_bridgeObjectRelease(v3, v5, v6, v7, v8, v9, v10, v11);
  v1[70] = v1[65];
  SEL v12 = (uint64_t **)swift_task_alloc(dword_77034);
  v1[71] = (uint64_t)v12;
  *SEL v12 = v4;
  v12[1] = (uint64_t *)sub_27934;
  return sub_24770(v1[56]);
}

uint64_t sub_278B4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (RCSServiceSession *)(*v0)[64];
  uint64_t v3 = *v0;
  swift_task_dealloc((*v0)[69]);
  swift_bridgeObjectRelease(v2, v4, v5, v6, v7, v8, v9, v10);
  v1[70] = v1[65];
  unsigned __int8 v11 = (uint64_t **)swift_task_alloc(dword_77034);
  v1[71] = (uint64_t)v11;
  *unsigned __int8 v11 = v3;
  v11[1] = (uint64_t *)sub_27934;
  return sub_24770(v1[56]);
}

uint64_t sub_27934()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 568);
  *(void *)(*v1 + 576) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    SEL v4 = sub_279E4;
  }
  else {
    SEL v4 = sub_27998;
  }
  return swift_task_switch(v4, *(void *)(v2 + 480), 0LL);
}

uint64_t sub_27998()
{
  uint64_t v1 = *(void *)(v0 + 504);
  swift_release(*(void *)(v0 + 560));
  sub_12204((void *)(v0 + 16));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_279E4()
{
  uint64_t v1 = *(void *)(v0 + 504);
  swift_release(*(void *)(v0 + 560));
  sub_12204((void *)(v0 + 16));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RCSOperationController.perform<A>(operation:runTask:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[60] = a5;
  v6[61] = v5;
  v6[58] = a3;
  v6[59] = a4;
  v6[56] = a1;
  v6[57] = a2;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  v6[62] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[63] = v8;
  v6[64] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_27A98, v5, 0LL);
}

uint64_t sub_27A98()
{
  uint64_t v195 = v0 + 432;
  uint64_t v1 = *(void *)(v0 + 488);
  uint64_t v2 = *(void **)(v0 + 456);
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  sub_CA38(v2, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
  uint64_t v7 = v6;
  v196 = (RCSServiceSession **)(v1 + 168);
  swift_beginAccess(v1 + 168, v0 + 344, 0LL, 0LL);
  id v15 = *(RCSServiceSession **)(v1 + 168);
  if (*(void *)v15[1].IMDTelephonyServiceSession_opaque)
  {
    swift_bridgeObjectRetain();
    unint64_t v16 = sub_14490(v5, (uint64_t)v7);
    if ((v17 & 1) != 0)
    {
      uint64_t v24 = *(void *)(v0 + 488);
      unsigned __int8 v25 = (uint64_t *)(*(void *)v15[3].state + 16 * v16);
      uint64_t v27 = *v25;
      uint64_t v26 = (RCSServiceSession *)v25[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease(v7, v28, v29, v30, v31, v32, v33, v34);
      swift_bridgeObjectRelease(v15, v35, v36, v37, v38, v39, v40, v41);
      swift_beginAccess(v24 + 160, v0 + 320, 0LL, 0LL);
      SEL v42 = *(RCSServiceSession **)(v24 + 160);
      if (*(void *)v42[1].IMDTelephonyServiceSession_opaque)
      {
        swift_bridgeObjectRetain();
        unint64_t v43 = sub_14490(v27, (uint64_t)v26);
        if ((v44 & 1) != 0)
        {
          uint64_t v51 = *(void *)(*(void *)v42[3].state + 8 * v43);
          swift_retain(v51);
          swift_bridgeObjectRelease(v26, v52, v53, v54, v55, v56, v57, v58);
          swift_bridgeObjectRelease(v42, v59, v60, v61, v62, v63, v64, v65);
          sub_2AF74( v51 + OBJC_IVAR____TtCC7CoreRCS22RCSOperationControllerP33_1B0F715D17C82627C67D971FB94137349Operation_id,  v0 + 56);
          swift_release(v51);
          sub_22168((__int128 *)(v0 + 56), v0 + 96);
          sub_22168((__int128 *)(v0 + 96), v0 + 16);
          goto LABEL_11;
        }

        swift_bridgeObjectRelease(v42, v44, v45, v46, v47, v48, v49, v50);
      }

      uint64_t v66 = v26;
    }

    else
    {
      swift_bridgeObjectRelease(v7, v17, v18, v19, v20, v21, v22, v23);
      uint64_t v66 = v15;
    }
  }

  else
  {
    uint64_t v66 = v7;
  }

  swift_bridgeObjectRelease(v66, v8, v9, v10, v11, v12, v13, v14);
  sub_2AF74(*(void *)(v0 + 456), v0 + 16);
LABEL_11:
  uint64_t v68 = *(void *)(v0 + 504);
  uint64_t v67 = *(void *)(v0 + 512);
  uint64_t v70 = *(void *)(v0 + 488);
  uint64_t v69 = *(void *)(v0 + 496);
  uint64_t v71 = *(void *)(v0 + 40);
  uint64_t v72 = *(void *)(v0 + 48);
  sub_CA38((void *)(v0 + 16), v71);
  uint64_t v73 = (*(uint64_t (**)(uint64_t, uint64_t))(v72 + 16))(v71, v72);
  uint64_t v197 = UUID.uuidString.getter(v73);
  uint64_t v75 = v74;
  *(void *)(v0 + 520) = v74;
  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v69);
  uint64_t v76 = (RCSServiceSession **)(v70 + 160);
  swift_beginAccess(v70 + 160, v0 + 392, 0LL, 0LL);
  uint64_t v77 = *(RCSServiceSession **)(v70 + 160);
  if (*(void *)v77[1].IMDTelephonyServiceSession_opaque)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v78 = sub_14490(v197, (uint64_t)v75);
    if ((v79 & 1) != 0)
    {
      uint64_t v86 = *(void *)(*(void *)v77[3].state + 8 * v78);
      swift_retain(v86);
      swift_bridgeObjectRelease_n(v75, 2LL);
      swift_bridgeObjectRelease(v77, v87, v88, v89, v90, v91, v92, v93);
      if (qword_76BC0 != -1) {
        swift_once(&qword_76BC0, sub_22AF4);
      }
      uint64_t v94 = type metadata accessor for Logger(0LL);
      sub_6298(v94, (uint64_t)qword_76D38);
      uint64_t v95 = sub_2AF74(v0 + 16, v0 + 176);
      uint64_t v96 = (os_log_s *)Logger.logObject.getter(v95);
      os_log_type_t v97 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v96, v97))
      {
        uint64_t v98 = swift_slowAlloc(22LL, -1LL);
        uint64_t v99 = swift_slowAlloc(32LL, -1LL);
        v199 = (RCSServiceSession *)v99;
        *(_DWORD *)uint64_t v98 = 141558275;
        *(void *)(v0 + 424) = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 424, v195);
        *(_WORD *)(v98 + 12) = 2081;
        uint64_t v101 = *(void *)(v0 + 200);
        uint64_t v100 = *(void *)(v0 + 208);
        sub_CA38((void *)(v0 + 176), v101);
        uint64_t v102 = dispatch thunk of CustomStringConvertible.description.getter(v101, *(void *)(v100 + 8));
        uint64_t v104 = (RCSServiceSession *)v103;
        *(void *)(v0 + 4swift_weakDestroy(v0 + 16) = sub_B004(v102, v103, (uint64_t *)&v199);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 416, v0 + 424);
        swift_bridgeObjectRelease(v104, v105, v106, v107, v108, v109, v110, v111);
        sub_12204((void *)(v0 + 176));
        _os_log_impl( &dword_0,  v96,  v97,  "Existing operation found for ID %{private,mask.hash}s, waiting for existing operation",  (uint8_t *)v98,  0x16u);
        swift_arrayDestroy(v99, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v99, -1LL, -1LL);
        swift_slowDealloc(v98, -1LL, -1LL);
      }

      else
      {
        sub_12204((void *)(v0 + 176));
      }

      *(void *)(v0 + 568) = v86;
      uint64_t v190 = (void *)swift_task_alloc(dword_76D8C);
      *(void *)(v0 + 576) = v190;
      *uint64_t v190 = v0;
      v190[1] = sub_2846C;
      return sub_24C9C(*(void *)(v0 + 448), *(void *)(v0 + 480));
    }

    swift_bridgeObjectRelease(v75, v79, v80, v81, v82, v83, v84, v85);
    swift_bridgeObjectRelease(v77, v112, v113, v114, v115, v116, v117, v118);
  }

  uint64_t v192 = (__int128 *)(v0 + 216);
  uint64_t v193 = v0 + 296;
  uint64_t v119 = v0 + 368;
  if (qword_76BC0 != -1) {
    swift_once(&qword_76BC0, sub_22AF4);
  }
  uint64_t v120 = type metadata accessor for Logger(0LL);
  sub_6298(v120, (uint64_t)qword_76D38);
  uint64_t v194 = (void *)(v0 + 16);
  uint64_t v121 = sub_2AF74(v0 + 16, v0 + 136);
  uint64_t v122 = (os_log_s *)Logger.logObject.getter(v121);
  os_log_type_t v123 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v122, v123))
  {
    uint64_t v124 = swift_slowAlloc(22LL, -1LL);
    uint64_t v191 = swift_slowAlloc(32LL, -1LL);
    v199 = (RCSServiceSession *)v191;
    *(_DWORD *)uint64_t v124 = 141558275;
    *(void *)(v0 + 440) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 440, v0 + 448);
    *(_WORD *)(v124 + 12) = 2081;
    uint64_t v125 = *(void *)(v0 + 160);
    uint64_t v126 = *(void *)(v0 + 168);
    sub_CA38((void *)(v0 + 136), v125);
    uint64_t v127 = dispatch thunk of CustomStringConvertible.description.getter(v125, *(void *)(v126 + 8));
    uint64_t v129 = (RCSServiceSession *)v128;
    *(void *)(v0 + 432) = sub_B004(v127, v128, (uint64_t *)&v199);
    uint64_t v119 = v0 + 368;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v195, v0 + 440);
    swift_bridgeObjectRelease(v129, v130, v131, v132, v133, v134, v135, v136);
    sub_12204((void *)(v0 + 136));
    _os_log_impl(&dword_0, v122, v123, "Creating a new operation with ID %{private,mask.hash}s", (uint8_t *)v124, 0x16u);
    swift_arrayDestroy(v191, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v191, -1LL, -1LL);
    swift_slowDealloc(v124, -1LL, -1LL);
  }

  else
  {
    sub_12204((void *)(v0 + 136));
  }

  uint64_t v137 = *(void *)(v0 + 40);
  uint64_t v138 = *(void *)(v0 + 48);
  sub_CA38(v194, v137);
  uint64_t v139 = (*(uint64_t (**)(uint64_t, uint64_t))(v138 + 24))(v137, v138);
  uint64_t v141 = v140;
  swift_beginAccess(v196, v119, 33LL, 0LL);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v196);
  v199 = *v196;
  void *v196 = (RCSServiceSession *)0x8000000000000000LL;
  sub_15150(v197, (uint64_t)v75, v139, (uint64_t)v141, isUniquelyReferenced_nonNull_native);
  uint64_t v143 = *v196;
  void *v196 = v199;
  swift_bridgeObjectRelease(v141, v144, v145, v146, v147, v148, v149, v150);
  swift_bridgeObjectRelease(v143, v151, v152, v153, v154, v155, v156, v157);
  swift_endAccess(v119);
  sub_2AF74((uint64_t)v194, (uint64_t)v192);
  uint64_t v158 = type metadata accessor for RCSOperationController.Operation(0LL);
  swift_allocObject(v158, *(unsigned int *)(v158 + 48), *(unsigned __int16 *)(v158 + 52));
  uint64_t v159 = sub_29F38(v192);
  *(void *)(v0 + 528) = v159;
  swift_beginAccess(v76, v193, 33LL, 0LL);
  swift_bridgeObjectRetain();
  swift_retain(v159);
  char v160 = swift_isUniquelyReferenced_nonNull_native(*v76);
  v199 = *v76;
  *uint64_t v76 = (RCSServiceSession *)0x8000000000000000LL;
  sub_29A8C(v159, v197, (uint64_t)v75, v160);
  uint64_t v161 = *v76;
  *uint64_t v76 = v199;
  swift_bridgeObjectRelease(v75, v162, v163, v164, v165, v166, v167, v168);
  swift_bridgeObjectRelease(v161, v169, v170, v171, v172, v173, v174, v175);
  swift_endAccess(v193);
  uint64_t v176 = *(void *)(v0 + 40);
  uint64_t v177 = *(void *)(v0 + 48);
  sub_CA38(v194, v176);
  uint64_t v178 = (*(uint64_t (**)(uint64_t, uint64_t))(v177 + 32))(v176, v177);
  *(void *)(v0 + 536) = v179;
  if (v179)
  {
    uint64_t v180 = v178;
    uint64_t v181 = v179;
    uint64_t v182 = *(void *)(v0 + 488);
    uint64_t v184 = *(void *)(v0 + 464);
    uint64_t v183 = *(void *)(v0 + 472);
    sub_2AF74((uint64_t)v194, v0 + 256);
    uint64_t v185 = (void *)swift_allocObject(&unk_71FD0, 96LL, 7LL);
    *(void *)(v0 + 544) = v185;
    sub_22168((__int128 *)(v0 + 256), (uint64_t)(v185 + 2));
    v185[7] = v184;
    v185[8] = v183;
    v185[9] = v197;
    v185[10] = v75;
    v185[11] = v182;
    uint64_t v186 = *((unsigned int *)&async function pointer to dispatch thunk of AsyncMultiQueue.perform(key:_:) + 1);
    swift_retain(v183);
    swift_retain(v182);
    uint64_t v187 = (void *)swift_task_alloc(v186);
    *(void *)(v0 + 552) = v187;
    *uint64_t v187 = v0;
    v187[1] = sub_28358;
    return ((uint64_t (*)(uint64_t, uint64_t, void *, void *))v198)(v180, v181, &unk_76D90, v185);
  }

  else
  {
    __int128 v189 = (void *)swift_task_alloc(dword_76D84);
    *(void *)(v0 + 560) = v189;
    *__int128 v189 = v0;
    v189[1] = sub_283E8;
    return sub_28568( (uint64_t)v194,  *(void *)(v0 + 464),  *(void *)(v0 + 472),  v197,  (uint64_t)v75,  *(void *)(v0 + 488));
  }

uint64_t sub_28358()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (*v0)[68];
  uint64_t v3 = (RCSServiceSession *)(*v0)[67];
  uint64_t v4 = *v0;
  swift_task_dealloc((*v0)[69]);
  swift_release(v2);
  swift_bridgeObjectRelease(v3, v5, v6, v7, v8, v9, v10, v11);
  v1[71] = v1[66];
  SEL v12 = (uint64_t **)swift_task_alloc(dword_76D8C);
  v1[72] = (uint64_t)v12;
  *SEL v12 = v4;
  v12[1] = (uint64_t *)sub_2846C;
  return sub_24C9C(v1[56], v1[60]);
}

uint64_t sub_283E8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (RCSServiceSession *)(*v0)[65];
  uint64_t v3 = *v0;
  swift_task_dealloc((*v0)[70]);
  swift_bridgeObjectRelease(v2, v4, v5, v6, v7, v8, v9, v10);
  v1[71] = v1[66];
  unsigned __int8 v11 = (uint64_t **)swift_task_alloc(dword_76D8C);
  v1[72] = (uint64_t)v11;
  *unsigned __int8 v11 = v3;
  v11[1] = (uint64_t *)sub_2846C;
  return sub_24C9C(v1[56], v1[60]);
}

uint64_t sub_2846C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 576);
  *(void *)(*v1 + 584) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    SEL v4 = sub_2851C;
  }
  else {
    SEL v4 = sub_284D0;
  }
  return swift_task_switch(v4, *(void *)(v2 + 488), 0LL);
}

uint64_t sub_284D0()
{
  uint64_t v1 = *(void *)(v0 + 512);
  swift_release(*(void *)(v0 + 568));
  sub_12204((void *)(v0 + 16));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2851C()
{
  uint64_t v1 = *(void *)(v0 + 512);
  swift_release(*(void *)(v0 + 568));
  sub_12204((void *)(v0 + 16));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_28568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[13] = a5;
  v6[14] = a6;
  v6[11] = a3;
  v6[12] = a4;
  v6[9] = a1;
  v6[10] = a2;
  if (qword_76BE0 != -1) {
    swift_once(&qword_76BE0, sub_5B630);
  }
  uint64_t v7 = static RCSActor.shared;
  v6[15] = static RCSActor.shared;
  return swift_task_switch(sub_285DC, v7, 0LL);
}

uint64_t sub_285DC()
{
  if (qword_76BC0 != -1) {
    swift_once(&qword_76BC0, sub_22AF4);
  }
  uint64_t v1 = v0[9];
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_6298(v2, (uint64_t)qword_76D38);
  uint64_t v3 = sub_2AF74(v1, (uint64_t)(v0 + 2));
  SEL v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc(22LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v24 = v7;
    *(_DWORD *)uint64_t v6 = 141558275;
    v0[7] = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8);
    *(_WORD *)(v6 + 12) = 2081;
    uint64_t v9 = v0[5];
    uint64_t v8 = v0[6];
    sub_CA38(v0 + 2, v9);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter(v9, *(void *)(v8 + 8));
    SEL v12 = (RCSServiceSession *)v11;
    v0[8] = sub_B004(v10, v11, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9);
    swift_bridgeObjectRelease(v12, v13, v14, v15, v16, v17, v18, v19);
    sub_12204(v0 + 2);
    _os_log_impl( &dword_0,  v4,  v5,  "No operation with ID %{private,mask.hash}s is being tracked, starting a new one",  (uint8_t *)v6,  0x16u);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    sub_12204(v0 + 2);
  }

  id v20 = (int *)v0[10];
  unsigned __int8 v23 = (int *)((char *)v20 + *v20);
  id v21 = (void *)swift_task_alloc(v20[1]);
  v0[16] = v21;
  void *v21 = v0;
  v21[1] = sub_28800;
  return ((uint64_t (*)(void, void))v23)(v0[12], v0[13]);
}

uint64_t sub_28800()
{
  uint64_t v2 = *(void *)(*v1 + 128);
  uint64_t v3 = *v1;
  *(void *)(v3 + 136) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_2886C, *(void *)(v3 + 120), 0LL);
  }
  else {
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
}

uint64_t sub_2886C()
{
  uint64_t v1 = v0[17];
  swift_errorRetain(v1);
  SEL v4 = (char *)&dword_77BE0 + dword_77BE0;
  uint64_t v2 = (void *)swift_task_alloc(unk_77BE4);
  v0[18] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_288E8;
  return ((uint64_t (*)(void, void, uint64_t, uint64_t))v4)(v0[12], v0[13], v1, 1LL);
}

uint64_t sub_288E8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 136LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 120LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 144LL));
  swift_errorRelease(v1);
  return swift_task_switch(sub_28948, v2, 0LL);
}

uint64_t sub_28948()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RCSOperationController.perform(operation:runTask:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 48) = v3;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_76DA0 + dword_76DA0);
  uint64_t v8 = (void *)swift_task_alloc(unk_76DA4);
  *(void *)(v4 + 56) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_28A08;
  return v10(v4 + 16, a1, a2, a3);
}

uint64_t sub_28A08()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 56);
  *(void *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 48);
    os_log_type_t v5 = sub_28A88;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 48);
    sub_12204((void *)(v2 + 16));
    os_log_type_t v5 = sub_28A7C;
    uint64_t v4 = v6;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_28A7C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_28A88()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RCSOperationController.deinit()
{
  return v0;
}

uint64_t RCSOperationController.__deallocating_deinit()
{
  return swift_defaultActor_deallocate(v0);
}

unint64_t RCSOperationController.OperationID.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unsigned __int8 v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v49 = 0LL;
  unsigned __int8 v50 = (RCSServiceSession *)0xE000000000000000LL;
  _StringGuts.grow(_:)(48LL);
  swift_bridgeObjectRelease(v50, v8, v9, v10, v11, v12, v13, v14);
  unint64_t v49 = 0xD000000000000016LL;
  unsigned __int8 v50 = (RCSServiceSession *)0x8000000000065790LL;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v15 = sub_219FC( (unint64_t *)&qword_765C8,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v4, v15);
  object = (RCSServiceSession *)v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(object, v18, v19, v20, v21, v22, v23, v24);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v25._uint64_t countAndFlagsBits = 0x4965707564656420LL;
  v25._object = (void *)0xEA00000000003D44LL;
  String.append(_:)(v25);
  v26._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  uint64_t v27 = (RCSServiceSession *)v26._object;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v27, v28, v29, v30, v31, v32, v33, v34);
  v35._uint64_t countAndFlagsBits = 0x4449657565757120LL;
  v35._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v35);
  uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  if (v37)
  {
    id v38 = v37;
  }

  else
  {
    uint64_t v36 = 0x296C696E28LL;
    id v38 = (RCSServiceSession *)0xE500000000000000LL;
  }

  id v39 = v38;
  String.append(_:)(*(Swift::String *)&v36);
  swift_bridgeObjectRelease(v38, v40, v41, v42, v43, v44, v45, v46);
  v47._uint64_t countAndFlagsBits = 62LL;
  v47._object = (void *)0xE100000000000000LL;
  String.append(_:)(v47);
  return v49;
}

unint64_t sub_28CF4(unsigned __int8 a1)
{
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 1919251317LL;
    }
    else {
      uint64_t v3 = 0x6E657265666E6F63LL;
    }
    if (a1 == 1) {
      uint64_t v4 = (RCSServiceSession *)0xE400000000000000LL;
    }
    else {
      uint64_t v4 = (RCSServiceSession *)0xEA00000000006563LL;
    }
  }

  else
  {
    uint64_t v4 = (RCSServiceSession *)0xED0000747865746ELL;
    uint64_t v3 = 0x6F632D656E6F6870LL;
  }

  String.hash(into:)(v14, v3, v4);
  swift_bridgeObjectRelease(v4, v5, v6, v7, v8, v9, v10, v11);
  Swift::Int v12 = Hasher._finalize()();
  return sub_28F4C(a1, v12);
}

unint64_t sub_28DBC(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  id v6 = v5;
  Hasher.init(_seed:)(v16, v3);
  String.hash(into:)(v16, v4, v6);
  Swift::Int v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6, v8, v9, v10, v11, v12, v13, v14);
  return sub_290FC(a1, v7);
}

unint64_t sub_28E3C(uint64_t a1)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(RCSServiceSession **)(a1 + 8);
  swift_bridgeObjectRetain();
  String.hash(into:)(v40, v3, v4);
  swift_bridgeObjectRelease(v4, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v12 = *(void *)(a1 + 16);
  id v13 = *(RCSServiceSession **)(a1 + 24);
  swift_bridgeObjectRetain();
  String.hash(into:)(v40, v12, v13);
  swift_bridgeObjectRelease(v13, v14, v15, v16, v17, v18, v19, v20);
  id v21 = *(RCSServiceSession **)(a1 + 32);
  swift_bridgeObjectRetain();
  sub_557A0((uint64_t)v40, (uint64_t)v21);
  swift_bridgeObjectRelease(v21, v22, v23, v24, v25, v26, v27, v28);
  id v29 = *(RCSServiceSession **)(a1 + 48);
  if (v29)
  {
    uint64_t v30 = *(void *)(a1 + 40);
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)(v40, v30, v29);
    swift_bridgeObjectRelease(v29, v31, v32, v33, v34, v35, v36, v37);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Hasher._combine(_:)(*(unsigned __int8 *)(a1 + 56));
  Swift::Int v38 = Hasher._finalize()();
  return sub_29270((uint64_t *)a1, v38);
}

unint64_t sub_28F4C(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    while (1)
    {
      if (*(_BYTE *)(*(void *)(v2 + 48) + v4))
      {
        if (*(_BYTE *)(*(void *)(v2 + 48) + v4) == 1)
        {
          unint64_t v7 = 0xE400000000000000LL;
          uint64_t v8 = 1919251317LL;
          int v9 = a1;
          if (!a1) {
            goto LABEL_17;
          }
        }

        else
        {
          uint64_t v8 = 0x6E657265666E6F63LL;
          unint64_t v7 = 0xEA00000000006563LL;
          int v9 = a1;
          if (!a1)
          {
LABEL_17:
            uint64_t v10 = 0x6F632D656E6F6870LL;
            unint64_t v11 = 0xED0000747865746ELL;
            if (v8 != 0x6F632D656E6F6870LL) {
              goto LABEL_19;
            }
            goto LABEL_18;
          }
        }
      }

      else
      {
        uint64_t v8 = 0x6F632D656E6F6870LL;
        unint64_t v7 = 0xED0000747865746ELL;
        int v9 = a1;
        if (!a1) {
          goto LABEL_17;
        }
      }

      if (v9 == 1) {
        uint64_t v10 = 1919251317LL;
      }
      else {
        uint64_t v10 = 0x6E657265666E6F63LL;
      }
      if (v9 == 1) {
        unint64_t v11 = 0xE400000000000000LL;
      }
      else {
        unint64_t v11 = 0xEA00000000006563LL;
      }
      if (v8 != v10) {
        goto LABEL_19;
      }
LABEL_18:
      if (v7 == v11)
      {
        swift_bridgeObjectRelease_n(v7, 2LL);
        return v4;
      }

LABEL_19:
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v7, v10, v11, 0LL);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v11);
      if ((v12 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v6;
        if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0) {
          continue;
        }
      }

      return v4;
    }
  }

  return v4;
}

unint64_t sub_290FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v5));
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2LL);
      return v5;
    }

    uint64_t v13 = v11;
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0LL);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      uint64_t v15 = ~v4;
      unint64_t v5 = (v5 + 1) & v15;
      if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
      {
        while (1)
        {
          uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v5));
          uint64_t v9 = v17;
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19) {
            break;
          }
          uint64_t v21 = v19;
          char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0LL);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v15;
            if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0) {
              continue;
            }
          }

          return v5;
        }

        goto LABEL_16;
      }
    }
  }

  return v5;
}

unint64_t sub_29270(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v49 = ~v3;
    uint64_t v6 = *a1;
    uint64_t v7 = (RCSServiceSession *)a1[1];
    do
    {
      Swift::Int v38 = (void *)(*(void *)(v2 + 48) + (v4 << 6));
      id v39 = (RCSServiceSession *)v38[1];
      uint64_t v41 = v38[2];
      SEL v40 = (RCSServiceSession *)v38[3];
      id v42 = (RCSServiceSession *)v38[4];
      id v43 = (RCSServiceSession *)v38[6];
      BOOL v44 = *v38 == v6 && v39 == v7;
      if (v44 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v38, v38[1], v6, v7, 0LL) & 1) != 0)
      {
        uint64_t v45 = a1[2];
        unsigned __int8 v46 = (RCSServiceSession *)a1[3];
        BOOL v47 = v41 == v45 && v40 == v46;
        if (v47 || (_stringCompareWithSmolCheck(_:_:expecting:)(v41, v40, v45, v46, 0LL) & 1) != 0)
        {
          uint64_t v8 = a1[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v9 = swift_bridgeObjectRetain();
          LOBYTE(v8) = sub_544B8(v9, v8);
          swift_bridgeObjectRelease(v43, v10, v11, v12, v13, v14, v15, v16);
          swift_bridgeObjectRelease(v42, v17, v18, v19, v20, v21, v22, v23);
          swift_bridgeObjectRelease(v40, v24, v25, v26, v27, v28, v29, v30);
          swift_bridgeObjectRelease(v39, v31, v32, v33, v34, v35, v36, v37);
          if ((v8 & 1) != 0) {
            break;
          }
        }
      }

      unint64_t v4 = (v4 + 1) & v49;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

Swift::Int sub_293DC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }

  sub_5C28(&qword_76C60);
  Swift::Int result = static _DictionaryStorage.allocate(capacity:)(v5);
  Swift::Int v9 = result;
  id v32 = a1;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0LL;
  Swift::Int v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }

    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1LL)) {
        goto LABEL_40;
      }
      if (v15 >= v33) {
        return v9;
      }
      unint64_t v16 = v32[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= v33) {
          return v9;
        }
        unint64_t v16 = v32[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= v33) {
            return v9;
          }
          unint64_t v16 = v32[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= v33) {
              return v9;
            }
            unint64_t v16 = v32[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1LL)) {
                  goto LABEL_41;
                }
                if (v11 >= v33) {
                  return v9;
                }
                unint64_t v16 = v32[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v11 = v17;
          }
        }
      }

uint64_t sub_29674(uint64_t a1, uint64_t a2)
{
  return sub_29870( a1,  a2,  (void (*)(unint64_t, RCSServiceSession *))sub_5A2DC,  (void (*)(void))sub_504F0);
}

uint64_t sub_29688(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = (RCSServiceSession *)*v3;
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_14490(a1, a2);
  LOBYTE(a2) = (_BYTE)v8;
  swift_bridgeObjectRelease(v6, v8, v9, v10, v11, v12, v13, v14);
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v23 = *v3;
  id v34 = (RCSServiceSession *)*v3;
  uint64_t *v3 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_14EB4();
    uint64_t v23 = (uint64_t)v34;
  }

  swift_bridgeObjectRelease( *(RCSServiceSession **)(*(void *)(v23 + 48) + 16 * v7 + 8),  v16,  v17,  v18,  v19,  v20,  v21,  v22);
  uint64_t v24 = *(void *)(*(void *)(v23 + 56) + 16 * v7);
  sub_5A2E0(v7, v23);
  unint64_t v25 = (RCSServiceSession *)*v3;
  uint64_t *v3 = v23;
  swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
  return v24;
}

double sub_2976C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  SEL v8 = (RCSServiceSession *)*v4;
  swift_bridgeObjectRetain();
  unint64_t v9 = sub_14490(a1, a2);
  LOBYTE(a2) = (_BYTE)v10;
  swift_bridgeObjectRelease(v8, v10, v11, v12, v13, v14, v15, v16);
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v25 = *v4;
    id v35 = (RCSServiceSession *)*v4;
    *uint64_t v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_506A4();
      uint64_t v25 = (uint64_t)v35;
    }

    swift_bridgeObjectRelease( *(RCSServiceSession **)(*(void *)(v25 + 48) + 16 * v9 + 8),  v18,  v19,  v20,  v21,  v22,  v23,  v24);
    sub_121F4((_OWORD *)(*(void *)(v25 + 56) + 32 * v9), a3);
    sub_5A4B4(v9, v25);
    SEL v26 = (RCSServiceSession *)*v4;
    *uint64_t v4 = v25;
    swift_bridgeObjectRelease(v26, v27, v28, v29, v30, v31, v32, v33);
  }

  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }

  return result;
}

uint64_t sub_2985C(uint64_t a1, uint64_t a2)
{
  return sub_29870( a1,  a2,  (void (*)(unint64_t, RCSServiceSession *))sub_5A2DC,  (void (*)(void))sub_50A24);
}

uint64_t sub_29870( uint64_t a1, uint64_t a2, void (*a3)(unint64_t, RCSServiceSession *), void (*a4)(void))
{
  unint64_t v7 = v4;
  SEL v10 = *v7;
  swift_bridgeObjectRetain();
  unint64_t v11 = sub_14490(a1, a2);
  LOBYTE(a2) = (_BYTE)v12;
  swift_bridgeObjectRelease(v10, v12, v13, v14, v15, v16, v17, v18);
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
  SEL v27 = *v7;
  Swift::Int v38 = *v7;
  *unint64_t v7 = (RCSServiceSession *)0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a4();
    SEL v27 = v38;
  }

  swift_bridgeObjectRelease( *(RCSServiceSession **)(*(void *)v27[3].IMDTelephonyServiceSession_opaque + 16 * v11 + 8),  v20,  v21,  v22,  v23,  v24,  v25,  v26);
  uint64_t v28 = *(void *)(*(void *)v27[3].state + 8 * v11);
  a3(v11, v27);
  id v29 = *v7;
  *unint64_t v7 = v27;
  swift_bridgeObjectRelease(v29, v30, v31, v32, v33, v34, v35, v36);
  return v28;
}

uint64_t sub_2994C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = (RCSServiceSession *)*v3;
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_28E3C(a1);
  LOBYTE(a1) = (_BYTE)v8;
  swift_bridgeObjectRelease(v6, v8, v9, v10, v11, v12, v13, v14);
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v23 = *v3;
    id v62 = (RCSServiceSession *)*v3;
    uint64_t *v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_50BD4();
      uint64_t v23 = (uint64_t)v62;
    }

    unsigned __int8 v24 = (RCSServiceSession **)(*(void *)(v23 + 48) + (v7 << 6));
    uint64_t v25 = v24[1];
    unsigned __int8 v26 = v24[3];
    SEL v27 = v24[6];
    swift_bridgeObjectRelease(v24[4], v16, v17, v18, v19, v20, v21, v22);
    swift_bridgeObjectRelease(v26, v28, v29, v30, v31, v32, v33, v34);
    swift_bridgeObjectRelease(v25, v35, v36, v37, v38, v39, v40, v41);
    swift_bridgeObjectRelease(v27, v42, v43, v44, v45, v46, v47, v48);
    uint64_t v49 = *(void *)(v23 + 56);
    uint64_t v50 = type metadata accessor for TypingIndicator(0LL);
    uint64_t v51 = *(void *)(v50 - 8);
    sub_21A68(v49 + *(void *)(v51 + 72) * v7, a2);
    sub_5A85C(v7, v23);
    SEL v52 = (RCSServiceSession *)*v3;
    uint64_t *v3 = v23;
    swift_bridgeObjectRelease(v52, v53, v54, v55, v56, v57, v58, v59);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v51 + 56))(a2, 0LL, 1LL, v50);
  }

  else
  {
    uint64_t v61 = type metadata accessor for TypingIndicator(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56LL))( a2,  1LL,  1LL,  v61);
  }

uint64_t sub_29A8C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  id v10 = (void *)*v4;
  unint64_t v12 = sub_14490(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      unsigned __int8 v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = v18[7];
        uint64_t result = swift_release(*(void *)(v19 + 8 * v12));
        *(void *)(v19 + 8 * v12) = a1;
        return result;
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_504F0();
      goto LABEL_7;
    }

    sub_4EFAC(v15, a4 & 1);
    unint64_t v21 = sub_14490(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      unsigned __int8 v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_5D524(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

_OWORD *sub_29BB8(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  id v10 = (void *)*v4;
  unint64_t v12 = sub_14490(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      unsigned __int8 v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = (void *)(v18[7] + 32 * v12);
        sub_12204(v19);
        return sub_121F4(a1, v19);
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_506A4();
      goto LABEL_7;
    }

    sub_4F2C0(v15, a4 & 1);
    unint64_t v21 = sub_14490(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      unsigned __int8 v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_5D578(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }

  uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_29CE8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  id v10 = (void *)*v4;
  unint64_t v12 = sub_14490(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      unsigned __int8 v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = v18[7];

        *(void *)(v19 + 8 * v12) = a1;
        return;
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_50A24();
      goto LABEL_7;
    }

    sub_4F8CC(v15, a4 & 1);
    unint64_t v20 = sub_14490(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      unint64_t v12 = v20;
      unsigned __int8 v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_5D524(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain();
      return;
    }
  }

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void *sub_29E14(uint64_t a1, _OWORD *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  SEL v8 = (void *)*v3;
  unint64_t v10 = sub_28E3C((uint64_t)a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      char v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        uint64_t v17 = v16[7];
        uint64_t v18 = v17 + *(void *)(*(void *)(type metadata accessor for TypingIndicator(0LL) - 8) + 72LL) * v10;
        return (void *)sub_2AEC0(a1, v18);
      }

      goto LABEL_11;
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_50BD4();
      goto LABEL_7;
    }

    sub_4FEEC(v13, a3 & 1);
    unint64_t v20 = sub_28E3C((uint64_t)a2);
    if ((v14 & 1) == (v21 & 1))
    {
      unint64_t v10 = v20;
      char v16 = *v4;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_5D628(v10, a2, a1, v16);
      return sub_5C68(a2);
    }
  }

  uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for RCSHandle);
  __break(1u);
  return result;
}

uint64_t sub_29F38(__int128 *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_defaultActor_initialize(v1);
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_BYTE *)(v1 + 144) = -1;
  *(void *)(v1 + 152) = _swiftEmptyArrayStorage;
  if (qword_76BC0 != -1) {
    swift_once(&qword_76BC0, sub_22AF4);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  sub_6298(v8, (uint64_t)qword_76D38);
  uint64_t v9 = sub_2AF74((uint64_t)a1, (uint64_t)v38);
  unint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc(22LL, -1LL);
    unsigned __int8 v34 = v7;
    uint64_t v13 = v12;
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v13 = 141558275;
    uint64_t v36 = 1752392040LL;
    uint64_t v37 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
    *(_WORD *)(v13 + 12) = 2081;
    SEL v35 = a1;
    uint64_t v33 = v13 + 14;
    uint64_t v15 = v5;
    uint64_t v16 = v4;
    uint64_t v18 = v39;
    uint64_t v17 = v40;
    sub_CA38(v38, v39);
    uint64_t v19 = v18;
    uint64_t v4 = v16;
    uint64_t v5 = v15;
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(v19, *(void *)(v17 + 8));
    char v22 = (RCSServiceSession *)v21;
    uint64_t v36 = sub_B004(v20, v21, &v37);
    a1 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
    swift_bridgeObjectRelease(v22, v23, v24, v25, v26, v27, v28, v29);
    sub_12204(v38);
    _os_log_impl(&dword_0, v10, v11, "New operation created with ID %{private,mask.hash}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    uint64_t v30 = v13;
    unint64_t v7 = v34;
    swift_slowDealloc(v30, -1LL, -1LL);
  }

  else
  {
    sub_12204(v38);
  }

  static Date.now.getter(v31);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v2 + OBJC_IVAR____TtCC7CoreRCS22RCSOperationControllerP33_1B0F715D17C82627C67D971FB94137349Operation_creationDate,  v7,  v4);
  sub_22168(a1, v2 + OBJC_IVAR____TtCC7CoreRCS22RCSOperationControllerP33_1B0F715D17C82627C67D971FB94137349Operation_id);
  return v2;
}

uint64_t sub_2A1C8(uint64_t a1)
{
  return a1 & ~(-1LL << *(_BYTE *)(v1 + 32));
}

uint64_t sub_2A1F4()
{
  Swift::Int v1 = Hasher._finalize()();
  return sub_2A1C8(v1);
}

uint64_t type metadata accessor for RCSOperationController.Operation(uint64_t a1)
{
  uint64_t result = qword_76F08;
  if (!qword_76F08) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RCSOperationController.Operation);
  }
  return result;
}

uint64_t sub_2A290()
{
  uint64_t v2 = (uint64_t)(v0 + 2);
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[8];
  uint64_t v5 = v0[9];
  uint64_t v6 = v0[10];
  uint64_t v7 = v0[11];
  uint64_t v8 = (void *)swift_task_alloc(dword_76D84);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v1;
  v8[1] = sub_2B3A4;
  return sub_28568(v2, v3, v4, v5, v6, v7);
}

unint64_t sub_2A310()
{
  unint64_t result = qword_76DA8;
  if (!qword_76DA8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RCSOperationController.OperationError,  &type metadata for RCSOperationController.OperationError);
    atomic_store(result, (unint64_t *)&qword_76DA8);
  }

  return result;
}

uint64_t type metadata accessor for RCSOperationController()
{
  return objc_opt_self(&OBJC_CLASS____TtC7CoreRCS22RCSOperationController);
}

uint64_t destroy for RCSOperationController.OperationError(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 56);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)a1 + 2;
  }
  if (v1 != 1) {
    a1 += 16LL;
  }
  return sub_12204((void *)a1);
}

uint64_t initializeWithCopy for RCSOperationController.OperationError(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 56);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  if (v4 == 1)
  {
    uint64_t v5 = *(void *)(a2 + 24);
    *(void *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    char v6 = 1;
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    __int128 v7 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 40) = v7;
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 16, a2 + 16);
    char v6 = 0;
  }

  *(_BYTE *)(a1 + 56) = v6;
  return a1;
}

uint64_t assignWithCopy for RCSOperationController.OperationError(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 56);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 != 1) {
      a1 += 16LL;
    }
    sub_12204((void *)a1);
    unsigned int v5 = *(unsigned __int8 *)(a2 + 56);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(v2 + 24) = v6;
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(v2, a2);
      *(void *)(v2 + 32) = *(void *)(a2 + 32);
      char v7 = 1;
    }

    else
    {
      *(void *)uint64_t v2 = *(void *)a2;
      *(void *)(v2 + 8) = *(void *)(a2 + 8);
      uint64_t v8 = *(void *)(a2 + 40);
      *(void *)(v2 + 40) = v8;
      *(void *)(v2 + 48) = *(void *)(a2 + 48);
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(v2 + 16, a2 + 16);
      char v7 = 0;
    }

    *(_BYTE *)(v2 + 56) = v7;
  }

  return v2;
}

__n128 initializeWithTake for RCSHandle(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for RCSOperationController.OperationError(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 56);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 != 1) {
      a1 += 16LL;
    }
    sub_12204((void *)a1);
    unsigned int v5 = *(unsigned __int8 *)(a2 + 56);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      __int128 v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
      *(_OWORD *)(v2 + swift_weakDestroy(v0 + 16) = v6;
      *(void *)(v2 + 32) = *(void *)(a2 + 32);
      char v7 = 1;
    }

    else
    {
      char v7 = 0;
      __int128 v8 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
      *(_OWORD *)(v2 + swift_weakDestroy(v0 + 16) = v8;
      *(_OWORD *)(v2 + 32) = *(_OWORD *)(a2 + 32);
      *(void *)(v2 + 48) = *(void *)(a2 + 48);
    }

    *(_BYTE *)(v2 + 56) = v7;
  }

  return v2;
}

uint64_t getEnumTagSinglePayload for RCSOperationController.OperationError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 57)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for RCSOperationController.OperationError( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 41) = 0u;
    *(_OWORD *)(result + swift_weakDestroy(v0 + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_DWORD *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 57) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 57) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 56) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_2A664(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 56);
  return result;
}

uint64_t sub_2A680(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(void *)(result + 48) = 0LL;
    *(_OWORD *)(result + swift_weakDestroy(v0 + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }

  *(_BYTE *)(result + 56) = a2;
  return result;
}

ValueMetadata *type metadata accessor for RCSOperationController.OperationError()
{
  return &type metadata for RCSOperationController.OperationError;
}

uint64_t sub_2A6BC()
{
  return type metadata accessor for RCSOperationController.Operation(0LL);
}

uint64_t sub_2A6C4(uint64_t a1)
{
  v4[1] = &unk_60050;
  _OWORD v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[3] = *(void *)(result - 8) + 64LL;
    v4[4] = &unk_60068;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 5LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t destroy for RCSOperationController.Configuration(uint64_t result)
{
  if (*(void *)(result + 16)) {
    return swift_release(*(void *)(result + 24));
  }
  return result;
}

uint64_t initializeWithCopy for RCSOperationController.Configuration(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 24);
    *(void *)(a1 + swift_weakDestroy(v0 + 16) = v4;
    *(void *)(a1 + 24) = v5;
    swift_retain(v5);
  }

  else
  {
    *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  }

  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithCopy for RCSOperationController.Configuration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = (_OWORD *)(a1 + 16);
  __int128 v6 = (_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 16);
  if (!*(void *)(a1 + 16))
  {
    if (v5)
    {
      uint64_t v9 = *(void *)(a2 + 24);
      *(void *)(a1 + swift_weakDestroy(v0 + 16) = v5;
      *(void *)(a1 + 24) = v9;
      swift_retain(v9);
      goto LABEL_8;
    }

__n128 initializeWithTake for RCSOperationController.Configuration(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  return result;
}

uint64_t assignWithTake for RCSOperationController.Configuration(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 16);
  __int128 v6 = (_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 16);
  if (!*(void *)(a1 + 16))
  {
    if (v5)
    {
      uint64_t v9 = *(void *)(a2 + 24);
      *(void *)(a1 + swift_weakDestroy(v0 + 16) = v5;
      *(void *)(a1 + 24) = v9;
      goto LABEL_8;
    }

uint64_t getEnumTagSinglePayload for RCSOperationController.Configuration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RCSOperationController.Configuration( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 33) = 0;
    }
    if (a2) {
      *(void *)(result + swift_weakDestroy(v0 + 16) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RCSOperationController.Configuration()
{
  return &type metadata for RCSOperationController.Configuration;
}

uint64_t sub_2A9C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A88(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24));
}

void sub_2A9D0( unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, RCSServiceSession *, uint64_t))
{
  uint64_t v30 = 0LL;
  int64_t v6 = 0LL;
  uint64_t v7 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v11 = v10 | (v6 << 6);
      goto LABEL_5;
    }

    int64_t v24 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v24 >= v32) {
      goto LABEL_24;
    }
    unint64_t v25 = *(void *)(v31 + 8 * v24);
    ++v6;
    if (!v25)
    {
      int64_t v6 = v24 + 1;
      if (v24 + 1 >= v32) {
        goto LABEL_24;
      }
      unint64_t v25 = *(void *)(v31 + 8 * v6);
      if (!v25)
      {
        int64_t v6 = v24 + 2;
        if (v24 + 2 >= v32) {
          goto LABEL_24;
        }
        unint64_t v25 = *(void *)(v31 + 8 * v6);
        if (!v25) {
          break;
        }
      }
    }

uint64_t sub_2ABCC( uint64_t isStackAllocationSafe, uint64_t (*a2)(uint64_t, RCSServiceSession *, uint64_t), uint64_t a3)
{
  uint64_t v6 = isStackAllocationSafe;
  char v7 = *(_BYTE *)(isStackAllocationSafe + 32);
  unsigned int v8 = v7 & 0x3F;
  unint64_t v9 = (1LL << v7) + 63;
  uint64_t v10 = v9 >> 6;
  size_t v11 = 8 * (v9 >> 6);
  if (v8 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v9 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v16 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0LL), v11);
    sub_2A9D0((unint64_t *)((char *)&v16 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v10, v6, a2);
    if (v3) {
      swift_willThrow(v12);
    }
    else {
      return v12;
    }
  }

  else
  {
    uint64_t v13 = (void *)swift_slowAlloc(v11, -1LL);
    bzero(v13, v11);
    sub_2A9D0((unint64_t *)v13, v10, v6, a2);
    a3 = v14;
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  return a3;
}

uint64_t sub_2AD3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_5C28(&qword_76FF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_2AD84()
{
  unint64_t result = qword_76FF8;
  if (!qword_76FF8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_queue);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_76FF8);
  }

  return result;
}

uint64_t sub_2ADC0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_2ADE4()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_2AE04()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_2AE34(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRelease(result);
  }
  return result;
}

uint64_t sub_2AE40()
{
  return sub_244B0(*(void *)(v0 + 16), *(_BYTE *)(v0 + 24), *(void (**)(void *))(v0 + 32));
}

uint64_t sub_2AE50(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_2AE60(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_2AE68(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRetain(result);
  }
  return result;
}

unint64_t sub_2AE74()
{
  unint64_t result = qword_77018;
  if (!qword_77018)
  {
    uint64_t v1 = sub_1C3B4(&qword_77010);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_77018);
  }

  return result;
}

uint64_t sub_2AEC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TypingIndicator(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_2AF04()
{
  uint64_t v1 = (void *)(v0 + 16);
  if ((*(_BYTE *)(v0 + 56) & 1) != 0) {
    swift_errorRelease(*v1);
  }
  else {
    sub_12204(v1);
  }
  swift_release(*(void *)(v0 + 72));
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_2AF44()
{
  return sub_24518(v0 + 16, *(void (**)(void *))(v0 + 64));
}

uint64_t sub_2AF50()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_2AF74(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_2AFBC()
{
  return swift_deallocObject(v0, 96LL, 7LL);
}

uint64_t sub_2AFF8()
{
  uint64_t v2 = (uint64_t)(v0 + 2);
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[8];
  uint64_t v5 = v0[9];
  uint64_t v6 = v0[10];
  uint64_t v7 = v0[11];
  unsigned int v8 = (void *)swift_task_alloc(dword_76D84);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v8;
  *unsigned int v8 = v1;
  v8[1] = sub_2B3A8;
  return sub_28568(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_2B074(uint64_t a1)
{
  return sub_25404(a1, v1);
}

uint64_t sub_2B07C()
{
  uint64_t v1 = sub_5C28(&qword_77048);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_2B0E0(uint64_t a1)
{
  return sub_256F4(a1);
}

uint64_t sub_2B130(uint64_t a1)
{
  return sub_2556C(a1, *(void *)(v1 + 24), *(void *)(v1 + 16));
}

uint64_t sub_2B138()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = sub_1C3B4(&qword_76560);
  uint64_t v3 = type metadata accessor for CheckedContinuation(0LL, v1, v2, &protocol self-conformance witness table for Error);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 24) & ~v5;
  uint64_t v7 = v6 + *(void *)(v4 + 64);
  uint64_t v8 = v5 | 7;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v6, v3);
  return swift_deallocObject(v0, v7, v8);
}

uint64_t sub_2B1B8(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = sub_1C3B4(&qword_76560);
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(type metadata accessor for CheckedContinuation( 0LL,  v3,  v4,  &protocol self-conformance witness table for Error)
                                      - 8)
                          + 80LL);
  return sub_257D0(a1, v1 + ((v5 + 24) & ~v5), v3);
}

uint64_t sub_2B22C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 16);
  a2[3] = v4;
  uint64_t v5 = sub_1CECC(a2);
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(v5, a1, v4);
}

uint64_t sub_2B268()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = sub_1C3B4(&qword_76560);
  uint64_t v3 = type metadata accessor for Result(0LL, v1, v2, &protocol self-conformance witness table for Error);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 24) & ~v5;
  uint64_t v7 = *(void *)(v4 + 64);
  else {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL))(v0 + v6, v1);
  }
  unint64_t v8 = (v7 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v9 = v8 + 16;
  swift_release(*(void *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v9, v5 | 7);
}

uint64_t sub_2B330()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = sub_1C3B4(&qword_76560);
  uint64_t v3 = *(void *)(type metadata accessor for Result(0LL, v1, v2, &protocol self-conformance witness table for Error) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v0 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  return sub_245FC(v0 + v4, *(void (**)(void *))v5, *(void *)(v5 + 8), v1);
}

uint64_t RCSMessageProcessingQueue.__allocating_init(delegate:)(uint64_t a1)
{
  uint64_t v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  RCSMessageProcessingQueue.init(delegate:)(a1);
  return v3;
}

uint64_t RCSMessageProcessingQueue.init(delegate:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)v1;
  uint64_t v5 = sub_5C28(&qword_765B0);
  __chkstk_darwin(v5);
  id v47 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v44 = *(void *)(v7 - 8);
  uint64_t v45 = v7;
  __chkstk_darwin(v7);
  id v46 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v42);
  id v43 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v10);
  unsigned __int8 v41 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(v4 + 80);
  uint64_t v53 = *(void *)(v4 + 88);
  id v54 = (char *)v12;
  uint64_t v14 = type metadata accessor for RCSMessageProcessingQueue.QueuedJob(255LL, v12, v53, v13);
  uint64_t v15 = type metadata accessor for AsyncStream.Continuation.BufferingPolicy(0LL, v14);
  uint64_t v49 = *(void *)(v15 - 8);
  uint64_t v50 = v15;
  __chkstk_darwin(v15);
  SEL v17 = (char *)&v41 - v16;
  uint64_t v18 = type metadata accessor for AsyncStream(0LL, v14);
  uint64_t v51 = *(void *)(v18 - 8);
  uint64_t v52 = v18;
  __chkstk_darwin(v18);
  id v20 = (char *)&v41 - v19;
  uint64_t v21 = type metadata accessor for AsyncStream.Continuation(255LL, v14);
  uint64_t v22 = type metadata accessor for Optional(0LL, v21);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  int64_t v26 = (char *)&v41 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24);
  id v28 = (char *)&v41 - v27;
  uint64_t v48 = a1;
  swift_unknownObjectUnownedInit(v2 + 16, a1);
  uint64_t v29 = *(void *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56))(v28, 1LL, 1LL, v21);
  (*(void (**)(char *, void, uint64_t))(v49 + 104))( v17,  enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:),  v50);
  id v56 = v54;
  uint64_t v57 = v53;
  id v58 = v28;
  AsyncStream.init(_:bufferingPolicy:_:)(v14, v17, sub_2B930, v55, v14);
  (*(void (**)(char *, char *, uint64_t))(v51 + 32))(&v2[*(void *)(*(void *)v2 + 104LL)], v20, v52);
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  id v54 = v28;
  v30(v26, v28, v22);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48))(v26, 1LL, v21);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(&v2[*(void *)(*(void *)v2 + 112LL)], v26, v21);
    sub_2AD84();
    int64_t v32 = v41;
    static DispatchQoS.userInitiated.getter();
    unsigned __int8 v59 = _swiftEmptyArrayStorage;
    sub_219FC( &qword_77050,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    uint64_t v33 = sub_5C28(&qword_77058);
    uint64_t v34 = sub_2C800(&qword_77060, &qword_77058);
    SEL v35 = v43;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v59, v33, v34);
    uint64_t v36 = v46;
    (*(void (**)(char *, void, uint64_t))(v44 + 104))( v46,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v45);
    *(void *)&v2[*(void *)(*(void *)v2 + 120LL)] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000002CLL,  0x80000000000658C0LL,  v32,  v35,  v36,  0LL);
    uint64_t v37 = (uint64_t)v47;
    static TaskPriority.userInitiated.getter();
    uint64_t v38 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56LL))(v37, 0LL, 1LL, v38);
    uint64_t v39 = (void *)swift_allocObject(&unk_72388, 40LL, 7LL);
    void v39[2] = 0LL;
    v39[3] = 0LL;
    v39[4] = v2;
    swift_retain(v2);
    uint64_t v40 = sub_1DB20(v37, (uint64_t)&unk_77070, (uint64_t)v39);
    swift_unknownObjectRelease(v48);
    swift_release(v40);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v54, v22);
    return (uint64_t)v2;
  }

  return result;
}

uint64_t type metadata accessor for RCSMessageProcessingQueue.QueuedJob( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2C980(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RCSMessageProcessingQueue.QueuedJob);
}

uint64_t sub_2B89C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for RCSMessageProcessingQueue.QueuedJob(255LL, a3, a4, a4);
  uint64_t v7 = type metadata accessor for AsyncStream.Continuation(255LL, v6);
  uint64_t v8 = type metadata accessor for Optional(0LL, v7);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(a2, v8);
  uint64_t v9 = *(void *)(v7 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a2, a1, v7);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(a2, 0LL, 1LL, v7);
}

uint64_t sub_2B930(uint64_t a1)
{
  return sub_2B89C(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_2B93C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_770FC);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_2C9AC;
  return sub_2BB40((uint64_t)v1, v2, v3, v4);
}

uint64_t sub_2B984()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_2B9B0()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_7706C);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_2BA18;
  uint64_t v2 = (void *)swift_task_alloc(dword_770FC);
  v1[2] = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_2C9AC;
  return sub_2BB40((uint64_t)v2, v3, v4, v5);
}

uint64_t sub_2BA18()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t RCSMessageProcessingQueue.enqueueRelayBlock(_:timeout:)( uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for RCSMessageProcessingQueue.QueuedJob( 255LL,  *(void *)(*(void *)v5 + 80LL),  *(void *)(*(void *)v5 + 88LL),  a5);
  uint64_t v10 = type metadata accessor for AsyncStream.Continuation.YieldResult(0LL, v9);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v17[-1] - v12;
  v17[0] = a1;
  v17[1] = a2;
  *(double *)&v17[2] = a3;
  uint64_t v14 = type metadata accessor for AsyncStream.Continuation(0LL, v9);
  swift_retain(a2);
  AsyncStream.Continuation.yield(_:)(v17, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_2BB40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = v4;
  uint64_t v6 = type metadata accessor for RCSMessageProcessingQueue.QueuedJob( 255LL,  *(void *)(*(void *)v4 + 80LL),  *(void *)(*(void *)v4 + 88LL),  a4);
  v5[6] = v6;
  uint64_t v7 = type metadata accessor for AsyncStream.Iterator(0LL, v6);
  v5[7] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[8] = v8;
  v5[9] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_2BBB8, 0LL, 0LL);
}

uint64_t sub_2BBB8()
{
  uint64_t v1 = type metadata accessor for AsyncStream(0LL, v0[6]);
  AsyncStream.makeAsyncIterator()(v1);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[10] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_2BC48;
  return AsyncStream.Iterator.next(isolation:)(v0 + 2, 0LL, 0LL, v0[7]);
}

uint64_t sub_2BC48()
{
  return swift_task_switch(sub_2BC9C, 0LL, 0LL);
}

uint64_t sub_2BC9C()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  *(void *)(v0 + 88) = v2;
  *(void *)(v0 + 96) = v1;
  uint64_t v3 = *(void *)(v0 + 32);
  *(void *)(v0 + 104) = v3;
  if (v2)
  {
    uint64_t v4 = *(void *)(v0 + 40);
    uint64_t v5 = (void *)swift_task_alloc(48LL);
    *(void *)(v0 + 112) = v5;
    _OWORD v5[2] = v4;
    v5[3] = v3;
    void v5[4] = v2;
    v5[5] = v1;
    uint64_t v6 = async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1];
    swift_retain(v1);
    uint64_t v7 = (void *)swift_task_alloc(v6);
    *(void *)(v0 + 120) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_2BD98;
    return withCheckedContinuation<A>(isolation:function:_:)();
  }

  else
  {
    uint64_t v9 = *(void *)(v0 + 72);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 64) + 8LL))(v9, *(void *)(v0 + 56));
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_2BD98()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 120LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_2BDF4, 0LL, 0LL);
}

uint64_t sub_2BDF4()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[11];
  sub_1CC98(v2, v1);
  sub_1CC98(v2, v1);
  uint64_t v3 = (void *)swift_task_alloc(*((unsigned int *)&async function pointer to AsyncStream.Iterator.next(isolation:) + 1));
  v0[10] = v3;
  void *v3 = v0;
  v3[1] = sub_2BC48;
  return AsyncStream.Iterator.next(isolation:)(v0 + 2, 0LL, 0LL, v0[7]);
}

uint64_t sub_2BE90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v41 = a3;
  uint64_t v42 = a4;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v40 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v38 = *(void *)(v11 - 8);
  uint64_t v39 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_5C28(&qword_77180);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14);
  SEL v17 = dispatch_group_create();
  dispatch_group_enter(v17);
  uint64_t v37 = *(void *)(a2 + *(void *)(*(void *)a2 + 120LL));
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))( (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v14);
  uint64_t v18 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v19 = (v18 + 32) & ~v18;
  uint64_t v20 = swift_allocObject(&unk_72500, v19 + v16, v18 | 7);
  *(void *)(v20 + swift_weakDestroy(v0 + 16) = v17;
  *(double *)(v20 + 24) = a5;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))( v20 + v19,  (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v14);
  uint64_t v48 = sub_2C7B0;
  uint64_t v49 = (void *)v20;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v45 = 1107296256LL;
  id v46 = sub_19334;
  id v47 = &unk_72518;
  uint64_t v21 = _Block_copy(&aBlock);
  uint64_t v22 = v17;
  static DispatchQoS.unspecified.getter(v22);
  id v43 = _swiftEmptyArrayStorage;
  uint64_t v36 = sub_219FC( &qword_77008,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v23 = sub_5C28(&qword_77010);
  uint64_t v35 = v23;
  uint64_t v24 = sub_2C800((unint64_t *)&qword_77018, &qword_77010);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v23, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v10, v21);
  _Block_release(v21);
  uint64_t v40 = *(void *)(v40 + 8);
  ((void (*)(char *, uint64_t))v40)(v10, v8);
  uint64_t v25 = v39;
  int64_t v26 = *(void (**)(char *, uint64_t))(v38 + 8);
  v26(v13, v39);
  swift_release(v49);
  unint64_t v27 = sub_2AD84();
  id v28 = (void *)static OS_dispatch_queue.main.getter(v27);
  static DispatchQoS.userInitiated.getter();
  uint64_t v29 = (void *)swift_allocObject(&unk_72550, 40LL, 7LL);
  uint64_t v30 = v42;
  v29[2] = v41;
  v29[3] = v30;
  v29[4] = v22;
  uint64_t v48 = sub_2C86C;
  uint64_t v49 = v29;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v45 = 1107296256LL;
  id v46 = sub_19334;
  id v47 = &unk_72568;
  uint64_t v31 = _Block_copy(&aBlock);
  id v43 = _swiftEmptyArrayStorage;
  int64_t v32 = v22;
  swift_retain(v30);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v35, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v10, v31);
  _Block_release(v31);

  ((void (*)(char *, uint64_t))v40)(v10, v8);
  v26(v13, v25);
  return swift_release(v49);
}

uint64_t sub_2C228(double a1)
{
  uint64_t v2 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = type metadata accessor for DispatchTime(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v18 - v12;
  uint64_t result = static DispatchTime.now()(v11);
  double v15 = a1 * 1000.0;
  if ((~COERCE__INT64(a1 * 1000.0) & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (v15 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (v15 < 9.22337204e18)
  {
    *uint64_t v5 = (uint64_t)v15;
    (*(void (**)(void *, void, uint64_t))(v3 + 104))( v5,  enum case for DispatchTimeInterval.milliseconds(_:),  v2);
    DispatchTime.advanced(by:)(v5);
    (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v16 = *(void (**)(char *, uint64_t))(v7 + 8);
    v16(v10, v6);
    OS_dispatch_group.wait(timeout:)(v13);
    v16(v13, v6);
    uint64_t v17 = sub_5C28(&qword_77180);
    return CheckedContinuation.resume(returning:)(v17, v17);
  }

uint64_t sub_2C3DC(void (*a1)(void (*)(), uint64_t), uint64_t a2, void *a3)
{
  uint64_t v5 = swift_allocObject(&unk_725A0, 24LL, 7LL);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a3;
  id v6 = a3;
  a1(sub_2C89C, v5);
  return swift_release(v5);
}

uint64_t *RCSMessageProcessingQueue.deinit(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  swift_unknownObjectUnownedDestroy(v2 + 2, a2);
  uint64_t v4 = (uint64_t)v2 + *(void *)(*v2 + 104);
  uint64_t v6 = type metadata accessor for RCSMessageProcessingQueue.QueuedJob( 255LL,  *(void *)(v3 + 80),  *(void *)(v3 + 88),  v5);
  uint64_t v7 = type metadata accessor for AsyncStream(0LL, v6);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v4, v7);
  uint64_t v8 = (uint64_t)v2 + *(void *)(*v2 + 112);
  uint64_t v9 = type metadata accessor for AsyncStream.Continuation(0LL, v6);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);

  return v2;
}

uint64_t RCSMessageProcessingQueue.__deallocating_deinit(uint64_t a1, uint64_t a2)
{
  return swift_deallocClassInstance( v2,  *(unsigned int *)(*(void *)v2 + 48LL),  *(unsigned __int16 *)(*(void *)v2 + 52LL));
}

uint64_t sub_2C50C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[0] = "\b";
  uint64_t v5 = type metadata accessor for RCSMessageProcessingQueue.QueuedJob( 255LL,  *(void *)(a1 + 80),  *(void *)(a1 + 88),  a4);
  uint64_t result = type metadata accessor for AsyncStream(319LL, v5);
  if (v7 <= 0x3F)
  {
    v9[1] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for AsyncStream.Continuation(319LL, v5);
    if (v8 <= 0x3F)
    {
      v9[2] = *(void *)(result - 8) + 64LL;
      v9[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
      uint64_t result = swift_initClassMetadata2(a1, 0LL, 4LL, v9, a1 + 96);
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t type metadata accessor for RCSMessageProcessingQueue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2C980(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RCSMessageProcessingQueue);
}

uint64_t sub_2C5D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16LL);
}

uint64_t sub_2C5DC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 8));
}

void *sub_2C5E4(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain(v3);
  return a1;
}

void *sub_2C618(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v5);
  a1[2] = a2[2];
  return a1;
}

uint64_t sub_2C664(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t sub_2C6A0(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t sub_2C6E8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t sub_2C728(uint64_t a1)
{
  return sub_2BE90(a1, *(void *)(v1 + 16), *(void *)(v1 + 32), *(void *)(v1 + 40), *(double *)(v1 + 24));
}

uint64_t sub_2C738()
{
  uint64_t v1 = sub_5C28(&qword_77180);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_2C7B0()
{
  return sub_2C228(*(double *)(v0 + 24));
}

uint64_t sub_2C7E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_2C7F8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_2C800(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_1C3B4(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_2C840()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_2C86C()
{
  return sub_2C3DC(*(void (**)(void (*)(), uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_2C878()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_2C89C()
{
}

uint64_t sub_2C8A4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_2C8C8(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_76ADC);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_2C938;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_76AD8 + dword_76AD8))(a1, v4);
}

uint64_t sub_2C938()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_2C980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t RCSReachabilityController.delegate.getter()
{
  return swift_unknownObjectRetain(*(void *)(v0 + 16));
}

uint64_t RCSMessageReceiver.__allocating_init(delegate:)(uint64_t a1)
{
  uint64_t result = swift_allocObject(v1, 24LL, 7LL);
  *(void *)(result + swift_weakDestroy(v0 + 16) = a1;
  return result;
}

uint64_t RCSMessageReceiver.init(delegate:)(uint64_t a1)
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = a1;
  return v1;
}

unint64_t RCSMessageReceiver.MessageProcessingError.errorDescription.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for RCSMessage(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v53 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v12, v2, a1);
  if (swift_getEnumCaseMultiPayload(v12, a1) == 1)
  {
    sub_34FA8((uint64_t)v12, (uint64_t)v10, type metadata accessor for RCSMessage);
    unint64_t v53 = 0LL;
    id v54 = (RCSServiceSession *)0xE000000000000000LL;
    _StringGuts.grow(_:)(41LL);
    swift_bridgeObjectRelease(v54, v14, v15, v16, v17, v18, v19, v20);
    unint64_t v53 = 0xD000000000000027LL;
    id v54 = (RCSServiceSession *)0x8000000000065920LL;
    sub_C934((uint64_t)v10, (uint64_t)v7, type metadata accessor for RCSMessage);
    uint64_t v21 = String.init<A>(describing:)(v7, v4);
    uint64_t v23 = v22;
  }

  else
  {
    uint64_t v24 = (uint64_t *)&v12[*(int *)(sub_5C28(&qword_76360) + 48)];
    uint64_t v25 = *v24;
    uint64_t v23 = (RCSServiceSession *)v24[1];
    sub_34FA8((uint64_t)v12, (uint64_t)v10, type metadata accessor for RCSMessage);
    unint64_t v53 = 0LL;
    id v54 = (RCSServiceSession *)0xE000000000000000LL;
    _StringGuts.grow(_:)(41LL);
    swift_bridgeObjectRelease(v54, v26, v27, v28, v29, v30, v31, v32);
    unint64_t v53 = 0xD000000000000023LL;
    id v54 = (RCSServiceSession *)0x8000000000065950LL;
    uint64_t v33 = *((void *)v10 + 16);
    uint64_t v34 = (RCSServiceSession *)*((void *)v10 + 17);
    swift_bridgeObjectRetain();
    v35._uint64_t countAndFlagsBits = v33;
    v35._object = v34;
    String.append(_:)(v35);
    swift_bridgeObjectRelease(v34, v36, v37, v38, v39, v40, v41, v42);
    v43._uint64_t countAndFlagsBits = 8250LL;
    v43._object = (void *)0xE200000000000000LL;
    String.append(_:)(v43);
    uint64_t v21 = v25;
    uint64_t v22 = v23;
  }

  String.append(_:)(*(Swift::String *)&v21);
  swift_bridgeObjectRelease(v23, v44, v45, v46, v47, v48, v49, v50);
  unint64_t v51 = v53;
  sub_11324((uint64_t)v10, type metadata accessor for RCSMessage);
  return v51;
}

uint64_t sub_2CC18@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  *a6 = a1;
  id v12 = objc_allocWithZone(&OBJC_CLASS___IMToSuperParserContext);
  id v13 = a1;
  id v14 = [v12 init];
  a6[1] = v14;
  [v14 reset];
  id v16 = (int *)type metadata accessor for RCSMessageReceiver.MessageProcessingContext(0LL, a4, a5, v15);
  sub_C934(a2, (uint64_t)a6 + v16[10], type metadata accessor for RCSMessage);

  *(void *)((char *)a6 + v16[11]) = a3;
  uint64_t result = sub_11324(a2, type metadata accessor for RCSMessage);
  *(void *)((char *)a6 + v16[12]) = 0LL;
  return result;
}

void sub_2CCEC(uint64_t a1, uint64_t a2, RCSServiceSession *isa, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = *(void **)(v5 + 8);
  NSString v9 = String._bridgeToObjectiveC()();
  [v8 appendString:v9];

  if (isa)
  {
    uint64_t v10 = RCSChipList.attributes.getter();
    Class isa = (RCSServiceSession *)v10;
    if (v10)
    {
      uint64_t v11 = (RCSServiceSession *)sub_6D3C(v10);
      swift_bridgeObjectRelease(isa, v12, v13, v14, v15, v16, v17, v18);
      Class isa = (RCSServiceSession *)Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v11, v19, v20, v21, v22, v23, v24, v25);
    }
  }

  [v8 appendChipList:isa];

  uint64_t v26 = *(int *)(a4 + 48);
  uint64_t v27 = *(void *)(v5 + v26);
  if ((v27 & 1) == 0) {
    *(void *)(v5 + v26) = v27 | 1;
  }
}

uint64_t sub_2CDC4(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(int *)(a2 + 48);
  uint64_t v4 = *(void *)(v2 + v3);
  if ((v4 & 8) == 0 || ((v4 | result) & 1) == 0)
  {
    uint64_t v5 = 8LL;
    *(void *)(v2 + v3) = v5 | v4;
  }

  return result;
}

uint64_t sub_2CDF4(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  uint64_t v5 = type metadata accessor for RCSMessage(0LL);
  v3[19] = v5;
  v3[20] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(a2 - 8);
  v3[21] = v6;
  v3[22] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for RCSFile(0LL);
  v3[23] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[24] = v8;
  v3[25] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_2CE9C, 0LL, 0LL);
}

uint64_t sub_2CE9C()
{
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v4 = (RCSServiceSession *)sub_124D0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v5 = *(int *)(v3 + 40);
  *(_DWORD *)(v0 + 336) = v5;
  uint64_t v6 = v2 + v5 + *(int *)(v1 + 52);
  *(void *)(v0 + 208) = *(void *)(v6 + 16);
  uint64_t v7 = *(RCSServiceSession **)(v6 + 24);
  *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = v7;
  if (v7)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = RCSRichCards.files()();
    id v16 = v8;
    *(void *)(v0 + 224) = v8;
    uint64_t v17 = *(void *)v8[1].IMDTelephonyServiceSession_opaque;
    *(void *)(v0 + 232) = v17;
    if (v17)
    {
      uint64_t v18 = *(void *)(v0 + 192);
      uint64_t v19 = *(void *)(v0 + 168);
      uint64_t v21 = *(void *)(v0 + 136);
      uint64_t v20 = *(void *)(v0 + 144);
      uint64_t v22 = *(int *)(v21 + 44);
      *(_DWORD *)(v0 + 340) = v22;
      uint64_t v23 = *(void *)(v21 + 24);
      *(void *)(v0 + 240) = v23;
      *(void *)(v0 + 248) = *(void *)(v23 + 160);
      uint64_t v24 = type metadata accessor for MainActor(0LL);
      *(void *)(v0 + 256) = v24;
      int v25 = *(_DWORD *)(v18 + 80);
      *(_DWORD *)(v0 + 344) = v25;
      uint64_t v26 = *(void *)(v18 + 72);
      *(void *)(v0 + 272) = v4;
      *(void *)(v0 + 280) = 0LL;
      *(void *)(v0 + 264) = v26;
      uint64_t v27 = *(void *)(v0 + 176);
      uint64_t v28 = *(void *)(v0 + 160);
      uint64_t v29 = (uint64_t)&v16->IMDTelephonyServiceSession_opaque[(v25 + 32LL) & ~(unint64_t)v25];
      uint64_t v30 = v20 + *(int *)(v0 + 336);
      sub_C934(v29, *(void *)(v0 + 200), type metadata accessor for RCSFile);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v27, v20, v21);
      *(void *)(v0 + 288) = *(void *)(v20 + v22);
      uint64_t v31 = sub_C934(v30, v28, type metadata accessor for RCSMessage);
      *(void *)(v0 + 296) = static MainActor.shared.getter(v31);
      uint64_t v32 = dispatch thunk of Actor.unownedExecutor.getter(v24, &protocol witness table for MainActor);
      return swift_task_switch(sub_2D304, v32, v33);
    }

    swift_bridgeObjectRelease(v8, v9, v10, v11, v12, v13, v14, v15);
    swift_bridgeObjectRelease(v7, v35, v36, v37, v38, v39, v40, v41);
  }

  id v42 = objc_allocWithZone(&OBJC_CLASS___IMUrlToTransferMap);
  swift_bridgeObjectRetain();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v4, v44, v45, v46, v47, v48, v49, v50);
  id v51 = [v42 initWithUrlToTransferGuids:isa];

  id v52 = [v51 dictionaryRepresentation];
  unint64_t v53 = (RCSServiceSession *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v52,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  uint64_t v54 = RCSRichCards.attributes.getter();
  uint64_t v55 = IMUrlToTransferMapAttributeName;
  uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMUrlToTransferMapAttributeName);
  id v58 = v57;
  uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
  uint64_t v67 = (RCSServiceSession *)v60;
  if (!*(void *)v53[1].IMDTelephonyServiceSession_opaque || (unint64_t v68 = sub_14490(v59, v60), (v60 & 1) == 0))
  {
    *(_OWORD *)(v0 + swift_weakDestroy(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    swift_bridgeObjectRelease(v53, (SEL)v60, v61, v62, v63, v64, v65, v66);
    swift_bridgeObjectRelease(v67, v99, v100, v101, v102, v103, v104, v105);
    goto LABEL_10;
  }

  sub_12224(*(void *)v53[3].state + 32 * v68, v0 + 16);
  swift_bridgeObjectRelease(v53, v69, v70, v71, v72, v73, v74, v75);
  swift_bridgeObjectRelease(v67, v76, v77, v78, v79, v80, v81, v82);
  if (!*(void *)(v0 + 40))
  {
LABEL_10:
    sub_1231C(v0 + 16, &qword_76588);
    sub_2976C(v56, (uint64_t)v58, (_OWORD *)(v0 + 48));
    swift_bridgeObjectRelease(v58, v106, v107, v108, v109, v110, v111, v112);
    sub_1231C(v0 + 48, &qword_76588);
    uint64_t v84 = (RCSServiceSession *)v54;
    goto LABEL_11;
  }

  sub_121F4((_OWORD *)(v0 + 16), (_OWORD *)(v0 + 80));
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v54);
  sub_29BB8((_OWORD *)(v0 + 80), v56, (uint64_t)v58, isUniquelyReferenced_nonNull_native);
  uint64_t v84 = (RCSServiceSession *)v54;
  swift_bridgeObjectRelease((RCSServiceSession *)0x8000000000000000LL, v85, v86, v87, v88, v89, v90, v91);
  swift_bridgeObjectRelease(v58, v92, v93, v94, v95, v96, v97, v98);
LABEL_11:
  uint64_t v114 = *(void *)(v0 + 136);
  uint64_t v113 = *(void *)(v0 + 144);
  id v115 = *(void **)(v113 + 8);
  id v116 = (RCSServiceSession *)sub_6D3C((uint64_t)v84);
  swift_bridgeObjectRelease(v84, v117, v118, v119, v120, v121, v122, v123);
  Class v124 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v116, v125, v126, v127, v128, v129, v130, v131);
  uint64_t v132 = swift_bridgeObjectRetain();
  id v133 = sub_35048(v132, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))sub_35130);
  swift_bridgeObjectRelease(v4, v134, v135, v136, v137, v138, v139, v140);
  Class v141 = Array._bridgeToObjectiveC()().super.isa;
  swift_release(v133);
  [v115 appendRichCards:v124 transferGuids:v141];

  uint64_t v149 = *(int *)(v114 + 48);
  uint64_t v150 = *(void *)(v113 + v149);
  if ((v150 & 1) == 0) {
    *(void *)(v113 + v149) = v150 | 1;
  }
  uint64_t v151 = *(void *)(v0 + 200);
  uint64_t v152 = *(void *)(v0 + 176);
  uint64_t v153 = *(void *)(v0 + 160);
  swift_bridgeObjectRelease(v4, v142, v143, v144, v145, v146, v147, v148);
  swift_task_dealloc(v151);
  swift_task_dealloc(v152);
  swift_task_dealloc(v153);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2D304()
{
  uint64_t v1 = v0[30];
  uint64_t v2 = (uint64_t (*)(uint64_t, void, uint64_t))v0[31];
  uint64_t v3 = v0[27];
  uint64_t v4 = v0[20];
  uint64_t v5 = v0[17];
  swift_release(v0[37]);
  uint64_t v6 = v2(v4, *(void *)(v5 + 16), v1);
  v0[38] = v6;
  sub_11324(v4, type metadata accessor for RCSMessage);
  uint64_t v7 = (uint64_t **)swift_task_alloc(dword_7739C);
  v0[39] = (uint64_t)v7;
  *uint64_t v7 = v0;
  v7[1] = (uint64_t *)sub_2D3B0;
  return sub_386E0(v0[25], v0[26], v3, v6, v0[17]);
}

uint64_t sub_2D3B0(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 312LL);
  v3[40] = a1;
  v3[41] = v1;
  swift_task_dealloc(v4);
  uint64_t v5 = (void *)v3[38];
  if (v1)
  {
    uint64_t v6 = (RCSServiceSession *)v3[27];
    uint64_t v7 = (RCSServiceSession *)v3[28];
    uint64_t v9 = v3[21];
    uint64_t v8 = v3[22];
    uint64_t v10 = v3[17];

    swift_bridgeObjectRelease(v6, v11, v12, v13, v14, v15, v16, v17);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    swift_bridgeObjectRelease(v7, v18, v19, v20, v21, v22, v23, v24);
    int v25 = sub_2DAE0;
  }

  else
  {
    (*(void (**)(void, void))(v3[21] + 8LL))(v3[22], v3[17]);

    int v25 = sub_2D474;
  }

  return swift_task_switch(v25, 0LL, 0LL);
}

uint64_t sub_2D474()
{
  uint64_t v1 = *(void **)(v0 + 320);
  if (!v1)
  {
    uint64_t v27 = *(RCSServiceSession **)(v0 + 272);
    goto LABEL_21;
  }

  uint64_t v2 = type metadata accessor for RCSFile.DispositionInformation(0LL);
  uint64_t v3 = URL.absoluteString.getter(v2);
  uint64_t v5 = v4;
  id v6 = [v1 guid];
  uint64_t v7 = (RCSServiceSession *)(v0 + 272);
  uint64_t v8 = *(RCSServiceSession **)(v0 + 272);
  if (!v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_14490(v3, (uint64_t)v5);
    char v29 = (char)v28;
    swift_bridgeObjectRelease(v8, v28, v30, v31, v32, v33, v34, v35);
    if ((v29 & 1) == 0)
    {
      swift_bridgeObjectRelease(v5, v36, v37, v38, v39, v40, v41, v42);

      uint64_t v27 = *(RCSServiceSession **)v7->IMDTelephonyServiceSession_opaque;
      goto LABEL_21;
    }

    uint64_t v8 = (RCSServiceSession *)(v0 + 112);
    Swift::String v43 = *(RCSServiceSession **)v7->IMDTelephonyServiceSession_opaque;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)v7->IMDTelephonyServiceSession_opaque);
    *(void *)(v0 + 112) = v43;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_10;
    }
    goto LABEL_33;
  }

  uint64_t v9 = v6;
  uint64_t v10 = (RCSServiceSession **)(v0 + 120);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v229 = v12;

  uint64_t v13 = swift_isUniquelyReferenced_nonNull_native(v8);
  *(void *)(v0 + 120) = v8;
  unint64_t v14 = sub_14490(v3, (uint64_t)v5);
  uint64_t v22 = *(void *)v8[1].IMDTelephonyServiceSession_opaque;
  BOOL v23 = (v15 & 1) == 0;
  BOOL v24 = __OFADD__(v22, v23);
  uint64_t v25 = v22 + v23;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    LOBYTE(v9) = (_BYTE)v15;
    if (*(void *)(*(void *)v7->IMDTelephonyServiceSession_opaque + 24LL) < v25)
    {
      sub_149AC(v25, v13);
      uint64_t v8 = *v10;
      unint64_t v14 = sub_14490(v3, (uint64_t)v5);
LABEL_12:
      uint64_t v27 = *v10;
      if ((v9 & 1) != 0)
      {
LABEL_13:
        uint64_t v75 = *(void *)v27[3].state + 16 * v14;
        swift_bridgeObjectRelease(*(RCSServiceSession **)(v75 + 8), v15, v16, v17, v18, v19, v20, v21);
        *(void *)uint64_t v75 = v11;
        *(void *)(v75 + 8) = v229;
LABEL_19:
        swift_bridgeObjectRelease((RCSServiceSession *)0x8000000000000000LL, v76, v77, v78, v79, v80, v81, v82);
        id v74 = v5;
        goto LABEL_20;
      }

      goto LABEL_17;
    }

    if ((v13 & 1) != 0) {
      goto LABEL_12;
    }
  }

  uint64_t v8 = (RCSServiceSession *)(v0 + 120);
  unint64_t v83 = v14;
  sub_14EB4();
  unint64_t v14 = v83;
  uint64_t v27 = *v10;
LABEL_17:
  *(void *)&v27[4].IMDTelephonyServiceSession_opaque[8 * (v14 >> 6)] |= 1LL << v14;
  uint64_t v84 = (uint64_t *)(*(void *)v27[3].IMDTelephonyServiceSession_opaque + 16 * v14);
  *uint64_t v84 = v3;
  v84[1] = (uint64_t)v5;
  SEL v85 = (uint64_t *)(*(void *)v27[3].state + 16 * v14);
  *SEL v85 = v11;
  v85[1] = v229;
  uint64_t v86 = *(void *)v27[1].IMDTelephonyServiceSession_opaque;
  BOOL v24 = __OFADD__(v86, 1LL);
  uint64_t v87 = v86 + 1;
  if (!v24)
  {
    *(void *)v27[1].IMDTelephonyServiceSession_opaque = v87;
    swift_bridgeObjectRetain();
    goto LABEL_19;
  }

  __break(1u);
LABEL_33:
  sub_14EB4();
  uint64_t v7 = v8;
LABEL_10:
  uint64_t v27 = *(RCSServiceSession **)v7->IMDTelephonyServiceSession_opaque;
  swift_bridgeObjectRelease( *(RCSServiceSession **)(*(void *)(*(void *)v7->IMDTelephonyServiceSession_opaque + 48LL) + 16 * v3 + 8),  v45,  v46,  v47,  v48,  v49,  v50,  v51);
  id v52 = *(RCSServiceSession **)(*(void *)v27[3].state + 16 * v3 + 8);
  sub_5A2E0(v3, (uint64_t)v27);
  swift_bridgeObjectRelease((RCSServiceSession *)0x8000000000000000LL, v53, v54, v55, v56, v57, v58, v59);
  swift_bridgeObjectRelease(v5, v60, v61, v62, v63, v64, v65, v66);
  id v74 = v52;
LABEL_20:
  swift_bridgeObjectRelease(v74, v67, v68, v69, v70, v71, v72, v73);

LABEL_21:
  uint64_t v88 = *(void *)(v0 + 232);
  uint64_t v89 = *(void *)(v0 + 280) + 1LL;
  sub_11324(*(void *)(v0 + 200), type metadata accessor for RCSFile);
  if (v89 != v88)
  {
    uint64_t v162 = *(void *)(v0 + 280) + 1LL;
    *(void *)(v0 + 272) = v27;
    *(void *)(v0 + 280) = v162;
    uint64_t v163 = *(void *)(v0 + 256);
    uint64_t v164 = *(int *)(v0 + 340);
    uint64_t v166 = *(void *)(v0 + 168);
    uint64_t v165 = *(void *)(v0 + 176);
    uint64_t v167 = *(void *)(v0 + 160);
    uint64_t v169 = *(void *)(v0 + 136);
    uint64_t v168 = *(void *)(v0 + 144);
    uint64_t v170 = v168 + *(int *)(v0 + 336);
    sub_C934( *(void *)(v0 + 224)
    + ((*(unsigned __int8 *)(v0 + 344) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 344))
    + *(void *)(v0 + 264) * v162,
      *(void *)(v0 + 200),
      type metadata accessor for RCSFile);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v166 + 16))(v165, v168, v169);
    *(void *)(v0 + 288) = *(void *)(v168 + v164);
    uint64_t v171 = sub_C934(v170, v167, type metadata accessor for RCSMessage);
    *(void *)(v0 + 296) = static MainActor.shared.getter(v171);
    uint64_t v172 = dispatch thunk of Actor.unownedExecutor.getter(v163, &protocol witness table for MainActor);
    return swift_task_switch(sub_2D304, v172, v173);
  }

  id v97 = *(RCSServiceSession **)(v0 + 216);
  swift_bridgeObjectRelease(*(RCSServiceSession **)(v0 + 224), v90, v91, v92, v93, v94, v95, v96);
  swift_bridgeObjectRelease(v97, v98, v99, v100, v101, v102, v103, v104);
  id v105 = objc_allocWithZone(&OBJC_CLASS___IMUrlToTransferMap);
  swift_bridgeObjectRetain();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v27, v107, v108, v109, v110, v111, v112, v113);
  id v114 = [v105 initWithUrlToTransferGuids:isa];

  id v115 = [v114 dictionaryRepresentation];
  id v116 = (RCSServiceSession *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v115,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  uint64_t v117 = RCSRichCards.attributes.getter();
  uint64_t v118 = IMUrlToTransferMapAttributeName;
  uint64_t v119 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMUrlToTransferMapAttributeName);
  id v121 = v120;
  uint64_t v122 = static String._unconditionallyBridgeFromObjectiveC(_:)(v118);
  id v130 = (RCSServiceSession *)v123;
  if (!*(void *)v116[1].IMDTelephonyServiceSession_opaque || (unint64_t v131 = sub_14490(v122, v123), (v123 & 1) == 0))
  {
    *(_OWORD *)(v0 + swift_weakDestroy(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    swift_bridgeObjectRelease(v116, (SEL)v123, v124, v125, v126, v127, v128, v129);
    swift_bridgeObjectRelease(v130, v174, v175, v176, v177, v178, v179, v180);
    goto LABEL_28;
  }

  sub_12224(*(void *)v116[3].state + 32 * v131, v0 + 16);
  swift_bridgeObjectRelease(v116, v132, v133, v134, v135, v136, v137, v138);
  swift_bridgeObjectRelease(v130, v139, v140, v141, v142, v143, v144, v145);
  if (!*(void *)(v0 + 40))
  {
LABEL_28:
    sub_1231C(v0 + 16, &qword_76588);
    sub_2976C(v119, (uint64_t)v121, (_OWORD *)(v0 + 48));
    swift_bridgeObjectRelease(v121, v181, v182, v183, v184, v185, v186, v187);
    sub_1231C(v0 + 48, &qword_76588);
    id v147 = (RCSServiceSession *)v117;
    goto LABEL_29;
  }

  sub_121F4((_OWORD *)(v0 + 16), (_OWORD *)(v0 + 80));
  char v146 = swift_isUniquelyReferenced_nonNull_native(v117);
  sub_29BB8((_OWORD *)(v0 + 80), v119, (uint64_t)v121, v146);
  id v147 = (RCSServiceSession *)v117;
  swift_bridgeObjectRelease((RCSServiceSession *)0x8000000000000000LL, v148, v149, v150, v151, v152, v153, v154);
  swift_bridgeObjectRelease(v121, v155, v156, v157, v158, v159, v160, v161);
LABEL_29:
  uint64_t v189 = *(void *)(v0 + 136);
  uint64_t v188 = *(void *)(v0 + 144);
  uint64_t v190 = *(void **)(v188 + 8);
  uint64_t v191 = (RCSServiceSession *)sub_6D3C((uint64_t)v147);
  swift_bridgeObjectRelease(v147, v192, v193, v194, v195, v196, v197, v198);
  Class v199 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v191, v200, v201, v202, v203, v204, v205, v206);
  uint64_t v207 = swift_bridgeObjectRetain();
  v208 = sub_35048(v207, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))sub_35130);
  swift_bridgeObjectRelease(v27, v209, v210, v211, v212, v213, v214, v215);
  Class v216 = Array._bridgeToObjectiveC()().super.isa;
  swift_release(v208);
  [v190 appendRichCards:v199 transferGuids:v216];

  uint64_t v224 = *(int *)(v189 + 48);
  uint64_t v225 = *(void *)(v188 + v224);
  if ((v225 & 1) == 0) {
    *(void *)(v188 + v224) = v225 | 1;
  }
  uint64_t v226 = *(void *)(v0 + 200);
  uint64_t v227 = *(void *)(v0 + 176);
  uint64_t v228 = *(void *)(v0 + 160);
  swift_bridgeObjectRelease(v27, v217, v218, v219, v220, v221, v222, v223);
  swift_task_dealloc(v226);
  swift_task_dealloc(v227);
  swift_task_dealloc(v228);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2DAE0()
{
  uint64_t v1 = *(RCSServiceSession **)(v0 + 272);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 160);
  sub_11324(v2, type metadata accessor for RCSFile);
  swift_bridgeObjectRelease(v1, v5, v6, v7, v8, v9, v10, v11);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2DB54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  void v4[9] = a2;
  uint64_t v6 = type metadata accessor for RCSFile(0LL);
  v4[12] = v6;
  unint64_t v7 = (*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[13] = swift_task_alloc(v7);
  v4[14] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for RCSMessage(0LL);
  v4[15] = v8;
  v4[16] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void *)(a3 - 8);
  v4[17] = v9;
  v4[18] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_2DC08, 0LL, 0LL);
}

uint64_t sub_2DC08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(v4 + 120);
  uint64_t v6 = *(void *)(v4 + 80);
  uint64_t v7 = *(void *)(v4 + 88);
  uint64_t v8 = *(int *)(v6 + 40);
  *(_DWORD *)(v4 + 240) = v8;
  uint64_t v9 = v7 + v8;
  uint64_t v10 = v7 + v8 + *(int *)(v5 + 52);
  uint64_t v11 = *(void *)(v10 + 24);
  *(void *)(v4 + 152) = v11;
  if (v11)
  {
    uint64_t v13 = *(void *)(v4 + 136);
    uint64_t v12 = *(void *)(v4 + 144);
    uint64_t v14 = *(void *)(v4 + 128);
    *(void *)(v4 + 160) = *(void *)(v10 + 16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v7, v6);
    *(void *)(v4 + 168) = *(void *)(v7 + *(int *)(v6 + 44));
    sub_C934(v9, v14, type metadata accessor for RCSMessage);
    uint64_t v15 = *(void *)(v6 + 24);
    *(void *)(v4 + 176) = v15;
    *(void *)(v4 + 184) = *(void *)(v15 + 160);
    uint64_t v16 = type metadata accessor for MainActor(0LL);
    uint64_t v17 = swift_bridgeObjectRetain();
    *(void *)(v4 + 192) = static MainActor.shared.getter(v17);
    uint64_t v18 = dispatch thunk of Actor.unownedExecutor.getter(v16, &protocol witness table for MainActor);
    return swift_task_switch(sub_2DE68, v18, v19);
  }

  else
  {
    uint64_t v21 = *(void *)(v4 + 96);
    uint64_t v22 = *(void *)(v4 + 64);
    uint64_t v23 = type metadata accessor for RCSMessageReceiver.MessageProcessingError( 0LL,  *(void *)(v6 + 16),  *(void *)(v6 + 24),  a4);
    uint64_t WitnessTable = swift_getWitnessTable( &protocol conformance descriptor for RCSMessageReceiver<A>.MessageProcessingError,  v23);
    swift_allocError(v23, WitnessTable, 0LL, 0LL);
    uint64_t v26 = v25;
    uint64_t v27 = (void *)(v25 + *(int *)(sub_5C28(&qword_76360) + 48));
    sub_C934(v9, v26, type metadata accessor for RCSMessage);
    _StringGuts.grow(_:)(42LL);
    *(void *)(v4 + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(v4 + 24) = 0xE000000000000000LL;
    v28._object = (void *)0x8000000000065B70LL;
    v28._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v28);
    _print_unlocked<A, B>(_:_:)( v22,  v4 + 16,  v21,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    v29._uint64_t countAndFlagsBits = 0x72742061206F7420LL;
    v29._object = (void *)0xEE00726566736E61LL;
    String.append(_:)(v29);
    uint64_t v30 = *(void *)(v4 + 24);
    *uint64_t v27 = *(void *)(v4 + 16);
    v27[1] = v30;
    uint64_t v31 = swift_storeEnumTagMultiPayload(v26, v23, 0LL);
    swift_willThrow(v31);
    uint64_t v32 = *(void *)(v4 + 128);
    uint64_t v34 = *(void *)(v4 + 104);
    uint64_t v33 = *(void *)(v4 + 112);
    swift_task_dealloc(*(void *)(v4 + 144));
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(void))(v4 + 8))();
  }

uint64_t sub_2DE68()
{
  uint64_t v1 = (uint64_t (*)(uint64_t))v0[23];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[16];
  uint64_t v4 = v0[10];
  swift_release(v0[24]);
  v0[25] = *(void *)(v4 + 16);
  uint64_t v5 = v1(v3);
  v0[26] = v5;
  sub_11324(v3, type metadata accessor for RCSMessage);
  uint64_t v6 = (uint64_t **)swift_task_alloc(dword_7739C);
  v0[27] = (uint64_t)v6;
  *uint64_t v6 = v0;
  v6[1] = (uint64_t *)sub_2DF1C;
  return sub_386E0(v0[8], v0[20], v2, v5, v0[10]);
}

uint64_t sub_2DF1C(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 216LL);
  v3[28] = a1;
  v3[29] = v1;
  swift_task_dealloc(v4);
  uint64_t v5 = (void *)v3[26];
  uint64_t v6 = (RCSServiceSession *)v3[19];
  (*(void (**)(void, void))(v3[17] + 8LL))(v3[18], v3[10]);
  swift_bridgeObjectRelease(v6, v7, v8, v9, v10, v11, v12, v13);

  if (v1) {
    uint64_t v14 = sub_2E6C8;
  }
  else {
    uint64_t v14 = sub_2DFB4;
  }
  return swift_task_switch(v14, 0LL, 0LL);
}

uint64_t sub_2DFB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void **)(v4 + 224);
  if (v5)
  {
    uint64_t v6 = *(void *)(v4 + 72);
    SEL v7 = *(void **)(*(void *)(v4 + 88) + 8LL);
    id v8 = [*(id *)(v4 + 224) guid];
    [v7 appendFileTransferWithGUID:v8];

    if (v6)
    {
      uint64_t v9 = RCSChipList.attributes.getter();
      Class isa = (RCSServiceSession *)v9;
      if (v9)
      {
        id v11 = (RCSServiceSession *)sub_6D3C(v9);
        swift_bridgeObjectRelease(isa, v12, v13, v14, v15, v16, v17, v18);
        Class isa = (RCSServiceSession *)Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v11, v19, v20, v21, v22, v23, v24, v25);
      }
    }

    else
    {
      Class isa = 0LL;
    }

    uint64_t v42 = *(void *)(v4 + 80);
    uint64_t v43 = *(void *)(v4 + 88);
    [v7 appendChipList:isa];

    uint64_t v44 = *(int *)(v42 + 48);
    uint64_t v45 = *(void *)(v43 + v44);
    if ((v45 & 1) == 0) {
      *(void *)(v43 + v44) = v45 | 1;
    }
    uint64_t v46 = *(void *)(v4 + 96);
    uint64_t v47 = *(void *)(v4 + 64) + *(int *)(v46 + 20);
    uint64_t v48 = type metadata accessor for RCSFile.DispositionInformation(0LL);
    if (*(_BYTE *)(v47 + *(int *)(v48 + 36)) == 2 && (id v49 = (uint64_t *)(v47 + *(int *)(v48 + 40)), (v49[1] & 1) == 0))
    {
      uint64_t v94 = *v49;
      if (qword_76B90 != -1) {
        swift_once(&qword_76B90, sub_21C04);
      }
      uint64_t v95 = type metadata accessor for Logger(0LL);
      uint64_t v96 = sub_6298(v95, (uint64_t)static Logger.rcs);
      id v97 = (os_log_s *)Logger.logObject.getter(v96);
      os_log_type_t v98 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v97, v98))
      {
        id v99 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        *(_DWORD *)id v99 = 134217984;
        *(void *)(v4 + 56) = v94;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 + 56, v4 + 64);
        _os_log_impl( &dword_0,  v97,  v98,  "RCSFile disposition is .render and has timeLength %f, marking as audio message",  v99,  0xCu);
        swift_slowDealloc(v99, -1LL, -1LL);
      }

      uint64_t v100 = *(void *)(v43 + v44);
      if ((v100 & 0x200000) == 0) {
        *(void *)(v43 + v44) = v100 | 0x200000;
      }
    }

    else
    {
      sub_475DC();
      unsigned __int8 v51 = v50;
      NSString v52 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v51, v53, v54, v55, v56, v57, v58, v59);
      if (objc_msgSend(v52, "im_isAudioMessageExtension"))
      {
        uint64_t v110 = v44;
        uint64_t v111 = v43;
        if (qword_76B90 != -1) {
          swift_once(&qword_76B90, sub_21C04);
        }
        uint64_t v61 = *(void *)(v4 + 104);
        uint64_t v60 = *(void *)(v4 + 112);
        uint64_t v62 = *(void *)(v4 + 64);
        uint64_t v63 = type metadata accessor for Logger(0LL);
        sub_6298(v63, (uint64_t)static Logger.rcs);
        sub_C934(v62, v60, type metadata accessor for RCSFile);
        sub_C934(v62, v61, type metadata accessor for RCSFile);
        id v64 = v52;
        id v65 = (os_log_s *)Logger.logObject.getter(v64);
        os_log_type_t v66 = static os_log_type_t.info.getter();
        BOOL v67 = os_log_type_enabled(v65, v66);
        uint64_t v68 = *(void *)(v4 + 104);
        uint64_t v69 = *(void *)(v4 + 112);
        if (v67)
        {
          uint64_t v107 = *(void *)(v4 + 104);
          uint64_t v70 = swift_slowAlloc(32LL, -1LL);
          SEL v106 = (void *)swift_slowAlloc(8LL, -1LL);
          uint64_t v109 = swift_slowAlloc(64LL, -1LL);
          v112[0] = v109;
          *(_DWORD *)uint64_t v70 = 136315650;
          uint64_t v71 = v69 + *(int *)(v46 + 20);
          log = v65;
          uint64_t v72 = *(void *)(v71 + 24);
          unsigned __int8 v73 = *(RCSServiceSession **)(v71 + 32);
          swift_bridgeObjectRetain();
          *(void *)(v4 + 32) = sub_B004(v72, (unint64_t)v73, v112);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 + 32, v4 + 40);
          swift_bridgeObjectRelease(v73, v74, v75, v76, v77, v78, v79, v80);
          sub_11324(v69, type metadata accessor for RCSFile);
          *(_WORD *)(v70 + 12) = 2112;
          *(void *)(v4 + 40) = v64;
          id v81 = v64;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 + 40, v4 + 48);
          *SEL v106 = v64;

          unsigned __int8 v82 = v81;
          *(_WORD *)(v70 + 22) = 2080;
          uint64_t v83 = v107 + *(int *)(v46 + 20);
          uint64_t v84 = *(void *)(v83 + 8);
          SEL v85 = *(RCSServiceSession **)(v83 + 16);
          swift_bridgeObjectRetain();
          *(void *)(v4 + 48) = sub_B004(v84, (unint64_t)v85, v112);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 + 48, v4 + 56);
          swift_bridgeObjectRelease(v85, v86, v87, v88, v89, v90, v91, v92);
          sub_11324(v107, type metadata accessor for RCSFile);
          _os_log_impl( &dword_0,  log,  v66,  "Marking audio message based on type %s inferred ext %@ original filename %s",  (uint8_t *)v70,  0x20u);
          uint64_t v93 = sub_5C28(&qword_76238);
          swift_arrayDestroy(v106, 1LL, v93);
          swift_slowDealloc(v106, -1LL, -1LL);
          swift_arrayDestroy(v109, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v109, -1LL, -1LL);
          swift_slowDealloc(v70, -1LL, -1LL);
        }

        else
        {
          sub_11324(*(void *)(v4 + 112), type metadata accessor for RCSFile);

          sub_11324(v68, type metadata accessor for RCSFile);
        }

        uint64_t v101 = *(void *)(v111 + v110);
        if ((v101 & 0x200000) == 0) {
          *(void *)(v111 + v110) = v101 | 0x200000;
        }
      }

      else
      {
      }
    }

    uint64_t v102 = *(void *)(v4 + 128);
    uint64_t v104 = *(void *)(v4 + 104);
    uint64_t v103 = *(void *)(v4 + 112);
    swift_task_dealloc(*(void *)(v4 + 144));
    swift_task_dealloc(v102);
    swift_task_dealloc(v103);
    swift_task_dealloc(v104);
    unsigned __int8 v41 = *(uint64_t (**)(void))(v4 + 8);
  }

  else
  {
    uint64_t v26 = *(void *)(v4 + 96);
    uint64_t v27 = *(void *)(v4 + 64);
    uint64_t v28 = *(void *)(v4 + 88) + *(int *)(v4 + 240);
    uint64_t v29 = type metadata accessor for RCSMessageReceiver.MessageProcessingError( 0LL,  *(void *)(v4 + 200),  *(void *)(v4 + 176),  a4);
    uint64_t WitnessTable = swift_getWitnessTable( &protocol conformance descriptor for RCSMessageReceiver<A>.MessageProcessingError,  v29);
    swift_allocError(v29, WitnessTable, 0LL, 0LL);
    uint64_t v32 = v31;
    uint64_t v33 = (void *)(v31 + *(int *)(sub_5C28(&qword_76360) + 48));
    sub_C934(v28, v32, type metadata accessor for RCSMessage);
    v112[0] = 0LL;
    v112[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(42LL);
    *(void *)(v4 + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(v4 + 24) = 0xE000000000000000LL;
    v34._object = (void *)0x8000000000065B70LL;
    v34._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v34);
    _print_unlocked<A, B>(_:_:)( v27,  v4 + 16,  v26,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    v35._uint64_t countAndFlagsBits = 0x72742061206F7420LL;
    v35._object = (void *)0xEE00726566736E61LL;
    String.append(_:)(v35);
    uint64_t v36 = *(void *)(v4 + 24);
    *uint64_t v33 = *(void *)(v4 + 16);
    v33[1] = v36;
    uint64_t v37 = swift_storeEnumTagMultiPayload(v32, v29, 0LL);
    swift_willThrow(v37);
    uint64_t v38 = *(void *)(v4 + 128);
    uint64_t v40 = *(void *)(v4 + 104);
    uint64_t v39 = *(void *)(v4 + 112);
    swift_task_dealloc(*(void *)(v4 + 144));
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    unsigned __int8 v41 = *(uint64_t (**)(void))(v4 + 8);
  }

  return v41();
}

uint64_t sub_2E6C8()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 112);
  swift_task_dealloc(*(void *)(v0 + 144));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_2E724(uint64_t a1)
{
  uint64_t v2 = *(uint64_t *)((char *)v1 + *(int *)(a1 + 48));
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  if ((v2 & 8) == 0)
  {
    id v5 = [v1[1] body];
    [v3 setBody:v5];
  }

  id v6 = [v4 fileTransferGUIDs];
  [v3 setFileTransferGUIDs:v6];

  [v3 setFlags:v2];
  id v7 = String._bridgeToObjectiveC()();
  [v3 setFallbackHash:v7];
}

uint64_t sub_2E810(uint64_t a1, uint64_t a2)
{
  v3[19] = a2;
  v3[20] = v2;
  v3[18] = a1;
  uint64_t v4 = *v2;
  uint64_t v5 = type metadata accessor for RCSFile(0LL);
  v3[21] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_5C28(&qword_76228);
  v3[22] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for RCSMessage(0LL);
  v3[23] = v7;
  v3[24] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)(v4 + 80);
  v3[25] = v8;
  uint64_t v9 = *(void *)(v4 + 88);
  v3[26] = v9;
  uint64_t v11 = type metadata accessor for RCSMessageReceiver.MessageProcessingContext(0LL, v8, v9, v10);
  v3[27] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v3[28] = v12;
  v3[29] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_2E8F0, 0LL, 0LL);
}

void sub_2E8F0()
{
  uint64_t v1 = *(void **)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v5 = *(void *)(v0 + 152);
  uint64_t v6 = *(void *)(v0 + 160);
  uint64_t v7 = *(void **)(v0 + 144);
  sub_C934(v5, v4, type metadata accessor for RCSMessage);
  uint64_t v8 = *(void *)(v6 + 16);
  id v9 = v7;
  swift_unknownObjectRetain(v8);
  sub_2CC18(v9, v4, v8, v3, v2, v1);
  sub_CB1C(v5, v0 + 16);
  if ((*(_BYTE *)(v0 + 138) & 1) != 0)
  {
    uint64_t v10 = *(void **)(v0 + 144);
    uint64_t v12 = *(void *)(v0 + 16);
    uint64_t v11 = *(RCSServiceSession **)(v0 + 24);
    id v13 = *(RCSServiceSession **)(v0 + 40);
    id v14 = *(RCSServiceSession **)(v0 + 48);
    id v15 = *(RCSServiceSession **)(v0 + 64);
    NSString v16 = String._bridgeToObjectiveC()();
    [v10 setSender:v16];

    NSString v17 = String._bridgeToObjectiveC()();
    [v10 setUnformattedID:v17];

    if (v12 == 7103860 && v11 == (RCSServiceSession *)0xE300000000000000LL
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v12, v11, 7103860LL, 0xE300000000000000LL, 0LL) & 1) != 0)
    {
      NSString v25 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v14, v26, v27, v28, v29, v30, v31, v32);
      swift_bridgeObjectRelease(v13, v33, v34, v35, v36, v37, v38, v39);
      swift_bridgeObjectRelease(v11, v40, v41, v42, v43, v44, v45, v46);
      swift_bridgeObjectRelease(v15, v47, v48, v49, v50, v51, v52, v53);
    }

    else
    {
      uint64_t v76 = *(void *)(v0 + 184);
      uint64_t v77 = *(void *)(v0 + 152);
      swift_bridgeObjectRelease(v14, v18, v19, v20, v21, v22, v23, v24);
      swift_bridgeObjectRelease(v13, v78, v79, v80, v81, v82, v83, v84);
      swift_bridgeObjectRelease(v11, v85, v86, v87, v88, v89, v90, v91);
      swift_bridgeObjectRelease(v15, v92, v93, v94, v95, v96, v97, v98);
      else {
        NSString v25 = 0LL;
      }
    }

    id v54 = *(void **)(v0 + 144);
    id v55 = (id)((uint64_t (*)(NSString))IMCountryCodeForNumber)(v25);

    [v54 setCountryCode:v55];
    sub_CB58(v0 + 80);
  }

  else
  {
    uint64_t v56 = *(void *)(v0 + 232);
    uint64_t v57 = *(int *)(*(void *)(v0 + 216) + 48LL);
    uint64_t v58 = *(void *)(v56 + v57);
    if ((v58 & 4) == 0) {
      *(void *)(v56 + v57) = v58 | 4;
    }
    sub_CB8C(v0 + 16);
  }

  uint64_t v59 = *(void *)(v0 + 176);
  sub_21AAC(*(void *)(v0 + 152) + *(int *)(*(void *)(v0 + 184) + 28LL), v59, &qword_76228);
  uint64_t v60 = type metadata accessor for RCSMessage.Content(0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 48LL))(v59, 1LL, v60) == 1)
  {
    uint64_t v63 = *(void *)(v0 + 224);
    uint64_t v62 = *(void *)(v0 + 232);
    uint64_t v64 = *(void *)(v0 + 216);
    uint64_t v65 = *(void *)(v0 + 152);
    uint64_t v66 = type metadata accessor for RCSMessageReceiver.MessageProcessingError( 0LL,  *(void *)(v0 + 200),  *(void *)(v0 + 208),  v61);
    uint64_t WitnessTable = swift_getWitnessTable( &protocol conformance descriptor for RCSMessageReceiver<A>.MessageProcessingError,  v66);
    swift_allocError(v66, WitnessTable, 0LL, 0LL);
    uint64_t v69 = v68;
    uint64_t v70 = (void *)(v68 + *(int *)(sub_5C28(&qword_76360) + 48));
    sub_C934(v65, v69, type metadata accessor for RCSMessage);
    void *v70 = 0xD000000000000044LL;
    v70[1] = 0x8000000000065980LL;
    uint64_t v71 = swift_storeEnumTagMultiPayload(v69, v66, 0LL);
    swift_willThrow(v71);
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v64);
    uint64_t v72 = *(void *)(v0 + 192);
    uint64_t v74 = *(void *)(v0 + 168);
    uint64_t v73 = *(void *)(v0 + 176);
    swift_task_dealloc(*(void *)(v0 + 232));
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    __asm { BR              X0 }
  }

  id v75 = (char *)&loc_2EC28
      + *((int *)qword_2F158 + swift_getEnumCaseMultiPayload(*(void *)(v0 + 176), v60));
  __asm { BR              X10 }

uint64_t sub_2F17C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 256);
  *(void *)(*v1 + 264) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(*(RCSServiceSession **)(v2 + 240), v4, v5, v6, v7, v8, v9, v10);
    uint64_t v11 = sub_2F27C;
  }

  else
  {
    uint64_t v11 = sub_2F1E8;
  }

  return swift_task_switch(v11, 0LL, 0LL);
}

uint64_t sub_2F1E8()
{
  uint64_t v1 = *(RCSServiceSession **)(v0 + 240);
  swift_release(*(void *)(v0 + 248));
  swift_bridgeObjectRelease(v1, v2, v3, v4, v5, v6, v7, v8);
  uint64_t v10 = *(void *)(v0 + 224);
  uint64_t v9 = *(void *)(v0 + 232);
  uint64_t v11 = *(void *)(v0 + 216);
  uint64_t v12 = *(void *)(v0 + 192);
  uint64_t v14 = *(void *)(v0 + 168);
  uint64_t v13 = *(void *)(v0 + 176);
  sub_2E724(v11);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  swift_task_dealloc(v9);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2F27C()
{
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 216);
  swift_release(*(void *)(v0 + 248));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v6 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 176);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2F2F8()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 280LL);
  *(void *)(*(void *)v1 + 288LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_2F4EC;
  }
  else {
    uint64_t v3 = sub_2F35C;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_2F35C()
{
  uint64_t v1 = *(void *)(v0 + 168);
  swift_release(*(void *)(v0 + 272));
  sub_11324(v1, type metadata accessor for RCSFile);
  uint64_t v3 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v4 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 192);
  uint64_t v7 = *(void *)(v0 + 168);
  uint64_t v6 = *(void *)(v0 + 176);
  sub_2E724(v4);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2F3FC()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 304LL);
  *(void *)(*(void *)v1 + 312LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_2F57C;
  }
  else {
    uint64_t v3 = sub_2F460;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_2F460()
{
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v6 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 176);
  sub_2E724(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2F4EC()
{
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v4 = *(void *)(v0 + 168);
  swift_release(*(void *)(v0 + 272));
  sub_11324(v4, type metadata accessor for RCSFile);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v5 = *(void *)(v0 + 192);
  uint64_t v7 = *(void *)(v0 + 168);
  uint64_t v6 = *(void *)(v0 + 176);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2F57C()
{
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 216);
  swift_release(*(void *)(v0 + 296));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v6 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 176);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2F5F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v157 = a2;
  uint64_t v4 = *v2;
  uint64_t v5 = sub_5C28(&qword_772A0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v150 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v158 = v8;
  uint64_t v159 = v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v150 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  id v156 = (char *)&v150 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  id v153 = (char *)&v150 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  SEL v155 = (char *)&v150 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  id v150 = (char *)&v150 - v20;
  __chkstk_darwin(v19);
  unsigned __int8 v154 = (char *)&v150 - v21;
  uint64_t v22 = type metadata accessor for RCSMessage(0LL);
  uint64_t v23 = __chkstk_darwin(v22);
  NSString v25 = (char *)&v150 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = __chkstk_darwin(v23);
  uint64_t v152 = (uint64_t)&v150 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v151 = (uint64_t)&v150 - v29;
  __chkstk_darwin(v28);
  id v31 = (char *)&v150 - v30;
  uint64_t v33 = *(void *)(a1 + 144);
  unsigned __int8 v32 = *(RCSServiceSession **)(a1 + 152);
  sub_C934(a1, (uint64_t)&v150 - v30, v34);
  if (v32)
  {
    id v35 = v32;
  }

  else
  {
    uint64_t v33 = *((void *)v31 + 16);
    id v35 = (RCSServiceSession *)*((void *)v31 + 17);
    swift_bridgeObjectRetain();
  }

  swift_bridgeObjectRetain();
  sub_11324((uint64_t)v31, type metadata accessor for RCSMessage);
  if (((*(uint64_t (**)(uint64_t, RCSServiceSession *, void))(*(void *)(v4 + 88) + 112LL))( v33,  v35,  *(void *)(v4 + 80)) & 1) != 0)
  {
    swift_bridgeObjectRelease(v35, v36, v37, v38, v39, v40, v41, v42);
    id v43 = v156;
    UUID.init()(v44);
    uint64_t v45 = v158;
    if (qword_76B90 != -1) {
      swift_once(&qword_76B90, sub_21C04);
    }
    uint64_t v46 = type metadata accessor for Logger(0LL);
    sub_6298(v46, (uint64_t)static Logger.rcs);
    uint64_t v47 = v159;
    (*(void (**)(char *, char *, uint64_t))(v159 + 16))(v12, v43, v45);
    uint64_t v48 = sub_C934(a1, (uint64_t)v25, type metadata accessor for RCSMessage);
    id v49 = (os_log_s *)Logger.logObject.getter(v48);
    os_log_type_t v50 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = swift_slowAlloc(22LL, -1LL);
      uint64_t v52 = swift_slowAlloc(64LL, -1LL);
      uint64_t v161 = v52;
      *(_DWORD *)uint64_t v51 = 136315394;
      uint64_t v53 = UUID.uuidString.getter(v52);
      id v55 = (RCSServiceSession *)v54;
      uint64_t v160 = sub_B004(v53, v54, &v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, &v161);
      swift_bridgeObjectRelease(v55, v56, v57, v58, v59, v60, v61, v62);
      (*(void (**)(char *, uint64_t))(v159 + 8))(v12, v45);
      *(_WORD *)(v51 + 12) = 2080;
      uint64_t v63 = *((void *)v25 + 16);
      unint64_t v64 = *((void *)v25 + 17);
      swift_bridgeObjectRetain();
      uint64_t v160 = sub_B004(v63, v64, &v161);
      uint64_t v47 = v159;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, &v161);
      uint64_t v65 = (RCSServiceSession *)v64;
      uint64_t v45 = v158;
      swift_bridgeObjectRelease(v65, v66, v67, v68, v69, v70, v71, v72);
      sub_11324((uint64_t)v25, type metadata accessor for RCSMessage);
      _os_log_impl( &dword_0,  v49,  v50,  "Assigning a random GUID %s to RCS message %s due to database collision",  (uint8_t *)v51,  0x16u);
      swift_arrayDestroy(v52, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1LL, -1LL);
      uint64_t v73 = v51;
      id v43 = v156;
      swift_slowDealloc(v73, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v47 + 8))(v12, v45);
      sub_11324((uint64_t)v25, type metadata accessor for RCSMessage);
    }

    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v47 + 32))(v157, v43, v45);
  }

  else
  {
    UUID.init(uuidString:)(v33, v35);
    swift_bridgeObjectRelease(v35, v74, v75, v76, v77, v78, v79, v80);
    uint64_t v82 = v158;
    uint64_t v81 = v159;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v159 + 48))(v7, 1LL, v158) == 1)
    {
      uint64_t v83 = sub_1231C((uint64_t)v7, &qword_772A0);
      unsigned __int8 v84 = v155;
      UUID.init()(v83);
      if (qword_76B90 != -1) {
        swift_once(&qword_76B90, sub_21C04);
      }
      uint64_t v85 = type metadata accessor for Logger(0LL);
      sub_6298(v85, (uint64_t)static Logger.rcs);
      id v86 = v153;
      (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v153, v84, v82);
      uint64_t v87 = v152;
      uint64_t v88 = sub_C934(a1, v152, type metadata accessor for RCSMessage);
      id v89 = (os_log_s *)Logger.logObject.getter(v88);
      os_log_type_t v90 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v89, v90))
      {
        unsigned __int8 v91 = v86;
        uint64_t v92 = swift_slowAlloc(22LL, -1LL);
        uint64_t v93 = swift_slowAlloc(64LL, -1LL);
        id v156 = (char *)v93;
        uint64_t v161 = v93;
        *(_DWORD *)uint64_t v92 = 136315394;
        uint64_t v94 = UUID.uuidString.getter(v93);
        id v96 = (RCSServiceSession *)v95;
        uint64_t v160 = sub_B004(v94, v95, &v161);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, &v161);
        swift_bridgeObjectRelease(v96, v97, v98, v99, v100, v101, v102, v103);
        uint64_t v104 = v91;
        unsigned __int8 v84 = v155;
        (*(void (**)(char *, uint64_t))(v81 + 8))(v104, v82);
        *(_WORD *)(v92 + 12) = 2080;
        uint64_t v105 = *(void *)(v87 + 128);
        unint64_t v106 = *(void *)(v87 + 136);
        swift_bridgeObjectRetain();
        uint64_t v160 = sub_B004(v105, v106, &v161);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, &v161);
        uint64_t v107 = (RCSServiceSession *)v106;
        uint64_t v81 = v159;
        swift_bridgeObjectRelease(v107, v108, v109, v110, v111, v112, v113, v114);
        sub_11324(v87, type metadata accessor for RCSMessage);
        _os_log_impl( &dword_0,  v89,  v90,  "Assigning a random GUID %s to RCS message %s due to non-UUID network ID",  (uint8_t *)v92,  0x16u);
        id v115 = v156;
        swift_arrayDestroy(v156, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v115, -1LL, -1LL);
        swift_slowDealloc(v92, -1LL, -1LL);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v81 + 8))(v86, v82);
        sub_11324(v87, type metadata accessor for RCSMessage);
      }

      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v81 + 32))(v157, v84, v82);
    }

    else
    {
      uint64_t v117 = *(void (**)(char *, char *, uint64_t))(v81 + 32);
      uint64_t v118 = v154;
      v117(v154, v7, v82);
      if (qword_76B90 != -1) {
        swift_once(&qword_76B90, sub_21C04);
      }
      uint64_t v119 = type metadata accessor for Logger(0LL);
      sub_6298(v119, (uint64_t)static Logger.rcs);
      id v120 = v150;
      (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v150, v118, v82);
      uint64_t v121 = v151;
      uint64_t v122 = sub_C934(a1, v151, type metadata accessor for RCSMessage);
      uint64_t v123 = (os_log_s *)Logger.logObject.getter(v122);
      os_log_type_t v124 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v123, v124))
      {
        uint64_t v125 = swift_slowAlloc(22LL, -1LL);
        id v156 = (char *)v117;
        uint64_t v126 = v125;
        uint64_t v127 = swift_slowAlloc(64LL, -1LL);
        SEL v155 = (char *)v127;
        uint64_t v161 = v127;
        *(_DWORD *)uint64_t v126 = 136315394;
        uint64_t v128 = UUID.uuidString.getter(v127);
        id v130 = (RCSServiceSession *)v129;
        uint64_t v160 = sub_B004(v128, v129, &v161);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, &v161);
        swift_bridgeObjectRelease(v130, v131, v132, v133, v134, v135, v136, v137);
        uint64_t v118 = v154;
        (*(void (**)(char *, uint64_t))(v81 + 8))(v120, v82);
        *(_WORD *)(v126 + 12) = 2080;
        uint64_t v138 = *(void *)(v121 + 128);
        unint64_t v139 = *(void *)(v121 + 136);
        swift_bridgeObjectRetain();
        uint64_t v160 = sub_B004(v138, v139, &v161);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, &v161);
        id v140 = (RCSServiceSession *)v139;
        uint64_t v82 = v158;
        swift_bridgeObjectRelease(v140, v141, v142, v143, v144, v145, v146, v147);
        sub_11324(v121, type metadata accessor for RCSMessage);
        _os_log_impl( &dword_0,  v123,  v124,  "Assigning GUID %s to RCS message %s as the network ID was a valid, unique UUID",  (uint8_t *)v126,  0x16u);
        SEL v148 = v155;
        swift_arrayDestroy(v155, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v148, -1LL, -1LL);
        uint64_t v149 = v126;
        uint64_t v117 = (void (*)(char *, char *, uint64_t))v156;
        swift_slowDealloc(v149, -1LL, -1LL);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v81 + 8))(v120, v82);
        sub_11324(v121, type metadata accessor for RCSMessage);
      }

      return ((uint64_t (*)(uint64_t, char *, uint64_t))v117)(v157, v118, v82);
    }
  }

uint64_t sub_2FEFC(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for RCSMessage(0LL);
  v2[4] = v3;
  v2[5] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  v2[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[7] = v5;
  v2[8] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v6 = (*(void *)(*(void *)(sub_5C28(&qword_76228) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  void v2[9] = swift_task_alloc(v6);
  v2[10] = swift_task_alloc(v6);
  uint64_t v7 = sub_5C28(qword_772C0);
  v2[11] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_2FFD8, 0LL, 0LL);
}

uint64_t sub_2FFD8()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[2];
  Date.init()();
  uint64_t v5 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v2, 0LL, 1LL, v5);
  sub_21AAC(v4 + *(int *)(v3 + 28), v1, &qword_76228);
  uint64_t v6 = type metadata accessor for RCSMessage.Content(0LL);
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL))(v1, 1LL, v6);
  uint64_t v8 = 0LL;
  if (v7 != 1)
  {
    uint64_t v9 = v0[9];
    sub_21AAC(v0[10], v9, &qword_76228);
    if (swift_getEnumCaseMultiPayload(v9, v6) == 4)
    {
      uint64_t v8 = 8LL;
    }

    else
    {
      sub_11324(v0[9], type metadata accessor for RCSMessage.Content);
      uint64_t v8 = 0LL;
    }
  }

  v0[12] = v8;
  sub_1231C(v0[10], &qword_76228);
  uint64_t v10 = type metadata accessor for MainActor(0LL);
  v0[13] = static MainActor.shared.getter(v10);
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter(v10, &protocol witness table for MainActor);
  return swift_task_switch(sub_30120, v11, v12);
}

uint64_t sub_30120()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[2];
  swift_release(v0[13]);
  sub_2F5F8(v2, v1);
  return swift_task_switch(sub_30178, 0LL, 0LL);
}

uint64_t sub_30178(uint64_t a1)
{
  uint64_t v3 = v1[11];
  uint64_t v2 = v1[12];
  uint64_t v4 = v1[7];
  uint64_t v5 = v1[8];
  uint64_t v6 = v1[6];
  uint64_t v31 = v1[5];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[2];
  uint64_t v9 = UUID.uuidString.getter(a1);
  uint64_t v11 = v10;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  id v12 = objc_allocWithZone(&OBJC_CLASS___IMMessageItem);
  id v13 = sub_31238(0LL, 0LL, v3, 0LL, 0LL, (uint64_t)_swiftEmptyArrayStorage, v2, 0LL, v9, v11, 0LL, 0LL);
  v1[14] = (uint64_t)v13;
  NSString v14 = String._bridgeToObjectiveC()();
  [v13 setFallbackHash:v14];

  uint64_t v15 = *(RCSServiceSession **)(v8 + *(int *)(v7 + 52) + 8);
  sub_C934(v8, v31, type metadata accessor for RCSMessage);
  uint64_t v16 = v1[5];
  if (v15)
  {
    swift_bridgeObjectRetain();
    id v17 = v13;
    sub_11324(v16, type metadata accessor for RCSMessage);
LABEL_4:
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v15, v20, v21, v22, v23, v24, v25, v26);
    goto LABEL_5;
  }

  uint64_t v15 = *(RCSServiceSession **)(v16 + *(int *)(v7 + 52) + 24);
  swift_bridgeObjectRetain();
  id v18 = v13;
  sub_11324(v16, type metadata accessor for RCSMessage);
  if (v15) {
    goto LABEL_4;
  }
  NSString v19 = 0LL;
LABEL_5:
  uint64_t v27 = v1[4];
  uint64_t v28 = v1[2];
  [v13 setDestinationCallerID:v19];

  uint64_t v29 = (uint64_t **)swift_task_alloc(dword_7721C);
  v1[15] = (uint64_t)v29;
  *uint64_t v29 = v1;
  v29[1] = (uint64_t *)sub_30368;
  return sub_2E810((uint64_t)v13, v1[2]);
}

uint64_t sub_30368()
{
  uint64_t v2 = *(void *)(*v1 + 120);
  uint64_t v3 = *v1;
  *(void *)(v3 + 128) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_30424, 0LL, 0LL);
  }
  uint64_t v5 = *(void *)(v3 + 80);
  uint64_t v7 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(v3 + 72);
  uint64_t v8 = *(void *)(v3 + 40);
  swift_task_dealloc(*(void *)(v3 + 88));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v3 + 8))(*(void *)(v3 + 112));
}

uint64_t sub_30424()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v5 = *(void *)(v0 + 40);

  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RCSMessageReceiver.process(rcsMessage:)(uint64_t a1)
{
  v2[26] = a1;
  v2[27] = v1;
  uint64_t v3 = *v1;
  v2[28] = *(void *)(*v1 + 88);
  v2[29] = *(void *)(v3 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(255LL);
  v2[30] = AssociatedTypeWitness;
  uint64_t v5 = type metadata accessor for Optional(0LL, AssociatedTypeWitness);
  v2[31] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[32] = v6;
  v2[33] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_5C28(&qword_76228);
  v2[34] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  v2[35] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[36] = swift_task_alloc(v9);
  v2[37] = swift_task_alloc(v9);
  v2[38] = swift_task_alloc(v9);
  v2[39] = swift_task_alloc(v9);
  return swift_task_switch(sub_30598, 0LL, 0LL);
}

uint64_t sub_30598()
{
  uint64_t v1 = v0[28];
  v0[40] = *(void *)(v0[27] + 16LL);
  v0[41] = *(void *)(v1 + 168);
  uint64_t v2 = type metadata accessor for MainActor(0LL);
  v0[42] = v2;
  v0[43] = static MainActor.shared.getter(v2);
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_30618, v3, v4);
}

uint64_t sub_30618()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 328);
  uint64_t v3 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v4 = *(void *)(v0 + 208);
  swift_release(*(void *)(v0 + 344));
  *(_BYTE *)(v0 + 472) = v1(v4, v2, v3) & 1;
  return swift_task_switch(sub_30688, 0LL, 0LL);
}

uint64_t sub_30688()
{
  if (*(_BYTE *)(v0 + 472) != 1)
  {
    uint64_t v12 = *(void *)(v0 + 272);
    uint64_t v13 = *(void *)(v0 + 208);
    uint64_t v14 = type metadata accessor for RCSMessage(0LL);
    *(void *)(v0 + 352) = v14;
    sub_21AAC(v13 + *(int *)(v14 + 28), v12, &qword_76228);
    uint64_t v15 = type metadata accessor for RCSMessage.Content(0LL);
    int v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v12, 1LL, v15);
    id v17 = *(__int128 **)(v0 + 272);
    if (v16 == 1)
    {
      sub_1231C(*(void *)(v0 + 272), &qword_76228);
    }

    else
    {
      uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(*(void *)(v0 + 272), v15);
      if ((_DWORD)EnumCaseMultiPayload == 3)
      {
        uint64_t v19 = *(void *)(v0 + 336);
        uint64_t v20 = *(void *)(v0 + 224);
        __int128 v21 = *v17;
        __int128 v22 = v17[2];
        *(_OWORD *)(v0 + 32) = v17[1];
        *(_OWORD *)(v0 + 48) = v22;
        *(_OWORD *)(v0 + swift_weakDestroy(v0 + 16) = v21;
        __int128 v23 = v17[3];
        __int128 v24 = v17[4];
        __int128 v25 = v17[6];
        *(_OWORD *)(v0 + 96) = v17[5];
        *(_OWORD *)(v0 + 112) = v25;
        *(_OWORD *)(v0 + 64) = v23;
        *(_OWORD *)(v0 + 80) = v24;
        *(void *)(v0 + 360) = *(void *)(v20 + 120);
        *(void *)(v0 + 368) = static MainActor.shared.getter(EnumCaseMultiPayload);
        uint64_t v26 = dispatch thunk of Actor.unownedExecutor.getter(v19, &protocol witness table for MainActor);
        uint64_t v28 = v27;
        uint64_t v29 = sub_30994;
        return swift_task_switch(v29, v26, v28);
      }

      sub_11324((uint64_t)v17, type metadata accessor for RCSMessage.Content);
    }

    sub_21AAC(*(void *)(v0 + 208) + *(int *)(v14 + 32), v0 + 168, &qword_76230);
    uint64_t v30 = *(void *)(v0 + 336);
    uint64_t v31 = *(void *)(v0 + 224);
    if (*(void *)(v0 + 192))
    {
      uint64_t v32 = sub_22168((__int128 *)(v0 + 168), v0 + 128);
      *(void *)(v0 + 384) = *(void *)(v31 + 128);
      *(void *)(v0 + 392) = static MainActor.shared.getter(v32);
      uint64_t v26 = dispatch thunk of Actor.unownedExecutor.getter(v30, &protocol witness table for MainActor);
      uint64_t v28 = v33;
      uint64_t v29 = sub_30ABC;
    }

    else
    {
      uint64_t v34 = sub_1231C(v0 + 168, &qword_76230);
      *(void *)(v0 + 400) = *(void *)(v31 + 136);
      *(void *)(v0 + 408) = static MainActor.shared.getter(v34);
      uint64_t v26 = dispatch thunk of Actor.unownedExecutor.getter(v30, &protocol witness table for MainActor);
      uint64_t v28 = v35;
      uint64_t v29 = sub_30CC0;
    }

    return swift_task_switch(v29, v26, v28);
  }

  if (qword_76B90 != -1) {
    swift_once(&qword_76B90, sub_21C04);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_6298(v1, (uint64_t)static Logger.rcs);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "Dropping message because the sender is blocked.", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 304);
  uint64_t v8 = *(void *)(v0 + 288);
  uint64_t v7 = *(void *)(v0 + 296);
  uint64_t v10 = *(void *)(v0 + 264);
  uint64_t v9 = *(void *)(v0 + 272);
  swift_task_dealloc(*(void *)(v0 + 312));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_30994()
{
  uint64_t v1 = (void (*)(uint64_t, void *, uint64_t, uint64_t))v0[45];
  uint64_t v3 = v0[28];
  uint64_t v2 = v0[29];
  uint64_t v4 = v0[26];
  swift_release(v0[46]);
  v1(v4, v0 + 2, v2, v3);
  v0[47] = 0LL;
  (*(void (**)(void, void))(v0[35] + 8LL))(v0[38], v0[30]);
  return swift_task_switch(sub_30A40, 0LL, 0LL);
}

uint64_t sub_30A40()
{
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v3 = *(void *)(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 296);
  uint64_t v5 = *(void *)(v0 + 264);
  uint64_t v4 = *(void *)(v0 + 272);
  swift_task_dealloc(*(void *)(v0 + 312));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_30ABC()
{
  uint64_t v1 = (void (*)(void *, uint64_t, uint64_t))v0[48];
  uint64_t v3 = v0[28];
  uint64_t v2 = v0[29];
  swift_release(v0[49]);
  v1(v0 + 16, v2, v3);
  return swift_task_switch(sub_30B2C, 0LL, 0LL);
}

uint64_t sub_30B2C()
{
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 240);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v2, 1LL, v3) == 1)
  {
    uint64_t v5 = *(void *)(v0 + 224);
    uint64_t v4 = *(void *)(v0 + 232);
    uint64_t v6 = *(void *)(v0 + 208);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 256) + 8LL))(v2, *(void *)(v0 + 248));
    uint64_t v8 = type metadata accessor for RCSMessageReceiver.MessageProcessingError(0LL, v4, v5, v7);
    uint64_t WitnessTable = swift_getWitnessTable( &protocol conformance descriptor for RCSMessageReceiver<A>.MessageProcessingError,  v8);
    swift_allocError(v8, WitnessTable, 0LL, 0LL);
    uint64_t v11 = v10;
    sub_C934(v6, v10, type metadata accessor for RCSMessage);
    uint64_t v12 = swift_storeEnumTagMultiPayload(v11, v8, 1LL);
    swift_willThrow(v12);
    sub_12204((void *)(v0 + 128));
    uint64_t v13 = *(void *)(v0 + 304);
    uint64_t v15 = *(void *)(v0 + 288);
    uint64_t v14 = *(void *)(v0 + 296);
    uint64_t v17 = *(void *)(v0 + 264);
    uint64_t v16 = *(void *)(v0 + 272);
    swift_task_dealloc(*(void *)(v0 + 312));
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v19 = *(void *)(v0 + 312);
    sub_12204((void *)(v0 + 128));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v19, v2, v3);
    uint64_t v20 = (void *)swift_task_alloc(dword_77194);
    *(void *)(v0 + 424) = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_30DB4;
    return sub_2FEFC(*(void *)(v0 + 208));
  }

uint64_t sub_30CC0()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[50];
  uint64_t v3 = v0[28];
  uint64_t v2 = v0[29];
  uint64_t v4 = v0[26];
  swift_release(v0[51]);
  v1(v4, v2, v3);
  v0[52] = 0LL;
  return swift_task_switch(sub_30D50, 0LL, 0LL);
}

uint64_t sub_30D50()
{
  uint64_t v1 = (uint64_t **)swift_task_alloc(dword_77194);
  v0[53] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = (uint64_t *)sub_30DB4;
  return sub_2FEFC(v0[26]);
}

uint64_t sub_30DB4(uint64_t a1)
{
  uint64_t v4 = *(void *)(*(void *)v2 + 424LL);
  uint64_t v5 = *(void **)v2;
  v5[54] = v1;
  swift_task_dealloc(v4);
  if (v1) {
    return swift_task_switch(sub_31164, 0LL, 0LL);
  }
  uint64_t v7 = v5[28];
  v5[55] = a1;
  uint64_t v8 = *(int **)(v7 + 176);
  uint64_t v10 = (int *)((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc(v8[1]);
  v5[56] = v9;
  *uint64_t v9 = v5;
  v9[1] = sub_30E7C;
  return ((uint64_t (*)(void, uint64_t, void, void, void, void))v10)( v5[36],  a1,  v5[26],  v5[39],  v5[29],  v5[28]);
}

uint64_t sub_30E7C()
{
  return swift_task_switch(sub_30ED0, 0LL, 0LL);
}

uint64_t sub_30ED0(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 336);
  uint64_t v3 = *(void *)(v1 + 224);
  *(_BYTE *)(v1 + 473) = *(_BYTE *)(*(void *)(v1 + 208) + *(int *)(*(void *)(v1 + 352) + 44LL));
  *(void *)(v1 + 456) = *(void *)(v3 + 16);
  *(void *)(v1 + 464) = static MainActor.shared.getter(a1);
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_30F50, v4, v5);
}

uint64_t sub_30F50()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 456);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 473);
  uint64_t v3 = *(void *)(v0 + 440);
  uint64_t v4 = *(void *)(v0 + 288);
  uint64_t v6 = *(void *)(v0 + 224);
  uint64_t v5 = *(void *)(v0 + 232);
  swift_release(*(void *)(v0 + 464));
  v1(v3, v4, v2, v5, v6);
  return swift_task_switch(sub_30FD0, 0LL, 0LL);
}

uint64_t sub_30FD0()
{
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v3 = *(void *)(v0 + 280);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v4 = *(void *)(v0 + 240);

  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v5(v2, v4);
  v5(v1, v4);
  uint64_t v6 = *(void *)(v0 + 304);
  uint64_t v8 = *(void *)(v0 + 288);
  uint64_t v7 = *(void *)(v0 + 296);
  uint64_t v10 = *(void *)(v0 + 264);
  uint64_t v9 = *(void *)(v0 + 272);
  swift_task_dealloc(*(void *)(v0 + 312));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_31074()
{
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v3 = *(void *)(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 296);
  uint64_t v5 = *(void *)(v0 + 264);
  uint64_t v4 = *(void *)(v0 + 272);
  swift_task_dealloc(*(void *)(v0 + 312));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_310F0()
{
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v3 = *(void *)(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 296);
  uint64_t v5 = *(void *)(v0 + 264);
  uint64_t v4 = *(void *)(v0 + 272);
  swift_task_dealloc(*(void *)(v0 + 312));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_31164()
{
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v3 = *(void *)(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 296);
  uint64_t v5 = *(void *)(v0 + 264);
  uint64_t v4 = *(void *)(v0 + 272);
  swift_task_dealloc(*(void *)(v0 + 312));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for RCSMessageReceiver.MessageProcessingError( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2C980(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RCSMessageReceiver.MessageProcessingError);
}

uint64_t RCSMessageReceiver.deinit()
{
  return v0;
}

uint64_t RCSMessageReceiver.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

id sub_31238( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = v12;
  if (a2)
  {
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v20 = 0LL;
  }

  uint64_t v21 = type metadata accessor for Date(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  Class isa = 0LL;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(a3, 1LL, v21) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(a3, v21);
  }

  if (a5)
  {
    v24.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a5);
    if (a6) {
      goto LABEL_8;
    }
  }

  else
  {
    v24.super.Class isa = 0LL;
    if (a6)
    {
LABEL_8:
      v25.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(a6);
      uint64_t v26 = a10;
      if (a8) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }

  v25.super.Class isa = 0LL;
  uint64_t v26 = a10;
  if (a8)
  {
LABEL_9:
    uint64_t v27 = (void *)_convertErrorToNSError(_:)(a8);
    swift_errorRelease(a8);
    uint64_t v28 = a12;
    if (v26) {
      goto LABEL_10;
    }
LABEL_15:
    NSString v29 = 0LL;
    if (v28) {
      goto LABEL_11;
    }
LABEL_16:
    NSString v30 = 0LL;
    goto LABEL_17;
  }

LABEL_14:
  uint64_t v27 = 0LL;
  uint64_t v28 = a12;
  if (!v26) {
    goto LABEL_15;
  }
LABEL_10:
  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v26);
  if (!v28) {
    goto LABEL_16;
  }
LABEL_11:
  NSString v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v28);
LABEL_17:
  id v31 = [v13 initWithSender:v20 time:isa body:a4 attributes:v24.super.isa fileTransferGUIDs:v25.super.isa flags:a7 error:v27 guid:v29 threadIdentifier:v30];

  return v31;
}

uint64_t sub_31430(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for RCSMessageReceiver<A>.MessageProcessingError, a1);
}

uint64_t sub_31440(uint64_t a1)
{
  uint64_t v2 = "\b";
  return swift_initClassMetadata2(a1, 0LL, 1LL, &v2, a1 + 96);
}

uint64_t type metadata accessor for RCSMessageReceiver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2C980(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RCSMessageReceiver);
}

uint64_t sub_3148C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24LL);
}

uint64_t sub_31494(uint64_t a1)
{
  uint64_t result = type metadata accessor for RCSMessage(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_getTupleTypeLayout2(v5, v4, &unk_602D8);
    v6[0] = v5;
    v6[1] = v4;
    swift_initEnumMetadataMultiPayload(a1, 0LL, 2LL, v6);
    return 0LL;
  }

  return result;
}

uint64_t sub_31518(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *(void *)a1 = *a2;
    a1 = v14 + ((v5 + 16LL) & ~(unint64_t)v5);
    swift_retain(v14);
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    char v8 = *((_BYTE *)a2 + 122);
    if (EnumCaseMultiPayload == 1)
    {
      if ((*((_BYTE *)a2 + 122) & 1) != 0)
      {
        uint64_t v9 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v9;
        uint64_t v10 = a2[3];
        *(void *)(a1 + swift_weakDestroy(v0 + 16) = a2[2];
        *(void *)(a1 + 24) = v10;
        uint64_t v11 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v11;
        *(void *)(a1 + 48) = a2[6];
        *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
        char v12 = *((_BYTE *)a2 + 121);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((v12 & 1) != 0)
        {
          __int128 v13 = *(_OWORD *)(a2 + 11);
          *(_OWORD *)(a1 + 88) = v13;
          (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 64, (uint64_t)(a2 + 8));
        }

        else
        {
          uint64_t v24 = a2[9];
          *(void *)(a1 + 64) = a2[8];
          *(void *)(a1 + 72) = v24;
          uint64_t v25 = a2[11];
          *(void *)(a1 + 80) = a2[10];
          *(void *)(a1 + 88) = v25;
          uint64_t v26 = a2[13];
          *(void *)(a1 + 96) = a2[12];
          *(void *)(a1 + 104) = v26;
          *(void *)(a1 + 112) = a2[14];
          *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        *(_BYTE *)(a1 + 121) = v12;
      }

      else
      {
        char v20 = *((_BYTE *)a2 + 57);
        if ((v20 & 1) != 0)
        {
          __int128 v21 = *(_OWORD *)(a2 + 3);
          *(_OWORD *)(a1 + 24) = v21;
          (**(void (***)(uint64_t, uint64_t *))(v21 - 8))(a1, a2);
        }

        else
        {
          uint64_t v30 = a2[1];
          *(void *)a1 = *a2;
          *(void *)(a1 + 8) = v30;
          uint64_t v31 = a2[3];
          *(void *)(a1 + swift_weakDestroy(v0 + 16) = a2[2];
          *(void *)(a1 + 24) = v31;
          uint64_t v32 = a2[5];
          *(void *)(a1 + 32) = a2[4];
          *(void *)(a1 + 40) = v32;
          *(void *)(a1 + 48) = a2[6];
          *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        *(_BYTE *)(a1 + 57) = v20;
      }

      *(_BYTE *)(a1 + 122) = v8;
      uint64_t v33 = a2[17];
      *(void *)(a1 + 128) = a2[16];
      *(void *)(a1 + 136) = v33;
      uint64_t v34 = a2[19];
      *(void *)(a1 + 144) = a2[18];
      *(void *)(a1 + 152) = v34;
      uint64_t v35 = (int *)type metadata accessor for RCSMessage(0LL);
      uint64_t v36 = v35[7];
      id v37 = (void *)(a1 + v36);
      id v38 = (uint64_t *)((char *)a2 + v36);
      uint64_t v39 = type metadata accessor for RCSMessage.Content(0LL);
      uint64_t v40 = *(void *)(v39 - 8);
      id v41 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v40 + 48);
      uint64_t v42 = v39;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v41(v38, 1LL, v42))
      {
        uint64_t v43 = sub_5C28(&qword_76228);
        memcpy(v37, v38, *(void *)(*(void *)(v43 - 8) + 64LL));
      }

      else
      {
        uint64_t v194 = v40;
        switch(swift_getEnumCaseMultiPayload(v38, v42))
        {
          case 0u:
            uint64_t v44 = v38[1];
            uint64_t v45 = v37;
            *id v37 = *v38;
            v37[1] = v44;
            uint64_t v46 = v38[2];
            _OWORD v37[2] = v46;
            swift_bridgeObjectRetain();
            swift_retain(v46);
            uint64_t v47 = v37;
            uint64_t v48 = v42;
            uint64_t v49 = 0LL;
            goto LABEL_52;
          case 1u:
            uint64_t v191 = v42;
            uint64_t v70 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
            uint64_t v71 = *(void *)(v70 - 8);
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v71 + 48))(v38, 1LL, v70))
            {
              uint64_t v72 = sub_5C28(&qword_76498);
              uint64_t v73 = v37;
              memcpy(v37, v38, *(void *)(*(void *)(v72 - 8) + 64LL));
            }

            else
            {
              uint64_t v188 = v71;
              uint64_t v73 = v37;
              *(_OWORD *)id v37 = *(_OWORD *)v38;
              _OWORD v37[2] = v38[2];
              uint64_t v101 = *(int *)(v70 + 24);
              id v182 = (char *)v38 + v101;
              id v185 = (char *)v37 + v101;
              uint64_t v102 = type metadata accessor for URL(0LL);
              unsigned __int8 v103 = *(void (**)(char *, char *, uint64_t))(*(void *)(v102 - 8) + 16LL);
              swift_bridgeObjectRetain();
              v103(v185, v182, v102);
              uint64_t v104 = *(int *)(v70 + 28);
              uint64_t v105 = (char *)v37 + v104;
              unint64_t v106 = (char *)v38 + v104;
              uint64_t v107 = type metadata accessor for Date(0LL);
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v107 - 8) + 16LL))(v105, v106, v107);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v188 + 56))(v37, 0LL, 1LL, v70);
            }

            uint64_t v108 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
            id v109 = (char *)v73 + v108;
            id v110 = (char *)v38 + v108;
            *(_OWORD *)id v109 = *(_OWORD *)((char *)v38 + v108);
            uint64_t v112 = *(void *)((char *)v38 + v108 + 16);
            uint64_t v111 = *(void *)((char *)v38 + v108 + 24);
            *((void *)v109 + 2) = v112;
            *((void *)v109 + 3) = v111;
            *((void *)v109 + 4) = *((void *)v110 + 4);
            id v113 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
            uint64_t v114 = v113[7];
            unsigned __int8 v180 = &v110[v114];
            id v183 = &v109[v114];
            uint64_t v115 = type metadata accessor for URL(0LL);
            id v179 = *(void (**)(char *, char *, uint64_t))(*(void *)(v115 - 8) + 16LL);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v179(v183, v180, v115);
            uint64_t v45 = v37;
            uint64_t v116 = v113[8];
            uint64_t v117 = &v109[v116];
            uint64_t v189 = &v110[v116];
            uint64_t v118 = type metadata accessor for Date(0LL);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v118 - 8) + 16LL))(v117, v189, v118);
            v109[v113[9]] = v110[v113[9]];
            uint64_t v119 = v113[10];
            id v120 = &v109[v119];
            uint64_t v121 = &v110[v119];
            v120[8] = v121[8];
            *(void *)id v120 = *(void *)v121;
            uint64_t v122 = *(int *)(sub_5C28(&qword_764A0) + 48);
            uint64_t v123 = *(void *)((char *)v38 + v122);
            *(void *)((char *)v45 + v122) = v123;
            swift_retain(v123);
            uint64_t v47 = v45;
            uint64_t v42 = v191;
            uint64_t v48 = v191;
            uint64_t v49 = 1LL;
            goto LABEL_52;
          case 2u:
            uint64_t v45 = v37;
            *(_OWORD *)id v37 = *(_OWORD *)v38;
            uint64_t v74 = v38[3];
            _OWORD v37[2] = v38[2];
            void v37[3] = v74;
            uint64_t v75 = v38[4];
            v37[4] = v75;
            swift_bridgeObjectRetain();
            swift_retain(v75);
            uint64_t v47 = v37;
            uint64_t v48 = v42;
            uint64_t v49 = 2LL;
            goto LABEL_52;
          case 3u:
            uint64_t v76 = v42;
            __int128 v77 = *(_OWORD *)(v38 + 3);
            uint64_t v45 = v37;
            *(_OWORD *)(v37 + 3) = v77;
            (**(void (***)(void *, void *))(v77 - 8))(v37, v38);
            uint64_t v78 = v38[6];
            v37[5] = v38[5];
            v37[6] = v78;
            v37[7] = v38[7];
            uint64_t v79 = v38[9];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v79)
            {
              v37[8] = v38[8];
              v37[9] = v79;
              uint64_t v81 = v38[10];
              unint64_t v80 = v38[11];
              swift_bridgeObjectRetain();
              sub_F120(v81, v80);
              v45[10] = v81;
              v45[11] = v80;
              uint64_t v82 = v38[13];
              v45[12] = v38[12];
              v45[13] = v82;
              swift_bridgeObjectRetain();
            }

            else
            {
              __int128 v124 = *((_OWORD *)v38 + 5);
              *((_OWORD *)v37 + 4) = *((_OWORD *)v38 + 4);
              *((_OWORD *)v37 + 5) = v124;
              *((_OWORD *)v37 + 6) = *((_OWORD *)v38 + 6);
            }

            uint64_t v47 = v45;
            uint64_t v42 = v76;
            uint64_t v48 = v76;
            uint64_t v49 = 3LL;
            goto LABEL_52;
          case 5u:
            uint64_t v83 = *v38;
            uint64_t v45 = v37;
            *id v37 = *v38;
            swift_retain(v83);
            uint64_t v47 = v37;
            uint64_t v48 = v42;
            uint64_t v49 = 5LL;
            goto LABEL_52;
          case 6u:
            uint64_t v84 = *v38;
            uint64_t v45 = v37;
            *id v37 = *v38;
            swift_retain(v84);
            uint64_t v47 = v37;
            uint64_t v48 = v42;
            uint64_t v49 = 6LL;
            goto LABEL_52;
          case 7u:
            uint64_t v85 = *v38;
            uint64_t v45 = v37;
            *id v37 = *v38;
            swift_retain(v85);
            uint64_t v47 = v37;
            uint64_t v48 = v42;
            uint64_t v49 = 7LL;
LABEL_52:
            swift_storeEnumTagMultiPayload(v47, v48, v49);
            uint64_t v40 = v194;
            break;
          default:
            uint64_t v45 = v37;
            memcpy(v37, v38, *(void *)(v40 + 64));
            break;
        }

        (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v45, 0LL, 1LL, v42);
      }

      uint64_t v125 = v35[8];
      uint64_t v126 = a1 + v125;
      uint64_t v127 = (uint64_t)a2 + v125;
      uint64_t v128 = *(uint64_t *)((char *)a2 + v125 + 24);
      if (v128)
      {
        uint64_t v129 = *(void *)(v127 + 32);
        *(void *)(v126 + 24) = v128;
        *(void *)(v126 + 32) = v129;
        (**(void (***)(void))(v128 - 8))();
      }

      else
      {
        __int128 v130 = *(_OWORD *)(v127 + 16);
        *(_OWORD *)uint64_t v126 = *(_OWORD *)v127;
        *(_OWORD *)(v126 + swift_weakDestroy(v0 + 16) = v130;
        *(void *)(v126 + 32) = *(void *)(v127 + 32);
      }

      *(void *)(a1 + v35[9]) = *(uint64_t *)((char *)a2 + v35[9]);
      *(_BYTE *)(a1 + v35[10]) = *((_BYTE *)a2 + v35[10]);
      *(_BYTE *)(a1 + v35[11]) = *((_BYTE *)a2 + v35[11]);
      *(void *)(a1 + v35[12]) = *(uint64_t *)((char *)a2 + v35[12]);
      uint64_t v131 = v35[13];
      id v132 = (void *)(a1 + v131);
      id v133 = (uint64_t *)((char *)a2 + v131);
      uint64_t v134 = v133[1];
      *id v132 = *v133;
      v132[1] = v134;
      uint64_t v135 = v133[3];
      v132[2] = v133[2];
      v132[3] = v135;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v136 = a1;
      uint64_t v137 = a3;
      uint64_t v138 = 1LL;
    }

    else
    {
      uint64_t v196 = a3;
      if ((*((_BYTE *)a2 + 122) & 1) != 0)
      {
        uint64_t v15 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v15;
        uint64_t v16 = a2[3];
        *(void *)(a1 + swift_weakDestroy(v0 + 16) = a2[2];
        *(void *)(a1 + 24) = v16;
        uint64_t v17 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v17;
        *(void *)(a1 + 48) = a2[6];
        *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
        char v18 = *((_BYTE *)a2 + 121);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((v18 & 1) != 0)
        {
          __int128 v19 = *(_OWORD *)(a2 + 11);
          *(_OWORD *)(a1 + 88) = v19;
          (**(void (***)(uint64_t, uint64_t))(v19 - 8))(a1 + 64, (uint64_t)(a2 + 8));
        }

        else
        {
          uint64_t v27 = a2[9];
          *(void *)(a1 + 64) = a2[8];
          *(void *)(a1 + 72) = v27;
          uint64_t v28 = a2[11];
          *(void *)(a1 + 80) = a2[10];
          *(void *)(a1 + 88) = v28;
          uint64_t v29 = a2[13];
          *(void *)(a1 + 96) = a2[12];
          *(void *)(a1 + 104) = v29;
          *(void *)(a1 + 112) = a2[14];
          *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        *(_BYTE *)(a1 + 121) = v18;
      }

      else
      {
        char v22 = *((_BYTE *)a2 + 57);
        if ((v22 & 1) != 0)
        {
          __int128 v23 = *(_OWORD *)(a2 + 3);
          *(_OWORD *)(a1 + 24) = v23;
          (**(void (***)(uint64_t, uint64_t *))(v23 - 8))(a1, a2);
        }

        else
        {
          uint64_t v50 = a2[1];
          *(void *)a1 = *a2;
          *(void *)(a1 + 8) = v50;
          uint64_t v51 = a2[3];
          *(void *)(a1 + swift_weakDestroy(v0 + 16) = a2[2];
          *(void *)(a1 + 24) = v51;
          uint64_t v52 = a2[5];
          *(void *)(a1 + 32) = a2[4];
          *(void *)(a1 + 40) = v52;
          *(void *)(a1 + 48) = a2[6];
          *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        *(_BYTE *)(a1 + 57) = v22;
      }

      *(_BYTE *)(a1 + 122) = v8;
      uint64_t v53 = a2[17];
      *(void *)(a1 + 128) = a2[16];
      *(void *)(a1 + 136) = v53;
      uint64_t v54 = a2[19];
      *(void *)(a1 + 144) = a2[18];
      *(void *)(a1 + 152) = v54;
      id v55 = (int *)type metadata accessor for RCSMessage(0LL);
      uint64_t v56 = v55[7];
      id v57 = (void *)(a1 + v56);
      id v58 = (uint64_t *)((char *)a2 + v56);
      uint64_t v59 = type metadata accessor for RCSMessage.Content(0LL);
      uint64_t v60 = *(void *)(v59 - 8);
      id v61 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v60 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v61(v58, 1LL, v59))
      {
        uint64_t v62 = sub_5C28(&qword_76228);
        memcpy(v57, v58, *(void *)(*(void *)(v62 - 8) + 64LL));
        uint64_t v63 = v196;
      }

      else
      {
        uint64_t v195 = v60;
        switch(swift_getEnumCaseMultiPayload(v58, v59))
        {
          case 0u:
            uint64_t v64 = v58[1];
            uint64_t v65 = v57;
            void *v57 = *v58;
            v57[1] = v64;
            uint64_t v66 = v58[2];
            v57[2] = v66;
            swift_bridgeObjectRetain();
            swift_retain(v66);
            id v67 = v57;
            uint64_t v68 = v59;
            uint64_t v69 = 0LL;
            goto LABEL_60;
          case 1u:
            uint64_t v86 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
            uint64_t v87 = *(void *)(v86 - 8);
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v87 + 48))(v58, 1LL, v86))
            {
              uint64_t v88 = sub_5C28(&qword_76498);
              id v89 = v57;
              memcpy(v57, v58, *(void *)(*(void *)(v88 - 8) + 64LL));
            }

            else
            {
              uint64_t v192 = v87;
              id v89 = v57;
              *(_OWORD *)id v57 = *(_OWORD *)v58;
              v57[2] = v58[2];
              uint64_t v139 = *(int *)(v86 + 24);
              id v186 = (char *)v58 + v139;
              uint64_t v190 = (char *)v57 + v139;
              uint64_t v140 = type metadata accessor for URL(0LL);
              SEL v141 = *(void (**)(char *, char *, uint64_t))(*(void *)(v140 - 8) + 16LL);
              swift_bridgeObjectRetain();
              v141(v190, v186, v140);
              uint64_t v142 = *(int *)(v86 + 28);
              id v143 = (char *)v57 + v142;
              id v144 = (char *)v58 + v142;
              uint64_t v145 = type metadata accessor for Date(0LL);
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v145 - 8) + 16LL))(v143, v144, v145);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v192 + 56))(v57, 0LL, 1LL, v86);
            }

            uint64_t v146 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
            unsigned __int8 v147 = (char *)v89 + v146;
            SEL v148 = (char *)v58 + v146;
            *(_OWORD *)unsigned __int8 v147 = *(_OWORD *)((char *)v58 + v146);
            uint64_t v150 = *(void *)((char *)v58 + v146 + 16);
            uint64_t v149 = *(void *)((char *)v58 + v146 + 24);
            *((void *)v147 + 2) = v150;
            *((void *)v147 + 3) = v149;
            *((void *)v147 + 4) = *((void *)v148 + 4);
            uint64_t v151 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
            uint64_t v152 = v151[7];
            id v184 = &v148[v152];
            unsigned __int8 v187 = &v147[v152];
            uint64_t v153 = type metadata accessor for URL(0LL);
            SEL v181 = *(void (**)(char *, char *, uint64_t))(*(void *)(v153 - 8) + 16LL);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v181(v187, v184, v153);
            uint64_t v65 = v57;
            uint64_t v154 = v151[8];
            SEL v155 = &v147[v154];
            id v193 = &v148[v154];
            uint64_t v156 = type metadata accessor for Date(0LL);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v156 - 8) + 16LL))(v155, v193, v156);
            v147[v151[9]] = v148[v151[9]];
            uint64_t v157 = v151[10];
            uint64_t v158 = &v147[v157];
            uint64_t v159 = &v148[v157];
            v158[8] = v159[8];
            *(void *)uint64_t v158 = *(void *)v159;
            uint64_t v160 = *(int *)(sub_5C28(&qword_764A0) + 48);
            uint64_t v161 = *(void *)((char *)v58 + v160);
            *(void *)((char *)v65 + v160) = v161;
            swift_retain(v161);
            id v67 = v65;
            uint64_t v68 = v59;
            uint64_t v69 = 1LL;
            goto LABEL_60;
          case 2u:
            uint64_t v65 = v57;
            *(_OWORD *)id v57 = *(_OWORD *)v58;
            uint64_t v90 = v58[3];
            v57[2] = v58[2];
            v57[3] = v90;
            uint64_t v91 = v58[4];
            v57[4] = v91;
            swift_bridgeObjectRetain();
            swift_retain(v91);
            id v67 = v57;
            uint64_t v68 = v59;
            uint64_t v69 = 2LL;
            goto LABEL_60;
          case 3u:
            __int128 v92 = *(_OWORD *)(v58 + 3);
            uint64_t v65 = v57;
            *(_OWORD *)(v57 + 3) = v92;
            (**(void (***)(void *, void *))(v92 - 8))(v57, v58);
            uint64_t v93 = v58[6];
            v57[5] = v58[5];
            v57[6] = v93;
            v57[7] = v58[7];
            uint64_t v94 = v58[9];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v94)
            {
              _BYTE v57[8] = v58[8];
              v57[9] = v94;
              uint64_t v96 = v58[10];
              unint64_t v95 = v58[11];
              swift_bridgeObjectRetain();
              sub_F120(v96, v95);
              v65[10] = v96;
              v65[11] = v95;
              uint64_t v97 = v58[13];
              v65[12] = v58[12];
              v65[13] = v97;
              swift_bridgeObjectRetain();
            }

            else
            {
              __int128 v178 = *((_OWORD *)v58 + 5);
              *((_OWORD *)v57 + 4) = *((_OWORD *)v58 + 4);
              *((_OWORD *)v57 + 5) = v178;
              *((_OWORD *)v57 + 6) = *((_OWORD *)v58 + 6);
            }

            uint64_t v63 = v196;
            swift_storeEnumTagMultiPayload(v65, v59, 3LL);
            goto LABEL_62;
          case 5u:
            uint64_t v98 = *v58;
            uint64_t v65 = v57;
            void *v57 = *v58;
            swift_retain(v98);
            id v67 = v57;
            uint64_t v68 = v59;
            uint64_t v69 = 5LL;
            goto LABEL_60;
          case 6u:
            uint64_t v99 = *v58;
            uint64_t v65 = v57;
            void *v57 = *v58;
            swift_retain(v99);
            id v67 = v57;
            uint64_t v68 = v59;
            uint64_t v69 = 6LL;
            goto LABEL_60;
          case 7u:
            uint64_t v100 = *v58;
            uint64_t v65 = v57;
            void *v57 = *v58;
            swift_retain(v100);
            id v67 = v57;
            uint64_t v68 = v59;
            uint64_t v69 = 7LL;
LABEL_60:
            swift_storeEnumTagMultiPayload(v67, v68, v69);
            uint64_t v60 = v195;
            break;
          default:
            uint64_t v65 = v57;
            memcpy(v57, v58, *(void *)(v60 + 64));
            break;
        }

        uint64_t v63 = v196;
LABEL_62:
        (*(void (**)(void *, void, uint64_t, uint64_t))(v60 + 56))(v65, 0LL, 1LL, v59);
      }

      uint64_t v162 = v55[8];
      uint64_t v163 = a1 + v162;
      uint64_t v164 = (uint64_t)a2 + v162;
      uint64_t v165 = *(uint64_t *)((char *)a2 + v162 + 24);
      if (v165)
      {
        uint64_t v166 = *(void *)(v164 + 32);
        *(void *)(v163 + 24) = v165;
        *(void *)(v163 + 32) = v166;
        (**(void (***)(void))(v165 - 8))();
      }

      else
      {
        __int128 v167 = *(_OWORD *)(v164 + 16);
        *(_OWORD *)uint64_t v163 = *(_OWORD *)v164;
        *(_OWORD *)(v163 + swift_weakDestroy(v0 + 16) = v167;
        *(void *)(v163 + 32) = *(void *)(v164 + 32);
      }

      *(void *)(a1 + v55[9]) = *(uint64_t *)((char *)a2 + v55[9]);
      *(_BYTE *)(a1 + v55[10]) = *((_BYTE *)a2 + v55[10]);
      *(_BYTE *)(a1 + v55[11]) = *((_BYTE *)a2 + v55[11]);
      *(void *)(a1 + v55[12]) = *(uint64_t *)((char *)a2 + v55[12]);
      uint64_t v168 = v55[13];
      uint64_t v169 = (void *)(a1 + v168);
      uint64_t v170 = (uint64_t *)((char *)a2 + v168);
      uint64_t v171 = v170[1];
      void *v169 = *v170;
      v169[1] = v171;
      uint64_t v172 = v170[3];
      v169[2] = v170[2];
      v169[3] = v172;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v173 = *(int *)(sub_5C28(&qword_76360) + 48);
      SEL v174 = (void *)(a1 + v173);
      id v175 = (uint64_t *)((char *)a2 + v173);
      uint64_t v176 = v175[1];
      *SEL v174 = *v175;
      v174[1] = v176;
      swift_bridgeObjectRetain();
      uint64_t v136 = a1;
      uint64_t v137 = v63;
      uint64_t v138 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v136, v137, v138);
  }

  return a1;
}

void sub_3227C(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {
    if ((*(_BYTE *)(a1 + 122) & 1) != 0)
    {
      swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 8), v3, v4, v5, v6, v7, v8, v9);
      swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 24), v10, v11, v12, v13, v14, v15, v16);
      swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 32), v17, v18, v19, v20, v21, v22, v23);
      swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 48), v24, v25, v26, v27, v28, v29, v30);
      if ((*(_BYTE *)(a1 + 121) & 1) != 0)
      {
        id v38 = (void *)(a1 + 64);
LABEL_10:
        sub_12204(v38);
LABEL_18:
        swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 136), v68, v69, v70, v71, v72, v73, v74);
        swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 152), v140, v141, v142, v143, v144, v145, v146);
        unsigned __int8 v147 = (int *)type metadata accessor for RCSMessage(0LL);
        SEL v148 = (uint64_t *)(a1 + v147[7]);
        uint64_t v149 = type metadata accessor for RCSMessage.Content(0LL);
        if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v149 - 8) + 48LL))( v148,  1LL,  v149))
        {
          switch(swift_getEnumCaseMultiPayload(v148, v149))
          {
            case 0u:
              swift_bridgeObjectRelease((RCSServiceSession *)v148[1], v150, v151, v152, v153, v154, v155, v156);
              uint64_t v157 = v148[2];
              goto LABEL_31;
            case 1u:
              uint64_t v190 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
              if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v190 - 8) + 48LL))( v148,  1LL,  v190))
              {
                swift_bridgeObjectRelease((RCSServiceSession *)v148[2], v191, v192, v193, v194, v195, v196, v197);
                uint64_t v198 = (uint64_t)v148 + *(int *)(v190 + 24);
                uint64_t v199 = type metadata accessor for URL(0LL);
                (*(void (**)(uint64_t, uint64_t))(*(void *)(v199 - 8) + 8LL))(v198, v199);
                uint64_t v200 = (uint64_t)v148 + *(int *)(v190 + 28);
                uint64_t v201 = type metadata accessor for Date(0LL);
                (*(void (**)(uint64_t, uint64_t))(*(void *)(v201 - 8) + 8LL))(v200, v201);
              }

              uint64_t v202 = (uint64_t)v148 + *(int *)(type metadata accessor for RCSFile(0LL) + 20);
              swift_bridgeObjectRelease(*(RCSServiceSession **)(v202 + 16), v203, v204, v205, v206, v207, v208, v209);
              swift_bridgeObjectRelease(*(RCSServiceSession **)(v202 + 32), v210, v211, v212, v213, v214, v215, v216);
              uint64_t v217 = type metadata accessor for RCSFile.DispositionInformation(0LL);
              uint64_t v218 = v202 + *(int *)(v217 + 28);
              uint64_t v219 = type metadata accessor for URL(0LL);
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v219 - 8) + 8LL))(v218, v219);
              uint64_t v220 = v202 + *(int *)(v217 + 32);
              uint64_t v221 = type metadata accessor for Date(0LL);
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v221 - 8) + 8LL))(v220, v221);
              uint64_t v157 = *(uint64_t *)((char *)v148 + *(int *)(sub_5C28(&qword_764A0) + 48));
              goto LABEL_31;
            case 2u:
              swift_bridgeObjectRelease((RCSServiceSession *)v148[3], v150, v151, v152, v153, v154, v155, v156);
              uint64_t v157 = v148[4];
              goto LABEL_31;
            case 3u:
              sub_12204(v148);
              swift_bridgeObjectRelease((RCSServiceSession *)v148[5], v246, v247, v248, v249, v250, v251, v252);
              swift_bridgeObjectRelease((RCSServiceSession *)v148[7], v253, v254, v255, v256, v257, v258, v259);
              v260 = (RCSServiceSession *)v148[9];
              if (v260)
              {
                swift_bridgeObjectRelease(v260, v150, v151, v152, v153, v154, v155, v156);
                sub_F5F8(v148[10], v148[11]);
                swift_bridgeObjectRelease((RCSServiceSession *)v148[13], v261, v262, v263, v264, v265, v266, v267);
              }

              break;
            case 5u:
            case 6u:
            case 7u:
              uint64_t v157 = *v148;
LABEL_31:
              swift_release(v157);
              break;
            default:
              break;
          }
        }

        v222 = (void *)(a1 + v147[8]);
        if (v222[3]) {
          sub_12204(v222);
        }
        swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + v147[9]), v150, v151, v152, v153, v154, v155, v156);
        swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + v147[12]), v223, v224, v225, v226, v227, v228, v229);
        uint64_t v230 = a1 + v147[13];
        swift_bridgeObjectRelease(*(RCSServiceSession **)(v230 + 8), v231, v232, v233, v234, v235, v236, v237);
        v245 = (RCSServiceSession **)(v230 + 24);
        goto LABEL_46;
      }

      swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 72), v31, v32, v33, v34, v35, v36, v37);
      swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 88), v82, v83, v84, v85, v86, v87, v88);
      swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 96), v89, v90, v91, v92, v93, v94, v95);
      unsigned __int8 v103 = *(RCSServiceSession **)(a1 + 112);
    }

    else
    {
      if ((*(_BYTE *)(a1 + 57) & 1) != 0)
      {
        id v38 = (void *)a1;
        goto LABEL_10;
      }

      swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 8), v3, v4, v5, v6, v7, v8, v9);
      swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 24), v126, v127, v128, v129, v130, v131, v132);
      swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 32), v133, v134, v135, v136, v137, v138, v139);
      unsigned __int8 v103 = *(RCSServiceSession **)(a1 + 48);
    }

    swift_bridgeObjectRelease(v103, v96, v97, v98, v99, v100, v101, v102);
    goto LABEL_18;
  }

  if ((*(_BYTE *)(a1 + 122) & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 57) & 1) != 0)
    {
      id v67 = (void *)a1;
      goto LABEL_13;
    }

    swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 8), v3, v4, v5, v6, v7, v8, v9);
    swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 24), v158, v159, v160, v161, v162, v163, v164);
    swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 32), v165, v166, v167, v168, v169, v170, v171);
    uint64_t v125 = *(RCSServiceSession **)(a1 + 48);
LABEL_22:
    swift_bridgeObjectRelease(v125, v118, v119, v120, v121, v122, v123, v124);
    goto LABEL_23;
  }

  swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 8), v3, v4, v5, v6, v7, v8, v9);
  swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 24), v39, v40, v41, v42, v43, v44, v45);
  swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 32), v46, v47, v48, v49, v50, v51, v52);
  swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 48), v53, v54, v55, v56, v57, v58, v59);
  if ((*(_BYTE *)(a1 + 121) & 1) == 0)
  {
    swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 72), v60, v61, v62, v63, v64, v65, v66);
    swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 88), v104, v105, v106, v107, v108, v109, v110);
    swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 96), v111, v112, v113, v114, v115, v116, v117);
    uint64_t v125 = *(RCSServiceSession **)(a1 + 112);
    goto LABEL_22;
  }

  id v67 = (void *)(a1 + 64);
LABEL_13:
  sub_12204(v67);
LABEL_23:
  swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 136), v75, v76, v77, v78, v79, v80, v81);
  swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 152), v172, v173, v174, v175, v176, v177, v178);
  id v179 = (int *)type metadata accessor for RCSMessage(0LL);
  unsigned __int8 v180 = (uint64_t *)(a1 + v179[7]);
  uint64_t v181 = type metadata accessor for RCSMessage.Content(0LL);
  if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v181 - 8) + 48LL))(v180, 1LL, v181))
  {
    switch(swift_getEnumCaseMultiPayload(v180, v181))
    {
      case 0u:
        swift_bridgeObjectRelease((RCSServiceSession *)v180[1], v182, v183, v184, v185, v186, v187, v188);
        uint64_t v189 = v180[2];
        goto LABEL_42;
      case 1u:
        uint64_t v268 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
        if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v268 - 8) + 48LL))( v180,  1LL,  v268))
        {
          swift_bridgeObjectRelease((RCSServiceSession *)v180[2], v269, v270, v271, v272, v273, v274, v275);
          uint64_t v276 = (uint64_t)v180 + *(int *)(v268 + 24);
          uint64_t v277 = type metadata accessor for URL(0LL);
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v277 - 8) + 8LL))(v276, v277);
          uint64_t v278 = (uint64_t)v180 + *(int *)(v268 + 28);
          uint64_t v279 = type metadata accessor for Date(0LL);
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v279 - 8) + 8LL))(v278, v279);
        }

        uint64_t v280 = (uint64_t)v180 + *(int *)(type metadata accessor for RCSFile(0LL) + 20);
        swift_bridgeObjectRelease(*(RCSServiceSession **)(v280 + 16), v281, v282, v283, v284, v285, v286, v287);
        swift_bridgeObjectRelease(*(RCSServiceSession **)(v280 + 32), v288, v289, v290, v291, v292, v293, v294);
        uint64_t v295 = type metadata accessor for RCSFile.DispositionInformation(0LL);
        uint64_t v296 = v280 + *(int *)(v295 + 28);
        uint64_t v297 = type metadata accessor for URL(0LL);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v297 - 8) + 8LL))(v296, v297);
        uint64_t v298 = v280 + *(int *)(v295 + 32);
        uint64_t v299 = type metadata accessor for Date(0LL);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v299 - 8) + 8LL))(v298, v299);
        uint64_t v189 = *(uint64_t *)((char *)v180 + *(int *)(sub_5C28(&qword_764A0) + 48));
        goto LABEL_42;
      case 2u:
        swift_bridgeObjectRelease((RCSServiceSession *)v180[3], v182, v183, v184, v185, v186, v187, v188);
        uint64_t v189 = v180[4];
        goto LABEL_42;
      case 3u:
        sub_12204(v180);
        swift_bridgeObjectRelease((RCSServiceSession *)v180[5], v323, v324, v325, v326, v327, v328, v329);
        swift_bridgeObjectRelease((RCSServiceSession *)v180[7], v330, v331, v332, v333, v334, v335, v336);
        v337 = (RCSServiceSession *)v180[9];
        if (v337)
        {
          swift_bridgeObjectRelease(v337, v182, v183, v184, v185, v186, v187, v188);
          sub_F5F8(v180[10], v180[11]);
          swift_bridgeObjectRelease((RCSServiceSession *)v180[13], v338, v339, v340, v341, v342, v343, v344);
        }

        break;
      case 5u:
      case 6u:
      case 7u:
        uint64_t v189 = *v180;
LABEL_42:
        swift_release(v189);
        break;
      default:
        break;
    }
  }

  v300 = (void *)(a1 + v179[8]);
  if (v300[3]) {
    sub_12204(v300);
  }
  swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + v179[9]), v182, v183, v184, v185, v186, v187, v188);
  swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + v179[12]), v301, v302, v303, v304, v305, v306, v307);
  uint64_t v308 = a1 + v179[13];
  swift_bridgeObjectRelease(*(RCSServiceSession **)(v308 + 8), v309, v310, v311, v312, v313, v314, v315);
  swift_bridgeObjectRelease(*(RCSServiceSession **)(v308 + 24), v316, v317, v318, v319, v320, v321, v322);
  v245 = (RCSServiceSession **)(a1 + *(int *)(sub_5C28(&qword_76360) + 48) + 8);
LABEL_46:
  swift_bridgeObjectRelease(*v245, v238, v239, v240, v241, v242, v243, v244);
}

uint64_t sub_3282C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  char v7 = *(_BYTE *)(a2 + 122);
  uint64_t v183 = a3;
  if (EnumCaseMultiPayload == 1)
  {
    if ((*(_BYTE *)(a2 + 122) & 1) != 0)
    {
      uint64_t v8 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v8;
      uint64_t v9 = *(void *)(a2 + 24);
      *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v9;
      uint64_t v10 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v10;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      char v11 = *(_BYTE *)(a2 + 121);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((v11 & 1) != 0)
      {
        __int128 v12 = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 88) = v12;
        (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 64, a2 + 64);
      }

      else
      {
        uint64_t v22 = *(void *)(a2 + 72);
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        *(void *)(a1 + 72) = v22;
        uint64_t v23 = *(void *)(a2 + 88);
        *(void *)(a1 + 80) = *(void *)(a2 + 80);
        *(void *)(a1 + 88) = v23;
        uint64_t v24 = *(void *)(a2 + 104);
        *(void *)(a1 + 96) = *(void *)(a2 + 96);
        *(void *)(a1 + 104) = v24;
        *(void *)(a1 + 112) = *(void *)(a2 + 112);
        *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      *(_BYTE *)(a1 + 121) = v11;
    }

    else
    {
      char v18 = *(_BYTE *)(a2 + 57);
      if ((v18 & 1) != 0)
      {
        __int128 v19 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v19;
        (**(void (***)(uint64_t, uint64_t))(v19 - 8))(a1, a2);
      }

      else
      {
        uint64_t v28 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v28;
        uint64_t v29 = *(void *)(a2 + 24);
        *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = v29;
        uint64_t v30 = *(void *)(a2 + 40);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = v30;
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      *(_BYTE *)(a1 + 57) = v18;
    }

    *(_BYTE *)(a1 + 122) = v7;
    uint64_t v31 = *(void *)(a2 + 136);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = v31;
    uint64_t v32 = *(void *)(a2 + 152);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = v32;
    uint64_t v33 = (int *)type metadata accessor for RCSMessage(0LL);
    uint64_t v34 = v33[7];
    uint64_t v35 = (void *)(a1 + v34);
    uint64_t v36 = (void *)(a2 + v34);
    uint64_t v37 = type metadata accessor for RCSMessage.Content(0LL);
    uint64_t v38 = *(void *)(v37 - 8);
    SEL v39 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v38 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v39(v36, 1LL, v37))
    {
      uint64_t v40 = sub_5C28(&qword_76228);
      memcpy(v35, v36, *(void *)(*(void *)(v40 - 8) + 64LL));
      uint64_t v41 = v183;
    }

    else
    {
      switch(swift_getEnumCaseMultiPayload(v36, v37))
      {
        case 0u:
          uint64_t v42 = v36[1];
          *uint64_t v35 = *v36;
          v35[1] = v42;
          uint64_t v43 = v36[2];
          v35[2] = v43;
          swift_bridgeObjectRetain();
          swift_retain(v43);
          id v44 = v35;
          uint64_t v45 = v37;
          uint64_t v46 = 0LL;
          goto LABEL_48;
        case 1u:
          uint64_t v65 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
          uint64_t v66 = *(void *)(v65 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v66 + 48))(v36, 1LL, v65))
          {
            uint64_t v67 = sub_5C28(&qword_76498);
            memcpy(v35, v36, *(void *)(*(void *)(v67 - 8) + 64LL));
          }

          else
          {
            *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
            v35[2] = v36[2];
            uint64_t v93 = *(int *)(v65 + 24);
            unsigned __int8 v171 = (char *)v36 + v93;
            id v175 = (char *)v35 + v93;
            uint64_t v94 = type metadata accessor for URL(0LL);
            uint64_t v179 = v66;
            unsigned __int8 v95 = *(void (**)(char *, char *, uint64_t))(*(void *)(v94 - 8) + 16LL);
            swift_bridgeObjectRetain();
            v95(v175, v171, v94);
            uint64_t v96 = *(int *)(v65 + 28);
            uint64_t v97 = (char *)v35 + v96;
            uint64_t v98 = (char *)v36 + v96;
            uint64_t v99 = type metadata accessor for Date(0LL);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v99 - 8) + 16LL))(v97, v98, v99);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v179 + 56))(v35, 0LL, 1LL, v65);
          }

          uint64_t v100 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
          uint64_t v101 = (char *)v35 + v100;
          unsigned __int8 v102 = (char *)v36 + v100;
          *(_OWORD *)uint64_t v101 = *(_OWORD *)((char *)v36 + v100);
          uint64_t v104 = *(void *)((char *)v36 + v100 + 16);
          uint64_t v103 = *(void *)((char *)v36 + v100 + 24);
          *((void *)v101 + 2) = v104;
          *((void *)v101 + 3) = v103;
          *((void *)v101 + 4) = *((void *)v102 + 4);
          id v105 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
          uint64_t v106 = v105[7];
          id v169 = &v102[v106];
          SEL v172 = &v101[v106];
          uint64_t v165 = type metadata accessor for URL(0LL);
          id v167 = *(void (**)(char *, char *, uint64_t))(*(void *)(v165 - 8) + 16LL);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v167(v172, v169, v165);
          uint64_t v107 = v105[8];
          id v176 = &v102[v107];
          unsigned __int8 v180 = &v101[v107];
          uint64_t v108 = type metadata accessor for Date(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v108 - 8) + 16LL))(v180, v176, v108);
          v101[v105[9]] = v102[v105[9]];
          uint64_t v109 = v105[10];
          unsigned __int8 v110 = &v101[v109];
          SEL v111 = &v102[v109];
          v110[8] = v111[8];
          *(void *)unsigned __int8 v110 = *(void *)v111;
          uint64_t v112 = *(int *)(sub_5C28(&qword_764A0) + 48);
          uint64_t v113 = *(void *)((char *)v36 + v112);
          *(void *)((char *)v35 + v112) = v113;
          swift_retain(v113);
          id v44 = v35;
          uint64_t v45 = v37;
          uint64_t v46 = 1LL;
          goto LABEL_48;
        case 2u:
          *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
          uint64_t v68 = v36[3];
          v35[2] = v36[2];
          v35[3] = v68;
          uint64_t v69 = v36[4];
          v35[4] = v69;
          swift_bridgeObjectRetain();
          swift_retain(v69);
          id v44 = v35;
          uint64_t v45 = v37;
          uint64_t v46 = 2LL;
          goto LABEL_48;
        case 3u:
          __int128 v70 = *(_OWORD *)(v36 + 3);
          *(_OWORD *)(v35 + 3) = v70;
          (**(void (***)(void *, void *))(v70 - 8))(v35, v36);
          uint64_t v71 = v36[6];
          v35[5] = v36[5];
          v35[6] = v71;
          v35[7] = v36[7];
          uint64_t v72 = v36[9];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v72)
          {
            v35[8] = v36[8];
            v35[9] = v72;
            uint64_t v74 = v36[10];
            unint64_t v73 = v36[11];
            swift_bridgeObjectRetain();
            sub_F120(v74, v73);
            v35[10] = v74;
            v35[11] = v73;
            uint64_t v75 = v36[13];
            v35[12] = v36[12];
            v35[13] = v75;
            swift_bridgeObjectRetain();
          }

          else
          {
            __int128 v126 = *((_OWORD *)v36 + 5);
            *((_OWORD *)v35 + 4) = *((_OWORD *)v36 + 4);
            *((_OWORD *)v35 + 5) = v126;
            *((_OWORD *)v35 + 6) = *((_OWORD *)v36 + 6);
          }

          uint64_t v41 = v183;
          swift_storeEnumTagMultiPayload(v35, v37, 3LL);
          goto LABEL_50;
        case 5u:
          uint64_t v76 = *v36;
          *uint64_t v35 = *v36;
          swift_retain(v76);
          id v44 = v35;
          uint64_t v45 = v37;
          uint64_t v46 = 5LL;
          goto LABEL_48;
        case 6u:
          uint64_t v77 = *v36;
          *uint64_t v35 = *v36;
          swift_retain(v77);
          id v44 = v35;
          uint64_t v45 = v37;
          uint64_t v46 = 6LL;
          goto LABEL_48;
        case 7u:
          uint64_t v78 = *v36;
          *uint64_t v35 = *v36;
          swift_retain(v78);
          id v44 = v35;
          uint64_t v45 = v37;
          uint64_t v46 = 7LL;
LABEL_48:
          swift_storeEnumTagMultiPayload(v44, v45, v46);
          break;
        default:
          memcpy(v35, v36, *(void *)(v38 + 64));
          break;
      }

      uint64_t v41 = v183;
LABEL_50:
      (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0LL, 1LL, v37);
    }

    uint64_t v114 = v33[8];
    uint64_t v115 = a1 + v114;
    uint64_t v116 = a2 + v114;
    uint64_t v117 = *(void *)(a2 + v114 + 24);
    if (v117)
    {
      uint64_t v118 = *(void *)(v116 + 32);
      *(void *)(v115 + 24) = v117;
      *(void *)(v115 + 32) = v118;
      (**(void (***)(void))(v117 - 8))();
    }

    else
    {
      __int128 v119 = *(_OWORD *)(v116 + 16);
      *(_OWORD *)uint64_t v115 = *(_OWORD *)v116;
      *(_OWORD *)(v115 + swift_weakDestroy(v0 + 16) = v119;
      *(void *)(v115 + 32) = *(void *)(v116 + 32);
    }

    *(void *)(a1 + v33[9]) = *(void *)(a2 + v33[9]);
    *(_BYTE *)(a1 + v33[10]) = *(_BYTE *)(a2 + v33[10]);
    *(_BYTE *)(a1 + v33[11]) = *(_BYTE *)(a2 + v33[11]);
    *(void *)(a1 + v33[12]) = *(void *)(a2 + v33[12]);
    uint64_t v120 = v33[13];
    uint64_t v121 = (void *)(a1 + v120);
    uint64_t v122 = (void *)(a2 + v120);
    uint64_t v123 = v122[1];
    *uint64_t v121 = *v122;
    v121[1] = v123;
    uint64_t v124 = v122[3];
    v121[2] = v122[2];
    v121[3] = v124;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v125 = 1LL;
  }

  else
  {
    if ((*(_BYTE *)(a2 + 122) & 1) != 0)
    {
      uint64_t v13 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v13;
      uint64_t v14 = *(void *)(a2 + 24);
      *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v14;
      uint64_t v15 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v15;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      char v16 = *(_BYTE *)(a2 + 121);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((v16 & 1) != 0)
      {
        __int128 v17 = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 88) = v17;
        (**(void (***)(uint64_t, uint64_t))(v17 - 8))(a1 + 64, a2 + 64);
      }

      else
      {
        uint64_t v25 = *(void *)(a2 + 72);
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        *(void *)(a1 + 72) = v25;
        uint64_t v26 = *(void *)(a2 + 88);
        *(void *)(a1 + 80) = *(void *)(a2 + 80);
        *(void *)(a1 + 88) = v26;
        uint64_t v27 = *(void *)(a2 + 104);
        *(void *)(a1 + 96) = *(void *)(a2 + 96);
        *(void *)(a1 + 104) = v27;
        *(void *)(a1 + 112) = *(void *)(a2 + 112);
        *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      *(_BYTE *)(a1 + 121) = v16;
    }

    else
    {
      char v20 = *(_BYTE *)(a2 + 57);
      if ((v20 & 1) != 0)
      {
        __int128 v21 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v21;
        (**(void (***)(uint64_t, uint64_t))(v21 - 8))(a1, a2);
      }

      else
      {
        uint64_t v47 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v47;
        uint64_t v48 = *(void *)(a2 + 24);
        *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = v48;
        uint64_t v49 = *(void *)(a2 + 40);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = v49;
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      *(_BYTE *)(a1 + 57) = v20;
    }

    *(_BYTE *)(a1 + 122) = v7;
    uint64_t v50 = *(void *)(a2 + 136);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = v50;
    uint64_t v51 = *(void *)(a2 + 152);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = v51;
    unsigned __int8 v52 = (int *)type metadata accessor for RCSMessage(0LL);
    uint64_t v53 = v52[7];
    id v54 = (void *)(a1 + v53);
    id v55 = (void *)(a2 + v53);
    uint64_t v56 = type metadata accessor for RCSMessage.Content(0LL);
    uint64_t v57 = *(void *)(v56 - 8);
    id v58 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v57 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v58(v55, 1LL, v56))
    {
      uint64_t v59 = sub_5C28(&qword_76228);
      memcpy(v54, v55, *(void *)(*(void *)(v59 - 8) + 64LL));
      uint64_t v41 = v183;
    }

    else
    {
      switch(swift_getEnumCaseMultiPayload(v55, v56))
      {
        case 0u:
          uint64_t v60 = v55[1];
          *id v54 = *v55;
          v54[1] = v60;
          uint64_t v61 = v55[2];
          v54[2] = v61;
          swift_bridgeObjectRetain();
          swift_retain(v61);
          uint64_t v62 = v54;
          uint64_t v63 = v56;
          uint64_t v64 = 0LL;
          goto LABEL_59;
        case 1u:
          uint64_t v79 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
          uint64_t v80 = *(void *)(v79 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v80 + 48))(v55, 1LL, v79))
          {
            uint64_t v81 = sub_5C28(&qword_76498);
            memcpy(v54, v55, *(void *)(*(void *)(v81 - 8) + 64LL));
          }

          else
          {
            *(_OWORD *)id v54 = *(_OWORD *)v55;
            v54[2] = v55[2];
            uint64_t v127 = *(int *)(v79 + 24);
            id v173 = (char *)v55 + v127;
            id v177 = (char *)v54 + v127;
            uint64_t v128 = type metadata accessor for URL(0LL);
            uint64_t v181 = v80;
            id v129 = *(void (**)(char *, char *, uint64_t))(*(void *)(v128 - 8) + 16LL);
            swift_bridgeObjectRetain();
            v129(v177, v173, v128);
            uint64_t v130 = *(int *)(v79 + 28);
            id v131 = (char *)v54 + v130;
            unsigned __int8 v132 = (char *)v55 + v130;
            uint64_t v133 = type metadata accessor for Date(0LL);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v133 - 8) + 16LL))(v131, v132, v133);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v181 + 56))(v54, 0LL, 1LL, v79);
          }

          uint64_t v134 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
          id v135 = (char *)v54 + v134;
          id v136 = (char *)v55 + v134;
          *(_OWORD *)id v135 = *(_OWORD *)((char *)v55 + v134);
          uint64_t v138 = *(void *)((char *)v55 + v134 + 16);
          uint64_t v137 = *(void *)((char *)v55 + v134 + 24);
          *((void *)v135 + 2) = v138;
          *((void *)v135 + 3) = v137;
          *((void *)v135 + 4) = *((void *)v136 + 4);
          unsigned __int8 v139 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
          uint64_t v140 = v139[7];
          id v170 = &v136[v140];
          id v174 = &v135[v140];
          uint64_t v166 = type metadata accessor for URL(0LL);
          id v168 = *(void (**)(char *, char *, uint64_t))(*(void *)(v166 - 8) + 16LL);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v168(v174, v170, v166);
          uint64_t v141 = v139[8];
          unsigned __int8 v178 = &v136[v141];
          id v182 = &v135[v141];
          uint64_t v142 = type metadata accessor for Date(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v142 - 8) + 16LL))(v182, v178, v142);
          v135[v139[9]] = v136[v139[9]];
          uint64_t v143 = v139[10];
          id v144 = &v135[v143];
          id v145 = &v136[v143];
          v144[8] = v145[8];
          *(void *)id v144 = *(void *)v145;
          uint64_t v146 = *(int *)(sub_5C28(&qword_764A0) + 48);
          uint64_t v147 = *(void *)((char *)v55 + v146);
          *(void *)((char *)v54 + v146) = v147;
          swift_retain(v147);
          uint64_t v62 = v54;
          uint64_t v63 = v56;
          uint64_t v64 = 1LL;
          goto LABEL_59;
        case 2u:
          *(_OWORD *)id v54 = *(_OWORD *)v55;
          uint64_t v82 = v55[3];
          v54[2] = v55[2];
          v54[3] = v82;
          uint64_t v83 = v55[4];
          v54[4] = v83;
          swift_bridgeObjectRetain();
          swift_retain(v83);
          uint64_t v62 = v54;
          uint64_t v63 = v56;
          uint64_t v64 = 2LL;
          goto LABEL_59;
        case 3u:
          __int128 v84 = *(_OWORD *)(v55 + 3);
          *(_OWORD *)(v54 + 3) = v84;
          (**(void (***)(void *, void *))(v84 - 8))(v54, v55);
          uint64_t v85 = v55[6];
          v54[5] = v55[5];
          v54[6] = v85;
          v54[7] = v55[7];
          uint64_t v86 = v55[9];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v86)
          {
            v54[8] = v55[8];
            v54[9] = v86;
            uint64_t v88 = v55[10];
            unint64_t v87 = v55[11];
            swift_bridgeObjectRetain();
            sub_F120(v88, v87);
            v54[10] = v88;
            v54[11] = v87;
            uint64_t v89 = v55[13];
            v54[12] = v55[12];
            v54[13] = v89;
            swift_bridgeObjectRetain();
          }

          else
          {
            __int128 v164 = *((_OWORD *)v55 + 5);
            *((_OWORD *)v54 + 4) = *((_OWORD *)v55 + 4);
            *((_OWORD *)v54 + 5) = v164;
            *((_OWORD *)v54 + 6) = *((_OWORD *)v55 + 6);
          }

          uint64_t v41 = v183;
          swift_storeEnumTagMultiPayload(v54, v56, 3LL);
          goto LABEL_61;
        case 5u:
          uint64_t v90 = *v55;
          *id v54 = *v55;
          swift_retain(v90);
          uint64_t v62 = v54;
          uint64_t v63 = v56;
          uint64_t v64 = 5LL;
          goto LABEL_59;
        case 6u:
          uint64_t v91 = *v55;
          *id v54 = *v55;
          swift_retain(v91);
          uint64_t v62 = v54;
          uint64_t v63 = v56;
          uint64_t v64 = 6LL;
          goto LABEL_59;
        case 7u:
          uint64_t v92 = *v55;
          *id v54 = *v55;
          swift_retain(v92);
          uint64_t v62 = v54;
          uint64_t v63 = v56;
          uint64_t v64 = 7LL;
LABEL_59:
          swift_storeEnumTagMultiPayload(v62, v63, v64);
          break;
        default:
          memcpy(v54, v55, *(void *)(v57 + 64));
          break;
      }

      uint64_t v41 = v183;
LABEL_61:
      (*(void (**)(void *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0LL, 1LL, v56);
    }

    uint64_t v148 = v52[8];
    uint64_t v149 = a1 + v148;
    uint64_t v150 = a2 + v148;
    uint64_t v151 = *(void *)(a2 + v148 + 24);
    if (v151)
    {
      uint64_t v152 = *(void *)(v150 + 32);
      *(void *)(v149 + 24) = v151;
      *(void *)(v149 + 32) = v152;
      (**(void (***)(void))(v151 - 8))();
    }

    else
    {
      __int128 v153 = *(_OWORD *)(v150 + 16);
      *(_OWORD *)uint64_t v149 = *(_OWORD *)v150;
      *(_OWORD *)(v149 + swift_weakDestroy(v0 + 16) = v153;
      *(void *)(v149 + 32) = *(void *)(v150 + 32);
    }

    *(void *)(a1 + v52[9]) = *(void *)(a2 + v52[9]);
    *(_BYTE *)(a1 + v52[10]) = *(_BYTE *)(a2 + v52[10]);
    *(_BYTE *)(a1 + v52[11]) = *(_BYTE *)(a2 + v52[11]);
    *(void *)(a1 + v52[12]) = *(void *)(a2 + v52[12]);
    uint64_t v154 = v52[13];
    SEL v155 = (void *)(a1 + v154);
    unsigned __int8 v156 = (void *)(a2 + v154);
    uint64_t v157 = v156[1];
    *SEL v155 = *v156;
    v155[1] = v157;
    uint64_t v158 = v156[3];
    v155[2] = v156[2];
    v155[3] = v158;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v125 = 0LL;
    uint64_t v159 = *(int *)(sub_5C28(&qword_76360) + 48);
    id v160 = (void *)(a1 + v159);
    id v161 = (void *)(a2 + v159);
    uint64_t v162 = v161[1];
    *id v160 = *v161;
    v160[1] = v162;
  }

  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload(a1, v41, v125);
  return a1;
}

uint64_t sub_334D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v4 = a3;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a1, a3);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v4);
    char v7 = *(_BYTE *)(a2 + 122);
    if (EnumCaseMultiPayload == 1)
    {
      if ((*(_BYTE *)(a2 + 122) & 1) != 0)
      {
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
        char v8 = *(_BYTE *)(a2 + 121);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((v8 & 1) != 0)
        {
          uint64_t v9 = *(void *)(a2 + 88);
          *(void *)(a1 + 88) = v9;
          *(void *)(a1 + 96) = *(void *)(a2 + 96);
          (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 64, a2 + 64);
        }

        else
        {
          *(void *)(a1 + 64) = *(void *)(a2 + 64);
          *(void *)(a1 + 72) = *(void *)(a2 + 72);
          *(void *)(a1 + 80) = *(void *)(a2 + 80);
          *(void *)(a1 + 88) = *(void *)(a2 + 88);
          *(void *)(a1 + 96) = *(void *)(a2 + 96);
          *(void *)(a1 + 104) = *(void *)(a2 + 104);
          *(void *)(a1 + 112) = *(void *)(a2 + 112);
          *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        *(_BYTE *)(a1 + 121) = v8;
      }

      else
      {
        char v12 = *(_BYTE *)(a2 + 57);
        if ((v12 & 1) != 0)
        {
          uint64_t v13 = *(void *)(a2 + 24);
          *(void *)(a1 + 24) = v13;
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1, a2);
        }

        else
        {
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
          *(void *)(a1 + 24) = *(void *)(a2 + 24);
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          *(void *)(a1 + 40) = *(void *)(a2 + 40);
          *(void *)(a1 + 48) = *(void *)(a2 + 48);
          *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        *(_BYTE *)(a1 + 57) = v12;
      }

      *(_BYTE *)(a1 + 122) = v7;
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      char v16 = (int *)type metadata accessor for RCSMessage(0LL);
      uint64_t v17 = v16[7];
      char v18 = (void *)(a1 + v17);
      __int128 v19 = (void *)(a2 + v17);
      uint64_t v20 = type metadata accessor for RCSMessage.Content(0LL);
      uint64_t v21 = *(void *)(v20 - 8);
      uint64_t v22 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48);
      uint64_t v23 = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v22(v19, 1LL, v23))
      {
        uint64_t v24 = sub_5C28(&qword_76228);
        memcpy(v18, v19, *(void *)(*(void *)(v24 - 8) + 64LL));
      }

      else
      {
        uint64_t v151 = v21;
        switch(swift_getEnumCaseMultiPayload(v19, v23))
        {
          case 0u:
            uint64_t v25 = v18;
            *char v18 = *v19;
            v18[1] = v19[1];
            uint64_t v26 = v19[2];
            v18[2] = v26;
            swift_bridgeObjectRetain();
            swift_retain(v26);
            uint64_t v27 = v18;
            uint64_t v28 = v23;
            uint64_t v29 = 0LL;
            goto LABEL_51;
          case 1u:
            uint64_t v148 = v23;
            uint64_t v42 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
            uint64_t v43 = *(void *)(v42 - 8);
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v43 + 48))(v19, 1LL, v42))
            {
              uint64_t v44 = sub_5C28(&qword_76498);
              uint64_t v45 = v18;
              memcpy(v18, v19, *(void *)(*(void *)(v44 - 8) + 64LL));
            }

            else
            {
              uint64_t v145 = v43;
              uint64_t v45 = v18;
              *char v18 = *v19;
              v18[1] = v19[1];
              v18[2] = v19[2];
              uint64_t v66 = *(int *)(v42 + 24);
              uint64_t v140 = (char *)v19 + v66;
              uint64_t v143 = (char *)v18 + v66;
              uint64_t v67 = type metadata accessor for URL(0LL);
              uint64_t v68 = *(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 16LL);
              swift_bridgeObjectRetain();
              v68(v143, v140, v67);
              uint64_t v69 = *(int *)(v42 + 28);
              __int128 v70 = (char *)v18 + v69;
              uint64_t v71 = (char *)v19 + v69;
              uint64_t v72 = type metadata accessor for Date(0LL);
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 16LL))(v70, v71, v72);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v145 + 56))(v18, 0LL, 1LL, v42);
            }

            uint64_t v73 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
            uint64_t v74 = (void *)((char *)v45 + v73);
            uint64_t v75 = (char *)v19 + v73;
            *uint64_t v74 = *(void *)((char *)v19 + v73);
            v74[1] = *(void *)((char *)v19 + v73 + 8);
            v74[2] = *(void *)((char *)v19 + v73 + 16);
            v74[3] = *(void *)((char *)v19 + v73 + 24);
            v74[4] = *(void *)((char *)v19 + v73 + 32);
            uint64_t v76 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
            uint64_t v77 = v76[7];
            uint64_t v138 = &v75[v77];
            uint64_t v141 = (char *)v74 + v77;
            uint64_t v78 = type metadata accessor for URL(0LL);
            uint64_t v137 = *(void (**)(char *, char *, uint64_t))(*(void *)(v78 - 8) + 16LL);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v137(v141, v138, v78);
            uint64_t v25 = v18;
            uint64_t v79 = v76[8];
            uint64_t v80 = (char *)v74 + v79;
            uint64_t v146 = &v75[v79];
            uint64_t v81 = type metadata accessor for Date(0LL);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v81 - 8) + 16LL))(v80, v146, v81);
            *((_BYTE *)v74 + v76[9]) = v75[v76[9]];
            uint64_t v82 = v76[10];
            uint64_t v83 = (char *)v74 + v82;
            __int128 v84 = &v75[v82];
            char v85 = v84[8];
            *(void *)uint64_t v83 = *(void *)v84;
            v83[8] = v85;
            uint64_t v86 = *(int *)(sub_5C28(&qword_764A0) + 48);
            uint64_t v87 = *(void *)((char *)v19 + v86);
            *(void *)((char *)v25 + v86) = v87;
            swift_retain(v87);
            uint64_t v27 = v25;
            uint64_t v23 = v148;
            uint64_t v28 = v148;
            uint64_t v29 = 1LL;
            goto LABEL_51;
          case 2u:
            uint64_t v25 = v18;
            *char v18 = *v19;
            v18[1] = v19[1];
            v18[2] = v19[2];
            v18[3] = v19[3];
            uint64_t v46 = v19[4];
            _OWORD v18[4] = v46;
            swift_bridgeObjectRetain();
            swift_retain(v46);
            uint64_t v27 = v18;
            uint64_t v28 = v23;
            uint64_t v29 = 2LL;
            goto LABEL_51;
          case 3u:
            uint64_t v47 = v23;
            uint64_t v48 = v19[3];
            uint64_t v25 = v18;
            v18[3] = v48;
            _OWORD v18[4] = v19[4];
            (**(void (***)(void *, void *))(v48 - 8))(v18, v19);
            v18[5] = v19[5];
            v18[6] = v19[6];
            v18[7] = v19[7];
            uint64_t v49 = v19[9];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v49)
            {
              v18[8] = v19[8];
              v18[9] = v19[9];
              uint64_t v50 = v19[10];
              unint64_t v51 = v19[11];
              swift_bridgeObjectRetain();
              sub_F120(v50, v51);
              v18[10] = v50;
              v18[11] = v51;
              v18[12] = v19[12];
              v18[13] = v19[13];
              swift_bridgeObjectRetain();
            }

            else
            {
              __int128 v88 = *((_OWORD *)v19 + 4);
              __int128 v89 = *((_OWORD *)v19 + 6);
              *((_OWORD *)v18 + 5) = *((_OWORD *)v19 + 5);
              *((_OWORD *)v18 + 6) = v89;
              *((_OWORD *)v18 + 4) = v88;
            }

            uint64_t v27 = v18;
            uint64_t v23 = v47;
            uint64_t v28 = v47;
            uint64_t v29 = 3LL;
            goto LABEL_51;
          case 5u:
            uint64_t v52 = *v19;
            uint64_t v25 = v18;
            *char v18 = *v19;
            swift_retain(v52);
            uint64_t v27 = v18;
            uint64_t v28 = v23;
            uint64_t v29 = 5LL;
            goto LABEL_51;
          case 6u:
            uint64_t v53 = *v19;
            uint64_t v25 = v18;
            *char v18 = *v19;
            swift_retain(v53);
            uint64_t v27 = v18;
            uint64_t v28 = v23;
            uint64_t v29 = 6LL;
            goto LABEL_51;
          case 7u:
            uint64_t v54 = *v19;
            uint64_t v25 = v18;
            *char v18 = *v19;
            swift_retain(v54);
            uint64_t v27 = v18;
            uint64_t v28 = v23;
            uint64_t v29 = 7LL;
LABEL_51:
            swift_storeEnumTagMultiPayload(v27, v28, v29);
            uint64_t v21 = v151;
            break;
          default:
            uint64_t v25 = v18;
            memcpy(v18, v19, *(void *)(v21 + 64));
            break;
        }

        (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v25, 0LL, 1LL, v23);
      }

      uint64_t v90 = v16[8];
      uint64_t v91 = a1 + v90;
      uint64_t v92 = (__int128 *)(a2 + v90);
      uint64_t v93 = *(void *)(a2 + v90 + 24);
      if (v93)
      {
        *(void *)(v91 + 24) = v93;
        *(void *)(v91 + 32) = *((void *)v92 + 4);
        (**(void (***)(void))(v93 - 8))();
      }

      else
      {
        __int128 v94 = *v92;
        __int128 v95 = v92[1];
        *(void *)(v91 + 32) = *((void *)v92 + 4);
        *(_OWORD *)uint64_t v91 = v94;
        *(_OWORD *)(v91 + swift_weakDestroy(v0 + 16) = v95;
      }

      *(void *)(a1 + v16[9]) = *(void *)(a2 + v16[9]);
      *(_BYTE *)(a1 + v16[10]) = *(_BYTE *)(a2 + v16[10]);
      *(_BYTE *)(a1 + v16[11]) = *(_BYTE *)(a2 + v16[11]);
      *(void *)(a1 + v16[12]) = *(void *)(a2 + v16[12]);
      uint64_t v96 = v16[13];
      uint64_t v97 = (void *)(a1 + v96);
      uint64_t v98 = (void *)(a2 + v96);
      void *v97 = *v98;
      v97[1] = v98[1];
      v97[2] = v98[2];
      v97[3] = v98[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v99 = 1LL;
    }

    else
    {
      uint64_t v153 = v4;
      if ((*(_BYTE *)(a2 + 122) & 1) != 0)
      {
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
        char v10 = *(_BYTE *)(a2 + 121);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((v10 & 1) != 0)
        {
          uint64_t v11 = *(void *)(a2 + 88);
          *(void *)(a1 + 88) = v11;
          *(void *)(a1 + 96) = *(void *)(a2 + 96);
          (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 64, a2 + 64);
        }

        else
        {
          *(void *)(a1 + 64) = *(void *)(a2 + 64);
          *(void *)(a1 + 72) = *(void *)(a2 + 72);
          *(void *)(a1 + 80) = *(void *)(a2 + 80);
          *(void *)(a1 + 88) = *(void *)(a2 + 88);
          *(void *)(a1 + 96) = *(void *)(a2 + 96);
          *(void *)(a1 + 104) = *(void *)(a2 + 104);
          *(void *)(a1 + 112) = *(void *)(a2 + 112);
          *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        *(_BYTE *)(a1 + 121) = v10;
      }

      else
      {
        char v14 = *(_BYTE *)(a2 + 57);
        if ((v14 & 1) != 0)
        {
          uint64_t v15 = *(void *)(a2 + 24);
          *(void *)(a1 + 24) = v15;
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a1, a2);
        }

        else
        {
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
          *(void *)(a1 + 24) = *(void *)(a2 + 24);
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          *(void *)(a1 + 40) = *(void *)(a2 + 40);
          *(void *)(a1 + 48) = *(void *)(a2 + 48);
          *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        *(_BYTE *)(a1 + 57) = v14;
      }

      *(_BYTE *)(a1 + 122) = v7;
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      uint64_t v30 = (int *)type metadata accessor for RCSMessage(0LL);
      uint64_t v31 = v30[7];
      uint64_t v32 = (void *)(a1 + v31);
      uint64_t v33 = (void *)(a2 + v31);
      uint64_t v34 = type metadata accessor for RCSMessage.Content(0LL);
      uint64_t v35 = *(void *)(v34 - 8);
      uint64_t v36 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v35 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v36(v33, 1LL, v34))
      {
        uint64_t v37 = sub_5C28(&qword_76228);
        memcpy(v32, v33, *(void *)(*(void *)(v37 - 8) + 64LL));
      }

      else
      {
        uint64_t v152 = v35;
        switch(swift_getEnumCaseMultiPayload(v33, v34))
        {
          case 0u:
            *uint64_t v32 = *v33;
            v32[1] = v33[1];
            uint64_t v38 = v33[2];
            _OWORD v32[2] = v38;
            swift_bridgeObjectRetain();
            swift_retain(v38);
            SEL v39 = v32;
            uint64_t v40 = v34;
            uint64_t v41 = 0LL;
            goto LABEL_61;
          case 1u:
            uint64_t v55 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
            uint64_t v56 = *(void *)(v55 - 8);
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v56 + 48))(v33, 1LL, v55))
            {
              uint64_t v57 = sub_5C28(&qword_76498);
              memcpy(v32, v33, *(void *)(*(void *)(v57 - 8) + 64LL));
            }

            else
            {
              *uint64_t v32 = *v33;
              v32[1] = v33[1];
              _OWORD v32[2] = v33[2];
              uint64_t v100 = *(int *)(v55 + 24);
              uint64_t v147 = (char *)v33 + v100;
              uint64_t v149 = (char *)v32 + v100;
              uint64_t v101 = type metadata accessor for URL(0LL);
              unsigned __int8 v102 = *(void (**)(char *, char *, uint64_t))(*(void *)(v101 - 8) + 16LL);
              swift_bridgeObjectRetain();
              v102(v149, v147, v101);
              uint64_t v103 = *(int *)(v55 + 28);
              uint64_t v104 = (char *)v32 + v103;
              id v105 = (char *)v33 + v103;
              uint64_t v106 = type metadata accessor for Date(0LL);
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v106 - 8) + 16LL))(v104, v105, v106);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v56 + 56))(v32, 0LL, 1LL, v55);
            }

            uint64_t v107 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
            uint64_t v108 = (void *)((char *)v32 + v107);
            uint64_t v109 = (char *)v33 + v107;
            void *v108 = *(void *)((char *)v33 + v107);
            v108[1] = *(void *)((char *)v33 + v107 + 8);
            v108[2] = *(void *)((char *)v33 + v107 + 16);
            v108[3] = *(void *)((char *)v33 + v107 + 24);
            v108[4] = *(void *)((char *)v33 + v107 + 32);
            unsigned __int8 v110 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
            uint64_t v111 = v110[7];
            uint64_t v142 = &v109[v111];
            id v144 = (char *)v108 + v111;
            uint64_t v112 = type metadata accessor for URL(0LL);
            unsigned __int8 v139 = *(void (**)(char *, char *, uint64_t))(*(void *)(v112 - 8) + 16LL);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v139(v144, v142, v112);
            uint64_t v113 = v110[8];
            uint64_t v114 = (char *)v108 + v113;
            uint64_t v150 = &v109[v113];
            uint64_t v115 = type metadata accessor for Date(0LL);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v115 - 8) + 16LL))(v114, v150, v115);
            *((_BYTE *)v108 + v110[9]) = v109[v110[9]];
            uint64_t v116 = v110[10];
            uint64_t v117 = (char *)v108 + v116;
            uint64_t v118 = &v109[v116];
            char v119 = v118[8];
            *(void *)uint64_t v117 = *(void *)v118;
            v117[8] = v119;
            uint64_t v120 = *(int *)(sub_5C28(&qword_764A0) + 48);
            uint64_t v121 = *(void *)((char *)v33 + v120);
            *(void *)((char *)v32 + v120) = v121;
            swift_retain(v121);
            SEL v39 = v32;
            uint64_t v40 = v34;
            uint64_t v41 = 1LL;
            goto LABEL_61;
          case 2u:
            *uint64_t v32 = *v33;
            v32[1] = v33[1];
            _OWORD v32[2] = v33[2];
            v32[3] = v33[3];
            uint64_t v58 = v33[4];
            v32[4] = v58;
            swift_bridgeObjectRetain();
            swift_retain(v58);
            SEL v39 = v32;
            uint64_t v40 = v34;
            uint64_t v41 = 2LL;
            goto LABEL_61;
          case 3u:
            uint64_t v59 = v33[3];
            v32[3] = v59;
            v32[4] = v33[4];
            (**(void (***)(void *, void *))(v59 - 8))(v32, v33);
            v32[5] = v33[5];
            v32[6] = v33[6];
            v32[7] = v33[7];
            uint64_t v60 = v33[9];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v60)
            {
              v32[8] = v33[8];
              v32[9] = v33[9];
              uint64_t v61 = v33[10];
              unint64_t v62 = v33[11];
              swift_bridgeObjectRetain();
              sub_F120(v61, v62);
              v32[10] = v61;
              v32[11] = v62;
              _BYTE v32[12] = v33[12];
              v32[13] = v33[13];
              swift_bridgeObjectRetain();
            }

            else
            {
              __int128 v122 = *((_OWORD *)v33 + 4);
              __int128 v123 = *((_OWORD *)v33 + 6);
              *((_OWORD *)v32 + 5) = *((_OWORD *)v33 + 5);
              *((_OWORD *)v32 + 6) = v123;
              *((_OWORD *)v32 + 4) = v122;
            }

            SEL v39 = v32;
            uint64_t v40 = v34;
            uint64_t v41 = 3LL;
            goto LABEL_61;
          case 5u:
            uint64_t v63 = *v33;
            *uint64_t v32 = *v33;
            swift_retain(v63);
            SEL v39 = v32;
            uint64_t v40 = v34;
            uint64_t v41 = 5LL;
            goto LABEL_61;
          case 6u:
            uint64_t v64 = *v33;
            *uint64_t v32 = *v33;
            swift_retain(v64);
            SEL v39 = v32;
            uint64_t v40 = v34;
            uint64_t v41 = 6LL;
            goto LABEL_61;
          case 7u:
            uint64_t v65 = *v33;
            *uint64_t v32 = *v33;
            swift_retain(v65);
            SEL v39 = v32;
            uint64_t v40 = v34;
            uint64_t v41 = 7LL;
LABEL_61:
            swift_storeEnumTagMultiPayload(v39, v40, v41);
            uint64_t v35 = v152;
            break;
          default:
            memcpy(v32, v33, *(void *)(v35 + 64));
            break;
        }

        (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0LL, 1LL, v34);
      }

      uint64_t v4 = v153;
      uint64_t v124 = v30[8];
      uint64_t v125 = a1 + v124;
      __int128 v126 = (__int128 *)(a2 + v124);
      uint64_t v127 = *(void *)(a2 + v124 + 24);
      if (v127)
      {
        *(void *)(v125 + 24) = v127;
        *(void *)(v125 + 32) = *((void *)v126 + 4);
        (**(void (***)(void))(v127 - 8))();
      }

      else
      {
        __int128 v128 = *v126;
        __int128 v129 = v126[1];
        *(void *)(v125 + 32) = *((void *)v126 + 4);
        *(_OWORD *)uint64_t v125 = v128;
        *(_OWORD *)(v125 + swift_weakDestroy(v0 + 16) = v129;
      }

      *(void *)(a1 + v30[9]) = *(void *)(a2 + v30[9]);
      *(_BYTE *)(a1 + v30[10]) = *(_BYTE *)(a2 + v30[10]);
      *(_BYTE *)(a1 + v30[11]) = *(_BYTE *)(a2 + v30[11]);
      *(void *)(a1 + v30[12]) = *(void *)(a2 + v30[12]);
      uint64_t v130 = v30[13];
      id v131 = (void *)(a1 + v130);
      unsigned __int8 v132 = (void *)(a2 + v130);
      *id v131 = *v132;
      v131[1] = v132[1];
      v131[2] = v132[2];
      v131[3] = v132[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v99 = 0LL;
      uint64_t v133 = *(int *)(sub_5C28(&qword_76360) + 48);
      uint64_t v134 = (void *)(a1 + v133);
      id v135 = (void *)(a2 + v133);
      *uint64_t v134 = *v135;
      v134[1] = v135[1];
    }

    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload(a1, v4, v99);
  }

  return a1;
}

_OWORD *sub_34368(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  __int128 v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  a1[6] = a2[6];
  *(_OWORD *)((char *)a1 + 107) = *(_OWORD *)((char *)a2 + 107);
  __int128 v8 = a2[1];
  *a1 = *a2;
  a1[1] = v8;
  __int128 v9 = a2[3];
  a1[2] = a2[2];
  a1[3] = v9;
  __int128 v10 = a2[9];
  a1[8] = a2[8];
  a1[9] = v10;
  uint64_t v11 = (int *)type metadata accessor for RCSMessage(0LL);
  uint64_t v12 = v11[7];
  uint64_t v13 = (void *)((char *)a1 + v12);
  char v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for RCSMessage.Content(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  int v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15);
  if (EnumCaseMultiPayload == 1)
  {
    if (v17)
    {
      uint64_t v18 = sub_5C28(&qword_76228);
      memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
      {
        uint64_t v93 = v3;
        uint64_t v20 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
        uint64_t v21 = *(void *)(v20 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48))(v14, 1LL, v20))
        {
          uint64_t v22 = sub_5C28(&qword_76498);
          memcpy(v13, v14, *(void *)(*(void *)(v22 - 8) + 64LL));
        }

        else
        {
          *uint64_t v13 = *v14;
          *(_OWORD *)(v13 + 1) = *(_OWORD *)(v14 + 1);
          uint64_t v26 = *(int *)(v20 + 24);
          char v85 = (char *)v13 + v26;
          uint64_t v27 = (char *)v14 + v26;
          uint64_t v28 = type metadata accessor for URL(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32LL))(v85, v27, v28);
          uint64_t v29 = *(int *)(v20 + 28);
          uint64_t v86 = (char *)v13 + v29;
          uint64_t v30 = (char *)v14 + v29;
          uint64_t v31 = type metadata accessor for Date(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 32LL))(v86, v30, v31);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v13, 0LL, 1LL, v20);
        }

        uint64_t v32 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
        uint64_t v33 = (char *)v13 + v32;
        uint64_t v34 = (char *)v14 + v32;
        *(void *)uint64_t v33 = *(void *)((char *)v14 + v32);
        *(_OWORD *)(v33 + 8) = *(_OWORD *)((char *)v14 + v32 + 8);
        *(_OWORD *)(v33 + 24) = *(_OWORD *)((char *)v14 + v32 + 24);
        uint64_t v35 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
        uint64_t v36 = v35[7];
        uint64_t v81 = &v34[v36];
        uint64_t v87 = &v33[v36];
        uint64_t v37 = type metadata accessor for URL(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32LL))(v87, v81, v37);
        uint64_t v38 = v35[8];
        uint64_t v82 = &v34[v38];
        __int128 v88 = &v33[v38];
        uint64_t v39 = type metadata accessor for Date(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 32LL))(v88, v82, v39);
        v33[v35[9]] = v34[v35[9]];
        uint64_t v40 = v35[10];
        uint64_t v41 = &v33[v40];
        uint64_t v42 = &v34[v40];
        v41[8] = v42[8];
        *(void *)uint64_t v41 = *(void *)v42;
        uint64_t v43 = sub_5C28(&qword_764A0);
        *(void *)((char *)v13 + *(int *)(v43 + 48)) = *(void *)((char *)v14 + *(int *)(v43 + 48));
        swift_storeEnumTagMultiPayload(v13, v15, 1LL);
        uint64_t v3 = v93;
      }

      else
      {
        memcpy(v13, v14, *(void *)(v16 + 64));
      }

      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
    }

    uint64_t v44 = v11[8];
    uint64_t v45 = (char *)a1 + v44;
    uint64_t v46 = (char *)a2 + v44;
    __int128 v47 = *((_OWORD *)v46 + 1);
    *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
    *((_OWORD *)v45 + 1) = v47;
    *((void *)v45 + 4) = *((void *)v46 + 4);
    *(void *)((char *)a1 + v11[9]) = *(void *)((char *)a2 + v11[9]);
    *((_BYTE *)a1 + v11[10]) = *((_BYTE *)a2 + v11[10]);
    *((_BYTE *)a1 + v11[11]) = *((_BYTE *)a2 + v11[11]);
    *(void *)((char *)a1 + v11[12]) = *(void *)((char *)a2 + v11[12]);
    uint64_t v48 = v11[13];
    uint64_t v49 = (_OWORD *)((char *)a1 + v48);
    uint64_t v50 = (_OWORD *)((char *)a2 + v48);
    __int128 v51 = v50[1];
    *uint64_t v49 = *v50;
    v49[1] = v51;
    uint64_t v52 = 1LL;
  }

  else
  {
    if (v17)
    {
      uint64_t v19 = sub_5C28(&qword_76228);
      memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64LL));
    }

    else
    {
      if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
      {
        uint64_t v94 = v3;
        uint64_t v23 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
        uint64_t v24 = *(void *)(v23 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v24 + 48))(v14, 1LL, v23))
        {
          uint64_t v25 = sub_5C28(&qword_76498);
          memcpy(v13, v14, *(void *)(*(void *)(v25 - 8) + 64LL));
        }

        else
        {
          *uint64_t v13 = *v14;
          *(_OWORD *)(v13 + 1) = *(_OWORD *)(v14 + 1);
          uint64_t v53 = *(int *)(v23 + 24);
          __int128 v89 = (char *)v13 + v53;
          uint64_t v54 = (char *)v14 + v53;
          uint64_t v55 = type metadata accessor for URL(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 32LL))(v89, v54, v55);
          uint64_t v56 = *(int *)(v23 + 28);
          uint64_t v90 = (char *)v13 + v56;
          uint64_t v57 = (char *)v14 + v56;
          uint64_t v58 = type metadata accessor for Date(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 32LL))(v90, v57, v58);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v13, 0LL, 1LL, v23);
        }

        uint64_t v59 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
        uint64_t v60 = (char *)v13 + v59;
        uint64_t v61 = (char *)v14 + v59;
        *(void *)uint64_t v60 = *(void *)((char *)v14 + v59);
        *(_OWORD *)(v60 + 8) = *(_OWORD *)((char *)v14 + v59 + 8);
        *(_OWORD *)(v60 + 24) = *(_OWORD *)((char *)v14 + v59 + 24);
        unint64_t v62 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
        uint64_t v63 = v62[7];
        uint64_t v83 = &v61[v63];
        uint64_t v91 = &v60[v63];
        uint64_t v64 = type metadata accessor for URL(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 32LL))(v91, v83, v64);
        uint64_t v65 = v62[8];
        __int128 v84 = &v61[v65];
        uint64_t v92 = &v60[v65];
        uint64_t v66 = type metadata accessor for Date(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 32LL))(v92, v84, v66);
        v60[v62[9]] = v61[v62[9]];
        uint64_t v67 = v62[10];
        uint64_t v68 = &v60[v67];
        uint64_t v69 = &v61[v67];
        v68[8] = v69[8];
        *(void *)uint64_t v68 = *(void *)v69;
        uint64_t v70 = sub_5C28(&qword_764A0);
        *(void *)((char *)v13 + *(int *)(v70 + 48)) = *(void *)((char *)v14 + *(int *)(v70 + 48));
        swift_storeEnumTagMultiPayload(v13, v15, 1LL);
        uint64_t v3 = v94;
      }

      else
      {
        memcpy(v13, v14, *(void *)(v16 + 64));
      }

      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
    }

    uint64_t v71 = v11[8];
    uint64_t v72 = (char *)a1 + v71;
    uint64_t v73 = (char *)a2 + v71;
    __int128 v74 = *((_OWORD *)v73 + 1);
    *(_OWORD *)uint64_t v72 = *(_OWORD *)v73;
    *((_OWORD *)v72 + 1) = v74;
    *((void *)v72 + 4) = *((void *)v73 + 4);
    *(void *)((char *)a1 + v11[9]) = *(void *)((char *)a2 + v11[9]);
    *((_BYTE *)a1 + v11[10]) = *((_BYTE *)a2 + v11[10]);
    *((_BYTE *)a1 + v11[11]) = *((_BYTE *)a2 + v11[11]);
    *(void *)((char *)a1 + v11[12]) = *(void *)((char *)a2 + v11[12]);
    uint64_t v75 = v11[13];
    uint64_t v76 = (_OWORD *)((char *)a1 + v75);
    uint64_t v77 = (_OWORD *)((char *)a2 + v75);
    __int128 v78 = v77[1];
    *uint64_t v76 = *v77;
    v76[1] = v78;
    uint64_t v79 = sub_5C28(&qword_76360);
    uint64_t v52 = 0LL;
    *(_OWORD *)((char *)a1 + *(int *)(v79 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v79 + 48));
  }

  swift_storeEnumTagMultiPayload(a1, v3, v52);
  return a1;
}

_OWORD *sub_34974(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    (*(void (**)(_OWORD *, uint64_t))(*(void *)(a3 - 8) + 8LL))(a1, a3);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    __int128 v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    a1[6] = a2[6];
    *(_OWORD *)((char *)a1 + 107) = *(_OWORD *)((char *)a2 + 107);
    __int128 v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    __int128 v9 = a2[3];
    a1[2] = a2[2];
    a1[3] = v9;
    __int128 v10 = a2[9];
    a1[8] = a2[8];
    a1[9] = v10;
    uint64_t v11 = (int *)type metadata accessor for RCSMessage(0LL);
    uint64_t v12 = v11[7];
    uint64_t v13 = (void *)((char *)a1 + v12);
    char v14 = (void *)((char *)a2 + v12);
    uint64_t v15 = type metadata accessor for RCSMessage.Content(0LL);
    uint64_t v16 = *(void *)(v15 - 8);
    int v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15);
    if (EnumCaseMultiPayload == 1)
    {
      if (v17)
      {
        uint64_t v18 = sub_5C28(&qword_76228);
        memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64LL));
      }

      else
      {
        if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
        {
          uint64_t v20 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
          uint64_t v21 = *(void *)(v20 - 8);
          uint64_t v93 = v16;
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48))(v14, 1LL, v20))
          {
            uint64_t v22 = sub_5C28(&qword_76498);
            memcpy(v13, v14, *(void *)(*(void *)(v22 - 8) + 64LL));
          }

          else
          {
            *uint64_t v13 = *v14;
            *(_OWORD *)(v13 + 1) = *(_OWORD *)(v14 + 1);
            uint64_t v26 = *(int *)(v20 + 24);
            uint64_t v27 = (char *)v13 + v26;
            char v85 = (char *)v14 + v26;
            uint64_t v28 = type metadata accessor for URL(0LL);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32LL))(v27, v85, v28);
            uint64_t v29 = *(int *)(v20 + 28);
            uint64_t v30 = (char *)v13 + v29;
            uint64_t v86 = (char *)v14 + v29;
            uint64_t v31 = type metadata accessor for Date(0LL);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 32LL))(v30, v86, v31);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v13, 0LL, 1LL, v20);
          }

          uint64_t v32 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
          uint64_t v33 = (char *)v13 + v32;
          uint64_t v34 = (char *)v14 + v32;
          *(void *)uint64_t v33 = *(void *)((char *)v14 + v32);
          *(_OWORD *)(v33 + 8) = *(_OWORD *)((char *)v14 + v32 + 8);
          *(_OWORD *)(v33 + 24) = *(_OWORD *)((char *)v14 + v32 + 24);
          uint64_t v35 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
          uint64_t v36 = v35[7];
          uint64_t v81 = &v34[v36];
          uint64_t v87 = &v33[v36];
          uint64_t v37 = type metadata accessor for URL(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32LL))(v87, v81, v37);
          uint64_t v38 = v35[8];
          uint64_t v82 = &v34[v38];
          __int128 v88 = &v33[v38];
          uint64_t v39 = type metadata accessor for Date(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 32LL))(v88, v82, v39);
          v33[v35[9]] = v34[v35[9]];
          uint64_t v40 = v35[10];
          uint64_t v41 = &v33[v40];
          uint64_t v42 = &v34[v40];
          v41[8] = v42[8];
          *(void *)uint64_t v41 = *(void *)v42;
          uint64_t v43 = sub_5C28(&qword_764A0);
          *(void *)((char *)v13 + *(int *)(v43 + 48)) = *(void *)((char *)v14 + *(int *)(v43 + 48));
          swift_storeEnumTagMultiPayload(v13, v15, 1LL);
          uint64_t v16 = v93;
        }

        else
        {
          memcpy(v13, v14, *(void *)(v16 + 64));
        }

        (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
      }

      uint64_t v44 = v11[8];
      uint64_t v45 = (char *)a1 + v44;
      uint64_t v46 = (char *)a2 + v44;
      __int128 v47 = *((_OWORD *)v46 + 1);
      *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
      *((_OWORD *)v45 + 1) = v47;
      *((void *)v45 + 4) = *((void *)v46 + 4);
      *(void *)((char *)a1 + v11[9]) = *(void *)((char *)a2 + v11[9]);
      *((_BYTE *)a1 + v11[10]) = *((_BYTE *)a2 + v11[10]);
      *((_BYTE *)a1 + v11[11]) = *((_BYTE *)a2 + v11[11]);
      *(void *)((char *)a1 + v11[12]) = *(void *)((char *)a2 + v11[12]);
      uint64_t v48 = v11[13];
      uint64_t v49 = (_OWORD *)((char *)a1 + v48);
      uint64_t v50 = (_OWORD *)((char *)a2 + v48);
      __int128 v51 = v50[1];
      *uint64_t v49 = *v50;
      v49[1] = v51;
      uint64_t v52 = 1LL;
    }

    else
    {
      if (v17)
      {
        uint64_t v19 = sub_5C28(&qword_76228);
        memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64LL));
      }

      else
      {
        if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
        {
          uint64_t v23 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
          uint64_t v24 = *(void *)(v23 - 8);
          uint64_t v94 = v16;
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v24 + 48))(v14, 1LL, v23))
          {
            uint64_t v25 = sub_5C28(&qword_76498);
            memcpy(v13, v14, *(void *)(*(void *)(v25 - 8) + 64LL));
          }

          else
          {
            *uint64_t v13 = *v14;
            *(_OWORD *)(v13 + 1) = *(_OWORD *)(v14 + 1);
            uint64_t v53 = *(int *)(v23 + 24);
            uint64_t v54 = (char *)v13 + v53;
            __int128 v89 = (char *)v14 + v53;
            uint64_t v55 = type metadata accessor for URL(0LL);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 32LL))(v54, v89, v55);
            uint64_t v56 = *(int *)(v23 + 28);
            uint64_t v57 = (char *)v13 + v56;
            uint64_t v90 = (char *)v14 + v56;
            uint64_t v58 = type metadata accessor for Date(0LL);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 32LL))(v57, v90, v58);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v13, 0LL, 1LL, v23);
          }

          uint64_t v59 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
          uint64_t v60 = (char *)v13 + v59;
          uint64_t v61 = (char *)v14 + v59;
          *(void *)uint64_t v60 = *(void *)((char *)v14 + v59);
          *(_OWORD *)(v60 + 8) = *(_OWORD *)((char *)v14 + v59 + 8);
          *(_OWORD *)(v60 + 24) = *(_OWORD *)((char *)v14 + v59 + 24);
          unint64_t v62 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
          uint64_t v63 = v62[7];
          uint64_t v83 = &v61[v63];
          uint64_t v91 = &v60[v63];
          uint64_t v64 = type metadata accessor for URL(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 32LL))(v91, v83, v64);
          uint64_t v65 = v62[8];
          __int128 v84 = &v61[v65];
          uint64_t v92 = &v60[v65];
          uint64_t v66 = type metadata accessor for Date(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 32LL))(v92, v84, v66);
          v60[v62[9]] = v61[v62[9]];
          uint64_t v67 = v62[10];
          uint64_t v68 = &v60[v67];
          uint64_t v69 = &v61[v67];
          v68[8] = v69[8];
          *(void *)uint64_t v68 = *(void *)v69;
          uint64_t v70 = sub_5C28(&qword_764A0);
          *(void *)((char *)v13 + *(int *)(v70 + 48)) = *(void *)((char *)v14 + *(int *)(v70 + 48));
          swift_storeEnumTagMultiPayload(v13, v15, 1LL);
          uint64_t v16 = v94;
        }

        else
        {
          memcpy(v13, v14, *(void *)(v16 + 64));
        }

        (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
      }

      uint64_t v71 = v11[8];
      uint64_t v72 = (char *)a1 + v71;
      uint64_t v73 = (char *)a2 + v71;
      __int128 v74 = *((_OWORD *)v73 + 1);
      *(_OWORD *)uint64_t v72 = *(_OWORD *)v73;
      *((_OWORD *)v72 + 1) = v74;
      *((void *)v72 + 4) = *((void *)v73 + 4);
      *(void *)((char *)a1 + v11[9]) = *(void *)((char *)a2 + v11[9]);
      *((_BYTE *)a1 + v11[10]) = *((_BYTE *)a2 + v11[10]);
      *((_BYTE *)a1 + v11[11]) = *((_BYTE *)a2 + v11[11]);
      *(void *)((char *)a1 + v11[12]) = *(void *)((char *)a2 + v11[12]);
      uint64_t v75 = v11[13];
      uint64_t v76 = (_OWORD *)((char *)a1 + v75);
      uint64_t v77 = (_OWORD *)((char *)a2 + v75);
      __int128 v78 = v77[1];
      *uint64_t v76 = *v77;
      v76[1] = v78;
      uint64_t v79 = sub_5C28(&qword_76360);
      uint64_t v52 = 0LL;
      *(_OWORD *)((char *)a1 + *(int *)(v79 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v79 + 48));
    }

    swift_storeEnumTagMultiPayload(a1, a3, v52);
  }

  return a1;
}

uint64_t type metadata accessor for RCSMessageReceiver.MessageProcessingContext( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2C980(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RCSMessageReceiver.MessageProcessingContext);
}

uint64_t sub_34FA8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_34FEC(uint64_t *a1, uint64_t a2, uint64_t a3, double (*a4)(void))
{
  double v5 = a4();
  uint64_t v6 = *a1 + 8;
  double v8 = v5;
  uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, &v9);
  *a1 = v6;
  return result;
}

void *sub_3503C(uint64_t a1)
{
  return sub_35048(a1, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))sub_152C0);
}

void *sub_35048(uint64_t a1, uint64_t (*a2)(uint64_t *, void *, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v5 = sub_5C28(&qword_76558);
  uint64_t v6 = (void *)swift_allocObject(v5, 16 * v2 + 32, 7LL);
  int64_t v7 = j__malloc_size(v6);
  uint64_t v8 = v7 - 32;
  if (v7 < 32) {
    uint64_t v8 = v7 - 17;
  }
  void v6[2] = v2;
  void v6[3] = 2 * (v8 >> 4);
  uint64_t v9 = a2(&v12, v6 + 4, v2, a1);
  uint64_t v10 = v12;
  swift_bridgeObjectRetain();
  sub_122D0(v10);
  if (v9 != v2)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v6;
}

uint64_t sub_35130(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    _OWORD v5[2] = ~v7;
    v5[3] = v12;
    void v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 56) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }

    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain(v21);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

uint64_t sub_3532C(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(void *)(v5 + 40) = a2;
  *(void *)(v5 + 48) = v4;
  *(void *)(v5 + 32) = a1;
  *(double *)(v5 + swift_weakDestroy(v0 + 16) = a3;
  *(double *)(v5 + 24) = a4;
  uint64_t v6 = sub_5C28(&qword_763A0);
  *(void *)(v5 + 56) = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for URL(0LL);
  *(void *)(v5 + 64) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v5 + 72) = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v5 + 80) = swift_task_alloc(v9);
  *(void *)(v5 + 88) = swift_task_alloc(v9);
  return swift_task_switch(sub_353C8, 0LL, 0LL);
}

uint64_t sub_353C8()
{
  id v1 = [objc_allocWithZone(CLLocation) initWithLatitude:*(double *)(v0 + 16) longitude:*(double *)(v0 + 24)];
  *(void *)(v0 + 96) = v1;
  id v2 = (id)IMVCardDataFromLocation();
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
    unint64_t v6 = v5;

    *(void *)(v0 + 104) = v4;
    *(void *)(v0 + 112) = v6;
    id v7 = [(id)objc_opt_self(NSFileManager) defaultManager];
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = objc_msgSend(v7, "im_randomTemporaryFileURLWithFileName:", v8);

    if (v9)
    {
      uint64_t v11 = *(void *)(v0 + 72);
      uint64_t v10 = *(void *)(v0 + 80);
      uint64_t v13 = *(void *)(v0 + 56);
      uint64_t v12 = *(void *)(v0 + 64);
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v9);

      int64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
      v14(v13, v10, v12);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v13, 0LL, 1LL, v12);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1LL, v12) != 1)
      {
        uint64_t v16 = *(void *)(v0 + 40);
        uint64_t v15 = *(void *)(v0 + 48);
        v14(*(void *)(v0 + 88), *(void *)(v0 + 56), *(void *)(v0 + 64));
        uint64_t v17 = *(int *)(v16 + 44);
        *(_DWORD *)(v0 + 240) = v17;
        *(void *)(v0 + 120) = *(void *)(v15 + v17);
        __asm { BR              X11 }
      }
    }

    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 72) + 56LL))( *(void *)(v0 + 56),  1LL,  1LL,  *(void *)(v0 + 64));
    }

    uint64_t v18 = *(void *)(v0 + 56);
    sub_F5F8(v4, v6);

    sub_1231C(v18, &qword_763A0);
  }

  else
  {
  }

  uint64_t v19 = *(void *)(v0 + 80);
  uint64_t v20 = *(void *)(v0 + 56);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_35698()
{
  id v1 = (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))v0[18];
  uint64_t v2 = v0[16];
  uint64_t v3 = v0[11];
  uint64_t v4 = v0[5];
  swift_release(v0[20]);
  v0[21] = *(void *)(v4 + 16);
  v0[22] = v1(0x762E636F6C2E4C43LL, 0xEA00000000006663LL, v2, v3);
  v0[23] = 0LL;
  return swift_task_switch(sub_35744, 0LL, 0LL);
}

uint64_t sub_35744()
{
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = Data.write(to:options:)(*(void *)(v0 + 88), 0LL, *(void *)(v0 + 104), *(void *)(v0 + 112));
  if (v1)
  {
    uint64_t v3 = *(void **)(v0 + 176);
    uint64_t v4 = *(void *)(v0 + 104);
    unint64_t v5 = *(void *)(v0 + 112);
    unint64_t v6 = *(void **)(v0 + 96);
    (*(void (**)(void, void))(*(void *)(v0 + 72) + 8LL))(*(void *)(v0 + 88), *(void *)(v0 + 64));

    sub_F5F8(v4, v5);
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 56);
    swift_task_dealloc(*(void *)(v0 + 88));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 152);
    uint64_t v11 = *(void *)(v0 + 136);
    *(void *)(v0 + 192) = *(void *)(*(void *)(v0 + 48) + *(int *)(v0 + 240));
    *(void *)(v0 + 200) = *(void *)(v11 + 48);
    *(void *)(v0 + 208) = static MainActor.shared.getter(v2);
    uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(v10, &protocol witness table for MainActor);
    return swift_task_switch(sub_35850, v12, v13);
  }

uint64_t sub_35850()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[25];
  uint64_t v3 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v4 = v0[17];
  swift_release(v0[26]);
  v1(v2, v3, v4);
  return swift_task_switch(sub_358B8, 0LL, 0LL);
}

uint64_t sub_358B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 152);
  uint64_t v3 = *(void *)(v1 + 136);
  *(void *)(v1 + 2swift_weakDestroy(v0 + 16) = *(void *)(*(void *)(v1 + 48) + *(int *)(v1 + 240));
  *(void *)(v1 + 224) = *(void *)(v3 + 64);
  *(void *)(v1 + 232) = static MainActor.shared.getter(a1);
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_35934, v4, v5);
}

uint64_t sub_35934()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[28];
  uint64_t v3 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v4 = v0[17];
  swift_release(v0[29]);
  v1(v2, v3, v4);
  return swift_task_switch(sub_3599C, 0LL, 0LL);
}

uint64_t sub_3599C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void **)(*(void *)(v0 + 48) + 8LL);
  id v3 = [*(id *)(v0 + 176) guid];
  [v2 appendFileTransferWithGUID:v3];

  if (v1)
  {
    uint64_t v4 = RCSChipList.attributes.getter();
    Class isa = (RCSServiceSession *)v4;
    if (v4)
    {
      unint64_t v6 = (RCSServiceSession *)sub_6D3C(v4);
      swift_bridgeObjectRelease(isa, v7, v8, v9, v10, v11, v12, v13);
      Class isa = (RCSServiceSession *)Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v6, v14, v15, v16, v17, v18, v19, v20);
    }
  }

  else
  {
    Class isa = 0LL;
  }

  uint64_t v21 = *(void **)(v0 + 176);
  uint64_t v23 = *(void *)(v0 + 104);
  unint64_t v22 = *(void *)(v0 + 112);
  uint64_t v24 = *(void **)(v0 + 96);
  uint64_t v26 = *(void *)(v0 + 40);
  uint64_t v25 = *(void *)(v0 + 48);
  [v2 appendChipList:isa];

  sub_F5F8(v23, v22);
  uint64_t v27 = *(int *)(v26 + 48);
  uint64_t v28 = *(void *)(v25 + v27);
  if ((v28 & 1) == 0) {
    *(void *)(v25 + v27) = v28 | 1;
  }
  (*(void (**)(void, void))(*(void *)(v0 + 72) + 8LL))(*(void *)(v0 + 88), *(void *)(v0 + 64));
  uint64_t v29 = *(void *)(v0 + 80);
  uint64_t v30 = *(void *)(v0 + 56);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_35AFC()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void **)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 72);
  sub_F5F8(*(void *)(v0 + 104), *(void *)(v0 + 112));

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  uint64_t v5 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 56);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_35B70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40LL);
}

uint64_t sub_35B78(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = type metadata accessor for RCSMessage(319LL);
  if (v3 <= 0x3F)
  {
    _OWORD v4[2] = *(void *)(result - 8) + 64LL;
    v4[3] = "\b";
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 0LL, 5LL, v4, a1 + 32);
    return 0LL;
  }

  return result;
}

char *sub_35C08(char *a1, char **a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16LL) & ~(unint64_t)v4];
    swift_retain(v5);
  }

  else
  {
    id v8 = a2[1];
    *((void *)a1 + 1) = v8;
    uint64_t v9 = *(int *)(a3 + 40);
    id v10 = &a1[v9];
    uint64_t v11 = (uint64_t)a2 + v9;
    char v12 = *((_BYTE *)a2 + v9 + 122);
    unsigned __int8 v13 = v5;
    SEL v14 = v8;
    uint64_t v109 = a3;
    unsigned __int8 v110 = a2;
    if ((v12 & 1) != 0)
    {
      uint64_t v15 = *(void *)(v11 + 8);
      *(void *)id v10 = *(void *)v11;
      *((void *)v10 + 1) = v15;
      uint64_t v16 = *(void *)(v11 + 24);
      *((void *)v10 + 2) = *(void *)(v11 + 16);
      *((void *)v10 + 3) = v16;
      uint64_t v17 = *(void *)(v11 + 40);
      *((void *)v10 + 4) = *(void *)(v11 + 32);
      *((void *)v10 + 5) = v17;
      *((void *)v10 + 6) = *(void *)(v11 + 48);
      v10[56] = *(_BYTE *)(v11 + 56);
      char v18 = *(_BYTE *)(v11 + 121);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((v18 & 1) != 0)
      {
        __int128 v19 = *(_OWORD *)(v11 + 88);
        *(_OWORD *)(v10 + 88) = v19;
        (**(void (***)(uint64_t, uint64_t))(v19 - 8))((uint64_t)(v10 + 64), v11 + 64);
      }

      else
      {
        uint64_t v22 = *(void *)(v11 + 72);
        *((void *)v10 + 8) = *(void *)(v11 + 64);
        *((void *)v10 + 9) = v22;
        uint64_t v23 = *(void *)(v11 + 88);
        *((void *)v10 + 10) = *(void *)(v11 + 80);
        *((void *)v10 + 11) = v23;
        uint64_t v24 = *(void *)(v11 + 104);
        *((void *)v10 + 12) = *(void *)(v11 + 96);
        *((void *)v10 + 13) = v24;
        *((void *)v10 + 14) = *(void *)(v11 + 112);
        v10[120] = *(_BYTE *)(v11 + 120);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      v10[121] = v18;
    }

    else
    {
      char v20 = *(_BYTE *)(v11 + 57);
      if ((v20 & 1) != 0)
      {
        __int128 v21 = *(_OWORD *)(v11 + 24);
        *(_OWORD *)(v10 + 24) = v21;
        (**(void (***)(char *, uint64_t))(v21 - 8))(v10, v11);
      }

      else
      {
        uint64_t v25 = *(void *)(v11 + 8);
        *(void *)id v10 = *(void *)v11;
        *((void *)v10 + 1) = v25;
        uint64_t v26 = *(void *)(v11 + 24);
        *((void *)v10 + 2) = *(void *)(v11 + 16);
        *((void *)v10 + 3) = v26;
        uint64_t v27 = *(void *)(v11 + 40);
        *((void *)v10 + 4) = *(void *)(v11 + 32);
        *((void *)v10 + 5) = v27;
        *((void *)v10 + 6) = *(void *)(v11 + 48);
        v10[56] = *(_BYTE *)(v11 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      v10[57] = v20;
    }

    v10[122] = v12;
    uint64_t v28 = *(void *)(v11 + 136);
    *((void *)v10 + swift_weakDestroy(v0 + 16) = *(void *)(v11 + 128);
    *((void *)v10 + 17) = v28;
    uint64_t v29 = *(void *)(v11 + 152);
    *((void *)v10 + 18) = *(void *)(v11 + 144);
    *((void *)v10 + 19) = v29;
    uint64_t v30 = (int *)type metadata accessor for RCSMessage(0LL);
    uint64_t v31 = v30[7];
    uint64_t v32 = &v10[v31];
    uint64_t v33 = (void *)(v11 + v31);
    uint64_t v34 = type metadata accessor for RCSMessage.Content(0LL);
    uint64_t v35 = *(void *)(v34 - 8);
    uint64_t v36 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v35 + 48);
    uint64_t v37 = v34;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v36(v33, 1LL, v37))
    {
      uint64_t v38 = sub_5C28(&qword_76228);
      memcpy(v32, v33, *(void *)(*(void *)(v38 - 8) + 64LL));
      uint64_t v39 = v109;
    }

    else
    {
      uint64_t v108 = v35;
      switch(swift_getEnumCaseMultiPayload(v33, v37))
      {
        case 0u:
          uint64_t v40 = v33[1];
          uint64_t v41 = v32;
          *(void *)uint64_t v32 = *v33;
          *((void *)v32 + 1) = v40;
          uint64_t v42 = v33[2];
          *((void *)v32 + 2) = v42;
          swift_bridgeObjectRetain();
          swift_retain(v42);
          uint64_t v43 = v32;
          uint64_t v44 = v37;
          uint64_t v45 = 0LL;
          goto LABEL_27;
        case 1u:
          uint64_t v106 = v37;
          uint64_t v46 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
          uint64_t v47 = *(void *)(v46 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v47 + 48))(v33, 1LL, v46))
          {
            uint64_t v48 = sub_5C28(&qword_76498);
            uint64_t v49 = v32;
            memcpy(v32, v33, *(void *)(*(void *)(v48 - 8) + 64LL));
          }

          else
          {
            uint64_t v49 = v32;
            *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
            *((void *)v32 + 2) = v33[2];
            uint64_t v61 = *(int *)(v46 + 24);
            unsigned __int8 v102 = (char *)v33 + v61;
            uint64_t v103 = &v32[v61];
            uint64_t v62 = type metadata accessor for URL(0LL);
            uint64_t v99 = *(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 16LL);
            swift_bridgeObjectRetain();
            v99(v103, v102, v62);
            uint64_t v63 = *(int *)(v46 + 28);
            uint64_t v64 = &v32[v63];
            uint64_t v104 = (char *)v33 + v63;
            uint64_t v65 = type metadata accessor for Date(0LL);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 16LL))(v64, v104, v65);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v32, 0LL, 1LL, v46);
          }

          uint64_t v66 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
          uint64_t v67 = (char *)v49 + v66;
          uint64_t v68 = (char *)v33 + v66;
          *(_OWORD *)uint64_t v67 = *(_OWORD *)((char *)v33 + v66);
          uint64_t v70 = *(void *)((char *)v33 + v66 + 16);
          uint64_t v69 = *(void *)((char *)v33 + v66 + 24);
          *((void *)v67 + 2) = v70;
          *((void *)v67 + 3) = v69;
          *((void *)v67 + 4) = *((void *)v68 + 4);
          uint64_t v71 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
          uint64_t v72 = v71[7];
          uint64_t v100 = &v68[v72];
          uint64_t v101 = &v67[v72];
          uint64_t v73 = type metadata accessor for URL(0LL);
          uint64_t v98 = *(void (**)(char *, char *, uint64_t))(*(void *)(v73 - 8) + 16LL);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v98(v101, v100, v73);
          uint64_t v41 = v32;
          uint64_t v74 = v71[8];
          uint64_t v75 = &v67[v74];
          id v105 = &v68[v74];
          uint64_t v76 = type metadata accessor for Date(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 16LL))(v75, v105, v76);
          v67[v71[9]] = v68[v71[9]];
          uint64_t v77 = v71[10];
          __int128 v78 = &v67[v77];
          uint64_t v79 = &v68[v77];
          v78[8] = v79[8];
          *(void *)__int128 v78 = *(void *)v79;
          uint64_t v80 = *(int *)(sub_5C28(&qword_764A0) + 48);
          uint64_t v81 = *(void *)((char *)v33 + v80);
          *(void *)&v41[v80] = v81;
          swift_retain(v81);
          uint64_t v43 = v41;
          uint64_t v37 = v106;
          uint64_t v44 = v106;
          uint64_t v45 = 1LL;
          goto LABEL_27;
        case 2u:
          uint64_t v41 = v32;
          *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
          uint64_t v50 = v33[3];
          *((void *)v32 + 2) = v33[2];
          *((void *)v32 + 3) = v50;
          uint64_t v51 = v33[4];
          *((void *)v32 + 4) = v51;
          swift_bridgeObjectRetain();
          swift_retain(v51);
          uint64_t v43 = v32;
          uint64_t v44 = v37;
          uint64_t v45 = 2LL;
          goto LABEL_27;
        case 3u:
          uint64_t v107 = v37;
          __int128 v52 = *(_OWORD *)(v33 + 3);
          uint64_t v41 = v32;
          *(_OWORD *)(v32 + 24) = v52;
          (**(void (***)(char *, void *))(v52 - 8))(v32, v33);
          uint64_t v53 = v33[6];
          *((void *)v32 + 5) = v33[5];
          *((void *)v32 + 6) = v53;
          *((void *)v32 + 7) = v33[7];
          uint64_t v54 = v33[9];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v54)
          {
            *((void *)v32 + 8) = v33[8];
            *((void *)v32 + 9) = v54;
            uint64_t v56 = v33[10];
            unint64_t v55 = v33[11];
            swift_bridgeObjectRetain();
            sub_F120(v56, v55);
            *((void *)v32 + 10) = v56;
            *((void *)v32 + 11) = v55;
            uint64_t v57 = v33[13];
            *((void *)v32 + 12) = v33[12];
            *((void *)v32 + 13) = v57;
            swift_bridgeObjectRetain();
          }

          else
          {
            __int128 v97 = *((_OWORD *)v33 + 5);
            *((_OWORD *)v32 + 4) = *((_OWORD *)v33 + 4);
            *((_OWORD *)v32 + 5) = v97;
            *((_OWORD *)v32 + 6) = *((_OWORD *)v33 + 6);
          }

          uint64_t v39 = v109;
          uint64_t v37 = v107;
          swift_storeEnumTagMultiPayload(v41, v107, 3LL);
          uint64_t v35 = v108;
          break;
        case 5u:
          uint64_t v58 = *v33;
          uint64_t v41 = v32;
          *(void *)uint64_t v32 = *v33;
          swift_retain(v58);
          uint64_t v43 = v32;
          uint64_t v44 = v37;
          uint64_t v45 = 5LL;
          goto LABEL_27;
        case 6u:
          uint64_t v59 = *v33;
          uint64_t v41 = v32;
          *(void *)uint64_t v32 = *v33;
          swift_retain(v59);
          uint64_t v43 = v32;
          uint64_t v44 = v37;
          uint64_t v45 = 6LL;
          goto LABEL_27;
        case 7u:
          uint64_t v60 = *v33;
          uint64_t v41 = v32;
          *(void *)uint64_t v32 = *v33;
          swift_retain(v60);
          uint64_t v43 = v32;
          uint64_t v44 = v37;
          uint64_t v45 = 7LL;
LABEL_27:
          swift_storeEnumTagMultiPayload(v43, v44, v45);
          uint64_t v35 = v108;
          uint64_t v39 = v109;
          break;
        default:
          uint64_t v41 = v32;
          memcpy(v32, v33, *(void *)(v35 + 64));
          uint64_t v39 = v109;
          break;
      }

      (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v41, 0LL, 1LL, v37);
    }

    uint64_t v82 = v30[8];
    uint64_t v83 = &v10[v82];
    uint64_t v84 = v11 + v82;
    uint64_t v85 = *(void *)(v11 + v82 + 24);
    if (v85)
    {
      uint64_t v86 = *(void *)(v84 + 32);
      *((void *)v83 + 3) = v85;
      *((void *)v83 + 4) = v86;
      (**(void (***)(void))(v85 - 8))();
    }

    else
    {
      __int128 v87 = *(_OWORD *)(v84 + 16);
      *(_OWORD *)uint64_t v83 = *(_OWORD *)v84;
      *((_OWORD *)v83 + 1) = v87;
      *((void *)v83 + 4) = *(void *)(v84 + 32);
    }

    *(void *)&v10[v30[9]] = *(void *)(v11 + v30[9]);
    v10[v30[10]] = *(_BYTE *)(v11 + v30[10]);
    v10[v30[11]] = *(_BYTE *)(v11 + v30[11]);
    *(void *)&v10[v30[12]] = *(void *)(v11 + v30[12]);
    uint64_t v88 = v30[13];
    __int128 v89 = &v10[v88];
    uint64_t v90 = (void *)(v11 + v88);
    uint64_t v91 = v90[1];
    *(void *)__int128 v89 = *v90;
    *((void *)v89 + 1) = v91;
    uint64_t v92 = v90[3];
    *((void *)v89 + 2) = v90[2];
    *((void *)v89 + 3) = v92;
    uint64_t v93 = *(int *)(v39 + 44);
    uint64_t v94 = *(int *)(v39 + 48);
    uint64_t v95 = *(uint64_t *)((char *)v110 + v93);
    *(void *)&a1[v93] = v95;
    *(void *)&a1[v94] = *(char **)((char *)v110 + v94);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain(v95);
  }

  return a1;
}

uint64_t sub_36324(id *a1, uint64_t a2)
{
  uint64_t v11 = (char *)a1 + *(int *)(a2 + 40);
  if ((v11[122] & 1) != 0)
  {
    swift_bridgeObjectRelease(*((RCSServiceSession **)v11 + 1), v4, v5, v6, v7, v8, v9, v10);
    swift_bridgeObjectRelease(*((RCSServiceSession **)v11 + 3), v12, v13, v14, v15, v16, v17, v18);
    swift_bridgeObjectRelease(*((RCSServiceSession **)v11 + 4), v19, v20, v21, v22, v23, v24, v25);
    swift_bridgeObjectRelease(*((RCSServiceSession **)v11 + 6), v26, v27, v28, v29, v30, v31, v32);
    if ((v11[121] & 1) != 0)
    {
      uint64_t v40 = v11 + 64;
LABEL_6:
      sub_12204(v40);
      goto LABEL_10;
    }

    swift_bridgeObjectRelease(*((RCSServiceSession **)v11 + 9), v33, v34, v35, v36, v37, v38, v39);
    swift_bridgeObjectRelease(*((RCSServiceSession **)v11 + 11), v48, v49, v50, v51, v52, v53, v54);
    swift_bridgeObjectRelease(*((RCSServiceSession **)v11 + 12), v55, v56, v57, v58, v59, v60, v61);
    uint64_t v69 = (RCSServiceSession *)*((void *)v11 + 14);
  }

  else
  {
    if ((v11[57] & 1) != 0)
    {
      uint64_t v40 = (id *)((char *)a1 + *(int *)(a2 + 40));
      goto LABEL_6;
    }

    swift_bridgeObjectRelease(*((RCSServiceSession **)v11 + 1), v4, v5, v6, v7, v8, v9, v10);
    swift_bridgeObjectRelease(*((RCSServiceSession **)v11 + 3), v70, v71, v72, v73, v74, v75, v76);
    swift_bridgeObjectRelease(*((RCSServiceSession **)v11 + 4), v77, v78, v79, v80, v81, v82, v83);
    uint64_t v69 = (RCSServiceSession *)*((void *)v11 + 6);
  }

  swift_bridgeObjectRelease(v69, v62, v63, v64, v65, v66, v67, v68);
LABEL_10:
  swift_bridgeObjectRelease(*((RCSServiceSession **)v11 + 17), v41, v42, v43, v44, v45, v46, v47);
  swift_bridgeObjectRelease(*((RCSServiceSession **)v11 + 19), v84, v85, v86, v87, v88, v89, v90);
  uint64_t v91 = (int *)type metadata accessor for RCSMessage(0LL);
  uint64_t v92 = &v11[v91[7]];
  uint64_t v93 = type metadata accessor for RCSMessage.Content(0LL);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v93 - 8) + 48LL))(v92, 1LL, v93))
  {
    switch(swift_getEnumCaseMultiPayload(v92, v93))
    {
      case 0u:
        swift_bridgeObjectRelease(*((RCSServiceSession **)v92 + 1), v94, v95, v96, v97, v98, v99, v100);
        uint64_t v101 = *((void *)v92 + 2);
        goto LABEL_18;
      case 1u:
        uint64_t v102 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v102 - 8) + 48LL))(v92, 1LL, v102))
        {
          swift_bridgeObjectRelease(*((RCSServiceSession **)v92 + 2), v103, v104, v105, v106, v107, v108, v109);
          unsigned __int8 v110 = &v92[*(int *)(v102 + 24)];
          uint64_t v111 = type metadata accessor for URL(0LL);
          (*(void (**)(char *, uint64_t))(*(void *)(v111 - 8) + 8LL))(v110, v111);
          uint64_t v112 = &v92[*(int *)(v102 + 28)];
          uint64_t v113 = type metadata accessor for Date(0LL);
          (*(void (**)(char *, uint64_t))(*(void *)(v113 - 8) + 8LL))(v112, v113);
        }

        uint64_t v114 = &v92[*(int *)(type metadata accessor for RCSFile(0LL) + 20)];
        swift_bridgeObjectRelease(*((RCSServiceSession **)v114 + 2), v115, v116, v117, v118, v119, v120, v121);
        swift_bridgeObjectRelease(*((RCSServiceSession **)v114 + 4), v122, v123, v124, v125, v126, v127, v128);
        uint64_t v129 = type metadata accessor for RCSFile.DispositionInformation(0LL);
        uint64_t v130 = &v114[*(int *)(v129 + 28)];
        uint64_t v131 = type metadata accessor for URL(0LL);
        (*(void (**)(char *, uint64_t))(*(void *)(v131 - 8) + 8LL))(v130, v131);
        unsigned __int8 v132 = &v114[*(int *)(v129 + 32)];
        uint64_t v133 = type metadata accessor for Date(0LL);
        (*(void (**)(char *, uint64_t))(*(void *)(v133 - 8) + 8LL))(v132, v133);
        uint64_t v101 = *(void *)&v92[*(int *)(sub_5C28(&qword_764A0) + 48)];
        goto LABEL_18;
      case 2u:
        swift_bridgeObjectRelease(*((RCSServiceSession **)v92 + 3), v94, v95, v96, v97, v98, v99, v100);
        uint64_t v101 = *((void *)v92 + 4);
        goto LABEL_18;
      case 3u:
        sub_12204(v92);
        swift_bridgeObjectRelease(*((RCSServiceSession **)v92 + 5), v158, v159, v160, v161, v162, v163, v164);
        swift_bridgeObjectRelease(*((RCSServiceSession **)v92 + 7), v165, v166, v167, v168, v169, v170, v171);
        SEL v172 = (RCSServiceSession *)*((void *)v92 + 9);
        if (v172)
        {
          swift_bridgeObjectRelease(v172, v94, v95, v96, v97, v98, v99, v100);
          sub_F5F8(*((void *)v92 + 10), *((void *)v92 + 11));
          swift_bridgeObjectRelease(*((RCSServiceSession **)v92 + 13), v173, v174, v175, v176, v177, v178, v179);
        }

        break;
      case 5u:
      case 6u:
      case 7u:
        uint64_t v101 = *(void *)v92;
LABEL_18:
        swift_release(v101);
        break;
      default:
        break;
    }
  }

  uint64_t v134 = &v11[v91[8]];
  if (*((void *)v134 + 3)) {
    sub_12204(v134);
  }
  swift_bridgeObjectRelease(*(RCSServiceSession **)&v11[v91[9]], v94, v95, v96, v97, v98, v99, v100);
  swift_bridgeObjectRelease(*(RCSServiceSession **)&v11[v91[12]], v135, v136, v137, v138, v139, v140, v141);
  uint64_t v142 = &v11[v91[13]];
  swift_bridgeObjectRelease(*((RCSServiceSession **)v142 + 1), v143, v144, v145, v146, v147, v148, v149);
  swift_bridgeObjectRelease(*((RCSServiceSession **)v142 + 3), v150, v151, v152, v153, v154, v155, v156);
  return swift_unknownObjectRelease(*(id *)((char *)a1 + *(int *)(a2 + 44)));
}

void *sub_3662C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  SEL v7 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 40);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = a2 + v8;
  char v11 = *(_BYTE *)(a2 + v8 + 122);
  id v12 = v6;
  id v13 = v7;
  uint64_t v109 = a2;
  uint64_t v110 = a3;
  uint64_t v108 = a1;
  if ((v11 & 1) != 0)
  {
    uint64_t v14 = *(void *)(v10 + 8);
    *(void *)uint64_t v9 = *(void *)v10;
    *((void *)v9 + 1) = v14;
    uint64_t v15 = *(void *)(v10 + 24);
    *((void *)v9 + 2) = *(void *)(v10 + 16);
    *((void *)v9 + 3) = v15;
    uint64_t v16 = *(void *)(v10 + 40);
    *((void *)v9 + 4) = *(void *)(v10 + 32);
    *((void *)v9 + 5) = v16;
    *((void *)v9 + 6) = *(void *)(v10 + 48);
    v9[56] = *(_BYTE *)(v10 + 56);
    char v17 = *(_BYTE *)(v10 + 121);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((v17 & 1) != 0)
    {
      __int128 v18 = *(_OWORD *)(v10 + 88);
      *(_OWORD *)(v9 + 88) = v18;
      (**(void (***)(uint64_t, uint64_t))(v18 - 8))((uint64_t)(v9 + 64), v10 + 64);
    }

    else
    {
      uint64_t v21 = *(void *)(v10 + 72);
      *((void *)v9 + 8) = *(void *)(v10 + 64);
      *((void *)v9 + 9) = v21;
      uint64_t v22 = *(void *)(v10 + 88);
      *((void *)v9 + 10) = *(void *)(v10 + 80);
      *((void *)v9 + 11) = v22;
      uint64_t v23 = *(void *)(v10 + 104);
      *((void *)v9 + 12) = *(void *)(v10 + 96);
      *((void *)v9 + 13) = v23;
      *((void *)v9 + 14) = *(void *)(v10 + 112);
      v9[120] = *(_BYTE *)(v10 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    v9[121] = v17;
  }

  else
  {
    char v19 = *(_BYTE *)(v10 + 57);
    if ((v19 & 1) != 0)
    {
      __int128 v20 = *(_OWORD *)(v10 + 24);
      *(_OWORD *)(v9 + 24) = v20;
      (**(void (***)(char *, uint64_t))(v20 - 8))(v9, v10);
    }

    else
    {
      uint64_t v24 = *(void *)(v10 + 8);
      *(void *)uint64_t v9 = *(void *)v10;
      *((void *)v9 + 1) = v24;
      uint64_t v25 = *(void *)(v10 + 24);
      *((void *)v9 + 2) = *(void *)(v10 + 16);
      *((void *)v9 + 3) = v25;
      uint64_t v26 = *(void *)(v10 + 40);
      *((void *)v9 + 4) = *(void *)(v10 + 32);
      *((void *)v9 + 5) = v26;
      *((void *)v9 + 6) = *(void *)(v10 + 48);
      v9[56] = *(_BYTE *)(v10 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    v9[57] = v19;
  }

  v9[122] = v11;
  uint64_t v27 = *(void *)(v10 + 136);
  *((void *)v9 + swift_weakDestroy(v0 + 16) = *(void *)(v10 + 128);
  *((void *)v9 + 17) = v27;
  uint64_t v28 = *(void *)(v10 + 152);
  *((void *)v9 + 18) = *(void *)(v10 + 144);
  *((void *)v9 + 19) = v28;
  id v29 = (int *)type metadata accessor for RCSMessage(0LL);
  uint64_t v30 = v29[7];
  id v31 = &v9[v30];
  unsigned __int8 v32 = (void *)(v10 + v30);
  uint64_t v33 = type metadata accessor for RCSMessage.Content(0LL);
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v34 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v35(v32, 1LL, v33))
  {
    uint64_t v36 = sub_5C28(&qword_76228);
    memcpy(v31, v32, *(void *)(*(void *)(v36 - 8) + 64LL));
    uint64_t v37 = v109;
    uint64_t v38 = v110;
    unsigned __int8 v39 = v108;
  }

  else
  {
    uint64_t v107 = v34;
    switch(swift_getEnumCaseMultiPayload(v32, v33))
    {
      case 0u:
        uint64_t v40 = v32[1];
        uint64_t v41 = v31;
        *(void *)id v31 = *v32;
        *((void *)v31 + 1) = v40;
        uint64_t v42 = v32[2];
        *((void *)v31 + 2) = v42;
        swift_bridgeObjectRetain();
        swift_retain(v42);
        uint64_t v43 = v31;
        uint64_t v44 = v33;
        uint64_t v45 = 0LL;
        goto LABEL_23;
      case 1u:
        uint64_t v46 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
        uint64_t v47 = *(void *)(v46 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v47 + 48))(v32, 1LL, v46))
        {
          uint64_t v48 = sub_5C28(&qword_76498);
          id v49 = v31;
          memcpy(v31, v32, *(void *)(*(void *)(v48 - 8) + 64LL));
        }

        else
        {
          id v49 = v31;
          *(_OWORD *)id v31 = *(_OWORD *)v32;
          *((void *)v31 + 2) = v32[2];
          uint64_t v77 = *(int *)(v46 + 24);
          uint64_t v102 = (char *)v32 + v77;
          uint64_t v104 = &v31[v77];
          uint64_t v78 = type metadata accessor for URL(0LL);
          uint64_t v99 = *(void (**)(char *, char *, uint64_t))(*(void *)(v78 - 8) + 16LL);
          swift_bridgeObjectRetain();
          v99(v104, v102, v78);
          uint64_t v79 = *(int *)(v46 + 28);
          id v80 = &v31[v79];
          id v105 = (char *)v32 + v79;
          uint64_t v81 = type metadata accessor for Date(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v81 - 8) + 16LL))(v80, v105, v81);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v31, 0LL, 1LL, v46);
        }

        unsigned __int8 v39 = v108;
        uint64_t v82 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
        unsigned __int8 v83 = (char *)v49 + v82;
        SEL v84 = (char *)v32 + v82;
        *(_OWORD *)unsigned __int8 v83 = *(_OWORD *)((char *)v32 + v82);
        uint64_t v86 = *(void *)((char *)v32 + v82 + 16);
        uint64_t v85 = *(void *)((char *)v32 + v82 + 24);
        *((void *)v83 + 2) = v86;
        *((void *)v83 + 3) = v85;
        *((void *)v83 + 4) = *((void *)v84 + 4);
        id v87 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
        uint64_t v88 = v87[7];
        unsigned __int8 v100 = &v84[v88];
        uint64_t v101 = &v83[v88];
        uint64_t v97 = type metadata accessor for URL(0LL);
        uint64_t v98 = *(void (**)(char *, char *, uint64_t))(*(void *)(v97 - 8) + 16LL);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v98(v101, v100, v97);
        uint64_t v89 = v87[8];
        uint64_t v103 = &v84[v89];
        uint64_t v106 = &v83[v89];
        uint64_t v90 = type metadata accessor for Date(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v90 - 8) + 16LL))(v106, v103, v90);
        v83[v87[9]] = v84[v87[9]];
        uint64_t v91 = v87[10];
        uint64_t v92 = &v83[v91];
        uint64_t v93 = &v84[v91];
        uint64_t v41 = v31;
        v92[8] = v93[8];
        *(void *)uint64_t v92 = *(void *)v93;
        uint64_t v94 = *(int *)(sub_5C28(&qword_764A0) + 48);
        uint64_t v95 = *(void *)((char *)v32 + v94);
        *(void *)&v31[v94] = v95;
        swift_retain(v95);
        swift_storeEnumTagMultiPayload(v31, v33, 1LL);
        uint64_t v37 = v109;
        uint64_t v38 = v110;
        uint64_t v58 = v107;
        goto LABEL_25;
      case 2u:
        uint64_t v41 = v31;
        *(_OWORD *)id v31 = *(_OWORD *)v32;
        uint64_t v50 = v32[3];
        *((void *)v31 + 2) = v32[2];
        *((void *)v31 + 3) = v50;
        uint64_t v51 = v32[4];
        *((void *)v31 + 4) = v51;
        swift_bridgeObjectRetain();
        swift_retain(v51);
        uint64_t v43 = v31;
        uint64_t v44 = v33;
        uint64_t v45 = 2LL;
        goto LABEL_23;
      case 3u:
        __int128 v52 = *(_OWORD *)(v32 + 3);
        uint64_t v41 = v31;
        *(_OWORD *)(v31 + 24) = v52;
        (**(void (***)(char *, void *))(v52 - 8))(v31, v32);
        uint64_t v53 = v32[6];
        *((void *)v31 + 5) = v32[5];
        *((void *)v31 + 6) = v53;
        *((void *)v31 + 7) = v32[7];
        uint64_t v54 = v32[9];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v54)
        {
          *((void *)v41 + 8) = v32[8];
          *((void *)v41 + 9) = v54;
          uint64_t v56 = v32[10];
          unint64_t v55 = v32[11];
          swift_bridgeObjectRetain();
          sub_F120(v56, v55);
          *((void *)v41 + 10) = v56;
          *((void *)v41 + 11) = v55;
          uint64_t v57 = v32[13];
          *((void *)v41 + 12) = v32[12];
          *((void *)v41 + 13) = v57;
          swift_bridgeObjectRetain();
        }

        else
        {
          __int128 v96 = *((_OWORD *)v32 + 5);
          *((_OWORD *)v41 + 4) = *((_OWORD *)v32 + 4);
          *((_OWORD *)v41 + 5) = v96;
          *((_OWORD *)v41 + 6) = *((_OWORD *)v32 + 6);
        }

        uint64_t v37 = v109;
        uint64_t v38 = v110;
        unsigned __int8 v39 = v108;
        swift_storeEnumTagMultiPayload(v41, v33, 3LL);
        uint64_t v58 = v107;
        goto LABEL_25;
      case 5u:
        uint64_t v59 = *v32;
        uint64_t v41 = v31;
        *(void *)id v31 = *v32;
        swift_retain(v59);
        uint64_t v43 = v31;
        uint64_t v44 = v33;
        uint64_t v45 = 5LL;
        goto LABEL_23;
      case 6u:
        uint64_t v60 = *v32;
        uint64_t v41 = v31;
        *(void *)id v31 = *v32;
        swift_retain(v60);
        uint64_t v43 = v31;
        uint64_t v44 = v33;
        uint64_t v45 = 6LL;
        goto LABEL_23;
      case 7u:
        uint64_t v61 = *v32;
        uint64_t v41 = v31;
        *(void *)id v31 = *v32;
        swift_retain(v61);
        uint64_t v43 = v31;
        uint64_t v44 = v33;
        uint64_t v45 = 7LL;
LABEL_23:
        swift_storeEnumTagMultiPayload(v43, v44, v45);
        uint64_t v37 = v109;
        uint64_t v38 = v110;
        uint64_t v58 = v34;
        break;
      default:
        uint64_t v58 = v34;
        uint64_t v41 = v31;
        memcpy(v31, v32, *(void *)(v34 + 64));
        uint64_t v37 = v109;
        uint64_t v38 = v110;
        break;
    }

    unsigned __int8 v39 = v108;
LABEL_25:
    (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v41, 0LL, 1LL, v33);
  }

  uint64_t v62 = v29[8];
  uint64_t v63 = &v9[v62];
  uint64_t v64 = v10 + v62;
  uint64_t v65 = *(void *)(v10 + v62 + 24);
  if (v65)
  {
    uint64_t v66 = *(void *)(v64 + 32);
    *((void *)v63 + 3) = v65;
    *((void *)v63 + 4) = v66;
    (**(void (***)(void))(v65 - 8))();
  }

  else
  {
    __int128 v67 = *(_OWORD *)(v64 + 16);
    *(_OWORD *)uint64_t v63 = *(_OWORD *)v64;
    *((_OWORD *)v63 + 1) = v67;
    *((void *)v63 + 4) = *(void *)(v64 + 32);
  }

  *(void *)&v9[v29[9]] = *(void *)(v10 + v29[9]);
  v9[v29[10]] = *(_BYTE *)(v10 + v29[10]);
  v9[v29[11]] = *(_BYTE *)(v10 + v29[11]);
  *(void *)&v9[v29[12]] = *(void *)(v10 + v29[12]);
  uint64_t v68 = v29[13];
  uint64_t v69 = &v9[v68];
  SEL v70 = (void *)(v10 + v68);
  uint64_t v71 = v70[1];
  *(void *)uint64_t v69 = *v70;
  *((void *)v69 + 1) = v71;
  uint64_t v72 = v70[3];
  *((void *)v69 + 2) = v70[2];
  *((void *)v69 + 3) = v72;
  uint64_t v73 = *(int *)(v38 + 44);
  uint64_t v74 = *(int *)(v38 + 48);
  uint64_t v75 = *(void *)(v37 + v73);
  *(void *)((char *)v39 + v73) = v75;
  *(void *)((char *)v39 + v74) = *(void *)(v37 + v74);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain(v75);
  return v39;
}

uint64_t sub_36D1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  SEL v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  uint64_t v9 = *(void **)(a2 + 8);
  uint64_t v10 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v9;
  id v11 = v9;

  uint64_t v183 = a3;
  uint64_t v12 = *(int *)(a3 + 40);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  if (a1 != a2)
  {
    sub_CB8C(a1 + v12);
    char v15 = *(_BYTE *)(v14 + 122);
    if ((v15 & 1) != 0)
    {
      *(void *)uint64_t v13 = *(void *)v14;
      *(void *)(v13 + 8) = *(void *)(v14 + 8);
      *(void *)(v13 + swift_weakDestroy(v0 + 16) = *(void *)(v14 + 16);
      *(void *)(v13 + 24) = *(void *)(v14 + 24);
      *(void *)(v13 + 32) = *(void *)(v14 + 32);
      *(void *)(v13 + 40) = *(void *)(v14 + 40);
      *(void *)(v13 + 48) = *(void *)(v14 + 48);
      *(_BYTE *)(v13 + 56) = *(_BYTE *)(v14 + 56);
      char v16 = *(_BYTE *)(v14 + 121);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((v16 & 1) != 0)
      {
        uint64_t v17 = *(void *)(v14 + 88);
        *(void *)(v13 + 88) = v17;
        *(void *)(v13 + 96) = *(void *)(v14 + 96);
        (**(void (***)(uint64_t, uint64_t))(v17 - 8))(v13 + 64, v14 + 64);
      }

      else
      {
        *(void *)(v13 + 64) = *(void *)(v14 + 64);
        *(void *)(v13 + 72) = *(void *)(v14 + 72);
        *(void *)(v13 + 80) = *(void *)(v14 + 80);
        *(void *)(v13 + 88) = *(void *)(v14 + 88);
        *(void *)(v13 + 96) = *(void *)(v14 + 96);
        *(void *)(v13 + 104) = *(void *)(v14 + 104);
        *(void *)(v13 + 112) = *(void *)(v14 + 112);
        *(_BYTE *)(v13 + 120) = *(_BYTE *)(v14 + 120);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      *(_BYTE *)(v13 + 121) = v16;
    }

    else
    {
      char v18 = *(_BYTE *)(v14 + 57);
      if ((v18 & 1) != 0)
      {
        uint64_t v19 = *(void *)(v14 + 24);
        *(void *)(v13 + 24) = v19;
        *(void *)(v13 + 32) = *(void *)(v14 + 32);
        (**(void (***)(uint64_t, uint64_t))(v19 - 8))(v13, v14);
      }

      else
      {
        *(void *)uint64_t v13 = *(void *)v14;
        *(void *)(v13 + 8) = *(void *)(v14 + 8);
        *(void *)(v13 + swift_weakDestroy(v0 + 16) = *(void *)(v14 + 16);
        *(void *)(v13 + 24) = *(void *)(v14 + 24);
        *(void *)(v13 + 32) = *(void *)(v14 + 32);
        *(void *)(v13 + 40) = *(void *)(v14 + 40);
        *(void *)(v13 + 48) = *(void *)(v14 + 48);
        *(_BYTE *)(v13 + 56) = *(_BYTE *)(v14 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      *(_BYTE *)(v13 + 57) = v18;
    }

    *(_BYTE *)(v13 + 122) = v15;
  }

  *(void *)(v13 + 128) = *(void *)(v14 + 128);
  __int128 v20 = *(RCSServiceSession **)(v13 + 136);
  *(void *)(v13 + 136) = *(void *)(v14 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v20, v21, v22, v23, v24, v25, v26, v27);
  *(void *)(v13 + 144) = *(void *)(v14 + 144);
  uint64_t v28 = *(RCSServiceSession **)(v13 + 152);
  *(void *)(v13 + 152) = *(void *)(v14 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v28, v29, v30, v31, v32, v33, v34, v35);
  uint64_t v36 = (int *)type metadata accessor for RCSMessage(0LL);
  uint64_t v37 = v36[7];
  uint64_t v38 = (void *)(v13 + v37);
  unsigned __int8 v39 = (void *)(v14 + v37);
  uint64_t v40 = type metadata accessor for RCSMessage.Content(0LL);
  uint64_t v179 = *(void *)(v40 - 8);
  uint64_t v41 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v179 + 48);
  int v42 = v41(v38, 1LL, v40);
  int v43 = v41(v39, 1LL, v40);
  if (v42)
  {
    if (!v43)
    {
      switch(swift_getEnumCaseMultiPayload(v39, v40))
      {
        case 0u:
          *uint64_t v38 = *v39;
          v38[1] = v39[1];
          uint64_t v44 = v39[2];
          _OWORD v38[2] = v44;
          swift_bridgeObjectRetain();
          swift_retain(v44);
          uint64_t v45 = v38;
          uint64_t v46 = v40;
          uint64_t v47 = 0LL;
          goto LABEL_45;
        case 1u:
          uint64_t v50 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
          uint64_t v51 = *(void *)(v50 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v51 + 48))(v39, 1LL, v50))
          {
            uint64_t v52 = sub_5C28(&qword_76498);
            memcpy(v38, v39, *(void *)(*(void *)(v52 - 8) + 64LL));
          }

          else
          {
            *uint64_t v38 = *v39;
            v38[1] = v39[1];
            _OWORD v38[2] = v39[2];
            uint64_t v73 = *(int *)(v50 + 24);
            id v166 = (char *)v39 + v73;
            id v170 = (char *)v38 + v73;
            uint64_t v160 = type metadata accessor for URL(0LL);
            uint64_t v174 = v51;
            uint64_t v74 = *(void (**)(char *, char *, uint64_t))(*(void *)(v160 - 8) + 16LL);
            swift_bridgeObjectRetain();
            v74(v170, v166, v160);
            uint64_t v75 = *(int *)(v50 + 28);
            unsigned __int8 v76 = (char *)v38 + v75;
            unsigned __int8 v171 = (char *)v39 + v75;
            uint64_t v77 = type metadata accessor for Date(0LL);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v77 - 8) + 16LL))(v76, v171, v77);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v174 + 56))(v38, 0LL, 1LL, v50);
          }

          uint64_t v78 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
          uint64_t v79 = (void *)((char *)v38 + v78);
          id v80 = (char *)v39 + v78;
          *uint64_t v79 = *(void *)((char *)v39 + v78);
          v79[1] = *(void *)((char *)v39 + v78 + 8);
          v79[2] = *(void *)((char *)v39 + v78 + 16);
          v79[3] = *(void *)((char *)v39 + v78 + 24);
          id v175 = (char *)v39 + v78;
          v79[4] = *(void *)((char *)v39 + v78 + 32);
          SEL v172 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
          uint64_t v81 = v172[7];
          SEL v158 = &v80[v81];
          id v161 = (char *)v79 + v81;
          uint64_t v82 = type metadata accessor for URL(0LL);
          uint64_t v157 = *(void (**)(char *, char *, uint64_t))(*(void *)(v82 - 8) + 16LL);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v157(v161, v158, v82);
          uint64_t v83 = v172[8];
          id v167 = (char *)v79 + v83;
          id v163 = &v175[v83];
          uint64_t v84 = type metadata accessor for Date(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v84 - 8) + 16LL))(v167, v163, v84);
          *((_BYTE *)v79 + v172[9]) = v175[v172[9]];
          uint64_t v85 = v172[10];
          uint64_t v86 = (char *)v79 + v85;
          id v87 = &v175[v85];
          char v88 = v87[8];
          *(void *)uint64_t v86 = *(void *)v87;
          v86[8] = v88;
          uint64_t v89 = *(int *)(sub_5C28(&qword_764A0) + 48);
          uint64_t v90 = *(void *)((char *)v39 + v89);
          *(void *)((char *)v38 + v89) = v90;
          swift_retain(v90);
          uint64_t v45 = v38;
          uint64_t v46 = v40;
          uint64_t v47 = 1LL;
          goto LABEL_45;
        case 2u:
          *uint64_t v38 = *v39;
          v38[1] = v39[1];
          _OWORD v38[2] = v39[2];
          void v38[3] = v39[3];
          uint64_t v53 = v39[4];
          v38[4] = v53;
          swift_bridgeObjectRetain();
          swift_retain(v53);
          uint64_t v45 = v38;
          uint64_t v46 = v40;
          uint64_t v47 = 2LL;
          goto LABEL_45;
        case 3u:
          uint64_t v54 = v39[3];
          void v38[3] = v54;
          v38[4] = v39[4];
          (**(void (***)(void *, void *))(v54 - 8))(v38, v39);
          v38[5] = v39[5];
          v38[6] = v39[6];
          v38[7] = v39[7];
          uint64_t v55 = v39[9];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v55)
          {
            _BYTE v38[8] = v39[8];
            v38[9] = v39[9];
            uint64_t v57 = v39[10];
            unint64_t v56 = v39[11];
            swift_bridgeObjectRetain();
            sub_F120(v57, v56);
            v38[10] = v57;
            v38[11] = v56;
            v38[12] = v39[12];
            v38[13] = v39[13];
            swift_bridgeObjectRetain();
          }

          else
          {
            __int128 v91 = *((_OWORD *)v39 + 4);
            __int128 v92 = *((_OWORD *)v39 + 6);
            *((_OWORD *)v38 + 5) = *((_OWORD *)v39 + 5);
            *((_OWORD *)v38 + 6) = v92;
            *((_OWORD *)v38 + 4) = v91;
          }

          uint64_t v45 = v38;
          uint64_t v46 = v40;
          uint64_t v47 = 3LL;
          goto LABEL_45;
        case 5u:
          uint64_t v59 = *v39;
          *uint64_t v38 = *v39;
          swift_retain(v59);
          uint64_t v45 = v38;
          uint64_t v46 = v40;
          uint64_t v47 = 5LL;
          goto LABEL_45;
        case 6u:
          uint64_t v60 = *v39;
          *uint64_t v38 = *v39;
          swift_retain(v60);
          uint64_t v45 = v38;
          uint64_t v46 = v40;
          uint64_t v47 = 6LL;
          goto LABEL_45;
        case 7u:
          uint64_t v61 = *v39;
          *uint64_t v38 = *v39;
          swift_retain(v61);
          uint64_t v45 = v38;
          uint64_t v46 = v40;
          uint64_t v47 = 7LL;
LABEL_45:
          swift_storeEnumTagMultiPayload(v45, v46, v47);
          uint64_t v58 = v179;
          break;
        default:
          uint64_t v58 = v179;
          memcpy(v38, v39, *(void *)(v179 + 64));
          break;
      }

      (*(void (**)(void *, void, uint64_t, uint64_t))(v58 + 56))(v38, 0LL, 1LL, v40);
      goto LABEL_47;
    }

    goto LABEL_18;
  }

  if (v43)
  {
    sub_11324((uint64_t)v38, type metadata accessor for RCSMessage.Content);
LABEL_18:
    uint64_t v48 = *(void *)(sub_5C28(&qword_76228) - 8);
LABEL_19:
    memcpy(v38, v39, *(void *)(v48 + 64));
    goto LABEL_47;
  }

  if (a1 != a2)
  {
    sub_11324((uint64_t)v38, type metadata accessor for RCSMessage.Content);
    switch(swift_getEnumCaseMultiPayload(v39, v40))
    {
      case 0u:
        *uint64_t v38 = *v39;
        v38[1] = v39[1];
        uint64_t v49 = v39[2];
        _OWORD v38[2] = v49;
        swift_bridgeObjectRetain();
        swift_retain(v49);
        swift_storeEnumTagMultiPayload(v38, v40, 0LL);
        break;
      case 1u:
        uint64_t v62 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
        uint64_t v63 = *(void *)(v62 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v63 + 48))(v39, 1LL, v62))
        {
          uint64_t v64 = sub_5C28(&qword_76498);
          memcpy(v38, v39, *(void *)(*(void *)(v64 - 8) + 64LL));
        }

        else
        {
          *uint64_t v38 = *v39;
          v38[1] = v39[1];
          _OWORD v38[2] = v39[2];
          uint64_t v140 = *(int *)(v62 + 24);
          id v176 = (char *)v39 + v140;
          unsigned __int8 v180 = (char *)v38 + v140;
          uint64_t v164 = type metadata accessor for URL(0LL);
          id v168 = *(void (**)(char *, char *, uint64_t))(*(void *)(v164 - 8) + 16LL);
          swift_bridgeObjectRetain();
          v168(v180, v176, v164);
          uint64_t v141 = *(int *)(v62 + 28);
          id v177 = (char *)v39 + v141;
          uint64_t v181 = (char *)v38 + v141;
          uint64_t v142 = type metadata accessor for Date(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v142 - 8) + 16LL))(v181, v177, v142);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v63 + 56))(v38, 0LL, 1LL, v62);
        }

        uint64_t v143 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
        id v144 = (void *)((char *)v38 + v143);
        id v145 = (char *)v39 + v143;
        *id v144 = *(void *)((char *)v39 + v143);
        v144[1] = *(void *)((char *)v39 + v143 + 8);
        v144[2] = *(void *)((char *)v39 + v143 + 16);
        v144[3] = *(void *)((char *)v39 + v143 + 24);
        v144[4] = *(void *)((char *)v39 + v143 + 32);
        id v182 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
        uint64_t v146 = v182[7];
        SEL v165 = &v145[v146];
        id v169 = (char *)v144 + v146;
        uint64_t v159 = type metadata accessor for URL(0LL);
        id v162 = *(void (**)(char *, char *, uint64_t))(*(void *)(v159 - 8) + 16LL);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v162(v169, v165, v159);
        uint64_t v147 = v182[8];
        SEL v173 = &v145[v147];
        id v178 = (char *)v144 + v147;
        uint64_t v148 = type metadata accessor for Date(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v148 - 8) + 16LL))(v178, v173, v148);
        *((_BYTE *)v144 + v182[9]) = v145[v182[9]];
        uint64_t v149 = v182[10];
        SEL v150 = (char *)v144 + v149;
        id v151 = &v145[v149];
        char v152 = v151[8];
        *(void *)SEL v150 = *(void *)v151;
        v150[8] = v152;
        uint64_t v153 = *(int *)(sub_5C28(&qword_764A0) + 48);
        uint64_t v154 = *(void *)((char *)v39 + v153);
        *(void *)((char *)v38 + v153) = v154;
        swift_retain(v154);
        swift_storeEnumTagMultiPayload(v38, v40, 1LL);
        break;
      case 2u:
        *uint64_t v38 = *v39;
        v38[1] = v39[1];
        _OWORD v38[2] = v39[2];
        void v38[3] = v39[3];
        uint64_t v65 = v39[4];
        v38[4] = v65;
        swift_bridgeObjectRetain();
        swift_retain(v65);
        swift_storeEnumTagMultiPayload(v38, v40, 2LL);
        break;
      case 3u:
        uint64_t v66 = v39[3];
        void v38[3] = v66;
        v38[4] = v39[4];
        (**(void (***)(void *, void *))(v66 - 8))(v38, v39);
        v38[5] = v39[5];
        v38[6] = v39[6];
        v38[7] = v39[7];
        uint64_t v67 = v39[9];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v67)
        {
          _BYTE v38[8] = v39[8];
          v38[9] = v39[9];
          uint64_t v69 = v39[10];
          unint64_t v68 = v39[11];
          swift_bridgeObjectRetain();
          sub_F120(v69, v68);
          v38[10] = v69;
          v38[11] = v68;
          v38[12] = v39[12];
          v38[13] = v39[13];
          swift_bridgeObjectRetain();
        }

        else
        {
          __int128 v155 = *((_OWORD *)v39 + 4);
          __int128 v156 = *((_OWORD *)v39 + 6);
          *((_OWORD *)v38 + 5) = *((_OWORD *)v39 + 5);
          *((_OWORD *)v38 + 6) = v156;
          *((_OWORD *)v38 + 4) = v155;
        }

        swift_storeEnumTagMultiPayload(v38, v40, 3LL);
        break;
      case 5u:
        uint64_t v70 = *v39;
        *uint64_t v38 = *v39;
        swift_retain(v70);
        swift_storeEnumTagMultiPayload(v38, v40, 5LL);
        break;
      case 6u:
        uint64_t v71 = *v39;
        *uint64_t v38 = *v39;
        swift_retain(v71);
        swift_storeEnumTagMultiPayload(v38, v40, 6LL);
        break;
      case 7u:
        uint64_t v72 = *v39;
        *uint64_t v38 = *v39;
        swift_retain(v72);
        swift_storeEnumTagMultiPayload(v38, v40, 7LL);
        break;
      default:
        uint64_t v48 = v179;
        goto LABEL_19;
    }
  }

LABEL_47:
  uint64_t v93 = v36[8];
  uint64_t v94 = v13 + v93;
  uint64_t v95 = (__int128 *)(v14 + v93);
  uint64_t v96 = *(void *)(v14 + v93 + 24);
  if (!*(void *)(v13 + v93 + 24))
  {
    if (v96)
    {
      *(void *)(v94 + 24) = v96;
      *(void *)(v94 + 32) = *((void *)v95 + 4);
      (**(void (***)(uint64_t, __int128 *))(v96 - 8))(v94, v95);
      goto LABEL_54;
    }

  uint64_t v84 = a3[8];
  uint64_t v85 = a1 + v84;
  uint64_t v86 = (__int128 *)(a2 + v84);
  id v87 = *(void *)(a2 + v84 + 24);
  if (!*(void *)(a1 + v84 + 24))
  {
    if (v87)
    {
      *(void *)(v85 + 24) = v87;
      *(void *)(v85 + 32) = *((void *)v86 + 4);
      (**(void (***)(uint64_t, __int128 *))(v87 - 8))(v85, v86);
      goto LABEL_54;
    }

LABEL_53:
    __int128 v97 = *v95;
    __int128 v98 = v95[1];
    *(void *)(v94 + 32) = *((void *)v95 + 4);
    *(_OWORD *)uint64_t v94 = v97;
    *(_OWORD *)(v94 + swift_weakDestroy(v0 + 16) = v98;
    goto LABEL_54;
  }

  if (!v96)
  {
    sub_12204((void *)v94);
    goto LABEL_53;
  }

  sub_37938((void *)v94, v95);
LABEL_54:
  uint64_t v99 = v36[9];
  unsigned __int8 v100 = *(RCSServiceSession **)(v13 + v99);
  *(void *)(v13 + v99) = *(void *)(v14 + v99);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v100, v101, v102, v103, v104, v105, v106, v107);
  *(_BYTE *)(v13 + v36[10]) = *(_BYTE *)(v14 + v36[10]);
  *(_BYTE *)(v13 + v36[11]) = *(_BYTE *)(v14 + v36[11]);
  uint64_t v108 = v36[12];
  uint64_t v109 = *(RCSServiceSession **)(v13 + v108);
  *(void *)(v13 + v108) = *(void *)(v14 + v108);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v109, v110, v111, v112, v113, v114, v115, v116);
  uint64_t v117 = v36[13];
  id v118 = (void *)(v13 + v117);
  id v119 = (void *)(v14 + v117);
  void *v118 = *v119;
  id v120 = *(RCSServiceSession **)(v13 + v117 + 8);
  v118[1] = v119[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v120, v121, v122, v123, v124, v125, v126, v127);
  v118[2] = v119[2];
  unsigned __int8 v128 = (RCSServiceSession *)v118[3];
  v118[3] = v119[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v128, v129, v130, v131, v132, v133, v134, v135);
  uint64_t v136 = *(int *)(v183 + 44);
  uint64_t v137 = *(void *)(a2 + v136);
  uint64_t v138 = *(void *)(a1 + v136);
  *(void *)(a1 + v136) = v137;
  swift_unknownObjectRetain(v137);
  swift_unknownObjectRelease(v138);
  *(void *)(a1 + *(int *)(v183 + 48)) = *(void *)(a2 + *(int *)(v183 + 48));
  return a1;
}

    char v88 = *v86;
    uint64_t v89 = v86[1];
    *(void *)(v85 + 32) = *((void *)v86 + 4);
    *(_OWORD *)uint64_t v85 = v88;
    *(_OWORD *)(v85 + swift_weakDestroy(v0 + 16) = v89;
    goto LABEL_54;
  }

  if (!v87)
  {
    sub_12204((void *)v85);
    goto LABEL_53;
  }

  sub_37938((void *)v85, v86);
LABEL_54:
  uint64_t v90 = a3[9];
  __int128 v91 = *(RCSServiceSession **)(a1 + v90);
  *(void *)(a1 + v90) = *(void *)(a2 + v90);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v91, v92, v93, v94, v95, v96, v97, v98);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  uint64_t v99 = a3[12];
  unsigned __int8 v100 = *(RCSServiceSession **)(a1 + v99);
  *(void *)(a1 + v99) = *(void *)(a2 + v99);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v100, v101, v102, v103, v104, v105, v106, v107);
  uint64_t v108 = a3[13];
  uint64_t v109 = (void *)(a1 + v108);
  SEL v110 = a2 + v108;
  *uint64_t v109 = *(void *)(a2 + v108);
  id v111 = *(void *)(a2 + v108 + 8);
  id v112 = *(RCSServiceSession **)(a1 + v108 + 8);
  v109[1] = v111;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v112, v113, v114, v115, v116, v117, v118, v119);
  v109[2] = *(void *)(v110 + 16);
  id v120 = (RCSServiceSession *)v109[3];
  v109[3] = *(void *)(v110 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v120, v121, v122, v123, v124, v125, v126, v127);
  return a1;
}

void *sub_37938(void *result, void *a2)
{
  if (result != a2)
  {
    unint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v11 = *result;
        uint64_t v12 = *a2;
        swift_retain(*a2);
        uint64_t result = (void *)swift_release(v11);
        void *v3 = v12;
      }

      else
      {
        return (void *)(*(uint64_t (**)(void *, void *, void))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        uint64_t v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v14 = *a2;
          void *v3 = *a2;
          swift_retain(v14);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (void *)swift_release(v10);
      }

      else
      {
        (*(void (**)(_BYTE *, void *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v13 = *a2;
          void *v3 = *a2;
          swift_retain(v13);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (void *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }

  return result;
}

_OWORD *sub_37AA0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = (_OWORD *)((char *)a1 + v6);
  int v8 = (char *)a2 + v6;
  *(_OWORD *)((char *)v7 + 107) = *(_OWORD *)((char *)a2 + v6 + 107);
  __int128 v9 = *(_OWORD *)((char *)a2 + v6 + 96);
  __int128 v10 = *(_OWORD *)((char *)a2 + v6 + 64);
  void v7[5] = *(_OWORD *)((char *)a2 + v6 + 80);
  v7[6] = v9;
  __int128 v11 = *(_OWORD *)((char *)a2 + v6 + 32);
  void v7[3] = *(_OWORD *)((char *)a2 + v6 + 48);
  void v7[4] = v10;
  __int128 v12 = *(_OWORD *)((char *)a2 + v6 + 16);
  *uint64_t v7 = *(_OWORD *)((char *)a2 + v6);
  v7[1] = v12;
  uint64_t v7[2] = v11;
  __int128 v13 = *(_OWORD *)((char *)a2 + v6 + 144);
  v7[8] = *(_OWORD *)((char *)a2 + v6 + 128);
  void v7[9] = v13;
  uint64_t v14 = (int *)type metadata accessor for RCSMessage(0LL);
  uint64_t v15 = v14[7];
  char v16 = (void *)((char *)v7 + v15);
  uint64_t v17 = &v8[v15];
  uint64_t v18 = type metadata accessor for RCSMessage.Content(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18))
  {
    uint64_t v20 = sub_5C28(&qword_76228);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      uint64_t v57 = v19;
      uint64_t v21 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
      uint64_t v58 = *(void *)(v21 - 8);
      uint64_t v60 = v3;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v17, 1LL, v21))
      {
        uint64_t v22 = sub_5C28(&qword_76498);
        memcpy(v16, v17, *(void *)(*(void *)(v22 - 8) + 64LL));
      }

      else
      {
        *char v16 = *(void *)v17;
        *(_OWORD *)(v16 + 1) = *(_OWORD *)(v17 + 8);
        uint64_t v23 = *(int *)(v21 + 24);
        id v24 = (char *)v16 + v23;
        uint64_t v53 = &v17[v23];
        uint64_t v25 = type metadata accessor for URL(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32LL))(v24, v53, v25);
        uint64_t v26 = *(int *)(v21 + 28);
        unsigned __int8 v27 = (char *)v16 + v26;
        uint64_t v54 = &v17[v26];
        uint64_t v28 = type metadata accessor for Date(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32LL))(v27, v54, v28);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v58 + 56))(v16, 0LL, 1LL, v21);
      }

      uint64_t v29 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
      id v30 = (char *)v16 + v29;
      uint64_t v59 = v16;
      id v31 = &v17[v29];
      *(void *)id v30 = *(void *)&v17[v29];
      *(_OWORD *)(v30 + 8) = *(_OWORD *)&v17[v29 + 8];
      *(_OWORD *)(v30 + 24) = *(_OWORD *)&v17[v29 + 24];
      id v32 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
      uint64_t v33 = v32[7];
      uint64_t v51 = &v31[v33];
      uint64_t v55 = &v30[v33];
      uint64_t v34 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32LL))(v55, v51, v34);
      uint64_t v35 = v32[8];
      uint64_t v52 = &v31[v35];
      unint64_t v56 = &v30[v35];
      uint64_t v36 = type metadata accessor for Date(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32LL))(v56, v52, v36);
      v30[v32[9]] = v31[v32[9]];
      uint64_t v37 = v32[10];
      uint64_t v38 = &v30[v37];
      unsigned __int8 v39 = &v31[v37];
      char v16 = v59;
      _BYTE v38[8] = v39[8];
      *(void *)uint64_t v38 = *(void *)v39;
      uint64_t v40 = sub_5C28(&qword_764A0);
      *(void *)((char *)v59 + *(int *)(v40 + 48)) = *(void *)&v17[*(int *)(v40 + 48)];
      swift_storeEnumTagMultiPayload(v59, v18, 1LL);
      uint64_t v3 = v60;
      uint64_t v19 = v57;
    }

    else
    {
      memcpy(v16, v17, *(void *)(v19 + 64));
    }

    (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
  }

  uint64_t v41 = v14[8];
  int v42 = (char *)v7 + v41;
  int v43 = &v8[v41];
  __int128 v44 = *((_OWORD *)v43 + 1);
  *(_OWORD *)int v42 = *(_OWORD *)v43;
  *((_OWORD *)v42 + 1) = v44;
  *((void *)v42 + 4) = *((void *)v43 + 4);
  *(void *)((char *)v7 + v14[9]) = *(void *)&v8[v14[9]];
  *((_BYTE *)v7 + v14[10]) = v8[v14[10]];
  *((_BYTE *)v7 + v14[11]) = v8[v14[11]];
  *(void *)((char *)v7 + v14[12]) = *(void *)&v8[v14[12]];
  uint64_t v45 = v14[13];
  uint64_t v46 = (_OWORD *)((char *)v7 + v45);
  uint64_t v47 = &v8[v45];
  __int128 v48 = *((_OWORD *)v47 + 1);
  *uint64_t v46 = *(_OWORD *)v47;
  v46[1] = v48;
  uint64_t v49 = *(int *)(v3 + 48);
  *(void *)((char *)a1 + *(int *)(v3 + 44)) = *(void *)((char *)a2 + *(int *)(v3 + 44));
  *(void *)((char *)a1 + v49) = *(void *)((char *)a2 + v49);
  return a1;
}

void **sub_37E20(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = a1[1];
  a1[1] = a2[1];

  uint64_t v150 = a3;
  uint64_t v15 = *(int *)(a3 + 40);
  char v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  if (a1 != a2)
  {
    sub_CB8C((uint64_t)a1 + v15);
    __int128 v18 = *((_OWORD *)v17 + 5);
    *((_OWORD *)v16 + 4) = *((_OWORD *)v17 + 4);
    *((_OWORD *)v16 + 5) = v18;
    *((_OWORD *)v16 + 6) = *((_OWORD *)v17 + 6);
    *(_OWORD *)(v16 + 107) = *(_OWORD *)(v17 + 107);
    __int128 v19 = *((_OWORD *)v17 + 1);
    *(_OWORD *)char v16 = *(_OWORD *)v17;
    *((_OWORD *)v16 + 1) = v19;
    __int128 v20 = *((_OWORD *)v17 + 3);
    *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
    *((_OWORD *)v16 + 3) = v20;
  }

  uint64_t v21 = *((void *)v17 + 17);
  uint64_t v22 = (RCSServiceSession *)*((void *)v16 + 17);
  *((void *)v16 + swift_weakDestroy(v0 + 16) = *((void *)v17 + 16);
  *((void *)v16 + 17) = v21;
  swift_bridgeObjectRelease(v22, v8, v9, v10, v11, v12, v13, v14);
  uint64_t v23 = *((void *)v17 + 19);
  id v24 = (RCSServiceSession *)*((void *)v16 + 19);
  *((void *)v16 + 18) = *((void *)v17 + 18);
  *((void *)v16 + 19) = v23;
  swift_bridgeObjectRelease(v24, v25, v26, v27, v28, v29, v30, v31);
  id v32 = (int *)type metadata accessor for RCSMessage(0LL);
  uint64_t v33 = v32[7];
  uint64_t v34 = &v16[v33];
  uint64_t v35 = &v17[v33];
  uint64_t v36 = type metadata accessor for RCSMessage.Content(0LL);
  uint64_t v145 = *(void *)(v36 - 8);
  uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v145 + 48);
  __dst = v34;
  int v38 = v37(v34, 1LL, v36);
  unsigned __int8 v39 = v35;
  int v40 = v37(v35, 1LL, v36);
  if (v38)
  {
    if (v40)
    {
      size_t v48 = *(void *)(*(void *)(sub_5C28(&qword_76228) - 8) + 64LL);
      uint64_t v49 = __dst;
LABEL_8:
      uint64_t v50 = v35;
LABEL_9:
      memcpy(v49, v50, v48);
      goto LABEL_21;
    }

    uint64_t v51 = v35;
    if (swift_getEnumCaseMultiPayload(v35, v36) == 1)
    {
      uint64_t v52 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
      uint64_t v53 = *(void *)(v52 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v39, 1LL, v52))
      {
        uint64_t v54 = sub_5C28(&qword_76498);
        memcpy(__dst, v39, *(void *)(*(void *)(v54 - 8) + 64LL));
      }

      else
      {
        void *__dst = *(void *)v51;
        *(_OWORD *)(__dst + 1) = *(_OWORD *)(v51 + 8);
        uint64_t v60 = *(int *)(v52 + 24);
        id v133 = &v51[v60];
        uint64_t v137 = (char *)__dst + v60;
        uint64_t v61 = type metadata accessor for URL(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 32LL))(v137, v133, v61);
        uint64_t v62 = *(int *)(v52 + 28);
        id v134 = &v51[v62];
        uint64_t v138 = (char *)__dst + v62;
        uint64_t v63 = type metadata accessor for Date(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 32LL))(v138, v134, v63);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v53 + 56))(__dst, 0LL, 1LL, v52);
      }

      uint64_t v64 = v51;
      uint64_t v65 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
      uint64_t v66 = (char *)__dst + v65;
      uint64_t v67 = &v64[v65];
      *(void *)uint64_t v66 = *(void *)&v64[v65];
      *(_OWORD *)(v66 + 8) = *(_OWORD *)&v64[v65 + 8];
      *(_OWORD *)(v66 + 24) = *(_OWORD *)&v64[v65 + 24];
      unint64_t v68 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
      uint64_t v69 = v68[7];
      unsigned __int8 v135 = &v67[v69];
      id v139 = &v66[v69];
      uint64_t v70 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v70 - 8) + 32LL))(v139, v135, v70);
      uint64_t v71 = v68[8];
      uint64_t v136 = &v67[v71];
      uint64_t v140 = &v66[v71];
      uint64_t v72 = type metadata accessor for Date(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 32LL))(v140, v136, v72);
      v66[v68[9]] = v67[v68[9]];
      uint64_t v73 = v68[10];
      uint64_t v74 = &v66[v73];
      uint64_t v75 = &v67[v73];
      v74[8] = v75[8];
      *(void *)uint64_t v74 = *(void *)v75;
      uint64_t v76 = sub_5C28(&qword_764A0);
      *(void *)((char *)__dst + *(int *)(v76 + 48)) = *(void *)&v64[*(int *)(v76 + 48)];
      swift_storeEnumTagMultiPayload(__dst, v36, 1LL);
      uint64_t v59 = v145;
    }

    else
    {
      uint64_t v59 = v145;
      memcpy(__dst, v35, *(void *)(v145 + 64));
    }

    (*(void (**)(void *, void, uint64_t, uint64_t))(v59 + 56))(__dst, 0LL, 1LL, v36);
  }

  else
  {
    if (v40)
    {
      sub_11324((uint64_t)__dst, type metadata accessor for RCSMessage.Content);
      size_t v48 = *(void *)(*(void *)(sub_5C28(&qword_76228) - 8) + 64LL);
      uint64_t v49 = __dst;
      goto LABEL_8;
    }

    if (a1 != a2)
    {
      sub_11324((uint64_t)__dst, type metadata accessor for RCSMessage.Content);
      uint64_t v55 = v35;
      if (swift_getEnumCaseMultiPayload(v35, v36) == 1)
      {
        uint64_t v56 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
        uint64_t v57 = *(void *)(v56 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v39, 1LL, v56))
        {
          uint64_t v58 = sub_5C28(&qword_76498);
          memcpy(__dst, v39, *(void *)(*(void *)(v58 - 8) + 64LL));
        }

        else
        {
          void *__dst = *(void *)v55;
          *(_OWORD *)(__dst + 1) = *(_OWORD *)(v55 + 8);
          uint64_t v115 = *(int *)(v56 + 24);
          uint64_t v141 = &v55[v115];
          uint64_t v146 = (char *)__dst + v115;
          uint64_t v116 = type metadata accessor for URL(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v116 - 8) + 32LL))(v146, v141, v116);
          uint64_t v117 = *(int *)(v56 + 28);
          uint64_t v142 = &v55[v117];
          uint64_t v147 = (char *)__dst + v117;
          uint64_t v118 = type metadata accessor for Date(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v118 - 8) + 32LL))(v147, v142, v118);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v57 + 56))(__dst, 0LL, 1LL, v56);
        }

        id v119 = v55;
        id v132 = v55;
        uint64_t v120 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
        SEL v121 = (char *)__dst + v120;
        id v122 = &v119[v120];
        *(void *)SEL v121 = *(void *)&v119[v120];
        *(_OWORD *)(v121 + 8) = *(_OWORD *)&v119[v120 + 8];
        *(_OWORD *)(v121 + 24) = *(_OWORD *)&v119[v120 + 24];
        id v123 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
        uint64_t v124 = v123[7];
        uint64_t v143 = &v122[v124];
        uint64_t v148 = &v121[v124];
        uint64_t v125 = type metadata accessor for URL(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v125 - 8) + 32LL))(v148, v143, v125);
        uint64_t v126 = v123[8];
        id v144 = &v122[v126];
        uint64_t v149 = &v121[v126];
        uint64_t v127 = type metadata accessor for Date(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v127 - 8) + 32LL))(v149, v144, v127);
        v121[v123[9]] = v122[v123[9]];
        uint64_t v128 = v123[10];
        SEL v129 = &v121[v128];
        id v130 = &v122[v128];
        v129[8] = v130[8];
        *(void *)SEL v129 = *(void *)v130;
        uint64_t v131 = sub_5C28(&qword_764A0);
        *(void *)((char *)__dst + *(int *)(v131 + 48)) = *(void *)&v132[*(int *)(v131 + 48)];
        swift_storeEnumTagMultiPayload(__dst, v36, 1LL);
        goto LABEL_21;
      }

      size_t v48 = *(void *)(v145 + 64);
      uint64_t v49 = __dst;
      uint64_t v50 = v35;
      goto LABEL_9;
    }
  }

LABEL_21:
  uint64_t v77 = v32[8];
  uint64_t v78 = &v16[v77];
  if (*(void *)&v16[v77 + 24]) {
    sub_12204(&v16[v77]);
  }
  __int128 v79 = *(_OWORD *)&v17[v77 + 16];
  *(_OWORD *)uint64_t v78 = *(_OWORD *)&v17[v77];
  *((_OWORD *)v78 + 1) = v79;
  *((void *)v78 + 4) = *(void *)&v17[v77 + 32];
  uint64_t v80 = v32[9];
  uint64_t v81 = *(RCSServiceSession **)&v16[v80];
  *(void *)&v16[v80] = *(void *)&v17[v80];
  swift_bridgeObjectRelease(v81, v41, v42, v43, v44, v45, v46, v47);
  v16[v32[10]] = v17[v32[10]];
  v16[v32[11]] = v17[v32[11]];
  uint64_t v82 = v32[12];
  uint64_t v83 = *(RCSServiceSession **)&v16[v82];
  *(void *)&v16[v82] = *(void *)&v17[v82];
  swift_bridgeObjectRelease(v83, v84, v85, v86, v87, v88, v89, v90);
  uint64_t v91 = v32[13];
  __int128 v92 = &v16[v91];
  uint64_t v93 = &v17[v91];
  uint64_t v94 = *((void *)v93 + 1);
  uint64_t v95 = (RCSServiceSession *)*((void *)v92 + 1);
  *(void *)__int128 v92 = *(void *)v93;
  *((void *)v92 + 1) = v94;
  swift_bridgeObjectRelease(v95, v96, v97, v98, v99, v100, v101, v102);
  uint64_t v103 = *((void *)v93 + 3);
  id v104 = (RCSServiceSession *)*((void *)v92 + 3);
  *((void *)v92 + 2) = *((void *)v93 + 2);
  *((void *)v92 + 3) = v103;
  swift_bridgeObjectRelease(v104, v105, v106, v107, v108, v109, v110, v111);
  uint64_t v112 = *(int *)(v150 + 44);
  uint64_t v113 = *(uint64_t *)((char *)a1 + v112);
  *(void **)((char *)a1 + v112) = *(void **)((char *)a2 + v112);
  swift_unknownObjectRelease(v113);
  *(void **)((char *)a1 + *(int *)(v150 + 48)) = *(void **)((char *)a2 + *(int *)(v150 + 48));
  return a1;
}

      uint64_t v6 = (v20 - 1) & v20;
      __int128 v18 = __clz(__rbit64(v20)) + (v7 << 6);
    }

    uint64_t v22 = (uint64_t *)(*((void *)with.entries._rawValue + 7) + 16 * v18);
    id v24 = *v22;
    uint64_t v23 = v22[1];
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    id v26 = *v2;
    int v40 = *v2;
    *uint64_t v2 = (RCSServiceSession *)0x8000000000000000LL;
    id v27 = sub_2A1F4();
    id v28 = *(void *)v26[1].IMDTelephonyServiceSession_opaque;
    id v29 = (v9 & 1) == 0;
    id v30 = v28 + v29;
    if (__OFADD__(v28, v29)) {
      break;
    }
    unsigned __int8 v31 = (char)v9;
    if (*(void *)v26[1].state >= v30)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        uint64_t v33 = v40;
      }

      else
      {
        sub_50888();
        uint64_t v33 = v40;
        if ((v31 & 1) != 0) {
          goto LABEL_4;
        }
      }
    }

    else
    {
      sub_4F5BC(v30, isUniquelyReferenced_nonNull_native);
      id v32 = sub_2A1F4();
      id v27 = v32;
      uint64_t v33 = v40;
      if ((v31 & 1) != 0)
      {
LABEL_4:
        int v8 = *(void *)v33[3].state + 16 * v27;
        swift_bridgeObjectRelease(*(RCSServiceSession **)(v8 + 8), v9, v10, v11, v12, v13, v14, v15);
        *(void *)int v8 = v24;
        *(void *)(v8 + 8) = v23;
        goto LABEL_5;
      }
    }

    *(void *)&v33[4].IMDTelephonyServiceSession_opaque[8 * (v27 >> 6)] |= 1LL << v27;
    uint64_t v34 = (void *)(*(void *)v33[3].state + 16 * v27);
    *uint64_t v34 = v24;
    v34[1] = v23;
    uint64_t v35 = *(void *)v33[1].IMDTelephonyServiceSession_opaque;
    uint64_t v36 = __OFADD__(v35, 1LL);
    uint64_t v37 = v35 + 1;
    if (v36) {
      goto LABEL_35;
    }
    *(void *)v33[1].IMDTelephonyServiceSession_opaque = v37;
LABEL_5:
    char v16 = *v2;
    *uint64_t v2 = v33;
    swift_bridgeObjectRelease(v16, v9, v10, v11, v12, v13, v14, v15);
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for RCSMessageMetadata.Entry.HeaderKeys);
  __break(1u);
}

uint64_t sub_38480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_3848C);
}

uint64_t sub_3848C(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for RCSMessage(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 40)],  a2,  v8);
  }

uint64_t sub_38508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_38514);
}

char *sub_38514(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for RCSMessage(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 40)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_38588(uint64_t a1)
{
  return sub_38600(a1, qword_77348, 0xD000000000000012LL, 0x8000000000065B90LL, 0LL);
}

uint64_t sub_385B0(uint64_t a1)
{
  return sub_38600(a1, qword_77360, 0xD00000000000001DLL, 0x8000000000065BD0LL, 1LL);
}

uint64_t sub_385D8(uint64_t a1)
{
  return sub_38600(a1, qword_77378, 0xD00000000000001FLL, 0x8000000000065BB0LL, 0LL);
}

uint64_t sub_38600(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_5C28(&qword_762F0);
  __chkstk_darwin(v9);
  __int128 v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_5C28(&qword_762F8);
  sub_6258(v12, a2);
  sub_6298(v12, (uint64_t)a2);
  uint64_t v13 = sub_5C28(&qword_76300);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v11, 1LL, 1LL, v13);
  return PrototypingSetting.init<A>(_:domain:default:internalDefault:)(a3, a4, v11, a5, 2LL);
}

uint64_t sub_386E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[7] = a5;
  v6[8] = v5;
  v6[5] = a3;
  v6[6] = a4;
  void v6[3] = a1;
  void v6[4] = a2;
  return swift_task_switch(sub_38700, 0LL, 0LL);
}

uint64_t sub_38700()
{
  uint64_t v1 = v0[7];
  v0[9] = *(void *)(v0[8] + *(int *)(v1 + 44));
  uint64_t v2 = *(void *)(v1 + 24);
  v0[10] = v2;
  v0[11] = *(void *)(v2 + 32);
  uint64_t v3 = type metadata accessor for MainActor(0LL);
  v0[12] = static MainActor.shared.getter(v3);
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  return swift_task_switch(sub_38788, v4, v5);
}

uint64_t sub_38788()
{
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t))v0[11];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[7];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = v0[3];
  swift_release(v0[12]);
  v0[13] = v1(v6, v5, v4, *(void *)(v3 + 16), v2);
  return swift_task_switch(sub_38834, 0LL, 0LL);
}

uint64_t sub_38834()
{
  uint64_t v1 = *(void *)(v0 + 104);
  if (!v1) {
    return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 104));
  }
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(int *)(*(void *)(v0 + 56) + 40LL);
  uint64_t v4 = v2 + *(int *)(type metadata accessor for RCSMessage(0LL) + 52) + v3;
  uint64_t v5 = *(void *)(v4 + 24);
  if (!v5)
  {
    if (qword_76B90 != -1) {
      swift_once(&qword_76B90, sub_21C04);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    uint64_t v15 = sub_6298(v14, (uint64_t)static Logger.rcs);
    char v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      __int128 v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)__int128 v18 = 0;
      _os_log_impl(&dword_0, v16, v17, "Couldn't find simID to initiate download for rcsMessage", v18, 2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 104));
  }

  uint64_t v6 = *(void *)(v4 + 16);
  if (qword_76B90 != -1) {
    swift_once(&qword_76B90, sub_21C04);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = sub_6298(v7, (uint64_t)static Logger.rcs);
  *(void *)(v0 + 112) = v8;
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    __int128 v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)__int128 v11 = 0;
    _os_log_impl(&dword_0, v9, v10, "Attempting to auto download file", v11, 2u);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  uint64_t v12 = (void *)swift_task_alloc(dword_773A4);
  *(void *)(v0 + 120) = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_38A48;
  return sub_38DD0(v1, *(void *)(v0 + 24), v6, v5, *(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_38A48()
{
  uint64_t v2 = *(void *)(*v1 + 120);
  uint64_t v3 = *v1;
  *(void *)(v3 + 128) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_38AB8, 0LL, 0LL);
  }
  else {
    return (*(uint64_t (**)(void))(v3 + 8))(*(void *)(v3 + 104));
  }
}

uint64_t sub_38AB8()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 128);
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v6 = 138412290;
    swift_errorRetain(v5);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    *uint64_t v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl(&dword_0, v3, v4, "Failed to download transfer %@, showing tap to download", v6, 0xCu);
    uint64_t v9 = sub_5C28(&qword_76238);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);

    swift_errorRelease(v5);
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 128);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 104));
}

BOOL static RCSTransferError.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void RCSTransferError.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int RCSTransferError.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

unint64_t sub_38CC0()
{
  unint64_t result = qword_77390;
  if (!qword_77390)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RCSTransferError,  &type metadata for RCSTransferError);
    atomic_store(result, &qword_77390);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for RCSTransferError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_38D50 + 4 * byte_60355[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_38D84 + 4 * byte_60350[v4]))();
}

uint64_t sub_38D84(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_38D8C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x38D94LL);
  }
  return result;
}

uint64_t sub_38DA0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x38DA8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_38DAC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_38DB4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RCSTransferError()
{
  return &type metadata for RCSTransferError;
}

uint64_t sub_38DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[7] = a6;
  v7[8] = v6;
  void v7[5] = a4;
  v7[6] = a5;
  void v7[3] = a2;
  void v7[4] = a3;
  uint64_t v7[2] = a1;
  uint64_t v12 = sub_5C28(&qword_76498);
  void v7[9] = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_773A8 + dword_773A8);
  uint64_t v13 = (void *)swift_task_alloc(unk_773AC);
  v7[10] = v13;
  *uint64_t v13 = v7;
  v13[1] = sub_38E8C;
  return v15(a2, a3, a4, a6);
}

uint64_t sub_38E8C(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 80LL);
  *(_BYTE *)(*(void *)v1 + 176LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_38EE8, 0LL, 0LL);
}

uint64_t sub_38EE8()
{
  if (*(_BYTE *)(v0 + 176) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 56);
    *(void *)(v0 + 88) = *(void *)(*(void *)(v0 + 64) + *(int *)(v1 + 44));
    uint64_t v2 = *(void *)(v1 + 24);
    *(void *)(v0 + 96) = v2;
    *(void *)(v0 + 104) = *(void *)(v2 + 48);
    uint64_t v3 = type metadata accessor for MainActor(0LL);
    *(void *)(v0 + 112) = static MainActor.shared.getter(v3);
    uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
    uint64_t v6 = v5;
    uint64_t v7 = sub_39218;
    return swift_task_switch(v7, v4, v6);
  }

  if (qword_76B90 != -1) {
    swift_once(&qword_76B90, sub_21C04);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = sub_6298(v8, (uint64_t)static Logger.rcs);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl(&dword_0, v10, v11, "Not auto downloading RCS file", v12, 2u);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  uint64_t v13 = *(void *)(v0 + 72);
  uint64_t v14 = *(void *)(v0 + 24);

  sub_21AAC(v14, v13, &qword_76498);
  uint64_t v15 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
  LODWORD(swift_bridgeObjectRelease(*(RCSServiceSession **)(v0 + 168), v8, v9, v10, v11, v12, v13, v14) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v13, 1LL, v15);
  uint64_t v16 = sub_1231C(v13, &qword_76498);
  if ((_DWORD)v14 == 1)
  {
    os_log_type_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      __int128 v19 = "No thumbnail info found, nothing to download";
LABEL_17:
      id v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v32 = 0;
      _os_log_impl(&dword_0, v17, v18, v19, v32, 2u);
      swift_slowDealloc(v32, -1LL, -1LL);
    }
  }

  else
  {
    uint64_t v20 = *(void *)(v0 + 56);
    uint64_t v21 = *(void *)(v0 + 24);
    *(void *)(v0 + 128) = *(void *)(v20 + 16);
    uint64_t v22 = *(void *)(v20 + 24);
    *(void *)(v0 + 136) = v22;
    uint64_t v23 = sub_3D310(v21);
    char v24 = v23;
    os_log_type_t v17 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v18 = static os_log_type_t.info.getter();
    BOOL v25 = os_log_type_enabled(v17, v18);
    if ((v24 & 1) != 0)
    {
      if (v25)
      {
        id v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)id v26 = 0;
        _os_log_impl(&dword_0, v17, v18, "Attempting to download thumbnail instead", v26, 2u);
        swift_slowDealloc(v26, -1LL, -1LL);
      }

      uint64_t v28 = *(void *)(v0 + 56);
      uint64_t v27 = *(void *)(v0 + 64);

      *(void *)(v0 + 144) = *(void *)(v27 + *(int *)(v28 + 44));
      *(void *)(v0 + 152) = *(void *)(v22 + 40);
      uint64_t v29 = type metadata accessor for MainActor(0LL);
      *(void *)(v0 + 160) = static MainActor.shared.getter(v29);
      uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter(v29, &protocol witness table for MainActor);
      uint64_t v6 = v30;
      uint64_t v7 = sub_392F0;
      return swift_task_switch(v7, v4, v6);
    }

    if (v25)
    {
      __int128 v19 = "Thumbnail info present, but we decided not to download it";
      goto LABEL_17;
    }
  }

  swift_task_dealloc(*(void *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_39218()
{
  uint64_t v1 = (void (*)(uint64_t, void, uint64_t))v0[13];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[2];
  swift_release(v0[14]);
  v1(v4, *(void *)(v3 + 16), v2);
  uint64_t v5 = (uint64_t **)swift_task_alloc(dword_773B4);
  v0[15] = (uint64_t)v5;
  *uint64_t v5 = v0;
  v5[1] = (uint64_t *)sub_392A4;
  return sub_393CC(0, v0[2], v0[3], v0[4], v0[5], v0[6], v0[7]);
}

uint64_t sub_392A4()
{
  uint64_t v1 = *v0;
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 120));
  swift_task_dealloc(*(void *)(v1 + 72));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_392F0()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[19];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[16];
  uint64_t v4 = v0[2];
  swift_release(v0[20]);
  v1(v4, 1LL, v3, v2);
  uint64_t v5 = (uint64_t **)swift_task_alloc(dword_773B4);
  v0[21] = (uint64_t)v5;
  *uint64_t v5 = v0;
  v5[1] = (uint64_t *)sub_39380;
  return sub_393CC(1, v0[2], v0[3], v0[4], v0[5], v0[6], v0[7]);
}

uint64_t sub_39380()
{
  uint64_t v1 = *v0;
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 168));
  swift_task_dealloc(*(void *)(v1 + 72));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_393CC(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 40) = a7;
  *(void *)(v8 + 48) = v7;
  *(void *)(v8 + 24) = a3;
  *(void *)(v8 + 32) = a6;
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = a2;
  *(_BYTE *)(v8 + 72) = a1;
  char v14 = a1 & 1;
  uint64_t v15 = (void *)swift_task_alloc(dword_773BC);
  *(void *)(v8 + 56) = v15;
  void *v15 = v8;
  v15[1] = sub_39468;
  return sub_3955C(v14, a2, a3, a4, a5, a7);
}

uint64_t sub_39468()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 56);
  uint64_t v4 = *v1;
  swift_task_dealloc(v3);
  if (v0) {
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
  uint64_t v6 = *(unsigned __int8 *)(v2 + 72);
  uint64_t v8 = (char *)&dword_773C0 + dword_773C0;
  uint64_t v7 = (void *)swift_task_alloc(unk_773C4);
  *(void *)(v2 + 64) = v7;
  *uint64_t v7 = v4;
  v7[1] = sub_39514;
  return ((uint64_t (*)(uint64_t, void, void, void, void))v8)( v6 & 1,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40));
}

uint64_t sub_39514()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 64));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_3955C(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 2swift_weakDestroy(v0 + 16) = a6;
  *(void *)(v7 + 224) = v6;
  *(void *)(v7 + 200) = a4;
  *(void *)(v7 + 208) = a5;
  *(void *)(v7 + 184) = a2;
  *(void *)(v7 + 192) = a3;
  *(_BYTE *)(v7 + 564) = a1;
  uint64_t v8 = type metadata accessor for RCSFile(0LL);
  *(void *)(v7 + 232) = v8;
  unint64_t v9 = (*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v7 + 240) = swift_task_alloc(v9);
  *(void *)(v7 + 248) = swift_task_alloc(v9);
  uint64_t v10 = type metadata accessor for UTType(0LL);
  *(void *)(v7 + 256) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v7 + 264) = v11;
  *(void *)(v7 + 272) = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_5C28(&qword_76580);
  *(void *)(v7 + 280) = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = (*(void *)(*(void *)(sub_5C28(&qword_763A0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v7 + 288) = swift_task_alloc(v13);
  *(void *)(v7 + 296) = swift_task_alloc(v13);
  *(void *)(v7 + 304) = swift_task_alloc(v13);
  uint64_t v14 = sub_5C28(&qword_76498);
  *(void *)(v7 + 312) = swift_task_alloc((*(void *)(*(void *)(v14 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
  *(void *)(v7 + 320) = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  *(void *)(v7 + 328) = v16;
  *(void *)(v7 + 336) = swift_task_alloc((*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for URL(0LL);
  *(void *)(v7 + 344) = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  *(void *)(v7 + 352) = v18;
  unint64_t v19 = (*(void *)(v18 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v7 + 360) = swift_task_alloc(v19);
  *(void *)(v7 + 368) = swift_task_alloc(v19);
  *(void *)(v7 + 376) = swift_task_alloc(v19);
  *(void *)(v7 + 384) = swift_task_alloc(v19);
  return swift_task_switch(sub_396FC, 0LL, 0LL);
}

uint64_t sub_396FC()
{
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v3 = *(int *)(v2 + 44);
  *(_DWORD *)(v0 + 560) = v3;
  *(void *)(v0 + 392) = *(void *)(v1 + v3);
  uint64_t v4 = *(void *)(v2 + 24);
  *(void *)(v0 + 400) = v4;
  *(void *)(v0 + 408) = *(void *)(v4 + 96);
  uint64_t v5 = type metadata accessor for MainActor(0LL);
  *(void *)(v0 + 4swift_weakDestroy(v0 + 16) = v5;
  *(void *)(v0 + 424) = static MainActor.shared.getter(v5);
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_3978C, v6, v7);
}

uint64_t sub_3978C()
{
  uint64_t v1 = (uint64_t (*)(void))v0[51];
  uint64_t v2 = v0[27];
  swift_release(v0[53]);
  v0[54] = *(void *)(v2 + 16);
  v0[55] = v1();
  return swift_task_switch(sub_397F0, 0LL, 0LL);
}

id sub_397F0()
{
  if ((*(_BYTE *)(v0 + 564) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v0 + 320);
    uint64_t v10 = *(void *)(v0 + 328);
    uint64_t v11 = *(void *)(v0 + 312);
    sub_21AAC(*(void *)(v0 + 192), v11, &qword_76498);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1LL, v9) == 1)
    {
      sub_1231C(*(void *)(v0 + 312), &qword_76498);
      if (qword_76B90 != -1) {
        swift_once(&qword_76B90, sub_21C04);
      }
      uint64_t v12 = type metadata accessor for Logger(0LL);
      uint64_t v13 = sub_6298(v12, (uint64_t)static Logger.rcs);
      uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
      os_log_type_t v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v16 = 0;
        _os_log_impl(&dword_0, v14, v15, "Tried to download thumbnail, but no thumbnail information found", v16, 2u);
        swift_slowDealloc(v16, -1LL, -1LL);
      }

      uint64_t v17 = *(void *)(v0 + 376);
      uint64_t v19 = *(void *)(v0 + 360);
      uint64_t v18 = *(void *)(v0 + 368);
      uint64_t v20 = *(void *)(v0 + 336);
      uint64_t v22 = *(void *)(v0 + 304);
      uint64_t v21 = *(void *)(v0 + 312);
      uint64_t v24 = *(void *)(v0 + 288);
      uint64_t v23 = *(void *)(v0 + 296);
      uint64_t v25 = *(void *)(v0 + 280);
      uint64_t v110 = *(void *)(v0 + 272);
      uint64_t v113 = *(void *)(v0 + 248);
      uint64_t v116 = *(void *)(v0 + 240);
      swift_task_dealloc(*(void *)(v0 + 384));
      swift_task_dealloc(v17);
      swift_task_dealloc(v18);
      swift_task_dealloc(v19);
      swift_task_dealloc(v20);
      swift_task_dealloc(v21);
      swift_task_dealloc(v22);
      swift_task_dealloc(v23);
      swift_task_dealloc(v24);
      swift_task_dealloc(v25);
      swift_task_dealloc(v110);
      swift_task_dealloc(v113);
      swift_task_dealloc(v116);
      id v26 = *(uint64_t (**)(void))(v0 + 8);
      return (id)v26();
    }

    sub_3DC64(*(void *)(v0 + 312), *(void *)(v0 + 336));
    if (qword_76B90 != -1) {
      swift_once(&qword_76B90, sub_21C04);
    }
    uint64_t v27 = type metadata accessor for Logger(0LL);
    uint64_t v28 = sub_6298(v27, (uint64_t)static Logger.rcs);
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, v30))
    {
      unsigned __int8 v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unsigned __int8 v31 = 0;
      _os_log_impl(&dword_0, v29, v30, "Downloading thumbnail", v31, 2u);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    uint64_t v32 = *(void *)(v0 + 384);
    uint64_t v33 = *(void *)(v0 + 344);
    uint64_t v34 = *(void *)(v0 + 352);
    uint64_t v35 = *(void *)(v0 + 336);
    uint64_t v36 = *(void *)(v0 + 320);

    uint64_t v6 = sub_3BF28();
    uint64_t v5 = v37;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v32, v35 + *(int *)(v36 + 24), v33);
    sub_11324(v35, type metadata accessor for RCSFile.ThumbnailInformation);
    __int128 v8 = xmmword_60430;
  }

  else
  {
    uint64_t v1 = *(void *)(v0 + 384);
    uint64_t v2 = *(void *)(v0 + 344);
    uint64_t v3 = *(void *)(v0 + 352);
    uint64_t v4 = *(void *)(v0 + 192) + *(int *)(*(void *)(v0 + 232) + 20LL);
    uint64_t v6 = *(void *)(v4 + 8);
    uint64_t v5 = *(RCSServiceSession **)(v4 + 16);
    uint64_t v7 = type metadata accessor for RCSFile.DispositionInformation(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4 + *(int *)(v7 + 28), v2);
    swift_bridgeObjectRetain();
    __int128 v8 = xmmword_60440;
  }

  *(_OWORD *)(v0 + 448) = v8;
  id v38 = [(id)objc_opt_self(NSFileManager) defaultManager];
  NSString v39 = String._bridgeToObjectiveC()();
  id v40 = objc_msgSend(v38, "im_randomTemporaryFileURLWithFileName:", v39);

  if (!v40)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 352) + 56LL))( *(void *)(v0 + 304),  1LL,  1LL,  *(void *)(v0 + 344));
    goto LABEL_19;
  }

  uint64_t v41 = *(void *)(v0 + 368);
  uint64_t v42 = *(void *)(v0 + 344);
  int v43 = *(void **)(v0 + 352);
  uint64_t v44 = *(void *)(v0 + 304);
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v40);

  uint64_t v45 = (void (*)(uint64_t, uint64_t, uint64_t))v43[4];
  *(void *)(v0 + 464) = v45;
  v45(v44, v41, v42);
  uint64_t v46 = (void (*)(uint64_t, void, uint64_t, uint64_t))v43[7];
  *(void *)(v0 + 472) = v46;
  v46(v44, 0LL, 1LL, v42);
  unsigned __int8 v47 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v43[6];
  *(void *)(v0 + 480) = v47;
  if (v47(v44, 1LL, v42) == 1)
  {
LABEL_19:
    sub_1231C(*(void *)(v0 + 304), &qword_763A0);
    if (qword_76B90 != -1) {
      swift_once(&qword_76B90, sub_21C04);
    }
    uint64_t v71 = type metadata accessor for Logger(0LL);
    sub_6298(v71, (uint64_t)static Logger.rcs);
    uint64_t v72 = swift_bridgeObjectRetain();
    uint64_t v73 = (os_log_s *)Logger.logObject.getter(v72);
    os_log_type_t v74 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v73, v74))
    {
      uint64_t v75 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v76 = swift_slowAlloc(32LL, -1LL);
      uint64_t v120 = v76;
      *(_DWORD *)uint64_t v75 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 136) = sub_B004(v6, (unint64_t)v5, &v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144);
      swift_bridgeObjectRelease_n(v5, 3LL);
      _os_log_impl(&dword_0, v73, v74, "Couldn't create temp filename for file %s", v75, 0xCu);
      swift_arrayDestroy(v76, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v76, -1LL, -1LL);
      swift_slowDealloc(v75, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v5, 2LL);
    }

    id v77 = [objc_allocWithZone(NSNumber) initWithUnsignedLongLong:*(void *)(v0 + 440)];
    id result = [(id)objc_opt_self(IMMetricsCollector) sharedInstance];
    if (!result)
    {
      __break(1u);
      return result;
    }

    __int128 v79 = result;
    uint64_t v80 = *(void *)(v0 + 352);
    id v81 = [objc_allocWithZone(NSNumber) initWithInteger:*(void *)(*(void *)(v0 + 192) + *(int *)(*(void *)(v0 + 232) + 20))];
    [v79 trackAttachmentDownloadLimitExceeded:3 limitSize:v77 fileSize:v81 qualityType:0 isSticker:0 lowQualityModeEnabled:0];

    unint64_t v82 = sub_3DCA8();
    uint64_t v118 = swift_allocError(&type metadata for RCSTransferError, v82, 0LL, 0LL);
    *uint64_t v83 = 0;
    swift_willThrow(v118);
    SEL v84 = *(void (**)(uint64_t, void))(v80 + 8);
    uint64_t v86 = *(void *)(v0 + 376);
    uint64_t v85 = *(void *)(v0 + 384);
    uint64_t v88 = *(void *)(v0 + 360);
    uint64_t v87 = *(void *)(v0 + 368);
    uint64_t v89 = *(void *)(v0 + 336);
    uint64_t v91 = *(void *)(v0 + 304);
    uint64_t v90 = *(void *)(v0 + 312);
    uint64_t v92 = *(void *)(v0 + 288);
    uint64_t v93 = *(void *)(v0 + 296);
    uint64_t v108 = *(void *)(v0 + 280);
    uint64_t v109 = *(void *)(v0 + 272);
    uint64_t v112 = *(void *)(v0 + 248);
    uint64_t v115 = *(void *)(v0 + 240);
    v84(v85, *(void *)(v0 + 344));
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v93);
    swift_task_dealloc(v92);
    swift_task_dealloc(v108);
    swift_task_dealloc(v109);
    swift_task_dealloc(v112);
    swift_task_dealloc(v115);
    id v26 = *(uint64_t (**)(void))(v0 + 8);
    return (id)v26();
  }

  uint64_t v55 = *(void *)(v0 + 376);
  uint64_t v56 = *(void *)(v0 + 344);
  uint64_t v57 = *(void *)(v0 + 304);
  uint64_t v58 = *(void *)(v0 + 272);
  uint64_t v111 = *(void *)(v0 + 280);
  uint64_t v114 = *(void *)(v0 + 264);
  uint64_t v117 = *(void *)(v0 + 256);
  uint64_t v59 = *(void *)(v0 + 232);
  uint64_t v61 = *(void **)(v0 + 184);
  uint64_t v60 = *(void *)(v0 + 192);
  swift_bridgeObjectRelease(v5, v48, v49, v50, v51, v52, v53, v54);
  v45(v55, v57, v56);
  uint64_t v62 = v60 + *(int *)(v59 + 20);
  NSString v63 = String._bridgeToObjectiveC()();
  [v61 setTransferredFilename:v63];

  uint64_t v64 = *(void *)(v62 + 24);
  uint64_t v65 = *(void *)(v62 + 32);
  NSString v66 = String._bridgeToObjectiveC()();
  [v61 setMimeType:v66];

  uint64_t v67 = swift_bridgeObjectRetain();
  static UTType.data.getter(v67);
  UTType.init(mimeType:conformingTo:)(v64, v65, v58);
  uint64_t v68 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v114 + 48))(v111, 1LL, v117);
  uint64_t v69 = *(void *)(v0 + 280);
  if ((_DWORD)v68 == 1)
  {
    sub_1231C(*(void *)(v0 + 280), &qword_76580);
    NSString v70 = 0LL;
  }

  else
  {
    uint64_t v94 = *(void *)(v0 + 256);
    uint64_t v95 = *(void *)(v0 + 264);
    UTType.identifier.getter(v68);
    id v97 = v96;
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v69, v94);
    NSString v70 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v97, v98, v99, v100, v101, v102, v103, v104);
  }

  uint64_t v105 = *(void *)(v0 + 400);
  [*(id *)(v0 + 184) setType:v70];

  id v106 = *(int **)(v105 + 56);
  id v119 = (int *)((char *)v106 + *v106);
  id v107 = (void *)swift_task_alloc(v106[1]);
  *(void *)(v0 + 488) = v107;
  *id v107 = v0;
  v107[1] = sub_3A0C4;
  return (id)((uint64_t (*)(void, void, void, void, void, void))v119)( *(void *)(v0 + 200),  *(void *)(v0 + 208),  *(void *)(v0 + 384),  *(void *)(v0 + 376),  *(void *)(v0 + 432),  *(void *)(v0 + 400));
}

uint64_t sub_3A0C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 488LL);
  *(void *)(*(void *)v1 + 496LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_3A120, 0LL, 0LL);
}

uint64_t sub_3A120()
{
  if (!*(void *)(*(void *)(v0 + 496) + 16LL)
    || (unint64_t v1 = sub_14490(0x746C75736572LL, 0xE600000000000000LL), (v2 & 1) == 0)
    || (sub_12224(*(void *)(*(void *)(v0 + 496) + 56LL) + 32 * v1, v0 + 16),
        uint64_t v3 = sub_5C28(&qword_773D8),
        (swift_dynamicCast(v0 + 160, v0 + 16, (char *)&type metadata for Any + 8, v3, 6LL) & 1) == 0))
  {
    uint64_t v20 = *(void *)(v0 + 416);
    uint64_t v21 = *(void *)(v0 + 400);
    *(void *)(v0 + 528) = *(void *)(*(void *)(v0 + 224) + *(int *)(v0 + 560));
    unint64_t v22 = sub_3DCA8();
    uint64_t v23 = swift_allocError(&type metadata for RCSTransferError, v22, 0LL, 0LL);
    *(void *)(v0 + 536) = v23;
    *uint64_t v24 = 1;
    *(void *)(v0 + 544) = *(void *)(v21 + 80);
    *(void *)(v0 + 552) = static MainActor.shared.getter(v23);
    uint64_t v25 = dispatch thunk of Actor.unownedExecutor.getter(v20, &protocol witness table for MainActor);
    uint64_t v27 = v26;
    uint64_t v28 = sub_3A894;
    return swift_task_switch(v28, v25, v27);
  }

  swift_bridgeObjectRelease(*(RCSServiceSession **)(v0 + 496), v4, v5, v6, v7, v8, v9, v10);
  uint64_t v18 = *(RCSServiceSession **)(v0 + 160);
  if (*(void *)v18[1].IMDTelephonyServiceSession_opaque
    && (unint64_t v19 = sub_14490(0x4C5255656C6966LL, 0xE700000000000000LL), (v11 & 1) != 0))
  {
    sub_12224(*(void *)v18[3].state + 32 * v19, v0 + 80);
  }

  else
  {
    *(_OWORD *)(v0 + 80) = 0u;
    *(_OWORD *)(v0 + 96) = 0u;
  }

  swift_bridgeObjectRelease(v18, v11, v12, v13, v14, v15, v16, v17);
  if (!*(void *)(v0 + 104))
  {
    uint64_t v42 = &qword_76588;
    uint64_t v41 = v0 + 80;
    goto LABEL_15;
  }

  os_log_type_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 480);
  uint64_t v31 = *(void *)(v0 + 344);
  uint64_t v32 = *(void *)(v0 + 296);
  uint64_t v33 = *(RCSServiceSession **)(v0 + 120);
  URL.init(string:)(*(void *)(v0 + 112), v33);
  swift_bridgeObjectRelease(v33, v34, v35, v36, v37, v38, v39, v40);
  if (v30(v32, 1LL, v31) != 1)
  {
    uint64_t v74 = *(void *)(v0 + 416);
    uint64_t v75 = *(void *)(v0 + 400);
    uint64_t v76 = *(int *)(v0 + 560);
    uint64_t v77 = *(void *)(v0 + 224);
    uint64_t v78 = *(void **)(v0 + 184);
    (*(void (**)(void, void, void))(v0 + 464))( *(void *)(v0 + 360),  *(void *)(v0 + 296),  *(void *)(v0 + 344));
    URL._bridgeToObjectiveC()(v79);
    id v81 = v80;
    [v78 _setLocalURL:v80];

    *(void *)(v0 + 504) = *(void *)(v77 + v76);
    *(void *)(v0 + 512) = *(void *)(v75 + 72);
    *(void *)(v0 + 520) = static MainActor.shared.getter(v82);
    uint64_t v25 = dispatch thunk of Actor.unownedExecutor.getter(v74, &protocol witness table for MainActor);
    uint64_t v27 = v83;
    uint64_t v28 = sub_3A5CC;
    return swift_task_switch(v28, v25, v27);
  }

  uint64_t v41 = *(void *)(v0 + 296);
  uint64_t v42 = &qword_763A0;
LABEL_15:
  sub_1231C(v41, v42);
LABEL_16:
  id v43 = [(id)objc_opt_self(IMMetricsCollector) sharedInstance];
  if (!v43)
  {
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v44 = v43;
  id v45 = [*(id *)(v0 + 184) localURL];
  if (!v45)
  {
LABEL_22:
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(v0 + 472))( *(void *)(v0 + 288),  1LL,  1LL,  *(void *)(v0 + 344));
    goto LABEL_23;
  }

  uint64_t v46 = v45;
  size_t v48 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 472);
  unsigned __int8 v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 480);
  uint64_t v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
  uint64_t v50 = *(void *)(v0 + 368);
  uint64_t v51 = *(void *)(v0 + 344);
  uint64_t v52 = *(void *)(v0 + 288);
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v45);

  v49(v52, v50, v51);
  v48(v52, 0LL, 1LL, v51);
  uint64_t result = v47(v52, 1LL, v51);
  if ((_DWORD)result != 1)
  {
    uint64_t v55 = *(void *)(v0 + 440);
    uint64_t v54 = *(void *)(v0 + 448);
    uint64_t v57 = *(void *)(v0 + 376);
    uint64_t v56 = *(void *)(v0 + 384);
    uint64_t v58 = *(void *)(v0 + 344);
    uint64_t v59 = *(void *)(v0 + 352);
    uint64_t v60 = *(void *)(v0 + 288);
    URL._bridgeToObjectiveC()(v53);
    uint64_t v62 = v61;
    NSString v63 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
    v63(v60, v58);
    id v64 = [objc_allocWithZone(NSNumber) initWithUnsignedLongLong:v55];
    [v44 trackAttachmentDownloadSuccess:v62 limitType:v54 limitSize:v64 qualityType:v54 isSticker:0 lowQualityModeEnabled:0];

    v63(v57, v58);
    v63(v56, v58);
    uint64_t v65 = *(void *)(v0 + 376);
    uint64_t v67 = *(void *)(v0 + 360);
    uint64_t v66 = *(void *)(v0 + 368);
    uint64_t v68 = *(void *)(v0 + 336);
    uint64_t v70 = *(void *)(v0 + 304);
    uint64_t v69 = *(void *)(v0 + 312);
    uint64_t v72 = *(void *)(v0 + 288);
    uint64_t v71 = *(void *)(v0 + 296);
    uint64_t v73 = *(void *)(v0 + 280);
    uint64_t v84 = *(void *)(v0 + 272);
    uint64_t v85 = *(void *)(v0 + 248);
    uint64_t v86 = *(void *)(v0 + 240);
    swift_task_dealloc(*(void *)(v0 + 384));
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_3A5CC()
{
  unint64_t v1 = *(void (**)(uint64_t, uint64_t, BOOL, uint64_t, uint64_t))(v0 + 512);
  uint64_t v2 = *(void *)(v0 + 456);
  uint64_t v3 = *(void *)(v0 + 432);
  uint64_t v4 = *(void *)(v0 + 400);
  uint64_t v5 = *(void *)(v0 + 184);
  char v6 = *(_BYTE *)(v0 + 564);
  swift_release(*(void *)(v0 + 520));
  v1(v5, v2, (v6 & 1) == 0, v3, v4);
  return swift_task_switch(sub_3A654, 0LL, 0LL);
}

uint64_t sub_3A654()
{
  id v1 = [(id)objc_opt_self(IMMetricsCollector) sharedInstance];
  if (!v1)
  {
    __break(1u);
    goto LABEL_6;
  }

  uint64_t v2 = v1;
  id v3 = [*(id *)(v0 + 184) localURL];
  if (!v3)
  {
LABEL_6:
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(v0 + 472))( *(void *)(v0 + 288),  1LL,  1LL,  *(void *)(v0 + 344));
    goto LABEL_7;
  }

  uint64_t v4 = v3;
  char v6 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 472);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 480);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
  uint64_t v8 = *(void *)(v0 + 368);
  uint64_t v9 = *(void *)(v0 + 344);
  uint64_t v10 = *(void *)(v0 + 288);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  v7(v10, v8, v9);
  v6(v10, 0LL, 1LL, v9);
  uint64_t result = v5(v10, 1LL, v9);
  if ((_DWORD)result != 1)
  {
    uint64_t v14 = *(void *)(v0 + 440);
    uint64_t v13 = *(void *)(v0 + 448);
    uint64_t v16 = *(void *)(v0 + 376);
    uint64_t v15 = *(void *)(v0 + 384);
    uint64_t v17 = *(void *)(v0 + 344);
    uint64_t v18 = *(void *)(v0 + 352);
    uint64_t v19 = *(void *)(v0 + 288);
    URL._bridgeToObjectiveC()(v12);
    uint64_t v21 = v20;
    unint64_t v22 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v22(v19, v17);
    id v23 = [objc_allocWithZone(NSNumber) initWithUnsignedLongLong:v14];
    [v2 trackAttachmentDownloadSuccess:v21 limitType:v13 limitSize:v23 qualityType:v13 isSticker:0 lowQualityModeEnabled:0];

    v22(v16, v17);
    v22(v15, v17);
    uint64_t v24 = *(void *)(v0 + 376);
    uint64_t v26 = *(void *)(v0 + 360);
    uint64_t v25 = *(void *)(v0 + 368);
    uint64_t v27 = *(void *)(v0 + 336);
    uint64_t v29 = *(void *)(v0 + 304);
    uint64_t v28 = *(void *)(v0 + 312);
    uint64_t v31 = *(void *)(v0 + 288);
    uint64_t v30 = *(void *)(v0 + 296);
    uint64_t v32 = *(void *)(v0 + 280);
    uint64_t v33 = *(void *)(v0 + 272);
    uint64_t v34 = *(void *)(v0 + 248);
    uint64_t v35 = *(void *)(v0 + 240);
    swift_task_dealloc(*(void *)(v0 + 384));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_3A894()
{
  id v1 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[68];
  uint64_t v2 = v0[67];
  uint64_t v3 = v0[54];
  uint64_t v4 = v0[50];
  uint64_t v5 = v0[23];
  swift_release(v0[69]);
  v1(v5, v2, v3, v4);
  swift_errorRelease(v2);
  return swift_task_switch(sub_3A914, 0LL, 0LL);
}

uint64_t sub_3A914()
{
  if (*(void *)(*(void *)(v0 + 496) + 16LL)
    && (unint64_t v1 = sub_14490(0x726F727265LL, 0xE500000000000000LL), (v2 & 1) != 0)
    && (sub_12224(*(void *)(*(void *)(v0 + 496) + 56LL) + 32 * v1, v0 + 48),
        uint64_t v3 = sub_5C28(&qword_76560),
        (swift_dynamicCast(v0 + 176, v0 + 48, (char *)&type metadata for Any + 8, v3, 6LL) & 1) != 0))
  {
    swift_bridgeObjectRelease(*(RCSServiceSession **)(v0 + 496), v4, v5, v6, v7, v8, v9, v10);
    uint64_t v11 = *(void *)(v0 + 176);
    if (qword_76B90 != -1) {
      swift_once(&qword_76B90, sub_21C04);
    }
    uint64_t v12 = *(void *)(v0 + 248);
    uint64_t v13 = *(void *)(v0 + 192);
    uint64_t v14 = type metadata accessor for Logger(0LL);
    sub_6298(v14, (uint64_t)static Logger.rcs);
    sub_C934(v13, v12, type metadata accessor for RCSFile);
    swift_errorRetain(v11);
    uint64_t v15 = swift_errorRetain(v11);
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.error.getter();
    uint64_t v111 = v11;
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v104 = *(void *)(v0 + 344);
      uint64_t v18 = *(void *)(v0 + 248);
      uint64_t v19 = swift_slowAlloc(22LL, -1LL);
      uint64_t v20 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      v114[0] = v21;
      *(_DWORD *)uint64_t v19 = 136315394;
      type metadata accessor for RCSFile.DispositionInformation(0LL);
      uint64_t v22 = sub_219FC( &qword_773D0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v104, v22);
      uint64_t v25 = (RCSServiceSession *)v24;
      *(void *)(v0 + 144) = sub_B004(v23, v24, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152);
      swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
      sub_11324(v18, type metadata accessor for RCSFile);
      *(_WORD *)(v19 + 12) = 2112;
      swift_errorRetain(v111);
      uint64_t v33 = _swift_stdlib_bridgeErrorToNSError(v111);
      *(void *)(v0 + 152) = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160);
      *uint64_t v20 = v33;
      swift_errorRelease(v111);
      swift_errorRelease(v111);
      _os_log_impl( &dword_0,  v16,  v17,  "No result found after download for RCS transfer %s error %@",  (uint8_t *)v19,  0x16u);
      uint64_t v34 = sub_5C28(&qword_76238);
      swift_arrayDestroy(v20, 1LL, v34);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {
      sub_11324(*(void *)(v0 + 248), type metadata accessor for RCSFile);
      swift_errorRelease(v11);
      swift_errorRelease(v11);
    }

    uint64_t v87 = *(void *)(v0 + 376);
    uint64_t v89 = *(void *)(v0 + 344);
    uint64_t v88 = *(void *)(v0 + 352);
    swift_willThrow(v90);
    uint64_t v91 = *(void (**)(uint64_t, uint64_t))(v88 + 8);
    v91(v87, v89);
    uint64_t v93 = *(void *)(v0 + 376);
    uint64_t v92 = *(void *)(v0 + 384);
    uint64_t v95 = *(void *)(v0 + 360);
    uint64_t v94 = *(void *)(v0 + 368);
    uint64_t v96 = *(void *)(v0 + 336);
    uint64_t v98 = *(void *)(v0 + 304);
    uint64_t v97 = *(void *)(v0 + 312);
    uint64_t v99 = *(void *)(v0 + 296);
    uint64_t v100 = *(void *)(v0 + 288);
    uint64_t v101 = *(void *)(v0 + 280);
    uint64_t v103 = *(void *)(v0 + 272);
    uint64_t v107 = *(void *)(v0 + 248);
    uint64_t v110 = *(void *)(v0 + 240);
    v91(v92, *(void *)(v0 + 344));
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v103);
    swift_task_dealloc(v107);
    swift_task_dealloc(v110);
    uint64_t v85 = *(uint64_t (**)(void))(v0 + 8);
  }

  else
  {
    if (qword_76B90 != -1) {
      swift_once(&qword_76B90, sub_21C04);
    }
    uint64_t v35 = *(void *)(v0 + 240);
    uint64_t v36 = *(void *)(v0 + 192);
    uint64_t v37 = type metadata accessor for Logger(0LL);
    sub_6298(v37, (uint64_t)static Logger.rcs);
    sub_C934(v36, v35, type metadata accessor for RCSFile);
    uint64_t v38 = swift_bridgeObjectRetain();
    id v39 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v40 = static os_log_type_t.error.getter();
    BOOL v41 = os_log_type_enabled(v39, v40);
    uint64_t v42 = *(RCSServiceSession **)(v0 + 496);
    uint64_t v43 = *(void *)(v0 + 376);
    uint64_t v112 = *(void *)(v0 + 384);
    uint64_t v45 = *(void *)(v0 + 344);
    uint64_t v44 = *(void *)(v0 + 352);
    uint64_t v46 = *(void *)(v0 + 240);
    if (v41)
    {
      uint64_t v108 = *(void *)(v0 + 352);
      uint64_t v47 = swift_slowAlloc(22LL, -1LL);
      uint64_t v102 = swift_slowAlloc(64LL, -1LL);
      v114[0] = v102;
      *(_DWORD *)uint64_t v47 = 136315394;
      uint64_t v105 = v43;
      type metadata accessor for RCSFile.DispositionInformation(0LL);
      uint64_t v48 = sub_219FC( &qword_773D0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter(v45, v48);
      uint64_t v51 = (RCSServiceSession *)v50;
      *(void *)(v0 + 168) = sub_B004(v49, v50, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176);
      swift_bridgeObjectRelease(v51, v52, v53, v54, v55, v56, v57, v58);
      sub_11324(v46, type metadata accessor for RCSFile);
      *(_WORD *)(v47 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v59 = Dictionary.description.getter( v42,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
      uint64_t v61 = (RCSServiceSession *)v60;
      swift_bridgeObjectRelease(v42, v60, v62, v63, v64, v65, v66, v67);
      *(void *)(v0 + 128) = sub_B004(v59, (unint64_t)v61, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136);
      swift_bridgeObjectRelease(v61, v68, v69, v70, v71, v72, v73, v74);
      swift_bridgeObjectRelease_n(v42, 2LL);
      _os_log_impl( &dword_0,  v39,  v40,  "No result found after download for RCS transfer %s and no error in %s",  (uint8_t *)v47,  0x16u);
      swift_arrayDestroy(v102, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v102, -1LL, -1LL);
      swift_slowDealloc(v47, -1LL, -1LL);

      uint64_t v75 = *(void (**)(uint64_t, uint64_t))(v108 + 8);
      v75(v105, v45);
    }

    else
    {

      swift_bridgeObjectRelease_n(v42, 2LL);
      sub_11324(v46, type metadata accessor for RCSFile);
      uint64_t v75 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
      v75(v43, v45);
    }

    v75(v112, v45);
    uint64_t v76 = *(void *)(v0 + 376);
    uint64_t v78 = *(void *)(v0 + 360);
    uint64_t v77 = *(void *)(v0 + 368);
    uint64_t v79 = *(void *)(v0 + 336);
    uint64_t v81 = *(void *)(v0 + 304);
    uint64_t v80 = *(void *)(v0 + 312);
    uint64_t v83 = *(void *)(v0 + 288);
    uint64_t v82 = *(void *)(v0 + 296);
    uint64_t v84 = *(void *)(v0 + 280);
    uint64_t v106 = *(void *)(v0 + 272);
    uint64_t v109 = *(void *)(v0 + 248);
    uint64_t v113 = *(void *)(v0 + 240);
    swift_task_dealloc(*(void *)(v0 + 384));
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v106);
    swift_task_dealloc(v109);
    swift_task_dealloc(v113);
    uint64_t v85 = *(uint64_t (**)(void))(v0 + 8);
  }

  return v85();
}

uint64_t sub_3B038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[12] = a4;
  v5[13] = v4;
  v5[10] = a2;
  v5[11] = a3;
  v5[9] = a1;
  uint64_t v6 = type metadata accessor for RCSFile(0LL);
  v5[14] = v6;
  unint64_t v7 = (*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[15] = swift_task_alloc(v7);
  v5[16] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for Date(0LL);
  v5[17] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[18] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[19] = swift_task_alloc(v10);
  v5[20] = swift_task_alloc(v10);
  return swift_task_switch(sub_3B0E4, 0LL, 0LL);
}

id sub_3B0E4()
{
  id result = [(id)objc_opt_self(IMLockdownManager) sharedInstance];
  if (result)
  {
    char v2 = result;
    unsigned int v3 = [result isInternalInstall];

    if (!v3) {
      goto LABEL_16;
    }
    uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___IMDefaults);
    id v5 = [v4 sharedInstance];
    NSString v6 = String._bridgeToObjectiveC()();
    NSString v7 = String._bridgeToObjectiveC()();
    id v8 = [v5 getBoolFromDomain:v6 forKey:v7];

    if ((_DWORD)v8)
    {
      if (qword_76B90 != -1) {
        swift_once(&qword_76B90, sub_21C04);
      }
      uint64_t v9 = type metadata accessor for Logger(0LL);
      uint64_t v10 = sub_6298(v9, (uint64_t)static Logger.rcs);
      Class isa = (os_log_s *)Logger.logObject.getter(v10);
      os_log_type_t v12 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(isa, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl( &dword_0,  isa,  v12,  "Forcing auto download behavior ON due to default com.apple.imessage AlwaysAutoDownloadAttachments.RCS",  v13,  2u);
        swift_slowDealloc(v13, -1LL, -1LL);
      }

      goto LABEL_15;
    }

    id v14 = [v4 sharedInstance];
    NSString v15 = String._bridgeToObjectiveC()();
    NSString v16 = String._bridgeToObjectiveC()();
    unsigned int v17 = [v14 getBoolFromDomain:v15 forKey:v16];

    if (!v17)
    {
LABEL_16:
      uint64_t v29 = *(void *)(v0 + 96);
      uint64_t v28 = *(void *)(v0 + 104);
      uint64_t v30 = *(int *)(v29 + 44);
      *(_DWORD *)(v0 + 296) = v30;
      *(void *)(v0 + 168) = *(void *)(v28 + v30);
      uint64_t v31 = *(void *)(v29 + 24);
      *(void *)(v0 + 176) = v31;
      *(void *)(v0 + 184) = *(void *)(v31 + 96);
      uint64_t v32 = type metadata accessor for MainActor(0LL);
      *(void *)(v0 + 192) = v32;
      *(void *)(v0 + 200) = static MainActor.shared.getter(v32);
      uint64_t v33 = dispatch thunk of Actor.unownedExecutor.getter(v32, &protocol witness table for MainActor);
      return (id)swift_task_switch(sub_3B528, v33, v34);
    }

    if (qword_76B90 != -1) {
      swift_once(&qword_76B90, sub_21C04);
    }
    uint64_t v18 = type metadata accessor for Logger(0LL);
    uint64_t v19 = sub_6298(v18, (uint64_t)static Logger.rcs);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl( &dword_0,  v20,  v21,  "Forcing auto download behavior OFF due to default com.apple.madrid NeverAutoDownloadAttachments.RCS",  v22,  2u);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    sub_3DCEC();
    Class isa = (os_log_s *)NSNumber.init(integerLiteral:)(0LL).super.super.isa;
    id result = [(id)objc_opt_self(IMMetricsCollector) sharedInstance];
    if (result)
    {
      uint64_t v23 = result;
      id v24 = [objc_allocWithZone(NSNumber) initWithInteger:*(void *)(*(void *)(v0 + 72) + *(int *)(*(void *)(v0 + 112) + 20))];
      [v23 trackAttachmentDownloadLimitExceeded:5 limitSize:isa fileSize:v24 qualityType:0 isSticker:0 lowQualityModeEnabled:0];

LABEL_15:
      uint64_t v25 = *(void *)(v0 + 152);
      uint64_t v27 = *(void *)(v0 + 120);
      uint64_t v26 = *(void *)(v0 + 128);
      swift_task_dealloc(*(void *)(v0 + 160));
      swift_task_dealloc(v25);
      swift_task_dealloc(v26);
      swift_task_dealloc(v27);
      return (id)(*(uint64_t (**)(id))(v0 + 8))(v8);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_3B528()
{
  unint64_t v1 = (uint64_t (*)(void))v0[23];
  uint64_t v2 = v0[12];
  swift_release(v0[25]);
  v0[26] = *(void *)(v2 + 16);
  v0[27] = v1();
  return swift_task_switch(sub_3B58C, 0LL, 0LL);
}

uint64_t sub_3B58C(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 192);
  uint64_t v3 = *(void *)(v1 + 176);
  uint64_t v4 = *(int *)(v1 + 296);
  uint64_t v5 = *(void *)(v1 + 104);
  uint64_t v6 = *(void *)(v1 + 72);
  uint64_t v7 = *(int *)(*(void *)(v1 + 112) + 20LL);
  *(_DWORD *)(v1 + 300) = v7;
  *(void *)(v1 + 224) = *(void *)(v6 + v7);
  *(void *)(v1 + 232) = *(void *)(v5 + v4);
  *(void *)(v1 + 240) = *(void *)(v3 + 104);
  *(void *)(v1 + 248) = static MainActor.shared.getter(a1);
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_3B61C, v8, v9);
}

uint64_t sub_3B61C()
{
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t))v0[30];
  uint64_t v2 = v0[26];
  uint64_t v3 = v0[22];
  swift_release(v0[31]);
  v0[32] = v1(v2, v3);
  return swift_task_switch(sub_3B67C, 0LL, 0LL);
}

id sub_3B67C(id result)
{
  unint64_t v2 = *(void *)(v1 + 216);
  if (v2 >= *(void *)(v1 + 256))
  {
    uint64_t v3 = *(void *)(v1 + 224);
    if (v3 + 0x4000000000000000LL < 0)
    {
      __break(1u);
      goto LABEL_16;
    }

    if (v3 < 1 || v2 >= 2 * v3)
    {
      uint64_t v5 = *(void *)(v1 + 192);
      uint64_t v6 = *(void *)(v1 + 176);
      *(void *)(v1 + 264) = *(void *)(*(void *)(v1 + 104) + *(int *)(v1 + 296));
      *(void *)(v1 + 272) = *(void *)(v6 + 88);
      *(void *)(v1 + 280) = static MainActor.shared.getter(result);
      uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
      return (id)swift_task_switch(sub_3B960, v7, v8);
    }
  }

  if (qword_76B90 != -1) {
    swift_once(&qword_76B90, sub_21C04);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = sub_6298(v9, (uint64_t)static Logger.rcs);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = *(void *)(v1 + 256);
    uint64_t v15 = *(void *)(v1 + 216);
    uint64_t v14 = *(void *)(v1 + 224);
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v16 = 134218496;
    *(void *)(v1 + 48) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 48, v1 + 56);
    *(_WORD *)(v16 + 12) = 2048;
    *(void *)(v1 + 56) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 56, v1 + 64);
    *(_WORD *)(v16 + 22) = 2048;
    *(void *)(v1 + 64) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 64, v1 + 72);
    _os_log_impl( &dword_0,  v11,  v12,  "Not enough free space to safely download avail %llu minFree %llu fileSize %ld, not auto downloading",  (uint8_t *)v16,  0x20u);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  id v17 = [objc_allocWithZone(NSNumber) initWithUnsignedLongLong:*(void *)(v1 + 216)];
  id result = [(id)objc_opt_self(IMMetricsCollector) sharedInstance];
  if (result)
  {
    uint64_t v18 = result;
    id v19 = [objc_allocWithZone(NSNumber) initWithInteger:*(void *)(*(void *)(v1 + 72) + *(int *)(v1 + 300))];
    [v18 trackAttachmentDownloadLimitExceeded:3 limitSize:v17 fileSize:v19 qualityType:0 isSticker:0 lowQualityModeEnabled:0];

    uint64_t v20 = *(void *)(v1 + 152);
    uint64_t v22 = *(void *)(v1 + 120);
    uint64_t v21 = *(void *)(v1 + 128);
    swift_task_dealloc(*(void *)(v1 + 160));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (id)(*(uint64_t (**)(void))(v1 + 8))(0LL);
  }

uint64_t sub_3B960()
{
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v0[34];
  uint64_t v2 = v0[26];
  uint64_t v3 = v0[22];
  uint64_t v5 = v0[10];
  uint64_t v4 = v0[11];
  uint64_t v6 = v0[9];
  swift_release(v0[35]);
  v0[36] = v1(v6, v5, v4, v2, v3);
  return swift_task_switch(sub_3B9E4, 0LL, 0LL);
}

id sub_3B9E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 288);
  if (v2 >= 1 && v2 >= *(void *)(v1 + 224))
  {
    uint64_t v15 = *(void *)(v1 + 160);
    uint64_t v16 = *(void *)(v1 + 136);
    uint64_t v17 = *(void *)(v1 + 72) + *(int *)(v1 + 300);
    static Date.now.getter(a1);
    uint64_t v18 = v17 + *(int *)(type metadata accessor for RCSFile.DispositionInformation(0LL) + 32);
    uint64_t v19 = sub_219FC( &qword_773E0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    char v20 = dispatch thunk of static Comparable.< infix(_:_:)(v18, v15, v16, v19);
    if ((v20 & 1) == 0)
    {
      (*(void (**)(void, void))(*(void *)(v1 + 144) + 8LL))( *(void *)(v1 + 160),  *(void *)(v1 + 136));
      uint64_t v63 = 1LL;
LABEL_21:
      uint64_t v65 = *(void *)(v1 + 152);
      uint64_t v67 = *(void *)(v1 + 120);
      uint64_t v66 = *(void *)(v1 + 128);
      swift_task_dealloc(*(void *)(v1 + 160));
      swift_task_dealloc(v65);
      swift_task_dealloc(v66);
      swift_task_dealloc(v67);
      return (id)(*(uint64_t (**)(uint64_t))(v1 + 8))(v63);
    }

    if (qword_76B90 != -1) {
      swift_once(&qword_76B90, sub_21C04);
    }
    uint64_t v22 = *(void *)(v1 + 152);
    uint64_t v21 = *(void *)(v1 + 160);
    uint64_t v23 = *(void *)(v1 + 136);
    uint64_t v24 = *(void *)(v1 + 144);
    uint64_t v25 = *(void *)(v1 + 128);
    uint64_t v26 = *(void *)(v1 + 72);
    uint64_t v27 = type metadata accessor for Logger(0LL);
    sub_6298(v27, (uint64_t)static Logger.rcs);
    sub_C934(v26, v25, type metadata accessor for RCSFile);
    uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v22, v21, v23);
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.info.getter();
    BOOL v31 = os_log_type_enabled(v29, v30);
    uint64_t v33 = *(void *)(v1 + 152);
    uint64_t v32 = *(void *)(v1 + 160);
    uint64_t v35 = *(void *)(v1 + 136);
    uint64_t v34 = *(void *)(v1 + 144);
    uint64_t v36 = *(void *)(v1 + 128);
    if (v31)
    {
      uint64_t v69 = *(void *)(v1 + 144);
      uint64_t v68 = *(void *)(v1 + 136);
      uint64_t v37 = swift_slowAlloc(22LL, -1LL);
      uint64_t v70 = swift_slowAlloc(64LL, -1LL);
      *(_DWORD *)uint64_t v37 = 136315394;
      uint64_t v71 = v70;
      uint64_t v38 = sub_226F4();
      os_log_type_t v40 = (RCSServiceSession *)v39;
      *(void *)(v1 + 32) = sub_B004(v38, v39, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 32, v1 + 40);
      swift_bridgeObjectRelease(v40, v41, v42, v43, v44, v45, v46, v47);
      sub_11324(v36, type metadata accessor for RCSFile);
      *(_WORD *)(v37 + 12) = 2080;
      uint64_t v48 = sub_226F4();
      unint64_t v50 = (RCSServiceSession *)v49;
      *(void *)(v1 + 40) = sub_B004(v48, v49, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 40, v1 + 48);
      swift_bridgeObjectRelease(v50, v51, v52, v53, v54, v55, v56, v57);
      unsigned __int8 v58 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
      v58(v33, v68);
      _os_log_impl( &dword_0,  v29,  v30,  "RCS File has passed expiration (%s, not auto downloading (now %s",  (uint8_t *)v37,  0x16u);
      swift_arrayDestroy(v70, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v70, -1LL, -1LL);
      swift_slowDealloc(v37, -1LL, -1LL);

      v58(v32, v68);
    }

    else
    {

      id v64 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
      v64(v33, v35);
      sub_11324(v36, type metadata accessor for RCSFile);
      v64(v32, v35);
    }

uint64_t sub_3BF28()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [v0 pathExtension];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  uint64_t v4 = v3;

  id v5 = [v0 stringByDeletingPathExtension];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);

  _StringGuts.grow(_:)(19LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v7._uint64_t countAndFlagsBits = 0x616E626D7568742DLL;
  v7._object = (void *)0xEB000000002E6C69LL;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = v2;
  v8._object = v4;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v4);
  v9._uint64_t countAndFlagsBits = 1735420462LL;
  v9._object = (void *)0xE400000000000000LL;
  String.append(_:)(v9);

  return v6;
}

uint64_t sub_3C02C(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 280) = a5;
  *(void *)(v6 + 288) = v5;
  *(void *)(v6 + 264) = a2;
  *(void *)(v6 + 272) = a4;
  *(_BYTE *)(v6 + 488) = a1;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  *(void *)(v6 + 296) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v6 + 304) = v8;
  *(void *)(v6 + 312) = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for URL(0LL);
  *(void *)(v6 + 320) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v6 + 328) = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v6 + 336) = swift_task_alloc(v11);
  *(void *)(v6 + 344) = swift_task_alloc(v11);
  unint64_t v12 = (*(void *)(*(void *)(sub_5C28(&qword_763A0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v6 + 352) = swift_task_alloc(v12);
  *(void *)(v6 + 360) = swift_task_alloc(v12);
  *(void *)(v6 + 368) = swift_task_alloc(v12);
  *(void *)(v6 + 376) = swift_task_alloc(v12);
  *(void *)(v6 + 384) = swift_task_alloc(v12);
  return swift_task_switch(sub_3C124, 0LL, 0LL);
}

uint64_t sub_3C124()
{
  uint64_t v2 = *(void **)(v1 + 264);
  if ((*(_BYTE *)(v1 + 488) & 1) == 0)
  {
    id v3 = [v2 localPath];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(v1 + 280);
      static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
      uint64_t v7 = v6;

      *(void *)(v1 + 392) = v7;
      uint64_t v8 = *(int **)(*(void *)(v5 + 24) + 144LL);
      uint64_t v23 = (char *)v8 + *v8;
      uint64_t v9 = (void *)swift_task_alloc(v8[1]);
      *(void *)(v1 + 400) = v9;
      *uint64_t v9 = v1;
      v9[1] = sub_3C310;
      __asm { BR              X8 }
    }

    __break(1u);
    goto LABEL_8;
  }

  id v10 = [v2 localURL];
  uint64_t v0 = *(void *)(v1 + 376);
  if (!v10)
  {
LABEL_8:
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v1 + 328) + 56LL))( v0,  1LL,  1LL,  *(void *)(v1 + 320));
    goto LABEL_9;
  }

  unint64_t v11 = v10;
  uint64_t v12 = *(void *)(v1 + 344);
  uint64_t v13 = *(void *)(v1 + 320);
  uint64_t v14 = *(void *)(v1 + 328);
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v10);

  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32);
  *(void *)(v1 + 448) = v15;
  v15(v0, v12, v13);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v0, 0LL, 1LL, v13);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  *(void *)(v1 + 456) = v16;
  uint64_t result = v16(v0, 1LL, v13);
  if ((_DWORD)result != 1)
  {
    uint64_t v18 = *(void *)(v1 + 280);
    uint64_t v20 = *(void *)(v18 + 16);
    uint64_t v19 = *(void *)(v18 + 24);
    uint64_t v21 = *(int **)(v19 + 152);
    uint64_t v24 = (int *)((char *)v21 + *v21);
    uint64_t v22 = (void *)swift_task_alloc(v21[1]);
    *(void *)(v1 + 464) = v22;
    *uint64_t v22 = v1;
    v22[1] = sub_3C724;
    return ((uint64_t (*)(void, void, uint64_t, uint64_t))v24)( *(void *)(v1 + 384),  *(void *)(v1 + 376),  v20,  v19);
  }

uint64_t sub_3C310()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 400);
  *(void *)(v2 + 408) = v0;
  __int128 v4 = *(_OWORD *)(v2 + 16);
  *(_BYTE *)(v2 + 489) = *(_BYTE *)(v2 + 32);
  __int128 v5 = *(_OWORD *)(v2 + 40);
  *(_OWORD *)(v2 + 4swift_weakDestroy(v0 + 16) = v4;
  *(_OWORD *)(v2 + 432) = v5;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v13 = sub_3CD90;
  }

  else
  {
    swift_bridgeObjectRelease(*(RCSServiceSession **)(v2 + 392), v6, v7, v8, v9, v10, v11, v12);
    uint64_t v13 = sub_3C390;
  }

  return swift_task_switch(v13, 0LL, 0LL);
}

id sub_3C390()
{
  if (qword_76B90 != -1) {
    swift_once(&qword_76B90, sub_21C04);
  }
  uint64_t v1 = *(RCSServiceSession **)(v0 + 424);
  sub_6298(*(void *)(v0 + 296), (uint64_t)static Logger.rcs);
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v59 = v0 + 248;
    uint64_t v60 = v0 + 256;
    double v6 = *(double *)(v0 + 432);
    double v5 = *(double *)(v0 + 440);
    int v58 = *(unsigned __int8 *)(v0 + 489);
    uint64_t v8 = *(void *)(v0 + 416);
    uint64_t v7 = *(void *)(v0 + 424);
    uint64_t v9 = swift_slowAlloc(42LL, -1LL);
    uint64_t v61 = swift_slowAlloc(128LL, -1LL);
    uint64_t v62 = v61;
    *(_DWORD *)uint64_t v9 = 136315906;
    if (v7)
    {
      id v10 = v1;
    }

    else
    {
      uint64_t v8 = 0x64697567206F6ELL;
      id v10 = (RCSServiceSession *)0xE700000000000000LL;
    }

    swift_bridgeObjectRetain();
    *(void *)(v0 + 232) = sub_B004(v8, (unint64_t)v10, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240);
    swift_bridgeObjectRelease(v10, v11, v12, v13, v14, v15, v16, v17);
    swift_bridgeObjectRelease_n(v1, 2LL);
    *(_WORD *)(v9 + 12) = 2080;
    if (v58) {
      uint64_t v18 = 0x73736563637553LL;
    }
    else {
      uint64_t v18 = 0x64656C696146LL;
    }
    if (v58) {
      uint64_t v19 = (RCSServiceSession *)0xE700000000000000LL;
    }
    else {
      uint64_t v19 = (RCSServiceSession *)0xE600000000000000LL;
    }
    *(void *)(v0 + 240) = sub_B004(v18, (unint64_t)v19, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v59);
    swift_bridgeObjectRelease(v19, v20, v21, v22, v23, v24, v25, v26);
    *(_WORD *)(v9 + 22) = 2080;
    uint64_t v27 = Double.description.getter(v6);
    uint64_t v29 = (RCSServiceSession *)v28;
    *(void *)(v0 + 248) = sub_B004(v27, v28, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v59, v60);
    swift_bridgeObjectRelease(v29, v30, v31, v32, v33, v34, v35, v36);
    *(_WORD *)(v9 + 32) = 2080;
    uint64_t v37 = Double.description.getter(v5);
    unint64_t v39 = (RCSServiceSession *)v38;
    *(void *)(v0 + 256) = sub_B004(v37, v38, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v60, v0 + 264);
    swift_bridgeObjectRelease(v39, v40, v41, v42, v43, v44, v45, v46);
    _os_log_impl(&dword_0, v3, v4, "Preview result %s %s (%s, %s)", (uint8_t *)v9, 0x2Au);
    swift_arrayDestroy(v61, 4LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v61, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v1, 2LL);
  }

  id result = [(id)objc_opt_self(IMMetricsCollector) sharedInstance];
  if (result)
  {
    uint64_t v48 = result;
    uint64_t v49 = *(unsigned __int8 *)(v0 + 489);
    NSString v50 = String._bridgeToObjectiveC()();
    [v48 trackAttachmentRenderingAttempt:v49 failureReason:v50];

    uint64_t v51 = *(void *)(v0 + 376);
    uint64_t v53 = *(void *)(v0 + 360);
    uint64_t v52 = *(void *)(v0 + 368);
    uint64_t v55 = *(void *)(v0 + 344);
    uint64_t v54 = *(void *)(v0 + 352);
    uint64_t v56 = *(void *)(v0 + 336);
    uint64_t v57 = *(void *)(v0 + 312);
    swift_task_dealloc(*(void *)(v0 + 384));
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_3C724(char a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 464);
  *(_BYTE *)(v3 + 490) = a1;
  *(void *)(v3 + 472) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    double v5 = sub_3D04C;
  }

  else
  {
    uint64_t v6 = *(void *)(v3 + 376);
    uint64_t v7 = *(void *)(v3 + 320);
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 + 328) + 8LL);
    *(void *)(v3 + 480) = v8;
    v8(v6, v7);
    double v5 = sub_3C7A8;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

void sub_3C7A8()
{
  if (qword_76B90 != -1) {
    swift_once(&qword_76B90, sub_21C04);
  }
  uint64_t v1 = (unsigned __int8 *)(v0 + 490);
  uint64_t v2 = *(void *)(v0 + 384);
  uint64_t v3 = *(void *)(v0 + 368);
  uint64_t v5 = *(void *)(v0 + 304);
  uint64_t v4 = *(void *)(v0 + 312);
  uint64_t v6 = *(void *)(v0 + 296);
  uint64_t v7 = *(void **)(v0 + 264);
  uint64_t v8 = sub_6298(v6, (uint64_t)static Logger.rcs);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v8, v6);
  sub_21AAC(v2, v3, &qword_763A0);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v109 = v9;
    SEL v11 = *(void **)(v0 + 264);
    uint64_t v12 = swift_slowAlloc(42LL, -1LL);
    uint64_t v13 = swift_slowAlloc(128LL, -1LL);
    uint64_t v110 = v13;
    *(_DWORD *)uint64_t v12 = 136315906;
    id v14 = [v11 guid];
    os_log_type_t v108 = v10;
    uint64_t v107 = v13;
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      uint64_t v18 = v17;
    }

    else
    {
      uint64_t v16 = 0x64697567206F6ELL;
      uint64_t v18 = (RCSServiceSession *)0xE700000000000000LL;
    }

    int v24 = *(unsigned __int8 *)(v0 + 490);
    id v25 = *(void **)(v0 + 264);
    *(void *)(v0 + 152) = sub_B004(v16, (unint64_t)v18, &v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160);
    swift_bridgeObjectRelease(v18, v26, v27, v28, v29, v30, v31, v32);

    *(_WORD *)(v12 + 12) = 2080;
    if (v24) {
      uint64_t v33 = 0x73736563637553LL;
    }
    else {
      uint64_t v33 = 0x64656C696146LL;
    }
    if (v24) {
      id v34 = (RCSServiceSession *)0xE700000000000000LL;
    }
    else {
      id v34 = (RCSServiceSession *)0xE600000000000000LL;
    }
    *(void *)(v0 + 160) = sub_B004(v33, (unint64_t)v34, &v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168);
    swift_bridgeObjectRelease(v34, v35, v36, v37, v38, v39, v40, v41);
    *(_WORD *)(v12 + 22) = 2080;
    id v42 = [v25 localPath];
    if (!v42) {
      goto LABEL_25;
    }
    id v43 = v42;
    uint64_t v45 = *(void *)(v0 + 360);
    uint64_t v44 = *(void *)(v0 + 368);
    uint64_t v105 = *(void *)(v0 + 320);
    uint64_t v106 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 456);
    unsigned __int8 v46 = *(void **)(v0 + 264);
    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    uint64_t v49 = v48;

    *(void *)(v0 + 168) = sub_B004(v47, (unint64_t)v49, &v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176);
    swift_bridgeObjectRelease(v49, v50, v51, v52, v53, v54, v55, v56);

    *(_WORD *)(v12 + 32) = 2080;
    sub_21AAC(v44, v45, &qword_763A0);
    if (v106(v45, 1LL, v105) == 1)
    {
      sub_1231C(*(void *)(v0 + 360), &qword_763A0);
      uint64_t v57 = (RCSServiceSession *)0xE700000000000000LL;
      uint64_t v58 = 0x687461702D6F6ELL;
    }

    else
    {
      uint64_t v59 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
      uint64_t v60 = *(void *)(v0 + 360);
      uint64_t v61 = *(void *)(v0 + 320);
      uint64_t v58 = ((uint64_t (*)(void))URL.path.getter)();
      uint64_t v57 = v62;
      v59(v60, v61);
    }

    uint64_t v63 = *(void *)(v0 + 368);
    uint64_t v65 = *(void *)(v0 + 304);
    uint64_t v64 = *(void *)(v0 + 312);
    uint64_t v66 = *(void *)(v0 + 296);
    *(void *)(v0 + 176) = sub_B004(v58, (unint64_t)v57, &v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184);
    swift_bridgeObjectRelease(v57, v67, v68, v69, v70, v71, v72, v73);
    sub_1231C(v63, &qword_763A0);
    _os_log_impl(&dword_0, v109, v108, "Safe Render result %s %s %s safely rendered to (%s)", (uint8_t *)v12, 0x2Au);
    swift_arrayDestroy(v107, 4LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v107, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
    uint64_t v1 = (unsigned __int8 *)(v0 + 490);
  }

  else
  {
    uint64_t v19 = *(void *)(v0 + 368);
    uint64_t v21 = *(void *)(v0 + 304);
    uint64_t v20 = *(void *)(v0 + 312);
    uint64_t v22 = *(void *)(v0 + 296);
    id v23 = *(void **)(v0 + 264);

    sub_1231C(v19, &qword_763A0);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  }

  id v74 = [(id)objc_opt_self(IMMetricsCollector) sharedInstance];
  if (!v74)
  {
    __break(1u);
LABEL_25:

    __break(1u);
    return;
  }

  uint64_t v75 = v74;
  uint64_t v76 = *v1;
  uint64_t v77 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 456);
  uint64_t v78 = *(void *)(v0 + 384);
  uint64_t v79 = *(void *)(v0 + 352);
  uint64_t v80 = *(void *)(v0 + 320);
  NSString v81 = String._bridgeToObjectiveC()();
  [v75 trackAttachmentRenderingAttempt:v76 failureReason:v81];

  sub_21AAC(v78, v79, &qword_763A0);
  if (v77(v79, 1LL, v80) == 1)
  {
    uint64_t v82 = *(void *)(v0 + 352);
    sub_1231C(*(void *)(v0 + 384), &qword_763A0);
  }

  else
  {
    uint64_t v83 = *(void (**)(uint64_t, uint64_t))(v0 + 480);
    uint64_t v82 = *(void *)(v0 + 384);
    uint64_t v84 = *(void *)(v0 + 336);
    uint64_t v85 = *(void *)(v0 + 320);
    uint64_t v86 = *(void **)(v0 + 264);
    uint64_t v87 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v0 + 448))(v84, *(void *)(v0 + 352), v85);
    URL.path.getter(v87);
    uint64_t v89 = v88;
    NSString v90 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v89, v91, v92, v93, v94, v95, v96, v97);
    [v86 _setLocalPath:v90];

    v83(v84, v85);
  }

  sub_1231C(v82, &qword_763A0);
  uint64_t v98 = *(void *)(v0 + 376);
  uint64_t v100 = *(void *)(v0 + 360);
  uint64_t v99 = *(void *)(v0 + 368);
  uint64_t v102 = *(void *)(v0 + 344);
  uint64_t v101 = *(void *)(v0 + 352);
  uint64_t v103 = *(void *)(v0 + 336);
  uint64_t v104 = *(void *)(v0 + 312);
  swift_task_dealloc(*(void *)(v0 + 384));
  swift_task_dealloc(v98);
  swift_task_dealloc(v99);
  swift_task_dealloc(v100);
  swift_task_dealloc(v101);
  swift_task_dealloc(v102);
  swift_task_dealloc(v103);
  swift_task_dealloc(v104);
  (*(void (**)(void))(v0 + 8))();
}

id sub_3CD90( uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, unsigned __int8 a8)
{
  if (qword_76B90 != -1) {
    swift_once(&qword_76B90, sub_21C04);
  }
  uint64_t v9 = *(void *)(v8 + 408);
  sub_6298(*(void *)(v8 + 296), (uint64_t)static Logger.rcs);
  swift_errorRetain(v9);
  uint64_t v10 = swift_errorRetain(v9);
  SEL v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.info.getter();
  BOOL v13 = os_log_type_enabled(v11, v12);
  uint64_t v14 = *(void *)(v8 + 408);
  if (v13)
  {
    id v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    uint64_t v47 = v16;
    *(_DWORD *)id v15 = 136315138;
    swift_getErrorValue(v14, v8 + 208, v8 + 80);
    uint64_t v17 = Error.localizedDescription.getter(*(void *)(v8 + 88), *(void *)(v8 + 96));
    uint64_t v19 = (RCSServiceSession *)v18;
    *(void *)(v8 + 224) = sub_B004(v17, v18, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 + 224, v8 + 232);
    swift_bridgeObjectRelease(v19, v20, v21, v22, v23, v24, v25, v26);
    swift_errorRelease(v14);
    swift_errorRelease(v14);
    _os_log_impl(&dword_0, v11, v12, "Preview failed with error %s", v15, 0xCu);
    swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(*(void *)(v8 + 408));
    swift_errorRelease(v14);
  }

  id result = [(id)objc_opt_self(IMMetricsCollector) sharedInstance];
  if (result)
  {
    id v28 = result;
    uint64_t v29 = *(void *)(v8 + 408);
    swift_getErrorValue(v29, v8 + 192, v8 + 128);
    Error.localizedDescription.getter(*(void *)(v8 + 136), *(void *)(v8 + 144));
    id v31 = v30;
    NSString v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v31, v33, v34, v35, v36, v37, v38, v39);
    [v28 trackAttachmentRenderingAttempt:0 failureReason:v32];

    swift_errorRelease(v29);
    uint64_t v40 = *(void *)(v8 + 376);
    uint64_t v42 = *(void *)(v8 + 360);
    uint64_t v41 = *(void *)(v8 + 368);
    uint64_t v44 = *(void *)(v8 + 344);
    uint64_t v43 = *(void *)(v8 + 352);
    uint64_t v45 = *(void *)(v8 + 336);
    uint64_t v46 = *(void *)(v8 + 312);
    swift_task_dealloc(*(void *)(v8 + 384));
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    return (id)(*(uint64_t (**)(void))(v8 + 8))();
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_3D04C()
{
  if (qword_76B90 != -1) {
    swift_once(&qword_76B90, sub_21C04);
  }
  uint64_t v1 = *(void *)(v0 + 472);
  sub_6298(*(void *)(v0 + 296), (uint64_t)static Logger.rcs);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.info.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = *(void *)(v0 + 472);
  if (v5)
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    uint64_t v39 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_getErrorValue(v6, v0 + 216, v0 + 104);
    uint64_t v9 = Error.localizedDescription.getter(*(void *)(v0 + 112), *(void *)(v0 + 120));
    SEL v11 = (RCSServiceSession *)v10;
    *(void *)(v0 + 200) = sub_B004(v9, v10, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208);
    swift_bridgeObjectRelease(v11, v12, v13, v14, v15, v16, v17, v18);
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl(&dword_0, v3, v4, "Safe render failed with error %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 472));
    swift_errorRelease(v6);
  }

  id result = [(id)objc_opt_self(IMMetricsCollector) sharedInstance];
  if (result)
  {
    SEL v20 = result;
    uint64_t v21 = *(void *)(v0 + 472);
    swift_getErrorValue(v21, v0 + 184, v0 + 56);
    Error.localizedDescription.getter(*(void *)(v0 + 64), *(void *)(v0 + 72));
    id v23 = v22;
    NSString v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v23, v25, v26, v27, v28, v29, v30, v31);
    [v20 trackAttachmentRenderingAttempt:0 failureReason:v24];

    swift_errorRelease(v21);
    uint64_t v32 = *(void *)(v0 + 376);
    uint64_t v34 = *(void *)(v0 + 360);
    uint64_t v33 = *(void *)(v0 + 368);
    uint64_t v36 = *(void *)(v0 + 344);
    uint64_t v35 = *(void *)(v0 + 352);
    uint64_t v37 = *(void *)(v0 + 336);
    uint64_t v38 = *(void *)(v0 + 312);
    swift_task_dealloc(*(void *)(v0 + 384));
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_3D310(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RCSFile(0LL);
  __chkstk_darwin(v2);
  uint64_t v114 = (uint64_t)&v112 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v118 = type metadata accessor for Date(0LL);
  uint64_t v115 = *(void *)(v118 - 8);
  uint64_t v4 = __chkstk_darwin(v118);
  uint64_t v113 = (char *)&v112 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v117 = (char *)&v112 - v6;
  uint64_t v7 = sub_5C28(&qword_76498);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v112 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v119 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
  uint64_t v10 = *(void *)(v119 - 8);
  uint64_t v11 = __chkstk_darwin(v119);
  SEL v121 = (char *)&v112 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v116 = (uint64_t)&v112 - v13;
  uint64_t v14 = sub_5C28(&qword_76580);
  __chkstk_darwin(v14);
  id v16 = (char *)&v112 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for UTType(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v112 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __chkstk_darwin(v19);
  NSString v24 = (char *)&v112 - v23;
  __chkstk_darwin(v22);
  id v26 = (char *)&v112 - v25;
  uint64_t v112 = v2;
  uint64_t v27 = *(int *)(v2 + 20);
  uint64_t v120 = a1;
  uint64_t v28 = a1 + v27;
  uint64_t v29 = *(void *)(v28 + 24);
  uint64_t v30 = *(void *)(v28 + 32);
  uint64_t v31 = swift_bridgeObjectRetain();
  static UTType.data.getter(v31);
  uint64_t v32 = v30;
  uint64_t v33 = v17;
  UTType.init(mimeType:conformingTo:)(v29, v32, v24);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17) == 1)
  {
    sub_1231C((uint64_t)v16, &qword_76580);
    if (qword_76B90 != -1) {
      swift_once(&qword_76B90, sub_21C04);
    }
    uint64_t v34 = type metadata accessor for Logger(0LL);
    uint64_t v35 = sub_6298(v34, (uint64_t)static Logger.rcs);
    uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v37 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl(&dword_0, v36, v37, "No mimetype in file description, not using any thumbnail", v38, 2u);
      swift_slowDealloc(v38, -1LL, -1LL);
    }

    return 0LL;
  }

  uint64_t v39 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(v26, v16, v17);
  static UTType.movie.getter(v39);
  char v40 = UTType.conforms(to:)(v24);
  uint64_t v41 = *(void (**)(char *, uint64_t))(v18 + 8);
  v41(v24, v17);
  uint64_t v42 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 16))(v21, v26, v17);
  if ((v40 & 1) != 0)
  {
    v41(v21, v17);
    uint64_t v43 = (uint64_t)v121;
  }

  else
  {
    static UTType.image.getter(v42);
    char v44 = UTType.conforms(to:)(v24);
    v41(v24, v17);
    v41(v21, v17);
    uint64_t v43 = (uint64_t)v121;
    if ((v44 & 1) == 0)
    {
      SEL v121 = v26;
      if (qword_76B90 != -1) {
        swift_once(&qword_76B90, sub_21C04);
      }
      uint64_t v90 = type metadata accessor for Logger(0LL);
      sub_6298(v90, (uint64_t)static Logger.rcs);
      uint64_t v91 = v114;
      uint64_t v92 = sub_C934(v120, v114, type metadata accessor for RCSFile);
      id v93 = (os_log_s *)Logger.logObject.getter(v92);
      os_log_type_t v94 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v93, v94))
      {
        id v95 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v96 = swift_slowAlloc(32LL, -1LL);
        *(_DWORD *)id v95 = 136315138;
        uint64_t v123 = v96;
        uint64_t v97 = v91 + *(int *)(v112 + 20);
        uint64_t v98 = v91;
        uint64_t v120 = v33;
        uint64_t v99 = *(void *)(v97 + 24);
        uint64_t v100 = *(RCSServiceSession **)(v97 + 32);
        swift_bridgeObjectRetain();
        uint64_t v122 = sub_B004(v99, (unint64_t)v100, &v123);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123);
        swift_bridgeObjectRelease(v100, v101, v102, v103, v104, v105, v106, v107);
        sub_11324(v98, type metadata accessor for RCSFile);
        _os_log_impl(&dword_0, v93, v94, "Non A/V or image mimetype %s, not using any thumbnail", v95, 0xCu);
        swift_arrayDestroy(v96, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v96, -1LL, -1LL);
        swift_slowDealloc(v95, -1LL, -1LL);

        uint64_t v89 = v120;
        id v51 = v121;
        goto LABEL_30;
      }

      uint64_t v109 = type metadata accessor for RCSFile;
      uint64_t v110 = v91;
LABEL_28:
      sub_11324(v110, v109);
      id v51 = v121;
LABEL_29:
      uint64_t v89 = v33;
      goto LABEL_30;
    }
  }

  sub_21AAC(v120, (uint64_t)v9, &qword_76498);
  uint64_t v45 = v119;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1LL, v119) == 1)
  {
    sub_1231C((uint64_t)v9, &qword_76498);
    if (qword_76B90 != -1) {
      swift_once(&qword_76B90, sub_21C04);
    }
    uint64_t v46 = type metadata accessor for Logger(0LL);
    uint64_t v47 = sub_6298(v46, (uint64_t)static Logger.rcs);
    uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
    os_log_type_t v49 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v48, v49))
    {
      SEL v50 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)SEL v50 = 0;
      _os_log_impl(&dword_0, v48, v49, "No thumbnail info found", v50, 2u);
      swift_slowDealloc(v50, -1LL, -1LL);
    }

    id v51 = v26;
    goto LABEL_29;
  }

  uint64_t v52 = v116;
  uint64_t v53 = sub_3DC64((uint64_t)v9, v116);
  id v54 = v117;
  static Date.now.getter(v53);
  uint64_t v55 = v52 + *(int *)(v45 + 28);
  uint64_t v56 = sub_219FC( &qword_773E0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v57 = v118;
  if ((dispatch thunk of static Comparable.< infix(_:_:)(v55, v54, v118, v56) & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v115 + 8))(v54, v57);
    sub_11324(v52, type metadata accessor for RCSFile.ThumbnailInformation);
    v41(v26, v33);
    return 1LL;
  }

  SEL v121 = v26;
  if (qword_76B90 != -1) {
    swift_once(&qword_76B90, sub_21C04);
  }
  uint64_t v58 = type metadata accessor for Logger(0LL);
  sub_6298(v58, (uint64_t)static Logger.rcs);
  sub_C934(v52, v43, type metadata accessor for RCSFile.ThumbnailInformation);
  uint64_t v59 = v115;
  uint64_t v60 = v113;
  uint64_t v61 = (*(uint64_t (**)(char *, char *, uint64_t))(v115 + 16))(v113, v54, v57);
  uint64_t v62 = (void *)Logger.logObject.getter(v61);
  os_log_type_t v63 = static os_log_type_t.info.getter();
  int v64 = v63;
  if (!os_log_type_enabled((os_log_t)v62, v63))
  {

    uint64_t v111 = *(void (**)(char *, uint64_t))(v59 + 8);
    v111(v60, v57);
    sub_11324(v43, type metadata accessor for RCSFile.ThumbnailInformation);
    v111(v54, v57);
    uint64_t v110 = v52;
    uint64_t v109 = type metadata accessor for RCSFile.ThumbnailInformation;
    goto LABEL_28;
  }

  uint64_t v65 = swift_slowAlloc(22LL, -1LL);
  uint64_t v120 = swift_slowAlloc(64LL, -1LL);
  uint64_t v123 = v120;
  *(_DWORD *)uint64_t v65 = 136315394;
  LODWORD(v119) = v64;
  uint64_t v66 = sub_226F4();
  id v68 = (RCSServiceSession *)v67;
  uint64_t v122 = sub_B004(v66, v67, &v123);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123);
  swift_bridgeObjectRelease(v68, v69, v70, v71, v72, v73, v74, v75);
  sub_11324(v43, type metadata accessor for RCSFile.ThumbnailInformation);
  *(_WORD *)(v65 + 12) = 2080;
  uint64_t v76 = sub_226F4();
  uint64_t v78 = (RCSServiceSession *)v77;
  uint64_t v122 = sub_B004(v76, v77, &v123);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123);
  swift_bridgeObjectRelease(v78, v79, v80, v81, v82, v83, v84, v85);
  uint64_t v86 = *(void (**)(char *, uint64_t))(v59 + 8);
  uint64_t v87 = v118;
  v86(v60, v118);
  _os_log_impl( &dword_0,  (os_log_t)v62,  (os_log_type_t)v119,  "RCS Thumbnail has passed expiration (%s, not auto downloading (now %s",  (uint8_t *)v65,  0x16u);
  uint64_t v88 = v120;
  swift_arrayDestroy(v120, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v88, -1LL, -1LL);
  swift_slowDealloc(v65, -1LL, -1LL);

  v86(v117, v87);
  sub_11324(v116, type metadata accessor for RCSFile.ThumbnailInformation);
  id v51 = v121;
  uint64_t v89 = v33;
LABEL_30:
  v41(v51, v89);
  return 0LL;
}

uint64_t sub_3DC64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_3DCA8()
{
  unint64_t result = qword_773C8;
  if (!qword_773C8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RCSTransferError,  &type metadata for RCSTransferError);
    atomic_store(result, (unint64_t *)&qword_773C8);
  }

  return result;
}

unint64_t sub_3DCEC()
{
  unint64_t result = qword_773E8;
  if (!qword_773E8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSNumber);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_773E8);
  }

  return result;
}

unint64_t RCSMessage.SenderInfo.description.getter()
{
  if ((v52[58] & 1) != 0)
  {
    v53[0] = v50[0];
    v53[1] = v50[1];
    v54[0] = v51[0];
    *(_OWORD *)((char *)v54 + 9) = *(_OWORD *)((char *)v51 + 9);
    sub_3DED8((uint64_t)v52, (uint64_t)v49);
    _StringGuts.grow(_:)(42LL);
    swift_bridgeObjectRelease((RCSServiceSession *)0xE000000000000000LL, v1, v2, v3, v4, v5, v6, v7);
    uint64_t v8 = RCSHandle.rawValue.getter();
    uint64_t v10 = v9;
    sub_15F40(v53);
    v11._uint64_t countAndFlagsBits = v8;
    v11._object = v10;
    String.append(_:)(v11);
    swift_bridgeObjectRelease(v10, v12, v13, v14, v15, v16, v17, v18);
    v19._uint64_t countAndFlagsBits = 0x6E6974736564202CLL;
    v19._object = (void *)0xEE003D6E6F697461LL;
    String.append(_:)(v19);
    v20._uint64_t countAndFlagsBits = RCSDestination.description.getter();
    object = (RCSServiceSession *)v20._object;
    String.append(_:)(v20);
    swift_bridgeObjectRelease(object, v22, v23, v24, v25, v26, v27, v28);
    v29._uint64_t countAndFlagsBits = 41LL;
    v29._object = (void *)0xE100000000000000LL;
    String.append(_:)(v29);
    unint64_t v30 = 0xD000000000000017LL;
  }

  else
  {
    sub_3DED8((uint64_t)v50, (uint64_t)v49);
    *(void *)&v53[0] = 0LL;
    *((void *)&v53[0] + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(17LL);
    swift_bridgeObjectRelease(*((RCSServiceSession **)&v53[0] + 1), v31, v32, v33, v34, v35, v36, v37);
    strcpy((char *)v53, "SenderInfo.to(");
    HIBYTE(v53[0]) = -18;
    v38._uint64_t countAndFlagsBits = RCSDestination.description.getter();
    uint64_t v39 = (RCSServiceSession *)v38._object;
    String.append(_:)(v38);
    swift_bridgeObjectRelease(v39, v40, v41, v42, v43, v44, v45, v46);
    v47._uint64_t countAndFlagsBits = 41LL;
    v47._object = (void *)0xE100000000000000LL;
    String.append(_:)(v47);
    unint64_t v30 = *(void *)&v53[0];
  }

  sub_CB58((uint64_t)v49);
  return v30;
}

uint64_t sub_3DED8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t RCSMessage.senderInfo.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_CB1C(v1, a1);
}

uint64_t RCSMessage.senderInfo.setter( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7, unsigned __int8 a8)
{
  return sub_3DF2C(a1, v8, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_3DF2C( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7, unsigned __int8 a8)
{
  return a2;
}

uint64_t (*RCSMessage.senderInfo.modify())()
{
  return nullsub_5;
}

uint64_t RCSMessage.sender.getter@<X0>(uint64_t a1@<X8>)
{
  if ((v14[58] & 1) != 0)
  {
    uint64_t v3 = v12[0];
    uint64_t v4 = v12[1];
    uint64_t v5 = v12[2];
    uint64_t v6 = v12[3];
    uint64_t v7 = v12[4];
    uint64_t v8 = v12[5];
    uint64_t v9 = v12[6];
    char v10 = v13;
    uint64_t result = sub_CB58((uint64_t)v14);
  }

  else
  {
    uint64_t result = sub_CB8C((uint64_t)v12);
    uint64_t v3 = 0LL;
    uint64_t v4 = 0LL;
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    char v10 = 0;
  }

  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 56) = v10;
  return result;
}

BOOL RCSMessage.looksLikeFromChatBot.getter()
{
  if ((v38[58] & 1) != 0)
  {
    uint64_t v1 = (RCSServiceSession *)v36[1];
    id v2 = (RCSServiceSession *)v36[3];
    uint64_t v3 = (RCSServiceSession *)v36[4];
    uint64_t v4 = (RCSServiceSession *)v36[6];
    int v5 = v37;
    sub_CB58((uint64_t)v38);
    swift_bridgeObjectRelease(v3, v6, v7, v8, v9, v10, v11, v12);
    swift_bridgeObjectRelease(v2, v13, v14, v15, v16, v17, v18, v19);
    swift_bridgeObjectRelease(v1, v20, v21, v22, v23, v24, v25, v26);
    BOOL v27 = (v5 - 1) < 2;
    swift_bridgeObjectRelease(v4, v28, v29, v30, v31, v32, v33, v34);
  }

  else
  {
    sub_CB8C((uint64_t)v36);
    return 0LL;
  }

  return v27;
}

uint64_t RCSMessage.fromMe.getter()
{
  int v8 = v36;
  if ((v36 & 1) != 0)
  {
    id v9 = (RCSServiceSession *)v34[1];
    id v10 = (RCSServiceSession *)v34[3];
    id v11 = (RCSServiceSession *)v34[6];
    swift_bridgeObjectRelease((RCSServiceSession *)v34[4], v1, v2, v3, v4, v5, v6, v7);
    swift_bridgeObjectRelease(v10, v12, v13, v14, v15, v16, v17, v18);
    swift_bridgeObjectRelease(v9, v19, v20, v21, v22, v23, v24, v25);
    swift_bridgeObjectRelease(v11, v26, v27, v28, v29, v30, v31, v32);
    sub_CB58((uint64_t)&v35);
  }

  else
  {
    sub_CB8C((uint64_t)v34);
  }

  return v8 ^ 1u;
}

id RCSMessage.fromChatBot.getter()
{
  if ((v69[58] & 1) != 0)
  {
    uint64_t v1 = (RCSServiceSession *)v68[1];
    id v2 = (RCSServiceSession *)v68[3];
    uint64_t v3 = (RCSServiceSession *)v68[4];
    uint64_t v4 = (RCSServiceSession *)v68[6];
    if (*(_BYTE *)(v0 + *(int *)(type metadata accessor for RCSMessage(0LL) + 40)) == 1)
    {
      swift_bridgeObjectRelease(v3, v5, v6, v7, v8, v9, v10, v11);
      swift_bridgeObjectRelease(v2, v12, v13, v14, v15, v16, v17, v18);
      swift_bridgeObjectRelease(v1, v19, v20, v21, v22, v23, v24, v25);
      swift_bridgeObjectRelease(v4, v26, v27, v28, v29, v30, v31, v32);
      id v33 = &dword_0 + 1;
    }

    else
    {
      uint64_t v34 = v68[2];
      uint64_t v67 = v68[0];
      swift_bridgeObjectRetain();
      v35._uint64_t countAndFlagsBits = 58LL;
      v35._object = (void *)0xE100000000000000LL;
      String.append(_:)(v35);
      swift_bridgeObjectRetain();
      v36._uint64_t countAndFlagsBits = v34;
      v36._object = v2;
      String.append(_:)(v36);
      swift_bridgeObjectRelease(v3, v37, v38, v39, v40, v41, v42, v43);
      swift_bridgeObjectRelease(v1, v44, v45, v46, v47, v48, v49, v50);
      swift_bridgeObjectRelease_n(v2, 2LL);
      swift_bridgeObjectRelease(v4, v51, v52, v53, v54, v55, v56, v57);
      NSString v58 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v1, v59, v60, v61, v62, v63, v64, v65);
      id v33 = objc_msgSend(v58, "__im_isChatBot", v67);
    }

    sub_CB58((uint64_t)v69);
  }

  else
  {
    sub_CB8C((uint64_t)v68);
    return 0LL;
  }

  return v33;
}

uint64_t type metadata accessor for RCSMessage(uint64_t a1)
{
  return sub_40308(a1, (uint64_t *)&unk_774A8, (uint64_t)&nominal type descriptor for RCSMessage);
}

uint64_t RCSMessage.destination.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = v37;
  sub_CB1C(v2, (uint64_t)v37);
  if (v38[58] == 1)
  {
    SEL v12 = (RCSServiceSession *)v37[1];
    id v13 = (RCSServiceSession *)v37[3];
    id v14 = (RCSServiceSession *)v37[6];
    swift_bridgeObjectRelease((RCSServiceSession *)v37[4], v5, v6, v7, v8, v9, v10, v11);
    swift_bridgeObjectRelease(v13, v15, v16, v17, v18, v19, v20, v21);
    swift_bridgeObjectRelease(v12, v22, v23, v24, v25, v26, v27, v28);
    swift_bridgeObjectRelease(v14, v29, v30, v31, v32, v33, v34, v35);
    uint64_t v4 = v38;
  }

  return sub_3DED8((uint64_t)v4, a1);
}

uint64_t RCSMessage.originalID.getter()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_bridgeObjectRetain(*(void *)(v0 + 136));
  return v1;
}

uint64_t RCSMessage.originalID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 136));
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = a2;
  return result;
}

uint64_t (*RCSMessage.originalID.modify())()
{
  return nullsub_6;
}

uint64_t RCSMessage.messageID.getter()
{
  uint64_t v1 = *(void *)(v0 + 144);
  swift_bridgeObjectRetain(*(void *)(v0 + 152));
  return v1;
}

uint64_t RCSMessage.messageID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 152));
  *(void *)(v2 + 144) = a1;
  *(void *)(v2 + 152) = a2;
  return result;
}

uint64_t (*RCSMessage.messageID.modify())()
{
  return nullsub_7;
}

uint64_t RCSMessage.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for RCSMessage(0LL);
  return sub_21AAC(v1 + *(int *)(v3 + 28), a1, &qword_76228);
}

uint64_t RCSMessage.content.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for RCSMessage(0LL);
  return sub_5CF4(a1, v1 + *(int *)(v3 + 28), &qword_76228);
}

uint64_t (*RCSMessage.content.modify())()
{
  return nullsub_8;
}

uint64_t RCSMessage.groupIdentity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for RCSMessage(0LL);
  return sub_21AAC(v1 + *(int *)(v3 + 32), a1, &qword_76230);
}

uint64_t RCSMessage.groupIdentity.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for RCSMessage(0LL);
  return sub_5CF4(a1, v1 + *(int *)(v3 + 32), &qword_76230);
}

uint64_t (*RCSMessage.groupIdentity.modify())()
{
  return nullsub_9;
}

uint64_t RCSMessage.metadata.getter()
{
  return swift_bridgeObjectRetain();
}

void RCSMessage.metadata.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for RCSMessage(0LL) + 36);
  swift_bridgeObjectRelease(*(RCSServiceSession **)(v1 + v3), v4, v5, v6, v7, v8, v9, v10);
  *(void *)(v1 + v3) = a1;
}

uint64_t (*RCSMessage.metadata.modify())()
{
  return nullsub_10;
}

uint64_t RCSMessage.isChatBot.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for RCSMessage(0LL) + 40));
}

uint64_t RCSMessage.isChatBot.setter(char a1)
{
  uint64_t result = type metadata accessor for RCSMessage(0LL);
  *(_BYTE *)(v1 + *(int *)(result + swift_release(*(void *)(v0 + 40)) = a1;
  return result;
}

uint64_t (*RCSMessage.isChatBot.modify())()
{
  return nullsub_11;
}

uint64_t RCSMessage.alreadyReceivedReplicatedVersion.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for RCSMessage(0LL) + 44));
}

uint64_t RCSMessage.alreadyReceivedReplicatedVersion.setter(char a1)
{
  uint64_t result = type metadata accessor for RCSMessage(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*RCSMessage.alreadyReceivedReplicatedVersion.modify())()
{
  return nullsub_12;
}

uint64_t RCSMessageMetadata.Entry.headerValue.getter(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t RCSHandle.scheme.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(v2[1]);
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*RCSMessage.SubscriptionInfo.handleID.modify())()
{
  return nullsub_13;
}

uint64_t RCSMessage.SubscriptionInfo.simID.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3;
}

uint64_t (*RCSMessage.SubscriptionInfo.simID.modify())()
{
  return nullsub_14;
}

uint64_t sub_3E794()
{
  if (*v0) {
    return 0x44496D6973LL;
  }
  else {
    return 0x4449656C646E6168LL;
  }
}

uint64_t sub_3E7CC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_40084(a1, a2);
  *a3 = result;
  return result;
}

void sub_3E7F0(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_3E7FC(uint64_t a1)
{
  unint64_t v2 = sub_3E974();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_3E824(uint64_t a1)
{
  unint64_t v2 = sub_3E974();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RCSMessage.SubscriptionInfo.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v9 = sub_5C28(&qword_773F0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  SEL v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_CA38(a1, v14);
  unint64_t v15 = sub_3E974();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for RCSMessage.SubscriptionInfo.CodingKeys,  &type metadata for RCSMessage.SubscriptionInfo.CodingKeys,  v15,  v14,  v13);
  char v20 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a2, a3, &v20, v9);
  if (!v5)
  {
    char v19 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v19, v9);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

unint64_t sub_3E974()
{
  unint64_t result = qword_773F8;
  if (!qword_773F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_60CC4, &type metadata for RCSMessage.SubscriptionInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_773F8);
  }

  return result;
}

uint64_t RCSMessage.SubscriptionInfo.init(from:)(void *a1)
{
  uint64_t result = sub_4016C(a1);
  if (v1) {
    return v3;
  }
  return result;
}

uint64_t sub_3E9E0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_4016C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }

  return result;
}

uint64_t sub_3EA0C(void *a1)
{
  return RCSMessage.SubscriptionInfo.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t RCSMessage.subscriptionInfo.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for RCSMessage(0LL) + 52));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v1;
}

void RCSMessage.subscriptionInfo.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = v4 + *(int *)(type metadata accessor for RCSMessage(0LL) + 52);
  swift_bridgeObjectRelease(*(RCSServiceSession **)(v9 + 8), v10, v11, v12, v13, v14, v15, v16);
  swift_bridgeObjectRelease(*(RCSServiceSession **)(v9 + 24), v17, v18, v19, v20, v21, v22, v23);
  *(void *)uint64_t v9 = a1;
  *(void *)(v9 + 8) = a2;
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(v9 + 24) = a4;
}

uint64_t (*RCSMessage.subscriptionInfo.modify())()
{
  return nullsub_15;
}

uint64_t RCSMessage.init(senderInfo:originalID:messageID:subscriptionInfo:content:groupIdentity:metadata:isChatBot:)@<X0>( __int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  id v20 = (int *)type metadata accessor for RCSMessage(0LL);
  uint64_t v21 = (uint64_t)a9 + v20[7];
  uint64_t v22 = type metadata accessor for RCSMessage.Content(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v21, 1LL, 1LL, v22);
  uint64_t v23 = (uint64_t)a9 + v20[8];
  *(void *)(v23 + 32) = 0LL;
  *(_OWORD *)uint64_t v23 = 0u;
  *(_OWORD *)(v23 + swift_weakDestroy(v0 + 16) = 0u;
  *((_BYTE *)a9 + v20[11]) = 0;
  *(void *)((char *)a9 + v20[12]) = 0LL;
  sub_5CB8(a1, (uint64_t)a9);
  a9[16] = a2;
  a9[17] = a3;
  a9[18] = a4;
  a9[19] = a5;
  id v24 = (void *)((char *)a9 + v20[13]);
  *id v24 = a6;
  v24[1] = a7;
  _OWORD v24[2] = a8;
  void v24[3] = a10;
  sub_5CF4(a11, v21, &qword_76228);
  uint64_t result = sub_5CF4(a12, v23, &qword_76230);
  *(void *)((char *)a9 + v20[9]) = a13;
  *((_BYTE *)a9 + v20[10]) = a14;
  return result;
}

uint64_t RCSMessage.ContentType.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_3EC84 + 4 * a2[a1]))( 1954047348LL,  0xE400000000000000LL);
}

uint64_t sub_3EC84()
{
  return 0x726566736E617274LL;
}

uint64_t sub_3EC9C()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_3ECB4()
{
  return 0x70756F7267LL;
}

uint64_t sub_3ECC8()
{
  return 0x676E69707974LL;
}

uint64_t sub_3ECDC()
{
  return 0x6472614368636972LL;
}

uint64_t sub_3ECF8()
{
  return 0x6574736567677573LL;
}

uint64_t sub_3ED30()
{
  return 0x6341656369766564LL;
}

uint64_t RCSMessage.ContentType.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_3ED7C + 4 * byte_60489[a1]))( 1954047348LL,  0xE400000000000000LL);
}

uint64_t sub_3ED7C()
{
  return 0x726566736E617274LL;
}

uint64_t sub_3ED94()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_3EDAC()
{
  return 0x70756F7267LL;
}

uint64_t sub_3EDC0()
{
  return 0x676E69707974LL;
}

uint64_t sub_3EDD4()
{
  return 0x6472614368636972LL;
}

uint64_t sub_3EDF0()
{
  return 0x6574736567677573LL;
}

uint64_t sub_3EE28()
{
  return 0x6341656369766564LL;
}

void sub_3EE4C(char *a1)
{
}

unint64_t sub_3EE58@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = _s7CoreRCS10RCSMessageV11ContentTypeO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_3EE84@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RCSMessage.ContentType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_3EEAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_45F14();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_3EF08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_45F14();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

Swift::Int sub_3EF54()
{
  char v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  sub_3EFA0((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_3EF98(uint64_t a1)
{
}

void sub_3EFA0(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_3EFD8(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE800000000000000LL);
}

Swift::Int sub_3F0B8(uint64_t a1)
{
  char v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  sub_3EFA0((uint64_t)v4, v2);
  return Hasher._finalize()();
}

uint64_t sub_3F0F8()
{
  return RCSMessage.ContentType.description.getter(*v0);
}

void RCSMessage.Content.type.getter()
{
  uint64_t v1 = type metadata accessor for RCSMessage.Content(0LL);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_40384(v0, (uint64_t)v3);
  uint64_t v4 = (char *)sub_3F184 + 4 * byte_6049B[swift_getEnumCaseMultiPayload(v3, v1)];
  __asm { BR              X10 }

uint64_t sub_3F184()
{
  return 0LL;
}

uint64_t (*RCSMessage.Coordinates.latitude.modify())()
{
  return nullsub_16;
}

double RCSMessage.Coordinates.longitude.getter(double a1, double a2)
{
  return a2;
}

uint64_t (*RCSMessage.Coordinates.longitude.modify())()
{
  return nullsub_17;
}

uint64_t RCSHandle.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 24));
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*RCSMessage.Coordinates.description.modify())()
{
  return nullsub_18;
}

BOOL sub_3F2D4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_3F2F0()
{
  uint64_t v1 = 0x64757469676E6F6CLL;
  if (*v0 != 1) {
    uint64_t v1 = 0x7470697263736564LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x656475746974616CLL;
  }
}

uint64_t sub_3F358@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_4040C(a1, a2);
  *a3 = result;
  return result;
}

void sub_3F37C(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_3F388(uint64_t a1)
{
  unint64_t v2 = sub_403C8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_3F3B0(uint64_t a1)
{
  unint64_t v2 = sub_403C8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RCSMessage.Coordinates.encode(to:)(void *a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v11 = sub_5C28(&qword_77400);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  sub_CA38(a1, v15);
  unint64_t v17 = sub_403C8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for RCSMessage.Coordinates.CodingKeys,  &type metadata for RCSMessage.Coordinates.CodingKeys,  v17,  v15,  v16);
  char v22 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v22, v11, a4);
  if (!v5)
  {
    char v21 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v21, v11, a5);
    char v20 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a2, a3, &v20, v11);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

void *RCSMessage.Coordinates.init(from:)(void *a1)
{
  uint64_t result = sub_40584(a1);
  if (v1) {
    return (void *)v3;
  }
  return result;
}

void *sub_3F558@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_40584(a1);
  if (!v2)
  {
    *a2 = v6;
    a2[1] = v7;
    a2[2] = result;
    a2[3] = v5;
  }

  return result;
}

uint64_t sub_3F584(void *a1)
{
  return RCSMessage.Coordinates.encode(to:)( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(double *)v1,  *(double *)(v1 + 8));
}

uint64_t RCSMessage.Typing.isTyping.getter(char a1)
{
  return a1 & 1;
}

uint64_t RCSMessage.Typing.isTyping.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*RCSMessage.Typing.isTyping.modify())()
{
  return nullsub_19;
}

uint64_t static IMDChatRCSGroupIdentity.latestVersion.getter()
{
  return 1LL;
}

Swift::Int sub_3F5CC()
{
  return Hasher._finalize()();
}

void sub_3F60C()
{
}

Swift::Int sub_3F630(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_3F66C()
{
  return 0x676E697079547369LL;
}

uint64_t sub_3F684@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x676E697079547369LL && a2 == 0xE800000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xE800000000000000LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x676E697079547369LL, 0xE800000000000000LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3 = v8 & 1;
  return result;
}

void sub_3F718(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_3F724(uint64_t a1)
{
  unint64_t v2 = sub_4070C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_3F74C(uint64_t a1)
{
  unint64_t v2 = sub_4070C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RCSMessage.Typing.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_5C28(&qword_77410);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_CA38(a1, v8);
  unint64_t v10 = sub_4070C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for RCSMessage.Typing.CodingKeys,  &type metadata for RCSMessage.Typing.CodingKeys,  v10,  v8,  v9);
  KeyedEncodingContainer.encode(_:forKey:)(a2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t RCSMessage.Typing.init(from:)(void *a1)
{
  uint64_t v3 = sub_5C28(&qword_77420);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  unsigned __int8 v9 = sub_CA38(a1, v7);
  unint64_t v10 = sub_4070C();
  uint64_t v11 = dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for RCSMessage.Typing.CodingKeys,  &type metadata for RCSMessage.Typing.CodingKeys,  v10,  v7,  v8);
  if (!v1)
  {
    unsigned __int8 v9 = KeyedDecodingContainer.decode(_:forKey:)(v11, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  sub_12204(a1);
  return v9 & 1;
}

uint64_t sub_3F958@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v5 = sub_5C28(&qword_77420);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_CA38(a1, v9);
  unint64_t v11 = sub_4070C();
  uint64_t v12 = dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for RCSMessage.Typing.CodingKeys,  &type metadata for RCSMessage.Typing.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_12204(a1);
  }
  char v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = sub_12204(a1);
  *a2 = v13 & 1;
  return result;
}

uint64_t sub_3FA6C(void *a1)
{
  uint64_t v3 = sub_5C28(&qword_77410);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v1;
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_CA38(a1, v8);
  unint64_t v10 = sub_4070C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for RCSMessage.Typing.CodingKeys,  &type metadata for RCSMessage.Typing.CodingKeys,  v10,  v8,  v9);
  KeyedEncodingContainer.encode(_:forKey:)(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t RCSGroup.identity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_2AF74(v1, a1);
}

uint64_t RCSGroup.identity.setter(__int128 *a1)
{
  return sub_22168(a1, (uint64_t)v1);
}

uint64_t (*RCSGroup.identity.modify())()
{
  return nullsub_20;
}

uint64_t RCSGroup.participants.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 40));
}

uint64_t RCSGroup.participants.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 40));
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t (*RCSGroup.participants.modify())()
{
  return nullsub_21;
}

uint64_t RCSGroup.displayName.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain(*(void *)(v0 + 56));
  return v1;
}

uint64_t RCSGroup.displayName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 56));
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t (*RCSGroup.displayName.modify())()
{
  return nullsub_22;
}

uint64_t RCSGroup.icon.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21AAC(v1 + 64, a1, &qword_77428);
}

uint64_t RCSGroup.icon.setter(uint64_t a1)
{
  return sub_5CF4(a1, v1 + 64, &qword_77428);
}

uint64_t (*RCSGroup.icon.modify())()
{
  return nullsub_23;
}

uint64_t RCSHandle.scheme.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t (*RCSGroup.Icon.name.modify())()
{
  return nullsub_24;
}

uint64_t RCSGroup.Icon.data.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_F120(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t RCSGroup.Icon.data.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_F5F8(*(void *)(v2 + 16), *(void *)(v2 + 24));
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*RCSGroup.Icon.data.modify())()
{
  return nullsub_25;
}

uint64_t RCSGroup.Icon.type.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain(*(void *)(v0 + 40));
  return v1;
}

uint64_t RCSGroup.Icon.type.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 40));
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*RCSGroup.Icon.type.modify())()
{
  return nullsub_26;
}

uint64_t sub_3FDDC()
{
  return *(void *)&aName_0[8 * *v0];
}

uint64_t sub_3FDF4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_407D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_3FE18(uint64_t a1)
{
  unint64_t v2 = sub_40750();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_3FE40(uint64_t a1)
{
  unint64_t v2 = sub_40750();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RCSGroup.Icon.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_5C28(&qword_77430);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_CA38(a1, v9);
  unint64_t v11 = sub_40750();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for RCSGroup.Icon.CodingKeys,  &type metadata for RCSGroup.Icon.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  LOBYTE(v20) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v20, v5);
  if (!v2)
  {
    __int128 v20 = *((_OWORD *)v3 + 1);
    char v19 = 1;
    unint64_t v14 = sub_40794();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, &type metadata for Data, v14);
    uint64_t v15 = v3[4];
    uint64_t v16 = v3[5];
    LOBYTE(v20) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v20, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

double RCSGroup.Icon.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }

  return result;
}

uint64_t sub_3FFFC(void *a1)
{
  return RCSGroup.Icon.encode(to:)(a1);
}

uint64_t RCSGroup.shouldRouteToSenderChat.getter()
{
  unint64_t v1 = *(void *)(*(void *)(v0 + 40) + 16LL);
  sub_C978(v0, (uint64_t)v11);
  if (v1 > 1)
  {
    sub_C9B4(v11);
    return 0LL;
  }

  uint64_t v2 = (RCSServiceSession *)v11[7];
  swift_bridgeObjectRetain();
  sub_C9B4(v11);
  if (v2)
  {
    swift_bridgeObjectRelease(v2, v3, v4, v5, v6, v7, v8, v9);
    return 0LL;
  }

  return 1LL;
}

uint64_t sub_40084(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x4449656C646E6168LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v5 = 0xE800000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449656C646E6168LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x44496D6973LL && a2 == 0xE500000000000000LL)
  {
    swift_bridgeObjectRelease(0xE500000000000000LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x44496D6973LL, 0xE500000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_4016C(void *a1)
{
  uint64_t v3 = sub_5C28(&qword_77630);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_CA38(a1, v7);
  unint64_t v9 = sub_3E974();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for RCSMessage.SubscriptionInfo.CodingKeys,  &type metadata for RCSMessage.SubscriptionInfo.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    sub_12204(a1);
    swift_bridgeObjectRelease(0LL, v10, v11, v12, v13, v14, v15, v16);
  }

  else
  {
    char v20 = 0;
    uint64_t v8 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v20, v3);
    char v19 = 1;
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v19, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_12204(a1);
  }

  return v8;
}

uint64_t type metadata accessor for RCSMessage.Content(uint64_t a1)
{
  return sub_40308(a1, qword_77578, (uint64_t)&nominal type descriptor for RCSMessage.Content);
}

uint64_t sub_40308(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

unint64_t _s7CoreRCS10RCSMessageV11ContentTypeO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_71AE0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 9) {
    return 9LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_40384(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RCSMessage.Content(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_403C8()
{
  unint64_t result = qword_77408;
  if (!qword_77408)
  {
    unint64_t result = swift_getWitnessTable(&unk_60C74, &type metadata for RCSMessage.Coordinates.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_77408);
  }

  return result;
}

uint64_t sub_4040C(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x656475746974616CLL && a2 == 0xE800000000000000LL)
  {
    unint64_t v5 = 0xE800000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656475746974616CLL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x64757469676E6F6CLL && a2 == 0xE900000000000065LL)
  {
    unint64_t v7 = 0xE900000000000065LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64757469676E6F6CLL, 0xE900000000000065LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x7470697263736564LL && a2 == 0xEB000000006E6F69LL)
  {
    swift_bridgeObjectRelease(0xEB000000006E6F69LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7470697263736564LL, 0xEB000000006E6F69LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

void *sub_40584(void *a1)
{
  uint64_t v3 = sub_5C28(&qword_77628);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  unint64_t v9 = sub_CA38(a1, v7);
  unint64_t v10 = sub_403C8();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for RCSMessage.Coordinates.CodingKeys,  &type metadata for RCSMessage.Coordinates.CodingKeys,  v10,  v7,  v8);
  if (!v1)
  {
    char v15 = 0;
    KeyedDecodingContainer.decode(_:forKey:)(&v15, v3);
    char v14 = 1;
    KeyedDecodingContainer.decode(_:forKey:)(&v14, v3);
    char v13 = 2;
    unint64_t v9 = (void *)KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v13, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  sub_12204(a1);
  return v9;
}

unint64_t sub_4070C()
{
  unint64_t result = qword_77418;
  if (!qword_77418)
  {
    unint64_t result = swift_getWitnessTable(&unk_60C24, &type metadata for RCSMessage.Typing.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_77418);
  }

  return result;
}

unint64_t sub_40750()
{
  unint64_t result = qword_77438;
  if (!qword_77438)
  {
    unint64_t result = swift_getWitnessTable(&unk_60BD4, &type metadata for RCSGroup.Icon.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_77438);
  }

  return result;
}

unint64_t sub_40794()
{
  unint64_t result = qword_77440;
  if (!qword_77440)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_77440);
  }

  return result;
}

uint64_t sub_407D8(uint64_t a1, unint64_t a2)
{
  if (a1 == 1701667182 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 1635017060 && a2 == 0xE400000000000000LL)
  {
    unint64_t v7 = 0xE400000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1635017060LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 1701869940 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(1701869940LL, 0xE400000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

void sub_408FC(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_5C28(&qword_77618);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_CA38(a1, v9);
  unint64_t v11 = sub_40750();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for RCSGroup.Icon.CodingKeys,  &type metadata for RCSGroup.Icon.CodingKeys,  v11,  v9,  v10);
  if (v2)
  {
    sub_12204(a1);
  }

  else
  {
    LOBYTE(v48) = 0;
    uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v48, v5);
    char v14 = v13;
    uint64_t v47 = v12;
    char v50 = 1;
    unint64_t v15 = sub_45F58();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v48, &type metadata for Data, &v50, v5, &type metadata for Data, v15);
    uint64_t v16 = v48;
    LOBYTE(v48) = 2;
    unint64_t v45 = v49;
    uint64_t v46 = v16;
    sub_F120(v16, v49);
    uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)(&v48, v5);
    char v19 = v18;
    uint64_t v20 = v17;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRetain();
    unint64_t v22 = v45;
    uint64_t v21 = v46;
    sub_F120(v46, v45);
    swift_bridgeObjectRetain();
    sub_F5F8(v21, v22);
    swift_bridgeObjectRelease(v14, v23, v24, v25, v26, v27, v28, v29);
    sub_12204(a1);
    swift_bridgeObjectRelease(v14, v30, v31, v32, v33, v34, v35, v36);
    sub_F5F8(v21, v22);
    swift_bridgeObjectRelease(v19, v37, v38, v39, v40, v41, v42, v43);
    *a2 = v47;
    a2[1] = (uint64_t)v14;
    a2[2] = v21;
    a2[3] = v22;
    a2[4] = v20;
    a2[5] = (uint64_t)v19;
  }

unint64_t sub_40B78()
{
  unint64_t result = qword_77448;
  if (!qword_77448)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RCSMessage.ContentType,  &type metadata for RCSMessage.ContentType);
    atomic_store(result, (unint64_t *)&qword_77448);
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for RCSMessage(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v13 + ((v5 + 16LL) & ~(unint64_t)v5);
    swift_retain(v13);
  }

  else
  {
    char v7 = *((_BYTE *)a2 + 122);
    if ((v7 & 1) != 0)
    {
      uint64_t v8 = a2[1];
      *(void *)uint64_t v4 = *a2;
      *(void *)(v4 + 8) = v8;
      uint64_t v9 = a2[3];
      *(void *)(v4 + swift_weakDestroy(v0 + 16) = a2[2];
      *(void *)(v4 + 24) = v9;
      uint64_t v10 = a2[5];
      *(void *)(v4 + 32) = a2[4];
      *(void *)(v4 + 40) = v10;
      *(void *)(v4 + 48) = a2[6];
      *(_BYTE *)(v4 + 56) = *((_BYTE *)a2 + 56);
      char v11 = *((_BYTE *)a2 + 121);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((v11 & 1) != 0)
      {
        __int128 v12 = *(_OWORD *)(a2 + 11);
        *(_OWORD *)(v4 + 88) = v12;
        (**(void (***)(uint64_t, uint64_t))(v12 - 8))(v4 + 64, (uint64_t)(a2 + 8));
      }

      else
      {
        uint64_t v16 = a2[9];
        *(void *)(v4 + 64) = a2[8];
        *(void *)(v4 + 72) = v16;
        uint64_t v17 = a2[11];
        *(void *)(v4 + 80) = a2[10];
        *(void *)(v4 + 88) = v17;
        uint64_t v18 = a2[13];
        *(void *)(v4 + 96) = a2[12];
        *(void *)(v4 + 104) = v18;
        *(void *)(v4 + 112) = a2[14];
        *(_BYTE *)(v4 + 120) = *((_BYTE *)a2 + 120);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      *(_BYTE *)(v4 + 121) = v11;
    }

    else
    {
      char v14 = *((_BYTE *)a2 + 57);
      if ((v14 & 1) != 0)
      {
        __int128 v15 = *(_OWORD *)(a2 + 3);
        *(_OWORD *)(a1 + 24) = v15;
        (**(void (***)(uint64_t, uint64_t *))(v15 - 8))(a1, a2);
      }

      else
      {
        uint64_t v19 = a2[1];
        *(void *)uint64_t v4 = *a2;
        *(void *)(v4 + 8) = v19;
        uint64_t v20 = a2[3];
        *(void *)(v4 + swift_weakDestroy(v0 + 16) = a2[2];
        *(void *)(v4 + 24) = v20;
        uint64_t v21 = a2[5];
        *(void *)(v4 + 32) = a2[4];
        *(void *)(v4 + 40) = v21;
        *(void *)(v4 + 48) = a2[6];
        *(_BYTE *)(v4 + 56) = *((_BYTE *)a2 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      *(_BYTE *)(v4 + 57) = v14;
    }

    *(_BYTE *)(v4 + 122) = v7;
    uint64_t v22 = a2[17];
    *(void *)(v4 + 128) = a2[16];
    *(void *)(v4 + 136) = v22;
    uint64_t v23 = a2[19];
    *(void *)(v4 + 144) = a2[18];
    *(void *)(v4 + 152) = v23;
    uint64_t v24 = a3[7];
    id v25 = (void *)(v4 + v24);
    id v26 = (uint64_t *)((char *)a2 + v24);
    uint64_t v27 = type metadata accessor for RCSMessage.Content(0LL);
    uint64_t v28 = *(void *)(v27 - 8);
    unsigned __int8 v29 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v28 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v29(v26, 1LL, v27))
    {
      uint64_t v30 = sub_5C28(&qword_76228);
      memcpy(v25, v26, *(void *)(*(void *)(v30 - 8) + 64LL));
    }

    else
    {
      switch(swift_getEnumCaseMultiPayload(v26, v27))
      {
        case 0u:
          uint64_t v31 = v26[1];
          *id v25 = *v26;
          v25[1] = v31;
          uint64_t v32 = v26[2];
          _OWORD v25[2] = v32;
          swift_bridgeObjectRetain();
          swift_retain(v32);
          id v33 = v25;
          uint64_t v34 = v27;
          uint64_t v35 = 0LL;
          goto LABEL_29;
        case 1u:
          uint64_t v36 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
          uint64_t v37 = *(void *)(v36 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v37 + 48))(v26, 1LL, v36))
          {
            uint64_t v38 = sub_5C28(&qword_76498);
            memcpy(v25, v26, *(void *)(*(void *)(v38 - 8) + 64LL));
          }

          else
          {
            *(_OWORD *)id v25 = *(_OWORD *)v26;
            uint64_t v93 = v37;
            _OWORD v25[2] = v26[2];
            uint64_t v50 = *(int *)(v36 + 24);
            uint64_t v89 = (char *)v26 + v50;
            uint64_t v91 = (char *)v25 + v50;
            uint64_t v51 = type metadata accessor for URL(0LL);
            uint64_t v87 = *(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 16LL);
            swift_bridgeObjectRetain();
            v87(v91, v89, v51);
            uint64_t v52 = *(int *)(v36 + 28);
            id v53 = (char *)v25 + v52;
            id v54 = (char *)v26 + v52;
            uint64_t v55 = type metadata accessor for Date(0LL);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 16LL))(v53, v54, v55);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v93 + 56))(v25, 0LL, 1LL, v36);
          }

          uint64_t v56 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
          unsigned __int8 v57 = (char *)v25 + v56;
          NSString v58 = (char *)v26 + v56;
          *(_OWORD *)unsigned __int8 v57 = *(_OWORD *)((char *)v26 + v56);
          uint64_t v60 = *(void *)((char *)v26 + v56 + 16);
          uint64_t v59 = *(void *)((char *)v26 + v56 + 24);
          *((void *)v57 + 2) = v60;
          *((void *)v57 + 3) = v59;
          *((void *)v57 + 4) = *((void *)v58 + 4);
          os_log_type_t v94 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
          uint64_t v61 = v94[7];
          uint64_t v86 = &v58[v61];
          uint64_t v88 = &v57[v61];
          uint64_t v62 = type metadata accessor for URL(0LL);
          unsigned __int8 v85 = *(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 16LL);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v85(v88, v86, v62);
          uint64_t v63 = v94[8];
          uint64_t v90 = &v58[v63];
          uint64_t v92 = &v57[v63];
          uint64_t v64 = type metadata accessor for Date(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 16LL))(v92, v90, v64);
          v57[v94[9]] = v58[v94[9]];
          uint64_t v65 = v94[10];
          uint64_t v66 = &v57[v65];
          uint64_t v67 = &v58[v65];
          v66[8] = v67[8];
          *(void *)uint64_t v66 = *(void *)v67;
          uint64_t v68 = *(int *)(sub_5C28(&qword_764A0) + 48);
          uint64_t v69 = *(void *)((char *)v26 + v68);
          *(void *)((char *)v25 + v68) = v69;
          swift_retain(v69);
          id v33 = v25;
          uint64_t v34 = v27;
          uint64_t v35 = 1LL;
          goto LABEL_29;
        case 2u:
          *(_OWORD *)id v25 = *(_OWORD *)v26;
          uint64_t v39 = v26[3];
          _OWORD v25[2] = v26[2];
          void v25[3] = v39;
          uint64_t v40 = v26[4];
          _OWORD v25[4] = v40;
          swift_bridgeObjectRetain();
          swift_retain(v40);
          id v33 = v25;
          uint64_t v34 = v27;
          uint64_t v35 = 2LL;
          goto LABEL_29;
        case 3u:
          __int128 v41 = *(_OWORD *)(v26 + 3);
          *(_OWORD *)(v25 + 3) = v41;
          (**(void (***)(void *, void *))(v41 - 8))(v25, v26);
          uint64_t v42 = v26[6];
          v25[5] = v26[5];
          v25[6] = v42;
          v25[7] = v26[7];
          uint64_t v43 = v26[9];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v43)
          {
            v25[8] = v26[8];
            v25[9] = v43;
            uint64_t v44 = v26[10];
            unint64_t v45 = v26[11];
            swift_bridgeObjectRetain();
            sub_F120(v44, v45);
            v25[10] = v44;
            v25[11] = v45;
            uint64_t v46 = v26[13];
            v25[12] = v26[12];
            v25[13] = v46;
            swift_bridgeObjectRetain();
          }

          else
          {
            __int128 v70 = *((_OWORD *)v26 + 5);
            *((_OWORD *)v25 + 4) = *((_OWORD *)v26 + 4);
            *((_OWORD *)v25 + 5) = v70;
            *((_OWORD *)v25 + 6) = *((_OWORD *)v26 + 6);
          }

          id v33 = v25;
          uint64_t v34 = v27;
          uint64_t v35 = 3LL;
          goto LABEL_29;
        case 5u:
          uint64_t v47 = *v26;
          *id v25 = *v26;
          swift_retain(v47);
          id v33 = v25;
          uint64_t v34 = v27;
          uint64_t v35 = 5LL;
          goto LABEL_29;
        case 6u:
          uint64_t v48 = *v26;
          *id v25 = *v26;
          swift_retain(v48);
          id v33 = v25;
          uint64_t v34 = v27;
          uint64_t v35 = 6LL;
          goto LABEL_29;
        case 7u:
          uint64_t v49 = *v26;
          *id v25 = *v26;
          swift_retain(v49);
          id v33 = v25;
          uint64_t v34 = v27;
          uint64_t v35 = 7LL;
LABEL_29:
          swift_storeEnumTagMultiPayload(v33, v34, v35);
          break;
        default:
          memcpy(v25, v26, *(void *)(v28 + 64));
          break;
      }

      (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0LL, 1LL, v27);
    }

    uint64_t v71 = a3[8];
    uint64_t v72 = v4 + v71;
    uint64_t v73 = (uint64_t)a2 + v71;
    uint64_t v74 = *(uint64_t *)((char *)a2 + v71 + 24);
    if (v74)
    {
      uint64_t v75 = *(void *)(v73 + 32);
      *(void *)(v72 + 24) = v74;
      *(void *)(v72 + 32) = v75;
      (**(void (***)(void))(v74 - 8))();
    }

    else
    {
      __int128 v76 = *(_OWORD *)(v73 + 16);
      *(_OWORD *)uint64_t v72 = *(_OWORD *)v73;
      *(_OWORD *)(v72 + swift_weakDestroy(v0 + 16) = v76;
      *(void *)(v72 + 32) = *(void *)(v73 + 32);
    }

    uint64_t v77 = a3[10];
    *(void *)(v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(_BYTE *)(v4 + v77) = *((_BYTE *)a2 + v77);
    uint64_t v78 = a3[12];
    *(_BYTE *)(v4 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *(void *)(v4 + v78) = *(uint64_t *)((char *)a2 + v78);
    uint64_t v79 = a3[13];
    id v80 = (void *)(v4 + v79);
    id v81 = (uint64_t *)((char *)a2 + v79);
    uint64_t v82 = v81[1];
    *id v80 = *v81;
    v80[1] = v82;
    uint64_t v83 = v81[3];
    v80[2] = v81[2];
    v80[3] = v83;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  return v4;
}

void destroy for RCSMessage( uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, unsigned __int8 a8)
{
  uint64_t v9 = a1;
  if ((*(_BYTE *)(a1 + 122) & 1) != 0)
  {
    swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 8), (SEL)a2, a3, a4, a5, a6, a7, a8);
    swift_bridgeObjectRelease(*(RCSServiceSession **)(v9 + 24), v10, v11, v12, v13, v14, v15, v16);
    swift_bridgeObjectRelease(*(RCSServiceSession **)(v9 + 32), v17, v18, v19, v20, v21, v22, v23);
    swift_bridgeObjectRelease(*(RCSServiceSession **)(v9 + 48), v24, v25, v26, v27, v28, v29, v30);
    if ((*(_BYTE *)(v9 + 121) & 1) != 0)
    {
      a1 = v9 + 64;
LABEL_5:
      sub_12204((void *)a1);
      goto LABEL_9;
    }

    swift_bridgeObjectRelease(*(RCSServiceSession **)(v9 + 72), v31, v32, v33, v34, v35, v36, v37);
    swift_bridgeObjectRelease(*(RCSServiceSession **)(v9 + 88), v45, v46, v47, v48, v49, v50, v51);
    swift_bridgeObjectRelease(*(RCSServiceSession **)(v9 + 96), v52, v53, v54, v55, v56, v57, v58);
    uint64_t v66 = *(RCSServiceSession **)(v9 + 112);
  }

  else
  {
    if ((*(_BYTE *)(a1 + 57) & 1) != 0) {
      goto LABEL_5;
    }
    swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 8), (SEL)a2, a3, a4, a5, a6, a7, a8);
    swift_bridgeObjectRelease(*(RCSServiceSession **)(v9 + 24), v67, v68, v69, v70, v71, v72, v73);
    swift_bridgeObjectRelease(*(RCSServiceSession **)(v9 + 32), v74, v75, v76, v77, v78, v79, v80);
    uint64_t v66 = *(RCSServiceSession **)(v9 + 48);
  }

  swift_bridgeObjectRelease(v66, v59, v60, v61, v62, v63, v64, v65);
LABEL_9:
  swift_bridgeObjectRelease(*(RCSServiceSession **)(v9 + 136), v38, v39, v40, v41, v42, v43, v44);
  swift_bridgeObjectRelease(*(RCSServiceSession **)(v9 + 152), v81, v82, v83, v84, v85, v86, v87);
  uint64_t v88 = (uint64_t *)(v9 + *(int *)(a2 + 28));
  uint64_t v89 = type metadata accessor for RCSMessage.Content(0LL);
  if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v89 - 8) + 48LL))(v88, 1LL, v89))
  {
    switch(swift_getEnumCaseMultiPayload(v88, v89))
    {
      case 0u:
        swift_bridgeObjectRelease((RCSServiceSession *)v88[1], v90, v91, v92, v93, v94, v95, v96);
        uint64_t v97 = v88[2];
        goto LABEL_17;
      case 1u:
        uint64_t v98 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
        if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v98 - 8) + 48LL))(v88, 1LL, v98))
        {
          swift_bridgeObjectRelease((RCSServiceSession *)v88[2], v99, v100, v101, v102, v103, v104, v105);
          uint64_t v106 = (uint64_t)v88 + *(int *)(v98 + 24);
          uint64_t v107 = type metadata accessor for URL(0LL);
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v107 - 8) + 8LL))(v106, v107);
          uint64_t v108 = (uint64_t)v88 + *(int *)(v98 + 28);
          uint64_t v109 = type metadata accessor for Date(0LL);
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v109 - 8) + 8LL))(v108, v109);
        }

        uint64_t v110 = (uint64_t)v88 + *(int *)(type metadata accessor for RCSFile(0LL) + 20);
        swift_bridgeObjectRelease(*(RCSServiceSession **)(v110 + 16), v111, v112, v113, v114, v115, v116, v117);
        swift_bridgeObjectRelease(*(RCSServiceSession **)(v110 + 32), v118, v119, v120, v121, v122, v123, v124);
        uint64_t v125 = type metadata accessor for RCSFile.DispositionInformation(0LL);
        uint64_t v126 = v110 + *(int *)(v125 + 28);
        uint64_t v127 = type metadata accessor for URL(0LL);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v127 - 8) + 8LL))(v126, v127);
        uint64_t v128 = v110 + *(int *)(v125 + 32);
        uint64_t v129 = type metadata accessor for Date(0LL);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v129 - 8) + 8LL))(v128, v129);
        uint64_t v97 = *(uint64_t *)((char *)v88 + *(int *)(sub_5C28(&qword_764A0) + 48));
        goto LABEL_17;
      case 2u:
        swift_bridgeObjectRelease((RCSServiceSession *)v88[3], v90, v91, v92, v93, v94, v95, v96);
        uint64_t v97 = v88[4];
        goto LABEL_17;
      case 3u:
        sub_12204(v88);
        swift_bridgeObjectRelease((RCSServiceSession *)v88[5], v153, v154, v155, v156, v157, v158, v159);
        swift_bridgeObjectRelease((RCSServiceSession *)v88[7], v160, v161, v162, v163, v164, v165, v166);
        id v167 = (RCSServiceSession *)v88[9];
        if (v167)
        {
          swift_bridgeObjectRelease(v167, v90, v91, v92, v93, v94, v95, v96);
          sub_F5F8(v88[10], v88[11]);
          swift_bridgeObjectRelease((RCSServiceSession *)v88[13], v168, v169, v170, v171, v172, v173, v174);
        }

        break;
      case 5u:
      case 6u:
      case 7u:
        uint64_t v97 = *v88;
LABEL_17:
        swift_release(v97);
        break;
      default:
        break;
    }
  }

  id v130 = (void *)(v9 + *(int *)(a2 + 32));
  if (v130[3]) {
    sub_12204(v130);
  }
  swift_bridgeObjectRelease(*(RCSServiceSession **)(v9 + *(int *)(a2 + 36)), v90, v91, v92, v93, v94, v95, v96);
  swift_bridgeObjectRelease(*(RCSServiceSession **)(v9 + *(int *)(a2 + 48)), v131, v132, v133, v134, v135, v136, v137);
  uint64_t v138 = v9 + *(int *)(a2 + 52);
  swift_bridgeObjectRelease(*(RCSServiceSession **)(v138 + 8), v139, v140, v141, v142, v143, v144, v145);
  swift_bridgeObjectRelease(*(RCSServiceSession **)(v138 + 24), v146, v147, v148, v149, v150, v151, v152);
}

uint64_t initializeWithCopy for RCSMessage(uint64_t a1, uint64_t a2, int *a3)
{
  char v6 = *(_BYTE *)(a2 + 122);
  if ((v6 & 1) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = *(void *)(a2 + 24);
    *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v9;
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    char v10 = *(_BYTE *)(a2 + 121);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((v10 & 1) != 0)
    {
      __int128 v11 = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 88) = v11;
      (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 64, a2 + 64);
    }

    else
    {
      uint64_t v14 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v14;
      uint64_t v15 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v15;
      uint64_t v16 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = v16;
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    *(_BYTE *)(a1 + 121) = v10;
  }

  else
  {
    char v12 = *(_BYTE *)(a2 + 57);
    if ((v12 & 1) != 0)
    {
      __int128 v13 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v13;
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1, a2);
    }

    else
    {
      uint64_t v17 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v17;
      uint64_t v18 = *(void *)(a2 + 24);
      *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v18;
      uint64_t v19 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v19;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    *(_BYTE *)(a1 + 57) = v12;
  }

  *(_BYTE *)(a1 + 122) = v6;
  uint64_t v20 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v20;
  uint64_t v21 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v21;
  uint64_t v22 = a3[7];
  unsigned __int8 v23 = (void *)(a1 + v22);
  SEL v24 = (void *)(a2 + v22);
  uint64_t v25 = type metadata accessor for RCSMessage.Content(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  id v27 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v26 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v27(v24, 1LL, v25))
  {
    uint64_t v28 = sub_5C28(&qword_76228);
    memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    switch(swift_getEnumCaseMultiPayload(v24, v25))
    {
      case 0u:
        uint64_t v29 = v24[1];
        *unsigned __int8 v23 = *v24;
        v23[1] = v29;
        uint64_t v30 = v24[2];
        v23[2] = v30;
        swift_bridgeObjectRetain();
        swift_retain(v30);
        uint64_t v31 = v23;
        uint64_t v32 = v25;
        uint64_t v33 = 0LL;
        goto LABEL_27;
      case 1u:
        uint64_t v34 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
        uint64_t v35 = *(void *)(v34 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v35 + 48))(v24, 1LL, v34))
        {
          uint64_t v36 = sub_5C28(&qword_76498);
          memcpy(v23, v24, *(void *)(*(void *)(v36 - 8) + 64LL));
        }

        else
        {
          *(_OWORD *)unsigned __int8 v23 = *(_OWORD *)v24;
          uint64_t v91 = v35;
          v23[2] = v24[2];
          uint64_t v48 = *(int *)(v34 + 24);
          unsigned __int8 v87 = (char *)v24 + v48;
          uint64_t v89 = (char *)v23 + v48;
          uint64_t v49 = type metadata accessor for URL(0LL);
          id v85 = *(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16LL);
          swift_bridgeObjectRetain();
          v85(v89, v87, v49);
          uint64_t v50 = *(int *)(v34 + 28);
          unsigned __int8 v51 = (char *)v23 + v50;
          SEL v52 = (char *)v24 + v50;
          uint64_t v53 = type metadata accessor for Date(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16LL))(v51, v52, v53);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v91 + 56))(v23, 0LL, 1LL, v34);
        }

        uint64_t v54 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
        id v55 = (char *)v23 + v54;
        id v56 = (char *)v24 + v54;
        *(_OWORD *)id v55 = *(_OWORD *)((char *)v24 + v54);
        uint64_t v58 = *(void *)((char *)v24 + v54 + 16);
        uint64_t v57 = *(void *)((char *)v24 + v54 + 24);
        *((void *)v55 + 2) = v58;
        *((void *)v55 + 3) = v57;
        *((void *)v55 + 4) = *((void *)v56 + 4);
        uint64_t v92 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
        uint64_t v59 = v92[7];
        id v84 = &v56[v59];
        id v86 = &v55[v59];
        uint64_t v60 = type metadata accessor for URL(0LL);
        id v83 = *(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 16LL);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v83(v86, v84, v60);
        uint64_t v61 = v92[8];
        uint64_t v88 = &v56[v61];
        uint64_t v90 = &v55[v61];
        uint64_t v62 = type metadata accessor for Date(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 16LL))(v90, v88, v62);
        v55[v92[9]] = v56[v92[9]];
        uint64_t v63 = v92[10];
        uint64_t v64 = &v55[v63];
        unsigned __int8 v65 = &v56[v63];
        v64[8] = v65[8];
        *(void *)uint64_t v64 = *(void *)v65;
        uint64_t v66 = *(int *)(sub_5C28(&qword_764A0) + 48);
        uint64_t v67 = *(void *)((char *)v24 + v66);
        *(void *)((char *)v23 + v66) = v67;
        swift_retain(v67);
        uint64_t v31 = v23;
        uint64_t v32 = v25;
        uint64_t v33 = 1LL;
        goto LABEL_27;
      case 2u:
        *(_OWORD *)unsigned __int8 v23 = *(_OWORD *)v24;
        uint64_t v37 = v24[3];
        v23[2] = v24[2];
        v23[3] = v37;
        uint64_t v38 = v24[4];
        v23[4] = v38;
        swift_bridgeObjectRetain();
        swift_retain(v38);
        uint64_t v31 = v23;
        uint64_t v32 = v25;
        uint64_t v33 = 2LL;
        goto LABEL_27;
      case 3u:
        __int128 v39 = *(_OWORD *)(v24 + 3);
        *(_OWORD *)(v23 + 3) = v39;
        (**(void (***)(void *, void *))(v39 - 8))(v23, v24);
        uint64_t v40 = v24[6];
        v23[5] = v24[5];
        v23[6] = v40;
        _BYTE v23[7] = v24[7];
        uint64_t v41 = v24[9];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v41)
        {
          v23[8] = v24[8];
          v23[9] = v41;
          uint64_t v42 = v24[10];
          unint64_t v43 = v24[11];
          swift_bridgeObjectRetain();
          sub_F120(v42, v43);
          v23[10] = v42;
          v23[11] = v43;
          uint64_t v44 = v24[13];
          v23[12] = v24[12];
          v23[13] = v44;
          swift_bridgeObjectRetain();
        }

        else
        {
          __int128 v68 = *((_OWORD *)v24 + 5);
          *((_OWORD *)v23 + 4) = *((_OWORD *)v24 + 4);
          *((_OWORD *)v23 + 5) = v68;
          *((_OWORD *)v23 + 6) = *((_OWORD *)v24 + 6);
        }

        uint64_t v31 = v23;
        uint64_t v32 = v25;
        uint64_t v33 = 3LL;
        goto LABEL_27;
      case 5u:
        uint64_t v45 = *v24;
        *unsigned __int8 v23 = *v24;
        swift_retain(v45);
        uint64_t v31 = v23;
        uint64_t v32 = v25;
        uint64_t v33 = 5LL;
        goto LABEL_27;
      case 6u:
        uint64_t v46 = *v24;
        *unsigned __int8 v23 = *v24;
        swift_retain(v46);
        uint64_t v31 = v23;
        uint64_t v32 = v25;
        uint64_t v33 = 6LL;
        goto LABEL_27;
      case 7u:
        uint64_t v47 = *v24;
        *unsigned __int8 v23 = *v24;
        swift_retain(v47);
        uint64_t v31 = v23;
        uint64_t v32 = v25;
        uint64_t v33 = 7LL;
LABEL_27:
        swift_storeEnumTagMultiPayload(v31, v32, v33);
        break;
      default:
        memcpy(v23, v24, *(void *)(v26 + 64));
        break;
    }

    (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0LL, 1LL, v25);
  }

  uint64_t v69 = a3[8];
  uint64_t v70 = a1 + v69;
  uint64_t v71 = a2 + v69;
  uint64_t v72 = *(void *)(a2 + v69 + 24);
  if (v72)
  {
    uint64_t v73 = *(void *)(v71 + 32);
    *(void *)(v70 + 24) = v72;
    *(void *)(v70 + 32) = v73;
    (**(void (***)(void))(v72 - 8))();
  }

  else
  {
    __int128 v74 = *(_OWORD *)(v71 + 16);
    *(_OWORD *)uint64_t v70 = *(_OWORD *)v71;
    *(_OWORD *)(v70 + swift_weakDestroy(v0 + 16) = v74;
    *(void *)(v70 + 32) = *(void *)(v71 + 32);
  }

  uint64_t v75 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v75) = *(_BYTE *)(a2 + v75);
  uint64_t v76 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(void *)(a1 + v76) = *(void *)(a2 + v76);
  uint64_t v77 = a3[13];
  id v78 = (void *)(a1 + v77);
  id v79 = (void *)(a2 + v77);
  uint64_t v80 = v79[1];
  void *v78 = *v79;
  v78[1] = v80;
  uint64_t v81 = v79[3];
  v78[2] = v79[2];
  v78[3] = v81;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RCSMessage(uint64_t a1, uint64_t a2, int *a3)
{
  if (a1 != a2)
  {
    sub_CB8C(a1);
    char v6 = *(_BYTE *)(a2 + 122);
    if ((v6 & 1) != 0)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      char v7 = *(_BYTE *)(a2 + 121);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((v7 & 1) != 0)
      {
        uint64_t v8 = *(void *)(a2 + 88);
        *(void *)(a1 + 88) = v8;
        *(void *)(a1 + 96) = *(void *)(a2 + 96);
        (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 64, a2 + 64);
      }

      else
      {
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        *(void *)(a1 + 80) = *(void *)(a2 + 80);
        *(void *)(a1 + 88) = *(void *)(a2 + 88);
        *(void *)(a1 + 96) = *(void *)(a2 + 96);
        *(void *)(a1 + 104) = *(void *)(a2 + 104);
        *(void *)(a1 + 112) = *(void *)(a2 + 112);
        *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      *(_BYTE *)(a1 + 121) = v7;
    }

    else
    {
      char v9 = *(_BYTE *)(a2 + 57);
      if ((v9 & 1) != 0)
      {
        uint64_t v10 = *(void *)(a2 + 24);
        *(void *)(a1 + 24) = v10;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1, a2);
      }

      else
      {
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      *(_BYTE *)(a1 + 57) = v9;
    }

    *(_BYTE *)(a1 + 122) = v6;
  }

  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  __int128 v11 = *(RCSServiceSession **)(a1 + 136);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v11, v12, v13, v14, v15, v16, v17, v18);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  uint64_t v19 = *(RCSServiceSession **)(a1 + 152);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v19, v20, v21, v22, v23, v24, v25, v26);
  uint64_t v27 = a3[7];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (void *)(a2 + v27);
  uint64_t v30 = type metadata accessor for RCSMessage.Content(0LL);
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v31 + 48);
  int v33 = v32(v28, 1LL, v30);
  int v34 = v32(v29, 1LL, v30);
  if (v33)
  {
    if (!v34)
    {
      switch(swift_getEnumCaseMultiPayload(v29, v30))
      {
        case 0u:
          *uint64_t v28 = *v29;
          v28[1] = v29[1];
          uint64_t v35 = v29[2];
          _OWORD v28[2] = v35;
          swift_bridgeObjectRetain();
          swift_retain(v35);
          uint64_t v36 = v28;
          uint64_t v37 = v30;
          uint64_t v38 = 0LL;
          goto LABEL_45;
        case 1u:
          uint64_t v41 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
          uint64_t v42 = *(void *)(v41 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v42 + 48))(v29, 1LL, v41))
          {
            uint64_t v43 = sub_5C28(&qword_76498);
            memcpy(v28, v29, *(void *)(*(void *)(v43 - 8) + 64LL));
          }

          else
          {
            *uint64_t v28 = *v29;
            v28[1] = v29[1];
            _OWORD v28[2] = v29[2];
            uint64_t v63 = *(int *)(v41 + 24);
            id v158 = (char *)v29 + v63;
            id v162 = (char *)v28 + v63;
            uint64_t v165 = v42;
            uint64_t v64 = type metadata accessor for URL(0LL);
            id v155 = *(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 16LL);
            swift_bridgeObjectRetain();
            v155(v162, v158, v64);
            uint64_t v65 = *(int *)(v41 + 28);
            uint64_t v66 = (char *)v28 + v65;
            uint64_t v67 = (char *)v29 + v65;
            uint64_t v68 = type metadata accessor for Date(0LL);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 16LL))(v66, v67, v68);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v165 + 56))(v28, 0LL, 1LL, v41);
          }

          uint64_t v69 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
          uint64_t v70 = (void *)((char *)v28 + v69);
          uint64_t v71 = (char *)v29 + v69;
          void *v70 = *(void *)((char *)v29 + v69);
          v70[1] = *(void *)((char *)v29 + v69 + 8);
          v70[2] = *(void *)((char *)v29 + v69 + 16);
          v70[3] = *(void *)((char *)v29 + v69 + 24);
          v70[4] = *(void *)((char *)v29 + v69 + 32);
          unsigned __int8 v166 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
          uint64_t v72 = v166[7];
          SEL v153 = &v71[v72];
          id v156 = (char *)v70 + v72;
          uint64_t v73 = type metadata accessor for URL(0LL);
          unsigned __int8 v152 = *(void (**)(char *, char *, uint64_t))(*(void *)(v73 - 8) + 16LL);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v152(v156, v153, v73);
          uint64_t v74 = v166[8];
          unsigned __int8 v159 = &v71[v74];
          id v163 = (char *)v70 + v74;
          uint64_t v75 = type metadata accessor for Date(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v75 - 8) + 16LL))(v163, v159, v75);
          *((_BYTE *)v70 + v166[9]) = v71[v166[9]];
          uint64_t v76 = v166[10];
          uint64_t v77 = (char *)v70 + v76;
          id v78 = &v71[v76];
          char v79 = v78[8];
          *(void *)uint64_t v77 = *(void *)v78;
          v77[8] = v79;
          uint64_t v80 = *(int *)(sub_5C28(&qword_764A0) + 48);
          uint64_t v81 = *(void *)((char *)v29 + v80);
          *(void *)((char *)v28 + v80) = v81;
          swift_retain(v81);
          uint64_t v36 = v28;
          uint64_t v37 = v30;
          uint64_t v38 = 1LL;
          goto LABEL_45;
        case 2u:
          *uint64_t v28 = *v29;
          v28[1] = v29[1];
          _OWORD v28[2] = v29[2];
          v28[3] = v29[3];
          uint64_t v44 = v29[4];
          v28[4] = v44;
          swift_bridgeObjectRetain();
          swift_retain(v44);
          uint64_t v36 = v28;
          uint64_t v37 = v30;
          uint64_t v38 = 2LL;
          goto LABEL_45;
        case 3u:
          uint64_t v45 = v29[3];
          v28[3] = v45;
          v28[4] = v29[4];
          (**(void (***)(void *, void *))(v45 - 8))(v28, v29);
          v28[5] = v29[5];
          v28[6] = v29[6];
          v28[7] = v29[7];
          uint64_t v46 = v29[9];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v46)
          {
            v28[8] = v29[8];
            void v28[9] = v29[9];
            uint64_t v47 = v29[10];
            unint64_t v48 = v29[11];
            swift_bridgeObjectRetain();
            sub_F120(v47, v48);
            v28[10] = v47;
            v28[11] = v48;
            v28[12] = v29[12];
            v28[13] = v29[13];
            swift_bridgeObjectRetain();
          }

          else
          {
            __int128 v82 = *((_OWORD *)v29 + 4);
            __int128 v83 = *((_OWORD *)v29 + 6);
            *((_OWORD *)v28 + 5) = *((_OWORD *)v29 + 5);
            *((_OWORD *)v28 + 6) = v83;
            *((_OWORD *)v28 + 4) = v82;
          }

          uint64_t v36 = v28;
          uint64_t v37 = v30;
          uint64_t v38 = 3LL;
          goto LABEL_45;
        case 5u:
          uint64_t v49 = *v29;
          *uint64_t v28 = *v29;
          swift_retain(v49);
          uint64_t v36 = v28;
          uint64_t v37 = v30;
          uint64_t v38 = 5LL;
          goto LABEL_45;
        case 6u:
          uint64_t v50 = *v29;
          *uint64_t v28 = *v29;
          swift_retain(v50);
          uint64_t v36 = v28;
          uint64_t v37 = v30;
          uint64_t v38 = 6LL;
          goto LABEL_45;
        case 7u:
          uint64_t v51 = *v29;
          *uint64_t v28 = *v29;
          swift_retain(v51);
          uint64_t v36 = v28;
          uint64_t v37 = v30;
          uint64_t v38 = 7LL;
LABEL_45:
          swift_storeEnumTagMultiPayload(v36, v37, v38);
          break;
        default:
          memcpy(v28, v29, *(void *)(v31 + 64));
          break;
      }

      (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0LL, 1LL, v30);
      goto LABEL_47;
    }

    goto LABEL_18;
  }

  if (v34)
  {
    sub_11324((uint64_t)v28, type metadata accessor for RCSMessage.Content);
LABEL_18:
    size_t v39 = *(void *)(*(void *)(sub_5C28(&qword_76228) - 8) + 64LL);
LABEL_19:
    memcpy(v28, v29, v39);
    goto LABEL_47;
  }

  if (a1 != a2)
  {
    sub_11324((uint64_t)v28, type metadata accessor for RCSMessage.Content);
    switch(swift_getEnumCaseMultiPayload(v29, v30))
    {
      case 0u:
        *uint64_t v28 = *v29;
        v28[1] = v29[1];
        uint64_t v40 = v29[2];
        _OWORD v28[2] = v40;
        swift_bridgeObjectRetain();
        swift_retain(v40);
        swift_storeEnumTagMultiPayload(v28, v30, 0LL);
        break;
      case 1u:
        uint64_t v52 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
        uint64_t v53 = *(void *)(v52 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v53 + 48))(v29, 1LL, v52))
        {
          uint64_t v54 = sub_5C28(&qword_76498);
          memcpy(v28, v29, *(void *)(*(void *)(v54 - 8) + 64LL));
        }

        else
        {
          *uint64_t v28 = *v29;
          v28[1] = v29[1];
          _OWORD v28[2] = v29[2];
          uint64_t v129 = *(int *)(v52 + 24);
          id v164 = (char *)v29 + v129;
          id v167 = (char *)v28 + v129;
          uint64_t v130 = type metadata accessor for URL(0LL);
          SEL v160 = *(void (**)(char *, char *, uint64_t))(*(void *)(v130 - 8) + 16LL);
          swift_bridgeObjectRetain();
          v160(v167, v164, v130);
          uint64_t v131 = *(int *)(v52 + 28);
          id v132 = (char *)v28 + v131;
          id v133 = (char *)v29 + v131;
          uint64_t v134 = type metadata accessor for Date(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v134 - 8) + 16LL))(v132, v133, v134);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v53 + 56))(v28, 0LL, 1LL, v52);
        }

        uint64_t v135 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
        id v136 = (void *)((char *)v28 + v135);
        unsigned __int8 v137 = (char *)v29 + v135;
        *id v136 = *(void *)((char *)v29 + v135);
        v136[1] = *(void *)((char *)v29 + v135 + 8);
        v136[2] = *(void *)((char *)v29 + v135 + 16);
        v136[3] = *(void *)((char *)v29 + v135 + 24);
        v136[4] = *(void *)((char *)v29 + v135 + 32);
        uint64_t v138 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
        uint64_t v139 = v138[7];
        id v157 = &v137[v139];
        id v161 = (char *)v136 + v139;
        uint64_t v140 = type metadata accessor for URL(0LL);
        id v154 = *(void (**)(char *, char *, uint64_t))(*(void *)(v140 - 8) + 16LL);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v154(v161, v157, v140);
        uint64_t v141 = v138[8];
        id v142 = (char *)v136 + v141;
        SEL v168 = &v137[v141];
        uint64_t v143 = type metadata accessor for Date(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v143 - 8) + 16LL))(v142, v168, v143);
        *((_BYTE *)v136 + v138[9]) = v137[v138[9]];
        uint64_t v144 = v138[10];
        unsigned __int8 v145 = (char *)v136 + v144;
        SEL v146 = &v137[v144];
        char v147 = v146[8];
        *(void *)unsigned __int8 v145 = *(void *)v146;
        v145[8] = v147;
        uint64_t v148 = *(int *)(sub_5C28(&qword_764A0) + 48);
        uint64_t v149 = *(void *)((char *)v29 + v148);
        *(void *)((char *)v28 + v148) = v149;
        swift_retain(v149);
        swift_storeEnumTagMultiPayload(v28, v30, 1LL);
        break;
      case 2u:
        *uint64_t v28 = *v29;
        v28[1] = v29[1];
        _OWORD v28[2] = v29[2];
        v28[3] = v29[3];
        uint64_t v55 = v29[4];
        v28[4] = v55;
        swift_bridgeObjectRetain();
        swift_retain(v55);
        swift_storeEnumTagMultiPayload(v28, v30, 2LL);
        break;
      case 3u:
        uint64_t v56 = v29[3];
        v28[3] = v56;
        v28[4] = v29[4];
        (**(void (***)(void *, void *))(v56 - 8))(v28, v29);
        v28[5] = v29[5];
        v28[6] = v29[6];
        v28[7] = v29[7];
        uint64_t v57 = v29[9];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v57)
        {
          v28[8] = v29[8];
          void v28[9] = v29[9];
          uint64_t v58 = v29[10];
          unint64_t v59 = v29[11];
          swift_bridgeObjectRetain();
          sub_F120(v58, v59);
          v28[10] = v58;
          v28[11] = v59;
          v28[12] = v29[12];
          v28[13] = v29[13];
          swift_bridgeObjectRetain();
        }

        else
        {
          __int128 v150 = *((_OWORD *)v29 + 4);
          __int128 v151 = *((_OWORD *)v29 + 6);
          *((_OWORD *)v28 + 5) = *((_OWORD *)v29 + 5);
          *((_OWORD *)v28 + 6) = v151;
          *((_OWORD *)v28 + 4) = v150;
        }

        swift_storeEnumTagMultiPayload(v28, v30, 3LL);
        break;
      case 5u:
        uint64_t v60 = *v29;
        *uint64_t v28 = *v29;
        swift_retain(v60);
        swift_storeEnumTagMultiPayload(v28, v30, 5LL);
        break;
      case 6u:
        uint64_t v61 = *v29;
        *uint64_t v28 = *v29;
        swift_retain(v61);
        swift_storeEnumTagMultiPayload(v28, v30, 6LL);
        break;
      case 7u:
        uint64_t v62 = *v29;
        *uint64_t v28 = *v29;
        swift_retain(v62);
        swift_storeEnumTagMultiPayload(v28, v30, 7LL);
        break;
      default:
        size_t v39 = *(void *)(v31 + 64);
        goto LABEL_19;
    }
  }

_OWORD *initializeWithTake for RCSMessage(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  a1[6] = a2[6];
  *(_OWORD *)((char *)a1 + 107) = *(_OWORD *)((char *)a2 + 107);
  __int128 v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  __int128 v8 = a2[3];
  a1[2] = a2[2];
  a1[3] = v8;
  __int128 v9 = a2[9];
  uint64_t v10 = a3[7];
  __int128 v11 = (void *)((char *)a1 + v10);
  SEL v12 = (void *)((char *)a2 + v10);
  a1[8] = a2[8];
  a1[9] = v9;
  uint64_t v13 = type metadata accessor for RCSMessage.Content(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13))
  {
    uint64_t v15 = sub_5C28(&qword_76228);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      uint64_t v16 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
      uint64_t v17 = *(void *)(v16 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v12, 1LL, v16))
      {
        uint64_t v18 = sub_5C28(&qword_76498);
        memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64LL));
      }

      else
      {
        *__int128 v11 = *v12;
        *(_OWORD *)(v11 + 1) = *(_OWORD *)(v12 + 1);
        uint64_t v19 = *(int *)(v16 + 24);
        uint64_t v50 = (char *)v11 + v19;
        SEL v20 = (char *)v12 + v19;
        uint64_t v21 = type metadata accessor for URL(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32LL))(v50, v20, v21);
        uint64_t v22 = *(int *)(v16 + 28);
        uint64_t v51 = (char *)v11 + v22;
        id v23 = (char *)v12 + v22;
        uint64_t v24 = type metadata accessor for Date(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32LL))(v51, v23, v24);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v11, 0LL, 1LL, v16);
      }

      uint64_t v25 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
      unsigned __int8 v26 = (char *)v11 + v25;
      uint64_t v27 = (char *)v12 + v25;
      *(void *)unsigned __int8 v26 = *(void *)((char *)v12 + v25);
      *(_OWORD *)(v26 + 8) = *(_OWORD *)((char *)v12 + v25 + 8);
      *(_OWORD *)(v26 + 24) = *(_OWORD *)((char *)v12 + v25 + 24);
      uint64_t v28 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
      uint64_t v29 = v28[7];
      unint64_t v48 = &v27[v29];
      uint64_t v52 = &v26[v29];
      uint64_t v30 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32LL))(v52, v48, v30);
      uint64_t v31 = v28[8];
      uint64_t v49 = &v27[v31];
      uint64_t v53 = &v26[v31];
      uint64_t v32 = type metadata accessor for Date(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32LL))(v53, v49, v32);
      v26[v28[9]] = v27[v28[9]];
      uint64_t v33 = v28[10];
      int v34 = &v26[v33];
      uint64_t v35 = &v27[v33];
      void v34[8] = v35[8];
      *(void *)int v34 = *(void *)v35;
      uint64_t v36 = sub_5C28(&qword_764A0);
      *(void *)((char *)v11 + *(int *)(v36 + 48)) = *(void *)((char *)v12 + *(int *)(v36 + 48));
      swift_storeEnumTagMultiPayload(v11, v13, 1LL);
    }

    else
    {
      memcpy(v11, v12, *(void *)(v14 + 64));
    }

    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
  }

  uint64_t v37 = a3[8];
  uint64_t v38 = a3[9];
  size_t v39 = (char *)a1 + v37;
  uint64_t v40 = (char *)a2 + v37;
  __int128 v41 = *((_OWORD *)v40 + 1);
  *(_OWORD *)size_t v39 = *(_OWORD *)v40;
  *((_OWORD *)v39 + 1) = v41;
  *((void *)v39 + 4) = *((void *)v40 + 4);
  *(void *)((char *)a1 + v38) = *(void *)((char *)a2 + v38);
  uint64_t v42 = a3[11];
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  *((_BYTE *)a1 + v42) = *((_BYTE *)a2 + v42);
  uint64_t v43 = a3[13];
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  uint64_t v44 = (_OWORD *)((char *)a1 + v43);
  uint64_t v45 = (_OWORD *)((char *)a2 + v43);
  __int128 v46 = v45[1];
  _OWORD *v44 = *v45;
  v44[1] = v46;
  return a1;
}

uint64_t assignWithTake for RCSMessage( uint64_t a1, uint64_t a2, int *a3, void *a4, void *a5, void *a6, void *a7, unsigned __int8 a8)
{
  if (a1 != a2)
  {
    sub_CB8C(a1);
    __int128 v11 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v11;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 107) = *(_OWORD *)(a2 + 107);
    __int128 v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v12;
    __int128 v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v13;
  }

  uint64_t v14 = *(void *)(a2 + 136);
  uint64_t v15 = *(RCSServiceSession **)(a1 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v14;
  swift_bridgeObjectRelease(v15, (SEL)a2, a3, a4, a5, a6, a7, a8);
  uint64_t v16 = *(void *)(a2 + 152);
  uint64_t v17 = *(RCSServiceSession **)(a1 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v16;
  swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
  uint64_t v25 = a3[7];
  unsigned __int8 v26 = (void *)(a1 + v25);
  uint64_t v27 = (void *)(a2 + v25);
  uint64_t v28 = type metadata accessor for RCSMessage.Content(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v29 + 48);
  int v31 = v30(v26, 1LL, v28);
  int v32 = v30(v27, 1LL, v28);
  if (!v31)
  {
    if (!v32)
    {
      if (a1 == a2) {
        goto LABEL_20;
      }
      sub_11324((uint64_t)v26, type metadata accessor for RCSMessage.Content);
      if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
      {
        uint64_t v44 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
        uint64_t v45 = *(void *)(v44 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v45 + 48))(v27, 1LL, v44))
        {
          uint64_t v46 = sub_5C28(&qword_76498);
          memcpy(v26, v27, *(void *)(*(void *)(v46 - 8) + 64LL));
        }

        else
        {
          *unsigned __int8 v26 = *v27;
          *(_OWORD *)(v26 + 1) = *(_OWORD *)(v27 + 1);
          uint64_t v102 = *(int *)(v44 + 24);
          id v103 = (char *)v26 + v102;
          id v104 = (char *)v27 + v102;
          uint64_t v105 = type metadata accessor for URL(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v105 - 8) + 32LL))(v103, v104, v105);
          uint64_t v106 = *(int *)(v44 + 28);
          unsigned __int8 v107 = (char *)v26 + v106;
          uint64_t v108 = (char *)v27 + v106;
          uint64_t v109 = type metadata accessor for Date(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v109 - 8) + 32LL))(v107, v108, v109);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v45 + 56))(v26, 0LL, 1LL, v44);
        }

        uint64_t v110 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
        uint64_t v111 = (char *)v26 + v110;
        id v112 = (char *)v27 + v110;
        *(void *)uint64_t v111 = *(void *)((char *)v27 + v110);
        *(_OWORD *)(v111 + 8) = *(_OWORD *)((char *)v27 + v110 + 8);
        *(_OWORD *)(v111 + 24) = *(_OWORD *)((char *)v27 + v110 + 24);
        SEL v113 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
        uint64_t v114 = v113[7];
        uint64_t v130 = &v111[v114];
        id v115 = &v112[v114];
        uint64_t v116 = type metadata accessor for URL(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v116 - 8) + 32LL))(v130, v115, v116);
        uint64_t v117 = v113[8];
        uint64_t v131 = &v111[v117];
        id v118 = &v112[v117];
        uint64_t v119 = type metadata accessor for Date(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v119 - 8) + 32LL))(v131, v118, v119);
        v111[v113[9]] = v112[v113[9]];
        uint64_t v120 = v113[10];
        SEL v121 = &v111[v120];
        id v122 = &v112[v120];
        v121[8] = v122[8];
        *(void *)SEL v121 = *(void *)v122;
        uint64_t v123 = sub_5C28(&qword_764A0);
        *(void *)((char *)v26 + *(int *)(v123 + 48)) = *(void *)((char *)v27 + *(int *)(v123 + 48));
        swift_storeEnumTagMultiPayload(v26, v28, 1LL);
        goto LABEL_20;
      }

      size_t v43 = *(void *)(v29 + 64);
LABEL_11:
      memcpy(v26, v27, v43);
      goto LABEL_20;
    }

    sub_11324((uint64_t)v26, type metadata accessor for RCSMessage.Content);
LABEL_10:
    size_t v43 = *(void *)(*(void *)(sub_5C28(&qword_76228) - 8) + 64LL);
    goto LABEL_11;
  }

  if (v32) {
    goto LABEL_10;
  }
  if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
  {
    uint64_t v40 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
    uint64_t v41 = *(void *)(v40 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v41 + 48))(v27, 1LL, v40))
    {
      uint64_t v42 = sub_5C28(&qword_76498);
      memcpy(v26, v27, *(void *)(*(void *)(v42 - 8) + 64LL));
    }

    else
    {
      *unsigned __int8 v26 = *v27;
      *(_OWORD *)(v26 + 1) = *(_OWORD *)(v27 + 1);
      uint64_t v47 = *(int *)(v40 + 24);
      id v126 = (char *)v26 + v47;
      unint64_t v48 = (char *)v27 + v47;
      uint64_t v49 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 32LL))(v126, v48, v49);
      uint64_t v50 = *(int *)(v40 + 28);
      unsigned __int8 v127 = (char *)v26 + v50;
      uint64_t v51 = (char *)v27 + v50;
      uint64_t v52 = type metadata accessor for Date(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 32LL))(v127, v51, v52);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(v26, 0LL, 1LL, v40);
    }

    uint64_t v53 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
    uint64_t v54 = (char *)v26 + v53;
    uint64_t v55 = (char *)v27 + v53;
    *(void *)uint64_t v54 = *(void *)((char *)v27 + v53);
    *(_OWORD *)(v54 + 8) = *(_OWORD *)((char *)v27 + v53 + 8);
    *(_OWORD *)(v54 + 24) = *(_OWORD *)((char *)v27 + v53 + 24);
    uint64_t v56 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
    uint64_t v57 = v56[7];
    id v124 = &v55[v57];
    uint64_t v128 = &v54[v57];
    uint64_t v58 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 32LL))(v128, v124, v58);
    uint64_t v59 = v56[8];
    id v125 = &v55[v59];
    uint64_t v129 = &v54[v59];
    uint64_t v60 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 32LL))(v129, v125, v60);
    v54[v56[9]] = v55[v56[9]];
    uint64_t v61 = v56[10];
    uint64_t v62 = &v54[v61];
    uint64_t v63 = &v55[v61];
    uint64_t v62[8] = v63[8];
    *(void *)uint64_t v62 = *(void *)v63;
    uint64_t v64 = sub_5C28(&qword_764A0);
    *(void *)((char *)v26 + *(int *)(v64 + 48)) = *(void *)((char *)v27 + *(int *)(v64 + 48));
    swift_storeEnumTagMultiPayload(v26, v28, 1LL);
  }

  else
  {
    memcpy(v26, v27, *(void *)(v29 + 64));
  }

  (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0LL, 1LL, v28);
LABEL_20:
  uint64_t v65 = a3[8];
  uint64_t v66 = a1 + v65;
  if (*(void *)(a1 + v65 + 24)) {
    sub_12204((void *)(a1 + v65));
  }
  __int128 v67 = *(_OWORD *)(a2 + v65 + 16);
  *(_OWORD *)uint64_t v66 = *(_OWORD *)(a2 + v65);
  *(_OWORD *)(v66 + swift_weakDestroy(v0 + 16) = v67;
  *(void *)(v66 + 32) = *(void *)(a2 + v65 + 32);
  uint64_t v68 = a3[9];
  uint64_t v69 = *(RCSServiceSession **)(a1 + v68);
  *(void *)(a1 + v68) = *(void *)(a2 + v68);
  swift_bridgeObjectRelease(v69, v33, v34, v35, v36, v37, v38, v39);
  uint64_t v70 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v70) = *(_BYTE *)(a2 + v70);
  uint64_t v71 = a3[12];
  uint64_t v72 = *(RCSServiceSession **)(a1 + v71);
  *(void *)(a1 + v71) = *(void *)(a2 + v71);
  swift_bridgeObjectRelease(v72, v73, v74, v75, v76, v77, v78, v79);
  uint64_t v80 = a3[13];
  uint64_t v81 = (void *)(a1 + v80);
  __int128 v82 = (void *)(a2 + v80);
  uint64_t v83 = v82[1];
  uint64_t v84 = *(RCSServiceSession **)(a1 + v80 + 8);
  *uint64_t v81 = *v82;
  v81[1] = v83;
  swift_bridgeObjectRelease(v84, v85, v86, v87, v88, v89, v90, v91);
  uint64_t v92 = v82[3];
  id v93 = (RCSServiceSession *)v81[3];
  v81[2] = v82[2];
  v81[3] = v92;
  swift_bridgeObjectRelease(v93, v94, v95, v96, v97, v98, v99, v100);
  return a1;
}

uint64_t getEnumTagSinglePayload for RCSMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_42F9C);
}

uint64_t sub_42F9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 136);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_5C28(&qword_76228);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 28),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for RCSMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_43028);
}

uint64_t sub_43028(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 136) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_5C28(&qword_76228);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 28),  a2,  a2,  v7);
  }

  return result;
}

void sub_430A0(uint64_t a1)
{
  v4[0] = "{";
  v4[1] = &unk_607D0;
  _OWORD v4[2] = &unk_607E8;
  sub_43160(319LL);
  if (v3 <= 0x3F)
  {
    v4[3] = *(void *)(v2 - 8) + 64LL;
    v4[4] = &unk_60800;
    void v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[6] = &unk_60818;
    void v4[7] = &unk_60818;
    v4[8] = &unk_60830;
    void v4[9] = &unk_60848;
    swift_initStructMetadata(a1, 256LL, 10LL, v4, a1 + 16);
  }

void sub_43160(uint64_t a1)
{
  if (!qword_774B8)
  {
    uint64_t v2 = type metadata accessor for RCSMessage.Content(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_774B8);
    }
  }

uint64_t destroy for RCSMessage.SenderInfo(uint64_t a1)
{
  uint64_t v1 = a1;
  unsigned int v2 = *(unsigned __int8 *)(a1 + 122);
  if (v2 >= 2) {
    unsigned int v2 = *(_DWORD *)a1 + 2;
  }
  if (v2 == 1)
  {
    swift_bridgeObjectRelease(*(void *)(a1 + 8));
    swift_bridgeObjectRelease(*(void *)(v1 + 24));
    swift_bridgeObjectRelease(*(void *)(v1 + 32));
    swift_bridgeObjectRelease(*(void *)(v1 + 48));
    if ((*(_BYTE *)(v1 + 121) & 1) != 0)
    {
      a1 = v1 + 64;
      return sub_12204((void *)a1);
    }

    swift_bridgeObjectRelease(*(void *)(v1 + 72));
    swift_bridgeObjectRelease(*(void *)(v1 + 88));
    swift_bridgeObjectRelease(*(void *)(v1 + 96));
    return swift_bridgeObjectRelease(*(void *)(v1 + 112));
  }

  else
  {
    unsigned int v3 = *(unsigned __int8 *)(a1 + 57);
    if (v3 >= 2) {
      unsigned int v3 = *(_DWORD *)a1 + 2;
    }
    if (v3 == 1) {
      return sub_12204((void *)a1);
    }
    swift_bridgeObjectRelease(*(void *)(a1 + 8));
    swift_bridgeObjectRelease(*(void *)(v1 + 24));
    swift_bridgeObjectRelease(*(void *)(v1 + 32));
    return swift_bridgeObjectRelease(*(void *)(v1 + 48));
  }

uint64_t initializeWithCopy for RCSMessage.SenderInfo(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 122);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  if (v4 == 1)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v5;
    uint64_t v6 = *(void *)(a2 + 24);
    *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v6;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v7 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v7;
    uint64_t v9 = *(void *)(a2 + 48);
    *(void *)(a1 + 48) = v9;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    char v10 = *(_BYTE *)(a2 + 121);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    if ((v10 & 1) != 0)
    {
      __int128 v11 = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 88) = v11;
      (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 64, a2 + 64);
    }

    else
    {
      uint64_t v15 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v15;
      uint64_t v16 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v16;
      uint64_t v18 = *(void *)(a2 + 96);
      uint64_t v17 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = v18;
      *(void *)(a1 + 104) = v17;
      uint64_t v19 = *(void *)(a2 + 112);
      *(void *)(a1 + 112) = v19;
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
    }

    *(_BYTE *)(a1 + 121) = v10;
    char v20 = 1;
  }

  else
  {
    unsigned int v12 = *(unsigned __int8 *)(a2 + 57);
    if (v12 >= 2) {
      unsigned int v12 = *(_DWORD *)a2 + 2;
    }
    if (v12 == 1)
    {
      __int128 v13 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v13;
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1, a2);
      char v14 = 1;
    }

    else
    {
      uint64_t v21 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v21;
      uint64_t v22 = *(void *)(a2 + 24);
      *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v22;
      uint64_t v24 = *(void *)(a2 + 32);
      uint64_t v23 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v24;
      *(void *)(a1 + 40) = v23;
      uint64_t v25 = *(void *)(a2 + 48);
      *(void *)(a1 + 48) = v25;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v25);
      char v14 = 0;
    }

    char v20 = 0;
    *(_BYTE *)(a1 + 57) = v14;
  }

  *(_BYTE *)(a1 + 122) = v20;
  return a1;
}

uint64_t assignWithCopy for RCSMessage.SenderInfo( uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, unsigned __int8 a8)
{
  uint64_t v8 = a1;
  if (a1 == a2) {
    return v8;
  }
  unsigned int v10 = *(unsigned __int8 *)(a1 + 122);
  if (v10 >= 2) {
    unsigned int v10 = *(_DWORD *)a1 + 2;
  }
  if (v10 != 1)
  {
    unsigned int v39 = *(unsigned __int8 *)(a1 + 57);
    if (v39 >= 2) {
      unsigned int v39 = *(_DWORD *)a1 + 2;
    }
    if (v39 == 1) {
      goto LABEL_10;
    }
    swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 8), (SEL)a2, a3, a4, a5, a6, a7, a8);
    swift_bridgeObjectRelease(*(RCSServiceSession **)(v8 + 24), v62, v63, v64, v65, v66, v67, v68);
    swift_bridgeObjectRelease(*(RCSServiceSession **)(v8 + 32), v69, v70, v71, v72, v73, v74, v75);
    uint64_t v61 = *(RCSServiceSession **)(v8 + 48);
LABEL_13:
    swift_bridgeObjectRelease(v61, v54, v55, v56, v57, v58, v59, v60);
    goto LABEL_14;
  }

  swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 8), (SEL)a2, a3, a4, a5, a6, a7, a8);
  swift_bridgeObjectRelease(*(RCSServiceSession **)(v8 + 24), v11, v12, v13, v14, v15, v16, v17);
  swift_bridgeObjectRelease(*(RCSServiceSession **)(v8 + 32), v18, v19, v20, v21, v22, v23, v24);
  swift_bridgeObjectRelease(*(RCSServiceSession **)(v8 + 48), v25, v26, v27, v28, v29, v30, v31);
  if ((*(_BYTE *)(v8 + 121) & 1) == 0)
  {
    swift_bridgeObjectRelease(*(RCSServiceSession **)(v8 + 72), v32, v33, v34, v35, v36, v37, v38);
    swift_bridgeObjectRelease(*(RCSServiceSession **)(v8 + 88), v40, v41, v42, v43, v44, v45, v46);
    swift_bridgeObjectRelease(*(RCSServiceSession **)(v8 + 96), v47, v48, v49, v50, v51, v52, v53);
    uint64_t v61 = *(RCSServiceSession **)(v8 + 112);
    goto LABEL_13;
  }

  a1 = v8 + 64;
LABEL_10:
  sub_12204((void *)a1);
LABEL_14:
  unsigned int v76 = *(unsigned __int8 *)(a2 + 122);
  if (v76 >= 2) {
    unsigned int v76 = *(_DWORD *)a2 + 2;
  }
  if (v76 == 1)
  {
    *(void *)uint64_t v8 = *(void *)a2;
    *(void *)(v8 + 8) = *(void *)(a2 + 8);
    *(void *)(v8 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
    *(void *)(v8 + 24) = *(void *)(a2 + 24);
    *(void *)(v8 + 32) = *(void *)(a2 + 32);
    *(void *)(v8 + 40) = *(void *)(a2 + 40);
    *(void *)(v8 + 48) = *(void *)(a2 + 48);
    *(_BYTE *)(v8 + 56) = *(_BYTE *)(a2 + 56);
    char v77 = *(_BYTE *)(a2 + 121);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((v77 & 1) != 0)
    {
      uint64_t v78 = *(void *)(a2 + 88);
      *(void *)(v8 + 88) = v78;
      *(void *)(v8 + 96) = *(void *)(a2 + 96);
      (**(void (***)(uint64_t, uint64_t))(v78 - 8))(v8 + 64, a2 + 64);
    }

    else
    {
      *(void *)(v8 + 64) = *(void *)(a2 + 64);
      *(void *)(v8 + 72) = *(void *)(a2 + 72);
      *(void *)(v8 + 80) = *(void *)(a2 + 80);
      *(void *)(v8 + 88) = *(void *)(a2 + 88);
      *(void *)(v8 + 96) = *(void *)(a2 + 96);
      *(void *)(v8 + 104) = *(void *)(a2 + 104);
      *(void *)(v8 + 112) = *(void *)(a2 + 112);
      *(_BYTE *)(v8 + 120) = *(_BYTE *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    *(_BYTE *)(v8 + 121) = v77;
    char v82 = 1;
  }

  else
  {
    unsigned int v79 = *(unsigned __int8 *)(a2 + 57);
    if (v79 >= 2) {
      unsigned int v79 = *(_DWORD *)a2 + 2;
    }
    if (v79 == 1)
    {
      uint64_t v80 = *(void *)(a2 + 24);
      *(void *)(v8 + 24) = v80;
      *(void *)(v8 + 32) = *(void *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v80 - 8))(v8, a2);
      char v81 = 1;
    }

    else
    {
      *(void *)uint64_t v8 = *(void *)a2;
      *(void *)(v8 + 8) = *(void *)(a2 + 8);
      *(void *)(v8 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
      *(void *)(v8 + 24) = *(void *)(a2 + 24);
      *(void *)(v8 + 32) = *(void *)(a2 + 32);
      *(void *)(v8 + 40) = *(void *)(a2 + 40);
      *(void *)(v8 + 48) = *(void *)(a2 + 48);
      *(_BYTE *)(v8 + 56) = *(_BYTE *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v81 = 0;
    }

    char v82 = 0;
    *(_BYTE *)(v8 + 57) = v81;
  }

  *(_BYTE *)(v8 + 122) = v82;
  return v8;
}

__n128 initializeWithTake for RCSMessage.SenderInfo(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  __n128 result = (__n128)a2[4];
  __int128 v6 = a2[5];
  __int128 v7 = a2[6];
  *(_OWORD *)(a1 + 107) = *(__int128 *)((char *)a2 + 107);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for RCSMessage.SenderInfo( uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, unsigned __int8 a8)
{
  uint64_t v8 = a1;
  if (a1 == a2) {
    return v8;
  }
  unsigned int v10 = *(unsigned __int8 *)(a1 + 122);
  if (v10 >= 2) {
    unsigned int v10 = *(_DWORD *)a1 + 2;
  }
  if (v10 != 1)
  {
    unsigned int v39 = *(unsigned __int8 *)(a1 + 57);
    if (v39 >= 2) {
      unsigned int v39 = *(_DWORD *)a1 + 2;
    }
    if (v39 == 1) {
      goto LABEL_10;
    }
    swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 8), (SEL)a2, a3, a4, a5, a6, a7, a8);
    swift_bridgeObjectRelease(*(RCSServiceSession **)(v8 + 24), v62, v63, v64, v65, v66, v67, v68);
    swift_bridgeObjectRelease(*(RCSServiceSession **)(v8 + 32), v69, v70, v71, v72, v73, v74, v75);
    uint64_t v61 = *(RCSServiceSession **)(v8 + 48);
LABEL_13:
    swift_bridgeObjectRelease(v61, v54, v55, v56, v57, v58, v59, v60);
    goto LABEL_14;
  }

  swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 8), (SEL)a2, a3, a4, a5, a6, a7, a8);
  swift_bridgeObjectRelease(*(RCSServiceSession **)(v8 + 24), v11, v12, v13, v14, v15, v16, v17);
  swift_bridgeObjectRelease(*(RCSServiceSession **)(v8 + 32), v18, v19, v20, v21, v22, v23, v24);
  swift_bridgeObjectRelease(*(RCSServiceSession **)(v8 + 48), v25, v26, v27, v28, v29, v30, v31);
  if ((*(_BYTE *)(v8 + 121) & 1) == 0)
  {
    swift_bridgeObjectRelease(*(RCSServiceSession **)(v8 + 72), v32, v33, v34, v35, v36, v37, v38);
    swift_bridgeObjectRelease(*(RCSServiceSession **)(v8 + 88), v40, v41, v42, v43, v44, v45, v46);
    swift_bridgeObjectRelease(*(RCSServiceSession **)(v8 + 96), v47, v48, v49, v50, v51, v52, v53);
    uint64_t v61 = *(RCSServiceSession **)(v8 + 112);
    goto LABEL_13;
  }

  a1 = v8 + 64;
LABEL_10:
  sub_12204((void *)a1);
LABEL_14:
  unsigned int v76 = *(unsigned __int8 *)(a2 + 122);
  if (v76 >= 2) {
    unsigned int v76 = *(_DWORD *)a2 + 2;
  }
  if (v76 == 1)
  {
    __int128 v77 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(v8 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v8 + 80) = v77;
    *(_OWORD *)(v8 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(v8 + 106) = *(_OWORD *)(a2 + 106);
    __int128 v78 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
    *(_OWORD *)(v8 + swift_weakDestroy(v0 + 16) = v78;
    __int128 v79 = *(_OWORD *)(a2 + 48);
    char v80 = 1;
    *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v8 + 48) = v79;
  }

  else
  {
    unsigned int v81 = *(unsigned __int8 *)(a2 + 57);
    if (v81 >= 2) {
      unsigned int v81 = *(_DWORD *)a2 + 2;
    }
    if (v81 == 1)
    {
      __int128 v82 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
      *(_OWORD *)(v8 + swift_weakDestroy(v0 + 16) = v82;
      *(void *)(v8 + 32) = *(void *)(a2 + 32);
      char v83 = 1;
    }

    else
    {
      char v83 = 0;
      __int128 v84 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
      *(_OWORD *)(v8 + swift_weakDestroy(v0 + 16) = v84;
      *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(v8 + 41) = *(_OWORD *)(a2 + 41);
    }

    char v80 = 0;
    *(_BYTE *)(v8 + 57) = v83;
  }

  *(_BYTE *)(v8 + 122) = v80;
  return v8;
}

uint64_t getEnumTagSinglePayload for RCSMessage.SenderInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 123)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 122);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for RCSMessage.SenderInfo( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 107) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + swift_weakDestroy(v0 + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_DWORD *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 123) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 123) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 122) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_43928(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 122);
  return result;
}

uint64_t sub_43944(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_OWORD *)(result + 106) = 0u;
    unsigned int v2 = a2 - 2;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + swift_weakDestroy(v0 + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    LOBYTE(a2) = 2;
    *(_DWORD *)uint64_t result = v2;
  }

  *(_BYTE *)(result + 122) = a2;
  return result;
}

ValueMetadata *type metadata accessor for RCSMessage.SenderInfo()
{
  return &type metadata for RCSMessage.SenderInfo;
}

uint64_t destroy for RCSMessage.SubscriptionInfo(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

void *initializeWithCopy for RCSMessage.SubscriptionInfo(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for RCSMessage.SubscriptionInfo(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for RCSMessage.Coordinates(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for RCSMessage.SubscriptionInfo(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for RCSMessage.SubscriptionInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RCSMessage.SubscriptionInfo( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RCSMessage.SubscriptionInfo()
{
  return &type metadata for RCSMessage.SubscriptionInfo;
}

uint64_t getEnumTagSinglePayload for RCSMessage.ContentType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }

uint64_t storeEnumTagSinglePayload for RCSMessage.ContentType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_43C44 + 4 * byte_604D1[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_43C78 + 4 * byte_604CC[v4]))();
}

uint64_t sub_43C78(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_43C80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x43C88LL);
  }
  return result;
}

uint64_t sub_43C94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x43C9CLL);
  }
  *(_BYTE *)__n128 result = a2 + 8;
  return result;
}

uint64_t sub_43CA0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_43CA8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RCSMessage.ContentType()
{
  return &type metadata for RCSMessage.ContentType;
}

uint64_t *initializeBufferWithCopyOfBuffer for RCSMessage.Content(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v10);
  }

  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        uint64_t v9 = a2[2];
        a1[2] = v9;
        swift_bridgeObjectRetain();
        swift_retain(v9);
        swift_storeEnumTagMultiPayload(a1, a3, 0LL);
        break;
      case 1u:
        uint64_t v12 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
        uint64_t v13 = *(void *)(v12 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v13 + 48))(a2, 1LL, v12))
        {
          uint64_t v14 = sub_5C28(&qword_76498);
          memcpy(a1, a2, *(void *)(*(void *)(v14 - 8) + 64LL));
        }

        else
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
          a1[2] = a2[2];
          uint64_t v26 = *(int *)(v12 + 24);
          id v27 = (char *)a1 + v26;
          id v28 = (char *)a2 + v26;
          uint64_t v29 = type metadata accessor for URL(0LL);
          id v30 = *(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16LL);
          swift_bridgeObjectRetain();
          v30(v27, v28, v29);
          uint64_t v31 = *(int *)(v12 + 28);
          int v32 = (char *)a1 + v31;
          uint64_t v33 = (char *)a2 + v31;
          uint64_t v34 = type metadata accessor for Date(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16LL))(v32, v33, v34);
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v13 + 56))(a1, 0LL, 1LL, v12);
        }

        uint64_t v35 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
        uint64_t v36 = (char *)a1 + v35;
        uint64_t v37 = (char *)a2 + v35;
        *(_OWORD *)uint64_t v36 = *(_OWORD *)((char *)a2 + v35);
        uint64_t v39 = *(uint64_t *)((char *)a2 + v35 + 16);
        uint64_t v38 = *(uint64_t *)((char *)a2 + v35 + 24);
        *((void *)v36 + 2) = v39;
        *((void *)v36 + 3) = v38;
        *((void *)v36 + 4) = *((void *)v37 + 4);
        SEL v40 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
        uint64_t v41 = v40[7];
        uint64_t v54 = &v37[v41];
        uint64_t v55 = &v36[v41];
        uint64_t v42 = type metadata accessor for URL(0LL);
        id v43 = *(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16LL);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v43(v55, v54, v42);
        uint64_t v44 = v40[8];
        id v45 = &v36[v44];
        unsigned __int8 v46 = &v37[v44];
        uint64_t v47 = type metadata accessor for Date(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16LL))(v45, v46, v47);
        v36[v40[9]] = v37[v40[9]];
        uint64_t v48 = v40[10];
        id v49 = &v36[v48];
        id v50 = &v37[v48];
        v49[8] = v50[8];
        *(void *)id v49 = *(void *)v50;
        uint64_t v51 = *(int *)(sub_5C28(&qword_764A0) + 48);
        uint64_t v52 = *(uint64_t *)((char *)a2 + v51);
        *(uint64_t *)((char *)a1 + v51) = v52;
        swift_retain(v52);
        swift_storeEnumTagMultiPayload(a1, a3, 1LL);
        break;
      case 2u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v15 = a2[3];
        a1[2] = a2[2];
        a1[3] = v15;
        uint64_t v16 = a2[4];
        a1[4] = v16;
        swift_bridgeObjectRetain();
        swift_retain(v16);
        swift_storeEnumTagMultiPayload(a1, a3, 2LL);
        break;
      case 3u:
        __int128 v17 = *(_OWORD *)(a2 + 3);
        *(_OWORD *)(a1 + 3) = v17;
        (**(void (***)(uint64_t *, uint64_t *))(v17 - 8))(a1, a2);
        uint64_t v18 = a2[6];
        a1[5] = a2[5];
        a1[6] = v18;
        a1[7] = a2[7];
        uint64_t v19 = a2[9];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v19)
        {
          a1[8] = a2[8];
          a1[9] = v19;
          uint64_t v20 = a2[10];
          unint64_t v21 = a2[11];
          swift_bridgeObjectRetain();
          sub_F120(v20, v21);
          a1[10] = v20;
          a1[11] = v21;
          uint64_t v22 = a2[13];
          a1[12] = a2[12];
          a1[13] = v22;
          swift_bridgeObjectRetain();
        }

        else
        {
          __int128 v53 = *((_OWORD *)a2 + 5);
          *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
          *((_OWORD *)a1 + 5) = v53;
          *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
        }

        swift_storeEnumTagMultiPayload(a1, a3, 3LL);
        break;
      case 5u:
        uint64_t v23 = *a2;
        *a1 = *a2;
        swift_retain(v23);
        swift_storeEnumTagMultiPayload(a1, a3, 5LL);
        break;
      case 6u:
        uint64_t v24 = *a2;
        *a1 = *a2;
        swift_retain(v24);
        swift_storeEnumTagMultiPayload(a1, a3, 6LL);
        break;
      case 7u:
        uint64_t v25 = *a2;
        *a1 = *a2;
        swift_retain(v25);
        swift_storeEnumTagMultiPayload(a1, a3, 7LL);
        break;
      default:
        memcpy(a1, a2, *(void *)(v5 + 64));
        break;
    }
  }

  return a1;
}

void destroy for RCSMessage.Content(uint64_t *a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
      swift_bridgeObjectRelease((RCSServiceSession *)a1[1], v3, v4, v5, v6, v7, v8, v9);
      uint64_t v10 = a1[2];
      goto LABEL_8;
    case 1u:
      uint64_t v11 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
      if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(a1, 1LL, v11))
      {
        swift_bridgeObjectRelease((RCSServiceSession *)a1[2], v12, v13, v14, v15, v16, v17, v18);
        uint64_t v19 = (uint64_t)a1 + *(int *)(v11 + 24);
        uint64_t v20 = type metadata accessor for URL(0LL);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8LL))(v19, v20);
        uint64_t v21 = (uint64_t)a1 + *(int *)(v11 + 28);
        uint64_t v22 = type metadata accessor for Date(0LL);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8LL))(v21, v22);
      }

      uint64_t v23 = (uint64_t)a1 + *(int *)(type metadata accessor for RCSFile(0LL) + 20);
      swift_bridgeObjectRelease(*(RCSServiceSession **)(v23 + 16), v24, v25, v26, v27, v28, v29, v30);
      swift_bridgeObjectRelease(*(RCSServiceSession **)(v23 + 32), v31, v32, v33, v34, v35, v36, v37);
      uint64_t v38 = type metadata accessor for RCSFile.DispositionInformation(0LL);
      uint64_t v39 = v23 + *(int *)(v38 + 28);
      uint64_t v40 = type metadata accessor for URL(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8LL))(v39, v40);
      uint64_t v41 = v23 + *(int *)(v38 + 32);
      uint64_t v42 = type metadata accessor for Date(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8LL))(v41, v42);
      uint64_t v10 = *(uint64_t *)((char *)a1 + *(int *)(sub_5C28(&qword_764A0) + 48));
      goto LABEL_8;
    case 2u:
      swift_bridgeObjectRelease((RCSServiceSession *)a1[3], v3, v4, v5, v6, v7, v8, v9);
      uint64_t v10 = a1[4];
      goto LABEL_8;
    case 3u:
      sub_12204(a1);
      swift_bridgeObjectRelease((RCSServiceSession *)a1[5], v43, v44, v45, v46, v47, v48, v49);
      swift_bridgeObjectRelease((RCSServiceSession *)a1[7], v50, v51, v52, v53, v54, v55, v56);
      id v64 = (RCSServiceSession *)a1[9];
      if (v64)
      {
        swift_bridgeObjectRelease(v64, v57, v58, v59, v60, v61, v62, v63);
        sub_F5F8(a1[10], a1[11]);
        swift_bridgeObjectRelease((RCSServiceSession *)a1[13], v65, v66, v67, v68, v69, v70, v71);
      }

      return;
    case 5u:
    case 6u:
    case 7u:
      uint64_t v10 = *a1;
LABEL_8:
      swift_release(v10);
      break;
    default:
      return;
  }

void *initializeWithCopy for RCSMessage.Content(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      uint64_t v7 = a2[2];
      a1[2] = v7;
      swift_bridgeObjectRetain();
      swift_retain(v7);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 0LL;
      goto LABEL_16;
    case 1u:
      uint64_t v11 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(a2, 1LL, v11))
      {
        uint64_t v13 = sub_5C28(&qword_76498);
        memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64LL));
      }

      else
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        a1[2] = a2[2];
        uint64_t v25 = *(int *)(v11 + 24);
        id v26 = (char *)a1 + v25;
        id v27 = (char *)a2 + v25;
        uint64_t v28 = type metadata accessor for URL(0LL);
        id v29 = *(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16LL);
        swift_bridgeObjectRetain();
        v29(v26, v27, v28);
        uint64_t v30 = *(int *)(v11 + 28);
        SEL v31 = (char *)a1 + v30;
        id v32 = (char *)a2 + v30;
        uint64_t v33 = type metadata accessor for Date(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16LL))(v31, v32, v33);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(a1, 0LL, 1LL, v11);
      }

      uint64_t v34 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
      id v35 = (char *)a1 + v34;
      id v36 = (char *)a2 + v34;
      *(_OWORD *)id v35 = *(_OWORD *)((char *)a2 + v34);
      uint64_t v38 = *(void *)((char *)a2 + v34 + 16);
      uint64_t v37 = *(void *)((char *)a2 + v34 + 24);
      *((void *)v35 + 2) = v38;
      *((void *)v35 + 3) = v37;
      *((void *)v35 + 4) = *((void *)v36 + 4);
      uint64_t v39 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
      uint64_t v40 = v39[7];
      id v54 = &v36[v40];
      id v55 = &v35[v40];
      uint64_t v41 = type metadata accessor for URL(0LL);
      uint64_t v42 = *(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 16LL);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v42(v55, v54, v41);
      uint64_t v43 = v39[8];
      id v44 = &v35[v43];
      id v45 = &v36[v43];
      uint64_t v46 = type metadata accessor for Date(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16LL))(v44, v45, v46);
      v35[v39[9]] = v36[v39[9]];
      uint64_t v47 = v39[10];
      id v48 = &v35[v47];
      unsigned __int8 v49 = &v36[v47];
      v48[8] = v49[8];
      *(void *)id v48 = *(void *)v49;
      uint64_t v50 = *(int *)(sub_5C28(&qword_764A0) + 48);
      uint64_t v51 = *(void *)((char *)a2 + v50);
      *(void *)((char *)a1 + v50) = v51;
      swift_retain(v51);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 1LL;
      goto LABEL_16;
    case 2u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v14 = a2[3];
      a1[2] = a2[2];
      a1[3] = v14;
      uint64_t v15 = a2[4];
      a1[4] = v15;
      swift_bridgeObjectRetain();
      swift_retain(v15);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 2LL;
      goto LABEL_16;
    case 3u:
      __int128 v16 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 3) = v16;
      (**(void (***)(void *, void *))(v16 - 8))(a1, a2);
      uint64_t v17 = a2[6];
      a1[5] = a2[5];
      a1[6] = v17;
      a1[7] = a2[7];
      uint64_t v18 = a2[9];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v18)
      {
        a1[8] = a2[8];
        a1[9] = v18;
        uint64_t v19 = a2[10];
        unint64_t v20 = a2[11];
        swift_bridgeObjectRetain();
        sub_F120(v19, v20);
        a1[10] = v19;
        a1[11] = v20;
        uint64_t v21 = a2[13];
        a1[12] = a2[12];
        a1[13] = v21;
        swift_bridgeObjectRetain();
      }

      else
      {
        __int128 v52 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5) = v52;
        *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
      }

      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 3LL;
      goto LABEL_16;
    case 5u:
      uint64_t v22 = *a2;
      *a1 = *a2;
      swift_retain(v22);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 5LL;
      goto LABEL_16;
    case 6u:
      uint64_t v23 = *a2;
      *a1 = *a2;
      swift_retain(v23);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 6LL;
      goto LABEL_16;
    case 7u:
      uint64_t v24 = *a2;
      *a1 = *a2;
      swift_retain(v24);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 7LL;
LABEL_16:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

void *assignWithCopy for RCSMessage.Content(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_11324((uint64_t)a1, type metadata accessor for RCSMessage.Content);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v6 = a2[2];
        a1[2] = v6;
        swift_bridgeObjectRetain();
        swift_retain(v6);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 0LL;
        goto LABEL_17;
      case 1u:
        uint64_t v10 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
        uint64_t v11 = *(void *)(v10 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(a2, 1LL, v10))
        {
          uint64_t v12 = sub_5C28(&qword_76498);
          memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64LL));
        }

        else
        {
          *a1 = *a2;
          a1[1] = a2[1];
          a1[2] = a2[2];
          uint64_t v21 = *(int *)(v10 + 24);
          uint64_t v22 = (char *)a1 + v21;
          uint64_t v23 = (char *)a2 + v21;
          uint64_t v24 = type metadata accessor for URL(0LL);
          uint64_t v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16LL);
          swift_bridgeObjectRetain();
          v25(v22, v23, v24);
          uint64_t v26 = *(int *)(v10 + 28);
          id v27 = (char *)a1 + v26;
          uint64_t v28 = (char *)a2 + v26;
          uint64_t v29 = type metadata accessor for Date(0LL);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16LL))(v27, v28, v29);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(a1, 0LL, 1LL, v10);
        }

        uint64_t v30 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
        SEL v31 = (void *)((char *)a1 + v30);
        id v32 = (char *)a2 + v30;
        *SEL v31 = *(void *)((char *)a2 + v30);
        v31[1] = *(void *)((char *)a2 + v30 + 8);
        void v31[2] = *(void *)((char *)a2 + v30 + 16);
        v31[3] = *(void *)((char *)a2 + v30 + 24);
        v31[4] = *(void *)((char *)a2 + v30 + 32);
        uint64_t v33 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
        uint64_t v34 = v33[7];
        uint64_t v50 = &v32[v34];
        uint64_t v51 = (char *)v31 + v34;
        uint64_t v35 = type metadata accessor for URL(0LL);
        id v36 = *(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16LL);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v36(v51, v50, v35);
        uint64_t v37 = v33[8];
        uint64_t v38 = (char *)v31 + v37;
        uint64_t v39 = &v32[v37];
        uint64_t v40 = type metadata accessor for Date(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16LL))(v38, v39, v40);
        *((_BYTE *)v31 + v33[9]) = v32[v33[9]];
        uint64_t v41 = v33[10];
        uint64_t v42 = (char *)v31 + v41;
        uint64_t v43 = &v32[v41];
        char v44 = v43[8];
        *(void *)uint64_t v42 = *(void *)v43;
        v42[8] = v44;
        uint64_t v45 = *(int *)(sub_5C28(&qword_764A0) + 48);
        uint64_t v46 = *(void *)((char *)a2 + v45);
        *(void *)((char *)a1 + v45) = v46;
        swift_retain(v46);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 1LL;
        goto LABEL_17;
      case 2u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        uint64_t v13 = a2[4];
        a1[4] = v13;
        swift_bridgeObjectRetain();
        swift_retain(v13);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 2LL;
        goto LABEL_17;
      case 3u:
        uint64_t v14 = a2[3];
        a1[3] = v14;
        a1[4] = a2[4];
        (**(void (***)(void *, void *))(v14 - 8))(a1, a2);
        a1[5] = a2[5];
        a1[6] = a2[6];
        a1[7] = a2[7];
        uint64_t v15 = a2[9];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v15)
        {
          a1[8] = a2[8];
          a1[9] = a2[9];
          uint64_t v16 = a2[10];
          unint64_t v17 = a2[11];
          swift_bridgeObjectRetain();
          sub_F120(v16, v17);
          a1[10] = v16;
          a1[11] = v17;
          a1[12] = a2[12];
          a1[13] = a2[13];
          swift_bridgeObjectRetain();
        }

        else
        {
          __int128 v47 = *((_OWORD *)a2 + 4);
          __int128 v48 = *((_OWORD *)a2 + 6);
          *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
          *((_OWORD *)a1 + 6) = v48;
          *((_OWORD *)a1 + 4) = v47;
        }

        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 3LL;
        goto LABEL_17;
      case 5u:
        uint64_t v18 = *a2;
        *a1 = *a2;
        swift_retain(v18);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 5LL;
        goto LABEL_17;
      case 6u:
        uint64_t v19 = *a2;
        *a1 = *a2;
        swift_retain(v19);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 6LL;
        goto LABEL_17;
      case 7u:
        uint64_t v20 = *a2;
        *a1 = *a2;
        swift_retain(v20);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 7LL;
LABEL_17:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

void *initializeWithTake for RCSMessage.Content(void *a1, void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    uint64_t v6 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
    uint64_t v7 = *(void *)(v6 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1LL, v6))
    {
      uint64_t v8 = sub_5C28(&qword_76498);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      *a1 = *a2;
      *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
      uint64_t v9 = *(int *)(v6 + 24);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32LL))(v10, v11, v12);
      uint64_t v13 = *(int *)(v6 + 28);
      uint64_t v14 = (char *)a1 + v13;
      uint64_t v15 = (char *)a2 + v13;
      uint64_t v16 = type metadata accessor for Date(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32LL))(v14, v15, v16);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
    }

    uint64_t v17 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    *(void *)uint64_t v18 = *(void *)((char *)a2 + v17);
    *(_OWORD *)(v18 + 8) = *(_OWORD *)((char *)a2 + v17 + 8);
    *(_OWORD *)(v18 + 24) = *(_OWORD *)((char *)a2 + v17 + 24);
    uint64_t v20 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
    uint64_t v21 = v20[7];
    uint64_t v22 = &v18[v21];
    uint64_t v23 = &v19[v21];
    uint64_t v24 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32LL))(v22, v23, v24);
    uint64_t v25 = v20[8];
    uint64_t v26 = &v18[v25];
    id v27 = &v19[v25];
    uint64_t v28 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32LL))(v26, v27, v28);
    v18[v20[9]] = v19[v20[9]];
    uint64_t v29 = v20[10];
    uint64_t v30 = &v18[v29];
    SEL v31 = &v19[v29];
    v30[8] = v31[8];
    *(void *)uint64_t v30 = *(void *)v31;
    uint64_t v32 = sub_5C28(&qword_764A0);
    *(void *)((char *)a1 + *(int *)(v32 + 48)) = *(void *)((char *)a2 + *(int *)(v32 + 48));
    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void *assignWithTake for RCSMessage.Content(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_11324((uint64_t)a1, type metadata accessor for RCSMessage.Content);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v6 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
      uint64_t v7 = *(void *)(v6 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1LL, v6))
      {
        uint64_t v8 = sub_5C28(&qword_76498);
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
      }

      else
      {
        *a1 = *a2;
        *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
        uint64_t v9 = *(int *)(v6 + 24);
        uint64_t v10 = (char *)a1 + v9;
        uint64_t v11 = (char *)a2 + v9;
        uint64_t v12 = type metadata accessor for URL(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32LL))(v10, v11, v12);
        uint64_t v13 = *(int *)(v6 + 28);
        uint64_t v14 = (char *)a1 + v13;
        uint64_t v15 = (char *)a2 + v13;
        uint64_t v16 = type metadata accessor for Date(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32LL))(v14, v15, v16);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
      }

      uint64_t v17 = *(int *)(type metadata accessor for RCSFile(0LL) + 20);
      uint64_t v18 = (char *)a1 + v17;
      uint64_t v19 = (char *)a2 + v17;
      *(void *)uint64_t v18 = *(void *)((char *)a2 + v17);
      *(_OWORD *)(v18 + 8) = *(_OWORD *)((char *)a2 + v17 + 8);
      *(_OWORD *)(v18 + 24) = *(_OWORD *)((char *)a2 + v17 + 24);
      uint64_t v20 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
      uint64_t v21 = v20[7];
      uint64_t v22 = &v18[v21];
      uint64_t v23 = &v19[v21];
      uint64_t v24 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32LL))(v22, v23, v24);
      uint64_t v25 = v20[8];
      uint64_t v26 = &v18[v25];
      id v27 = &v19[v25];
      uint64_t v28 = type metadata accessor for Date(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32LL))(v26, v27, v28);
      v18[v20[9]] = v19[v20[9]];
      uint64_t v29 = v20[10];
      uint64_t v30 = &v18[v29];
      SEL v31 = &v19[v29];
      v30[8] = v31[8];
      *(void *)uint64_t v30 = *(void *)v31;
      uint64_t v32 = sub_5C28(&qword_764A0);
      *(void *)((char *)a1 + *(int *)(v32 + 48)) = *(void *)((char *)a2 + *(int *)(v32 + 48));
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t sub_44EA4(uint64_t a1)
{
  v5[0] = &unk_60898;
  uint64_t result = type metadata accessor for RCSFile(319LL);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v4, *(void *)(result - 8) + 64LL, &unk_60830);
    v5[1] = v4;
    _OWORD v5[2] = &unk_60800;
    v5[3] = &unk_608B0;
    void v5[4] = &unk_60818;
    v5[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 8LL, v5);
    return 0LL;
  }

  return result;
}

uint64_t destroy for RCSMessage.Coordinates(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

uint64_t initializeWithCopy for RCSMessage.Coordinates(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

void *assignWithCopy for RCSMessage.Coordinates(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v3 = a2[3];
  uint64_t v4 = a1[3];
  a1[3] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for RCSMessage.Coordinates(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for RCSMessage.Coordinates(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RCSMessage.Coordinates( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RCSMessage.Coordinates()
{
  return &type metadata for RCSMessage.Coordinates;
}

uint64_t getEnumTagSinglePayload for RCSMessage.Typing(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for RCSMessage.Typing(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_451C8 + 4 * byte_604FB[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_451FC + 4 * byte_604F6[v4]))();
}

uint64_t sub_451FC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_45204(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x4520CLL);
  }
  return result;
}

uint64_t sub_45218(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x45220LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_45224(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_4522C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RCSMessage.Typing()
{
  return &type metadata for RCSMessage.Typing;
}

uint64_t destroy for RCSGroup(void *a1)
{
  uint64_t result = a1[9];
  if (result)
  {
    swift_bridgeObjectRelease(result);
    sub_F5F8(a1[10], a1[11]);
    return swift_bridgeObjectRelease(a1[13]);
  }

  return result;
}

uint64_t initializeWithCopy for RCSGroup(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = v6;
    uint64_t v7 = *(void *)(a2 + 80);
    unint64_t v8 = *(void *)(a2 + 88);
    swift_bridgeObjectRetain();
    sub_F120(v7, v8);
    *(void *)(a1 + 80) = v7;
    *(void *)(a1 + 88) = v8;
    uint64_t v9 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = v9;
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v10 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v10;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  }

  return a1;
}

void *assignWithCopy for RCSGroup(void *a1, void *a2)
{
  __int128 v4 = (RCSServiceSession *)a1[5];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4, v5, v6, v7, v8, v9, v10, v11);
  a1[6] = a2[6];
  uint64_t v12 = (RCSServiceSession *)a1[7];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v12, v13, v14, v15, v16, v17, v18, v19);
  id v27 = a1 + 8;
  uint64_t v28 = a2 + 8;
  uint64_t v29 = (RCSServiceSession *)a1[9];
  uint64_t v30 = a2[9];
  if (v29)
  {
    if (v30)
    {
      a1[8] = a2[8];
      a1[9] = a2[9];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease(v29, v31, v32, v33, v34, v35, v36, v37);
      uint64_t v38 = a2[10];
      unint64_t v39 = a2[11];
      sub_F120(v38, v39);
      uint64_t v40 = a1[10];
      unint64_t v41 = a1[11];
      a1[10] = v38;
      a1[11] = v39;
      sub_F5F8(v40, v41);
      a1[12] = a2[12];
      uint64_t v42 = a2[13];
      uint64_t v43 = (RCSServiceSession *)a1[13];
      a1[13] = v42;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease(v43, v44, v45, v46, v47, v48, v49, v50);
    }

    else
    {
      sub_454AC((uint64_t)(a1 + 8), v20, v21, v22, v23, v24, v25, v26);
      __int128 v54 = *((_OWORD *)a2 + 5);
      __int128 v53 = *((_OWORD *)a2 + 6);
      *id v27 = *v28;
      *((_OWORD *)a1 + 5) = v54;
      *((_OWORD *)a1 + 6) = v53;
    }
  }

  else if (v30)
  {
    a1[8] = a2[8];
    a1[9] = a2[9];
    uint64_t v51 = a2[10];
    unint64_t v52 = a2[11];
    swift_bridgeObjectRetain();
    sub_F120(v51, v52);
    a1[10] = v51;
    a1[11] = v52;
    a1[12] = a2[12];
    a1[13] = a2[13];
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v55 = *v28;
    __int128 v56 = *((_OWORD *)a2 + 6);
    *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
    *((_OWORD *)a1 + 6) = v56;
    *id v27 = v55;
  }

  return a1;
}

uint64_t sub_454AC( uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, unsigned __int8 a8)
{
  return a1;
}

__n128 initializeWithTake for RCSGroup(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for RCSGroup(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  __int128 v6 = *(RCSServiceSession **)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease(v6, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v14 = *(void *)(a2 + 56);
  id v15 = *(RCSServiceSession **)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v14;
  swift_bridgeObjectRelease(v15, v16, v17, v18, v19, v20, v21, v22);
  uint64_t v30 = *(RCSServiceSession **)(a1 + 72);
  if (!v30) {
    goto LABEL_5;
  }
  uint64_t v31 = *(void *)(a2 + 72);
  if (!v31)
  {
    sub_454AC(a1 + 64, (uint64_t)v23, v24, v25, v26, v27, v28, v29);
LABEL_5:
    __int128 v43 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v43;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    return a1;
  }

  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v31;
  swift_bridgeObjectRelease(v30, v23, v24, v25, v26, v27, v28, v29);
  uint64_t v32 = *(void *)(a1 + 80);
  unint64_t v33 = *(void *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_F5F8(v32, v33);
  uint64_t v34 = *(void *)(a2 + 104);
  id v35 = *(RCSServiceSession **)(a1 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v34;
  swift_bridgeObjectRelease(v35, v36, v37, v38, v39, v40, v41, v42);
  return a1;
}

uint64_t getEnumTagSinglePayload for RCSGroup(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RCSGroup(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0LL;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 112) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RCSGroup()
{
  return &type metadata for RCSGroup;
}

void destroy for RCSGroup.Icon( uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, unsigned __int8 a8)
{
}

void *initializeWithCopy for RCSGroup.Icon(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  swift_bridgeObjectRetain();
  sub_F120(v5, v6);
  a1[2] = v5;
  a1[3] = v6;
  uint64_t v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for RCSGroup.Icon(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = (RCSServiceSession *)a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v12 = a2[2];
  unint64_t v13 = a2[3];
  sub_F120(v12, v13);
  uint64_t v14 = a1[2];
  unint64_t v15 = a1[3];
  a1[2] = v12;
  a1[3] = v13;
  sub_F5F8(v14, v15);
  a1[4] = a2[4];
  uint64_t v16 = a2[5];
  id v17 = (RCSServiceSession *)a1[5];
  a1[5] = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
  return a1;
}

__n128 initializeWithTake for RCSGroup.Icon(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void *assignWithTake for RCSGroup.Icon( void *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, unsigned __int8 a8)
{
  uint64_t v10 = *(void *)(a2 + 8);
  unsigned __int8 v11 = (RCSServiceSession *)a1[1];
  *a1 = *(void *)a2;
  a1[1] = v10;
  swift_bridgeObjectRelease(v11, (SEL)a2, a3, a4, a5, a6, a7, a8);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_F5F8(v12, v13);
  uint64_t v14 = *(void *)(a2 + 40);
  unint64_t v15 = (RCSServiceSession *)a1[5];
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v14;
  swift_bridgeObjectRelease(v15, v16, v17, v18, v19, v20, v21, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for RCSGroup.Icon(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RCSGroup.Icon(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RCSGroup.Icon()
{
  return &type metadata for RCSGroup.Icon;
}

ValueMetadata *type metadata accessor for RCSGroup.Icon.CodingKeys()
{
  return &type metadata for RCSGroup.Icon.CodingKeys;
}

uint64_t getEnumTagSinglePayload for RCSMessageMetadata.Entry.HeaderKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for RCSMessage.Typing.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_45930 + 4 * byte_60500[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_45950 + 4 * byte_60505[v4]))();
  }
}

_BYTE *sub_45930(_BYTE *result, char a2)
{
  *__n128 result = a2;
  return result;
}

_BYTE *sub_45950(_BYTE *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_45958(_DWORD *result, int a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_45960(_WORD *result, __int16 a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_45968(_WORD *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_45970(_DWORD *result)
{
  *__n128 result = 0;
  return result;
}

ValueMetadata *type metadata accessor for RCSMessage.Typing.CodingKeys()
{
  return &type metadata for RCSMessage.Typing.CodingKeys;
}

uint64_t getEnumTagSinglePayload for RCSFile.Disposition(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

uint64_t _s7CoreRCS8RCSGroupV4IconV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_45A68 + 4 * byte_6050F[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_45A9C + 4 * byte_6050A[v4]))();
}

uint64_t sub_45A9C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_45AA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x45AACLL);
  }
  return result;
}

uint64_t sub_45AB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x45AC0LL);
  }
  *(_BYTE *)__n128 result = a2 + 2;
  return result;
}

uint64_t sub_45AC4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_45ACC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RCSMessage.Coordinates.CodingKeys()
{
  return &type metadata for RCSMessage.Coordinates.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for RCSMessage.SubscriptionInfo.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_45B34 + 4 * byte_60519[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_45B68 + 4 * byte_60514[v4]))();
}

uint64_t sub_45B68(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_45B70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x45B78LL);
  }
  return result;
}

uint64_t sub_45B84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x45B8CLL);
  }
  *(_BYTE *)__n128 result = a2 + 1;
  return result;
}

uint64_t sub_45B90(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_45B98(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RCSMessage.SubscriptionInfo.CodingKeys()
{
  return &type metadata for RCSMessage.SubscriptionInfo.CodingKeys;
}

unint64_t sub_45BB8()
{
  unint64_t result = qword_775B0;
  if (!qword_775B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_60984, &type metadata for RCSMessage.SubscriptionInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_775B0);
  }

  return result;
}

unint64_t sub_45C00()
{
  unint64_t result = qword_775B8;
  if (!qword_775B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_60A3C, &type metadata for RCSMessage.Coordinates.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_775B8);
  }

  return result;
}

unint64_t sub_45C48()
{
  unint64_t result = qword_775C0;
  if (!qword_775C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_60AF4, &type metadata for RCSMessage.Typing.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_775C0);
  }

  return result;
}

unint64_t sub_45C90()
{
  unint64_t result = qword_775C8;
  if (!qword_775C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_60BAC, &type metadata for RCSGroup.Icon.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_775C8);
  }

  return result;
}

unint64_t sub_45CD8()
{
  unint64_t result = qword_775D0;
  if (!qword_775D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_60B1C, &type metadata for RCSGroup.Icon.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_775D0);
  }

  return result;
}

unint64_t sub_45D20()
{
  unint64_t result = qword_775D8;
  if (!qword_775D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_60B44, &type metadata for RCSGroup.Icon.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_775D8);
  }

  return result;
}

unint64_t sub_45D68()
{
  unint64_t result = qword_775E0;
  if (!qword_775E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_60A64, &type metadata for RCSMessage.Typing.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_775E0);
  }

  return result;
}

unint64_t sub_45DB0()
{
  unint64_t result = qword_775E8;
  if (!qword_775E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_60A8C, &type metadata for RCSMessage.Typing.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_775E8);
  }

  return result;
}

unint64_t sub_45DF8()
{
  unint64_t result = qword_775F0;
  if (!qword_775F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_609AC, &type metadata for RCSMessage.Coordinates.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_775F0);
  }

  return result;
}

unint64_t sub_45E40()
{
  unint64_t result = qword_775F8;
  if (!qword_775F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_609D4, &type metadata for RCSMessage.Coordinates.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_775F8);
  }

  return result;
}

unint64_t sub_45E88()
{
  unint64_t result = qword_77600;
  if (!qword_77600)
  {
    unint64_t result = swift_getWitnessTable(&unk_608F4, &type metadata for RCSMessage.SubscriptionInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_77600);
  }

  return result;
}

unint64_t sub_45ED0()
{
  unint64_t result = qword_77608;
  if (!qword_77608)
  {
    unint64_t result = swift_getWitnessTable(&unk_6091C, &type metadata for RCSMessage.SubscriptionInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_77608);
  }

  return result;
}

unint64_t sub_45F14()
{
  unint64_t result = qword_77610;
  if (!qword_77610)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RCSMessage.ContentType,  &type metadata for RCSMessage.ContentType);
    atomic_store(result, (unint64_t *)&qword_77610);
  }

  return result;
}

unint64_t sub_45F58()
{
  unint64_t result = qword_77620;
  if (!qword_77620)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_77620);
  }

  return result;
}

RCSServiceSession *RCSRichCards.files()()
{
  uint64_t v238 = type metadata accessor for RCSFile.DispositionInformation(0LL);
  uint64_t v1 = __chkstk_darwin(v238);
  id v226 = (char *)&v226 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v1);
  id v227 = (char *)&v226 - v3;
  uint64_t v4 = sub_5C28(&qword_76498);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v231 = (uint64_t)&v226 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v243 = (uint64_t)&v226 - v7;
  uint64_t v8 = type metadata accessor for RCSFile(0LL);
  uint64_t v236 = *(void *)(v8 - 8);
  uint64_t v237 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v230 = (uint64_t)&v226 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v229 = (uint64_t)&v226 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v242 = (uint64_t)&v226 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  id v235 = (char *)&v226 - v16;
  __chkstk_darwin(v15);
  uint64_t v241 = (uint64_t)&v226 - v17;
  uint64_t v18 = sub_5C28(&qword_763A0);
  uint64_t v19 = __chkstk_darwin(v18);
  id v21 = (char *)&v226 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  id v23 = (char *)&v226 - v22;
  uint64_t v24 = type metadata accessor for URL(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = __chkstk_darwin(v24);
  v240 = (char *)&v226 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26);
  unsigned __int8 v244 = (char *)&v226 - v28;
  id v29 = [*(id *)(v0 + 16) cards];
  uint64_t v30 = type metadata accessor for IMRichCard(0LL);
  uint64_t v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v29, v30);

  if ((unint64_t)v31 >> 62)
  {
LABEL_62:
    if (v31 < 0) {
      uint64_t v218 = v31;
    }
    else {
      uint64_t v218 = v31 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v39 = _CocoaArrayWrapper.endIndex.getter(v218);
    swift_bridgeObjectRelease((RCSServiceSession *)v31, v219, v220, v221, v222, v223, v224, v225);
    if (v39) {
      goto LABEL_3;
    }
LABEL_66:
    swift_bridgeObjectRelease((RCSServiceSession *)v31, v32, v33, v34, v35, v36, v37, v38);
    return (RCSServiceSession *)_swiftEmptyArrayStorage;
  }

  uint64_t v39 = *(void *)((char *)&dword_10 + (v31 & 0xFFFFFFFFFFFFF8LL));
  if (!v39) {
    goto LABEL_66;
  }
LABEL_3:
  unint64_t v246 = v31 & 0xC000000000000001LL;
  id v250 = (RCSServiceSession *)_swiftEmptyArrayStorage;
  uint64_t v40 = 4LL;
  id v234 = v21;
  id v233 = v23;
  uint64_t v247 = v25;
  uint64_t v248 = v24;
  uint64_t v232 = v31;
  uint64_t v245 = v39;
  while (1)
  {
    uint64_t v48 = v40 - 4;
    if (v246) {
      id v49 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v40 - 4, v31);
    }
    else {
      id v49 = *(id *)(v31 + 8 * v40);
    }
    unsigned __int8 v50 = v49;
    if (__OFADD__(v48, 1LL))
    {
      __break(1u);
      goto LABEL_62;
    }

    uint64_t v251 = v40 - 3;
    id v51 = [v49 media];
    if (v51) {
      break;
    }
LABEL_32:
    id v133 = [v50 media];
    if (v133
      && (uint64_t v134 = v133,
          id v135 = [v133 thumbnailUrl],
          v134,
          v135))
    {
      uint64_t v249 = v40;
      id v136 = v50;
      uint64_t v137 = v48;
      uint64_t v138 = static String._unconditionallyBridgeFromObjectiveC(_:)(v135);
      uint64_t v140 = v139;

      URL.init(string:)(v138, v140);
      swift_bridgeObjectRelease(v140, v141, v142, v143, v144, v145, v146, v147);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v21, 1LL, v24) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v240, v21, v24);
        uint64_t v252 = v137;
        uint64_t v253 = 0x69616E626D756874LL;
        unint64_t v254 = 0xEA00000000005F6CLL;
        v148._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
        object = (RCSServiceSession *)v148._object;
        String.append(_:)(v148);
        swift_bridgeObjectRelease(object, v150, v151, v152, v153, v154, v155, v156);
        uint64_t v158 = v253;
        id v157 = (RCSServiceSession *)v254;
        unsigned __int8 v159 = (void *)objc_opt_self(&OBJC_CLASS___IMFileManager);
        swift_bridgeObjectRetain();
        unint64_t result = (RCSServiceSession *)[v159 defaultHFSFileManager];
        if (!result) {
          goto LABEL_68;
        }
        SEL v160 = result;
        id v161 = v136;
        id v162 = [v136 media];
        if (v162)
        {
          id v163 = v162;
          NSString v164 = [v162 thumbnailContentType];

          uint64_t v40 = v249;
          if (v164)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)(v164);
            unsigned __int8 v166 = v165;

            NSString v164 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v166, v167, v168, v169, v170, v171, v172, v173);
          }
        }

        else
        {
          NSString v164 = 0LL;
          uint64_t v40 = v249;
        }

        id v174 = -[RCSServiceSession pathExtensionForMIMEType:](v160, "pathExtensionForMIMEType:", v164);

        if (v174
          && (NSString v182 = String._bridgeToObjectiveC()(),
              id v183 = [v182 stringByAppendingPathExtension:v174],
              v182,
              v174,
              v183))
        {
          uint64_t v158 = static String._unconditionallyBridgeFromObjectiveC(_:)(v183);
          id v185 = v184;

          swift_bridgeObjectRelease_n(v157, 2LL);
          id v157 = v185;
        }

        else
        {
          swift_bridgeObjectRelease(v157, v175, v176, v177, v178, v179, v180, v181);
        }

        uint64_t v186 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
        unsigned __int8 v187 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v186 - 8) + 56LL);
        v187(v231, 1LL, 1LL, v186);
        id v188 = [v161 media];
        if (v188
          && (uint64_t v189 = v188,
              id v190 = [v188 thumbnailFileSize],
              v189,
              v190))
        {
          id v191 = [v190 integerValue];
        }

        else
        {
          id v191 = 0LL;
        }

        id v192 = [v161 media];
        id v193 = v192;
        id v228 = v161;
        if (v192)
        {
          id v194 = [v192 thumbnailContentType];

          uint64_t v195 = v158;
          if (v194)
          {
            id v193 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v194);
            unint64_t v197 = v196;

LABEL_55:
            uint64_t v198 = v238;
            uint64_t v199 = v226;
            uint64_t v200 = (*(uint64_t (**)(char *, char *, uint64_t))(v247 + 16))( &v226[*(int *)(v238 + 28)],  v240,  v248);
            static Date.distantFuture.getter(v200);
            v199[3] = v193;
            v199[4] = v197;
            uint64_t v201 = *(int *)(v198 + 36);
            uint64_t v202 = (char *)v199 + *(int *)(v198 + 40);
            void *v199 = v191;
            v199[1] = v195;
            v199[2] = v157;
            *((_BYTE *)v199 + v201) = 1;
            *(void *)uint64_t v202 = 0LL;
            v202[8] = 1;
            uint64_t v203 = (uint64_t)v235;
            v187((uint64_t)v235, 1LL, 1LL, v186);
            swift_bridgeObjectRetain();
            sub_46F94(v231, v203);
            sub_34FA8( (uint64_t)v199,  v203 + *(int *)(v237 + 20),  type metadata accessor for RCSFile.DispositionInformation);
            uint64_t v204 = v203;
            uint64_t v205 = v229;
            sub_34FA8(v204, v229, type metadata accessor for RCSFile);
            sub_46FDC(v205, v230);
            id v206 = v250;
            if ((swift_isUniquelyReferenced_nonNull_native(v250) & 1) == 0) {
              id v206 = (RCSServiceSession *)sub_4717C( 0,  *(void *)v206[1].IMDTelephonyServiceSession_opaque + 1LL,  1,  v206,  &qword_776E8,  type metadata accessor for RCSFile);
            }
            id v21 = v234;
            id v23 = v233;
            uint64_t v31 = v232;
            id v207 = v228;
            unint64_t v209 = *(void *)v206[1].IMDTelephonyServiceSession_opaque;
            unint64_t v208 = *(void *)v206[1].state;
            id v250 = v206;
            uint64_t v25 = v247;
            uint64_t v24 = v248;
            if (v209 >= v208 >> 1) {
              id v250 = (RCSServiceSession *)sub_4717C( v208 > 1,  v209 + 1,  1,  v250,  &qword_776E8,  type metadata accessor for RCSFile);
            }
            SEL v210 = v250;
            *(void *)v250[1].IMDTelephonyServiceSession_opaque = v209 + 1;
            sub_34FA8( v230,  (uint64_t)&v210->IMDTelephonyServiceSession_opaque[((*(unsigned __int8 *)(v236 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v236 + 80))
                                                              + *(void *)(v236 + 72) * v209],
              type metadata accessor for RCSFile);
            swift_bridgeObjectRelease(v157, v211, v212, v213, v214, v215, v216, v217);

            sub_4712C(v229);
            (*(void (**)(char *, uint64_t))(v25 + 8))(v240, v24);
            goto LABEL_5;
          }

          id v193 = 0LL;
        }

        else
        {
          uint64_t v195 = v158;
        }

        unint64_t v197 = 0xE000000000000000LL;
        goto LABEL_55;
      }

      sub_46F54((uint64_t)v21);
      uint64_t v40 = v249;
    }

    else
    {
    }

uint64_t RCSRichCards.attributes.getter()
{
  uint64_t v1 = v0;
  if (qword_76BA0 != -1) {
    swift_once(&qword_76BA0, sub_21D60);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_6298(v2, (uint64_t)static Logger.chatbot);
  uint64_t v3 = swift_retain_n(v0, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v6 = 134217984;
    id v7 = [*(id *)(v1 + 16) cards];
    uint64_t v8 = type metadata accessor for IMRichCard(0LL);
    uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

    if ((unint64_t)v9 >> 62)
    {
      if (v9 < 0) {
        uint64_t v21 = v9;
      }
      else {
        uint64_t v21 = v9 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v21);
      swift_release(v1);
      swift_bridgeObjectRelease((RCSServiceSession *)v9, v22, v23, v24, v25, v26, v27, v28);
    }

    else
    {
      uint64_t v10 = *(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFF8LL));
      swift_release(v1);
    }

    swift_bridgeObjectRelease((RCSServiceSession *)v9, v11, v12, v13, v14, v15, v16, v17);
    uint64_t v29 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
    swift_release(v1);
    _os_log_impl(&dword_0, v4, v5, "Apply %ld rich cards attributes", v6, 0xCu);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v1, 2LL);
  }

  id v18 = [*(id *)(v1 + 16) dictionaryRepresentation];
  uint64_t v19 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v18,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  return v19;
}

id RCSSuggestedReply.chipReply.getter()
{
  return *(id *)(v0 + 16);
}

uint64_t sub_46F54(uint64_t a1)
{
  uint64_t v2 = sub_5C28(&qword_763A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_46F94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_5C28(&qword_76498);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_46FDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RCSFile(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

RCSServiceSession *sub_47020( RCSServiceSession *result, int64_t a2, char a3, RCSServiceSession *a4, void *a5, void *a6, void *a7, unsigned __int8 a8)
{
  char v9 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v11 = a2;
    goto LABEL_8;
  }

  unint64_t v10 = *(void *)a4[1].state;
  uint64_t v11 = v10 >> 1;
  if (v11 + 0x4000000000000000LL >= 0)
  {
    uint64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v12 = *(void *)a4[1].IMDTelephonyServiceSession_opaque;
    if (v11 <= v12) {
      uint64_t v13 = *(void *)a4[1].IMDTelephonyServiceSession_opaque;
    }
    else {
      uint64_t v13 = v11;
    }
    if (v13)
    {
      uint64_t v14 = sub_5C28(&qword_776F0);
      uint64_t v15 = (RCSServiceSession *)swift_allocObject(v14, 16 * v13 + 32, 7LL);
      int64_t v16 = j__malloc_size(v15);
      uint64_t v17 = v16 - 32;
      if (v16 < 32) {
        uint64_t v17 = v16 - 17;
      }
      *(void *)v15[1].IMDTelephonyServiceSession_opaque = v12;
      *(void *)v15[1].state = 2 * (v17 >> 4);
      IMDTelephonyServiceSession_opaque = v15[2].IMDTelephonyServiceSession_opaque;
      if ((v9 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v15 = (RCSServiceSession *)_swiftEmptyArrayStorage;
      IMDTelephonyServiceSession_opaque = (unsigned __int8 *)&_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        uint64_t v19 = a4 + 2;
        if (v15 != a4 || IMDTelephonyServiceSession_opaque >= a4[v12 + 2].IMDTelephonyServiceSession_opaque) {
          memmove(IMDTelephonyServiceSession_opaque, v19, 16 * v12);
        }
        *(void *)a4[1].IMDTelephonyServiceSession_opaque = 0LL;
        goto LABEL_24;
      }
    }

    sub_473BC(0LL, v12, (unint64_t)IMDTelephonyServiceSession_opaque, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4, (SEL)v19, IMDTelephonyServiceSession_opaque, a4, a5, a6, a7, a8);
    return v15;
  }

  __break(1u);
  return result;
}

uint64_t sub_4712C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RCSFile(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_47168(char a1, int64_t a2, char a3, RCSServiceSession *a4)
{
  return sub_4717C(a1, a2, a3, a4, &qword_776E0, type metadata accessor for RCSMessage);
}

uint64_t sub_4717C( char a1, int64_t a2, char a3, RCSServiceSession *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = *(void *)a4[1].state;
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v10 = a2;
  }

  uint64_t v11 = *(void *)a4[1].IMDTelephonyServiceSession_opaque;
  if (v10 <= v11) {
    uint64_t v12 = *(void *)a4[1].IMDTelephonyServiceSession_opaque;
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    id v18 = (RCSServiceSession *)_swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v13 = sub_5C28(a5);
  uint64_t v14 = *(void *)(a6(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  id v18 = (RCSServiceSession *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  size_t v19 = j__malloc_size(v18);
  if (!v15) {
    goto LABEL_29;
  }
  if (v19 - v17 == 0x8000000000000000LL && v15 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  *(void *)v18[1].IMDTelephonyServiceSession_opaque = v11;
  *(void *)v18[1].state = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  uint64_t v21 = a6(0LL);
  uint64_t v26 = *(void *)(v21 - 8);
  unint64_t v27 = (*(unsigned __int8 *)(v26 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  unsigned __int8 v28 = (char *)&v18->IMDTelephonyServiceSession_opaque[v27];
  if ((a1 & 1) != 0)
  {
    uint64_t v29 = (void *)v21;
    uint64_t v30 = (const char *)&a4->IMDTelephonyServiceSession_opaque[v27];
    if (v18 < a4 || v28 >= &v30[*(void *)(v26 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(&v18->IMDTelephonyServiceSession_opaque[v27], v30, v11, v21);
    }

    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(&v18->IMDTelephonyServiceSession_opaque[v27]);
    }

    *(void *)a4[1].IMDTelephonyServiceSession_opaque = 0LL;
  }

  else
  {
    sub_474C4(0LL, v11, (unint64_t)v28, (uint64_t)a4, a6);
  }

  swift_bridgeObjectRelease(a4, v30, v28, v29, v22, v23, v24, v25);
  return (uint64_t)v18;
}

uint64_t sub_47388(char a1, int64_t a2, char a3, RCSServiceSession *a4)
{
  return sub_4717C(a1, a2, a3, a4, &qword_776D8, type metadata accessor for TypingIndicator);
}

uint64_t type metadata accessor for RCSRichCards()
{
  return objc_opt_self(&OBJC_CLASS____TtC7CoreRCS12RCSRichCards);
}

uint64_t sub_473BC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v6 = a4 + 16 * a1 + 32;
    unint64_t v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_5C28(&qword_776F8);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_474C4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v9 = *(void *)(a5(0LL) - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 72);
  unint64_t v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  uint64_t v13 = v11 * v5;
  unint64_t v14 = a3 + v13;
  unint64_t v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_475DC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for RCSFile.DispositionInformation(0LL);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  unint64_t v7 = (char *)&v50 - v6;
  uint64_t v8 = sub_5C28(&qword_76580);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UTType(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v50 - v16;
  uint64_t v18 = *(void *)(v1 + 24);
  uint64_t v19 = *(void *)(v1 + 32);
  uint64_t v20 = swift_bridgeObjectRetain();
  static UTType.data.getter(v20);
  UTType.init(mimeType:conformingTo:)(v18, v19, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11) == 1)
  {
    sub_1231C((uint64_t)v10, &qword_76580);
  }

  else
  {
    uint64_t v21 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))(v17, v10, v11);
    uint64_t v22 = UTType.preferredFilenameExtension.getter(v21);
    uint64_t v24 = v23;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
    if (v24) {
      return v22;
    }
  }

  if (qword_76B90 != -1) {
    swift_once(&qword_76B90, sub_21C04);
  }
  uint64_t v25 = type metadata accessor for Logger(0LL);
  sub_6298(v25, (uint64_t)static Logger.rcs);
  sub_C934(v1, (uint64_t)v7, type metadata accessor for RCSFile.DispositionInformation);
  uint64_t v26 = sub_C934(v1, (uint64_t)v5, type metadata accessor for RCSFile.DispositionInformation);
  unint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = swift_slowAlloc(22LL, -1LL);
    uint64_t v30 = swift_slowAlloc(64LL, -1LL);
    uint64_t v51 = v30;
    *(_DWORD *)uint64_t v29 = 136315394;
    uint64_t v31 = *((void *)v7 + 3);
    uint64_t v32 = (RCSServiceSession *)*((void *)v7 + 4);
    swift_bridgeObjectRetain();
    uint64_t v50 = sub_B004(v31, (unint64_t)v32, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51);
    swift_bridgeObjectRelease(v32, v33, v34, v35, v36, v37, v38, v39);
    sub_11324((uint64_t)v7, type metadata accessor for RCSFile.DispositionInformation);
    *(_WORD *)(v29 + 12) = 2080;
    uint64_t v40 = *((void *)v5 + 1);
    id v41 = (RCSServiceSession *)*((void *)v5 + 2);
    swift_bridgeObjectRetain();
    uint64_t v50 = sub_B004(v40, (unint64_t)v41, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51);
    swift_bridgeObjectRelease(v41, v42, v43, v44, v45, v46, v47, v48);
    sub_11324((uint64_t)v5, type metadata accessor for RCSFile.DispositionInformation);
    _os_log_impl( &dword_0,  v27,  v28,  "Failed to find file's UTType or path extension for mimetype %s, filename %s",  (uint8_t *)v29,  0x16u);
    swift_arrayDestroy(v30, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  else
  {
    sub_11324((uint64_t)v7, type metadata accessor for RCSFile.DispositionInformation);
    sub_11324((uint64_t)v5, type metadata accessor for RCSFile.DispositionInformation);
  }

  return 0LL;
}

uint64_t RCSFile.DispositionInformation.init(fileSizeInBytes:originalFileName:mimeType:dataUrl:validUntil:disposition:timeLength:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, void *a9@<X8>, uint64_t a10, char a11)
{
  uint64_t v18 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
  uint64_t v19 = (char *)a9 + v18[10];
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  uint64_t v20 = (char *)a9 + v18[7];
  uint64_t v21 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32LL))(v20, a6, v21);
  uint64_t v22 = (char *)a9 + v18[8];
  uint64_t v23 = type metadata accessor for Date(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32LL))(v22, a7, v23);
  *((_BYTE *)a9 + v18[9]) = a8;
  *(void *)uint64_t v19 = a10;
  v19[8] = a11 & 1;
  return result;
}

uint64_t type metadata accessor for RCSFile.DispositionInformation(uint64_t a1)
{
  return sub_40308(a1, qword_77930, (uint64_t)&nominal type descriptor for RCSFile.DispositionInformation);
}

uint64_t RCSFile.init(thumbnail:disposition:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(a3, 1LL, 1LL, v6);
  sub_46F94(a1, a3);
  uint64_t v7 = type metadata accessor for RCSFile(0LL);
  return sub_34FA8(a2, a3 + *(int *)(v7 + 20), type metadata accessor for RCSFile.DispositionInformation);
}

uint64_t type metadata accessor for RCSFile.ThumbnailInformation(uint64_t a1)
{
  return sub_40308(a1, qword_77898, (uint64_t)&nominal type descriptor for RCSFile.ThumbnailInformation);
}

uint64_t type metadata accessor for RCSFile(uint64_t a1)
{
  return sub_40308(a1, (uint64_t *)&unk_77800, (uint64_t)&nominal type descriptor for RCSFile);
}

uint64_t RCSFile.DispositionInformation.fileSizeInBytes.getter()
{
  return *(void *)v0;
}

uint64_t RCSFile.DispositionInformation.fileSizeInBytes.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*RCSFile.ThumbnailInformation.fileSizeInBytes.modify())()
{
  return nullsub_27;
}

uint64_t RCSFile.ThumbnailInformation.contentType.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain(*(void *)(v0 + 16));
  return v1;
}

uint64_t RCSFile.ThumbnailInformation.contentType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 16));
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a2;
  return result;
}

uint64_t (*RCSFile.ThumbnailInformation.contentType.modify())()
{
  return nullsub_28;
}

uint64_t RCSFile.ThumbnailInformation.dataUrl.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for RCSFile.ThumbnailInformation(0LL) + 24);
  uint64_t v4 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t RCSFile.ThumbnailInformation.dataUrl.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for RCSFile.ThumbnailInformation(0LL) + 24);
  uint64_t v4 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
}

uint64_t (*RCSFile.ThumbnailInformation.dataUrl.modify())()
{
  return nullsub_29;
}

uint64_t RCSFile.ThumbnailInformation.validUntil.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_4868C( type metadata accessor for RCSFile.ThumbnailInformation,  (uint64_t (*)(void))&type metadata accessor for Date,  a1);
}

uint64_t RCSFile.ThumbnailInformation.validUntil.setter(uint64_t a1)
{
  return sub_486F8( a1,  type metadata accessor for RCSFile.ThumbnailInformation,  (uint64_t (*)(void))&type metadata accessor for Date);
}

uint64_t (*RCSFile.ThumbnailInformation.validUntil.modify())()
{
  return nullsub_30;
}

uint64_t RCSFile.ThumbnailInformation.init(fileSizeInBytes:contentType:dataUrl:validUntil:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  uint64_t v9 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
  uint64_t v10 = (char *)a6 + *(int *)(v9 + 24);
  uint64_t v11 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))(v10, a4, v11);
  uint64_t v12 = (char *)a6 + *(int *)(v9 + 28);
  uint64_t v13 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))(v12, a5, v13);
}

uint64_t sub_47D78()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_47DB4 + 4 * byte_60D60[*v0]))( 0x657A6953656C6966LL,  0xEF73657479426E49LL);
}

uint64_t sub_47DB4()
{
  return 0x54746E65746E6F63LL;
}

uint64_t sub_47DD4()
{
  return 0x6C725561746164LL;
}

uint64_t sub_47DEC()
{
  return 0x746E5564696C6176LL;
}

uint64_t sub_47E08@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_4C388(a1, a2);
  *a3 = result;
  return result;
}

void sub_47E2C(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_47E38(uint64_t a1)
{
  unint64_t v2 = sub_48068();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_47E60(uint64_t a1)
{
  unint64_t v2 = sub_48068();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RCSFile.ThumbnailInformation.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_5C28(&qword_77700);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_CA38(a1, v9);
  unint64_t v11 = sub_48068();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for RCSFile.ThumbnailInformation.CodingKeys,  &type metadata for RCSFile.ThumbnailInformation.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  char v27 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v27, v5);
  if (!v2)
  {
    uint64_t v13 = v3[1];
    uint64_t v14 = v3[2];
    char v26 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v26, v5);
    uint64_t v15 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
    uint64_t v16 = (char *)v3 + *(int *)(v15 + 24);
    char v25 = 2;
    uint64_t v17 = type metadata accessor for URL(0LL);
    uint64_t v18 = sub_219FC( &qword_77710,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v25, v5, v17, v18);
    uint64_t v19 = (char *)v3 + *(int *)(v15 + 28);
    char v24 = 3;
    uint64_t v20 = type metadata accessor for Date(0LL);
    uint64_t v21 = sub_219FC( &qword_77718,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v24, v5, v20, v21);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_48068()
{
  unint64_t result = qword_77708;
  if (!qword_77708)
  {
    unint64_t result = swift_getWitnessTable(&unk_612EC, &type metadata for RCSFile.ThumbnailInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_77708);
  }

  return result;
}

void RCSFile.ThumbnailInformation.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v29 = type metadata accessor for Date(0LL);
  uint64_t v27 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v32 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v30 = *(void *)(v4 - 8);
  uint64_t v31 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v34 = sub_5C28(&qword_77720);
  uint64_t v7 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_CA38(a1, v14);
  unint64_t v15 = sub_48068();
  SEL v33 = v9;
  uint64_t v16 = v35;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for RCSFile.ThumbnailInformation.CodingKeys,  &type metadata for RCSFile.ThumbnailInformation.CodingKeys,  v15,  v14,  v13);
  if (v16)
  {
    sub_12204(a1);
  }

  else
  {
    uint64_t v35 = v10;
    uint64_t v17 = v7;
    uint64_t v18 = v30;
    uint64_t v19 = v31;
    uint64_t v20 = a1;
    uint64_t v21 = v32;
    char v39 = 0;
    *(void *)uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v39, v34);
    char v38 = 1;
    *((void *)v12 + 1) = KeyedDecodingContainer.decode(_:forKey:)(&v38, v34);
    *((void *)v12 + 2) = v22;
    char v37 = 2;
    uint64_t v23 = sub_219FC( &qword_77728,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v6, v19, &v37, v34, v19, v23);
    (*(void (**)(char *, void *, uint64_t))(v18 + 32))(&v12[*(int *)(v35 + 24)], v6, v19);
    char v36 = 3;
    uint64_t v24 = sub_219FC( &qword_77730,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v25 = v29;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v21, v29, &v36, v34, v29, v24);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v33, v34);
    (*(void (**)(char *, void *, uint64_t))(v27 + 32))(&v12[*(int *)(v35 + 28)], v21, v25);
    sub_C934((uint64_t)v12, v28, type metadata accessor for RCSFile.ThumbnailInformation);
    sub_12204(v20);
    sub_11324((uint64_t)v12, type metadata accessor for RCSFile.ThumbnailInformation);
  }

void sub_48410(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_48424(void *a1)
{
  return RCSFile.ThumbnailInformation.encode(to:)(a1);
}

CoreRCS::RCSFile::Disposition_optional __swiftcall RCSFile.Disposition.init(rawValue:)(Swift::Int rawValue)
{
  else {
    return (CoreRCS::RCSFile::Disposition_optional)3;
  }
}

uint64_t RCSFile.Disposition.rawValue.getter(unsigned __int8 a1)
{
  return a1 - 1LL;
}

Swift::Int sub_48458()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1 - 1);
  return Hasher._finalize()();
}

void sub_4849C()
{
}

Swift::Int sub_484C8(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2 - 1);
  return Hasher._finalize()();
}

void *sub_48508@<X0>(void *result@<X0>, _BYTE *a2@<X8>)
{
  else {
    LOBYTE(v2) = 3;
  }
  *a2 = v2;
  return result;
}

void sub_48524(void *a1@<X8>)
{
  *a1 = *v1 - 1LL;
}

uint64_t sub_48534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_4C9C4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_48590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_4C9C4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t (*RCSFile.DispositionInformation.fileSizeInBytes.modify())()
{
  return nullsub_31;
}

uint64_t (*RCSFile.DispositionInformation.originalFileName.modify())()
{
  return nullsub_32;
}

uint64_t RCSFile.DispositionInformation.mimeType.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain(*(void *)(v0 + 32));
  return v1;
}

uint64_t RCSFile.DispositionInformation.mimeType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 32));
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t (*RCSFile.DispositionInformation.mimeType.modify())()
{
  return nullsub_33;
}

uint64_t RCSFile.DispositionInformation.dataUrl.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_4868C( type metadata accessor for RCSFile.DispositionInformation,  (uint64_t (*)(void))&type metadata accessor for URL,  a1);
}

uint64_t sub_4868C@<X0>( uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = v3 + *(int *)(a1(0LL) + 28);
  uint64_t v7 = a2(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(a3, v6, v7);
}

uint64_t RCSFile.DispositionInformation.dataUrl.setter(uint64_t a1)
{
  return sub_486F8( a1,  type metadata accessor for RCSFile.DispositionInformation,  (uint64_t (*)(void))&type metadata accessor for URL);
}

uint64_t sub_486F8(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a2(0LL) + 28);
  uint64_t v7 = a3(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40LL))(v6, a1, v7);
}

uint64_t (*RCSFile.DispositionInformation.dataUrl.modify())()
{
  return nullsub_34;
}

uint64_t RCSFile.DispositionInformation.validUntil.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for RCSFile.DispositionInformation(0LL) + 32);
  uint64_t v4 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t RCSFile.DispositionInformation.validUntil.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for RCSFile.DispositionInformation(0LL) + 32);
  uint64_t v4 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
}

uint64_t (*RCSFile.DispositionInformation.validUntil.modify())()
{
  return nullsub_35;
}

uint64_t RCSFile.DispositionInformation.disposition.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for RCSFile.DispositionInformation(0LL) + 36));
}

uint64_t RCSFile.DispositionInformation.disposition.setter(char a1)
{
  uint64_t result = type metadata accessor for RCSFile.DispositionInformation(0LL);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*RCSFile.DispositionInformation.disposition.modify())()
{
  return nullsub_36;
}

uint64_t RCSFile.DispositionInformation.timeLength.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for RCSFile.DispositionInformation(0LL) + 40));
}

uint64_t RCSFile.DispositionInformation.timeLength.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for RCSFile.DispositionInformation(0LL);
  uint64_t v6 = v2 + *(int *)(result + 40);
  *(void *)uint64_t v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*RCSFile.DispositionInformation.timeLength.modify())()
{
  return nullsub_37;
}

uint64_t sub_48944(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_48984 + 4 * byte_60D64[a1]))( 0x657A6953656C6966LL,  0xEF73657479426E49LL);
}

unint64_t sub_48984()
{
  return 0xD000000000000010LL;
}

uint64_t sub_489A0()
{
  return 0x65707954656D696DLL;
}

uint64_t sub_489B8()
{
  return 0x6C725561746164LL;
}

uint64_t sub_489D0()
{
  return 0x746E5564696C6176LL;
}

uint64_t sub_489F0()
{
  return 0x7469736F70736964LL;
}

uint64_t sub_48A10()
{
  return 0x676E654C656D6974LL;
}

uint64_t sub_48A2C()
{
  return sub_48944(*v0);
}

uint64_t sub_48A34@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_4C588(a1, a2);
  *a3 = result;
  return result;
}

void sub_48A58(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_48A64(uint64_t a1)
{
  unint64_t v2 = sub_48D34();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_48A8C(uint64_t a1)
{
  unint64_t v2 = sub_48D34();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RCSFile.DispositionInformation.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_5C28(&qword_77738);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_CA38(a1, v9);
  unint64_t v11 = sub_48D34();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for RCSFile.DispositionInformation.CodingKeys,  &type metadata for RCSFile.DispositionInformation.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  char v37 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v37, v5);
  if (!v2)
  {
    uint64_t v13 = v3[1];
    uint64_t v14 = v3[2];
    char v36 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v36, v5);
    uint64_t v15 = v3[3];
    uint64_t v16 = v3[4];
    char v35 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v35, v5);
    uint64_t v17 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
    uint64_t v18 = (char *)v3 + v17[7];
    char v34 = 3;
    uint64_t v19 = type metadata accessor for URL(0LL);
    uint64_t v20 = sub_219FC( &qword_77710,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v18, &v34, v5, v19, v20);
    uint64_t v21 = (char *)v3 + v17[8];
    char v33 = 4;
    uint64_t v22 = type metadata accessor for Date(0LL);
    uint64_t v23 = sub_219FC( &qword_77718,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v33, v5, v22, v23);
    char v32 = *((_BYTE *)v3 + v17[9]);
    char v31 = 5;
    unint64_t v24 = sub_48D78();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v32, &v31, v5, &type metadata for RCSFile.Disposition, v24);
    uint64_t v25 = (char *)v3 + v17[10];
    uint64_t v26 = *(void *)v25;
    uint64_t v27 = v25[8];
    char v30 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, v27, &v30, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_48D34()
{
  unint64_t result = qword_77740;
  if (!qword_77740)
  {
    unint64_t result = swift_getWitnessTable(&unk_6129C, &type metadata for RCSFile.DispositionInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_77740);
  }

  return result;
}

unint64_t sub_48D78()
{
  unint64_t result = qword_77748;
  if (!qword_77748)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RCSFile.Disposition,  &type metadata for RCSFile.Disposition);
    atomic_store(result, (unint64_t *)&qword_77748);
  }

  return result;
}

void RCSFile.DispositionInformation.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v36 = a2;
  uint64_t v40 = type metadata accessor for Date(0LL);
  uint64_t v38 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v4 = (uint64_t **)((char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v41 = type metadata accessor for URL(0LL);
  uint64_t v39 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v6 = (uint64_t **)((char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v37 = sub_5C28(&qword_77750);
  uint64_t v7 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v8 = type metadata accessor for RCSFile.DispositionInformation(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  unint64_t v11 = (uint64_t *)((char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v45 = v9;
  uint64_t v12 = *(int *)(v9 + 40);
  SEL v42 = a1;
  id v43 = v11;
  uint64_t v13 = (char *)v11 + v12;
  *(void *)uint64_t v13 = 0LL;
  v13[8] = 1;
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  sub_CA38(a1, v14);
  unint64_t v16 = sub_48D34();
  uint64_t v17 = v44;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for RCSFile.DispositionInformation.CodingKeys,  &type metadata for RCSFile.DispositionInformation.CodingKeys,  v16,  v14,  v15);
  if (v17)
  {
    sub_12204(v42);
  }

  else
  {
    char v34 = (uint64_t *)v13;
    char v35 = v4;
    id v44 = v6;
    BYTE5(v48) = 0;
    uint64_t v18 = v37;
    uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v48 + 5, v37);
    uint64_t v20 = v43;
    *id v43 = v19;
    BYTE4(v48) = 1;
    v20[1] = KeyedDecodingContainer.decode(_:forKey:)((char *)&v48 + 4, v18);
    _OWORD v20[2] = v21;
    BYTE3(v48) = 2;
    v20[3] = KeyedDecodingContainer.decode(_:forKey:)((char *)&v48 + 3, v18);
    v20[4] = v22;
    BYTE2(v48) = 3;
    uint64_t v23 = sub_219FC( &qword_77728,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    unint64_t v24 = v44;
    uint64_t v25 = v41;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v44, v41, (char *)&v48 + 2, v18, v41, v23);
    uint64_t v26 = v45;
    (*(void (**)(char *, void *, uint64_t))(v39 + 32))((char *)v20 + *(int *)(v45 + 28), v24, v25);
    BYTE1(v48) = 4;
    uint64_t v27 = sub_219FC( &qword_77730,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v28 = v35;
    uint64_t v29 = v40;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v35, v40, (char *)&v48 + 1, v18, v40, v27);
    (*(void (**)(char *, void *, uint64_t))(v38 + 32))((char *)v20 + *(int *)(v26 + 32), v28, v29);
    char v47 = 5;
    unint64_t v30 = sub_492D4();
    KeyedDecodingContainer.decode<A>(_:forKey:)( &v48,  &type metadata for RCSFile.Disposition,  &v47,  v37,  &type metadata for RCSFile.Disposition,  v30);
    *((_BYTE *)v20 + *(int *)(v26 + 36)) = v48;
    char v46 = 6;
    uint64_t v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v46, v37);
    LOBYTE(v28) = v32;
    (*(void (**)(void, uint64_t))(v7 + 8))(0LL, v37);
    char v33 = v34;
    *char v34 = v31;
    *((_BYTE *)v33 + 8) = v28 & 1;
    sub_C934((uint64_t)v20, v36, type metadata accessor for RCSFile.DispositionInformation);
    sub_12204(v42);
    sub_11324((uint64_t)v20, type metadata accessor for RCSFile.DispositionInformation);
  }

unint64_t sub_492D4()
{
  unint64_t result = qword_77758;
  if (!qword_77758)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RCSFile.Disposition,  &type metadata for RCSFile.Disposition);
    atomic_store(result, (unint64_t *)&qword_77758);
  }

  return result;
}

void sub_49318(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_4932C(void *a1)
{
  return RCSFile.DispositionInformation.encode(to:)(a1);
}

uint64_t RCSFile.thumbnail.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_4934C(v1, a1);
}

uint64_t sub_4934C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_5C28(&qword_76498);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t RCSFile.thumbnail.setter(uint64_t a1)
{
  return sub_46F94(a1, v1);
}

uint64_t (*RCSFile.thumbnail.modify())()
{
  return nullsub_38;
}

uint64_t RCSFile.disposition.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for RCSFile(0LL);
  return sub_C934(v1 + *(int *)(v3 + 20), a1, type metadata accessor for RCSFile.DispositionInformation);
}

uint64_t RCSFile.disposition.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for RCSFile(0LL) + 20);
  return sub_4941C(a1, v3);
}

uint64_t sub_4941C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RCSFile.DispositionInformation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t (*RCSFile.disposition.modify())()
{
  return nullsub_39;
}

uint64_t sub_4948C()
{
  if (*v0) {
    return 0x7469736F70736964LL;
  }
  else {
    return 0x69616E626D756874LL;
  }
}

uint64_t sub_494D4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_4C8B0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_494F8(uint64_t a1)
{
  unint64_t v2 = sub_496CC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_49520(uint64_t a1)
{
  unint64_t v2 = sub_496CC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RCSFile.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_5C28(&qword_77760);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_CA38(a1, v9);
  unint64_t v11 = sub_496CC();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for RCSFile.CodingKeys,  &type metadata for RCSFile.CodingKeys,  v11,  v9,  v10);
  char v20 = 0;
  uint64_t v12 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
  uint64_t v13 = sub_219FC( &qword_77770,  type metadata accessor for RCSFile.ThumbnailInformation,  (uint64_t)&protocol conformance descriptor for RCSFile.ThumbnailInformation);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3, &v20, v5, v12, v13);
  if (!v2)
  {
    uint64_t v14 = v3 + *(int *)(type metadata accessor for RCSFile(0LL) + 20);
    char v19 = 1;
    uint64_t v15 = type metadata accessor for RCSFile.DispositionInformation(0LL);
    uint64_t v16 = sub_219FC( &qword_77778,  type metadata accessor for RCSFile.DispositionInformation,  (uint64_t)&protocol conformance descriptor for RCSFile.DispositionInformation);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v19, v5, v15, v16);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_496CC()
{
  unint64_t result = qword_77768;
  if (!qword_77768)
  {
    unint64_t result = swift_getWitnessTable(&unk_6124C, &type metadata for RCSFile.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_77768);
  }

  return result;
}

uint64_t RCSFile.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = a2;
  uint64_t v29 = type metadata accessor for RCSFile.DispositionInformation(0LL);
  __chkstk_darwin(v29);
  uint64_t v28 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_5C28(&qword_76498);
  __chkstk_darwin(v4);
  uint64_t v30 = (uint64_t)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = sub_5C28(&qword_77780);
  uint64_t v6 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for RCSFile(0LL);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_CA38(a1, v14);
  unint64_t v15 = sub_496CC();
  uint64_t v16 = v32;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for RCSFile.CodingKeys,  &type metadata for RCSFile.CodingKeys,  v15,  v14,  v13);
  if (v16)
  {
    sub_12204(a1);
    return sub_1231C((uint64_t)v11, &qword_76498);
  }

  else
  {
    uint64_t v32 = v9;
    uint64_t v17 = v6;
    char v19 = v28;
    uint64_t v18 = v29;
    char v34 = 0;
    uint64_t v20 = sub_219FC( &qword_77788,  type metadata accessor for RCSFile.ThumbnailInformation,  (uint64_t)&protocol conformance descriptor for RCSFile.ThumbnailInformation);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v12, &v34, v31, v12, v20);
    sub_46F94(v30, (uint64_t)v11);
    char v33 = 1;
    uint64_t v21 = sub_219FC( &qword_77790,  type metadata accessor for RCSFile.DispositionInformation,  (uint64_t)&protocol conformance descriptor for RCSFile.DispositionInformation);
    uint64_t v22 = (uint64_t)v19;
    uint64_t v23 = v19;
    uint64_t v24 = v31;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v23, v18, &v33, v31, v18, v21);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v8, v24);
    uint64_t v25 = v27;
    sub_34FA8(v22, (uint64_t)&v11[*(int *)(v32 + 20)], type metadata accessor for RCSFile.DispositionInformation);
    sub_C934((uint64_t)v11, v25, type metadata accessor for RCSFile);
    sub_12204(a1);
    return sub_11324((uint64_t)v11, type metadata accessor for RCSFile);
  }

uint64_t sub_499FC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return RCSFile.init(from:)(a1, a2);
}

uint64_t sub_49A10(void *a1)
{
  return RCSFile.encode(to:)(a1);
}

unint64_t RCSFile.userInfoRepresentation(simID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_5C28(&qword_76498);
  __chkstk_darwin(v5);
  uint64_t v92 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v91 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
  uint64_t v93 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  id v89 = (uint64_t *)((char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = sub_5C28(&qword_77798);
  uint64_t inited = swift_initStackObject(v8, &v100);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_61340;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(IMFileTransferUserInfoRCSServiceKey);
  *(void *)(inited + 40) = v10;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMServiceNameRCS);
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v11;
  *(void *)(inited + 56) = v12;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(IMFileTransferUserInfoRCSSIMIDKey);
  *(void *)(inited + 88) = v13;
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 96) = a1;
  *(void *)(inited + 104) = a2;
  uint64_t v81 = IMFileTransferUserInfoRCSFileKey;
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(IMFileTransferUserInfoRCSFileKey);
  *(void *)(inited + 136) = v14;
  uint64_t v88 = v8;
  uint64_t v15 = swift_initStackObject(v8, &v99);
  *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_61350;
  uint64_t v87 = IMFileTransferUserInfoRCSURLKey;
  *(void *)(v15 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(IMFileTransferUserInfoRCSURLKey);
  *(void *)(v15 + 40) = v16;
  uint64_t v17 = (uint64_t *)(v2 + *(int *)(type metadata accessor for RCSFile(0LL) + 20));
  uint64_t v18 = type metadata accessor for RCSFile.DispositionInformation(0LL);
  uint64_t v19 = swift_bridgeObjectRetain();
  uint64_t v20 = URL.absoluteString.getter(v19);
  *(void *)(v15 + 72) = &type metadata for String;
  *(void *)(v15 + 48) = v20;
  *(void *)(v15 + 56) = v21;
  uint64_t v86 = IMFileTransferUserInfoRCSMIMETypeKey;
  *(void *)(v15 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(IMFileTransferUserInfoRCSMIMETypeKey);
  *(void *)(v15 + 88) = v22;
  uint64_t v23 = v17[3];
  uint64_t v24 = v17[4];
  *(void *)(v15 + 120) = &type metadata for String;
  *(void *)(v15 + 96) = v23;
  *(void *)(v15 + 104) = v24;
  *(void *)(v15 + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(IMFileTransferUserInfoRCSFileNameKey);
  *(void *)(v15 + 136) = v25;
  uint64_t v26 = v17[1];
  uint64_t v27 = v17[2];
  *(void *)(v15 + 168) = &type metadata for String;
  *(void *)(v15 + 144) = v26;
  *(void *)(v15 + 152) = v27;
  uint64_t v85 = IMFileTransferUserInfoRCSFileSizeKey;
  *(void *)(v15 + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(IMFileTransferUserInfoRCSFileSizeKey);
  *(void *)(v15 + 184) = v28;
  uint64_t v29 = *v17;
  *(void *)(v15 + 2swift_weakDestroy(v0 + 16) = &type metadata for Int;
  *(void *)(v15 + 192) = v29;
  uint64_t v83 = IMFileTransferUserInfoRCSValidUntilKey;
  *(void *)(v15 + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(IMFileTransferUserInfoRCSValidUntilKey);
  *(void *)(v15 + 232) = v30;
  uint64_t v31 = (char *)v17 + *(int *)(v18 + 32);
  uint64_t v32 = type metadata accessor for Date(0LL);
  *(void *)(v15 + 264) = v32;
  char v33 = sub_1CECC((void *)(v15 + 240));
  char v34 = *(void (**)(void *, char *, uint64_t))(*(void *)(v32 - 8) + 16LL);
  char v35 = v31;
  uint64_t v84 = v32;
  uint64_t v36 = v32;
  uint64_t v37 = v91;
  uint64_t v38 = (uint64_t)v92;
  __int128 v82 = v34;
  v34(v33, v35, v36);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v39 = sub_20D14(v15);
  uint64_t v40 = sub_5C28(&qword_773D8);
  *(void *)(inited + 168) = v40;
  *(void *)(inited + 144) = v39;
  unint64_t v41 = sub_20D14(inited);
  uint64_t v42 = v90;
  id v43 = (char *)v17 + *(int *)(v18 + 40);
  uint64_t v44 = v93;
  if ((v43[8] & 1) == 0)
  {
    uint64_t v45 = v90;
    uint64_t v46 = *(void *)v43;
    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
    uint64_t v49 = v48;
    if (*(void *)(v41 + 16))
    {
      uint64_t v50 = v47;
      swift_bridgeObjectRetain();
      unint64_t v51 = sub_14490(v50, v49);
      if ((v52 & 1) != 0)
      {
        sub_12224(*(void *)(v41 + 56) + 32 * v51, (uint64_t)&v97);
      }

      else
      {
        __int128 v97 = 0u;
        __int128 v98 = 0u;
      }

      swift_bridgeObjectRelease(v49);
      unint64_t v53 = v41;
    }

    else
    {
      __int128 v97 = 0u;
      __int128 v98 = 0u;
      unint64_t v53 = v48;
    }

    swift_bridgeObjectRelease(v53);
    if (*((void *)&v98 + 1))
    {
      if ((swift_dynamicCast(v95, &v97, (char *)&type metadata for Any + 8, v40, 6LL) & 1) != 0)
      {
        unint64_t v54 = *(void *)&v95[0];
        uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMFileTransferUserInfoRCSTimeLengthKey);
        uint64_t v57 = v56;
        *((void *)&v98 + 1) = &type metadata for Double;
        *(void *)&__int128 v97 = v46;
        sub_121F4(&v97, v95);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v54);
        unint64_t v94 = v54;
        sub_29BB8(v95, v55, v57, isUniquelyReferenced_nonNull_native);
        unint64_t v59 = v94;
        swift_bridgeObjectRelease(v57);
        swift_bridgeObjectRelease(0x8000000000000000LL);
        swift_bridgeObjectRelease(v59);
      }
    }

    else
    {
      sub_1231C((uint64_t)&v97, &qword_76588);
    }

    uint64_t v42 = v45;
  }

  sub_4934C(v42, v38);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v38, 1LL, v37) == 1)
  {
    sub_1231C(v38, &qword_76498);
  }

  else
  {
    uint64_t v60 = v37;
    id v61 = v89;
    sub_34FA8(v38, (uint64_t)v89, type metadata accessor for RCSFile.ThumbnailInformation);
    uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMFileTransferUserInfoRCSThumbnailKey);
    uint64_t v63 = v62;
    uint64_t v64 = swift_initStackObject(v88, &v96);
    *(_OWORD *)(v64 + swift_weakDestroy(v0 + 16) = xmmword_5FAF0;
    uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
    *(void *)(v64 + 32) = v65;
    *(void *)(v64 + 40) = v66;
    uint64_t v67 = URL.absoluteString.getter(v65);
    *(void *)(v64 + 72) = &type metadata for String;
    *(void *)(v64 + 48) = v67;
    *(void *)(v64 + 56) = v68;
    *(void *)(v64 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(v86);
    *(void *)(v64 + 88) = v69;
    uint64_t v70 = v61[1];
    uint64_t v71 = v61[2];
    *(void *)(v64 + 120) = &type metadata for String;
    *(void *)(v64 + 96) = v70;
    *(void *)(v64 + 104) = v71;
    *(void *)(v64 + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
    *(void *)(v64 + 136) = v72;
    uint64_t v73 = *v61;
    *(void *)(v64 + 168) = &type metadata for Int;
    *(void *)(v64 + 144) = v73;
    *(void *)(v64 + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
    *(void *)(v64 + 184) = v74;
    unsigned __int8 v75 = (char *)v61 + *(int *)(v60 + 28);
    uint64_t v76 = v84;
    *(void *)(v64 + 2swift_weakDestroy(v0 + 16) = v84;
    __int128 v77 = sub_1CECC((void *)(v64 + 192));
    v82(v77, v75, v76);
    swift_bridgeObjectRetain();
    unint64_t v78 = sub_20D14(v64);
    *((void *)&v98 + 1) = v40;
    *(void *)&__int128 v97 = v78;
    sub_121F4(&v97, v95);
    char v79 = swift_isUniquelyReferenced_nonNull_native(v41);
    unint64_t v94 = v41;
    sub_29BB8(v95, v93, v63, v79);
    unint64_t v41 = v94;
    swift_bridgeObjectRelease(v63);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    sub_11324((uint64_t)v61, type metadata accessor for RCSFile.ThumbnailInformation);
  }

  return v41;
}

uint64_t RCSFile.isAudio.getter()
{
  return sub_49FF8((void (*)(uint64_t))&static UTType.audio.getter);
}

uint64_t RCSFile.isMovie.getter()
{
  return sub_49FF8((void (*)(uint64_t))&static UTType.movie.getter);
}

uint64_t sub_49FF8(void (*a1)(uint64_t))
{
  uint64_t v3 = sub_5C28(&qword_76580);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UTType(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v13 = v1 + *(int *)(type metadata accessor for RCSFile(0LL) + 20);
  uint64_t v14 = *(void *)(v13 + 24);
  uint64_t v15 = *(void *)(v13 + 32);
  uint64_t v16 = swift_bridgeObjectRetain();
  static UTType.data.getter(v16);
  UTType.init(mimeType:conformingTo:)(v14, v15, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    sub_1231C((uint64_t)v5, &qword_76580);
    char v17 = 0;
  }

  else
  {
    uint64_t v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 32))(v12, v5, v6);
    a1(v18);
    char v17 = UTType.conforms(to:)(v10);
    uint64_t v19 = *(void (**)(char *, uint64_t))(v7 + 8);
    v19(v10, v6);
    v19(v12, v6);
  }

  return v17 & 1;
}

unint64_t sub_4A178()
{
  unint64_t result = qword_777A0;
  if (!qword_777A0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RCSFile.Disposition,  &type metadata for RCSFile.Disposition);
    atomic_store(result, (unint64_t *)&qword_777A0);
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for RCSFile(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v10);
  }

  else
  {
    uint64_t v7 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1LL, v7))
    {
      uint64_t v9 = sub_5C28(&qword_76498);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64LL));
    }

    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
      uint64_t v11 = *(int *)(v7 + 24);
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for URL(0LL);
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL);
      swift_bridgeObjectRetain();
      v15(v12, v13, v14);
      uint64_t v16 = *(int *)(v7 + 28);
      char v17 = (char *)a1 + v16;
      uint64_t v18 = (char *)a2 + v16;
      uint64_t v19 = type metadata accessor for Date(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16LL))(v17, v18, v19);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0LL, 1LL, v7);
    }

    uint64_t v20 = *(int *)(a3 + 20);
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    *(_OWORD *)uint64_t v21 = *(_OWORD *)((char *)a2 + v20);
    uint64_t v24 = *(uint64_t *)((char *)a2 + v20 + 16);
    uint64_t v23 = *((void *)v22 + 3);
    *((void *)v21 + 2) = v24;
    *((void *)v21 + 3) = v23;
    *((void *)v21 + 4) = *((void *)v22 + 4);
    uint64_t v25 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
    uint64_t v26 = v25[7];
    uint64_t v27 = &v21[v26];
    uint64_t v28 = &v22[v26];
    uint64_t v29 = type metadata accessor for URL(0LL);
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16LL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v30(v27, v28, v29);
    uint64_t v31 = v25[8];
    uint64_t v32 = &v21[v31];
    char v33 = &v22[v31];
    uint64_t v34 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16LL))(v32, v33, v34);
    v21[v25[9]] = v22[v25[9]];
    uint64_t v35 = v25[10];
    uint64_t v36 = &v21[v35];
    uint64_t v37 = &v22[v35];
    v36[8] = v37[8];
    *(void *)uint64_t v36 = *(void *)v37;
  }

  return a1;
}

uint64_t destroy for RCSFile(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, 1LL, v4))
  {
    swift_bridgeObjectRelease(*(RCSServiceSession **)(a1 + 16), v5, v6, v7, v8, v9, v10, v11);
    uint64_t v12 = a1 + *(int *)(v4 + 24);
    uint64_t v13 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(v12, v13);
    uint64_t v14 = a1 + *(int *)(v4 + 28);
    uint64_t v15 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  }

  uint64_t v16 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease(*(RCSServiceSession **)(v16 + 16), v5, v6, v7, v8, v9, v10, v11);
  swift_bridgeObjectRelease(*(RCSServiceSession **)(v16 + 32), v17, v18, v19, v20, v21, v22, v23);
  uint64_t v24 = type metadata accessor for RCSFile.DispositionInformation(0LL);
  uint64_t v25 = v16 + *(int *)(v24 + 28);
  uint64_t v26 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8LL))(v25, v26);
  uint64_t v27 = v16 + *(int *)(v24 + 32);
  uint64_t v28 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8LL))(v27, v28);
}

void *initializeWithCopy for RCSFile(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1LL, v6))
  {
    uint64_t v8 = sub_5C28(&qword_76498);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    uint64_t v9 = *(int *)(v6 + 24);
    uint64_t v10 = (char *)a1 + v9;
    unsigned __int8 v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for URL(0LL);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    uint64_t v14 = *(int *)(v6 + 28);
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16LL))(v15, v16, v17);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
  }

  uint64_t v18 = *(int *)(a3 + 20);
  id v19 = (char *)a1 + v18;
  id v20 = (char *)a2 + v18;
  *(_OWORD *)id v19 = *(_OWORD *)((char *)a2 + v18);
  uint64_t v22 = *(void *)((char *)a2 + v18 + 16);
  uint64_t v21 = *((void *)v20 + 3);
  *((void *)v19 + 2) = v22;
  *((void *)v19 + 3) = v21;
  *((void *)v19 + 4) = *((void *)v20 + 4);
  unsigned __int8 v23 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
  uint64_t v24 = v23[7];
  uint64_t v25 = &v19[v24];
  uint64_t v26 = &v20[v24];
  uint64_t v27 = type metadata accessor for URL(0LL);
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16LL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v28(v25, v26, v27);
  uint64_t v29 = v23[8];
  uint64_t v30 = &v19[v29];
  uint64_t v31 = &v20[v29];
  uint64_t v32 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16LL))(v30, v31, v32);
  v19[v23[9]] = v20[v23[9]];
  uint64_t v33 = v23[10];
  uint64_t v34 = &v19[v33];
  uint64_t v35 = &v20[v33];
  void v34[8] = v35[8];
  *(void *)uint64_t v34 = *(void *)v35;
  return a1;
}

void *assignWithCopy for RCSFile(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1LL, v6);
  int v10 = v8(a2, 1LL, v6);
  if (!v9)
  {
    if (!v10)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      uint64_t v55 = (RCSServiceSession *)a1[2];
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease(v55, v56, v57, v58, v59, v60, v61, v62);
      uint64_t v63 = *(int *)(v6 + 24);
      uint64_t v64 = (char *)a1 + v63;
      uint64_t v65 = (char *)a2 + v63;
      uint64_t v66 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 24LL))(v64, v65, v66);
      uint64_t v67 = *(int *)(v6 + 28);
      uint64_t v68 = (char *)a1 + v67;
      uint64_t v69 = (char *)a2 + v67;
      uint64_t v70 = type metadata accessor for Date(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v70 - 8) + 24LL))(v68, v69, v70);
      goto LABEL_7;
    }

    sub_11324((uint64_t)a1, type metadata accessor for RCSFile.ThumbnailInformation);
    goto LABEL_6;
  }

  if (v10)
  {
LABEL_6:
    uint64_t v20 = sub_5C28(&qword_76498);
    memcpy(a1, a2, *(void *)(*(void *)(v20 - 8) + 64LL));
    goto LABEL_7;
  }

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v11 = *(int *)(v6 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for URL(0LL);
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL);
  swift_bridgeObjectRetain();
  v15(v12, v13, v14);
  uint64_t v16 = *(int *)(v6 + 28);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16LL))(v17, v18, v19);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
LABEL_7:
  uint64_t v21 = *(int *)(a3 + 20);
  uint64_t v22 = (void *)((char *)a1 + v21);
  unsigned __int8 v23 = (char *)a2 + v21;
  *uint64_t v22 = *(void *)((char *)a2 + v21);
  v22[1] = *(void *)((char *)a2 + v21 + 8);
  uint64_t v24 = *(void *)((char *)a2 + v21 + 16);
  uint64_t v25 = *(RCSServiceSession **)((char *)a1 + v21 + 16);
  v22[2] = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
  v22[3] = *((void *)v23 + 3);
  uint64_t v33 = (RCSServiceSession *)v22[4];
  v22[4] = *((void *)v23 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v33, v34, v35, v36, v37, v38, v39, v40);
  unint64_t v41 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
  uint64_t v42 = v41[7];
  id v43 = (char *)v22 + v42;
  uint64_t v44 = &v23[v42];
  uint64_t v45 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 24LL))(v43, v44, v45);
  uint64_t v46 = v41[8];
  uint64_t v47 = (char *)v22 + v46;
  uint64_t v48 = &v23[v46];
  uint64_t v49 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 24LL))(v47, v48, v49);
  *((_BYTE *)v22 + v41[9]) = v23[v41[9]];
  uint64_t v50 = v41[10];
  unint64_t v51 = (char *)v22 + v50;
  char v52 = &v23[v50];
  char v53 = v52[8];
  *(void *)unint64_t v51 = *(void *)v52;
  v51[8] = v53;
  return a1;
}

void *initializeWithTake for RCSFile(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1LL, v6))
  {
    uint64_t v8 = sub_5C28(&qword_76498);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
  }

  else
  {
    *a1 = *a2;
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    uint64_t v9 = *(int *)(v6 + 24);
    int v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32LL))(v10, v11, v12);
    uint64_t v13 = *(int *)(v6 + 28);
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32LL))(v14, v15, v16);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
  }

  uint64_t v17 = *(int *)(a3 + 20);
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  *(void *)uint64_t v18 = *(void *)((char *)a2 + v17);
  *(_OWORD *)(v18 + 8) = *(_OWORD *)((char *)a2 + v17 + 8);
  *(_OWORD *)(v18 + 24) = *(_OWORD *)((char *)a2 + v17 + 24);
  uint64_t v20 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
  uint64_t v21 = v20[7];
  uint64_t v22 = &v18[v21];
  unsigned __int8 v23 = &v19[v21];
  uint64_t v24 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32LL))(v22, v23, v24);
  uint64_t v25 = v20[8];
  SEL v26 = &v18[v25];
  id v27 = &v19[v25];
  uint64_t v28 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32LL))(v26, v27, v28);
  v18[v20[9]] = v19[v20[9]];
  uint64_t v29 = v20[10];
  id v30 = &v18[v29];
  id v31 = &v19[v29];
  v30[8] = v31[8];
  *(void *)id v30 = *(void *)v31;
  return a1;
}

uint64_t assignWithTake for RCSFile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for RCSFile.ThumbnailInformation(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1LL, v6);
  int v10 = v8(a2, 1LL, v6);
  if (!v9)
  {
    if (!v10)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      id v60 = *(RCSServiceSession **)(a1 + 16);
      *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
      swift_bridgeObjectRelease(v60, v11, v12, v13, v14, v15, v16, v17);
      uint64_t v61 = *(int *)(v6 + 24);
      uint64_t v62 = a1 + v61;
      uint64_t v63 = a2 + v61;
      uint64_t v64 = type metadata accessor for URL(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 40LL))(v62, v63, v64);
      uint64_t v65 = *(int *)(v6 + 28);
      uint64_t v66 = a1 + v65;
      uint64_t v67 = a2 + v65;
      uint64_t v68 = type metadata accessor for Date(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 40LL))(v66, v67, v68);
      goto LABEL_7;
    }

    sub_11324(a1, type metadata accessor for RCSFile.ThumbnailInformation);
    goto LABEL_6;
  }

  if (v10)
  {
LABEL_6:
    uint64_t v33 = sub_5C28(&qword_76498);
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v33 - 8) + 64LL));
    goto LABEL_7;
  }

  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v18 = *(int *)(v6 + 24);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32LL))(v19, v20, v21);
  uint64_t v22 = *(int *)(v6 + 28);
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  uint64_t v25 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 32LL))(v23, v24, v25);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
LABEL_7:
  uint64_t v34 = *(int *)(a3 + 20);
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  *(_OWORD *)uint64_t v35 = *(_OWORD *)(a2 + v34);
  id v37 = *(RCSServiceSession **)(a1 + v34 + 16);
  *(void *)(v35 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + v34 + 16);
  swift_bridgeObjectRelease(v37, v26, v27, v28, v29, v30, v31, v32);
  uint64_t v38 = *(void *)(v36 + 32);
  id v39 = *(RCSServiceSession **)(v35 + 32);
  *(void *)(v35 + 24) = *(void *)(v36 + 24);
  *(void *)(v35 + 32) = v38;
  swift_bridgeObjectRelease(v39, v40, v41, v42, v43, v44, v45, v46);
  uint64_t v47 = (int *)type metadata accessor for RCSFile.DispositionInformation(0LL);
  uint64_t v48 = v47[7];
  uint64_t v49 = v35 + v48;
  uint64_t v50 = v36 + v48;
  uint64_t v51 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 40LL))(v49, v50, v51);
  uint64_t v52 = v47[8];
  uint64_t v53 = v35 + v52;
  uint64_t v54 = v36 + v52;
  uint64_t v55 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 40LL))(v53, v54, v55);
  *(_BYTE *)(v35 + v47[9]) = *(_BYTE *)(v36 + v47[9]);
  uint64_t v56 = v47[10];
  uint64_t v57 = v35 + v56;
  uint64_t v58 = v36 + v56;
  *(_BYTE *)(v57 + 8) = *(_BYTE *)(v58 + 8);
  *(void *)uint64_t v57 = *(void *)v58;
  return a1;
}

uint64_t getEnumTagSinglePayload for RCSFile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_4ADA4);
}

uint64_t sub_4ADA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_5C28(&qword_76498);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }

  else
  {
    uint64_t v8 = type metadata accessor for RCSFile.DispositionInformation(0LL);
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL);
  }

  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for RCSFile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_4AE28);
}

uint64_t sub_4AE28(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_5C28(&qword_76498);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v10 = type metadata accessor for RCSFile.DispositionInformation(0LL);
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

void sub_4AEA8(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    uint64_t v4 = type metadata accessor for RCSFile.DispositionInformation(319LL);
    if (v5 <= 0x3F)
    {
      v6[1] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 2LL, v6, a1 + 16);
    }
  }

void sub_4AF2C(uint64_t a1)
{
  if (!qword_77810)
  {
    uint64_t v2 = type metadata accessor for RCSFile.ThumbnailInformation(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_77810);
    }
  }

uint64_t *initializeBufferWithCopyOfBuffer for RCSFile.ThumbnailInformation( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v17 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v17);
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v7 = a2[2];
    a1[2] = v7;
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 28);
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16LL))(v14, v15, v16);
  }

  return v4;
}

uint64_t destroy for RCSFile.ThumbnailInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
}

uint64_t initializeWithCopy for RCSFile.ThumbnailInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL))(v13, v14, v15);
  return a1;
}

void *assignWithCopy for RCSFile.ThumbnailInformation(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 24LL))(v13, v14, v15);
  return a1;
}

uint64_t initializeWithTake for RCSFile.ThumbnailInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))(v11, v12, v13);
  return a1;
}

uint64_t assignWithTake for RCSFile.ThumbnailInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40LL))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for RCSFile.ThumbnailInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_4B394);
}

uint64_t sub_4B394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for URL(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 24);
    }

    else
    {
      uint64_t v10 = type metadata accessor for Date(0LL);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 28);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t storeEnumTagSinglePayload for RCSFile.ThumbnailInformation( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_4B440);
}

uint64_t sub_4B440(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for URL(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 24);
    }

    else
    {
      uint64_t v10 = type metadata accessor for Date(0LL);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 28);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

uint64_t sub_4B4DC(uint64_t a1)
{
  v5[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v5[1] = &unk_60FA8;
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    _OWORD v5[2] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for Date(319LL);
    if (v4 <= 0x3F)
    {
      v5[3] = *(void *)(result - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 4LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for RCSFile.Disposition(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_4B5C4 + 4 * byte_60D70[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_4B5F8 + 4 * byte_60D6B[v4]))();
}

uint64_t sub_4B5F8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_4B600(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x4B608LL);
  }
  return result;
}

uint64_t sub_4B614(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x4B61CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_4B620(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_4B628(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RCSFile.Disposition()
{
  return &type metadata for RCSFile.Disposition;
}

void *initializeBufferWithCopyOfBuffer for RCSFile.DispositionInformation(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v22 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v22);
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v8 = a2[2];
    uint64_t v7 = a2[3];
    a1[2] = v8;
    a1[3] = v7;
    uint64_t v9 = a2[4];
    a1[4] = v9;
    uint64_t v10 = a3[7];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for URL(0LL);
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v14(v11, v12, v13);
    uint64_t v15 = a3[8];
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16LL))(v16, v17, v18);
    uint64_t v19 = a3[10];
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    uint64_t v20 = (char *)v4 + v19;
    uint64_t v21 = (char *)a2 + v19;
    *(void *)uint64_t v20 = *(void *)v21;
    v20[8] = v21[8];
  }

  return v4;
}

uint64_t destroy for RCSFile.DispositionInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 32);
  uint64_t v7 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
}

uint64_t initializeWithCopy for RCSFile.DispositionInformation(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v7;
  *(void *)(a1 + 24) = v6;
  uint64_t v8 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v8;
  uint64_t v9 = a3[7];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for URL(0LL);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v13(v10, v11, v12);
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16LL))(v15, v16, v17);
  uint64_t v18 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(void *)uint64_t v19 = *(void *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  return a1;
}

void *assignWithCopy for RCSFile.DispositionInformation(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  uint64_t v14 = a3[8];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24LL))(v15, v16, v17);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  uint64_t v18 = a3[10];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  char v21 = v20[8];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v21;
  return a1;
}

uint64_t initializeWithTake for RCSFile.DispositionInformation(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v6 = a3[7];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[8];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))(v11, v12, v13);
  uint64_t v14 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(void *)uint64_t v15 = *(void *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  return a1;
}

uint64_t assignWithTake for RCSFile.DispositionInformation(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a3[7];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40LL))(v10, v11, v12);
  uint64_t v13 = a3[8];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 40LL))(v14, v15, v16);
  uint64_t v17 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  *(void *)uint64_t v18 = *(void *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for RCSFile.DispositionInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_4BB80);
}

uint64_t sub_4BB80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for URL(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 28);
    }

    else
    {
      uint64_t v10 = type metadata accessor for Date(0LL);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 32);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t storeEnumTagSinglePayload for RCSFile.DispositionInformation( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_4BC2C);
}

uint64_t sub_4BC2C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for URL(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 28);
    }

    else
    {
      uint64_t v10 = type metadata accessor for Date(0LL);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 32);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

uint64_t sub_4BCC8(uint64_t a1)
{
  v5[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v5[1] = &unk_60FA8;
  _OWORD v5[2] = &unk_60FA8;
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v5[3] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for Date(319LL);
    if (v4 <= 0x3F)
    {
      void v5[4] = *(void *)(result - 8) + 64LL;
      v5[5] = &unk_60FE8;
      v5[6] = &unk_61000;
      swift_initStructMetadata(a1, 256LL, 7LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for RCSFile.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_4BDC8 + 4 * byte_60D7A[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_4BDFC + 4 * byte_60D75[v4]))();
}

uint64_t sub_4BDFC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_4BE04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x4BE0CLL);
  }
  return result;
}

uint64_t sub_4BE18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x4BE20LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_4BE24(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_4BE2C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RCSFile.CodingKeys()
{
  return &type metadata for RCSFile.CodingKeys;
}

uint64_t getEnumTagSinglePayload for RCSFile.DispositionInformation.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

uint64_t storeEnumTagSinglePayload for RCSFile.DispositionInformation.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_4BF24 + 4 * byte_60D84[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_4BF58 + 4 * byte_60D7F[v4]))();
}

uint64_t sub_4BF58(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_4BF60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x4BF68LL);
  }
  return result;
}

uint64_t sub_4BF74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x4BF7CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 6;
  return result;
}

uint64_t sub_4BF80(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_4BF88(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RCSFile.DispositionInformation.CodingKeys()
{
  return &type metadata for RCSFile.DispositionInformation.CodingKeys;
}

uint64_t getEnumTagSinglePayload for RCSFile.ThumbnailInformation.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

uint64_t storeEnumTagSinglePayload for RCSFile.ThumbnailInformation.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_4C080 + 4 * byte_60D8E[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_4C0B4 + 4 * byte_60D89[v4]))();
}

uint64_t sub_4C0B4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_4C0BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x4C0C4LL);
  }
  return result;
}

uint64_t sub_4C0D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x4C0D8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_4C0DC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_4C0E4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RCSFile.ThumbnailInformation.CodingKeys()
{
  return &type metadata for RCSFile.ThumbnailInformation.CodingKeys;
}

unint64_t sub_4C104()
{
  unint64_t result = qword_77980;
  if (!qword_77980)
  {
    unint64_t result = swift_getWitnessTable(&unk_610B4, &type metadata for RCSFile.ThumbnailInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_77980);
  }

  return result;
}

unint64_t sub_4C14C()
{
  unint64_t result = qword_77988;
  if (!qword_77988)
  {
    unint64_t result = swift_getWitnessTable(&unk_6116C, &type metadata for RCSFile.DispositionInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_77988);
  }

  return result;
}

unint64_t sub_4C194()
{
  unint64_t result = qword_77990;
  if (!qword_77990)
  {
    unint64_t result = swift_getWitnessTable(&unk_61224, &type metadata for RCSFile.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_77990);
  }

  return result;
}

unint64_t sub_4C1DC()
{
  unint64_t result = qword_77998;
  if (!qword_77998)
  {
    unint64_t result = swift_getWitnessTable(&unk_61194, &type metadata for RCSFile.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_77998);
  }

  return result;
}

unint64_t sub_4C224()
{
  unint64_t result = qword_779A0;
  if (!qword_779A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_611BC, &type metadata for RCSFile.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_779A0);
  }

  return result;
}

unint64_t sub_4C26C()
{
  unint64_t result = qword_779A8;
  if (!qword_779A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_610DC, &type metadata for RCSFile.DispositionInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_779A8);
  }

  return result;
}

unint64_t sub_4C2B4()
{
  unint64_t result = qword_779B0;
  if (!qword_779B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_61104, &type metadata for RCSFile.DispositionInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_779B0);
  }

  return result;
}

unint64_t sub_4C2FC()
{
  unint64_t result = qword_779B8;
  if (!qword_779B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_61024, &type metadata for RCSFile.ThumbnailInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_779B8);
  }

  return result;
}

unint64_t sub_4C344()
{
  unint64_t result = qword_779C0;
  if (!qword_779C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_6104C, &type metadata for RCSFile.ThumbnailInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_779C0);
  }

  return result;
}

uint64_t sub_4C388(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x657A6953656C6966LL && a2 == 0xEF73657479426E49LL)
  {
    unint64_t v5 = 0xEF73657479426E49LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657A6953656C6966LL, 0xEF73657479426E49LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x54746E65746E6F63LL && a2 == 0xEB00000000657079LL)
  {
    unint64_t v7 = 0xEB00000000657079LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x54746E65746E6F63LL, 0xEB00000000657079LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x6C725561746164LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v8 = 0xE700000000000000LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C725561746164LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x746E5564696C6176LL && a2 == 0xEA00000000006C69LL)
  {
    swift_bridgeObjectRelease(0xEA00000000006C69LL);
    return 3LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746E5564696C6176LL, 0xEA00000000006C69LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_4C588(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x657A6953656C6966LL && a2 == 0xEF73657479426E49LL)
  {
    unint64_t v5 = 0xEF73657479426E49LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657A6953656C6966LL, 0xEF73657479426E49LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v7 = 0x8000000000065D20LL;
    if (a2 == 0x8000000000065D20LL) {
      goto LABEL_13;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x8000000000065D20LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if (a1 == 0x65707954656D696DLL && a2 == 0xE800000000000000LL)
  {
    unint64_t v8 = 0xE800000000000000LL;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65707954656D696DLL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_19;
  }

  if (a1 == 0x6C725561746164LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v9 = 0xE700000000000000LL;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C725561746164LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_25;
  }

  if (a1 == 0x746E5564696C6176LL && a2 == 0xEA00000000006C69LL)
  {
    unint64_t v10 = 0xEA00000000006C69LL;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E5564696C6176LL, 0xEA00000000006C69LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_31;
  }

  if (a1 == 0x7469736F70736964LL && a2 == 0xEB000000006E6F69LL)
  {
    unint64_t v11 = 0xEB000000006E6F69LL;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7469736F70736964LL, 0xEB000000006E6F69LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_37;
  }

  if (a1 == 0x676E654C656D6974LL && a2 == 0xEA00000000006874LL)
  {
    swift_bridgeObjectRelease(0xEA00000000006874LL);
    return 6LL;
  }

  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x676E654C656D6974LL, 0xEA00000000006874LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0) {
      return 6LL;
    }
    else {
      return 7LL;
    }
  }

uint64_t sub_4C8B0(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x69616E626D756874LL && a2 == 0xE90000000000006CLL)
  {
    unint64_t v5 = 0xE90000000000006CLL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69616E626D756874LL, 0xE90000000000006CLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x7469736F70736964LL && a2 == 0xEB000000006E6F69LL)
  {
    swift_bridgeObjectRelease(0xEB000000006E6F69LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7469736F70736964LL, 0xEB000000006E6F69LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

unint64_t sub_4C9C4()
{
  unint64_t result = qword_779C8;
  if (!qword_779C8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RCSFile.Disposition,  &type metadata for RCSFile.Disposition);
    atomic_store(result, (unint64_t *)&qword_779C8);
  }

  return result;
}

uint64_t sub_4CA10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[5] = a1;
  v4[6] = a4;
  uint64_t v5 = sub_5C28(&qword_765B0);
  void v4[7] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_4CA6C, 0LL, 0LL);
}

uint64_t sub_4CA6C()
{
  uint64_t v1 = *(void *)(v0 + 48) + 16LL;
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  *(void *)(v0 + 64) = Strong;
  if (Strong) {
    return swift_task_switch(sub_4CAF4, Strong, 0LL);
  }
  uint64_t v4 = *(void *)(v0 + 56);
  **(_BYTE **)(v0 + 40) = 1;
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_4CAF4()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = v2 + OBJC_IVAR____TtC7CoreRCS20AsyncPersistentTimer_priority;
  uint64_t v4 = type metadata accessor for TaskPriority(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v3, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v1, 0LL, 1LL, v4);
  uint64_t v6 = swift_allocObject(&unk_732B8, 24LL, 7LL);
  swift_weakInit(v6 + 16, v2);
  char v7 = (void *)swift_allocObject(&unk_73330, 40LL, 7LL);
  uint64_t v7[2] = 0LL;
  void v7[3] = 0LL;
  void v7[4] = v6;
  uint64_t v8 = sub_4CDD4(v1, (uint64_t)&unk_77B00, (uint64_t)v7);
  sub_1E140(v1);
  uint64_t v9 = *(void *)(v2 + OBJC_IVAR____TtC7CoreRCS20AsyncPersistentTimer_task);
  *(void *)(v2 + OBJC_IVAR____TtC7CoreRCS20AsyncPersistentTimer_task) = v8;
  swift_release(v2);
  swift_release(v9);
  return swift_task_switch(sub_4CC04, 0LL, 0LL);
}

uint64_t sub_4CC04()
{
  uint64_t v1 = *(void *)(v0 + 56);
  **(_BYTE **)(v0 + 40) = *(void *)(v0 + 64) == 0LL;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_4CC44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_5C28(&qword_765B0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_4DF88(a1, (uint64_t)v8);
  uint64_t v9 = type metadata accessor for TaskPriority(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) == 1)
  {
    sub_1E140((uint64_t)v8);
    uint64_t v11 = 4096LL;
    uint64_t v12 = *(void *)(a3 + 16);
    if (v12)
    {
LABEL_3:
      uint64_t v13 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v12);
      swift_unknownObjectRetain(v12);
      uint64_t v15 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v13);
      uint64_t v17 = v16;
      swift_unknownObjectRelease(v12);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v18 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    uint64_t v11 = v18 | 0x1000LL;
    uint64_t v12 = *(void *)(a3 + 16);
    if (v12) {
      goto LABEL_3;
    }
  }

  uint64_t v15 = 0LL;
  uint64_t v17 = 0LL;
LABEL_6:
  uint64_t v19 = swift_allocObject(&unk_73308, 32LL, 7LL);
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v19 + 24) = a3;
  uint64_t v20 = sub_5C28(&qword_77AF0);
  if (v17 | v15)
  {
    v23[0] = 0LL;
    v23[1] = 0LL;
    char v21 = v23;
    v23[2] = v15;
    v23[3] = v17;
  }

  else
  {
    char v21 = 0LL;
  }

  return swift_task_create(v11, v21, v20, &unk_77AE8, v19);
}

uint64_t sub_4CDD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_5C28(&qword_765B0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_4DF88(a1, (uint64_t)v8);
  uint64_t v9 = type metadata accessor for TaskPriority(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) == 1)
  {
    sub_1E140((uint64_t)v8);
    uint64_t v11 = 4096LL;
    uint64_t v12 = *(void *)(a3 + 16);
    if (v12)
    {
LABEL_3:
      uint64_t v13 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v12);
      swift_unknownObjectRetain(v12);
      uint64_t v15 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v13);
      uint64_t v17 = v16;
      swift_unknownObjectRelease(v12);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v18 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    uint64_t v11 = v18 | 0x1000LL;
    uint64_t v12 = *(void *)(a3 + 16);
    if (v12) {
      goto LABEL_3;
    }
  }

  uint64_t v15 = 0LL;
  uint64_t v17 = 0LL;
LABEL_6:
  uint64_t v19 = swift_allocObject(&unk_73358, 32LL, 7LL);
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v19 + 24) = a3;
  if (v17 | v15)
  {
    v22[0] = 0LL;
    v22[1] = 0LL;
    uint64_t v20 = v22;
    v22[2] = v15;
    v22[3] = v17;
  }

  else
  {
    uint64_t v20 = 0LL;
  }

  return swift_task_create(v11, v20, (char *)&type metadata for () + 8, &unk_76AE0, v19);
}

uint64_t sub_4CF5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[20] = a4;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  v4[21] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[22] = v6;
  v4[23] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  v4[24] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[25] = v8;
  v4[26] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchTimeInterval(0LL);
  v4[27] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[28] = v10;
  v4[29] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchTime(0LL);
  v4[30] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v4[31] = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  _BYTE v4[32] = swift_task_alloc(v13);
  v4[33] = swift_task_alloc(v13);
  uint64_t v14 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  v4[34] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v4[35] = v15;
  v4[36] = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for ContinuousClock.Instant(0LL);
  v4[37] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v4[38] = v17;
  unint64_t v18 = (*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[39] = swift_task_alloc(v18);
  v4[40] = swift_task_alloc(v18);
  uint64_t v19 = type metadata accessor for ContinuousClock(0LL);
  v4[41] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v4[42] = v20;
  v4[43] = swift_task_alloc((*(void *)(v20 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_4D0CC, 0LL, 0LL);
}

uint64_t sub_4D0CC(uint64_t a1)
{
  if ((static Task<>.isCancelled.getter(a1) & 1) == 0)
  {
    swift_beginAccess(*(void *)(v1 + 160) + 16LL, v1 + 64, 0LL, 0LL);
    uint64_t Strong = swift_weakLoadStrong(*(void *)(v1 + 160) + 16LL);
    *(void *)(v1 + 352) = Strong;
    if (Strong) {
      return swift_task_switch(sub_4D1CC, Strong, 0LL);
    }
  }

  uint64_t v4 = *(void *)(v1 + 312);
  uint64_t v5 = *(void *)(v1 + 320);
  uint64_t v6 = *(void *)(v1 + 288);
  uint64_t v8 = *(void *)(v1 + 256);
  uint64_t v7 = *(void *)(v1 + 264);
  uint64_t v9 = *(void *)(v1 + 232);
  uint64_t v10 = *(void *)(v1 + 208);
  uint64_t v11 = *(void *)(v1 + 184);
  swift_task_dealloc(*(void *)(v1 + 344));
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_4D1CC()
{
  uint64_t v3 = v2;
  ContinuousClock.init()();
  *(void *)(v0 + 136) = v1;
  *(void *)(v0 + 144) = v3;
  *(void *)(v0 + 112) = 0LL;
  *(void *)(v0 + 120) = 0LL;
  *(_BYTE *)(v0 + 128) = 1;
  return swift_task_switch(sub_4D23C, 0LL, 0LL);
}

uint64_t sub_4D23C()
{
  uint64_t v1 = v0[41];
  uint64_t v3 = v0[38];
  uint64_t v2 = v0[39];
  uint64_t v4 = v0[37];
  uint64_t v5 = sub_219FC( &qword_77B08,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock,  (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v1, v5);
  uint64_t v6 = sub_219FC( &qword_77B10,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant,  (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 17, v4, v6);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[45] = v7;
  v7(v2, v4);
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[46] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_4D348;
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[40], v0 + 14, v0[41], v5);
}

uint64_t sub_4D348()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 368);
  *(void *)(*v1 + 376) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    (*(void (**)(void, void))(v2 + 360))(*(void *)(v2 + 320), *(void *)(v2 + 296));
    uint64_t v4 = sub_4D51C;
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 352);
    uint64_t v8 = *(void *)(v2 + 336);
    uint64_t v7 = *(void *)(v2 + 344);
    uint64_t v9 = *(void *)(v2 + 328);
    (*(void (**)(void, void))(v2 + 360))(*(void *)(v2 + 320), *(void *)(v2 + 296));
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    uint64_t v4 = sub_4D3F4;
    uint64_t v5 = v6;
  }

  return swift_task_switch(v4, v5, 0LL);
}

uint64_t sub_4D3F4(uint64_t a1)
{
  *(_BYTE *)(v1 + 129) = static Task<>.isCancelled.getter(a1) & 1;
  return swift_task_switch(sub_4D434, 0LL, 0LL);
}

uint64_t sub_4D434()
{
  uint64_t v1 = *(void *)(v0 + 352);
  if ((*(_BYTE *)(v0 + 129) & 1) != 0)
  {
    swift_release(*(void *)(v0 + 352));
    uint64_t v2 = *(void *)(v0 + 312);
    uint64_t v3 = *(void *)(v0 + 320);
    uint64_t v4 = *(void *)(v0 + 288);
    uint64_t v6 = *(void *)(v0 + 256);
    uint64_t v5 = *(void *)(v0 + 264);
    uint64_t v7 = *(void *)(v0 + 232);
    uint64_t v8 = *(void *)(v0 + 208);
    uint64_t v9 = *(void *)(v0 + 184);
    swift_task_dealloc(*(void *)(v0 + 344));
    swift_task_dealloc(v3);
    swift_task_dealloc(v2);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    *(void *)(v0 + 384) = OBJC_IVAR____TtC7CoreRCS20AsyncPersistentTimer_block;
    return swift_task_switch(sub_4D8A8, v1, 0LL);
  }

uint64_t sub_4D51C()
{
  uint64_t v1 = v0[44];
  (*(void (**)(void, void))(v0[42] + 8LL))(v0[43], v0[41]);
  return swift_task_switch(sub_4D560, v1, 0LL);
}

uint64_t sub_4D560()
{
  return swift_task_switch(sub_4D574, 0LL, 0LL);
}

uint64_t sub_4D574()
{
  uint64_t v37 = v0[47];
  uint64_t v1 = v0[35];
  uint64_t v2 = v0[36];
  uint64_t v3 = v0[34];
  uint64_t v29 = v0[33];
  uint64_t v4 = v0[32];
  uint64_t v5 = (void *)v0[29];
  uint64_t v27 = v0[31];
  uint64_t v28 = v0[30];
  uint64_t v6 = v0[27];
  uint64_t v7 = v0[28];
  uint64_t v30 = v0[26];
  uint64_t v35 = v0[25];
  uint64_t v36 = v0[24];
  uint64_t v34 = v0[22];
  uint64_t v8 = v0[20];
  uint64_t v32 = v0[23];
  uint64_t v33 = v0[21];
  swift_release(v0[44]);
  sub_2AD84();
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))( v2,  enum case for DispatchQoS.QoSClass.userInitiated(_:),  v3);
  id v31 = (void *)static OS_dispatch_queue.global(qos:)(v2);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  static DispatchTime.now()(v9);
  *uint64_t v5 = 5LL;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v5, enum case for DispatchTimeInterval.seconds(_:), v6);
  DispatchTime.advanced(by:)(v5);
  (*(void (**)(void *, uint64_t))(v7 + 8))(v5, v6);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  v10(v4, v28);
  uint64_t v11 = swift_allocObject(&unk_732B8, 24LL, 7LL);
  swift_beginAccess(v8 + 16, v0 + 11, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v8 + 16);
  swift_weakInit(v11 + 16, Strong);
  swift_release(Strong);
  v0[6] = sub_4E1D4;
  v0[7] = v11;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256LL;
  v0[4] = sub_19334;
  v0[5] = &unk_73370;
  unint64_t v13 = _Block_copy(v0 + 2);
  uint64_t v14 = swift_retain(v11);
  static DispatchQoS.unspecified.getter(v14);
  v0[19] = _swiftEmptyArrayStorage;
  sub_219FC( &qword_77008,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v15 = sub_5C28(&qword_77010);
  unint64_t v16 = sub_2AE74();
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 19, v15, v16);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v29, v30, v32, v13);
  _Block_release(v13);

  swift_errorRelease(v37);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v30, v36);
  v10(v29, v28);
  uint64_t v17 = v0[7];
  swift_release(v11);
  swift_release(v17);
  uint64_t v18 = v0[39];
  uint64_t v19 = v0[40];
  uint64_t v20 = v0[36];
  uint64_t v22 = v0[32];
  uint64_t v21 = v0[33];
  uint64_t v23 = v0[29];
  uint64_t v24 = v0[26];
  uint64_t v25 = v0[23];
  swift_task_dealloc(v0[43]);
  swift_task_dealloc(v19);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_4D8A8()
{
  uint64_t v1 = (int **)(v0[44] + v0[48]);
  uint64_t v4 = (uint64_t (*)(void))((char *)*v1 + **v1);
  uint64_t v2 = (void *)swift_task_alloc((*v1)[1]);
  v0[49] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_4D908;
  return v4();
}

uint64_t sub_4D908()
{
  return swift_task_switch(sub_4D95C, 0LL, 0LL);
}

uint64_t sub_4D95C()
{
  uint64_t v1 = swift_release(*(void *)(v0 + 352));
  if ((static Task<>.isCancelled.getter(v1) & 1) == 0)
  {
    uint64_t Strong = swift_weakLoadStrong(*(void *)(v0 + 160) + 16LL);
    *(void *)(v0 + 352) = Strong;
    if (Strong) {
      return swift_task_switch(sub_4D1CC, Strong, 0LL);
    }
  }

  uint64_t v4 = *(void *)(v0 + 312);
  uint64_t v5 = *(void *)(v0 + 320);
  uint64_t v6 = *(void *)(v0 + 288);
  uint64_t v8 = *(void *)(v0 + 256);
  uint64_t v7 = *(void *)(v0 + 264);
  uint64_t v9 = *(void *)(v0 + 232);
  uint64_t v10 = *(void *)(v0 + 208);
  uint64_t v11 = *(void *)(v0 + 184);
  swift_task_dealloc(*(void *)(v0 + 344));
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_4DA4C(uint64_t a1)
{
  uint64_t v2 = sub_5C28(&qword_765B0);
  __chkstk_darwin(v2);
  uint64_t v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a1 += 16LL;
  swift_beginAccess(a1, v12, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a1);
  if (result)
  {
    uint64_t v6 = result;
    static TaskPriority.high.getter(result);
    uint64_t v7 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v4, 0LL, 1LL, v7);
    uint64_t v8 = swift_allocObject(&unk_732B8, 24LL, 7LL);
    swift_weakInit(v8 + 16, v6);
    uint64_t v9 = (void *)swift_allocObject(&unk_733A8, 40LL, 7LL);
    v9[2] = 0LL;
    v9[3] = 0LL;
    void v9[4] = v8;
    uint64_t v10 = sub_4CC44((uint64_t)v4, (uint64_t)&unk_77B18, (uint64_t)v9);
    swift_release(v10);
    sub_1E140((uint64_t)v4);
    return swift_release(v6);
  }

  return result;
}

uint64_t sub_4DB6C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7CoreRCS20AsyncPersistentTimer_priority;
  uint64_t v2 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC7CoreRCS20AsyncPersistentTimer_block + 8));
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC7CoreRCS20AsyncPersistentTimer_task));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_4DBDC()
{
  return type metadata accessor for AsyncPersistentTimer(0LL);
}

uint64_t type metadata accessor for AsyncPersistentTimer(uint64_t a1)
{
  uint64_t result = qword_779F8;
  if (!qword_779F8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AsyncPersistentTimer);
  }
  return result;
}

uint64_t sub_4DC20(uint64_t a1)
{
  uint64_t result = type metadata accessor for TaskPriority(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    _OWORD v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = (char *)&value witness table for () + 64;
    v4[4] = &unk_613A0;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 5LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_4DCBC(uint64_t a1, int *a2)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  unint64_t v3 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 24) = v3;
  void *v3 = v2;
  v3[1] = sub_4DD24;
  return v5(v2 + 32);
}

uint64_t sub_4DD24()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(_BYTE **)(*v0 + 16);
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 24));
  *uint64_t v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_4DD74(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v9 = sub_5C28(&qword_765B0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_defaultActor_initialize(v4);
  *(void *)(v4 + OBJC_IVAR____TtC7CoreRCS20AsyncPersistentTimer_task) = 0LL;
  uint64_t v12 = v4 + OBJC_IVAR____TtC7CoreRCS20AsyncPersistentTimer_priority;
  uint64_t v13 = type metadata accessor for TaskPriority(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v12, a1, v13);
  *(double *)(v4 + OBJC_IVAR____TtC7CoreRCS20AsyncPersistentTimer_interval) = a4;
  uint64_t v15 = (void *)(v4 + OBJC_IVAR____TtC7CoreRCS20AsyncPersistentTimer_block);
  void *v15 = a2;
  v15[1] = a3;
  uint64_t v16 = swift_retain(a3);
  static TaskPriority.high.getter(v16);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
  uint64_t v17 = swift_allocObject(&unk_732B8, 24LL, 7LL);
  swift_weakInit(v17 + 16, v4);
  uint64_t v18 = (void *)swift_allocObject(&unk_732E0, 40LL, 7LL);
  v18[2] = 0LL;
  v18[3] = 0LL;
  _OWORD v18[4] = v17;
  uint64_t v19 = sub_4CC44((uint64_t)v11, (uint64_t)&unk_77AD8, (uint64_t)v18);
  swift_release(v19);
  sub_1E140((uint64_t)v11);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, v13);
  return v4;
}

uint64_t sub_4DEF4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_4DF1C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_77AD4);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_4E294;
  return sub_4CA10(a1, v4, v5, v6);
}

uint64_t sub_4DF88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_5C28(&qword_765B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_4DFD0(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_77AE4);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_4E040;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_77AE0 + dword_77AE0))(a1, v4);
}

uint64_t sub_4E040()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_4E08C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_77AFC);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_4E0F8;
  return sub_4CF5C(a1, v4, v5, v6);
}

uint64_t sub_4E0F8()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_4E140()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_4E164(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_76ADC);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_4E290;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_76AD8 + dword_76AD8))(a1, v4);
}

uint64_t sub_4E1D4()
{
  return sub_4DA4C(v0);
}

uint64_t sub_4E1DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_4E1EC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_4E1F8()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_4E224(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_77AD4);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_4E298;
  return sub_4CA10(a1, v4, v5, v6);
}

uint64_t RCSMessageMetadata.Entry.init(key:value:)(Swift::String string, uint64_t a2, uint64_t a3)
{
  object = string._object;
  v6._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v6._object = object;
  Swift::Int v7 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_71BD8, v6);
  swift_bridgeObjectRelease(object);
  if (v7)
  {
    swift_bridgeObjectRelease(a3);
    return 0LL;
  }

  return a2;
}

BOOL RCSMessageMetadata.Entry.HeaderKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_71C10, v2);
  swift_bridgeObjectRelease(object);
  return v3 != 0;
}

Swift::tuple_key_String_value_String __swiftcall RCSMessageMetadata.Entry.toPair()()
{
  Swift::String v2 = v1;
  uint64_t v3 = v0;
  swift_bridgeObjectRetain();
  uint64_t v4 = 0xD000000000000015LL;
  uint64_t v5 = (void *)0x8000000000065640LL;
  uint64_t v6 = v3;
  Swift::Int v7 = v2;
  result.value._object = v7;
  result.value._uint64_t countAndFlagsBits = v6;
  result.key._object = v5;
  result.key._uint64_t countAndFlagsBits = v4;
  return result;
}

unint64_t RCSMessageMetadata.Entry.HeaderKeys.rawValue.getter()
{
  return 0xD000000000000015LL;
}

Swift::Int sub_4E3BC()
{
  return Hasher._finalize()();
}

uint64_t sub_4E410(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000015LL, 0x8000000000065640LL);
}

Swift::Int sub_4E42C(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_4E47C@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  v3._uint64_t countAndFlagsBits = *a1;
  uint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_71C48, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_4E4CC(void *a1@<X8>)
{
  *a1 = 0xD000000000000015LL;
  a1[1] = 0x8000000000065640LL;
}

uint64_t RCSMessageMetadata.entries.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*v1);
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*RCSMessageMetadata.entries.modify())()
{
  return nullsub_40;
}

CoreRCS::RCSMessageMetadata __swiftcall RCSMessageMetadata.init(pairs:)(Swift::OpaquePointer pairs)
{
  uint64_t v9 = (void *)sub_20C20((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v10 = *((void *)pairs._rawValue + 2);
  if (!v10)
  {
LABEL_17:
    swift_bridgeObjectRelease((RCSServiceSession *)pairs._rawValue, v2, v3, v4, v5, v6, v7, v8);
    return (CoreRCS::RCSMessageMetadata)v9;
  }

  uint64_t v11 = (RCSServiceSession **)((char *)pairs._rawValue + 56);
  while (1)
  {
    uint64_t v14 = (uint64_t)*(v11 - 1);
    uint64_t v13 = *v11;
    uint64_t v16 = (uint64_t)*(v11 - 3);
    uint64_t v15 = *(v11 - 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17._uint64_t countAndFlagsBits = v16;
    v17._object = v15;
    Swift::Int v18 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_71C80, v17);
    swift_bridgeObjectRelease(v15, v19, v20, v21, v22, v23, v24, v25);
    if (v18)
    {
      uint64_t v12 = v13;
      goto LABEL_4;
    }

    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
    unint64_t v34 = sub_2A1F4();
    uint64_t v35 = v9[2];
    BOOL v36 = (v26 & 1) == 0;
    uint64_t v37 = v35 + v36;
    if (__OFADD__(v35, v36)) {
      break;
    }
    char v38 = (char)v26;
    if (v9[3] >= v37)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
      }

      else
      {
        sub_50888();
        if ((v38 & 1) != 0) {
          goto LABEL_13;
        }
      }
    }

    else
    {
      sub_4F5BC(v37, isUniquelyReferenced_nonNull_native);
      uint64_t v39 = sub_2A1F4();
      unint64_t v34 = v39;
      if ((v38 & 1) != 0)
      {
LABEL_13:
        uint64_t v40 = v9[7] + 16 * v34;
        swift_bridgeObjectRelease(*(RCSServiceSession **)(v40 + 8), v26, v27, v28, v29, v30, v31, v32);
        *(void *)uint64_t v40 = v14;
        *(void *)(v40 + 8) = v13;
        uint64_t v12 = (RCSServiceSession *)0x8000000000000000LL;
        goto LABEL_4;
      }
    }

    v9[(v34 >> 6) + 8] |= 1LL << v34;
    id v41 = (void *)(v9[7] + 16 * v34);
    *id v41 = v14;
    v41[1] = v13;
    uint64_t v42 = v9[2];
    BOOL v43 = __OFADD__(v42, 1LL);
    uint64_t v44 = v42 + 1;
    if (v43) {
      goto LABEL_19;
    }
    v9[2] = v44;
    uint64_t v12 = (RCSServiceSession *)0x8000000000000000LL;
LABEL_4:
    swift_bridgeObjectRelease(v12, v26, v27, v28, v29, v30, v31, v32);
    v11 += 4;
    if (!--v10) {
      goto LABEL_17;
    }
  }

  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  result.entries._rawValue = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for RCSMessageMetadata.Entry.HeaderKeys);
  __break(1u);
  return result;
}

void *RCSMessageMetadata.toPairs()(RCSServiceSession *a1)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  Swift::String v3 = sub_4E73C(v2);
  swift_bridgeObjectRelease(a1, v4, v5, v6, v7, v8, v9, v10);
  return v3;
}

void *sub_4E73C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_5103C(0, v1, 0);
  CoreRCS::RCSMessageMetadata result = (void *)sub_511E0(a1);
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = 0LL;
  uint64_t v7 = a1 + 64;
  int64_t v21 = v1;
  uint64_t v23 = a1 + 64;
  int v22 = v4;
  while ((v5 & 0x8000000000000000LL) == 0 && v5 < 1LL << *(_BYTE *)(a1 + 32))
  {
    unint64_t v10 = (unint64_t)v5 >> 6;
    if (*(_DWORD *)(a1 + 36) != v4) {
      goto LABEL_24;
    }
    uint64_t v11 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v5);
    uint64_t v12 = v11[1];
    uint64_t v24 = *v11;
    unint64_t v14 = _swiftEmptyArrayStorage[2];
    unint64_t v13 = _swiftEmptyArrayStorage[3];
    CoreRCS::RCSMessageMetadata result = (void *)swift_bridgeObjectRetain();
    if (v14 >= v13 >> 1) {
      CoreRCS::RCSMessageMetadata result = (void *)sub_5103C(v13 > 1, v14 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v14 + 1;
    uint64_t v15 = &_swiftEmptyArrayStorage[4 * v14];
    v15[4] = 0xD000000000000015LL;
    v15[5] = 0x8000000000065640LL;
    v15[6] = v24;
    v15[7] = v12;
    int64_t v8 = 1LL << *(_BYTE *)(a1 + 32);
    if (v5 >= v8) {
      goto LABEL_25;
    }
    uint64_t v7 = a1 + 64;
    uint64_t v16 = *(void *)(v23 + 8 * v10);
    if ((v16 & (1LL << v5)) == 0) {
      goto LABEL_26;
    }
    int v4 = v22;
    if (*(_DWORD *)(a1 + 36) != v22) {
      goto LABEL_27;
    }
    unint64_t v17 = v16 & (-2LL << (v5 & 0x3F));
    if (v17)
    {
      int64_t v8 = __clz(__rbit64(v17)) | v5 & 0xFFFFFFFFFFFFFFC0LL;
      int64_t v9 = v21;
    }

    else
    {
      unint64_t v18 = v10 + 1;
      unint64_t v19 = (unint64_t)(v8 + 63) >> 6;
      int64_t v9 = v21;
      if (v10 + 1 < v19)
      {
        unint64_t v20 = *(void *)(v23 + 8 * v18);
        if (v20)
        {
LABEL_20:
          int64_t v8 = __clz(__rbit64(v20)) + (v18 << 6);
        }

        else
        {
          while (v19 - 2 != v10)
          {
            unint64_t v20 = *(void *)(a1 + 80 + 8 * v10++);
            if (v20)
            {
              unint64_t v18 = v10 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }

    ++v6;
    uint64_t v5 = v8;
    if (v6 == v9) {
      return _swiftEmptyArrayStorage;
    }
  }

  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

unint64_t RCSMessageMetadata.init(item:)(void *a1)
{
  unint64_t v2 = sub_20C20((uint64_t)_swiftEmptyArrayStorage);

  return v2;
}

unint64_t RCSMessageMetadata.debugDescription.getter()
{
  return 0xD000000000000016LL;
}

Swift::Void __swiftcall RCSMessageMetadata.merge(with:)(CoreRCS::RCSMessageMetadata with)
{
  unint64_t v2 = v1;
  char v38 = (char *)with.entries._rawValue + 64;
  uint64_t v4 = 1LL << *((_BYTE *)with.entries._rawValue + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *((void *)with.entries._rawValue + 8);
  int64_t v39 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v17 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v18 = v17 | (v7 << 6);
    }

    else
    {
      int64_t v19 = v7 + 1;
      if (__OFADD__(v7, 1LL)) {
        goto LABEL_36;
      }
      if (v19 >= v39)
      {
LABEL_33:
        swift_release(with.entries._rawValue);
        return;
      }

      unint64_t v20 = *(void *)&v38[8 * v19];
      ++v7;
      if (!v20)
      {
        int64_t v7 = v19 + 1;
        if (v19 + 1 >= v39) {
          goto LABEL_33;
        }
        unint64_t v20 = *(void *)&v38[8 * v7];
        if (!v20)
        {
          int64_t v7 = v19 + 2;
          if (v19 + 2 >= v39) {
            goto LABEL_33;
          }
          unint64_t v20 = *(void *)&v38[8 * v7];
          if (!v20)
          {
            int64_t v21 = v19 + 3;
            if (v21 >= v39) {
              goto LABEL_33;
            }
            unint64_t v20 = *(void *)&v38[8 * v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v7 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_37;
                }
                if (v7 >= v39) {
                  goto LABEL_33;
                }
                unint64_t v20 = *(void *)&v38[8 * v7];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }

            int64_t v7 = v21;
          }
        }
      }

Swift::Int sub_4EC4C(uint64_t a1, uint64_t a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_5C28(&qword_76C40);
  char v40 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_48;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v39 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v37 = v3;
  int64_t v38 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v18 = v17 | (v14 << 6);
      goto LABEL_25;
    }

    int64_t v19 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
      return result;
    }

    if (v19 >= v38) {
      break;
    }
    unint64_t v20 = (void *)(v5 + 64);
    unint64_t v21 = *(void *)(v39 + 8 * v19);
    ++v14;
    if (!v21)
    {
      int64_t v14 = v19 + 1;
      if (v19 + 1 >= v38) {
        goto LABEL_41;
      }
      unint64_t v21 = *(void *)(v39 + 8 * v14);
      if (!v21)
      {
        int64_t v22 = v19 + 2;
        if (v22 >= v38)
        {
LABEL_41:
          swift_release(v5);
          Swift::String v3 = v37;
          if ((v40 & 1) == 0) {
            goto LABEL_48;
          }
          goto LABEL_44;
        }

        unint64_t v21 = *(void *)(v39 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            int64_t v14 = v22 + 1;
            if (__OFADD__(v22, 1LL)) {
              goto LABEL_50;
            }
            if (v14 >= v38) {
              goto LABEL_41;
            }
            unint64_t v21 = *(void *)(v39 + 8 * v14);
            ++v22;
            if (v21) {
              goto LABEL_24;
            }
          }
        }

        int64_t v14 = v22;
      }
    }

Swift::Int sub_4EFAC(uint64_t a1, uint64_t a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_5C28(&qword_76C60);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v35) {
      break;
    }
    int v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v35) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

uint64_t sub_4F2C0(uint64_t a1, uint64_t a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_5C28(&qword_76C48);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v34 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain(v5);
    int64_t v14 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v14 << 6);
      }

      else
      {
        int64_t v19 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }

        if (v19 >= v35) {
          goto LABEL_37;
        }
        unint64_t v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          int64_t v14 = v19 + 1;
          if (v19 + 1 >= v35) {
            goto LABEL_37;
          }
          unint64_t v20 = v36[v14];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              Swift::String v3 = v34;
              if ((a2 & 1) != 0)
              {
                uint64_t v33 = 1LL << *(_BYTE *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v36 = -1LL << v33;
                }
                *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
              }

              break;
            }

            unint64_t v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v14 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_44;
                }
                if (v14 >= v35) {
                  goto LABEL_37;
                }
                unint64_t v20 = v36[v14];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v14 = v21;
          }
        }

Swift::Int sub_4F5BC(uint64_t a1, uint64_t a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_5C28(&qword_76C58);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v34 = v3;
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v35) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          Swift::String v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v35) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

Swift::Int sub_4F8CC(uint64_t a1, uint64_t a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_5C28(&qword_76C20);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v37) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          Swift::String v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v37) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

Swift::Int sub_4FBD8(uint64_t a1, uint64_t a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_5C28(&qword_76C38);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v35) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v35) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

uint64_t sub_4FEEC(uint64_t a1, uint64_t a2)
{
  Swift::String v3 = v2;
  uint64_t v6 = type metadata accessor for TypingIndicator(0LL);
  uint64_t v41 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  sub_5C28(&qword_76C30);
  int v42 = a2;
  uint64_t v43 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  if (*(void *)(v9 + 16))
  {
    uint64_t v10 = 1LL << *(_BYTE *)(v9 + 32);
    uint64_t v11 = *(void *)(v9 + 64);
    uint64_t v38 = (void *)(v9 + 64);
    uint64_t v12 = -1LL;
    if (v10 < 64) {
      uint64_t v12 = ~(-1LL << v10);
    }
    unint64_t v13 = v12 & v11;
    uint64_t v36 = v3;
    int64_t v37 = (unint64_t)(v10 + 63) >> 6;
    uint64_t result = swift_retain(v9);
    int64_t v15 = 0LL;
    char v39 = v8;
    uint64_t v40 = v9;
    while (1)
    {
      if (v13)
      {
        unint64_t v16 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v17 = v16 | (v15 << 6);
      }

      else
      {
        int64_t v18 = v15 + 1;
        if (__OFADD__(v15, 1LL))
        {
          __break(1u);
LABEL_34:
          __break(1u);
          return result;
        }

        int64_t v19 = v38;
        if (v18 >= v37) {
          goto LABEL_25;
        }
        unint64_t v20 = v38[v18];
        ++v15;
        if (!v20)
        {
          int64_t v15 = v18 + 1;
          if (v18 + 1 >= v37) {
            goto LABEL_25;
          }
          unint64_t v20 = v38[v15];
          if (!v20)
          {
            int64_t v21 = v18 + 2;
            if (v21 >= v37)
            {
LABEL_25:
              swift_release(v9);
              if ((v42 & 1) == 0)
              {
                uint64_t result = swift_release(v9);
                Swift::String v3 = v36;
                goto LABEL_32;
              }

              uint64_t v34 = 1LL << *(_BYTE *)(v9 + 32);
              if (v34 >= 64) {
                bzero(v19, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                void *v19 = -1LL << v34;
              }
              Swift::String v3 = v36;
              *(void *)(v9 + swift_weakDestroy(v0 + 16) = 0LL;
              break;
            }

            unint64_t v20 = v38[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v15 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_34;
                }
                if (v15 >= v37) {
                  goto LABEL_25;
                }
                unint64_t v20 = v38[v15];
                ++v21;
                if (v20) {
                  goto LABEL_22;
                }
              }
            }

            int64_t v15 = v21;
          }
        }

uint64_t sub_501B0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = (RCSServiceSession *)a1[1];
  swift_bridgeObjectRetain();
  String.hash(into:)(v48, v6, v7);
  swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
  uint64_t v15 = a1[2];
  unint64_t v16 = (RCSServiceSession *)a1[3];
  swift_bridgeObjectRetain();
  String.hash(into:)(v48, v15, v16);
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  uint64_t v24 = (RCSServiceSession *)a1[4];
  swift_bridgeObjectRetain();
  sub_557A0((uint64_t)v48, (uint64_t)v24);
  swift_bridgeObjectRelease(v24, v25, v26, v27, v28, v29, v30, v31);
  uint64_t v32 = (RCSServiceSession *)a1[6];
  if (v32)
  {
    uint64_t v33 = a1[5];
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)(v48, v33, v32);
    swift_bridgeObjectRelease(v32, v34, v35, v36, v37, v38, v39, v40);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Hasher._combine(_:)(*((unsigned __int8 *)a1 + 56));
  Swift::Int v41 = Hasher._finalize()();
  unint64_t v42 = _HashTable.nextHole(atOrAfter:)(v41 & ~(-1LL << *(_BYTE *)(a3 + 32)), a3 + 64, ~(-1LL << *(_BYTE *)(a3 + 32)));
  *(void *)(a3 + 64 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v42;
  uint64_t v43 = (_OWORD *)(*(void *)(a3 + 48) + (v42 << 6));
  __int128 v44 = *((_OWORD *)a1 + 1);
  *uint64_t v43 = *(_OWORD *)a1;
  v43[1] = v44;
  v43[2] = *((_OWORD *)a1 + 2);
  *(_OWORD *)((char *)v43 + 41) = *(_OWORD *)((char *)a1 + 41);
  uint64_t v45 = *(void *)(a3 + 56);
  uint64_t v46 = type metadata accessor for TypingIndicator(0LL);
  uint64_t result = sub_21A68(a2, v45 + *(void *)(*(void *)(v46 - 8) + 72LL) * v42);
  ++*(void *)(a3 + 16);
  return result;
}

void *sub_50348()
{
  int64_t v1 = v0;
  sub_5C28(&qword_76C40);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    *int64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

void *sub_504F0()
{
  int64_t v1 = v0;
  sub_5C28(&qword_76C60);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    *int64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void *sub_506A4()
{
  int64_t v1 = v0;
  sub_5C28(&qword_76C48);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release(v2);
LABEL_28:
    *int64_t v1 = v4;
    return result;
  }

  SEL v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void *sub_50888()
{
  int64_t v1 = v0;
  sub_5C28(&qword_76C58);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    *int64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

id sub_50A24()
{
  int64_t v1 = v0;
  sub_5C28(&qword_76C20);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    *int64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

uint64_t sub_50BD4()
{
  uint64_t v1 = type metadata accessor for TypingIndicator(0LL);
  uint64_t v40 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v39 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_5C28(&qword_76C30);
  id v36 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v42 = v4;
  if (!v5)
  {
    uint64_t result = swift_release(v3);
    uint64_t v35 = v42;
    SEL v34 = v36;
LABEL_28:
    *SEL v34 = v35;
    return result;
  }

  uint64_t v6 = v4;
  unint64_t v7 = (void *)(v4 + 64);
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  id v37 = (const void *)(v3 + 64);
  if (v6 != v3 || (unint64_t)v7 >= v3 + 64 + 8 * v8)
  {
    memmove(v7, v37, 8 * v8);
    uint64_t v6 = v42;
  }

  int64_t v10 = 0LL;
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v41 = v3;
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v38 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v14 = (uint64_t)v39;
  while (1)
  {
    if (v13)
    {
      uint64_t v43 = (v13 - 1) & v13;
      int64_t v44 = v10;
      unint64_t v15 = __clz(__rbit64(v13)) | (v10 << 6);
      uint64_t result = v41;
      goto LABEL_12;
    }

    int64_t v30 = v10 + 1;
    uint64_t result = v41;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v30 >= v38) {
      goto LABEL_26;
    }
    unint64_t v31 = *((void *)v37 + v30);
    int64_t v32 = v10 + 1;
    if (!v31)
    {
      int64_t v32 = v10 + 2;
      if (v10 + 2 >= v38) {
        goto LABEL_26;
      }
      unint64_t v31 = *((void *)v37 + v32);
      if (!v31) {
        break;
      }
    }

void *sub_50E88()
{
  uint64_t v1 = v0;
  sub_5C28(&qword_76C38);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

uint64_t sub_5103C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_51058(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_51058(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_5C28(&qword_77B28);
    uint64_t v11 = (void *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 5);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v14 = (unint64_t)(v11 + 4);
  unint64_t v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 32 * v8) {
      memmove(v11 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_30;
  }

  if (v15 >= v14 + 32 * v8 || v14 >= v15 + 32 * v8)
  {
    sub_5C28(&qword_77B30);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_511E0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2LL;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

unint64_t sub_5126C()
{
  unint64_t result = qword_77B20;
  if (!qword_77B20)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RCSMessageMetadata.Entry.HeaderKeys,  &type metadata for RCSMessageMetadata.Entry.HeaderKeys);
    atomic_store(result, (unint64_t *)&qword_77B20);
  }

  return result;
}

ValueMetadata *type metadata accessor for RCSMessageMetadata()
{
  return &type metadata for RCSMessageMetadata;
}

void *initializeBufferWithCopyOfBuffer for RCSMessageMetadata.Entry(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for RCSMessageMetadata.Entry(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v3);
  return a1;
}

__n128 initializeWithTake for RCSMessageMetadata.Entry(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for RCSMessageMetadata.Entry(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for RCSMessageMetadata.Entry(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RCSMessageMetadata.Entry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RCSMessageMetadata.Entry()
{
  return &type metadata for RCSMessageMetadata.Entry;
}

uint64_t storeEnumTagSinglePayload for RCSMessageMetadata.Entry.HeaderKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_5143C + 4 * byte_613E0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_5145C + 4 * byte_613E5[v4]))();
  }
}

_BYTE *sub_5143C(_BYTE *result, char a2)
{
  *__n128 result = a2;
  return result;
}

_BYTE *sub_5145C(_BYTE *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_51464(_DWORD *result, int a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_5146C(_WORD *result, __int16 a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_51474(_WORD *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_5147C(_DWORD *result)
{
  *__n128 result = 0;
  return result;
}

ValueMetadata *type metadata accessor for RCSMessageMetadata.Entry.HeaderKeys()
{
  return &type metadata for RCSMessageMetadata.Entry.HeaderKeys;
}

uint64_t sub_51498(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TypingIndicator(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_514E0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_BYTE *)(v5 + 49) = a4;
  *(void *)(v5 + 136) = a3;
  *(void *)(v5 + 144) = v4;
  *(void *)(v5 + 120) = a1;
  *(void *)(v5 + 128) = a2;
  return swift_task_switch(sub_51500, v4, 0LL);
}

uint64_t sub_51500()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 128);
  swift_beginAccess(*(void *)(v0 + 144) + 160LL, v0 + 56, 33LL, 0LL);
  uint64_t v3 = sub_29674(v1, v2);
  *(void *)(v0 + 152) = v3;
  swift_endAccess(v0 + 56);
  if (v3)
  {
    uint64_t v4 = *(void *)(v0 + 144);
    uint64_t v5 = *(void *)(v3
                   + OBJC_IVAR____TtCC7CoreRCS22RCSOperationControllerP33_1B0F715D17C82627C67D971FB94137349Operation_id
                   + 24);
    uint64_t v6 = *(void *)(v3
                   + OBJC_IVAR____TtCC7CoreRCS22RCSOperationControllerP33_1B0F715D17C82627C67D971FB94137349Operation_id
                   + 32);
    sub_CA38( (void *)(v3 + OBJC_IVAR____TtCC7CoreRCS22RCSOperationControllerP33_1B0F715D17C82627C67D971FB94137349Operation_id),  v5);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 24))(v5, v6);
    uint64_t v9 = v8;
    swift_beginAccess(v4 + 168, v0 + 80, 33LL, 0LL);
    sub_29688(v7, (uint64_t)v9);
    uint64_t v11 = v10;
    swift_endAccess(v0 + 80);
    swift_bridgeObjectRelease(v9, v12, v13, v14, v15, v16, v17, v18);
    swift_bridgeObjectRelease(v11, v19, v20, v21, v22, v23, v24, v25);
    return swift_task_switch(sub_51870, v3, 0LL);
  }

  else
  {
    if (qword_76BC0 != -1) {
      swift_once(&qword_76BC0, sub_22AF4);
    }
    uint64_t v27 = *(void *)(v0 + 128);
    uint64_t v28 = type metadata accessor for Logger(0LL);
    sub_6298(v28, (uint64_t)qword_76D38);
    uint64_t v29 = swift_bridgeObjectRetain_n(v27, 2LL);
    int64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.default.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    unint64_t v33 = *(void *)(v0 + 128);
    if (v32)
    {
      uint64_t v34 = *(void *)(v0 + 120);
      uint64_t v35 = swift_slowAlloc(22LL, -1LL);
      uint64_t v36 = swift_slowAlloc(32LL, -1LL);
      uint64_t v41 = v36;
      *(_DWORD *)uint64_t v35 = 141558275;
      *(void *)(v0 + 104) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112);
      *(_WORD *)(v35 + 12) = 2081;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 112) = sub_B004(v34, v33, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120);
      swift_bridgeObjectRelease_n(v33, 3LL);
      _os_log_impl( &dword_0,  v30,  v31,  "Operation completed with ID %{private,mask.hash}s but no operation with that ID is being tracked",  (uint8_t *)v35,  0x16u);
      swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1LL, -1LL);
      swift_slowDealloc(v35, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 128), 2LL);
    }

    id v37 = *(int **)(*(void *)(v0 + 144) + 136LL);
    if (v37)
    {
      if ((*(_BYTE *)(v0 + 49) & 1) != 0)
      {
        uint64_t v38 = *(void *)(v0 + 136);
        *(void *)(v0 + swift_weakDestroy(v0 + 16) = v38;
        *(_BYTE *)(v0 + 48) = 1;
        swift_errorRetain(v38);
      }

      else
      {
        *(void *)(v0 + 40) = &type metadata for Never;
        *(_BYTE *)(v0 + 48) = 0;
      }

      uint64_t v40 = (int *)((char *)v37 + *v37);
      id v39 = (void *)swift_task_alloc(v37[1]);
      *(void *)(v0 + 160) = v39;
      *id v39 = v0;
      v39[1] = sub_518E8;
      return ((uint64_t (*)(void, void, uint64_t))v40)( *(void *)(v0 + 120),  *(void *)(v0 + 128),  v0 + 16);
    }

    else
    {
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }

uint64_t sub_51870()
{
  uint64_t v1 = *(void *)(v0 + 144);
  sub_22E7C(*(void *)(v0 + 136), *(_BYTE *)(v0 + 49) & 1);
  return swift_task_switch(sub_518B8, v1, 0LL);
}

uint64_t sub_518B8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_518E8()
{
  uint64_t v1 = *v0 + 16;
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 160));
  sub_1D424(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_5193C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[23] = a3;
  v4[24] = v3;
  v4[21] = a1;
  v4[22] = a2;
  return swift_task_switch(sub_51958, v3, 0LL);
}

uint64_t sub_51958()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 176);
  swift_beginAccess(*(void *)(v0 + 192) + 160LL, v0 + 104, 33LL, 0LL);
  uint64_t v3 = sub_29674(v1, v2);
  *(void *)(v0 + 200) = v3;
  swift_endAccess(v0 + 104);
  if (v3)
  {
    uint64_t v4 = *(void *)(v0 + 192);
    uint64_t v5 = *(void *)(v3
                   + OBJC_IVAR____TtCC7CoreRCS22RCSOperationControllerP33_1B0F715D17C82627C67D971FB94137349Operation_id
                   + 24);
    uint64_t v6 = *(void *)(v3
                   + OBJC_IVAR____TtCC7CoreRCS22RCSOperationControllerP33_1B0F715D17C82627C67D971FB94137349Operation_id
                   + 32);
    sub_CA38( (void *)(v3 + OBJC_IVAR____TtCC7CoreRCS22RCSOperationControllerP33_1B0F715D17C82627C67D971FB94137349Operation_id),  v5);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 24))(v5, v6);
    uint64_t v9 = v8;
    swift_beginAccess(v4 + 168, v0 + 128, 33LL, 0LL);
    sub_29688(v7, (uint64_t)v9);
    uint64_t v11 = v10;
    swift_endAccess(v0 + 128);
    swift_bridgeObjectRelease(v9, v12, v13, v14, v15, v16, v17, v18);
    swift_bridgeObjectRelease(v11, v19, v20, v21, v22, v23, v24, v25);
    return swift_task_switch(sub_51CF4, v3, 0LL);
  }

  else
  {
    if (qword_76BC0 != -1) {
      swift_once(&qword_76BC0, sub_22AF4);
    }
    uint64_t v27 = *(void *)(v0 + 176);
    uint64_t v28 = type metadata accessor for Logger(0LL);
    sub_6298(v28, (uint64_t)qword_76D38);
    uint64_t v29 = swift_bridgeObjectRetain_n(v27, 2LL);
    int64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.default.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    unint64_t v33 = *(void *)(v0 + 176);
    if (v32)
    {
      uint64_t v34 = *(void *)(v0 + 168);
      uint64_t v35 = swift_slowAlloc(22LL, -1LL);
      uint64_t v36 = swift_slowAlloc(32LL, -1LL);
      uint64_t v43 = v36;
      *(_DWORD *)uint64_t v35 = 141558275;
      *(void *)(v0 + 152) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160);
      *(_WORD *)(v35 + 12) = 2081;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 160) = sub_B004(v34, v33, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168);
      swift_bridgeObjectRelease_n(v33, 3LL);
      _os_log_impl( &dword_0,  v30,  v31,  "Operation completed with ID %{private,mask.hash}s but no operation with that ID is being tracked",  (uint8_t *)v35,  0x16u);
      swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1LL, -1LL);
      swift_slowDealloc(v35, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 176), 2LL);
    }

    id v37 = *(int **)(*(void *)(v0 + 192) + 136LL);
    if (v37)
    {
      uint64_t v38 = (void *)(v0 + 64);
      sub_53900(*(void *)(v0 + 184), v0 + 16);
      char v39 = *(_BYTE *)(v0 + 56);
      if ((v39 & 1) != 0)
      {
        *uint64_t v38 = *(void *)(v0 + 16);
      }

      else
      {
        *(void *)(v0 + 88) = sub_5C28(&qword_77028);
        uint64_t v40 = swift_allocObject(&unk_73678, 56LL, 7LL);
        *(void *)(v0 + 64) = v40;
        sub_22168((__int128 *)(v0 + 16), v40 + 16);
      }

      *(_BYTE *)(v0 + 96) = v39;
      uint64_t v42 = (int *)((char *)v37 + *v37);
      uint64_t v41 = (void *)swift_task_alloc(v37[1]);
      *(void *)(v0 + 208) = v41;
      *uint64_t v41 = v0;
      v41[1] = sub_51D64;
      return ((uint64_t (*)(void, void, void *))v42)(*(void *)(v0 + 168), *(void *)(v0 + 176), v38);
    }

    else
    {
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }

uint64_t sub_51CF4()
{
  uint64_t v1 = *(void *)(v0 + 192);
  sub_234FC(*(void *)(v0 + 184));
  return swift_task_switch(sub_51D34, v1, 0LL);
}

uint64_t sub_51D34()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_51D64()
{
  uint64_t v1 = *v0 + 64;
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 208));
  sub_1D424(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t RCSReachabilityController.__allocating_init(delegate:operationConfiguration:)( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject(v2, 32LL, 7LL);
  RCSReachabilityController.init(delegate:operationConfiguration:)(a1, a2);
  return v5;
}

uint64_t RCSReachabilityController.init(delegate:operationConfiguration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = a1;
  uint64_t v5 = type metadata accessor for RCSOperationController();
  swift_allocObject(v5, 184LL, 15LL);
  *(void *)(v3 + 24) = RCSOperationController.init(configuration:)(a2);
  return v3;
}

uint64_t RCSReachabilityController.receivedCapabilities(_:operationID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  void v4[5] = v3;
  _OWORD v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_51E70, 0LL, 0LL);
}

uint64_t sub_51E70()
{
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_77B40 + dword_77B40);
  uint64_t v1 = (void *)swift_task_alloc(unk_77B44);
  v0[6] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_51EDC;
  return v3(v0[3], v0[4], v0[2]);
}

uint64_t sub_51EDC()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 48));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

RCSServiceSession *sub_51F24( RCSServiceSession *a1, char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, unsigned __int8 a8)
{
  __n128 result = (RCSServiceSession *)sub_20E48((RCSServiceSession *)_swiftEmptyArrayStorage, a2, a3, a4, a5, a6, a7, a8);
  int64_t v30 = result;
  uint64_t v12 = *(void *)a1[1].IMDTelephonyServiceSession_opaque;
  if (v12)
  {
    swift_bridgeObjectRetain();
    state = (RCSServiceSession **)a1[2].state;
    do
    {
      id v14 = *state;
      v29[0] = (uint64_t)*(state - 1);
      v29[1] = (uint64_t)v14;
      swift_bridgeObjectRetain();
      sub_51FF4(&v30, v29, v8, a2);
      state += 2;
      swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
      --v12;
    }

    while (v12);
    swift_bridgeObjectRelease(a1, v22, v23, v24, v25, v26, v27, v28);
    return v30;
  }

  return result;
}

void sub_51FF4(RCSServiceSession **a1, uint64_t *a2, uint64_t a3, void *a4)
{
  uint64_t v102 = a1;
  uint64_t v7 = sub_5C28(&qword_762F8);
  uint64_t v101 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *a2;
  uint64_t v11 = (RCSServiceSession *)a2[1];
  uint64_t v104 = v10;
  uint64_t v12 = *(void **)(a3 + 16);
  swift_bridgeObjectRetain_n(v11, 2LL);
  id v13 = [v12 internalServiceName];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  uint64_t v103 = v14;

  id v15 = [a4 serviceOfLastMessage];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    id v19 = v18;
  }

  else
  {
    uint64_t v17 = 0LL;
    id v19 = 0LL;
  }

  id v20 = objc_msgSend(v12, "internalServiceName", v101);
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  id v23 = v22;

  if (v19)
  {
    if (v17 == v21 && v19 == v23)
    {
      swift_bridgeObjectRelease(v19, v24, v25, v26, v27, v28, v29, v30);
      swift_bridgeObjectRelease(v23, v31, v32, v33, v34, v35, v36, v37);
LABEL_10:
      uint64_t v53 = 1LL;
      uint64_t v54 = v104;
      goto LABEL_14;
    }

    char v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, v21, v23, 0LL);
    swift_bridgeObjectRelease(v19, v39, v40, v41, v42, v43, v44, v45);
    swift_bridgeObjectRelease(v23, v46, v47, v48, v49, v50, v51, v52);
    if ((v38 & 1) != 0) {
      goto LABEL_10;
    }
  }

  else
  {
    swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  }

  uint64_t v54 = v104;
  if (qword_76BC8 != -1) {
    swift_once(&qword_76BC8, sub_38588);
  }
  uint64_t v55 = sub_6298(v7, (uint64_t)qword_77348);
  uint64_t v56 = v101;
  (*(void (**)(char *, uint64_t, uint64_t))(v101 + 16))(v9, v55, v7);
  PrototypingSetting.wrappedValue.getter(&v106, v7);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v9, v7);
  uint64_t v53 = v106;
LABEL_14:
  id v57 = objc_allocWithZone(&OBJC_CLASS___IMServiceReachabilityHandleResult);
  NSString v58 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11, v59, v60, v61, v62, v63, v64, v65);
  uint64_t v66 = v103;
  NSString v67 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v66, v68, v69, v70, v71, v72, v73, v74);
  id v75 = [v57 initWithHandleID:v58 service:v67 isReachable:v53];

  if (v75)
  {
    uint64_t v76 = v102;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v102);
    id v105 = *v76;
    *uint64_t v76 = (RCSServiceSession *)0x8000000000000000LL;
    sub_29CE8((uint64_t)v75, v54, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
    unint64_t v78 = *v76;
    *uint64_t v76 = v105;
    swift_bridgeObjectRelease(v11, v79, v80, v81, v82, v83, v84, v85);
    swift_bridgeObjectRelease(v78, v86, v87, v88, v89, v90, v91, v92);
  }

  else
  {
    uint64_t v93 = (void *)sub_2985C(v54, (uint64_t)v11);
    swift_bridgeObjectRelease(v11, v94, v95, v96, v97, v98, v99, v100);
  }

uint64_t sub_522F8(void *a1)
{
  uint64_t v3 = *v1;
  id v4 = [a1 handleIDs];
  uint64_t v5 = (RCSServiceSession *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, &type metadata for String);

  uint64_t v6 = *(void *)v5[1].IMDTelephonyServiceSession_opaque;
  swift_bridgeObjectRelease(v5, v7, v8, v9, v10, v11, v12, v13);
  if (!v6)
  {
    if (qword_76B98 != -1) {
      swift_once(&qword_76B98, sub_21C54);
    }
    uint64_t v44 = type metadata accessor for Logger(0LL);
    uint64_t v45 = sub_6298(v44, (uint64_t)static Logger.reachability);
    SEL v46 = (os_log_s *)Logger.logObject.getter(v45);
    os_log_type_t v47 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v46, v47)) {
      goto LABEL_13;
    }
    id v48 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v48 = 0;
    _os_log_impl(&dword_0, v46, v47, "RCS is unavailable for sending: no handles requested", v48, 2u);
    id v49 = v48;
LABEL_12:
    swift_slowDealloc(v49, -1LL, -1LL);
LABEL_13:

    return 0LL;
  }

  id v14 = (void *)v1[2];
  id v15 = [a1 context];
  char v16 = (*(uint64_t (**)(void))(*(void *)(v3 + 88) + 8LL))();

  if ((v16 & 1) == 0)
  {
    if (qword_76B98 != -1) {
      swift_once(&qword_76B98, sub_21C54);
    }
    uint64_t v51 = type metadata accessor for Logger(0LL);
    uint64_t v52 = sub_6298(v51, (uint64_t)static Logger.reachability);
    uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
    os_log_type_t v54 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v55 = 0;
      _os_log_impl(&dword_0, v53, v54, "RCS is unavailable for sending: RCS disabled", v55, 2u);
      swift_slowDealloc(v55, -1LL, -1LL);
    }

    return 3LL;
  }

  id v17 = [a1 handleIDs];
  id v18 = (RCSServiceSession *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, &type metadata for String);

  uint64_t v19 = *(void *)v18[1].IMDTelephonyServiceSession_opaque;
  swift_bridgeObjectRelease(v18, v20, v21, v22, v23, v24, v25, v26);
  id v27 = [a1 context];
  id v28 = [v14 maxChatParticipantsForContext:v27];

  if ((uint64_t)v28 < v19)
  {
    if (qword_76B98 != -1) {
      swift_once(&qword_76B98, sub_21C54);
    }
    uint64_t v29 = type metadata accessor for Logger(0LL);
    sub_6298(v29, (uint64_t)static Logger.reachability);
    id v30 = a1;
    SEL v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v31, v32))
    {
      id v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)id v33 = 134217984;
      id v34 = [v30 handleIDs];
      id v35 = (RCSServiceSession *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v34, &type metadata for String);

      uint64_t v36 = *(void *)v35[1].IMDTelephonyServiceSession_opaque;
      swift_bridgeObjectRelease(v35, v37, v38, v39, v40, v41, v42, v43);
      uint64_t v132 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133);

      _os_log_impl(&dword_0, v31, v32, "Too many participants (%ld) greater than service max participants", v33, 0xCu);
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    else
    {
    }

    return 1LL;
  }

  id v56 = [a1 context];
  unsigned __int8 v57 = [v56 conversationWasDowngraded];

  if ((v57 & 1) != 0)
  {
    if (qword_76B98 != -1) {
      swift_once(&qword_76B98, sub_21C54);
    }
    uint64_t v58 = type metadata accessor for Logger(0LL);
    uint64_t v59 = sub_6298(v58, (uint64_t)static Logger.reachability);
    id v60 = (os_log_s *)Logger.logObject.getter(v59);
    os_log_type_t v61 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v60, v61))
    {
      id v62 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v62 = 0;
      _os_log_impl(&dword_0, v60, v61, "RCS service downgraded", v62, 2u);
      swift_slowDealloc(v62, -1LL, -1LL);
    }

    return 7LL;
  }

  id v63 = [a1 handleIDs];
  id v64 = (RCSServiceSession *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v63, &type metadata for String);

  uint64_t v72 = *(void *)v64[1].IMDTelephonyServiceSession_opaque;
  if (!v72)
  {
LABEL_33:
    swift_bridgeObjectRelease(v64, v65, v66, v67, v68, v69, v70, v71);
    id v90 = [a1 handleIDs];
    id v91 = (RCSServiceSession *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v90, &type metadata for String);

    if (*(void *)v91[1].IMDTelephonyServiceSession_opaque)
    {
      uint64_t v100 = *(void *)v91[2].IMDTelephonyServiceSession_opaque;
      unint64_t v99 = *(void *)v91[2].state;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease(v91, v101, v102, v103, v104, v105, v106, v107);
      id v108 = [a1 handleIDs];
      uint64_t v109 = (RCSServiceSession *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v108, &type metadata for String);

      uint64_t v110 = *(void *)v109[1].IMDTelephonyServiceSession_opaque;
      swift_bridgeObjectRelease(v109, v111, v112, v113, v114, v115, v116, v117);
      if (v110 == 1)
      {
        NSString v118 = String._bridgeToObjectiveC()();
        unsigned __int8 v119 = [v14 hasValidDowngradeRequestForHandleID:v118];

        if ((v119 & 1) != 0)
        {
          if (qword_76B98 != -1) {
            swift_once(&qword_76B98, sub_21C54);
          }
          uint64_t v120 = type metadata accessor for Logger(0LL);
          sub_6298(v120, (uint64_t)static Logger.reachability);
          uint64_t v121 = swift_bridgeObjectRetain();
          SEL v46 = (os_log_s *)Logger.logObject.getter(v121);
          os_log_type_t v122 = static os_log_type_t.info.getter();
          if (!os_log_type_enabled(v46, v122))
          {

            swift_bridgeObjectRelease_n(v99, 2LL);
            return 0LL;
          }

          unint64_t v123 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v124 = swift_slowAlloc(32LL, -1LL);
          uint64_t v132 = v124;
          *(_DWORD *)unint64_t v123 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v131 = sub_B004(v100, v99, &v132);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, &v132);
          swift_bridgeObjectRelease_n(v99, 3LL);
          _os_log_impl(&dword_0, v46, v122, "RCS is unavailable for sending: %s requested downgrade", v123, 0xCu);
          swift_arrayDestroy(v124, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v124, -1LL, -1LL);
          id v49 = v123;
          goto LABEL_12;
        }
      }

      id v125 = (RCSServiceSession *)v99;
    }

    else
    {
      id v125 = v91;
    }

    swift_bridgeObjectRelease(v125, v92, v93, v94, v95, v96, v97, v98);
    return 0LL;
  }

  swift_bridgeObjectRetain();
  state = (RCSServiceSession **)v64[2].state;
  while (1)
  {
    unsigned __int8 v74 = *state;
    swift_bridgeObjectRetain();
    NSString v75 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v74, v76, v77, v78, v79, v80, v81, v82);
    LOBYTE(v74) = objc_msgSend(v75, "__im_isChatBot");

    state += 2;
    if (!--v72)
    {
      swift_bridgeObjectRelease(v64, v83, v84, v85, v86, v87, v88, v89);
      goto LABEL_33;
    }
  }

  swift_bridgeObjectRelease_n(v64, 2LL);
  if (qword_76B98 != -1) {
    swift_once(&qword_76B98, sub_21C54);
  }
  uint64_t v126 = type metadata accessor for Logger(0LL);
  uint64_t v127 = sub_6298(v126, (uint64_t)static Logger.reachability);
  id v128 = (os_log_s *)Logger.logObject.getter(v127);
  os_log_type_t v129 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v128, v129))
  {
    id v130 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v130 = 0;
    _os_log_impl(&dword_0, v128, v129, "RCS is available for sending: assume RCS is avaibable for chat bot", v130, 2u);
    swift_slowDealloc(v130, -1LL, -1LL);
  }

  return 1LL;
}

RCSServiceSession *sub_52B3C(void *a1)
{
  id v2 = [a1 handleIDs];
  uint64_t v3 = (RCSServiceSession *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String);

  id v11 = (RCSServiceSession *)sub_20E48((RCSServiceSession *)_swiftEmptyArrayStorage, v4, v5, v6, v7, v8, v9, v10);
  os_log_type_t v32 = v11;
  uint64_t v19 = *(void *)v3[1].IMDTelephonyServiceSession_opaque;
  if (v19)
  {
    swift_bridgeObjectRetain();
    state = (RCSServiceSession **)v3[2].state;
    do
    {
      id v21 = *state;
      v31[0] = (uint64_t)*(state - 1);
      v31[1] = (uint64_t)v21;
      swift_bridgeObjectRetain();
      sub_52C3C(&v32, v31, v1);
      state += 2;
      swift_bridgeObjectRelease(v21, v22, v23, v24, v25, v26, v27, v28);
      --v19;
    }

    while (v19);
    swift_bridgeObjectRelease_n(v3, 2LL);
    return v32;
  }

  else
  {
    uint64_t v29 = v11;
    swift_bridgeObjectRelease(v3, v12, v13, v14, v15, v16, v17, v18);
  }

  return v29;
}

void sub_52C3C(RCSServiceSession **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  id v4 = (RCSServiceSession *)a2[1];
  uint64_t v6 = *(void **)(a3 + 16);
  swift_bridgeObjectRetain_n(v4, 2LL);
  id v7 = [v6 internalServiceName];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  id v9 = v8;

  id v10 = objc_allocWithZone(&OBJC_CLASS___IMServiceReachabilityHandleResult);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4, v12, v13, v14, v15, v16, v17, v18);
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9, v20, v21, v22, v23, v24, v25, v26);
  id v27 = [v10 initWithHandleID:v11 service:v19 isReachable:0];

  if (v27)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
    uint64_t v52 = *a1;
    *a1 = (RCSServiceSession *)0x8000000000000000LL;
    sub_29CE8((uint64_t)v27, v5, (uint64_t)v4, isUniquelyReferenced_nonNull_native);
    uint64_t v29 = *a1;
    *a1 = v52;
    swift_bridgeObjectRelease(v4, v30, v31, v32, v33, v34, v35, v36);
    swift_bridgeObjectRelease(v29, v37, v38, v39, v40, v41, v42, v43);
  }

  else
  {
    uint64_t v44 = (void *)sub_2985C(v5, (uint64_t)v4);
    swift_bridgeObjectRelease(v4, v45, v46, v47, v48, v49, v50, v51);
  }

uint64_t RCSReachabilityController.calculateReachability(with:responseHandler:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch(sub_52DB8, 0LL, 0LL);
}

uint64_t sub_52DB8()
{
  uint64_t v1 = sub_522F8(*(void **)(v0 + 16));
  uint64_t v2 = v1;
  if ((v3 & 1) != 0)
  {
    uint64_t v26 = *(void *)(v0 + 32);
    if (v1)
    {
      NSString v27 = [*(id *)(v26 + 16) internalServiceName];
      if (!v27)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
        uint64_t v29 = v28;
        NSString v27 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v29, v30, v31, v32, v33, v34, v35, v36);
      }

      Class isa = (Class)[*(id *)(v0 + 16) handleIDs];
      if (!isa)
      {
        id v38 = (RCSServiceSession *)static Array._unconditionallyBridgeFromObjectiveC(_:)(0LL, &type metadata for String);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v38, v39, v40, v41, v42, v43, v44, v45);
      }

      uint64_t v47 = *(void *)(v0 + 16);
      id v46 = *(void **)(v0 + 24);
      id v48 =  [(id)objc_opt_self(IMServiceReachabilityResult) finalResultForService:v27 handleIDs:isa allAreReachable:1 checkedServer:0 error:0];

      [v46 reachabilityRequest:v47 updatedWithResult:v48];
    }

    else
    {
      sub_534CC(*(void **)(v0 + 16), (uint64_t *)v26, *(void **)(v0 + 24));
    }
  }

  else
  {
    NSString v4 = [*(id *)(*(void *)(v0 + 32) + 16) internalServiceName];
    if (!v4)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v6 = v5;
      NSString v4 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    Class v14 = (Class)[*(id *)(v0 + 16) handleIDs];
    if (!v14)
    {
      id v15 = (RCSServiceSession *)static Array._unconditionallyBridgeFromObjectiveC(_:)(0LL, &type metadata for String);
      Class v14 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v15, v16, v17, v18, v19, v20, v21, v22);
    }

    uint64_t v24 = *(void *)(v0 + 16);
    id v23 = *(void **)(v0 + 24);
    id v25 =  [(id)objc_opt_self(IMServiceReachabilityResult) finalResultForService:v4 handleIDs:v14 allAreReachable:0 checkedServer:0 error:v2];

    [v23 reachabilityRequest:v24 updatedWithResult:v25];
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_52FE0(RCSServiceSession *a1, char a2, char a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  id v11 = [*(id *)(a5 + 16) internalServiceName];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  unsigned __int8 v13 = v12;

  uint64_t v14 = swift_bridgeObjectRetain();
  char v15 = sub_5335C(v14);
  swift_bridgeObjectRelease(a1, v16, v17, v18, v19, v20, v21, v22);
  id v23 = objc_allocWithZone(&OBJC_CLASS___IMServiceReachabilityResult);
  swift_bridgeObjectRetain();
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v13, v25, v26, v27, v28, v29, v30, v31);
  unint64_t v32 = sub_536F8();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1, v34, v35, v36, v37, v38, v39, v40);
  id v41 = [v23 initWithService:v24 error:a4 handleResults:isa isFinal:a2 & 1 allAreReachable:v15 & 1 didCheckServer:a3 & 1];

  if (qword_76B98 != -1) {
    swift_once(&qword_76B98, sub_21C54);
  }
  uint64_t v42 = type metadata accessor for Logger(0LL);
  sub_6298(v42, (uint64_t)static Logger.reachability);
  id v43 = v41;
  id v44 = (os_log_s *)Logger.logObject.getter(v43);
  os_log_type_t v45 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v44, v45))
  {
    uint64_t v46 = swift_slowAlloc(24LL, -1LL);
    uint64_t v47 = swift_slowAlloc(32LL, -1LL);
    v71[0] = v47;
    *(_DWORD *)uint64_t v46 = 67109634;
    LODWORD(v70) = [v43 allAreReachable];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, (char *)&v70 + 4);
    *(_WORD *)(v46 + 8) = 1024;
    LODWORD(v70) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, (char *)&v70 + 4);
    *(_WORD *)(v46 + 14) = 2080;
    id v48 = [v43 handleResults];
    id v49 = (RCSServiceSession *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v48,  &type metadata for String,  v32,  &protocol witness table for String);

    id v50 = sub_53734((uint64_t)v49);
    swift_bridgeObjectRelease(v49, v51, v52, v53, v54, v55, v56, v57);
    uint64_t v58 = Dictionary.description.getter( v50,  &type metadata for String,  &type metadata for Bool,  &protocol witness table for String);
    id v60 = v59;
    swift_release(v50);
    uint64_t v70 = sub_B004(v58, (unint64_t)v60, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71);

    swift_bridgeObjectRelease(v60, v61, v62, v63, v64, v65, v66, v67);
    _os_log_impl( &dword_0,  v44,  v45,  "All handles reachable over RCS %{BOOL}d isFinal %{BOOL}d per-handle reachability %s",  (uint8_t *)v46,  0x18u);
    swift_arrayDestroy(v47, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1LL, -1LL);
    swift_slowDealloc(v46, -1LL, -1LL);
  }

  else
  {
  }

  [a6 reachabilityRequest:a7 updatedWithResult:v43];
}

uint64_t sub_5335C(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0LL;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }

    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1LL)) {
      break;
    }
    if (v11 >= v6) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v6) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v2 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v6) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v2 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v6) {
            goto LABEL_24;
          }
          unint64_t v12 = *(void *)(v2 + 8 * v8);
          if (!v12)
          {
            int64_t v13 = v11 + 4;
            if (v13 >= v6)
            {
LABEL_24:
              uint64_t v14 = 1LL;
              goto LABEL_25;
            }

            unint64_t v12 = *(void *)(v2 + 8 * v13);
            if (!v12)
            {
              while (1)
              {
                int64_t v8 = v13 + 1;
                if (__OFADD__(v13, 1LL)) {
                  goto LABEL_27;
                }
                if (v8 >= v6) {
                  goto LABEL_24;
                }
                unint64_t v12 = *(void *)(v2 + 8 * v8);
                ++v13;
                if (v12) {
                  goto LABEL_22;
                }
              }
            }

            int64_t v8 = v13;
          }
        }
      }
    }

void sub_534CC(void *a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  id v7 = [a1 context];
  unsigned int v8 = [v7 isForPendingConversation];

  if (v8
    && (uint64_t v11 = v6 + 80,
        uint64_t v10 = *(void *)(v6 + 80),
        uint64_t v9 = *(void *)(v11 + 8),
        ((*(uint64_t (**)(uint64_t, uint64_t))(v9 + 24))(v10, v9) & 1) != 0))
  {
    unint64_t v12 = sub_52B3C(a1);
    sub_52FE0(v12, 0, 0, 0LL, (uint64_t)a2, a3, (uint64_t)a1);
    swift_bridgeObjectRelease(v12, v13, v14, v15, v16, v17, v18, v19);
    (*(void (**)(void *, void *, uint64_t, uint64_t))(v9 + 32))(a1, a3, v10, v9);
  }

  else
  {
    id v20 = [a1 handleIDs];
    id v21 = (RCSServiceSession *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v20, &type metadata for String);

    unsigned __int8 v22 = (char *)[a1 context];
    id v29 = sub_51F24(v21, v22, v23, v24, v25, v26, v27, v28);
    swift_bridgeObjectRelease(v21, v30, v31, v32, v33, v34, v35, v36);

    sub_52FE0(v29, 1, 0, 0LL, (uint64_t)a2, a3, (uint64_t)a1);
    swift_bridgeObjectRelease(v29, v37, v38, v39, v40, v41, v42, v43);
  }

uint64_t RCSReachabilityController.deinit()
{
  return v0;
}

uint64_t RCSReachabilityController.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t sub_536A0(uint64_t a1)
{
  v2[0] = "\b";
  v2[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_initClassMetadata2(a1, 0LL, 2LL, v2, a1 + 96);
}

uint64_t type metadata accessor for RCSReachabilityController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2C980(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RCSReachabilityController);
}

unint64_t sub_536F8()
{
  unint64_t result = qword_77BD0;
  if (!qword_77BD0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___IMServiceReachabilityHandleResult);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_77BD0);
  }

  return result;
}

void *sub_53734(uint64_t a1)
{
  unint64_t result = (void *)static _DictionaryStorage.copy(original:)(a1);
  uint64_t v3 = result;
  int64_t v4 = 0LL;
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v24 = a1 + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & v5;
  int64_t v23 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v9 = (char *)(result + 8);
  if ((v7 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v10 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    id v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    id v18 = *(void **)(*(void *)(a1 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    unint64_t result = [v18 isReachable];
    *(void *)&v9[(i >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << i;
    unsigned __int8 v19 = (void *)(v3[6] + 16 * i);
    void *v19 = v17;
    v19[1] = v16;
    *(_BYTE *)(v3[7] + i) = (_BYTE)result;
    uint64_t v20 = v3[2];
    BOOL v21 = __OFADD__(v20, 1LL);
    uint64_t v22 = v20 + 1;
    if (v21)
    {
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }

    v3[2] = v22;
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1LL)) {
      goto LABEL_22;
    }
    if (v12 >= v23) {
      return v3;
    }
    unint64_t v13 = *(void *)(v24 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v23) {
        return v3;
      }
      unint64_t v13 = *(void *)(v24 + 8 * v4);
      if (!v13) {
        break;
      }
    }

uint64_t sub_53900(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_5C28(&qword_77020);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_53948()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t RCSHandle.rawValue.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_5C28(&qword_76558);
  uint64_t v3 = swift_allocObject(v2, 48LL, 7LL);
  __int128 v18 = v1[1];
  __int128 v4 = v18;
  *(_OWORD *)(v3 + swift_weakDestroy(v0 + 16) = xmmword_5F530;
  *(_OWORD *)(v3 + 32) = v4;
  uint64_t v5 = *((void *)v1 + 4);
  sub_5413C((uint64_t)&v18);
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = sub_53ECC(v6);
  swift_bridgeObjectRelease(v5);
  *(void *)&__int128 v17 = v3;
  sub_5564C(v7);
  __int128 v17 = *v1;
  uint64_t v16 = v17;
  sub_5413C((uint64_t)&v17);
  v8._uint64_t countAndFlagsBits = 58LL;
  v8._object = (void *)0xE100000000000000LL;
  String.append(_:)(v8);
  uint64_t v9 = sub_5C28(&qword_76868);
  unint64_t v10 = sub_1C368();
  uint64_t v11 = BidirectionalCollection<>.joined(separator:)(59LL, 0xE100000000000000LL, v9, v10);
  unint64_t v13 = v12;
  swift_bridgeObjectRelease(v3);
  v14._uint64_t countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v13);
  return v16;
}

uint64_t sub_53A8C(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xED0000747865746ELL;
  uint64_t v3 = 0x6F632D656E6F6870LL;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 1919251317LL;
    }
    else {
      uint64_t v5 = 0x6E657265666E6F63LL;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xE400000000000000LL;
    }
    else {
      unint64_t v6 = 0xEA00000000006563LL;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }

  uint64_t v5 = 0x6F632D656E6F6870LL;
  unint64_t v6 = 0xED0000747865746ELL;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      uint64_t v3 = 1919251317LL;
    }
    else {
      uint64_t v3 = 0x6E657265666E6F63LL;
    }
    if (v7 == 1) {
      unint64_t v2 = 0xE400000000000000LL;
    }
    else {
      unint64_t v2 = 0xEA00000000006563LL;
    }
  }

void sub_53BAC(char a1)
{
  __asm { BR              X10 }

uint64_t sub_53BEC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_53CE4 + 4 * byte_61571[a2]))(0x726566736E617274LL);
}

uint64_t sub_53CE4(uint64_t a1)
{
  if (a1 == 0x726566736E617274LL && v1 == 0xE800000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x726566736E617274LL, 0xE800000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE800000000000000LL);
  return v2 & 1;
}

BOOL RCSHandle.couldBeChatBot.getter()
{
  return *(unsigned __int8 *)(v0 + 56) - 1 < 2;
}

uint64_t RCSHandle.uri.getter()
{
  __int128 v14 = *v0;
  uint64_t v13 = v14;
  sub_5413C((uint64_t)&v14);
  v1._uint64_t countAndFlagsBits = 58LL;
  v1._object = (void *)0xE100000000000000LL;
  String.append(_:)(v1);
  uint64_t v3 = *((void *)v0 + 2);
  char v2 = (RCSServiceSession *)*((void *)v0 + 3);
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = v3;
  v4._object = v2;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v2, v5, v6, v7, v8, v9, v10, v11);
  return v13;
}

uint64_t sub_53ECC(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  char v2 = (unint64_t *)&_swiftEmptyArrayStorage;
  if (!v1) {
    return (uint64_t)v2;
  }
  id v35 = (unint64_t *)&_swiftEmptyArrayStorage;
  sub_1EC80(0, v1, 0);
  char v2 = (unint64_t *)&_swiftEmptyArrayStorage;
  uint64_t result = sub_511E0(a1);
  uint64_t v6 = result;
  uint64_t v7 = 0LL;
  uint64_t v8 = a1 + 64;
  int64_t v28 = v1;
  int v29 = v5;
  uint64_t v30 = a1 + 64;
  while ((v6 & 0x8000000000000000LL) == 0 && v6 < 1LL << *(_BYTE *)(a1 + 32))
  {
    unint64_t v11 = (unint64_t)v6 >> 6;
    if (*(_DWORD *)(a1 + 36) != v5) {
      goto LABEL_24;
    }
    uint64_t v31 = v7;
    char v12 = *(_BYTE *)(*(void *)(a1 + 48) + v6);
    uint64_t v13 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v6);
    uint64_t v14 = *v13;
    id v15 = (void *)v13[1];
    unint64_t v33 = 0LL;
    unint64_t v34 = 0xE000000000000000LL;
    char v32 = v12;
    swift_bridgeObjectRetain();
    _print_unlocked<A, B>(_:_:)( &v32,  &v33,  &type metadata for RCSHandle.Attribute,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    v16._uint64_t countAndFlagsBits = 61LL;
    v16._object = (void *)0xE100000000000000LL;
    String.append(_:)(v16);
    v17._uint64_t countAndFlagsBits = v14;
    v17._object = v15;
    String.append(_:)(v17);
    uint64_t result = swift_bridgeObjectRelease(v15);
    unint64_t v19 = v33;
    unint64_t v18 = v34;
    id v35 = v2;
    unint64_t v21 = v2[2];
    unint64_t v20 = v2[3];
    if (v21 >= v20 >> 1)
    {
      uint64_t result = sub_1EC80(v20 > 1, v21 + 1, 1);
      char v2 = v35;
    }

    void v2[2] = v21 + 1;
    uint64_t v22 = &v2[2 * v21];
    void v22[4] = v19;
    v22[5] = v18;
    int64_t v9 = 1LL << *(_BYTE *)(a1 + 32);
    if (v6 >= v9) {
      goto LABEL_25;
    }
    uint64_t v8 = a1 + 64;
    uint64_t v23 = *(void *)(v30 + 8 * v11);
    if ((v23 & (1LL << v6)) == 0) {
      goto LABEL_26;
    }
    int v5 = v29;
    if (*(_DWORD *)(a1 + 36) != v29) {
      goto LABEL_27;
    }
    unint64_t v24 = v23 & (-2LL << (v6 & 0x3F));
    if (v24)
    {
      int64_t v9 = __clz(__rbit64(v24)) | v6 & 0xFFFFFFFFFFFFFFC0LL;
      int64_t v10 = v28;
    }

    else
    {
      unint64_t v25 = v11 + 1;
      unint64_t v26 = (unint64_t)(v9 + 63) >> 6;
      int64_t v10 = v28;
      if (v11 + 1 < v26)
      {
        unint64_t v27 = *(void *)(v30 + 8 * v25);
        if (v27)
        {
LABEL_20:
          int64_t v9 = __clz(__rbit64(v27)) + (v25 << 6);
        }

        else
        {
          while (v26 - 2 != v11)
          {
            unint64_t v27 = *(void *)(a1 + 80 + 8 * v11++);
            if (v27)
            {
              unint64_t v25 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }

    uint64_t v7 = v31 + 1;
    uint64_t v6 = v9;
    if (v31 + 1 == v10) {
      return (uint64_t)v2;
    }
  }

  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_5413C(uint64_t a1)
{
  return a1;
}

uint64_t RCSHandle.Attribute.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x6F632D656E6F6870LL;
  }
  if (a1 == 1) {
    return 1919251317LL;
  }
  return 0x6E657265666E6F63LL;
}

uint64_t sub_541C8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_53A8C(*a1, *a2);
}

unint64_t sub_541D4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = _s7CoreRCS9RCSHandleV9AttributeO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_54200(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xED0000747865746ELL;
  unint64_t v4 = 0xE400000000000000LL;
  uint64_t v5 = 1919251317LL;
  if (v2 != 1)
  {
    uint64_t v5 = 0x6E657265666E6F63LL;
    unint64_t v4 = 0xEA00000000006563LL;
  }

  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x6F632D656E6F6870LL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

Swift::Int sub_54268()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v7, 0LL);
  unint64_t v2 = 0xE400000000000000LL;
  uint64_t v3 = 1919251317LL;
  if (v1 != 1)
  {
    uint64_t v3 = 0x6E657265666E6F63LL;
    unint64_t v2 = 0xEA00000000006563LL;
  }

  if (v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0x6F632D656E6F6870LL;
  }
  if (v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xED0000747865746ELL;
  }
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_54310(uint64_t a1)
{
  unint64_t v2 = 0xE400000000000000LL;
  uint64_t v3 = 1919251317LL;
  if (*v1 != 1)
  {
    uint64_t v3 = 0x6E657265666E6F63LL;
    unint64_t v2 = 0xEA00000000006563LL;
  }

  if (*v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0x6F632D656E6F6870LL;
  }
  if (*v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xED0000747865746ELL;
  }
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_54394(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  unint64_t v3 = 0xE400000000000000LL;
  uint64_t v4 = 1919251317LL;
  if (v2 != 1)
  {
    uint64_t v4 = 0x6E657265666E6F63LL;
    unint64_t v3 = 0xEA00000000006563LL;
  }

  if (v2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0x6F632D656E6F6870LL;
  }
  if (v2) {
    unint64_t v6 = v3;
  }
  else {
    unint64_t v6 = 0xED0000747865746ELL;
  }
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

uint64_t static RCSHandle.== infix(_:_:)(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a2[1];
  BOOL v7 = v4 == *a2 && v5 == v6;
  if ((v7 || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0LL) & 1) != 0)
    && ((uint64_t v8 = a1[2], v9 = a1[3], v10 = a2[2], v11 = a2[3], v8 == v10) ? (v12 = v9 == v11) : (v12 = 0),
        v12 || (_stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v10, v11, 0LL) & 1) != 0))
  {
    return sub_544B8(a1[4], a2[4]);
  }

  else
  {
    return 0LL;
  }

uint64_t sub_544B8(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1LL;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  int64_t v4 = 0LL;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_25;
    }

    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_36;
    }

    if (v12 >= v9) {
      return 1LL;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1LL;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1LL;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13)
        {
          int64_t v4 = v12 + 3;
          if (v12 + 3 >= v9) {
            return 1LL;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v4);
          if (!v13) {
            break;
          }
        }
      }
    }

uint64_t (*RCSHandle.scheme.modify())()
{
  return nullsub_41;
}

uint64_t RCSHandle.id.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t (*RCSHandle.id.modify())()
{
  return nullsub_42;
}

uint64_t RCSHandle.attributes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RCSHandle.attributes.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 32));
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t (*RCSHandle.attributes.modify())()
{
  return nullsub_43;
}

uint64_t RCSHandle.botStatus.getter()
{
  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t RCSHandle.botStatus.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 56) = result;
  return result;
}

uint64_t (*RCSHandle.botStatus.modify())()
{
  return nullsub_44;
}

BOOL RCSHandle.isChatBot.getter()
{
  return *(_BYTE *)(v0 + 56) == 2;
}

uint64_t RCSHandle.chatBotId.getter()
{
  uint64_t v1 = v0;
  sub_567B8((uint64_t)(v0 + 5), (uint64_t)v36);
  sub_567B8((uint64_t)v36, (uint64_t)&v37);
  unint64_t v2 = v38;
  if (v38)
  {
    uint64_t v3 = v37;
    sub_5413C((uint64_t)v36);
    sub_55A4C(v3, v2, 0, 0LL, 0LL, (uint64_t)&v32);
    uint64_t v13 = v32;
    unint64_t v12 = v33;
    if (v32 == 7367027 && v33 == 0xE300000000000000LL
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v32, v33, 7367027LL, 0xE300000000000000LL, 0LL) & 1) != 0)
    {
      unint64_t v30 = v12;
      swift_bridgeObjectRetain();
      v14._uint64_t countAndFlagsBits = 58LL;
      v14._object = (void *)0xE100000000000000LL;
      String.append(_:)(v14);
      uint64_t v15 = v34;
      uint64_t v16 = v35;
      swift_bridgeObjectRetain();
      v17._uint64_t countAndFlagsBits = v15;
      v17._object = v16;
      String.append(_:)(v17);
      swift_bridgeObjectRelease(v16);
      sub_15F40(&v32);
      return v13;
    }

    if (qword_76BA0 != -1) {
      swift_once(&qword_76BA0, sub_21D60);
    }
    uint64_t v18 = type metadata accessor for Logger(0LL);
    sub_6298(v18, (uint64_t)static Logger.chatbot);
    uint64_t v19 = sub_5C68(&v32);
    char v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v23 = swift_slowAlloc(32LL, -1LL);
      unint64_t v30 = v12;
      uint64_t v31 = v23;
      *(_DWORD *)uint64_t v22 = 136315138;
      uint64_t v29 = v13;
      swift_bridgeObjectRetain();
      v24._uint64_t countAndFlagsBits = 58LL;
      v24._object = (void *)0xE100000000000000LL;
      String.append(_:)(v24);
      uint64_t v25 = v34;
      unint64_t v26 = v35;
      swift_bridgeObjectRetain();
      v27._uint64_t countAndFlagsBits = v25;
      v27._object = v26;
      String.append(_:)(v27);
      swift_bridgeObjectRelease(v26);
      unint64_t v28 = v30;
      uint64_t v29 = sub_B004(v29, v30, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
      swift_bridgeObjectRelease(v28);
      sub_15F40(&v32);
      sub_15F40(&v32);
      _os_log_impl(&dword_0, v20, v21, "Alternate handle is not a sip, something is very wrong: %s", v22, 0xCu);
      swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1LL, -1LL);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    else
    {
      sub_15F40(&v32);
      sub_15F40(&v32);
    }
  }

  else
  {
    uint64_t v5 = *v1;
    unint64_t v4 = v1[1];
    BOOL v6 = *v1 == 7367027 && v4 == 0xE300000000000000LL;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v1, v1[1], 7367027LL, 0xE300000000000000LL, 0LL) & 1) != 0)
    {
      uint64_t v32 = v5;
      unint64_t v33 = v4;
      swift_bridgeObjectRetain();
      v7._uint64_t countAndFlagsBits = 58LL;
      v7._object = (void *)0xE100000000000000LL;
      String.append(_:)(v7);
      uint64_t v9 = v1[2];
      unint64_t v8 = (void *)v1[3];
      swift_bridgeObjectRetain();
      v10._uint64_t countAndFlagsBits = v9;
      v10._object = v8;
      String.append(_:)(v10);
      swift_bridgeObjectRelease(v8);
      return v32;
    }
  }

  return 0LL;
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> RCSHandle.init(rawValue:botStatus:alternateHandle:)( CoreRCS::RCSHandle *__return_ptr retstr, Swift::String rawValue, CoreRCS::RCSHandle::BotStatus botStatus, Swift::String_optional alternateHandle)
{
  if (!v4)
  {
    Swift::String v6 = (Swift::String)v7[1];
    retstr->scheme = (Swift::String)v7[0];
    retstr->id = v6;
    *(_OWORD *)&retstr->attributes._rawValue = v8[0];
    *(Swift::String_optional *)((char *)&retstr->alternateHandle + 1) = *(Swift::String_optional *)((char *)v8 + 9);
  }

void __swiftcall RCSHandle.init(scheme:id:attributes:botStatus:alternateHandle:)( CoreRCS::RCSHandle *__return_ptr retstr, Swift::String scheme, Swift::String id, Swift::OpaquePointer attributes, CoreRCS::RCSHandle::BotStatus botStatus, Swift::String_optional alternateHandle)
{
  object = alternateHandle.value._object;
  uint64_t countAndFlagsBits = alternateHandle.value._countAndFlagsBits;
  Swift::String v10 = (RCSServiceSession *)id._object;
  uint64_t v11 = id._countAndFlagsBits;
  unint64_t v12 = (RCSServiceSession *)scheme._object;
  uint64_t v13 = scheme._countAndFlagsBits;
  uint64_t v15 = (RCSServiceSession *)sub_20AFC((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v15, v16, v17, v18, v19, v20, v21, v22);
  swift_bridgeObjectRelease((RCSServiceSession *)attributes._rawValue, v23, v24, v25, v26, v27, v28, v29);
  swift_bridgeObjectRelease(v10, v30, v31, v32, v33, v34, v35, v36);
  swift_bridgeObjectRelease(v12, v37, v38, v39, v40, v41, v42, v43);
  retstr->scheme._uint64_t countAndFlagsBits = v13;
  retstr->scheme._object = v12;
  retstr->id._uint64_t countAndFlagsBits = v11;
  retstr->id._object = v10;
  retstr->attributes = attributes;
  retstr->alternateHandle.value._uint64_t countAndFlagsBits = countAndFlagsBits;
  retstr->alternateHandle.value._object = object;
  retstr->botStatus = botStatus;
}

void RCSHandle.hash(into:)(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = (RCSServiceSession *)v2[1];
  swift_bridgeObjectRetain();
  String.hash(into:)(a1, v4, v5);
  swift_bridgeObjectRelease(v5, v6, v7, v8, v9, v10, v11, v12);
  uint64_t v13 = v2[2];
  Swift::String v14 = (RCSServiceSession *)v2[3];
  swift_bridgeObjectRetain();
  String.hash(into:)(a1, v13, v14);
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  unsigned __int8 v22 = (RCSServiceSession *)v2[4];
  swift_bridgeObjectRetain();
  sub_557A0(a1, (uint64_t)v22);
  swift_bridgeObjectRelease(v22, v23, v24, v25, v26, v27, v28, v29);
  SEL v30 = (RCSServiceSession *)v2[6];
  if (v30)
  {
    uint64_t v31 = v2[5];
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)(a1, v31, v30);
    swift_bridgeObjectRelease(v30, v32, v33, v34, v35, v36, v37, v38);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Hasher._combine(_:)(*((unsigned __int8 *)v2 + 56));
}

Swift::Int RCSHandle.hashValue.getter()
{
  uint64_t v1 = v0;
  Hasher.init(_seed:)(v38, 0LL);
  uint64_t v2 = *v0;
  uint64_t v3 = (RCSServiceSession *)v1[1];
  swift_bridgeObjectRetain();
  String.hash(into:)(v38, v2, v3);
  swift_bridgeObjectRelease(v3, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v11 = v1[2];
  unsigned __int8 v12 = (RCSServiceSession *)v1[3];
  swift_bridgeObjectRetain();
  String.hash(into:)(v38, v11, v12);
  swift_bridgeObjectRelease(v12, v13, v14, v15, v16, v17, v18, v19);
  id v20 = (RCSServiceSession *)v1[4];
  swift_bridgeObjectRetain();
  sub_557A0((uint64_t)v38, (uint64_t)v20);
  swift_bridgeObjectRelease(v20, v21, v22, v23, v24, v25, v26, v27);
  id v28 = (RCSServiceSession *)v1[6];
  if (v28)
  {
    uint64_t v29 = v1[5];
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)(v38, v29, v28);
    swift_bridgeObjectRelease(v28, v30, v31, v32, v33, v34, v35, v36);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Hasher._combine(_:)(*((unsigned __int8 *)v1 + 56));
  return Hasher._finalize()();
}

Swift::Int sub_54EFC(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_54F34(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v8 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v9 = a2[1];
  uint64_t v10 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  BOOL v13 = v4 == *a2 && v5 == v9;
  if ((v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v9, 0LL) & 1) != 0)
    && (v6 == v10 ? (BOOL v14 = v8 == v11) : (BOOL v14 = 0),
        v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v10, v11, 0LL) & 1) != 0))
  {
    return sub_544B8(v7, v12);
  }

  else
  {
    return 0LL;
  }

unint64_t RCSHandle.ParseError.errorDescription.getter(char a1)
{
  if (!a1) {
    return 0xD00000000000003DLL;
  }
  if (a1 == 1) {
    return 0xD00000000000004CLL;
  }
  return 0xD00000000000003ALL;
}

BOOL static RCSHandle.ParseError.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void RCSHandle.ParseError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int _s7CoreRCS9RCSHandleV9BotStatusO9hashValueSivg_0(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

unint64_t sub_550B0()
{
  return RCSHandle.ParseError.errorDescription.getter(*v0);
}

unint64_t static RCSHandle.couldBeGroupURI(_:)(uint64_t a1, unint64_t a2)
{
  LOBYTE(a2) = RCSHandle.couldBeGroupURI.getter();
  sub_15F40(v5);
  return a2 & 1;
}

BOOL RCSHandle.couldBeGroupURI.getter()
{
  uint64_t v1 = v0[1];
  BOOL v2 = *v0 == 7367027LL && v1 == 0xE300000000000000LL;
  if (v2
    || (char v3 = _stringCompareWithSmolCheck(_:_:expecting:)(*v0, v1, 7367027LL, 0xE300000000000000LL, 0LL),
        BOOL result = 0LL,
        (v3 & 1) != 0))
  {
    uint64_t v5 = v0[4];
    if (*(void *)(v5 + 16) && (uint64_t v6 = sub_28CF0(2LL), (v7 & 1) != 0))
    {
      uint64_t v8 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v6);
      uint64_t v10 = *v8;
      unint64_t v9 = v8[1];
      uint64_t v11 = v10 & 0xFFFFFFFFFFFFLL;
      if ((v9 & 0x2000000000000000LL) != 0) {
        uint64_t v12 = HIBYTE(v9) & 0xF;
      }
      else {
        uint64_t v12 = v11;
      }
      return v12 != 0;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

void RCSHandle.canonicalizedHandle(for:)(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  char v3 = v2;
  uint64_t v7 = *v2;
  unint64_t v6 = v2[1];
  BOOL v8 = *v2 == 7103860LL && v6 == 0xE300000000000000LL;
  if (!v8 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v2, v2[1], 7103860LL, 0xE300000000000000LL, 0LL) & 1) == 0)
  {
    BOOL v83 = v7 == 0x6F746C69616DLL && v6 == 0xE600000000000000LL;
    if (v83
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v6, 0x6F746C69616DLL, 0xE600000000000000LL, 0LL) & 1) != 0)
    {
      uint64_t v12 = v2[2];
      BOOL v13 = (RCSServiceSession *)v2[3];
      swift_bridgeObjectRetain();
      unint64_t v34 = sub_20AFC((uint64_t)_swiftEmptyArrayStorage);
      id v84 = (RCSServiceSession *)sub_20AFC((uint64_t)_swiftEmptyArrayStorage);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease(0LL, v85, v86, v87, v88, v89, v90, v91);
      swift_bridgeObjectRelease(v13, v92, v93, v94, v95, v96, v97, v98);
      swift_bridgeObjectRelease(v84, v99, v100, v101, v102, v103, v104, v105);
      uint64_t v57 = 0LL;
      uint64_t v58 = 0LL;
      char v59 = 0;
      unint64_t v6 = 0xE300000000000000LL;
      uint64_t v7 = 7367027LL;
      goto LABEL_24;
    }

    char v59 = *((_BYTE *)v2 + 56);
    uint64_t v57 = v2[5];
    uint64_t v58 = v2[6];
    BOOL v13 = (RCSServiceSession *)v2[3];
    unint64_t v34 = v2[4];
    uint64_t v12 = v3[2];
LABEL_23:
    sub_5C68(v3);
    goto LABEL_24;
  }

  uint64_t v9 = a1();
  uint64_t v11 = v10;
  uint64_t v12 = v2[2];
  BOOL v13 = (RCSServiceSession *)v2[3];
  NSString v14 = String._bridgeToObjectiveC()();
  uint64_t v109 = v9;
  if (v11)
  {
    swift_bridgeObjectRetain();
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v11, v16, v17, v18, v19, v20, v21, v22);
  }

  else
  {
    NSString v15 = 0LL;
  }

  id v23 = (void *)IMPhoneNumberRefCopyForPhoneNumber(v14, v15, 1LL);

  id v24 = (id)IMNormalizedPhoneNumberForCFPhoneNumberRef(v23);
  if (!v24)
  {
    if (qword_76B90 != -1) {
      swift_once(&qword_76B90, sub_21C04);
    }
    uint64_t v60 = type metadata accessor for Logger(0LL);
    sub_6298(v60, (uint64_t)static Logger.rcs);
    sub_5C68(v3);
    swift_bridgeObjectRetain();
    SEL v61 = sub_5C68(v3);
    id v62 = (os_log_s *)Logger.logObject.getter(v61);
    os_log_type_t v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v63))
    {
      log = v62;
      uint64_t v64 = swift_slowAlloc(22LL, -1LL);
      uint64_t v108 = swift_slowAlloc(64LL, -1LL);
      uint64_t v112 = v108;
      *(_DWORD *)uint64_t v64 = 136315394;
      os_log_type_t type = v63;
      swift_bridgeObjectRetain();
      uint64_t v110 = sub_B004(v12, (unint64_t)v13, &v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, &v111);
      swift_bridgeObjectRelease(v13, v65, v66, v67, v68, v69, v70, v71);
      sub_15F40(v3);
      sub_15F40(v3);
      *(_WORD *)(v64 + 12) = 2080;
      uint64_t v110 = v109;
      SEL v111 = v11;
      swift_bridgeObjectRetain();
      uint64_t v72 = sub_5C28(&qword_76860);
      uint64_t v73 = String.init<A>(describing:)(&v110, v72);
      NSString v75 = (RCSServiceSession *)v74;
      uint64_t v110 = sub_B004(v73, v74, &v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, &v111);
      swift_bridgeObjectRelease_n(v11, 2LL);
      swift_bridgeObjectRelease(v75, v76, v77, v78, v79, v80, v81, v82);
      _os_log_impl(&dword_0, log, type, "Could not normalize phone number %s country code %s", (uint8_t *)v64, 0x16u);
      swift_arrayDestroy(v108, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v108, -1LL, -1LL);
      swift_slowDealloc(v64, -1LL, -1LL);
    }

    else
    {

      sub_15F40(v3);
      sub_15F40(v3);

      swift_bridgeObjectRelease_n(v11, 2LL);
    }

    char v59 = *((_BYTE *)v3 + 56);
    uint64_t v57 = v3[5];
    uint64_t v58 = v3[6];
    unint64_t v34 = v3[4];
    goto LABEL_23;
  }

  id v32 = v24;
  swift_bridgeObjectRelease(v11, v25, v26, v27, v28, v29, v30, v31);
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  BOOL v13 = v33;

  unint64_t v34 = sub_20AFC((uint64_t)_swiftEmptyArrayStorage);
  id v35 = (RCSServiceSession *)sub_20AFC((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRetain();

  swift_bridgeObjectRelease(0LL, v36, v37, v38, v39, v40, v41, v42);
  swift_bridgeObjectRelease(v13, v43, v44, v45, v46, v47, v48, v49);
  swift_bridgeObjectRelease(v35, v50, v51, v52, v53, v54, v55, v56);
  uint64_t v57 = 0LL;
  uint64_t v58 = 0LL;
  char v59 = 0;
  unint64_t v6 = 0xE300000000000000LL;
  uint64_t v7 = 7103860LL;
LABEL_24:
  *(void *)a2 = v7;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + swift_weakDestroy(v0 + 16) = v12;
  *(void *)(a2 + 24) = v13;
  *(void *)(a2 + 32) = v34;
  *(void *)(a2 + 40) = v57;
  *(void *)(a2 + 48) = v58;
  *(_BYTE *)(a2 + 56) = v59;
}

uint64_t sub_5564C(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  char v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }

  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *((void *)v3 + 3) >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  char v3 = sub_AE68(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  unint64_t v10 = (unint64_t)&v3[16 * v9 + 32];
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy(v10);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v12 = *((void *)v3 + 2);
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    *((void *)v3 + 2) = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease(a1);
    *uint64_t v1 = v3;
    return result;
  }

void sub_557A0(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = a2 + 64;
  uint64_t v4 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  Swift::UInt v8 = 0LL;
  int64_t v9 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }

    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v23 >= v7) {
      goto LABEL_29;
    }
    unint64_t v24 = *(void *)(v26 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v7) {
        goto LABEL_29;
      }
      unint64_t v24 = *(void *)(v26 + 8 * v9);
      if (!v24) {
        break;
      }
    }

unint64_t sub_559B0(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    if ((a3 & 0x2000000000000000LL) != 0) {
      uint64_t v3 = HIBYTE(a3) & 0xF;
    }
    else {
      uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v4 = 7LL;
    if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v4 = 11LL;
    }
    unint64_t v5 = v4 | (v3 << 16);
    uint64_t result = String.index(_:offsetBy:limitedBy:)(15LL, result, v5, a2, a3);
    if ((v6 & 1) != 0) {
      uint64_t result = v5;
    }
    if (4 * v3 >= result >> 14) {
      return String.subscript.getter();
    }
  }

  __break(1u);
  return result;
}

void sub_55A4C( uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  int v177 = a3;
  uint64_t v176 = a6;
  uint64_t v12 = sub_5C28(&qword_77C10);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v164 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for URLComponents(0LL);
  uint64_t v178 = *(void *)(v15 - 8);
  uint64_t v179 = v15;
  __chkstk_darwin(v15);
  __int128 v17 = (char *)&v164 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v194 = sub_20AFC((uint64_t)&_swiftEmptyArrayStorage);
  NSString v18 = String._bridgeToObjectiveC()();
  char IsPhoneNumber = IMStringIsPhoneNumber();

  if ((IsPhoneNumber & 1) != 0)
  {
    uint64_t v171 = a1;
    unint64_t v20 = 0xE300000000000000LL;
    uint64_t v21 = 7103860LL;
LABEL_3:
    unint64_t v22 = v194;
LABEL_4:
    char v23 = v177;
LABEL_5:
    uint64_t v24 = v176;
LABEL_6:
    *(void *)uint64_t v24 = v21;
    *(void *)(v24 + 8) = v20;
    *(void *)(v24 + swift_weakDestroy(v0 + 16) = v171;
    *(void *)(v24 + 24) = a2;
    *(void *)(v24 + 32) = v22;
    *(void *)(v24 + 40) = a4;
    *(void *)(v24 + 48) = a5;
    *(_BYTE *)(v24 + 56) = v23;
    return;
  }

  uint64_t v192 = a1;
  unint64_t v193 = a2;
  swift_bridgeObjectRetain();
  v25._uint64_t countAndFlagsBits = 60LL;
  v25._object = (void *)0xE100000000000000LL;
  Swift::Bool v26 = String.hasPrefix(_:)(v25);
  swift_bridgeObjectRelease(a2);
  uint64_t v186 = v17;
  if (!v26) {
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  v27._uint64_t countAndFlagsBits = 62LL;
  v27._object = (void *)0xE100000000000000LL;
  Swift::Bool v28 = String.hasSuffix(_:)(v27);
  swift_bridgeObjectRelease(a2);
  if (!v28) {
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  unint64_t v29 = sub_559B0(1uLL, a1, a2);
  unint64_t v31 = v30;
  unint64_t v32 = a2;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  unint64_t v183 = v32;
  swift_bridgeObjectRelease(v32);
  uint64_t v37 = Substring.distance(from:to:)(v29, v31, v29, v31, v34, v36);
  if (__OFSUB__(v37, 1LL)) {
    goto LABEL_77;
  }
  uint64_t v38 = Substring.index(_:offsetBy:limitedBy:)(v29, (v37 - 1) & ~((v37 - 1) >> 63), v31, v29, v31, v34, v36);
  if ((v39 & 1) != 0) {
    unint64_t v40 = v31;
  }
  else {
    unint64_t v40 = v38;
  }
  if (v40 >> 14 >= v29 >> 14)
  {
    uint64_t v41 = Substring.subscript.getter(v29);
    uint64_t v43 = v42;
    uint64_t v45 = v44;
    uint64_t v47 = v46;
    swift_bridgeObjectRelease(v36);
    uint64_t v48 = static String._fromSubstring(_:)(v41, v43, v45, v47);
    a2 = v49;
    swift_bridgeObjectRelease(v183);
    swift_bridgeObjectRelease(v47);
    a1 = v48;
    uint64_t v192 = v48;
    unint64_t v193 = a2;
    __int128 v17 = v186;
LABEL_15:
    uint64_t v50 = v178;
    swift_bridgeObjectRetain();
    URLComponents.init(string:)(a1, a2);
    swift_bridgeObjectRelease(a2);
    uint64_t v51 = v179;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v14, 1LL, v179) == 1)
    {
      swift_bridgeObjectRelease(a5);
      sub_56CBC((uint64_t)v14);
      unint64_t v52 = sub_56924();
      uint64_t v53 = swift_allocError(&type metadata for RCSHandle.ParseError, v52, 0LL, 0LL);
      *id v54 = 0;
      swift_willThrow(v53);
LABEL_27:
      swift_bridgeObjectRelease(v193);
      a5 = 0LL;
LABEL_28:
      swift_bridgeObjectRelease(a5);
      swift_bridgeObjectRelease(v194);
      return;
    }

    uint64_t v55 = (*(uint64_t (**)(char *, char *, uint64_t))(v50 + 32))(v17, v14, v51);
    uint64_t v56 = URLComponents.path.getter(v55);
    uint64_t v58 = v57;
    unsigned __int8 v187 = (void *)v56;
    uint64_t v188 = v57;
    unint64_t v59 = sub_56CFC();
    uint64_t v60 = (void *)StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)( 59LL,  0xE100000000000000LL,  0x7FFFFFFFFFFFFFFFLL,  1LL,  &type metadata for String,  v59);
    swift_bridgeObjectRelease(v58);
    SEL v61 = v60;
    id v62 = v17;
    unint64_t v63 = v60[2];
    if (!v63)
    {
      swift_bridgeObjectRelease(v60);
      swift_bridgeObjectRelease(a5);
      unint64_t v76 = sub_56924();
      uint64_t v77 = swift_allocError(&type metadata for RCSHandle.ParseError, v76, 0LL, 0LL);
      _BYTE *v78 = 1;
      swift_willThrow(v77);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v62, v51);
      goto LABEL_27;
    }

    uint64_t v65 = v60[4];
    uint64_t v64 = v60[5];
    uint64_t v66 = v60[6];
    uint64_t v67 = v61[7];
    id v68 = v61;
    swift_bridgeObjectRetain();
    uint64_t v171 = static String._fromSubstring(_:)(v65, v64, v66, v67);
    a2 = v69;
    swift_bridgeObjectRelease(v67);
    id v169 = v68;
    if (v68[2] < v63) {
      goto LABEL_76;
    }
    uint64_t v164 = a4;
    uint64_t v165 = a5;
    uint64_t v166 = v7;
    unint64_t v70 = v63 - 1;
    if (v63 == 1)
    {
      unsigned __int8 v71 = v186;
LABEL_21:
      uint64_t v72 = swift_bridgeObjectRelease(v169);
      uint64_t v73 = URLComponents.scheme.getter(v72);
      if (v74)
      {
        uint64_t v75 = v73;
        unint64_t v20 = v74;
        uint64_t v21 = 7367027LL;
        a5 = v165;
        a4 = v164;
        if (v73 == 7367027 && v74 == 0xE300000000000000LL)
        {
          (*(void (**)(char *, uint64_t))(v178 + 8))(v71, v179);
          swift_bridgeObjectRelease(v193);
          char v23 = v177;
          unint64_t v22 = v194;
          uint64_t v24 = v176;
          if ((_BYTE)v177) {
            goto LABEL_6;
          }
        }

        else
        {
          char v158 = _stringCompareWithSmolCheck(_:_:expecting:)(v73, v74, 7367027LL, 0xE300000000000000LL, 0LL);
          (*(void (**)(char *, uint64_t))(v178 + 8))(v71, v179);
          swift_bridgeObjectRelease(v193);
          if ((v158 & 1) == 0)
          {
            uint64_t v21 = v75;
            goto LABEL_3;
          }

          char v23 = v177;
          unint64_t v22 = v194;
          uint64_t v24 = v176;
          if ((_BYTE)v177)
          {
            uint64_t v21 = v75;
            goto LABEL_6;
          }
        }

        char v23 = 1;
        uint64_t v21 = v75;
        goto LABEL_6;
      }

      a5 = v165;
      a4 = v164;
      if (*(void *)(v194 + 16))
      {
        uint64_t v151 = sub_28CF0(2LL);
        if ((v152 & 1) != 0)
        {
          id v153 = (uint64_t *)(*(void *)(v194 + 56) + 16 * v151);
          uint64_t v155 = *v153;
          unint64_t v154 = v153[1];
          uint64_t v156 = v155 & 0xFFFFFFFFFFFFLL;
          if ((v154 & 0x2000000000000000LL) != 0 ? HIBYTE(v154) & 0xF : v156)
          {
            uint64_t v21 = 7367027LL;
            (*(void (**)(char *, uint64_t))(v178 + 8))(v71, v179);
            swift_bridgeObjectRelease(v193);
            unint64_t v22 = v194;
            unint64_t v20 = 0xE300000000000000LL;
            goto LABEL_4;
          }
        }
      }

      swift_beginAccess(&v192, &v187, 0LL, 0LL);
      unint64_t v159 = v193;
      swift_bridgeObjectRetain();
      NSString v160 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v159);
      LODWORD(v159) = IMStringIsEmail(v160);

      if ((_DWORD)v159)
      {
        uint64_t v21 = 7367027LL;
        (*(void (**)(char *, uint64_t))(v178 + 8))(v71, v179);
        swift_bridgeObjectRelease(v193);
        if ((v177 & 0xFE) != 0) {
          char v23 = v177;
        }
        else {
          char v23 = 1;
        }
        unint64_t v20 = 0xE300000000000000LL;
        unint64_t v22 = v194;
        goto LABEL_5;
      }

      unint64_t v161 = sub_56924();
      uint64_t v162 = swift_allocError(&type metadata for RCSHandle.ParseError, v161, 0LL, 0LL);
      *id v163 = 2;
      swift_willThrow(v162);
      (*(void (**)(char *, uint64_t))(v178 + 8))(v71, v179);
      swift_bridgeObjectRelease(v193);
      swift_bridgeObjectRelease(a2);
      goto LABEL_28;
    }

    swift_beginAccess(&v192, v191, 0LL, 0LL);
    unint64_t v185 = sub_56D40();
    id v79 = v169 + 11;
    *(void *)&__int128 v80 = 136315650LL;
    __int128 v168 = v80;
    SEL v167 = (char *)&type metadata for Any + 8;
    *(void *)&__int128 v80 = 136315394LL;
    __int128 v170 = v80;
    unint64_t v183 = a2;
    while (1)
    {
      unint64_t v81 = a2;
      uint64_t v82 = *(v79 - 3);
      uint64_t v83 = *(v79 - 2);
      uint64_t v85 = *(v79 - 1);
      uint64_t v84 = *v79;
      unsigned __int8 v187 = (void *)v82;
      uint64_t v188 = v83;
      uint64_t v189 = v85;
      uint64_t v190 = v84;
      swift_bridgeObjectRetain();
      id v86 = (void *)StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)( 61LL,  0xE100000000000000LL,  2LL,  1LL,  &type metadata for Substring,  v185);
      id v87 = v86;
      if (v86[2] == 2LL)
      {
        uint64_t v175 = v85;
        uint64_t v181 = v83;
        uint64_t v182 = v82;
        unint64_t v184 = v70;
        uint64_t v88 = v86[4];
        uint64_t v89 = v86[5];
        uint64_t v90 = v86[6];
        uint64_t v91 = v86[7];
        uint64_t v92 = v86[8];
        uint64_t v93 = v86[9];
        uint64_t v94 = v86[11];
        uint64_t v180 = v86[10];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease(v87);
        uint64_t v174 = v88;
        uint64_t v173 = v89;
        uint64_t v172 = v90;
        uint64_t v95 = static String._fromSubstring(_:)(v88, v89, v90, v91);
        id v97 = v96;
        v98._uint64_t countAndFlagsBits = v95;
        v98._object = v97;
        unint64_t v99 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_71A78, v98);
        swift_bridgeObjectRelease(v97);
        if (v99 >= 3)
        {
          swift_bridgeObjectRelease(v94);
          if (qword_76B90 != -1) {
            swift_once(&qword_76B90, sub_21C04);
          }
          uint64_t v126 = type metadata accessor for Logger(0LL);
          sub_6298(v126, (uint64_t)static Logger.rcs);
          swift_bridgeObjectRetain();
          uint64_t v127 = swift_bridgeObjectRetain();
          id v128 = (os_log_s *)Logger.logObject.getter(v127);
          os_log_type_t v129 = static os_log_type_t.error.getter();
          int v130 = v129;
          BOOL v131 = os_log_type_enabled(v128, v129);
          unint64_t v70 = v184;
          uint64_t v133 = v181;
          uint64_t v132 = v182;
          if (v131)
          {
            uint64_t v134 = swift_slowAlloc(32LL, -1LL);
            LODWORD(v180) = v130;
            uint64_t v135 = v134;
            uint64_t v136 = swift_slowAlloc(96LL, -1LL);
            unsigned __int8 v187 = (void *)v136;
            *(_DWORD *)uint64_t v135 = v168;
            swift_bridgeObjectRetain();
            uint64_t v137 = static String._fromSubstring(_:)(v132, v133, v175, v84);
            unint64_t v139 = v138;
            swift_bridgeObjectRelease(v84);
            *(void *)(v135 + 4) = sub_B004(v137, v139, (uint64_t *)&v187);
            swift_bridgeObjectRelease_n(v84, 2LL);
            swift_bridgeObjectRelease(v139);
            *(_WORD *)(v135 + 12) = 2080;
            uint64_t v141 = v192;
            unint64_t v140 = v193;
            swift_bridgeObjectRetain();
            *(void *)(v135 + 14) = sub_B004(v141, v140, (uint64_t *)&v187);
            swift_bridgeObjectRelease(v140);
            *(_WORD *)(v135 + 22) = 2080;
            swift_bridgeObjectRetain();
            uint64_t v142 = static String._fromSubstring(_:)(v174, v173, v172, v91);
            unint64_t v144 = v143;
            swift_bridgeObjectRelease(v91);
            *(void *)(v135 + 24) = sub_B004(v142, v144, (uint64_t *)&v187);
            swift_bridgeObjectRelease_n(v91, 2LL);
            swift_bridgeObjectRelease(v144);
            _os_log_impl( &dword_0,  v128,  (os_log_type_t)v180,  "Skipping path component %s in RCS URI %s: unknown part %s",  (uint8_t *)v135,  0x20u);
            swift_arrayDestroy(v136, 3LL, v167);
            swift_slowDealloc(v136, -1LL, -1LL);
            swift_slowDealloc(v135, -1LL, -1LL);
          }

          else
          {

            swift_bridgeObjectRelease_n(v91, 2LL);
            swift_bridgeObjectRelease_n(v84, 2LL);
          }
        }

        else
        {
          swift_bridgeObjectRelease(v91);
          swift_bridgeObjectRelease(v84);
          uint64_t v100 = static String._fromSubstring(_:)(v92, v93, v180, v94);
          uint64_t v102 = v101;
          swift_bridgeObjectRelease(v94);
          uint64_t v103 = v194;
          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v194);
          unsigned __int8 v187 = (void *)v103;
          unint64_t v106 = sub_28CF0(v99);
          uint64_t v107 = *(void *)(v103 + 16);
          BOOL v108 = (v105 & 1) == 0;
          uint64_t v109 = v107 + v108;
          if (__OFADD__(v107, v108))
          {
            __break(1u);
LABEL_75:
            __break(1u);
LABEL_76:
            __break(1u);
LABEL_77:
            __break(1u);
            break;
          }

          char v110 = v105;
          if (*(void *)(v103 + 24) >= v109)
          {
            unint64_t v70 = v184;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              sub_50348();
            }
          }

          else
          {
            sub_4EC4C(v109, isUniquelyReferenced_nonNull_native);
            uint64_t v111 = sub_28CF0(v99);
            unint64_t v70 = v184;
            if ((v110 & 1) != (v112 & 1)) {
              goto LABEL_79;
            }
            unint64_t v106 = v111;
          }

          id v145 = v187;
          unint64_t v194 = (unint64_t)v187;
          if ((v110 & 1) != 0)
          {
            id v146 = (uint64_t *)(v187[7] + 16 * v106);
            swift_bridgeObjectRelease(v146[1]);
            *id v146 = v100;
            v146[1] = v102;
          }

          else
          {
            v187[(v106 >> 6) + 8] |= 1LL << v106;
            *(_BYTE *)(v145[6] + v106) = v99;
            unsigned __int8 v147 = (uint64_t *)(v145[7] + 16 * v106);
            *unsigned __int8 v147 = v100;
            v147[1] = v102;
            uint64_t v148 = v145[2];
            BOOL v149 = __OFADD__(v148, 1LL);
            uint64_t v150 = v148 + 1;
            if (v149) {
              goto LABEL_75;
            }
            v145[2] = v150;
          }

          swift_bridgeObjectRelease(0x8000000000000000LL);
        }

        a2 = v183;
      }

      else
      {
        swift_bridgeObjectRelease(v86);
        if (qword_76B90 != -1) {
          swift_once(&qword_76B90, sub_21C04);
        }
        uint64_t v113 = type metadata accessor for Logger(0LL);
        sub_6298(v113, (uint64_t)static Logger.rcs);
        uint64_t v114 = swift_bridgeObjectRetain();
        id v115 = (os_log_s *)Logger.logObject.getter(v114);
        os_log_type_t v116 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v115, v116))
        {
          uint64_t v117 = swift_slowAlloc(22LL, -1LL);
          uint64_t v118 = v83;
          uint64_t v119 = swift_slowAlloc(64LL, -1LL);
          unsigned __int8 v187 = (void *)v119;
          *(_DWORD *)uint64_t v117 = v170;
          swift_bridgeObjectRetain();
          uint64_t v120 = static String._fromSubstring(_:)(v82, v118, v85, v84);
          unint64_t v122 = v121;
          swift_bridgeObjectRelease(v84);
          *(void *)(v117 + 4) = sub_B004(v120, v122, (uint64_t *)&v187);
          swift_bridgeObjectRelease_n(v84, 2LL);
          unint64_t v123 = v122;
          a2 = v183;
          swift_bridgeObjectRelease(v123);
          *(_WORD *)(v117 + 12) = 2080;
          uint64_t v125 = v192;
          unint64_t v124 = v193;
          swift_bridgeObjectRetain();
          *(void *)(v117 + 14) = sub_B004(v125, v124, (uint64_t *)&v187);
          swift_bridgeObjectRelease(v124);
          _os_log_impl( &dword_0,  v115,  v116,  "Skipping path component %s in RCS URI %s: not a valid pair",  (uint8_t *)v117,  0x16u);
          swift_arrayDestroy(v119, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v119, -1LL, -1LL);
          unsigned __int8 v71 = v186;
          swift_slowDealloc(v117, -1LL, -1LL);

          goto LABEL_33;
        }

        swift_bridgeObjectRelease_n(v84, 2LL);
        a2 = v81;
      }

      unsigned __int8 v71 = v186;
LABEL_33:
      v79 += 4;
      if (!--v70) {
        goto LABEL_21;
      }
    }
  }

  __break(1u);
LABEL_79:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for RCSHandle.Attribute);
  __break(1u);
}

unint64_t _s7CoreRCS9RCSHandleV9AttributeO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_71CB8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_567B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_5C28(&qword_76860);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_56804()
{
  unint64_t result = qword_77BE8;
  if (!qword_77BE8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RCSHandle.Attribute,  &type metadata for RCSHandle.Attribute);
    atomic_store(result, (unint64_t *)&qword_77BE8);
  }

  return result;
}

unint64_t sub_5684C()
{
  unint64_t result = qword_77BF0;
  if (!qword_77BF0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RCSHandle.BotStatus,  &type metadata for RCSHandle.BotStatus);
    atomic_store(result, (unint64_t *)&qword_77BF0);
  }

  return result;
}

unint64_t sub_56894()
{
  unint64_t result = qword_77BF8;
  if (!qword_77BF8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for RCSHandle, &type metadata for RCSHandle);
    atomic_store(result, (unint64_t *)&qword_77BF8);
  }

  return result;
}

unint64_t sub_568DC()
{
  unint64_t result = qword_77C00;
  if (!qword_77C00)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RCSHandle.ParseError,  &type metadata for RCSHandle.ParseError);
    atomic_store(result, (unint64_t *)&qword_77C00);
  }

  return result;
}

unint64_t sub_56924()
{
  unint64_t result = qword_77C08;
  if (!qword_77C08)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for RCSHandle.ParseError,  &type metadata for RCSHandle.ParseError);
    atomic_store(result, (unint64_t *)&qword_77C08);
  }

  return result;
}

uint64_t destroy for RCSHandle(void *a1)
{
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t initializeWithCopy for RCSHandle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RCSHandle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v4);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for RCSHandle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(*(void *)(a1 + 24));
  uint64_t v6 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for RCSHandle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 57)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RCSHandle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 57) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RCSHandle()
{
  return &type metadata for RCSHandle;
}

ValueMetadata *type metadata accessor for RCSHandle.Attribute()
{
  return &type metadata for RCSHandle.Attribute;
}

ValueMetadata *type metadata accessor for RCSHandle.BotStatus()
{
  return &type metadata for RCSHandle.BotStatus;
}

uint64_t _s7CoreRCS9RCSHandleV9AttributeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_56C3C + 4 * byte_6157F[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_56C70 + 4 * byte_6157A[v4]))();
}

uint64_t sub_56C70(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_56C78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x56C80LL);
  }
  return result;
}

uint64_t sub_56C8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x56C94LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_56C98(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_56CA0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RCSHandle.ParseError()
{
  return &type metadata for RCSHandle.ParseError;
}

uint64_t sub_56CBC(uint64_t a1)
{
  uint64_t v2 = sub_5C28(&qword_77C10);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_56CFC()
{
  unint64_t result = qword_77C18;
  if (!qword_77C18)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_77C18);
  }

  return result;
}

unint64_t sub_56D40()
{
  unint64_t result = qword_77C20;
  if (!qword_77C20)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_77C20);
  }

  return result;
}

id static RCSSuggestedReply.imChipReply(from:)(void *a1)
{
  return sub_56DFC(a1, &IMSuggestedReplyAttributeName, (Class *)&OBJC_CLASS___IMChipReply_ptr);
}

unint64_t sub_56DA0()
{
  unint64_t result = qword_76C10;
  if (!qword_76C10)
  {
    type metadata accessor for Key(255LL);
    unint64_t result = swift_getWitnessTable(&unk_5FC50, v1);
    atomic_store(result, (unint64_t *)&qword_76C10);
  }

  return result;
}

id static RCSSuggestedAction.imChipAction(from:)(void *a1)
{
  return sub_56DFC(a1, &IMSuggestedActionAttributeName, (Class *)&OBJC_CLASS___IMChipAction_ptr);
}

id sub_56DFC(void *a1, id *a2, Class *a3)
{
  id v5 = [a1 body];
  if (!v5) {
    return 0LL;
  }
  uint64_t v6 = v5;
  id v7 = [v5 string];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  unint64_t v10 = v9;

  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(IMChipListCharacterString);
  if (v8 == v11 && v10 == v12)
  {
    swift_bridgeObjectRelease_n(v10, 2LL);
  }

  else
  {
    uint64_t v14 = v12;
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v10, v11, v12, 0LL);
    swift_bridgeObjectRelease(v10, v16, v17, v18, v19, v20, v21, v22);
    swift_bridgeObjectRelease(v14, v23, v24, v25, v26, v27, v28, v29);
    if ((v15 & 1) == 0) {
      goto LABEL_14;
    }
  }

  id v30 = [v6 attributesAtIndex:0 effectiveRange:0];
  type metadata accessor for Key(0LL);
  uint64_t v32 = v31;
  unint64_t v33 = sub_56DA0();
  uint64_t v34 = (RCSServiceSession *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v30,  v32,  (char *)&type metadata for Any + 8,  v33);

  if (!*(void *)v34[1].IMDTelephonyServiceSession_opaque)
  {
    __int128 v66 = 0u;
    __int128 v67 = 0u;
LABEL_17:
    swift_bridgeObjectRelease(v34, v35, v36, v37, v38, v39, v40, v41);
    goto LABEL_18;
  }

  id v42 = *a2;
  unint64_t v43 = sub_28DBC((uint64_t)v42);
  if ((v44 & 1) == 0)
  {
    __int128 v66 = 0u;
    __int128 v67 = 0u;

    goto LABEL_17;
  }

  sub_12224(*(void *)v34[3].state + 32 * v43, (uint64_t)&v66);

  swift_bridgeObjectRelease(v34, v45, v46, v47, v48, v49, v50, v51);
  if (!*((void *)&v67 + 1))
  {
LABEL_18:

    sub_15F00((uint64_t)&v66);
    return 0LL;
  }

  uint64_t v52 = sub_5C28(&qword_773D8);
  if ((swift_dynamicCast(&v65, &v66, (char *)&type metadata for Any + 8, v52, 6LL) & 1) == 0)
  {
LABEL_14:

    return 0LL;
  }

  uint64_t v53 = v65;
  id v54 = objc_allocWithZone(*a3);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v53, v56, v57, v58, v59, v60, v61, v62);
  id v63 = [v54 initWithDictionary:isa];

  return v63;
}

uint64_t type metadata accessor for RCSSuggestedReply()
{
  return objc_opt_self(&OBJC_CLASS____TtC7CoreRCS17RCSSuggestedReply);
}

uint64_t type metadata accessor for RCSSuggestedAction()
{
  return objc_opt_self(&OBJC_CLASS____TtC7CoreRCS18RCSSuggestedAction);
}

uint64_t IMDChatRCSGroupSnapshot.originalGroupID.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IMDChatRCSGroupSnapshot.originalGroupID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 24);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease(v5);
}

void *IMDChatRCSGroupSnapshot.originalGroupID.modify(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

uint64_t IMDChatRCSGroupSnapshot.properties.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IMDChatRCSGroupSnapshot.properties.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = a1;
  return swift_bridgeObjectRelease(v3);
}

void *IMDChatRCSGroupSnapshot.properties.modify(uint64_t a1)
{
  return &j__swift_endAccess;
}

void *IMDChatRCSGroupSnapshot.__allocating_init(originalGroupID:properties:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = (void *)swift_allocObject(v3, 40LL, 7LL);
  void v7[3] = 0LL;
  void v7[4] = 0LL;
  _OWORD v7[2] = 0LL;
  swift_beginAccess(v7 + 2, v12, 1LL, 0LL);
  uint64_t v8 = v7[3];
  _OWORD v7[2] = a1;
  void v7[3] = a2;
  swift_bridgeObjectRelease(v8);
  swift_beginAccess(v7 + 4, &v11, 1LL, 0LL);
  uint64_t v9 = v7[4];
  void v7[4] = a3;
  swift_bridgeObjectRelease(v9);
  return v7;
}

void *IMDChatRCSGroupSnapshot.init(originalGroupID:properties:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = 0LL;
  v3[4] = 0LL;
  v3[2] = 0LL;
  swift_beginAccess(v3 + 2, v11, 1LL, 0LL);
  uint64_t v7 = v3[3];
  v3[2] = a1;
  v3[3] = a2;
  swift_bridgeObjectRelease(v7);
  swift_beginAccess(v3 + 4, &v10, 1LL, 0LL);
  uint64_t v8 = v3[4];
  v3[4] = a3;
  swift_bridgeObjectRelease(v8);
  return v3;
}

Swift::Bool __swiftcall IMDChatRCSGroupSnapshot.updateProperties(_:)(Swift::OpaquePointer_optional a1)
{
  if (!a1.value._rawValue) {
    goto LABEL_64;
  }
  rawValue = a1.value._rawValue;
  uint64_t v83 = (char *)a1.value._rawValue + 64;
  uint64_t v3 = 1LL << *((_BYTE *)a1.value._rawValue + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *((void *)a1.value._rawValue + 8);
  uint64_t v6 = (uint64_t *)(v1 + 32);
  uint64_t v7 = &v95[1];
  uint64_t v8 = &v99;
  int64_t v84 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v9 = 0LL;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v9 << 6);
LABEL_10:
      sub_12294(rawValue[6] + 40 * v12, (uint64_t)&v93);
      sub_12224(rawValue[7] + 32 * v12, (uint64_t)v7);
      goto LABEL_29;
    }

    int64_t v13 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }

    if (v13 < v84)
    {
      unint64_t v14 = *(void *)&v83[8 * v13];
      if (v14) {
        goto LABEL_14;
      }
      int64_t v15 = v9 + 2;
      ++v9;
      if (v13 + 1 < v84)
      {
        unint64_t v14 = *(void *)&v83[8 * v15];
        if (v14) {
          goto LABEL_17;
        }
        int64_t v9 = v13 + 1;
        if (v13 + 2 < v84)
        {
          unint64_t v14 = *(void *)&v83[8 * v13 + 16];
          if (v14)
          {
            v13 += 2LL;
            goto LABEL_14;
          }

          int64_t v15 = v13 + 3;
          int64_t v9 = v13 + 2;
          if (v13 + 3 < v84) {
            break;
          }
        }
      }
    }

LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  Swift::Bool result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

unint64_t sub_57908()
{
  unint64_t result = qword_77D68;
  if (!qword_77D68)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSNull);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_77D68);
  }

  return result;
}

uint64_t IMDChatRCSGroupSnapshot.deinit()
{
  return v0;
}

uint64_t IMDChatRCSGroupSnapshot.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t sub_57994()
{
  uint64_t v1 = *v0;
  swift_beginAccess(v1 + 16, v4, 0LL, 0LL);
  uint64_t v2 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_579E0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  swift_beginAccess(v5 + 16, v8, 1LL, 0LL);
  uint64_t v6 = *(void *)(v5 + 24);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  return swift_bridgeObjectRelease(v6);
}

void *sub_57A34(uint64_t a1)
{
  return &j_j__swift_endAccess_0;
}

uint64_t sub_57A74()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_57AB4(Swift::OpaquePointer_optional a1)
{
  return 1LL;
}

void static IMDChatRCSGroupIdentity.encodeGroupID(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_57B74(a1, a2);
  unint64_t v6 = v5;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_F5F8(v4, v6);
  id v8 = -[objc_class __imHexString](isa, "__imHexString");

  if (v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_57B74(uint64_t a1, unint64_t a2)
{
  *(void *)&__int128 v19 = a1;
  *((void *)&v19 + 1) = a2;
  swift_bridgeObjectRetain();
  uint64_t v2 = sub_5C28(&qword_77E58);
  if (!swift_dynamicCast(v17, &v19, &type metadata for String.UTF8View, v2, 6LL))
  {
    uint64_t v18 = 0LL;
    memset(v17, 0, sizeof(v17));
    sub_1231C((uint64_t)v17, &qword_77E60);
    if ((a2 & 0x1000000000000000LL) != 0) {
      goto LABEL_20;
    }
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      v20[0] = a1;
      v20[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v7 = (char *)v20 + (HIBYTE(a2) & 0xF);
      id v8 = v20;
    }

    else
    {
      if ((a1 & 0x1000000000000000LL) != 0)
      {
        uint64_t v5 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v5 = _StringObject.sharedUTF8.getter(a1, a2);
      }

      if (v5) {
        uint64_t v7 = (_BYTE *)(v5 + v6);
      }
      else {
        uint64_t v7 = 0LL;
      }
      id v8 = (_BYTE *)v5;
    }

    int64_t v9 = sub_5B45C(v8, v7);
    unint64_t v11 = v10;
    if (v10 >> 60 != 15)
    {
      swift_bridgeObjectRelease(a2);
      *(void *)&v17[0] = v9;
      *((void *)&v17[0] + 1) = v11;
      return *(void *)&v17[0];
    }

    if ((a2 & 0x1000000000000000LL) != 0)
    {
LABEL_20:
      Swift::Int v12 = String.UTF8View._foreignCount()();
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      Swift::Int v12 = HIBYTE(a2) & 0xF;
    }

    else
    {
      Swift::Int v12 = a1 & 0xFFFFFFFFFFFFLL;
    }

    *(void *)&v17[0] = sub_5B4C0(v12);
    *((void *)&v17[0] + 1) = v13;
    __chkstk_darwin(*(void *)&v17[0]);
    sub_5AB9C();
    __asm { BR              X12 }
  }

  sub_22168(v17, (uint64_t)v20);
  uint64_t v3 = v21;
  uint64_t v4 = v22;
  sub_CA38(v20, v21);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)( &v19,  sub_5AE8C,  0LL,  &type metadata for Data._Representation,  v3,  v4);
  swift_bridgeObjectRelease(a2);
  v17[0] = v19;
  sub_12204(v20);
  return *(void *)&v17[0];
}

uint64_t static IMDChatRCSGroupIdentity.migrationEnabled.getter()
{
  return sub_580B0(&qword_76BD0, (uint64_t)qword_77360, (uint64_t)sub_385B0);
}

uint64_t static IMDChatRCSGroupIdentity.legacyInteractionEnabled.getter()
{
  return sub_580B0(&qword_76BD8, (uint64_t)qword_77378, (uint64_t)sub_385D8);
}

uint64_t sub_580B0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_5C28(&qword_762F8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  int64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v10 = sub_6298(v6, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  PrototypingSetting.wrappedValue.getter(&v13, v6);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v13;
}

uint64_t sub_58184()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  sub_CA38(v0, v1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  if (!v3)
  {
    __int128 v9 = 0u;
    __int128 v10 = 0u;
LABEL_10:
    sub_1231C((uint64_t)&v9, &qword_76588);
    return 0LL;
  }

  uint64_t v4 = v3;
  *(void *)&__int128 v9 = 0xD000000000000017LL;
  *((void *)&v9 + 1) = 0x8000000000065EF0LL;
  AnyHashable.init<A>(_:)(v8, &v9, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v4 + 16) && (unint64_t v5 = sub_14460((uint64_t)v8), (v6 & 1) != 0))
  {
    sub_12224(*(void *)(v4 + 56) + 32 * v5, (uint64_t)&v9);
  }

  else
  {
    __int128 v9 = 0u;
    __int128 v10 = 0u;
  }

  swift_bridgeObjectRelease(v4);
  sub_12260((uint64_t)v8);
  if (!*((void *)&v10 + 1)) {
    goto LABEL_10;
  }
  return 0LL;
}

uint64_t sub_582A4()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  sub_CA38(v0, v1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  if (!v3)
  {
    __int128 v9 = 0u;
    __int128 v10 = 0u;
LABEL_12:
    sub_1231C((uint64_t)&v9, &qword_76588);
    return 0LL;
  }

  uint64_t v4 = v3;
  *(void *)&__int128 v9 = 0x70756F7247534352LL;
  *((void *)&v9 + 1) = 0xEB00000000495255LL;
  AnyHashable.init<A>(_:)(&v8, &v9, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v4 + 16) && (unint64_t v5 = sub_14460((uint64_t)&v8), (v6 & 1) != 0))
  {
    sub_12224(*(void *)(v4 + 56) + 32 * v5, (uint64_t)&v9);
  }

  else
  {
    __int128 v9 = 0u;
    __int128 v10 = 0u;
  }

  swift_bridgeObjectRelease(v4);
  sub_12260((uint64_t)&v8);
  if (!*((void *)&v10 + 1)) {
    goto LABEL_12;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_583D4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v23;
  uint64_t v6 = v24;
  sub_CA38(v22, v23);
  uint64_t v7 = sub_5C28(&qword_76570);
  uint64_t inited = swift_initStackObject(v7, v21);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_5F530;
  *(void *)&__int128 v19 = 0x70756F7247534352LL;
  *((void *)&v19 + 1) = 0xEB00000000495255LL;
  AnyHashable.init<A>(_:)((void *)(inited + 32), &v19, &type metadata for String, &protocol witness table for String);
  if (a2)
  {
    char v20 = &type metadata for String;
    *(void *)&__int128 v19 = a1;
    *((void *)&v19 + 1) = a2;
    sub_121F4(&v19, (_OWORD *)(inited + 72));
  }

  else
  {
    id v9 = [objc_allocWithZone(NSNull) init];
    *(void *)(inited + 96) = sub_57908();
    *(void *)(inited + 72) = v9;
  }

  __int128 v10 = (RCSServiceSession *)sub_123A4(inited);
  (*(void (**)(RCSServiceSession *, uint64_t, uint64_t))(v6 + 40))(v10, v5, v6);
  swift_bridgeObjectRelease(v10, v11, v12, v13, v14, v15, v16, v17);
  return sub_12204(v22);
}

void sub_5850C(uint64_t a1, RCSServiceSession *a2)
{
  uint64_t v5 = v21;
  uint64_t v6 = v22;
  sub_CA38(v20, v21);
  if (!a2)
  {
    id v13 = 0LL;
    goto LABEL_5;
  }

  swift_bridgeObjectRetain();
  uint64_t v7 = sub_57B74(a1, (unint64_t)a2);
  unint64_t v9 = v8;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_F5F8(v7, v9);
  id v11 = -[objc_class __imHexString](isa, "__imHexString");

  if (v11)
  {
    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    id v13 = v12;
    swift_bridgeObjectRelease(a2, v12, v14, v15, v16, v17, v18, v19);

LABEL_5:
    (*(void (**)(uint64_t, const char *, uint64_t, uint64_t))(v6 + 16))(a1, v13, v5, v6);
    sub_12204(v20);
    return;
  }

  __break(1u);
}

uint64_t IMDChatRCSGroupIdentity.isValid.getter()
{
  uint64_t v1 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v24[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_5C28(&qword_762F8);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v24[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_58184();
  if (v8 != 1)
  {
    if (!v8)
    {
      if (qword_76BD8 != -1) {
        swift_once(&qword_76BD8, sub_385D8);
      }
      uint64_t v9 = sub_6298(v4, (uint64_t)qword_77378);
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
      PrototypingSetting.wrappedValue.getter(&v28, v4);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      if (v28 == 1)
      {
        IMDChatRCSGroupIdentity.uri.getter((uint64_t)v27);
        sub_122D8((uint64_t)v27, (uint64_t)&v28, &qword_76370);
        if (v29)
        {
          sub_CA90( (uint64_t)v27,  (void (*)(void, void, void, void, void, void, void, void))sub_C9E8);
          return 1LL;
        }
      }
    }

    return 0LL;
  }

  IMDChatRCSGroupIdentity.uri.getter((uint64_t)v27);
  sub_CA90((uint64_t)v27, (void (*)(void, void, void, void, void, void, void, void))sub_C9E8);
  sub_5AB5C(v0, (uint64_t)v24);
  sub_122D8((uint64_t)v27, (uint64_t)&v28, &qword_76370);
  if (!v29)
  {
    sub_CA5C(v24);
    return 0LL;
  }

  if (sub_58184() == 1
    && (uint64_t v11 = v25, v12 = v26, sub_CA38(v24, v25), (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12), v13))
  {
    uint64_t v14 = v13;
    id v15 = (void *)objc_opt_self(&OBJC_CLASS___NSData);
    NSString v16 = String._bridgeToObjectiveC()();
    id v17 = objc_msgSend(v15, "__imDataWithHexString:", v16);

    if (v17)
    {
      uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v17);
      unint64_t v20 = v19;

      static String.Encoding.utf8.getter();
      String.init(data:encoding:)(v18, v20, v3);
      id v17 = v21;
      sub_F5F8(v18, v20);
      BOOL v10 = v17 != 0LL;
      swift_bridgeObjectRelease(v14);
    }

    else
    {
      swift_bridgeObjectRelease(v14);
      BOOL v10 = 0LL;
    }
  }

  else
  {
    BOOL v10 = 0LL;
    id v17 = 0LL;
  }

  sub_CA5C(v24);
  swift_bridgeObjectRelease(v17);
  return v10;
}

uint64_t IMDChatRCSGroupIdentity.uri.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_5C28(&qword_762F8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = sub_58184();
  __int128 v11 = 0uLL;
  if (result == 1)
  {
    uint64_t result = sub_582A4();
    id v19 = v25;
    if (!v25)
    {
LABEL_14:
      uint64_t v27 = 0LL;
LABEL_19:
      uint64_t v28 = 0LL;
      char v29 = 0;
      __int128 v26 = 0uLL;
      __int128 v11 = 0uLL;
      goto LABEL_20;
    }

    uint64_t v23 = result;
    goto LABEL_12;
  }

  if (!result)
  {
    if (qword_76BD8 != -1) {
      swift_once(&qword_76BD8, sub_385D8);
    }
    uint64_t v12 = sub_6298(v6, (uint64_t)qword_77378);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v12, v6);
    PrototypingSetting.wrappedValue.getter(v32, v6);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    if (LOBYTE(v32[0]) != 1) {
      goto LABEL_18;
    }
    uint64_t v13 = v1[3];
    uint64_t v14 = v1[4];
    sub_CA38(v1, v13);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14);
    if (!v15) {
      goto LABEL_18;
    }
    uint64_t v16 = v15;
    id v17 = (void *)objc_opt_self(&OBJC_CLASS___NSData);
    NSString v18 = String._bridgeToObjectiveC()();
    id v19 = objc_msgSend(v17, "__imDataWithHexString:", v18);

    if (!v19)
    {
      uint64_t result = swift_bridgeObjectRelease(v16);
      uint64_t v27 = 0LL;
      goto LABEL_19;
    }

    uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v19);
    unint64_t v22 = v21;

    static String.Encoding.utf8.getter();
    uint64_t v23 = String.init(data:encoding:)(v20, v22, v5);
    id v19 = v24;
    sub_F5F8(v20, v22);
    uint64_t result = swift_bridgeObjectRelease(v16);
    if (!v19) {
      goto LABEL_14;
    }
LABEL_12:
    sub_55A4C(v23, (unint64_t)v19, 0, 0LL, 0LL, (uint64_t)v32);
    uint64_t v27 = v32[0];
    id v19 = (id)v32[1];
    uint64_t v28 = v32[2];
    __int128 v30 = v33;
    __int128 v31 = v34;
    char v29 = v35;
    uint64_t result = RCSHandle.couldBeGroupURI.getter();
    if ((result & 1) != 0)
    {
      __int128 v11 = v30;
      __int128 v26 = v31;
      goto LABEL_20;
    }

    uint64_t result = (uint64_t)sub_15F40(v32);
LABEL_18:
    uint64_t v27 = 0LL;
    id v19 = 0LL;
    goto LABEL_19;
  }

  uint64_t v27 = 0LL;
  id v19 = 0LL;
  uint64_t v28 = 0LL;
  char v29 = 0;
  __int128 v26 = 0uLL;
LABEL_20:
  *(void *)a1 = v27;
  *(void *)(a1 + 8) = v19;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v28;
  *(_OWORD *)(a1 + 24) = v11;
  *(_OWORD *)(a1 + 40) = v26;
  *(_BYTE *)(a1 + 56) = v29;
  return result;
}

id IMDChatRCSGroupIdentity.conversationID.getter()
{
  uint64_t v1 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v4 = 0LL;
  if (sub_58184() == 1)
  {
    uint64_t v5 = v0[3];
    uint64_t v6 = v0[4];
    sub_CA38(v0, v5);
    id v4 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = (void *)objc_opt_self(&OBJC_CLASS___NSData);
      NSString v10 = String._bridgeToObjectiveC()();
      id v4 = objc_msgSend(v9, "__imDataWithHexString:", v10);

      if (v4)
      {
        uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
        unint64_t v20 = v19;

        static String.Encoding.utf8.getter();
        uint64_t v21 = String.init(data:encoding:)(v18, v20, v3);
        uint64_t v23 = v22;
        sub_F5F8(v18, v20);
        swift_bridgeObjectRelease(v8, v24, v25, v26, v27, v28, v29, v30);
        if (v23) {
          return (id)v21;
        }
        else {
          return 0LL;
        }
      }

      else
      {
        swift_bridgeObjectRelease(v8, v11, v12, v13, v14, v15, v16, v17);
      }
    }
  }

  return v4;
}

void IMDChatRCSGroupIdentity.uri.setter(uint64_t a1)
{
  uint64_t v2 = sub_5C28(&qword_762F8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_122D8(a1, (uint64_t)v20, &qword_76370);
  if (*((void *)&v20[0] + 1))
  {
    _OWORD v21[2] = v20[0];
    v21[3] = v20[1];
    v22[0] = v21[0];
    *(_OWORD *)((char *)v22 + 9) = *(_OWORD *)((char *)v21 + 9);
    uint64_t v6 = RCSHandle.rawValue.getter();
    uint64_t v8 = v7;
    sub_CA90(a1, (void (*)(void, void, void, void, void, void, void, void))sub_C9E8);
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v8 = 0LL;
  }

  uint64_t v9 = sub_58184();
  if (v9 == 1)
  {
    sub_583D4(v6, (uint64_t)v8);
  }

  else
  {
    if (v9) {
      goto LABEL_10;
    }
    if (qword_76BD8 != -1) {
      swift_once(&qword_76BD8, sub_385D8);
    }
    uint64_t v17 = sub_6298(v2, (uint64_t)qword_77378);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v17, v2);
    PrototypingSetting.wrappedValue.getter(&v19, v2);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    if (v19 != 1) {
LABEL_10:
    }
      swift_bridgeObjectRelease(v8, v10, v11, v12, v13, v14, v15, v16);
    else {
      sub_5850C(v6, v8);
    }
  }

void (*IMDChatRCSGroupIdentity.uri.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x108uLL);
  *a1 = v3;
  uint64_t v4 = (uint64_t)(v3 + 16);
  uint64_t v5 = (uint64_t)(v3 + 24);
  v3[32] = v1;
  IMDChatRCSGroupIdentity.uri.getter((uint64_t)(v3 + 16));
  sub_122D8(v4, v5, &qword_76370);
  return sub_58EF8;
}

void sub_58EF8(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t)(*a1 + 24);
  if ((a2 & 1) != 0)
  {
    sub_122D8(v3, (uint64_t)v2, &qword_76370);
    sub_CA90((uint64_t)v2, (void (*)(void, void, void, void, void, void, void, void))sub_CACC);
    IMDChatRCSGroupIdentity.uri.setter((uint64_t)v2);
    sub_C9E8(v2[24], v2[25], v2[26], v2[27], v2[28], v2[29], v2[30]);
  }

  else
  {
    sub_122D8(v3, (uint64_t)(v2 + 8), &qword_76370);
    IMDChatRCSGroupIdentity.uri.setter((uint64_t)(v2 + 8));
  }

  free(v2);
}

void IMDChatRCSGroupIdentity.conversationID.setter(uint64_t a1, RCSServiceSession *a2)
{
  if (sub_58184() == 1) {
    sub_5850C(a1, a2);
  }
  else {
    swift_bridgeObjectRelease(a2, v4, v5, v6, v7, v8, v9, v10);
  }
}

void (*IMDChatRCSGroupIdentity.conversationID.modify(id *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = IMDChatRCSGroupIdentity.conversationID.getter();
  a1[1] = v3;
  return sub_59010;
}

void sub_59010(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = (RCSServiceSession *)a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if (sub_58184() == 1) {
      sub_5850C(v3, v2);
    }
    else {
      swift_bridgeObjectRelease(v2, v4, v5, v6, v7, v8, v9, v10);
    }
  }

  else if (sub_58184() == 1)
  {
    sub_5850C(v3, v2);
    return;
  }

  swift_bridgeObjectRelease(v2, v11, v12, v13, v14, v15, v16, v17);
}

uint64_t IMDChatRCSGroupIdentity.init(chat:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22168(a1, a2);
}

uint64_t IMDChatRCSGroupIdentity.init(chat:conversationID:groupURI:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, RCSServiceSession *a3@<X2>, CoreRCS::RCSHandle *a4@<X3>, uint64_t a5@<X8>)
{
  if (a3)
  {
    v9._uint64_t countAndFlagsBits = a2;
    v9._object = a3;
    IMDChatRCSGroupIdentity.migrateToLatest(conversationID:groupURI:)(v9, a4);
    sub_15F40(a4);
    swift_bridgeObjectRelease(a3, v10, v11, v12, v13, v14, v15, v16);
  }

  else
  {
    IMDChatRCSGroupIdentity.migrateToLegacy(groupURI:)(a4);
    sub_15F40(a4);
  }

  return sub_12204(a1);
}

Swift::Void __swiftcall IMDChatRCSGroupIdentity.migrateToLatest(conversationID:groupURI:)( Swift::String conversationID, CoreRCS::RCSHandle *groupURI)
{
  uint64_t v3 = v2;
  object = conversationID._object;
  uint64_t countAndFlagsBits = conversationID._countAndFlagsBits;
  uint64_t v7 = groupURI->scheme._countAndFlagsBits;
  uint64_t v6 = groupURI->scheme._object;
  uint64_t v89 = groupURI->id._countAndFlagsBits;
  uint64_t v90 = v6;
  __int128 v91 = *(_OWORD *)&groupURI->id._object;
  uint64_t v8 = groupURI->alternateHandle.value._countAndFlagsBits;
  id v87 = groupURI->alternateHandle.value._object;
  uint64_t v88 = v8;
  int botStatus = groupURI->botStatus;
  uint64_t v9 = sub_5C28(&qword_762F8);
  uint64_t v93 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v92 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v11);
  id v13 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (sub_58184() != 1
    || sub_58184() != 1
    || (uint64_t v14 = v2[3], v15 = v2[4],
                     sub_CA38(v2, v14),
                     (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15),
                     !v16))
  {
LABEL_23:
    uint64_t v41 = v3[3];
    uint64_t v42 = v3[4];
    sub_CA38(v3, v41);
    uint64_t v43 = sub_5C28(&qword_76570);
    uint64_t inited = swift_initStackObject(v43, &v111);
    __int128 v91 = xmmword_5F530;
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_5F530;
    uint64_t v95 = 0xD000000000000017LL;
    unint64_t v96 = 0x8000000000065EF0LL;
    AnyHashable.init<A>(_:)( (void *)(inited + 32),  &v95,  &type metadata for String,  &protocol witness table for String);
    *(void *)(inited + 96) = &type metadata for Int;
    *(void *)(inited + 72) = 1LL;
    unint64_t v45 = sub_123A4(inited);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v42 + 40))(v45, v41, v42);
    swift_bridgeObjectRelease(v45);
    swift_bridgeObjectRetain();
    if (sub_58184() == 1)
    {
      uint64_t v85 = v9;
      sub_2AF74((uint64_t)v3, (uint64_t)&v95);
      uint64_t v47 = v98;
      uint64_t v46 = v99;
      uint64_t v90 = sub_CA38(&v95, v98);
      swift_bridgeObjectRetain();
      char v48 = object;
      uint64_t v49 = sub_57B74(countAndFlagsBits, (unint64_t)object);
      unint64_t v51 = v50;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_F5F8(v49, v51);
      id v53 = -[objc_class __imHexString](isa, "__imHexString");

      if (!v53)
      {
        __break(1u);
        goto LABEL_39;
      }

      uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
      uint64_t v56 = v55;
      swift_bridgeObjectRelease(v48);

      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 16))(v54, v56, v47, v46);
      sub_12204(&v95);
      uint64_t v9 = v85;
    }

    else
    {
      swift_bridgeObjectRelease(object);
    }

    sub_5C68(groupURI);
    uint64_t v57 = RCSHandle.rawValue.getter();
    unint64_t v59 = v58;
    sub_15F40(groupURI);
    uint64_t v60 = sub_58184();
    if (v60 == 1)
    {
      uint64_t v75 = v3[3];
      uint64_t v76 = v3[4];
      sub_CA38(v3, v75);
      uint64_t v77 = swift_initStackObject(v43, &v110);
      *(_OWORD *)(v77 + swift_weakDestroy(v0 + 16) = v91;
      uint64_t v95 = 0x70756F7247534352LL;
      unint64_t v96 = 0xEB00000000495255LL;
      AnyHashable.init<A>(_:)((void *)(v77 + 32), &v95, &type metadata for String, &protocol witness table for String);
      *(void *)(v77 + 96) = &type metadata for String;
      *(void *)(v77 + 72) = v57;
      *(void *)(v77 + 80) = v59;
      unint64_t v78 = sub_123A4(v77);
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v76 + 40))(v78, v75, v76);
      unint64_t v74 = v78;
    }

    else
    {
      if (!v60)
      {
        if (qword_76BD8 != -1) {
          swift_once(&qword_76BD8, sub_385D8);
        }
        uint64_t v61 = sub_6298(v9, (uint64_t)qword_77378);
        SEL v62 = v92;
        uint64_t v63 = v93;
        (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))(v92, v61, v9);
        PrototypingSetting.wrappedValue.getter(&v95, v9);
        (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v9);
        if (v95 == 1)
        {
          sub_2AF74((uint64_t)v3, (uint64_t)&v95);
          uint64_t v64 = v98;
          uint64_t v65 = v99;
          sub_CA38(&v95, v98);
          swift_bridgeObjectRetain();
          uint64_t v66 = sub_57B74(v57, v59);
          unint64_t v68 = v67;
          Class v69 = Data._bridgeToObjectiveC()().super.isa;
          sub_F5F8(v66, v68);
          id v70 = -[objc_class __imHexString](v69, "__imHexString");

          if (v70)
          {
            uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
            uint64_t v73 = v72;
            swift_bridgeObjectRelease(v59);

            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 16))(v71, v73, v64, v65);
            sub_12204(&v95);
LABEL_37:
            uint64_t v79 = v3[3];
            uint64_t v80 = v3[4];
            sub_CA38(v3, v79);
            (*(void (**)(uint64_t, uint64_t))(v80 + 48))(v79, v80);
            return;
          }

Swift::Void __swiftcall IMDChatRCSGroupIdentity.migrateToLegacy(groupURI:)(CoreRCS::RCSHandle *groupURI)
{
  uint64_t v2 = v1;
  object = groupURI->scheme._object;
  uint64_t countAndFlagsBits = groupURI->scheme._countAndFlagsBits;
  uint64_t v5 = groupURI->id._countAndFlagsBits;
  __int128 v76 = *(_OWORD *)&groupURI->id._object;
  uint64_t v7 = groupURI->alternateHandle.value._countAndFlagsBits;
  uint64_t v6 = groupURI->alternateHandle.value._object;
  int botStatus = groupURI->botStatus;
  uint64_t v9 = sub_5C28(&qword_762F8);
  uint64_t v78 = *(void *)(v9 - 8);
  uint64_t v79 = v9;
  __chkstk_darwin(v9);
  uint64_t v77 = &v68[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v11);
  id v13 = &v68[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if (!sub_58184())
  {
    int v69 = botStatus;
    id v70 = v6;
    uint64_t v71 = v7;
    uint64_t v72 = v5;
    uint64_t v73 = object;
    if (sub_58184() == 1)
    {
      uint64_t v38 = v1[3];
      uint64_t v39 = v1[4];
      sub_CA38(v1, v38);
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v39);
      if (v40)
      {
        uint64_t v41 = v40;
        uint64_t v42 = (void *)objc_opt_self(&OBJC_CLASS___NSData);
        NSString v43 = String._bridgeToObjectiveC()();
        id v44 = objc_msgSend(v42, "__imDataWithHexString:", v43);

        if (v44)
        {
          uint64_t v45 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v44);
          unint64_t v47 = v46;

          static String.Encoding.utf8.getter();
          String.init(data:encoding:)(v45, v47, v13);
          uint64_t v49 = v48;
          sub_F5F8(v45, v47);
          swift_bridgeObjectRelease(v41);
          if (v49)
          {
            swift_bridgeObjectRelease(v49);
            goto LABEL_2;
          }
        }

        else
        {
          swift_bridgeObjectRelease(v41);
        }
      }
    }

    IMDChatRCSGroupIdentity.uri.getter((uint64_t)v97);
    uint64_t v56 = v97[0];
    uint64_t v57 = (void *)v97[1];
    uint64_t v58 = v97[2];
    uint64_t v59 = v97[3];
    uint64_t v60 = v97[5];
    uint64_t v74 = v97[4];
    uint64_t v61 = v97[6];
    char v62 = v98;
    sub_122D8((uint64_t)v97, (uint64_t)v99, &qword_76370);
    if (v100)
    {
      uint64_t v63 = groupURI->scheme._object;
      if ((v56 == groupURI->scheme._countAndFlagsBits && v57 == v63
         || (_stringCompareWithSmolCheck(_:_:expecting:)(v56, v57, groupURI->scheme._countAndFlagsBits, v63, 0LL) & 1) != 0)
        && ((uint64_t v64 = groupURI->id._countAndFlagsBits, v65 = groupURI->id._object, v58 == v64) && (void *)v59 == v65
         || (_stringCompareWithSmolCheck(_:_:expecting:)(v58, v59, v64, v65, 0LL) & 1) != 0))
      {
        rawValue = groupURI->attributes._rawValue;
        sub_5C68(groupURI);
        char v67 = sub_544B8(v74, (uint64_t)rawValue);
        sub_15F40(groupURI);
        sub_CA90( (uint64_t)v97,  (void (*)(void, void, void, void, void, void, void, void))sub_C9E8);
        if ((v67 & 1) != 0) {
          return;
        }
      }

      else
      {
        sub_CA90( (uint64_t)v97,  (void (*)(void, void, void, void, void, void, void, void))sub_C9E8);
      }
    }

    else
    {
      uint64_t v80 = v56;
      unint64_t v81 = (unint64_t)v57;
      uint64_t v82 = v58;
      uint64_t v83 = v59;
      uint64_t v84 = v74;
      uint64_t v85 = v60;
      uint64_t v86 = v61;
      char v87 = v62;
      uint64_t v88 = countAndFlagsBits;
      uint64_t v89 = v73;
      uint64_t v90 = v72;
      __int128 v91 = v76;
      uint64_t v92 = v71;
      uint64_t v93 = v70;
      char v94 = v69;
      sub_5C68(groupURI);
      sub_5B098(&v80);
    }
  }

LABEL_2:
  uint64_t v14 = v2[3];
  uint64_t v15 = v2[4];
  sub_CA38(v2, v14);
  uint64_t v16 = sub_5C28(&qword_76570);
  uint64_t inited = swift_initStackObject(v16, &v96);
  __int128 v76 = xmmword_5F530;
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_5F530;
  uint64_t v80 = 0xD000000000000017LL;
  unint64_t v81 = 0x8000000000065EF0LL;
  AnyHashable.init<A>(_:)((void *)(inited + 32), &v80, &type metadata for String, &protocol witness table for String);
  *(void *)(inited + 96) = &type metadata for Int;
  *(void *)(inited + 72) = 0LL;
  unint64_t v18 = sub_123A4(inited);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v15 + 40))(v18, v14, v15);
  swift_bridgeObjectRelease(v18);
  sub_5C68(groupURI);
  uint64_t v19 = RCSHandle.rawValue.getter();
  unint64_t v21 = v20;
  sub_15F40(groupURI);
  uint64_t v22 = sub_58184();
  if (v22 == 1)
  {
    uint64_t v50 = v2[3];
    uint64_t v51 = v2[4];
    sub_CA38(v2, v50);
    uint64_t v52 = swift_initStackObject(v16, &v95);
    *(_OWORD *)(v52 + swift_weakDestroy(v0 + 16) = v76;
    uint64_t v80 = 0x70756F7247534352LL;
    unint64_t v81 = 0xEB00000000495255LL;
    AnyHashable.init<A>(_:)((void *)(v52 + 32), &v80, &type metadata for String, &protocol witness table for String);
    *(void *)(v52 + 96) = &type metadata for String;
    *(void *)(v52 + 72) = v19;
    *(void *)(v52 + 80) = v21;
    unint64_t v53 = sub_123A4(v52);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v51 + 40))(v53, v50, v51);
    unint64_t v37 = v53;
    goto LABEL_16;
  }

  if (v22) {
    goto LABEL_9;
  }
  if (qword_76BD8 != -1) {
    swift_once(&qword_76BD8, sub_385D8);
  }
  uint64_t v23 = v79;
  uint64_t v24 = sub_6298(v79, (uint64_t)qword_77378);
  uint64_t v25 = v77;
  uint64_t v26 = v78;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v78 + 16))(v77, v24, v23);
  PrototypingSetting.wrappedValue.getter(&v80, v23);
  (*(void (**)(_BYTE *, uint64_t))(v26 + 8))(v25, v23);
  if (v80 != 1)
  {
LABEL_9:
    unint64_t v37 = v21;
LABEL_16:
    swift_bridgeObjectRelease(v37);
    goto LABEL_17;
  }

  sub_2AF74((uint64_t)v2, (uint64_t)&v80);
  uint64_t v27 = v83;
  uint64_t v28 = v84;
  sub_CA38(&v80, v83);
  swift_bridgeObjectRetain();
  uint64_t v29 = sub_57B74(v19, v21);
  unint64_t v31 = v30;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_F5F8(v29, v31);
  id v33 = -[objc_class __imHexString](isa, "__imHexString");

  if (v33)
  {
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    uint64_t v36 = v35;
    swift_bridgeObjectRelease(v21);

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 16))(v34, v36, v27, v28);
    sub_12204(&v80);
LABEL_17:
    uint64_t v54 = v2[3];
    uint64_t v55 = v2[4];
    sub_CA38(v2, v54);
    (*(void (**)(uint64_t, uint64_t))(v55 + 48))(v54, v55);
    return;
  }

  __break(1u);
}

uint64_t IMDChatRCSGroupIdentity.converge(identity:)(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  sub_CA38(a1, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
  if (v5)
  {
    uint64_t v6 = v4;
    uint64_t v7 = v5;
    uint64_t v8 = a1[3];
    uint64_t v9 = a1[4];
    sub_CA38(a1, v8);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v9 + 8))(v14, v8, v9);
    sub_122D8((uint64_t)v14, (uint64_t)v18, &qword_76370);
    if (*((void *)&v18[0] + 1))
    {
      groupURI.scheme = (Swift::String)v18[0];
      groupURI.id = (Swift::String)v18[1];
      *(_OWORD *)&groupURI.attributes._rawValue = v19[0];
      *(Swift::String_optional *)((char *)&groupURI.alternateHandle + 1) = *(Swift::String_optional *)((char *)v19 + 9);
      v10._uint64_t countAndFlagsBits = v6;
      v10._object = v7;
      IMDChatRCSGroupIdentity.migrateToLatest(conversationID:groupURI:)(v10, &groupURI);
      sub_CA90( (uint64_t)v14,  (void (*)(void, void, void, void, void, void, void, void))sub_C9E8);
      return swift_bridgeObjectRelease(v7);
    }

    swift_bridgeObjectRelease(v7);
  }

  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_CA38(a1, v12);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v13 + 8))(v15, v12, v13);
  uint64_t result = sub_122D8((uint64_t)v15, (uint64_t)v16, &qword_76370);
  if (*((void *)&v16[0] + 1))
  {
    groupURI.scheme = (Swift::String)v16[0];
    groupURI.id = (Swift::String)v16[1];
    *(_OWORD *)&groupURI.attributes._rawValue = v17[0];
    *(Swift::String_optional *)((char *)&groupURI.alternateHandle + 1) = *(Swift::String_optional *)((char *)v17 + 9);
    IMDChatRCSGroupIdentity.migrateToLegacy(groupURI:)(&groupURI);
    return sub_CA90( (uint64_t)v15,  (void (*)(void, void, void, void, void, void, void, void))sub_C9E8);
  }

  return result;
}

Swift::Void __swiftcall IMDChatRCSGroupIdentity.reset()()
{
  uint64_t v1 = sub_5C28(&qword_762F8);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v27[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (sub_58184() == 1)
  {
    uint64_t v5 = v0[3];
    uint64_t v6 = v0[4];
    sub_CA38(v0, v5);
    (*(void (**)(void, void, uint64_t, uint64_t))(v6 + 16))(0LL, 0LL, v5, v6);
  }

  uint64_t v7 = sub_58184();
  if (v7 == 1)
  {
    sub_583D4(0LL, 0LL);
  }

  else if (!v7)
  {
    if (qword_76BD8 != -1) {
      swift_once(&qword_76BD8, sub_385D8);
    }
    uint64_t v8 = sub_6298(v1, (uint64_t)qword_77378);
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v8, v1);
    PrototypingSetting.wrappedValue.getter(v27, v1);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    if (LOBYTE(v27[0]) == 1)
    {
      uint64_t v9 = v0[3];
      uint64_t v10 = v0[4];
      sub_CA38(v0, v9);
      (*(void (**)(void, void, uint64_t, uint64_t))(v10 + 16))(0LL, 0LL, v9, v10);
    }
  }

  uint64_t v11 = v0[3];
  uint64_t v12 = v0[4];
  sub_CA38(v0, v11);
  uint64_t v13 = sub_5C28(&qword_76570);
  uint64_t inited = swift_initStackObject(v13, v28);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_5F530;
  v27[0] = 0xD000000000000017LL;
  v27[1] = 0x8000000000065EF0LL;
  AnyHashable.init<A>(_:)((void *)(inited + 32), v27, &type metadata for String, &protocol witness table for String);
  id v15 = [objc_allocWithZone(NSNull) init];
  *(void *)(inited + 96) = sub_57908();
  *(void *)(inited + 72) = v15;
  uint64_t v16 = (RCSServiceSession *)sub_123A4(inited);
  (*(void (**)(RCSServiceSession *, uint64_t, uint64_t))(v12 + 40))(v16, v11, v12);
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  uint64_t v24 = v0[3];
  uint64_t v25 = v0[4];
  sub_CA38(v0, v24);
  (*(void (**)(uint64_t, uint64_t))(v25 + 48))(v24, v25);
}

uint64_t sub_5A220@<X0>(uint64_t a1@<X8>)
{
  return sub_122D8((uint64_t)v3, a1, &qword_76370);
}

uint64_t sub_5A264(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = a1;
  unint64_t v6 = a1 >> 16;
  uint64_t v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000LL) == 0 || (a2 & 0x800000000000000LL) != 0)
  {
    uint64_t v13 = String.UTF16View.index(_:offsetBy:)(15LL, v6, a2);
    uint64_t v14 = v13 + (v7 << 16);
    unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    unint64_t v16 = v14 & 0xFFFFFFFFFFFF0000LL;
    if (!v7) {
      unint64_t v16 = v15;
    }
    return v16 | 4;
  }

  else
  {
    uint64_t v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15LL, v6);
    uint64_t v9 = v8 + (v7 << 16);
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    unint64_t v11 = v9 & 0xFFFFFFFFFFFF0000LL;
    if (!v7) {
      unint64_t v11 = v10;
    }
    return v11 | 8;
  }

unint64_t sub_5A2E0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v26, *(void *)(a2 + 40));
        swift_bridgeObjectRetain();
        String.hash(into:)(v26, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease(v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          unint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          unint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            _OWORD *v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          id v18 = (_OWORD *)(v17 + 16 * v3);
          id v19 = (_OWORD *)(v17 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *id v18 = *v19;
            int64_t v3 = v6;
          }
        }

unint64_t sub_5A4B4(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v10 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v27, *(void *)(a2 + 40));
        swift_bridgeObjectRetain();
        String.hash(into:)(v27, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease(v12);
        unint64_t v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(a2 + 48);
          unint64_t v16 = (_OWORD *)(v15 + 16 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1) {
            *unint64_t v16 = *v17;
          }
          uint64_t v18 = *(void *)(a2 + 56);
          id v19 = (_OWORD *)(v18 + 32 * v3);
          id v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v19 >= v20 + 2))
          {
            __int128 v9 = v20[1];
            _OWORD *v19 = *v20;
            v19[1] = v9;
            int64_t v3 = v6;
          }
        }

unint64_t sub_5A688(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        __int128 v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v26, *(void *)(a2 + 40));
        swift_bridgeObjectRetain();
        String.hash(into:)(v26, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease(v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          unint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            _OWORD *v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          uint64_t v18 = (void *)(v17 + 8 * v3);
          id v19 = (void *)(v17 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *uint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }

void sub_5A85C(unint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      uint64_t v97 = v4;
      uint64_t v98 = v2;
      unint64_t v95 = (v8 + 1) & v7;
      uint64_t v96 = v7;
      while (1)
      {
        int64_t v99 = v3;
        unint64_t v9 = v6 << 6;
        uint64_t v10 = *(void *)(v2 + 40);
        unint64_t v11 = *(void *)(v2 + 48) + (v6 << 6);
        uint64_t v12 = *(void *)v11;
        unint64_t v13 = *(RCSServiceSession **)(v11 + 8);
        uint64_t v14 = *(void *)(v11 + 16);
        uint64_t v15 = *(RCSServiceSession **)(v11 + 24);
        uint64_t v17 = *(RCSServiceSession **)(v11 + 32);
        uint64_t v16 = *(void *)(v11 + 40);
        uint64_t v18 = *(RCSServiceSession **)(v11 + 48);
        Swift::UInt v19 = *(unsigned __int8 *)(v11 + 56);
        Hasher.init(_seed:)(v100, v10);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n(v13, 2LL);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        String.hash(into:)(v100, v12, v13);
        swift_bridgeObjectRelease(v13, v20, v21, v22, v23, v24, v25, v26);
        swift_bridgeObjectRetain();
        String.hash(into:)(v100, v14, v15);
        swift_bridgeObjectRelease(v15, v27, v28, v29, v30, v31, v32, v33);
        swift_bridgeObjectRetain();
        sub_557A0((uint64_t)v100, (uint64_t)v17);
        swift_bridgeObjectRelease(v17, v34, v35, v36, v37, v38, v39, v40);
        if (v18)
        {
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          String.hash(into:)(v100, v16, v18);
          swift_bridgeObjectRelease(v18, v41, v42, v43, v44, v45, v46, v47);
        }

        else
        {
          Hasher._combine(_:)(0);
        }

        Hasher._combine(_:)(v19);
        Swift::Int v48 = Hasher._finalize()();
        swift_bridgeObjectRelease(v18, v49, v50, v51, v52, v53, v54, v55);
        swift_bridgeObjectRelease(v17, v56, v57, v58, v59, v60, v61, v62);
        swift_bridgeObjectRelease(v15, v63, v64, v65, v66, v67, v68, v69);
        swift_bridgeObjectRelease(v13, v70, v71, v72, v73, v74, v75, v76);
        uint64_t v4 = v97;
        unint64_t v77 = v48 & v96;
        uint64_t v2 = v98;
        unint64_t v3 = v99;
        if (v77 < v95) {
          goto LABEL_14;
        }
LABEL_15:
        uint64_t v78 = *(void *)(v98 + 48);
        uint64_t v79 = (__int128 *)(v78 + (v99 << 6));
        uint64_t v80 = (__int128 *)(v78 + v9);
        if (v99 << 6 != v9 || v79 >= v80 + 4)
        {
          __int128 v81 = *v80;
          __int128 v82 = v80[1];
          __int128 v83 = v80[3];
          v79[2] = v80[2];
          v79[3] = v83;
          *uint64_t v79 = v81;
          v79[1] = v82;
        }

        uint64_t v84 = *(void *)(v98 + 56);
        uint64_t v85 = type metadata accessor for TypingIndicator(0LL);
        uint64_t v86 = *(void *)(*(void *)(v85 - 8) + 72LL);
        unint64_t v87 = v84 + v86 * v99;
        uint64_t v88 = v84 + v86 * v6;
        if (v86 * v99 < (uint64_t)(v86 * v6) || v87 >= v88 + v86)
        {
          swift_arrayInitWithTakeFrontToBack(v87, v88, 1LL, v85);
        }

        else
        {
          unint64_t v3 = v6;
          if (v86 * v99 == v86 * v6) {
            goto LABEL_6;
          }
          swift_arrayInitWithTakeBackToFront(v87);
        }

        unint64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v96;
        if (((*(void *)(v97 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          goto LABEL_22;
        }
      }

      if (v77 < v95) {
        goto LABEL_6;
      }
LABEL_14:
      goto LABEL_15;
    }

uint64_t sub_5AB5C(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_5AB9C()
{
  __asm { BR              X11 }

void *sub_5ABFC@<X0>(uint64_t a1@<X8>)
{
  void *(*v3)(void **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  void *result;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  uint64_t v8 = v4;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  uint64_t v10 = BYTE4(a1);
  unint64_t v11 = BYTE5(a1);
  uint64_t v12 = BYTE6(a1);
  uint64_t result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2) {
    uint64_t result = v7;
  }
  unint64_t v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *uint64_t v1 = v8;
  v1[1] = v6;
  return result;
}

_BYTE *sub_5AE8C@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0LL;
LABEL_4:
    unint64_t v5 = 0xC000000000000000LL;
    goto LABEL_5;
  }

  if (v4 <= 14)
  {
    uint64_t result = (_BYTE *)sub_5B2A4(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }

  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (_BYTE *)sub_5B364((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000LL;
  }

  else
  {
    uint64_t result = (_BYTE *)sub_5B3DC((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000LL;
  }

void *sub_5AF00( void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t result = a1(&v6, a3, a4 - a3);
    if (v4) {
      return result;
    }
    return (void *)v6;
  }

  uint64_t result = a1(&v6, 0LL, 0LL);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

char *sub_5AF64(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }

  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }

  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

uint64_t sub_5B010@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v8 = *a3;
    uint64_t v7 = a3[1];
    swift_bridgeObjectRetain();
    uint64_t result = _StringGuts.copyUTF8(into:)(v5, a2, v8, v7);
    if ((v9 & 1) == 0)
    {
      uint64_t v10 = result;
      uint64_t result = swift_bridgeObjectRelease(v7);
      *a4 = 0LL;
      a4[1] = 0xE000000000000000LL;
      a4[2] = 15LL;
      a4[3] = v10;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t *sub_5B098(uint64_t *a1)
{
  uint64_t v2 = a1[8];
  uint64_t v3 = a1[9];
  uint64_t v4 = a1[10];
  uint64_t v5 = a1[11];
  uint64_t v6 = a1[12];
  uint64_t v7 = a1[13];
  uint64_t v8 = a1[14];
  sub_C9E8(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6]);
  sub_C9E8(v2, v3, v4, v5, v6, v7, v8);
  return a1;
}

uint64_t type metadata accessor for IMDChatRCSGroupSnapshot()
{
  return objc_opt_self(&OBJC_CLASS____TtC7CoreRCS23IMDChatRCSGroupSnapshot);
}

uint64_t destroy for IMDChatRCSGroupIdentity(void *a1)
{
  return sub_12204(a1);
}

uint64_t initializeWithCopy for IMDChatRCSGroupIdentity(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

void *assignWithCopy for IMDChatRCSGroupIdentity(void *a1, void *a2)
{
  return a1;
}

__n128 initializeWithTake for IMDChatRCSGroupIdentity(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  return result;
}

uint64_t assignWithTake for IMDChatRCSGroupIdentity(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for IMDChatRCSGroupIdentity(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IMDChatRCSGroupIdentity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IMDChatRCSGroupIdentity()
{
  return &type metadata for IMDChatRCSGroupIdentity;
}

uint64_t sub_5B2A4(_BYTE *__src, _BYTE *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0LL;
  }
  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }

  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_5B364(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = type metadata accessor for Data.RangeReference(0LL);
    uint64_t result = swift_allocObject(v6, 32LL, 7LL);
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = v3;
  }

  return result;
}

uint64_t sub_5B3DC(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if ((v3 & 0x80000000) == 0) {
    return v3 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

_BYTE *sub_5B45C(_BYTE *result, _BYTE *a2)
{
  if (result)
  {
    uint64_t v2 = a2 - result;
    if (a2 == result)
    {
      return 0LL;
    }

    else if (v2 <= 14)
    {
      return (_BYTE *)sub_5B2A4(result, a2);
    }

    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (_BYTE *)sub_5B364((uint64_t)result, (uint64_t)a2);
    }

    else
    {
      return (_BYTE *)sub_5B3DC((uint64_t)result, (uint64_t)a2);
    }
  }

  return result;
}

uint64_t sub_5B4C0(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0LL;
      }
    }

    else
    {
      uint64_t v2 = type metadata accessor for __DataStorage(0LL);
      swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
      __DataStorage.init(length:)(v1);
      if (v1 >= 0x7FFFFFFF)
      {
        uint64_t v3 = type metadata accessor for Data.RangeReference(0LL);
        uint64_t result = swift_allocObject(v3, 32LL, 7LL);
        *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
        *(void *)(result + 24) = v1;
      }

      else
      {
        return v1 << 32;
      }
    }
  }

  return result;
}

void *sub_5B55C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  char v5 = *(uint64_t **)(v3 + 16);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  uint64_t result = sub_5AF00((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_5B5CC, (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_5B5B8(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_F5F8(result, a2);
  }
  return result;
}

uint64_t sub_5B5CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_5B010(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

uint64_t *RCSActor.shared.unsafeMutableAddressor()
{
  if (qword_76BE0 != -1) {
    swift_once(&qword_76BE0, sub_5B630);
  }
  return &static RCSActor.shared;
}

uint64_t sub_5B630()
{
  uint64_t v0 = type metadata accessor for RCSActor();
  uint64_t v1 = swift_allocObject(v0, 112LL, 15LL);
  uint64_t result = swift_defaultActor_initialize(v1);
  static RCSActor.shared = v1;
  return result;
}

uint64_t static RCSActor.shared.getter()
{
  if (qword_76BE0 != -1) {
    swift_once(&qword_76BE0, sub_5B630);
  }
  return swift_retain(static RCSActor.shared);
}

uint64_t RCSActor.deinit()
{
  return v0;
}

uint64_t RCSActor.__deallocating_deinit()
{
  return swift_defaultActor_deallocate(v0);
}

unint64_t sub_5B6E4()
{
  unint64_t result = qword_77E68;
  if (!qword_77E68)
  {
    uint64_t v1 = type metadata accessor for RCSActor();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for RCSActor, v1);
    atomic_store(result, (unint64_t *)&qword_77E68);
  }

  return result;
}

uint64_t type metadata accessor for RCSActor()
{
  return objc_opt_self(&OBJC_CLASS____TtC7CoreRCS8RCSActor);
}

uint64_t sub_5B748(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for RCSActor();
  return static GlobalActor.sharedUnownedExecutor.getter(v3, a2);
}

void *sub_5B76C(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_5C28(&qword_77F30);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for TypingIndicator(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1LL) == 1)
  {
    sub_1231C(a1, &qword_77F30);
    sub_2994C((uint64_t)a2, (uint64_t)v8);
    sub_15F40(a2);
    return (void *)sub_1231C((uint64_t)v8, &qword_77F30);
  }

  else
  {
    sub_21A68(a1, (uint64_t)v11);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    id v24 = *v3;
    void *v3 = (RCSServiceSession *)0x8000000000000000LL;
    sub_29E14((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    uint64_t v15 = *v3;
    void *v3 = v24;
    swift_bridgeObjectRelease(v15, v16, v17, v18, v19, v20, v21, v22);
    return sub_15F40(a2);
  }

void *RCSTypingTracker.__allocating_init(delegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = (void *)swift_allocObject(v3, 144LL, 15LL);
  swift_defaultActor_initialize(v9);
  v9[17] = sub_21070((uint64_t)_swiftEmptyArrayStorage);
  v9[15] = a2;
  swift_unknownObjectUnownedInit(v9 + 14, a1);
  uint64_t v10 = swift_allocObject(&unk_73AA8, 24LL, 7LL);
  uint64_t v11 = swift_weakInit(v10 + 16, 0LL);
  static TaskPriority.userInitiated.getter(v11);
  uint64_t v12 = type metadata accessor for AsyncPersistentTimer(0LL);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  swift_retain(v10);
  uint64_t v13 = sub_4DD74((uint64_t)v8, (uint64_t)&unk_77F18, v10, 15.0);
  swift_unknownObjectRelease(a1);
  swift_release(v10);
  v9[16] = v13;
  swift_beginAccess(v10 + 16, v16, 1LL, 0LL);
  swift_weakAssign(v10 + 16, v9);
  swift_release(v10);
  return v9;
}

void *RCSTypingTracker.init(delegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_defaultActor_initialize(v3);
  v3[17] = sub_21070((uint64_t)_swiftEmptyArrayStorage);
  v3[15] = a2;
  swift_unknownObjectUnownedInit(v3 + 14, a1);
  uint64_t v9 = swift_allocObject(&unk_73AA8, 24LL, 7LL);
  uint64_t v10 = swift_weakInit(v9 + 16, 0LL);
  static TaskPriority.userInitiated.getter(v10);
  uint64_t v11 = type metadata accessor for AsyncPersistentTimer(0LL);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  swift_retain(v9);
  uint64_t v12 = sub_4DD74((uint64_t)v8, (uint64_t)&unk_77F20, v9, 15.0);
  swift_unknownObjectRelease(a1);
  swift_release(v9);
  v3[16] = v12;
  swift_beginAccess(v9 + 16, v15, 1LL, 0LL);
  swift_weakAssign(v9 + 16, v3);
  swift_release(v9);
  return v3;
}

uint64_t sub_5BB5C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_5BB80(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return swift_task_switch(sub_5BB98, 0LL, 0LL);
}

uint64_t sub_5BB98()
{
  uint64_t v1 = *(void *)(v0 + 40) + 16LL;
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  *(void *)(v0 + 48) = Strong;
  if (!Strong) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  uint64_t v3 = (void *)swift_task_alloc(dword_780D4);
  *(void *)(v0 + 56) = v3;
  void *v3 = v0;
  v3[1] = sub_5BC20;
  return sub_5BCCC();
}

uint64_t sub_5BC20()
{
  uint64_t v1 = *(void *)(*v0 + 48);
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 56));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_5BC70()
{
  uint64_t v2 = (void *)swift_task_alloc(dword_77F14);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_5DFE4;
  v2[5] = v0;
  return swift_task_switch(sub_5BB98, 0LL, 0LL);
}

uint64_t sub_5BCCC()
{
  v1[13] = v0;
  uint64_t v2 = type metadata accessor for TypingIndicator(0LL);
  v1[14] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[15] = v3;
  v1[16] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_5BD2C, v0, 0LL);
}

uint64_t sub_5BD2C()
{
  uint64_t v1 = *(void *)(v0 + 104);
  v46[0] = (RCSServiceSession *)_swiftEmptyArrayStorage;
  swift_beginAccess(v1 + 136, v0 + 80, 1LL, 0LL);
  uint64_t v2 = *(RCSServiceSession **)(v1 + 136);
  uint64_t v3 = swift_bridgeObjectRetain();
  sub_5CC64(v3, v46);
  uint64_t v5 = v4;
  swift_bridgeObjectRelease(v2, v6, v7, v8, v9, v10, v11, v12);
  uint64_t v13 = *(RCSServiceSession **)(v1 + 136);
  *(void *)(v1 + 136) = v5;
  swift_bridgeObjectRelease(v13, v14, v15, v16, v17, v18, v19, v20);
  id v28 = v46[0];
  *(RCSServiceSession **)(v0 + 136) = v46[0];
  uint64_t v29 = *(void *)v28[1].IMDTelephonyServiceSession_opaque;
  *(void *)(v0 + 144) = v29;
  if (v29)
  {
    uint64_t v30 = *(void *)(v0 + 120);
    id v31 = *(_OWORD **)(v0 + 128);
    uint64_t v32 = *(void *)(v0 + 104);
    uint64_t v33 = *(void *)(v0 + 112);
    int v34 = *(_DWORD *)(v30 + 80);
    *(_DWORD *)(v0 + 76) = v34;
    *(void *)(v0 + 152) = *(void *)(v30 + 72);
    *(void *)(v0 + 160) = 0LL;
    sub_51498( (uint64_t)&v28->IMDTelephonyServiceSession_opaque[(v34 + 32LL) & ~(unint64_t)v34],  (uint64_t)v31);
    uint64_t Strong = swift_unknownObjectUnownedLoadStrong(v32 + 112);
    *(void *)(v0 + 168) = Strong;
    id v36 = *(RCSServiceSession **)(v32 + 120);
    uint64_t ObjectType = (RCSServiceSession *)swift_getObjectType(Strong);
    __int128 v38 = v31[1];
    __int128 v39 = v31[2];
    __int128 v40 = v31[3];
    *(_OWORD *)(v0 + 57) = *(_OWORD *)((char *)v31 + 57);
    *(_OWORD *)(v0 + 32) = v39;
    *(_OWORD *)(v0 + 48) = v40;
    *(_OWORD *)(v0 + swift_weakDestroy(v0 + 16) = v38;
    SEL v41 = *(int **)v36->state;
    id v45 = (char *)v41 + *v41;
    id v42 = *(RCSServiceSession **)((char *)v31 + *(int *)(v33 + 32) + 24);
    id v43 = (void *)swift_task_alloc(v41[1]);
    *(void *)(v0 + 176) = v43;
    *id v43 = v0;
    v43[1] = sub_5BEE8;
    v46[13] = ObjectType;
    v46[14] = v36;
    v46[12] = v42;
    __asm { BR              X8 }
  }

  swift_bridgeObjectRelease(v28, v21, v22, v23, v24, v25, v26, v27);
  swift_task_dealloc(*(void *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_5BEE8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 168LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 104LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 176LL));
  swift_unknownObjectRelease(v1);
  return swift_task_switch(sub_5BF48, v2, 0LL);
}

uint64_t sub_5BF48()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 160) + 1LL;
  sub_5D7A4(*(void *)(v0 + 128));
  if (v2 != v1)
  {
    uint64_t v11 = *(void *)(v0 + 152);
    uint64_t v12 = *(void *)(v0 + 160) + 1LL;
    *(void *)(v0 + 160) = v12;
    uint64_t v13 = *(_OWORD **)(v0 + 128);
    uint64_t v14 = *(void *)(v0 + 104);
    sub_51498( *(void *)(v0 + 136)
    + ((*(unsigned __int8 *)(v0 + 76) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 76))
    + v11 * v12,
      (uint64_t)v13);
    uint64_t Strong = swift_unknownObjectUnownedLoadStrong(v14 + 112);
    *(void *)(v0 + 168) = Strong;
    uint64_t v16 = *(void *)(v14 + 120);
    swift_getObjectType(Strong);
    __int128 v17 = v13[1];
    __int128 v18 = v13[2];
    __int128 v19 = v13[3];
    *(_OWORD *)(v0 + 57) = *(_OWORD *)((char *)v13 + 57);
    *(_OWORD *)(v0 + 32) = v18;
    *(_OWORD *)(v0 + 48) = v19;
    *(_OWORD *)(v0 + swift_weakDestroy(v0 + 16) = v17;
    unsigned __int8 v20 = *(int **)(v16 + 8);
    unsigned __int8 v22 = (char *)v20 + *v20;
    id v21 = (void *)swift_task_alloc(v20[1]);
    *(void *)(v0 + 176) = v21;
    void *v21 = v0;
    v21[1] = sub_5BEE8;
    __asm { BR              X8 }
  }

  swift_bridgeObjectRelease(*(RCSServiceSession **)(v0 + 136), v3, v4, v5, v6, v7, v8, v9);
  swift_task_dealloc(*(void *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RCSTypingTracker.sender(_:finishedTypingInChat:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[7] = a3;
  v4[8] = v3;
  void v4[5] = a1;
  v4[6] = a2;
  uint64_t v5 = sub_5C28(&qword_77F30);
  void v4[9] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_5C124, v3, 0LL);
}

int64_t sub_5C124()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = (RCSServiceSession **)(*(void *)(v0 + 64) + 136LL);
  swift_beginAccess(v3, v0 + 16, 33LL, 0LL);
  swift_bridgeObjectRetain();
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v5 = *v3;
  id v51 = *v3;
  const char *v3 = (RCSServiceSession *)0x8000000000000000LL;
  unint64_t v13 = sub_14490(v2, v1);
  uint64_t v14 = *(void *)v5[1].IMDTelephonyServiceSession_opaque;
  BOOL v15 = (v6 & 1) == 0;
  int64_t result = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_16;
  }

  char v17 = (char)v6;
  if (*(void *)v5[1].state >= result)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_50E88();
      uint64_t v5 = v51;
    }
  }

  else
  {
    uint64_t v19 = *(void *)(v0 + 48);
    uint64_t v18 = *(void *)(v0 + 56);
    sub_4FBD8(result, isUniquelyReferenced_nonNull_native);
    uint64_t v5 = v51;
    unint64_t v20 = sub_14490(v19, v18);
    unint64_t v13 = v20;
  }

  id v21 = *v3;
  const char *v3 = v5;
  swift_bridgeObjectRelease(v21, v6, v7, v8, v9, v10, v11, v12);
  unsigned __int8 v22 = *v3;
  swift_bridgeObjectRetain();
  if ((v17 & 1) != 0) {
    goto LABEL_11;
  }
  uint64_t v31 = *(void *)(v0 + 48);
  uint64_t v30 = *(void *)(v0 + 56);
  int64_t result = sub_21188((RCSServiceSession *)_swiftEmptyArrayStorage);
  *(void *)&v22[4].IMDTelephonyServiceSession_opaque[8 * (v13 >> 6)] |= 1LL << v13;
  uint64_t v32 = (void *)(*(void *)v22[3].IMDTelephonyServiceSession_opaque + 16 * v13);
  *uint64_t v32 = v31;
  v32[1] = v30;
  *(void *)(*(void *)v22[3].state + 8 * v13) = result;
  uint64_t v33 = *(void *)v22[1].IMDTelephonyServiceSession_opaque;
  BOOL v34 = __OFADD__(v33, 1LL);
  uint64_t v35 = v33 + 1;
  if (v34)
  {
LABEL_16:
    __break(1u);
    return result;
  }

  *(void *)v22[1].IMDTelephonyServiceSession_opaque = v35;
  swift_bridgeObjectRetain();
LABEL_11:
  uint64_t v36 = *(void *)(v0 + 72);
  id v37 = *(RCSServiceSession **)(v0 + 56);
  uint64_t v38 = *(void *)(v0 + 40);
  swift_bridgeObjectRelease(v22, v23, v24, v25, v26, v27, v28, v29);
  sub_2994C(v38, v36);
  swift_endAccess(v0 + 16);
  swift_bridgeObjectRelease(v37, v39, v40, v41, v42, v43, v44, v45);
  uint64_t v46 = type metadata accessor for TypingIndicator(0LL);
  int v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 48LL))(v36, 1LL, v46);
  uint64_t v48 = *(void *)(v0 + 72);
  if (v47 == 1)
  {
    sub_1231C(*(void *)(v0 + 72), &qword_77F30);
    uint64_t v49 = 0LL;
    uint64_t v50 = 0LL;
  }

  else
  {
    uint64_t v49 = *(void *)(v48 + 80);
    uint64_t v50 = *(void *)(v48 + 88);
    swift_bridgeObjectRetain();
    sub_5D7A4(v48);
  }

  swift_task_dealloc(*(void *)(v0 + 72));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v49, v50);
}

uint64_t sub_5C36C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[15] = a3;
  v4[16] = v3;
  v4[13] = a1;
  v4[14] = a2;
  uint64_t v5 = sub_5C28(&qword_77F30);
  v4[17] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for TypingIndicator(0LL);
  v4[18] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[19] = v7;
  v4[20] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_5C3F4, v3, 0LL);
}

int64_t sub_5C3F4()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = (RCSServiceSession **)(*(void *)(v0 + 128) + 136LL);
  swift_beginAccess(v3, v0 + 80, 33LL, 0LL);
  swift_bridgeObjectRetain();
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v5 = *v3;
  id v59 = *v3;
  const char *v3 = (RCSServiceSession *)0x8000000000000000LL;
  unint64_t v13 = sub_14490(v2, v1);
  uint64_t v14 = *(void *)v5[1].IMDTelephonyServiceSession_opaque;
  BOOL v15 = (v6 & 1) == 0;
  int64_t result = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_15;
  }

  char v17 = (char)v6;
  if (*(void *)v5[1].state >= result)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_50E88();
      uint64_t v5 = v59;
    }
  }

  else
  {
    uint64_t v19 = *(void *)(v0 + 112);
    uint64_t v18 = *(void *)(v0 + 120);
    sub_4FBD8(result, isUniquelyReferenced_nonNull_native);
    uint64_t v5 = v59;
    unint64_t v20 = sub_14490(v19, v18);
    unint64_t v13 = v20;
  }

  id v21 = *v3;
  const char *v3 = v5;
  swift_bridgeObjectRelease(v21, v6, v7, v8, v9, v10, v11, v12);
  unsigned __int8 v22 = *v3;
  swift_bridgeObjectRetain();
  if ((v17 & 1) != 0) {
    goto LABEL_11;
  }
  uint64_t v31 = *(void *)(v0 + 112);
  uint64_t v30 = *(void *)(v0 + 120);
  int64_t result = sub_21188((RCSServiceSession *)_swiftEmptyArrayStorage);
  *(void *)&v22[4].IMDTelephonyServiceSession_opaque[8 * (v13 >> 6)] |= 1LL << v13;
  uint64_t v32 = (void *)(*(void *)v22[3].IMDTelephonyServiceSession_opaque + 16 * v13);
  *uint64_t v32 = v31;
  v32[1] = v30;
  *(void *)(*(void *)v22[3].state + 8 * v13) = result;
  uint64_t v33 = *(void *)v22[1].IMDTelephonyServiceSession_opaque;
  BOOL v34 = __OFADD__(v33, 1LL);
  uint64_t v35 = v33 + 1;
  if (v34)
  {
LABEL_15:
    __break(1u);
    return result;
  }

  *(void *)v22[1].IMDTelephonyServiceSession_opaque = v35;
  swift_bridgeObjectRetain();
LABEL_11:
  uint64_t v36 = *(void *)(v0 + 144);
  uint64_t v37 = *(void *)(v0 + 152);
  uint64_t v38 = *(void *)(v0 + 136);
  SEL v39 = *(RCSServiceSession **)(v0 + 120);
  uint64_t v40 = *(void *)(v0 + 104);
  swift_bridgeObjectRelease(v22, v23, v24, v25, v26, v27, v28, v29);
  sub_2994C(v40, v38);
  swift_endAccess(v0 + 80);
  swift_bridgeObjectRelease(v39, v41, v42, v43, v44, v45, v46, v47);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v38, 1LL, v36) != 1)
  {
    uint64_t v49 = *(_OWORD **)(v0 + 160);
    uint64_t v50 = *(void *)(v0 + 128);
    sub_21A68(*(void *)(v0 + 136), (uint64_t)v49);
    uint64_t Strong = swift_unknownObjectUnownedLoadStrong(v50 + 112);
    *(void *)(v0 + 168) = Strong;
    uint64_t v52 = *(void *)(v50 + 120);
    swift_getObjectType(Strong);
    __int128 v53 = v49[1];
    __int128 v54 = v49[2];
    __int128 v55 = v49[3];
    *(_OWORD *)(v0 + 57) = *(_OWORD *)((char *)v49 + 57);
    *(_OWORD *)(v0 + 32) = v54;
    *(_OWORD *)(v0 + 48) = v55;
    *(_OWORD *)(v0 + swift_weakDestroy(v0 + 16) = v53;
    SEL v56 = *(int **)(v52 + 8);
    id v58 = (char *)v56 + *v56;
    id v57 = (void *)swift_task_alloc(v56[1]);
    *(void *)(v0 + 176) = v57;
    void *v57 = v0;
    v57[1] = sub_5C700;
    __asm { BR              X8 }
  }

  sub_1231C(*(void *)(v0 + 136), &qword_77F30);
  uint64_t v48 = *(void *)(v0 + 136);
  swift_task_dealloc(*(void *)(v0 + 160));
  swift_task_dealloc(v48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_5C700()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 168LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 128LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 176LL));
  swift_unknownObjectRelease(v1);
  return swift_task_switch(sub_5C760, v2, 0LL);
}

uint64_t sub_5C760()
{
  uint64_t v1 = *(void *)(v0 + 136);
  swift_task_dealloc(*(void *)(v0 + 160));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RCSTypingTracker.sender(_:beganTypingInChat:subscription:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[11] = a7;
  v8[12] = v7;
  void v8[9] = a5;
  v8[10] = a6;
  v8[7] = a3;
  v8[8] = a4;
  void v8[5] = a1;
  v8[6] = a2;
  uint64_t v12 = sub_5C28(&qword_77F30);
  v8[13] = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  v8[14] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v8[15] = v14;
  v8[16] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for TypingIndicator(0LL);
  v8[17] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v8[18] = v16;
  v8[19] = swift_task_alloc((*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  char v17 = (void *)swift_task_alloc(dword_77F44);
  v8[20] = v17;
  *char v17 = v8;
  v17[1] = sub_5C88C;
  return sub_5C36C(a1, a2, a3);
}

uint64_t sub_5C88C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 96LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 160LL));
  return swift_task_switch(sub_5C8E4, v1, 0LL);
}

int64_t sub_5C8E4()
{
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v73 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v66 = *(void *)(v0 + 120);
  uint64_t v67 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v71 = *(void *)(v0 + 88);
  uint64_t v72 = *(void *)(v0 + 104);
  uint64_t v69 = *(void *)(v0 + 72);
  uint64_t v70 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v68 = *(void *)(v0 + 64);
  uint64_t v7 = *(__int128 **)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  id v8 = sub_5C68(v7);
  uint64_t v9 = UUID.init()(v8);
  uint64_t v10 = UUID.uuidString.getter(v9);
  uint64_t v12 = v11;
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 8))(v2, v67);
  static Date.now.getter(v13);
  *(void *)uint64_t v1 = v6;
  *(void *)(v1 + 8) = v5;
  __int128 v14 = *v7;
  __int128 v15 = v7[1];
  __int128 v16 = v7[2];
  *(_OWORD *)(v1 + 57) = *(__int128 *)((char *)v7 + 41);
  *(_OWORD *)(v1 + 32) = v15;
  *(_OWORD *)(v1 + 48) = v16;
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = v14;
  *(void *)(v1 + 80) = v10;
  *(void *)(v1 + 88) = v12;
  char v17 = (void *)(v1 + *(int *)(v3 + 32));
  *char v17 = v68;
  v17[1] = v69;
  _OWORD v17[2] = v70;
  void v17[3] = v71;
  sub_51498(v1, v72);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v73 + 56))(v72, 0LL, 1LL, v3);
  uint64_t v18 = (RCSServiceSession **)(v4 + 136);
  swift_beginAccess(v4 + 136, v0 + 16, 33LL, 0LL);
  swift_bridgeObjectRetain();
  sub_5C68(v7);
  swift_bridgeObjectRetain();
  uint64_t v19 = *(void *)(v4 + 136);
  swift_bridgeObjectRetain();
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
  id v21 = *(RCSServiceSession **)(v4 + 136);
  *(void *)(v4 + 136) = 0x8000000000000000LL;
  unint64_t v29 = sub_14490(v6, v5);
  uint64_t v30 = *(void *)v21[1].IMDTelephonyServiceSession_opaque;
  BOOL v31 = (v22 & 1) == 0;
  int64_t result = v30 + v31;
  if (__OFADD__(v30, v31))
  {
    __break(1u);
  }

  else
  {
    char v33 = (char)v22;
    if (*(void *)v21[1].state >= result)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_50E88();
      }
    }

    else
    {
      uint64_t v35 = *(void *)(v0 + 48);
      uint64_t v34 = *(void *)(v0 + 56);
      sub_4FBD8(result, isUniquelyReferenced_nonNull_native);
      unint64_t v36 = sub_14490(v35, v34);
      unint64_t v29 = v36;
    }

    uint64_t v37 = *v18;
    *uint64_t v18 = v21;
    swift_bridgeObjectRelease(v37, v22, v23, v24, v25, v26, v27, v28);
    uint64_t v38 = *v18;
    swift_bridgeObjectRetain();
    if ((v33 & 1) != 0) {
      goto LABEL_11;
    }
    uint64_t v47 = *(void *)(v0 + 48);
    uint64_t v46 = *(void *)(v0 + 56);
    int64_t result = sub_21188((RCSServiceSession *)_swiftEmptyArrayStorage);
    *(void *)&v38[4].IMDTelephonyServiceSession_opaque[8 * (v29 >> 6)] |= 1LL << v29;
    uint64_t v48 = (void *)(*(void *)v38[3].IMDTelephonyServiceSession_opaque + 16 * v29);
    *uint64_t v48 = v47;
    v48[1] = v46;
    *(void *)(*(void *)v38[3].state + 8 * v29) = result;
    uint64_t v49 = *(void *)v38[1].IMDTelephonyServiceSession_opaque;
    BOOL v50 = __OFADD__(v49, 1LL);
    uint64_t v51 = v49 + 1;
    if (!v50)
    {
      *(void *)v38[1].IMDTelephonyServiceSession_opaque = v51;
      swift_bridgeObjectRetain();
LABEL_11:
      uint64_t v52 = *(void *)(v0 + 152);
      uint64_t v53 = *(void *)(v0 + 128);
      uint64_t v54 = *(void *)(v0 + 104);
      __int128 v55 = *(RCSServiceSession **)(v0 + 56);
      SEL v56 = *(void **)(v0 + 40);
      swift_bridgeObjectRelease(v38, v39, v40, v41, v42, v43, v44, v45);
      sub_5B76C(v54, v56);
      swift_endAccess(v0 + 16);
      swift_bridgeObjectRelease(v55, v57, v58, v59, v60, v61, v62, v63);
      uint64_t v65 = *(void *)(v1 + 80);
      uint64_t v64 = *(void *)(v1 + 88);
      swift_bridgeObjectRetain();
      sub_5D7A4(v52);
      swift_task_dealloc(v52);
      swift_task_dealloc(v53);
      swift_task_dealloc(v54);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v65, v64);
    }
  }

  __break(1u);
  return result;
}

uint64_t RCSTypingTracker.deinit(uint64_t a1, uint64_t a2)
{
  return v2;
}

uint64_t RCSTypingTracker.__deallocating_deinit(uint64_t a1, uint64_t a2)
{
  return swift_defaultActor_deallocate(v2);
}

void sub_5CC64(uint64_t a1, RCSServiceSession **a2)
{
  uint64_t v4 = a1 + 64;
  uint64_t v3 = *(void *)(a1 + 64);
  id v62 = &_swiftEmptyDictionarySingleton;
  uint64_t v66 = &_swiftEmptyDictionarySingleton;
  uint64_t v5 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v5 < 64) {
    uint64_t v6 = ~(-1LL << -(char)v5);
  }
  else {
    uint64_t v6 = -1LL;
  }
  unint64_t v7 = v6 & v3;
  int64_t v63 = (unint64_t)(63 - v5) >> 6;
  swift_bridgeObjectRetain();
  int64_t v8 = 0LL;
  uint64_t v61 = v4;
  if (!v7) {
    goto LABEL_8;
  }
LABEL_5:
  unint64_t v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  unint64_t v10 = v9 | (v8 << 6);
  while (1)
  {
    uint64_t v11 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v12 = *v11;
    uint64_t v13 = (RCSServiceSession *)v11[1];
    __int128 v14 = *(RCSServiceSession **)(*(void *)(a1 + 56) + 8 * v10);
    swift_bridgeObjectRetain();
    uint64_t v15 = swift_bridgeObjectRetain();
    uint64_t v23 = (RCSServiceSession *)sub_5CF9C(v15, a2);
    if (*(void *)v23[1].IMDTelephonyServiceSession_opaque)
    {
      SEL v41 = v62;
      unint64_t v42 = v62[2];
      if (v62[3] <= v42)
      {
        sub_4FBD8(v42 + 1, 1LL);
        SEL v41 = v66;
      }

      id v62 = v41;
      Hasher.init(_seed:)(v65, v41[5]);
      String.hash(into:)(v65, v12, v13);
      Swift::Int v43 = Hasher._finalize()();
      uint64_t v51 = (char *)(v62 + 8);
      uint64_t v52 = -1LL << *((_BYTE *)v62 + 32);
      unint64_t v53 = v43 & ~v52;
      unint64_t v54 = v53 >> 6;
      if (((-1LL << v53) & ~v62[(v53 >> 6) + 8]) == 0)
      {
        char v56 = 0;
        unint64_t v57 = (unint64_t)(63 - v52) >> 6;
        uint64_t v4 = v61;
        while (++v54 != v57 || (v56 & 1) == 0)
        {
          BOOL v58 = v54 == v57;
          if (v54 == v57) {
            unint64_t v54 = 0LL;
          }
          v56 |= v58;
          uint64_t v59 = *(void *)&v51[8 * v54];
          if (v59 != -1)
          {
            unint64_t v55 = __clz(__rbit64(~v59)) + (v54 << 6);
            goto LABEL_37;
          }
        }

        goto LABEL_41;
      }

      unint64_t v55 = __clz(__rbit64((-1LL << v53) & ~v62[(v53 >> 6) + 8])) | v53 & 0x7FFFFFFFFFFFFFC0LL;
      uint64_t v4 = v61;
LABEL_37:
      *(void *)&v51[(v55 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v55;
      id v60 = (void *)(v62[6] + 16 * v55);
      *id v60 = v12;
      v60[1] = v13;
      *(void *)(v62[7] + 8 * v55) = v23;
      ++v62[2];
      swift_bridgeObjectRelease(v14, v44, v45, v46, v47, v48, v49, v50);
      if (v7) {
        goto LABEL_5;
      }
    }

    else
    {
      swift_bridgeObjectRelease(v14, v16, v17, v18, v19, v20, v21, v22);
      swift_bridgeObjectRelease(v13, v24, v25, v26, v27, v28, v29, v30);
      swift_bridgeObjectRelease(v23, v31, v32, v33, v34, v35, v36, v37);
      if (v7) {
        goto LABEL_5;
      }
    }

LABEL_8:
    int64_t v38 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }

    if (v38 >= v63) {
      goto LABEL_39;
    }
    unint64_t v39 = *(void *)(v4 + 8 * v38);
    if (!v39) {
      break;
    }
LABEL_20:
    unint64_t v7 = (v39 - 1) & v39;
    unint64_t v10 = __clz(__rbit64(v39)) + (v38 << 6);
    int64_t v8 = v38;
  }

  int64_t v40 = v8 + 2;
  if (v8 + 2 >= v63) {
    goto LABEL_39;
  }
  unint64_t v39 = *(void *)(v4 + 8 * v40);
  if (v39) {
    goto LABEL_19;
  }
  int64_t v40 = v8 + 3;
  if (v8 + 3 >= v63) {
    goto LABEL_39;
  }
  unint64_t v39 = *(void *)(v4 + 8 * v40);
  if (v39) {
    goto LABEL_19;
  }
  int64_t v40 = v8 + 4;
  if (v8 + 4 >= v63) {
    goto LABEL_39;
  }
  unint64_t v39 = *(void *)(v4 + 8 * v40);
  if (v39) {
    goto LABEL_19;
  }
  int64_t v40 = v8 + 5;
  if (v8 + 5 >= v63)
  {
LABEL_39:
    sub_122D0(a1);
    return;
  }

  unint64_t v39 = *(void *)(v4 + 8 * v40);
  if (v39)
  {
LABEL_19:
    int64_t v38 = v40;
    goto LABEL_20;
  }

  while (1)
  {
    int64_t v38 = v40 + 1;
    if (__OFADD__(v40, 1LL)) {
      break;
    }
    if (v38 >= v63) {
      goto LABEL_39;
    }
    unint64_t v39 = *(void *)(v4 + 8 * v38);
    ++v40;
    if (v39) {
      goto LABEL_20;
    }
  }

LABEL_42:
  __break(1u);
}

uint64_t sub_5CF9C(uint64_t a1, RCSServiceSession **a2)
{
  char v56 = a2;
  uint64_t v64 = type metadata accessor for TypingIndicator(0LL);
  uint64_t v68 = *(void *)(v64 - 8);
  uint64_t v3 = __chkstk_darwin(v64);
  uint64_t v60 = (uint64_t)v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v59 = (uint64_t)v53 - v6;
  __chkstk_darwin(v5);
  uint64_t v55 = (uint64_t)v53 - v7;
  uint64_t v63 = sub_5C28(&qword_780D8);
  uint64_t v8 = __chkstk_darwin(v63);
  unint64_t v54 = (char *)v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  id v62 = (_OWORD *)((char *)v53 - v11);
  __chkstk_darwin(v10);
  uint64_t v61 = (char *)v53 - v12;
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v58 = a1 + 64;
  uint64_t v72 = &_swiftEmptyDictionarySingleton;
  uint64_t v14 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v14 < 64) {
    uint64_t v15 = ~(-1LL << -(char)v14);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v13;
  v53[1] = -1LL << *(_BYTE *)(a1 + 32);
  int64_t v57 = (unint64_t)(63 - v14) >> 6;
  uint64_t v65 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0LL;
  uint64_t v18 = v63;
  uint64_t v19 = (uint64_t)v61;
  if (v16) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v21 = i + 1;
  if (!__OFADD__(i, 1LL))
  {
    if (v21 < v57)
    {
      unint64_t v22 = *(void *)(v58 + 8 * v21);
      int64_t v23 = i + 1;
      if (v22) {
        goto LABEL_23;
      }
      int64_t v23 = i + 2;
      if (i + 2 >= v57) {
        goto LABEL_33;
      }
      unint64_t v22 = *(void *)(v58 + 8 * v23);
      if (v22) {
        goto LABEL_23;
      }
      int64_t v23 = i + 3;
      if (i + 3 >= v57) {
        goto LABEL_33;
      }
      unint64_t v22 = *(void *)(v58 + 8 * v23);
      if (v22) {
        goto LABEL_23;
      }
      int64_t v23 = i + 4;
      if (i + 4 >= v57) {
        goto LABEL_33;
      }
      unint64_t v22 = *(void *)(v58 + 8 * v23);
      if (v22)
      {
LABEL_23:
        uint64_t v69 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v23 << 6);
        for (i = v23; ; unint64_t v20 = __clz(__rbit64(v16)) | (i << 6))
        {
          uint64_t v25 = *(void *)(v65 + 56);
          unint64_t v26 = *(void *)(v65 + 48) + (v20 << 6);
          uint64_t v27 = *(void *)v26;
          uint64_t v28 = *(void *)(v26 + 8);
          uint64_t v30 = *(void *)(v26 + 16);
          uint64_t v71 = *(void *)(v26 + 24);
          uint64_t v29 = v71;
          uint64_t v32 = *(void *)(v26 + 32);
          uint64_t v31 = *(void *)(v26 + 40);
          uint64_t v33 = *(void *)(v26 + 48);
          int v70 = *(unsigned __int8 *)(v26 + 56);
          uint64_t v67 = *(void *)(v68 + 72);
          sub_51498(v25 + v67 * v20, v19 + *(int *)(v18 + 48));
          *(void *)uint64_t v19 = v27;
          *(void *)(v19 + 8) = v28;
          *(void *)(v19 + swift_weakDestroy(v0 + 16) = v30;
          *(void *)(v19 + 24) = v29;
          *(void *)(v19 + 32) = v32;
          *(void *)(v19 + 40) = v31;
          *(void *)(v19 + 48) = v33;
          *(_BYTE *)(v19 + 56) = v70;
          id v34 = v62;
          sub_5DF9C(v19, (uint64_t)v62);
          uint64_t v35 = (uint64_t)v34 + *(int *)(v18 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v36 = swift_bridgeObjectRetain();
          if (fabs(Date.timeIntervalSinceNow.getter(v36)) <= 30.0)
          {
            uint64_t v44 = v55;
            sub_51498(v35, v55);
            uint64_t v45 = *(int *)(v18 + 48);
            uint64_t v46 = v54;
            uint64_t v47 = (uint64_t)&v54[v45];
            __int128 v49 = v34[1];
            v73[0] = *v34;
            __int128 v48 = v73[0];
            v73[1] = v49;
            v74[0] = v34[2];
            __int128 v50 = v74[0];
            *(_OWORD *)((char *)v74 + 9) = *(_OWORD *)((char *)v34 + 41);
            *(_OWORD *)(v54 + 41) = *(_OWORD *)((char *)v74 + 9);
            *uint64_t v46 = v48;
            v46[1] = v49;
            v46[2] = v50;
            sub_21A68(v35, (uint64_t)v46 + v45);
            sub_21A68(v44, v60);
            uint64_t v51 = (uint64_t)v72;
            unint64_t v52 = v72[2];
            if (v72[3] <= v52)
            {
              sub_4FEEC(v52 + 1, 1LL);
              uint64_t v51 = (uint64_t)v72;
            }

            sub_501B0((uint64_t *)v73, v60, v51);
            uint64_t result = sub_5D7A4(v47);
            unint64_t v16 = v69;
            if (!v69) {
              goto LABEL_8;
            }
          }

          else
          {
            uint64_t v37 = v67;
            sub_51498(v35, v59);
            int64_t v38 = v56;
            unint64_t v39 = *v56;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v56);
            *int64_t v38 = v39;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              unint64_t v39 = (RCSServiceSession *)sub_47388(0, *(void *)v39[1].IMDTelephonyServiceSession_opaque + 1LL, 1, v39);
              *char v56 = v39;
            }

            uint64_t v41 = v37;
            unint64_t v43 = *(void *)v39[1].IMDTelephonyServiceSession_opaque;
            unint64_t v42 = *(void *)v39[1].state;
            if (v43 >= v42 >> 1)
            {
              unint64_t v39 = (RCSServiceSession *)sub_47388(v42 > 1, v43 + 1, 1, v39);
              *char v56 = v39;
            }

            *(void *)v39[1].IMDTelephonyServiceSession_opaque = v43 + 1;
            sub_21A68( v59,  (uint64_t)&v39->IMDTelephonyServiceSession_opaque[((*(unsigned __int8 *)(v68 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80))
                                                             + v43 * v41]);
            uint64_t result = sub_1231C((uint64_t)v34, &qword_780D8);
            unint64_t v16 = v69;
            if (!v69) {
              goto LABEL_8;
            }
          }

unint64_t sub_5D528( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1LL << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t v7 = (void *)(a6[7] + 16 * result);
  *uint64_t v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

_OWORD *sub_5D578(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_121F4(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

unint64_t sub_5D5E0(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1LL << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t sub_5D628(unint64_t a1, _OWORD *a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  BOOL v7 = (_OWORD *)(a4[6] + (a1 << 6));
  __int128 v8 = a2[1];
  *BOOL v7 = *a2;
  v7[1] = v8;
  _OWORD v7[2] = a2[2];
  *(_OWORD *)((char *)v7 + 41) = *(_OWORD *)((char *)a2 + 41);
  uint64_t v9 = a4[7];
  uint64_t v10 = type metadata accessor for TypingIndicator(0LL);
  uint64_t result = sub_21A68(a3, v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * a1);
  uint64_t v12 = a4[2];
  BOOL v13 = __OFADD__(v12, 1LL);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a4[2] = v14;
  }
  return result;
}

uint64_t sub_5D6C4()
{
  uint64_t v2 = (void *)swift_task_alloc(dword_77F14);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_5D720;
  v2[5] = v0;
  return swift_task_switch(sub_5BB98, 0LL, 0LL);
}

uint64_t sub_5D720()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t type metadata accessor for TypingIndicator(uint64_t a1)
{
  uint64_t result = qword_78088;
  if (!qword_78088) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TypingIndicator);
  }
  return result;
}

uint64_t sub_5D7A4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TypingIndicator(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_5D7E0(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t type metadata accessor for RCSTypingTracker()
{
  return objc_opt_self(&OBJC_CLASS____TtC7CoreRCS16RCSTypingTracker);
}

void *sub_5D824(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v19 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v19);
  }

  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + swift_weakDestroy(v0 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v9;
    uint64_t v10 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v10;
    *(void *)(a1 + 64) = a2[8];
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    uint64_t v11 = a2[11];
    uint64_t v12 = *(int *)(a3 + 28);
    uint64_t v22 = (uint64_t)a2 + v12;
    uint64_t v23 = a1 + v12;
    *(void *)(a1 + 80) = a2[10];
    *(void *)(a1 + 88) = v11;
    uint64_t v13 = type metadata accessor for Date(0LL);
    int64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21(v23, v22, v13);
    uint64_t v14 = *(int *)(a3 + 32);
    uint64_t v15 = (void *)((char *)v4 + v14);
    unint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    void *v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = v16[3];
    void v15[2] = v16[2];
    v15[3] = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  return v4;
}

uint64_t sub_5D968(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  uint64_t v6 = (char *)a1 + *(int *)(a2 + 32);
  swift_bridgeObjectRelease(*((void *)v6 + 1));
  return swift_bridgeObjectRelease(*((void *)v6 + 3));
}

uint64_t sub_5D9F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  uint64_t v9 = *(void *)(a2 + 88);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v19 = a2 + v10;
  uint64_t v20 = a1 + v10;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v20, v19, v11);
  uint64_t v13 = *(int *)(a3 + 32);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = v15[3];
  void v14[2] = v15[2];
  v14[3] = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_5DB0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v11 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24LL))(v13, v14, v15);
  uint64_t v16 = *(int *)(a3 + 32);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = a2 + v16;
  *uint64_t v17 = *(void *)(a2 + v16);
  uint64_t v19 = *(void *)(a2 + v16 + 8);
  uint64_t v20 = *(void *)(a1 + v16 + 8);
  v17[1] = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v20);
  _OWORD v17[2] = *(void *)(v18 + 16);
  uint64_t v21 = v17[3];
  void v17[3] = *(void *)(v18 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v21);
  return a1;
}

_OWORD *sub_5DC7C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  __int128 v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  *(_OWORD *)((char *)a1 + 57) = *(_OWORD *)((char *)a2 + 57);
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  a1[5] = a2[5];
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v9, v10, v11);
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = (_OWORD *)((char *)a1 + v12);
  uint64_t v14 = (_OWORD *)((char *)a2 + v12);
  __int128 v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  return a1;
}

uint64_t sub_5DD14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = *(void *)(a2 + 64);
  uint64_t v14 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v13;
  swift_bridgeObjectRelease(v14);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  uint64_t v15 = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a1 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v15;
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = *(int *)(a3 + 28);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 40LL))(v18, v19, v20);
  uint64_t v21 = *(int *)(a3 + 32);
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  uint64_t v24 = v23[1];
  uint64_t v25 = *(void *)(a1 + v21 + 8);
  *uint64_t v22 = *v23;
  v22[1] = v24;
  swift_bridgeObjectRelease(v25);
  uint64_t v26 = v23[3];
  uint64_t v27 = v22[3];
  _OWORD v22[2] = v23[2];
  void v22[3] = v26;
  swift_bridgeObjectRelease(v27);
  return a1;
}

uint64_t sub_5DE0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_5DE18);
}

uint64_t sub_5DE18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 28),  a2,  v8);
  }

uint64_t sub_5DE94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_5DEA0);
}

uint64_t sub_5DEA0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 28),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_5DF14(uint64_t a1)
{
  v4[0] = &unk_61AB8;
  v4[1] = &unk_61AD0;
  _OWORD v4[2] = &unk_61AB8;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[3] = *(void *)(result - 8) + 64LL;
    v4[4] = &unk_61AE8;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_5DF9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_5C28(&qword_780D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}