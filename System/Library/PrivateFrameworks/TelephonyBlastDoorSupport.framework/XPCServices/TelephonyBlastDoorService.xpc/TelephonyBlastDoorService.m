int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  sub_100003C74(&qword_100008000);
  __chkstk_darwin();
  v142 = (char *)&v108 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v4 = type metadata accessor for IMRevokeUnpacker(0LL);
  v5 = *(void *)(v4 - 8);
  v140 = v4;
  v141 = v5;
  __chkstk_darwin();
  v139 = (char *)&v108 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v7 = type metadata accessor for RCSClientAuthenticityRequestUnpacker(0LL);
  v8 = *(void *)(v7 - 8);
  v137 = v7;
  v138 = v8;
  __chkstk_darwin();
  v136 = (char *)&v108 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v10 = type metadata accessor for RCSEnvelopeUnpacker(0LL);
  v11 = *(void *)(v10 - 8);
  v134 = v10;
  v135 = v11;
  __chkstk_darwin();
  v133 = (char *)&v108 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v13 = type metadata accessor for CPIMMessageUnpacker(0LL);
  v14 = *(void *)(v13 - 8);
  v131 = v13;
  v132 = v14;
  __chkstk_darwin();
  v130 = (char *)&v108 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v16 = type metadata accessor for ChatbotRootMessageUnpacker(0LL);
  v17 = *(void *)(v16 - 8);
  v128 = v16;
  v129 = v17;
  __chkstk_darwin();
  v127 = (char *)&v108 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v19 = type metadata accessor for ChatbotInfoUnpacker(0LL);
  v20 = *(void *)(v19 - 8);
  v125 = v19;
  v126 = v20;
  __chkstk_darwin();
  v124 = (char *)&v108 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v22 = type metadata accessor for IMCompositionIndicationUnpacker(0LL);
  v23 = *(void *)(v22 - 8);
  v122 = v22;
  v123 = v23;
  __chkstk_darwin();
  v121 = (char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v119 = type metadata accessor for SIPResourceListsUnpacker(0LL);
  v120 = *(void *)(v119 - 8);
  __chkstk_darwin();
  v118 = (char *)&v108 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v116 = type metadata accessor for SIPConferenceInfoUnpacker(0LL);
  v117 = *(void *)(v116 - 8);
  __chkstk_darwin();
  v115 = (char *)&v108 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v113 = type metadata accessor for RCSFileTransferInfoUnpacker(0LL);
  v114 = *(void *)(v113 - 8);
  __chkstk_darwin();
  v112 = (char *)&v108 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v110 = type metadata accessor for IMDispositionNotificationUnpacker(0LL);
  v111 = *(void *)(v110 - 8);
  __chkstk_darwin();
  v29 = (char *)&v108 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v108 = type metadata accessor for ProvisioningConfigurationUnpacker(0LL);
  v109 = *(void *)(v108 - 8);
  __chkstk_darwin();
  v31 = (char *)&v108 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v32 = type metadata accessor for CPMGroupManagementUnpacker(0LL);
  v33 = *(void *)(v32 - 8);
  __chkstk_darwin();
  v35 = (char *)&v108 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v36 = type metadata accessor for BootstrappingInfoUnpacker(0LL);
  v37 = *(void *)(v36 - 8);
  __chkstk_darwin();
  v39 = (char *)&v108 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for BlastDoorServer(0LL);
  qword_100008078 = static BlastDoorServer.service.getter();
  BootstrappingInfoUnpacker.init()();
  v40 = type metadata accessor for BootstrappingInfo(0LL);
  v41 = sub_100003CB4( &qword_100008008,  (uint64_t (*)(uint64_t))&type metadata accessor for BootstrappingInfoUnpacker,  (uint64_t)&protocol conformance descriptor for BootstrappingInfoUnpacker);
  BlastDoorServer.register<A, B>(unpacker:for:)(v39, v40, v36, v40, v41);
  v42 = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v39, v36);
  CPMGroupManagementUnpacker.init()(v42);
  v43 = type metadata accessor for CPMGroupManagement(0LL);
  v44 = sub_100003CB4( &qword_100008010,  (uint64_t (*)(uint64_t))&type metadata accessor for CPMGroupManagementUnpacker,  (uint64_t)&protocol conformance descriptor for CPMGroupManagementUnpacker);
  BlastDoorServer.register<A, B>(unpacker:for:)(v35, v43, v32, v43, v44);
  v45 = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v35, v32);
  ProvisioningConfigurationUnpacker.init()(v45);
  v46 = type metadata accessor for ProvisioningConfiguration(0LL);
  v47 = sub_100003CB4( &qword_100008018,  (uint64_t (*)(uint64_t))&type metadata accessor for ProvisioningConfigurationUnpacker,  (uint64_t)&protocol conformance descriptor for ProvisioningConfigurationUnpacker);
  v48 = v108;
  BlastDoorServer.register<A, B>(unpacker:for:)(v31, v46, v108, v46, v47);
  v49 = (*(uint64_t (**)(char *, uint64_t))(v109 + 8))(v31, v48);
  IMDispositionNotificationUnpacker.init()(v49);
  v50 = type metadata accessor for IMDispositionNotification(0LL);
  v51 = sub_100003CB4( &qword_100008020,  (uint64_t (*)(uint64_t))&type metadata accessor for IMDispositionNotificationUnpacker,  (uint64_t)&protocol conformance descriptor for IMDispositionNotificationUnpacker);
  v52 = v110;
  BlastDoorServer.register<A, B>(unpacker:for:)(v29, v50, v110, v50, v51);
  v53 = (*(uint64_t (**)(char *, uint64_t))(v111 + 8))(v29, v52);
  v54 = v112;
  RCSFileTransferInfoUnpacker.init()(v53);
  v55 = type metadata accessor for RCSFileTransferInfo(0LL);
  v56 = sub_100003CB4( &qword_100008028,  (uint64_t (*)(uint64_t))&type metadata accessor for RCSFileTransferInfoUnpacker,  (uint64_t)&protocol conformance descriptor for RCSFileTransferInfoUnpacker);
  v57 = v113;
  BlastDoorServer.register<A, B>(unpacker:for:)(v54, v55, v113, v55, v56);
  v58 = (*(uint64_t (**)(char *, uint64_t))(v114 + 8))(v54, v57);
  v59 = v115;
  SIPConferenceInfoUnpacker.init()(v58);
  v60 = type metadata accessor for SIPConferenceInfo(0LL);
  v61 = sub_100003CB4( &qword_100008030,  (uint64_t (*)(uint64_t))&type metadata accessor for SIPConferenceInfoUnpacker,  (uint64_t)&protocol conformance descriptor for SIPConferenceInfoUnpacker);
  v62 = v116;
  BlastDoorServer.register<A, B>(unpacker:for:)(v59, v60, v116, v60, v61);
  v63 = (*(uint64_t (**)(char *, uint64_t))(v117 + 8))(v59, v62);
  v64 = v118;
  SIPResourceListsUnpacker.init()(v63);
  v65 = type metadata accessor for SIPResourceLists(0LL);
  v66 = sub_100003CB4( &qword_100008038,  (uint64_t (*)(uint64_t))&type metadata accessor for SIPResourceListsUnpacker,  (uint64_t)&protocol conformance descriptor for SIPResourceListsUnpacker);
  v67 = v119;
  BlastDoorServer.register<A, B>(unpacker:for:)(v64, v65, v119, v65, v66);
  v68 = (*(uint64_t (**)(char *, uint64_t))(v120 + 8))(v64, v67);
  v69 = v121;
  IMCompositionIndicationUnpacker.init()(v68);
  v70 = type metadata accessor for IMCompositionIndication(0LL);
  v71 = sub_100003CB4( &qword_100008040,  (uint64_t (*)(uint64_t))&type metadata accessor for IMCompositionIndicationUnpacker,  (uint64_t)&protocol conformance descriptor for IMCompositionIndicationUnpacker);
  v72 = v122;
  BlastDoorServer.register<A, B>(unpacker:for:)(v69, v70, v122, v70, v71);
  v73 = (*(uint64_t (**)(char *, uint64_t))(v123 + 8))(v69, v72);
  v74 = v124;
  ChatbotInfoUnpacker.init()(v73);
  v75 = type metadata accessor for Chatbot.Info(0LL);
  v76 = sub_100003CB4( &qword_100008048,  (uint64_t (*)(uint64_t))&type metadata accessor for ChatbotInfoUnpacker,  (uint64_t)&protocol conformance descriptor for ChatbotInfoUnpacker);
  v77 = v125;
  BlastDoorServer.register<A, B>(unpacker:for:)(v74, v75, v125, v75, v76);
  v78 = (*(uint64_t (**)(char *, uint64_t))(v126 + 8))(v74, v77);
  v79 = v127;
  ChatbotRootMessageUnpacker.init()(v78);
  v80 = type metadata accessor for Chatbot.RootMessage(0LL);
  v81 = sub_100003CB4( &qword_100008050,  (uint64_t (*)(uint64_t))&type metadata accessor for ChatbotRootMessageUnpacker,  (uint64_t)&protocol conformance descriptor for ChatbotRootMessageUnpacker);
  v82 = v128;
  BlastDoorServer.register<A, B>(unpacker:for:)(v79, v80, v128, v80, v81);
  v83 = (*(uint64_t (**)(char *, uint64_t))(v129 + 8))(v79, v82);
  v84 = v130;
  CPIMMessageUnpacker.init()(v83);
  v85 = type metadata accessor for CPIMMessage(0LL);
  v86 = sub_100003CB4( &qword_100008058,  (uint64_t (*)(uint64_t))&type metadata accessor for CPIMMessageUnpacker,  (uint64_t)&protocol conformance descriptor for CPIMMessageUnpacker);
  v87 = v131;
  BlastDoorServer.register<A, B>(unpacker:for:)(v84, v85, v131, v85, v86);
  v88 = (*(uint64_t (**)(char *, uint64_t))(v132 + 8))(v84, v87);
  v89 = v133;
  RCSEnvelopeUnpacker.init()(v88);
  v90 = type metadata accessor for RCSEnvelope(0LL);
  v91 = sub_100003CB4( &qword_100008060,  (uint64_t (*)(uint64_t))&type metadata accessor for RCSEnvelopeUnpacker,  (uint64_t)&protocol conformance descriptor for RCSEnvelopeUnpacker);
  v92 = v134;
  BlastDoorServer.register<A, B>(unpacker:for:)(v89, v90, v134, v90, v91);
  v93 = (*(uint64_t (**)(char *, uint64_t))(v135 + 8))(v89, v92);
  v94 = v136;
  RCSClientAuthenticityRequestUnpacker.init()(v93);
  v95 = type metadata accessor for RCSClientAuthenticityRequest(0LL);
  v96 = sub_100003CB4( &qword_100008068,  (uint64_t (*)(uint64_t))&type metadata accessor for RCSClientAuthenticityRequestUnpacker,  (uint64_t)&protocol conformance descriptor for RCSClientAuthenticityRequestUnpacker);
  v97 = v137;
  BlastDoorServer.register<A, B>(unpacker:for:)(v94, v95, v137, v95, v96);
  v98 = (*(uint64_t (**)(char *, uint64_t))(v138 + 8))(v94, v97);
  v99 = v139;
  IMRevokeUnpacker.init()(v98);
  v100 = type metadata accessor for IMRevoke(0LL);
  v101 = sub_100003CB4( &qword_100008070,  (uint64_t (*)(uint64_t))&type metadata accessor for IMRevokeUnpacker,  (uint64_t)&protocol conformance descriptor for IMRevokeUnpacker);
  v102 = v140;
  BlastDoorServer.register<A, B>(unpacker:for:)(v99, v100, v140, v100, v101);
  (*(void (**)(char *, uint64_t))(v141 + 8))(v99, v102);
  v103 = enum case for SandboxID.blastdoor(_:);
  v104 = type metadata accessor for SandboxID(0LL);
  v105 = *(void *)(v104 - 8);
  v106 = (uint64_t)v142;
  (*(void (**)(char *, uint64_t, uint64_t))(v105 + 104))(v142, v103, v104);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v105 + 56))(v106, 0LL, 1LL, v104);
  dispatch thunk of BlastDoorServer.resume(sandboxID:)(v106);
  sub_100003CF4(v106);
  return 0;
}

uint64_t sub_100003C74(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_100003CB4(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100003CF4(uint64_t a1)
{
  uint64_t v2 = sub_100003C74(&qword_100008000);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}