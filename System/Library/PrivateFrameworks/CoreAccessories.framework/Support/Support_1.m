LABEL_117:
  v5 = platform_vehicle_vehicleStatusChanged(*(void *)(v107 + 8), Mutable);
LABEL_118:
  if (Mutable) {
LABEL_119:
  }
    CFRelease(Mutable);
  return v5;
}

void *logObjectForModule_17()
{
  if (gLogObjects && gNumLogObjects >= 41) {
    return *(void **)(gLogObjects + 320);
  }
  v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

uint64_t iap2_vehicle_startStatusUpdatesHandler(uint64_t result)
{
  if (!result) {
    return result;
  }
  v1 = (uint64_t *)result;
  if (!*(void *)result) {
    return 0LL;
  }
  if (gLogObjects && gNumLogObjects >= 41)
  {
    v2 = *(os_log_s **)(gLogObjects + 320);
  }

  else
  {
    v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = v1[1];
    *(_DWORD *)buf = 138412290;
    uint64_t v27 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Starting vehicle status updates for endpoint %@!",  buf,  0xCu);
  }

  result = iap2_feature_getFeature((uint64_t)v1, 0x14u);
  if (result)
  {
    uint64_t v4 = result;
    if (*(_BYTE *)(result + 137))
    {
      if (!*(_BYTE *)(result + 138))
      {
        *(_BYTE *)(result + 138) = 1;
        iAP2MsgInit((uint64_t)(v1 + 15), 41216, v1[24], 0xFFFF, 0LL, 0LL);
        v5 = *(const __CFArray **)(v4 + 16);
        if (v5)
        {
          CFIndex Count = CFArrayGetCount(v5);
          buf[0] = 0;
          CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, buf);
          buf[0] = 1;
          CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, buf);
          buf[0] = 2;
          CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, buf);
          buf[0] = 3;
          CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, buf);
          v28.location = 0LL;
          v28.length = Count;
          BOOL v25 = CFArrayContainsValue(*(CFArrayRef *)(v4 + 16), v28, v7) != 0;
          v29.location = 0LL;
          v29.length = Count;
          BOOL v11 = CFArrayContainsValue(*(CFArrayRef *)(v4 + 16), v29, v8) != 0;
          v30.location = 0LL;
          v30.length = Count;
          BOOL v12 = CFArrayContainsValue(*(CFArrayRef *)(v4 + 16), v30, v9) != 0;
          v31.location = 0LL;
          v31.length = Count;
          BOOL v13 = CFArrayContainsValue(*(CFArrayRef *)(v4 + 16), v31, v10) != 0;
          if (v7) {
            CFRelease(v7);
          }
          if (v8) {
            CFRelease(v8);
          }
          if (v9) {
            CFRelease(v9);
          }
          if (v10) {
            CFRelease(v10);
          }
          BOOL v14 = v25;
        }

        else
        {
          BOOL v14 = 0;
          BOOL v11 = 0;
          BOOL v12 = 0;
          BOOL v13 = 0;
        }

        if (*(_BYTE *)(v4 + 120)) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0LL, 3);
        }
        if (*(_BYTE *)(v4 + 121)) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0LL, 4);
        }
        if (*(_BYTE *)(v4 + 122)) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0LL, 6);
        }
        if (*(_BYTE *)(v4 + 123)) {
          BOOL v15 = v14;
        }
        else {
          BOOL v15 = 0;
        }
        if (v15) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0LL, 9);
        }
        if (*(_BYTE *)(v4 + 124)) {
          BOOL v16 = v11;
        }
        else {
          BOOL v16 = 0;
        }
        if (v16) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0LL, 10);
        }
        if (*(_BYTE *)(v4 + 125)) {
          BOOL v17 = v12;
        }
        else {
          BOOL v17 = 0;
        }
        if (v17) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0LL, 11);
        }
        if (*(_BYTE *)(v4 + 126)) {
          BOOL v18 = v13;
        }
        else {
          BOOL v18 = 0;
        }
        if (v18) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0LL, 12);
        }
        if (*(_BYTE *)(v4 + 131)) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0LL, 17);
        }
        if (*(_BYTE *)(v4 + 127)) {
          BOOL v19 = v14;
        }
        else {
          BOOL v19 = 0;
        }
        if (v19) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0LL, 13);
        }
        if (*(_BYTE *)(v4 + 128)) {
          BOOL v20 = v11;
        }
        else {
          BOOL v20 = 0;
        }
        if (v20) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0LL, 14);
        }
        if (*(_BYTE *)(v4 + 129)) {
          BOOL v21 = v12;
        }
        else {
          BOOL v21 = 0;
        }
        if (v21) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0LL, 15);
        }
        if (*(_BYTE *)(v4 + 130)) {
          BOOL v22 = v13;
        }
        else {
          BOOL v22 = 0;
        }
        if (v22) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0LL, 16);
        }
        if (*(_BYTE *)(v4 + 132)) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0LL, 18);
        }
        if (*(_BYTE *)(v4 + 133)) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0LL, 19);
        }
        if (*(_BYTE *)(v4 + 134)) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0LL, 20);
        }
        if (*(_BYTE *)(v4 + 135)) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0LL, 21);
        }
        if (*(_BYTE *)(v4 + 136)) {
          iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0LL, 30);
        }
        return iap2_sessionControl_sendOutgoingMessage(v1, (uint64_t)(v1 + 15));
      }

      v24 = (os_log_s *)logObjectForModule_17();
      result = os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
      if (!(_DWORD)result) {
        return result;
      }
      iap2_vehicle_startStatusUpdatesHandler_cold_2();
    }

    else
    {
      v23 = (os_log_s *)logObjectForModule_17();
      result = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
      if (!(_DWORD)result) {
        return result;
      }
      iap2_vehicle_startStatusUpdatesHandler_cold_1();
    }

    return 0LL;
  }

  return result;
}

double _createFeature_11(uint64_t a1)
{
  if (a1)
  {
    v1 = (char *)calloc(1uLL, 0x90uLL);
    if (v1)
    {
      *(_WORD *)v1 = 0;
      v1[96] = 0;
      *((_WORD *)v1 + 52) = 0;
      *((void *)v1 + 2) = 0LL;
      *((void *)v1 + 3) = 0LL;
      *((void *)v1 + 1) = 0LL;
      double result = 0.0;
      *(_OWORD *)(v1 + 40) = 0u;
      *(_OWORD *)(v1 + 56) = 0u;
      *(_OWORD *)(v1 + 72) = 0u;
      *((void *)v1 + 15) = 0LL;
      *((void *)v1 + 16) = 0LL;
      *((void *)v1 + 14) = 0LL;
      *((_WORD *)v1 + 68) = 0;
    }
  }

  return result;
}

uint64_t _destroyFeature_11(uint64_t result)
{
  if (result)
  {
    v1 = (void **)result;
    v2 = *(void **)result;
    if (*(void *)result)
    {
      uint64_t v3 = (const void *)v2[1];
      if (v3)
      {
        CFRelease(v3);
        v2[1] = 0LL;
      }

      uint64_t v4 = (const void *)v2[2];
      if (v4)
      {
        CFRelease(v4);
        v2[2] = 0LL;
      }

      v5 = (const void *)v2[3];
      if (v5)
      {
        CFRelease(v5);
        v2[3] = 0LL;
      }

      v6 = (const void *)v2[4];
      if (v6)
      {
        CFRelease(v6);
        v2[4] = 0LL;
      }

      CFNumberRef v7 = (const void *)v2[14];
      if (v7)
      {
        CFRelease(v7);
        v2[14] = 0LL;
      }

      CFNumberRef v8 = (const void *)v2[5];
      if (v8)
      {
        CFRelease(v8);
        v2[5] = 0LL;
      }

      CFNumberRef v9 = (const void *)v2[6];
      if (v9)
      {
        CFRelease(v9);
        v2[6] = 0LL;
      }

      if (*v1)
      {
        free(*v1);
        char *v1 = 0LL;
      }

      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t _checkIdentificationInfo_9(uint64_t a1)
{
  if (!iap2_feature_getFeature(a1, 0x14u)) {
    iap2_features_createFeature(a1, 0x14u);
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 0x14u);
  if (!Feature) {
    return 17LL;
  }
  uint64_t v3 = Feature;
  char v8 = 0;
  uint64_t v4 = iap2_identification_checkIdentificationMsgIDs( a1,  (uint64_t)&_checkIdentificationInfo_kMsgVehicleStatusList,  3u,  &v8);
  uint64_t v5 = v4;
  if (!v8 || (_DWORD)v4)
  {
    if (!v8 && *(_BYTE *)(v3 + 137))
    {
      uint64_t v5 = 14LL;
      iap2_identification_addRejectGroup(a1, 21, *(unsigned __int16 *)(v3 + 104), 0xEu);
    }
  }

  else if (*(_BYTE *)(v3 + 137))
  {
    iap2_features_createFeature(a1, 0x14u);
    iap2_identification_setIdentifiedForFeature(a1, 0x14u);
    return 0LL;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v5 = 14LL;
    do
    {
      iap2_identification_rejectMsgID( a1,  *(unsigned __int16 *)((char *)&_checkIdentificationInfo_kMsgVehicleStatusList + v6),  *(_DWORD *)((char *)&_checkIdentificationInfo_kMsgVehicleStatusList + v6 + 4),  0xEu);
      v6 += 12LL;
    }

    while (v6 != 36);
  }

  return v5;
}

void _handleIdentificationRejection_1(uint64_t a1)
{
  uint64_t Feature = iap2_feature_getFeature(a1, 0x14u);
  if (Feature)
  {
    v2 = (void *)Feature;
    uint64_t v3 = *(const void **)(Feature + 8);
    if (v3)
    {
      CFRelease(v3);
      v2[1] = 0LL;
    }

    uint64_t v4 = (const void *)v2[2];
    if (v4)
    {
      CFRelease(v4);
      v2[2] = 0LL;
    }

    uint64_t v5 = (const void *)v2[3];
    if (v5)
    {
      CFRelease(v5);
      v2[3] = 0LL;
    }

    uint64_t v6 = (const void *)v2[4];
    if (v6)
    {
      CFRelease(v6);
      v2[4] = 0LL;
    }

    CFNumberRef v7 = (const void *)v2[14];
    if (v7)
    {
      CFRelease(v7);
      v2[14] = 0LL;
    }

    char v8 = (const void *)v2[5];
    if (v8)
    {
      CFRelease(v8);
      v2[5] = 0LL;
    }

    CFNumberRef v9 = (const void *)v2[6];
    if (v9)
    {
      CFRelease(v9);
      v2[6] = 0LL;
    }
  }

uint64_t _parseIdentificationParams_2(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t Feature = 0LL;
  BOOL v97 = 0;
  if (!a1 || !a2 || !a3) {
    return Feature;
  }
  uint64_t v6 = a1;
  if (!iap2_feature_getFeature(a1, 0x14u)) {
    iap2_features_createFeature(v6, 0x14u);
  }
  uint64_t Feature = iap2_feature_getFeature(v6, 0x14u);
  if (!Feature) {
    return Feature;
  }
  int ParamID = iAP2MsgGetParamID((uint64_t)a3);
  int v8 = ParamID;
  if (ParamID != 21)
  {
    if (ParamID != 20)
    {
      if (gLogObjects && gNumLogObjects >= 41)
      {
        v36 = *(os_log_s **)(gLogObjects + 320);
      }

      else
      {
        v36 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
        _parseIdentificationParams_cold_1_2(a2);
      }
      uint64_t Feature = 0LL;
      unsigned __int16 v37 = 0;
      unsigned int v27 = 10;
      goto LABEL_206;
    }

    unint64_t FirstParam = iAP2MsgGetFirstParam(a2, a3);
    if (!FirstParam)
    {
      uint64_t Feature = 0LL;
      unsigned __int16 v37 = 0;
      unsigned int v27 = 2;
LABEL_206:
      iap2_identification_addRejectGroup(v6, v8, v37, v27);
      return Feature;
    }

    NextParam = (unsigned __int16 *)FirstParam;
    uint64_t v64 = Feature;
    uint64_t v66 = v6;
    uint64_t v82 = 0LL;
    uint64_t v74 = 0LL;
    uint64_t v76 = 0LL;
    uint64_t v70 = 0LL;
    uint64_t v72 = 0LL;
    uint64_t v68 = 0LL;
    CFStringRef v90 = 0LL;
    CFMutableArrayRef v92 = 0LL;
    CFStringRef v86 = 0LL;
    CFStringRef v88 = 0LL;
    CFMutableArrayRef Mutable = 0LL;
    CFStringRef v85 = 0LL;
    unsigned __int16 DataAsU16 = 0;
    do
    {
      int v11 = iAP2MsgGetParamID((uint64_t)NextParam);
      uint64_t v12 = gLogObjects;
      int v13 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 41)
      {
        BOOL v14 = *(os_log_s **)(gLogObjects + 320);
      }

      else
      {
        BOOL v14 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)v99 = v12;
          *(_WORD *)&v99[8] = 1024;
          v100[0] = v13;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          BOOL v14 = (os_log_s *)&_os_log_default;
        }
      }

      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
        _parseIdentificationParams_cold_4(v101, v102, v14);
      }
      switch(v11)
      {
        case 0:
          unsigned __int16 DataAsU16 = iAP2MsgGetDataAsU16(NextParam, &v97);
          LODWORD(v82) = !v97 | v82;
          break;
        case 1:
          if (v85) {
            CFRelease(v85);
          }
          CFStringRef v85 = iAP2MsgCopyDataAsCFString(NextParam, &v97);
          HIDWORD(v82) |= !v97;
          break;
        case 2:
          if (!Mutable) {
            CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
          }
          int valuePtr = -1431655766;
          unsigned int DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v97);
          int valuePtr = DataAsU8;
          if (!v97)
          {
            if (DataAsU8 <= 3)
            {
              CFNumberRef v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
              BOOL v17 = Mutable;
              goto LABEL_41;
            }

            uint64_t v22 = gLogObjects;
            int v23 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 41)
            {
              v24 = *(os_log_s **)(gLogObjects + 320);
            }

            else
            {
              v24 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)v99 = v22;
                *(_WORD *)&v99[8] = 1024;
                v100[0] = v23;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                v24 = (os_log_s *)&_os_log_default;
              }
            }

            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
              _parseIdentificationParams_cold_3_0(&v94, v95, v24);
            }
          }

          break;
        case 6:
          if (v86) {
            CFRelease(v86);
          }
          CFStringRef v86 = iAP2MsgCopyDataAsCFString(NextParam, &v97);
          break;
        case 8:
          if (v88) {
            CFRelease(v88);
          }
          CFStringRef v88 = iAP2MsgCopyDataAsCFString(NextParam, &v97);
          break;
        case 10:
          if (v90) {
            CFRelease(v90);
          }
          CFStringRef v90 = iAP2MsgCopyDataAsCFString(NextParam, &v97);
          break;
        case 11:
          if (!v92) {
            CFMutableArrayRef v92 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
          }
          *(_DWORD *)buf = -1431655766;
          *(_DWORD *)buf = iAP2MsgGetDataAsU8(NextParam, &v97);
          if (!v97)
          {
            CFNumberRef v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, buf);
            BOOL v17 = v92;
LABEL_41:
            CFArrayAppendValue(v17, v16);
            CFRelease(v16);
          }

          break;
        case 12:
          LODWORD(v68) = iAP2MsgGetDataAsU32(NextParam, &v97);
          break;
        case 13:
          HIDWORD(v68) = iAP2MsgGetDataAsU32(NextParam, &v97);
          break;
        case 14:
          LODWORD(v70) = iAP2MsgGetDataAsU32(NextParam, &v97);
          break;
        case 15:
          LODWORD(v72) = iAP2MsgGetDataAsU32(NextParam, &v97);
          break;
        case 16:
          HIDWORD(v72) = iAP2MsgGetDataAsU32(NextParam, &v97);
          break;
        case 17:
          LODWORD(v74) = iAP2MsgGetDataAsU32(NextParam, &v97);
          break;
        case 18:
          HIDWORD(v74) = iAP2MsgGetDataAsU32(NextParam, &v97);
          break;
        case 19:
          LODWORD(v76) = iAP2MsgGetDataAsU32(NextParam, &v97);
          HIDWORD(v70) = iAP2MsgGetDataAsU32(NextParam, &v97);
          break;
        case 20:
          HIDWORD(v76) = iAP2MsgGetDataAsU32(NextParam, &v97);
          break;
        default:
          uint64_t v18 = gLogObjects;
          int v19 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 41)
          {
            BOOL v20 = *(os_log_s **)(gLogObjects + 320);
          }

          else
          {
            BOOL v20 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)v99 = v18;
              *(_WORD *)&v99[8] = 1024;
              v100[0] = v19;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              BOOL v20 = (os_log_s *)&_os_log_default;
            }
          }

          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            int MsgID = iAP2MsgGetMsgID(a2);
            *(_DWORD *)buf = 67109632;
            *(_DWORD *)v99 = v11;
            *(_WORD *)&v99[4] = 1024;
            *(_DWORD *)&v99[6] = 20;
            LOWORD(v100[0]) = 1024;
            *(_DWORD *)((char *)v100 + 2) = MsgID;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "Unknown Subparam ID: %d in Param ID: %d for Msg ID: 0x%04X - ignoring subparam",  buf,  0x14u);
          }

          break;
      }

      NextParam = iAP2MsgGetNextParam(a2, a3, NextParam);
    }

    while (NextParam);
    if ((v82 & HIDWORD(v82) & 1) != 0)
    {
      unsigned __int16 v37 = DataAsU16;
      *(_WORD *)uint64_t v64 = DataAsU16;
      v38 = *(const void **)(v64 + 8);
      v39 = v92;
      CFMutableArrayRef v40 = Mutable;
      if (v38)
      {
        CFRelease(v38);
        *(void *)(v64 + 8) = 0LL;
      }

      if (v85) {
        *(void *)(v64 + 8) = CFRetain(v85);
      }
      v41 = *(const void **)(v64 + 16);
      if (v41)
      {
        CFRelease(v41);
        *(void *)(v64 + 16) = 0LL;
      }

      if (Mutable) {
        *(void *)(v64 + 16) = CFRetain(Mutable);
      }
      v42 = *(const void **)(v64 + 24);
      if (v42)
      {
        CFRelease(v42);
        *(void *)(v64 + 24) = 0LL;
      }

      if (v86) {
        *(void *)(v64 + 24) = CFRetain(v86);
      }
      v43 = *(const void **)(v64 + 32);
      if (v43)
      {
        CFRelease(v43);
        *(void *)(v64 + 32) = 0LL;
      }

      if (v88) {
        *(void *)(v64 + 32) = CFRetain(v88);
      }
      v44 = *(const void **)(v64 + 40);
      if (v44)
      {
        CFRelease(v44);
        *(void *)(v64 + 40) = 0LL;
      }

      if (v90) {
        *(void *)(v64 + 40) = CFRetain(v90);
      }
      v45 = *(const void **)(v64 + 48);
      if (v45)
      {
        CFRelease(v45);
        *(void *)(v64 + 48) = 0LL;
      }

      if (v92) {
        *(void *)(v64 + 48) = CFRetain(v92);
      }
      unsigned int v27 = 0;
      *(void *)(v64 + 56) = v68;
      *(_DWORD *)(v64 + 64) = v70;
      *(void *)(v64 + 68) = v72;
      *(void *)(v64 + 76) = v74;
      *(_DWORD *)(v64 + 84) = v76;
      *(_DWORD *)(v64 + 88) = HIDWORD(v70);
      *(_DWORD *)(v64 + 92) = HIDWORD(v76);
      *(_BYTE *)(v64 + 96) = 1;
    }

    else
    {
      unsigned int v27 = 2;
      v39 = v92;
      unsigned __int16 v37 = DataAsU16;
      CFMutableArrayRef v40 = Mutable;
    }

    if (v85) {
      CFRelease(v85);
    }
    uint64_t v6 = v66;
    int v8 = 20;
    if (v40) {
      CFRelease(v40);
    }
    if (v86) {
      CFRelease(v86);
    }
    if (v88) {
      CFRelease(v88);
    }
    if (v90) {
      CFRelease(v90);
    }
    goto LABEL_203;
  }

  unint64_t v25 = iAP2MsgGetFirstParam(a2, a3);
  if (!v25)
  {
    v39 = 0LL;
LABEL_201:
    unsigned int v27 = 2;
    goto LABEL_202;
  }

  v26 = (unsigned __int16 *)v25;
  uint64_t v65 = Feature;
  uint64_t v67 = v6;
  char v87 = 0;
  uint64_t v84 = 0LL;
  char v83 = 0;
  uint64_t v80 = 0LL;
  char allocator = 0;
  uint64_t v75 = 0LL;
  uint64_t v77 = 0LL;
  BOOL v61 = 0;
  BOOL v59 = 0;
  BOOL v57 = 0;
  BOOL v55 = 0;
  BOOL v53 = 0;
  uint64_t v52 = 0LL;
  BOOL v51 = 0;
  uint64_t v71 = 0LL;
  uint64_t v73 = 0LL;
  uint64_t v69 = 0LL;
  BOOL v89 = 0;
  BOOL v91 = 0;
  CFStringRef v93 = 0LL;
  BOOL v63 = 0;
  BOOL v62 = 0;
  BOOL v60 = 0;
  BOOL v58 = 0;
  BOOL v56 = 0;
  BOOL v54 = 0;
  BOOL IsDataVoid = 0;
  uint64_t v49 = 0LL;
  __int16 v48 = 0;
  unsigned int v27 = 10;
  do
  {
    int v28 = iAP2MsgGetParamID((uint64_t)v26);
    uint64_t v29 = gLogObjects;
    int v30 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 41)
    {
      CFRange v31 = *(os_log_s **)(gLogObjects + 320);
    }

    else
    {
      CFRange v31 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)v99 = v29;
        *(_WORD *)&v99[8] = 1024;
        v100[0] = v30;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
        CFRange v31 = (os_log_s *)&_os_log_default;
      }
    }

    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
      _parseIdentificationParams_cold_5_0(v101, v102, v31);
    }
    switch(v28)
    {
      case 0:
        if (v91)
        {
          BOOL v91 = 1;
          goto LABEL_118;
        }

        __int16 v48 = iAP2MsgGetDataAsU16(v26, &v97);
        BOOL v91 = !v97;
        break;
      case 1:
        if (v89)
        {
          BOOL v89 = 1;
          goto LABEL_118;
        }

        if (v93) {
          CFRelease(v93);
        }
        CFStringRef v93 = iAP2MsgCopyDataAsCFString(v26, &v97);
        BOOL v89 = !v97;
        break;
      case 3:
        if ((v69 & 1) != 0)
        {
          LOBYTE(v69) = 1;
          goto LABEL_118;
        }

        LOBYTE(v49) = iAP2MsgIsDataVoid(v26);
        LOBYTE(v69) = 1;
        break;
      case 4:
        if ((v69 & 0x100000000LL) != 0)
        {
          BYTE4(v69) = 1;
          goto LABEL_118;
        }

        BYTE4(v49) = iAP2MsgIsDataVoid(v26);
        BYTE4(v69) = 1;
        break;
      case 6:
        if ((v71 & 1) != 0)
        {
          LOBYTE(v71) = 1;
          goto LABEL_118;
        }

        BOOL IsDataVoid = iAP2MsgIsDataVoid(v26);
        LOBYTE(v71) = 1;
        break;
      case 9:
        if ((v77 & 0x100000000LL) != 0)
        {
          BYTE4(v77) = 1;
          goto LABEL_118;
        }

        BOOL v51 = iAP2MsgIsDataVoid(v26);
        BYTE4(v77) = 1;
        break;
      case 10:
        if ((allocator & 1) != 0)
        {
          char allocator = 1;
          goto LABEL_118;
        }

        LOBYTE(v52) = iAP2MsgIsDataVoid(v26);
        char allocator = 1;
        break;
      case 11:
        if ((v80 & 1) != 0)
        {
          LOBYTE(v80) = 1;
          goto LABEL_118;
        }

        BYTE4(v52) = iAP2MsgIsDataVoid(v26);
        LOBYTE(v80) = 1;
        break;
      case 12:
        if ((v80 & 0x100000000LL) != 0)
        {
          BYTE4(v80) = 1;
          goto LABEL_118;
        }

        BOOL v53 = iAP2MsgIsDataVoid(v26);
        BYTE4(v80) = 1;
        break;
      case 13:
        if ((v83 & 1) != 0)
        {
          char v83 = 1;
          goto LABEL_118;
        }

        BOOL v55 = iAP2MsgIsDataVoid(v26);
        char v83 = 1;
        break;
      case 14:
        if ((v84 & 1) != 0)
        {
          LOBYTE(v84) = 1;
          goto LABEL_118;
        }

        BOOL v57 = iAP2MsgIsDataVoid(v26);
        LOBYTE(v84) = 1;
        break;
      case 15:
        if ((v84 & 0x100000000LL) != 0)
        {
          BYTE4(v84) = 1;
          goto LABEL_118;
        }

        BOOL v59 = iAP2MsgIsDataVoid(v26);
        BYTE4(v84) = 1;
        break;
      case 16:
        if ((v87 & 1) != 0)
        {
          char v87 = 1;
          goto LABEL_118;
        }

        BOOL v61 = iAP2MsgIsDataVoid(v26);
        char v87 = 1;
        break;
      case 17:
        if ((v71 & 0x100000000LL) != 0)
        {
          BYTE4(v71) = 1;
          goto LABEL_118;
        }

        BOOL v54 = iAP2MsgIsDataVoid(v26);
        BYTE4(v71) = 1;
        break;
      case 18:
        if ((v73 & 1) != 0)
        {
          LOBYTE(v73) = 1;
          goto LABEL_118;
        }

        BOOL v56 = iAP2MsgIsDataVoid(v26);
        LOBYTE(v73) = 1;
        break;
      case 19:
        if ((v73 & 0x100000000LL) != 0)
        {
          BYTE4(v73) = 1;
          goto LABEL_118;
        }

        BOOL v58 = iAP2MsgIsDataVoid(v26);
        BYTE4(v73) = 1;
        break;
      case 20:
        if ((v75 & 1) != 0)
        {
          LOBYTE(v75) = 1;
          goto LABEL_118;
        }

        BOOL v60 = iAP2MsgIsDataVoid(v26);
        LOBYTE(v75) = 1;
        break;
      case 21:
        if ((v75 & 0x100000000LL) != 0)
        {
          BYTE4(v75) = 1;
          goto LABEL_118;
        }

        BOOL v62 = iAP2MsgIsDataVoid(v26);
        BYTE4(v75) = 1;
        break;
      case 30:
        if ((v77 & 1) != 0)
        {
          LOBYTE(v77) = 1;
LABEL_118:
          unsigned int v27 = 5;
        }

        else
        {
          BOOL v63 = iAP2MsgIsDataVoid(v26);
          LOBYTE(v77) = 1;
        }

        break;
      default:
        uint64_t v32 = gLogObjects;
        int v33 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 41)
        {
          v34 = *(os_log_s **)(gLogObjects + 320);
        }

        else
        {
          v34 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)v99 = v32;
            *(_WORD *)&v99[8] = 1024;
            v100[0] = v33;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            v34 = (os_log_s *)&_os_log_default;
          }
        }

        if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
        {
          int v35 = iAP2MsgGetMsgID(a2);
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)v99 = v28;
          *(_WORD *)&v99[4] = 1024;
          *(_DWORD *)&v99[6] = 21;
          LOWORD(v100[0]) = 1024;
          *(_DWORD *)((char *)v100 + 2) = v35;
          _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_INFO,  "Unknown Subparam ID: %d in Param ID: %d for Msg ID: 0x%04X - ignoring subparam",  buf,  0x14u);
        }

        break;
    }

    v26 = iAP2MsgGetNextParam(a2, a3, v26);
  }

  while (v26);
  if (v91 && v89 && v27 != 5)
  {
    *(_WORD *)(v65 + 104) = v48;
    v46 = *(const void **)(v65 + 112);
    uint64_t v6 = v67;
    v39 = v93;
    if (v46)
    {
      CFRelease(v46);
      *(void *)(v65 + 112) = 0LL;
    }

    if (v93) {
      *(void *)(v65 + 112) = CFRetain(v93);
    }
    unsigned int v27 = 0;
    *(_BYTE *)(v65 + 120) = v49 & 1;
    *(_BYTE *)(v65 + 121) = BYTE4(v49) & 1;
    *(_BYTE *)(v65 + 122) = IsDataVoid;
    *(_BYTE *)(v65 + 123) = v51;
    *(_BYTE *)(v65 + 124) = v52 & 1;
    *(_BYTE *)(v65 + 125) = BYTE4(v52) & 1;
    *(_BYTE *)(v65 + 126) = v53;
    *(_BYTE *)(v65 + 127) = v55;
    *(_BYTE *)(v65 + 128) = v57;
    *(_BYTE *)(v65 + 129) = v59;
    *(_BYTE *)(v65 + 130) = v61;
    *(_BYTE *)(v65 + 131) = v54;
    *(_BYTE *)(v65 + 132) = v56;
    *(_BYTE *)(v65 + 133) = v58;
    *(_BYTE *)(v65 + 134) = v60;
    *(_BYTE *)(v65 + 135) = v62;
    *(_BYTE *)(v65 + 136) = v63;
    *(_BYTE *)(v65 + 137) = 1;
    goto LABEL_202;
  }

  uint64_t v6 = v67;
  v39 = v93;
  if (v27 == 10) {
    goto LABEL_201;
  }
LABEL_202:
  unsigned __int16 v37 = 0;
LABEL_203:
  if (v39) {
    CFRelease(v39);
  }
  uint64_t Feature = (v97 | v27) == 0;
  if (v27) {
    goto LABEL_206;
  }
  return Feature;
}

  ;
}

void OUTLINED_FUNCTION_10_5(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
}

uint64_t iap2_oobBtPairing2_accessoryInfoHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 51)
  {
    uint64_t v4 = *(os_log_s **)(gLogObjects + 400);
  }

  else
  {
    uint64_t v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v5 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v5 = 0LL;
    }
    *(_DWORD *)buf = 138412290;
    *(void *)BOOL v63 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "iAP2OOBBTPairing2 AccessoryInfo Handler %@",  buf,  0xCu);
  }

  uint64_t v6 = 0LL;
  if (!a1 || !a2) {
    return v6;
  }
  uint64_t v58 = a1;
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
  int v61 = 0;
  if (!FirstParam)
  {
    CFDataRef v60 = 0LL;
    CFNumberRef v10 = 0LL;
    unsigned __int16 v9 = 0;
    char v59 = 0;
LABEL_56:
    if (gLogObjects && gNumLogObjects >= 51)
    {
      int v35 = *(os_log_s **)(gLogObjects + 400);
      v36 = v60;
      char v37 = v59;
    }

    else
    {
      int v35 = (os_log_s *)&_os_log_default;
      v36 = v60;
      char v37 = v59;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (!os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
    {
LABEL_68:
      uint64_t Feature = iap2_feature_getFeature(v58, 0x19u);
      if (!Feature) {
        goto LABEL_107;
      }
      if (v61) {
        goto LABEL_107;
      }
      v42 = (CFDictionaryRef *)Feature;
      if (!*(_BYTE *)(Feature + 16)) {
        goto LABEL_107;
      }
      buf[0] = 0;
      if ((v37 & (v36 != 0LL)) != 1)
      {
        if (gLogObjects && gNumLogObjects >= 51)
        {
          v46 = *(os_log_s **)(gLogObjects + 400);
        }

        else
        {
          v46 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v49 = *(void *)(v58 + 8);
          if (v36) {
            CFIndex Length = CFDataGetLength(v36);
          }
          else {
            CFIndex Length = 0LL;
          }
          *(_DWORD *)buf = 138413314;
          *(void *)BOOL v63 = v49;
          *(_WORD *)&v63[8] = 1024;
          *(_DWORD *)&v63[10] = v9;
          *(_WORD *)&v63[14] = 1024;
          *(_DWORD *)&v63[16] = v37 & 1;
          *(_WORD *)&v63[20] = 1024;
          *(_DWORD *)&v63[22] = v36 != 0LL;
          *(_WORD *)&v63[26] = 2048;
          CFIndex v64 = Length;
          _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "iAP2OOBBTPairing2 AccessoryInfo: %@, no componentID (%d / %d) or no pairingDataP192 (%d / %ld) parameter, ignore message",  buf,  0x28u);
        }

        goto LABEL_107;
      }

      v43 = _copyUUIDForComponentID(v42, v9);
      CFDataRef v44 = iap2_identification_copyMacAddressForComponentID(v58, v9);
      if (gLogObjects && gNumLogObjects >= 51)
      {
        v45 = *(os_log_s **)(gLogObjects + 400);
      }

      else
      {
        v45 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)BOOL v63 = v9;
        *(_WORD *)&v63[4] = 2112;
        *(void *)&v63[6] = v43;
        *(_WORD *)&v63[14] = 2112;
        *(void *)&v63[16] = v44;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEBUG,  "iAP2OOBBTPairing2 AccessoryInfo: for componentID=%d, uuid=%@ accessoryMacAddr=%@",  buf,  0x1Cu);
      }

      if (v43) {
        BOOL v47 = v44 == 0LL;
      }
      else {
        BOOL v47 = 1;
      }
      uint64_t v48 = !v47;
      if (v47)
      {
        if (gLogObjects && gNumLogObjects >= 51)
        {
          BOOL v51 = *(os_log_s **)(gLogObjects + 400);
        }

        else
        {
          BOOL v51 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v52 = *(void *)(v58 + 8);
          *(_DWORD *)buf = 138413058;
          *(void *)BOOL v63 = v52;
          *(_WORD *)&v63[8] = 2112;
          *(void *)&v63[10] = v43;
          *(_WORD *)&v63[18] = 2112;
          *(void *)&v63[20] = v44;
          LOWORD(v64) = 1024;
          *(_DWORD *)((char *)&v64 + 2) = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "iAP2OOBBTPairing2 AccessoryInfo: %@, no uuid(%@) or accesoryMacAddr(%@) for componentID %d, ignore message",  buf,  0x26u);
        }

        v36 = v60;
        if (!v44)
        {
          uint64_t v48 = 0LL;
          goto LABEL_112;
        }
      }

      else
      {
        v36 = v60;
        platform_oobBtPairing2_accessoryInfo( *(void *)(v58 + 8),  (uint64_t)v43,  (uint64_t)v44,  (uint64_t)v60,  (uint64_t)v10);
        CFRelease(v43);
      }

      CFRelease(v44);
      goto LABEL_112;
    }

    uint64_t v38 = *(void *)(v58 + 8);
    if (v36)
    {
      CFIndex v39 = CFDataGetLength(v36);
      if (v10)
      {
LABEL_64:
        CFIndex v40 = CFDataGetLength(v10);
LABEL_67:
        *(_DWORD *)buf = 138412802;
        *(void *)BOOL v63 = v38;
        *(_WORD *)&v63[8] = 2048;
        *(void *)&v63[10] = v39;
        *(_WORD *)&v63[18] = 2048;
        *(void *)&v63[20] = v40;
        _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_INFO,  "iAP2OOBBTPairing2 AccessoryInfo: %@, P192 %ld bytes, P256 %ld bytes",  buf,  0x20u);
        goto LABEL_68;
      }
    }

    else
    {
      CFIndex v39 = 0LL;
      if (v10) {
        goto LABEL_64;
      }
    }

    CFIndex v40 = 0LL;
    goto LABEL_67;
  }

  NextParam = (unsigned __int16 *)FirstParam;
  char v59 = 0;
  unsigned __int16 v9 = 0;
  CFNumberRef v10 = 0LL;
  CFDataRef v60 = 0LL;
  while (1)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
    if (ParamID != 2) {
      break;
    }
    uint64_t DataAsData = iAP2MsgGetDataAsData((uint64_t)NextParam, &v61);
    if (v61)
    {
      BOOL v54 = (os_log_s *)logObjectForModule_18();
      if (!os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_121;
      }
      int MsgID = iAP2MsgGetMsgID(a2);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)BOOL v63 = 2;
      *(_WORD *)&v63[4] = 1024;
      *(_DWORD *)&v63[6] = MsgID;
      goto LABEL_120;
    }

    BOOL v15 = (const UInt8 *)DataAsData;
    char ParamValueLen = iAP2MsgGetParamValueLen(NextParam);
    if (!v15 || ParamValueLen != 32 || v10)
    {
      int v61 = 1;
      uint64_t v25 = gLogObjects;
      int v26 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 51)
      {
        unsigned int v27 = *(os_log_s **)(gLogObjects + 400);
      }

      else
      {
        unsigned int v27 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)BOOL v63 = v25;
          *(_WORD *)&v63[8] = 1024;
          *(_DWORD *)&v63[10] = v26;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          unsigned int v27 = (os_log_s *)&_os_log_default;
        }
      }

      if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_53;
      }
      uint64_t v31 = *(void *)(v58 + 8);
      *(_DWORD *)buf = 138412290;
      *(void *)BOOL v63 = v31;
      uint64_t v32 = v27;
      int v33 = "iAP2OOBBTPairing2 AccessoryInfo: %@, more than one pairDataP256";
LABEL_52:
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, v33, buf, 0xCu);
      goto LABEL_53;
    }

    CFNumberRef v10 = CFDataCreate(kCFAllocatorDefault, v15, 32LL);
LABEL_53:
    NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
    if (!NextParam) {
      goto LABEL_56;
    }
  }

  int v12 = ParamID;
  if (ParamID != 1)
  {
    if (ParamID)
    {
      BOOL v20 = v10;
      uint64_t v21 = gLogObjects;
      int v22 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 51)
      {
        int v23 = *(os_log_s **)(gLogObjects + 400);
      }

      else
      {
        int v23 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)BOOL v63 = v21;
          *(_WORD *)&v63[8] = 1024;
          *(_DWORD *)&v63[10] = v22;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          int v23 = (os_log_s *)&_os_log_default;
        }
      }

      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        int v24 = iAP2MsgGetMsgID(a2);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)BOOL v63 = v12;
        *(_WORD *)&v63[4] = 1024;
        *(_DWORD *)&v63[6] = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param",  buf,  0xEu);
      }

      CFNumberRef v10 = v20;
    }

    else
    {
      unsigned __int16 DataAsU16 = iAP2MsgGetDataAsU16(NextParam, &v61);
      if (v61)
      {
        BOOL v54 = (os_log_s *)logObjectForModule_18();
        if (!os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_121;
        }
        int v55 = iAP2MsgGetMsgID(a2);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)BOOL v63 = 0;
        *(_WORD *)&v63[4] = 1024;
        *(_DWORD *)&v63[6] = v55;
        goto LABEL_120;
      }

      unsigned __int16 v9 = DataAsU16;
      char v59 = 1;
    }

    goto LABEL_53;
  }

  uint64_t v17 = iAP2MsgGetDataAsData((uint64_t)NextParam, &v61);
  if (!v61)
  {
    uint64_t v18 = (const UInt8 *)v17;
    char v19 = iAP2MsgGetParamValueLen(NextParam);
    if (!v18 || v19 != 32 || v60)
    {
      int v61 = 1;
      uint64_t v28 = gLogObjects;
      int v29 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 51)
      {
        int v30 = *(os_log_s **)(gLogObjects + 400);
      }

      else
      {
        int v30 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)BOOL v63 = v28;
          *(_WORD *)&v63[8] = 1024;
          *(_DWORD *)&v63[10] = v29;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          int v30 = (os_log_s *)&_os_log_default;
        }
      }

      if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_53;
      }
      uint64_t v34 = *(void *)(v58 + 8);
      *(_DWORD *)buf = 138412290;
      *(void *)BOOL v63 = v34;
      uint64_t v32 = v30;
      int v33 = "iAP2OOBBTPairing2 AccessoryInfo: %@, more than one pairDataP192";
      goto LABEL_52;
    }

    CFDataRef v60 = CFDataCreate(kCFAllocatorDefault, v18, 32LL);
    goto LABEL_53;
  }

  BOOL v54 = (os_log_s *)logObjectForModule_18();
  if (!os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_121;
  }
  int v57 = iAP2MsgGetMsgID(a2);
  *(_DWORD *)buf = 67109376;
  *(_DWORD *)BOOL v63 = 1;
  *(_WORD *)&v63[4] = 1024;
  *(_DWORD *)&v63[6] = v57;
LABEL_120:
  _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "Param ID: %d parse error for Msg ID: 0x%04X - ignoring message",  buf,  0xEu);
LABEL_121:
  v36 = v60;
LABEL_107:
  uint64_t v48 = 0LL;
  uint64_t v6 = 0LL;
  if (!v36)
  {
    if (v10) {
      goto LABEL_109;
    }
    return v6;
  }

void *logObjectForModule_18()
{
  if (gLogObjects && gNumLogObjects >= 51) {
    return *(void **)(gLogObjects + 400);
  }
  v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

const void *_copyUUIDForComponentID(CFDictionaryRef *a1, __int16 a2)
{
  __int16 valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
  Value = CFDictionaryGetValue(*a1, v3);
  uint64_t v5 = Value;
  if (Value) {
    CFRetain(Value);
  }
  if (v3) {
    CFRelease(v3);
  }
  return v5;
}

uint64_t iap2_oobBtPairing2_statusHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 51)
  {
    uint64_t v4 = *(os_log_s **)(gLogObjects + 400);
  }

  else
  {
    uint64_t v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v5 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v5 = 0LL;
    }
    *(_DWORD *)buf = 138412290;
    *(void *)CFIndex v39 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing2 Status Handler %@", buf, 0xCu);
  }

  uint64_t v6 = 0LL;
  if (!a1 || !a2) {
    return v6;
  }
  uint64_t v35 = a1;
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
  BOOL v37 = 0;
  if (FirstParam)
  {
    NextParam = (unsigned __int16 *)FirstParam;
    unsigned __int16 v9 = 0LL;
    int v36 = 0;
    unsigned __int16 v10 = 0;
    int v11 = 0;
    uint64_t v12 = 0LL;
    while (1)
    {
      int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
      if (ParamID == 2)
      {
        DataAsString = iAP2MsgGetDataAsString(NextParam, &v37);
        if (v37)
        {
          uint64_t v31 = (os_log_s *)logObjectForModule_18();
          uint64_t v6 = 0LL;
          if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
            return v6;
          }
          int MsgID = iAP2MsgGetMsgID(a2);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)CFIndex v39 = 2;
          *(_WORD *)&v39[4] = 1024;
          *(_DWORD *)&v39[6] = MsgID;
          goto LABEL_64;
        }

        unsigned __int16 v9 = DataAsString;
        int v11 = 1;
        uint64_t v12 = 4LL;
      }

      else
      {
        int v14 = ParamID;
        if (ParamID == 1)
        {
          if (!iAP2MsgIsDataVoid(NextParam))
          {
            uint64_t v31 = (os_log_s *)logObjectForModule_18();
            uint64_t v6 = 0LL;
            if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
              return v6;
            }
            int v34 = iAP2MsgGetMsgID(a2);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)CFIndex v39 = 1;
            *(_WORD *)&v39[4] = 1024;
            *(_DWORD *)&v39[6] = v34;
LABEL_64:
            _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Param ID: %d parse error for Msg ID: 0x%04X - ignoring message",  buf,  0xEu);
            return 0LL;
          }

          int v11 = 1;
          uint64_t v12 = 2LL;
        }

        else if (ParamID)
        {
          uint64_t v17 = gLogObjects;
          int v18 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 51)
          {
            char v19 = *(os_log_s **)(gLogObjects + 400);
          }

          else
          {
            char v19 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)CFIndex v39 = v17;
              *(_WORD *)&v39[8] = 1024;
              int v40 = v18;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            }
          }

          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            int v20 = iAP2MsgGetMsgID(a2);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)CFIndex v39 = v14;
            *(_WORD *)&v39[4] = 1024;
            *(_DWORD *)&v39[6] = v20;
            _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param",  buf,  0xEu);
          }
        }

        else
        {
          unsigned __int16 DataAsU16 = iAP2MsgGetDataAsU16(NextParam, &v37);
          if (v37)
          {
            uint64_t v31 = (os_log_s *)logObjectForModule_18();
            uint64_t v6 = 0LL;
            if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
              return v6;
            }
            int v32 = iAP2MsgGetMsgID(a2);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)CFIndex v39 = 0;
            *(_WORD *)&v39[4] = 1024;
            *(_DWORD *)&v39[6] = v32;
            goto LABEL_64;
          }

          unsigned __int16 v10 = DataAsU16;
          int v36 = 1;
        }
      }

      NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
      if (!NextParam) {
        goto LABEL_34;
      }
    }
  }

  uint64_t v12 = 0LL;
  int v11 = 0;
  unsigned __int16 v10 = 0;
  int v36 = 0;
  unsigned __int16 v9 = 0LL;
LABEL_34:
  if (gLogObjects && gNumLogObjects >= 51)
  {
    uint64_t v21 = *(os_log_s **)(gLogObjects + 400);
    uint64_t v22 = v35;
  }

  else
  {
    uint64_t v21 = (os_log_s *)&_os_log_default;
    uint64_t v22 = v35;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    uint64_t v23 = *(void *)(v22 + 8);
    int v24 = "(nil)";
    *(_DWORD *)buf = 138413058;
    if (v9) {
      int v24 = (const char *)v9;
    }
    *(void *)CFIndex v39 = v23;
    *(_WORD *)&v39[8] = 1024;
    int v40 = v12;
    __int16 v41 = 1024;
    int v42 = v11 & 1;
    __int16 v43 = 2080;
    *(void *)CFDataRef v44 = v24;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "iAP2OOBBTPairing2 Status: %@, resultCode %d (valid %d), cancelReason %s",  buf,  0x22u);
  }

  uint64_t Feature = iap2_feature_getFeature(v22, 0x19u);
  if (!Feature) {
    return 0LL;
  }
  int v26 = (CFDictionaryRef *)Feature;
  if (!*(_BYTE *)(Feature + 16)) {
    return 0LL;
  }
  buf[0] = 0;
  unsigned int v27 = _copyUUIDForComponentID(v26, v10);
  uint64_t v6 = v36 & v11 & (v27 != 0LL);
  if ((_DWORD)v6 == 1)
  {
    platform_oobBtPairing2_completionStatus(*(void *)(v22 + 8), (uint64_t)v27, v12);
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 51)
    {
      uint64_t v28 = *(os_log_s **)(gLogObjects + 400);
    }

    else
    {
      uint64_t v28 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v29 = *(void *)(v22 + 8);
      *(_DWORD *)buf = 138413570;
      *(void *)CFIndex v39 = v29;
      *(_WORD *)&v39[8] = 1024;
      int v40 = v12;
      __int16 v41 = 1024;
      int v42 = v11 & 1;
      __int16 v43 = 1024;
      *(_DWORD *)CFDataRef v44 = v10;
      *(_WORD *)&v44[4] = 1024;
      *(_DWORD *)&v44[6] = v36 & 1;
      __int16 v45 = 2112;
      v46 = v27;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "iAP2OOBBTPairing2 Status: %@, no resultCode (%d / %d) parameter or no componenID (%d, valid=%d)... or can't find uuid (%@), ignore message",  buf,  0x2Eu);
    }

    if (!v27) {
      return 0LL;
    }
  }

  CFRelease(v27);
  return v6;
}

uint64_t iap2_oobBtPairing2_startPairingHandler(uint64_t *a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 51)
  {
    uint64_t v4 = *(os_log_s **)(gLogObjects + 400);
  }

  else
  {
    uint64_t v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v5 = a1[1];
    }
    else {
      uint64_t v5 = 0LL;
    }
    int v23 = 138412290;
    uint64_t v24 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "iAP2OOBBTPairing2 StartPairing Handler %@",  (uint8_t *)&v23,  0xCu);
  }

  if (!a1) {
    return 0LL;
  }
  uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0x19u);
  if (gLogObjects && gNumLogObjects >= 51)
  {
    CFNumberRef v7 = *(os_log_s **)(gLogObjects + 400);
  }

  else
  {
    CFNumberRef v7 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = a1[1];
    unsigned __int16 v9 = "exists";
    if (!Feature) {
      unsigned __int16 v9 = "missing!!";
    }
    int v23 = 138412546;
    uint64_t v24 = v8;
    __int16 v25 = 2080;
    int v26 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "iAP2OOBBTPairing2 StartPairing %@ oobBtPairing2 %s",  (uint8_t *)&v23,  0x16u);
  }

  uint64_t result = 0LL;
  if (a2 && Feature)
  {
    if (!*(_DWORD *)a2)
    {
      int v11 = *(const void **)(a2 + 8);
      if (v11)
      {
        int ComponentIDForUUID = _getComponentIDForUUID(Feature, v11);
        if ((ComponentIDForUUID & 0x80000000) == 0)
        {
          int v13 = ComponentIDForUUID;
          if (gLogObjects && gNumLogObjects >= 51)
          {
            int v14 = *(os_log_s **)(gLogObjects + 400);
          }

          else
          {
            int v14 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            uint64_t v15 = a1[1];
            int v23 = 138412546;
            uint64_t v24 = v15;
            __int16 v25 = 1024;
            LODWORD(v26) = v13;
            _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "iAP2OOBBTPairing2 StartPairing %@, create msg, componentID %d",  (uint8_t *)&v23,  0x12u);
          }

          uint64_t v16 = iAP2MsgInit((uint64_t)(a1 + 15), 2816, a1[24], 0xFFFF, 0LL, 0LL);
          iAP2MsgAddU16Param(v16, 0LL, 0, (unsigned __int16)v13);
          uint64_t v17 = *(const __CFData **)(a2 + 16);
          if (v17)
          {
            BytePtr = CFDataGetBytePtr(v17);
            unsigned __int16 Length = CFDataGetLength(*(CFDataRef *)(a2 + 16));
            iAP2MsgAddDataParam(v16, 0LL, 1, BytePtr, Length);
          }

          *(_BYTE *)(Feature + 16) = 1;
          if (gLogObjects && gNumLogObjects >= 51)
          {
            int v20 = *(os_log_s **)(gLogObjects + 400);
          }

          else
          {
            int v20 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            uint64_t v21 = a1[1];
            int MsgID = iAP2MsgGetMsgID(v16);
            int v23 = 138412546;
            uint64_t v24 = v21;
            __int16 v25 = 1024;
            LODWORD(v26) = MsgID;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "iAP2OOBBTPairing2 StartPairing %@ send message %xh",  (uint8_t *)&v23,  0x12u);
          }

          iap2_sessionControl_sendOutgoingMessage(a1, v16);
          platform_oobBtPairing2_deleteParams((void *)a2);
          return 1LL;
        }
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t _getComponentIDForUUID(uint64_t a1, const void *a2)
{
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), a2);
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    return valuePtr;
  }

  return v2;
}

uint64_t iap2_oobBtPairing2_stopPairingHandler(uint64_t *a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 51)
  {
    uint64_t v4 = *(os_log_s **)(gLogObjects + 400);
  }

  else
  {
    uint64_t v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v5 = a1[1];
    }
    else {
      uint64_t v5 = 0LL;
    }
    int v23 = 138412290;
    uint64_t v24 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "iAP2OOBBTPairing2 StopPairing Handler %@",  (uint8_t *)&v23,  0xCu);
  }

  if (!a1) {
    return 0LL;
  }
  uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0x19u);
  if (gLogObjects && gNumLogObjects >= 51)
  {
    CFNumberRef v7 = *(os_log_s **)(gLogObjects + 400);
  }

  else
  {
    CFNumberRef v7 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = a1[1];
    unsigned __int16 v9 = "exists";
    if (!Feature) {
      unsigned __int16 v9 = "missing!!";
    }
    int v23 = 138412546;
    uint64_t v24 = v8;
    __int16 v25 = 2080;
    *(void *)int v26 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "iAP2OOBBTPairing2 StopPairing %@ oobBtPairing2 %s",  (uint8_t *)&v23,  0x16u);
  }

  uint64_t result = 0LL;
  if (a2 && Feature)
  {
    if (*(_DWORD *)a2 == 1)
    {
      int v11 = *(const void **)(a2 + 8);
      if (v11)
      {
        int ComponentIDForUUID = _getComponentIDForUUID(Feature, v11);
        if ((ComponentIDForUUID & 0x80000000) == 0)
        {
          int v13 = ComponentIDForUUID;
          if (gLogObjects && gNumLogObjects >= 51)
          {
            int v14 = *(os_log_s **)(gLogObjects + 400);
          }

          else
          {
            int v14 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            uint64_t v15 = a1[1];
            int v23 = 138412546;
            uint64_t v24 = v15;
            __int16 v25 = 1024;
            *(_DWORD *)int v26 = v13;
            _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "iAP2OOBBTPairing2 StopPairing %@, create msg, componentID %d",  (uint8_t *)&v23,  0x12u);
          }

          uint64_t v16 = iAP2MsgInit((uint64_t)(a1 + 15), 2819, a1[24], 0xFFFF, 0LL, 0LL);
          iAP2MsgAddU16Param(v16, 0LL, 0, (unsigned __int16)v13);
          if ((*(_DWORD *)(a2 + 16) - 2) >= 3)
          {
            if (gLogObjects && gNumLogObjects >= 51)
            {
              uint64_t v17 = *(os_log_s **)(gLogObjects + 400);
            }

            else
            {
              uint64_t v17 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v18 = a1[1];
              int v19 = *(_DWORD *)(a2 + 16);
              int v23 = 138412802;
              uint64_t v24 = v18;
              __int16 v25 = 1024;
              *(_DWORD *)int v26 = v13;
              *(_WORD *)&v26[4] = 1024;
              *(_DWORD *)&v26[6] = v19;
              _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "iAP2OOBBTPairing2 StopPairing %@, componentID %d, unknown result! %d",  (uint8_t *)&v23,  0x18u);
            }
          }

          else
          {
            iAP2MsgAddVoidParam(v16, 0LL, *(_WORD *)(a2 + 16) - 1);
          }

          *(_BYTE *)(Feature + 16) = 0;
          if (gLogObjects && gNumLogObjects >= 51)
          {
            int v20 = *(os_log_s **)(gLogObjects + 400);
          }

          else
          {
            int v20 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            uint64_t v21 = a1[1];
            int MsgID = iAP2MsgGetMsgID(v16);
            int v23 = 138412546;
            uint64_t v24 = v21;
            __int16 v25 = 1024;
            *(_DWORD *)int v26 = MsgID;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "iAP2OOBBTPairing2 StopPairing %@ send message %xh",  (uint8_t *)&v23,  0x12u);
          }

          iap2_sessionControl_sendOutgoingMessage(a1, v16);
          platform_oobBtPairing2_deleteParams((void *)a2);
          return 1LL;
        }
      }
    }

    return 0LL;
  }

  return result;
}

_BYTE *_createFeature_12(_BYTE *a1)
{
  if (gLogObjects && gNumLogObjects >= 51)
  {
    uint64_t v2 = *(os_log_s **)(gLogObjects + 400);
  }

  else
  {
    uint64_t v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v5[0] = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "iAP2OOBBTPairing2 _createFeature",  (uint8_t *)v5,  2u);
  }

  if (a1)
  {
    CFNumberRef v3 = calloc(1uLL, 0x18uLL);
    a1 = v3;
    if (v3)
    {
      v3[16] = 0;
      *(void *)CFNumberRef v3 = CFDictionaryCreateMutable( kCFAllocatorDefault,  1LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      *((void *)a1 + 1) = CFDictionaryCreateMutable( kCFAllocatorDefault,  1LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    }
  }

  return a1;
}

uint64_t _destroyFeature_12(void **a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 51)
  {
    uint64_t v4 = *(os_log_s **)(gLogObjects + 400);
  }

  else
  {
    uint64_t v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v8[0] = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "iAP2OOBBTPairing2 _destroyFeature",  (uint8_t *)v8,  2u);
  }

  uint64_t result = 0LL;
  if (a1 && a2)
  {
    uint64_t v6 = (CFTypeRef *)*a1;
    if (*a1)
    {
      platform_oobBtPairing2_accessoryDetached(*(void *)(a2 + 8));
      platform_oobBTPairing_decrementUserCount();
      if (*v6)
      {
        CFRelease(*v6);
        CFTypeRef *v6 = 0LL;
      }

      CFTypeRef v7 = v6[1];
      if (v7)
      {
        CFRelease(v7);
        v6[1] = 0LL;
      }

      if (*a1)
      {
        free(*a1);
        *a1 = 0LL;
      }

      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

BOOL _startFeatureFromDevice_8(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 51)
  {
    uint64_t v2 = *(os_log_s **)(gLogObjects + 400);
  }

  else
  {
    uint64_t v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "iAP2OOBBTPairing2 _startFeatureFromDevice",  buf,  2u);
  }

  uint64_t Feature = iap2_feature_getFeature(a1, 0x19u);
  if (Feature)
  {
    buf[0] = 0;
    if (iap2_identification_checkRequiredMsgIDs(a1, (uint64_t)&gskMsgOOBBTPairing2MainList, 4, buf))
    {
      uint64_t v4 = iap2_feature_getFeature(a1, 0);
      uint64_t v5 = iap2_feature_getFeature(a1, 1u);
      uint64_t v6 = iap2_feature_getFeature(a1, 0x14u);
      if (v6)
      {
        CFTypeRef v7 = *(const void **)(v6 + 24);
        if (v4)
        {
LABEL_12:
          CFTypeRef v8 = iap2_accAuthentication_copyCertificate(a1);
          CFTypeRef v9 = iap2_accAuthentication_copyCertificateSerial(a1);
LABEL_15:
          CFAllocatorRef v60 = kCFAllocatorDefault;
          CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 1LL, &kCFTypeArrayCallBacks);
          int v11 = (const __CFDictionary *)iap2_identification_transportComponents(a1);
          uint64_t v57 = v5;
          if (v11)
          {
            uint64_t v12 = v11;
            CFIndex Count = CFDictionaryGetCount(v11);
            if (Count)
            {
              uint64_t v14 = Count;
              BOOL v53 = v7;
              CFTypeRef v54 = v8;
              CFMutableArrayRef v59 = Mutable;
              CFTypeRef v55 = v9;
              uint64_t v56 = a1;
              uint64_t v52 = &v48;
              __chkstk_darwin(Count);
              uint64_t v16 = (uint64_t *)((char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
              memset(v16, 170, v15);
              CFDictionaryGetKeysAndValues(v12, 0LL, (const void **)v16);
              if (v14 >= 1)
              {
                uint64_t v49 = v62;
                *(void *)&__int128 v17 = 134218240LL;
                __int128 v50 = v17;
                *(void *)&__int128 v17 = 67111426LL;
                __int128 v51 = v17;
                uint64_t v58 = (CFMutableDictionaryRef *)Feature;
                do
                {
                  uint64_t v18 = (_WORD *)*v16;
                  if (*v16)
                  {
                    int v19 = *((_DWORD *)v18 + 5);
                    if (v19 == 5 || v19 == 3)
                    {
                      uint64_t v21 = v60;
                      uint64_t v22 = CFUUIDCreate(v60);
                      CFStringRef v23 = CFUUIDCreateString(v21, v22);
                      CFNumberRef v24 = CFNumberCreate(v21, kCFNumberSInt16Type, v18);
                      CFDataRef v25 = CFDataCreate(v21, (const UInt8 *)v18 + 24, 6LL);
                      uint64_t v26 = gLogObjects;
                      int v27 = gNumLogObjects;
                      if (gLogObjects && gNumLogObjects >= 51)
                      {
                        uint64_t v28 = *(os_log_s **)(gLogObjects + 400);
                      }

                      else
                      {
                        uint64_t v28 = (os_log_s *)&_os_log_default;
                        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = v50;
                          *(void *)CFIndex v64 = v26;
                          *(_WORD *)&v64[8] = 1024;
                          *(_DWORD *)&v64[10] = v27;
                          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                        }
                      }

                      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
                      {
                        int v33 = (unsigned __int16)*v18;
                        int v34 = *((unsigned __int8 *)v18 + 24);
                        int v35 = *((unsigned __int8 *)v18 + 25);
                        int v36 = *((unsigned __int8 *)v18 + 26);
                        int v37 = *((unsigned __int8 *)v18 + 27);
                        int v38 = *((unsigned __int8 *)v18 + 28);
                        int v39 = *((unsigned __int8 *)v18 + 29);
                        *(_DWORD *)buf = v51;
                        *(_DWORD *)CFIndex v64 = v33;
                        *(_WORD *)&v64[4] = 2112;
                        *(void *)&v64[6] = v24;
                        __int16 v65 = 2112;
                        CFStringRef v66 = v23;
                        char v67 = 0;
                        char v68 = 4;
                        int v69 = v34;
                        __int16 v70 = 1024;
                        int v71 = v35;
                        __int16 v72 = 1024;
                        int v73 = v36;
                        __int16 v74 = 1024;
                        int v75 = v37;
                        __int16 v76 = 1024;
                        int v77 = v38;
                        __int16 v78 = 1024;
                        int v79 = v39;
                        __int16 v80 = 2112;
                        CFDataRef v81 = v25;
                        _os_log_debug_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "iAP2OOBBTPairing2 _startFeatureFromDevice: add transportComponent: componentID=%d componentIDO bj=%@ uuidStr=%@ macAddr=(%02X %02X %02X %02X %02X %02X) (%@)",  buf,  0x4Au);
                      }

                      uint64_t Feature = (uint64_t)v58;
                      CFDictionarySetValue(*v58, v24, v23);
                      CFDictionarySetValue(*(CFMutableDictionaryRef *)(Feature + 8), v23, v24);
                      BtComponentMutableDict = platform_oobBtPairing2_createBtComponentMutableDict( *v18,  v23,  *((const void **)v18 + 1),  v25);
                      CFArrayAppendValue(v59, BtComponentMutableDict);
                      if (v22) {
                        CFRelease(v22);
                      }
                      if (v23) {
                        CFRelease(v23);
                      }
                      if (v24) {
                        CFRelease(v24);
                      }
                      if (v25) {
                        CFRelease(v25);
                      }
                      if (BtComponentMutableDict) {
                        CFRelease(BtComponentMutableDict);
                      }
                    }
                  }

                  else
                  {
                    uint64_t v29 = gLogObjects;
                    int v30 = gNumLogObjects;
                    if (gLogObjects && gNumLogObjects >= 51)
                    {
                      uint64_t v31 = *(os_log_s **)(gLogObjects + 400);
                    }

                    else
                    {
                      uint64_t v31 = (os_log_s *)&_os_log_default;
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = v50;
                        *(void *)CFIndex v64 = v29;
                        *(_WORD *)&v64[8] = 1024;
                        *(_DWORD *)&v64[10] = v30;
                        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                      }
                    }

                    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
                      _startFeatureFromDevice_cold_5(&v61, v49, v31);
                    }
                  }

                  ++v16;
                  --v14;
                }

                while (v14);
              }

              CFTypeRef v9 = v55;
              a1 = v56;
              CFTypeRef v7 = v53;
              CFTypeRef v8 = v54;
              CFMutableArrayRef Mutable = v59;
            }
          }

          else
          {
            if (gLogObjects && gNumLogObjects >= 51)
            {
              int v40 = *(os_log_s **)(gLogObjects + 400);
            }

            else
            {
              int v40 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "Couldn't get transportComponents!",  buf,  2u);
            }
          }

          char isIdentifiedForCarPlay = iap2_identification_isIdentifiedForCarPlay(a1);
          int v42 = *(const void ***)(v57 + 8);
          AccInfoMutableDict = platform_oobBtPairing2_createAccInfoMutableDict( v42[2],  v42[3],  v42[1],  v42[4],  v42[5],  v42[6],  v7,  v8,  v9,  isIdentifiedForCarPlay);
          if (gLogObjects && gNumLogObjects >= 51)
          {
            CFDataRef v44 = *(os_log_s **)(gLogObjects + 400);
          }

          else
          {
            CFDataRef v44 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG)) {
            _startFeatureFromDevice_cold_2((uint64_t)AccInfoMutableDict, v44);
          }
          if (gLogObjects && gNumLogObjects >= 51)
          {
            __int16 v45 = *(os_log_s **)(gLogObjects + 400);
          }

          else
          {
            __int16 v45 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)CFIndex v64 = Mutable;
            _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "iAP2OOBBTPairing2 _startFeatureFromDevice: componentList = %@",  buf,  0xCu);
          }

          platform_oobBTPairing2_incrementUserCount();
          if (!a1 || (uint64_t v46 = *(void *)(a1 + 8)) == 0) {
            uint64_t v46 = 0LL;
          }
          platform_oobBtPairing2_accessoryAttached(v46, (uint64_t)AccInfoMutableDict, Mutable);
          if (AccInfoMutableDict) {
            CFRelease(AccInfoMutableDict);
          }
          if (Mutable) {
            CFRelease(Mutable);
          }
          if (v8) {
            CFRelease(v8);
          }
          if (v9) {
            CFRelease(v9);
          }
          return Feature != 0;
        }
      }

      else
      {
        CFTypeRef v7 = 0LL;
        if (v4) {
          goto LABEL_12;
        }
      }

      CFTypeRef v8 = 0LL;
      CFTypeRef v9 = 0LL;
      goto LABEL_15;
    }
  }

  return Feature != 0;
}

uint64_t _checkIdentificationInfo_10(uint64_t a1)
{
  char v9 = 0;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&gskMsgOOBBTPairing2MainList, 4u, &v9);
  uint64_t v3 = v2;
  if (v9) {
    BOOL v4 = (_DWORD)v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  int v5 = v4;
  if (v9) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6 && (_DWORD)v2 == 0)
  {
    iap2_features_createFeature(a1, 0x19u);
    iap2_identification_setIdentifiedForFeature(a1, 0x19u);
  }

  return v3;
}

dispatch_object_t *mfi4Auth_endpoint_create(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v2 = *(os_log_s **)(gLogObjects + 440);
  }

  else
  {
    uint64_t v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_create", buf, 2u);
  }

  if (!a1)
  {
    uint64_t v16 = (os_log_s *)logObjectForModule_1(55);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_endpoint_create_cold_1();
    }
    return 0LL;
  }

  uint64_t v3 = *(const __CFString **)(a1 + 16);
  if (!v3 || (CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, v3)) == 0LL)
  {
    uint64_t v14 = (os_log_s *)logObjectForModule_1(55);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_endpoint_create_cold_2();
    }
    return 0LL;
  }

  CFStringRef v5 = Copy;
  BOOL v6 = (dispatch_object_t *)calloc(1uLL, 0x28uLL);
  if (!v6) {
    goto LABEL_16;
  }
  dispatch_queue_t v7 = dispatch_queue_create("mfi4AuthProtocolQ", 0LL);
  v6[2] = v7;
  if (!v7) {
    goto LABEL_16;
  }
  dispatch_object_t *v6 = (dispatch_object_t)a1;
  if (acc_endpoint_getTransportType(a1) == 13)
  {
    int v13 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  (dispatch_queue_t)v6[2]);
    v6[4] = v13;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 0x40000000LL;
    handler[2] = __mfi4Auth_endpoint_create_block_invoke;
    handler[3] = &__block_descriptor_tmp_7;
    handler[4] = v6;
    dispatch_source_set_event_handler(v13, handler);
    dispatch_source_set_timer((dispatch_source_t)v6[4], 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
    dispatch_set_context(v6[2], v6);
    dispatch_set_finalizer_f(v6[2], (dispatch_function_t)_mfi4Auth_endpoint_dispatchQueueFinalizer);
    dispatch_resume(v6[4]);
  }

  acc_platform_packetLogging_logEvent( (uint64_t)*v6,  "ATTACH",  (uint64_t)"MFi4Auth accessory attached!",  v8,  v9,  v10,  v11,  v12,  v17);
  if (!_mfi4Auth_endpoint_initSession((CFAbsoluteTime *)v6, (uint64_t)v5)) {
LABEL_16:
  }
    CFRelease(v5);
  return v6;
}

uint64_t __mfi4Auth_endpoint_create_block_invoke(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v2 = *(os_log_s **)(gLogObjects + 440);
  }

  else
  {
    uint64_t v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "timerSource: close NFC session", v4, 2u);
  }

  return acc_endpoint_setProperty( **(pthread_mutex_t ***)(a1 + 32),  kCFACCProperties_Endpoint_NFC_RequestSessionOpen,  kCFBooleanFalse);
}

void _mfi4Auth_endpoint_dispatchQueueFinalizer(void *a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 19;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    uint64_t v3 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    uint64_t v3 = *(os_log_s **)(gLogObjects + 144);
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    CFStringRef v5 = "_mfi4Auth_endpoint_dispatchQueueFinalizer";
    __int16 v6 = 2048;
    dispatch_queue_t v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s: protocolEndpoint %p", (uint8_t *)&v4, 0x16u);
  }

  if (a1)
  {
    _mfi4Auth_endpoint_cleanupSession((uint64_t)a1);
    free(a1);
  }

BOOL _mfi4Auth_endpoint_initSession(CFAbsoluteTime *a1, uint64_t a2)
{
  int v4 = calloc(1uLL, 0x2D0uLL);
  *((void *)a1 + 1) = v4;
  CFAbsoluteTime v5 = *a1;
  LOBYTE(valuePtr) = 0;
  int v6 = MFAADeviceIdentityCertsExist();
  if (v5 == 0.0)
  {
    int v8 = 0;
  }

  else
  {
    dispatch_queue_t v7 = acc_endpoint_copyProperty(*(pthread_mutex_t **)&v5, kCFACCProperties_Endpoint_MFi4Auth_OneWayOnly);
    int v8 = v6;
    if (v7)
    {
      CFNumberGetValue((CFNumberRef)v7, kCFNumberSInt8Type, &valuePtr);
      if ((_BYTE)valuePtr) {
        int v8 = 0;
      }
      else {
        int v8 = v6;
      }
    }
  }

  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v9 = *(os_log_s **)(gLogObjects + 440);
  }

  else
  {
    uint64_t v9 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    if (v5 == 0.0) {
      uint64_t v10 = 0LL;
    }
    else {
      uint64_t v10 = *(void *)(*(void *)&v5 + 16LL);
    }
    *(_DWORD *)buf = 136316162;
    int v37 = "_mfi4Auth_endpoint_isEndpointSupportsMutualAuth";
    __int16 v38 = 2112;
    *(void *)int v39 = v10;
    *(_WORD *)&v39[8] = 1024;
    *(_DWORD *)int v40 = v8;
    *(_WORD *)&v40[4] = 1024;
    *(_DWORD *)__int16 v41 = valuePtr;
    *(_WORD *)&v41[4] = 1024;
    *(_DWORD *)int v42 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s: endpointUUID %@, EndpointSupportsMutualAuth %d, (bOneWayOnly %d, deviceIdentityCertsExist %d)",  buf,  0x28u);
  }

  uint64_t v11 = gLogObjects;
  int v12 = gNumLogObjects;
  if ((v6 & 1) == 0)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v13 = *(os_log_s **)(gLogObjects + 440);
    }

    else
    {
      int v13 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      int v37 = "_mfi4Auth_endpoint_isEndpointSupportsMutualAuth";
      __int16 v38 = 1024;
      *(_DWORD *)int v39 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%s: deviceIdentityCertsExist %d, trigger re-init for next time.",  buf,  0x12u);
    }

    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    dispatch_async(global_queue, &__block_literal_global_14);
    uint64_t v11 = gLogObjects;
    int v12 = gNumLogObjects;
  }

  if (v11 && v12 >= 56)
  {
    size_t v15 = *(os_log_s **)(v11 + 440);
  }

  else
  {
    size_t v15 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
    _mfi4Auth_endpoint_initSession_cold_4(a2, v8, v15);
  }
  int valuePtr = 0;
  char v34 = 0;
  unsigned int v16 = acc_userDefaults_BOOLForKey((uint64_t)@"MFi4ECDSADisallow");
  unsigned int v17 = acc_userDefaults_BOOLForKey((uint64_t)@"MFi4SigmaIRequired");
  unsigned int v18 = acc_userDefaults_BOOLForKey((uint64_t)@"MFi4ECDSAOnly");
  if (gLogObjects && gNumLogObjects >= 56)
  {
    int v19 = *(os_log_s **)(gLogObjects + 440);
  }

  else
  {
    int v19 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136316674;
    int v37 = "_mfi4Auth_endpoint_initSession";
    __int16 v38 = 1024;
    *(_DWORD *)int v39 = (v17 | v8) & ~v18;
    *(_WORD *)&v39[4] = 1024;
    *(_DWORD *)&v39[6] = v16 ^ 1;
    *(_WORD *)int v40 = 1024;
    *(_DWORD *)&v40[2] = v8;
    *(_WORD *)__int16 v41 = 1024;
    *(_DWORD *)&v41[2] = v17;
    *(_WORD *)int v42 = 1024;
    *(_DWORD *)&v42[2] = v18;
    __int16 v43 = 1024;
    int v44 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "%s: allowSigmaI %d, allowOneWay %d, (endpointSupportsMutualAuth %d, mfi4SigmaIRequired %d, mfi4ECDSAOnly %d, mfi4E CDSADisallow %d)",  buf,  0x30u);
  }

  if (((v17 | v8) & ~v18) != 0)
  {
    LOBYTE(valuePtr) = 2;
    unsigned int v20 = 1;
  }

  else
  {
    unsigned int v20 = 0;
  }

  if ((v16 & 1) == 0) {
    *(_BYTE *)((unint64_t)&valuePtr | v20++) = 0;
  }
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v21 = *(os_log_s **)(gLogObjects + 440);
  }

  else
  {
    uint64_t v21 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    int v22 = BYTE1(valuePtr);
    if (v20 <= 1) {
      int v22 = -1;
    }
    *(_DWORD *)buf = 136316674;
    int v37 = "_mfi4Auth_endpoint_initSession";
    __int16 v38 = 1024;
    *(_DWORD *)int v39 = valuePtr;
    *(_WORD *)&v39[4] = 1024;
    *(_DWORD *)&v39[6] = v22;
    *(_WORD *)int v40 = 1024;
    *(_DWORD *)&v40[2] = -1;
    *(_WORD *)__int16 v41 = 1024;
    *(_DWORD *)&v41[2] = 0;
    *(_WORD *)int v42 = 1024;
    *(_DWORD *)&v42[2] = -1;
    __int16 v43 = 1024;
    int v44 = -1;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "%s: supportedAuthTypes [%d %d %d], supportedCapabilities [%d %d %d]",  buf,  0x30u);
  }

  BOOL inited = mfi4Auth_protocol_initSessionCommon((uint64_t)v4, a2, 0x400u, &valuePtr, v20, &v34, 1u);
  if (inited)
  {
    CFNumberRef v24 = calloc(1uLL, 0xD0uLL);
    v4[89] = v24;
    v24[6] = CFDictionaryCreateMutable( kCFAllocatorDefault,  64LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    a1[3] = CFAbsoluteTimeGetCurrent();
  }

  else
  {
    uint64_t v26 = (os_log_s *)logObjectForModule_1(55);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      _mfi4Auth_endpoint_initSession_cold_1(v26, v27, v28, v29, v30, v31, v32, v33);
    }
  }

  return inited;
}

uint64_t mfi4Auth_endpoint_publish(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 56)
  {
    BOOL v2 = *(os_log_s **)(gLogObjects + 440);
  }

  else
  {
    BOOL v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v19) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "mfi4Auth endpoint_publish", (uint8_t *)&v19, 2u);
  }

  if (!a1) {
    return 0LL;
  }
  uint64_t v3 = *(void *)a1;
  if (!*(void *)a1) {
    return v3;
  }
  uint64_t v4 = gLogObjects;
  int v5 = gNumLogObjects;
  if (gLogObjects && gNumLogObjects >= 56)
  {
    int v6 = *(os_log_s **)(gLogObjects + 440);
  }

  else
  {
    int v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      int v19 = 134218240;
      unsigned int v20 = (const char *)v4;
      __int16 v21 = 1024;
      int v22 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  (uint8_t *)&v19,  0x12u);
      uint64_t v3 = *(void *)a1;
    }
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(v3 + 24);
    int v19 = 67109120;
    LODWORD(v20) = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth publish: transportType %{coreacc:ACCEndpoint_TransportType_t}d",  (uint8_t *)&v19,  8u);
    uint64_t v3 = *(void *)a1;
  }

  if (acc_endpoint_isPublished(v3))
  {
    if (*(void *)a1 && (int v8 = *(const __CFString **)(*(void *)a1 + 16LL)) != 0LL) {
      CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, v8);
    }
    else {
      CFStringRef Copy = 0LL;
    }
    _mfi4Auth_endpoint_cleanupSession(a1);
    _mfi4Auth_endpoint_initSession((CFAbsoluteTime *)a1, (uint64_t)Copy);
  }

  uint64_t v10 = acc_endpoint_copyProperty(*(pthread_mutex_t **)a1, kCFACCProperties_Endpoint_NFC_TagId);
  if (acc_policies_nfcTagUseKeys((const __CFData *)v10))
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v11 = *(os_log_s **)(gLogObjects + 440);
    }

    else
    {
      uint64_t v11 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 136315138;
      unsigned int v20 = "mfi4Auth_endpoint_publish";
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%s: Checking if device has been unlocked since first boot",  (uint8_t *)&v19,  0xCu);
    }

    if ((platform_system_unlockedSinceBoot() & 1) == 0)
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        int v12 = *(os_log_s **)(gLogObjects + 440);
      }

      else
      {
        int v12 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int v19 = 136315138;
        unsigned int v20 = "mfi4Auth_endpoint_publish";
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%s: Device has not been unlocked since last boot. Setting up observer",  (uint8_t *)&v19,  0xCu);
      }

      platform_system_startObservingFirstUnlockNotification();
      LocalCenter = CFNotificationCenterGetLocalCenter();
      CFNotificationCenterAddObserver( LocalCenter,  0LL,  (CFNotificationCallback)_mfi4Auth_endpoint_firstUnlockHandler,  @"ACCPlatformApplicationFirstUnlockNotification",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
      if (!platform_system_unlockedSinceBoot())
      {
        uint64_t v3 = 0LL;
        if (!v10) {
          return v3;
        }
        goto LABEL_71;
      }
    }
  }

  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v14 = *(os_log_s **)(gLogObjects + 440);
  }

  else
  {
    uint64_t v14 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
  if (v15)
  {
    int v19 = 136315138;
    unsigned int v20 = "mfi4Auth_endpoint_publish";
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%s: Setting sleep assertion",  (uint8_t *)&v19,  0xCu);
  }

  platform_sleepAssertion_createForApplePencil(v15);
  if (acc_endpoint_getTransportType(*(void *)a1) == 13)
  {
    if (!acc_userDefaults_BOOLForKey((uint64_t)@"SkipNFCAuth"))
    {
      *(_DWORD *)(*(void *)(a1 + 8) + 32LL) = 1;
      uint64_t v3 = acc_endpoint_setProperty( *(pthread_mutex_t **)a1,  kCFACCProperties_Endpoint_NFC_RequestSessionOpen,  kCFBooleanTrue);
      if (!v10) {
        return v3;
      }
      goto LABEL_71;
    }

    if (gLogObjects && gNumLogObjects >= 56)
    {
      unsigned int v16 = *(os_log_s **)(gLogObjects + 440);
    }

    else
    {
      unsigned int v16 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 136315138;
      unsigned int v20 = "mfi4Auth_endpoint_publish";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%s: SkipNFCAuth!!!", (uint8_t *)&v19, 0xCu);
    }
  }

  else
  {
    uint64_t v3 = 1LL;
    if (acc_connection_isAuthenticated(**(void **)a1, 1LL)) {
      goto LABEL_70;
    }
    if (gLogObjects && gNumLogObjects >= 56)
    {
      unsigned int v17 = *(os_log_s **)(gLogObjects + 440);
    }

    else
    {
      unsigned int v17 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v19) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_endpoint_publish: sendAuthSetupStart",  (uint8_t *)&v19,  2u);
    }

    _mfi4Auth_endpoint_sendAuthSetupStart((void *)a1);
  }

  uint64_t v3 = 1LL;
LABEL_70:
  if (v10) {
LABEL_71:
  }
    CFRelease(v10);
  return v3;
}

void _mfi4Auth_endpoint_cleanupSession(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 56)
  {
    BOOL v2 = *(os_log_s **)(gLogObjects + 440);
  }

  else
  {
    BOOL v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 67109120;
    int v9 = 509;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "_mfi4Auth_endpoint_cleanupSession: %d",  (uint8_t *)&v8,  8u);
  }

  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    *(_BYTE *)(v3 + 30) = 1;
    mfi4Auth_protocol_cleanupSessionCommon((void *)v3);
    uint64_t v4 = *(const void **)v3;
    *(void *)uint64_t v3 = 0LL;
    if (v4) {
      CFRelease(v4);
    }
    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v5 = *(os_log_s **)(gLogObjects + 440);
    }

    else
    {
      int v5 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 67109120;
      int v9 = 521;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "_mfi4Auth_endpoint_cleanupSession: %d",  (uint8_t *)&v8,  8u);
    }

    mfi4Auth_protocol_cleanupNVMContext(*(void *)(v3 + 712));
    int v6 = *(void **)(v3 + 712);
    if (v6)
    {
      free(v6);
      *(void *)(v3 + 712) = 0LL;
    }

    int v7 = *(void **)(a1 + 8);
    if (v7)
    {
      free(v7);
      *(void *)(a1 + 8) = 0LL;
    }
  }

void __mfi4Auth_endpoint_publish_block_invoke(id a1)
{
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver( LocalCenter,  0LL,  (CFNotificationCallback)_mfi4Auth_endpoint_handlePropertiesDidChange,  CFACCTransportPlugin_EndpointPropertiesDidChangeNotification,  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
}

void _mfi4Auth_endpoint_handlePropertiesDidChange( int a1, int a2, CFTypeRef cf1, uint64_t a4, const __CFDictionary *a5)
{
  if (CFEqual(cf1, CFACCTransportPlugin_EndpointPropertiesDidChangeNotification))
  {
    int v6 = (const void *)CFACCTransportPlugin_EndpointPropertiesDidChangeNotification_EndpointUUID;
    Value = CFDictionaryGetValue(a5, CFACCTransportPlugin_EndpointPropertiesDidChangeNotification_EndpointUUID);
    CFRetain(Value);
    EndpointWithUUID = acc_manager_getEndpointWithUUID(Value);
    if (acc_endpoint_getTransportType((uint64_t)EndpointWithUUID) == 13)
    {
      int v9 = CFDictionaryGetValue(a5, CFACCTransportPlugin_PropertiesDidChangeNotification_ConnectionUUID);
      uint64_t v10 = CFDictionaryGetValue(a5, v6);
      if (v9)
      {
        uint64_t v11 = v10;
        CFTypeID v12 = CFGetTypeID(v9);
        if (v12 == CFStringGetTypeID() && v11 != 0LL)
        {
          CFTypeID v14 = CFGetTypeID(v11);
          if (v14 == CFStringGetTypeID())
          {
            BOOL v15 = acc_manager_getEndpointWithUUID(v11);
            if (v15)
            {
              uint64_t v16 = (uint64_t)v15;
              if (*((_DWORD *)v15 + 7) == 14)
              {
                if (v15[7])
                {
                  unsigned int v17 = (const __CFDictionary *)CFDictionaryGetValue( a5,  CFACCTransportPlugin_PropertiesDidChangeNotification_PropertiesOld);
                  unsigned int v18 = (const __CFDictionary *)CFDictionaryGetValue( a5,  CFACCTransportPlugin_PropertiesDidChangeNotification_PropertiesNew);
                  if (gLogObjects && gNumLogObjects >= 56)
                  {
                    int v19 = *(os_log_s **)(gLogObjects + 440);
                  }

                  else
                  {
                    int v19 = (os_log_s *)&_os_log_default;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                      platform_connectionInfo_configStreamCategoryListReady_cold_1();
                    }
                  }

                  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 138412546;
                    int v39 = v18;
                    __int16 v40 = 2112;
                    __int16 v41 = v17;
                    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "PropertiesDidchange: new %@, old %@",  buf,  0x16u);
                  }

                  if (v18)
                  {
                    unsigned int v20 = (const void *)kCFACCProperties_Endpoint_NFC_SessionOpen;
                    __int16 v21 = (const __CFBoolean *)CFDictionaryGetValue(v17, kCFACCProperties_Endpoint_NFC_SessionOpen);
                    BOOL v24 = v21
                       && (int v22 = v21, v23 = CFGetTypeID(v21), v23 == CFBooleanGetTypeID())
                       && CFBooleanGetValue(v22) == 1;
                    CFDataRef v25 = (const __CFBoolean *)CFDictionaryGetValue(v18, v20);
                    if (v25 && (uint64_t v31 = v25, v32 = CFGetTypeID(v25), v32 == CFBooleanGetTypeID()))
                    {
                      int v33 = CFBooleanGetValue(v31);
                      int v34 = v33 == 1 && !v24;
                      if (((!v24 ^ (v33 == 1)) & 1) != 0)
                      {
                        if (!v34) {
                          return;
                        }
                        goto LABEL_36;
                      }

                      if (v33 == 1)
                      {
                        acc_platform_packetLogging_logEvent( v16,  "NFC Session Opened",  (uint64_t)"MFi4Auth NFC session opened",  v26,  v27,  v28,  v29,  v30,  v36);
                        if ((v34 & 1) == 0) {
                          return;
                        }
LABEL_36:
                        int v35 = *(dispatch_queue_s **)(EndpointWithUUID[7] + 16LL);
                        block[0] = _NSConcreteStackBlock;
                        block[1] = 0x40000000LL;
                        block[2] = ___mfi4Auth_endpoint_handlePropertiesDidChange_block_invoke;
                        block[3] = &__block_descriptor_tmp_16_0;
                        block[4] = Value;
                        dispatch_async(v35, block);
                        return;
                      }
                    }

                    else if (!v24)
                    {
                      return;
                    }

                    acc_platform_packetLogging_logEvent( v16,  "NFC Session Closed",  (uint64_t)"MFi4Auth NFC session closed",  v26,  v27,  v28,  v29,  v30,  v36);
                  }
                }
              }
            }
          }
        }
      }
    }
  }

void _mfi4Auth_endpoint_firstUnlockHandler()
{
  if (gLogObjects && gNumLogObjects >= 56)
  {
    v0 = *(os_log_s **)(gLogObjects + 440);
  }

  else
  {
    v0 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_INFO,  "_mfi4Auth_endpoint_firstUnlockHandler FIRED!!",  buf,  2u);
  }

  v1 = acc_manager_copyAllEndpoints();
  CFIndex Count = CFDictionaryGetCount(v1);
  size_t v3 = 8 * Count;
  unint64_t v4 = (8 * Count + 15) & 0xFFFFFFFFFFFFFFF0LL;
  int v5 = (const void **)((char *)&v12 - v4);
  if (((uint64_t (*)(void))__chkstk_darwin)())
  {
    int v6 = memset((char *)&v12 - v4, 170, v3);
    __chkstk_darwin(v6);
    int v7 = (char *)&v12 - v4;
    memset(v7, 170, v3);
  }

  else
  {
    int v7 = &v13;
  }

  CFDictionaryGetKeysAndValues(v1, v5, (const void **)v7);
  if (v1) {
    CFRelease(v1);
  }
  if (Count >= 1)
  {
    while (acc_endpoint_getTransportType(*(void *)v7) != 13
         || acc_endpoint_getProtocol(*(void *)v7) != 14)
    {
      ++v5;
      v7 += 8;
      if (!--Count) {
        goto LABEL_27;
      }
    }

    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v8 = *(os_log_s **)(gLogObjects + 440);
    }

    else
    {
      int v8 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      int v9 = *v5;
      *(_DWORD *)buf = 138412290;
      BOOL v15 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "_mfi4Auth_endpoint_firstUnlockHandler endpoint Found: %@",  buf,  0xCu);
    }

    uint64_t v10 = *((void *)acc_manager_getEndpointWithUUID(*v5) + 7);
    *(_DWORD *)(*(void *)(v10 + 8) + 32LL) = 1;
    if (acc_endpoint_getTransportType(*(void *)v10) == 13) {
      acc_endpoint_setProperty( *(pthread_mutex_t **)v10,  kCFACCProperties_Endpoint_NFC_RequestSessionOpen,  kCFBooleanTrue);
    }
  }

void _mfi4Auth_endpoint_sendAuthSetupStart(void *a1)
{
  if (a1)
  {
    if (*a1
      && (BOOL v2 = *(const __CFString **)(*a1 + 16LL)) != 0LL
      && (CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, v2)) != 0LL)
    {
      CFStringRef v4 = Copy;
      dispatch_time_t v5 = dispatch_time(0LL, 1000000LL);
      int v6 = (dispatch_queue_s *)a1[2];
      block[0] = _NSConcreteStackBlock;
      block[1] = 0x40000000LL;
      block[2] = ___mfi4Auth_endpoint_sendAuthSetupStart_block_invoke;
      block[3] = &__block_descriptor_tmp_15;
      block[4] = v4;
      dispatch_after(v5, v6, block);
    }

    else
    {
      int v7 = (os_log_s *)logObjectForModule_1(55);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        _mfi4Auth_endpoint_sendAuthSetupStart_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
      }
    }
  }

BOOL mfi4Auth_endpoint_destroy(uint64_t **a1)
{
  if (gLogObjects && gNumLogObjects >= 56)
  {
    BOOL v2 = *(os_log_s **)(gLogObjects + 440);
  }

  else
  {
    BOOL v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_destroy", buf, 2u);
  }

  if (a1)
  {
    BOOL v8 = *a1 != 0LL;
    if (*a1)
    {
      acc_platform_packetLogging_logEvent( **a1,  "DETACH",  (uint64_t)"MFi4Auth accessory detached!",  v3,  v4,  v5,  v6,  v7,  v11);
      if (acc_endpoint_getTransportType(**a1) == 13)
      {
        dispatch_source_cancel((dispatch_source_t)(*a1)[4]);
        dispatch_release((dispatch_object_t)(*a1)[4]);
      }

      dispatch_sync((dispatch_queue_t)(*a1)[2], &__block_literal_global_9);
      dispatch_release((dispatch_object_t)(*a1)[2]);
      (*a1)[2] = 0LL;
      *a1 = 0LL;
    }

    notify_post("com.apple.accessories.connection.MFi4AccessoryDisconnected");
  }

  else
  {
    BOOL v8 = 0LL;
  }

  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v9 = *(os_log_s **)(gLogObjects + 440);
  }

  else
  {
    uint64_t v9 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v11) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_endpoint_destroy: destroyed",  (uint8_t *)&v11,  2u);
  }

  return v8;
}

BOOL mfi4Auth_endpoint_processIncomingData(void *a1, const void *a2)
{
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v4 = *(os_log_s **)(gLogObjects + 440);
  }

  else
  {
    uint64_t v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_processIncomingData", buf, 2u);
  }

  if (!a1)
  {
    uint64_t v9 = (os_log_s *)logObjectForModule_1(55);
    BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    mfi4Auth_endpoint_processIncomingData_cold_1();
    return 0LL;
  }

  if (!*a1)
  {
    uint64_t v10 = (os_log_s *)logObjectForModule_1(55);
    BOOL result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    mfi4Auth_endpoint_processIncomingData_cold_2();
    return 0LL;
  }

  if (!a2)
  {
    uint64_t v11 = (os_log_s *)logObjectForModule_1(55);
    BOOL result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    mfi4Auth_endpoint_processIncomingData_cold_3();
    return 0LL;
  }

  if (*(_DWORD *)(*a1 + 24LL) == 13
    && (acc_userDefaults_BOOLForKey((uint64_t)@"PretendNoNFCResponse") & 1) != 0)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v5 = *(os_log_s **)(gLogObjects + 440);
    }

    else
    {
      uint64_t v5 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v8 = acc_userDefaults_BOOLForKey((uint64_t)@"PretendNoNFCResponse");
      *(_DWORD *)buf = 136315394;
      uint64_t v14 = "mfi4Auth_endpoint_processIncomingData";
      __int16 v15 = 1024;
      unsigned int v16 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s: PretendNoNFCResponse %d, ignore incomingData!",  buf,  0x12u);
    }
  }

  else
  {
    CFRetain(a2);
    uint64_t v6 = (dispatch_queue_s *)a1[2];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 0x40000000LL;
    v12[2] = __mfi4Auth_endpoint_processIncomingData_block_invoke;
    v12[3] = &__block_descriptor_tmp_11_0;
    v12[4] = a1;
    v12[5] = a2;
    dispatch_async(v6, v12);
  }

  return 1LL;
}

void __mfi4Auth_endpoint_processIncomingData_block_invoke(uint64_t a1)
{
  BOOL v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
}

BOOL mfi4Auth_endpoint_processOutgoingSecureTunnelDataForClient(void *a1, int a2, const __CFData *a3)
{
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v6 = *(os_log_s **)(gLogObjects + 440);
  }

  else
  {
    uint64_t v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    int v15 = a2;
    __int16 v16 = 2048;
    CFIndex Length = CFDataGetLength(a3);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_endpoint_processOutgoingSecureTunnelDataForClient: type %d, dataOut %ld bytes",  buf,  0x12u);
  }

  if (!a1)
  {
    uint64_t v9 = (os_log_s *)logObjectForModule_1(55);
    BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    mfi4Auth_endpoint_processIncomingData_cold_1();
    return 0LL;
  }

  if (!*a1)
  {
    uint64_t v10 = (os_log_s *)logObjectForModule_1(55);
    BOOL result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    mfi4Auth_endpoint_processIncomingData_cold_2();
    return 0LL;
  }

  if (a3)
  {
    CFRetain(a3);
    uint64_t v7 = (dispatch_queue_s *)a1[2];
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = __mfi4Auth_endpoint_processOutgoingSecureTunnelDataForClient_block_invoke;
    block[3] = &__block_descriptor_tmp_12_0;
    char v13 = a2;
    block[4] = a1;
    void block[5] = a3;
    dispatch_async(v7, block);
    return 1LL;
  }

  uint64_t v11 = (os_log_s *)logObjectForModule_1(55);
  BOOL result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  if (result)
  {
    mfi4Auth_endpoint_processIncomingData_cold_3();
    return 0LL;
  }

  return result;
}

void __mfi4Auth_endpoint_processOutgoingSecureTunnelDataForClient_block_invoke(uint64_t a1)
{
  BOOL v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t mfi4Auth_endpoint_sendOutgoingData(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v4 = *(pthread_mutex_t **)a1;
      unsigned int Som = iAP2MsgGetSom(a2);
      acc_platform_packetLogging_logMFi4AuthProtocolMsg((uint64_t)v4, Som, a2, 0, 0);
      if (mfi4Auth_protocol_encryptOutgoingData(*(void *)(a1 + 8), a2))
      {
        if (mfi4Auth_util_packetLoggingEncryptedData())
        {
          uint64_t v6 = *(void *)a1;
          unsigned int v7 = iAP2MsgGetSom(a2);
          acc_platform_packetLogging_logMFi4AuthProtocolMsg(v6, v7, a2, 0, 1);
        }

        unsigned int v8 = *(const UInt8 **)(a2 + 24);
        unsigned int MsgLen = iAP2MsgGetMsgLen(a2);
        uint64_t v10 = CFDataCreate(kCFAllocatorDefault, v8, MsgLen);
        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v11 = *(os_log_s **)(gLogObjects + 440);
        }

        else
        {
          uint64_t v11 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          int v16 = 138412290;
          unsigned int v17 = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_endpoint_sendOutgoingData: %@",  (uint8_t *)&v16,  0xCu);
        }

        char v12 = acc_endpoint_sendOutgoingData((uint64_t)v4, v10);
        if (v10) {
          CFRelease(v10);
        }
        if ((v12 & 1) != 0) {
          return 1LL;
        }
      }
    }

    else
    {
      int v15 = (os_log_s *)logObjectForModule_1(55);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_endpoint_sendOutgoingData_cold_2();
      }
    }
  }

  else
  {
    uint64_t v14 = (os_log_s *)logObjectForModule_1(55);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_endpoint_processIncomingData_cold_1();
    }
  }

  return 0LL;
}

uint64_t mfi4Auth_endpoint_setEndpointSecureTunnelDataReceiveTypeHandler( const void *a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    if (a3)
    {
      EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
      return mfi4Auth_protocol_messageHandler_setEndpointSecureTunnelDataReceiveTypeHandler( *(void *)(EndpointWithUUID[7] + 8LL),  a2,  a3);
    }

    unsigned int v8 = (os_log_s *)logObjectForModule_1(55);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_endpoint_setEndpointSecureTunnelDataReceiveTypeHandler_cold_2();
    }
  }

  else
  {
    unsigned int v7 = (os_log_s *)logObjectForModule_1(55);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_endpoint_processIncomingData_cold_1();
    }
  }

  return 0LL;
}

void ___mfi4Auth_endpoint_isEndpointSupportsMutualAuth_block_invoke(id a1)
{
  if (gLogObjects) {
    BOOL v1 = gNumLogObjects < 1;
  }
  else {
    BOOL v1 = 1;
  }
  if (v1)
  {
    BOOL v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    BOOL v2 = *(os_log_s **)gLogObjects;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    uint64_t v6 = "_mfi4Auth_endpoint_isEndpointSupportsMutualAuth_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s: initIdentityCertStates ... ",  (uint8_t *)&v5,  0xCu);
  }

  int inited = mfi4Auth_protocol_initIdentityCertStates();
  if (gLogObjects && gNumLogObjects >= 1)
  {
    uint64_t v4 = *(os_log_s **)gLogObjects;
  }

  else
  {
    uint64_t v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315394;
    uint64_t v6 = "_mfi4Auth_endpoint_isEndpointSupportsMutualAuth_block_invoke";
    __int16 v7 = 1024;
    int v8 = inited;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s: initIdentityCertStates ... errNo %d",  (uint8_t *)&v5,  0x12u);
  }

void ___mfi4Auth_endpoint_sendAuthSetupStart_block_invoke(uint64_t a1)
{
  __int16 v21 = 0LL;
  if (gLogObjects && gNumLogObjects >= 56)
  {
    BOOL v2 = *(os_log_s **)(gLogObjects + 440);
  }

  else
  {
    BOOL v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    CFTypeID v23 = "_mfi4Auth_endpoint_sendAuthSetupStart_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }

  uint64_t v4 = *(const void **)(a1 + 32);
  uint64_t v3 = (CFTypeRef *)(a1 + 32);
  EndpointWithUUID = acc_manager_getEndpointWithUUID(v4);
  if (EndpointWithUUID)
  {
    uint64_t v6 = EndpointWithUUID;
    if (*((_DWORD *)EndpointWithUUID + 7))
    {
      uint64_t v7 = EndpointWithUUID[7];
      if (v7)
      {
        if (mfi4Auth_protocol_authSetupStart(*(void *)(v7 + 8), (uint64_t *)&v21))
        {
          char v13 = (os_log_s *)logObjectForModule_1(55);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
            ___mfi4Auth_endpoint_sendAuthSetupStart_block_invoke_cold_4(v13, v14, v15, v16, v17, v18, v19, v20);
          }
        }

        else
        {
          mfi4Auth_endpoint_sendOutgoingData(v7, (uint64_t)v21);
          if (*((_DWORD *)v6 + 6) == 13
            && (acc_userDefaults_BOOLForKey((uint64_t)@"DisableNFCAuthTimer") & 1) == 0)
          {
            int v8 = *(dispatch_source_s **)(v7 + 32);
            dispatch_time_t v9 = dispatch_time(0LL, 3000000000LL);
            dispatch_source_set_timer(v8, v9, 0xFFFFFFFFFFFFFFFFLL, 0LL);
          }
        }
      }

      else
      {
        char v12 = (os_log_s *)logObjectForModule_1(55);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
          ___mfi4Auth_endpoint_sendAuthSetupStart_block_invoke_cold_3();
        }
      }
    }

    else
    {
      uint64_t v11 = (os_log_s *)logObjectForModule_1(55);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        ___mfi4Auth_endpoint_sendAuthSetupStart_block_invoke_cold_2();
      }
    }
  }

  else
  {
    uint64_t v10 = (os_log_s *)logObjectForModule_1(55);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      ___mfi4Auth_endpoint_sendAuthSetupStart_block_invoke_cold_1();
    }
  }

  if (v21)
  {
    free(v21);
    __int16 v21 = 0LL;
  }

  if (*v3) {
    CFRelease(*v3);
  }
}

void ___mfi4Auth_endpoint_handlePropertiesDidChange_block_invoke(uint64_t a1)
{
  EndpointWithUUID = (pthread_mutex_t *)acc_manager_getEndpointWithUUID(*(const void **)(a1 + 32));
  if (EndpointWithUUID)
  {
    uint64_t v3 = EndpointWithUUID;
    if (*(_DWORD *)&EndpointWithUUID->__opaque[20] == 14)
    {
      if (*(void *)&EndpointWithUUID->__opaque[48])
      {
        uint64_t v4 = acc_endpoint_copyProperty(EndpointWithUUID, kCFACCProperties_Endpoint_NFC_SessionOpen);
        if (v4)
        {
          int v5 = (const __CFBoolean *)v4;
          CFTypeID v6 = CFGetTypeID(v4);
          if (v6 == CFBooleanGetTypeID() && CFBooleanGetValue(v5) == 1)
          {
            if (gLogObjects && gNumLogObjects >= 56)
            {
              uint64_t v7 = *(os_log_s **)(gLogObjects + 440);
            }

            else
            {
              uint64_t v7 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)int v8 = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "_mfi4Auth_endpoint_handlePropertiesDidChange: sendAuthSetupStart",  v8,  2u);
            }

            _mfi4Auth_endpoint_sendAuthSetupStart(*(void **)&v3->__opaque[48]);
          }
        }
      }
    }
  }

  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void *qiAuth_endpoint_create(uint64_t a1)
{
  if (a1)
  {
    BOOL v2 = calloc(1uLL, 0x840uLL);
    uint64_t v3 = v2;
    if (v2)
    {
      void *v2 = a1;
      uint64_t v4 = *(const __CFString **)(a1 + 16);
      CFStringRef v5 = v4 ? CFStringCreateCopy(kCFAllocatorDefault, v4) : 0LL;
      v3[2] = v5;
      CFTypeID v6 = *(const __CFString **)(a1 + 8);
      CFStringRef v7 = v6 ? CFStringCreateCopy(kCFAllocatorDefault, v6) : 0LL;
      v3[1] = v7;
      *((_WORD *)v3 + 1052) = 128;
      int v8 = calloc(1uLL, 0x80uLL);
      v3[262] = v8;
      *((_WORD *)v3 + 1053) = 0;
      *((_OWORD *)v3 + 129) = 0u;
      *((_OWORD *)v3 + 130) = 0u;
      *(_OWORD *)(v3 + 249) = 0u;
      *(_OWORD *)(v3 + 251) = 0u;
      *(_OWORD *)(v3 + 253) = 0u;
      *(_OWORD *)(v3 + 255) = 0u;
      *((_DWORD *)v3 + 514) = 0;
      if (v8)
      {
        CFStringRef Copy = (const __CFString *)v3[2];
        if (Copy)
        {
          CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, Copy);
          uint64_t v10 = v3[262];
        }

        else
        {
          uint64_t v10 = (uint64_t)v8;
        }

        v3[248] = v3 + 5;
        if (!qiAuth_protocol_init( (uint64_t)(v3 + 5),  (uint64_t)Copy,  0,  1,  1u,  1,  v10,  *((_WORD *)v3 + 1052)))
        {
          dispatch_queue_t v11 = dispatch_queue_create("QiAuthEndpoint", 0LL);
          v3[4] = v11;
          if (v11)
          {
            dispatch_set_context(v11, v3);
            dispatch_set_finalizer_f( (dispatch_object_t)v3[4],  (dispatch_function_t)_qiAuth_endpoint_dispatchQueueFinalizer);
            uint64_t v12 = 0LL;
            while (1)
            {
              char v13 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  (dispatch_queue_t)v3[4]);
              uint64_t v14 = &v3[v12];
              v14[249] = v13;
              if (!v13) {
                break;
              }
              dispatch_source_set_timer(v13, 0xFFFFFFFFFFFFFFFFLL, 0LL, 0LL);
              uint64_t v15 = (dispatch_source_s *)v14[249];
              handler[0] = _NSConcreteStackBlock;
              handler[1] = 0x40000000LL;
              handler[2] = __qiAuth_endpoint_create_block_invoke;
              handler[3] = &__block_descriptor_tmp_8;
              handler[4] = v3;
              int v30 = v12;
              dispatch_source_set_event_handler(v15, handler);
              dispatch_activate((dispatch_object_t)v14[249]);
              if (++v12 == 4)
              {
                acc_platform_packetLogging_logEvent( *v3,  "ATTACH",  (uint64_t)"QiAuth accessory attached!",  v16,  v17,  v18,  v19,  v20,  v28);
                return v3;
              }
            }
          }
        }
      }
    }
  }

  else
  {
    int v22 = (os_log_s *)logObjectForModule_19();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_endpoint_create_cold_1();
    }
    uint64_t v3 = 0LL;
  }

  if (v3[248])
  {
    if (gLogObjects && gNumLogObjects >= 60)
    {
      CFTypeID v23 = *(os_log_s **)(gLogObjects + 472);
    }

    else
    {
      CFTypeID v23 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v28) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Cleaning up pQiAuthProtocol in create",  (uint8_t *)&v28,  2u);
    }

    qiAuth_protocol_cleanup(v3[248], 0LL, 0LL);
    v3[248] = 0LL;
  }

  for (uint64_t i = 249LL; i != 253; ++i)
  {
    CFDataRef v25 = (dispatch_object_s *)v3[i];
    if (v25)
    {
      dispatch_release(v25);
      v3[i] = 0LL;
    }
  }

  uint64_t v26 = (dispatch_object_s *)v3[4];
  if (v26)
  {
    v3[4] = 0LL;
    dispatch_release(v26);
  }

  else
  {
    uint64_t v27 = (void *)v3[262];
    if (v27) {
      free(v27);
    }
    free(v3);
  }

  return 0LL;
}

void *logObjectForModule_19()
{
  if (gLogObjects && gNumLogObjects >= 60) {
    return *(void **)(gLogObjects + 472);
  }
  v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

void _qiAuth_endpoint_dispatchQueueFinalizer(uint64_t *a1)
{
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 60)
    {
      BOOL v2 = *(os_log_s **)(gLogObjects + 472);
    }

    else
    {
      BOOL v2 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CFStringRef v7 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Cleaning up pQiAuthProtocol in queue finalizer",  v7,  2u);
    }

    qiAuth_protocol_cleanup(a1[248], 0LL, 0LL);
    a1[248] = 0LL;
    for (uint64_t i = 249LL; i != 253; ++i)
    {
      uint64_t v4 = (dispatch_object_s *)a1[i];
      if (v4)
      {
        dispatch_release(v4);
        a1[i] = 0LL;
      }
    }

    CFStringRef v5 = (void *)a1[262];
    if (v5) {
      free(v5);
    }
    free(a1);
  }

  else
  {
    CFTypeID v6 = (os_log_s *)logObjectForModule_19();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_endpoint_create_cold_1();
    }
  }

void __qiAuth_endpoint_create_block_invoke(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 60)
  {
    BOOL v2 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    BOOL v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(int *)(a1 + 40);
    BOOL v4 = *(void *)(*(void *)(a1 + 32) + 8 * v3 + 2024) != 0LL;
    v7[0] = 67109376;
    v7[1] = v4;
    __int16 v8 = 1024;
    int v9 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "QiAuth timer source fired!!! qiAuthTimerCallback(%d), timerID %d",  (uint8_t *)v7,  0xEu);
  }

  uint64_t v5 = *(void *)(a1 + 32);
  CFTypeID v6 = *(void (**)(void))(v5 + 8LL * *(int *)(a1 + 40) + 2024);
  if (v6)
  {
    v6(*(void *)(v5 + 1984));
    *(void *)(*(void *)(a1 + 32) + 8LL * *(int *)(a1 + 40) + 2024) = 0LL;
  }

uint64_t qiAuth_endpoint_publish(uint64_t *a1)
{
  if (gLogObjects && gNumLogObjects >= 60)
  {
    BOOL v2 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    BOOL v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "QiAuth endpoint_publish", buf, 2u);
  }

  if (!a1) {
    return 0LL;
  }
  uint64_t v3 = *a1;
  if (!*a1 || !a1[262] || !*((_WORD *)a1 + 1052)) {
    return 0LL;
  }
  uint64_t v4 = gLogObjects;
  int v5 = gNumLogObjects;
  if (gLogObjects && gNumLogObjects >= 60)
  {
    CFTypeID v6 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    CFTypeID v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      uint64_t v18 = v4;
      __int16 v19 = 1024;
      int v20 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
      uint64_t v3 = *a1;
    }
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(v3 + 24);
    *(_DWORD *)buf = 67109120;
    LODWORD(v18) = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "QiAuth publish: transportType %{coreacc:ACCEndpoint_TransportType_t}d",  buf,  8u);
    uint64_t v3 = *a1;
  }

  __int16 v8 = (const __CFString *)a1[2];
  CFStringRef v9 = v8 ? CFStringCreateCopy(kCFAllocatorDefault, v8) : 0LL;
  if (gLogObjects && gNumLogObjects >= 60)
  {
    uint64_t v10 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    uint64_t v10 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Cleaning up pQiAuthProtocol in publish",  buf,  2u);
  }

  qiAuth_protocol_cleanup(a1[248], 0LL, 0LL);
  uint64_t result = qiAuth_protocol_init(a1[248], (uint64_t)v9, 0, 1, 1u, 1, a1[262], *((_WORD *)a1 + 1052));
  if ((_DWORD)result)
  {
LABEL_31:
    if (gLogObjects && gNumLogObjects >= 60)
    {
      uint64_t v12 = *(os_log_s **)(gLogObjects + 472);
    }

    else
    {
      uint64_t v12 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *(_DWORD *)(*a1 + 24);
      *(_DWORD *)buf = 67109120;
      LODWORD(v18) = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "QiAuth publish: transportType %{coreacc:ACCEndpoint_TransportType_t}d, start protocol!!!",  buf,  8u);
    }

    dispatch_time_t v14 = dispatch_time(0LL, 100000000LL);
    uint64_t v15 = (dispatch_queue_s *)a1[4];
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = __qiAuth_endpoint_publish_block_invoke;
    block[3] = &__block_descriptor_tmp_4_2;
    block[4] = a1;
    dispatch_after(v14, v15, block);
    return 1LL;
  }

  return result;
}

uint64_t __qiAuth_endpoint_publish_block_invoke(uint64_t a1)
{
  return qiAuth_protocol_start(*(void *)(*(void *)(a1 + 32) + 1984LL));
}

uint64_t qiAuth_endpoint_destroy( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    uint64_t v9 = *a1;
    if (*a1)
    {
      acc_platform_packetLogging_logEvent( *(void *)v9,  "DETACH",  (uint64_t)"QiAuth accessory detached!",  a4,  a5,  a6,  a7,  a8,  v16);
      dispatch_release(*(dispatch_object_t *)(v9 + 32));
      *a1 = 0LL;
      return 1LL;
    }

    if (gLogObjects && gNumLogObjects >= 60)
    {
      dispatch_queue_t v11 = *(os_log_s **)(gLogObjects + 472);
    }

    else
    {
      dispatch_queue_t v11 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0LL;
    if (v12)
    {
      LOWORD(v16) = 0;
      int v13 = "QiAuth Endpoint Destroy. *ppProtocolEndpoint is null!";
      dispatch_time_t v14 = (uint8_t *)&v16;
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v13, v14, 2u);
      return 0LL;
    }
  }

  else
  {
    dispatch_queue_t v11 = (os_log_s *)logObjectForModule_19();
    BOOL v15 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0LL;
    if (v15)
    {
      __int16 v17 = 0;
      int v13 = "QiAuth Endpoint Destroy. NULL ppProtocolEndpoint!";
      dispatch_time_t v14 = (uint8_t *)&v17;
      goto LABEL_11;
    }
  }

  return result;
}

BOOL qiAuth_endpoint_processIncomingData(BOOL result, CFDataRef theData)
{
  if (result)
  {
    uint64_t v3 = (uint64_t *)result;
    uint64_t result = 0LL;
    if (theData)
    {
      if (v3[248])
      {
        unsigned int Length = CFDataGetLength(theData);
        if (Length < 2)
        {
          return 0LL;
        }

        else
        {
          CFRetain(theData);
          unsigned int v5 = *CFDataGetBytePtr(theData);
          acc_platform_packetLogging_logQiAuthMsg(*v3, theData, 1);
          uint64_t result = qiAuth_protocol_checkValidMessageHeaderAndSize(v3[248], v5, Length);
          if (result)
          {
            CFTypeID v6 = (dispatch_queue_s *)v3[4];
            block[0] = _NSConcreteStackBlock;
            block[1] = 0x40000000LL;
            block[2] = __qiAuth_endpoint_processIncomingData_block_invoke;
            block[3] = &__block_descriptor_tmp_7_0;
            block[4] = v3;
            void block[5] = theData;
            char v9 = v5;
            unsigned int v8 = Length;
            dispatch_async(v6, block);
            return 1LL;
          }
        }
      }
    }
  }

  return result;
}

void __qiAuth_endpoint_processIncomingData_block_invoke(uint64_t a1)
{
  BOOL v2 = (uint64_t *)(a1 + 40);
  if (!_qiAuth_endpoint_handleMessage(*(void *)(a1 + 32), *(CFDataRef *)(a1 + 40)))
  {
    if (gLogObjects && gNumLogObjects >= 60)
    {
      uint64_t v3 = *(os_log_s **)(gLogObjects + 472);
    }

    else
    {
      uint64_t v3 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      __qiAuth_endpoint_processIncomingData_block_invoke_cold_1(a1, v2, v3);
    }
  }

  CFRelease((CFTypeRef)*v2);
}

BOOL _qiAuth_endpoint_handleMessage(uint64_t a1, CFDataRef theData)
{
  if (a1)
  {
    if (*(void *)(a1 + 2096) && *(_WORD *)(a1 + 2104))
    {
      uint64_t v3 = *(void *)(a1 + 1984);
      BytePtr = (char *)CFDataGetBytePtr(theData);
      unsigned __int16 Length = CFDataGetLength(theData);
      return qiAuth_protocol_processIncomingData(v3, BytePtr, Length) < 2;
    }

    int v7 = (os_log_s *)logObjectForModule_19();
    BOOL result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      _qiAuth_endpoint_handleMessage_cold_2();
      return 0LL;
    }
  }

  else
  {
    unsigned int v8 = (os_log_s *)logObjectForModule_19();
    BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      mfi4Auth_endpoint_create_cold_1();
      return 0LL;
    }
  }

  return result;
}

uint64_t qiAuth_endpoint_sendOutgoingData(uint64_t *a1, const UInt8 *a2, CFIndex length)
{
  if (a1)
  {
    CFDataRef v4 = CFDataCreateWithBytesNoCopy(kCFAllocatorDefault, a2, length, kCFAllocatorNull);
    acc_platform_packetLogging_logQiAuthMsg(*a1, v4, 0);
    uint64_t v5 = acc_endpoint_sendOutgoingData(*a1, v4);
    if (v4) {
      CFRelease(v4);
    }
  }

  else
  {
    int v7 = (os_log_s *)logObjectForModule_19();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_endpoint_create_cold_1();
    }
    return 0LL;
  }

  return v5;
}

uint64_t qiAuth_endpoint_setAuthState( uint64_t **a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a2)
    {
      char v9 = *a1;
      if (v9)
      {
        uint64_t v10 = *v9;
        if (*v9)
        {
          switch(a2)
          {
            case 1:
              dispatch_queue_t v11 = "AUTH FAILED";
              BOOL v12 = "QiAuth accessory authentication Failed!";
              break;
            case 3:
              dispatch_queue_t v11 = "AUTH TIMEOUT";
              BOOL v12 = "QiAuth accessory authentication Timed Out!";
              break;
            case 2:
              dispatch_queue_t v11 = "AUTH PASSED";
              BOOL v12 = "QiAuth accessory authentication Passed!";
              break;
            default:
              return acc_connection_setAuthStatus(v10, 3LL, a2);
          }

          acc_platform_packetLogging_logEvent((uint64_t)v9, v11, (uint64_t)v12, a4, a5, a6, a7, a8, v18);
          return acc_connection_setAuthStatus(v10, 3LL, a2);
        }

        __int16 v17 = (os_log_s *)logObjectForModule_19();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          qiAuth_endpoint_setAuthState_cold_4();
        }
      }

      else
      {
        uint64_t v16 = (os_log_s *)logObjectForModule_19();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
          qiAuth_endpoint_setAuthState_cold_3();
        }
      }
    }

    else
    {
      BOOL v15 = (os_log_s *)logObjectForModule_19();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        qiAuth_endpoint_setAuthState_cold_2();
      }
    }
  }

  else
  {
    dispatch_time_t v14 = (os_log_s *)logObjectForModule_19();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_endpoint_create_cold_1();
    }
  }

  return 0LL;
}

uint64_t _pingHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0LL;
  if (a1)
  {
    if (a2)
    {
      uint64_t Feature = (int *)iap2_feature_getFeature(a1, 0x12u);
      if (Feature
        || (iap2_features_createFeature(a1, 0x12u),
            uint64_t result = iap2_feature_getFeature(a1, 0x12u),
            (uint64_t Feature = (int *)result) != 0LL))
      {
        if (gLogObjects && gNumLogObjects >= 27)
        {
          CFTypeID v6 = *(os_log_s **)(gLogObjects + 208);
        }

        else
        {
          CFTypeID v6 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          int v12 = 67109120;
          int MsgID = iAP2MsgGetMsgID(a2);
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Received Ping message (0x%04X)!",  (uint8_t *)&v12,  8u);
        }

        ++*Feature;
        if (gLogObjects && gNumLogObjects >= 27)
        {
          int v7 = *(os_log_s **)(gLogObjects + 208);
        }

        else
        {
          int v7 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          int v8 = *Feature;
          int v12 = 67109120;
          int MsgID = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Received %d ping message(s) total.",  (uint8_t *)&v12,  8u);
        }

        if (gLogObjects && gNumLogObjects >= 27)
        {
          char v9 = *(os_log_s **)(gLogObjects + 208);
        }

        else
        {
          char v9 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          int v10 = iAP2MsgGetMsgID(a2);
          int v12 = 67109120;
          int MsgID = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Sending Ping message (0x%04X)!",  (uint8_t *)&v12,  8u);
        }

        iAP2MsgInit(a1 + 120, 0, *(void *)(a1 + 192), 0xFFFF, 0LL, 0LL);
        memcpy(*(void **)(a1 + 144), *(const void **)(a2 + 24), *(unsigned int *)(a2 + 16));
        uint64_t v11 = *(void *)(a1 + 144);
        *(void *)(a1 + 152) = v11 + iAP2MsgGetMsgLen(a2);
        return iap2_sessionControl_sendOutgoingMessage((uint64_t *)a1, a1 + 120);
      }
    }
  }

  return result;
}

void *logObjectForModule_20()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 27;
  }
  else {
    BOOL v0 = 1;
  }
  if (!v0) {
    return *(void **)(gLogObjects + 208);
  }
  BOOL v1 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v1;
}

uint64_t _sendPingAccHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0LL;
  if (a1)
  {
    if (a2)
    {
      uint64_t Feature = iap2_feature_getFeature(a1, 0x12u);
      if (Feature
        || (iap2_features_createFeature(a1, 0x12u), uint64_t result = iap2_feature_getFeature(a1, 0x12u), (Feature = result) != 0))
      {
        if (gLogObjects && gNumLogObjects >= 27)
        {
          CFTypeID v6 = *(os_log_s **)(gLogObjects + 208);
        }

        else
        {
          CFTypeID v6 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          int v11 = 67109120;
          int MsgID = iAP2MsgGetMsgID(a2);
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Received SendPingAcc message (0x%04X)!",  (uint8_t *)&v11,  8u);
        }

        ++*(_DWORD *)(Feature + 4);
        if (gLogObjects && gNumLogObjects >= 27)
        {
          int v7 = *(os_log_s **)(gLogObjects + 208);
        }

        else
        {
          int v7 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          int v8 = *(_DWORD *)(Feature + 4);
          int v11 = 67109120;
          int MsgID = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Received %d SendPingAcc message(s) total.",  (uint8_t *)&v11,  8u);
        }

        iAP2MsgInit(a1 + 120, 5, *(void *)(a1 + 192), 0xFFFF, 0LL, 0LL);
        memcpy(*(void **)(a1 + 144), *(const void **)(a2 + 24), *(unsigned int *)(a2 + 16));
        *(void *)(a1 + 152) = *(void *)(a1 + 144) + *(unsigned int *)(a2 + 16);
        iAP2MsgSetMsgID(a1 + 120, 5);
        if (gLogObjects && gNumLogObjects >= 27)
        {
          char v9 = *(os_log_s **)(gLogObjects + 208);
        }

        else
        {
          char v9 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          int v10 = iAP2MsgGetMsgID(a1 + 120);
          int v11 = 67109120;
          int MsgID = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Sending PingAcc message (0x%04X)!",  (uint8_t *)&v11,  8u);
        }

        return iap2_sessionControl_sendOutgoingMessage((uint64_t *)a1, a1 + 120);
      }
    }
  }

  return result;
}

uint64_t _pingAccHandler(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t Feature = iap2_feature_getFeature(a1, 0x12u);
      if (Feature || (iap2_features_createFeature(a1, 0x12u), (uint64_t Feature = iap2_feature_getFeature(a1, 0x12u)) != 0))
      {
        if (gLogObjects && gNumLogObjects >= 27)
        {
          uint64_t v5 = *(os_log_s **)(gLogObjects + 208);
        }

        else
        {
          uint64_t v5 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          int v9 = 67109120;
          int MsgID = iAP2MsgGetMsgID(a2);
          _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Received PingAcc message (0x%04X)!",  (uint8_t *)&v9,  8u);
        }

        ++*(_DWORD *)(Feature + 8);
        if (gLogObjects && gNumLogObjects >= 27)
        {
          CFTypeID v6 = *(os_log_s **)(gLogObjects + 208);
        }

        else
        {
          CFTypeID v6 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          int v7 = *(_DWORD *)(Feature + 8);
          int v9 = 67109120;
          int MsgID = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Received %d PingAcc message(s) total.",  (uint8_t *)&v9,  8u);
        }
      }
    }
  }

  return 0LL;
}

uint64_t _userNotificationHandler(void *a1, uint64_t a2)
{
  if (!a1 || !*a1) {
    return 0LL;
  }
  uint64_t v3 = 0LL;
  if (a2 && *(void *)*a1)
  {
    unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0LL);
    if (gLogObjects && gNumLogObjects >= 27)
    {
      uint64_t v5 = *(os_log_s **)(gLogObjects + 208);
    }

    else
    {
      uint64_t v5 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)CFTypeRef v54 = iAP2MsgGetMsgID(a2);
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Received User Notification message (0x%04X)!",  buf,  8u);
    }

    if (!FirstParam)
    {
      uint64_t v43 = 0LL;
      uint64_t v44 = 0LL;
      CFStringRef v47 = 0LL;
      CFStringRef cf = 0LL;
      CFStringRef v45 = 0LL;
      CFStringRef v46 = 0LL;
      double v6 = 0.0;
      unsigned int v42 = 1;
LABEL_63:
      CFStringRef Identifier = acc_userNotifications_createIdentifier((uint64_t)@"test", a1[1]);
      CFStringRef v23 = v47;
      CFStringRef v25 = v45;
      CFStringRef v24 = v46;
      uint64_t v26 = ACCUNCreate( v42,  (uint64_t)cf,  (uint64_t)v45,  (uint64_t)v46,  (uint64_t)v47,  0LL,  v43 & 1,  (uint64_t)Identifier,  v6,  a1[2]);
      if (Identifier) {
        CFRelease(Identifier);
      }
      v49[0] = _NSConcreteStackBlock;
      v49[1] = 0x40000000LL;
      v49[2] = ___userNotificationHandler_block_invoke;
      v49[3] = &__block_descriptor_tmp_9;
      char v51 = v44 & 1;
      v49[4] = a1;
      char v52 = BYTE4(v43) & 1;
      __int16 v50 = WORD2(v44);
      ACCUNManagerPresentNotification(v26, v49);
      if (v26) {
        CFRelease(v26);
      }
      uint64_t v3 = 1LL;
      goto LABEL_68;
    }

    uint64_t v43 = 0LL;
    uint64_t v44 = 0LL;
    CFStringRef v46 = 0LL;
    CFStringRef v47 = 0LL;
    CFStringRef v45 = 0LL;
    CFStringRef cf = 0LL;
    unsigned int v42 = 1;
    double v6 = 0.0;
    while (1)
    {
      int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
      uint64_t v8 = gLogObjects;
      int v9 = gNumLogObjects;
      if (gLogObjects) {
        BOOL v10 = gNumLogObjects < 27;
      }
      else {
        BOOL v10 = 1;
      }
      if (v10)
      {
        int v11 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)CFTypeRef v54 = v8;
          *(_WORD *)&v54[8] = 1024;
          int v55 = v9;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          int v11 = (os_log_s *)&_os_log_default;
        }
      }

      else
      {
        int v11 = *(os_log_s **)(gLogObjects + 208);
      }

      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)CFTypeRef v54 = ParamID;
        _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "msgParamID: %d", buf, 8u);
      }

      switch(ParamID)
      {
        case 0:
          *(_DWORD *)buf = -1431655766;
          __int16 DataAsU16 = iAP2MsgGetDataAsU16(FirstParam, buf);
          if (!*(_DWORD *)buf)
          {
            WORD2(v44) = DataAsU16;
            BYTE4(v43) = 1;
            goto LABEL_60;
          }

          uint64_t v28 = (os_log_s *)logObjectForModule_20();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
            _userNotificationHandler_cold_1(a2);
          }
          goto LABEL_96;
        case 1:
          *(_DWORD *)buf = -1431655766;
          unsigned int DataAsU8 = iAP2MsgGetDataAsU8(FirstParam, buf);
          if (*(_DWORD *)buf)
          {
            uint64_t v29 = (os_log_s *)logObjectForModule_20();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
              iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_2(a2);
            }
            goto LABEL_96;
          }

          if (DataAsU8 > 3) {
            int v17 = 1;
          }
          else {
            int v17 = DataAsU8;
          }
          unsigned int v42 = v17;
          goto LABEL_60;
        case 2:
          *(_DWORD *)buf = -1431655766;
          if (cf) {
            CFRelease(cf);
          }
          CFStringRef cf = iAP2MsgCopyDataAsCFString(FirstParam, (BOOL *)buf);
          if (!*(_DWORD *)buf) {
            goto LABEL_60;
          }
          int v30 = (os_log_s *)logObjectForModule_20();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
            iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_3(a2);
          }
          goto LABEL_96;
        case 3:
          *(_DWORD *)buf = -1431655766;
          if (v45) {
            CFRelease(v45);
          }
          CFStringRef v45 = iAP2MsgCopyDataAsCFString(FirstParam, (BOOL *)buf);
          if (!*(_DWORD *)buf) {
            goto LABEL_60;
          }
          CFTypeID v32 = (os_log_s *)logObjectForModule_20();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
            iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_4(a2);
          }
          goto LABEL_96;
        case 4:
          *(_DWORD *)buf = -1431655766;
          if (v46) {
            CFRelease(v46);
          }
          CFStringRef v46 = iAP2MsgCopyDataAsCFString(FirstParam, (BOOL *)buf);
          if (!*(_DWORD *)buf) {
            goto LABEL_60;
          }
          int v34 = (os_log_s *)logObjectForModule_20();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
            iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_5(a2);
          }
          goto LABEL_96;
        case 5:
          *(_DWORD *)buf = -1431655766;
          if (v47) {
            CFRelease(v47);
          }
          CFStringRef v47 = iAP2MsgCopyDataAsCFString(FirstParam, (BOOL *)buf);
          if (!*(_DWORD *)buf) {
            goto LABEL_60;
          }
          uint64_t v36 = (os_log_s *)logObjectForModule_20();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
            iap2_CarPlayStartSession_cold_11(a2);
          }
          goto LABEL_96;
        case 6:
          *(_DWORD *)buf = -1431655766;
          BOOL DataAsBool = iAP2MsgGetDataAsBool(FirstParam, (BOOL *)buf);
          if (*(_DWORD *)buf)
          {
            __int16 v38 = (os_log_s *)logObjectForModule_20();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_4(a2);
            }
            goto LABEL_96;
          }

          LOBYTE(v43) = DataAsBool;
          goto LABEL_60;
        case 7:
          *(_DWORD *)buf = -1431655766;
          unsigned int v19 = iAP2MsgGetDataAsU16(FirstParam, buf);
          if (*(_DWORD *)buf)
          {
            int v39 = (os_log_s *)logObjectForModule_20();
            if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
              _userNotificationHandler_cold_8(a2);
            }
            goto LABEL_96;
          }

          double v6 = (double)v19;
          goto LABEL_60;
        case 8:
          *(_DWORD *)buf = -1431655766;
          BOOL v20 = iAP2MsgGetDataAsBool(FirstParam, (BOOL *)buf);
          if (*(_DWORD *)buf)
          {
            __int16 v40 = (os_log_s *)logObjectForModule_20();
            if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
              iap2_CarPlayStartSession_cold_12(a2);
            }
LABEL_96:
            uint64_t v3 = 0LL;
            CFStringRef v24 = v46;
            CFStringRef v23 = v47;
            CFStringRef v25 = v45;
LABEL_68:
            if (cf) {
              CFRelease(cf);
            }
            if (v25) {
              CFRelease(v25);
            }
            if (v24) {
              CFRelease(v24);
            }
            if (v23) {
              CFRelease(v23);
            }
            return v3;
          }

          LOBYTE(v44) = v20;
LABEL_60:
          unint64_t FirstParam = iAP2MsgGetNextParam(a2, 0LL, FirstParam);
          if (!FirstParam) {
            goto LABEL_63;
          }
          break;
        default:
          uint64_t v13 = gLogObjects;
          int v14 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 27)
          {
            BOOL v15 = *(os_log_s **)(gLogObjects + 208);
          }

          else
          {
            BOOL v15 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)CFTypeRef v54 = v13;
              *(_WORD *)&v54[8] = 1024;
              int v55 = v14;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              BOOL v15 = (os_log_s *)&_os_log_default;
            }
          }

          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            int MsgID = iAP2MsgGetMsgID(a2);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)CFTypeRef v54 = ParamID;
            *(_WORD *)&v54[4] = 1024;
            *(_DWORD *)&v54[6] = MsgID;
            _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param",  buf,  0xEu);
          }

          goto LABEL_60;
      }
    }
  }

  return v3;
}

void ___userNotificationHandler_block_invoke(uint64_t a1, unsigned int a2)
{
  char v2 = a2;
  if (a2 > 2) {
    CFDataRef v4 = @"[Unknown]";
  }
  else {
    CFDataRef v4 = (const __CFString *)*((void *)&off_1001FC138 + (int)a2);
  }
  if (gLogObjects) {
    BOOL v5 = gNumLogObjects < 27;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    double v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    double v6 = *(os_log_s **)(gLogObjects + 208);
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 138412290;
    int v12 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "User notification response: %@",  (uint8_t *)&v11,  0xCu);
  }

  CFRelease(v4);
  if (*(_BYTE *)(a1 + 42))
  {
    if (gLogObjects && gNumLogObjects >= 27)
    {
      int v7 = *(os_log_s **)(gLogObjects + 208);
    }

    else
    {
      int v7 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 67109120;
      LODWORD(v12) = 2;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Sending user notification response message (0x%04X)!",  (uint8_t *)&v11,  8u);
    }

    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = v8 + 120;
    iAP2MsgInit(v8 + 120, 2, *(void *)(v8 + 192), 0xFFFF, 0LL, 0LL);
    if (*(_BYTE *)(a1 + 43)) {
      BOOL v10 = iAP2MsgAddU16Param(v9, 0LL, 0, *(unsigned __int16 *)(a1 + 40)) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (iAP2MsgAddU8Param(v9, 0LL, 1, v2) || !v10) {
      iap2_sessionControl_sendOutgoingMessage(*(uint64_t **)(a1 + 32), v9);
    }
  }

uint64_t _setTransportLockoutHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0LL;
  if (!a1 || !a2) {
    return result;
  }
  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0LL);
  if (gLogObjects) {
    BOOL v6 = gNumLogObjects < 27;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    int v7 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    int v7 = *(os_log_s **)(gLogObjects + 208);
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v20) = iAP2MsgGetMsgID(a2);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Received Set Transport Lockout message (0x%04X)!",  buf,  8u);
  }

  if (!FirstParam)
  {
LABEL_31:
    acc_manager_disableLockoutForAllTransportTypes();
    return 1LL;
  }

  unsigned int v8 = 0;
  uint64_t v9 = 17LL;
  do
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
    uint64_t v11 = gLogObjects;
    int v12 = gNumLogObjects;
    if (gLogObjects) {
      BOOL v13 = gNumLogObjects < 27;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13)
    {
      int v14 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        uint64_t v20 = v11;
        __int16 v21 = 1024;
        int v22 = v12;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
        int v14 = (os_log_s *)&_os_log_default;
      }
    }

    else
    {
      int v14 = *(os_log_s **)(gLogObjects + 208);
    }

    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v20) = ParamID;
      _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "msgParamID: %d", buf, 8u);
    }

    if (ParamID == 1)
    {
      *(_DWORD *)buf = -1431655766;
      unsigned int DataAsU32 = iAP2MsgGetDataAsU32(FirstParam, buf);
      if (*(_DWORD *)buf)
      {
        uint64_t v18 = (os_log_s *)logObjectForModule_20();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
          iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_2(a2);
        }
        return 0LL;
      }

      unsigned int v8 = DataAsU32;
    }

    else
    {
      if (ParamID) {
        goto LABEL_29;
      }
      *(_DWORD *)buf = -1431655766;
      uint64_t DataAsU8 = iAP2MsgGetDataAsU8(FirstParam, buf);
      if (*(_DWORD *)buf)
      {
        int v17 = (os_log_s *)logObjectForModule_20();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          _userNotificationHandler_cold_1(a2);
        }
        return 0LL;
      }

      uint64_t v9 = DataAsU8;
    }

_DWORD *_createFeature_13(_DWORD *result)
{
  if (result)
  {
    uint64_t result = calloc(1uLL, 0xCuLL);
    if (result)
    {
      *(void *)uint64_t result = 0LL;
      result[2] = 0;
    }
  }

  return result;
}

BOOL _destroyFeature_13(void **a1)
{
  if (a1)
  {
    char v2 = *a1;
    if (*a1)
    {
      free(v2);
      *a1 = 0LL;
    }
  }

  return a1 != 0LL;
}

uint64_t _checkIdentificationInfo_11(uint64_t a1)
{
  uint64_t result = platform_systemInfo_isInternalBuild();
  if ((_DWORD)result)
  {
    char v4 = 0;
    uint64_t result = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&_checkIdentificationInfo_kMsgTestList, 5u, &v4);
    if (v4) {
      BOOL v3 = (_DWORD)result == 0;
    }
    else {
      BOOL v3 = 0;
    }
    if (v3)
    {
      iap2_identification_setIdentifiedForFeature(a1, 0x12u);
      return 0LL;
    }
  }

  return result;
}

double ACCAuthProtocol_PrintMessage(unsigned __int8 *a1, unsigned int a2, const char *a3, int a4, int a5)
{
  if (a1)
  {
    memset(v49, 0, sizeof(v49));
    int v24 = 0;
    int v10 = acc_auth_protocol_sizeofMessage((uint64_t)a1, a2, 0LL, &v24);
    __acc_auth_protocol_getMessagePayloadString(a1, a2, (char *)v49, 256);
    if (a4)
    {
      uint64_t v11 = "";
      if (a3) {
        int v12 = a3;
      }
      else {
        int v12 = "";
      }
      if (a3) {
        uint64_t v11 = " ";
      }
      int v13 = *a1;
      if ((v13 & 0xF8) == 0xA0) {
        int v14 = off_1001FC150[v13 - 160];
      }
      else {
        int v14 = "Unknown";
      }
      printf( "%s%smsg: hdr: %02X %02X %02X %02X \n    id [%s], ver %d, seq %d, sess %d, len %d \n    { %s } \n",  v12,  v11,  v13,  a1[1],  a1[2],  a1[3],  v14,  a1[1] >> 4,  a1[2] >> 4,  a1[2] & 0xF,  v24,  (const char *)v49);
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 55)
      {
        BOOL v15 = *(os_log_s **)(gLogObjects + 432);
      }

      else
      {
        BOOL v15 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          _parseIdentificationParams_cold_2();
        }
      }

      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        if (a3) {
          int v17 = a3;
        }
        else {
          int v17 = "";
        }
        if (a3) {
          uint64_t v18 = " ";
        }
        else {
          uint64_t v18 = "";
        }
        int v19 = *a1;
        unsigned int v20 = a1[1];
        unsigned int v21 = a1[2];
        int v22 = a1[3];
        if ((v19 & 0xF8) == 0xA0) {
          CFStringRef v23 = off_1001FC150[v19 - 160];
        }
        else {
          CFStringRef v23 = "Unknown";
        }
        *(_DWORD *)buf = 136317954;
        uint64_t v26 = v17;
        __int16 v27 = 2080;
        uint64_t v28 = v18;
        __int16 v29 = 1024;
        int v30 = v19;
        __int16 v31 = 1024;
        unsigned int v32 = v20;
        __int16 v33 = 1024;
        unsigned int v34 = v21;
        __int16 v35 = 1024;
        int v36 = v22;
        __int16 v37 = 2080;
        __int16 v38 = v23;
        __int16 v39 = 1024;
        unsigned int v40 = v20 >> 4;
        __int16 v41 = 1024;
        unsigned int v42 = v21 >> 4;
        __int16 v43 = 1024;
        int v44 = v21 & 0xF;
        __int16 v45 = 1024;
        int v46 = v24;
        __int16 v47 = 2080;
        uint64_t v48 = v49;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "%s%smsg: hdr: %02X %02X %02X %02X \n    id [%s], ver %d, seq %d, sess %d, len %d \n    { %s } \n",  buf,  0x5Au);
      }
    }

    if (a5) {
      *(void *)&double result = ACCAuthProtocol_PrintData(a1, v10).n128_u64[0];
    }
  }

  return result;
}

const char *__acc_auth_protocol_getMessagePayloadString(_BYTE *a1, unsigned int a2, char *a3, int a4)
{
  uint64_t v10 = 0LL;
  unsigned int v9 = 0;
  int v7 = (unsigned __int8 *)acc_auth_protocol_messagePayload((uint64_t)a1, a2, (_DWORD *)&v10 + 1, &v10, &v9);
  if (a1)
  {
    switch(*a1)
    {
      case 0xA0:
      case 0xA1:
        if (v9 < 9)
        {
          if (v9 == 8)
          {
            snprintf(a3, a4, "characteristics[0x%08X], authTypes(%d)[%02X %02X]");
          }

          else if (v9 < 7)
          {
            if (v9 >= 5) {
              snprintf(a3, a4, "characteristics[0x%08X], authTypes - insufficient bytes");
            }
          }

          else
          {
            snprintf(a3, a4, "characteristics[0x%08X], authTypes(%d)[%02X]");
          }
        }

        else
        {
          snprintf(a3, a4, "characteristics[0x%08X], authTypes(%d)[%02X %02X %02X]");
        }

        return a3;
      case 0xA2:
      case 0xA3:
        if (v9 < 0x45)
        {
          if (v9 < 0x22 || *v7) {
            goto LABEL_25;
          }
        }

        else
        {
          if (*v7) {
            goto LABEL_25;
          }
          if (v7[34] == 1)
          {
            snprintf(a3, a4, "nonce(%d bytes)[%02X %02X %02X ...], ecdhKey(%d bytes)[%02X %02X %02X ...]", v7[1], v7[2]);
            return a3;
          }
        }

        snprintf(a3, a4, "nonce(%d bytes)[%02X %02X %02X ...], ecdhKey - cannot parse parameter");
        return a3;
      case 0xA4:
      case 0xA5:
        if (v9 < 6)
        {
          if (v9 < 4)
          {
            if (v9 >= 2) {
              snprintf(a3, a4, "info(%02X)[%02X %s]");
            }
          }

          else
          {
            snprintf(a3, a4, "info(%02X)[%02X %s], param1(%02X)[%02X]");
          }
        }

        else
        {
          snprintf(a3, a4, "info(%02X)[%02X %s], param1(%02X)[%02X %02X %02X%s]", *v7, v7[1]);
        }

        return a3;
      case 0xA6:
      case 0xA7:
        if (!v9) {
          goto LABEL_25;
        }
        if (*v7)
        {
          if (v9 >= 5 && *v7 == 1) {
            snprintf(a3, a4, "FAILED: %#10x");
          }
          else {
LABEL_25:
          }
            snprintf(a3, a4, "no parameters");
        }

        else
        {
          snprintf(a3, a4, "SUCCESS");
        }

        return a3;
      default:
        snprintf(a3, a4, "Unknown messageID !!");
        return a3;
    }
  }

  return "";
}

__n128 ACCAuthProtocol_PrintData(unsigned __int8 *a1, int a2)
{
  if (a2)
  {
    unsigned int v5 = 0;
    BOOL v6 = &a1[a2];
    int v7 = __b;
    do
    {
      int v8 = *a1++;
      sprintf(v7, "%02x ", v8);
      v7 += 3;
      v5 += 3;
      if (v5 >= 0x3D5)
      {
        *int v7 = 0;
        uint64_t v9 = gLogObjects;
        int v10 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 55)
        {
          uint64_t v11 = *(os_log_s **)(gLogObjects + 432);
        }

        else
        {
          uint64_t v11 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            BOOL v15 = (char *)v9;
            __int16 v16 = 1024;
            int v17 = v10;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            uint64_t v11 = (os_log_s *)&_os_log_default;
          }
        }

        int v7 = __b;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315138;
          BOOL v15 = __b;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
        }

        unsigned int v5 = 0;
      }
    }

    while (a1 < v6);
    if (v5)
    {
      *int v7 = 0;
      if (gLogObjects && gNumLogObjects >= 55)
      {
        int v12 = *(os_log_s **)(gLogObjects + 432);
      }

      else
      {
        int v12 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          _parseIdentificationParams_cold_2();
        }
      }

      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315138;
        BOOL v15 = __b;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%s \n", buf, 0xCu);
      }
    }
  }

  return result;
}

uint64_t *iAP2LinkActionStartTimeSync(uint64_t a1, _BYTE *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 + 264);
  *a2 = 29;
  __darwin_time_t CurTimeMsInt64 = iAP2TimeGetCurTimeMsInt64();
  *(_BYTE *)(v3 + 72) = 0;
  *(void *)uint64_t v3 = CurTimeMsInt64;
  TimeSyncPacket = (uint64_t *)iAP2PacketCreateTimeSyncPacket( v2,  84,  *(_BYTE *)(v2 + 190),  (_BYTE *)(v2 + 188),  CurTimeMsInt64,  0LL,  0LL);
  iAP2LinkSendPacket(v2, (uint64_t)TimeSyncPacket, 0);
  return iAP2PacketRelease(TimeSyncPacket);
}

void iAP2LinkActionHandleTimeSyncResponse(uint64_t a1, _BYTE *a2)
{
  *a2 = 29;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 + 264);
  if (v3)
  {
    uint64_t v4 = *(void *)(*(void *)(v2 + 280) + 72LL);
    if (bswap64(*(void *)(v4 + 1)) == *(void *)v3)
    {
      uint64_t v5 = bswap64(*(void *)(v4 + 9));
      double v73 = NAN;
      double v74 = NAN;
      __darwin_time_t CurTimeMsInt64 = iAP2TimeGetCurTimeMsInt64();
      uint64_t v7 = 2 * v5;
      if ((_iAP2LogEnableMask & 4) == 0) {
        goto LABEL_22;
      }
      if (gLogObjects && gNumLogObjects >= 20)
      {
        int v8 = (os_log_s *)*(id *)(gLogObjects + 152);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        int v8 = (os_log_s *)&_os_log_default;
        id v9 = &_os_log_default;
      }

      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
        iAP2LinkActionHandleTimeSyncResponse_cold_12(v3, v8, v10, v11, v12, v13, v14, v15);
      }

      if ((_iAP2LogEnableMask & 4) == 0) {
        goto LABEL_22;
      }
      if (gLogObjects && gNumLogObjects >= 20)
      {
        __int16 v16 = (os_log_s *)*(id *)(gLogObjects + 152);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        __int16 v16 = (os_log_s *)&_os_log_default;
        id v17 = &_os_log_default;
      }

      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
        iAP2LinkActionHandleTimeSyncResponse_cold_10(v5, v16, v18, v19, v20, v21, v22, v23);
      }

      if ((_iAP2LogEnableMask & 4) != 0)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          __int16 v41 = (os_log_s *)*(id *)(gLogObjects + 152);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          __int16 v41 = (os_log_s *)&_os_log_default;
          id v54 = &_os_log_default;
        }

        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG)) {
          iAP2LinkActionHandleTimeSyncResponse_cold_8(CurTimeMsInt64, v41, v55, v56, v57, v58, v59, v60);
        }

        uint64_t v24 = (v7 - (CurTimeMsInt64 + *(void *)v3)) / 2;
        if ((_iAP2LogEnableMask & 4) != 0)
        {
          if (gLogObjects && gNumLogObjects >= 20)
          {
            uint8_t v61 = (os_log_s *)*(id *)(gLogObjects + 152);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            uint8_t v61 = (os_log_s *)&_os_log_default;
            id v62 = &_os_log_default;
          }

          if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG)) {
            iAP2LinkActionHandleTimeSyncResponse_cold_6(v24, v61, v63, v64, v65, v66, v67, v68);
          }
        }
      }

      else
      {
LABEL_22:
        uint64_t v24 = (v7 - (CurTimeMsInt64 + *(void *)v3)) / 2;
      }

      id FilterList = _getFilterList();
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(FilterList);
      __int16 v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(v3 + 64)));
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v26 objectForKey:v27]);

      if (!v28)
      {
        if ((_iAP2LogEnableMask & 1) != 0)
        {
          if (gLogObjects && gNumLogObjects >= 20)
          {
            unsigned int v32 = (os_log_s *)*(id *)(gLogObjects + 152);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            unsigned int v32 = (os_log_s *)&_os_log_default;
            id v42 = &_os_log_default;
          }

          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
          {
            v72[0] = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "ERROR: ERROR: No kalman filter!",  (uint8_t *)v72,  2u);
          }
        }

        goto LABEL_66;
      }

      [v28 iAP2KalmanFilterUpdateDeviceTime:&v74 Offset:&v73 FilteredOffset:(double)CurTimeMsInt64 / 1000.0 OffsetUncertainty:(double)v24 / 1000.0];
      uint64_t v29 = (uint64_t)(v74 * 1000.0);
      unint64_t v30 = (unint64_t)(v73 * 1000.0);
      *(void *)(v3 + 16) = v30;
      *(void *)(v3 + 8) = v29;
      if (*(void *)(v3 + 24) < v30) {
        *(_BYTE *)(v3 + 72) = 0;
      }
      if ((_iAP2LogEnableMask & 4) != 0)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          __int16 v31 = (os_log_s *)*(id *)(gLogObjects + 152);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          __int16 v31 = (os_log_s *)&_os_log_default;
          id v33 = &_os_log_default;
        }

        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
          iAP2LinkActionHandleTimeSyncResponse_cold_4(v3 + 8, v31, v34, v35, v36, v37, v38, v39);
        }

        if ((_iAP2LogEnableMask & 4) != 0)
        {
          if (gLogObjects && gNumLogObjects >= 20)
          {
            unsigned int v40 = (os_log_s *)*(id *)(gLogObjects + 152);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            unsigned int v40 = (os_log_s *)&_os_log_default;
            id v43 = &_os_log_default;
          }

          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG)) {
            iAP2LinkActionHandleTimeSyncResponse_cold_2(v3 + 16, v40, v44, v45, v46, v47, v48, v49);
          }
        }
      }

      if (*(_BYTE *)(v3 + 72) || !*(void *)(v3 + 40))
      {
        iAP2TimeCallbackAfter(*(void *)(v2 + 200), 11, *(_DWORD *)(*(void *)(v2 + 264) + 32LL));
LABEL_66:

        return;
      }

      *(void *)uint64_t v3 = CurTimeMsInt64;
      TimeSyncPacket = (uint64_t *)iAP2PacketCreateTimeSyncPacket( v2,  84,  *(_BYTE *)(v2 + 190),  (_BYTE *)(v2 + 191),  CurTimeMsInt64,  0LL,  *(void *)(v3 + 8));
      iAP2LinkSendPacket(v2, (uint64_t)TimeSyncPacket, 0);
      iAP2PacketRelease(TimeSyncPacket);
      if (*(void *)(v3 + 16) >= *(void *)(v3 + 24))
      {
        if (!*(_BYTE *)(v3 + 72))
        {
          unint64_t v69 = CurTimeMsInt64 - *(void *)(v3 + 40);
          unint64_t v70 = *(unsigned int *)(v3 + 52);
          unsigned int v71 = *(_DWORD *)(v3 + 48) + 1;
          *(_DWORD *)(v3 + 48) = v71;
          if (v69 <= v70 && v71 <= *(_DWORD *)(v3 + 56)) {
            goto LABEL_66;
          }
          uint64_t v51 = v2;
          uint64_t v52 = CurTimeMsInt64;
          int v53 = 0;
          goto LABEL_65;
        }
      }

      else
      {
        *(_BYTE *)(v3 + 72) = 1;
      }

      uint64_t v51 = v2;
      uint64_t v52 = CurTimeMsInt64;
      int v53 = 1;
LABEL_65:
      __iAP2TimeSyncDeviceSendTimeSyncMeasurement(v51, v52, v53);
      *(void *)(v3 + 40) = 0LL;
      *(_DWORD *)(v3 + 48) = 0;
      goto LABEL_66;
    }
  }

void __iAP2TimeSyncDeviceSendTimeSyncMeasurement(uint64_t a1, uint64_t a2, int a3)
{
  BOOL v6 = objc_autoreleasePoolPush();
  uint64_t v7 = *(void *)(a1 + 264);
  if (gLogObjects && gNumLogObjects >= 48)
  {
    int v8 = (os_log_s *)*(id *)(gLogObjects + 376);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v8 = (os_log_s *)&_os_log_default;
    id v9 = &_os_log_default;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = *(void *)(v7 + 8);
    int v29 = 134217984;
    uint64_t v30 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "TimeSync: Filtered Time Offset = %lld",  (uint8_t *)&v29,  0xCu);
  }

  if (gLogObjects && gNumLogObjects >= 48)
  {
    uint64_t v11 = (os_log_s *)*(id *)(gLogObjects + 376);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v11 = (os_log_s *)&_os_log_default;
    id v12 = &_os_log_default;
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = *(void *)(v7 + 16);
    uint64_t v14 = *(void *)(v7 + 24);
    int v29 = 134218240;
    uint64_t v30 = v13;
    __int16 v31 = 2048;
    *(void *)unsigned int v32 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "TimeSync: Offset Uncertainty = %lld (threshold %lld)",  (uint8_t *)&v29,  0x16u);
  }

  if (gLogObjects) {
    BOOL v15 = gNumLogObjects <= 47;
  }
  else {
    BOOL v15 = 1;
  }
  int v16 = !v15;
  if (a3)
  {
    if (v16)
    {
      id v17 = (os_log_s *)*(id *)(gLogObjects + 376);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v17 = (os_log_s *)&_os_log_default;
      id v18 = &_os_log_default;
    }

    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = a2 - *(void *)(v7 + 40);
      int v20 = *(_DWORD *)(v7 + 48);
      int v29 = 134218240;
      uint64_t v30 = v19;
      __int16 v31 = 1024;
      *(_DWORD *)unsigned int v32 = v20;
      uint64_t v21 = "TimeSync: timeSync converged in %llu ms and %d measurements";
      uint64_t v22 = v17;
      uint32_t v23 = 18;
LABEL_38:
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, v21, (uint8_t *)&v29, v23);
    }
  }

  else
  {
    if (v16)
    {
      id v17 = (os_log_s *)*(id *)(gLogObjects + 376);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v17 = (os_log_s *)&_os_log_default;
      id v24 = &_os_log_default;
    }

    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      uint64_t v25 = a2 - *(void *)(v7 + 40);
      int v27 = *(_DWORD *)(v7 + 48);
      int v26 = *(_DWORD *)(v7 + 52);
      int v28 = *(_DWORD *)(v7 + 56);
      int v29 = 134218752;
      uint64_t v30 = v25;
      __int16 v31 = 1024;
      *(_DWORD *)unsigned int v32 = v26;
      *(_WORD *)&v32[4] = 1024;
      *(_DWORD *)&v32[6] = v27;
      __int16 v33 = 1024;
      int v34 = v28;
      uint64_t v21 = "TimeSync: timeSync FAILED to converge in %llu/%u ms and %u/%u measurements";
      uint64_t v22 = v17;
      uint32_t v23 = 30;
      goto LABEL_38;
    }
  }

  iAP2TimeCallbackAfter(*(void *)(a1 + 200), 11, *(_DWORD *)(*(void *)(a1 + 264) + 32LL));
  objc_autoreleasePoolPop(v6);
}

void iAP2TimeSyncStart(uint64_t a1)
{
  BOOL v1 = *(dispatch_queue_s **)(*(void *)(*(void *)(a1 + 176) + 16LL) + 24LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = __iAP2TimeSyncStart_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  dispatch_async(v1, block);
}

uint64_t *__iAP2TimeSyncStart_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 264);
  __darwin_time_t CurTimeMsInt64 = iAP2TimeGetCurTimeMsInt64();
  *(void *)uint64_t v2 = CurTimeMsInt64;
  if (!*(void *)(v2 + 40))
  {
    *(void *)(v2 + 40) = CurTimeMsInt64;
    *(_DWORD *)(v2 + 48) = 0;
  }

  TimeSyncPacket = (uint64_t *)iAP2PacketCreateTimeSyncPacket( v1,  84,  *(_BYTE *)(v1 + 190),  (_BYTE *)(v1 + 188),  CurTimeMsInt64,  0LL,  0LL);
  iAP2LinkSendPacket(v1, (uint64_t)TimeSyncPacket, 0);
  return iAP2PacketRelease(TimeSyncPacket);
}

uint64_t iAP2TimeSyncInit(uint64_t a1)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(_OWORD *)(a1 + 16) = xmmword_10019E590;
  *(_DWORD *)(a1 + 32) = 60000;
  *(void *)(a1 + 40) = 0LL;
  int v2 = __defaultTimeout;
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = v2;
  *(_DWORD *)(a1 + 56) = __defaultMaxAttempts;
  *(void *)(a1 + 64) = arc4random();
  uint64_t v3 = -[iAP2KalmanFilter initWithReseedTimeout:AndCountForNoiseTraining:]( objc_alloc(&OBJC_CLASS___iAP2KalmanFilter),  "initWithReseedTimeout:AndCountForNoiseTraining:",  20LL,  61.0);
  if (v3)
  {
    id FilterList = _getFilterList();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(FilterList);
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 64)));
    [v5 setObject:v3 forKey:v6];
  }

  *(_BYTE *)(a1 + 72) = 0;

  return a1;
}

void iAP2TimeSyncCleanup(uint64_t a1)
{
  if (*(void *)(a1 + 64))
  {
    id FilterList = _getFilterList();
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(FilterList);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 64)));
    [v3 removeObjectForKey:v4];

    *(void *)(a1 + 64) = 0LL;
  }

uint64_t iAP2TimeSyncGetBuffSize()
{
  return 80LL;
}

id _getFilterList()
{
  if (_getFilterList_onceToken != -1) {
    dispatch_once(&_getFilterList_onceToken, &__block_literal_global_17);
  }
  return (id)_getFilterList_filterList;
}

void ___getFilterList_block_invoke(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  int v2 = (void *)_getFilterList_filterList;
  _getFilterList_filterList = (uint64_t)v1;
}

void iAP2MsgSendControl(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v4 = iAP2MsgCalcMessageLen(a2);
  iAP2MsgPreSendCtlProcess();
  *(_BYTE *)(*(void *)(a2 + 24) + 2LL) = HIBYTE(v4);
  *(_BYTE *)(*(void *)(a2 + 24) + 3LL) = v4;
  if (v4)
  {
    *(void *)a2 = *(void *)(a2 + 24);
    *(void *)(a2 + 8) = v4;
    *(_BYTE *)(a2 + 56) = 0;
    __iAP2LinkDataSentCB(*(void *)(a1 + 24), a2);
  }

void __iAP2LinkDataSentCB(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    unsigned int v3 = *(_DWORD *)(a2 + 8);
    if (!v3)
    {
LABEL_18:
      iAP2MsgCleanup(a2);
      return;
    }

    if (*(_DWORD *)(a2 + 12) == v3)
    {
      if ((_iAP2LogEnableMask & 1) != 0)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          unsigned __int16 v4 = *(os_log_s **)(gLogObjects + 152);
        }

        else
        {
          unsigned __int16 v4 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          int MsgID = iAP2MsgGetMsgID(a2);
          int v8 = *(_DWORD *)(a2 + 8);
          int v9 = *(_DWORD *)(a2 + 12);
          int v14 = 136316418;
          BOOL v15 = "__iAP2LinkDataSentCB";
          __int16 v16 = 1024;
          int v17 = 159;
          __int16 v18 = 2080;
          *(void *)uint64_t v19 = "";
          *(_WORD *)&v19[8] = 1024;
          *(_DWORD *)&v19[10] = MsgID;
          __int16 v20 = 1024;
          int v21 = v8;
          __int16 v22 = 1024;
          int v23 = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "ERROR: %s:%d !!!!!! No bytes were sent! Skipping sending! !!!!!! msgID %s0x%04X ->toSend=%u ->lastToSend=%u\n",  (uint8_t *)&v14,  0x2Eu);
        }
      }

      goto LABEL_18;
    }

    uint64_t v5 = *(void *)(a1 + 176);
    *(_DWORD *)(a2 + 12) = v3;
    if (iAP2MsgSendCtlDataWithSentCallback( v5,  *(char **)a2,  v3,  a2,  (uint64_t)__iAP2LinkDataSentOutCB,  (uint64_t)__iAP2LinkDataSentCB,  (void (*)(uint64_t, uint64_t))__iAP2LinkDeleteContextCB,  *(unsigned __int8 *)(a2 + 56)))
    {
      *(void *)a2 += (unsigned __int16)v3;
      *(_DWORD *)(a2 + 8) -= (unsigned __int16)v3;
    }

    else
    {
      if ((_iAP2LogEnableMask & 2) != 0)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          BOOL v6 = *(os_log_s **)(gLogObjects + 152);
        }

        else
        {
          BOOL v6 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          int v10 = *(_DWORD *)(a2 + 16);
          int v14 = 136315906;
          BOOL v15 = "__iAP2LinkDataSentCB";
          __int16 v16 = 1024;
          int v17 = 141;
          __int16 v18 = 1024;
          *(_DWORD *)uint64_t v19 = v10;
          *(_WORD *)&v19[4] = 2080;
          *(void *)&v19[6] = "Valid";
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s:%d iAP2MsgSendCtlDataWithSentCallback returned false - msgBufLen: %d msg: %s .",  (uint8_t *)&v14,  0x22u);
        }
      }

      if ((_iAP2LogEnableMask & 1) != 0)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          uint64_t v11 = *(os_log_s **)(gLogObjects + 152);
        }

        else
        {
          uint64_t v11 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          int v12 = iAP2MsgGetMsgID(a2);
          int v13 = *(_DWORD *)(a2 + 8);
          int v14 = 136316418;
          BOOL v15 = "__iAP2LinkDataSentCB";
          __int16 v16 = 1024;
          int v17 = 147;
          __int16 v18 = 1024;
          *(_DWORD *)uint64_t v19 = (unsigned __int16)v3;
          *(_WORD *)&v19[4] = 2080;
          *(void *)&v19[6] = "";
          __int16 v20 = 1024;
          int v21 = v12;
          __int16 v22 = 1024;
          int v23 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "ERROR: %s:%d Failed to queue up control session packet! reset tracking values, sendSize=%u msgID %s0x%04X ->toSend=%u\n",  (uint8_t *)&v14,  0x2Eu);
        }
      }
    }
  }

void iAP2MsgSendControlAndCallbackOnAck(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v4 = iAP2MsgCalcMessageLen(a2);
  iAP2MsgPreSendCtlProcess();
  *(_BYTE *)(*(void *)(a2 + 24) + 2LL) = HIBYTE(v4);
  *(_BYTE *)(*(void *)(a2 + 24) + 3LL) = v4;
  if (v4)
  {
    *(void *)a2 = *(void *)(a2 + 24);
    *(_DWORD *)(a2 + 8) = v4;
    *(_BYTE *)(a2 + 56) = 1;
    __iAP2LinkDataSentCB(*(void *)(a1 + 24), a2);
  }

uint64_t __iAP2LinkDataSentOutCB(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    int v2 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 64);
    if (v2) {
      return v2(a2, result);
    }
  }

  return result;
}

uint64_t __iAP2LinkDeleteContextCB(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (!*(_DWORD *)(a2 + 8)) {
      return iAP2MsgCleanup(a2);
    }
  }

  return result;
}

void sub_1000A6FE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t iap2_mediaLibrary_startMediaLibraryInformationHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0LL;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 21;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      uint64_t v5 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      uint64_t v5 = *(os_log_s **)(gLogObjects + 160);
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "StartMediaLibraryInformation", v8, 2u);
    }

    uint64_t Feature = (_BYTE *)iap2_feature_getFeature(a1, 0xDu);
    if (Feature)
    {
      uint64_t v2 = 1LL;
      *uint64_t Feature = 1;
      platform_mediaLibrary_requestLibraryInfoUpdate(*(void **)(a1 + 8));
    }

    else
    {
      return 0LL;
    }
  }

  return v2;
}

uint64_t iap2_mediaLibrary_stopMediaLibraryInformationHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0LL;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 21;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      uint64_t v5 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      uint64_t v5 = *(os_log_s **)(gLogObjects + 160);
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)BOOL v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "StopMediaLibraryInformation", v6, 2u);
    }

    uint64_t result = iap2_feature_getFeature(a1, 0xDu);
    if (result)
    {
      *(_BYTE *)uint64_t result = 0;
      return 1LL;
    }
  }

  return result;
}

uint64_t iap2_mediaLibrary_startMediaLibraryUpdatesHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0LL;
  uint64_t v102 = a1;
  if (!a1 || !a2) {
    return result;
  }
  if (gLogObjects) {
    BOOL v5 = gNumLogObjects < 21;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    BOOL v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    BOOL v6 = *(os_log_s **)(gLogObjects + 160);
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "StartMediaLibraryUpdates", buf, 2u);
  }

  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
  int v107 = 0;
  if (FirstParam)
  {
    int v8 = (unsigned __int16 *)FirstParam;
    uint64_t v9 = 0LL;
    unsigned int v106 = 0;
    uint64_t v97 = 0LL;
    cStr = 0LL;
    char v96 = 0;
    uint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
    DataAsString = 0LL;
    while (2)
    {
      int ParamID = iAP2MsgGetParamID((uint64_t)v8);
      switch(ParamID)
      {
        case 0:
          DataAsString = iAP2MsgGetDataAsString(v8, (BOOL *)&v107);
          if (!v107) {
            goto LABEL_93;
          }
          CFStringRef v90 = (os_log_s *)logObjectForModule_1(30);
          uint64_t result = os_log_type_enabled(v90, OS_LOG_TYPE_ERROR);
          if ((_DWORD)result)
          {
            iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
            return 0LL;
          }

          return result;
        case 1:
          __int16 v18 = iAP2MsgGetDataAsString(v8, (BOOL *)&v107);
          if (!v107)
          {
            cStr = (char *)v18;
            goto LABEL_93;
          }

          BOOL v91 = (os_log_s *)logObjectForModule_1(30);
          uint64_t result = os_log_type_enabled(v91, OS_LOG_TYPE_ERROR);
          if ((_DWORD)result)
          {
            iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_4(a2);
            return 0LL;
          }

          return result;
        case 2:
          unint64_t v19 = iAP2MsgGetFirstParam(a2, v8);
          if (!v19) {
            goto LABEL_93;
          }
          NextParam = (unsigned __int16 *)v19;
          uint64_t v99 = v9;
          while (2)
          {
            unsigned int v21 = iAP2MsgGetParamID((uint64_t)NextParam);
            unsigned int v22 = v21;
            if (v21 < 0x14 || v21 == 27 || v21 == 25)
            {
              BOOL IsDataVoid = iAP2MsgIsDataVoid(NextParam);
              int v107 = !IsDataVoid;
              if (!IsDataVoid)
              {
                CFStringRef v86 = (os_log_s *)logObjectForModule_1(30);
                uint64_t result = os_log_type_enabled(v86, OS_LOG_TYPE_ERROR);
                if ((_DWORD)result)
                {
                  iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_5();
                  return 0LL;
                }

                return result;
              }

              v11 |= 1LL << _convertiAP2ToACCItemProperty__itemPropertyLookup[v22];
            }

            else
            {
              uint64_t v24 = gLogObjects;
              int v25 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 31)
              {
                int v26 = *(os_log_s **)(gLogObjects + 240);
              }

              else
              {
                int v26 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  *(void *)v111 = v24;
                  *(_WORD *)&v111[8] = 1024;
                  *(_DWORD *)v112 = v25;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                }
              }

              if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
              {
                int MsgID = iAP2MsgGetMsgID(a2);
                *(_DWORD *)buf = 67109632;
                *(_DWORD *)v111 = v22;
                *(_WORD *)&v111[4] = 1024;
                *(_DWORD *)&v111[6] = 2;
                *(_WORD *)v112 = 1024;
                *(_DWORD *)&v112[2] = MsgID;
                _os_log_error_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "Unknown Subparam ID: %d in Param ID: %d for Msg ID: 0x%04X - ignoring subparam",  buf,  0x14u);
              }

              uint64_t v9 = v99;
            }

            NextParam = iAP2MsgGetNextParam(a2, v8, NextParam);
            if (!NextParam) {
              goto LABEL_93;
            }
            continue;
          }

        case 3:
          unint64_t v28 = iAP2MsgGetFirstParam(a2, v8);
          if (!v28) {
            goto LABEL_93;
          }
          int v29 = (unsigned __int16 *)v28;
          while (2)
          {
            unsigned int v30 = iAP2MsgGetParamID((uint64_t)v29);
            unsigned int v31 = v30;
            if (v30 > 8)
            {
              uint64_t v103 = v10;
              uint64_t v35 = v9;
              uint64_t v36 = gLogObjects;
              int v37 = gNumLogObjects;
              if (gLogObjects) {
                BOOL v38 = gNumLogObjects < 31;
              }
              else {
                BOOL v38 = 1;
              }
              if (v38)
              {
                uint64_t v39 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  *(void *)v111 = v36;
                  *(_WORD *)&v111[8] = 1024;
                  *(_DWORD *)v112 = v37;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                }
              }

              else
              {
                uint64_t v39 = *(os_log_s **)(gLogObjects + 240);
              }

              if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
              {
                int v40 = iAP2MsgGetMsgID(a2);
                *(_DWORD *)buf = 67109632;
                *(_DWORD *)v111 = v31;
                *(_WORD *)&v111[4] = 1024;
                *(_DWORD *)&v111[6] = 3;
                *(_WORD *)v112 = 1024;
                *(_DWORD *)&v112[2] = v40;
                _os_log_error_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_ERROR,  "Unknown Subparam ID: %d in Param ID: %d for Msg ID: 0x%04X - ignoring subparam",  buf,  0x14u);
              }

              uint64_t v9 = v35;
              uint64_t v10 = v103;
            }

            else
            {
              if (((1 << v30) & 0x15F) != 0)
              {
                BOOL v32 = iAP2MsgIsDataVoid(v29);
                int v107 = !v32;
                if (v32)
                {
                  v10 |= 1LL << _convertiAP2ToACCPlaylistProperty__playlistPropertyLookup[v31];
                  goto LABEL_64;
                }

                CFStringRef v88 = (os_log_s *)logObjectForModule_1(30);
                uint64_t result = os_log_type_enabled(v88, OS_LOG_TYPE_ERROR);
                if (!(_DWORD)result) {
                  return result;
                }
LABEL_178:
                iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_6();
                return 0LL;
              }

              if (v30 == 5) {
                int v33 = 1;
              }
              else {
                int v33 = 2;
              }
              BOOL v34 = iAP2MsgIsDataVoid(v29);
              int v107 = !v34;
              if (!v34)
              {
                BOOL v89 = (os_log_s *)logObjectForModule_1(30);
                uint64_t result = os_log_type_enabled(v89, OS_LOG_TYPE_ERROR);
                if (!(_DWORD)result) {
                  return result;
                }
                goto LABEL_178;
              }

              v106 |= v33;
              v10 |= 0x20uLL;
            }

LABEL_64:
            int v29 = iAP2MsgGetNextParam(a2, v8, v29);
            if (!v29) {
              goto LABEL_93;
            }
            continue;
          }

        case 4:
          BOOL v41 = iAP2MsgIsDataVoid(v8);
          int v107 = !v41;
          if (!v41)
          {
            CFMutableArrayRef v92 = (os_log_s *)logObjectForModule_1(30);
            uint64_t result = os_log_type_enabled(v92, OS_LOG_TYPE_ERROR);
            if ((_DWORD)result)
            {
              iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_8(a2);
              return 0LL;
            }

            return result;
          }

          char v96 = 1;
          goto LABEL_93;
        case 5:
          BOOL v42 = iAP2MsgIsDataVoid(v8);
          int v107 = !v42;
          if (!v42)
          {
            CFStringRef v93 = (os_log_s *)logObjectForModule_1(30);
            uint64_t result = os_log_type_enabled(v93, OS_LOG_TYPE_ERROR);
            if ((_DWORD)result)
            {
              iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_9(a2);
              return 0LL;
            }

            return result;
          }

          LOBYTE(v97) = 1;
          goto LABEL_93;
        case 6:
          BOOL v43 = iAP2MsgIsDataVoid(v8);
          int v107 = !v43;
          if (!v43)
          {
            uint8_t v94 = (os_log_s *)logObjectForModule_1(30);
            uint64_t result = os_log_type_enabled(v94, OS_LOG_TYPE_ERROR);
            if ((_DWORD)result)
            {
              iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_10(a2);
              return 0LL;
            }

            return result;
          }

          BYTE4(v97) = 1;
LABEL_93:
          int v8 = iAP2MsgGetNextParam(a2, 0LL, v8);
          if (!v8) {
            goto LABEL_96;
          }
          continue;
        case 7:
          unint64_t v44 = iAP2MsgGetFirstParam(a2, v8);
          if (!v44) {
            goto LABEL_93;
          }
          uint64_t v45 = (unsigned __int16 *)v44;
          uint64_t v104 = v10;
          while (2)
          {
            unsigned int v46 = iAP2MsgGetParamID((uint64_t)v45);
            unsigned int v47 = v46;
            if (v46 <= 0x12 && ((1 << v46) & 0x55043) != 0)
            {
              BOOL v48 = iAP2MsgIsDataVoid(v45);
              int v107 = !v48;
              if (!v48)
              {
                char v87 = (os_log_s *)logObjectForModule_1(30);
                uint64_t result = os_log_type_enabled(v87, OS_LOG_TYPE_ERROR);
                if ((_DWORD)result)
                {
                  iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_11();
                  return 0LL;
                }

                return result;
              }

              v9 |= 1LL << _convertiAP2ToACCPlaylistContentItemProperty__itemPropertyLookup[v47];
            }

            else
            {
              uint64_t v49 = v9;
              uint64_t v50 = gLogObjects;
              int v51 = gNumLogObjects;
              if (gLogObjects) {
                BOOL v52 = gNumLogObjects < 31;
              }
              else {
                BOOL v52 = 1;
              }
              if (v52)
              {
                int v53 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  *(void *)v111 = v50;
                  *(_WORD *)&v111[8] = 1024;
                  *(_DWORD *)v112 = v51;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                }
              }

              else
              {
                int v53 = *(os_log_s **)(gLogObjects + 240);
              }

              if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
              {
                int v54 = iAP2MsgGetMsgID(a2);
                *(_DWORD *)buf = 67109632;
                *(_DWORD *)v111 = v47;
                *(_WORD *)&v111[4] = 1024;
                *(_DWORD *)&v111[6] = 7;
                *(_WORD *)v112 = 1024;
                *(_DWORD *)&v112[2] = v54;
                _os_log_error_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_ERROR,  "Unknown Subparam ID: %d in Param ID: %d for Msg ID: 0x%04X - ignoring subparam",  buf,  0x14u);
              }

              uint64_t v9 = v49;
              uint64_t v10 = v104;
            }

            uint64_t v45 = iAP2MsgGetNextParam(a2, v8, v45);
            if (!v45) {
              goto LABEL_93;
            }
            continue;
          }

        default:
          uint64_t v13 = v9;
          uint64_t v14 = v11;
          uint64_t v15 = gLogObjects;
          int v16 = gNumLogObjects;
          if (gLogObjects) {
            BOOL v17 = gNumLogObjects < 31;
          }
          else {
            BOOL v17 = 1;
          }
          if (v17)
          {
            uint64_t v55 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)v111 = v15;
              *(_WORD *)&v111[8] = 1024;
              *(_DWORD *)v112 = v16;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            }
          }

          else
          {
            uint64_t v55 = *(os_log_s **)(gLogObjects + 240);
          }

          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
          {
            int v56 = iAP2MsgGetMsgID(a2);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)v111 = ParamID;
            *(_WORD *)&v111[4] = 1024;
            *(_DWORD *)&v111[6] = v56;
            _os_log_error_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_ERROR,  "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param",  buf,  0xEu);
          }

          uint64_t v11 = v14;
          uint64_t v9 = v13;
          goto LABEL_93;
      }
    }
  }

  DataAsString = 0LL;
  uint64_t v97 = 0LL;
  cStr = 0LL;
  uint64_t v11 = 0LL;
  uint64_t v10 = 0LL;
  char v96 = 0;
  unsigned int v106 = 0;
  uint64_t v9 = 0LL;
LABEL_96:
  uint64_t v95 = v11;
  if (gLogObjects && gNumLogObjects >= 21)
  {
    uint64_t v57 = *(os_log_s **)(gLogObjects + 160);
  }

  else
  {
    uint64_t v57 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  uint64_t v58 = (const char *)DataAsString;
  if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
  {
    uint64_t v59 = "(nil)";
    *(_DWORD *)buf = 134219010;
    uint64_t v60 = cStr;
    if (!cStr) {
      uint64_t v60 = "(nil)";
    }
    *(void *)v111 = v11;
    *(_WORD *)&v111[8] = 2048;
    if (DataAsString) {
      uint64_t v59 = (const char *)DataAsString;
    }
    *(void *)v112 = v10;
    *(_WORD *)&v112[8] = 2048;
    *(void *)v113 = v9;
    *(_WORD *)&v113[8] = 2080;
    *(void *)&v113[10] = v60;
    *(_WORD *)v114 = 2080;
    *(void *)&v114[2] = v59;
    _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_INFO,  "StartMediaLibraryUpdates: mediaItemProperties=%llxh playlistProperties=%llxh playlistContentMediaItemProperties=%l lxh lastRevision=%s libraryUID=%s",  buf,  0x34u);
  }

  uint64_t v105 = v10;
  uint64_t v61 = v102;
  if (!DataAsString) {
    return 0LL;
  }
  uint64_t result = _iap2_mediaLibrary_findMediaLibraryForUID(v102, (const char *)DataAsString);
  if (result)
  {
    *(_BYTE *)uint64_t result = 1;
    *(void *)(result + 136) = v11;
    *(void *)(result + 144) = v105;
    uint64_t Feature = iap2_feature_getFeature(v102, 0xDu);
    if (Feature)
    {
      int v63 = *(_DWORD *)(Feature + 48);
      if (v63)
      {
        v101 = (_DWORD *)Feature;
        if (v63 < 1)
        {
          uint64_t v68 = 0LL;
          unsigned int v67 = 0;
          unsigned int v66 = 0;
          unsigned int v65 = 0;
        }

        else
        {
          uint64_t v64 = 0LL;
          unsigned int v65 = 0;
          unsigned int v66 = 0;
          unsigned int v67 = 0;
          LODWORD(v6_Block_object_dispose(va, 8) = 0;
          do
          {
            uint64_t v69 = *(void *)(*(void *)(Feature + 40) + 8 * v64);
            uint64_t v108 = 0LL;
            uint64_t v109 = 0LL;
            _calcWindowSize(v61, v69, (int *)&v109 + 1, (unsigned int *)&v109, (unsigned int *)&v108 + 1, (int *)&v108);
            uint64_t v70 = gLogObjects;
            int v71 = gNumLogObjects;
            if (gLogObjects) {
              BOOL v72 = gNumLogObjects < 31;
            }
            else {
              BOOL v72 = 1;
            }
            if (v72)
            {
              double v73 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)v111 = v70;
                *(_WORD *)&v111[8] = 1024;
                *(_DWORD *)v112 = v71;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              }
            }

            else
            {
              double v73 = *(os_log_s **)(gLogObjects + 240);
            }

            uint64_t v61 = v102;
            if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v74 = *(void *)(v102 + 8);
              *(_DWORD *)buf = 138414594;
              *(void *)v111 = v74;
              *(_WORD *)&v111[8] = 2080;
              *(void *)v112 = v69 + 65;
              *(_WORD *)&v112[8] = 1024;
              *(_DWORD *)v113 = v68;
              *(_WORD *)&v113[4] = 1024;
              *(_DWORD *)&v113[6] = HIDWORD(v109);
              *(_WORD *)&v113[10] = 1024;
              *(_DWORD *)&v113[12] = v67;
              *(_WORD *)&v113[16] = 1024;
              *(_DWORD *)v114 = v109;
              *(_WORD *)&v114[4] = 1024;
              *(_DWORD *)&v114[6] = v66;
              __int16 v115 = 1024;
              int v116 = HIDWORD(v108);
              __int16 v117 = 1024;
              unsigned int v118 = v65;
              __int16 v119 = 1024;
              int v120 = v108;
              _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_DEFAULT,  "iAP2MediaLibrary _recalcWindowSize: %@ - %s, window=%d->%d recordsPerMessage=%d->%d maxUpdateMessagesInF light=%d->%d maxUpdateMessagesPendingSend=%d->%d",  buf,  0x46u);
            }

            else {
              unsigned int v75 = v68;
            }
            if (HIDWORD(v109)) {
              uint64_t v68 = v75;
            }
            else {
              uint64_t v68 = v68;
            }
            else {
              unsigned int v76 = v67;
            }
            if ((_DWORD)v109) {
              unsigned int v67 = v76;
            }
            if (v66 <= HIDWORD(v108)) {
              unsigned int v77 = HIDWORD(v108);
            }
            else {
              unsigned int v77 = v66;
            }
            if (HIDWORD(v108)) {
              unsigned int v66 = v77;
            }
            else {
              unsigned int v78 = v65;
            }
            if ((_DWORD)v108) {
              unsigned int v65 = v78;
            }
            ++v64;
            uint64_t Feature = (uint64_t)v101;
          }

          while (v64 < (int)v101[12]);
        }

        if (gLogObjects && gNumLogObjects >= 31)
        {
          int v79 = *(os_log_s **)(gLogObjects + 240);
          uint64_t v58 = (const char *)DataAsString;
        }

        else
        {
          int v79 = (os_log_s *)&_os_log_default;
          uint64_t v58 = (const char *)DataAsString;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v80 = *(void *)(v61 + 8);
          int v81 = v101[1];
          int v82 = v101[2];
          int v83 = v101[3];
          *(_DWORD *)buf = 138413826;
          *(void *)v111 = v80;
          *(_WORD *)&v111[8] = 1024;
          *(_DWORD *)v112 = v81;
          *(_WORD *)&v112[4] = 1024;
          *(_DWORD *)&v112[6] = v68;
          *(_WORD *)v113 = 1024;
          *(_DWORD *)&v113[2] = v82;
          *(_WORD *)&v113[6] = 1024;
          *(_DWORD *)&v113[8] = v67;
          *(_WORD *)&v113[12] = 1024;
          *(_DWORD *)&v113[14] = v83;
          *(_WORD *)v114 = 1024;
          *(_DWORD *)&v114[2] = v66;
          _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEFAULT,  "iAP2MediaLibrary _recalcWindowSize: %@, for all library: window=%d->%d recordsPerMessage=%d->%d maxUpdateMes sagesInFlight=%d->%d",  buf,  0x30u);
        }

        if (v67 && v101[2] != v67) {
          v101[2] = v67;
        }
        if (v66 && v101[3] != v66) {
          v101[3] = v66;
        }
        if (v65 && v101[4] != v65) {
          uint8_t v101[4] = v65;
        }
        if ((_DWORD)v68 && v101[1] != (_DWORD)v68)
        {
          v101[1] = v68;
          platform_mediaLibrary_accessoryUpdate(*(void **)(v61 + 8), v68);
        }
      }
    }

    uint64_t v84 = (__CFString *)CFStringCreateWithCString(kCFAllocatorDefault, v58, 0x8000100u);
    if (cStr) {
      CFStringRef v85 = (__CFString *)CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
    }
    else {
      CFStringRef v85 = 0LL;
    }
    platform_mediaLibrary_startMediaLibraryUpdate( *(void **)(v61 + 8),  v84,  v85,  v95,  v105,  v96 & 1,  v97 & 1,  BYTE4(v97) & 1,  v106,  v9);
    if (v84) {
      CFRelease(v84);
    }
    if (v85) {
      CFRelease(v85);
    }
    return 1LL;
  }

  return result;
}

                if (*v49) {
                  goto LABEL_65;
                }
                goto LABEL_93;
              }

              uint64_t v74 = *(_BYTE *)(a1 + 322);
              uint64_t v50 = (os_log_s *)logObjectForModule_19();
              if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315650;
                unsigned int v78 = "_qiAuth_protocol_handleResponse_DIGESTS";
                int v79 = 1024;
                uint64_t v80 = 1945;
                int v81 = 1024;
                int v82 = v46;
                _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "%s:%d Cert EXIST in cache! slot %d",  buf,  0x18u);
              }

              if (!*(_BYTE *)(a1 + 322))
              {
                *uint64_t v49 = a1 + 368;
                id v62 = (_WORD *)(a1 + 2LL * v46 + 324);
                *id v62 = 0;
                *(_BYTE *)(a1 + 322) = 1;
                if (qiAuth_util_copyCertificateFromCache( a1,  v46,  *v48,  0x20u,  0LL,  0,  (UInt8 *)(a1 + 368),  0x600u,  (uint64_t)v62))
                {
                  *uint64_t v49 = 0LL;
                  *id v62 = 0;
                  *(_BYTE *)(a1 + 322) = v74;
                  unsigned int v31 = (uint64_t)v75;
                  goto LABEL_90;
                }

                unsigned int v65 = *v49 + 2;
                unsigned int v66 = *v49 + 34;
                unsigned int v67 = (bswap32(*(unsigned __int16 *)*v49) >> 16) - 34;
                qiAuth_util_logCertData((const void **)a1, (uint64_t)"CACHE: --RootHash--", v65, 0x20u, 1);
                uint64_t v68 = (unsigned __int16)v67;
                int v8 = &startLogsNotificationObservers;
                qiAuth_util_logCertData((const void **)a1, (uint64_t)"CACHE: --CertData--", v66, v68, 1);
                uint64_t v69 = qiAuth_util_verifyCertificateChain(a1, *(unsigned __int8 *)(a1 + 48), v65, 32, v66, v68);
                unsigned int v31 = (uint64_t)v75;
                if (v69) {
                  goto LABEL_90;
                }
                *(_BYTE *)(a1 + 320) |= 1 << v46;
              }

              unsigned int v31 = (uint64_t)v75;
              if (*v49)
              {
                qiAuth_util_logCertData( (const void **)a1,  (uint64_t)"DIGEST: --CertCacheData--",  *v49,  *(unsigned __int16 *)(a1 + 2LL * v46 + 324),  1);
                goto LABEL_64;
              }

        uint64_t v13 = v68 + 1;
      }

      while ((id)(v68 + 1) != v67);
      uint64_t v59 = [obj countByEnumeratingWithState:&v83 objects:v90 count:16];
      unsigned int v67 = v59;
      if (!v59)
      {
LABEL_71:

        uint64_t v7 = v62;
        break;
      }
    }
  }

  uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](&OBJC_CLASS___NSArray, "arrayWithArray:", v10));

  return v60;
}

uint64_t _iap2_mediaLibrary_findMediaLibraryForUID(uint64_t a1, const char *a2)
{
  uint64_t v2 = 0LL;
  if (a1 && a2)
  {
    uint64_t Feature = iap2_feature_getFeature(a1, 0xDu);
    if (Feature && (uint64_t v5 = *(unsigned int *)(Feature + 48), (int)v5 >= 1))
    {
      for (uint64_t i = *(uint64_t **)(Feature + 40); ; ++i)
      {
        uint64_t v2 = *i;
        if (!--v5) {
          return 0LL;
        }
      }
    }

    else
    {
      return 0LL;
    }
  }

  return v2;
}

uint64_t iap2_mediaLibrary_stopMediaLibraryUpdatesHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0LL;
  if (!a1 || !a2) {
    return result;
  }
  uint64_t v22 = a1;
  if (gLogObjects) {
    BOOL v5 = gNumLogObjects < 21;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    BOOL v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    BOOL v6 = *(os_log_s **)(gLogObjects + 160);
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "StopMediaLibraryUpdates", buf, 2u);
  }

  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
  BOOL v23 = 0;
  if (FirstParam)
  {
    NextParam = (unsigned __int16 *)FirstParam;
    uint64_t v9 = 0LL;
    while (1)
    {
      int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
      if (ParamID)
      {
        int v11 = ParamID;
        uint64_t v12 = gLogObjects;
        int v13 = gNumLogObjects;
        if (gLogObjects) {
          BOOL v14 = gNumLogObjects < 31;
        }
        else {
          BOOL v14 = 1;
        }
        if (v14)
        {
          int v16 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)int v25 = v12;
            *(_WORD *)&v25[8] = 1024;
            int v26 = v13;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            int v16 = (os_log_s *)&_os_log_default;
          }
        }

        else
        {
          int v16 = *(os_log_s **)(gLogObjects + 240);
        }

        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          int MsgID = iAP2MsgGetMsgID(a2);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)int v25 = v11;
          *(_WORD *)&v25[4] = 1024;
          *(_DWORD *)&v25[6] = MsgID;
          _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param",  buf,  0xEu);
        }
      }

      else
      {
        DataAsString = iAP2MsgGetDataAsString(NextParam, &v23);
        if (v23)
        {
          unsigned int v21 = (os_log_s *)logObjectForModule_1(30);
          uint64_t result = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
          if ((_DWORD)result)
          {
            iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
            return 0LL;
          }

          return result;
        }

        uint64_t v9 = (const char *)DataAsString;
      }

      NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
      if (!NextParam) {
        goto LABEL_29;
      }
    }
  }

  uint64_t v9 = 0LL;
LABEL_29:
  if (gLogObjects && gNumLogObjects >= 21)
  {
    __int16 v18 = *(os_log_s **)(gLogObjects + 160);
  }

  else
  {
    __int16 v18 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    unint64_t v19 = "(nil)";
    if (v9) {
      unint64_t v19 = v9;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)int v25 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "StopMediaLibraryUpdates: libraryUID=%s",  buf,  0xCu);
  }

  if (!v9) {
    return 0LL;
  }
  uint64_t result = _iap2_mediaLibrary_findMediaLibraryForUID(v22, v9);
  if (result)
  {
    *(_BYTE *)uint64_t result = 0;
    *(void *)(result + 136) = 0LL;
    *(void *)(result + 144) = 0LL;
    __int16 v20 = (__CFString *)CFStringCreateWithCString(kCFAllocatorDefault, v9, 0x8000100u);
    platform_mediaLibrary_stopMediaLibraryUpdate(*(void **)(v22 + 8), v20);
    if (v20) {
      CFRelease(v20);
    }
    return 1LL;
  }

  return result;
}

uint64_t iap2_mediaLibrary_playMediaLibraryCurrentSelectionHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0LL;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v5 = gNumLogObjects < 21;
    }
    else {
      BOOL v5 = 1;
    }
    uint64_t v22 = a1;
    if (v5)
    {
      BOOL v6 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      BOOL v6 = *(os_log_s **)(gLogObjects + 160);
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "PlayMediaLibraryCurrentSelection", buf, 2u);
    }

    unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
    if (FirstParam)
    {
      NextParam = (unsigned __int16 *)FirstParam;
      uint64_t v9 = 0LL;
      while (1)
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        if (ParamID)
        {
          int v11 = ParamID;
          uint64_t v12 = gLogObjects;
          int v13 = gNumLogObjects;
          if (gLogObjects) {
            BOOL v14 = gNumLogObjects < 31;
          }
          else {
            BOOL v14 = 1;
          }
          if (v14)
          {
            int v16 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)uint64_t v24 = v12;
              *(_WORD *)&v24[8] = 1024;
              int v25 = v13;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              int v16 = (os_log_s *)&_os_log_default;
            }
          }

          else
          {
            int v16 = *(os_log_s **)(gLogObjects + 240);
          }

          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            int MsgID = iAP2MsgGetMsgID(a2);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)uint64_t v24 = v11;
            *(_WORD *)&v24[4] = 1024;
            *(_DWORD *)&v24[6] = MsgID;
            _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param",  buf,  0xEu);
          }
        }

        else
        {
          *(_DWORD *)buf = -1431655766;
          DataAsString = iAP2MsgGetDataAsString(NextParam, (BOOL *)buf);
          if (*(_DWORD *)buf)
          {
            unsigned int v21 = (os_log_s *)logObjectForModule_1(30);
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
              iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
            }
            return 0LL;
          }

          uint64_t v9 = (const char *)DataAsString;
        }

        NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
        if (!NextParam) {
          goto LABEL_29;
        }
      }
    }

    uint64_t v9 = 0LL;
LABEL_29:
    if (gLogObjects && gNumLogObjects >= 21)
    {
      __int16 v18 = *(os_log_s **)(gLogObjects + 160);
    }

    else
    {
      __int16 v18 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      unint64_t v19 = "(nil)";
      if (v9) {
        unint64_t v19 = v9;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)uint64_t v24 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "PlayMediaLibraryCurrentSelection: libraryUID=%s",  buf,  0xCu);
    }

    if (v9)
    {
      __int16 v20 = (__CFString *)CFStringCreateWithCString(kCFAllocatorDefault, v9, 0x8000100u);
      platform_mediaLibrary_playCurrentSelection(*(void **)(v22 + 8), v20);
      if (v20) {
        CFRelease(v20);
      }
      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t iap2_mediaLibrary_playMediaLibraryItemsHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0LL;
  if (!a1 || !a2) {
    return result;
  }
  if (gLogObjects) {
    BOOL v5 = gNumLogObjects < 21;
  }
  else {
    BOOL v5 = 1;
  }
  uint64_t v34 = a1;
  if (v5)
  {
    BOOL v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    BOOL v6 = *(os_log_s **)(gLogObjects + 160);
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "PlayMediaLibraryItems", buf, 2u);
  }

  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
  if (FirstParam)
  {
    NextParam = (unsigned __int16 *)FirstParam;
    uint64_t v9 = 0LL;
    uint64_t v10 = 0LL;
    LODWORD(v35) = 0;
    int v11 = 0LL;
    while (1)
    {
      int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
      if (ParamID == 2)
      {
        *(_DWORD *)buf = -1431655766;
        DataAsString = iAP2MsgGetDataAsString(NextParam, (BOOL *)buf);
        if (*(_DWORD *)buf)
        {
          BOOL v32 = (os_log_s *)logObjectForModule_1(30);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
            iap2_mediaLibrary_playMediaLibraryItemsHandler_cold_4(a2);
          }
LABEL_55:
          uint64_t v30 = 0LL;
          uint64_t result = 0LL;
          unint64_t v19 = v11;
          if (v11) {
            goto LABEL_56;
          }
          return result;
        }

        uint64_t v9 = (const char *)DataAsString;
        goto LABEL_35;
      }

      int v13 = ParamID;
      if (ParamID == 1) {
        break;
      }
      if (ParamID)
      {
        uint64_t v23 = gLogObjects;
        int v24 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 31)
        {
          int v25 = *(os_log_s **)(gLogObjects + 240);
        }

        else
        {
          int v25 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)int v37 = v23;
            *(_WORD *)&v37[8] = 1024;
            *(_DWORD *)&v37[10] = v24;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          }
        }

        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          int MsgID = iAP2MsgGetMsgID(a2);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)int v37 = v13;
          *(_WORD *)&v37[4] = 1024;
          *(_DWORD *)&v37[6] = MsgID;
          _os_log_error_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param",  buf,  0xEu);
        }

uint64_t iap2_mediaLibrary_playMediaLibraryCollectionHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0LL;
  if (!a1) {
    return result;
  }
  uint64_t v31 = a1;
  if (!a2) {
    return result;
  }
  if (gLogObjects) {
    BOOL v5 = gNumLogObjects < 21;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    BOOL v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    BOOL v6 = *(os_log_s **)(gLogObjects + 160);
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "PlayMediaLibraryCollection", buf, 2u);
  }

  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
  if (!FirstParam)
  {
    uint64_t v10 = 0LL;
    unsigned int v32 = 0;
    uint64_t v33 = 0LL;
    uint64_t v9 = 0LL;
    uint64_t v11 = 8LL;
LABEL_37:
    if (gLogObjects && gNumLogObjects >= 21)
    {
      uint64_t v23 = *(os_log_s **)(gLogObjects + 160);
    }

    else
    {
      uint64_t v23 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      int v24 = "(nil)";
      if (v9) {
        int v24 = v9;
      }
      *(_DWORD *)buf = 134218242;
      *(void *)size_t v35 = v10;
      *(_WORD *)&v35[8] = 2080;
      uint64_t v36 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "PlayMediaLibraryCollection: collectionPersistentID=%llu libraryUID=%s",  buf,  0x16u);
    }

    uint64_t result = 0LL;
    if (v10 && (_DWORD)v11 != 8 && v9)
    {
      int v25 = (__CFString *)CFStringCreateWithCString(kCFAllocatorDefault, v9, 0x8000100u);
      platform_mediaLibrary_playCollection(*(void **)(v31 + 8), v25, v10, v11, v32, v33);
      if (v25) {
        CFRelease(v25);
      }
      return 1LL;
    }

    return result;
  }

  NextParam = (unsigned __int16 *)FirstParam;
  uint64_t v9 = 0LL;
  uint64_t v33 = 0LL;
  unsigned int v32 = 0;
  uint64_t v10 = 0LL;
  uint64_t v11 = 8LL;
  while (2)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
    switch(ParamID)
    {
      case 0:
        *(_DWORD *)buf = -1431655766;
        unint64_t DataAsU64 = iAP2MsgGetDataAsU64(NextParam, buf);
        if (!*(_DWORD *)buf)
        {
          uint64_t v10 = DataAsU64;
          goto LABEL_34;
        }

        int v26 = (os_log_s *)logObjectForModule_1(30);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
          iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
        }
        return 0LL;
      case 1:
        *(_DWORD *)buf = -1431655766;
        uint64_t DataAsU8 = iAP2MsgGetDataAsU8(NextParam, buf);
        if (*(_DWORD *)buf)
        {
          int v27 = (os_log_s *)logObjectForModule_1(30);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
            iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_4(a2);
          }
          return 0LL;
        }

        uint64_t v11 = DataAsU8;
        goto LABEL_34;
      case 2:
        *(_DWORD *)buf = -1431655766;
        unsigned int DataAsU32 = iAP2MsgGetDataAsU32(NextParam, buf);
        if (*(_DWORD *)buf)
        {
          unint64_t v28 = (os_log_s *)logObjectForModule_1(30);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
            iap2_mediaLibrary_playMediaLibraryItemsHandler_cold_4(a2);
          }
          return 0LL;
        }

        unsigned int v32 = DataAsU32;
        goto LABEL_34;
      case 3:
        *(_DWORD *)buf = -1431655766;
        DataAsString = iAP2MsgGetDataAsString(NextParam, (BOOL *)buf);
        if (*(_DWORD *)buf)
        {
          int v29 = (os_log_s *)logObjectForModule_1(30);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
            iap2_mediaLibrary_playMediaLibraryCollectionHandler_cold_5(a2);
          }
          return 0LL;
        }

        uint64_t v9 = (const char *)DataAsString;
        goto LABEL_34;
      case 4:
        *(_DWORD *)buf = -1431655766;
        unint64_t v20 = iAP2MsgGetDataAsU64(NextParam, buf);
        if (!*(_DWORD *)buf)
        {
          uint64_t v33 = v20;
LABEL_34:
          NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
          if (!NextParam) {
            goto LABEL_37;
          }
          continue;
        }

        uint64_t v30 = (os_log_s *)logObjectForModule_1(30);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
          iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_8(a2);
        }
        return 0LL;
      default:
        uint64_t v14 = gLogObjects;
        int v15 = gNumLogObjects;
        if (gLogObjects) {
          BOOL v16 = gNumLogObjects < 31;
        }
        else {
          BOOL v16 = 1;
        }
        if (v16)
        {
          unsigned int v21 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)size_t v35 = v14;
            *(_WORD *)&v35[8] = 1024;
            LODWORD(v36) = v15;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          }
        }

        else
        {
          unsigned int v21 = *(os_log_s **)(gLogObjects + 240);
        }

        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          int MsgID = iAP2MsgGetMsgID(a2);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)size_t v35 = ParamID;
          *(_WORD *)&v35[4] = 1024;
          *(_DWORD *)&v35[6] = MsgID;
          _os_log_error_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param",  buf,  0xEu);
        }

        goto LABEL_34;
    }
  }

BOOL iap2_mediaLibrary_playMediaLibrarySpecialHandler(uint64_t a1, uint64_t a2)
{
  BOOL result = 0LL;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v5 = gNumLogObjects < 21;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      BOOL v6 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      BOOL v6 = *(os_log_s **)(gLogObjects + 160);
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "PlayMediaLibrarySpecial", buf, 2u);
    }

    unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
    if (FirstParam)
    {
      NextParam = (unsigned __int16 *)FirstParam;
      uint64_t v28 = a1;
      uint64_t v9 = 0LL;
      char v10 = 0;
      uint64_t v11 = 0LL;
      do
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        if (ParamID == 2)
        {
          *(_DWORD *)buf = -1431655766;
          unint64_t DataAsU64 = iAP2MsgGetDataAsU64(NextParam, buf);
          if (*(_DWORD *)buf)
          {
            int v24 = (os_log_s *)logObjectForModule_1(30);
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
              iap2_mediaLibrary_playMediaLibraryItemsHandler_cold_4(a2);
            }
            return 0LL;
          }

          if (v9)
          {
            int v27 = (os_log_s *)logObjectForModule_1(30);
            if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
              iap2_mediaLibrary_playMediaLibrarySpecialHandler_cold_6(a2);
            }
            return 0LL;
          }

          uint64_t v9 = DataAsU64;
        }

        else
        {
          int v13 = ParamID;
          if (ParamID == 1)
          {
            if (!iAP2MsgIsDataVoid(NextParam))
            {
              int v25 = (os_log_s *)logObjectForModule_1(30);
              BOOL result = os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
              if (!result) {
                return result;
              }
              iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_4(a2);
              return 0LL;
            }

            char v10 = 1;
          }

          else if (ParamID)
          {
            uint64_t v16 = gLogObjects;
            int v17 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 31)
            {
              __int16 v18 = *(os_log_s **)(gLogObjects + 240);
            }

            else
            {
              __int16 v18 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)uint64_t v30 = v16;
                *(_WORD *)&v30[8] = 1024;
                *(_DWORD *)&v30[10] = v17;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              }
            }

            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            {
              int MsgID = iAP2MsgGetMsgID(a2);
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)uint64_t v30 = v13;
              *(_WORD *)&v30[4] = 1024;
              *(_DWORD *)&v30[6] = MsgID;
              _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param",  buf,  0xEu);
            }
          }

          else
          {
            *(_DWORD *)buf = -1431655766;
            DataAsString = iAP2MsgGetDataAsString(NextParam, (BOOL *)buf);
            if (*(_DWORD *)buf)
            {
              uint64_t v23 = (os_log_s *)logObjectForModule_1(30);
              if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
                iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
              }
              return 0LL;
            }

            if (v11)
            {
              int v26 = (os_log_s *)logObjectForModule_1(30);
              if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
                iap2_mediaLibrary_playMediaLibrarySpecialHandler_cold_3(a2);
              }
              return 0LL;
            }

            uint64_t v11 = (const char *)DataAsString;
          }
        }

        NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
      }

      while (NextParam);
      if (!v11) {
        goto LABEL_37;
      }
      if (gLogObjects && gNumLogObjects >= 21)
      {
        unint64_t v20 = *(os_log_s **)(gLogObjects + 160);
      }

      else
      {
        unint64_t v20 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)uint64_t v30 = v10 & 1;
        *(_WORD *)&v30[4] = 2048;
        *(void *)&v30[6] = v9;
        __int16 v31 = 2080;
        unsigned int v32 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "PlayMediaLibrarySpecial: allSongsSeen=%d startingItemPersistentID=%llu libraryUID=%s",  buf,  0x1Cu);
      }

      if ((v10 & 1) != 0)
      {
        uint64_t v22 = (__CFString *)CFStringCreateWithCString(kCFAllocatorDefault, v11, 0x8000100u);
        platform_mediaLibrary_playAllSongs(*(void **)(v28 + 8), v22, v9);
        if (v22) {
          CFRelease(v22);
        }
        return 1LL;
      }
    }

    else
    {
LABEL_37:
      unsigned int v21 = (os_log_s *)logObjectForModule_1(30);
      BOOL result = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      iap2_mediaLibrary_playMediaLibrarySpecialHandler_cold_1(a2);
    }

    return 0LL;
  }

  return result;
}

uint64_t iap2_mediaLibrary_infoUpdateHandler(uint64_t result, uint64_t a2)
{
  uint64_t v59 = (uint64_t *)result;
  if (!result) {
    return result;
  }
  BOOL result = 0LL;
  if (!a2) {
    return result;
  }
  uint64_t v58 = v59[1];
  if (!v58) {
    return result;
  }
  if (*(_DWORD *)a2) {
    return 0LL;
  }
  unsigned int v3 = *(const __CFArray **)(a2 + 8);
  if (v3) {
    CFIndex Count = CFArrayGetCount(v3);
  }
  else {
    CFIndex Count = 0LL;
  }
  int v56 = (void *)a2;
  if (gLogObjects && gNumLogObjects >= 31)
  {
    BOOL v5 = *(os_log_s **)(gLogObjects + 240);
  }

  else
  {
    BOOL v5 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a2 + 8);
    *(_DWORD *)buf = 138412802;
    if (v6) {
      uint64_t v7 = ".";
    }
    else {
      uint64_t v7 = "nil ";
    }
    uint64_t v62 = v58;
    __int16 v63 = 2080;
    *(void *)uint64_t v64 = v7;
    *(_WORD *)&v64[8] = 2048;
    *(void *)&v64[10] = Count;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "iap2_mediaLibrary_infoUpdateHandler %@ libraryInfoList(%scount=%ld)",  buf,  0x20u);
  }

  BOOL result = iap2_feature_getFeature((uint64_t)v59, 0xDu);
  if (!result) {
    return result;
  }
  if (!*(_BYTE *)result) {
    return 0LL;
  }
  uint64_t v57 = result;
  if (gLogObjects && gNumLogObjects >= 31)
  {
    int v8 = *(os_log_s **)(gLogObjects + 240);
    uint64_t v9 = a2;
  }

  else
  {
    int v8 = (os_log_s *)&_os_log_default;
    uint64_t v9 = a2;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v62 = v58;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "iap2_mediaLibrary_infoUpdateHandler %@ update library list",  buf,  0xCu);
  }

  if (Count >= 1)
  {
    CFIndex v10 = 0LL;
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v9 + 8), v10);
      Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"ACCMediaLibraryTypeKey");
      int valuePtr = 4;
      if (!Value) {
        break;
      }
      if (CFNumberGetValue(Value, kCFNumberCharType, &valuePtr)) {
        goto LABEL_43;
      }
      uint64_t v13 = gLogObjects;
      int v14 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 31)
      {
        int v15 = *(os_log_s **)(gLogObjects + 240);
      }

      else
      {
        int v15 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          uint64_t v62 = v13;
          __int16 v63 = 1024;
          *(_DWORD *)uint64_t v64 = v14;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
        }
      }

      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        uint64_t v62 = v58;
        __int16 v63 = 2112;
        *(void *)uint64_t v64 = ValueAtIndex;
        _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "iap2_mediaLibrary_infoUpdateHandler %@, ERROR: failed to get type from typeObj! entry=%@",  buf,  0x16u);
      }

LABEL_43:
    if (!valuePtr)
    {
      uint64_t v20 = gLogObjects;
      int v21 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 31)
      {
        uint64_t v22 = *(os_log_s **)(gLogObjects + 240);
      }

      else
      {
        uint64_t v22 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          uint64_t v62 = v20;
          __int16 v63 = 1024;
          *(_DWORD *)uint64_t v64 = v21;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
        }
      }

      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        uint64_t v23 = CFDictionaryGetValue(ValueAtIndex, @"ACCMediaLibraryNameKey");
        int v24 = CFDictionaryGetValue(ValueAtIndex, @"ACCMediaLibraryUIDKey");
        int v25 = CFDictionaryGetValue(ValueAtIndex, @"ACCMediaLibraryTypeKey");
        *(_DWORD *)buf = 138413314;
        uint64_t v62 = v58;
        __int16 v63 = 2048;
        *(void *)uint64_t v64 = v10;
        *(_WORD *)&v64[8] = 2112;
        *(void *)&v64[10] = v23;
        *(_WORD *)&v64[18] = 2112;
        *(void *)&v64[20] = v24;
        *(_WORD *)&v64[28] = 2112;
        unsigned int v65 = v25;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "iap2_mediaLibrary_infoUpdateHandler %@ i=%ld addUpdateLibrary name=%@ uid=%@ type=%@",  buf,  0x34u);
      }

      iap2_mediaLibrary_addUpdateLibrary((uint64_t)v59, ValueAtIndex);
    }

    goto LABEL_56;
  }

  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_25);
  }
  if (_logPacketToFile)
  {
    LogWriter = getLogWriter();
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(LogWriter);
    [v32 log:v21];
  }

  objc_autoreleasePoolPop(v10);
}

  -[NSMutableDictionary setObject:forKey:]( v3,  "setObject:forKey:",  self->_genre,  @"ACCMediaLibraryUpdateItemGenre");
  validMask = self->_validMask;
  if ((validMask & 0x20000) == 0)
  {
LABEL_19:
    if ((validMask & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_45;
  }

uint64_t iap2_mediaLibrary_addUpdateLibrary(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v2 = 1LL;
  if (a1 && theDict)
  {
    Value = (const __CFString *)CFDictionaryGetValue(theDict, @"ACCMediaLibraryNameKey");
    uint64_t v6 = (const __CFString *)CFDictionaryGetValue(theDict, @"ACCMediaLibraryUIDKey");
    uint64_t v7 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"ACCMediaLibraryTypeKey");
    unsigned __int8 valuePtr = -86;
    if (v6) {
      BOOL v8 = v7 == 0LL;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8) {
      return 1LL;
    }
    CFNumberGetValue(v7, kCFNumberSInt8Type, &valuePtr);
    CStringPtr = CFStringGetCStringPtr(v6, 0x8000100u);
    uint64_t MediaLibraryForUID = _iap2_mediaLibrary_findMediaLibraryForUID(a1, CStringPtr);
    uint64_t v11 = (_DWORD *)MediaLibraryForUID;
    if (MediaLibraryForUID || (v2 = 1LL, (uint64_t v11 = calloc(1uLL, 0xC8uLL)) != 0LL))
    {
      CStringFromCFString = GetCStringFromCFString(v6);
      __strlcpy_chk((char *)v11 + 65, CStringFromCFString, 64LL, 64LL);
      if (Value)
      {
        uint64_t v13 = GetCStringFromCFString(Value);
        __strlcpy_chk((char *)v11 + 1, v13, 64LL, 64LL);
      }

      v11[33] = valuePtr;
      if (MediaLibraryForUID)
      {
        uint64_t v2 = 1LL;
LABEL_45:
        if (gLogObjects) {
          BOOL v29 = gNumLogObjects < 31;
        }
        else {
          BOOL v29 = 1;
        }
        if (v29)
        {
          int v30 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        else
        {
          int v30 = *(os_log_s **)(gLogObjects + 240);
        }

        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v31 = "failed to insert";
          if ((_DWORD)v2) {
            __int16 v31 = "inserted";
          }
          int v32 = v11[33];
          uint64_t v44 = *(void *)(a1 + 8);
          int v33 = "updated";
          *(_DWORD *)buf = 138413314;
          __int16 v45 = 2080;
          if (!MediaLibraryForUID) {
            int v33 = v31;
          }
          *(void *)uint64_t v46 = v33;
          *(_WORD *)&v46[8] = 2080;
          *(void *)&v46[10] = (char *)v11 + 1;
          *(_WORD *)&v46[18] = 2080;
          *(void *)&v46[20] = (char *)v11 + 65;
          *(_WORD *)&v46[28] = 1024;
          int v47 = v32;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "iap2_mediaLibrary_addUpdateLibrary %@ %s MediaLibraryInfo name=%s uid=%s type=%d",  buf,  0x30u);
        }

        return v2;
      }

      uint64_t Feature = iap2_feature_getFeature(a1, 0xDu);
      uint64_t v2 = Feature;
      if (!Feature) {
        goto LABEL_45;
      }
      int v15 = *(_DWORD *)(Feature + 52);
      if (v15 && *(void *)(Feature + 40))
      {
        if (v15 == *(_DWORD *)(Feature + 48))
        {
          int v41 = 2 * v15;
          *(_DWORD *)(Feature + 52) = 2 * v15;
          if (gLogObjects && gNumLogObjects >= 31)
          {
            uint64_t v16 = *(os_log_s **)(gLogObjects + 240);
          }

          else
          {
            uint64_t v16 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            uint64_t v35 = *(void *)(a1 + 8);
            int v36 = *(_DWORD *)(v2 + 52);
            *(_DWORD *)buf = 138412802;
            uint64_t v44 = v35;
            __int16 v45 = 1024;
            *(_DWORD *)uint64_t v46 = v36;
            *(_WORD *)&v46[4] = 1024;
            *(_DWORD *)&v46[6] = v41;
            _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "_iap2_mediaLibrary_insertMediaLibrary %@ re-allocate buffer for mediaLibraryInfo list, mediaLibraryAllocCount=%d->%d",  buf,  0x18u);
          }

          int v37 = (char *)realloc(*(void **)(v2 + 40), 8LL * v41);
          if (v37)
          {
            *(void *)(v2 + 40) = v37;
            *(_DWORD *)(v2 + 52) = v41;
            bzero(&v37[8 * *(int *)(v2 + 48)], 8LL * (v41 - *(_DWORD *)(v2 + 48)));
          }

          else
          {
            if (gLogObjects && gNumLogObjects >= 31)
            {
              BOOL v38 = *(os_log_s **)(gLogObjects + 240);
            }

            else
            {
              BOOL v38 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
            {
              uint64_t v39 = *(void *)(a1 + 8);
              int v40 = *(_DWORD *)(v2 + 52);
              *(_DWORD *)buf = 138412802;
              uint64_t v44 = v39;
              __int16 v45 = 1024;
              *(_DWORD *)uint64_t v46 = v40;
              *(_WORD *)&v46[4] = 1024;
              *(_DWORD *)&v46[6] = v41;
              _os_log_error_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_ERROR,  "_iap2_mediaLibrary_insertMediaLibrary %@ FAILED to re-allocate buffer for mediaLibraryInfo list, mediaLi braryAllocCount=%d->%d",  buf,  0x18u);
            }
          }
        }

        goto LABEL_28;
      }

      *(_DWORD *)(Feature + 52) = 2;
      uint64_t v17 = gLogObjects;
      int v18 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 31)
      {
        unint64_t v19 = *(os_log_s **)(gLogObjects + 240);
      }

      else
      {
        unint64_t v19 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          uint64_t v44 = v17;
          __int16 v45 = 1024;
          *(_DWORD *)uint64_t v46 = v18;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          int v20 = *(_DWORD *)(v2 + 52);
          goto LABEL_25;
        }
      }

      int v20 = 2;
LABEL_25:
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        uint64_t v21 = *(void *)(a1 + 8);
        *(_DWORD *)buf = 138412546;
        uint64_t v44 = v21;
        __int16 v45 = 1024;
        *(_DWORD *)uint64_t v46 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "_iap2_mediaLibrary_insertMediaLibrary %@ allocate new buffer for mediaLibraryInfo list, mediaLibraryAllocCount=%d",  buf,  0x12u);
        int v20 = *(_DWORD *)(v2 + 52);
      }

      *(void *)(v2 + 40) = calloc(v20, 8uLL);
LABEL_28:
      uint64_t v22 = *(void *)(v2 + 40);
      if (v22 && (uint64_t v23 = *(unsigned int *)(v2 + 52), (int)v23 >= 1))
      {
        uint64_t v24 = 0LL;
        while (*(void *)(v22 + 8 * v24))
        {
          if (v23 == ++v24)
          {
            uint64_t v2 = 0LL;
            goto LABEL_45;
          }
        }

        if (gLogObjects) {
          BOOL v25 = gNumLogObjects < 31;
        }
        else {
          BOOL v25 = 1;
        }
        if (v25)
        {
          int v26 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        else
        {
          int v26 = *(os_log_s **)(gLogObjects + 240);
        }

        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          uint64_t v27 = *(void *)(a1 + 8);
          int v28 = v11[33];
          *(_DWORD *)buf = 138413314;
          uint64_t v44 = v27;
          __int16 v45 = 1024;
          *(_DWORD *)uint64_t v46 = v24;
          *(_WORD *)&v46[4] = 2080;
          *(void *)&v46[6] = (char *)v11 + 1;
          *(_WORD *)&v46[14] = 2080;
          *(void *)&v46[16] = (char *)v11 + 65;
          *(_WORD *)&v46[24] = 1024;
          *(_DWORD *)&v46[26] = v28;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "_iap2_mediaLibrary_insertMediaLibrary %@ found empty spot, insert MediaLibraryInfo @ index=%d name=%s uid=%s type=%d",  buf,  0x2Cu);
        }

        *(void *)(*(void *)(v2 + 40) + 8 * v24) = v11;
        ++*(_DWORD *)(v2 + 48);
        uint64_t v2 = 1LL;
      }

      else
      {
        uint64_t v2 = 0LL;
      }

      goto LABEL_45;
    }
  }

  return v2;
}

uint64_t iap2_mediaLibrary_libraryStateUpdateHandler(uint64_t result, uint64_t a2)
{
  if (result)
  {
    unsigned int v3 = (uint64_t *)result;
    BOOL result = 0LL;
    if (a2)
    {
      uint64_t v4 = v3[1];
      if (v4)
      {
        if (*(_DWORD *)a2 != 1) {
          return 0LL;
        }
        CStringPtr = CFStringGetCStringPtr(*(CFStringRef *)(a2 + 8), 0x8000100u);
        BOOL result = _iap2_mediaLibrary_findMediaLibraryForUID((uint64_t)v3, CStringPtr);
        if (!result) {
          return result;
        }
        if (!*(_BYTE *)result) {
          return 0LL;
        }
        if (gLogObjects && gNumLogObjects >= 31)
        {
          uint64_t v6 = *(os_log_s **)(gLogObjects + 240);
        }

        else
        {
          uint64_t v6 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          uint64_t v7 = *(void *)(a2 + 8);
          int v8 = *(_DWORD *)(a2 + 16);
          int v9 = *(unsigned __int8 *)(a2 + 20);
          int v19 = 138413058;
          uint64_t v20 = v4;
          __int16 v21 = 2112;
          uint64_t v22 = v7;
          __int16 v23 = 1024;
          int v24 = v8;
          __int16 v25 = 1024;
          int v26 = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "iap2_mediaLibrary_libraryStateUpdateHandler %@ libraryUID=%@ statetype=%d enabled=%d",  (uint8_t *)&v19,  0x22u);
        }

        uint64_t v10 = iAP2MsgInit((uint64_t)(v3 + 15), 19460, v3[24], 0xFFFF, 0LL, 0LL);
        iAP2MsgAddCFStringParam(v10, 0LL, 0, *(CFStringRef *)(a2 + 8));
        int v11 = *(_DWORD *)(a2 + 16);
        if (v11 == 1)
        {
          char v12 = *(_BYTE *)(a2 + 20);
          uint64_t v13 = v10;
          __int16 v14 = 9;
        }

        else
        {
          if (v11)
          {
            if (gLogObjects && gNumLogObjects >= 31)
            {
              int v15 = *(os_log_s **)(gLogObjects + 240);
            }

            else
            {
              int v15 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
            {
              uint64_t v16 = *(void *)(a2 + 8);
              int v17 = *(_DWORD *)(a2 + 16);
              int v18 = *(unsigned __int8 *)(a2 + 20);
              int v19 = 138413058;
              uint64_t v20 = v4;
              __int16 v21 = 2112;
              uint64_t v22 = v16;
              __int16 v23 = 1024;
              int v24 = v17;
              __int16 v25 = 1024;
              int v26 = v18;
              _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "iap2_mediaLibrary_libraryStateUpdateHandler %@ libraryUID=%@ INVALID statetype=%d enabled=%d",  (uint8_t *)&v19,  0x22u);
            }

            goto LABEL_19;
          }

          char v12 = *(_BYTE *)(a2 + 20);
          uint64_t v13 = v10;
          __int16 v14 = 8;
        }

        iAP2MsgAddU8Param(v13, 0LL, v14, v12);
LABEL_19:
        iap2_sessionControl_sendOutgoingMessage(v3, v10);
        platform_mediaLibrary_deleteParams((void *)a2);
        return 1LL;
      }
    }
  }

  return result;
}

uint64_t iap2_mediaLibrary_updateHandler(uint64_t result, _DWORD *a2)
{
  if (result)
  {
    uint64_t v2 = (uint64_t)a2;
    uint64_t v3 = result;
    BOOL result = 0LL;
    if (a2)
    {
      v189 = *(const __CFString **)(v3 + 8);
      if (v189)
      {
        if (*a2 != 2) {
          return 0LL;
        }
        uint64_t Feature = iap2_feature_getFeature(v3, 0xDu);
        CStringPtr = CFStringGetCStringPtr(*(CFStringRef *)(v2 + 8), 0x8000100u);
        uint64_t MediaLibraryForUID = _iap2_mediaLibrary_findMediaLibraryForUID(v3, CStringPtr);
        BOOL result = 0LL;
        v192 = (_DWORD *)Feature;
        if (Feature && MediaLibraryForUID)
        {
          if (*(_BYTE *)MediaLibraryForUID)
          {
            CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v2 + 24));
            uint64_t v7 = &startLogsNotificationObservers;
            if (gLogObjects && gNumLogObjects >= 31)
            {
              int v8 = *(os_log_s **)(gLogObjects + 240);
            }

            else
            {
              int v8 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            v190 = (uint64_t *)v3;
            if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
            {
              uint64_t v9 = *(void *)(v2 + 8);
              int v10 = *(unsigned __int8 *)(v2 + 16);
              if (*(void *)(v2 + 24)) {
                int v11 = ".";
              }
              else {
                int v11 = "nil ";
              }
              *(_DWORD *)buf = 138413314;
              *(void *)&uint8_t buf[4] = v189;
              *(_WORD *)&buf[12] = 2112;
              *(void *)&buf[14] = v9;
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&buf[24] = v10;
              *(_WORD *)&buf[28] = 2080;
              *(void *)&buf[30] = v11;
              *(_WORD *)&buf[38] = 2048;
              *(void *)&buf[40] = Count;
              _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "iap2_mediaLibrary_updateHandler %@ libraryUID=%@ startFull=%d data(%scount=%ld)",  buf,  0x30u);
            }

            uint64_t v203 = *(void *)(MediaLibraryForUID + 152);
            unsigned __int8 v205 = 0;
            int v12 = *(unsigned __int8 *)(v2 + 16);
            int v199 = *(_DWORD *)(MediaLibraryForUID + 192);
            unsigned int MaxSendPayloadSizeWithOverride = iap2_endpoint_getMaxSendPayloadSizeWithOverride((uint64_t)v190);
            uint64_t v195 = MediaLibraryForUID;
            __int16 v14 = &startLogsNotificationObservers;
            unsigned int v188 = MaxSendPayloadSizeWithOverride;
            unsigned int v186 = MaxSendPayloadSizeWithOverride >> 1;
            BOOL v198 = v12 != 0;
            if (Count >= 1)
            {
              uint64_t v15 = MediaLibraryForUID;
              CFIndex v16 = 0LL;
              BOOL v193 = 0;
              uint64_t v17 = 0LL;
              LOBYTE(MediaLibraryForUID) = 0;
              unsigned int v196 = 0;
              int v18 = 0LL;
              int v185 = (unsigned __int16)v15;
              cStr = (char *)(v15 + 160);
              unsigned int v187 = (MaxSendPayloadSizeWithOverride >> 1) + (MaxSendPayloadSizeWithOverride >> 2);
              LOBYTE(v202) = v12 != 0;
              while (1)
              {
                uint64_t v200 = v17;
                ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 24), v16);
                uint64_t v20 = v14[353];
                int v21 = *((_DWORD *)v7 + 708);
                uint64_t v22 = v18;
                if (v20) {
                  BOOL v23 = v21 < 31;
                }
                else {
                  BOOL v23 = 1;
                }
                if (v23)
                {
                  int v24 = (os_log_s *)&_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 134218240;
                    *(void *)&uint8_t buf[4] = v20;
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v21;
                    _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                  }
                }

                else
                {
                  int v24 = *(os_log_s **)(v20 + 240);
                }

                __int16 v25 = v7;
                if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v42 = *(void *)(v2 + 8);
                  *(_DWORD *)buf = 138413314;
                  *(void *)&uint8_t buf[4] = v189;
                  *(_WORD *)&buf[12] = 2112;
                  *(void *)&buf[14] = v42;
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&buf[24] = v200;
                  *(_WORD *)&buf[28] = 2048;
                  *(void *)&buf[30] = Count;
                  *(_WORD *)&buf[38] = 2112;
                  *(void *)&buf[40] = ValueAtIndex;
                  _os_log_debug_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "iap2_mediaLibrary_updateHandler %@ libraryUID=%@, uint64_t i = %d / %ld, entry=%@",  buf,  0x30u);
                }

                uint64_t v26 = v2;
                Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"ACCMediaLibraryUpdateTypeKey");
                int v28 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"ACCMediaLibraryUpdateProgressKey");
                CFStringRef cf = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"ACCMediaLibraryUpdateRevisionKey");
                uint64_t v29 = v14[353];
                int v30 = *((_DWORD *)v25 + 708);
                if (v29 && v30 >= 31)
                {
                  __int16 v31 = *(os_log_s **)(v29 + 240);
                }

                else
                {
                  __int16 v31 = (os_log_s *)&_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 134218240;
                    *(void *)&uint8_t buf[4] = v29;
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v30;
                    _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                  }
                }

                uint64_t v2 = v26;
                if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v43 = *(void *)(v26 + 8);
                  *(_DWORD *)buf = 138413570;
                  *(void *)&uint8_t buf[4] = v189;
                  *(_WORD *)&buf[12] = 2112;
                  *(void *)&buf[14] = v43;
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&buf[24] = v200;
                  *(_WORD *)&buf[28] = 2112;
                  *(void *)&buf[30] = Value;
                  *(_WORD *)&buf[38] = 2112;
                  *(void *)&buf[40] = v28;
                  LOWORD(v210) = 2112;
                  *(void *)((char *)&v210 + 2) = cf;
                  _os_log_debug_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEBUG,  "iap2_mediaLibrary_updateHandler %@ libraryUID=%@ update[%d]=(type=%@ progress=%@ revision=%@)",  buf,  0x3Au);
                }

                unsigned __int8 valuePtr = -86;
                CFNumberGetValue(Value, kCFNumberSInt8Type, &valuePtr);
                uint64_t v7 = v25;
                if (v28) {
                  CFNumberGetValue(v28, kCFNumberSInt8Type, &v205);
                }
                __int16 v14 = &startLogsNotificationObservers;
                if (v22) {
                  CFRelease(v22);
                }
                int v18 = (const __CFString *)CFRetain(cf);
                unsigned int v32 = valuePtr - 3;
                int v202 = v202 & (v32 < 2);
                if (v202 == 1)
                {
                  uint64_t v33 = gLogObjects;
                  int v34 = *((_DWORD *)v7 + 708);
                  if (gLogObjects && v34 >= 31)
                  {
                    uint64_t v35 = *(os_log_s **)(gLogObjects + 240);
                  }

                  else
                  {
                    uint64_t v35 = (os_log_s *)&_os_log_default;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 134218240;
                      *(void *)&uint8_t buf[4] = v33;
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = v34;
                      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                    }
                  }

                  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v57 = *(void *)(v2 + 8);
                    *(_DWORD *)buf = 138413058;
                    *(void *)&uint8_t buf[4] = v189;
                    *(_WORD *)&buf[12] = 2112;
                    *(void *)&buf[14] = v57;
                    *(_WORD *)&buf[22] = 1024;
                    *(_DWORD *)&buf[24] = 1;
                    *(_WORD *)&buf[28] = 1024;
                    *(_DWORD *)&buf[30] = valuePtr;
                    _os_log_debug_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEBUG,  "iap2_mediaLibrary_updateHandler %@ libraryUID=%@ bFullUpdateWaitForNonDelete=%d type=%d, skip deletes",  buf,  0x22u);
                  }

                  ++v196;
                  if ((MediaLibraryForUID & 1) != 0)
                  {
                    int v38 = v199;
                    LODWORD(MediaLibraryForUID) = v198;
                    uint64_t v17 = v200;
                    goto LABEL_258;
                  }

                  LOBYTE(MediaLibraryForUID) = 0;
                  uint64_t v17 = (v200 + 1);
                  int v202 = 1;
                }

                else
                {
                  if (valuePtr - 1 < 2)
                  {
                    int v37 = 2;
                    uint64_t MediaLibraryForUID = v195;
                    int v36 = v199;
                  }

                  else
                  {
                    uint64_t MediaLibraryForUID = v195;
                    int v36 = v199;
                    if (v32 >= 2)
                    {
                      int v37 = v199;
                      if (valuePtr)
                      {
                        uint64_t v39 = gLogObjects;
                        int v40 = *((_DWORD *)v7 + 708);
                        if (gLogObjects && v40 >= 31)
                        {
                          int v41 = *(os_log_s **)(gLogObjects + 240);
                        }

                        else
                        {
                          int v41 = (os_log_s *)&_os_log_default;
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 134218240;
                            *(void *)&uint8_t buf[4] = v39;
                            *(_WORD *)&buf[12] = 1024;
                            *(_DWORD *)&buf[14] = v40;
                            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                          }
                        }

                        BOOL v44 = os_log_type_enabled(v41, OS_LOG_TYPE_ERROR);
                        int v36 = v199;
                        int v37 = v199;
                        if (v44)
                        {
                          *(_DWORD *)buf = 67109120;
                          *(_DWORD *)&uint8_t buf[4] = valuePtr;
                          _os_log_error_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_ERROR,  "Invalid media library update type: %d\n",  buf,  8u);
                          int v36 = v199;
                          int v37 = v199;
                        }
                      }
                    }

                    else
                    {
                      int v37 = 1;
                    }
                  }

                  if (v36) {
                    BOOL v45 = v36 == v37;
                  }
                  else {
                    BOOL v45 = 1;
                  }
                  int v46 = !v45;
                  int v199 = v37;
                  *(_DWORD *)(MediaLibraryForUID + 192) = v37;
                  if (v45)
                  {
                    if (!v203)
                    {
                      BOOL v48 = malloc(0x20uLL);
                      *BOOL v48 = CFStringCreateCopy(kCFAllocatorDefault, v189);
                      v48[1] = CFRetain(*(CFTypeRef *)(v2 + 8));
                      v48[2] = CFRetain(cf);
                      *((_DWORD *)v48 + 6) = 0;
                      *((_BYTE *)v48 + 2_Block_object_dispose(va, 8) = 0;
                      *(_DWORD *)(MediaLibraryForUID + 196) = 0;
                      uint64_t v49 = malloc(0x48uLL);
                      int v50 = malloc(0xFFFFuLL);
                      uint64_t v203 = iAP2MsgInit( (uint64_t)v49,  19460,  (uint64_t)v50,  0xFFFF,  (uint64_t)_iAP2MediaLibraryMsgCleanupCB,  (uint64_t)v48);
                      if ((void *)v203 == v49)
                      {
                        *(void *)(MediaLibraryForUID + 152) = v49;
                        uint64_t v54 = gLogObjects;
                        int v55 = *((_DWORD *)v7 + 708);
                        if (gLogObjects && v55 >= 31)
                        {
                          int v56 = *(os_log_s **)(gLogObjects + 240);
                        }

                        else
                        {
                          int v56 = (os_log_s *)&_os_log_default;
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 134218240;
                            *(void *)&uint8_t buf[4] = v54;
                            *(_WORD *)&buf[12] = 1024;
                            *(_DWORD *)&buf[14] = v55;
                            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                          }
                        }

                        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
                        {
                          uint64_t v158 = *(void *)(v2 + 8);
                          int MsgID = iAP2MsgGetMsgID((uint64_t)v49);
                          v160 = (uint64_t *)v49[6];
                          uint64_t v161 = *v160;
                          uint64_t v162 = v160[1];
                          uint64_t v163 = v160[2];
                          int v164 = *((_DWORD *)v160 + 6);
                          LODWORD(v160) = *((unsigned __int8 *)v160 + 28);
                          *(_DWORD *)buf = 138414082;
                          *(void *)&uint8_t buf[4] = v189;
                          *(_WORD *)&buf[12] = 2112;
                          *(void *)&buf[14] = v158;
                          *(_WORD *)&buf[22] = 1024;
                          *(_DWORD *)&buf[24] = MsgID;
                          *(_WORD *)&buf[28] = 2112;
                          *(void *)&buf[30] = v161;
                          *(_WORD *)&buf[38] = 2112;
                          *(void *)&buf[40] = v162;
                          LOWORD(v210) = 2112;
                          *(void *)((char *)&v210 + 2) = v163;
                          WORD5(v210) = 1024;
                          HIDWORD(v210) = v164;
                          LOWORD(v211) = 1024;
                          *(_DWORD *)((char *)&v211 + 2) = (_DWORD)v160;
                          _os_log_debug_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEBUG,  "init outMsg: %@ libraryUID=%@ message(%04xh): context=(accessoryUID=%@ libraryUID=%@ lastRev ision=%@ updatesInMsg=%d confirmed=%d)",  buf,  0x46u);
                        }
                      }

                      else
                      {
                        uint64_t v51 = gLogObjects;
                        int v52 = *((_DWORD *)v7 + 708);
                        if (gLogObjects && v52 >= 31)
                        {
                          int v53 = *(os_log_s **)(gLogObjects + 240);
                        }

                        else
                        {
                          int v53 = (os_log_s *)&_os_log_default;
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 134218240;
                            *(void *)&uint8_t buf[4] = v51;
                            *(_WORD *)&buf[12] = 1024;
                            *(_DWORD *)&buf[14] = v52;
                            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                          }
                        }

                        uint64_t MediaLibraryForUID = v195;
                        if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
                        {
                          uint64_t v58 = *(void *)(v2 + 8);
                          int v59 = iAP2MsgGetMsgID((uint64_t)v49);
                          uint64_t v60 = *v48;
                          uint64_t v61 = v48[1];
                          uint64_t v62 = v48[2];
                          int v63 = *((_DWORD *)v48 + 6);
                          int v64 = *((unsigned __int8 *)v48 + 28);
                          *(_DWORD *)buf = 138414082;
                          *(void *)&uint8_t buf[4] = v189;
                          *(_WORD *)&buf[12] = 2112;
                          *(void *)&buf[14] = v58;
                          *(_WORD *)&buf[22] = 1024;
                          *(_DWORD *)&buf[24] = v59;
                          *(_WORD *)&buf[28] = 2112;
                          *(void *)&buf[30] = v60;
                          *(_WORD *)&buf[38] = 2112;
                          *(void *)&buf[40] = v61;
                          LOWORD(v210) = 2112;
                          *(void *)((char *)&v210 + 2) = v62;
                          WORD5(v210) = 1024;
                          HIDWORD(v210) = v63;
                          LOWORD(v211) = 1024;
                          *(_DWORD *)((char *)&v211 + 2) = v64;
                          _os_log_error_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_ERROR,  "ERROR: Failed init outMsg: %@ libraryUID=%@ message(%04xh): context=(accessoryUID=%@ library UID=%@ lastRevision=%@ updatesInMsg=%d confirmed=%d)",  buf,  0x46u);
                        }
                      }

                      iAP2MsgSetCallbackOnSend(v203, (uint64_t)__MsgSentOutCB);
                      iAP2MsgAddCFStringParam(v203, 0LL, 0, *(CFStringRef *)(v2 + 8));
                      __int16 v14 = &startLogsNotificationObservers;
                    }

                    switch(valuePtr)
                    {
                      case 1u:
                        unsigned int v65 = CFDictionaryGetValue(ValueAtIndex, @"ACCMediaLibraryUpdateItemDictionary");
                        uint64_t v66 = gLogObjects;
                        int v67 = *((_DWORD *)v7 + 708);
                        if (gLogObjects && v67 >= 31)
                        {
                          uint64_t v68 = *(os_log_s **)(gLogObjects + 240);
                          int v47 = v46;
                        }

                        else
                        {
                          uint64_t v68 = (os_log_s *)&_os_log_default;
                          int v47 = v46;
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 134218240;
                            *(void *)&uint8_t buf[4] = v66;
                            *(_WORD *)&buf[12] = 1024;
                            *(_DWORD *)&buf[14] = v67;
                            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                          }
                        }

                        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)buf = 67109888;
                          *(_DWORD *)&uint8_t buf[4] = (unsigned __int16)v190;
                          *(_WORD *)&buf[8] = 1024;
                          *(_DWORD *)&buf[10] = v185;
                          *(_WORD *)&buf[14] = 1024;
                          *(_DWORD *)&uint8_t buf[16] = (unsigned __int16)v203;
                          *(_WORD *)&buf[20] = 1024;
                          *(_DWORD *)&buf[22] = (unsigned __int16)v65;
                          _os_log_debug_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEBUG,  "_iap2_mediaLibrary_mediaItemUpdateHandler: endpoint=%hxh mediaLibraryInfo=%hxh pOutMsg=%hxh data=%hxh",  buf,  0x1Au);
                        }

                        char v81 = 0;
                        __int16 v14 = &startLogsNotificationObservers;
                        if (!v203 || !v65) {
                          goto LABEL_222;
                        }
                        if (!*(_BYTE *)MediaLibraryForUID) {
                          goto LABEL_221;
                        }
                        int v82 = v18;
                        *(void *)&__int128 v83 = 0xAAAAAAAAAAAAAAAALL;
                        *((void *)&v83 + 1) = 0xAAAAAAAAAAAAAAAALL;
                        __int128 v214 = v83;
                        __int128 v212 = v83;
                        __int128 v213 = v83;
                        __int128 v210 = v83;
                        __int128 v211 = v83;
                        *(_OWORD *)&uint8_t buf[16] = v83;
                        *(_OWORD *)&buf[32] = v83;
                        *(_OWORD *)buf = v83;
                        uint64_t v84 = iAP2MsgAddGroupParam(v203, 2);
                        platform_mediaLibrary_getStructUpdateItem(v2, (uint64_t)v65, (uint64_t)buf);
                        for (uint64_t i = 0LL; i != 28; ++i)
                        {
                          if ((((unint64_t)*(unsigned int *)buf >> i) & 1) != 0)
                          {
                            switch((int)i)
                            {
                              case 0:
                                unint64_t v86 = *(void *)&buf[8];
                                uint64_t v87 = v203;
                                uint64_t v88 = (uint64_t)v84;
                                __int16 v89 = 0;
                                goto LABEL_131;
                              case 1:
                                CFStringRef v90 = *(char **)&buf[16];
                                uint64_t v91 = v203;
                                uint64_t v92 = (uint64_t)v84;
                                __int16 v93 = 1;
                                goto LABEL_133;
                              case 2:
                                char v94 = buf[24];
                                uint64_t v95 = v203;
                                uint64_t v96 = (uint64_t)v84;
                                __int16 v97 = 2;
                                goto LABEL_136;
                              case 3:
                                char v94 = buf[25];
                                uint64_t v95 = v203;
                                uint64_t v96 = (uint64_t)v84;
                                __int16 v97 = 3;
                                goto LABEL_136;
                              case 4:
                                iAP2MsgAddU32Param(v203, (uint64_t)v84, 4, *(unsigned int *)&buf[28]);
                                continue;
                              case 5:
                                unint64_t v86 = *(void *)&buf[32];
                                uint64_t v87 = v203;
                                uint64_t v88 = (uint64_t)v84;
                                __int16 v89 = 5;
                                goto LABEL_131;
                              case 6:
                                CFStringRef v90 = *(char **)&buf[40];
                                uint64_t v91 = v203;
                                uint64_t v92 = (uint64_t)v84;
                                __int16 v93 = 6;
                                goto LABEL_133;
                              case 7:
                                unsigned int v98 = (unsigned __int16)v210;
                                uint64_t v99 = v203;
                                uint64_t v100 = (uint64_t)v84;
                                __int16 v101 = 7;
                                goto LABEL_138;
                              case 8:
                                unsigned int v98 = WORD1(v210);
                                uint64_t v99 = v203;
                                uint64_t v100 = (uint64_t)v84;
                                __int16 v101 = 8;
                                goto LABEL_138;
                              case 9:
                                unsigned int v98 = WORD2(v210);
                                uint64_t v99 = v203;
                                uint64_t v100 = (uint64_t)v84;
                                __int16 v101 = 9;
                                goto LABEL_138;
                              case 10:
                                unsigned int v98 = WORD3(v210);
                                uint64_t v99 = v203;
                                uint64_t v100 = (uint64_t)v84;
                                __int16 v101 = 10;
                                goto LABEL_138;
                              case 11:
                                unint64_t v86 = *((void *)&v210 + 1);
                                uint64_t v87 = v203;
                                uint64_t v88 = (uint64_t)v84;
                                __int16 v89 = 11;
                                goto LABEL_131;
                              case 12:
                                CFStringRef v90 = (char *)v211;
                                uint64_t v91 = v203;
                                uint64_t v92 = (uint64_t)v84;
                                __int16 v93 = 12;
                                goto LABEL_133;
                              case 13:
                                unint64_t v86 = *((void *)&v211 + 1);
                                uint64_t v87 = v203;
                                uint64_t v88 = (uint64_t)v84;
                                __int16 v89 = 13;
                                goto LABEL_131;
                              case 14:
                                CFStringRef v90 = (char *)v212;
                                uint64_t v91 = v203;
                                uint64_t v92 = (uint64_t)v84;
                                __int16 v93 = 14;
                                goto LABEL_133;
                              case 15:
                                unint64_t v86 = *((void *)&v212 + 1);
                                uint64_t v87 = v203;
                                uint64_t v88 = (uint64_t)v84;
                                __int16 v89 = 15;
                                goto LABEL_131;
                              case 16:
                                CFStringRef v90 = (char *)v213;
                                uint64_t v91 = v203;
                                uint64_t v92 = (uint64_t)v84;
                                __int16 v93 = 16;
                                goto LABEL_133;
                              case 17:
                                unint64_t v86 = *((void *)&v213 + 1);
                                uint64_t v87 = v203;
                                uint64_t v88 = (uint64_t)v84;
                                __int16 v89 = 17;
LABEL_131:
                                iAP2MsgAddU64Param(v87, v88, v89, v86);
                                continue;
                              case 18:
                                CFStringRef v90 = (char *)v214;
                                uint64_t v91 = v203;
                                uint64_t v92 = (uint64_t)v84;
                                __int16 v93 = 18;
LABEL_133:
                                iAP2MsgAddStringParam(v91, v92, v93, v90);
                                continue;
                              case 19:
                                char v94 = BYTE8(v214);
                                uint64_t v95 = v203;
                                uint64_t v96 = (uint64_t)v84;
                                __int16 v97 = 19;
                                goto LABEL_136;
                              case 25:
                                char v94 = BYTE9(v214);
                                uint64_t v95 = v203;
                                uint64_t v96 = (uint64_t)v84;
                                __int16 v97 = 25;
LABEL_136:
                                iAP2MsgAddU8Param(v95, v96, v97, v94);
                                break;
                              case 27:
                                unsigned int v98 = WORD5(v214);
                                uint64_t v99 = v203;
                                uint64_t v100 = (uint64_t)v84;
                                __int16 v101 = 27;
LABEL_138:
                                iAP2MsgAddU16Param(v99, v100, v101, v98);
                                break;
                              default:
                                continue;
                            }
                          }
                        }

                        char v81 = 1;
                        int v18 = v82;
                        goto LABEL_222;
                      case 2u:
                        BOOL v72 = CFDictionaryGetValue(ValueAtIndex, @"ACCMediaLibraryUpdatePlaylistDictionary");
                        uint64_t v73 = gLogObjects;
                        int v74 = *((_DWORD *)v7 + 708);
                        if (gLogObjects && v74 >= 31)
                        {
                          unsigned int v75 = *(os_log_s **)(gLogObjects + 240);
                          int v47 = v46;
                        }

                        else
                        {
                          unsigned int v75 = (os_log_s *)&_os_log_default;
                          int v47 = v46;
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 134218240;
                            *(void *)&uint8_t buf[4] = v73;
                            *(_WORD *)&buf[12] = 1024;
                            *(_DWORD *)&buf[14] = v74;
                            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                          }
                        }

                        if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)buf = 67109888;
                          *(_DWORD *)&uint8_t buf[4] = (unsigned __int16)v190;
                          *(_WORD *)&buf[8] = 1024;
                          *(_DWORD *)&buf[10] = v185;
                          *(_WORD *)&buf[14] = 1024;
                          *(_DWORD *)&uint8_t buf[16] = (unsigned __int16)v203;
                          *(_WORD *)&buf[20] = 1024;
                          *(_DWORD *)&buf[22] = (unsigned __int16)v72;
                          _os_log_debug_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEBUG,  "_iap2_mediaLibrary_playlistUpdateHandler: endpoint=%hxh mediaLibraryInfo=%hxh pOutMsg=%hxh data=%hxh",  buf,  0x1Au);
                        }

                        uint64_t v102 = iap2_feature_getFeature((uint64_t)v190, 0xDu);
                        char v81 = 0;
                        __int16 v14 = &startLogsNotificationObservers;
                        if (!v72 || !v203 || !v102) {
                          goto LABEL_222;
                        }
                        uint64_t v103 = v190[4];
                        if (v103 && (uint64_t v104 = *(unsigned __int8 **)(v103 + 24)) != 0LL && *(_BYTE *)MediaLibraryForUID)
                        {
                          *(void *)&buf[32] = 0xAAAAAAAAAAAAAAAALL;
                          *(void *)&__int128 v105 = 0xAAAAAAAAAAAAAAAALL;
                          *((void *)&v105 + 1) = 0xAAAAAAAAAAAAAAAALL;
                          *(_OWORD *)buf = v105;
                          *(_OWORD *)&uint8_t buf[16] = v105;
                          unsigned int v106 = iAP2MsgAddGroupParam(v203, 3);
                          platform_mediaLibrary_getStructUpdatePlaylist(v2, (uint64_t)v72, (uint64_t)buf);
                          uint64_t v107 = 0LL;
                          v194 = v104;
                          do
                          {
                            if ((((unint64_t)*(unsigned int *)buf >> v107) & 1) != 0)
                            {
                              char v108 = buf[33];
                              switch((int)v107)
                              {
                                case 0:
                                  unint64_t v109 = *(void *)&buf[8];
                                  uint64_t v110 = v203;
                                  uint64_t v111 = (uint64_t)v106;
                                  __int16 v112 = 0;
                                  goto LABEL_161;
                                case 1:
                                  iAP2MsgAddStringParam(v203, (uint64_t)v106, 1, *(char **)&buf[16]);
                                  break;
                                case 2:
                                  unint64_t v109 = *(void *)&buf[24];
                                  uint64_t v110 = v203;
                                  uint64_t v111 = (uint64_t)v106;
                                  __int16 v112 = 2;
LABEL_161:
                                  iAP2MsgAddU64Param(v110, v111, v112, v109);
                                  break;
                                case 3:
                                  char v108 = buf[32];
                                  uint64_t v113 = v203;
                                  uint64_t v114 = (uint64_t)v106;
                                  __int16 v115 = 3;
                                  goto LABEL_171;
                                case 4:
                                  uint64_t v113 = v203;
                                  uint64_t v114 = (uint64_t)v106;
                                  __int16 v115 = 4;
                                  goto LABEL_171;
                                case 5:
                                  if ((buf[0] & 0x10) != 0 && buf[33])
                                  {
                                    uint64_t v116 = v14[353];
                                    int v117 = *((_DWORD *)v7 + 708);
                                    if (v116 && v117 >= 31)
                                    {
                                      unsigned int v118 = *(os_log_s **)(v116 + 240);
                                    }

                                    else
                                    {
                                      unsigned int v118 = (os_log_s *)&_os_log_default;
                                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                      {
                                        int v215 = 134218240;
                                        *(void *)v216 = v116;
                                        *(_WORD *)&v216[8] = 1024;
                                        *(_DWORD *)&v216[10] = v117;
                                        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\n gLogObjects: %p, gNumLogObjects: %d",  (uint8_t *)&v215,  0x12u);
                                      }
                                    }

                                    __int16 v14 = &startLogsNotificationObservers;
                                    uint64_t v104 = v194;
                                    if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
                                    {
                                      LOWORD(v215) = 0;
                                      v124 = v118;
                                      os_log_type_t v125 = OS_LOG_TYPE_DEFAULT;
                                      v126 = "_iap2_mediaLibrary_playlistUpdateHandler: Playlist is a folder, no need to send content.";
                                      uint32_t v127 = 2;
LABEL_200:
                                      _os_log_impl( (void *)&_mh_execute_header,  v124,  v125,  v126,  (uint8_t *)&v215,  v127);
                                      break;
                                    }
                                  }

                                  else if (buf[34] == 2)
                                  {
                                    int SessionForService = iAP2LinkGetSessionForService((uint64_t)v104, 1);
                                    SessionInfo = iAP2LinkGetSessionInfo(v104, SessionForService);
                                    if (SessionInfo)
                                    {
                                      if (SessionInfo[2] >= 2u && buf[34] != 1) {
                                        iAP2MsgAddVoidParam(v203, (uint64_t)v106, 7);
                                      }
                                    }
                                  }

                                  else if (buf[34] == 1)
                                  {
                                    int v119 = iAP2LinkGetSessionForService((uint64_t)v104, 1);
                                    unsigned __int8 v208 = 0;
                                    if (iAP2FileTransferAllocateBufferID((uint64_t)v104, v119, &v208))
                                    {
                                      int v120 = malloc(0x38uLL);
                                      v120[8] = v208;
                                      *(void *)int v120 = MediaLibraryForUID;
                                      *((void *)v120 + 2) = *(void *)&buf[8];
                                      v184 = v120;
                                      CFStringGetCString(cf, v120 + 24, 32LL, 0x8000100u);
                                      v183 = malloc(0x130uLL);
                                      iAP2FileTransferCreate(v104, v119, v208, 0LL, 0LL, 0, (uint64_t)v183);
                                      uint64_t v121 = v14[353];
                                      int v122 = *((_DWORD *)v7 + 708);
                                      if (v121 && v122 >= 31)
                                      {
                                        v123 = *(os_log_s **)(v121 + 240);
                                      }

                                      else
                                      {
                                        v123 = (os_log_s *)&_os_log_default;
                                        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                        {
                                          int v215 = 134218240;
                                          *(void *)v216 = v121;
                                          *(_WORD *)&v216[8] = 1024;
                                          *(_DWORD *)&v216[10] = v122;
                                          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\n gLogObjects: %p, gNumLogObjects: %d",  (uint8_t *)&v215,  0x12u);
                                        }
                                      }

                                      if (os_log_type_enabled(v123, OS_LOG_TYPE_DEBUG))
                                      {
                                        int v215 = 67109632;
                                        *(_DWORD *)v216 = 5;
                                        *(_WORD *)&v216[4] = 2048;
                                        *(void *)&v216[6] = *(void *)&buf[8];
                                        __int16 v217 = 1024;
                                        int v218 = v208;
                                        _os_log_debug_impl( (void *)&_mh_execute_header,  v123,  OS_LOG_TYPE_DEBUG,  "_iap2_mediaLibrary_playlistUpdateHandler: i=%d, iap2_sessionFileTransfer_addTr ansferForFeature, persistentID=%llu bufferID=%u",  (uint8_t *)&v215,  0x18u);
                                      }

                                      __int16 v14 = &startLogsNotificationObservers;
                                      if ((iap2_sessionFileTransfer_addTransferForFeature( (uint64_t)v190,  13,  (uint64_t)v183,  (uint64_t)v184) & 1) != 0)
                                      {
                                        iAP2MsgAddU8Param(v203, (uint64_t)v106, 5, v208);
                                        uint64_t v104 = v194;
                                      }

                                      else
                                      {
                                        uint64_t v137 = gLogObjects;
                                        int v138 = *((_DWORD *)v7 + 708);
                                        if (gLogObjects && v138 >= 31)
                                        {
                                          v139 = *(os_log_s **)(gLogObjects + 240);
                                        }

                                        else
                                        {
                                          v139 = (os_log_s *)&_os_log_default;
                                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                          {
                                            int v215 = 134218240;
                                            *(void *)v216 = v137;
                                            *(_WORD *)&v216[8] = 1024;
                                            *(_DWORD *)&v216[10] = v138;
                                            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\n gLogObjects: %p, gNumLogObjects: %d",  (uint8_t *)&v215,  0x12u);
                                          }
                                        }

                                        if (os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT))
                                        {
                                          int v215 = 67109376;
                                          *(_DWORD *)v216 = v208;
                                          *(_WORD *)&v216[4] = 1024;
                                          *(_DWORD *)&v216[6] = v208;
                                          _os_log_impl( (void *)&_mh_execute_header,  v139,  OS_LOG_TYPE_DEFAULT,  "_iap2_mediaLibrary_playlistUpdateHandler: failed to add fileXfer for bufferI D %u(%x) !!!!!!!!",  (uint8_t *)&v215,  0xEu);
                                        }

                                        __int16 v14 = &startLogsNotificationObservers;
                                        uint64_t v104 = v194;
                                        if (v183)
                                        {
                                          iAP2FileTransferRelease((uint64_t)v183);
                                          free(v183);
                                        }

                                        free(v184);
                                      }
                                    }

                                    else
                                    {
                                      uint64_t v134 = v14[353];
                                      int v135 = *((_DWORD *)v7 + 708);
                                      if (v134 && v135 >= 31)
                                      {
                                        v136 = *(os_log_s **)(v134 + 240);
                                      }

                                      else
                                      {
                                        v136 = (os_log_s *)&_os_log_default;
                                        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                        {
                                          int v215 = 134218240;
                                          *(void *)v216 = v134;
                                          *(_WORD *)&v216[8] = 1024;
                                          *(_DWORD *)&v216[10] = v135;
                                          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\n gLogObjects: %p, gNumLogObjects: %d",  (uint8_t *)&v215,  0x12u);
                                        }
                                      }

                                      __int16 v14 = &startLogsNotificationObservers;
                                      uint64_t v104 = v194;
                                      if (os_log_type_enabled(v136, OS_LOG_TYPE_FAULT)) {
                                        iap2_mediaLibrary_updateHandler_cold_3(&v206, v207, v136);
                                      }
                                    }
                                  }

                                  else
                                  {
                                    uint64_t v131 = v14[353];
                                    int v132 = *((_DWORD *)v7 + 708);
                                    if (v131 && v132 >= 31)
                                    {
                                      v133 = *(os_log_s **)(v131 + 240);
                                    }

                                    else
                                    {
                                      v133 = (os_log_s *)&_os_log_default;
                                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                                      {
                                        int v215 = 134218240;
                                        *(void *)v216 = v131;
                                        *(_WORD *)&v216[8] = 1024;
                                        *(_DWORD *)&v216[10] = v132;
                                        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\n gLogObjects: %p, gNumLogObjects: %d",  (uint8_t *)&v215,  0x12u);
                                      }
                                    }

                                    __int16 v14 = &startLogsNotificationObservers;
                                    uint64_t v104 = v194;
                                    if (os_log_type_enabled(v133, OS_LOG_TYPE_INFO))
                                    {
                                      int v215 = 67109120;
                                      *(_DWORD *)v216 = buf[34];
                                      v124 = v133;
                                      os_log_type_t v125 = OS_LOG_TYPE_INFO;
                                      v126 = "_iap2_mediaLibrary_playlistUpdateHandler: Invalid content style(%d)!";
                                      uint32_t v127 = 8;
                                      goto LABEL_200;
                                    }
                                  }

                                  break;
                                case 6:
                                  char v108 = buf[35];
                                  uint64_t v113 = v203;
                                  uint64_t v114 = (uint64_t)v106;
                                  __int16 v115 = 6;
                                  goto LABEL_171;
                                case 8:
                                  char v108 = buf[36];
                                  uint64_t v113 = v203;
                                  uint64_t v114 = (uint64_t)v106;
                                  __int16 v115 = 8;
LABEL_171:
                                  iAP2MsgAddU8Param(v113, v114, v115, v108);
                                  break;
                                default:
                                  break;
                              }
                            }

                            ++v107;
                          }

                          while (v107 != 10);
                          char v81 = 1;
                          int v47 = v46;
                        }

                        else
                        {
LABEL_221:
                          char v81 = 0;
                        }

LABEL_222:
                        BOOL v193 = v81;
LABEL_223:
                        ++*(_DWORD *)(MediaLibraryForUID + 196);
                        CFStringGetCString(v18, cStr, 32LL, 0x8000100u);
                        break;
                      case 3u:
                        *(void *)buf = 0LL;
                        unsigned int v76 = (const __CFNumber *)CFDictionaryGetValue( ValueAtIndex,  @"ACCMediaLibraryUpdateItemDeletePersistentID");
                        CFNumberGetValue(v76, kCFNumberSInt64Type, buf);
                        unint64_t v77 = *(void *)buf;
                        uint64_t v78 = v203;
                        __int16 v79 = 4;
                        goto LABEL_102;
                      case 4u:
                        *(void *)buf = 0LL;
                        uint64_t v80 = (const __CFNumber *)CFDictionaryGetValue( ValueAtIndex,  @"ACCMediaLibraryUpdatePlaylistDeletePersistentID");
                        CFNumberGetValue(v80, kCFNumberSInt64Type, buf);
                        unint64_t v77 = *(void *)buf;
                        uint64_t v78 = v203;
                        __int16 v79 = 5;
LABEL_102:
                        BOOL v193 = iAP2MsgAddI64Param(v78, 0LL, v79, v77) != 0;
                        int v47 = v46;
                        goto LABEL_223;
                      default:
                        uint64_t v69 = gLogObjects;
                        int v70 = *((_DWORD *)v7 + 708);
                        if (gLogObjects && v70 >= 31)
                        {
                          int v71 = *(os_log_s **)(gLogObjects + 240);
                          int v47 = v46;
                        }

                        else
                        {
                          int v71 = (os_log_s *)&_os_log_default;
                          int v47 = v46;
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 134218240;
                            *(void *)&uint8_t buf[4] = v69;
                            *(_WORD *)&buf[12] = 1024;
                            *(_DWORD *)&buf[14] = v70;
                            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                          }
                        }

                        if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = 67109120;
                          *(_DWORD *)&uint8_t buf[4] = valuePtr;
                          _os_log_error_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_ERROR,  "Invalid media library update type: %d\n",  buf,  8u);
                        }

                        goto LABEL_223;
                    }
                  }

                  else
                  {
                    if (v18) {
                      CFRelease(v18);
                    }
                    int v18 = CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
                    int v47 = v46;
                  }

                  uint64_t v140 = v14[353];
                  int v141 = *((_DWORD *)v7 + 708);
                  if (v140 && v141 >= 31)
                  {
                    v142 = *(os_log_s **)(v140 + 240);
                  }

                  else
                  {
                    v142 = (os_log_s *)&_os_log_default;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 134218240;
                      *(void *)&uint8_t buf[4] = v140;
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = v141;
                      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                    }
                  }

                  if (os_log_type_enabled(v142, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v153 = *(void *)(v2 + 8);
                    *(_DWORD *)buf = 138413058;
                    *(void *)&uint8_t buf[4] = v189;
                    *(_WORD *)&buf[12] = 2112;
                    *(void *)&buf[14] = v153;
                    *(_WORD *)&buf[22] = 1024;
                    *(_DWORD *)&buf[24] = valuePtr;
                    *(_WORD *)&buf[28] = 1024;
                    *(_DWORD *)&buf[30] = v193;
                    _os_log_debug_impl( (void *)&_mh_execute_header,  v142,  OS_LOG_TYPE_DEBUG,  "iap2_mediaLibrary_updateHandler %@ libraryUID=%@ type=%d result=%d",  buf,  0x22u);
                  }

                  uint64_t v143 = v14[353];
                  int v144 = *((_DWORD *)v7 + 708);
                  if (v143 && v144 >= 31)
                  {
                    v145 = *(os_log_s **)(v143 + 240);
                  }

                  else
                  {
                    v145 = (os_log_s *)&_os_log_default;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 134218240;
                      *(void *)&uint8_t buf[4] = v143;
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = v144;
                      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                    }
                  }

                  if (os_log_type_enabled(v145, OS_LOG_TYPE_DEBUG))
                  {
                    int v154 = *(_DWORD *)(MediaLibraryForUID + 196);
                    int v155 = v192[1];
                    int v156 = v192[2];
                    *(_DWORD *)buf = 67110144;
                    *(_DWORD *)&uint8_t buf[4] = v47;
                    *(_WORD *)&buf[8] = 1024;
                    *(_DWORD *)&buf[10] = v154;
                    *(_WORD *)&buf[14] = 1024;
                    *(_DWORD *)&uint8_t buf[16] = v155;
                    *(_WORD *)&buf[20] = 1024;
                    *(_DWORD *)&buf[22] = v156;
                    *(_WORD *)&buf[26] = 1024;
                    *(_DWORD *)&buf[28] = v198;
                    _os_log_debug_impl( (void *)&_mh_execute_header,  v145,  OS_LOG_TYPE_DEBUG,  "iap2_mediaLibrary_updateHandler addDeleteChanged=%d sendCount=%d window=%d recordsPerMessage=%d bFullUpdate=%d",  buf,  0x20u);
                  }

                  uint64_t v146 = v14[353];
                  int v147 = *((_DWORD *)v7 + 708);
                  if (v146 && v147 >= 31)
                  {
                    v148 = *(os_log_s **)(v146 + 240);
                  }

                  else
                  {
                    v148 = (os_log_s *)&_os_log_default;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 134218240;
                      *(void *)&uint8_t buf[4] = v146;
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = v147;
                      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                    }
                  }

                  if (os_log_type_enabled(v148, OS_LOG_TYPE_DEBUG))
                  {
                    int MsgLen = iAP2MsgGetMsgLen(v203);
                    *(_DWORD *)buf = 67109376;
                    *(_DWORD *)&uint8_t buf[4] = MsgLen;
                    *(_WORD *)&buf[8] = 1024;
                    *(_DWORD *)&buf[10] = v188;
                    _os_log_debug_impl( (void *)&_mh_execute_header,  v148,  OS_LOG_TYPE_DEBUG,  "iap2_mediaLibrary_updateHandler msgLen=%d maxSendPayloadSize=%d",  buf,  0xEu);
                  }

                  if (!v203)
                  {
                    uint64_t v203 = 0LL;
                    if (!v47)
                    {
LABEL_259:
                      LOBYTE(MediaLibraryForUID) = 0;
                      int v202 = 0;
                      uint64_t v17 = (v200 + 1);
                      goto LABEL_260;
                    }

                    LODWORD(MediaLibraryForUID) = v198;
LABEL_257:
                    uint64_t v17 = v200;
                    int v38 = v199;
LABEL_258:
                    BOOL v198 = MediaLibraryForUID;
                    LOBYTE(MediaLibraryForUID) = 1;
                    int v199 = v38;
                    goto LABEL_260;
                  }

                  int v149 = v205;
                  if (v205 > 0x63u) {
                    char v150 = 1;
                  }
                  else {
                    char v150 = v47;
                  }
                  unsigned int v151 = *(_DWORD *)(MediaLibraryForUID + 196);
                  if ((v150 & 1) == 0 && v151 < v192[2])
                  {
                    int v149 = v205;
                    unsigned int v151 = *(_DWORD *)(MediaLibraryForUID + 196);
                  }

                  _iap2_mediaLibrary_sendUpdateMsg(v190, v192, *(void *)(v2 + 8), v203, v18, v198, v149, v151);
                  uint64_t v203 = 0LL;
                  uint64_t v152 = MediaLibraryForUID;
                  LODWORD(MediaLibraryForUID) = 0;
                  *(void *)(v152 + 152) = 0LL;
                  *(_DWORD *)(v152 + 196) = 0;
                  BOOL v193 = 1;
                  if ((v47 & 1) != 0) {
                    goto LABEL_257;
                  }
                  uint64_t v17 = (v200 + 1);
                  int v202 = 0;
                  BOOL v198 = 0;
                }

LABEL_260:
                CFIndex v16 = (int)v17;
              }
            }

            int v18 = 0LL;
            unsigned int v196 = 0;
            LOBYTE(MediaLibraryForUID) = 0;
            BOOL v193 = 0;
            int v202 = v12 != 0;
LABEL_263:
            v165 = (__CFString *)v18;
            uint64_t v166 = v14[353];
            if (v166 && *((int *)v7 + 708) >= 31)
            {
              v167 = *(os_log_s **)(v166 + 240);
              v168 = v190;
            }

            else
            {
              v167 = (os_log_s *)&_os_log_default;
              v168 = v190;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v167, OS_LOG_TYPE_DEBUG))
            {
              int v179 = iAP2MsgGetMsgLen(v203);
              int v180 = *(_DWORD *)(v195 + 196);
              int v181 = v192[1];
              int v182 = v192[2];
              *(_DWORD *)buf = 67110144;
              *(_DWORD *)&uint8_t buf[4] = v179;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v205;
              *(_WORD *)&buf[14] = 1024;
              *(_DWORD *)&uint8_t buf[16] = v180;
              *(_WORD *)&buf[20] = 1024;
              *(_DWORD *)&buf[22] = v181;
              *(_WORD *)&buf[26] = 1024;
              *(_DWORD *)&buf[28] = v182;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v167,  OS_LOG_TYPE_DEBUG,  "iap2_mediaLibrary_updateHandler msgLen=%d progress=%d sendCount=%d window=%d recordsPerMessage=%d",  buf,  0x20u);
            }

            unsigned int v169 = v188;
            if (v203)
            {
              int v170 = v205;
              if (v205 > 0x63u) {
                char v171 = 1;
              }
              else {
                char v171 = MediaLibraryForUID;
              }
              if ((v171 & 1) != 0) {
                goto LABEL_275;
              }
              uint64_t v172 = v195;
              BOOL v173 = v198;
              if (*(_DWORD *)(v195 + 196) >= v192[2])
              {
LABEL_279:
                v174 = v165;
                _iap2_mediaLibrary_sendUpdateMsg( v168,  v192,  *(void *)(v2 + 8),  v203,  v165,  v173,  v170,  *(_DWORD *)(v172 + 196));
                *(void *)(v172 + 152) = 0LL;
                *(_DWORD *)(v172 + 196) = 0;
                char v175 = 1;
                if (!v165) {
                  goto LABEL_281;
                }
                goto LABEL_280;
              }

              if (iAP2MsgGetMsgLen(v203) > v186 + (v169 >> 2))
              {
                int v170 = v205;
LABEL_275:
                uint64_t v172 = v195;
                BOOL v173 = v198;
                goto LABEL_279;
              }
            }

            if (v202)
            {
              if (gLogObjects && *((int *)v7 + 708) >= 31)
              {
                v177 = *(os_log_s **)(gLogObjects + 240);
              }

              else
              {
                v177 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v177, OS_LOG_TYPE_INFO))
              {
                uint64_t v178 = *(void *)(v2 + 8);
                *(_DWORD *)buf = 138413314;
                *(void *)&uint8_t buf[4] = v189;
                *(_WORD *)&buf[12] = 2112;
                *(void *)&buf[14] = v178;
                *(_WORD *)&buf[22] = 2112;
                *(void *)&buf[24] = v165;
                *(_WORD *)&buf[32] = 1024;
                *(_DWORD *)&buf[34] = 1;
                *(_WORD *)&buf[38] = 1024;
                *(_DWORD *)&buf[40] = v196;
                _os_log_impl( (void *)&_mh_execute_header,  v177,  OS_LOG_TYPE_INFO,  "iap2_mediaLibrary_updateHandler %@ libraryUID=%@ lastRevision=%@, bFullUpdateWaitForNonDelete=%d, call confirmLibraryUpdateAsync, skipDeleteCount=%d",  buf,  0x2Cu);
              }

              v174 = v165;
              platform_mediaLibrary_confirmLibraryUpdate((void *)v168[1], *(void **)(v2 + 8), v165, v196);
            }

            else
            {
              v174 = v165;
            }

            char v175 = v193;
            if (!v174)
            {
LABEL_281:
              if ((v175 & 1) != 0)
              {
                platform_mediaLibrary_deleteParams((void *)v2);
                return 1LL;
              }

              return 0LL;
            }

LABEL_280:
            char v176 = v175;
            CFRelease(v174);
            char v175 = v176;
            goto LABEL_281;
          }

          return 0LL;
        }
      }
    }
  }

  return result;
}

void _iAP2MediaLibraryMsgCleanupCB(uint64_t a1, int a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 31;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    BOOL v5 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    BOOL v5 = *(os_log_s **)(gLogObjects + 240);
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (a1)
    {
      int v6 = *(unsigned __int16 *)(a1 + 48);
      int MsgID = iAP2MsgGetMsgID(a1);
      int MsgLen = iAP2MsgGetMsgLen(a1);
    }

    else
    {
      int MsgID = 0;
      int v6 = 0;
      int MsgLen = 0;
    }

    int v38 = 67110402;
    *(_DWORD *)uint64_t v39 = (unsigned __int16)a1;
    *(_WORD *)&v39[4] = 1024;
    *(_DWORD *)&v39[6] = v6;
    *(_WORD *)int v40 = 1024;
    *(_DWORD *)&v40[2] = MsgID;
    *(_WORD *)&_BYTE v40[6] = 1024;
    *(_DWORD *)&v40[8] = MsgLen;
    *(_WORD *)&v40[12] = 1024;
    *(_DWORD *)&v40[14] = a2;
    __int16 v41 = 2080;
    *(void *)uint64_t v42 = dispatch_queue_get_label(0LL);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "iAP 2MediaLibraryMsg Cleanup callback fired! msg=%hxh context=%hxh msgID=%xh msgLen=%d needDelete=%d currentDispatchQueue: %s",  (uint8_t *)&v38,  0x2Au);
  }

  if (a1)
  {
    uint64_t v9 = *(void *)(a1 + 48);
    if (!v9) {
      goto LABEL_75;
    }
    if (gLogObjects && gNumLogObjects >= 31)
    {
      int v10 = *(os_log_s **)(gLogObjects + 240);
    }

    else
    {
      int v10 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      _iAP2MediaLibraryMsgCleanupCB_cold_5(a1, (uint64_t *)v9, v10);
    }
    EndpointWithUUID = acc_manager_getEndpointWithUUID(*(const void **)v9);
    if (!EndpointWithUUID)
    {
LABEL_75:
      if (!a2) {
        return;
      }
      goto LABEL_62;
    }

    else {
      uint64_t v12 = 0LL;
    }
    uint64_t Feature = (_DWORD *)iap2_feature_getFeature(v12, 0xDu);
    __int16 v14 = (CFTypeRef *)(v9 + 8);
    CStringPtr = CFStringGetCStringPtr(*(CFStringRef *)(v9 + 8), 0x8000100u);
    uint64_t MediaLibraryForUID = _iap2_mediaLibrary_findMediaLibraryForUID(v12, CStringPtr);
    if (MediaLibraryForUID && *(void *)(MediaLibraryForUID + 152) == a1)
    {
      *(void *)(MediaLibraryForUID + 152) = 0LL;
      if (!a2) {
        return;
      }
    }

    else if (!a2)
    {
      return;
    }

    if (gLogObjects) {
      BOOL v17 = gNumLogObjects <= 30;
    }
    else {
      BOOL v17 = 1;
    }
    int v18 = !v17;
    if (Feature)
    {
      if (v18)
      {
        int v19 = *(os_log_s **)(gLogObjects + 240);
      }

      else
      {
        int v19 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v29 = *(void *)v9;
        uint64_t v30 = *(void *)(v9 + 8);
        uint64_t v31 = *(void *)(v9 + 16);
        int v32 = *(_DWORD *)(v9 + 24);
        int v33 = *(unsigned __int8 *)(v9 + 28);
        int v34 = Feature[5];
        int v35 = Feature[6];
        int v36 = Feature[3];
        int v37 = Feature[4];
        int v38 = 138414594;
        *(void *)uint64_t v39 = v29;
        *(_WORD *)&v39[8] = 2112;
        *(void *)int v40 = v30;
        *(_WORD *)&v40[8] = 2112;
        *(void *)&v40[10] = v31;
        __int16 v41 = 1024;
        *(_DWORD *)uint64_t v42 = v32;
        *(_WORD *)&v42[4] = 1024;
        *(_DWORD *)&_BYTE v42[6] = v33;
        __int16 v43 = 1024;
        int v44 = v34;
        __int16 v45 = 1024;
        int v46 = v36;
        __int16 v47 = 1024;
        int v48 = v35;
        __int16 v49 = 1024;
        int v50 = v37;
        __int16 v51 = 1024;
        int v52 = 1;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "_iAP2MediaLibraryMsgCleanupCB: cleanup context (accessoryUID=%@ libraryUID=%@ lastRevision=%@ updatesInMsg=%d confirmed=%d), ml (updateMessagesInFlight=%d--/%d updateMessagesPendingSend=%d/%d), needDelete=%d",  (uint8_t *)&v38,  0x4Au);
      }

      int v21 = Feature[5];
      if (v21) {
        Feature[5] = v21 - 1;
      }
      if (Feature[6] >= Feature[4]) {
        goto LABEL_56;
      }
    }

    else
    {
      if (v18)
      {
        uint64_t v20 = *(os_log_s **)(gLogObjects + 240);
      }

      else
      {
        uint64_t v20 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
        _iAP2MediaLibraryMsgCleanupCB_cold_2();
      }
    }

    if (!*(_BYTE *)(v9 + 28))
    {
      *(_BYTE *)(v9 + 2_Block_object_dispose(va, 8) = 1;
      platform_mediaLibrary_confirmLibraryUpdate( *(void **)v9,  *(void **)(v9 + 8),  *(void **)(v9 + 16),  *(unsigned int *)(v9 + 24));
    }

void __MsgSentOutCB(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 48);
    if (v1)
    {
      EndpointWithUUID = acc_manager_getEndpointWithUUID(*(const void **)v1);
      if (EndpointWithUUID)
      {
        uint64_t v3 = EndpointWithUUID[7];
        if (v3)
        {
          uint64_t Feature = iap2_feature_getFeature(v3, 0xDu);
          if (Feature)
          {
            BOOL v5 = (_DWORD *)Feature;
            if (gLogObjects && gNumLogObjects >= 31)
            {
              int v6 = *(os_log_s **)(gLogObjects + 240);
            }

            else
            {
              int v6 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
              __MsgSentOutCB_cold_1();
            }
            unsigned int v7 = v5[6];
            if (v7) {
              v5[6] = --v7;
            }
            ++v5[5];
            if (!*(_BYTE *)(v1 + 28) && v7 < v5[4])
            {
              *(_BYTE *)(v1 + 2_Block_object_dispose(va, 8) = 1;
              platform_mediaLibrary_confirmLibraryUpdate( *(void **)v1,  *(void **)(v1 + 8),  *(void **)(v1 + 16),  *(unsigned int *)(v1 + 24));
            }
          }
        }
      }
    }
  }

const char *_iap2_mediaLibrary_sendUpdateMsg( uint64_t *a1, _DWORD *a2, uint64_t a3, uint64_t a4, const __CFString *a5, int a6, int a7, int a8)
{
  BOOL result = GetCStringFromCFString(a5);
  int v40 = a1;
  if (a1 && a2)
  {
    __int16 v14 = *(uint64_t **)(a4 + 48);
    uint64_t v15 = (char *)result;
    if (gLogObjects) {
      BOOL v16 = gNumLogObjects < 31;
    }
    else {
      BOOL v16 = 1;
    }
    if (v16)
    {
      BOOL v17 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      BOOL v17 = *(os_log_s **)(gLogObjects + 240);
    }

    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = v40[1];
      int MsgID = iAP2MsgGetMsgID(a4);
      int MsgLen = iAP2MsgGetMsgLen(a4);
      uint64_t v21 = *v14;
      uint64_t v22 = v14[1];
      *(_DWORD *)buf = 138414594;
      uint64_t v42 = v18;
      __int16 v43 = 2112;
      uint64_t v44 = a3;
      __int16 v45 = 1024;
      int v46 = a6;
      __int16 v47 = 1024;
      int v48 = a7;
      __int16 v49 = 1024;
      int v50 = a8;
      __int16 v51 = 1024;
      *(_DWORD *)int v52 = (unsigned __int16)a4;
      *(_WORD *)&v52[4] = 1024;
      *(_DWORD *)&v52[6] = MsgID;
      LOWORD(v53) = 1024;
      *(_DWORD *)((char *)&v53 + 2) = MsgLen;
      HIWORD(v53) = 2112;
      *(void *)uint64_t v54 = v21;
      *(_WORD *)&v54[8] = 2112;
      uint64_t v55 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "_iap2_mediaLibrary_sendUpdateMsg %@ libraryUID=%@ fullUpdate=%d progress=%d sendCount=%d pOutMsg(%hxh ID=%xh len =%d): context=(accessoryUID=%@ libraryUID=%@)",  buf,  0x4Eu);
    }

    if (a6) {
      iAP2MsgAddVoidParam(a4, 0LL, 6);
    }
    iAP2MsgAddStringParam(a4, 0LL, 1, v15);
    iAP2MsgAddU8Param(a4, 0LL, 7, a7);
    if (v14)
    {
      BOOL v23 = (const void *)v14[2];
      if (v23)
      {
        CFRelease(v23);
        v14[2] = 0LL;
      }

      if (a5) {
        v14[2] = (uint64_t)CFRetain(a5);
      }
      *((_DWORD *)v14 + 6) = a8;
    }

    if (gLogObjects && gNumLogObjects >= 31)
    {
      int v24 = *(os_log_s **)(gLogObjects + 240);
    }

    else
    {
      int v24 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v25 = v40[1];
      int v26 = iAP2MsgGetMsgID(a4);
      int v27 = iAP2MsgGetMsgLen(a4);
      if (v14)
      {
        uint64_t v30 = *v14;
        uint64_t v29 = v14[1];
        uint64_t v31 = v14[2];
        int v28 = *((_DWORD *)v14 + 6);
        int v32 = *((unsigned __int8 *)v14 + 28);
      }

      else
      {
        int v28 = 0;
        uint64_t v29 = 0LL;
        uint64_t v30 = 0LL;
        uint64_t v31 = 0LL;
        int v32 = 0;
      }

      int v33 = a2[5];
      int v34 = a2[6];
      int v35 = a2[3];
      int v36 = a2[4];
      *(_DWORD *)buf = 138415874;
      uint64_t v42 = v25;
      __int16 v43 = 2112;
      uint64_t v44 = a3;
      __int16 v45 = 1024;
      int v46 = (unsigned __int16)a4;
      __int16 v47 = 1024;
      int v48 = v26;
      __int16 v49 = 1024;
      int v50 = v27;
      __int16 v51 = 2112;
      *(void *)int v52 = v30;
      *(_WORD *)&v52[8] = 2112;
      uint64_t v53 = v29;
      *(_WORD *)uint64_t v54 = 2112;
      *(void *)&v54[2] = v31;
      LOWORD(v55) = 1024;
      *(_DWORD *)((char *)&v55 + 2) = v28;
      HIWORD(v55) = 1024;
      int v56 = v32;
      __int16 v57 = 1024;
      int v58 = a6;
      __int16 v59 = 1024;
      int v60 = v33;
      __int16 v61 = 1024;
      int v62 = v35;
      __int16 v63 = 1024;
      int v64 = v34;
      __int16 v65 = 1024;
      int v66 = v36;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "_iap2_mediaLibrary_sendUpdateMsg %@ libraryUID=%@ send message(%hxh ID=%xh len=%d): context=(accessoryUID=%@ lib raryUID=%@ lastRevision=%@ updatesInMsg=%d confirmed=%d) fullUpdate=%d updateMessagesInFlight=%d/%d updateMessag esPendingSend=%d++/%d",  buf,  0x70u);
    }

    ++a2[6];
    return (const char *)iap2_sessionControl_sendOutgoingMessageAndCallbackOnACK(v40, a4);
  }

  return result;
}

uint64_t iap2_mediaLibrary_updatePlaylistContentHandler(uint64_t result, _DWORD *a2)
{
  if (result)
  {
    uint64_t v2 = (uint64_t)a2;
    uint64_t v3 = result;
    BOOL result = 0LL;
    if (a2)
    {
      BOOL v4 = *(void **)(v3 + 8);
      if (v4)
      {
        if (*a2 != 3) {
          return 0LL;
        }
        BOOL v5 = &startLogsNotificationObservers;
        if (gLogObjects && gNumLogObjects >= 31)
        {
          int v6 = *(os_log_s **)(gLogObjects + 240);
        }

        else
        {
          int v6 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        uint64_t v115 = v3;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          uint64_t v8 = *(void *)(v2 + 8);
          uint64_t v7 = *(void *)(v2 + 16);
          uint64_t v9 = *(void *)(v2 + 24);
          int v10 = *(_DWORD *)(v2 + 32);
          CFIndex Count = *(const __CFArray **)(v2 + 40);
          if (Count) {
            uint64_t v12 = ".";
          }
          else {
            uint64_t v12 = "nil ";
          }
          if (Count) {
            CFIndex Count = (const __CFArray *)CFArrayGetCount(Count);
          }
          *(_DWORD *)buf = 138413826;
          *(void *)&uint8_t buf[4] = v4;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v8;
          *(_WORD *)&buf[22] = 2112;
          *(void *)&buf[24] = v7;
          *(_WORD *)&buf[32] = 2048;
          *(void *)&buf[34] = v9;
          *(_WORD *)&buf[42] = 1024;
          *(_DWORD *)&buf[44] = v10;
          *(_WORD *)&_BYTE buf[48] = 2080;
          *(void *)&buf[50] = v12;
          *(_WORD *)&buf[58] = 2048;
          *(void *)&buf[60] = Count;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "iap2_mediaLibrary_updatePlaylistContentHandler %@ libraryUID=%@ revision=%@ persistentID=%llu style=%d data(%scount=%lu)",  buf,  0x44u);
          uint64_t v3 = v115;
        }

        CStringPtr = CFStringGetCStringPtr(*(CFStringRef *)(v2 + 8), 0x8000100u);
        uint64_t MediaLibraryForUID = _iap2_mediaLibrary_findMediaLibraryForUID(v3, CStringPtr);
        if (!MediaLibraryForUID) {
          goto LABEL_103;
        }
        uint64_t v15 = (unsigned __int8 *)MediaLibraryForUID;
        if (gLogObjects && gNumLogObjects >= 31)
        {
          BOOL v16 = *(os_log_s **)(gLogObjects + 240);
        }

        else
        {
          BOOL v16 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          int v17 = *((_DWORD *)v15 + 33);
          int v18 = *v15;
          *(_DWORD *)buf = 138413314;
          *(void *)&uint8_t buf[4] = v4;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v15 + 1;
          *(_WORD *)&buf[22] = 2080;
          *(void *)&buf[24] = v15 + 65;
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v17;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "iap2_mediaLibrary_updatePlaylistContentHandler %@ mediaLibraryInfo(name='%s' uid='%s' type=%u started=%d)",  buf,  0x2Cu);
        }

        if (!*v15 || (uint64_t v19 = *(void *)(v3 + 32)) == 0 || (v20 = *(unsigned __int8 **)(v19 + 24)) == 0LL)
        {
LABEL_103:
          platform_mediaLibrary_confirmLibraryPlaylistContentUpdate(v4, *(void **)(v2 + 8), *(void **)(v2 + 16));
          return 0LL;
        }

        int SessionForService = iAP2LinkGetSessionForService(*(void *)(v19 + 24), 1);
        SessionInfo = iAP2LinkGetSessionInfo(v20, SessionForService);
        if (SessionInfo) {
          unsigned int v112 = SessionInfo[2];
        }
        else {
          unsigned int v112 = 0;
        }
        unsigned __int8 v122 = 0;
        *(void *)&__int128 v22 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v120[0] = v22;
        v120[1] = v22;
        v120[2] = v22;
        v120[3] = v22;
        unint64_t v121 = 0xAAAAAAAAAAAAAAAALL;
        BOOL v23 = *(const __CFArray **)(v2 + 40);
        if (v23) {
          CFIndex v117 = CFArrayGetCount(v23);
        }
        else {
          CFIndex v117 = 0LL;
        }
        uint64_t v110 = v20;
        if (gLogObjects && gNumLogObjects >= 31)
        {
          int v24 = *(os_log_s **)(gLogObjects + 240);
        }

        else
        {
          int v24 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v59 = *(void *)(v2 + 8);
          uint64_t v60 = *(void *)(v2 + 16);
          uint64_t v61 = *(void *)(v2 + 24);
          int v62 = *(_DWORD *)(v2 + 32);
          int v63 = *(unsigned __int16 *)(v2 + 40);
          *(_DWORD *)buf = 138414082;
          *(void *)&uint8_t buf[4] = v4;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v59;
          *(_WORD *)&buf[22] = 2112;
          *(void *)&buf[24] = v60;
          *(_WORD *)&buf[32] = 2048;
          *(void *)&buf[34] = v61;
          *(_WORD *)&buf[42] = 1024;
          *(_DWORD *)&buf[44] = v62;
          *(_WORD *)&_BYTE buf[48] = 1024;
          *(_DWORD *)&buf[50] = v63;
          *(_WORD *)&buf[54] = 1024;
          *(_DWORD *)&buf[56] = SessionForService;
          *(_WORD *)&buf[60] = 1024;
          *(_DWORD *)&buf[62] = v112;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "updatePlaylistContentHandler: accessoryUID=%@ libraryUID=%@ revision=%@ persistentID=%llu style=%d data=%hxh session=%u sessionVer=%u",  buf,  0x42u);
        }

        int v25 = *(_DWORD *)(v2 + 32);
        uint64_t v114 = v4;
        if (v25 != 2)
        {
          if (v25 == 1)
          {
            *(void *)&__int128 v26 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
            *(_OWORD *)&buf[8] = v26;
            *(_OWORD *)&buf[40] = v26;
            *(_OWORD *)&buf[24] = v26;
            buf[8] = 0;
            *(void *)buf = v15;
            int v27 = *(const __CFString **)(v2 + 16);
            *(void *)&uint8_t buf[16] = *(void *)(v2 + 24);
            CFStringGetCString(v27, &buf[24], 32LL, 0x8000100u);
            v119[0] = 0xDAAAAAA00LL;
            v119[1] = 0LL;
            v119[2] = buf;
            TransferEntryForuint64_t Feature = iap2_sessionFileTransfer_findTransferEntryForFeature( v3,  128,  (unsigned __int8 *)v119,  (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))_compareLibraryRevisionPlaylistPersistentID);
            if (gLogObjects) {
              BOOL v29 = gNumLogObjects <= 30;
            }
            else {
              BOOL v29 = 1;
            }
            int v30 = !v29;
            if (!TransferEntryForFeature)
            {
              if (v30)
              {
                int v46 = *(os_log_s **)(gLogObjects + 240);
              }

              else
              {
                int v46 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              __int16 v47 = &startLogsNotificationObservers;
              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v58 = *(void *)(v2 + 24);
                *(_DWORD *)unsigned __int8 valuePtr = 134217984;
                *(void *)&valuePtr[4] = v58;
                _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "updatePlaylistContentHandler: failed to get existing persistentIDs fileXfer for playlist(%llu)!",  valuePtr,  0xCu);
              }

              unsigned int v56 = 0;
              int v48 = 0LL;
              int v57 = 0;
              uint64_t v50 = 0LL;
LABEL_120:
              int v64 = (void *)v50;
              if (v48) {
                goto LABEL_121;
              }
LABEL_205:
              BOOL v5 = v47;
LABEL_159:
              uint64_t v82 = v5[353];
              if (v82 && gNumLogObjects >= 31)
              {
                __int128 v83 = *(os_log_s **)(v82 + 240);
              }

              else
              {
                __int128 v83 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v83, OS_LOG_TYPE_INFO))
              {
                uint64_t v84 = *(void *)(v2 + 8);
                uint64_t v85 = *(void *)(v2 + 16);
                uint64_t v86 = *(void *)(v2 + 24);
                int v87 = *(_DWORD *)(v2 + 32);
                int v88 = *(unsigned __int16 *)(v2 + 40);
                *(_DWORD *)buf = 138414082;
                *(void *)&uint8_t buf[4] = v114;
                *(_WORD *)&buf[12] = 2112;
                *(void *)&buf[14] = v84;
                *(_WORD *)&buf[22] = 2112;
                *(void *)&buf[24] = v85;
                *(_WORD *)&buf[32] = 2048;
                *(void *)&buf[34] = v86;
                *(_WORD *)&buf[42] = 1024;
                *(_DWORD *)&buf[44] = v87;
                *(_WORD *)&_BYTE buf[48] = 1024;
                *(_DWORD *)&buf[50] = v88;
                *(_WORD *)&buf[54] = 1024;
                *(_DWORD *)&buf[56] = SessionForService;
                *(_WORD *)&buf[60] = 1024;
                *(_DWORD *)&buf[62] = v112;
                _os_log_impl( (void *)&_mh_execute_header,  v83,  OS_LOG_TYPE_INFO,  "updatePlaylistContentHandler: WARNING: No fileXfer created to handle playlistContent; accessoryUID=%@ "
                  "libraryUID=%@ revision=%@ persistentID=%llu style=%d data=%hxh session=%u sessionVer=%u",
                  buf,
                  0x42u);
              }

              goto LABEL_166;
            }

            unint64_t v31 = TransferEntryForFeature;
            if (v30)
            {
              int v32 = *(os_log_s **)(gLogObjects + 240);
              uint64_t v33 = v117;
            }

            else
            {
              int v32 = (os_log_s *)&_os_log_default;
              uint64_t v33 = v117;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
              iap2_mediaLibrary_updatePlaylistContentHandler_cold_6((unsigned __int8 *)v31, v32);
            }
            __int16 v47 = &startLogsNotificationObservers;
            unsigned __int8 v122 = *(_BYTE *)v31;
            int v48 = *(_DWORD **)(v31 + 8);
            if (!v33)
            {
              unsigned int v56 = 0;
              uint64_t v50 = 0LL;
              int v57 = 3;
              goto LABEL_120;
            }

            __int16 v49 = malloc(8 * v33);
            if (v49)
            {
              uint64_t v50 = (uint64_t)v49;
              *(void *)unsigned __int8 valuePtr = 0xAAAAAAAAAAAAAAAALL;
              if (v33 < 1)
              {
                unsigned int v54 = 0;
              }

              else
              {
                CFIndex v51 = 0LL;
                int v52 = v49;
                do
                {
                  ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 40), v51);
                  CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, valuePtr);
                  *v52++ = bswap64(*(unint64_t *)valuePtr);
                  ++v51;
                }

                while (v33 != v51);
                unsigned int v54 = 8 * v33;
              }

              int v57 = 3;
              unsigned int v56 = v54;
              goto LABEL_120;
            }

            goto LABEL_103;
          }

LABEL_158:
          int v64 = 0LL;
          goto LABEL_159;
        }

        if (v112 < 2)
        {
          if (gLogObjects && gNumLogObjects >= 31)
          {
            __int16 v45 = *(os_log_s **)(gLogObjects + 240);
          }

          else
          {
            __int16 v45 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
            iap2_mediaLibrary_updatePlaylistContentHandler_cold_11(v112, v45);
          }
          goto LABEL_158;
        }

        if (!iAP2FileTransferAllocateBufferID((uint64_t)v20, SessionForService, &v122))
        {
          if (gLogObjects && gNumLogObjects >= 31)
          {
            uint64_t v55 = *(os_log_s **)(gLogObjects + 240);
          }

          else
          {
            uint64_t v55 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v55, OS_LOG_TYPE_FAULT)) {
            iap2_mediaLibrary_updatePlaylistContentHandler_cold_9(v55, v80, v81);
          }
          goto LABEL_158;
        }

        uint64_t v118 = v2;
        uint64_t v116 = v15;
        if (v117 < 1)
        {
          uint64_t v113 = 0LL;
          goto LABEL_171;
        }

        CFIndex v34 = 0LL;
        uint64_t v113 = 0LL;
LABEL_56:
        int v35 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 40), v34);
        if (!v35 || !*v15) {
          goto LABEL_77;
        }
        *(void *)&__int128 v36 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v36 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&buf[32] = v36;
        *(_OWORD *)&_BYTE buf[48] = v36;
        *(_OWORD *)buf = v36;
        *(_OWORD *)&uint8_t buf[16] = v36;
        platform_mediaLibrary_getStructPlaylistContentItem(v2, (uint64_t)v35, (uint64_t)buf);
        uint64_t v37 = 0LL;
        int v38 = 4;
        while (1)
        {
          int v39 = v38;
          v38 += 4;
          if ((int)v37 > 11)
          {
            switch((int)v37)
            {
              case 12:
                int v40 = *(const char **)&buf[32];
                goto LABEL_73;
              case 14:
                int v40 = *(const char **)&buf[40];
                goto LABEL_73;
              case 16:
                int v40 = *(const char **)&buf[48];
                goto LABEL_73;
              case 18:
                int v40 = *(const char **)&buf[56];
                goto LABEL_73;
              default:
                goto LABEL_74;
            }

            goto LABEL_74;
          }

          if ((_DWORD)v37)
          {
            if ((_DWORD)v37 == 1)
            {
              int v40 = *(const char **)&buf[16];
              goto LABEL_73;
            }

            if ((_DWORD)v37 == 6)
            {
              int v40 = *(const char **)&buf[24];
LABEL_73:
              int v38 = v39 + strlen(v40) + 5;
            }
          }

          else
          {
            int v38 = v39 + 12;
          }

LABEL_77:
            uint64_t v41 = v5[353];
            int v42 = gNumLogObjects;
            if (v41) {
              BOOL v43 = gNumLogObjects < 31;
            }
            else {
              BOOL v43 = 1;
            }
            if (v43)
            {
              uint64_t v44 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)&uint8_t buf[4] = v41;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v42;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              }
            }

            else
            {
              uint64_t v44 = *(os_log_s **)(v41 + 240);
            }

            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134217984;
              *(void *)&uint8_t buf[4] = v34;
              _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "updatePlaylistContentHandler: WARNING: record size is 0 for index %ld",  buf,  0xCu);
            }

LABEL_86:
            if (++v34 == v117)
            {
LABEL_171:
              __int16 v47 = v5;
              int v64 = malloc((HIDWORD(v113) + 22));
              iAP2MsgInit((uint64_t)v120, 0, (uint64_t)v64, HIDWORD(v113) + 22, 0LL, 0LL);
              iAP2MsgAddU32Param((uint64_t)v120, 0LL, 0, v113);
              iAP2MsgAddU32Param((uint64_t)v120, 0LL, 1, 0);
              if (v117 < 1)
              {
LABEL_203:
                unint64_t FirstParam = iAP2MsgGetFirstParam((uint64_t)v120, 0LL);
                uint64_t v50 = platform_sleepAssertion_createForApplePencil(FirstParam);
                uint64_t v103 = malloc(0x38uLL);
                v103[8] = v122;
                *(void *)uint64_t v103 = v116;
                uint64_t v2 = v118;
                uint64_t v104 = *(const __CFString **)(v118 + 16);
                *((void *)v103 + 2) = *(void *)(v118 + 24);
                CFStringGetCString(v104, v103 + 24, 32LL, 0x8000100u);
                int v48 = malloc(0x130uLL);
                iAP2FileTransferCreate(v110, SessionForService, v122, 0LL, 0LL, 0, (uint64_t)v48);
                if ((iap2_sessionFileTransfer_addTransferForFeature(v115, 13, (uint64_t)v48, (uint64_t)v103) & 1) == 0)
                {
                  BOOL v5 = v47;
                  uint64_t v105 = v47[353];
                  if (v105 && gNumLogObjects >= 31)
                  {
                    unsigned int v106 = *(os_log_s **)(v105 + 240);
                  }

                  else
                  {
                    unsigned int v106 = (os_log_s *)&_os_log_default;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                      platform_connectionInfo_configStreamCategoryListReady_cold_1();
                    }
                  }

                  if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 67109120;
                    *(_DWORD *)&uint8_t buf[4] = v122;
                    _os_log_impl( (void *)&_mh_execute_header,  v106,  OS_LOG_TYPE_DEFAULT,  "updatePlaylistContentHandler: ERROR: failed to create and add fileXfer (bufferID=%u) to list",  buf,  8u);
                  }

                  free(v103);
                  if (v48) {
                    free(v48);
                  }
                  goto LABEL_159;
                }

                unsigned int v56 = HIDWORD(v113) + 16;
                int v57 = 6;
                if (v48)
                {
LABEL_121:
                  if (v112 >= 2 && v57)
                  {
                    unint64_t v129 = 0xAAAAAAAAAAAAAAAALL;
                    *(void *)&__int128 v65 = 0xAAAAAAAAAAAAAAAALL;
                    *((void *)&v65 + 1) = 0xAAAAAAAAAAAAAAAALL;
                    __int128 v127 = v65;
                    __int128 v128 = v65;
                    __int128 v125 = v65;
                    __int128 v126 = v65;
                    *(_OWORD *)&buf[64] = v65;
                    __int128 v124 = v65;
                    *(_OWORD *)&buf[32] = v65;
                    *(_OWORD *)&_BYTE buf[48] = v65;
                    *(_OWORD *)buf = v65;
                    *(_OWORD *)&uint8_t buf[16] = v65;
                    CFIndex Length = CFStringGetLength(*(CFStringRef *)(v2 + 8));
                    *(_WORD *)buf = Length + 9;
                    *(void *)&buf[8] = *(void *)(v2 + 24);
                    else {
                      CFIndex v67 = 60LL;
                    }
                    CFStringGetCString(*(CFStringRef *)(v2 + 8), &buf[16], v67, 0x8000100u);
                    buf[75] = 0;
                    if (*(_DWORD *)(v2 + 32) == 2) {
                      int v68 = 7;
                    }
                    else {
                      int v68 = 4;
                    }
                    iAP2FileTransferTypeData((uint64_t)v48, v68, (unsigned __int16 *)buf);
                  }

                  uint64_t v69 = v47[353];
                  if (v69) {
                    BOOL v70 = gNumLogObjects <= 30;
                  }
                  else {
                    BOOL v70 = 1;
                  }
                  int v71 = !v70;
                  if (!v48[26])
                  {
                    if (v71)
                    {
                      uint64_t v73 = *(os_log_s **)(v69 + 240);
                    }

                    else
                    {
                      uint64_t v73 = (os_log_s *)&_os_log_default;
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        platform_connectionInfo_configStreamCategoryListReady_cold_1();
                      }
                    }

                    if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
                    {
                      uint64_t v75 = *(void *)(v2 + 8);
                      uint64_t v76 = *(void *)(v2 + 16);
                      uint64_t v77 = *(void *)(v2 + 24);
                      *(_DWORD *)buf = 138413314;
                      *(void *)&uint8_t buf[4] = v114;
                      *(_WORD *)&buf[12] = 2112;
                      *(void *)&buf[14] = v75;
                      *(_WORD *)&buf[22] = 2112;
                      *(void *)&buf[24] = v76;
                      *(_WORD *)&buf[32] = 2048;
                      *(void *)&buf[34] = v77;
                      *(_WORD *)&buf[42] = 1024;
                      *(_DWORD *)&buf[44] = v122;
                      _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_INFO,  "updatePlaylistContentHandler: %@ libraryUID=%@ revision=%@ persistentID=%llu, start file transfer, bufferID=%u",  buf,  0x30u);
                    }

                    if ((iAP2FileTransferStart( (uint64_t)v48,  v50,  v56,  v56,  (uint64_t)__handleTransferEnd,  (uint64_t)v64,  0,  0) & 1) == 0)
                    {
                      uint64_t v78 = v47[353];
                      if (v78 && gNumLogObjects >= 31)
                      {
                        __int16 v79 = *(os_log_s **)(v78 + 240);
                      }

                      else
                      {
                        __int16 v79 = (os_log_s *)&_os_log_default;
                        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                          platform_connectionInfo_configStreamCategoryListReady_cold_1();
                        }
                      }

                      if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
                      {
                        uint64_t v107 = *(void *)(v2 + 8);
                        uint64_t v108 = *(void *)(v2 + 16);
                        uint64_t v109 = *(void *)(v2 + 24);
                        *(_DWORD *)buf = 138413314;
                        *(void *)&uint8_t buf[4] = v114;
                        *(_WORD *)&buf[12] = 2112;
                        *(void *)&buf[14] = v107;
                        *(_WORD *)&buf[22] = 2112;
                        *(void *)&buf[24] = v108;
                        *(_WORD *)&buf[32] = 2048;
                        *(void *)&buf[34] = v109;
                        *(_WORD *)&buf[42] = 1024;
                        *(_DWORD *)&buf[44] = v122;
                        _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_INFO,  "updatePlaylistContentHandler: %@ libraryUID=%@ revision=%@ persistentID=%llu, Failed to start file transfer!!! bufferID=%u",  buf,  0x30u);
                      }

                      iAP2FileTransferCancel((uint64_t)v48);
                      iAP2FileTransferRelease((uint64_t)v48);
                    }

                    goto LABEL_168;
                  }

                  if (v71)
                  {
                    BOOL v72 = *(os_log_s **)(v69 + 240);
                  }

                  else
                  {
                    BOOL v72 = (os_log_s *)&_os_log_default;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                      platform_connectionInfo_configStreamCategoryListReady_cold_1();
                    }
                  }

                  if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
                  {
                    int v74 = v48[26];
                    *(_DWORD *)buf = 67109120;
                    *(_DWORD *)&uint8_t buf[4] = v74;
                    _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_INFO,  "updatePlaylistContentHandler: ERROR: File transfer in wrong state (%d)",  buf,  8u);
                  }

                  iAP2FileTransferCancel((uint64_t)v48);
LABEL_166:
                  if (v64) {
                    free(v64);
                  }
LABEL_168:
                  platform_mediaLibrary_confirmLibraryPlaylistContentUpdate( v114,  *(void **)(v2 + 8),  *(void **)(v2 + 16));
                  platform_mediaLibrary_deleteParams((void *)v2);
                  return 1LL;
                }

                goto LABEL_205;
              }

              CFIndex v89 = 0LL;
              while (2)
              {
                uint64_t v91 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v118 + 40), v89);
                uint64_t v92 = v47[353];
                int v93 = gNumLogObjects;
                if (v92) {
                  BOOL v94 = gNumLogObjects < 31;
                }
                else {
                  BOOL v94 = 1;
                }
                if (v94)
                {
                  uint64_t v95 = (os_log_s *)&_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 134218240;
                    *(void *)&uint8_t buf[4] = v92;
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v93;
                    _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                    uint64_t v95 = (os_log_s *)&_os_log_default;
                  }
                }

                else
                {
                  uint64_t v95 = *(os_log_s **)(v92 + 240);
                }

                if (!os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
                {
                  if (v91) {
                    goto LABEL_182;
                  }
LABEL_199:
                  if (++v89 == v117) {
                    goto LABEL_203;
                  }
                  continue;
                }

                break;
              }

              *(_DWORD *)buf = 67109888;
              *(_DWORD *)&uint8_t buf[4] = (unsigned __int16)v115;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = (unsigned __int16)v116;
              *(_WORD *)&buf[14] = 1024;
              *(_DWORD *)&uint8_t buf[16] = (v90 + 144) & 0xFFF0;
              *(_WORD *)&buf[20] = 1024;
              *(_DWORD *)&buf[22] = (unsigned __int16)v91;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_DEBUG,  "_iap2_mediaLibrary_playlistContentItemUpdateHandler: pEndpoint=%hxh mediaLibraryInfo=%hxh pOutMsg=%hxh data=%hxh",  buf,  0x1Au);
              if (!v91) {
                goto LABEL_199;
              }
LABEL_182:
              if (!*v116) {
                goto LABEL_199;
              }
              *(void *)&__int128 v96 = 0xAAAAAAAAAAAAAAAALL;
              *((void *)&v96 + 1) = 0xAAAAAAAAAAAAAAAALL;
              *(_OWORD *)&buf[32] = v96;
              *(_OWORD *)&_BYTE buf[48] = v96;
              *(_OWORD *)buf = v96;
              *(_OWORD *)&uint8_t buf[16] = v96;
              __int16 v97 = iAP2MsgAddGroupParam((uint64_t)v120, 2);
              platform_mediaLibrary_getStructPlaylistContentItem(v118, (uint64_t)v91, (uint64_t)buf);
              uint64_t v98 = 0LL;
              while (2)
              {
                if ((((unint64_t)*(unsigned int *)buf >> v98) & 1) != 0)
                {
                  if ((int)v98 <= 11)
                  {
                    if ((_DWORD)v98)
                    {
                      if ((_DWORD)v98 == 1)
                      {
                        uint64_t v99 = *(char **)&buf[16];
                        uint64_t v100 = (uint64_t)v97;
                        __int16 v101 = 1;
                      }

                      else
                      {
                        if ((_DWORD)v98 != 6) {
                          goto LABEL_198;
                        }
                        uint64_t v99 = *(char **)&buf[24];
                        uint64_t v100 = (uint64_t)v97;
                        __int16 v101 = 6;
                      }

  int v25 = v7[353];
  if (v25) {
    __int128 v26 = gNumLogObjects < 31;
  }
  else {
    __int128 v26 = 1;
  }
  if (v26)
  {
    int v27 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    int v27 = *(os_log_s **)(v25 + 240);
  }

  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    if (!a1 || (int v28 = *(void *)(a1 + 8)) == 0) {
      int v28 = 0LL;
    }
    *(_DWORD *)buf = 138415362;
    int v40 = v28;
    if (a2) {
      BOOL v29 = (const char *)(a2 + 65);
    }
    else {
      BOOL v29 = "<none>";
    }
    uint64_t v41 = 2080;
    int v42 = v29;
    BOOL v43 = 1024;
    uint64_t v44 = v24;
    __int16 v45 = 1024;
    int v46 = v23;
    __int16 v47 = 1024;
    int v48 = v21;
    __int16 v49 = 1024;
    uint64_t v50 = v30;
    CFIndex v51 = 1024;
    int v52 = LinkMaxCumAck;
    uint64_t v53 = 1024;
    unsigned int v54 = v37;
    uint64_t v55 = 1024;
    unsigned int v56 = v31;
    int v57 = 1024;
    uint64_t v58 = HIDWORD(v31);
    uint64_t v59 = 1024;
    uint64_t v60 = v18;
    uint64_t v61 = 1024;
    int v62 = v15;
    int v63 = 1024;
    int v64 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "iAP2MediaLibrary _calcWindowSize: %@ - %s success=%d window=%d recordsPerMessage=%d recordBytesPerMessage=%d maxUp dateMessagesInFlight=%d maxupdateMessagesPendingSend=%d maxPayloadSize=%d linkPeerMaxCumAck=%d estMaxRecordSize=%d playlistSize=%d itemSize=%d",  buf,  0x58u);
  }

  if (v24)
  {
    if (a3) {
      *a3 = v23;
    }
    if (a4) {
      *a4 = v21;
    }
    if (a5) {
      *a5 = LinkMaxCumAck;
    }
    if (a6) {
      *a6 = v37;
    }
  }

LABEL_197:
                      iAP2MsgAddStringParam((uint64_t)v120, v100, v101, v99);
                    }

                    else
                    {
                      iAP2MsgAddU64Param((uint64_t)v120, (uint64_t)v97, 0, *(unint64_t *)&buf[8]);
                    }
                  }

                  else
                  {
                    switch((int)v98)
                    {
                      case 12:
                        uint64_t v99 = *(char **)&buf[32];
                        uint64_t v100 = (uint64_t)v97;
                        __int16 v101 = 12;
                        goto LABEL_197;
                      case 14:
                        uint64_t v99 = *(char **)&buf[40];
                        uint64_t v100 = (uint64_t)v97;
                        __int16 v101 = 14;
                        goto LABEL_197;
                      case 16:
                        uint64_t v99 = *(char **)&buf[48];
                        uint64_t v100 = (uint64_t)v97;
                        __int16 v101 = 16;
                        goto LABEL_197;
                      case 18:
                        uint64_t v99 = *(char **)&buf[56];
                        uint64_t v100 = (uint64_t)v97;
                        __int16 v101 = 18;
                        goto LABEL_197;
                      default:
                        break;
                    }
                  }
                }

LABEL_198:
                if (++v98 == 28) {
                  goto LABEL_199;
                }
                continue;
              }
            }

            goto LABEL_56;
          }
        }
      }
    }
  }

  return result;
}

uint64_t _compareLibraryRevisionPlaylistPersistentID(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) != 13 || *(_DWORD *)(a2 + 4) != 13) {
    return -1LL;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a2 + 16);
  LODWORD(result) = strncmp((const char *)(*(void *)v2 + 65LL), (const char *)(*(void *)v3 + 65LL), 0x40uLL);
  if ((_DWORD)result) {
    return (int)result;
  }
  LODWORD(result) = strncmp((const char *)(v2 + 24), (const char *)(v3 + 24), 0x20uLL);
  if ((_DWORD)result) {
    return (int)result;
  }
  unint64_t v5 = *(void *)(v2 + 16);
  unint64_t v6 = *(void *)(v3 + 16);
  BOOL v7 = v5 == v6;
  BOOL v8 = v5 > v6;
  uint64_t v9 = 1LL;
  if (!v8) {
    uint64_t v9 = -1LL;
  }
  if (v7) {
    return 0LL;
  }
  else {
    return v9;
  }
}

uint64_t __handleTransferEnd(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = 0LL;
    if (a2)
    {
      if (*(void *)v3)
      {
        if (gLogObjects) {
          BOOL v4 = gNumLogObjects < 31;
        }
        else {
          BOOL v4 = 1;
        }
        if (v4)
        {
          unint64_t v5 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        else
        {
          unint64_t v5 = *(os_log_s **)(gLogObjects + 240);
        }

        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
          __handleTransferEnd_cold_2();
        }
        unsigned int v6 = *(_DWORD *)(v3 + 104);
        uint64_t result = 1LL;
        if (v6 <= 7 && ((1 << v6) & 0xD0) != 0)
        {
          if (*(void *)(v3 + 16))
          {
            if (*(void **)(v3 + 64) == a2)
            {
              free(a2);
              *(void *)(v3 + 64) = 0LL;
            }

            else
            {
              if (gLogObjects && gNumLogObjects >= 31)
              {
                BOOL v7 = *(os_log_s **)(gLogObjects + 240);
              }

              else
              {
                BOOL v7 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
              {
                int v9 = *(_DWORD *)(v3 + 104);
                int v10 = *(unsigned __int8 *)(v3 + 109);
                int v11 = *(unsigned __int16 *)(v3 + 16);
                int v12 = *(unsigned __int16 *)(v3 + 64);
                int v13 = 136316674;
                __int16 v14 = "__handleTransferEnd";
                __int16 v15 = 1024;
                int v16 = (unsigned __int16)v3;
                __int16 v17 = 1024;
                int v18 = v9;
                __int16 v19 = 1024;
                int v20 = v10;
                __int16 v21 = 1024;
                int v22 = v11;
                __int16 v23 = 1024;
                int v24 = (unsigned __int16)a2;
                __int16 v25 = 1024;
                int v26 = v12;
                _os_log_fault_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "%s: fileXfer=%hxh state=%d bufferID=%u pBuffer=%hxh userInfo=%hxh, userInfo != endCBUserInfo(%hxh) !!!!",  (uint8_t *)&v13,  0x30u);
              }
            }
          }

          *(void *)(v3 + 16) = 0LL;
          *(void *)(v3 + 40) = 0LL;
          uint64_t v8 = *(void *)(*(void *)v3 + 176LL);
          if (v8)
          {
            uint64_t result = *(void *)(v8 + 16);
            if (result)
            {
              iap2_sessionFileTransfer_removeTransferForFeature(result, 13, v3);
              return 1LL;
            }
          }

          else
          {
            return 0LL;
          }
        }
      }
    }
  }

  return result;
}

const char *GetCStringFromCFString(const __CFString *a1)
{
  uint64_t result = CFStringGetCStringPtr(a1, 0x8000100u);
  if (!result)
  {
    if (CFStringGetCString(a1, GetCStringFromCFString_buff, 256LL, 0x8000100u)) {
      return GetCStringFromCFString_buff;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

void *_createFeature_14(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 21;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    uint64_t v3 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    uint64_t v3 = *(os_log_s **)(gLogObjects + 160);
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "iAP2MediaLibrary _createFeature", buf, 2u);
  }

  *(_DWORD *)buf = 0;
  uint64_t v11 = 0LL;
  unsigned int v10 = 0;
  if (!a1) {
    return 0LL;
  }
  BOOL v4 = calloc(1uLL, 0x38uLL);
  if (!v4) {
    return v4;
  }
  _calcWindowSize(a1, 0LL, (int *)buf, (unsigned int *)&v11 + 1, (unsigned int *)&v11, (int *)&v10);
  *(_BYTE *)BOOL v4 = 0;
  v4[5] = 0LL;
  v4[6] = 0LL;
  v4[4] = 0LL;
  int v5 = HIDWORD(v11);
  int v6 = *(_DWORD *)buf;
  *((_DWORD *)v4 + 1) = *(_DWORD *)buf;
  *((_DWORD *)v4 + 2) = v5;
  unsigned int v7 = v10;
  int v8 = v11;
  *((_DWORD *)v4 + 3) = v11;
  v4[2] = v7;
  *((_DWORD *)v4 + 6) = 0;
  if (v6)
  {
    if (v5) {
      goto LABEL_14;
    }
  }

  else
  {
    *((_DWORD *)v4 + 1) = 1;
    if (v5)
    {
LABEL_14:
      if (v8) {
        goto LABEL_15;
      }
      goto LABEL_19;
    }
  }

  *((_DWORD *)v4 + 2) = 1;
  if (v8)
  {
LABEL_15:
    if (!v7) {
      goto LABEL_20;
    }
    return v4;
  }

uint64_t _destroyFeature_14(void **a1, uint64_t a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 21;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    int v5 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    int v5 = *(os_log_s **)(gLogObjects + 160);
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "iAP2MediaLibrary _destroyFeature", buf, 2u);
  }

  uint64_t result = 0LL;
  if (a1 && a2)
  {
    unsigned int v7 = *a1;
    if (*a1)
    {
      uint64_t v41 = a1;
      int v8 = *a1;
      if (*v7)
      {
        platform_mediaLibrary_accessoryDetached(*(void **)(a2 + 8));
        uint64_t v43 = *((unsigned int *)v8 + 12);
        if ((int)v43 >= 1)
        {
          uint64_t v9 = 0LL;
          int v42 = v8;
          while (1)
          {
            unsigned int v10 = *(void **)(v8[5] + 8 * v9);
            if (v10) {
              break;
            }
LABEL_61:
            if (++v9 == v43) {
              goto LABEL_62;
            }
          }

          *(void *)&__int128 v11 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
          __int128 v56 = v11;
          __int128 v57 = v11;
          unint64_t v54 = 0xAAAAAAAAAAAAAA00LL;
          *(void *)buf = v10;
          uint64_t v55 = 0LL;
          LOBYTE(v56) = 0;
          v45[0] = 0xDAAAAAA00LL;
          v45[1] = 0LL;
          v45[2] = buf;
          TransferEntryForuint64_t Feature = iap2_sessionFileTransfer_findTransferEntryForFeature( a2,  128,  (unsigned __int8 *)v45,  (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))_compareLibraryUID);
          uint64_t v13 = gLogObjects;
          int v14 = gNumLogObjects;
          if (gLogObjects) {
            BOOL v15 = gNumLogObjects <= 30;
          }
          else {
            BOOL v15 = 1;
          }
          int v16 = !v15;
          if (TransferEntryForFeature)
          {
            __int16 v17 = (unsigned __int8 *)TransferEntryForFeature;
            uint64_t v44 = v10;
            if (v16)
            {
              int v18 = *(os_log_s **)(gLogObjects + 240);
            }

            else
            {
              int v18 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)int v46 = 134218240;
                *(void *)__int16 v47 = v13;
                *(_WORD *)&v47[8] = 1024;
                *(_DWORD *)int v48 = v14;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  v46,  0x12u);
                int v18 = (os_log_s *)&_os_log_default;
              }
            }

            if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)int v46 = 136315394;
              *(void *)__int16 v47 = (char *)v44 + 1;
              *(_WORD *)&v47[8] = 2080;
              *(void *)int v48 = (char *)v44 + 65;
              _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "cleanupPendingFileTransfers: for library '%s' (%s)",  v46,  0x16u);
            }

            unsigned int v20 = -1;
            do
            {
              uint64_t v21 = gLogObjects;
              int v22 = gNumLogObjects;
              if (gLogObjects) {
                BOOL v23 = gNumLogObjects < 31;
              }
              else {
                BOOL v23 = 1;
              }
              if (v23)
              {
                int v24 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)int v46 = 134218240;
                  *(void *)__int16 v47 = v21;
                  *(_WORD *)&v47[8] = 1024;
                  *(_DWORD *)int v48 = v22;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  v46,  0x12u);
                  int v24 = (os_log_s *)&_os_log_default;
                }
              }

              else
              {
                int v24 = *(os_log_s **)(gLogObjects + 240);
              }

              if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
              {
                int v25 = *v17;
                int v26 = *((_DWORD *)v17 + 1);
                uint64_t v27 = obfuscatedPointer(*((void *)v17 + 1));
                int v28 = *(unsigned __int8 *)(*((void *)v17 + 1) + 109LL);
                int v29 = *((unsigned __int16 *)v17 + 8);
                *(_DWORD *)int v46 = 67110144;
                *(_DWORD *)__int16 v47 = v25;
                *(_WORD *)&v47[4] = 1024;
                *(_DWORD *)&v47[6] = v26;
                *(_WORD *)int v48 = 2048;
                *(void *)&v48[2] = v27;
                __int16 v49 = 1024;
                int v50 = v28;
                __int16 v51 = 1024;
                int v52 = v29;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "cleanupPendingFileTransfers: xferEntry(bufferID=%u type=%u fileXfer=%p(0x%02x) context=%hxh)",  v46,  0x24u);
              }

              iap2_sessionFileTransfer_removeTransferForFeature(a2, 13, *((void *)v17 + 1));
              unint64_t v30 = iap2_sessionFileTransfer_findTransferEntryForFeature( a2,  128,  (unsigned __int8 *)v45,  (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))_compareLibraryUID);
              __int16 v17 = (unsigned __int8 *)v30;
              unsigned int v31 = v20 + 1;
              if (!v30) {
                break;
              }
              ++v20;
            }

            while (v20 < 0x3E7);
            int v8 = v42;
            unsigned int v10 = v44;
            if (!v30 || v31 < 0x3E7) {
              goto LABEL_58;
            }
            uint64_t v32 = gLogObjects;
            int v33 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 31)
            {
              CFIndex v34 = *(os_log_s **)(gLogObjects + 240);
            }

            else
            {
              CFIndex v34 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)int v46 = 134218240;
                *(void *)__int16 v47 = v32;
                *(_WORD *)&v47[8] = 1024;
                *(_DWORD *)int v48 = v33;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  v46,  0x12u);
                CFIndex v34 = (os_log_s *)&_os_log_default;
              }
            }

            unsigned int v10 = v44;
            if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_58;
            }
            *(_WORD *)int v46 = 0;
            int v35 = v34;
            os_log_type_t v36 = OS_LOG_TYPE_DEFAULT;
            uint64_t v37 = "Reached max file transfer entries before stopping cleanup!";
            uint32_t v38 = 2;
          }

          else
          {
            if (v16)
            {
              __int16 v19 = *(os_log_s **)(gLogObjects + 240);
            }

            else
            {
              __int16 v19 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)int v46 = 134218240;
                *(void *)__int16 v47 = v13;
                *(_WORD *)&v47[8] = 1024;
                *(_DWORD *)int v48 = v14;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  v46,  0x12u);
                __int16 v19 = (os_log_s *)&_os_log_default;
              }
            }

            if (!os_log_type_enabled(v19, OS_LOG_TYPE_INFO)) {
              goto LABEL_58;
            }
            *(_DWORD *)int v46 = 136315394;
            *(void *)__int16 v47 = (char *)v10 + 1;
            *(_WORD *)&v47[8] = 2080;
            *(void *)int v48 = (char *)v10 + 65;
            int v35 = v19;
            os_log_type_t v36 = OS_LOG_TYPE_INFO;
            uint64_t v37 = "cleanupPendingFileTransfers: for library '%s' (%s), No transfers found to cleanup!";
            uint32_t v38 = 22;
          }

          _os_log_impl((void *)&_mh_execute_header, v35, v36, v37, v46, v38);
LABEL_58:
          uint64_t v39 = v10[19];
          if (v39) {
            iAP2MsgCleanup(v39);
          }
          *(void *)(v8[5] + 8 * v9) = 0LL;
          free(v10);
          --*((_DWORD *)v8 + 12);
          goto LABEL_61;
        }
      }

BOOL _startFeatureFromDevice_9(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 21;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    uint64_t v3 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    uint64_t v3 = *(os_log_s **)(gLogObjects + 160);
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)unsigned int v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "iAP2MediaLibrary _startFeatureFromDevice", v7, 2u);
  }

  uint64_t Feature = iap2_feature_getFeature(a1, 0xDu);
  if (Feature)
  {
    platform_mediaLibrary_incrementUserCount();
    platform_mediaLibrary_accessoryAttached(v5, *(unsigned int *)(Feature + 4));
  }

  return Feature != 0;
}

uint64_t _checkIdentificationInfo_12(uint64_t a1)
{
  char v6 = 0;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs( a1,  (uint64_t)&_checkIdentificationInfo_gskMsgMediaLibraryList,  0xAu,  &v6);
  uint64_t v3 = v2;
  if (v6) {
    BOOL v4 = (_DWORD)v2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    iap2_features_createFeature(a1, 0xDu);
    iap2_identification_setIdentifiedForFeature(a1, 0xDu);
  }

  return v3;
}

void _calcWindowSize(uint64_t a1, uint64_t a2, int *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  uint64_t v6 = a1;
  unsigned int v7 = &startLogsNotificationObservers;
  if (!a1)
  {
    int v15 = 0;
    unsigned int v18 = 0;
    unint64_t v31 = 0LL;
    unsigned int v30 = 0;
    unsigned int v21 = 0;
    unsigned int LinkMaxCumAck = 0;
    int v37 = 0;
    int v24 = 0;
    int v23 = 0;
    goto LABEL_86;
  }

  unsigned int LinkMaxCumAck = iap2_endpoint_getLinkMaxCumAck(a1);
  unsigned int MaxSendPayloadSizeWithOverride = iap2_endpoint_getMaxSendPayloadSizeWithOverride(v6);
  if (gLogObjects) {
    BOOL v11 = gNumLogObjects < 31;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    int v12 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    int v12 = *(os_log_s **)(gLogObjects + 240);
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = *(void *)(v6 + 8);
    int v14 = (const char *)(a2 + 65);
    *(_DWORD *)buf = 138413314;
    if (!a2) {
      int v14 = "<none>";
    }
    uint64_t v40 = v13;
    __int16 v41 = 2080;
    int v42 = v14;
    __int16 v43 = 1024;
    int v44 = MaxSendPayloadSizeWithOverride;
    __int16 v45 = 1024;
    int v46 = LinkMaxCumAck;
    __int16 v47 = 1024;
    unsigned int v48 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "iAP2MediaLibrary _calcWindowSize: %@ - %s, maxPayloadSize %d, linkPeerMaxCumAck %d, linkPeerMaxOutstanding %d",  buf,  0x28u);
  }

  int v15 = 0;
  unint64_t v31 = __PAIR64__(LinkMaxCumAck, MaxSendPayloadSizeWithOverride);
  if (!a2)
  {
    LODWORD(v6) = 0;
    unsigned int v18 = 0;
    unsigned int v30 = 0;
    unsigned int v21 = 0;
    unsigned int LinkMaxCumAck = 0;
    int v37 = 0;
    int v24 = 0;
    int v23 = 0;
    unsigned int v7 = &startLogsNotificationObservers;
    goto LABEL_86;
  }

  unsigned int v7 = &startLogsNotificationObservers;
  if (!MaxSendPayloadSizeWithOverride)
  {
    LODWORD(v6) = 0;
    unsigned int v18 = 0;
    unsigned int v30 = 0;
    unsigned int v21 = 0;
    unsigned int LinkMaxCumAck = 0;
    int v37 = 0;
    int v24 = 0;
    int v23 = 0;
    goto LABEL_86;
  }

  int v15 = 0;
  uint64_t v16 = 1LL;
  do
  {
    if ((v16 & *(void *)(a2 + 144)) != 0)
    {
      switch(v16)
      {
        case 1LL:
        case 4LL:
          v15 += 12;
          break;
        case 2LL:
          v15 += 68;
          break;
        case 3LL:
        case 5LL:
        case 6LL:
        case 7LL:
          break;
        case 8LL:
          goto LABEL_24;
        default:
          if ((unint64_t)(v16 - 16) <= 0x30 && ((1LL << (v16 - 16)) & 0x1000000010001LL) != 0
            || v16 == 256)
          {
LABEL_24:
            v15 += 5;
          }

          break;
      }
    }

    v16 *= 2LL;
  }

  while (v16);
  LODWORD(v6) = 0;
  uint64_t v17 = 1LL;
  do
  {
    if ((v17 & *(void *)(a2 + 136)) == 0) {
      goto LABEL_63;
    }
    if (v17 > 2047)
    {
      if (v17 < 0x10000)
      {
        if (v17 < 0x2000)
        {
          if (v17 == 2048)
          {
LABEL_62:
            LODWORD(v6) = v6 + 12;
            goto LABEL_63;
          }

          if (v17 != 4096) {
            goto LABEL_63;
          }
LABEL_61:
          LODWORD(v6) = v6 + 68;
          goto LABEL_63;
        }

        switch(v17)
        {
          case 0x2000LL:
            goto LABEL_62;
          case 0x4000LL:
            goto LABEL_61;
          case 0x8000LL:
            goto LABEL_62;
        }
      }

      else if (v17 >= 0x80000)
      {
        if (v17 == 0x80000 || v17 == 0x2000000)
        {
LABEL_52:
          LODWORD(v6) = v6 + 5;
          goto LABEL_63;
        }

        if (v17 == 0x8000000) {
          goto LABEL_58;
        }
      }

      else
      {
        switch(v17)
        {
          case 0x10000LL:
            goto LABEL_61;
          case 0x20000LL:
            goto LABEL_62;
          case 0x40000LL:
            goto LABEL_61;
        }
      }
    }

    else
    {
      if (v17 <= 63)
      {
        switch(v17)
        {
          case 1LL:
            goto LABEL_62;
          case 2LL:
            goto LABEL_61;
          case 3LL:
          case 5LL:
          case 6LL:
          case 7LL:
            goto LABEL_63;
          case 4LL:
          case 8LL:
            goto LABEL_52;
          default:
            if (v17 == 16)
            {
              LODWORD(v6) = v6 + 8;
            }

            else if (v17 == 32)
            {
              goto LABEL_62;
            }

            break;
        }

        goto LABEL_63;
      }

      if (v17 <= 255)
      {
        if (v17 != 64)
        {
          if (v17 != 128) {
            goto LABEL_63;
          }
LABEL_58:
          LODWORD(v6) = v6 + 6;
          goto LABEL_63;
        }

        goto LABEL_61;
      }

      if (v17 == 256 || v17 == 512 || v17 == 1024) {
        goto LABEL_58;
      }
    }

uint64_t _compareLibraryUID(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) == 13 && *(_DWORD *)(a2 + 4) == 13) {
    return strncmp( (const char *)(**(void **)(a1 + 16) + 65LL),  (const char *)(**(void **)(a2 + 16) + 65LL),  0x40uLL);
  }
  else {
    return -1LL;
  }
}

  ;
}

  ;
}

  ;
}

  ;
}

void OUTLINED_FUNCTION_14_1(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t iAP2MsgParserInit(__int16 a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  *(_WORD *)a2 = 0;
  *(_WORD *)(a2 + 2) = a1;
  *(void *)(a2 + _Block_object_dispose(va, 8) = a2 + 32;
  *(void *)(a2 + 16) = a3;
  *(_WORD *)(a2 + 24) = a4;
  return a2;
}

uint64_t iAP2MsgParserConsumeByte(unsigned __int16 *a1, char a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if (v4 >= a1[1])
  {
    if ((_iAP2LogEnableMask & 1) != 0)
    {
      uint64_t v13 = gLogObjects;
      int v14 = gNumLogObjects;
      if (gLogObjects) {
        BOOL v15 = gNumLogObjects < 20;
      }
      else {
        BOOL v15 = 1;
      }
      if (v15)
      {
        uint64_t v16 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          acc_nvmInfo_getPairingStatus_cold_1(v13, v14);
        }
      }

      else
      {
        uint64_t v16 = *(os_log_s **)(gLogObjects + 152);
      }

      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = *a1;
        int v18 = a1[1];
        int v19 = 136315906;
        unsigned int v20 = "_consumeByteInternal";
        __int16 v21 = 1024;
        int v22 = 134;
        __int16 v23 = 1024;
        int v24 = v17;
        __int16 v25 = 1024;
        int v26 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "ERROR: %s:%d ERROR: message parse error, length (%u) passed allocated buffer length (%u)",  (uint8_t *)&v19,  0x1Eu);
      }
    }
  }

  else
  {
    *(_BYTE *)(*((void *)a1 + 1) + v4) = a2;
    int v5 = *a1 + 1;
    unsigned int v6 = ++*a1;
    if (v6 != v5) {
      return 0LL;
    }
    unsigned int v7 = a1[12];
    int v8 = (unsigned __int8 *)*((void *)a1 + 1);
    if (*v8 == v7 >> 8)
    {
      if (v6 < 2) {
        return 0LL;
      }
      if (v8[1] == v7)
      {
        if (v6 >= 4)
        {
          int v9 = v8[2];
          int v10 = v8[3];
          if ((v10 | (v9 << 8)) == v6)
          {
            uint64_t result = 0LL;
            unsigned int v12 = a1[1];
            if (v12 >= 6 && v6 <= v12)
            {
              uint64_t result = iAP2MsgInitWithSom( a3,  v7,  bswap32(*((unsigned __int16 *)v8 + 2)) >> 16,  (uint64_t)v8,  v12,  0LL,  0LL);
              *(_BYTE *)(*(void *)(result + 24) + 2LL) = v9;
              *(_BYTE *)(*(void *)(result + 24) + 3LL) = v10;
              *(void *)(result + 32) += (int)(v6 - 6);
            }

            goto LABEL_23;
          }
        }

        return 0LL;
      }
    }
  }

  uint64_t result = 0LL;
LABEL_23:
  *a1 = 0;
  return result;
}

LABEL_6:
    xpc_connection_cancel(*(xpc_connection_t *)(a1 + 40));
LABEL_7:
    objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "removeObjectIdenticalTo:", *(void *)(a1 + 40), *(void *)v14);
  }

      if (!a3 || !*a3)
      {
        *(_WORD *)(a1 + 112) = a2;
        *(_WORD *)(a1 + 120) = 0;
        return a1;
      }

      if ((_iAP2LogEnableMask & 1) != 0)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          int v10 = *(os_log_s **)(gLogObjects + 152);
        }

        else
        {
          int v10 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v23 = *(unsigned __int8 *)(a1 + 109);
          int v24 = *a3;
          CFIndex v34 = 136316162;
          int v35 = "iAP2FileTransferTypeData";
          os_log_type_t v36 = 1024;
          int v37 = 948;
          uint32_t v38 = 1024;
          uint64_t v39 = v23;
          uint64_t v40 = 1024;
          __int16 v41 = a2;
          int v42 = 1024;
          __int16 v43 = v24;
          __int16 v25 = "ERROR: %s:%d buffID=0x%X type=%d typeData.len=%d WARNING: Type does not require typeData!";
LABEL_64:
          uint64_t v32 = v10;
LABEL_70:
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, v25, (uint8_t *)&v34, 0x24u);
        }
      }

      return a1;
  }

        BOOL v11 = iap2_identification_processStringParam(v7, a3, v10);
        goto LABEL_37;
      default:
        if (gLogObjects && gNumLogObjects >= 26)
        {
          int v18 = *(os_log_s **)(gLogObjects + 200);
        }

        else
        {
          int v18 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = ParamID;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "iAP2MsgIdentificationInfo unhandled paramID:%04X\n",  buf,  8u);
        }

        __int16 v25 = v7;
        int v26 = ParamID;
LABEL_48:
        _addRejectParam(v25, v26, 1u);
        os_log_type_t v36 = 1;
        goto LABEL_38;
    }
  }

  else
  {
    os_log_type_t v36 = 1;
  }

  return !v36;
}

    update((uint64_t)a1, (uint64_t)__s);
    BOOL v11 = 0LL;
    a1[6] = 1LL;
LABEL_7:
    cc_clear(a1[8] + 16LL, __s);
  }

  return v11;
}

uint64_t iap2_externalaccessory_statusEASessionHandler(uint64_t *a1, uint64_t a2)
{
  id v2 = 0LL;
  int v43 = 0;
  if (a1 && a2)
  {
    uint64_t v4 = a1;
    if (iAP2MsgGetMsgID(a2) == 59907)
    {
      unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
      if (FirstParam)
      {
        NextParam = (unsigned __int16 *)FirstParam;
        uint64_t v40 = v4;
        int v41 = 0;
        int v42 = 0;
        LOWORD(v4) = 0;
        int v7 = 2;
        int v8 = &startLogsNotificationObservers;
        do
        {
          int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
          if (ParamID == 1)
          {
            int DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v43);
            if (v43)
            {
              uint64_t v39 = (os_log_s *)logObjectForModule_1(9);
              if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
                iap2_externalaccessory_statusEASessionHandler_cold_9(a2, v39);
              }
              return 0LL;
            }

            int v7 = DataAsU8;
            uint64_t v16 = v8[353];
            int v17 = gNumLogObjects;
            if (v16) {
              BOOL v18 = gNumLogObjects < 10;
            }
            else {
              BOOL v18 = 1;
            }
            if (v18)
            {
              int v24 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)__int16 v45 = v16;
                *(_WORD *)&v45[8] = 1024;
                int v46 = v17;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                int v24 = (os_log_s *)&_os_log_default;
              }
            }

            else
            {
              int v24 = *(os_log_s **)(v16 + 72);
            }

            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)__int16 v45 = v7;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "eaSessinoIDStatus for SessionIDStatus = %d",  buf,  8u);
            }

            int v42 = 1;
          }

          else
          {
            int v10 = ParamID;
            if (ParamID)
            {
              int v19 = v8;
              uint64_t v20 = v8[353];
              int v21 = gNumLogObjects;
              if (v20) {
                BOOL v22 = gNumLogObjects < 10;
              }
              else {
                BOOL v22 = 1;
              }
              if (v22)
              {
                __int16 v23 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  *(void *)__int16 v45 = v20;
                  *(_WORD *)&v45[8] = 1024;
                  int v46 = v21;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                  __int16 v23 = (os_log_s *)&_os_log_default;
                }
              }

              else
              {
                __int16 v23 = *(os_log_s **)(v20 + 72);
              }

              if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)__int16 v45 = v10;
                _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Unrecognized paramID:0x%04X", buf, 8u);
              }

              int v8 = v19;
            }

            else
            {
              int DataAsU16 = iAP2MsgGetDataAsU16(NextParam, &v43);
              if (v43)
              {
                uint32_t v38 = (os_log_s *)logObjectForModule_1(9);
                if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
                  iap2_externalaccessory_statusEASessionHandler_cold_8(a2, v38);
                }
                return 0LL;
              }

              LODWORD(v4) = DataAsU16;
              uint64_t v12 = v8[353];
              int v13 = gNumLogObjects;
              if (v12 && gNumLogObjects >= 10)
              {
                int v14 = *(os_log_s **)(v12 + 72);
              }

              else
              {
                int v14 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  *(void *)__int16 v45 = v12;
                  *(_WORD *)&v45[8] = 1024;
                  int v46 = v13;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                  int v14 = (os_log_s *)&_os_log_default;
                }
              }

              if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)__int16 v45 = (_DWORD)v4;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "eaSessionID for SessionIDStatus = %d",  buf,  8u);
              }

              int v41 = 1;
            }
          }

          NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
        }

        while (NextParam);
        if ((v41 & v42 & 1) == 0) {
          return 0LL;
        }
        uint64_t v25 = v8[353];
        if (v25 && gNumLogObjects >= 10)
        {
          int v26 = *(os_log_s **)(v25 + 72);
        }

        else
        {
          int v26 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)__int16 v45 = (unsigned __int16)v4;
          *(_WORD *)&v45[4] = 1024;
          *(_DWORD *)&v45[6] = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "SessionStatusMsg: eaSessionID %d, sessionStatus %d",  buf,  0xEu);
        }

        if (v7 == 1)
        {
          id v29 = platform_externalAccessory_copyEndpointUUIDForEASessionID((unsigned __int16)v4);
          int v30 = _iap2_externalAccessory_removeEASessionStruct((uint64_t)v40, v29);
          if (v29) {
            CFRelease(v29);
          }
          if (v30) {
            _iAP2_closeEASession(v40, (unsigned __int16)v4);
          }
          id v2 = platform_externalAccessory_accessoryCloseExternalAccessorySession((unsigned __int16)v4);
          if ((v2 & 1) == 0)
          {
            uint64_t v31 = v8[353];
            if (v31 && gNumLogObjects >= 30)
            {
              uint64_t v32 = *(os_log_s **)(v31 + 232);
            }

            else
            {
              uint64_t v32 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
              iap2_externalaccessory_statusEASessionHandler_cold_5((unsigned __int16)v4, v32);
            }
          }

          uint64_t v36 = v8[353];
          if (v36 && gNumLogObjects >= 30)
          {
            int v37 = *(os_log_s **)(v36 + 232);
          }

          else
          {
            int v37 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_INFO,  "Close iAP2 EA Session based on accessory sending eiAP2ParamEA_SessionStatus_SessionStatusClosed",  buf,  2u);
          }

          return (uint64_t)v2;
        }

        if (!v7)
        {
          uint64_t v27 = v8[353];
          if (v27 && gNumLogObjects >= 10)
          {
            uint64_t v28 = *(os_log_s **)(v27 + 72);
          }

          else
          {
            uint64_t v28 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)__int16 v45 = (unsigned __int16)v4;
            _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "SessionStatus OK for sessionID %d",  buf,  8u);
          }

          return 1LL;
        }

        uint64_t v33 = v8[353];
        if (v33 && gNumLogObjects >= 10)
        {
          CFIndex v34 = *(os_log_s **)(v33 + 72);
        }

        else
        {
          CFIndex v34 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
          iap2_externalaccessory_statusEASessionHandler_cold_1();
        }
      }
    }

    return 0LL;
  }

  return (uint64_t)v2;
}

uint64_t _iap2_externalAccessory_removeEASessionStruct(uint64_t a1, const void *a2)
{
  uint64_t Value = 0LL;
  if (a1)
  {
    if (a2)
    {
      uint64_t Value = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)__gActiveEASessionStructs, a2);
      if (Value)
      {
        CFDictionaryRemoveValue((CFMutableDictionaryRef)__gActiveEASessionStructs, a2);
        _iap2_externalAccessory_cleanupEASessionStruct((void *)Value);
        free((void *)Value);
        uint64_t Feature = iap2_feature_getFeature(a1, 0xAu);
        if (Feature) {
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(Feature + 32), a2);
        }
        uint64_t Value = 1LL;
      }
    }
  }

  pthread_mutex_unlock(&__giAP2ExternalAccessoryLock);
  return Value;
}

uint64_t _iAP2_closeEASession(uint64_t *a1, unsigned int a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 30;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    int v5 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    int v5 = *(os_log_s **)(gLogObjects + 232);
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    _iAP2_closeEASession_cold_6((uint64_t)a1, v5, v6, v7, v8, v9, v10, v11);
    if (a1) {
      goto LABEL_10;
    }
    return 0LL;
  }

  if (!a1) {
    return 0LL;
  }
LABEL_10:
  if (gLogObjects && gNumLogObjects >= 30)
  {
    uint64_t v12 = *(os_log_s **)(gLogObjects + 232);
  }

  else
  {
    uint64_t v12 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
    _iAP2_closeEASession_cold_4((uint64_t)a1, v12, v13, v14, v15, v16, v17, v18);
  }
  if (!*a1) {
    return 0LL;
  }
  if (gLogObjects && gNumLogObjects >= 30)
  {
    int v19 = *(os_log_s **)(gLogObjects + 232);
  }

  else
  {
    int v19 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
    _iAP2_closeEASession_cold_2((uint64_t)a1, v19, v20, v21, v22, v23, v24, v25);
  }
  if (!a1[1]) {
    return 0LL;
  }
  uint64_t v26 = iAP2MsgInit((uint64_t)(a1 + 15), 59905, a1[24], 0xFFFF, 0LL, 0LL);
  iAP2MsgAddU16Param(v26, 0LL, 0, a2);
  if (gLogObjects && gNumLogObjects >= 30)
  {
    uint64_t v27 = *(os_log_s **)(gLogObjects + 232);
  }

  else
  {
    uint64_t v27 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    v29[0] = 67109376;
    v29[1] = a2;
    __int16 v30 = 1024;
    unsigned int v31 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "closing EA session for sessionID %d (0x%X)",  (uint8_t *)v29,  0xEu);
  }

  return iap2_sessionControl_sendOutgoingMessage(a1, v26);
}

uint64_t iap2_externalAccessory_openEASession(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t Value = (const __CFNumber *)CFDictionaryGetValue(a2, kCFACCExternalAccessorySessionIDKey);
  int valuePtr = -1431655766;
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  unsigned __int16 v5 = valuePtr;
  uint64_t v6 = (unsigned __int16 *)calloc(1uLL, 0x20uLL);
  v6[1] = 0;
  *((void *)v6 + 1) = CFArrayCreateMutable(kCFAllocatorDefault, 8LL, &kCFTypeArrayCallBacks);
  *((void *)v6 + 2) = CFArrayCreateMutable(kCFAllocatorDefault, 8LL, &kCFTypeArrayCallBacks);
  unsigned __int16 *v6 = v5;
  v6[2] = iap2_endpoint_getMaxSendPayloadSize(a1);
  unsigned int v7 = 0;
  *((void *)v6 + 3) = CFStringCreateCopy(kCFAllocatorDefault, *(CFStringRef *)(a1 + 8));
  do
  {
    CFMutableDataRef Mutable = CFDataCreateMutable(kCFAllocatorDefault, v6[2]);
    CFArrayAppendValue(*((CFMutableArrayRef *)v6 + 1), Mutable);
    CFRelease(Mutable);
  }

  while (v7++ < 7);
  uint64_t v10 = (const __CFString *)CFDictionaryGetValue(a2, kCFACCExternalAccessorySessionUUIDKey);
  CFDictionarySetValue((CFMutableDictionaryRef)__gActiveEASessionStructs, v10, v6);
  uint64_t Feature = iap2_feature_getFeature(a1, 0xAu);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(Feature + 32), v10, v6);
  pthread_mutex_unlock(&__giAP2ExternalAccessoryLock);
  MutableCFStringRef Copy = CFStringCreateMutableCopy(kCFAllocatorDefault, 0LL, v10);
  if (gLogObjects && gNumLogObjects >= 30)
  {
    uint64_t v13 = *(os_log_s **)(gLogObjects + 232);
  }

  else
  {
    uint64_t v13 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
    iap2_externalAccessory_openEASession_cold_3();
  }
  uint64_t v14 = malloc(0x48uLL);
  uint64_t v15 = malloc(0xFFFFuLL);
  if (gLogObjects && gNumLogObjects >= 30)
  {
    uint64_t v16 = *(os_log_s **)(gLogObjects + 232);
  }

  else
  {
    uint64_t v16 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    if (a1) {
      uint64_t v17 = *(const __CFString **)(a1 + 8);
    }
    else {
      uint64_t v17 = @"Null";
    }
    *(_DWORD *)buf = 136315650;
    *(void *)uint64_t v25 = "iap2_externalAccessory_openEASession";
    *(_WORD *)&v25[8] = 1024;
    *(_DWORD *)uint64_t v26 = 1294;
    *(_WORD *)&v26[4] = 2112;
    uint64_t v27 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "%s:%d - iAP2MsgInit with cleanupCB - _iap2_externalAccessory_openEASessionSent endpointUUID: %@",  buf,  0x1Cu);
  }

  uint64_t v18 = iAP2MsgInit( (uint64_t)v14,  59904,  (uint64_t)v15,  0xFFFF,  (uint64_t)_iap2_externalAccessory_openEASessionSent,  (uint64_t)MutableCopy);
  int v19 = (const __CFNumber *)CFDictionaryGetValue(a2, kCFACCExternalAccessoryProtocolIndexKey);
  unsigned __int8 v22 = -86;
  CFNumberGetValue(v19, kCFNumberCharType, &v22);
  iAP2MsgAddU8Param(v18, 0LL, 0, v22);
  iAP2MsgAddU16Param(v18, 0LL, 1, (unsigned __int16)valuePtr);
  if (gLogObjects && gNumLogObjects >= 30)
  {
    uint64_t v20 = *(os_log_s **)(gLogObjects + 232);
  }

  else
  {
    uint64_t v20 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)uint64_t v25 = v22;
    *(_WORD *)&v25[4] = 1024;
    *(_DWORD *)&v25[6] = valuePtr;
    *(_WORD *)uint64_t v26 = 1024;
    *(_DWORD *)&v26[2] = valuePtr;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "opening EA session for protocol %d with sessionID %d (0x%X)",  buf,  0x14u);
  }

  return iap2_sessionControl_sendOutgoingMessageAndCallbackOnACK((uint64_t *)a1, v18);
}

void _iap2_externalAccessory_openEASessionSent(uint64_t a1, int a2)
{
  if (a1 && (BOOL v4 = *(const void **)(a1 + 48)) != 0LL)
  {
    uint64_t Value = (unsigned __int16 *)CFDictionaryGetValue( (CFDictionaryRef)__gActiveEASessionStructs,  *(const void **)(a1 + 48));
    if (Value)
    {
      uint64_t v6 = Value;
      *((_BYTE *)Value + 2) = 1;
      if (gLogObjects && gNumLogObjects >= 30)
      {
        unsigned int v7 = *(os_log_s **)(gLogObjects + 232);
      }

      else
      {
        unsigned int v7 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = *v6;
        v11[0] = 67109378;
        v11[1] = v9;
        __int16 v12 = 2112;
        uint64_t v13 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Open EA Session Sent for sessionID %d, UUID %@, start incoming data notifications",  (uint8_t *)v11,  0x12u);
      }

      platform_externalAccessory_startIncomingDataNotificationsForEASessionUUID((uint64_t)v4);
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 30)
      {
        uint64_t v8 = *(os_log_s **)(gLogObjects + 232);
      }

      else
      {
        uint64_t v8 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        _iap2_externalAccessory_openEASessionSent_cold_1();
      }
    }

    pthread_mutex_unlock(&__giAP2ExternalAccessoryLock);
    CFRelease(v4);
  }

  else
  {
    pthread_mutex_unlock(&__giAP2ExternalAccessoryLock);
  }

  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  if (a2)
  {
    uint64_t v10 = *(void **)(a1 + 24);
    if (v10)
    {
      free(v10);
      *(void *)(a1 + 24) = 0LL;
    }

    *(_DWORD *)(a1 + 16) = 0;
  }

uint64_t iap2_externalAccessory_closeEASession(uint64_t *a1, CFDictionaryRef theDict)
{
  uint64_t Value = CFDictionaryGetValue(theDict, kCFACCExternalAccessorySessionUUIDKey);
  if (a1)
  {
    uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0xAu);
    if (Feature)
    {
      uint64_t v6 = Feature;
      unsigned int v7 = (__CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(Feature + 24), Value);
      if (v7)
      {
        uint64_t v8 = v7;
        CFDictionaryRemoveValue((CFMutableDictionaryRef)_gActiveEASessions, Value);
        CFDictionaryRemoveAllValues(v8);
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v6 + 24), Value);
      }
    }
  }

  if (_iap2_externalAccessory_removeEASessionStruct((uint64_t)a1, Value))
  {
    int v9 = (const __CFNumber *)CFDictionaryGetValue(theDict, kCFACCExternalAccessorySessionIDKey);
    int valuePtr = -1431655766;
    CFNumberGetValue(v9, kCFNumberSInt32Type, &valuePtr);
    return _iAP2_closeEASession(a1, (unsigned __int16)valuePtr);
  }

  else
  {
    if (gLogObjects) {
      BOOL v11 = gNumLogObjects < 30;
    }
    else {
      BOOL v11 = 1;
    }
    if (v11)
    {
      __int16 v12 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      __int16 v12 = *(os_log_s **)(gLogObjects + 232);
    }

    uint64_t result = os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)result)
    {
      iap2_externalAccessory_closeEASession_cold_1();
      return 0LL;
    }
  }

  return result;
}

uint64_t iap2_externalAccessory_outgoingEADataAvailable(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    pthread_mutex_lock(&__giAP2ExternalAccessoryLock);
LABEL_49:
    uint64_t v9 = 0LL;
    goto LABEL_74;
  }

  uint64_t v5 = *(void *)(v4 + 24);
  pthread_mutex_lock(&__giAP2ExternalAccessoryLock);
  if (!v5) {
    goto LABEL_49;
  }
  uint64_t Value = CFDictionaryGetValue(a2, kCFACCExternalAccessorySessionUUIDKey);
  unsigned int v7 = (unsigned __int16 *)CFDictionaryGetValue((CFDictionaryRef)__gActiveEASessionStructs, Value);
  if (!v7) {
    goto LABEL_49;
  }
  uint64_t v8 = v7;
  uint64_t v9 = 1LL;
  *((_BYTE *)v7 + 3) = 1;
  if (Value) {
    BOOL v10 = *((_BYTE *)v7 + 2) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    if (*((void *)v7 + 2))
    {
      do
      {
        BOOL v11 = (const __CFArray *)*((void *)v8 + 1);
        if (!v11) {
          break;
        }
        if (CFArrayGetCount(v11) < 1) {
          break;
        }
        ValueAtIndex = (__CFData *)CFArrayGetValueAtIndex(*((CFArrayRef *)v8 + 1), 0LL);
        if (!ValueAtIndex) {
          break;
        }
        uint64_t v13 = ValueAtIndex;
        CFDataSetLength(ValueAtIndex, v8[2]);
        v52.length = v8[2];
        v52.location = 0LL;
        CFDataReplaceBytes(v13, v52, 0LL, 0LL);
        CFArrayAppendValue(*((CFMutableArrayRef *)v8 + 2), v13);
        CFArrayRemoveValueAtIndex(*((CFMutableArrayRef *)v8 + 1), 0LL);
        id MutableEADataFromAppForSessionUUID = platform_externalAccessory_retrieveMutableEADataFromAppForSessionUUID( (uint64_t)Value,  v8[2]);
        if (!MutableEADataFromAppForSessionUUID)
        {
          if (gLogObjects && gNumLogObjects >= 30)
          {
            int v35 = *(os_log_s **)(gLogObjects + 232);
          }

          else
          {
            int v35 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
          {
            int v36 = *v8;
            *(_DWORD *)buf = 67109120;
            LODWORD(v49) = v36;
            _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_INFO,  "Replacing buffers after failed read from app for sessionID %d",  buf,  8u);
          }

          int v37 = (const __CFArray *)*((void *)v8 + 2);
          if (v37)
          {
            if (*((void *)v8 + 1))
            {
              CFIndex v38 = CFArrayGetCount(v37) - 1;
              uint64_t v39 = CFArrayGetValueAtIndex(*((CFArrayRef *)v8 + 2), v38);
              if (v39)
              {
                CFArrayAppendValue(*((CFMutableArrayRef *)v8 + 1), v39);
                CFArrayRemoveValueAtIndex(*((CFMutableArrayRef *)v8 + 2), v38);
              }
            }
          }

          *((_BYTE *)v8 + 3) = 0;
          goto LABEL_63;
        }

        uint64_t v15 = MutableEADataFromAppForSessionUUID;
        uint64_t v16 = *(void *)(a1 + 32);
        if (v16)
        {
          uint64_t v17 = *(void *)(v16 + 24);
          if (v17)
          {
            CFRetain(Value);
            CFRetain(v15);
            unsigned int SessionForService = iAP2LinkGetSessionForService(v17, 2);
            MutableBytePtr = (char *)CFDataGetMutableBytePtr((CFMutableDataRef)v15);
            *(_WORD *)MutableBytePtr = bswap32(*v8) >> 16;
            unsigned int Length = CFDataGetLength((CFDataRef)v15);
            BOOL v21 = iAP2LinkQueueSendData( v17,  MutableBytePtr,  Length,  SessionForService,  (uint64_t)Value,  (uint64_t)_iap2_externalAccessory_eaDataQueuedCB,  0LL,  0);
            uint64_t v22 = gLogObjects;
            int v23 = gNumLogObjects;
            if (gLogObjects) {
              BOOL v24 = gNumLogObjects <= 29;
            }
            else {
              BOOL v24 = 1;
            }
            int v25 = !v24;
            if (v21)
            {
              if (v25)
              {
                uint64_t v26 = *(os_log_s **)(gLogObjects + 232);
              }

              else
              {
                uint64_t v26 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  uint64_t v49 = v22;
                  __int16 v50 = 1024;
                  int v51 = v23;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                  uint64_t v26 = (os_log_s *)&_os_log_default;
                }
              }

              if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
              {
                CFIndex v28 = CFDataGetLength((CFDataRef)v15);
                int v29 = *v8;
                *(_DWORD *)buf = 134218240;
                uint64_t v49 = v28 - 2;
                __int16 v50 = 1024;
                int v51 = v29;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEBUG,  "queued %lu ea bytes for eaSession %d",  buf,  0x12u);
              }
            }

            else
            {
              if (v25)
              {
                uint64_t v27 = *(os_log_s **)(gLogObjects + 232);
              }

              else
              {
                uint64_t v27 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  uint64_t v49 = v22;
                  __int16 v50 = 1024;
                  int v51 = v23;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                  uint64_t v27 = (os_log_s *)&_os_log_default;
                }
              }

              if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
              {
                CFIndex v33 = CFDataGetLength((CFDataRef)v15);
                int v34 = *v8;
                *(_DWORD *)buf = 134218240;
                uint64_t v49 = v33 - 2;
                __int16 v50 = 1024;
                int v51 = v34;
                _os_log_error_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "Unable to queue %lu ea bytes for eaSession %d",  buf,  0x12u);
              }
            }

            CFRelease(v15);
          }
        }

        if (CFDataGetLength((CFDataRef)v15) != v8[2])
        {
          *((_BYTE *)v8 + 3) = 0;
          CFRelease(v15);
          goto LABEL_63;
        }

        uint64_t v30 = gLogObjects;
        int v31 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 30)
        {
          uint64_t v32 = *(os_log_s **)(gLogObjects + 232);
        }

        else
        {
          uint64_t v32 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            uint64_t v49 = v30;
            __int16 v50 = 1024;
            int v51 = v31;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            uint64_t v32 = (os_log_s *)&_os_log_default;
          }
        }

        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
          iap2_externalAccessory_outgoingEADataAvailable_cold_4(&v46, v47);
        }
        CFRelease(v15);
      }

      while (*((void *)v8 + 2));
    }

    if (gLogObjects) {
      BOOL v43 = gNumLogObjects < 10;
    }
    else {
      BOOL v43 = 1;
    }
    if (v43)
    {
      int v44 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      int v44 = *(os_log_s **)(gLogObjects + 72);
    }

    if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
    {
      int v45 = *v8;
      *(_DWORD *)buf = 67109120;
      LODWORD(v49) = v45;
      _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_INFO,  "No available data buffer for EA Session ID %d",  buf,  8u);
    }

uint64_t iap2_externalAccessory_sendOutgoingEAData(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v2 = a1;
  if (!a1) {
    return v2 & 1;
  }
  if (!*(void *)(a1 + 32)
    || !iap2_endpoint_isInitialized(a1)
    || (uint64_t v4 = *(void *)(v2 + 32)) == 0
    || (uint64_t v5 = *(void *)(v4 + 24)) == 0)
  {
    LOBYTE(v2) = 0;
    return v2 & 1;
  }

  uint64_t v6 = (const void *)kCFACCExternalAccessorySessionIDKey;
  uint64_t Value = (const __CFNumber *)CFDictionaryGetValue(a2, kCFACCExternalAccessorySessionIDKey);
  unsigned __int16 valuePtr = -21846;
  CFNumberGetValue(Value, kCFNumberSInt16Type, &valuePtr);
  uint64_t v8 = (const void *)kCFACCExternalAccessorySessionDataKey;
  uint64_t v9 = (const __CFData *)CFDictionaryGetValue(a2, kCFACCExternalAccessorySessionDataKey);
  unint64_t Length = CFDataGetLength(v9);
  BOOL v10 = (const void *)kCFACCExternalAccessorySessionUUIDKey;
  BOOL v11 = (const __CFString *)CFDictionaryGetValue(a2, kCFACCExternalAccessorySessionUUIDKey);
  CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, v11);
  unsigned int SessionForService = iAP2LinkGetSessionForService(v5, 2);
  if (v11) {
    CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, v11);
  }
  uint64_t Feature = iap2_feature_getFeature(v2, 0xAu);
  uint64_t v74 = v5;
  if (Feature && CFDictionaryGetValue(*(CFDictionaryRef *)(Feature + 24), Copy))
  {
    if (gLogObjects && gNumLogObjects >= 30)
    {
      uint64_t v14 = *(os_log_s **)(gLogObjects + 232);
    }

    else
    {
      uint64_t v14 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
      iap2_externalAccessory_sendOutgoingEAData_cold_8();
    }
  }

  else
  {
    *(_DWORD *)buf = valuePtr;
    uint64_t v15 = iap2_feature_getFeature(v2, 0xAu);
    uint64_t v16 = v2;
    if (v15)
    {
      uint64_t v17 = v15;
      CFMutableDataRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      CFNumberRef v19 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, buf);
      CFDictionaryAddValue(Mutable, v6, v19);
      CFRelease(v19);
      CFStringRef v20 = CFStringCreateCopy(kCFAllocatorDefault, *(CFStringRef *)(v16 + 8));
      CFDictionaryAddValue(Mutable, kCFACCExternalAccessoryProtocolEndpointUUIDKey, v20);
      CFRelease(v20);
      CFDictionaryAddValue(Mutable, v10, Copy);
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v17 + 24), Copy, Mutable);
      CFDictionaryAddValue((CFMutableDictionaryRef)_gActiveEASessions, Copy, Mutable);
      CFRelease(Mutable);
    }

    uint64_t v2 = v16;
    uint64_t v5 = v74;
  }

  uint64_t v21 = iap2_feature_getFeature(v2, 0xAu);
  if (v21)
  {
    uint64_t v22 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v21 + 24), Copy);
    if (v22)
    {
      int v23 = (const __CFData *)CFDictionaryGetValue(v22, v8);
      if (v23)
      {
        if (CFDataGetLength(v23))
        {
          if (gLogObjects && gNumLogObjects >= 30)
          {
            BOOL v24 = *(os_log_s **)(gLogObjects + 232);
          }

          else
          {
            BOOL v24 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
            iap2_externalAccessory_sendOutgoingEAData_cold_6();
          }
          _queueOutgoingDataForEASessionUUID(v2, Copy, v9);
          if (gLogObjects && gNumLogObjects >= 30)
          {
            __int16 v63 = *(os_log_s **)(gLogObjects + 232);
          }

          else
          {
            __int16 v63 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG)) {
            iap2_externalAccessory_sendOutgoingEAData_cold_4(&valuePtr, (uint64_t)v11, v63);
          }
          LOBYTE(v2) = 1;
LABEL_125:
          if (!Copy) {
            return v2 & 1;
          }
LABEL_126:
          CFRelease(Copy);
          return v2 & 1;
        }
      }
    }
  }

  uint64_t v25 = iap2_feature_getFeature(v2, 0xAu);
  CFStringRef cf = Copy;
  if (v25) {
    int v71 = CFDictionaryGetValue(*(CFDictionaryRef *)(v25 + 24), v11);
  }
  else {
    int v71 = 0LL;
  }
  size_t v26 = (unsigned __int16)(iap2_endpoint_getMaxSendPayloadSize(v2) - 2);
  if (Length % v26) {
    unint64_t v27 = Length / v26 + 1;
  }
  else {
    unint64_t v27 = Length / v26;
  }
  BytePtr = CFDataGetBytePtr(v9);
  if (!v27)
  {
    LOBYTE(v2) = 0;
    if (!Copy) {
      return v2 & 1;
    }
    goto LABEL_126;
  }

  uint64_t v66 = v2;
  uint64_t v28 = 0LL;
  LOBYTE(v2) = 0;
  unsigned __int16 v29 = 0;
  uint64_t v30 = 0LL;
  if (Length >= v26) {
    size_t v31 = v26;
  }
  else {
    size_t v31 = 0LL;
  }
  if (Length % v26) {
    size_t v31 = Length % v26;
  }
  size_t __n = v26;
  size_t v70 = v31;
  size_t v32 = (v31 + 2);
  size_t v33 = (v26 + 2);
  do
  {
    if (v27 - v28 < 2)
    {
      int v42 = (char *)calloc(1uLL, v32);
      if (v42)
      {
        int v35 = v42;
        *(_WORD *)int v42 = bswap32(valuePtr) >> 16;
        memcpy(v42 + 2, &BytePtr[v30], v70);
        BOOL v43 = iAP2LinkQueueSendData(v5, v35, v32, SessionForService, (uint64_t)v71, (uint64_t)_eaDataQueuedCB, 0LL, 0);
        LOBYTE(v2) = v43;
        uint64_t v44 = gLogObjects;
        int v45 = gNumLogObjects;
        if (gLogObjects) {
          BOOL v46 = gNumLogObjects <= 29;
        }
        else {
          BOOL v46 = 1;
        }
        int v47 = !v46;
        if (v43)
        {
          if (v47)
          {
            unsigned int v48 = *(os_log_s **)(gLogObjects + 232);
          }

          else
          {
            unsigned int v48 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)&__int128 v81 = v44;
              WORD4(v81) = 1024;
              *(_DWORD *)((char *)&v81 + 10) = v45;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            }
          }

          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109632;
            LODWORD(v81) = v70;
            WORD2(v81) = 1024;
            *(_DWORD *)((char *)&v81 + 6) = v29;
            WORD5(v81) = 1024;
            HIDWORD(v81) = valuePtr;
            _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "queued %d ea bytes for LAST packet %d, eaSession %d",  buf,  0x14u);
          }

          v30 += v70;
          goto LABEL_101;
        }

        if (v47)
        {
          int v56 = *(os_log_s **)(gLogObjects + 232);
        }

        else
        {
          int v56 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)&__int128 v81 = v44;
            WORD4(v81) = 1024;
            *(_DWORD *)((char *)&v81 + 10) = v45;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          }
        }

        if (!os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
          goto LABEL_101;
        }
        *(_DWORD *)buf = 67109632;
        LODWORD(v81) = v70;
        WORD2(v81) = 1024;
        *(_DWORD *)((char *)&v81 + 6) = v29;
        WORD5(v81) = 1024;
        HIDWORD(v81) = valuePtr;
        unsigned int v60 = v56;
        __int16 v61 = "unable to queue %d ea bytes for LAST packet %d, eaSession %d";
        goto LABEL_106;
      }

      uint64_t v52 = gLogObjects;
      int v53 = gNumLogObjects;
      if (gLogObjects) {
        BOOL v54 = gNumLogObjects < 30;
      }
      else {
        BOOL v54 = 1;
      }
      if (v54)
      {
        int v58 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)&__int128 v81 = v52;
          WORD4(v81) = 1024;
          *(_DWORD *)((char *)&v81 + 10) = v53;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
        }
      }

      else
      {
        int v58 = *(os_log_s **)(gLogObjects + 232);
      }

      if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
        iap2_externalAccessory_sendOutgoingEAData_cold_2(&v75, v76);
      }
    }

    else
    {
      int v34 = (char *)calloc(1uLL, v33);
      if (v34)
      {
        int v35 = v34;
        *(_WORD *)int v34 = bswap32(valuePtr) >> 16;
        memcpy(v34 + 2, &BytePtr[v30], __n);
        BOOL v36 = iAP2LinkQueueSendData(v5, v35, v33, SessionForService, (uint64_t)v71, (uint64_t)_eaDataQueuedCB, 0LL, 0);
        LOBYTE(v2) = v36;
        uint64_t v37 = gLogObjects;
        int v38 = gNumLogObjects;
        if (gLogObjects) {
          BOOL v39 = gNumLogObjects <= 29;
        }
        else {
          BOOL v39 = 1;
        }
        int v40 = !v39;
        if (v36)
        {
          if (v40)
          {
            int v41 = *(os_log_s **)(gLogObjects + 232);
          }

          else
          {
            int v41 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)&__int128 v81 = v37;
              WORD4(v81) = 1024;
              *(_DWORD *)((char *)&v81 + 10) = v38;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            }
          }

          if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67109632;
            LODWORD(v81) = __n;
            WORD2(v81) = 1024;
            *(_DWORD *)((char *)&v81 + 6) = v29;
            WORD5(v81) = 1024;
            HIDWORD(v81) = valuePtr;
            _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_INFO,  "queued %d ea bytes for packet %d, eaSession %d",  buf,  0x14u);
          }

          v30 += __n;
          goto LABEL_101;
        }

        if (v40)
        {
          __int16 v55 = *(os_log_s **)(gLogObjects + 232);
        }

        else
        {
          __int16 v55 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)&__int128 v81 = v37;
            WORD4(v81) = 1024;
            *(_DWORD *)((char *)&v81 + 10) = v38;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          }
        }

        if (!os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
          goto LABEL_101;
        }
        *(_DWORD *)buf = 67109632;
        LODWORD(v81) = __n;
        WORD2(v81) = 1024;
        *(_DWORD *)((char *)&v81 + 6) = v29;
        WORD5(v81) = 1024;
        HIDWORD(v81) = valuePtr;
        unsigned int v60 = v55;
        __int16 v61 = "Unable to queue %d ea bytes for packet %d, eaSession %d";
LABEL_106:
        _os_log_error_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, v61, buf, 0x14u);
LABEL_101:
        uint64_t v5 = v74;
        char v59 = v2 ^ 1;
        free(v35);
        goto LABEL_102;
      }

      uint64_t v49 = gLogObjects;
      int v50 = gNumLogObjects;
      if (gLogObjects) {
        BOOL v51 = gNumLogObjects < 30;
      }
      else {
        BOOL v51 = 1;
      }
      if (v51)
      {
        __int16 v57 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)&__int128 v81 = v49;
          WORD4(v81) = 1024;
          *(_DWORD *)((char *)&v81 + 10) = v50;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
        }
      }

      else
      {
        __int16 v57 = *(os_log_s **)(gLogObjects + 232);
      }

      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR)) {
        iap2_externalAccessory_sendOutgoingEAData_cold_2(&v77, v78);
      }
    }

    char v59 = 0;
LABEL_102:
    if (v27 <= ++v29) {
      break;
    }
    uint64_t v28 = v29;
  }

  while ((v59 & 1) == 0);
  CFStringRef Copy = cf;
  if ((v59 & 1) == 0) {
    goto LABEL_125;
  }
  if (gLogObjects && gNumLogObjects >= 30)
  {
    int v62 = *(os_log_s **)(gLogObjects + 232);
  }

  else
  {
    int v62 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109888;
    LODWORD(v81) = valuePtr;
    WORD2(v81) = 2048;
    *(void *)((char *)&v81 + 6) = v30;
    HIWORD(v81) = 1024;
    int v82 = Length - v30;
    __int16 v83 = 1024;
    int v84 = Length;
    _os_log_error_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_ERROR,  "Queue overrun encountered for eaSession %d. byteCounter = %llu, remainingBytes = %d, originalLen was %d",  buf,  0x1Eu);
  }

  __int128 v65 = CFDataCreateWithBytesNoCopy(kCFAllocatorDefault, &BytePtr[v30], (Length - v30), kCFAllocatorNull);
  _queueOutgoingDataForEASessionUUID(v66, cf, v65);
  CFRelease(v65);
  if (cf) {
    goto LABEL_126;
  }
  return v2 & 1;
}

void _queueOutgoingDataForEASessionUUID(uint64_t a1, const void *a2, const __CFData *a3)
{
  if (a1)
  {
    uint64_t Feature = iap2_feature_getFeature(a1, 0xAu);
    if (Feature)
    {
      uint64_t v6 = Feature;
      CFIndex Length = CFDataGetLength(a3);
      uint64_t Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v6 + 24), a2);
      if (Value)
      {
        uint64_t v9 = Value;
        BOOL v10 = (const void *)kCFACCExternalAccessorySessionDataKey;
        CFMutableDataRef Mutable = (__CFData *)CFDictionaryGetValue(Value, kCFACCExternalAccessorySessionDataKey);
        if (Mutable
          || (CFMutableDataRef Mutable = CFDataCreateMutable(kCFAllocatorDefault, 0LL),
              CFDictionaryAddValue(v9, v10, Mutable),
              CFRelease(Mutable),
              Mutable))
        {
          if (CFDataGetLength(Mutable) + Length > 0x500000)
          {
            if (gLogObjects && gNumLogObjects >= 30)
            {
              uint64_t v14 = *(os_log_s **)(gLogObjects + 232);
            }

            else
            {
              uint64_t v14 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
              _queueOutgoingDataForEASessionUUID_cold_3();
            }
          }

          else
          {
            BytePtr = CFDataGetBytePtr(a3);
            CFDataAppendBytes(Mutable, BytePtr, Length);
            if (gLogObjects && gNumLogObjects >= 30)
            {
              uint64_t v13 = *(os_log_s **)(gLogObjects + 232);
            }

            else
            {
              uint64_t v13 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
              _queueOutgoingDataForEASessionUUID_cold_1(Length, v13, v15, v16, v17, v18, v19, v20);
            }
          }
        }
      }
    }
  }

void _eaDataQueuedCB(int a1, CFDictionaryRef theDict)
{
  if (theDict)
  {
    uint64_t Value = CFDictionaryGetValue(theDict, kCFACCExternalAccessorySessionUUIDKey);
    if (Value && CFDictionaryContainsKey((CFDictionaryRef)_gActiveEASessions, Value))
    {
      uint64_t v4 = (const void *)kCFACCExternalAccessorySessionDataKey;
      uint64_t v5 = (const __CFData *)CFDictionaryGetValue(theDict, kCFACCExternalAccessorySessionDataKey);
      if (v5)
      {
        if (CFDataGetLength(v5))
        {
          uint64_t v6 = CFDictionaryGetValue(theDict, kCFACCExternalAccessoryProtocolEndpointUUIDKey);
          if (gLogObjects && gNumLogObjects >= 30)
          {
            unsigned int v7 = *(os_log_s **)(gLogObjects + 232);
          }

          else
          {
            unsigned int v7 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
            _eaDataQueuedCB_cold_14();
          }
          EndpointWithUUID = acc_manager_getEndpointWithUUID(v6);
          if (EndpointWithUUID)
          {
            uint64_t v12 = EndpointWithUUID[7];
            uint64_t v13 = *(void *)(v12 + 32);
            if (v13)
            {
              uint64_t v14 = *(void *)(v13 + 24);
              if (v14)
              {
                unsigned int SessionForService = iAP2LinkGetSessionForService(*(void *)(v13 + 24), 2);
                uint64_t v16 = (const __CFNumber *)CFDictionaryGetValue(theDict, kCFACCExternalAccessorySessionIDKey);
                if (v16)
                {
                  unsigned __int16 valuePtr = -21846;
                  CFNumberGetValue(v16, kCFNumberSInt16Type, &valuePtr);
                  uint64_t v17 = (const __CFData *)CFDictionaryGetValue(theDict, v4);
                  if (v17)
                  {
                    uint64_t v18 = v17;
                    unint64_t Length = CFDataGetLength(v17);
                    unsigned __int16 v20 = iap2_endpoint_getMaxSendPayloadSize(v12) - 2;
                    if (Length <= v20) {
                      unsigned __int16 v21 = Length;
                    }
                    else {
                      unsigned __int16 v21 = v20;
                    }
                    BytePtr = CFDataGetBytePtr(v18);
                    unsigned int v23 = v21 + 2;
                    BOOL v24 = (char *)calloc(1uLL, v23);
                    if (v24)
                    {
                      uint64_t v25 = v24;
                      *(_WORD *)BOOL v24 = bswap32(valuePtr) >> 16;
                      memcpy(v24 + 2, BytePtr, v21);
                      BOOL v26 = iAP2LinkQueueSendData( v14,  v25,  v23,  SessionForService,  (uint64_t)theDict,  (uint64_t)_eaDataQueuedCB,  0LL,  0);
                      if (gLogObjects) {
                        BOOL v27 = gNumLogObjects <= 29;
                      }
                      else {
                        BOOL v27 = 1;
                      }
                      int v28 = !v27;
                      if (v26)
                      {
                        if (v28)
                        {
                          unsigned __int16 v29 = *(os_log_s **)(gLogObjects + 232);
                        }

                        else
                        {
                          unsigned __int16 v29 = (os_log_s *)&_os_log_default;
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                            platform_connectionInfo_configStreamCategoryListReady_cold_1();
                          }
                        }

                        if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
                        {
                          *(_DWORD *)buf = 67109376;
                          int v43 = v21;
                          __int16 v44 = 1024;
                          int v45 = valuePtr;
                          _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_INFO,  "queued %d ea bytes for cached data in one packet, eaSession %d",  buf,  0xEu);
                        }

                        if (gLogObjects && gNumLogObjects >= 30)
                        {
                          size_t v32 = *(os_log_s **)(gLogObjects + 232);
                        }

                        else
                        {
                          size_t v32 = (os_log_s *)&_os_log_default;
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                            platform_connectionInfo_configStreamCategoryListReady_cold_1();
                          }
                        }

                        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
                          _eaDataQueuedCB_cold_9(v21, v32, v33, v34, v35, v36, v37, v38);
                        }
                        v46.location = 0LL;
                        v46.length = v21;
                        CFDataDeleteBytes(v18, v46);
                        int v39 = CFDataGetLength(v18);
                        if (gLogObjects && gNumLogObjects >= 30)
                        {
                          int v40 = *(os_log_s **)(gLogObjects + 232);
                        }

                        else
                        {
                          int v40 = (os_log_s *)&_os_log_default;
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                            platform_connectionInfo_configStreamCategoryListReady_cold_1();
                          }
                        }

                        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG)) {
                          _eaDataQueuedCB_cold_7(v39, Length, v40);
                        }
                      }

                      else
                      {
                        if (v28)
                        {
                          size_t v31 = *(os_log_s **)(gLogObjects + 232);
                        }

                        else
                        {
                          size_t v31 = (os_log_s *)&_os_log_default;
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                            platform_connectionInfo_configStreamCategoryListReady_cold_1();
                          }
                        }

                        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
                          _eaDataQueuedCB_cold_12();
                        }
                      }

                      free(v25);
                    }

                    else
                    {
                      if (gLogObjects && gNumLogObjects >= 30)
                      {
                        uint64_t v30 = *(os_log_s **)(gLogObjects + 232);
                      }

                      else
                      {
                        uint64_t v30 = (os_log_s *)&_os_log_default;
                        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                          platform_connectionInfo_configStreamCategoryListReady_cold_1();
                        }
                      }

                      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
                        _eaDataQueuedCB_cold_5();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      else
      {
        if (gLogObjects && gNumLogObjects >= 30)
        {
          BOOL v10 = *(os_log_s **)(gLogObjects + 232);
        }

        else
        {
          BOOL v10 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
          _eaDataQueuedCB_cold_3();
        }
      }
    }

    else
    {
      if (gLogObjects) {
        BOOL v8 = gNumLogObjects < 30;
      }
      else {
        BOOL v8 = 1;
      }
      if (v8)
      {
        uint64_t v9 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      else
      {
        uint64_t v9 = *(os_log_s **)(gLogObjects + 232);
      }

      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        _eaDataQueuedCB_cold_1();
      }
    }
  }

void *_createEAFeature(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v1 = calloc(1uLL, 0x28uLL);
  uint64_t v2 = v1;
  if (v1)
  {
    v1[4] = 0LL;
    *(_OWORD *)uint64_t v1 = 0u;
    *((_OWORD *)v1 + 1) = 0u;
    if (_createEAFeature_onceToken != -1) {
      dispatch_once(&_createEAFeature_onceToken, &__block_literal_global_19);
    }
  }

  return v2;
}

uint64_t _destroyEAFeature(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = (void **)result;
    uint64_t v3 = *(void *)result;
    if (*(void *)result)
    {
      platform_externalAccessory_removeEAASessionCountForConnection(*(void *)(a2 + 16));
      if (*(void *)v3)
      {
        CFRelease(*(CFTypeRef *)v3);
        *(void *)uint64_t v3 = 0LL;
      }

      uint64_t v4 = *(const __CFArray **)(v3 + 8);
      if (v4)
      {
        CFIndex Count = CFArrayGetCount(v4);
        if (Count >= 1)
        {
          CFIndex v6 = Count;
          for (CFIndex i = 0LL; i != v6; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 8), i);
            uint64_t v9 = (const void *)ValueAtIndex[1];
            if (v9) {
              CFRelease(v9);
            }
            free(ValueAtIndex);
          }
        }

        BOOL v10 = *(const void **)(v3 + 8);
        if (v10)
        {
          CFRelease(v10);
          *(void *)(v3 + _Block_object_dispose(va, 8) = 0LL;
        }
      }

      BOOL v11 = *(__CFDictionary **)(v3 + 16);
      if (v11)
      {
        CFDictionaryRemoveAllValues(v11);
        uint64_t v12 = *(const void **)(v3 + 16);
        if (v12)
        {
          CFRelease(v12);
          *(void *)(v3 + 16) = 0LL;
        }
      }

      uint64_t v13 = *(const __CFDictionary **)(v3 + 24);
      if (v13)
      {
        CFDictionaryApplyFunction(v13, (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_deactiveEASession, 0LL);
        CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v3 + 24));
        uint64_t v14 = *(const void **)(v3 + 24);
        if (v14)
        {
          CFRelease(v14);
          *(void *)(v3 + 24) = 0LL;
        }
      }

      pthread_mutex_lock(&__giAP2ExternalAccessoryLock);
      uint64_t v15 = *(const __CFDictionary **)(v3 + 32);
      if (v15)
      {
        CFDictionaryApplyFunction( v15,  (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_deactiveEASessionStruct,  0LL);
        CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v3 + 32));
        uint64_t v16 = *(const void **)(v3 + 32);
        if (v16)
        {
          CFRelease(v16);
          *(void *)(v3 + 32) = 0LL;
        }
      }

      pthread_mutex_unlock(&__giAP2ExternalAccessoryLock);
      if (*v2)
      {
        free(*v2);
        void *v2 = 0LL;
      }

      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t _checkEAIdentificationInfo(uint64_t a1)
{
  uint64_t Feature = iap2_feature_getFeature(a1, 0xAu);
  char v18 = 0;
  uint64_t v3 = iap2_identification_checkIdentificationMsgIDs( a1,  (uint64_t)&_checkEAIdentificationInfo_kMsgExternalAccessoryList,  3u,  &v18);
  if (v18) {
    BOOL v4 = (_DWORD)v3 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    if (!Feature)
    {
      iap2_features_createFeature(a1, 0xAu);
      uint64_t Feature = iap2_feature_getFeature(a1, 0xAu);
    }

    uint64_t v12 = *(const __CFArray **)(Feature + 8);
    if (!v12 || !CFArrayGetCount(v12))
    {
      uint64_t v14 = 0LL;
      uint64_t v5 = 14LL;
      do
      {
        iap2_identification_rejectMsgID( a1,  *(unsigned __int16 *)((char *)&_checkEAIdentificationInfo_kMsgExternalAccessoryList + v14),  *(_DWORD *)((char *)&_checkEAIdentificationInfo_kMsgExternalAccessoryList + v14 + 4),  0xEu);
        v14 += 12LL;
      }

      while (v14 != 36);
      goto LABEL_30;
    }

    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v5 = v3;
    if (v18) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = Feature == 0;
    }
    if (!v6)
    {
      unsigned int v7 = *(const __CFArray **)(Feature + 8);
      if (v7)
      {
        if (CFArrayGetCount(v7) >= 1)
        {
          CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(Feature + 8));
          if (Count >= 1)
          {
            CFIndex v9 = Count;
            for (CFIndex i = 0LL; i != v9; ++i)
            {
              ValueAtIndex = (unsigned __int16 *)CFArrayGetValueAtIndex(*(CFArrayRef *)(Feature + 8), i);
              if (!*((_BYTE *)ValueAtIndex + 22) && (*((_DWORD *)ValueAtIndex + 4) - 3) >= 2)
              {
                uint64_t v5 = 11LL;
                iap2_identification_addRejectGroup(a1, 10, *ValueAtIndex, 0xBu);
              }
            }
          }
        }
      }
    }
  }

  if (v18 && !(_DWORD)v5)
  {
    if (gLogObjects && gNumLogObjects >= 30)
    {
      uint64_t v13 = *(os_log_s **)(gLogObjects + 232);
    }

    else
    {
      uint64_t v13 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "Successfully identified for iAP2 ExternalAccessory",  buf,  2u);
    }

    iap2_identification_setIdentifiedForFeature(a1, 0xAu);
    return 0LL;
  }

void _handleIdentificationRejection_2(uint64_t a1)
{
  uint64_t Feature = iap2_feature_getFeature(a1, 0xAu);
  if (Feature)
  {
    uint64_t v2 = Feature;
    uint64_t v3 = *(__CFDictionary **)(Feature + 16);
    if (v3) {
      CFDictionaryRemoveAllValues(v3);
    }
    BOOL v4 = *(const __CFArray **)(v2 + 8);
    if (v4)
    {
      CFIndex Count = CFArrayGetCount(v4);
      if (Count >= 1)
      {
        CFIndex v6 = Count;
        for (CFIndex i = 0LL; i != v6; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 8), i);
          CFIndex v9 = (const void *)ValueAtIndex[1];
          if (v9) {
            CFRelease(v9);
          }
          free(ValueAtIndex);
        }
      }

      BOOL v10 = *(const void **)(v2 + 8);
      if (v10)
      {
        CFRelease(v10);
        *(void *)(v2 + _Block_object_dispose(va, 8) = 0LL;
      }
    }

    if (*(void *)v2)
    {
      CFRelease(*(CFTypeRef *)v2);
      *(void *)uint64_t v2 = 0LL;
    }
  }

void ___createEAFeature_block_invoke(id a1)
{
  _gActiveEASessions = (uint64_t)CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  __gActiveEASessionStructs = (uint64_t)CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  0LL);
}

void _CFDictionaryApplierFunction_deactiveEASession(int a1, CFDictionaryRef theDict)
{
  if (theDict)
  {
    uint64_t Value = CFDictionaryGetValue(theDict, kCFACCExternalAccessorySessionUUIDKey);
    if (gLogObjects) {
      BOOL v3 = gNumLogObjects < 30;
    }
    else {
      BOOL v3 = 1;
    }
    if (v3)
    {
      BOOL v4 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      BOOL v4 = *(os_log_s **)(gLogObjects + 232);
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      _CFDictionaryApplierFunction_deactiveEASession_cold_1();
    }
    CFDictionaryRemoveValue((CFMutableDictionaryRef)_gActiveEASessions, Value);
  }

void _CFDictionaryApplierFunction_deactiveEASessionStruct(const void *a1, void *a2)
{
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 30;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      uint64_t v5 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      uint64_t v5 = *(os_log_s **)(gLogObjects + 232);
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v6 = 138412290;
      unsigned int v7 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "iAP2: removing iAP2ExternalAccessory_Session_t eaSessionUUID %@ from global list",  (uint8_t *)&v6,  0xCu);
    }

    CFDictionaryRemoveValue((CFMutableDictionaryRef)__gActiveEASessionStructs, a1);
    _iap2_externalAccessory_cleanupEASessionStruct(a2);
    free(a2);
  }

void _iap2_externalAccessory_cleanupEASessionStruct(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (const void *)a1[3];
    if (v2) {
      CFRelease(v2);
    }
    a1[3] = 0LL;
    BOOL v3 = (const void *)a1[1];
    if (v3) {
      CFRelease(v3);
    }
    a1[1] = 0LL;
    BOOL v4 = (const void *)a1[2];
    if (v4) {
      CFRelease(v4);
    }
    a1[2] = 0LL;
  }

BOOL _parseIdentificationSupportedEAProtocol(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  int v54 = 0;
  if (iAP2MsgGetParamID((uint64_t)a3) != 10)
  {
    BOOL v26 = 0;
    unsigned int v15 = 17;
LABEL_108:
    iap2_identification_addRejectParam(a1, 10, v15);
    return !v26;
  }

  unsigned __int8 valuePtr = 0;
  iap2_features_createFeature(a1, 0xAu);
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, a3);
  unsigned int v7 = &startLogsNotificationObservers;
  BOOL v8 = &startLogsNotificationObservers;
  if (!FirstParam)
  {
    CFStringRef v27 = 0LL;
    unsigned int v15 = 17;
    goto LABEL_40;
  }

  CFIndex v9 = (unsigned __int16 *)FirstParam;
  uint64_t v48 = a1;
  uint64_t v52 = 0LL;
  BOOL v10 = 0;
  __int16 DataAsU16 = 0;
  CFStringRef v49 = 0LL;
  char v11 = 0;
  BOOL v12 = 0;
  char v13 = 0;
  BOOL v14 = 0;
  int v50 = 5;
  do
  {
    switch(iAP2MsgGetParamID((uint64_t)v9))
    {
      case 0u:
        if (!v10)
        {
          LOBYTE(v52) = iAP2MsgGetDataAsU8(v9, &v54);
          unsigned __int8 valuePtr = v52;
          BOOL v16 = v54 == 0;
          BOOL v10 = v54 == 0;
          goto LABEL_26;
        }

        unsigned int v15 = 5;
        BOOL v10 = 1;
        break;
      case 1u:
        if (v14)
        {
          unsigned int v15 = 5;
          BOOL v14 = 1;
        }

        else
        {
          DataAsString = iAP2MsgGetDataAsString(v9, (BOOL *)&v54);
          if (!v54)
          {
            CFStringRef v49 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)DataAsString, 0x8000100u);
            BOOL v14 = v49 != 0LL;
            goto LABEL_30;
          }

          BOOL v14 = 0;
          unsigned int v15 = 15;
        }

        break;
      case 2u:
        if ((v13 & 1) != 0)
        {
          unsigned int v15 = 5;
          char v13 = 1;
        }

        else
        {
          unsigned int DataAsU8 = iAP2MsgGetDataAsU8(v9, &v54);
          BOOL v19 = v54 == 0;
          int v50 = DataAsU8;
          BOOL v20 = DataAsU8 < 5;
          char v13 = v19 && v20;
          if (v19 && v20) {
            unsigned int v15 = 17;
          }
          else {
            unsigned int v15 = 15;
          }
        }

        break;
      case 3u:
        if (v12)
        {
          unsigned int v15 = 5;
          BOOL v12 = 1;
        }

        else
        {
          __int16 DataAsU16 = iAP2MsgGetDataAsU16(v9, &v54);
          BOOL v16 = v54 == 0;
          BOOL v12 = v54 == 0;
          int v21 = HIDWORD(v52);
          if (!v54) {
            int v21 = 2;
          }
          HIDWORD(v52) = v21;
LABEL_26:
          if (v16) {
            unsigned int v15 = 17;
          }
          else {
            unsigned int v15 = 15;
          }
        }

        break;
      case 4u:
        if ((v11 & 1) != 0) {
          unsigned int v15 = 5;
        }
        else {
          unsigned int v15 = 17;
        }
        char v11 = 1;
        break;
      default:
LABEL_30:
        unsigned int v15 = 17;
        break;
    }

    NextParam = iAP2MsgGetNextParam(a2, a3, v9);
    if (!NextParam) {
      break;
    }
    CFIndex v9 = NextParam;
  }

  while (v15 == 17);
  if (!v10 || !v14 || v15 != 17)
  {
    a1 = v48;
    CFStringRef v27 = v49;
    BOOL v8 = &startLogsNotificationObservers;
    unsigned int v7 = &startLogsNotificationObservers;
LABEL_40:
    int v54 = -1;
    uint64_t v28 = v7[353];
    if (v28 && *((int *)v8 + 708) >= 30)
    {
      unsigned __int16 v29 = *(os_log_s **)(v28 + 232);
    }

    else
    {
      unsigned __int16 v29 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Invalid EA Protocol param! (need to log more details later)",  buf,  2u);
    }

    if (v27) {
      CFRelease(v27);
    }
    goto LABEL_107;
  }

  if (gLogObjects && gNumLogObjects >= 30)
  {
    unsigned int v23 = *(os_log_s **)(gLogObjects + 232);
    BOOL v24 = v49;
    unsigned __int8 v25 = v52;
  }

  else
  {
    unsigned int v23 = (os_log_s *)&_os_log_default;
    BOOL v24 = v49;
    unsigned __int8 v25 = v52;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412546;
    int v56 = v24;
    __int16 v57 = 1024;
    int v58 = v25;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Adding EA protocol %@, protocolID %d", buf, 0x12u);
  }

  uint64_t v30 = calloc(1uLL, 0x20uLL);
  if (!v30)
  {
    int v54 = -1;
    if (gLogObjects && gNumLogObjects >= 30)
    {
      uint64_t v38 = *(os_log_s **)(gLogObjects + 232);
      a1 = v48;
    }

    else
    {
      uint64_t v38 = (os_log_s *)&_os_log_default;
      a1 = v48;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      _parseIdentificationSupportedEAProtocol_cold_2();
      if (!v24) {
        goto LABEL_106;
      }
    }

    else if (!v24)
    {
LABEL_106:
      unsigned int v15 = 17;
LABEL_107:
      BOOL v26 = v54;
      goto LABEL_108;
    }

    CFRelease(v24);
    goto LABEL_106;
  }

  size_t v31 = v30;
  *uint64_t v30 = v25;
  *((void *)v30 + 1) = v24;
  *((_BYTE *)v30 + 23) = v11 & 1;
  v30[10] = DataAsU16;
  *((_BYTE *)v30 + 22) = v12;
  *((_DWORD *)v30 + 6) = HIDWORD(v52);
  int v32 = v50;
  if ((v13 & 1) == 0) {
    int v32 = 1;
  }
  *((_DWORD *)v30 + 4) = v32;
  a1 = v48;
  uint64_t Feature = iap2_feature_getFeature(v48, 0xAu);
  if (!Feature)
  {
    int v54 = -1;
    if (gLogObjects && gNumLogObjects >= 30)
    {
      int v39 = *(os_log_s **)(gLogObjects + 232);
    }

    else
    {
      int v39 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      _parseIdentificationSupportedEAProtocol_cold_4();
      if (!v24) {
        goto LABEL_105;
      }
    }

    else if (!v24)
    {
LABEL_105:
      free(v31);
      goto LABEL_106;
    }

    CFRelease(v24);
    goto LABEL_105;
  }

  uint64_t v34 = Feature;
  if (!*(void *)(Feature + 8)) {
    *(void *)(Feature + _Block_object_dispose(va, 8) = CFArrayCreateMutable(kCFAllocatorDefault, 1LL, 0LL);
  }
  if (!*(void *)(v34 + 24)) {
    *(void *)(v34 + 24) = CFDictionaryCreateMutable( kCFAllocatorDefault,  1LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  }
  if (!*(void *)(v34 + 16)) {
    *(void *)(v34 + 16) = CFDictionaryCreateMutable(kCFAllocatorDefault, 1LL, &kCFTypeDictionaryKeyCallBacks, 0LL);
  }
  if (!*(void *)(v34 + 32)) {
    *(void *)(v34 + 32) = CFDictionaryCreateMutable(kCFAllocatorDefault, 1LL, &kCFTypeDictionaryKeyCallBacks, 0LL);
  }
  CFNumberRef v35 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
  CFIndex CountOfKey = CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v34 + 16), v35);
  if (CountOfKey)
  {
    if (gLogObjects && gNumLogObjects >= 1)
    {
      uint64_t v37 = *(os_log_s **)gLogObjects;
    }

    else
    {
      uint64_t v37 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
      _parseIdentificationSupportedEAProtocol_cold_6(&valuePtr, v24, v37);
    }
    int v54 = -1;
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v34 + 16));
    int v40 = *(const __CFArray **)(v34 + 8);
    if (v40)
    {
      CFIndex Count = CFArrayGetCount(v40);
      if (Count >= 1)
      {
        CFIndex v42 = Count;
        for (CFIndex i = 0LL; i != v42; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v34 + 8), i);
          int v45 = (const void *)ValueAtIndex[1];
          if (v45) {
            CFRelease(v45);
          }
          free(ValueAtIndex);
        }
      }

      CFRange v46 = *(const void **)(v34 + 8);
      if (v46)
      {
        CFRelease(v46);
        *(void *)(v34 + _Block_object_dispose(va, 8) = 0LL;
      }
    }

    if (v24) {
      CFRelease(v24);
    }
    free(v31);
    unsigned int v15 = 17;
  }

  else
  {
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v34 + 16), v35, v31);
    CFArrayAppendValue(*(CFMutableArrayRef *)(v34 + 8), v31);
    unsigned int v15 = 0;
  }

  if (v35) {
    CFRelease(v35);
  }
  BOOL v26 = v54;
  if (CountOfKey) {
    goto LABEL_108;
  }
  return !v26;
}

BOOL _parseIdentificationPreferredBundleSeedID(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  BOOL v16 = 0;
  if (iAP2MsgGetParamID((uint64_t)a3) != 11)
  {
    BOOL v7 = 0;
    unsigned int v12 = 17;
LABEL_27:
    iap2_identification_addRejectParam(a1, 11, v12);
    return !v7;
  }

  CFStringRef v5 = iAP2MsgCopyDataAsCFString(a3, &v16);
  CFStringRef v6 = v5;
  BOOL v7 = v16;
  if (!v5 || v16)
  {
    unsigned int v12 = 10;
    if (!v5) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }

  iap2_features_createFeature(a1, 0xAu);
  uint64_t Feature = (const void **)iap2_feature_getFeature(a1, 0xAu);
  if (!Feature)
  {
    if (gLogObjects && gNumLogObjects >= 30)
    {
      char v13 = *(os_log_s **)(gLogObjects + 232);
    }

    else
    {
      char v13 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      _parseIdentificationPreferredBundleSeedID_cold_1();
    }
    unsigned int v12 = 17;
LABEL_26:
    CFRelease(v6);
    BOOL v7 = v16;
    goto LABEL_27;
  }

  CFIndex v9 = Feature;
  BOOL v10 = *Feature;
  if (v10) {
    CFRelease(v10);
  }
  *CFIndex v9 = v6;
  CFRetain(v6);
  if (gLogObjects && gNumLogObjects >= 30)
  {
    char v11 = *(os_log_s **)(gLogObjects + 232);
  }

  else
  {
    char v11 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v14 = *v9;
    *(_DWORD *)buf = 138412290;
    char v18 = v14;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "preferredAppBundleSeedID %@", buf, 0xCu);
  }

  CFRelease(v6);
  BOOL v7 = v16;
  return !v7;
}

uint64_t _iap2_externalAccessory_eaDataQueuedCB(uint64_t a1, const void *a2)
{
  if (a2)
  {
    uint64_t Value = (const void **)CFDictionaryGetValue((CFDictionaryRef)__gActiveEASessionStructs, a2);
    if (Value)
    {
      BOOL v4 = Value;
      EndpointWithUUID = acc_manager_getEndpointWithUUID(Value[3]);
      if (EndpointWithUUID)
      {
        if (EndpointWithUUID[7])
        {
          CFStringRef v6 = (const __CFArray *)v4[2];
          if (v6)
          {
            if (v4[1])
            {
              ValueAtIndex = CFArrayGetValueAtIndex(v6, 0LL);
              CFArrayAppendValue((CFMutableArrayRef)v4[1], ValueAtIndex);
              CFArrayRemoveValueAtIndex((CFMutableArrayRef)v4[2], 0LL);
            }
          }
        }

        BOOL v8 = (const __CFArray *)v4[1];
        if (v8 && CFArrayGetCount(v8) >= 1)
        {
          if (gLogObjects && gNumLogObjects >= 30)
          {
            CFIndex v9 = *(os_log_s **)(gLogObjects + 232);
          }

          else
          {
            CFIndex v9 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
            _iap2_externalAccessory_eaDataQueuedCB_cold_1();
          }
          platform_externalAccessory_startIncomingDataNotificationsForEASessionUUID((uint64_t)a2);
        }
      }
    }
  }

  CFRelease(a2);
  return pthread_mutex_unlock(&__giAP2ExternalAccessoryLock);
}

void OUTLINED_FUNCTION_4_14(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void OUTLINED_FUNCTION_7_8(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

_BYTE *OUTLINED_FUNCTION_14_2(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = 0;
  *a2 = 0;
  return result;
}

void OUTLINED_FUNCTION_15_0(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

_BYTE *_createFeature_15(_BYTE *result)
{
  if (result)
  {
    uint64_t result = calloc(1uLL, 1uLL);
    if (result) {
      *uint64_t result = 0;
    }
  }

  return result;
}

id _destroyFeature_15(void **a1, void *a2)
{
  id v2 = 0LL;
  if (a1 && a2)
  {
    if (*a2 && (uint64_t v5 = a2[1]) != 0 && *a1)
    {
      if ((platform_usb_set_mode_monitoring(v5, 0LL) & 1) == 0)
      {
        if (gLogObjects && gNumLogObjects >= 34)
        {
          CFStringRef v6 = *(os_log_s **)(gLogObjects + 264);
        }

        else
        {
          CFStringRef v6 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
          _destroyFeature_cold_3();
        }
      }

      id v2 = platform_usb_set_fault_monitoring(a2[1], 0LL);
      if ((v2 & 1) == 0)
      {
        if (gLogObjects && gNumLogObjects >= 34)
        {
          BOOL v7 = *(os_log_s **)(gLogObjects + 264);
        }

        else
        {
          BOOL v7 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          _destroyFeature_cold_1();
        }
      }

      if (*a1)
      {
        free(*a1);
        *a1 = 0LL;
      }
    }

    else
    {
      return 0LL;
    }
  }

  return v2;
}

uint64_t _startFeatureFromDevice_10(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t *)result;
    if (!*(void *)result || !*(void *)(result + 8)) {
      return 0LL;
    }
    if (iap2_identification_isIdentifiedForOutgoingMessageID(result, 0x7E01u))
    {
      iAP2MsgInit((uint64_t)(v1 + 15), 32257, v1[24], 0xFFFF, 0LL, 0LL);
      if (!*v1)
      {
        int v3 = 0;
        return v3 != 0;
      }

      unsigned int mode = platform_usb_get_mode(v1[1]);
      if (mode)
      {
        int v3 = 0;
        if (mode != 1)
        {
LABEL_28:
          platform_usb_set_mode_monitoring(v1[1], 1LL);
          return v3 != 0;
        }

        __int16 v4 = 1;
      }

      else
      {
        __int16 v4 = 0;
      }

      iAP2MsgAddVoidParam((uint64_t)(v1 + 15), 0LL, v4);
      if ((iap2_sessionControl_sendOutgoingMessage(v1, (uint64_t)(v1 + 15)) & 1) != 0)
      {
        int v3 = 1;
      }

      else
      {
        if (gLogObjects && gNumLogObjects >= 34)
        {
          CFStringRef v6 = *(os_log_s **)(gLogObjects + 264);
        }

        else
        {
          CFStringRef v6 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
          _startFeatureFromDevice_cold_1();
        }
        int v3 = 0;
      }

      goto LABEL_28;
    }

    if (gLogObjects && gNumLogObjects >= 34)
    {
      uint64_t v5 = *(os_log_s **)(gLogObjects + 264);
    }

    else
    {
      uint64_t v5 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    uint64_t result = os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)result)
    {
      _startFeatureFromDevice_cold_3();
      return 0LL;
    }
  }

  return result;
}

uint64_t _checkIdentificationInfo_13(uint64_t *a1)
{
  char v26 = 0;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs( (uint64_t)a1,  (uint64_t)&_checkIdentificationInfo__kMsgUSBHostModeList,  3u,  &v26);
  if ((_DWORD)v2) {
    return v2;
  }
  if (!v26) {
    return 0LL;
  }
  if (!*a1
    || acc_endpoint_getTransportType(*a1) != 6
    && acc_endpoint_getTransportType(*a1)
    && acc_endpoint_getTransportType(*a1) != 7
    && acc_endpoint_getTransportType(*a1) != 1
    && acc_endpoint_getTransportType(*a1) != 5)
  {
    if (gLogObjects && gNumLogObjects >= 34)
    {
      char v13 = *(os_log_s **)(gLogObjects + 264);
    }

    else
    {
      char v13 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO)) {
      goto LABEL_41;
    }
    int TransportType = acc_endpoint_getTransportType(*a1);
    *(_DWORD *)buf = 67109120;
    LODWORD(v2_Block_object_dispose(va, 8) = TransportType;
    BOOL v16 = "Identified for USB Host Mode from non invalide connection (type=%d)";
    uint64_t v17 = v13;
    uint32_t v18 = 8;
    goto LABEL_40;
  }

  int v3 = (const __CFDictionary *)iap2_identification_transportComponents((uint64_t)a1);
  if (!v3 || (__int16 v4 = v3, (Count = CFDictionaryGetCount(v3)) == 0))
  {
    if (gLogObjects && gNumLogObjects >= 34)
    {
      BOOL v14 = *(os_log_s **)(gLogObjects + 264);
    }

    else
    {
      BOOL v14 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (!os_log_type_enabled(v14, OS_LOG_TYPE_INFO)) {
      goto LABEL_41;
    }
    *(_WORD *)buf = 0;
    BOOL v16 = "Identified for USB Host Mode without identifying for a usbHost transportComponent";
    uint64_t v17 = v14;
    uint32_t v18 = 2;
LABEL_40:
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, v16, buf, v18);
LABEL_41:
    uint64_t v19 = 12LL;
    goto LABEL_43;
  }

  uint64_t v6 = Count;
  __chkstk_darwin(Count);
  BOOL v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  memset(v8, 170, v7);
  CFDictionaryGetKeysAndValues(v4, 0LL, (const void **)v8);
  if (v6 < 1)
  {
LABEL_42:
    uint64_t v19 = 12LL;
    goto LABEL_43;
  }

  unsigned int v23 = v25;
  *(void *)&__int128 v9 = 134218240LL;
  __int128 v22 = v9;
  while (1)
  {
    if (!*(void *)v8)
    {
      uint64_t v10 = gLogObjects;
      int v11 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 34)
      {
        unsigned int v12 = *(os_log_s **)(gLogObjects + 264);
      }

      else
      {
        unsigned int v12 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = v22;
          uint64_t v28 = v10;
          __int16 v29 = 1024;
          int v30 = v11;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          unsigned int v12 = (os_log_s *)&_os_log_default;
        }
      }

      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        _checkIdentificationInfo_cold_5(&v24, v23, v12);
      }
      goto LABEL_23;
    }

    if (*(_DWORD *)(*(void *)v8 + 20LL) == 2) {
      break;
    }
LABEL_23:
    v8 += 8;
    if (!--v6) {
      goto LABEL_42;
    }
  }

  iap2_features_createFeature((uint64_t)a1, 0x13u);
  iap2_identification_setIdentifiedForFeature((uint64_t)a1, 0x13u);
  uint64_t v19 = 0LL;
LABEL_43:
  if (v26)
  {
    if (gLogObjects && gNumLogObjects >= 34)
    {
      BOOL v20 = *(os_log_s **)(gLogObjects + 264);
    }

    else
    {
      BOOL v20 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
      _checkIdentificationInfo_cold_1_3();
    }
  }

  return v19;
}

uint64_t iap2_usbHostMode_StartUSBHostModeHandler(uint64_t *a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 34)
  {
    __int16 v4 = *(os_log_s **)(gLogObjects + 264);
  }

  else
  {
    __int16 v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1)
    {
      uint64_t v5 = *a1;
      if (*a1) {
        uint64_t v5 = a1[1];
      }
    }

    else
    {
      uint64_t v5 = 0LL;
    }

    *(_DWORD *)buf = 138412290;
    *(void *)__int128 v22 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "startUSBHostMode: %@", buf, 0xCu);
  }

  if (!a1 || !*a1) {
    return 0LL;
  }
  uint64_t v6 = 0LL;
  if (a2 && a1[1])
  {
    uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0x13u);
    if (!Feature)
    {
      if (gLogObjects && gNumLogObjects >= 34)
      {
        uint32_t v18 = *(os_log_s **)(gLogObjects + 264);
      }

      else
      {
        uint32_t v18 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        iap2_usbHostMode_StartUSBHostModeHandler_cold_1();
      }
      return 0LL;
    }

    BOOL v8 = (_BYTE *)Feature;
    unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
    if (FirstParam)
    {
      NextParam = (unsigned __int16 *)FirstParam;
      do
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        if (ParamID == 2)
        {
          *BOOL v8 = 1;
        }

        else
        {
          int v12 = ParamID;
          uint64_t v13 = gLogObjects;
          int v14 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 34)
          {
            unsigned int v15 = *(os_log_s **)(gLogObjects + 264);
          }

          else
          {
            unsigned int v15 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)__int128 v22 = v13;
              *(_WORD *)&v22[8] = 1024;
              int v23 = v14;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              unsigned int v15 = (os_log_s *)&_os_log_default;
            }
          }

          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            int MsgID = iAP2MsgGetMsgID(a2);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)__int128 v22 = v12;
            *(_WORD *)&v22[4] = 1024;
            *(_DWORD *)&v22[6] = MsgID;
            _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param",  buf,  0xEu);
          }
        }

        NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
      }

      while (NextParam);
    }

    if ((platform_usb_set_mode(a1[1], 1LL) & 1) == 0)
    {
      if (gLogObjects && gNumLogObjects >= 34)
      {
        uint64_t v19 = *(os_log_s **)(gLogObjects + 264);
      }

      else
      {
        uint64_t v19 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        iap2_usbHostMode_StartUSBHostModeHandler_cold_5();
      }
      return 0LL;
    }

    if (*v8)
    {
      uint64_t v6 = 1LL;
      if ((platform_usb_set_fault_monitoring(a1[1], 1LL) & 1) == 0)
      {
        if (gLogObjects && gNumLogObjects >= 34)
        {
          uint64_t v17 = *(os_log_s **)(gLogObjects + 264);
        }

        else
        {
          uint64_t v17 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          iap2_usbHostMode_StartUSBHostModeHandler_cold_3();
        }
        return 0LL;
      }
    }

    else
    {
      return 1LL;
    }
  }

  return v6;
}

uint64_t iap2_usbHostMode_StopUSBHostModeHandler(uint64_t *a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 34)
  {
    __int16 v4 = *(os_log_s **)(gLogObjects + 264);
  }

  else
  {
    __int16 v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1)
    {
      uint64_t v5 = *a1;
      if (*a1) {
        uint64_t v5 = a1[1];
      }
    }

    else
    {
      uint64_t v5 = 0LL;
    }

    int v13 = 138412290;
    uint64_t v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "stopUSBHostMode: %@", (uint8_t *)&v13, 0xCu);
  }

  if (!a1 || !*a1) {
    return 0LL;
  }
  id v6 = 0LL;
  if (!a2 || !a1[1]) {
    return (uint64_t)v6;
  }
  uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0x13u);
  if (!Feature)
  {
    if (gLogObjects && gNumLogObjects >= 34)
    {
      uint64_t v10 = *(os_log_s **)(gLogObjects + 264);
    }

    else
    {
      uint64_t v10 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      iap2_usbHostMode_StartUSBHostModeHandler_cold_1();
    }
    return 0LL;
  }

  BOOL v8 = (_BYTE *)Feature;
  if ((platform_usb_set_mode(a1[1], 0LL) & 1) == 0)
  {
    if (gLogObjects && gNumLogObjects >= 34)
    {
      int v11 = *(os_log_s **)(gLogObjects + 264);
    }

    else
    {
      int v11 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      iap2_usbHostMode_StopUSBHostModeHandler_cold_5();
    }
    return 0LL;
  }

  if (!*v8) {
    return 1LL;
  }
  id v6 = platform_usb_set_fault_monitoring(a1[1], 0LL);
  if ((v6 & 1) == 0)
  {
    if (gLogObjects && gNumLogObjects >= 34)
    {
      __int128 v9 = *(os_log_s **)(gLogObjects + 264);
    }

    else
    {
      __int128 v9 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      iap2_usbHostMode_StopUSBHostModeHandler_cold_3();
    }
  }

  *BOOL v8 = 0;
  return (uint64_t)v6;
}

CFNumberRef iap2_usbHostMode_USBModeChangeNotification(uint64_t *a1, const __CFDictionary *a2)
{
  if (gLogObjects && gNumLogObjects >= 34)
  {
    __int16 v4 = *(os_log_s **)(gLogObjects + 264);
  }

  else
  {
    __int16 v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1)
    {
      uint64_t v5 = *a1;
      if (*a1) {
        uint64_t v5 = a1[1];
      }
    }

    else
    {
      uint64_t v5 = 0LL;
    }

    *(_DWORD *)buf = 138412546;
    uint64_t v13 = v5;
    __int16 v14 = 2112;
    unsigned int v15 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "USBModeChangeNotification: %@ attributes=%@",  buf,  0x16u);
  }

  uint64_t result = 0LL;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = (const __CFNumber *)CFDictionaryGetValue(a2, @"USBMode");
      unsigned __int8 valuePtr = -1;
      if (result)
      {
        uint64_t result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberCharType, &valuePtr);
        if ((_DWORD)result)
        {
          iAP2MsgInit((uint64_t)(a1 + 15), 32257, a1[24], 0xFFFF, 0LL, 0LL);
          if (gLogObjects && gNumLogObjects >= 34)
          {
            size_t v7 = *(os_log_s **)(gLogObjects + 264);
          }

          else
          {
            size_t v7 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
          {
            uint64_t v8 = a1[1];
            *(_DWORD *)buf = 138412546;
            uint64_t v13 = v8;
            __int16 v14 = 1024;
            LODWORD(v15) = valuePtr;
            _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "USBModeChangeNotification: %@ usbMode=%d",  buf,  0x12u);
          }

          if (valuePtr)
          {
            uint64_t result = 0LL;
            if (valuePtr != 1) {
              return result;
            }
            __int16 v9 = 1;
          }

          else
          {
            __int16 v9 = 0;
          }

          iAP2MsgAddVoidParam((uint64_t)(a1 + 15), 0LL, v9);
          if ((iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15)) & 1) != 0)
          {
            return (const __CFNumber *)1;
          }

          else
          {
            if (gLogObjects && gNumLogObjects >= 34)
            {
              uint64_t v10 = *(os_log_s **)(gLogObjects + 264);
            }

            else
            {
              uint64_t v10 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            uint64_t result = (const __CFNumber *)os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
            if ((_DWORD)result)
            {
              iap2_usbHostMode_USBModeChangeNotification_cold_1();
              return 0LL;
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t _requestAppLaunchHandler(void *a1, uint64_t a2)
{
  uint64_t v2 = 0LL;
  if (!a1 || !a2) {
    return v2;
  }
  if (!*a1) {
    return 0LL;
  }
  if (!*(void *)*a1) {
    return 0LL;
  }
  uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 2u);
  if (!Feature) {
    return 0LL;
  }
  CFRange v46 = (_BYTE *)Feature;
  if (gLogObjects && gNumLogObjects >= 29)
  {
    id v6 = *(os_log_s **)(gLogObjects + 224);
  }

  else
  {
    id v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)int v54 = iAP2MsgGetMsgID(a2);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Received Request App Launch message (0x%04X)!",  buf,  8u);
  }

  int v47 = a1;
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
  if (FirstParam)
  {
    NextParam = (unsigned __int16 *)FirstParam;
    int v48 = 0;
    __int16 v9 = 0LL;
    while (1)
    {
      int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
      uint64_t v11 = gLogObjects;
      int v12 = gNumLogObjects;
      if (gLogObjects) {
        BOOL v13 = gNumLogObjects < 29;
      }
      else {
        BOOL v13 = 1;
      }
      if (v13)
      {
        __int16 v14 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)int v54 = v11;
          *(_WORD *)&v54[8] = 1024;
          int v55 = v12;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          __int16 v14 = (os_log_s *)&_os_log_default;
        }
      }

      else
      {
        __int16 v14 = *(os_log_s **)(gLogObjects + 224);
      }

      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)int v54 = ParamID;
        _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "msgParamID: %d", buf, 8u);
      }

      if (ParamID == 1)
      {
        *(_DWORD *)buf = -1431655766;
        unsigned int DataAsU8 = iAP2MsgGetDataAsU8(NextParam, buf);
        if (*(_DWORD *)buf)
        {
          int v41 = (os_log_s *)logObjectForModule_1(28);
          if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
            _requestAppLaunchHandler_cold_4(a2);
          }
LABEL_82:
          uint64_t v2 = 0LL;
          if (v9) {
            goto LABEL_83;
          }
          return v2;
        }

        if (DataAsU8 <= 1) {
          unsigned int v16 = DataAsU8;
        }
        else {
          unsigned int v16 = 0;
        }
        int v48 = v16;
      }

      else if (ParamID)
      {
        uint64_t v17 = gLogObjects;
        int v18 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 32)
        {
          uint64_t v19 = *(os_log_s **)(gLogObjects + 248);
        }

        else
        {
          uint64_t v19 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)int v54 = v17;
            *(_WORD *)&v54[8] = 1024;
            int v55 = v18;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            uint64_t v19 = (os_log_s *)&_os_log_default;
          }
        }

        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          int MsgID = iAP2MsgGetMsgID(a2);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)int v54 = ParamID;
          *(_WORD *)&v54[4] = 1024;
          *(_DWORD *)&v54[6] = MsgID;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param",  buf,  0xEu);
        }
      }

      else
      {
        *(_DWORD *)buf = -1431655766;
        if (v9) {
          CFRelease(v9);
        }
        __int16 v9 = (__CFString *)iAP2MsgCopyDataAsCFString(NextParam, (BOOL *)buf);
        if (*(_DWORD *)buf)
        {
          int v39 = (os_log_s *)logObjectForModule_1(28);
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
            _requestAppLaunchHandler_cold_3(a2);
          }
          goto LABEL_82;
        }
      }

      NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
      if (!NextParam) {
        goto LABEL_45;
      }
    }
  }

  __int16 v9 = 0LL;
  int v48 = 0;
LABEL_45:
  if (gLogObjects && gNumLogObjects >= 29)
  {
    int v21 = *(os_log_s **)(gLogObjects + 224);
    __int128 v22 = v47;
    int v23 = v48;
  }

  else
  {
    int v21 = (os_log_s *)&_os_log_default;
    __int128 v22 = v47;
    int v23 = v48;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    *(void *)int v54 = v9;
    *(_WORD *)&v54[8] = 1024;
    int v55 = v23;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Request app launch for %@: %{coreacc:iAP2ParamID_RequestAppLaunch_AppLaunchMethod_t}d!",  buf,  0x12u);
  }

  if (!v9)
  {
    int v43 = (os_log_s *)logObjectForModule_1(28);
    uint64_t v2 = 0LL;
    if (!os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT)) {
      return v2;
    }
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "Missing AppBundleID - ignoring message",  buf,  2u);
    return 0LL;
  }

  unsigned int v24 = platform_system_isApplicationInForeground(v9);
  char v25 = v24;
  if (v24)
  {
    if (gLogObjects && gNumLogObjects >= 29)
    {
      char v26 = *(os_log_s **)(gLogObjects + 224);
    }

    else
    {
      char v26 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    int v23 = 1;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)int v54 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "Application already in foreground (%@), launching without dialog...",  buf,  0xCu);
    }
  }

  else if (!v23)
  {
    if (*v46)
    {
      __int16 v44 = (os_log_s *)logObjectForModule_1(28);
      uint64_t v2 = 1LL;
      if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
      {
        uint64_t v45 = v22[1];
        *(_DWORD *)buf = 138412290;
        *(void *)int v54 = v45;
        _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_INFO,  "App Launch dialog is already active, ignoring app launch request for endpoint %@...",  buf,  0xCu);
      }

      goto LABEL_83;
    }

    int v23 = 0;
    _BYTE *v46 = 1;
  }

  CFStringRef v27 = (const __CFArray *)platform_externalAccessory_copyEAProtocolsForEndpointUUID(v22[1]);
  if (v27)
  {
    uint64_t v28 = v27;
    CFIndex Count = CFArrayGetCount(v27);
    if (Count < 1)
    {
      BOOL v32 = 0;
    }

    else
    {
      CFIndex v30 = Count;
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v28, 0LL);
      BOOL v32 = 1;
      if (CFStringCompare(ValueAtIndex, @"com.apple.mfi.launch_notify_previous", 1uLL))
      {
        CFIndex v33 = 1LL;
        do
        {
          CFIndex v34 = v33;
          if (v30 == v33) {
            break;
          }
          CFNumberRef v35 = (const __CFString *)CFArrayGetValueAtIndex(v28, v33);
          CFComparisonResult v36 = CFStringCompare(v35, @"com.apple.mfi.launch_notify_previous", 1uLL);
          CFIndex v33 = v34 + 1;
        }

        while (v36);
        BOOL v32 = v34 < v30;
      }
    }

    CFRelease(v28);
  }

  else
  {
    BOOL v32 = 0;
  }

  uint64_t v37 = (const void *)v22[1];
  if (!v37) {
    goto LABEL_82;
  }
  uint64_t v2 = (uint64_t)CFRetain(v37);
  if (v2)
  {
    CFRetain(v9);
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = ___requestAppLaunchHandler_block_invoke;
    block[3] = &__block_descriptor_tmp_16_1;
    int v50 = v23;
    char v51 = v25;
    BOOL v52 = v32;
    block[4] = v9;
    void block[5] = v2;
    void block[6] = v22;
    dispatch_async(global_queue, block);
    uint64_t v2 = 1LL;
  }

void ___requestAppLaunchHandler_block_invoke(uint64_t a1)
{
  if (platform_system_isAppInstalledWithBundleID(*(void *)(a1 + 32)))
  {
    if (*(_DWORD *)(a1 + 56) == 1)
    {
      unsigned int v2 = platform_system_isLockScreenUIDisplayed();
      if (v2) {
        BOOL v3 = *(_BYTE *)(a1 + 60) == 0;
      }
      else {
        BOOL v3 = 0;
      }
      if (gLogObjects && gNumLogObjects >= 29)
      {
        int v12 = *(os_log_s **)(gLogObjects + 224);
      }

      else
      {
        int v12 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        BOOL v13 = "NO";
        if (v3) {
          __int16 v14 = "YES";
        }
        else {
          __int16 v14 = "NO";
        }
        int v15 = *(unsigned __int8 *)(a1 + 60);
        if (v2) {
          unsigned int v16 = "YES";
        }
        else {
          unsigned int v16 = "NO";
        }
        *(_DWORD *)buf = 136315650;
        int v40 = v14;
        __int16 v41 = 2080;
        CFIndex v42 = v16;
        if (v15) {
          BOOL v13 = "YES";
        }
        __int16 v43 = 2080;
        __int16 v44 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "launchToBackground: %s (lockScreenDisplayed: %s, alreadyInForeground: %s)",  buf,  0x20u);
      }

      if (v3)
      {
        if (gLogObjects && gNumLogObjects >= 29)
        {
          uint64_t v17 = *(os_log_s **)(gLogObjects + 224);
        }

        else
        {
          uint64_t v17 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v29 = *(const char **)(a1 + 32);
          *(_DWORD *)buf = 138412290;
          int v40 = v29;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Launching application to background (without dialog): %@",  buf,  0xCu);
        }

        platform_system_launchApplicationToBackground(*(void **)(a1 + 32));
      }

      else if (!*(_BYTE *)(a1 + 60))
      {
        if (gLogObjects && gNumLogObjects >= 29)
        {
          int v18 = *(os_log_s **)(gLogObjects + 224);
        }

        else
        {
          int v18 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          CFIndex v30 = *(const char **)(a1 + 32);
          int v31 = *(unsigned __int8 *)(a1 + 61);
          *(_DWORD *)buf = 138412546;
          int v40 = v30;
          __int16 v41 = 1024;
          LODWORD(v42) = v31;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Launching application to foreground (without dialog): %@: report primary app?: %{BOOL}d",  buf,  0x12u);
        }

        platform_system_launchApplication(*(void **)(a1 + 32), *(_BYTE *)(a1 + 61));
      }
    }

    else
    {
      EndpointWithUUID = acc_manager_getEndpointWithUUID(*(const void **)(a1 + 40));
      if (EndpointWithUUID)
      {
        uint64_t AccessoryInfo = acc_endpoint_getAccessoryInfo((uint64_t)EndpointWithUUID);
        id v6 = (const void *)platform_system_copyAppNameForBundleID(*(void *)(a1 + 32));
        size_t v7 = (const void *)acc_strings_copyPlaceholder_Unknown();
        CFTypeRef v8 = acc_accInfo_retainedProperty(AccessoryInfo, 1, v7);
        __int16 v9 = (const void *)acc_strings_copyPlaceholder_Unknown();
        CFTypeRef v10 = acc_accInfo_retainedProperty(AccessoryInfo, 0, v9);
        if (v6) {
          CFTypeRef v11 = CFRetain(v6);
        }
        else {
          CFTypeRef v11 = 0LL;
        }
        uint64_t v19 = (__CFBundle *)acc_strings_bundleCF();
        BOOL v20 = CFBundleCopyLocalizedString( v19,  @"%@ would like to communicate with the %@ %@.",  @"%@ would like to communicate with the %@ %@.",  0LL);
        CFStringRef v21 = CFStringCreateWithFormat(kCFAllocatorDefault, 0LL, v20, v6, v8, v10);
        __int128 v22 = (__CFBundle *)acc_strings_bundleCF();
        CFStringRef v23 = CFBundleCopyLocalizedString(v22, @"Allow", @"Allow", 0LL);
        unsigned int v24 = (__CFBundle *)acc_strings_bundleCF();
        CFStringRef v25 = CFBundleCopyLocalizedString(v24, @"Ignore", @"Ignore", 0LL);
        CFStringRef cf = acc_userNotifications_createIdentifier( (uint64_t)@"app-launch",  *(void *)(*(void *)(a1 + 48) + 8LL));
        if (v6)
        {
          CFTypeRef v34 = v8;
          char v26 = ACCUNCreate( 1LL,  (uint64_t)v11,  (uint64_t)v21,  (uint64_t)v23,  (uint64_t)v25,  0LL,  1LL,  (uint64_t)cf,  0.0,  *(void *)(*(void *)(a1 + 48) + 16LL));
          CFRetain(*(CFTypeRef *)(a1 + 32));
          CFRetain(*(CFTypeRef *)(a1 + 40));
          if (gLogObjects && gNumLogObjects >= 29)
          {
            CFStringRef v27 = *(os_log_s **)(gLogObjects + 224);
          }

          else
          {
            CFStringRef v27 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v28 = *(const char **)(a1 + 32);
            *(_DWORD *)buf = 138412290;
            int v40 = v28;
            _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Prompting user to launch application: %@...",  buf,  0xCu);
          }

          v36[0] = _NSConcreteStackBlock;
          v36[1] = 0x40000000LL;
          v36[2] = ___requestAppLaunchHandler_block_invoke_11;
          v36[3] = &__block_descriptor_tmp_15_0;
          char v38 = *(_BYTE *)(a1 + 61);
          __int128 v37 = *(_OWORD *)(a1 + 32);
          ACCUNManagerPresentNotification(v26, v36);
          CFTypeRef v8 = v34;
          if (v26) {
            CFRelease(v26);
          }
        }

        if (v11) {
          CFRelease(v11);
        }
        if (v21) {
          CFRelease(v21);
        }
        if (v20) {
          CFRelease(v20);
        }
        if (v23) {
          CFRelease(v23);
        }
        if (v25) {
          CFRelease(v25);
        }
        if (v6) {
          CFRelease(v6);
        }
        if (v8) {
          CFRelease(v8);
        }
        if (v10) {
          CFRelease(v10);
        }
        if (cf) {
          CFRelease(cf);
        }
      }
    }
  }

  BOOL v32 = *(const void **)(a1 + 32);
  if (v32) {
    CFRelease(v32);
  }
  CFIndex v33 = *(const void **)(a1 + 40);
  if (v33) {
    CFRelease(v33);
  }
}

void ___requestAppLaunchHandler_block_invoke_11(uint64_t a1, int a2)
{
  if (gLogObjects) {
    BOOL v3 = gNumLogObjects <= 28;
  }
  else {
    BOOL v3 = 1;
  }
  int v4 = !v3;
  if (a2)
  {
    if (v4)
    {
      uint64_t v5 = *(os_log_s **)(gLogObjects + 224);
    }

    else
    {
      uint64_t v5 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v18 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "User did not approve app launch for %@ - ignoring",  buf,  0xCu);
    }
  }

  else
  {
    if (v4)
    {
      id v6 = *(os_log_s **)(gLogObjects + 224);
    }

    else
    {
      id v6 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = *(unsigned __int8 *)(a1 + 48);
      *(_DWORD *)buf = 138412546;
      uint64_t v18 = v8;
      __int16 v19 = 1024;
      int v20 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Launching application to foreground (user approved): %@; report primary app?: %{BOOL}d",
        buf,
        0x12u);
    }

    platform_system_launchApplication(*(void **)(a1 + 32), *(_BYTE *)(a1 + 48));
  }

  EndpointWithUUID = acc_manager_getEndpointWithUUID(*(const void **)(a1 + 40));
  if (EndpointWithUUID)
  {
    CFTypeRef v11 = EndpointWithUUID;
    if (acc_endpoint_getProtocol((uint64_t)EndpointWithUUID) == 4)
    {
      uint64_t v12 = v11[7];
      if (v12)
      {
        BOOL v13 = *(dispatch_queue_s **)(v12 + 24);
        block[0] = _NSConcreteStackBlock;
        block[1] = 0x40000000LL;
        block[2] = ___requestAppLaunchHandler_block_invoke_12;
        block[3] = &__block_descriptor_tmp_11;
        block[4] = v12;
        dispatch_sync(v13, block);
      }
    }
  }

  __int16 v14 = *(const void **)(a1 + 32);
  if (v14) {
    CFRelease(v14);
  }
  int v15 = *(const void **)(a1 + 40);
  if (v15) {
    CFRelease(v15);
  }
}

_BYTE *___requestAppLaunchHandler_block_invoke_12(uint64_t a1)
{
  uint64_t result = (_BYTE *)iap2_feature_getFeature(*(void *)(a1 + 32), 2u);
  if (result) {
    *uint64_t result = 0;
  }
  return result;
}

_BYTE *_createFeature_16(_BYTE *result)
{
  if (result)
  {
    uint64_t result = calloc(1uLL, 1uLL);
    if (result) {
      *uint64_t result = 0;
    }
  }

  return result;
}

BOOL _destroyFeature_16(void **a1)
{
  if (a1)
  {
    unsigned int v2 = *a1;
    if (*a1)
    {
      free(v2);
      *a1 = 0LL;
    }
  }

  return a1 != 0LL;
}

uint64_t _checkIdentificationInfo_14(uint64_t a1)
{
  char v6 = 0;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&_checkIdentificationInfo_kMsgTestList_0, 1u, &v6);
  uint64_t v3 = v2;
  if (v6) {
    BOOL v4 = (_DWORD)v2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    iap2_identification_setIdentifiedForFeature(a1, 2u);
  }
  return v3;
}

void *accSNTPTimeSync_endpoint_create(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = calloc(1uLL, 0x20uLL);
    if (v2)
    {
      dispatch_queue_t v3 = dispatch_queue_create("ACCSNTPTimeSyncQ", 0LL);
      v2[3] = v3;
      if (v3)
      {
        void *v2 = a1;
        _accSNTPTimeSync_endpoint_initSession((uint64_t)v2);
        DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
        CFNotificationCenterAddObserver( DarwinNotifyCenter,  0LL,  (CFNotificationCallback)platform_timeSync_getAccessoryTime,  @"com.apple.coreaccessories.ACCTimeSyncTest",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
        platform_timeSync_startServer();
      }
    }
  }

  else
  {
    char v6 = (os_log_s *)logObjectForModule_21();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      accSNTPTimeSync_endpoint_create_cold_1(v6);
    }
    return 0LL;
  }

  return v2;
}

void *logObjectForModule_21()
{
  if (gLogObjects && gNumLogObjects >= 59) {
    return *(void **)(gLogObjects + 464);
  }
  BOOL v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

uint64_t _accSNTPTimeSync_endpoint_initSession(uint64_t a1)
{
  *(CFAbsoluteTime *)(a1 + 16) = CFAbsoluteTimeGetCurrent();
  if (gLogObjects && gNumLogObjects >= 59)
  {
    uint64_t v1 = *(os_log_s **)(gLogObjects + 464);
  }

  else
  {
    uint64_t v1 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)dispatch_queue_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "SNTP Time Sync  initSession complete ", v3, 2u);
  }

  return 1LL;
}

uint64_t accSNTPTimeSync_endpoint_publish(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (BOOL *)result;
    uint64_t result = *(void *)result;
    if (result)
    {
      int Protocol = acc_endpoint_getProtocol(result);
      if (gLogObjects && gNumLogObjects >= 59)
      {
        dispatch_queue_t v3 = *(os_log_s **)(gLogObjects + 464);
      }

      else
      {
        dispatch_queue_t v3 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        int v4 = *(_DWORD *)(*v1 + 24);
        v5[0] = 67109120;
        v5[1] = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "accSNTPTimeSync publish: transportType %{coreacc:ACCEndpoint_TransportType_t}d ",  (uint8_t *)v5,  8u);
      }

      if (Protocol == 15)
      {
        if (acc_endpoint_isPublished(*v1))
        {
          _accSNTPTimeSync_endpoint_cleanupSession();
          _accSNTPTimeSync_endpoint_initSession((uint64_t)v1);
        }

        return 1LL;
      }

      else
      {
        return 0LL;
      }
    }
  }

  return result;
}

void _accSNTPTimeSync_endpoint_cleanupSession()
{
  if (gLogObjects && gNumLogObjects >= 59)
  {
    BOOL v0 = *(os_log_s **)(gLogObjects + 464);
  }

  else
  {
    BOOL v0 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_DEFAULT,  "SNTP Time Sync  cleanupSession - no session data to cleanup at the moment. ",  v1,  2u);
  }

uint64_t accSNTPTimeSync_endpoint_destroy(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void **)result;
    if (*(void *)result)
    {
      _accSNTPTimeSync_endpoint_cleanupSession();
      dispatch_sync(*((dispatch_queue_t *)*v1 + 3), &__block_literal_global_20);
      dispatch_release(*((dispatch_object_t *)*v1 + 3));
      *((void *)*v1 + 3) = 0LL;
      if (*v1)
      {
        free(*v1);
        BOOL *v1 = 0LL;
      }

      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t accSNTPTimeSync_endpoint_processIncomingData(uint64_t result, CFTypeRef cf)
{
  if (result)
  {
    dispatch_queue_t v3 = (void *)result;
    uint64_t result = 0LL;
    if (cf)
    {
      if (*v3)
      {
        CFRetain(cf);
        int v4 = (dispatch_queue_s *)v3[3];
        v5[0] = _NSConcreteStackBlock;
        v5[1] = 0x40000000LL;
        _DWORD v5[2] = __accSNTPTimeSync_endpoint_processIncomingData_block_invoke;
        v5[3] = &__block_descriptor_tmp_3_1;
        v5[4] = v3;
        v5[5] = cf;
        dispatch_async(v4, v5);
        return 1LL;
      }
    }
  }

  return result;
}

void __accSNTPTimeSync_endpoint_processIncomingData_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t _accSNTPTimeSync_endpoint_processIncomingData(uint64_t result, CFDataRef theData)
{
  if (!result) {
    return result;
  }
  dispatch_queue_t v3 = (void *)result;
  uint64_t result = 0LL;
  if (!theData || !*v3) {
    return result;
  }
  if (!*(void *)*v3) {
    return 0LL;
  }
  BytePtr = CFDataGetBytePtr(theData);
  CFIndex Length = CFDataGetLength(theData);
  if (!BytePtr)
  {
    uint64_t v7 = (os_log_s *)logObjectForModule_21();
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0LL;
    if (!v8) {
      return result;
    }
    *(_WORD *)int v9 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Could not get data ptr from dataIn object!",  v9,  2u);
    return 0LL;
  }

  if (Length != 48) {
    return 0LL;
  }
  if (gLogObjects && gNumLogObjects >= 59)
  {
    char v6 = *(os_log_s **)(gLogObjects + 464);
  }

  else
  {
    char v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    _accSNTPTimeSync_endpoint_processIncomingData_cold_1((uint64_t)v3, (uint64_t)theData, v6);
  }
  platform_timeSync_setSystemTime((uint64_t)theData);
  return 1LL;
}

uint64_t accSNTPTimeSync_endpoint_getAccessoryTime(void *a1, __int128 *a2)
{
  if (!a1 || (uint64_t v2 = (uint64_t *)a1, !*(void *)a1))
  {
LABEL_10:
    CFRelease(a1);
    return 0LL;
  }

  int v4 = (char *)calloc(1uLL, 0x32uLL);
  if (!v4)
  {
    uint64_t v12 = (os_log_s *)logObjectForModule_21();
    a1 = (void *)os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)a1)
    {
      int v13 = 136315138;
      __int16 v14 = "accSNTPTimeSync_endpoint_getAccessoryTime";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%s calloc failed.", (uint8_t *)&v13, 0xCu);
    }

    goto LABEL_10;
  }

  uint64_t v5 = (UInt8 *)v4;
  *(_WORD *)int v4 = 12289;
  __int128 v6 = *a2;
  __int128 v7 = a2[1];
  *(_OWORD *)(v4 + 34) = a2[2];
  *(_OWORD *)(v4 + 1_Block_object_dispose(va, 8) = v7;
  *(_OWORD *)(v4 + 2) = v6;
  CFMutableDataRef Mutable = CFDataCreateMutable(kCFAllocatorDefault, 50LL);
  if (Mutable)
  {
    int v9 = Mutable;
    CFDataAppendBytes(Mutable, v5, 50LL);
    uint64_t v10 = accSNTPTimeSync_endpoint_sendOutgoingData(v2, v9);
    CFRelease(v9);
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  free(v5);
  return v10;
}

uint64_t accSNTPTimeSync_endpoint_sendOutgoingData(uint64_t *a1, void *a2)
{
  if (!a1) {
    return 0LL;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0LL;
  }
  acc_platform_packetLogging_logSNTPTimeSyncMsg(*a1, a2, 0);
  return acc_endpoint_sendOutgoingData(v3, (const __CFData *)a2);
}

uint64_t accSNTPTimeSync_endpoint_sendAccessoryTime(void *a1, __int128 *a2)
{
  if (!a1 || (uint64_t v2 = (uint64_t *)a1, !*(void *)a1))
  {
LABEL_10:
    CFRelease(a1);
    return 0LL;
  }

  int v4 = (char *)calloc(1uLL, 0x32uLL);
  if (!v4)
  {
    uint64_t v12 = (os_log_s *)logObjectForModule_21();
    a1 = (void *)os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)a1)
    {
      int v13 = 136315138;
      __int16 v14 = "accSNTPTimeSync_endpoint_sendAccessoryTime";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%s calloc failed.", (uint8_t *)&v13, 0xCu);
    }

    goto LABEL_10;
  }

  uint64_t v5 = (UInt8 *)v4;
  *(_WORD *)int v4 = 12291;
  __int128 v6 = *a2;
  __int128 v7 = a2[1];
  *(_OWORD *)(v4 + 34) = a2[2];
  *(_OWORD *)(v4 + 1_Block_object_dispose(va, 8) = v7;
  *(_OWORD *)(v4 + 2) = v6;
  CFMutableDataRef Mutable = CFDataCreateMutable(kCFAllocatorDefault, 50LL);
  if (Mutable)
  {
    int v9 = Mutable;
    CFDataAppendBytes(Mutable, v5, 50LL);
    uint64_t v10 = accSNTPTimeSync_endpoint_sendOutgoingData(v2, v9);
    CFRelease(v9);
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  free(v5);
  return v10;
}

void sub_1000B8EB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id location, id a22)
{
}

ACCUserNotification *ACCUNCreate( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10)
{
  __int16 v19 = objc_alloc_init(&OBJC_CLASS___ACCUserNotification);
  -[ACCUserNotification setType:](v19, "setType:", a1);
  -[ACCUserNotification setTitle:](v19, "setTitle:", a2);
  -[ACCUserNotification setMessage:](v19, "setMessage:", a3);
  -[ACCUserNotification setDefaultButtonName:](v19, "setDefaultButtonName:", a4);
  -[ACCUserNotification setOtherButtonName:](v19, "setOtherButtonName:", a5);
  -[ACCUserNotification setIconURL:](v19, "setIconURL:", a6);
  -[ACCUserNotification setIsModal:](v19, "setIsModal:", a7);
  -[ACCUserNotification setTimeout:](v19, "setTimeout:", a9);
  -[ACCUserNotification setIdentifier:](v19, "setIdentifier:", a8);
  -[ACCUserNotification setGroupIdentifier:](v19, "setGroupIdentifier:", a10);
  return v19;
}

BOOL ACCUNSetIdentifier(void *a1, uint64_t a2)
{
  if (a1) {
    [a1 setIdentifier:a2];
  }
  return a1 != 0LL;
}

BOOL ACCUNSetGroupIdentifier(void *a1, uint64_t a2)
{
  if (a1) {
    [a1 setGroupIdentifier:a2];
  }
  return a1 != 0LL;
}

id _getWiFiSharingPluginInstance()
{
  BOOL v0 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformPluginManager sharedManager](&OBJC_CLASS___ACCPlatformPluginManager, "sharedManager"));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( [v0 pluginInstanceWithProtocol:&OBJC_PROTOCOL___ACCPlatformWiFiSharingProtocol fallbackToTransportPlugins:0]);

  return v1;
}

uint64_t platform_wifisharing_request_device_wifi_information(const void *a1)
{
  int isDeviceLocked = platform_system_isDeviceLocked();
  if (!isDeviceLocked)
  {
    id WiFiSharingPluginInstance = _getWiFiSharingPluginInstance();
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(WiFiSharingPluginInstance);
    id v13 = v12;
    if (!v12)
    {
LABEL_78:

      return isDeviceLocked ^ 1u;
    }

    if ([v12 isDeviceConnectedToWiFi])
    {
      int v14 = iAP2MsgPreSendCtlProcess();
      int v15 = (__CFBundle *)acc_strings_bundleCF();
      if (v14) {
        unsigned int v16 = @"Share WLAN Settings?";
      }
      else {
        unsigned int v16 = @"Share Wi-Fi Settings?";
      }
      CFStringRef v38 = CFBundleCopyLocalizedString(v15, v16, v16, 0LL);
      int v39 = iAP2MsgPreSendCtlProcess();
      int v40 = (__CFBundle *)acc_strings_bundleCF();
      if (v39) {
        __int16 v41 = @"Do you want to share your WLAN settings so this accessory can connect to the WLAN network?";
      }
      else {
        __int16 v41 = @"Do you want to share your Wi-Fi settings so this accessory can connect to the Wi-Fi network?";
      }
      CFStringRef v42 = CFBundleCopyLocalizedString(v40, v41, v41, 0LL);
      __int16 v43 = (__CFBundle *)acc_strings_bundleCF();
      CFStringRef v44 = CFBundleCopyLocalizedString(v43, @"Allow", @"Allow", 0LL);
      uint64_t v45 = (__CFBundle *)acc_strings_bundleCF();
      CFStringRef v46 = CFBundleCopyLocalizedString(v45, @"Ignore", @"Ignore", 0LL);
      CFStringRef Identifier = acc_userNotifications_createIdentifier((uint64_t)@"wifi-sharing-share", (uint64_t)a1);
      EndpointWithUUID = (uint64_t **)acc_manager_getEndpointWithUUID(a1);
      CFStringRef v49 = ACCUNCreate( 1LL,  (uint64_t)v38,  (uint64_t)v42,  (uint64_t)v44,  (uint64_t)v46,  0LL,  1LL,  (uint64_t)Identifier,  0.0,  **EndpointWithUUID);
      CFRetain(a1);
      int v71 = _NSConcreteStackBlock;
      uint64_t v72 = 3221225472LL;
      uint64_t v73 = ___presentShareWiFiCredentialsNotification_block_invoke;
      uint64_t v74 = &__block_descriptor_40_e8_v12__0i8l;
      char v75 = a1;
      ACCUNManagerPresentNotification(v49, &v71);
      if (v49) {
        CFRelease(v49);
      }
      if (v38) {
        CFRelease(v38);
      }
      if (v42) {
        CFRelease(v42);
      }
      if (v44) {
        CFRelease(v44);
      }
      if (!v46) {
        goto LABEL_70;
      }
      CFStringRef v50 = v46;
    }

    else
    {
      uint64_t v26 = systemInfo_copyDeviceClass();
      if (!v26)
      {
        if (gLogObjects && gNumLogObjects >= 8)
        {
          char v51 = (os_log_s *)*(id *)(gLogObjects + 56);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          char v51 = (os_log_s *)&_os_log_default;
          id v62 = &_os_log_default;
        }

        if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
          platform_wifisharing_request_device_wifi_information_cold_3(v51, v63, v64, v65, v66, v67, v68, v69);
        }

        goto LABEL_78;
      }

      CFStringRef v27 = (const __CFString *)v26;
      int v28 = iAP2MsgPreSendCtlProcess();
      __int16 v29 = (__CFBundle *)acc_strings_bundleCF();
      if (v28) {
        CFIndex v30 = @"Connect to WLAN";
      }
      else {
        CFIndex v30 = @"Connect to Wi-Fi";
      }
      CFStringRef v52 = CFBundleCopyLocalizedString(v29, v30, v30, 0LL);
      int v53 = iAP2MsgPreSendCtlProcess();
      int v54 = (__CFBundle *)acc_strings_bundleCF();
      if (v53) {
        int v55 = @"This accessory would like to use a WLAN network. Connect this %@ to WLAN if you want to share WLAN settings with this accessory.";
      }
      else {
        int v55 = @"This accessory would like to use a Wi-Fi network. Connect this %@ to Wi-Fi if you want to share Wi-Fi settings with this accessory.";
      }
      int v56 = CFBundleCopyLocalizedString(v54, v55, v55, 0LL);
      CFStringRef v57 = CFStringCreateWithFormat(kCFAllocatorDefault, 0LL, v56, v27);
      int v58 = (__CFBundle *)acc_strings_bundleCF();
      CFStringRef v59 = CFBundleCopyLocalizedString(v58, @"OK", @"OK", 0LL);
      CFStringRef Identifier = acc_userNotifications_createIdentifier((uint64_t)@"wifi-sharing-connect", (uint64_t)a1);
      unsigned int v60 = (uint64_t **)acc_manager_getEndpointWithUUID(a1);
      __int16 v61 = ACCUNCreate(1LL, (uint64_t)v52, (uint64_t)v57, (uint64_t)v59, 0LL, 0LL, 1LL, (uint64_t)Identifier, 0.0, **v60);
      CFRetain(a1);
      int v71 = _NSConcreteStackBlock;
      uint64_t v72 = 3221225472LL;
      uint64_t v73 = ___presentConnectToWiFiNotification_block_invoke;
      uint64_t v74 = &__block_descriptor_40_e8_v12__0i8l;
      char v75 = a1;
      ACCUNManagerPresentNotification(v61, &v71);
      if (v61) {
        CFRelease(v61);
      }
      if (v52) {
        CFRelease(v52);
      }
      if (v57) {
        CFRelease(v57);
      }
      if (v56) {
        CFRelease(v56);
      }
      if (v59) {
        CFRelease(v59);
      }
      CFStringRef v50 = v27;
    }

    CFRelease(v50);
LABEL_70:
    if (Identifier) {
      CFRelease(Identifier);
    }
    goto LABEL_78;
  }

  uint64_t v3 = systemInfo_copyDeviceClass();
  if (!v3)
  {
    if (gLogObjects) {
      BOOL v17 = gNumLogObjects < 8;
    }
    else {
      BOOL v17 = 1;
    }
    if (v17)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v13 = &_os_log_default;
      id v18 = &_os_log_default;
    }

    else
    {
      id v13 = *(id *)(gLogObjects + 56);
    }

    if (os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_ERROR)) {
      platform_wifisharing_request_device_wifi_information_cold_1((os_log_s *)v13, v31, v32, v33, v34, v35, v36, v37);
    }
    goto LABEL_78;
  }

  int v4 = (const void *)v3;
  uint64_t v5 = (__CFBundle *)acc_strings_bundleCF();
  __int128 v6 = CFBundleCopyLocalizedString(v5, @"%@ is Locked", @"%@ is Locked", 0LL);
  CFStringRef v7 = CFStringCreateWithFormat(kCFAllocatorDefault, 0LL, v6, v4);
  int v8 = iAP2MsgPreSendCtlProcess();
  int v9 = (__CFBundle *)acc_strings_bundleCF();
  if (v8) {
    uint64_t v10 = @"This accessory would like to use the WLAN network. Unlock your %@ to configure WLAN settings.";
  }
  else {
    uint64_t v10 = @"This accessory would like to use the Wi-Fi network. Unlock your %@ to configure Wi-Fi settings.";
  }
  __int16 v19 = CFBundleCopyLocalizedString(v9, v10, v10, 0LL);
  CFStringRef v20 = CFStringCreateWithFormat(kCFAllocatorDefault, 0LL, v19, v4);
  CFStringRef v21 = (__CFBundle *)acc_strings_bundleCF();
  CFStringRef v22 = CFBundleCopyLocalizedString(v21, @"OK", @"OK", 0LL);
  CFStringRef v23 = acc_userNotifications_createIdentifier((uint64_t)@"wifi-sharing-unlock", (uint64_t)a1);
  unsigned int v24 = (uint64_t **)acc_manager_getEndpointWithUUID(a1);
  CFStringRef v25 = ACCUNCreate(1LL, (uint64_t)v7, (uint64_t)v20, (uint64_t)v22, 0LL, 0LL, 1LL, (uint64_t)v23, 0.0, **v24);
  CFRetain(a1);
  int v71 = _NSConcreteStackBlock;
  uint64_t v72 = 3221225472LL;
  uint64_t v73 = ___presentUnlockForWiFiSharingNotification_block_invoke;
  uint64_t v74 = &__block_descriptor_40_e8_v12__0i8l;
  char v75 = a1;
  ACCUNManagerPresentNotification(v25, &v71);
  if (v25) {
    CFRelease(v25);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (v22) {
    CFRelease(v22);
  }
  CFRelease(v4);
  if (v23) {
    CFRelease(v23);
  }
  return isDeviceLocked ^ 1u;
}

id platform_wifisharing_accessory_wifi_configuration_information( NSMutableDictionary *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  id WiFiSharingPluginInstance = _getWiFiSharingPluginInstance();
  int v15 = (void *)objc_claimAutoreleasedReturnValue(WiFiSharingPluginInstance);
  if (gLogObjects) {
    BOOL v16 = gNumLogObjects < 7;
  }
  else {
    BOOL v16 = 1;
  }
  if (v16)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v18 = (os_log_s *)&_os_log_default;
    id v17 = &_os_log_default;
  }

  else
  {
    id v18 = (os_log_s *)*(id *)(gLogObjects + 48);
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    int v31 = 138413826;
    uint64_t v32 = a1;
    __int16 v33 = 2112;
    uint64_t v34 = a2;
    __int16 v35 = 2112;
    uint64_t v36 = a3;
    __int16 v37 = 2112;
    uint64_t v38 = a4;
    __int16 v39 = 2112;
    uint64_t v40 = a5;
    __int16 v41 = 2112;
    uint64_t v42 = a6;
    __int16 v43 = 1024;
    int v44 = a7;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "wifi config info: %@, BSSID=%@ SSID=%@ Passphrase=%@ securityType=%@ channel=%@ supportsWirelessCarPlay=%d",  (uint8_t *)&v31,  0x44u);
  }

  if (v15)
  {
    __int16 v19 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    CFStringRef v20 = v19;
    if (a2) {
      -[NSMutableDictionary setObject:forKey:]( v19,  "setObject:forKey:",  a2,  kCFWiFiSharing_WiFiNetworkInformationWifiBSSID);
    }
    if (a3) {
      -[NSMutableDictionary setObject:forKey:]( v20,  "setObject:forKey:",  a3,  kCFWiFiSharing_WiFiNetworkInformationWifiSSID);
    }
    if (a4) {
      -[NSMutableDictionary setObject:forKey:]( v20,  "setObject:forKey:",  a4,  kCFWiFiSharing_WiFiNetworkInformationWifiPassphrase);
    }
    if (a5) {
      -[NSMutableDictionary setObject:forKey:]( v20,  "setObject:forKey:",  a5,  kCFWiFiSharing_WiFiNetworkInformationSecurityType);
    }
    if (a6) {
      -[NSMutableDictionary setObject:forKey:]( v20,  "setObject:forKey:",  a6,  kCFWiFiSharing_WiFiNetworkInformationChannel);
    }
    if (gLogObjects && gNumLogObjects >= 7)
    {
      CFStringRef v21 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      CFStringRef v21 = (os_log_s *)&_os_log_default;
      id v23 = &_os_log_default;
    }

    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      int v31 = 138412546;
      uint64_t v32 = v20;
      __int16 v33 = 1024;
      LODWORD(v34) = a7;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Accessory WiFi Config Information %@, supportsWirelessCarPlay = %d",  (uint8_t *)&v31,  0x12u);
    }

    if (!a7)
    {
      if (gLogObjects && gNumLogObjects >= 7)
      {
        int v28 = (os_log_s *)*(id *)(gLogObjects + 48);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        int v28 = (os_log_s *)&_os_log_default;
        id v29 = &_os_log_default;
      }

      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v31) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Accessory WiFi Config Information only supported for CarPlay!!!",  (uint8_t *)&v31,  2u);
      }

      id v22 = 0LL;
      goto LABEL_46;
    }

    unsigned int v24 = acc_manager_copyConnectionUUIDForEndpointUUID(a1);
    ConnectionWithUUID = acc_manager_getConnectionWithUUID(v24);
    if (acc_connection_getType((uint64_t)ConnectionWithUUID) == 2)
    {
      uint64_t v26 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  platform_externalAccesory_legacyConnectionUUIDForPrimaryEndpointUUID(a1));
      CFStringRef v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
      -[NSMutableDictionary setObject:forKey:]( v20,  "setObject:forKey:",  v27,  kCFWiFiSharing_LegacyAccessoryExternalAccessoryConnectionID);

      id v22 = [v15 handleAccessoryWiFiInformationForWirelessCarPlay:v20];
      if (!v24) {
        goto LABEL_46;
      }
    }

    else
    {
      id v22 = 0LL;
      if (!v24)
      {
LABEL_46:

        goto LABEL_47;
      }
    }

    CFRelease(v24);
    goto LABEL_46;
  }

  id v22 = 0LL;
LABEL_47:

  return v22;
}

void platform_wifisharing_request_accessory_wifi_information(const void *a1)
{
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  uint64_t v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = __platform_wifisharing_request_accessory_wifi_information_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  dispatch_async(v3, block);
}

void __platform_wifisharing_request_accessory_wifi_information_block_invoke(uint64_t a1)
{
}

void ___presentUnlockForWiFiSharingNotification_block_invoke(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 8;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v4 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  else
  {
    int v4 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "User dismissed Unlock for WiFi sharing - ignoring",  v6,  2u);
  }

  uint64_t v5 = *(const void **)(a1 + 32);
  if (v5) {
    CFRelease(v5);
  }
}

void ___presentConnectToWiFiNotification_block_invoke(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 8;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v4 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  else
  {
    int v4 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Dismissed Connect to WiFi for WiFi Sharing alert",  v6,  2u);
  }

  uint64_t v5 = *(const void **)(a1 + 32);
  if (v5) {
    CFRelease(v5);
  }
}

void ___presentShareWiFiCredentialsNotification_block_invoke(uint64_t a1, int a2)
{
  if (gLogObjects) {
    BOOL v3 = gNumLogObjects <= 7;
  }
  else {
    BOOL v3 = 1;
  }
  int v4 = !v3;
  if (a2)
  {
    if (v4)
    {
      uint64_t v5 = (os_log_s *)*(id *)(gLogObjects + 56);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v5 = (os_log_s *)&_os_log_default;
      id v7 = &_os_log_default;
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "User did not approve wifi sharing", buf, 2u);
    }

    uint64_t v61 = kCFWiFiSharing_WiFiNetworkInformationStatus;
    int v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 1LL));
    id v62 = v8;
    int v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v62,  &v61,  1LL));

    if (gLogObjects && gNumLogObjects >= 8)
    {
      uint64_t v10 = (os_log_s *)*(id *)(gLogObjects + 56);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v10 = (os_log_s *)&_os_log_default;
      id v11 = &_os_log_default;
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      ___presentShareWiFiCredentialsNotification_block_invoke_cold_4((uint64_t)v9, v10, v12, v13, v14, v15, v16, v17);
    }

    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    __int16 v19 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = ___presentShareWiFiCredentialsNotification_block_invoke_86;
    block[3] = &unk_1001FC658;
    uint64_t v20 = *(void *)(a1 + 32);
    id v52 = v9;
    uint64_t v53 = v20;
    id v21 = v9;
    dispatch_async(v19, block);
  }

  else
  {
    if (v4)
    {
      __int128 v6 = (os_log_s *)*(id *)(gLogObjects + 56);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int128 v6 = (os_log_s *)&_os_log_default;
      id v22 = &_os_log_default;
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Sharing WiFi credentials with accessory...",  buf,  2u);
    }

    id v23 = *(const void **)(a1 + 32);
    id WiFiSharingPluginInstance = _getWiFiSharingPluginInstance();
    CFStringRef v25 = (void *)objc_claimAutoreleasedReturnValue(WiFiSharingPluginInstance);
    id v21 = v25;
    if (v25)
    {
      id v26 = [v25 copyDeviceWiFiNetworkInformation];
      if (gLogObjects && gNumLogObjects >= 8)
      {
        CFStringRef v27 = (os_log_s *)*(id *)(gLogObjects + 56);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        CFStringRef v27 = (os_log_s *)&_os_log_default;
        id v28 = &_os_log_default;
      }

      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG)) {
        ___presentShareWiFiCredentialsNotification_block_invoke_cold_1((uint64_t)v26, v27, v29, v30, v31, v32, v33, v34);
      }

      CFRetain(v23);
      dispatch_queue_global_t v35 = dispatch_get_global_queue(0LL, 0LL);
      uint64_t v36 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v35);
      *(void *)buf = _NSConcreteStackBlock;
      uint64_t v55 = 3221225472LL;
      int v56 = ___handleDeviceWiFiConfigurationInformation_block_invoke;
      CFStringRef v57 = &unk_1001FC658;
      CFStringRef v59 = v23;
      id v37 = v26;
      id v58 = v37;
      dispatch_async(v36, buf);

      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v37 objectForKey:kCFWiFiSharing_WiFiNetworkInformationStatus]);
      if ([v38 unsignedIntValue] == 2)
      {
        int v39 = iAP2MsgPreSendCtlProcess();
        uint64_t v40 = (__CFBundle *)acc_strings_bundleCF();
        if (v39) {
          __int16 v41 = @"WLAN Settings";
        }
        else {
          __int16 v41 = @"Wi-Fi Settings";
        }
        CFStringRef v42 = CFBundleCopyLocalizedString(v40, v41, v41, 0LL);
        __int16 v43 = (__CFBundle *)acc_strings_bundleCF();
        CFStringRef v44 = CFBundleCopyLocalizedString( v43,  @"This network’s settings are not available for sharing with accessories.",  @"This network’s settings are not available for sharing with accessories.",  0LL);
        uint64_t v45 = (__CFBundle *)acc_strings_bundleCF();
        CFStringRef v46 = CFBundleCopyLocalizedString(v45, @"OK", @"OK", 0LL);
        CFStringRef Identifier = acc_userNotifications_createIdentifier((uint64_t)@"wifi-sharing-unavailable", (uint64_t)v23);
        EndpointWithUUID = (uint64_t **)acc_manager_getEndpointWithUUID(v23);
        CFStringRef v49 = ACCUNCreate( 1LL,  (uint64_t)v42,  (uint64_t)v44,  (uint64_t)v46,  0LL,  0LL,  1LL,  (uint64_t)Identifier,  0.0,  **EndpointWithUUID);
        CFRetain(v23);
        v60[0] = _NSConcreteStackBlock;
        v60[1] = 3221225472LL;
        v60[2] = ___presentWiFiSharingUnavailableNotification_block_invoke;
        v60[3] = &__block_descriptor_40_e8_v12__0i8l;
        v60[4] = v23;
        ACCUNManagerPresentNotification(v49, v60);
        if (v49) {
          CFRelease(v49);
        }
        if (v42) {
          CFRelease(v42);
        }
        if (v44) {
          CFRelease(v44);
        }
        if (v46) {
          CFRelease(v46);
        }
        if (Identifier) {
          CFRelease(Identifier);
        }
      }
    }
  }

  CFStringRef v50 = *(const void **)(a1 + 32);
  if (v50) {
    CFRelease(v50);
  }
}

uint64_t ___presentShareWiFiCredentialsNotification_block_invoke_86(uint64_t a1)
{
  return accFeatureHandlers_invokeHandler(*(const void **)(a1 + 40), 24, *(void *)(a1 + 32));
}

void ___handleDeviceWiFiConfigurationInformation_block_invoke(uint64_t a1)
{
  BOOL v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
}

void ___presentWiFiSharingUnavailableNotification_block_invoke(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 8;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v4 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  else
  {
    int v4 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Dismissed WiFi unavailable alert", v6, 2u);
  }

  uint64_t v5 = *(const void **)(a1 + 32);
  if (v5) {
    CFRelease(v5);
  }
}

uint64_t iAP2ListArrayGetBuffSize(int a1, char a2)
{
  return ((a2 + 2) * a1 + 11) & 0x1FFFC;
}

uint64_t iAP2ListArrayInit(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v3 = 0xFFFFFFFFLL;
  if (a2 && a3 <= 0xFD)
  {
    uint64_t v4 = 0LL;
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 1) = a2;
    *(_WORD *)(a1 + 2) = -1;
    *(_BYTE *)(a1 + 4) = 0;
    *(_BYTE *)(a1 + 5) = a3;
    *(_WORD *)(a1 + 6) = 0;
    uint64_t v5 = a3 + 2LL;
    __int128 v6 = (_BYTE *)(a1 + 9);
    do
    {
      *(v6 - 1) = v4 + 1;
      _BYTE *v6 = v4 - 1;
      v6 += v5;
      ++v4;
    }

    while (a2 != v4);
    uint64_t v3 = 0LL;
    *(_BYTE *)(a1 + 9) = -1;
    *(_BYTE *)(a1 + 8 + v5 * (unint64_t)(a2 - 1)) = -1;
  }

  return v3;
}

_BYTE *iAP2ListArrayCleanup(_BYTE *result, void (*a2)(unsigned __int8 *))
{
  if (result && a2)
  {
    uint64_t v3 = (uint64_t)result;
    int v4 = result[1];
    unsigned int v5 = result[5];
    if (*result)
    {
      for (unsigned int i = result[2]; i != 255; unsigned int i = *v7)
      {
        id v7 = (unsigned __int8 *)(v3 + 8 + (*(unsigned __int8 *)(v3 + 5) + 2) * (unint64_t)i);
        a2(v7 + 2);
      }
    }

    return (_BYTE *)iAP2ListArrayInit(v3, v4, v5);
  }

  return result;
}

uint64_t iAP2ListArrayFindItem( _BYTE *a1, uint64_t a2, uint64_t (*a3)(unsigned __int8 *, uint64_t, uint64_t))
{
  LOBYTE(v3) = -1;
  if (a2 && a1 && a3 && *a1 && a1[2] != 255)
  {
    uint64_t v7 = a1[5];
    unsigned int v3 = a1[2];
    do
    {
      int v8 = &a1[(a1[5] + 2) * (unint64_t)v3 + 8];
      if (!a3(v8 + 2, a2, v7)) {
        break;
      }
      unsigned int v3 = *v8;
    }

    while (v3 != 255);
  }

  return v3;
}

unint64_t iAP2ListArrayItemForIndex(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = 0LL;
  if (a1 && a2 != 255)
  {
    else {
      return a1 + (*(unsigned __int8 *)(a1 + 5) + 2) * (unint64_t)a2 + 10;
    }
  }

  return v2;
}

unsigned __int8 *iAP2ListArrayGetCount(unsigned __int8 *result)
{
  if (result) {
    return (unsigned __int8 *)*result;
  }
  return result;
}

uint64_t iAP2ListArrayGetAvailSpace(_BYTE *a1)
{
  if (a1) {
    return (a1[1] - *a1);
  }
  else {
    return 0;
  }
}

uint64_t iAP2ListArrayGetFirstItemIndex(uint64_t a1)
{
  if (a1) {
    return *(unsigned __int8 *)(a1 + 2);
  }
  else {
    return 255LL;
  }
}

uint64_t iAP2ListArrayGetLastItemIndex(uint64_t a1)
{
  if (a1) {
    return *(unsigned __int8 *)(a1 + 3);
  }
  else {
    return 255LL;
  }
}

uint64_t iAP2ListArrayGetNextItemIndex(uint64_t a1, unsigned int a2)
{
  uint64_t result = 255LL;
  if (a1)
  {
    if (a2 != 255) {
      return *(unsigned __int8 *)(a1 + (*(unsigned __int8 *)(a1 + 5) + 2) * (unint64_t)a2 + 8);
    }
  }

  return result;
}

uint64_t iAP2ListArrayAddItemAfter(unsigned __int8 *a1, unsigned int a2, void *__src)
{
  uint64_t v3 = 255LL;
  if (a1 && __src)
  {
    if (*a1 >= a1[1])
    {
      return 255LL;
    }

    else
    {
      uint64_t v3 = a1[4];
      if (v3 == 255) {
        iAP2ListArrayAddItemAfter_cold_1();
      }
      unsigned int v6 = a1[2];
      int v7 = a1[3];
      size_t v8 = a1[5];
      int v9 = a1 + 8;
      uint64_t v10 = &a1[(v8 + 2) * (unint64_t)a1[4] + 8];
      uint64_t v11 = *v10;
      a1[4] = v11;
      if (v11 != 255) {
        v9[(v8 + 2) * (unint64_t)v11 + 1] = -1;
      }
      *(_WORD *)uint64_t v10 = -1;
      memcpy(v10 + 2, __src, v8);
      if (a2 == 255)
      {
        if (v6 != 255)
        {
          v9[(a1[5] + 2) * (unint64_t)v6 + 1] = v3;
          *uint64_t v10 = v6;
        }

        a1[2] = v3;
      }

      else
      {
        unsigned int v12 = a1[5] + 2;
        unint64_t v13 = v12 * (unint64_t)a2;
        uint64_t v14 = v9[v13];
        if (v14 != 255) {
          v9[v12 * (unint64_t)v9[v13] + 1] = v3;
        }
        *uint64_t v10 = v14;
        v9[v13] = v3;
        v10[1] = a2;
      }

      if (v7 == a2) {
        a1[3] = v3;
      }
      ++*a1;
    }
  }

  return v3;
}

uint64_t iAP2ListArrayAddItemInOrder( unsigned __int8 *a1, void *__src, uint64_t (*a3)(unsigned __int8 *, void *, uint64_t))
{
  uint64_t result = 255LL;
  if (__src && a1 && a3)
  {
    int v7 = a1[2];
    if (v7 == 255
      || (uint64_t v8 = a1[5], v9 = &a1[(v8 + 2) * (unint64_t)a1[2] + 8], a3(v9 + 2, __src, v8) > 0))
    {
      unsigned __int8 v10 = -1;
    }

    else
    {
      do
      {
        unsigned __int8 v10 = v7;
        int v7 = *v9;
        if (v7 == 255) {
          break;
        }
        int v9 = &a1[(a1[5] + 2) * (unint64_t)*v9 + 8];
      }

      while (a3(v9 + 2, __src, v8) < 1);
    }

    return iAP2ListArrayAddItemAfter(a1, v10, __src);
  }

  return result;
}

_BYTE *iAP2ListArrayDeleteItem(_BYTE *result, unsigned int a2, uint64_t (*a3)(unsigned __int8 *))
{
  if (result)
  {
    char v3 = a2;
    if (a2 != 255)
    {
      int v4 = result;
      char v5 = *result;
      if (*result)
      {
        int v6 = result[2];
        int v7 = result + 8;
        unsigned int v8 = result[5] + 2;
        int v9 = &result[v8 * (unint64_t)a2 + 8];
        unsigned int v10 = *v9;
        unsigned int v11 = v9[1];
        if (v6 == a2) {
          result[2] = v10;
        }
        unsigned int v12 = result[4];
        if (v11 != 255) {
          v7[v8 * (unint64_t)v11] = v10;
        }
        if (v10 != 255) {
          v7[v8 * (unint64_t)v10 + 1] = v11;
        }
        *uint64_t result = v5 - 1;
        if (a3) {
          uint64_t result = (_BYTE *)a3(v9 + 2);
        }
        if (v12 != 255) {
          v7[(v4[5] + 2) * (unint64_t)v12 + 1] = v3;
        }
        *int v9 = v12;
        v4[4] = v3;
      }
    }
  }

  return result;
}

uint64_t iap2_appLinks_start(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0LL;
  if (!a1 || !a2) {
    return v2;
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 0x18u);
  if (!Feature || *(_BYTE *)(Feature + 104)) {
    return 0LL;
  }
  uint64_t v52 = Feature;
  CFStringRef v49 = (void *)a1;
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
  if (!FirstParam)
  {
    CFMutableSetRef Mutable = 0LL;
    CFMutableSetRef v8 = 0LL;
LABEL_79:
    if ((unint64_t)Mutable | (unint64_t)v8)
    {
      _removeSubscribers(v49, (CFSetRef *)v52);
      if (*(void *)v52)
      {
        CFRelease(*(CFTypeRef *)v52);
        *(void *)uint64_t v52 = 0LL;
      }

      if (Mutable)
      {
        *(void *)uint64_t v52 = CFRetain(Mutable);
        if (CFSetGetCount(Mutable)) {
          *(_BYTE *)(v52 + 20) = 1;
        }
      }

      else
      {
        *(void *)uint64_t v52 = 0LL;
      }

      uint64_t v34 = *(const void **)(v52 + 24);
      if (v34)
      {
        CFRelease(v34);
        *(void *)(v52 + 24) = 0LL;
      }

      if (v8)
      {
        *(void *)(v52 + 24) = CFRetain(v8);
        if (CFSetGetCount(v8)) {
          *(_BYTE *)(v52 + 44) = 1;
        }
      }

      else
      {
        *(void *)(v52 + 24) = 0LL;
      }

      if (*v49)
      {
        if (*(_BYTE *)(v52 + 20) && *(void *)v52 && CFSetGetCount(*(CFSetRef *)v52) >= 1)
        {
          CFTypeRef v35 = iap2_accAuthentication_copyCertificateSerial((uint64_t)v49);
          if (!v35)
          {
            char v36 = 0;
LABEL_112:
            *(_BYTE *)(v52 + 104) = v36 | v35;
            if (gLogObjects && gNumLogObjects >= 50)
            {
              CFStringRef v42 = *(os_log_s **)(gLogObjects + 392);
            }

            else
            {
              CFStringRef v42 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            uint64_t v2 = 1LL;
            if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
            {
              uint64_t v43 = v49[1];
              *(_DWORD *)buf = 138412290;
              *(void *)int v56 = v43;
              _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_INFO,  "App Links started for EndpointUUID: %@",  buf,  0xCu);
            }

            goto LABEL_119;
          }

          char v36 = iAP2MsgPreSendCtlProcess();
          CFRelease(v35);
        }

        else
        {
          char v36 = 0;
        }

        if (*(_BYTE *)(v52 + 44))
        {
          id v37 = *(const __CFSet **)(v52 + 24);
          if (v37)
          {
            if (CFSetGetCount(v37) >= 1)
            {
              CFTypeRef v38 = iap2_accAuthentication_copyCertificateSerial((uint64_t)v49);
              if (v38)
              {
                int v39 = v38;
                LOBYTE(v35) = iAP2MsgPreSendCtlProcess();
                CFRelease(v39);
                goto LABEL_112;
              }
            }
          }
        }
      }

      else
      {
        char v36 = 0;
      }

      LOBYTE(v35) = 0;
      goto LABEL_112;
    }

    return 0LL;
  }

  int v7 = (unsigned __int16 *)FirstParam;
  CFMutableSetRef v8 = 0LL;
  CFMutableSetRef Mutable = 0LL;
  uint64_t v50 = 0LL;
  uint64_t v51 = 0LL;
  while (2)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)v7);
    int v54 = 0;
    uint64_t v11 = gLogObjects;
    int v12 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 50)
    {
      unint64_t v13 = *(os_log_s **)(gLogObjects + 392);
    }

    else
    {
      unint64_t v13 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)int v56 = v11;
        *(_WORD *)&v56[8] = 1024;
        int v57 = v12;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
        unint64_t v13 = (os_log_s *)&_os_log_default;
      }
    }

    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)int v56 = ParamID;
      _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "msgParamID: %d", buf, 8u);
    }

    switch(ParamID)
    {
      case 0:
        if (Mutable) {
          goto LABEL_108;
        }
        unint64_t v14 = iAP2MsgGetFirstParam(a2, v7);
        if (!v14)
        {
          CFMutableSetRef Mutable = 0LL;
          goto LABEL_76;
        }

        NextParam = (unsigned __int16 *)v14;
        CFMutableSetRef Mutable = 0LL;
        while (1)
        {
          unsigned __int16 valuePtr = -21846;
          unsigned __int16 valuePtr = iAP2MsgGetParamID((uint64_t)NextParam);
          uint64_t v16 = gLogObjects;
          int v17 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 50)
          {
            id v18 = *(os_log_s **)(gLogObjects + 392);
          }

          else
          {
            id v18 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)int v56 = v16;
              *(_WORD *)&v56[8] = 1024;
              int v57 = v17;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              id v18 = (os_log_s *)&_os_log_default;
            }
          }

          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)int v56 = valuePtr;
            _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "msgSubParamID: %d", buf, 8u);
          }

          if (!iAP2MsgIsDataVoid(NextParam)) {
            break;
          }
          CFNumberRef v19 = CFNumberCreate(kCFAllocatorDefault, kCFNumberShortType, &valuePtr);
          if (Mutable || (CFMutableSetRef Mutable = CFSetCreateMutable(kCFAllocatorDefault, 1LL, &kCFTypeSetCallBacks)) != 0LL) {
            CFSetAddValue(Mutable, v19);
          }
          if (v19) {
            CFRelease(v19);
          }
          NextParam = iAP2MsgGetNextParam(a2, v7, NextParam);
          if (!NextParam) {
            goto LABEL_76;
          }
        }

        uint64_t v40 = (os_log_s *)logObjectForModule_22();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
          iap2_appLinks_start_cold_2((uint64_t)&valuePtr, a2);
        }
        goto LABEL_108;
      case 1:
        if ((v50 & 1) != 0) {
          goto LABEL_39;
        }
        __int16 DataAsU16 = iAP2MsgGetDataAsU16(v7, &v54);
        if (v54)
        {
          uint64_t v45 = (os_log_s *)logObjectForModule_22();
          if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
            iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_2(a2);
          }
          goto LABEL_108;
        }

        *(_WORD *)(v52 + 16) = DataAsU16;
LABEL_39:
        LOBYTE(v50) = 1;
        goto LABEL_76;
      case 2:
        if ((v50 & 0x100000000LL) != 0) {
          goto LABEL_43;
        }
        __int16 v24 = iAP2MsgGetDataAsU16(v7, &v54);
        if (v54)
        {
          CFStringRef v46 = (os_log_s *)logObjectForModule_22();
          if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
            iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_3(a2);
          }
          goto LABEL_108;
        }

        *(_WORD *)(v52 + 1_Block_object_dispose(va, 8) = v24;
LABEL_43:
        BYTE4(v50) = 1;
        goto LABEL_76;
      case 3:
        if (v8) {
          goto LABEL_108;
        }
        unint64_t v25 = iAP2MsgGetFirstParam(a2, v7);
        if (!v25)
        {
          CFMutableSetRef v8 = 0LL;
LABEL_76:
          int v7 = iAP2MsgGetNextParam(a2, 0LL, v7);
          if (!v7) {
            goto LABEL_79;
          }
          continue;
        }

        id v26 = (unsigned __int16 *)v25;
        CFMutableSetRef v8 = 0LL;
        while (1)
        {
          unsigned __int16 valuePtr = -21846;
          unsigned __int16 valuePtr = iAP2MsgGetParamID((uint64_t)v26);
          uint64_t v27 = gLogObjects;
          int v28 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 50)
          {
            uint64_t v29 = *(os_log_s **)(gLogObjects + 392);
          }

          else
          {
            uint64_t v29 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)int v56 = v27;
              *(_WORD *)&v56[8] = 1024;
              int v57 = v28;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              uint64_t v29 = (os_log_s *)&_os_log_default;
            }
          }

          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)int v56 = valuePtr;
            _os_log_debug_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "msgSubParamID: %d", buf, 8u);
          }

          if (!iAP2MsgIsDataVoid(v26)) {
            break;
          }
          CFNumberRef v30 = CFNumberCreate(kCFAllocatorDefault, kCFNumberShortType, &valuePtr);
          if (v8 || (CFMutableSetRef v8 = CFSetCreateMutable(kCFAllocatorDefault, 1LL, &kCFTypeSetCallBacks)) != 0LL) {
            CFSetAddValue(v8, v30);
          }
          if (v30) {
            CFRelease(v30);
          }
          id v26 = iAP2MsgGetNextParam(a2, v7, v26);
          if (!v26) {
            goto LABEL_76;
          }
        }

        __int16 v41 = (os_log_s *)logObjectForModule_22();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
          iap2_appLinks_start_cold_5((uint64_t)&valuePtr, a2);
        }
LABEL_108:
        uint64_t v2 = 0LL;
LABEL_119:
        if (Mutable) {
          CFRelease(Mutable);
        }
        if (v8) {
          CFRelease(v8);
        }
        return v2;
      case 4:
        if ((v51 & 1) != 0) {
          goto LABEL_65;
        }
        __int16 v31 = iAP2MsgGetDataAsU16(v7, &v54);
        if (v54)
        {
          int v47 = (os_log_s *)logObjectForModule_22();
          if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
            iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_5(a2);
          }
          goto LABEL_108;
        }

        *(_WORD *)(v52 + 40) = v31;
LABEL_65:
        LOBYTE(v51) = 1;
        goto LABEL_76;
      case 5:
        if ((v51 & 0x100000000LL) != 0) {
          goto LABEL_69;
        }
        __int16 v32 = iAP2MsgGetDataAsU16(v7, &v54);
        if (v54)
        {
          int v48 = (os_log_s *)logObjectForModule_22();
          if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
            iap2_CarPlayStartSession_cold_11(a2);
          }
          goto LABEL_108;
        }

        *(_WORD *)(v52 + 42) = v32;
LABEL_69:
        BYTE4(v51) = 1;
        goto LABEL_76;
      default:
        uint64_t v20 = gLogObjects;
        int v21 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 50)
        {
          id v22 = *(os_log_s **)(gLogObjects + 392);
        }

        else
        {
          id v22 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)int v56 = v20;
            *(_WORD *)&v56[8] = 1024;
            int v57 = v21;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            id v22 = (os_log_s *)&_os_log_default;
          }
        }

        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          int MsgID = iAP2MsgGetMsgID(a2);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)int v56 = ParamID;
          *(_WORD *)&v56[4] = 1024;
          *(_DWORD *)&v56[6] = MsgID;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param",  buf,  0xEu);
        }

        goto LABEL_76;
    }
  }

void *logObjectForModule_22()
{
  if (gLogObjects && gNumLogObjects >= 50) {
    return *(void **)(gLogObjects + 392);
  }
  BOOL v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

uint64_t _removeSubscribers(void *a1, CFSetRef *a2)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v3 = 0LL;
  if (a2 && *a1)
  {
    uint64_t v3 = *a2 && CFSetGetCount(*a2) >= 1 ? iAP2MsgPreSendCtlProcess() : 0LL;
    int v4 = a2[3];
    if (v4)
    {
      if (CFSetGetCount(v4) >= 1) {
        return iAP2MsgPreSendCtlProcess();
      }
    }
  }

  return v3;
}

uint64_t iap2_appLinks_stop(void *a1, uint64_t a2)
{
  uint64_t v2 = 0LL;
  if (a1 && a2)
  {
    uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0x18u);
    if (Feature && (uint64_t v5 = Feature, *(_BYTE *)(Feature + 104)))
    {
      *(_BYTE *)(Feature + 104) = 0;
      *(_BYTE *)(Feature + 20) = 0;
      *(_BYTE *)(Feature + 44) = 0;
      uint64_t v2 = _removeSubscribers(a1, (CFSetRef *)Feature);
      if (gLogObjects && gNumLogObjects >= 50)
      {
        int v6 = *(os_log_s **)(gLogObjects + 392);
      }

      else
      {
        int v6 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = a1[1];
        int v15 = 138412290;
        uint64_t v16 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "App Links stopped for EndpointUUID: %@",  (uint8_t *)&v15,  0xCu);
      }

      if (*(void *)v5)
      {
        CFRelease(*(CFTypeRef *)v5);
        *(void *)uint64_t v5 = 0LL;
      }

      CFMutableSetRef v8 = *(const void **)(v5 + 24);
      if (v8)
      {
        CFRelease(v8);
        *(void *)(v5 + 24) = 0LL;
      }

      int v9 = *(const void **)(v5 + 80);
      if (v9)
      {
        CFRelease(v9);
        *(void *)(v5 + 80) = 0LL;
      }

      unsigned int v10 = *(const void **)(v5 + 72);
      if (v10)
      {
        CFRelease(v10);
        *(void *)(v5 + 72) = 0LL;
      }

      uint64_t v11 = *(const void **)(v5 + 96);
      if (v11)
      {
        CFRelease(v11);
        *(void *)(v5 + 96) = 0LL;
      }

      int v12 = *(const void **)(v5 + 56);
      if (v12)
      {
        CFRelease(v12);
        *(void *)(v5 + 56) = 0LL;
      }

      unint64_t v13 = *(const void **)(v5 + 64);
      if (v13)
      {
        CFRelease(v13);
        *(void *)(v5 + 64) = 0LL;
      }

      *(_WORD *)(v5 + 90) = 0;
    }

    else
    {
      return 0LL;
    }
  }

  return v2;
}

uint64_t iap2_appLinks_requestAppIcons(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0LL;
  if (!a1) {
    return result;
  }
  if (!a2) {
    return result;
  }
  uint64_t result = iap2_feature_getFeature(a1, 0x18u);
  if (!result) {
    return result;
  }
  uint64_t v5 = result;
  if (!*(_BYTE *)(result + 104)) {
    return 0LL;
  }
  uint64_t result = iAP2MsgGetFirstParam(a2, 0LL);
  if (!result) {
    return result;
  }
  NextParam = (unsigned __int16 *)result;
  uint64_t v29 = a1;
  uint64_t v30 = v5;
  uint64_t v7 = 0LL;
  do
  {
    unsigned __int16 valuePtr = -21846;
    unsigned int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
    unsigned __int16 valuePtr = ParamID;
    BOOL v31 = 0;
    uint64_t v9 = gLogObjects;
    int v10 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 50)
    {
      uint64_t v11 = *(os_log_s **)(gLogObjects + 392);
    }

    else
    {
      uint64_t v11 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)uint64_t v34 = v9;
        *(_WORD *)&v34[8] = 1024;
        LODWORD(v35) = v10;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
        unsigned int ParamID = valuePtr;
        uint64_t v11 = (os_log_s *)&_os_log_default;
      }
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)uint64_t v34 = ParamID;
      _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "msgParamID: %d", buf, 8u);
      unsigned int ParamID = valuePtr;
    }

    if (ParamID > 1)
    {
      uint64_t v16 = gLogObjects;
      int v17 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 50)
      {
        id v18 = *(os_log_s **)(gLogObjects + 392);
      }

      else
      {
        id v18 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)uint64_t v34 = v16;
          *(_WORD *)&v34[8] = 1024;
          LODWORD(v35) = v17;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          id v18 = (os_log_s *)&_os_log_default;
        }
      }

      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        int v19 = valuePtr;
        int MsgID = iAP2MsgGetMsgID(a2);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)uint64_t v34 = v19;
        *(_WORD *)&v34[4] = 1024;
        *(_DWORD *)&v34[6] = MsgID;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param",  buf,  0xEu);
      }
    }

    else
    {
      CFStringRef v12 = iAP2MsgCopyDataAsCFString(NextParam, &v31);
      if (!v31) {
        goto LABEL_29;
      }
      uint64_t v13 = gLogObjects;
      int v14 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 50)
      {
        int v15 = *(os_log_s **)(gLogObjects + 392);
      }

      else
      {
        int v15 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)uint64_t v34 = v13;
          *(_WORD *)&v34[8] = 1024;
          LODWORD(v35) = v14;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          int v15 = (os_log_s *)&_os_log_default;
        }
      }

      if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
LABEL_29:
        if (!v12) {
          goto LABEL_40;
        }
LABEL_30:
        if (v7 || (uint64_t v7 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks)) != 0LL)
        {
          CFMutableSetRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
          CFNumberRef v22 = CFNumberCreate(kCFAllocatorDefault, kCFNumberShortType, &valuePtr);
          CFNumberRef v23 = v22;
          if (Mutable && v22)
          {
            CFDictionaryAddValue(Mutable, @"CARApplicationBundleIdentifierKey", v12);
            CFDictionaryAddValue(Mutable, @"appLinksSubFeature", v23);
            CFArrayAppendValue(v7, Mutable);
            goto LABEL_36;
          }

          if (Mutable) {
LABEL_36:
          }
            CFRelease(Mutable);
          if (v23) {
            CFRelease(v23);
          }
        }

        CFRelease(v12);
        goto LABEL_40;
      }

      *(_DWORD *)buf = 67109120;
      *(_DWORD *)uint64_t v34 = v31;
      _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "iAP2MsgCopyDataAsCFString failed with err: %x",  buf,  8u);
      if (v12) {
        goto LABEL_30;
      }
    }

uint64_t iap2_appLinks_appLinksUpdateHandler(uint64_t *a1, CFDictionaryRef theDict)
{
  int v89 = 0;
  uint64_t valuePtr = 0LL;
  if (!a1) {
    return 0LL;
  }
  if (!theDict) {
    return 0LL;
  }
  uint64_t Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"appLinksState");
  uint64_t v5 = (const __CFArray *)CFDictionaryGetValue(theDict, @"appList");
  int v6 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"appLinksSubFeature");
  if (!Value) {
    return 0LL;
  }
  uint64_t v7 = v6;
  if (!v6) {
    return 0LL;
  }
  if (!v5) {
    return 0LL;
  }
  CFNumberGetValue(Value, kCFNumberLongType, &valuePtr);
  CFNumberGetValue(v7, kCFNumberIntType, &v89);
  uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0x18u);
  if (!Feature) {
    return 0LL;
  }
  int v9 = v89;
  if (v89 == 1)
  {
    *(void *)(Feature + 32) = valuePtr;
  }

  else if (v89)
  {
    if (gLogObjects && gNumLogObjects >= 50)
    {
      int v10 = *(os_log_s **)(gLogObjects + 392);
    }

    else
    {
      int v10 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      iap2_appLinks_appLinksUpdateHandler_cold_8();
    }
    int v9 = v89;
  }

  else
  {
    *(void *)(Feature + _Block_object_dispose(va, 8) = valuePtr;
  }

  if (!*a1) {
    return 0LL;
  }
  int v87 = a1;
  if (v9 == 1)
  {
    if (gLogObjects && gNumLogObjects >= 50)
    {
      CFStringRef v12 = *(os_log_s **)(gLogObjects + 392);
    }

    else
    {
      CFStringRef v12 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      uint64_t v23 = a1[1];
      *(_DWORD *)buf = 138412290;
      *(void *)uint64_t v91 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Received EA app links update for endpoint: %@",  buf,  0xCu);
    }

    uint64_t v24 = iap2_feature_getFeature((uint64_t)a1, 0x18u);
    if (!v24) {
      return 0LL;
    }
    uint64_t v25 = v24;
    if (!*(_BYTE *)(v24 + 104) || !*(_BYTE *)(v24 + 44)) {
      return 0LL;
    }
    if (gLogObjects && gNumLogObjects >= 50)
    {
      int v26 = *(os_log_s **)(gLogObjects + 392);
    }

    else
    {
      int v26 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      CFIndex Count = CFArrayGetCount(v5);
      *(_DWORD *)buf = 134217984;
      *(void *)uint64_t v91 = Count;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "app links count: %ld", buf, 0xCu);
    }

    if (CFArrayGetCount(v5)) {
      unsigned int v81 = _calculateListCap(v25, 1, v5);
    }
    else {
      unsigned int v81 = 0;
    }
    uint64_t v29 = (uint64_t)(a1 + 15);
    iAP2MsgInit((uint64_t)(a1 + 15), 44289, a1[24], 0xFFFF, 0LL, 0LL);
    unint64_t v30 = (unint64_t)iAP2MsgAddU8Param((uint64_t)(a1 + 15), 0LL, 3, *(_BYTE *)(v25 + 32));
    if (*(void *)(v25 + 32) == 2LL)
    {
      if (!(iAP2MsgAddU16Param((uint64_t)(a1 + 15), 0LL, 5, v81) | v30))
      {
LABEL_80:
        if (!CFArrayGetCount(v5)) {
          return 0LL;
        }
        unsigned int v85 = _iAP2MessageCutoffSize((uint64_t)a1);
        iAP2MsgInit((uint64_t)(a1 + 15), 44289, a1[24], 0xFFFF, 0LL, 0LL);
        if (!v81) {
          return 0LL;
        }
        CFIndex v31 = 0LL;
        __int16 v32 = 0;
        int v79 = 0;
        uint64_t v83 = v81 - 1;
        while (1)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v5, v31);
          if (!ValueAtIndex) {
            goto LABEL_112;
          }
          uint64_t v34 = ValueAtIndex;
          CFTypeRef v35 = iAP2MsgAddGroupParam(v29, 4);
          if (v35) {
            ++v32;
          }
          iAP2MsgAddU16Param(v29, (uint64_t)v35, 0, (unsigned __int16)v31);
          char v36 = (const __CFString *)CFDictionaryGetValue(v34, @"CARApplicationBundleIdentifierKey");
          iAP2MsgAddCFStringParam(v29, (uint64_t)v35, 1, v36);
          id v37 = (const __CFString *)CFDictionaryGetValue(v34, @"CARApplicationLocalizedNameKey");
          iAP2MsgAddCFStringParam(v29, (uint64_t)v35, 2, v37);
          if (*(_WORD *)(v25 + 42))
          {
            CFTypeRef v38 = (const __CFData *)CFDictionaryGetValue(v34, @"iconDataHash");
            if (v38)
            {
              int v39 = v38;
              BytePtr = CFDataGetBytePtr(v38);
              unsigned __int16 Length = CFDataGetLength(v39);
              iAP2MsgAddDataParam(v29, (uint64_t)v35, 4, BytePtr, Length);
            }

            CFMutableSetRef Mutable = *(__CFSet **)(v25 + 64);
            if (!Mutable)
            {
              CFMutableSetRef Mutable = CFSetCreateMutable(kCFAllocatorDefault, 1LL, &kCFTypeSetCallBacks);
              *(void *)(v25 + 64) = Mutable;
            }

            uint64_t v43 = CFDictionaryGetValue(v34, @"CARApplicationBundleIdentifierKey");
            CFSetAddValue(Mutable, v43);
          }

          unsigned int MsgLen = iAP2MsgGetMsgLen(v29);
          uint64_t v45 = gLogObjects;
          int v46 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 50)
          {
            int v47 = *(os_log_s **)(gLogObjects + 392);
          }

          else
          {
            int v47 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)uint64_t v91 = v45;
              *(_WORD *)&v91[8] = 1024;
              v92[0] = v46;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            }
          }

          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)uint64_t v91 = MsgLen;
            *(_WORD *)&v91[4] = 1024;
            *(_DWORD *)&v91[6] = v85;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEBUG,  "messageSize: %d bytes, messageCutoffSize: %d bytes",  buf,  0xEu);
          }

          if (MsgLen <= v85 && v83 != v31) {
            goto LABEL_112;
          }
          uint64_t v48 = gLogObjects;
          int v49 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 50)
          {
            uint64_t v50 = *(os_log_s **)(gLogObjects + 392);
          }

          else
          {
            uint64_t v50 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)uint64_t v91 = v48;
              *(_WORD *)&v91[8] = 1024;
              v92[0] = v49;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            }
          }

          if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67109632;
            *(_DWORD *)uint64_t v91 = (unsigned __int16)v79;
            *(_WORD *)&v91[4] = 1024;
            *(_DWORD *)&v91[6] = v31 + 1;
            LOWORD(v92[0]) = 1024;
            *(_DWORD *)((char *)v92 + 2) = v81;
            _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_INFO,  "Sending AppLinksUpdate message (%d, entry: %d/%d)",  buf,  0x14u);
            ++v79;
          }

          if (!v32) {
            goto LABEL_111;
          }
          iap2_sessionControl_sendOutgoingMessage(a1, v29);
LABEL_112:
          if (v81 == ++v31) {
            return 0LL;
          }
        }

        iAP2MsgInit(v29, 44289, a1[24], 0xFFFF, 0LL, 0LL);
LABEL_111:
        __int16 v32 = 0;
        goto LABEL_112;
      }
    }

    else if (!v30)
    {
      goto LABEL_80;
    }

    iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
    goto LABEL_80;
  }

  if (v9)
  {
    if (gLogObjects && gNumLogObjects >= 50)
    {
      uint64_t v13 = *(os_log_s **)(gLogObjects + 392);
    }

    else
    {
      uint64_t v13 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      iap2_appLinks_appLinksUpdateHandler_cold_1();
    }
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 50)
    {
      uint64_t v11 = *(os_log_s **)(gLogObjects + 392);
    }

    else
    {
      uint64_t v11 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = a1[1];
      *(_DWORD *)buf = 138412290;
      *(void *)uint64_t v91 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "Received CarPlay app links update for endpoint: %@",  buf,  0xCu);
    }

    uint64_t v15 = iap2_feature_getFeature((uint64_t)a1, 0x18u);
    if (v15)
    {
      uint64_t v16 = v15;
      if (*(_BYTE *)(v15 + 104))
      {
        if (*(_BYTE *)(v15 + 20))
        {
          CFTypeRef v17 = iap2_accAuthentication_copyCertificateSerial((uint64_t)a1);
          if (v17)
          {
            CFTypeRef v18 = v17;
            char isWirelessCarPlayAllowedForCertSerial = platform_CarPlay_isWirelessCarPlayAllowedForCertSerial();
            if (gLogObjects) {
              BOOL v20 = gNumLogObjects <= 49;
            }
            else {
              BOOL v20 = 1;
            }
            int v21 = !v20;
            CFStringRef cf = v18;
            if ((isWirelessCarPlayAllowedForCertSerial & 1) == 0)
            {
              if (v21)
              {
                uint64_t v76 = *(os_log_s **)(gLogObjects + 392);
              }

              else
              {
                uint64_t v76 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_DEFAULT,  "Accessory is not paired to CarPlay, app links are unavailable!",  buf,  2u);
              }

LABEL_184:
              CFRelease(cf);
              return 0LL;
            }

            if (v21)
            {
              CFNumberRef v22 = *(os_log_s **)(gLogObjects + 392);
            }

            else
            {
              CFNumberRef v22 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
            {
              CFIndex v28 = CFArrayGetCount(v5);
              *(_DWORD *)buf = 134217984;
              *(void *)uint64_t v91 = v28;
              _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "app links count: %ld", buf, 0xCu);
            }

            if (CFArrayGetCount(v5)) {
              unsigned int v82 = _calculateListCap(v16, 0, v5);
            }
            else {
              unsigned int v82 = 0;
            }
            uint64_t v51 = (uint64_t)(a1 + 15);
            iAP2MsgInit((uint64_t)(a1 + 15), 44289, a1[24], 0xFFFF, 0LL, 0LL);
            unint64_t v52 = (unint64_t)iAP2MsgAddU8Param((uint64_t)(a1 + 15), 0LL, 0, *(_BYTE *)(v16 + 8));
            if (*(void *)(v16 + 8) == 2LL)
            {
            }

            else if (!v52)
            {
LABEL_120:
              if (CFArrayGetCount(v5))
              {
                unsigned int v86 = _iAP2MessageCutoffSize((uint64_t)a1);
                iAP2MsgInit(v51, 44289, a1[24], 0xFFFF, 0LL, 0LL);
                if (v82)
                {
                  CFIndex v53 = 0LL;
                  __int16 v54 = 0;
                  int v80 = 0;
                  uint64_t v84 = v82 - 1;
                  while (1)
                  {
                    uint64_t v55 = (const __CFDictionary *)CFArrayGetValueAtIndex(v5, v53);
                    if (v55)
                    {
                      int v56 = v55;
                      int v57 = iAP2MsgAddGroupParam(v51, 1);
                      if (v57) {
                        ++v54;
                      }
                      id v58 = (const __CFString *)CFDictionaryGetValue(v56, @"CARApplicationCategoryKey");
                      if (!v58) {
                        goto LABEL_184;
                      }
                      CFStringRef v59 = v58;
                      iAP2MsgAddU16Param(v51, (uint64_t)v57, 0, (unsigned __int16)v53);
                      if (CFStringCompare(v59, @"audio", 0LL))
                      {
                        if (CFStringCompare(v59, @"calling", 0LL))
                        {
                          if (CFStringCompare(v59, @"messaging", 0LL))
                          {
                            if (CFStringCompare(v59, @"navigation", 0LL))
                            {
                              if (CFStringCompare(v59, @"automaker", 0LL))
                              {
                                if (CFStringCompare(v59, @"quick ordering", 0LL))
                                {
                                  if (CFStringCompare(v59, @"charging", 0LL))
                                  {
                                    if (CFStringCompare(v59, @"parking", 0LL))
                                    {
                                      if (CFStringCompare(v59, @"productivity", 0LL))
                                      {
                                        if (CFStringCompare(v59, @"fueling", 0LL))
                                        {
                                          if (CFStringCompare(v59, @"driving task", 0LL)) {
                                            unsigned int v60 = 0;
                                          }
                                          else {
                                            unsigned int v60 = 12;
                                          }
                                        }

                                        else
                                        {
                                          unsigned int v60 = 11;
                                        }
                                      }

                                      else
                                      {
                                        unsigned int v60 = 10;
                                      }
                                    }

                                    else
                                    {
                                      unsigned int v60 = 9;
                                    }
                                  }

                                  else
                                  {
                                    unsigned int v60 = 8;
                                  }
                                }

                                else
                                {
                                  unsigned int v60 = 7;
                                }
                              }

                              else
                              {
                                unsigned int v60 = 5;
                              }
                            }

                            else
                            {
                              unsigned int v60 = 3;
                            }
                          }

                          else
                          {
                            unsigned int v60 = 1;
                          }
                        }

                        else
                        {
                          unsigned int v60 = 2;
                        }
                      }

                      else
                      {
                        unsigned int v60 = 4;
                      }

                      iAP2MsgAddU16Param(v51, (uint64_t)v57, 3, v60);
                      uint64_t v61 = (const __CFString *)CFDictionaryGetValue(v56, @"CARApplicationBundleIdentifierKey");
                      iAP2MsgAddCFStringParam(v51, (uint64_t)v57, 1, v61);
                      id v62 = (const __CFString *)CFDictionaryGetValue(v56, @"CARApplicationLocalizedNameKey");
                      iAP2MsgAddCFStringParam(v51, (uint64_t)v57, 2, v62);
                      if (*(_WORD *)(v16 + 18))
                      {
                        uint64_t v63 = (const __CFData *)CFDictionaryGetValue(v56, @"iconDataHash");
                        if (v63)
                        {
                          uint64_t v64 = v63;
                          uint64_t v65 = CFDataGetBytePtr(v63);
                          unsigned __int16 v66 = CFDataGetLength(v64);
                          iAP2MsgAddDataParam(v51, (uint64_t)v57, 4, v65, v66);
                        }

                        uint64_t v67 = *(__CFSet **)(v16 + 56);
                        if (!v67)
                        {
                          uint64_t v67 = CFSetCreateMutable(kCFAllocatorDefault, 1LL, &kCFTypeSetCallBacks);
                          *(void *)(v16 + 56) = v67;
                        }

                        uint64_t v68 = CFDictionaryGetValue(v56, @"CARApplicationBundleIdentifierKey");
                        CFSetAddValue(v67, v68);
                      }

                      unsigned int v69 = iAP2MsgGetMsgLen(v51);
                      uint64_t v70 = gLogObjects;
                      int v71 = gNumLogObjects;
                      if (gLogObjects && gNumLogObjects >= 50)
                      {
                        uint64_t v72 = *(os_log_s **)(gLogObjects + 392);
                      }

                      else
                      {
                        uint64_t v72 = (os_log_s *)&_os_log_default;
                        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = 134218240;
                          *(void *)uint64_t v91 = v70;
                          *(_WORD *)&v91[8] = 1024;
                          v92[0] = v71;
                          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                        }
                      }

                      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 67109376;
                        *(_DWORD *)uint64_t v91 = v69;
                        *(_WORD *)&v91[4] = 1024;
                        *(_DWORD *)&v91[6] = v86;
                        _os_log_debug_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_DEBUG,  "messageSize: %d bytes, messageCutoffSize: %d bytes",  buf,  0xEu);
                      }

                      if (v69 > v86 || v84 == v53)
                      {
                        uint64_t v73 = gLogObjects;
                        int v74 = gNumLogObjects;
                        if (gLogObjects && gNumLogObjects >= 50)
                        {
                          char v75 = *(os_log_s **)(gLogObjects + 392);
                        }

                        else
                        {
                          char v75 = (os_log_s *)&_os_log_default;
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 134218240;
                            *(void *)uint64_t v91 = v73;
                            *(_WORD *)&v91[8] = 1024;
                            v92[0] = v74;
                            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                          }
                        }

                        if (os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
                        {
                          *(_DWORD *)buf = 67109632;
                          *(_DWORD *)uint64_t v91 = (unsigned __int16)v80;
                          *(_WORD *)&v91[4] = 1024;
                          *(_DWORD *)&v91[6] = v53 + 1;
                          LOWORD(v92[0]) = 1024;
                          *(_DWORD *)((char *)v92 + 2) = v82;
                          _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_INFO,  "Sending AppLinksUpdate message (%d, entry: %d/%d)",  buf,  0x14u);
                          ++v80;
                        }

                        if (!v54) {
                          goto LABEL_175;
                        }
                        iap2_sessionControl_sendOutgoingMessage(v87, v51);
                      }
                    }

LABEL_176:
                    if (v82 == ++v53) {
                      goto LABEL_184;
                    }
                  }

                  iAP2MsgInit(v51, 44289, v87[24], 0xFFFF, 0LL, 0LL);
LABEL_175:
                  __int16 v54 = 0;
                  goto LABEL_176;
                }
              }

              goto LABEL_184;
            }

            iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
            goto LABEL_120;
          }
        }
      }
    }
  }

  return 0LL;
}

uint64_t iap2_appLinks_appLinksAppIconHandler(uint64_t a1, const void *a2)
{
  uint64_t result = 0LL;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = iap2_feature_getFeature(a1, 0x18u);
      if (result)
      {
        uint64_t v5 = result;
        CFMutableSetRef Mutable = *(__CFArray **)(result + 96);
        if (!Mutable)
        {
          CFMutableSetRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
          *(void *)(v5 + 96) = Mutable;
        }

        CFArrayAppendValue(Mutable, a2);
        _appLinksProcessAppIcon(a1);
        return 1LL;
      }
    }
  }

  return result;
}

uint64_t _appLinksProcessAppIcon(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = iap2_feature_getFeature(result, 0x18u);
    if (result)
    {
      uint64_t v2 = result;
      pthread_mutex_lock(&_gIconLock);
      if (CFArrayGetCount(*(CFArrayRef *)(v2 + 96)) >= 1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 96), 0LL);
        CFTypeRef v4 = CFRetain(ValueAtIndex);
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v2 + 96), 0LL);
        uint64_t v5 = *(dispatch_queue_s **)(v2 + 48);
        v6[0] = _NSConcreteStackBlock;
        v6[1] = 0x40000000LL;
        v6[2] = ___appLinksProcessAppIcon_block_invoke;
        v6[3] = &__block_descriptor_tmp_13;
        v6[4] = v1;
        v6[5] = v4;
        dispatch_async(v5, v6);
      }

      return pthread_mutex_unlock(&_gIconLock);
    }
  }

  return result;
}

_BYTE *_createFeature_17(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v2 = calloc(1uLL, 0x70uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    v2[104] = 0;
    v2[20] = 0;
    *(void *)uint64_t v2 = 0LL;
    *((_DWORD *)v2 + 4) = 0;
    v2[44] = 0;
    *((void *)v2 + 3) = 0LL;
    *((_DWORD *)v2 + 10) = 0;
    dispatch_queue_t v4 = dispatch_queue_create("com.apple.accessoryd.appLinks.iconQueue", 0LL);
    *((void *)v3 + 7) = 0LL;
    *((void *)v3 + _Block_object_dispose(va, 8) = 0LL;
    *((void *)v3 + 6) = v4;
    *((void *)v3 + 10) = 0LL;
    *((_DWORD *)v3 + 22) = 0;
    iAP2LinkRegisterEventCallback( *(void *)(*(void *)(a1 + 32) + 24LL),  1u,  (uint64_t)_appLinksiAP2LinkEventNotifyHandler);
  }

  return v3;
}

uint64_t _destroyFeature_17(CFSetRef **a1, void *a2)
{
  uint64_t result = 0LL;
  if (a1 && a2)
  {
    uint64_t v5 = *a1;
    if (*a1)
    {
      if (*((_BYTE *)v5 + 104)) {
        _removeSubscribers(a2, *a1);
      }
      if (*((_BYTE *)v5 + 89))
      {
        unint64_t TransferEntry = iap2_sessionFileTransfer_findTransferEntry((unint64_t)a2, *((unsigned __int8 *)v5 + 90));
        if (TransferEntry)
        {
          unint64_t v7 = TransferEntry;
          uint64_t v8 = *(void *)(TransferEntry + 8);
          if (v8)
          {
            iap2_sessionFileTransfer_removeTransferForFeature((uint64_t)a2, 24, v8);
            uint64_t v9 = *(void *)(v7 + 8);
            if (*(void *)(v9 + 64))
            {
              free(*(void **)(v9 + 64));
              uint64_t v9 = *(void *)(v7 + 8);
              *(void *)(v9 + 64) = 0LL;
            }

            iAP2FileTransferRelease(v9);
          }
        }

        pthread_mutex_lock(&_gIconLock);
        *(_WORD *)((char *)v5 + 89) = 0;
        pthread_mutex_unlock(&_gIconLock);
      }

      CFSetRef v10 = v5[10];
      if (v10)
      {
        CFRelease(v10);
        v5[10] = 0LL;
      }

      *((_WORD *)v5 + 45) = 0;
      if (*v5)
      {
        CFRelease(*v5);
        CFSetRef *v5 = 0LL;
      }

      CFSetRef v11 = v5[3];
      if (v11)
      {
        CFRelease(v11);
        v5[3] = 0LL;
      }

      CFSetRef v12 = v5[9];
      if (v12)
      {
        CFRelease(v12);
        v5[9] = 0LL;
      }

      CFSetRef v13 = v5[12];
      if (v13)
      {
        CFRelease(v13);
        v5[12] = 0LL;
      }

      CFSetRef v14 = v5[7];
      if (v14)
      {
        CFRelease(v14);
        v5[7] = 0LL;
      }

      CFSetRef v15 = v5[8];
      if (v15)
      {
        CFRelease(v15);
        __int16 v5[8] = 0LL;
      }

      uint64_t v16 = (dispatch_object_s *)v5[6];
      if (v16)
      {
        dispatch_release(v16);
        void v5[6] = 0LL;
      }

      if (*a1)
      {
        free(*a1);
        *a1 = 0LL;
      }

      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t _checkIdentificationInfo_15(uint64_t a1)
{
  char v6 = 0;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&_checkIdentificationInfo_kMsgTestList_1, 5u, &v6);
  uint64_t v3 = v2;
  if (v6) {
    BOOL v4 = (_DWORD)v2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    iap2_identification_setIdentifiedForFeature(a1, 0x18u);
  }
  return v3;
}

float _appLinksiAP2LinkEventNotifyHandler(uint64_t a1, int a2, uint64_t a3)
{
  if (!a1 || a2 != 1) {
    return result;
  }
  if (a3) {
    uint64_t v5 = *(unsigned __int8 **)(a3 + 64);
  }
  else {
    uint64_t v5 = 0LL;
  }
  if (gLogObjects && gNumLogObjects >= 50)
  {
    char v6 = *(os_log_s **)(gLogObjects + 392);
  }

  else
  {
    char v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v23 = obfuscatedPointer(a3);
    if (a3)
    {
      uint64_t v25 = obfuscatedPointer(*(void *)(a3 + 64));
      int v24 = *(unsigned __int8 *)(a3 + 109);
      int v26 = *(_DWORD *)(a3 + 104);
    }

    else
    {
      int v24 = 0;
      uint64_t v25 = 0LL;
      int v26 = -1;
    }

    if (v5)
    {
      int v28 = *v5;
      int v29 = v5[1];
      int v27 = v5[2];
      int v30 = v5[3];
    }

    else
    {
      int v27 = -1;
      int v28 = -1;
      int v29 = -1;
      int v30 = -1;
    }

    int v41 = 134219776;
    *(void *)CFStringRef v42 = v23;
    *(_WORD *)&v42[8] = 2048;
    uint64_t v43 = v25;
    *(_WORD *)CFStringRef v44 = 1024;
    *(_DWORD *)&v44[2] = v24;
    *(_WORD *)uint64_t v45 = 1024;
    *(_DWORD *)&v45[2] = v26;
    __int16 v46 = 1024;
    int v47 = v28;
    __int16 v48 = 1024;
    int v49 = v29;
    __int16 v50 = 1024;
    int v51 = v27;
    __int16 v52 = 1024;
    int v53 = v30;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Got kiAP2LinkEventNotifyBuffXferStateChange fileXfer=%p(endCBUserInfo=%p ID=%u state=%d) context(needCancel=%d las tSeenSetupState=%d sentSetup=%d gotStart=%d)",  (uint8_t *)&v41,  0x3Au);
    if (!a3) {
      return result;
    }
  }

  else if (!a3)
  {
    return result;
  }

  if (!*(void *)(a3 + 64)) {
    return result;
  }
  if (*(_WORD *)(a3 + 112) != 8) {
    return result;
  }
  uint64_t v8 = *(void *)(a1 + 176);
  if (!v8) {
    return result;
  }
  uint64_t v9 = *(void *)(v8 + 16);
  if (!v9 || !v5) {
    return result;
  }
  int v10 = *(_DWORD *)(a3 + 104);
  if (v10 != 2) {
    goto LABEL_28;
  }
  if (v5[2])
  {
    uint64_t v11 = gLogObjects;
    int v12 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 50)
    {
      CFSetRef v13 = *(os_log_s **)(gLogObjects + 392);
    }

    else
    {
      CFSetRef v13 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int v41 = 134218240;
        *(void *)CFStringRef v42 = v11;
        *(_WORD *)&v42[8] = 1024;
        LODWORD(v43) = v12;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  (uint8_t *)&v41,  0x12u);
        int v10 = *(_DWORD *)(a3 + 104);
        goto LABEL_25;
      }
    }

    int v10 = 2;
LABEL_25:
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      int v34 = *(unsigned __int8 *)(a3 + 109);
      int v35 = *(unsigned __int16 *)(a3 + 112);
      int v36 = v5[3];
      int v41 = 67110144;
      *(_DWORD *)CFStringRef v42 = v34;
      *(_WORD *)&v42[4] = 1024;
      *(_DWORD *)&_BYTE v42[6] = v35;
      LOWORD(v43) = 1024;
      *(_DWORD *)((char *)&v43 + 2) = v10;
      HIWORD(v43) = 1024;
      *(_DWORD *)CFStringRef v44 = v36;
      *(_WORD *)&v44[4] = 1024;
      *(_DWORD *)uint64_t v45 = 1;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "fileXfer(ID=%u type=%d state=%d) context->gotStart %d->%d",  (uint8_t *)&v41,  0x20u);
      int v10 = *(_DWORD *)(a3 + 104);
    }

    v5[3] = 1;
LABEL_28:
    if (v10 == 3 && v5[1])
    {
      if (gLogObjects && gNumLogObjects >= 50)
      {
        CFSetRef v14 = *(os_log_s **)(gLogObjects + 392);
      }

      else
      {
        CFSetRef v14 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        int v37 = *(unsigned __int8 *)(a3 + 109);
        int v38 = *(unsigned __int16 *)(a3 + 112);
        int v39 = *(_DWORD *)(a3 + 104);
        int v40 = v5[2];
        int v41 = 67110144;
        *(_DWORD *)CFStringRef v42 = v37;
        *(_WORD *)&v42[4] = 1024;
        *(_DWORD *)&_BYTE v42[6] = v38;
        LOWORD(v43) = 1024;
        *(_DWORD *)((char *)&v43 + 2) = v39;
        HIWORD(v43) = 1024;
        *(_DWORD *)CFStringRef v44 = v40;
        *(_WORD *)&v44[4] = 1024;
        *(_DWORD *)uint64_t v45 = 1;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "fileXfer(ID=%u type=%d state=%d) context->sentSetup %d->%d",  (uint8_t *)&v41,  0x20u);
      }

      _DWORD v5[2] = 1;
    }
  }

  if (gLogObjects && gNumLogObjects >= 50)
  {
    CFSetRef v15 = *(os_log_s **)(gLogObjects + 392);
  }

  else
  {
    CFSetRef v15 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
  int v17 = *(_DWORD *)(a3 + 104);
  if (v16)
  {
    int v31 = *(unsigned __int8 *)(a3 + 109);
    int v32 = *(unsigned __int16 *)(a3 + 112);
    int v33 = v5[1];
    int v41 = 67110144;
    *(_DWORD *)CFStringRef v42 = v31;
    *(_WORD *)&v42[4] = 1024;
    *(_DWORD *)&_BYTE v42[6] = v32;
    LOWORD(v43) = 1024;
    *(_DWORD *)((char *)&v43 + 2) = v17;
    HIWORD(v43) = 1024;
    *(_DWORD *)CFStringRef v44 = v33;
    *(_WORD *)&v44[4] = 1024;
    *(_DWORD *)uint64_t v45 = v17 == 1;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "fileXfer(ID=%u type=%d state=%d) context->lastSeenSetupState %d->%d",  (uint8_t *)&v41,  0x20u);
    int v17 = *(_DWORD *)(a3 + 104);
  }

  v5[1] = v17 == 1;
  if (*v5)
  {
    if (gLogObjects && gNumLogObjects >= 50)
    {
      CFTypeRef v18 = *(os_log_s **)(gLogObjects + 392);
    }

    else
    {
      CFTypeRef v18 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      int v19 = *(unsigned __int8 *)(a3 + 109);
      int v20 = *(unsigned __int16 *)(a3 + 112);
      int v21 = *(_DWORD *)(a3 + 104);
      int v41 = 67109632;
      *(_DWORD *)CFStringRef v42 = v19;
      *(_WORD *)&v42[4] = 1024;
      *(_DWORD *)&_BYTE v42[6] = v20;
      LOWORD(v43) = 1024;
      *(_DWORD *)((char *)&v43 + 2) = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "Cancel fileXfer(ID=%u type=%d state=%d)",  (uint8_t *)&v41,  0x14u);
    }

    unsigned __int8 *v5 = 0;
    iAP2FileTransferCancel(a3);
    iap2_sessionFileTransfer_removeTransferForFeature(v9, 24, a3);
    CFNumberRef v22 = *(void **)(a3 + 64);
    if (v22)
    {
      free(v22);
      *(void *)(a3 + 64) = 0LL;
    }

    iAP2FileTransferRelease(a3);
  }

  return result;
}

uint64_t _calculateListCap(uint64_t a1, int a2, CFArrayRef theArray)
{
  unsigned __int16 v3 = 0;
  if (a1 && theArray)
  {
    if (a2 == 1)
    {
      unsigned int v5 = *(unsigned __int16 *)(a1 + 40);
    }

    else if (a2)
    {
      if (gLogObjects && gNumLogObjects >= 50)
      {
        char v6 = *(os_log_s **)(gLogObjects + 392);
      }

      else
      {
        char v6 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        _calculateListCap_cold_2();
      }
      unsigned int v5 = 0;
    }

    else
    {
      unsigned int v5 = *(unsigned __int16 *)(a1 + 16);
    }

    CFIndex Count = CFArrayGetCount(theArray);
    CFIndex v8 = Count;
    else {
      unsigned __int16 v3 = v5;
    }
    if (gLogObjects && gNumLogObjects >= 50)
    {
      int v10 = *(os_log_s **)(gLogObjects + 392);
    }

    else
    {
      int v10 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v12[0] = 67109888;
      v12[1] = v3;
      __int16 v13 = 2048;
      CFIndex v14 = v8;
      __int16 v15 = 1024;
      int v16 = 0;
      __int16 v17 = 1024;
      unsigned int v18 = v5;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "listCap: %d (listCount: %ld, hardCap: %d, listMax: %d)",  (uint8_t *)v12,  0x1Eu);
    }
  }

  return v3;
}

uint64_t _iAP2MessageCutoffSize(uint64_t a1)
{
  unsigned int MaxSendPayloadSize = iap2_endpoint_getMaxSendPayloadSize(a1);
  if (gLogObjects && gNumLogObjects >= 50)
  {
    uint64_t v2 = *(os_log_s **)(gLogObjects + 392);
  }

  else
  {
    uint64_t v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109376;
    v4[1] = MaxSendPayloadSize;
    __int16 v5 = 1024;
    unsigned int v6 = MaxSendPayloadSize >> 1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "maxPayloadSize: %d, messageCutoffSize: %d",  (uint8_t *)v4,  0xEu);
  }

  return MaxSendPayloadSize >> 1;
}

void ___appLinksProcessAppIcon_block_invoke(uint64_t a1)
{
}

void _appLinksAppIconResponse(uint64_t *a1, const __CFDictionary *a2)
{
  if (!a1) {
    return;
  }
  if (!a2) {
    return;
  }
  if (!*a1) {
    return;
  }
  uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0x18u);
  if (!Feature) {
    return;
  }
  uint64_t v5 = Feature;
  if (!*(_BYTE *)(Feature + 104)) {
    return;
  }
  CFIndex Count = CFDictionaryGetCount(a2);
  if (!Count) {
    return;
  }
  size_t v7 = 8 * Count;
  __chkstk_darwin(Count);
  CFIndex v8 = (CFDictionaryRef *)((char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = memset(v8, 170, v7);
  __chkstk_darwin(v9);
  memset(v8, 170, v7);
  CFDictionaryGetKeysAndValues(a2, (const void **)v8, (const void **)v8);
  int v10 = (const __CFString *)*v8;
  if (!*v8) {
    return;
  }
  uint64_t v11 = *v8;
  uint64_t Value = CFDictionaryGetValue(*v8, @"iconData");
  __int16 v13 = (const __CFData *)CFDictionaryGetValue(v11, @"iconDataHash");
  CFIndex v14 = *(const __CFSet **)(v5 + 56);
  if ((v14 && CFSetContainsValue(v14, v10)
     || (__int16 v15 = *(const __CFSet **)(v5 + 64)) != 0LL && CFSetContainsValue(v15, v10))
    && Value
    && v13
    && CFDataGetLength((CFDataRef)Value)
    && CFDataGetLength(v13))
  {
    if (*(_BYTE *)(v5 + 88))
    {
      CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(v5 + 96), 0LL, a2);
      return;
    }

    int v19 = malloc(0x48uLL);
    int v20 = malloc(0xFFFFuLL);
    pthread_mutex_lock(&_gIconLock);
    *(_BYTE *)(v5 + 8_Block_object_dispose(va, 8) = 1;
    pthread_mutex_unlock(&_gIconLock);
    if (*(_BYTE *)(v5 + 89))
    {
      unint64_t TransferEntry = iap2_sessionFileTransfer_findTransferEntry((unint64_t)a1, *(unsigned __int8 *)(v5 + 90));
      if (TransferEntry)
      {
        uint64_t v22 = *(void *)(TransferEntry + 8);
        if (v22) {
          _cancelPendingTransfer(v22);
        }
      }

      pthread_mutex_lock(&_gIconLock);
      *(_WORD *)(v5 + 89) = 0;
      pthread_mutex_unlock(&_gIconLock);
    }

    uint64_t v23 = a1[4];
    if (!v23 || (uint64_t v24 = *(void *)(v23 + 24)) == 0)
    {
LABEL_53:
      pthread_mutex_lock(&_gIconLock);
      *(_BYTE *)(v5 + 8_Block_object_dispose(va, 8) = 0;
      pthread_mutex_unlock(&_gIconLock);
      if (v19) {
        free(v19);
      }
      if (v20) {
        free(v20);
      }
      return;
    }

    uint64_t v55 = v20;
    uint64_t v25 = (uint64_t)v19;
    int SessionForService = iAP2LinkGetSessionForService(v24, 1);
    pthread_mutex_lock(&_gIconLock);
    int v27 = (char *)(v5 + 90);
    BOOL BufferID = iAP2FileTransferAllocateBufferID(*(void *)(a1[4] + 24), SessionForService, (_BYTE *)(v5 + 90));
    pthread_mutex_unlock(&_gIconLock);
    if (BufferID)
    {
      pthread_mutex_lock(&_gIconLock);
      *(_BYTE *)(v5 + 89) = 1;
      pthread_mutex_unlock(&_gIconLock);
      int v29 = *(const void **)(v5 + 80);
      if (v29)
      {
        CFRelease(v29);
        *(void *)(v5 + 80) = 0LL;
      }

      *(void *)(v5 + 80) = CFRetain(Value);
      *(_BYTE *)(v5 + 91) = 8;
      int v30 = malloc(0x130uLL);
      int v19 = (void *)v25;
      int v20 = v55;
      if (v30)
      {
        int v31 = v30;
        iAP2FileTransferCreate( *(unsigned __int8 **)(a1[4] + 24),  SessionForService,  *v27,  0LL,  0LL,  0,  (uint64_t)v30);
        unint64_t v71 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&__int128 v32 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
        __int128 v69 = v32;
        __int128 v70 = v32;
        __int128 v67 = v32;
        __int128 v68 = v32;
        __int128 v65 = v32;
        __int128 v66 = v32;
        __int128 v63 = v32;
        __int128 v64 = v32;
        *(_OWORD *)&uint8_t buf[16] = v32;
        *(_OWORD *)buf = v32;
        *(_WORD *)buf = CFStringGetLength(v10) + 1;
        CFStringGetCString(v10, &buf[8], *(unsigned __int16 *)buf, 0x8000100u);
        BYTE2(v71) = 0;
        iAP2FileTransferTypeData((uint64_t)v31, 8, (unsigned __int16 *)buf);
        if (iap2_sessionFileTransfer_addTransferForFeature((uint64_t)a1, 24, (uint64_t)v31, 0LL))
        {
          int v33 = malloc(0x10uLL);
          *(void *)int v33 = a1;
          v33[8] = *v27;
          *((_DWORD *)v33 + 3) = 8;
          int v34 = (os_log_s *)logObjectForModule_22();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v35 = a1[1];
            int v56 = 136315650;
            int v57 = "_appLinksAppIconResponse";
            __int16 v58 = 1024;
            int v59 = 1678;
            __int16 v60 = 2112;
            uint64_t v61 = v35;
            _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "%s:%d - iAP2MsgInit with cleanupCB - _appIconFileTransferIDSent endpointUUID: %@",  (uint8_t *)&v56,  0x1Cu);
          }

          iAP2MsgInit(v25, 44292, (uint64_t)v20, 0xFFFF, (uint64_t)_appIconFileTransferIDSent, (uint64_t)v33);
          iAP2MsgAddCFStringParam(v25, 0LL, 0, v10);
          iAP2MsgAddU8Param(v25, 0LL, 1, 1);
          iAP2MsgAddU8Param(v25, 0LL, 2, *v27);
          BytePtr = CFDataGetBytePtr(v13);
          unsigned __int16 Length = CFDataGetLength(v13);
          iAP2MsgAddDataParam(v25, 0LL, 3, BytePtr, Length);
          if ((iap2_sessionControl_sendOutgoingMessageAndCallbackOnACK(a1, v25) & 1) == 0) {
            iAP2FileTransferCancel((uint64_t)v31);
          }
          return;
        }

        __int16 v46 = (os_log_s *)logObjectForModule_22();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
          _appLinksAppIconResponse_cold_2(v46, v47, v48, v49, v50, v51, v52, v53);
        }
        free(v31);
      }

      goto LABEL_53;
    }

    if (gLogObjects && gNumLogObjects >= 50)
    {
      int v38 = *(os_log_s **)(gLogObjects + 392);
    }

    else
    {
      int v38 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
      _appLinksAppIconResponse_cold_3(v38, v39, v40, v41, v42, v43, v44, v45);
    }
  }

  else
  {
    int v16 = malloc(0x48uLL);
    __int16 v17 = malloc(0xFFFFuLL);
    if (gLogObjects && gNumLogObjects >= 50)
    {
      unsigned int v18 = *(os_log_s **)(gLogObjects + 392);
    }

    else
    {
      unsigned int v18 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "_appLinksAppIconResponse";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1733;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%s:%d - iAP2MsgInit with cleanupCB - _appIconFileTransferIDSent",  buf,  0x12u);
    }

    iAP2MsgInit((uint64_t)v16, 44292, (uint64_t)v17, 0xFFFF, (uint64_t)_appIconFileTransferIDSent, 0LL);
    iAP2MsgAddCFStringParam((uint64_t)v16, 0LL, 0, v10);
    iAP2MsgAddU8Param((uint64_t)v16, 0LL, 1, 0);
    iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)v16);
  }

void _cancelPendingTransfer(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 50)
  {
    uint64_t v2 = *(os_log_s **)(gLogObjects + 392);
  }

  else
  {
    uint64_t v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v3 = *(unsigned __int8 *)(a1 + 109);
    int v4 = *(unsigned __int16 *)(a1 + 112);
    int v5 = *(_DWORD *)(a1 + 104);
    int v19 = 67109632;
    int v20 = v3;
    __int16 v21 = 1024;
    int v22 = v4;
    __int16 v23 = 1024;
    int v24 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "_cancelPendingTransfer fileXfer(ID=%u type=%d state=%d)",  (uint8_t *)&v19,  0x14u);
  }

  uint64_t v6 = *(void *)(*(void *)a1 + 176LL);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 16);
    if (v7)
    {
      CFIndex v8 = *(_BYTE **)(a1 + 64);
      if (v8)
      {
        *CFIndex v8 = 1;
        int v9 = *(_DWORD *)(a1 + 104);
        if (v9 == 2 || v8[3]) {
          goto LABEL_13;
        }
      }

      else
      {
        int v9 = *(_DWORD *)(a1 + 104);
        if (v9 == 2)
        {
LABEL_13:
          if (gLogObjects && gNumLogObjects >= 50)
          {
            int v10 = *(os_log_s **)(gLogObjects + 392);
          }

          else
          {
            int v10 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            int v11 = *(unsigned __int8 *)(a1 + 109);
            int v12 = *(unsigned __int16 *)(a1 + 112);
            int v13 = *(_DWORD *)(a1 + 104);
            int v19 = 67109632;
            int v20 = v11;
            __int16 v21 = 1024;
            int v22 = v12;
            __int16 v23 = 1024;
            int v24 = v13;
            _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "_cancelPendingTransfer: Call Cancel fileXfer(ID=%u type=%d state=%d)",  (uint8_t *)&v19,  0x14u);
          }

          if (v8) {
            *CFIndex v8 = 0;
          }
          iAP2FileTransferCancel(a1);
          iap2_sessionFileTransfer_removeTransferForFeature(v7, 24, a1);
          CFIndex v14 = *(void **)(a1 + 64);
          if (v14)
          {
            free(v14);
            *(void *)(a1 + 64) = 0LL;
          }

          iAP2FileTransferRelease(a1);
          return;
        }
      }

      if (v9)
      {
        if (v9 == 5 && v8) {
          *CFIndex v8 = 0;
        }
      }

      else
      {
        if (gLogObjects && gNumLogObjects >= 50)
        {
          __int16 v15 = *(os_log_s **)(gLogObjects + 392);
        }

        else
        {
          __int16 v15 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          int v16 = *(unsigned __int8 *)(a1 + 109);
          int v17 = *(unsigned __int16 *)(a1 + 112);
          int v18 = *(_DWORD *)(a1 + 104);
          int v19 = 67109632;
          int v20 = v16;
          __int16 v21 = 1024;
          int v22 = v17;
          __int16 v23 = 1024;
          int v24 = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "_cancelPendingTransfer: Call Start fileXfer(ID=%u type=%d state=%d)",  (uint8_t *)&v19,  0x14u);
        }

        iAP2FileTransferStart(a1, 0LL, 0LL, 0LL, (uint64_t)_appIconFileTransferEndHandler, 0LL, 0, 0);
      }
    }
  }

void _appIconFileTransferIDSent(void *a1, int a2)
{
  if (a1)
  {
    uint64_t v4 = a1[6];
    if (gLogObjects && gNumLogObjects >= 50)
    {
      int v5 = *(os_log_s **)(gLogObjects + 392);
    }

    else
    {
      int v5 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = obfuscatedPointer(v4);
      if (v4) {
        int v7 = *(_DWORD *)(v4 + 12);
      }
      else {
        int v7 = 0;
      }
      *(_DWORD *)buf = 134218754;
      uint64_t v41 = (const __CFString *)v6;
      __int16 v42 = 1024;
      *(_DWORD *)uint64_t v43 = v7;
      *(_WORD *)&v43[4] = 1024;
      *(_DWORD *)&v43[6] = a2;
      *(_WORD *)uint64_t v44 = 2080;
      *(void *)&v44[2] = dispatch_queue_get_label(0LL);
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#AppIcon File transfer ID sent callback fired! context=%p (type=%d) needDelete=%d currentDispatchQueue: %s",  buf,  0x22u);
    }

    if (v4)
    {
      if (*(_DWORD *)(v4 + 12) == 8)
      {
        if (*(void *)v4)
        {
          uint64_t Feature = iap2_feature_getFeature(*(void *)v4, 0x18u);
          if (Feature)
          {
            uint64_t v9 = Feature;
            if (gLogObjects && gNumLogObjects >= 50)
            {
              int v10 = *(os_log_s **)(gLogObjects + 392);
            }

            else
            {
              int v10 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
            {
              int v11 = *(unsigned __int8 *)(v4 + 8);
              int v12 = *(_DWORD *)(v4 + 12);
              int v13 = *(unsigned __int8 *)(v9 + 90);
              int v14 = *(unsigned __int8 *)(v9 + 89);
              int v15 = *(unsigned __int8 *)(v9 + 91);
              *(_DWORD *)buf = 138544642;
              uint64_t v41 = @"#AppIcon";
              __int16 v42 = 1024;
              *(_DWORD *)uint64_t v43 = v11;
              *(_WORD *)&v43[4] = 1024;
              *(_DWORD *)&v43[6] = v12;
              *(_WORD *)uint64_t v44 = 1024;
              *(_DWORD *)&v44[2] = v13;
              *(_WORD *)&_BYTE v44[6] = 1024;
              *(_DWORD *)&v44[8] = v14;
              LOWORD(v45) = 1024;
              *(_DWORD *)((char *)&v45 + 2) = v15;
              _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%{public}@ File transfer ID sent callback fired! context(ID=%u type=%u) currentTransferInfo(ID=%u valid=%d type=%u)",  buf,  0x2Au);
            }

            if (!*(_BYTE *)(v9 + 91) || *(_DWORD *)(v4 + 12) == *(unsigned __int8 *)(v9 + 91))
            {
              unint64_t v16 = *(void *)v4;
              if (*(void *)v4)
              {
                if (iap2_feature_getFeature(*(void *)v4, 0x18u))
                {
                  int v17 = *(char *)(v4 + 8);
                  if (v17 < 0)
                  {
                    if (*(_BYTE *)(v9 + 89))
                    {
                      if (*(unsigned __int8 *)(v9 + 90) == v17)
                      {
                        unint64_t TransferEntry = iap2_sessionFileTransfer_findTransferEntry(v16, *(unsigned __int8 *)(v4 + 8));
                        if (TransferEntry)
                        {
                          uint64_t v21 = *(void *)(TransferEntry + 8);
                          if (v21)
                          {
                            if (*(_DWORD *)(v21 + 104))
                            {
                              if (gLogObjects && gNumLogObjects >= 50)
                              {
                                int v22 = *(os_log_s **)(gLogObjects + 392);
                              }

                              else
                              {
                                int v22 = (os_log_s *)&_os_log_default;
                                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                                }
                              }

                              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
                                _appIconFileTransferIDSent_cold_6(v21, (int *)(v21 + 104), v22);
                              }
                            }

                            else
                            {
                              __int16 v23 = *(const __CFData **)(v9 + 80);
                              if (v23)
                              {
                                BytePtr = CFDataGetBytePtr(v23);
                                unsigned int Length = CFDataGetLength(*(CFDataRef *)(v9 + 80));
                              }

                              else
                              {
                                unsigned int Length = 0;
                                BytePtr = 0LL;
                              }

                              if (gLogObjects && gNumLogObjects >= 50)
                              {
                                int v24 = *(os_log_s **)(gLogObjects + 392);
                              }

                              else
                              {
                                int v24 = (os_log_s *)&_os_log_default;
                                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                                }
                              }

                              if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
                              {
                                int v25 = *(unsigned __int8 *)(v21 + 109);
                                int v26 = *(_DWORD *)(v21 + 104);
                                uint64_t v27 = obfuscatedPointer((uint64_t)BytePtr);
                                *(_DWORD *)buf = 138544642;
                                uint64_t v41 = @"#AppIcon";
                                __int16 v42 = 2048;
                                *(void *)uint64_t v43 = v21;
                                *(_WORD *)&v43[8] = 1024;
                                *(_DWORD *)uint64_t v44 = v25;
                                *(_WORD *)&v44[4] = 1024;
                                *(_DWORD *)&_BYTE v44[6] = v26;
                                *(_WORD *)&_BYTE v44[10] = 2048;
                                uint64_t v45 = v27;
                                __int16 v46 = 1024;
                                unsigned int v47 = Length;
                                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "%{public}@ start transfer (%p id=%d state=%d) pBuffer=%p bufferLen=%u",  buf,  0x32u);
                              }

                              int v28 = malloc(4uLL);
                              *int v28 = 0;
                              if (gLogObjects && gNumLogObjects >= 50)
                              {
                                int v29 = *(os_log_s **)(gLogObjects + 392);
                              }

                              else
                              {
                                int v29 = (os_log_s *)&_os_log_default;
                                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                                }
                              }

                              if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
                                _appIconFileTransferIDSent_cold_3(v21, (int *)(v21 + 104), v29);
                              }
                              if ((iAP2FileTransferStart( v21,  (uint64_t)BytePtr,  Length,  Length,  (uint64_t)_appIconFileTransferEndHandler,  (uint64_t)v28,  0,  0) & 1) == 0)
                              {
                                if (gLogObjects && gNumLogObjects >= 50)
                                {
                                  int v30 = *(os_log_s **)(gLogObjects + 392);
                                }

                                else
                                {
                                  int v30 = (os_log_s *)&_os_log_default;
                                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                                  }
                                }

                                if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
                                  _appIconFileTransferIDSent_cold_1(v30, v31, v32, v33, v34, v35, v36, v37);
                                }
                                iAP2FileTransferCancel(v21);
                                iAP2FileTransferRelease(v21);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    if (a2)
    {
      int v18 = (void *)a1[6];
      if (v18)
      {
        free(v18);
        a1[6] = 0LL;
      }

      int v19 = (void *)a1[3];
      if (v19) {
        free(v19);
      }
      free(a1);
    }
  }

uint64_t _appIconFileTransferEndHandler(uint64_t a1, void *a2)
{
  if (!a1 || !*(void *)a1) {
    return 0LL;
  }
  if (gLogObjects && gNumLogObjects >= 50)
  {
    uint64_t v4 = *(os_log_s **)(gLogObjects + 392);
  }

  else
  {
    uint64_t v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v5 = *(_DWORD *)(a1 + 104);
    int v47 = 67109120;
    LODWORD(v4_Block_object_dispose(va, 8) = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "#AppIcon File transfer end callback fired! state: %d",  (uint8_t *)&v47,  8u);
  }

  uint64_t v6 = *(void *)(*(void *)a1 + 176LL);
  if (!v6) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v6 + 16);
  if (!v7) {
    return 0LL;
  }
  uint64_t Feature = iap2_feature_getFeature(v7, 0x18u);
  if (!Feature || !*(void *)a1) {
    return 0LL;
  }
  uint64_t v9 = Feature;
  if (gLogObjects && gNumLogObjects >= 50)
  {
    int v10 = *(os_log_s **)(gLogObjects + 392);
  }

  else
  {
    int v10 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    int v11 = *(_DWORD *)(a1 + 104);
    int v12 = *(unsigned __int8 *)(a1 + 109);
    uint64_t v13 = *(void *)(a1 + 32);
    int v14 = *(unsigned __int8 *)(v9 + 90);
    int v15 = *(unsigned __int8 *)(v9 + 89);
    int v16 = *(unsigned __int8 *)(v9 + 91);
    int v47 = 138544898;
    uint64_t v48 = @"#AppIcon";
    __int16 v49 = 1024;
    *(_DWORD *)uint64_t v50 = v11;
    *(_WORD *)&v50[4] = 1024;
    *(_DWORD *)&v50[6] = v12;
    *(_WORD *)uint64_t v51 = 2048;
    *(void *)&v51[2] = v13;
    __int16 v52 = 1024;
    int v53 = v14;
    __int16 v54 = 1024;
    int v55 = v15;
    __int16 v56 = 1024;
    int v57 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%{public}@ File transfer end callback fired! fileXfer(state=%d bufferID=%u size=%llu) currentTransferInfo(transfer ID=%u valid=%d type=%d)",  (uint8_t *)&v47,  0x34u);
  }

  uint64_t v18 = a1 + 104;
  unsigned int v17 = *(_DWORD *)(a1 + 104);
  if (v17 > 7 || ((1 << v17) & 0xD0) == 0)
  {
    if (gLogObjects && gNumLogObjects >= 50)
    {
      __int16 v23 = *(os_log_s **)(gLogObjects + 392);
    }

    else
    {
      __int16 v23 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      _appIconFileTransferEndHandler_cold_1(v18, v23, v36, v37, v38, v39, v40, v41);
    }
    return 0LL;
  }

  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  uint64_t v19 = *(void *)(*(void *)a1 + 176LL);
  if (!v19) {
    return 0LL;
  }
  uint64_t v20 = *(void *)(v19 + 16);
  if (!v20) {
    return 0LL;
  }
  uint64_t v21 = iap2_sessionFileTransfer_removeTransferForFeature(*(void *)(v19 + 16), 24, a1);
  if ((v21 & 1) == 0)
  {
    if (gLogObjects && gNumLogObjects >= 50)
    {
      int v22 = *(os_log_s **)(gLogObjects + 392);
    }

    else
    {
      int v22 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      _appIconFileTransferEndHandler_cold_4(v22, v24, v25, v26, v27, v28, v29, v30);
    }
  }

  int v31 = *(unsigned __int8 *)(a1 + 109);
  if (*(void **)(a1 + 64) == a2)
  {
    if (a2)
    {
      free(a2);
      *(void *)(a1 + 64) = 0LL;
    }
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 50)
    {
      uint64_t v32 = *(os_log_s **)(gLogObjects + 392);
    }

    else
    {
      uint64_t v32 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v32, OS_LOG_TYPE_FAULT))
    {
      int v43 = *(_DWORD *)(a1 + 104);
      int v44 = *(unsigned __int8 *)(a1 + 109);
      int v45 = *(unsigned __int16 *)(a1 + 16);
      int v46 = *(unsigned __int16 *)(a1 + 64);
      int v47 = 138545154;
      uint64_t v48 = @"#AppIcon";
      __int16 v49 = 2080;
      *(void *)uint64_t v50 = "_handleFileTransferEnd";
      *(_WORD *)&v50[8] = 1024;
      *(_DWORD *)uint64_t v51 = (unsigned __int16)a1;
      *(_WORD *)&v51[4] = 1024;
      *(_DWORD *)&v51[6] = v43;
      __int16 v52 = 1024;
      int v53 = v44;
      __int16 v54 = 1024;
      int v55 = v45;
      __int16 v56 = 1024;
      int v57 = (unsigned __int16)a2;
      __int16 v58 = 1024;
      int v59 = v46;
      _os_log_fault_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_FAULT,  "%{public}@ %s: fileXfer=%hxh state=%d bufferID=%u pBuffer=%hxh userInfo=%hxh, userInfo != endCBUserInfo(%hxh) !!!!",  (uint8_t *)&v47,  0x3Au);
    }
  }

  iAP2FileTransferRelease(a1);
  uint64_t v33 = iap2_feature_getFeature(v20, 0x18u);
  if (v33)
  {
    uint64_t v34 = v33;
    pthread_mutex_lock(&_gIconLock);
    if (*(_BYTE *)(v9 + 89) && v31 == *(unsigned __int8 *)(v9 + 90))
    {
      uint64_t v35 = *(const void **)(v9 + 80);
      if (v35)
      {
        CFRelease(v35);
        *(void *)(v9 + 80) = 0LL;
      }

      *(_BYTE *)(v9 + 91) = 0;
      *(_WORD *)(v9 + 89) = 0;
    }

    *(_BYTE *)(v34 + 8_Block_object_dispose(va, 8) = 0;
    pthread_mutex_unlock(&_gIconLock);
    _appLinksProcessAppIcon(v20);
  }

  return v21;
}

uint64_t OUTLINED_FUNCTION_9_7(uint64_t a1, uint64_t a2)
{
  return iAP2MsgGetMsgID(a2);
}

void init_logging_signposts()
{
}

void init_logging_signpost_modules(uint64_t a1, char a2, uint64_t a3)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = __init_logging_signpost_modules_block_invoke;
  block[3] = &__block_descriptor_tmp_14;
  char v4 = a2;
  void block[4] = a3;
  void block[5] = a1;
  if (init_logging_signpost_modules_onceToken != -1) {
    dispatch_once(&init_logging_signpost_modules_onceToken, block);
  }
}

void __init_logging_signpost_modules_block_invoke(uint64_t a1)
{
  uint64_t v2 = &off_10019D000;
  if (*(_BYTE *)(a1 + 48))
  {
    uint64_t v3 = 0LL;
    unint64_t v4 = 0LL;
    int v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(const char **)(v6 + v3);
      if (!v7)
      {
        uint64_t v7 = "<Undefined>";
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v12) = v4;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Subsystem missing for logging module %d!\n(Check LoggingSignpostModuleEntry_t table)",  buf,  8u);
          uint64_t v6 = *(void *)(a1 + 32);
          uint64_t v7 = "<Undefined>";
        }
      }

      CFIndex v8 = *(const char **)(v6 + v3 + 8);
      if (!v8)
      {
        CFIndex v8 = "<Undefined>";
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          __init_logging_signpost_modules_block_invoke_cold_1(v15, v4, &v16);
          CFIndex v8 = "<Undefined>";
        }
      }

      os_log_t v9 = os_log_create(v7, v8);
      *(void *)(*(void *)(a1 + 40) + 8 * v4) = v9;
      if (v9)
      {
        ++v5;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          int v12 = v7;
          __int16 v13 = 2080;
          int v14 = v8;
          _os_log_debug_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEBUG,  "Created log object %s: %s",  buf,  0x16u);
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        int v12 = v7;
        __int16 v13 = 2080;
        int v14 = v8;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Failed to create os_log_t object %s: %s!",  buf,  0x16u);
      }

      ++v4;
      unint64_t v10 = *(unsigned __int8 *)(a1 + 48);
      v3 += 16LL;
    }

    while (v4 < v10);
    uint64_t v2 = &off_10019D000;
  }

  else
  {
    LODWORD(v10) = 0;
    int v5 = 0;
  }

  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = *((void *)v2 + 338);
    LODWORD(v12) = v5;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "Created %d log object(s)!",  buf,  8u);
    LODWORD(v10) = *(unsigned __int8 *)(a1 + 48);
  }

  gLogSignpostObjects = *(void *)(a1 + 40);
  gNumLogSignpostObjects = v10;
}

uint64_t platform_nowPlaying_setPlaybackElapsedTime(unsigned int a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ACCNowPlayingServer sharedServer](&OBJC_CLASS___ACCNowPlayingServer, "sharedServer"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](&OBJC_CLASS___NSNumber, "numberWithLong:", a1));
  [v2 setPlaybackElapsedTime:v3];

  return 1LL;
}

uint64_t platform_nowPlaying_setPlaybackQueueIndex(unsigned int a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ACCNowPlayingServer sharedServer](&OBJC_CLASS___ACCNowPlayingServer, "sharedServer"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](&OBJC_CLASS___NSNumber, "numberWithLong:", a1));
  [v2 setPlaybackQueueIndex:v3];

  return 1LL;
}

uint64_t platform_nowPlaying_mediaItemAttributesUpdate(uint64_t a1)
{
  return accFeatureHandlers_invokeHandler(0LL, 4, a1);
}

uint64_t platform_nowPlaying_mediaItemArtworkUpdate(uint64_t a1)
{
  return accFeatureHandlers_invokeHandler(0LL, 5, a1);
}

uint64_t platform_nowPlaying_playbackAttributesUpdate(void *a1)
{
  id v1 = a1;
  int v2 = _gShouldSendMediaLibraryUID;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"AppBundleID"]);
  if (v3
    && (!platform_nowPlaying_playbackAttributesUpdate_appBundleID
     || ([(id)platform_nowPlaying_playbackAttributesUpdate_appBundleID isEqualToString:v3] & 1) == 0))
  {
    objc_storeStrong((id *)&platform_nowPlaying_playbackAttributesUpdate_appBundleID, v3);
    int v2 = 1;
  }

  unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"IsMusicApp"]);
  if (v4
    && (!platform_nowPlaying_playbackAttributesUpdate_isMusicAppNS
     || ([(id)platform_nowPlaying_playbackAttributesUpdate_isMusicAppNS isEqualToNumber:v4] & 1) == 0))
  {
    objc_storeStrong((id *)&platform_nowPlaying_playbackAttributesUpdate_isMusicAppNS, v4);
    int v2 = 1;
  }

  int v5 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"iTunesRadioStationIdentifier"]);
  if (!v5)
  {
LABEL_12:
    if (!v2) {
      goto LABEL_49;
    }
    goto LABEL_21;
  }

  uint64_t v6 = platform_nowPlaying_playbackAttributesUpdate_iTunesRadioStationIdentifier;
  if (platform_nowPlaying_playbackAttributesUpdate_iTunesRadioStationIdentifier)
  {
    if ([platform_nowPlaying_playbackAttributesUpdate_iTunesRadioStationIdentifier isEqualToString:v5]) {
      goto LABEL_12;
    }
    uint64_t v6 = platform_nowPlaying_playbackAttributesUpdate_iTunesRadioStationIdentifier;
  }

  if ((!-[__CFString isEqualToString:](v6, "isEqualToString:", &stru_100200A40)
     || [v5 isEqualToString:&stru_100200A40])
    && (([platform_nowPlaying_playbackAttributesUpdate_iTunesRadioStationIdentifier isEqualToString:&stru_100200A40] & 1) != 0 || !objc_msgSend(v5, "isEqualToString:", &stru_100200A40)))
  {
    objc_storeStrong((id *)&platform_nowPlaying_playbackAttributesUpdate_iTunesRadioStationIdentifier, v5);
    if ((v2 & 1) == 0) {
      goto LABEL_49;
    }
  }

  else
  {
    objc_storeStrong((id *)&platform_nowPlaying_playbackAttributesUpdate_iTunesRadioStationIdentifier, v5);
  }

uint64_t platform_nowPlaying_playbackQueueListChanged(unsigned int a1)
{
  return accFeatureHandlers_invokeHandler(0LL, 7, a1);
}

uint64_t platform_nowPlaying_playbackQueueListInfoResponse(const void *a1, uint64_t a2)
{
  return accFeatureHandlers_invokeHandler(a1, 8, a2);
}

void platform_nowPlaying_triggerMediaItemAttributesUpdate()
{
  id v0 = (id)objc_claimAutoreleasedReturnValue(+[ACCNowPlayingServer sharedServer](&OBJC_CLASS___ACCNowPlayingServer, "sharedServer"));
  [v0 triggerMediaItemAttributesUpdate];
}

void platform_nowPlaying_triggerMediaItemArtworkUpdate()
{
  id v0 = (id)objc_claimAutoreleasedReturnValue(+[ACCNowPlayingServer sharedServer](&OBJC_CLASS___ACCNowPlayingServer, "sharedServer"));
  [v0 triggerMediaItemArtworkUpdate];
}

void platform_nowPlaying_triggerPlaybackAttributesUpdate()
{
  _gShouldSendMediaLibraryUID = 1;
  id v0 = (id)objc_claimAutoreleasedReturnValue(+[ACCNowPlayingServer sharedServer](&OBJC_CLASS___ACCNowPlayingServer, "sharedServer"));
  [v0 triggerPlaybackAttributesUpdate];
}

void platform_nowPlaying_requestPlaybackQueueListInfo( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v10 = (id)objc_claimAutoreleasedReturnValue(+[ACCNowPlayingServer sharedServer](&OBJC_CLASS___ACCNowPlayingServer, "sharedServer"));
  [v10 requestPlaybackQueueListInfo:a1 requestID:a2 startIndex:a3 upToCount:a4 infoMask:a5];
}

void platform_nowPlaying_cancelRequestPlaybackQueueListInfo(uint64_t a1, uint64_t a2)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[ACCNowPlayingServer sharedServer](&OBJC_CLASS___ACCNowPlayingServer, "sharedServer"));
  [v4 cancelRequestPlaybackQueueListInfo:a1 requestID:a2];
}

void platform_nowPlaying_addSubscriber(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[ACCNowPlayingServer sharedServer](&OBJC_CLASS___ACCNowPlayingServer, "sharedServer"));
  [v2 addSubscriber:a1];
}

void platform_nowPlaying_removeSubscriber(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[ACCNowPlayingServer sharedServer](&OBJC_CLASS___ACCNowPlayingServer, "sharedServer"));
  [v2 removeSubscriber:a1];
}

void platform_nowPlaying_incrementUserCount()
{
  id v0 = (void *)objc_claimAutoreleasedReturnValue(+[ACCNowPlayingServer sharedServer](&OBJC_CLASS___ACCNowPlayingServer, "sharedServer"));
  [v0 incrementUserCount];

  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[ACCNowPlayingServer sharedServer](&OBJC_CLASS___ACCNowPlayingServer, "sharedServer"));
  unsigned int v2 = [v1 featureUserCount];

  if (v2 == 1)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[ACCFeaturePluginManager sharedManager](&OBJC_CLASS___ACCFeaturePluginManager, "sharedManager"));
    [v3 startPlugInsWithClasses:&off_100206AE8];
  }

void platform_nowPlaying_decrementUserCount()
{
  id v0 = (id)objc_claimAutoreleasedReturnValue(+[ACCNowPlayingServer sharedServer](&OBJC_CLASS___ACCNowPlayingServer, "sharedServer"));
  [v0 decrementUserCount];
}

uint64_t platform_nowPlaying_copyDefaultMediaItemAttributes()
{
  v1[0] = @"PersistentID";
  v1[1] = @"Title";
  v2[0] = &off_100206BD8;
  v2[1] = &stru_100200A40;
  v1[2] = @"PlaybackDurationMS";
  v1[3] = @"AlbumTitle";
  v2[2] = &off_100206BD8;
  v2[3] = &stru_100200A40;
  v1[4] = @"AlbumTrackNum";
  v1[5] = @"AlbumTrackCount";
  v2[4] = &off_100206BD8;
  v2[5] = &off_100206BD8;
  v1[6] = @"AlbumDiscNum";
  v1[7] = @"AlbumDiscCount";
  v2[6] = &off_100206BD8;
  v2[7] = &off_100206BD8;
  v1[8] = @"Artist";
  v1[9] = @"Genre";
  v2[8] = &stru_100200A40;
  v2[9] = &stru_100200A40;
  v1[10] = @"Composer";
  v1[11] = @"IsLikeSupported";
  v2[10] = &stru_100200A40;
  v2[11] = &__kCFBooleanFalse;
  v1[12] = @"IsBanSupported";
  v1[13] = @"IsLiked";
  v2[12] = &__kCFBooleanFalse;
  v2[13] = &__kCFBooleanFalse;
  v1[14] = @"IsBanned";
  v1[15] = @"ChapterCount";
  v2[14] = &__kCFBooleanFalse;
  v2[15] = &off_100206BD8;
  return objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v2,  v1,  16LL));
}

uint64_t platform_nowPlaying_copyDefaultMediaItemArtwork()
{
  return objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", 0LL, 0LL));
}

uint64_t platform_nowPlaying_copyDefaultPlaybackAttributes()
{
  v1[0] = @"Status";
  v1[1] = @"ElapsedTimeMS";
  v2[0] = &off_100206BF0;
  v2[1] = &off_100206BD8;
  v1[2] = @"QueueIndex";
  v1[3] = @"QueueCount";
  v2[2] = &off_100206BD8;
  v2[3] = &off_100206BD8;
  v1[4] = @"QueueChapterIndex";
  v1[5] = @"ShuffleMode";
  v2[4] = &off_100206BD8;
  v2[5] = &off_100206BF0;
  v1[6] = @"RepeatMode";
  v1[7] = @"AppName";
  v2[6] = &off_100206BF0;
  v2[7] = &stru_100200A40;
  v1[8] = @"MediaLibraryUID";
  v1[9] = @"iTunesRadioAd";
  v2[8] = &stru_100200A40;
  v2[9] = &__kCFBooleanFalse;
  v1[10] = @"iTunesRadioStation";
  v1[11] = @"iTunesRadioStationMediaPlaylistPersistentID";
  v2[10] = &stru_100200A40;
  v2[11] = &off_100206BD8;
  v1[12] = @"PlaybackSpeed";
  v1[13] = @"SetElapsedTimeAvailable";
  v2[12] = &off_100206BD8;
  v2[13] = &__kCFBooleanFalse;
  v1[14] = @"AppBundleID";
  v2[14] = &stru_100200A40;
  return objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v2,  v1,  15LL));
}

void platform_connectionInfo_accessoryConnectionAttached(const void *a1, uint64_t a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 9;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v6 = (os_log_s *)&_os_log_default;
    id v5 = &_os_log_default;
  }

  else
  {
    uint64_t v6 = (os_log_s *)*(id *)(gLogObjects + 64);
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v11 = 138412546;
    int v12 = a1;
    __int16 v13 = 1024;
    int v14 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "connectionInfo accessoryConnectionAttached: %@ type=%{coreacc:ACCConnection_Type_t}d",  (uint8_t *)&v11,  0x12u);
  }

  if (a1)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[ACCConnectionInfoServer sharedServer](&OBJC_CLASS___ACCConnectionInfoServer, "sharedServer"));
    [v7 incrementUserCount];

    id v8 = platform_connectionInfo_accessoryInfoForConnection(a1);
    BOOL v9 = platform_connectionInfo_accessoryPropertiesForConnection(a1);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[ACCConnectionInfoServer sharedServer](&OBJC_CLASS___ACCConnectionInfoServer, "sharedServer"));
    [v10 accessoryConnectionAttached:a1 type:a2 info:v8 properties:v9];
  }

int64x2_t *platform_connectionInfo_accessoryInfoForConnection(const void *a1)
{
  if (!a1) {
    return 0LL;
  }
  ConnectionWithUUID = acc_manager_getConnectionWithUUID(a1);
  if (!ConnectionWithUUID || ConnectionWithUUID[142]) {
    return 0LL;
  }
  uint64_t AccessoryInfo = acc_connection_getAccessoryInfo((uint64_t)ConnectionWithUUID);
  return acc_accInfo_copyAccessoryInfoDictionary(AccessoryInfo);
}

CFDictionaryRef platform_connectionInfo_accessoryPropertiesForConnection(const void *a1)
{
  if (!a1) {
    return 0LL;
  }
  ConnectionWithUUID = (const __CFDictionary *)acc_manager_getConnectionWithUUID(a1);
  if (!ConnectionWithUUID) {
    return 0LL;
  }
  uint64_t v2 = (uint64_t)ConnectionWithUUID;
  if (*((_BYTE *)ConnectionWithUUID + 142)) {
    return 0LL;
  }
  BOOL v4 = acc_connection_copyProperties(ConnectionWithUUID);
  if (!v4) {
    return 0LL;
  }
  id v5 = v4;
  uint64_t v6 = _platform_connectionInfo_addAuthInfo(v2, v4);
  CFRelease(v5);
  return v6;
}

void platform_connectionInfo_accessoryConnectionDetached(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 9;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  else
  {
    BOOL v4 = (os_log_s *)*(id *)(gLogObjects + 64);
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v7 = 138412290;
    uint64_t v8 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "connectionInfo accessoryConnectionDetached: %@",  (uint8_t *)&v7,  0xCu);
  }

  if (a1)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[ACCConnectionInfoServer sharedServer](&OBJC_CLASS___ACCConnectionInfoServer, "sharedServer"));
    [v5 accessoryConnectionDetached:a1];

    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[ACCConnectionInfoServer sharedServer](&OBJC_CLASS___ACCConnectionInfoServer, "sharedServer"));
    [v6 decrementUserCount];
  }

void platform_connectionInfo_accessoryEndpointAttached(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  if (gLogObjects) {
    BOOL v8 = gNumLogObjects < 9;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v10 = (os_log_s *)&_os_log_default;
    id v9 = &_os_log_default;
  }

  else
  {
    id v10 = (os_log_s *)*(id *)(gLogObjects + 64);
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    int v13 = 138413058;
    uint64_t v14 = a1;
    __int16 v15 = 2112;
    int v16 = a2;
    __int16 v17 = 1024;
    int v18 = a3;
    __int16 v19 = 1024;
    int v20 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "connectionInfo accessoryEndpointAttached: %@ - %@ transport=%{coreacc:ACCEndpoint_TransportType_t}d protocol=%{cor eacc:ACCEndpoint_Protocol_t}d",  (uint8_t *)&v13,  0x22u);
  }

  if (a1)
  {
    int v11 = platform_connectionInfo_accessoryPropertiesForEndpoint(a1, a2);
    int v12 = (void *)objc_claimAutoreleasedReturnValue(+[ACCConnectionInfoServer sharedServer](&OBJC_CLASS___ACCConnectionInfoServer, "sharedServer"));
    [v12 accessoryEndpointAttached:a2 transportType:a3 protocol:a4 properties:v11 forConnection:a1];
  }

pthread_mutex_t *platform_connectionInfo_accessoryPropertiesForEndpoint(uint64_t a1, const void *a2)
{
  BOOL v2 = 0LL;
  if (!a1 || !a2) {
    return v2;
  }
  EndpointWithUUID = (pthread_mutex_t *)acc_manager_getEndpointWithUUID(a2);
  p_sig = &EndpointWithUUID->__sig;
  BOOL v2 = acc_endpoint_copyProperties(EndpointWithUUID);
  if (!v2 || !*p_sig) {
    return v2;
  }
  uint64_t v6 = _platform_connectionInfo_addAuthInfo(*p_sig, (CFDictionaryRef)v2);
  CFRelease(v2);
  return (pthread_mutex_t *)v6;
}

void platform_connectionInfo_accessoryEndpointDetached(uint64_t a1, uint64_t a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 9;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v6 = (os_log_s *)&_os_log_default;
    id v5 = &_os_log_default;
  }

  else
  {
    uint64_t v6 = (os_log_s *)*(id *)(gLogObjects + 64);
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v8 = 138412546;
    uint64_t v9 = a1;
    __int16 v10 = 2112;
    uint64_t v11 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "connectionInfo accessoryEndpointDetached: %@ - %@",  (uint8_t *)&v8,  0x16u);
  }

  if (a1)
  {
    int v7 = (void *)objc_claimAutoreleasedReturnValue(+[ACCConnectionInfoServer sharedServer](&OBJC_CLASS___ACCConnectionInfoServer, "sharedServer"));
    [v7 accessoryEndpointDetached:a2 forConnection:a1];
  }

void platform_connectionInfo_accessoryEndpointProtocolUpdate(uint64_t a1, const void *a2, uint64_t a3)
{
  if (gLogObjects) {
    BOOL v6 = gNumLogObjects < 9;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v8 = (os_log_s *)&_os_log_default;
    id v7 = &_os_log_default;
  }

  else
  {
    int v8 = (os_log_s *)*(id *)(gLogObjects + 64);
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    int v11 = 138412802;
    uint64_t v12 = a1;
    __int16 v13 = 2112;
    uint64_t v14 = a2;
    __int16 v15 = 1024;
    int v16 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "connectionInfo accessoryEndpointProtocolUpdate: %@ - %@ protocol=%{coreacc:ACCEndpoint_Protocol_t}d",  (uint8_t *)&v11,  0x1Cu);
  }

  if (a1)
  {
    uint64_t v9 = platform_connectionInfo_accessoryPropertiesForEndpoint(a1, a2);
    __int16 v10 = (void *)objc_claimAutoreleasedReturnValue(+[ACCConnectionInfoServer sharedServer](&OBJC_CLASS___ACCConnectionInfoServer, "sharedServer"));
    [v10 accessoryEndpointUpdate:a2 protocol:a3 properties:v9 forConnection:a1];
  }

void platform_connectionInfo_accessoryConnectionInfoPropertyChanged(const void *a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 9;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  else
  {
    BOOL v4 = (os_log_s *)*(id *)(gLogObjects + 64);
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v7 = 138412290;
    int v8 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "connectionInfo accessoryConnectionInfoPropertyChanged: %@",  (uint8_t *)&v7,  0xCu);
  }

  if (a1)
  {
    id v5 = platform_connectionInfo_accessoryPropertiesForConnection(a1);
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue(+[ACCConnectionInfoServer sharedServer](&OBJC_CLASS___ACCConnectionInfoServer, "sharedServer"));
    [v6 accessoryConnectionInfoPropertyChanged:a1 properties:v5];
  }

void platform_connectionInfo_accessoryEndpointInfoPropertyChanged(uint64_t a1, const void *a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 9;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v6 = (os_log_s *)&_os_log_default;
    id v5 = &_os_log_default;
  }

  else
  {
    BOOL v6 = (os_log_s *)*(id *)(gLogObjects + 64);
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v9 = 138412546;
    uint64_t v10 = a1;
    __int16 v11 = 2112;
    uint64_t v12 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "connectionInfo accessoryEndpointInfoPropertyChanged: %@ - %@",  (uint8_t *)&v9,  0x16u);
  }

  if (a1)
  {
    if (a2)
    {
      int v7 = platform_connectionInfo_accessoryPropertiesForEndpoint(a1, a2);
      int v8 = (void *)objc_claimAutoreleasedReturnValue(+[ACCConnectionInfoServer sharedServer](&OBJC_CLASS___ACCConnectionInfoServer, "sharedServer"));
      [v8 accessoryEndpointInfoPropertyChanged:a2 properties:v7 forConnection:a1];
    }
  }

CFSetRef platform_connectionInfo_accessoryConnections()
{
  id v0 = acc_manager_copyAllConnections();
  CFSetRef Keys = CFDictionaryGetKeys(v0, 1);
  if (v0) {
    CFRelease(v0);
  }
  return Keys;
}

CFSetRef platform_connectionInfo_accessoryEndpoints(const void *a1)
{
  if (!a1) {
    return 0LL;
  }
  ConnectionWithUUID = acc_manager_getConnectionWithUUID(a1);
  if (!ConnectionWithUUID || ConnectionWithUUID[142]) {
    return 0LL;
  }
  Endpoints = (const __CFDictionary *)acc_connection_getEndpoints((uint64_t)ConnectionWithUUID);
  return CFDictionaryGetKeys(Endpoints, 1);
}

uint64_t platform_connectionInfo_accessoryConnectionType(const void *a1)
{
  if (!a1) {
    return 11LL;
  }
  ConnectionWithUUID = (unsigned int *)acc_manager_getConnectionWithUUID(a1);
  if (ConnectionWithUUID) {
    return ConnectionWithUUID[2];
  }
  else {
    return 11LL;
  }
}

uint64_t platform_connectionInfo_endpointTransportType(uint64_t a1, const void *a2)
{
  uint64_t result = 17LL;
  if (a1 && a2)
  {
    EndpointWithUUID = (unsigned int *)acc_manager_getEndpointWithUUID(a2);
    else {
      return 17LL;
    }
  }

  return result;
}

unsigned int *platform_connectionInfo_endpointProtocol(uint64_t a1, const void *a2)
{
  uint64_t result = 0LL;
  if (a1 && a2)
  {
    uint64_t result = (unsigned int *)acc_manager_getEndpointWithUUID(a2);
    if (result) {
      return (unsigned int *)result[7];
    }
  }

  return result;
}

int64x2_t *platform_connectionInfo_accessoryInfoForEndpoint(uint64_t a1, const void *a2)
{
  if (!a1) {
    return 0LL;
  }
  if (!a2) {
    return 0LL;
  }
  EndpointWithUUID = acc_manager_getEndpointWithUUID(a2);
  uint64_t AccessoryInfo = acc_endpoint_getAccessoryInfo((uint64_t)EndpointWithUUID);
  return acc_accInfo_copyAccessoryInfoDictionary(AccessoryInfo);
}

uint64_t platform_connectionInfo_accessoryPropertyForConnection(const void *a1, void *a2)
{
  uint64_t v2 = 0LL;
  if (a1)
  {
    if (a2)
    {
      ConnectionWithUUID = acc_manager_getConnectionWithUUID(a1);
      uint64_t v2 = (uint64_t)ConnectionWithUUID;
      if (ConnectionWithUUID)
      {
        if (ConnectionWithUUID[142]) {
          return 0LL;
        }
        id v5 = a2;
        if ([v5 isEqualToString:kACCExternalAccessoryMacAddressKey])
        {
          if (*(_DWORD *)(v2 + 8) != 2 || (BOOL v6 = *(const __CFString **)(v2 + 16)) == 0LL)
          {
            uint64_t v2 = 0LL;
LABEL_24:

            return v2;
          }

          CFStringRef Copy = (void *)CFStringCreateCopy(kCFAllocatorDefault, v6);
        }

        else if ([v5 isEqualToString:kACCExternalAccessoryCertSerialNumberKey])
        {
          CFStringRef Copy = oobPairing_endpoint_copyCachedOOBPairingData(v2 + 48);
        }

        else if ([v5 isEqualToString:kACCExternalAccessoryCertDataKey])
        {
          CFStringRef Copy = oobPairing_endpoint_copyCachedOOBPairingInfo(v2 + 48);
        }

        else if ([v5 isEqualToString:kACCExternalAccessoryAuthStatusKey])
        {
          int valuePtr = acc_connection_getAuthStatus(v2, 0LL);
          if (!valuePtr)
          {
            int valuePtr = acc_connection_getAuthStatus(v2, 1LL);
            if (!valuePtr)
            {
              int valuePtr = acc_connection_getAuthStatus(v2, 2LL);
              if (!valuePtr)
              {
                int valuePtr = acc_connection_getAuthStatus(v2, 3LL);
                if (!valuePtr) {
                  int valuePtr = acc_connection_getAuthStatus(v2, 4LL);
                }
              }
            }
          }

          CFStringRef Copy = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
        }

        else
        {
          CFStringRef Copy = acc_connection_copyProperty((char *)v2, v5);
        }

        uint64_t v2 = (uint64_t)Copy;
        goto LABEL_24;
      }
    }
  }

  return v2;
}

_BYTE *platform_connectionInfo_accessoryPropertyForEndpoint(uint64_t a1, const void *a2, void *a3)
{
  id v3 = 0LL;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        EndpointWithUUID = acc_manager_getEndpointWithUUID(a2);
        id v3 = EndpointWithUUID;
        if (EndpointWithUUID)
        {
          id v6 = a3;
          if ([v6 isEqualToString:kACCExternalAccessoryMacAddressKey])
          {
            if ((*((_DWORD *)v3 + 6) & 0xFFFFFFFE) == 2)
            {
              int v7 = (const __CFString *)*((void *)v3 + 4);
              if (v7)
              {
                CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, v7);
LABEL_25:
                id v3 = Copy;
                goto LABEL_26;
              }
            }
          }

          else
          {
            if ([v6 isEqualToString:kACCExternalAccessoryCertSerialNumberKey])
            {
              CFStringRef Copy = oobPairing_endpoint_copyCachedOOBPairingData(*(void *)v3 + 48LL);
              goto LABEL_25;
            }

            if ([v6 isEqualToString:kACCExternalAccessoryCertDataKey])
            {
              CFStringRef Copy = oobPairing_endpoint_copyCachedOOBPairingInfo(*(void *)v3 + 48LL);
              goto LABEL_25;
            }

            if (![v6 isEqualToString:kACCExternalAccessoryAuthStatusKey])
            {
              CFStringRef Copy = acc_endpoint_copyProperty((pthread_mutex_t *)v3, v6);
              goto LABEL_25;
            }

            if (*(void *)v3)
            {
              int valuePtr = acc_connection_getAuthStatus(*(void *)v3, 0LL);
              if (!valuePtr)
              {
                int valuePtr = acc_connection_getAuthStatus(*(void *)v3, 1LL);
                if (!valuePtr)
                {
                  int valuePtr = acc_connection_getAuthStatus(*(void *)v3, 2LL);
                  if (!valuePtr)
                  {
                    int valuePtr = acc_connection_getAuthStatus(*(void *)v3, 3LL);
                    if (!valuePtr) {
                      int valuePtr = acc_connection_getAuthStatus(*(void *)v3, 4LL);
                    }
                  }
                }
              }

              CFStringRef Copy = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
              goto LABEL_25;
            }
          }

          id v3 = 0LL;
LABEL_26:
        }
      }
    }
  }

  return v3;
}

void platform_connectionInfo_setAccessoryUserName( const __CFString *a1, uint64_t a2, const void *a3, void *a4)
{
  int v7 = a4;
  int v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSCocoaErrorDomain,  -1LL,  0LL));
  if (!a2 || !a3) {
    goto LABEL_36;
  }
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  *(_OWORD *)buffer = 0u;
  CFIndex Length = CFStringGetLength(a1);
  int CString = CFStringGetCString(a1, buffer, Length + 1, 0x8000100u);
  if (!gLogObjects) {
    goto LABEL_40;
  }
  if (gNumLogObjects >= 9)
  {
    __int16 v11 = (os_log_s *)*(id *)(gLogObjects + 64);
  }

  else
  {
LABEL_40:
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v11 = (os_log_s *)&_os_log_default;
    id v12 = &_os_log_default;
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v21[0] = 67109378;
    v21[1] = CString != 0;
    __int16 v22 = 2080;
    __int16 v23 = buffer;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "platform_connectionInfo_setAccessoryUserName: %d, %s",  (uint8_t *)v21,  0x12u);
  }

  EndpointWithUUID = acc_manager_getEndpointWithUUID(a3);
  uint64_t v14 = (uint64_t)EndpointWithUUID;
  if (gLogObjects) {
    BOOL v15 = gNumLogObjects <= 8;
  }
  else {
    BOOL v15 = 1;
  }
  int v16 = !v15;
  if (*((_DWORD *)EndpointWithUUID + 7) != 14)
  {
    if (v16)
    {
      int v18 = (os_log_s *)*(id *)(gLogObjects + 64);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v18 = (os_log_s *)&_os_log_default;
      id v20 = &_os_log_default;
    }

    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_setAccessoryUserName_cold_2(v14);
    }

LABEL_36:
    v7[2](v7, v8);
    goto LABEL_37;
  }

  if (v16)
  {
    __int16 v17 = (os_log_s *)*(id *)(gLogObjects + 64);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v17 = (os_log_s *)&_os_log_default;
    id v19 = &_os_log_default;
  }

  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v21[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "platform_connectionInfo_setAccessoryUserName",  (uint8_t *)v21,  2u);
  }

  mfi4Auth_endpoint_setAccessoryUserName(*(void *)(v14 + 56), (uint64_t)a1, (uint64_t)v7);
LABEL_37:
}

void platform_connectionInfo_getAccessoryUserName(uint64_t a1, const void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSCocoaErrorDomain,  -1LL,  0LL));
  if (!a1 || !a2 || (EndpointWithUUID = acc_manager_getEndpointWithUUID(a2)) == 0LL)
  {
LABEL_28:
    v5[2](v5, 0LL, v6);
    goto LABEL_29;
  }

  uint64_t v8 = (uint64_t)EndpointWithUUID;
  if (gLogObjects) {
    BOOL v9 = gNumLogObjects <= 8;
  }
  else {
    BOOL v9 = 1;
  }
  int v10 = !v9;
  if (*((_DWORD *)EndpointWithUUID + 7) != 14)
  {
    if (v10)
    {
      id v12 = (os_log_s *)*(id *)(gLogObjects + 64);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v12 = (os_log_s *)&_os_log_default;
      id v14 = &_os_log_default;
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_getAccessoryUserName_cold_2(v8);
    }

    goto LABEL_28;
  }

  if (v10)
  {
    __int16 v11 = (os_log_s *)*(id *)(gLogObjects + 64);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v11 = (os_log_s *)&_os_log_default;
    id v13 = &_os_log_default;
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v15[0] = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "platform_connectionInfo_getAccessoryUserName",  (uint8_t *)v15,  2u);
  }

  mfi4Auth_endpoint_getAccessoryUserName(*(void *)(v8 + 56), (uint64_t)v5);
LABEL_29:
}

_DWORD *platform_connectionInfo_getPairingStatus(const void *a1, const void *a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 9;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v6 = (os_log_s *)&_os_log_default;
    id v5 = &_os_log_default;
  }

  else
  {
    id v6 = (os_log_s *)*(id *)(gLogObjects + 64);
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "platform_connectionInfo_getPairingStatus",  buf,  2u);
  }

  uint64_t result = 0LL;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = acc_manager_getEndpointWithUUID(a2);
      if (result)
      {
        uint64_t v8 = (uint64_t)result;
        if (!*((_BYTE *)result + 120))
        {
          if (gLogObjects) {
            BOOL v9 = gNumLogObjects <= 8;
          }
          else {
            BOOL v9 = 1;
          }
          int v10 = !v9;
          if (result[7] == 14)
          {
            if (v10)
            {
              __int16 v11 = (os_log_s *)*(id *)(gLogObjects + 64);
            }

            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
              __int16 v11 = (os_log_s *)&_os_log_default;
              id v13 = &_os_log_default;
            }

            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)BOOL v15 = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "platform_connectionInfo_getPairingStatus",  v15,  2u);
            }

            uint64_t result = acc_manager_getConnectionWithUUID(a1);
            if (result) {
              return (_DWORD *)acc_connection_getPairingStatus((uint64_t)result);
            }
            return result;
          }

          if (v10)
          {
            id v12 = (os_log_s *)*(id *)(gLogObjects + 64);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            id v12 = (os_log_s *)&_os_log_default;
            id v14 = &_os_log_default;
          }

          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_getPairingStatus_cold_2(v8);
          }
        }

        return 0LL;
      }
    }
  }

  return result;
}

void platform_connectionInfo_provisionPairing(uint64_t a1, const void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSCocoaErrorDomain,  -1LL,  0LL));
  if (!a1 || !a2 || (EndpointWithUUID = acc_manager_getEndpointWithUUID(a2)) == 0LL)
  {
LABEL_28:
    v5[2](v5, v6);
    goto LABEL_29;
  }

  uint64_t v8 = (uint64_t)EndpointWithUUID;
  if (gLogObjects) {
    BOOL v9 = gNumLogObjects <= 8;
  }
  else {
    BOOL v9 = 1;
  }
  int v10 = !v9;
  if (*((_DWORD *)EndpointWithUUID + 7) != 14)
  {
    if (v10)
    {
      id v12 = (os_log_s *)*(id *)(gLogObjects + 64);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v12 = (os_log_s *)&_os_log_default;
      id v14 = &_os_log_default;
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_provisionPairing_cold_2(v8);
    }

    goto LABEL_28;
  }

  if (v10)
  {
    __int16 v11 = (os_log_s *)*(id *)(gLogObjects + 64);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v11 = (os_log_s *)&_os_log_default;
    id v13 = &_os_log_default;
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v15[0] = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[FindMy] platform_connectionInfo_provisionPairing",  (uint8_t *)v15,  2u);
  }

  mfi4Auth_endpoint_provisionPairing(*(void *)(v8 + 56), (uint64_t)v5);
LABEL_29:
}

void platform_connectionInfo_resetPairing(uint64_t a1, const void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSCocoaErrorDomain,  -1LL,  0LL));
  if (!a1)
  {
    id v18 = logObjectForModule();
    id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_49;
    }
    __int16 v30 = 0;
    id v20 = "platform_connectionInfo_resetPairing: !accessoryConnectionUUID";
    uint64_t v21 = (uint8_t *)&v30;
LABEL_48:
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v20, v21, 2u);
    goto LABEL_49;
  }

  if (!a2)
  {
    id v22 = logObjectForModule();
    id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_49;
    }
    __int16 v29 = 0;
    id v20 = "platform_connectionInfo_resetPairing: !accessoryEndpointUUID";
    uint64_t v21 = (uint8_t *)&v29;
    goto LABEL_48;
  }

  if (gLogObjects) {
    BOOL v7 = gNumLogObjects < 9;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v9 = (os_log_s *)&_os_log_default;
    id v8 = &_os_log_default;
  }

  else
  {
    BOOL v9 = (os_log_s *)*(id *)(gLogObjects + 64);
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "platform_connectionInfo_resetPairing", buf, 2u);
  }

  EndpointWithUUID = acc_manager_getEndpointWithUUID(a2);
  if (!EndpointWithUUID)
  {
    id v23 = logObjectForModule();
    id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_49;
    }
    __int16 v27 = 0;
    id v20 = "platform_connectionInfo_resetPairing: !pEndpoint";
    uint64_t v21 = (uint8_t *)&v27;
    goto LABEL_48;
  }

  uint64_t v11 = (uint64_t)EndpointWithUUID;
  if (EndpointWithUUID[120])
  {
    id v24 = logObjectForModule();
    id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 v26 = 0;
      id v20 = "platform_connectionInfo_resetPairing: destroyingEndpoint";
      uint64_t v21 = v26;
      goto LABEL_48;
    }

void platform_connectionInfo_getPublicNvmKeyValues(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  BOOL v7 = a4;
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSCocoaErrorDomain,  -1LL,  0LL));
  if (!a1)
  {
    id v13 = logObjectForModule();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_27;
    }
    __int16 v23 = 0;
    BOOL v15 = "platform_connectionInfo_getPublicNvmKeyValues: !accessoryConnectionUUID";
    id v16 = (uint8_t *)&v23;
LABEL_26:
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v15, v16, 2u);
    goto LABEL_27;
  }

  if (!a2)
  {
    id v17 = logObjectForModule();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_27;
    }
    __int16 v22 = 0;
    BOOL v15 = "platform_connectionInfo_getPublicNvmKeyValues: !accessoryEndpointUUID";
    id v16 = (uint8_t *)&v22;
    goto LABEL_26;
  }

  EndpointWithUUID = acc_manager_getEndpointWithUUID(a2);
  if (!EndpointWithUUID)
  {
    id v18 = logObjectForModule();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_27;
    }
    __int16 v21 = 0;
    BOOL v15 = "platform_connectionInfo_getPublicNvmKeyValues: !pEndpoint";
    id v16 = (uint8_t *)&v21;
    goto LABEL_26;
  }

  uint64_t v10 = (uint64_t)EndpointWithUUID;
  if (*((_BYTE *)EndpointWithUUID + 120))
  {
    id v19 = logObjectForModule();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v20 = 0;
      BOOL v15 = "platform_connectionInfo_getPublicNvmKeyValues: !pEndpoint";
      id v16 = (uint8_t *)&v20;
      goto LABEL_26;
    }

void platform_connectionInfo_setPublicNvmKeyValues(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  BOOL v7 = a4;
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSCocoaErrorDomain,  -1LL,  0LL));
  if (!a1 || !a2 || (EndpointWithUUID = acc_manager_getEndpointWithUUID(a2)) == 0LL)
  {
LABEL_28:
    v7[2](v7, v8);
    goto LABEL_29;
  }

  uint64_t v10 = (uint64_t)EndpointWithUUID;
  if (gLogObjects) {
    BOOL v11 = gNumLogObjects <= 8;
  }
  else {
    BOOL v11 = 1;
  }
  int v12 = !v11;
  if (*((_DWORD *)EndpointWithUUID + 7) != 14)
  {
    if (v12)
    {
      id v14 = (os_log_s *)*(id *)(gLogObjects + 64);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v14 = (os_log_s *)&_os_log_default;
      id v16 = &_os_log_default;
    }

    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_setPublicNvmKeyValues_cold_2(v10);
    }

    goto LABEL_28;
  }

  if (v12)
  {
    id v13 = (os_log_s *)*(id *)(gLogObjects + 64);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v13 = (os_log_s *)&_os_log_default;
    id v15 = &_os_log_default;
  }

  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v17[0] = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "platform_connectionInfo_setPublicNvmKeyValues",  (uint8_t *)v17,  2u);
  }

  mfi4Auth_endpoint_setPublicNvmKeyValues(*(void *)(v10 + 56), a3, (uint64_t)v7);
LABEL_29:
}

void platform_connectionInfo_getPrivateNvmKeyValues(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  BOOL v7 = a4;
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSCocoaErrorDomain,  -1LL,  0LL));
  if (!a1 || !a2 || (EndpointWithUUID = acc_manager_getEndpointWithUUID(a2)) == 0LL)
  {
LABEL_28:
    v7[2](v7, 0LL, v8);
    goto LABEL_29;
  }

  uint64_t v10 = (uint64_t)EndpointWithUUID;
  if (gLogObjects) {
    BOOL v11 = gNumLogObjects <= 8;
  }
  else {
    BOOL v11 = 1;
  }
  int v12 = !v11;
  if (*((_DWORD *)EndpointWithUUID + 7) != 14)
  {
    if (v12)
    {
      id v14 = (os_log_s *)*(id *)(gLogObjects + 64);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v14 = (os_log_s *)&_os_log_default;
      id v16 = &_os_log_default;
    }

    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_getPrivateNvmKeyValues_cold_2(v10);
    }

    goto LABEL_28;
  }

  if (v12)
  {
    id v13 = (os_log_s *)*(id *)(gLogObjects + 64);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v13 = (os_log_s *)&_os_log_default;
    id v15 = &_os_log_default;
  }

  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v17[0] = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "platform_connectionInfo_getPrivateNvmKeyValues",  (uint8_t *)v17,  2u);
  }

  mfi4Auth_endpoint_getPrivateNvmKeyValues(*(void *)(v10 + 56), a3, (uint64_t)v7);
LABEL_29:
}

void platform_connectionInfo_setPrivateNvmKeyValues(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  BOOL v7 = a4;
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSCocoaErrorDomain,  -1LL,  0LL));
  if (!a1 || !a2 || (EndpointWithUUID = acc_manager_getEndpointWithUUID(a2)) == 0LL)
  {
LABEL_28:
    v7[2](v7, v8);
    goto LABEL_29;
  }

  uint64_t v10 = (uint64_t)EndpointWithUUID;
  if (gLogObjects) {
    BOOL v11 = gNumLogObjects <= 8;
  }
  else {
    BOOL v11 = 1;
  }
  int v12 = !v11;
  if (*((_DWORD *)EndpointWithUUID + 7) != 14)
  {
    if (v12)
    {
      id v14 = (os_log_s *)*(id *)(gLogObjects + 64);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v14 = (os_log_s *)&_os_log_default;
      id v16 = &_os_log_default;
    }

    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_setPrivateNvmKeyValues_cold_2(v10);
    }

    goto LABEL_28;
  }

  if (v12)
  {
    id v13 = (os_log_s *)*(id *)(gLogObjects + 64);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v13 = (os_log_s *)&_os_log_default;
    id v15 = &_os_log_default;
  }

  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v17[0] = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "platform_connectionInfo_setPrivateNvmKeyValues",  (uint8_t *)v17,  2u);
  }

  mfi4Auth_endpoint_setPrivateNvmKeyValues(*(void *)(v10 + 56), a3, (uint64_t)v7);
LABEL_29:
}

void platform_connectionInfo_beginVendorKeyErase(uint64_t a1, const void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSCocoaErrorDomain,  -1LL,  0LL));
  if (!a1 || !a2 || (EndpointWithUUID = acc_manager_getEndpointWithUUID(a2)) == 0LL)
  {
LABEL_28:
    v5[2](v5, 0LL, v6);
    goto LABEL_29;
  }

  uint64_t v8 = (uint64_t)EndpointWithUUID;
  if (gLogObjects) {
    BOOL v9 = gNumLogObjects <= 8;
  }
  else {
    BOOL v9 = 1;
  }
  int v10 = !v9;
  if (*((_DWORD *)EndpointWithUUID + 7) != 14)
  {
    if (v10)
    {
      int v12 = (os_log_s *)*(id *)(gLogObjects + 64);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v12 = (os_log_s *)&_os_log_default;
      id v14 = &_os_log_default;
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_beginVendorKeyErase_cold_2(v8);
    }

    goto LABEL_28;
  }

  if (v10)
  {
    BOOL v11 = (os_log_s *)*(id *)(gLogObjects + 64);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v11 = (os_log_s *)&_os_log_default;
    id v13 = &_os_log_default;
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v15[0] = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "platform_connectionInfo_beginVendorKeyErase",  (uint8_t *)v15,  2u);
  }

  mfi4Auth_endpoint_beginVendorKeyErase(*(void *)(v8 + 56), (uint64_t)v5);
LABEL_29:
}

void platform_connectionInfo_continueVendorKeyErase( uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  BOOL v11 = a6;
  int v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSCocoaErrorDomain,  -1LL,  0LL));
  if (!a1 || !a2 || (EndpointWithUUID = acc_manager_getEndpointWithUUID(a2)) == 0LL)
  {
LABEL_28:
    v11[2](v11, v12);
    goto LABEL_29;
  }

  uint64_t v14 = (uint64_t)EndpointWithUUID;
  if (gLogObjects) {
    BOOL v15 = gNumLogObjects <= 8;
  }
  else {
    BOOL v15 = 1;
  }
  int v16 = !v15;
  if (*((_DWORD *)EndpointWithUUID + 7) != 14)
  {
    if (v16)
    {
      id v18 = (os_log_s *)*(id *)(gLogObjects + 64);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v18 = (os_log_s *)&_os_log_default;
      id v20 = &_os_log_default;
    }

    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_continueVendorKeyErase_cold_2(v14);
    }

    goto LABEL_28;
  }

  if (v16)
  {
    id v17 = (os_log_s *)*(id *)(gLogObjects + 64);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v17 = (os_log_s *)&_os_log_default;
    id v19 = &_os_log_default;
  }

  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    v21[0] = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "platform_connectionInfo_continueVendorKeyErase",  (uint8_t *)v21,  2u);
  }

  mfi4Auth_endpoint_continueVendorKeyErase(*(void *)(v14 + 56), a3, a4, a5, (uint64_t)v11);
LABEL_29:
}

void platform_connectionInfo_cancelVendorKeyErase(uint64_t a1, const void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSCocoaErrorDomain,  -1LL,  0LL));
  if (!a1 || !a2 || (EndpointWithUUID = acc_manager_getEndpointWithUUID(a2)) == 0LL)
  {
LABEL_28:
    v5[2](v5, v6);
    goto LABEL_29;
  }

  uint64_t v8 = (uint64_t)EndpointWithUUID;
  if (gLogObjects) {
    BOOL v9 = gNumLogObjects <= 8;
  }
  else {
    BOOL v9 = 1;
  }
  int v10 = !v9;
  if (*((_DWORD *)EndpointWithUUID + 7) != 14)
  {
    if (v10)
    {
      int v12 = (os_log_s *)*(id *)(gLogObjects + 64);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v12 = (os_log_s *)&_os_log_default;
      id v14 = &_os_log_default;
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_cancelVendorKeyErase_cold_2(v8);
    }

    goto LABEL_28;
  }

  if (v10)
  {
    BOOL v11 = (os_log_s *)*(id *)(gLogObjects + 64);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v11 = (os_log_s *)&_os_log_default;
    id v13 = &_os_log_default;
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v15[0] = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "platform_connectionInfo_cancelVendorKeyErase",  (uint8_t *)v15,  2u);
  }

  mfi4Auth_endpoint_cancelVendorKeyErase(*(void *)(v8 + 56), (uint64_t)v5);
LABEL_29:
}

void platform_connectionInfo_beginUserKeyErase(uint64_t a1, const void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSCocoaErrorDomain,  -1LL,  0LL));
  if (!a1 || !a2 || (EndpointWithUUID = acc_manager_getEndpointWithUUID(a2)) == 0LL)
  {
LABEL_28:
    v5[2](v5, 0LL, v6);
    goto LABEL_29;
  }

  uint64_t v8 = (uint64_t)EndpointWithUUID;
  if (gLogObjects) {
    BOOL v9 = gNumLogObjects <= 8;
  }
  else {
    BOOL v9 = 1;
  }
  int v10 = !v9;
  if (*((_DWORD *)EndpointWithUUID + 7) != 14)
  {
    if (v10)
    {
      int v12 = (os_log_s *)*(id *)(gLogObjects + 64);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v12 = (os_log_s *)&_os_log_default;
      id v14 = &_os_log_default;
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_beginUserKeyErase_cold_2(v8);
    }

    goto LABEL_28;
  }

  if (v10)
  {
    BOOL v11 = (os_log_s *)*(id *)(gLogObjects + 64);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v11 = (os_log_s *)&_os_log_default;
    id v13 = &_os_log_default;
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v15[0] = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "platform_connectionInfo_beginUserKeyErase",  (uint8_t *)v15,  2u);
  }

  mfi4Auth_endpoint_beginUserKeyErase(*(void *)(v8 + 56), (uint64_t)v5);
LABEL_29:
}

void platform_connectionInfo_continueUserKeyErase( uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  BOOL v11 = a6;
  int v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSCocoaErrorDomain,  -1LL,  0LL));
  if (!a1 || !a2 || (EndpointWithUUID = acc_manager_getEndpointWithUUID(a2)) == 0LL)
  {
LABEL_28:
    v11[2](v11, v12);
    goto LABEL_29;
  }

  uint64_t v14 = (uint64_t)EndpointWithUUID;
  if (gLogObjects) {
    BOOL v15 = gNumLogObjects <= 8;
  }
  else {
    BOOL v15 = 1;
  }
  int v16 = !v15;
  if (*((_DWORD *)EndpointWithUUID + 7) != 14)
  {
    if (v16)
    {
      id v18 = (os_log_s *)*(id *)(gLogObjects + 64);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v18 = (os_log_s *)&_os_log_default;
      id v20 = &_os_log_default;
    }

    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_continueUserKeyErase_cold_2(v14);
    }

    goto LABEL_28;
  }

  if (v16)
  {
    id v17 = (os_log_s *)*(id *)(gLogObjects + 64);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v17 = (os_log_s *)&_os_log_default;
    id v19 = &_os_log_default;
  }

  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    v21[0] = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "platform_connectionInfo_continueUserKeyErase",  (uint8_t *)v21,  2u);
  }

  mfi4Auth_endpoint_continueUserKeyErase(*(void *)(v14 + 56), a3, a4, a5, (uint64_t)v11);
LABEL_29:
}

void platform_connectionInfo_cancelUserKeyErase(uint64_t a1, const void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSCocoaErrorDomain,  -1LL,  0LL));
  if (!a1 || !a2 || (EndpointWithUUID = acc_manager_getEndpointWithUUID(a2)) == 0LL)
  {
LABEL_28:
    v5[2](v5, v6);
    goto LABEL_29;
  }

  uint64_t v8 = (uint64_t)EndpointWithUUID;
  if (gLogObjects) {
    BOOL v9 = gNumLogObjects <= 8;
  }
  else {
    BOOL v9 = 1;
  }
  int v10 = !v9;
  if (*((_DWORD *)EndpointWithUUID + 7) != 14)
  {
    if (v10)
    {
      int v12 = (os_log_s *)*(id *)(gLogObjects + 64);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v12 = (os_log_s *)&_os_log_default;
      id v14 = &_os_log_default;
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_cancelUserKeyErase_cold_2(v8);
    }

    goto LABEL_28;
  }

  if (v10)
  {
    BOOL v11 = (os_log_s *)*(id *)(gLogObjects + 64);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v11 = (os_log_s *)&_os_log_default;
    id v13 = &_os_log_default;
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v15[0] = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "platform_connectionInfo_cancelUserKeyErase",  (uint8_t *)v15,  2u);
  }

  mfi4Auth_endpoint_cancelUserKeyErase(*(void *)(v8 + 56), (uint64_t)v5);
LABEL_29:
}

void platform_connectionInfo_copyUserPrivateKey(uint64_t a1, const void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSCocoaErrorDomain,  -1LL,  0LL));
  if (!a1 || !a2 || (EndpointWithUUID = acc_manager_getEndpointWithUUID(a2)) == 0LL)
  {
LABEL_28:
    v5[2](v5, 0LL, v6);
    goto LABEL_29;
  }

  uint64_t v8 = (uint64_t)EndpointWithUUID;
  if (gLogObjects) {
    BOOL v9 = gNumLogObjects <= 8;
  }
  else {
    BOOL v9 = 1;
  }
  int v10 = !v9;
  if (*((_DWORD *)EndpointWithUUID + 7) != 14)
  {
    if (v10)
    {
      int v12 = (os_log_s *)*(id *)(gLogObjects + 64);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v12 = (os_log_s *)&_os_log_default;
      id v14 = &_os_log_default;
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_copyUserPrivateKey_cold_2(v8);
    }

    goto LABEL_28;
  }

  if (v10)
  {
    BOOL v11 = (os_log_s *)*(id *)(gLogObjects + 64);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v11 = (os_log_s *)&_os_log_default;
    id v13 = &_os_log_default;
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v15[0] = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "platform_connectionInfo_copyUserPrivateKey",  (uint8_t *)v15,  2u);
  }

  mfi4Auth_endpoint_copyUserPrivateKey(*(void *)(v8 + 56), (uint64_t)v5);
LABEL_29:
}

void platform_connectionInfo_setupInterceptForEndpoint(uint64_t a1, const void *a2, int a3)
{
  if (a1)
  {
    if (a2)
    {
      EndpointWithUUID = (_DWORD **)acc_manager_getEndpointWithUUID(a2);
      if (EndpointWithUUID)
      {
      }
    }
  }

uint64_t platform_connectionInfo_getInterceptCountForEndpoint(uint64_t a1, const void *a2)
{
  if (a1
    && a2
    && (EndpointWithUUID = (_DWORD **)acc_manager_getEndpointWithUUID(a2)) != 0LL
    && !*((_BYTE *)EndpointWithUUID + 120)
    && *((_DWORD *)EndpointWithUUID + 7) == 10)
  {
    return accAuthProtocol_endpoint_getIncomingInterceptCount(EndpointWithUUID[7]);
  }

  else
  {
    return 0LL;
  }

void platform_connectionInfo_handleInterceptData(uint64_t a1, const void *a2, uint64_t a3)
{
  if (a1 && a2 && a3)
  {
    if (acc_manager_getEndpointWithUUID(a2))
    {
      id v6 = (id)objc_claimAutoreleasedReturnValue(+[ACCConnectionInfoServer sharedServer](&OBJC_CLASS___ACCConnectionInfoServer, "sharedServer"));
      [v6 handleInterceptData:a3 forEndpoint:a2 connection:a1];
    }
  }

void platform_connectionInfo_sendDataForEndpoint(uint64_t a1, const void *a2, const __CFData *a3)
{
  if (!a1) {
    return;
  }
  if (!a2) {
    return;
  }
  if (!a3) {
    return;
  }
  EndpointWithUUID = acc_manager_getEndpointWithUUID(a2);
  int v7 = *((_DWORD *)EndpointWithUUID + 7);
  if (v7 == 4)
  {
    uint64_t v16 = 0LL;
    id v17 = &v16;
    uint64_t v18 = 0x2020000000LL;
    char v19 = 0;
    uint64_t v8 = (void *)*((void *)EndpointWithUUID + 7);
    if (v8)
    {
      uint64_t v11 = v8[4];
      if (v11)
      {
        if (!*(_BYTE *)(v11 + 44))
        {
          BOOL v9 = (dispatch_queue_s *)v8[3];
          if (v9)
          {
            *(void *)block = _NSConcreteStackBlock;
            *(void *)&block[8] = 3221225472LL;
            int v10 = ___platform_connectionInfo_sendDataForiAP2Endpoint_block_invoke;
LABEL_16:
            *(void *)&block[16] = v10;
            __int16 v21 = &unk_1001FC780;
            __int16 v22 = &v16;
            __int16 v23 = v8;
            id v24 = a3;
            dispatch_sync(v9, block);
            int v12 = *((unsigned __int8 *)v17 + 24);
            _Block_object_dispose(&v16, 8);
            if (v12) {
              return;
            }
            goto LABEL_19;
          }
        }
      }
    }
  }

  else
  {
    if (v7 != 10)
    {
      goto LABEL_19;
    }

    uint64_t v16 = 0LL;
    id v17 = &v16;
    uint64_t v18 = 0x2020000000LL;
    char v19 = 0;
    uint64_t v8 = (void *)*((void *)EndpointWithUUID + 7);
    if (v8)
    {
      BOOL v9 = (dispatch_queue_s *)v8[7];
      if (v9)
      {
        *(void *)block = _NSConcreteStackBlock;
        *(void *)&block[8] = 3221225472LL;
        int v10 = ___platform_connectionInfo_sendDataForAuthProtocolEndpoint_block_invoke;
        goto LABEL_16;
      }
    }
  }

  _Block_object_dispose(&v16, 8);
LABEL_19:
  if (gLogObjects && gNumLogObjects >= 9)
  {
    id v13 = (os_log_s *)*(id *)(gLogObjects + 64);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v13 = (os_log_s *)&_os_log_default;
    id v14 = &_os_log_default;
  }

  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    CFIndex Length = CFDataGetLength(a3);
    *(_DWORD *)block = 138412802;
    *(void *)&void block[4] = a1;
    *(_WORD *)&block[12] = 2112;
    *(void *)&block[14] = a2;
    *(_WORD *)&block[22] = 2048;
    __int16 v21 = (void *)Length;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "connectionInfo sendDataForEndpoint: %@ - %@, %ld bytes Failed! ",  block,  0x20u);
  }
}

CFDictionaryRef _platform_connectionInfo_addAuthInfo(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v2 = theDict;
  if (a1)
  {
    if (theDict)
    {
      CFIndex Count = CFDictionaryGetCount(theDict);
      MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, Count + 2, v2);
      if (MutableCopy)
      {
        id v6 = MutableCopy;
        CFDataRef v7 = oobPairing_endpoint_copyCachedOOBPairingInfo(a1 + 48);
        if (v7)
        {
          CFDataRef v8 = v7;
          CFDictionaryAddValue(v6, kACCExternalAccessoryCertDataKey, v7);
          CFRelease(v8);
        }

        CFDataRef v9 = oobPairing_endpoint_copyCachedOOBPairingData(a1 + 48);
        if (v9)
        {
          CFDataRef v10 = v9;
          CFDictionaryAddValue(v6, kACCExternalAccessoryCertSerialNumberKey, v9);
          CFRelease(v10);
        }

        int valuePtr = acc_connection_getAuthStatus(a1, 0LL);
        if (!valuePtr)
        {
          int valuePtr = acc_connection_getAuthStatus(a1, 1LL);
          if (!valuePtr)
          {
            int valuePtr = acc_connection_getAuthStatus(a1, 2LL);
            if (!valuePtr)
            {
              int valuePtr = acc_connection_getAuthStatus(a1, 3LL);
              if (!valuePtr) {
                int valuePtr = acc_connection_getAuthStatus(a1, 4LL);
              }
            }
          }
        }

        CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
        if (v11)
        {
          CFNumberRef v12 = v11;
          CFDictionaryAddValue(v6, kACCExternalAccessoryAuthStatusKey, v11);
          uint64_t v2 = v6;
        }

        else
        {
          CFNumberRef v12 = v6;
        }

        CFRelease(v12);
      }
    }
  }

  return v2;
}

uint64_t ___platform_connectionInfo_sendDataForAuthProtocolEndpoint_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a1 + 48));
  unsigned __int16 Length = CFDataGetLength(*(CFDataRef *)(a1 + 48));
  uint64_t result = accAuthProtocol_endpoint_sendOutgoingData(v2, BytePtr, Length);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

uint64_t ___platform_connectionInfo_sendDataForiAP2Endpoint_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 40);
  BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a1 + 48));
  unsigned __int16 Length = CFDataGetLength(*(CFDataRef *)(a1 + 48));
  uint64_t result = iap2_endpoint_sendOutgoingData(v2, BytePtr, Length);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_5_14(uint64_t a1)
{
  return acc_endpoint_getProtocolString(a1);
}

void sub_1000C4EC0(_Unwind_Exception *a1)
{
}

LABEL_5:
  uint64_t v73 = a6;
  id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  char v19 = objc_claimAutoreleasedReturnValue([v18 UUIDString]);

  id v20 = kACCExternalAccessoryProtocolTypeKey;
  __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKey:kACCExternalAccessoryProtocolTypeKey]);
  unint64_t v71 = [v21 unsignedIntValue];

  uint64_t v78 = (void *)v19;
  [v17 setObject:v19 forKey:kACCExternalAccessorySessionUUIDKey];
  __int16 v22 = kACCExternalAccessoryProtocolIndexKey;
  __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKey:kACCExternalAccessoryProtocolIndexKey]);
  char v77 = v23;
  if (v23)
  {
    id v24 = [v23 copy];
    [v17 setObject:v24 forKey:v22];
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 10)
    {
      __int16 v29 = (os_log_s *)*(id *)(gLogObjects + 72);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int16 v29 = (os_log_s *)&_os_log_default;
      __int16 v30 = &_os_log_default;
    }

    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
      -[ACCExternalAccessorySessionManager createSessionForProtocol:fromPrimaryAccessoryUUID:fromClient:result:].cold.11();
    }
  }

  __int128 v31 = (void *)objc_claimAutoreleasedReturnValue([v12 bundleID]);
  __int128 v32 = [v31 copy];
  [v17 setObject:v32 forKey:kACCExternalAccessoryClientBundleIDKey];

  if (gLogObjects && gNumLogObjects >= 10)
  {
    __int128 v33 = (os_log_s *)*(id *)(gLogObjects + 72);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int128 v33 = (os_log_s *)&_os_log_default;
    __int128 v34 = &_os_log_default;
  }

  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    int v80 = v14;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "current EA protocol dict %@", buf, 0xCu);
  }

  __int128 v35 = +[ACCExternalAccessorySessionManager _generateSessionID]( &OBJC_CLASS___ACCExternalAccessorySessionManager,  "_generateSessionID");
  __int128 v36 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v35));
  char v75 = (void *)v36;
  __int128 v70 = v35;
  if (v36)
  {
    [v17 setObject:v36 forKey:kACCExternalAccessorySessionIDKey];
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 10)
    {
      __int128 v37 = (os_log_s *)*(id *)(gLogObjects + 72);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int128 v37 = (os_log_s *)&_os_log_default;
      __int128 v38 = &_os_log_default;
    }

    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
      -[ACCExternalAccessorySessionManager createSessionForProtocol:fromPrimaryAccessoryUUID:fromClient:result:].cold.8();
    }
  }

  uint64_t v39 = [v10 copy];
  [v17 setObject:v39 forKey:kACCExternalAccessoryProtocolNameKey];

  uint64_t v40 = [v11 copy];
  [v17 setObject:v40 forKey:kACCExternalAccessoryPrimaryUUID];

  uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKey:v20]);
  [v17 setObject:v41 forKey:v20];

  __int16 v42 = kACCExternalAccessoryProtocolEndpointUUIDKey;
  int v43 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKey:kACCExternalAccessoryProtocolEndpointUUIDKey]);
  [v17 setObject:v43 forKey:v42];

  int v44 = (void *)objc_claimAutoreleasedReturnValue([v13 EAAccessoryDictionary]);
  int v45 = kACCExternalAccessoryLegacyConnectionIDKey;
  int v46 = (void *)objc_claimAutoreleasedReturnValue([v44 objectForKey:kACCExternalAccessoryLegacyConnectionIDKey]);

  uint64_t v76 = v46;
  [v17 setObject:v46 forKey:v45];
  int v47 = kACCExternalAccessorySessionUsesSocketInterfaceKey;
  uint64_t v48 = objc_claimAutoreleasedReturnValue([v14 objectForKey:kACCExternalAccessorySessionUsesSocketInterfaceKey]);
  int v74 = (void *)v48;
  if (v48)
  {
    [v17 setObject:v48 forKey:v47];
    if (gLogObjects && gNumLogObjects >= 10)
    {
      __int16 v49 = (os_log_s *)*(id *)(gLogObjects + 72);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int16 v49 = (os_log_s *)&_os_log_default;
      uint64_t v50 = &_os_log_default;
    }

    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG)) {
      -[ACCExternalAccessorySessionManager createSessionForProtocol:fromPrimaryAccessoryUUID:fromClient:result:].cold.6();
    }

    if (!v71)
    {
      if (gLogObjects && gNumLogObjects >= 10)
      {
        uint64_t v51 = (os_log_s *)*(id *)(gLogObjects + 72);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v51 = (os_log_s *)&_os_log_default;
        __int16 v52 = &_os_log_default;
      }

      if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_INFO,  "protocolType for socket interface is iAP, create ACCExternalAccessorySessionBasic",  buf,  2u);
      }

      int v53 = -[ACCExternalAccessorySessionBasic initWithEASessionUUID:protocolID:legacyConnectionID:sessionID:]( [ACCExternalAccessorySessionBasic alloc],  "initWithEASessionUUID:protocolID:legacyConnectionID:sessionID:",  v78,  [v77 unsignedShortValue],  objc_msgSend(v46, "unsignedLongLongValue"),  v70);
      uint64_t v72 = v53;
      if (v53)
      {
        __int16 v54 = v53;
        int v55 = (void *)objc_claimAutoreleasedReturnValue(-[ACCExternalAccessorySessionManager openEASessionHandlers](self, "openEASessionHandlers"));
        [v55 setObject:v54 forKey:v78];

        __int16 v56 = (void *)objc_claimAutoreleasedReturnValue( -[ACCExternalAccessorySessionManager openEASessionUUIDsForEndpointUUID]( self,  "openEASessionUUIDsForEndpointUUID"));
        int v57 = (id)objc_claimAutoreleasedReturnValue([v56 objectForKeyedSubscript:v11]);

        if (v57)
        {
          [v57 addObject:v78];
        }

        else
        {
          int v57 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
          [v57 addObject:v78];
          __int16 v58 = (void *)objc_claimAutoreleasedReturnValue( -[ACCExternalAccessorySessionManager openEASessionUUIDsForEndpointUUID]( self,  "openEASessionUUIDsForEndpointUUID"));
          [v58 setObject:v57 forKey:v11];
        }
      }

      else
      {
        if (gLogObjects && gNumLogObjects >= 10)
        {
          int v57 = *(id *)(gLogObjects + 72);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          int v57 = &_os_log_default;
          int v59 = &_os_log_default;
        }

        if (os_log_type_enabled((os_log_t)v57, OS_LOG_TYPE_ERROR)) {
          -[ACCExternalAccessorySessionManager createSessionForProtocol:fromPrimaryAccessoryUUID:fromClient:result:].cold.3();
        }
      }
    }
  }

  __int16 v60 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v12 clientCapabilities]));
  [v17 setObject:v60 forKey:kACCExternalAccessoryCapabilitiesKey];
  uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue(-[ACCExternalAccessorySessionManager pidForOpenSessionUUID](self, "pidForOpenSessionUUID"));
  id v62 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  (int)[v12 clientPid]));
  [v61 setObject:v62 forKey:v78];

  if (gLogObjects && gNumLogObjects >= 10)
  {
    __int128 v63 = (os_log_s *)*(id *)(gLogObjects + 72);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int128 v63 = (os_log_s *)&_os_log_default;
    __int128 v64 = &_os_log_default;
  }

  if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    int v80 = v17;
    _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "Finished Create EA Session %@", buf, 0xCu);
  }

  __int128 v65 = (void *)objc_claimAutoreleasedReturnValue(-[ACCExternalAccessorySessionManager openEASessionsLock](self, "openEASessionsLock"));
  [v65 lock];

  __int128 v66 = (void *)objc_claimAutoreleasedReturnValue(-[ACCExternalAccessorySessionManager openEASessions](self, "openEASessions"));
  [v66 addObject:v17];

  __int128 v67 = (void *)objc_claimAutoreleasedReturnValue(-[ACCExternalAccessorySessionManager openEASessions](self, "openEASessions"));
  __int128 v68 = [v67 count];

  __int128 v69 = (void *)objc_claimAutoreleasedReturnValue(-[ACCExternalAccessorySessionManager openEASessionsLock](self, "openEASessionsLock"));
  [v69 unlock];

  if (v68 == 1) {
    platform_system_startObservingApplicationState();
  }

  if (v17)
  {
    *uint64_t v73 = 1;
    -[ACCExternalAccessorySessionManager _sendSessionOpenNotification](self, "_sendSessionOpenNotification");
  }

void sub_1000C6E70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

CFStringRef CFCreateUUIDString()
{
  id v0 = CFUUIDCreate(kCFAllocatorDefault);
  CFStringRef v1 = CFUUIDCreateString(kCFAllocatorDefault, v0);
  if (v0) {
    CFRelease(v0);
  }
  return v1;
}

CFStringRef CFArrayCreateRawValuesString(const __CFArray *a1, int a2)
{
  CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0LL);
  CFStringAppend(Mutable, @"{\n");
  v5.length = CFArrayGetCount(a1);
  if (a2) {
    id v6 = (void (__cdecl *)(const void *, void *))_CFArraySetPrintRawValuesApplierFunctionHex;
  }
  else {
    id v6 = (void (__cdecl *)(const void *, void *))_CFArraySetPrintRawValuesApplierFunctionDecimal;
  }
  v5.location = 0LL;
  CFArrayApplyFunction(a1, v5, v6, Mutable);
  CFStringAppend(Mutable, @"}");
  CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return Copy;
}

void _CFArraySetPrintRawValuesApplierFunctionHex(uint64_t a1, CFMutableStringRef theString)
{
}

void _CFArraySetPrintRawValuesApplierFunctionDecimal(uint64_t a1, CFMutableStringRef theString)
{
}

CFStringRef CFSetCreateRawValuesString(const __CFSet *a1, int a2)
{
  CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0LL);
  CFStringAppend(Mutable, @"{\n");
  if (a2) {
    CFRange v5 = (void (__cdecl *)(const void *, void *))_CFArraySetPrintRawValuesApplierFunctionHex;
  }
  else {
    CFRange v5 = (void (__cdecl *)(const void *, void *))_CFArraySetPrintRawValuesApplierFunctionDecimal;
  }
  CFSetApplyFunction(a1, v5, Mutable);
  CFStringAppend(Mutable, @"}");
  CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return Copy;
}

CFStringRef CFStringCreateFromCFData(const __CFData *a1, const __CFString *a2)
{
  if (!a1) {
    return &stru_100200A40;
  }
  BytePtr = CFDataGetBytePtr(a1);
  CFIndex Length = CFDataGetLength(a1);
  CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0LL);
  if (Length >= 1)
  {
    do
    {
      unsigned int v7 = *BytePtr++;
      CFStringAppendFormat(Mutable, 0LL, a2, v7);
      --Length;
    }

    while (Length);
  }

  CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return Copy;
}

CFSetRef CFDictionaryGetKeys(const __CFDictionary *a1, int a2)
{
  if (!a1) {
    return 0LL;
  }
  id v3 = a2 ? &kCFTypeSetCallBacks : 0LL;
  CFMutableSetRef Mutable = CFSetCreateMutable(kCFAllocatorDefault, 0LL, v3);
  if (!Mutable) {
    return 0LL;
  }
  CFRange v5 = Mutable;
  CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)CFDictionaryApplierFunction_addKeyToMutableSet, Mutable);
  CFSetRef Copy = CFSetCreateCopy(kCFAllocatorDefault, v5);
  CFRelease(v5);
  return Copy;
}

void CFDictionaryApplierFunction_addKeyToMutableSet(void *value, int a2, CFMutableSetRef theSet)
{
  if (value)
  {
    if (theSet) {
      CFSetAddValue(theSet, value);
    }
  }

char *createCStringFromCFString(const __CFString *a1, CFStringEncoding a2)
{
  CFIndex usedBufLen = 0LL;
  if (!a1) {
    return 0LL;
  }
  v10.length = CFStringGetLength(a1);
  v10.location = 0LL;
  CFStringGetBytes(a1, v10, 0x8000100u, 0, 0, 0LL, 0LL, &usedBufLen);
  CFIndex v4 = usedBufLen + 1;
  CFIndex usedBufLen = v4;
  CFRange v5 = (char *)malloc(v4);
  int CString = CFStringGetCString(a1, v5, v4, a2);
  if (v5) {
    BOOL v7 = CString == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    free(v5);
    return 0LL;
  }

  return v5;
}

void CFDictionaryApplierFunction_setValueInMutableDictionary( void *key, void *value, CFMutableDictionaryRef theDict)
{
  if (key)
  {
    if (theDict) {
      CFDictionarySetValue(theDict, key, value);
    }
  }

void CFSetApplierFunction_removeValueFromMutableDictionary(void *key, CFMutableDictionaryRef theDict)
{
}

LABEL_8:
  CFNumberRef v11 = acc_strings_placeholder_Unknown();
  CFRange v10 = (id)objc_claimAutoreleasedReturnValue(v11);
  if (!v6) {
    goto LABEL_11;
  }
LABEL_9:
  CFNumberRef v12 = v6[2];
  if (!v12)
  {
LABEL_11:
    id v14 = acc_strings_placeholder_Unknown();
    id v13 = (id)objc_claimAutoreleasedReturnValue(v14);
    if (!v6) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }

  id v13 = v12;
LABEL_12:
  BOOL v15 = v6[3];
  if (v15)
  {
    uint64_t v16 = v15;
    goto LABEL_15;
  }

    CFDataRef v9 = acc_strings_placeholder_Unknown();
    __int128 v66 = (id)objc_claimAutoreleasedReturnValue(v9);
    if (!v6) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }

  -[NSMutableDictionary setObject:forKey:](v14, "setObject:forKey:", v15, @"GPRMCDataStatus");
  endpointFeatureHandlerQueue = (dispatch_queue_s *)self->_endpointFeatureHandlerQueue;
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472LL;
  v27[2] = __72__ACCPlatformLocationManager_sendGPRMCDataStatus_valueV_valueX_forUUID___block_invoke;
  v27[3] = &unk_1001F9798;
  v27[4] = self;
  __int128 v28 = v14;
  uint64_t v18 = v14;
  dispatch_async(endpointFeatureHandlerQueue, v27);

  char v19 = 1;
LABEL_21:

  __int16 v23 = (void *)objc_claimAutoreleasedReturnValue(-[ACCPlatformLocationManager accessLock](self, "accessLock"));
  [v23 unlock];

  return v19;
}

  if (gLogObjects && gNumLogObjects >= 60)
  {
    CFIndex v4 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    CFIndex v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    qiAuth_protocol_start_cold_1();
  }
  return v3;
}

LABEL_20:
  __int16 v23 = acc_strings_placeholder_Unknown();
  __int16 v22 = (id)objc_claimAutoreleasedReturnValue(v23);
  if (!v6)
  {
    int v89 = 0LL;
    int v90 = 0LL;
    __int128 v25 = 0LL;
    id v24 = 0LL;
    __int128 v26 = 0LL;
    goto LABEL_22;
  }

            char v19 = acc_strings_placeholder_Unknown();
            uint64_t v18 = (id)objc_claimAutoreleasedReturnValue(v19);
            if (!v6)
            {
              __int16 v21 = 0LL;
              id v20 = 0LL;
              __int16 v22 = 0LL;
LABEL_22:
              __int16 v23 = v22;
              id v24 = acc_endpoint_copyProperties((pthread_mutex_t *)a3);
              if (v24)
              {
                __int128 v25 = v24;
                uint64_t Value = (__CFString *)CFDictionaryGetValue((CFDictionaryRef)v24, kCFACCProperties_Endpoint_DockType);
                CFRelease(v25);
              }

              else
              {
                uint64_t Value = 0LL;
              }

              __int16 v27 = &stru_100200A40;
              if (Value) {
                __int16 v27 = Value;
              }
              __int128 v28 = v27;
              if (!v6) {
                goto LABEL_58;
              }
              __int16 v29 = (NSString *)[v67 copy];
              EAName = self->_EAName;
              self->_EAName = v29;

              __int128 v31 = (NSString *)[v66 copy];
              EAManufacturer = self->_EAManufacturer;
              self->_EAManufacturer = v31;

              __int128 v33 = (NSString *)[v65 copy];
              EAModelNumber = self->_EAModelNumber;
              self->_EAModelNumber = v33;

              __int128 v35 = (NSString *)[v64 copy];
              EASerialNumber = self->_EASerialNumber;
              self->_EASerialNumber = v35;

              __int128 v37 = (NSString *)[v15 copy];
              EAHardwareRevision = self->_EAHardwareRevision;
              self->_EAHardwareRevision = v37;

              uint64_t v39 = (NSString *)[v18 copy];
              EAFirmwareRevisionActive = self->_EAFirmwareRevisionActive;
              self->_EAFirmwareRevisionActive = v39;

              if (v20)
              {
                uint64_t v41 = (NSString *)[v20 copy];
                EAFirmwareRevisionPending = self->_EAFirmwareRevisionPending;
                self->_EAFirmwareRevisionPending = v41;
              }

              else
              {
                EAFirmwareRevisionPending = self->_EAFirmwareRevisionPending;
                self->_EAFirmwareRevisionPending = 0LL;
              }

              if (v21)
              {
                int v43 = (NSString *)[v21 copy];
                EAPPID = self->_EAPPID;
                self->_EAPPID = v43;
              }

              else
              {
                EAPPID = self->_EAPPID;
                self->_EAPPID = 0LL;
              }

              if (v23)
              {
                int v45 = (NSString *)[v23 copy];
                EARegionCode = self->_EARegionCode;
                self->_EARegionCode = v45;
              }

              else
              {
                EARegionCode = self->_EARegionCode;
                self->_EARegionCode = 0LL;
              }

              int v47 = (NSString *)-[__CFString copy](v28, "copy");
              EADockType = self->_EADockType;
              self->_EADockType = v47;

              if (a3->var0) {
                __int16 v49 = acc_connection_copyProperty((char *)a3->var0, kCFACCProperties_Connection_HideFromUI);
              }
              else {
                __int16 v49 = 0LL;
              }
              uint64_t v50 = acc_policies_shouldHideAccessoryWithModelNumber((uint64_t)self->_EAModelNumber);
              if (v49) {
                uint64_t v51 = 1;
              }
              else {
                uint64_t v51 = v50;
              }
              if (v49)
              {
                CFRelease(v49);
              }

              else if (!v51)
              {
                goto LABEL_47;
              }

              self->_eaAccessoryCapabilities |= 0x100uLL;
LABEL_47:
              if (gLogObjects && gNumLogObjects >= 10)
              {
                __int16 v52 = (os_log_s *)*(id *)(gLogObjects + 72);
              }

              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
                __int16 v52 = (os_log_s *)&_os_log_default;
                int v53 = &_os_log_default;
              }

              if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
              {
                __int16 v54 = self->_EAName;
                int v55 = self->_EAManufacturer;
                __int16 v56 = self->_EAModelNumber;
                int v57 = self->_EASerialNumber;
                __int16 v58 = self->_EAFirmwareRevisionActive;
                int v59 = self->_EAFirmwareRevisionPending;
                __int16 v60 = self->_EAHardwareRevision;
                uint64_t v61 = self->_EAPPID;
                id v62 = self->_EARegionCode;
                __int128 v63 = "NO";
                if (v51) {
                  __int128 v63 = "YES";
                }
                *(_DWORD *)buf = 138414594;
                __int128 v69 = v54;
                __int128 v70 = 2112;
                unint64_t v71 = v56;
                uint64_t v72 = 2112;
                uint64_t v73 = v55;
                int v74 = 2112;
                char v75 = v57;
                uint64_t v76 = 2112;
                char v77 = v58;
                uint64_t v78 = 2112;
                int v79 = v59;
                int v80 = 2112;
                unsigned int v81 = v60;
                unsigned int v82 = 2112;
                uint64_t v83 = v61;
                uint64_t v84 = 2112;
                unsigned int v85 = v62;
                unsigned int v86 = 2080;
                int v87 = v63;
                _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "Adding accessory info: name %@, model %@, manufacturer %@, serial %@, firmware revision (active) %@, f irmware revision (pending) %@, hardware revision %@, ppid %@, regionCode %@, hideFromUI: %s",  buf,  0x66u);
              }

LABEL_58:
              return;
            }

  return v4;
}

    uint64_t v16 = 0;
    goto LABEL_23;
  }

  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  BOOL v15 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = __59__ACCPlatformUSBManager_setUSBModeForEndpointUUID_newMode___block_invoke;
  block[3] = &unk_1001FD928;
  void block[4] = self;
  __int16 v21 = v6;
  __int16 v22 = v13;
  dispatch_async(v15, block);

  uint64_t v16 = 1;
LABEL_23:

  return v16;
}

  if (gLogObjects && gNumLogObjects >= 61)
  {
    CFRange v10 = *(os_log_s **)(gLogObjects + 480);
  }

  else
  {
    CFRange v10 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
    t56_protocol_start_cold_1();
  }
  return v3;
}

  id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  self->_radioStation));
  -[NSMutableDictionary setObject:forKey:]( v4,  "setObject:forKey:",  v14,  @"ACCMediaLibraryUpdatePlaylistIsRadioStation");

  validMask = self->_validMask;
  if ((validMask & 0x100) != 0) {
    goto LABEL_21;
  }
LABEL_11:
  if ((validMask & 0x200) != 0)
  {
LABEL_12:
    BOOL v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  self->_radioStationOrdering));
    -[NSMutableDictionary setObject:forKey:]( v4,  "setObject:forKey:",  v7,  @"ACCMediaLibraryUpdatePlaylistRadioStationOrdering");
  }

  return v4;
}

      id v17 = iAP2MsgGetMsgID(a2);
      printf("Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", v11, v17);
      goto LABEL_21;
    }

    CFDataRef v9 = 0;
    CFDataRef v8 = 0;
LABEL_24:
    if (gLogObjects && gNumLogObjects >= 42)
    {
      uint64_t v18 = *(os_log_s **)(gLogObjects + 328);
    }

    else
    {
      uint64_t v18 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      char v19 = *(void *)(a1 + 8);
      *(_DWORD *)buf = 138412290;
      __int16 v30 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "AccessoryPairingInformation: %@", buf, 0xCu);
    }

    uint64_t Feature = iap2_feature_getFeature(a1, 4u);
    if (!Feature)
    {
LABEL_48:
      CFRange v5 = 0LL;
      if (!Mutable) {
        return v5;
      }
      goto LABEL_44;
    }

    __int16 v21 = (uint64_t *)Feature;
    buf[0] = 0;
    CFRange v5 = iap2_identification_checkRequiredMsgIDs(a1, (uint64_t)&gskMsgBLEPairingMainList, 8, buf);
    if ((v5 & v8) == 1)
    {
      if (gLogObjects && gNumLogObjects >= 42)
      {
        __int16 v22 = *(os_log_s **)(gLogObjects + 328);
      }

      else
      {
        __int16 v22 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        __int16 v23 = *(void *)(a1 + 8);
        *(_DWORD *)buf = 138412802;
        __int16 v30 = v23;
        __int128 v31 = 1024;
        __int128 v32 = v9;
        __int128 v33 = 2112;
        __int128 v34 = Mutable;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "AccessoryPairingInformation: %@, call platform, pairType=%d pairInfoList=%@",  buf,  0x1Cu);
      }

      CFSetRef Copy = CFArrayCreateCopy(kCFAllocatorDefault, Mutable);
      platform_blePairing_accessoryPairingInfo(*(void *)(a1 + 8), *v21, v9, (uint64_t)Copy);
      if (Copy) {
        CFRelease(Copy);
      }
      CFRange v5 = 1LL;
    }

    if (Mutable) {
LABEL_44:
    }
      CFRelease(Mutable);
  }

  return v5;
}

            CFDataRef v9 = result;
            if (!(_DWORD)result) {
              return 0LL;
            }
            goto LABEL_23;
          }
        }
      }
    }
  }

id __getSessionIDLock()
{
  if (__getSessionIDLock_onceToken != -1) {
    dispatch_once(&__getSessionIDLock_onceToken, &__block_literal_global_24);
  }
  return (id)__getSessionIDLock___sessionIDLock;
}

void ____getSessionIDLock_block_invoke(id a1)
{
  CFStringRef v1 = objc_alloc_init(&OBJC_CLASS___NSLock);
  uint64_t v2 = (void *)__getSessionIDLock___sessionIDLock;
  __getSessionIDLock___sessionIDLock = (uint64_t)v1;
}

void ____getCerCacheObj_block_invoke(id a1)
{
  __getCerCacheObj___certCacheObj = MFAACreateCertificateCache(@"com.apple.accessoryd");
}

uint64_t _acc_auth_protocol_sizeofSessionImplementationData()
{
  return 168LL;
}

BOOL _acc_auth_protocol_supportsAuthRole(int a1)
{
  if (a1 == 1) {
    return acc_userDefaults_copyIntegerForKey((uint64_t)@"ACCAuthProtocolRoleSupport") != (id)2;
  }
  if (a1 != 2) {
    return 0LL;
  }
  unint64_t v1 = (unint64_t)acc_userDefaults_copyIntegerForKey((uint64_t)@"ACCAuthProtocolRoleSupport");
  if (v1 >= 4) {
    return 1LL;
  }
  else {
    return (0xDu >> (v1 & 0xF)) & 1;
  }
}

uint64_t _acc_auth_protocol_supportedAuthTypes(int a1, _BYTE *a2, unsigned int a3)
{
  uint64_t result = _acc_auth_protocol_supportsAuthRole(a1);
  if ((_DWORD)result)
  {
    if (_acc_auth_protocol_supportsAuthRole(a1))
    {
      unsigned int v9 = 1;
      *a2 = 1;
    }

    else
    {
      unsigned int v9 = 0;
    }

    if (v9 >= a3)
    {
      return 1LL;
    }

    else
    {
      uint64_t result = v9 + 1;
      a2[v9] = 0;
    }
  }

  return result;
}

uint64_t _acc_auth_protocol_supportedAuthCapabilities(int a1)
{
  if (((a1 == 1) & _acc_auth_protocol_supportsAuthRole(a1)) != 0) {
    return 2LL;
  }
  return 0LL;
}

uint64_t _acc_auth_protocol_reserveFreeSessionID(_BYTE *a1)
{
  id SessionIDLock = __getSessionIDLock();
  id v3 = (void *)objc_claimAutoreleasedReturnValue(SessionIDLock);
  [v3 lock];

  if (a1)
  {
    if (__availableSessionIDs)
    {
      if (__lastAllocatedSessionIDInitialized == 1)
      {
        unsigned __int8 v4 = __lastAllocatedSessionID;
      }

      else
      {
        unsigned __int8 v4 = arc4random_uniform(0x10u);
        __lastAllocatedSessionID = v4;
        __lastAllocatedSessionIDInitialized = 1;
      }

      int v6 = (v4 + 1) & 0xF;
      uint64_t v5 = 1LL;
      if (v6 != v4)
      {
        while (((1 << v6) & (unsigned __int16)__availableSessionIDs) == 0)
        {
          int v6 = ((_BYTE)v6 + 1) & 0xF;
          if (v6 == v4) {
            goto LABEL_10;
          }
        }

        uint64_t v5 = 0LL;
        __availableSessionIDs &= ~(unsigned __int16)(1 << v6);
        __lastAllocatedSessionID = v6;
        *a1 = v6;
      }
    }

    else
    {
      uint64_t v5 = 16LL;
    }
  }

  else
  {
LABEL_10:
    uint64_t v5 = 1LL;
  }

  id v7 = __getSessionIDLock();
  CFDataRef v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  [v8 unlock];

  if (gLogObjects && gNumLogObjects >= 55)
  {
    unsigned int v9 = (os_log_s *)*(id *)(gLogObjects + 432);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    unsigned int v9 = (os_log_s *)&_os_log_default;
    id v10 = &_os_log_default;
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    if (a1) {
      int v11 = *a1;
    }
    else {
      int v11 = -1;
    }
    v13[0] = 67109376;
    v13[1] = v11;
    __int16 v14 = 1024;
    int v15 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[AccAuth] _reserveFreeSessionID: sessionID %d, errorNo %d \n",  (uint8_t *)v13,  0xEu);
  }

  return v5;
}

BOOL _acc_auth_protocol_isBusySessionID(int a1)
{
  id SessionIDLock = __getSessionIDLock();
  id v3 = (void *)objc_claimAutoreleasedReturnValue(SessionIDLock);
  [v3 lock];

  int v4 = (unsigned __int16)__availableSessionIDs;
  id v5 = __getSessionIDLock();
  int v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  [v6 unlock];

  if (gLogObjects && gNumLogObjects >= 55)
  {
    id v7 = (os_log_s *)*(id *)(gLogObjects + 432);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v7 = (os_log_s *)&_os_log_default;
    id v8 = &_os_log_default;
  }

  int v9 = (1 << a1) & v4;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    _acc_auth_protocol_isBusySessionID_cold_1(v9 == 0, a1, v7);
  }

  return v9 == 0;
}

uint64_t _acc_auth_protocol_returnSessionID(int a1)
{
  id SessionIDLock = __getSessionIDLock();
  id v3 = (void *)objc_claimAutoreleasedReturnValue(SessionIDLock);
  [v3 lock];

  uint64_t v4 = 1LL;
  if (((1 << a1) & (unsigned __int16)__availableSessionIDs) == 0)
  {
    uint64_t v4 = 0LL;
    __availableSessionIDs |= 1 << a1;
  }

  id v5 = __getSessionIDLock();
  int v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  [v6 unlock];

  if (gLogObjects && gNumLogObjects >= 55)
  {
    id v7 = (os_log_s *)*(id *)(gLogObjects + 432);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v7 = (os_log_s *)&_os_log_default;
    id v8 = &_os_log_default;
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 67109376;
    v10[1] = a1;
    __int16 v11 = 1024;
    int v12 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[AccAuth] _returnSessionID: sessionID %d, errorNo %d \n",  (uint8_t *)v10,  0xEu);
  }

  return v4;
}

uint64_t _acc_auth_protocol_createSessionImplementation(uint64_t a1, unsigned __int8 *a2)
{
  id v3 = 0LL;
  uint64_t v4 = 1LL;
  if (a1 && a2)
  {
    int v5 = *a2;
    if (v5 == 255 || _acc_auth_protocol_isBusySessionID(v5))
    {
      id v3 = calloc(1uLL, 0xA8uLL);
      uint64_t v4 = 0LL;
      *((void *)a2 + 169) = v3;
    }

    else
    {
      id v3 = 0LL;
      uint64_t v4 = 9LL;
    }
  }

  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v6 = (os_log_s *)*(id *)(gLogObjects + 432);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v6 = (os_log_s *)&_os_log_default;
    id v7 = &_os_log_default;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    if (a2)
    {
      int v8 = *a2;
      if (v3)
      {
LABEL_16:
        int v9 = v3[40];
LABEL_19:
        v11[0] = 67109632;
        v11[1] = v8;
        __int16 v12 = 1024;
        int v13 = v9;
        __int16 v14 = 1024;
        int v15 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[AccAuth] _createSessionImplementation: sessionID %d, certificateDataCount %d, errorNo %d \n",  (uint8_t *)v11,  0x14u);
        goto LABEL_20;
      }
    }

    else
    {
      int v8 = -1;
      if (v3) {
        goto LABEL_16;
      }
    }

    int v9 = -1;
    goto LABEL_19;
  }

void _acc_auth_protocol_endSessionImplementation(unsigned __int8 *a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)*((void *)a1 + 169);
    *((void *)a1 + 169) = 0LL;
    _acc_auth_protocol_cleanupCertificateInfo((uint64_t)v2);
    if (v2) {
      free(v2);
    }
  }

  if (gLogObjects && gNumLogObjects >= 55)
  {
    id v3 = (os_log_s *)*(id *)(gLogObjects + 432);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v3 = (os_log_s *)&_os_log_default;
    id v4 = &_os_log_default;
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (a1) {
      int v5 = *a1;
    }
    else {
      int v5 = -1;
    }
    v6[0] = 67109120;
    v6[1] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[AccAuth] _endSessionImplementation: sessionID %d \n",  (uint8_t *)v6,  8u);
  }
}

uint64_t _acc_auth_protocol_cleanupCertificateInfo(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v2 = (os_log_s *)*(id *)(gLogObjects + 432);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v2 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    _acc_auth_protocol_cleanupCertificateInfo_cold_2();
  }

  if (a1)
  {
    uint64_t v4 = -1LL;
    uint64_t v5 = a1;
    while (++v4 < (unint64_t)*(unsigned int *)(a1 + 160))
    {
      uint64_t v6 = v5 + 40;
      int v7 = _acc_auth_protocol_cleanupCertificateData(v5);
      uint64_t v5 = v6;
      if (v7)
      {
        uint64_t v8 = 1LL;
        goto LABEL_16;
      }
    }

    uint64_t v8 = 0LL;
LABEL_16:
    *(_DWORD *)(a1 + 160) = 0;
  }

  else
  {
    uint64_t v8 = 1LL;
  }

  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v9 = (os_log_s *)*(id *)(gLogObjects + 432);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v9 = (os_log_s *)&_os_log_default;
    id v10 = &_os_log_default;
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      int v11 = *(_DWORD *)(a1 + 160);
    }
    else {
      int v11 = -1;
    }
    v13[0] = 67109376;
    v13[1] = v11;
    __int16 v14 = 1024;
    int v15 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "[AccAuth] _cleanupCertificateInfo: certificateDataCount %d, errorNo %d \n",  (uint8_t *)v13,  0xEu);
  }

  return v8;
}

void _acc_auth_protocol_handleSessionAuthenticationState(void *a1, unsigned __int8 a2)
{
  unsigned __int8 valuePtr = a2;
  if (!a1) {
    return;
  }
  uint64_t v3 = a1[169];
  if (!v3) {
    return;
  }
  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v4 = (os_log_s *)*(id *)(gLogObjects + 432);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v4 = (os_log_s *)&_os_log_default;
    id v5 = &_os_log_default;
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(unsigned __int8 *)a1;
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v6;
    LOWORD(v34) = 1024;
    *(_DWORD *)((char *)&v34 + 2) = valuePtr;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[AccAuth] _handleSessionAuthenticationState: sessionID %d, authenticated %d \n",  buf,  0xEu);
  }

  CFMutableSetRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  1LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, a1);
  CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(Mutable, @"sessionID", v8);
  CFDictionarySetValue(Mutable, @"authStatus", v9);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, @"com.apple.accAuthProtocol.authStatus", 0LL, Mutable, 1u);
  if (valuePtr && *(_DWORD *)(v3 + 160))
  {
    unint64_t v12 = 0LL;
    uint64_t v13 = v3;
    do
    {
      uint64_t v11 = _acc_auth_protocol_certificateCacheSaveCert(v11, v13);
      ++v12;
      v13 += 40LL;
    }

    while (v12 < *(unsigned int *)(v3 + 160));
  }

  __int16 v14 = (const __CFString *)a1[168];
  if (v14)
  {
    int v15 = valuePtr;
    if (valuePtr) {
      int v16 = 2;
    }
    else {
      int v16 = 1;
    }
    CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, v14);
    if (!Copy) {
      return;
    }
    uint64_t v18 = (const __CFNumber *)Copy;
    EndpointWithUUID = acc_manager_getEndpointWithUUID(Copy);
    if (!EndpointWithUUID)
    {
      CFNumberRef v9 = v18;
LABEL_46:
      CFRelease(v9);
      return;
    }

    id v20 = EndpointWithUUID;
    int v29 = v16;
    if (v15)
    {
      CFDataRef v21 = CFDataCreate(kCFAllocatorDefault, *(const UInt8 **)v3, *(unsigned int *)(v3 + 8));
      if (v21)
      {
        CFDataRef v22 = v21;
        acc_connection_setAuthCertData(*(void *)v20, v21);
        CFRelease(v22);
      }
    }

    int AuthStatus = acc_connection_getAuthStatus(*(void *)v20, 1LL);
    int v23 = acc_connection_getAuthStatus(*(void *)v20, 4LL);
    if (gLogObjects && gNumLogObjects >= 55)
    {
      id v24 = (os_log_s *)*(id *)(gLogObjects + 432);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v24 = (os_log_s *)&_os_log_default;
      id v25 = &_os_log_default;
    }

    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = AuthStatus;
      LOWORD(v34) = 1024;
      *(_DWORD *)((char *)&v34 + 2) = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "[AccAuth] oldAuthStatus %d, oldCTAAuthStatus %d \n",  buf,  0xEu);
    }

    if (v23 != 2 && AuthStatus != v29)
    {
      acc_connection_setAuthStatus(*(void *)v20, 1LL, v29);
      accAuthProtocol_endpoint_notifyAuthStatus(*((void *)v20 + 7), v29);
    }

    if (v15)
    {
      *(void *)buf = 0LL;
      __int128 v34 = buf;
      uint64_t v35 = 0x2020000000LL;
      CFStringRef v36 = (CFStringRef)0xAAAAAAAAAAAAAAAALL;
      CFStringRef v36 = CFStringCreateCopy(kCFAllocatorDefault, *((CFStringRef *)v20 + 1));
      if (*((void *)v34 + 3))
      {
        dispatch_time_t v26 = dispatch_time(0LL, 20000000000LL);
        dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
        __int128 v28 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = ___acc_auth_protocol_handleSessionAuthenticationState_block_invoke;
        block[3] = &unk_1001FAF00;
        void block[4] = buf;
        dispatch_after(v26, v28, block);
      }

      _Block_object_dispose(buf, 8);
    }

    CFRelease(v18);
  }

  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v9) {
    goto LABEL_46;
  }
}

uint64_t _acc_auth_protocol_certificateCacheSaveCert(uint64_t a1, uint64_t a2)
{
  if (platform_systemInfo_isInternalBuild()
    && (acc_userDefaults_BOOLForKey((uint64_t)@"ACCAuthProtocolPretendAuth") & 1) != 0)
  {
    return 1LL;
  }

  CFDataRef v4 = CFDataCreate(kCFAllocatorDefault, *(const UInt8 **)a2, *(unsigned int *)(a2 + 8));
  if (!v4) {
    return 12LL;
  }
  CFDataRef v5 = v4;
  if (__getCerCacheObj_onceToken != -1) {
    dispatch_once(&__getCerCacheObj_onceToken, &__block_literal_global_1);
  }
  uint64_t v3 = MFAAAddCertDataEntryToCache(__getCerCacheObj___certCacheObj, v5) ^ 1;
  CFRelease(v5);
  return v3;
}

void ___acc_auth_protocol_handleSessionAuthenticationState_block_invoke(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v2 = (os_log_s *)*(id *)(gLogObjects + 432);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v2 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    int v6 = 138412290;
    uint64_t v7 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[AccAuth] remove assertion for connection %@ \n",  (uint8_t *)&v6,  0xCu);
  }

  platform_sleepAssertion_destroy(*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
  CFDataRef v5 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0LL;
  }

void *_acc_auth_protocol_getNewCertificateStruct()
{
  return calloc(1uLL, 0x28uLL);
}

void _acc_auth_protocol_returnCertificateStruct(void *a1)
{
  if (a1) {
    free(a1);
  }
}

uint64_t _acc_auth_protocol_cleanupCertificateData(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v2 = (os_log_s *)*(id *)(gLogObjects + 432);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v2 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    _acc_auth_protocol_cleanupCertificateData_cold_2();
  }

  if (a1)
  {
    uint64_t v4 = *(void **)(a1 + 32);
    if (v4)
    {
      free(v4);
      *(void *)(a1 + 32) = 0LL;
    }

    uint64_t v5 = 0LL;
    *(void *)a1 = 0LL;
    *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = 0;
    *(void *)(a1 + 16) = 0LL;
    *(_BYTE *)(a1 + 24) = 0;
  }

  else
  {
    uint64_t v5 = 1LL;
  }

  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v6 = (os_log_s *)*(id *)(gLogObjects + 432);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v6 = (os_log_s *)&_os_log_default;
    id v7 = &_os_log_default;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    if (a1)
    {
      int v9 = *(_DWORD *)(a1 + 8);
      int v10 = *(unsigned __int8 *)(a1 + 24);
    }

    else
    {
      int v9 = -1;
      int v10 = -1;
    }

    v11[0] = 67109632;
    v11[1] = v9;
    __int16 v12 = 1024;
    int v13 = v10;
    __int16 v14 = 1024;
    int v15 = v5;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "[AccAuth] _cleanupCertificateData: certificateDataLen %d, certificateHashLen %d, errorNo %d \n",  (uint8_t *)v11,  0x14u);
  }

  return v5;
}

uint64_t _acc_auth_protocol_getCertificateChainHashList( uint64_t a1, void *__buf, unsigned int a3, int a4, int *a5)
{
  uint64_t v8 = 1LL;
  if (a5 && a3 >= 0x20 && a1 && __buf && a4)
  {
    arc4random_buf(__buf, a3 * a4);
    uint64_t v8 = 0LL;
    *a5 = 1;
  }

  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v9 = (os_log_s *)*(id *)(gLogObjects + 432);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v9 = (os_log_s *)&_os_log_default;
    id v10 = &_os_log_default;
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    if (a5) {
      int v11 = *a5;
    }
    else {
      int v11 = -1;
    }
    v13[0] = 67109888;
    v13[1] = a3;
    __int16 v14 = 1024;
    int v15 = a4;
    __int16 v16 = 1024;
    int v17 = v11;
    __int16 v18 = 1024;
    int v19 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "[AccAuth] _getCertificateChainHashList: certificateHashSize %d, certificateHashMaxCount %d, certificateHashCount % d, errorNo %d \n",  (uint8_t *)v13,  0x1Au);
  }

  return v8;
}

uint64_t _acc_auth_protocol_getCertificate(uint64_t a1, const void *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = 1LL;
  if (a1 && a4)
  {
    if (a3) {
      size_t v7 = a3;
    }
    else {
      size_t v7 = 32LL;
    }
    uint64_t v8 = malloc(v7 + 650);
    *(void *)(a4 + 32) = v8;
    if (v8)
    {
      arc4random_buf(v8, 0x28AuLL);
      uint64_t v9 = *(void *)(a4 + 32);
      *(void *)a4 = v9;
      *(_DWORD *)(a4 + _Block_object_dispose(va, 8) = 650;
      *(void *)(a4 + 16) = v9 + 650;
      *(_BYTE *)(a4 + 24) = v7;
      if (a2) {
        memcpy((void *)(v9 + 650), a2, v7);
      }
      else {
        _acc_auth_protocol_hash(2, (void *)v9, 0x28Au, (unsigned __int8 *)(v9 + 650), v7, (char *)(a4 + 24));
      }
      uint64_t v5 = 0LL;
    }

    else
    {
      uint64_t v5 = 1LL;
    }
  }

  if (gLogObjects && gNumLogObjects >= 55)
  {
    id v10 = (os_log_s *)*(id *)(gLogObjects + 432);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v10 = (os_log_s *)&_os_log_default;
    id v11 = &_os_log_default;
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    if (a4)
    {
      int v12 = *(_DWORD *)(a4 + 8);
      int v13 = *(unsigned __int8 *)(a4 + 24);
    }

    else
    {
      int v12 = -1;
      int v13 = -1;
    }

    v15[0] = 67109632;
    v15[1] = v12;
    __int16 v16 = 1024;
    int v17 = v13;
    __int16 v18 = 1024;
    int v19 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "[AccAuth] _getCertificate: certificateDataLen %d, certificateHashLen %d, errorNo %d \n",  (uint8_t *)v15,  0x14u);
  }

  return v5;
}

uint64_t _acc_auth_protocol_hash( int a1, void *data, CC_LONG len, unsigned __int8 *md, unsigned int a5, char *a6)
{
  if (a1 == 1)
  {
    if (a5 >= 0x14)
    {
      CC_SHA1(data, len, md);
      char v15 = 20;
      goto LABEL_25;
    }

    return 1LL;
  }

  if (a1 == 2)
  {
    if (a5 >= 0x20)
    {
      CC_SHA256(data, len, md);
      char v15 = 32;
LABEL_25:
      uint64_t v11 = 0LL;
      *a6 = v15;
      goto LABEL_27;
    }

    return 1LL;
  }

  uint64_t v11 = 1LL;
LABEL_27:
  if (gLogObjects && gNumLogObjects >= 55)
  {
    __int16 v16 = (os_log_s *)*(id *)(gLogObjects + 432);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v16 = (os_log_s *)&_os_log_default;
    id v17 = &_os_log_default;
  }

  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    int v19 = *a6;
    v20[0] = 67109888;
    v20[1] = a1;
    __int16 v21 = 1024;
    CC_LONG v22 = len;
    __int16 v23 = 1024;
    int v24 = v19;
    __int16 v25 = 1024;
    int v26 = v11;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "[AccAuth] _hash: hashType %d, inDataLen %d, outHashLen %d, errorNo %d \n",  (uint8_t *)v20,  0x1Au);
  }

  return v11;
}

uint64_t _acc_auth_protocol_getSigningCertificateHash( uint64_t a1, uint64_t a2, void *a3, unsigned int a4, _BYTE *a5)
{
  uint64_t v7 = 1LL;
  if (a1 && a2 && a3 && a4 >= 0x20 && a5)
  {
    if (platform_systemInfo_isInternalBuild()
      && acc_userDefaults_BOOLForKey((uint64_t)@"ACCAuthProtocolPretendAuth"))
    {
      arc4random_buf(a3, a4);
      uint64_t v7 = 0LL;
      char v9 = a4;
    }

    else
    {
      char v9 = 0;
      uint64_t v7 = 2LL;
    }

    *a5 = v9;
  }

  if (gLogObjects && gNumLogObjects >= 55)
  {
    id v10 = (os_log_s *)*(id *)(gLogObjects + 432);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v10 = (os_log_s *)&_os_log_default;
    id v11 = &_os_log_default;
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    if (a5) {
      int v12 = *a5;
    }
    else {
      int v12 = -1;
    }
    v14[0] = 67109632;
    v14[1] = a4;
    __int16 v15 = 1024;
    int v16 = v12;
    __int16 v17 = 1024;
    int v18 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "[AccAuth] _getSigningCertificateHash: outCertificateHashSize %d, outCertificateHashLen %d, errorNo %d \n",  (uint8_t *)v14,  0x14u);
  }

  return v7;
}

uint64_t _acc_auth_protocol_createCertificateData(const void *a1, unsigned int a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v5 = 1LL;
    if (a2 - 1 <= 0x3FF && a3)
    {
      uint64_t v7 = calloc(1uLL, a2 + 32);
      *(void *)(a3 + 32) = v7;
      if (v7)
      {
        *(void *)a3 = v7;
        *(_DWORD *)(a3 + _Block_object_dispose(va, 8) = a2;
        memcpy(v7, a1, a2);
        uint64_t v8 = (unsigned __int8 *)(*(void *)(a3 + 32) + a2);
        *(void *)(a3 + 16) = v8;
        *(_BYTE *)(a3 + 24) = 32;
        uint64_t v5 = _acc_auth_protocol_hash(2, *(void **)a3, *(_DWORD *)(a3 + 8), v8, 0x20u, (char *)(a3 + 24));
      }

      else
      {
        *(void *)a3 = 0LL;
        *(_DWORD *)(a3 + _Block_object_dispose(va, 8) = 0;
        *(void *)(a3 + 16) = 0LL;
        *(_BYTE *)(a3 + 24) = 0;
      }
    }
  }

  else
  {
    uint64_t v5 = 1LL;
  }

  if (gLogObjects && gNumLogObjects >= 55)
  {
    char v9 = (os_log_s *)*(id *)(gLogObjects + 432);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    char v9 = (os_log_s *)&_os_log_default;
    id v10 = &_os_log_default;
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    if (a3)
    {
      int v11 = *(_DWORD *)(a3 + 8);
      int v12 = *(unsigned __int8 *)(a3 + 24);
    }

    else
    {
      int v11 = -1;
      int v12 = -1;
    }

    v14[0] = 67109632;
    v14[1] = v11;
    __int16 v15 = 1024;
    int v16 = v12;
    __int16 v17 = 1024;
    int v18 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "[AccAuth] _createCertificateData: certificateDataLen %d, certificateHashLen %d, errorNo %d \n",  (uint8_t *)v14,  0x14u);
  }

  return v5;
}

uint64_t _acc_auth_protocol_createCertificateDataWithHash( const void *a1, unsigned int a2, const void *a3, unsigned int a4, uint64_t a5)
{
  if (a1)
  {
    uint64_t v7 = 1LL;
    if (a2 - 1 <= 0x3FF && a3 && a4 - 1 <= 0x1F && a5)
    {
      int v11 = calloc(1uLL, a2 + 32);
      *(void *)(a5 + 32) = v11;
      if (v11)
      {
        *(void *)a5 = v11;
        *(_DWORD *)(a5 + _Block_object_dispose(va, 8) = a2;
        memcpy(v11, a1, a2);
        int v12 = (void *)(*(void *)(a5 + 32) + a2);
        *(void *)(a5 + 16) = v12;
        *(_BYTE *)(a5 + 24) = a4;
        memcpy(v12, a3, a4);
        uint64_t v7 = 0LL;
      }

      else
      {
        *(void *)a5 = 0LL;
        *(_DWORD *)(a5 + _Block_object_dispose(va, 8) = 0;
        *(void *)(a5 + 16) = 0LL;
        *(_BYTE *)(a5 + 24) = 0;
      }
    }
  }

  else
  {
    uint64_t v7 = 1LL;
  }

  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v13 = (os_log_s *)*(id *)(gLogObjects + 432);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v13 = (os_log_s *)&_os_log_default;
    id v14 = &_os_log_default;
  }

  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    if (a5)
    {
      int v15 = *(_DWORD *)(a5 + 8);
      int v16 = *(unsigned __int8 *)(a5 + 24);
    }

    else
    {
      int v15 = -1;
      int v16 = -1;
    }

    v18[0] = 67109632;
    v18[1] = v15;
    __int16 v19 = 1024;
    int v20 = v16;
    __int16 v21 = 1024;
    int v22 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "[AccAuth] _createCertificateDataWithHash: certificateDataLen %d, certificateHashLen %d, errorNo %d \n",  (uint8_t *)v18,  0x14u);
  }

  return v7;
}

uint64_t _acc_auth_protocol_setPeerCertificateDataAtIndex(unsigned __int8 *a1, unsigned int a2, __int128 *a3)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = 1LL;
  if (a1 && a3)
  {
    uint64_t v6 = *((void *)a1 + 169);
    if (v6)
    {
      if (gLogObjects && gNumLogObjects >= 55)
      {
        uint64_t v8 = (os_log_s *)*(id *)(gLogObjects + 432);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v8 = (os_log_s *)&_os_log_default;
        id v9 = &_os_log_default;
      }

      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        int v20 = *a1;
        int v21 = *((_DWORD *)a3 + 2);
        int v22 = *((unsigned __int8 *)a3 + 24);
        int v23 = *(_DWORD *)(v6 + 160);
        int v24 = 67110144;
        int v25 = v20;
        __int16 v26 = 1024;
        int v27 = v21;
        __int16 v28 = 1024;
        int v29 = v22;
        __int16 v30 = 1024;
        unsigned int v31 = a2;
        __int16 v32 = 1024;
        int v33 = v23;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "[AccAuth] _setPeerCertificateDataAtIndex: sessionID %d, certificateDataLen %d, certificateHashLen %d, index %d , certificateDataCount %d \n",  (uint8_t *)&v24,  0x20u);
      }

      if (a2 > 3)
      {
        uint64_t v7 = 27LL;
      }

      else
      {
        uint64_t v10 = v6 + 40LL * a2;
        if (*(_DWORD *)(v6 + 160) <= a2) {
          *(_DWORD *)(v6 + 160) = a2 + 1;
        }
        else {
          _acc_auth_protocol_cleanupCertificateData(v6 + 40LL * a2);
        }
        uint64_t v7 = 0LL;
        __int128 v11 = *a3;
        __int128 v12 = a3[1];
        *(void *)(v10 + 32) = *((void *)a3 + 4);
        *(_OWORD *)uint64_t v10 = v11;
        *(_OWORD *)(v10 + 16) = v12;
      }
    }

    else
    {
      uint64_t v7 = 2LL;
    }
  }

  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v13 = (os_log_s *)*(id *)(gLogObjects + 432);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v13 = (os_log_s *)&_os_log_default;
    id v14 = &_os_log_default;
  }

  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a3)
    {
      int v16 = *((_DWORD *)a3 + 2);
      int v17 = *((unsigned __int8 *)a3 + 24);
    }

    else
    {
      int v16 = -1;
      int v17 = -1;
    }

    int v18 = *a1;
    if (v6) {
      int v19 = *(_DWORD *)(v6 + 160);
    }
    else {
      int v19 = -1;
    }
    int v24 = 67110400;
    int v25 = v18;
    __int16 v26 = 1024;
    int v27 = v16;
    __int16 v28 = 1024;
    int v29 = v17;
    __int16 v30 = 1024;
    unsigned int v31 = a2;
    __int16 v32 = 1024;
    int v33 = v19;
    __int16 v34 = 1024;
    int v35 = v7;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "[AccAuth] _setPeerCertificateDataAtIndex: sessionID %d, certificateDataLen %d, certificateHashLen %d, index %d, ce rtificateDataCount %d, errorNo %d \n",  (uint8_t *)&v24,  0x26u);
  }

  return v7;
}

uint64_t _acc_auth_protocol_setPeerLeafCertificateData(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = 1LL;
  if (a1 && a2)
  {
    uint64_t v5 = *((void *)a1 + 169);
    if (v5)
    {
      if (platform_systemInfo_isInternalBuild()
        && acc_userDefaults_BOOLForKey((uint64_t)@"ACCAuthProtocolPretendAuth")
        && *(_DWORD *)(v5 + 160) >= 3u)
      {
        _acc_auth_protocol_cleanupCertificateInfo(v5);
      }

      uint64_t v4 = _acc_auth_protocol_setPeerCertificateDataAtIndex(a1, 0, (__int128 *)a2);
    }

    else
    {
      uint64_t v4 = 1LL;
    }
  }

  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v6 = (os_log_s *)*(id *)(gLogObjects + 432);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v6 = (os_log_s *)&_os_log_default;
    id v7 = &_os_log_default;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v8 = *a1;
    if (a2)
    {
      int v9 = *(_DWORD *)(a2 + 8);
      int v10 = *(unsigned __int8 *)(a2 + 24);
    }

    else
    {
      int v9 = -1;
      int v10 = -1;
    }

    v12[0] = 67109888;
    v12[1] = v8;
    __int16 v13 = 1024;
    int v14 = v9;
    __int16 v15 = 1024;
    int v16 = v10;
    __int16 v17 = 1024;
    int v18 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "[AccAuth] _setPeerLeafCertificateData: sessionID %d, certificateDataLen %d, certificateHashLen %d, errorNo %d \n",  (uint8_t *)v12,  0x1Au);
  }

  return v4;
}

uint64_t _acc_auth_protocol_addPeerIntermediateCertificateData(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = 0LL;
  uint64_t v5 = 1LL;
  if (a1 && a2)
  {
    uint64_t v4 = *((void *)a1 + 169);
    if (v4)
    {
      if (gLogObjects && gNumLogObjects >= 55)
      {
        uint64_t v6 = (os_log_s *)*(id *)(gLogObjects + 432);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v6 = (os_log_s *)&_os_log_default;
        id v7 = &_os_log_default;
      }

      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        int v15 = *a1;
        int v16 = *(_DWORD *)(a2 + 8);
        int v17 = *(unsigned __int8 *)(a2 + 24);
        int v18 = *(_DWORD *)(v4 + 160);
        int v19 = 67109888;
        int v20 = v15;
        __int16 v21 = 1024;
        int v22 = v16;
        __int16 v23 = 1024;
        int v24 = v17;
        __int16 v25 = 1024;
        int v26 = v18;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "[AccAuth] _addPeerIntermediateCertificateData: sessionID %d, certificateDataLen %d, certificateHashLen %d, cer tificateDataCount %d \n",  (uint8_t *)&v19,  0x1Au);
      }

      if (*(_DWORD *)(v4 + 160) > 2u)
      {
        uint64_t v5 = 27LL;
      }

      else
      {
        _acc_auth_protocol_setPeerCertificateDataAtIndex(a1, *(_DWORD *)(v4 + 160), (__int128 *)a2);
        uint64_t v5 = 0LL;
      }
    }

    else
    {
      uint64_t v5 = 2LL;
    }
  }

  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v8 = (os_log_s *)*(id *)(gLogObjects + 432);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v8 = (os_log_s *)&_os_log_default;
    id v9 = &_os_log_default;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    if (a2)
    {
      int v10 = *(_DWORD *)(a2 + 8);
      int v11 = *(unsigned __int8 *)(a2 + 24);
    }

    else
    {
      int v10 = -1;
      int v11 = -1;
    }

    int v12 = *a1;
    if (v4) {
      int v13 = *(_DWORD *)(v4 + 160);
    }
    else {
      int v13 = -1;
    }
    int v19 = 67110144;
    int v20 = v12;
    __int16 v21 = 1024;
    int v22 = v10;
    __int16 v23 = 1024;
    int v24 = v11;
    __int16 v25 = 1024;
    int v26 = v13;
    __int16 v27 = 1024;
    int v28 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "[AccAuth] _addPeerIntermediateCertificateData: sessionID %d, certificateDataLen %d, certificateHashLen %d, certifi cateDataCount %d, errorNo %d \n",  (uint8_t *)&v19,  0x20u);
  }

  return v5;
}

uint64_t _acc_auth_protocol_validatePeerCertificateChain(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v2 = 0LL;
    goto LABEL_9;
  }

  uint64_t v2 = *(void *)(a1 + 1352);
  if (!v2)
  {
LABEL_9:
    uint64_t v3 = 1LL;
    goto LABEL_10;
  }

  if (!platform_systemInfo_isInternalBuild()
    || (acc_userDefaults_BOOLForKey((uint64_t)@"ACCAuthProtocolPretendAuth") & 1) == 0)
  {
    if (*(_DWORD *)(v2 + 160))
    {
      uint64_t v3 = _acc_auth_protocol_validateCertificateChain(a1, v2);
      goto LABEL_10;
    }

    goto LABEL_9;
  }

  uint64_t v3 = 0LL;
LABEL_10:
  if (platform_systemInfo_isInternalBuild()
    && (acc_userDefaults_BOOLForKey((uint64_t)@"ACCAuthProtocolPretendAuth") & 1) != 0)
  {
    if (gLogObjects && gNumLogObjects >= 55)
    {
      uint64_t v4 = (os_log_s *)*(id *)(gLogObjects + 432);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v4 = (os_log_s *)&_os_log_default;
      id v10 = &_os_log_default;
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v12 = 67109120;
      int v13 = v3;
      id v7 = "[AccAuth] _acc_auth_protocol_validatePeerCertificateChain: errorNo %d \n";
      int v8 = v4;
      uint32_t v9 = 8;
LABEL_31:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, v7, (uint8_t *)&v12, v9);
    }
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 55)
    {
      uint64_t v4 = (os_log_s *)*(id *)(gLogObjects + 432);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v4 = (os_log_s *)&_os_log_default;
      id v5 = &_os_log_default;
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      if (v2) {
        int v6 = *(_DWORD *)(v2 + 160);
      }
      else {
        int v6 = -1;
      }
      int v12 = 67109376;
      int v13 = v6;
      __int16 v14 = 1024;
      int v15 = v3;
      id v7 = "[AccAuth] _acc_auth_protocol_validatePeerCertificateChain: peer certificateDataCount %d, errorNo %d \n";
      int v8 = v4;
      uint32_t v9 = 14;
      goto LABEL_31;
    }
  }

  return v3;
}

uint64_t _acc_auth_protocol_validateCertificateChain(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = 0LL;
  uint64_t v4 = 1LL;
  id v5 = &startLogsNotificationObservers;
  int v6 = &startLogsNotificationObservers;
  id v7 = 0LL;
  if (a1 && a2)
  {
    if (platform_systemInfo_isInternalBuild()
      && (acc_userDefaults_BOOLForKey((uint64_t)@"ACCAuthProtocolPretendAuth") & 1) != 0)
    {
      uint64_t v4 = 0LL;
      uint64_t v3 = 0LL;
      id v7 = 0LL;
    }

    else
    {
      int v8 = (_DWORD *)(v2 + 160);
      uint32_t v9 = -[NSMutableArray initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableArray),  "initWithCapacity:",  *(unsigned int *)(v2 + 160));
      if (gLogObjects) {
        BOOL v10 = gNumLogObjects <= 54;
      }
      else {
        BOOL v10 = 1;
      }
      int v11 = !v10;
      if (v9)
      {
        uint64_t v3 = v9;
        uint64_t v37 = v2;
        if (v11)
        {
          int v12 = (os_log_s *)*(id *)(gLogObjects + 432);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          int v12 = (os_log_s *)&_os_log_default;
          id v14 = &_os_log_default;
        }

        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
          _acc_auth_protocol_validateCertificateChain_cold_6();
        }

        if (*v8)
        {
          unint64_t v15 = 0LL;
          int v16 = (_DWORD *)(v2 + 8);
          while (1)
          {
            int v17 = v5;
            uint64_t v18 = v5[353];
            int v19 = v6;
            int v20 = *((_DWORD *)v6 + 708);
            if (v18 && v20 >= 55)
            {
              __int16 v21 = (os_log_s *)*(id *)(v18 + 432);
            }

            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)uint64_t v40 = v18;
                *(_WORD *)&v40[8] = 1024;
                int v41 = v20;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              }

              id v22 = &_os_log_default;
              __int16 v21 = (os_log_s *)&_os_log_default;
            }

            int v6 = v19;
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
            {
              int v25 = *v16;
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)uint64_t v40 = v15;
              *(_WORD *)&v40[4] = 1024;
              *(_DWORD *)&_BYTE v40[6] = v25;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "[AccAuth] _validateCertificateChain: [%d] certificateDataLen %u \n",  buf,  0xEu);
            }

            if (!*v16)
            {
              id v7 = 0LL;
              uint64_t v4 = 2LL;
              goto LABEL_54;
            }

            uint64_t v23 = objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", *((void *)v16 - 1)));
            if (!v23) {
              break;
            }
            int v24 = (void *)v23;
            -[NSMutableArray addObject:](v3, "addObject:", v23);

            ++v15;
            v16 += 10;
            id v5 = v17;
          }

          id v7 = 0LL;
          uint64_t v4 = 12LL;
LABEL_54:
          id v5 = v17;
          uint64_t v2 = v37;
        }

        else
        {
LABEL_35:
          uint64_t v26 = v5[353];
          if (v26 && *((int *)v6 + 708) >= 55)
          {
            __int16 v27 = (os_log_s *)*(id *)(v26 + 432);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            __int16 v27 = (os_log_s *)&_os_log_default;
            id v29 = &_os_log_default;
          }

          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG)) {
            _acc_auth_protocol_validateCertificateChain_cold_4(v3, v27);
          }

          uint64_t v2 = v37;
          if (-[NSMutableArray count](v3, "count"))
          {
            __int16 v30 = (void *)objc_claimAutoreleasedReturnValue( +[MFAACertificateManager sharedManager]( &OBJC_CLASS___MFAACertificateManager,  "sharedManager"));
            id v38 = 0LL;
            unsigned int v31 = [v30 validateCertificateChain:v3 realtime:0 error:&v38];
            id v7 = v38;

            uint64_t v4 = v31 != 1;
          }

          else
          {
            id v7 = 0LL;
            uint64_t v4 = 2LL;
          }
        }
      }

      else
      {
        if (v11)
        {
          int v13 = (os_log_s *)*(id *)(gLogObjects + 432);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          int v13 = (os_log_s *)&_os_log_default;
          id v28 = &_os_log_default;
        }

        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          _acc_auth_protocol_validateCertificateChain_cold_2();
        }

        uint64_t v3 = 0LL;
        id v7 = 0LL;
        uint64_t v4 = 12LL;
      }
    }
  }

  uint64_t v32 = v5[353];
  if (v32 && *((int *)v6 + 708) >= 55)
  {
    int v33 = (os_log_s *)*(id *)(v32 + 432);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v33 = (os_log_s *)&_os_log_default;
    id v34 = &_os_log_default;
  }

  if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
  {
    if (v2) {
      int v35 = *(_DWORD *)(v2 + 160);
    }
    else {
      int v35 = -1;
    }
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)uint64_t v40 = v35;
    *(_WORD *)&v40[4] = 1024;
    *(_DWORD *)&_BYTE v40[6] = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_INFO,  "[AccAuth] _validateCertificateChain: certificateDataCount %d, errorNo %d \n",  buf,  0xEu);
  }

  return v4;
}

uint64_t _acc_auth_protocol_challengeSizeForCertificate(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0LL;
  int v4 = 0;
  if (!a1 || !a2) {
    goto LABEL_17;
  }
  CFDataRef v5 = CFDataCreate(kCFAllocatorDefault, *(const UInt8 **)a2, *(unsigned int *)(a2 + 8));
  int v6 = MFAACertificateAuthVersionNumber();
  int v4 = v6;
  if (v6 == 2)
  {
    uint64_t v3 = 20LL;
    if (!v5) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }

  if (v6 == 3)
  {
    uint64_t v3 = 32LL;
    if (!v5) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }

  if (!platform_systemInfo_isInternalBuild())
  {
    uint64_t v3 = 0LL;
    if (!v5) {
      goto LABEL_17;
    }
LABEL_16:
    CFRelease(v5);
    goto LABEL_17;
  }

  else {
    uint64_t v3 = 0LL;
  }
  if (v5) {
    goto LABEL_16;
  }
LABEL_17:
  if (gLogObjects && gNumLogObjects >= 55)
  {
    id v7 = (os_log_s *)*(id *)(gLogObjects + 432);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v7 = (os_log_s *)&_os_log_default;
    id v8 = &_os_log_default;
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    if (a2)
    {
      int v9 = *(_DWORD *)(a2 + 8);
      int v10 = *(unsigned __int8 *)(a2 + 24);
    }

    else
    {
      int v9 = -1;
      int v10 = -1;
    }

    v12[0] = 67109888;
    v12[1] = v9;
    __int16 v13 = 1024;
    int v14 = v10;
    __int16 v15 = 1024;
    int v16 = v4;
    __int16 v17 = 1024;
    int v18 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "[AccAuth] _challengeSizeForCertificate: certificateDataLen %d, certificateHashLen %d, authVerMajor %d, challengeSize %d \n",  (uint8_t *)v12,  0x1Au);
  }

  return v3;
}

uint64_t _acc_auth_protocol_generateChallenge(uint64_t a1, uint64_t a2, void *__buf, size_t __nbytes)
{
  int v4 = __nbytes;
  uint64_t v5 = 1LL;
  if (a1 && a2 && __buf && (_DWORD)__nbytes)
  {
    arc4random_buf(__buf, __nbytes);
    uint64_t v5 = 0LL;
  }

  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v6 = (os_log_s *)*(id *)(gLogObjects + 432);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v6 = (os_log_s *)&_os_log_default;
    id v7 = &_os_log_default;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v9[0] = 67109376;
    v9[1] = v4;
    __int16 v10 = 1024;
    int v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "[AccAuth] _generateChallenge: outChallengeLen %d, errorNo %d \n",  (uint8_t *)v9,  0xEu);
  }

  return v5;
}

uint64_t _acc_auth_protocol_generateChallengeResponse( uint64_t a1, uint64_t a2, void *__src, size_t __n, void *__dst, int a6, _BYTE *a7)
{
  int v8 = __n;
  uint64_t v10 = 1LL;
  if (a2)
  {
    if (a1)
    {
      if (__src)
      {
        if ((_DWORD)__n)
        {
          if (__dst)
          {
            char v11 = a6;
            if (a6)
            {
              if (a7)
              {
                memcpy(__dst, __src, __n);
                uint64_t v10 = 0LL;
                *a7 = v11;
              }
            }
          }
        }
      }
    }
  }

  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v12 = (os_log_s *)*(id *)(gLogObjects + 432);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v12 = (os_log_s *)&_os_log_default;
    id v13 = &_os_log_default;
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    if (a2)
    {
      int v14 = *(_DWORD *)(a2 + 8);
      int v15 = *(unsigned __int8 *)(a2 + 24);
    }

    else
    {
      int v14 = -1;
      int v15 = -1;
    }

    int v16 = *a7;
    v18[0] = 67110144;
    v18[1] = v14;
    __int16 v19 = 1024;
    int v20 = v15;
    __int16 v21 = 1024;
    int v22 = v8;
    __int16 v23 = 1024;
    int v24 = v16;
    __int16 v25 = 1024;
    int v26 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "[AccAuth] _generateChallengeResponse: certificateDataLen %d, certificateHashLen %d, inChallengeLen %d, outResponse Len %d, errorNo %d \n",  (uint8_t *)v18,  0x20u);
  }

  return v10;
}

uint64_t _acc_auth_protocol_verifyChallengeResponse( uint64_t a1, const UInt8 *a2, unsigned int a3, const UInt8 *a4, unsigned int a5)
{
  uint64_t v7 = 1LL;
  if (!a1) {
    goto LABEL_36;
  }
  if (!a2) {
    goto LABEL_36;
  }
  if (!a3) {
    goto LABEL_36;
  }
  if (!a4) {
    goto LABEL_36;
  }
  if (!a5) {
    goto LABEL_36;
  }
  uint64_t v10 = *(void *)(a1 + 1352);
  if (!v10) {
    goto LABEL_36;
  }
  if (!*(_DWORD *)(v10 + 160)) {
    goto LABEL_36;
  }
  if (!*(void *)v10) {
    goto LABEL_36;
  }
  CFIndex v11 = *(unsigned int *)(v10 + 8);
  if (!(_DWORD)v11) {
    goto LABEL_36;
  }
  CFDataRef v12 = CFDataCreate(kCFAllocatorDefault, *(const UInt8 **)v10, v11);
  CFDataRef v13 = CFDataCreate(kCFAllocatorDefault, a2, a3);
  CFDataRef v14 = CFDataCreate(kCFAllocatorDefault, a4, a5);
  CFDataRef v15 = v14;
  if (v12 && v13 && v14)
  {
    if (platform_systemInfo_isInternalBuild()
      && (acc_userDefaults_BOOLForKey((uint64_t)@"ACCAuthProtocolPretendAuth") & 1) != 0)
    {
      uint64_t v7 = 0LL;
    }

    else if (MFAAVerifyNonceSignature(v12, v13, v15))
    {
      uint64_t v7 = 0LL;
    }

    else
    {
      uint64_t v7 = 80LL;
    }

    if (acc_userDefaults_BOOLForKey((uint64_t)@"ForceAuthFail"))
    {
      if (gLogObjects && gNumLogObjects >= 55)
      {
        int v16 = (os_log_s *)*(id *)(gLogObjects + 432);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        int v16 = (os_log_s *)&_os_log_default;
        id v17 = &_os_log_default;
      }

      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        int v21 = 67109888;
        unsigned int v22 = a3;
        __int16 v23 = 1024;
        unsigned int v24 = a5;
        __int16 v25 = 1024;
        int v26 = v7;
        __int16 v27 = 1024;
        int v28 = 80;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "[AccAuth] _verifyChallengeResponse: challengeLen %d, responseLen %d, override errorNo %d -> %d \n",  (uint8_t *)&v21,  0x1Au);
      }

      uint64_t v7 = 80LL;
    }
  }

  else
  {
    uint64_t v7 = 12LL;
    if (!v12) {
      goto LABEL_32;
    }
  }

  CFRelease(v12);
LABEL_32:
  if (v13) {
    CFRelease(v13);
  }
  if (v15) {
    CFRelease(v15);
  }
LABEL_36:
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v18 = (os_log_s *)*(id *)(gLogObjects + 432);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v18 = (os_log_s *)&_os_log_default;
    id v19 = &_os_log_default;
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    int v21 = 67109632;
    unsigned int v22 = a3;
    __int16 v23 = 1024;
    unsigned int v24 = a5;
    __int16 v25 = 1024;
    int v26 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "[AccAuth] _verifyChallengeResponse: challengeLen %d, responseLen %d, errorNo %d \n",  (uint8_t *)&v21,  0x14u);
  }

  return v7;
}

uint64_t _acc_auth_protocol_certificateCacheGetCert(uint64_t a1, const void *a2, unsigned int a3, uint64_t a4)
{
  uint64_t CertificateDataWithHash = 1LL;
  if (a1 && a2 && a3 >= 0x20 && a4)
  {
    uint64_t v9 = *(void *)(a1 + 1352);
    if (!v9) {
      goto LABEL_15;
    }
    if (platform_systemInfo_isInternalBuild()
      && (acc_userDefaults_BOOLForKey((uint64_t)@"ACCAuthProtocolPretendAuth") & 1) != 0)
    {
      if (*(_DWORD *)(v9 + 160) >= 3u)
      {
        _acc_auth_protocol_getCertificate(a1, a2, a3, a4);
        uint64_t CertificateDataWithHash = 0LL;
        goto LABEL_19;
      }

LABEL_15:
      uint64_t CertificateDataWithHash = 1LL;
      goto LABEL_19;
    }

    if (__getCerCacheObj_onceToken != -1) {
      dispatch_once(&__getCerCacheObj_onceToken, &__block_literal_global_1);
    }
    uint64_t v10 = __getCerCacheObj___certCacheObj;
    CFStringRef v11 = CFStringCreateWithBytes(kCFAllocatorDefault, (const UInt8 *)a2, a3, 0x8000100u, 0);
    if (v11)
    {
      CFStringRef v12 = v11;
      CFDataRef v13 = (const __CFData *)MFAACreateCertDataFromSerialNumber(v10, v11);
      if (v13)
      {
        CFDataRef v14 = v13;
        BytePtr = CFDataGetBytePtr(v13);
        unsigned int Length = CFDataGetLength(v14);
        uint64_t CertificateDataWithHash = _acc_auth_protocol_createCertificateDataWithHash(BytePtr, Length, a2, a3, a4);
        CFRelease(v14);
      }

      else
      {
        uint64_t CertificateDataWithHash = 2LL;
      }

      CFRelease(v12);
    }

    else
    {
      uint64_t CertificateDataWithHash = 2LL;
    }
  }

  CFDataRef v15 = *(_BYTE *)a6 & 0xF;
LABEL_16:
  if (gLogObjects && gNumLogObjects >= 60)
  {
    int v16 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    int v16 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    id v18 = v15 - 1LL;
    if (v18 > 0xA)
    {
      int v19 = "UNKNOWN";
      if (a8) {
        goto LABEL_26;
      }
    }

    else
    {
      int v19 = off_1001FD120[v18];
      if (a8)
      {
LABEL_26:
        int v20 = (unsigned __int16)*a8;
LABEL_29:
        *(_DWORD *)buf = 136316674;
        int v24 = "qiAuth_protocol_initMsg_CHALLENGE";
        __int16 v25 = 1024;
        int v26 = 2719;
        __int16 v27 = 1024;
        int v28 = v14;
        id v29 = 1024;
        __int16 v30 = a2;
        unsigned int v31 = 1024;
        uint64_t v32 = v15;
        int v33 = 2080;
        id v34 = v19;
        int v35 = 1024;
        CFStringRef v36 = v20;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "%s:%d result %d, version %u, msgType %d(%s), msgDataOutLen %d",  buf,  0x34u);
        return v14;
      }
    }

    int v20 = -1;
    goto LABEL_29;
  }

  return v14;
}

    -[NSMutableDictionary setObject:forKey:]( v4,  "setObject:forKey:",  self->_artist,  @"ACCMediaLibraryPlaylistItemArtist");
    validMask = self->_validMask;
    if ((validMask & 0x4000) == 0)
    {
LABEL_8:
      if ((validMask & 0x10000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }

    __break(0x5519u);
  }

  return result;
}

    __break(0x5519u);
  }

  return result;
}

uint64_t iap2_assistiveTouch_startAssistiveTouchHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0LL;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 21;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      uint64_t v5 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      uint64_t v5 = *(os_log_s **)(gLogObjects + 160);
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 8);
      int v11 = 138412290;
      uint64_t v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "StartAssistiveTouch %@", (uint8_t *)&v11, 0xCu);
    }

    uint64_t Feature = iap2_feature_getFeature(a1, 3u);
    if (Feature)
    {
      int v8 = (_BYTE *)Feature;
      if (gLogObjects && gNumLogObjects >= 35)
      {
        uint64_t v9 = *(os_log_s **)(gLogObjects + 272);
      }

      else
      {
        uint64_t v9 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
        iap2_assistiveTouch_startAssistiveTouchHandler_cold_1();
      }
      uint64_t v2 = 1LL;
      *int v8 = 1;
      platform_assistiveTouch_setState(*(void **)(a1 + 8), 1LL);
    }

    else
    {
      return 0LL;
    }
  }

  return v2;
}

uint64_t iap2_assistiveTouch_stopAssistiveTouchHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0LL;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 21;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      uint64_t v5 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      uint64_t v5 = *(os_log_s **)(gLogObjects + 160);
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 8);
      int v9 = 138412290;
      uint64_t v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "StopAssistiveTouch %@", (uint8_t *)&v9, 0xCu);
    }

    uint64_t result = iap2_feature_getFeature(a1, 3u);
    if (result)
    {
      uint64_t v7 = (unsigned __int8 *)result;
      if (gLogObjects && gNumLogObjects >= 35)
      {
        int v8 = *(os_log_s **)(gLogObjects + 272);
      }

      else
      {
        int v8 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
        iap2_assistiveTouch_stopAssistiveTouchHandler_cold_1(a1, v7);
      }
      *uint64_t v7 = 0;
      platform_assistiveTouch_setState(*(void **)(a1 + 8), 0LL);
      return 1LL;
    }
  }

  return result;
}

uint64_t iap2_assistiveTouch_startAssistiveTouchUpdateHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0LL;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 21;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      uint64_t v5 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      uint64_t v5 = *(os_log_s **)(gLogObjects + 160);
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 8);
      int v11 = 138412290;
      uint64_t v12 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "StartAssistiveTouchUpdate %@",  (uint8_t *)&v11,  0xCu);
    }

    uint64_t Feature = iap2_feature_getFeature(a1, 3u);
    if (Feature)
    {
      uint64_t v8 = Feature;
      if (gLogObjects && gNumLogObjects >= 35)
      {
        int v9 = *(os_log_s **)(gLogObjects + 272);
      }

      else
      {
        int v9 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
        iap2_assistiveTouch_startAssistiveTouchUpdateHandler_cold_1();
      }
      uint64_t v2 = 1LL;
      *(_BYTE *)(v8 + 1) = 1;
      platform_assistiveTouch_requestStatus(*(void **)(a1 + 8));
    }

    else
    {
      return 0LL;
    }
  }

  return v2;
}

uint64_t iap2_assistiveTouch_stopAssistiveTouchUpdateHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0LL;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 21;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      uint64_t v5 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      uint64_t v5 = *(os_log_s **)(gLogObjects + 160);
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 8);
      int v9 = 138412290;
      uint64_t v10 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "StopAssistiveTouchUpdate %@",  (uint8_t *)&v9,  0xCu);
    }

    uint64_t result = iap2_feature_getFeature(a1, 3u);
    if (result)
    {
      uint64_t v7 = result;
      if (gLogObjects && gNumLogObjects >= 35)
      {
        uint64_t v8 = *(os_log_s **)(gLogObjects + 272);
      }

      else
      {
        uint64_t v8 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
        iap2_assistiveTouch_stopAssistiveTouchUpdateHandler_cold_1(a1, v7);
      }
      *(_BYTE *)(v7 + 1) = 0;
      return 1LL;
    }
  }

  return result;
}

uint64_t iap2_assistiveTouch_notifyStatusUpdateHandler(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t *)result;
    char v4 = a2 != 0;
    if (gLogObjects && gNumLogObjects >= 35)
    {
      uint64_t v5 = *(os_log_s **)(gLogObjects + 272);
    }

    else
    {
      uint64_t v5 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = v3[1];
      int v15 = 138412546;
      uint64_t v16 = v6;
      __int16 v17 = 1024;
      BOOL v18 = a2 != 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "iAP2AssistiveTouch notifyStatusUpdate: %@ state=%d",  (uint8_t *)&v15,  0x12u);
    }

    uint64_t result = iap2_feature_getFeature((uint64_t)v3, 3u);
    if (result)
    {
      uint64_t v7 = result;
      if (gLogObjects && gNumLogObjects >= 35)
      {
        uint64_t v8 = *(os_log_s **)(gLogObjects + 272);
      }

      else
      {
        uint64_t v8 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v13 = v3[1];
        int v14 = *(unsigned __int8 *)(v7 + 1);
        int v15 = 138413314;
        uint64_t v16 = v13;
        __int16 v17 = 1024;
        BOOL v18 = v14;
        __int16 v19 = 1024;
        BOOL v20 = a2 != 0;
        __int16 v21 = 2048;
        unsigned int v22 = v3;
        __int16 v23 = 2048;
        uint64_t v24 = v7;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "iAP2AssistiveTouch notifyStatusUpdate: %@ infoRequested %d, state=%d pEndpoint=%p assistiveTouch=%p",  (uint8_t *)&v15,  0x2Cu);
      }

      if (*(_BYTE *)(v7 + 1))
      {
        uint64_t v9 = iAP2MsgInit((uint64_t)(v3 + 15), 21507, v3[24], 0xFFFF, 0LL, 0LL);
        uint64_t result = (uint64_t)iAP2MsgAddU8Param(v9, 0LL, 0, v4);
        if (result)
        {
          if (gLogObjects && gNumLogObjects >= 35)
          {
            uint64_t v10 = *(os_log_s **)(gLogObjects + 272);
          }

          else
          {
            uint64_t v10 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            uint64_t v11 = v3[1];
            int MsgID = iAP2MsgGetMsgID(v9);
            int v15 = 138412546;
            uint64_t v16 = v11;
            __int16 v17 = 1024;
            BOOL v18 = MsgID;
            _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "iAP2AssistiveTouch notifyStatusUpdate: %@ send message %xh",  (uint8_t *)&v15,  0x12u);
          }

          iap2_sessionControl_sendOutgoingMessage(v3, v9);
          return 1LL;
        }
      }

      else
      {
        return 0LL;
      }
    }
  }

  return result;
}

_WORD *_createFeature_18(_WORD *result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 21;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      uint64_t v3 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      uint64_t v3 = *(os_log_s **)(gLogObjects + 160);
    }

    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = *((void *)v1 + 1);
      int v5 = 138412290;
      uint64_t v6 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "iAP2AssistiveTouch _createFeature %@",  (uint8_t *)&v5,  0xCu);
    }

    uint64_t result = calloc(1uLL, 2uLL);
    if (result) {
      *uint64_t result = 0;
    }
  }

  return result;
}

uint64_t _destroyFeature_18(void **a1, uint64_t a2)
{
  uint64_t result = 0LL;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v5 = gNumLogObjects < 21;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      uint64_t v6 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      uint64_t v6 = *(os_log_s **)(gLogObjects + 160);
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a2 + 8);
      int v8 = 138412290;
      uint64_t v9 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "iAP2AssistiveTouch _destroyFeature %@",  (uint8_t *)&v8,  0xCu);
    }

    if (*a1)
    {
      if (*(_BYTE *)*a1) {
        platform_assistiveTouch_accessoryDetached(*(void *)(a2 + 8));
      }
      platform_assistiveTouch_decrementUserCount();
      if (*a1)
      {
        free(*a1);
        *a1 = 0LL;
      }

      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t _startFeatureFromDevice_11(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 21;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      uint64_t v3 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      uint64_t v3 = *(os_log_s **)(gLogObjects + 160);
    }

    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "iAP2AssistiveTouch _startFeatureFromDevice",  v4,  2u);
    }

    uint64_t result = iap2_feature_getFeature(v1, 3u);
    if (result)
    {
      char v5 = 0;
      if (iap2_identification_checkRequiredMsgIDs(v1, (uint64_t)&gskMsgAssistiveTouchList, 5, &v5))
      {
        platform_assistiveTouch_incrementUserCount();
        platform_assistiveTouch_accessoryAttached(*(void *)(v1 + 8));
      }

      return 1LL;
    }
  }

  return result;
}

uint64_t _checkIdentificationInfo_16(uint64_t a1)
{
  char v6 = 0;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&gskMsgAssistiveTouchList, 5u, &v6);
  uint64_t v3 = v2;
  if (v6) {
    BOOL v4 = (_DWORD)v2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    iap2_features_createFeature(a1, 3u);
    iap2_identification_setIdentifiedForFeature(a1, 3u);
  }

  return v3;
}

void OUTLINED_FUNCTION_3_11(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

  ;
}

  ;
}

void mfi4Auth_relay_cleanup(uint64_t a1)
{
  uint64_t v1 = 0LL;
  uint64_t v2 = a1 + 168;
  do
  {
    uint64_t v3 = *(void **)(v2 + v1);
    *(void *)(v2 + v1) = 0LL;

    v1 += 8LL;
  }

  while (v1 != 24);
}

uint64_t mfi4Auth_protocol_processIncomingMessageRelay( uint64_t a1, int a2, uint64_t a3, uint64_t *a4, _BYTE *a5)
{
  if (!a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v15 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v15 = (os_log_s *)&_os_log_default;
      id v17 = &_os_log_default;
    }

    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processIncomingMessageRelay_cold_3();
    }
    goto LABEL_23;
  }

  if (!a3)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v16 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v16 = (os_log_s *)&_os_log_default;
      id v20 = &_os_log_default;
    }

    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processIncomingMessageRelay_cold_14();
    }
    goto LABEL_49;
  }

  int MsgID = iAP2MsgGetMsgID(a3);
  if (gLogObjects) {
    BOOL v11 = gNumLogObjects <= 55;
  }
  else {
    BOOL v11 = 1;
  }
  int v12 = !v11;
  if (!MsgID)
  {
    if (v12)
    {
      uint64_t v16 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v16 = (os_log_s *)&_os_log_default;
      id v21 = &_os_log_default;
    }

    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processIncomingMessageRelay_cold_16();
    }
LABEL_49:

    char v22 = 0;
    char v60 = 1;
LABEL_67:
    char v25 = 1;
LABEL_68:
    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v26 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v26 = (os_log_s *)&_os_log_default;
      id v27 = &_os_log_default;
    }

    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      int v28 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)id v62 = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "processIncomingMessageRelay: action %d",  buf,  8u);
    }

    uint64_t v29 = *(void *)(a1 + 72);
    if (acc_userDefaults_BOOLForKey((uint64_t)@"ForceAccInfoUpdateRelaySupport"))
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        __int16 v30 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        __int16 v30 = (os_log_s *)&_os_log_default;
        id v31 = &_os_log_default;
      }

      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)id v62 = v29;
        *(_WORD *)&v62[8] = 1024;
        LODWORD(v63) = 1;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "processIncomingMessageRelay: override supportedSecureTunnelCapabilitiesMask 0x%llx |= 0x%x",  buf,  0x12u);
      }

      v29 |= 1uLL;
    }

    if (acc_userDefaults_BOOLForKey((uint64_t)@"IgnoreAccInfoUpdateRelaySupport"))
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v32 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v32 = (os_log_s *)&_os_log_default;
        id v33 = &_os_log_default;
      }

      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)id v62 = v29;
        *(_WORD *)&v62[8] = 1024;
        LODWORD(v63) = -2;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "processIncomingMessageRelay: override supportedSecureTunnelCapabilitiesMask 0x%llx &= 0x%x",  buf,  0x12u);
      }

      v29 &= ~1uLL;
    }

    if (acc_userDefaults_BOOLForKey((uint64_t)@"ForceT56RelaySupport"))
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        id v34 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v34 = (os_log_s *)&_os_log_default;
        id v35 = &_os_log_default;
      }

      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)id v62 = v29;
        *(_WORD *)&v62[8] = 1024;
        LODWORD(v63) = 4;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "processIncomingMessageRelay: override supportedSecureTunnelCapabilitiesMask 0x%llx |= 0x%x",  buf,  0x12u);
      }

      v29 |= 4uLL;
    }

    if (gLogObjects && gNumLogObjects >= 56)
    {
      CFStringRef v36 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      CFStringRef v36 = (os_log_s *)&_os_log_default;
      id v37 = &_os_log_default;
    }

    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v38 = *(void *)(a1 + 80);
      *(_DWORD *)buf = 134218240;
      *(void *)id v62 = v29;
      *(_WORD *)&v62[8] = 2048;
      unint64_t v63 = v38;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "processIncomingMessageRelay: supportedSecureTunnelCapabilitiesMask 0x%llx, processed 0x%llx",  buf,  0x16u);
    }

    if (*(_DWORD *)(a1 + 32) || !v29 || v29 == *(void *)(a1 + 80))
    {
      if ((v22 & 1) == 0) {
        goto LABEL_149;
      }
LABEL_118:
      uint64_t result = 1LL;
      if ((v25 & 1) != 0) {
        return result;
      }
      goto LABEL_158;
    }

    EndpointWithUUID = acc_manager_getEndpointWithUUID(*(const void **)a1);
    if (EndpointWithUUID)
    {
      int v41 = EndpointWithUUID;
      if (EndpointWithUUID[7])
      {
        if ((v29 & 1) == 0 || (uint64_t v42 = *(void *)(a1 + 80), (v42 & 1) != 0))
        {
          if ((v29 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          {
            uint64_t v47 = gLogObjects;
            int v48 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 56)
            {
              __int16 v49 = (os_log_s *)*(id *)(gLogObjects + 440);
            }

            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)id v62 = v47;
                *(_WORD *)&v62[8] = 1024;
                LODWORD(v63) = v48;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              }

              __int16 v49 = (os_log_s *)&_os_log_default;
              id v57 = &_os_log_default;
            }

            if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v58 = v41[2];
              *(_DWORD *)buf = 138413058;
              *(void *)id v62 = v58;
              *(_WORD *)&v62[8] = 2048;
              unint64_t v63 = v29 & 0xFFFFFFFFFFFFFFFCLL;
              __int16 v64 = 1024;
              int v65 = 2;
              __int16 v66 = 2048;
              uint64_t v67 = 4LL;
              _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "processIncomingMessageRelay: %@, supportedSecureTunnelCapabilitiesMask 0x%llx, currentType/Mask %d/0x%llx",  buf,  0x26u);
            }

            if ((v29 & 4) != 0)
            {
              uint64_t v59 = *(void *)(a1 + 80);
              if ((v59 & 4) == 0)
              {
                *(void *)(a1 + 80) = v59 | 4;
                mfi4Auth_relay_StartRelayForType((const void **)a1, 2u, (uint64_t)a4, a5);
              }
            }
          }
        }

        else
        {
          *(void *)(a1 + 80) = v42 | 1;
          id v43 = logObjectForModule_9();
          int v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
          if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v45 = v41[2];
            *(_DWORD *)buf = 138412290;
            *(void *)id v62 = v45;
            _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "processIncomingMessageRelay: %@, initMessage RequestAccessoryInfoUpdate",  buf,  0xCu);
          }

          *(_DWORD *)(a1 + 32) = 14;
          mfi4Auth_relay_initMessage_DeviceiAP2RelayRemote_RequestAccessoryInfoUpdate(a1, a4);
        }

        goto LABEL_118;
      }

      if (gLogObjects && gNumLogObjects >= 56)
      {
        int v46 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        int v46 = (os_log_s *)&_os_log_default;
        id v52 = &_os_log_default;
      }

      char v51 = v60;
      if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
        goto LABEL_148;
      }
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        int v46 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        int v46 = (os_log_s *)&_os_log_default;
        id v50 = &_os_log_default;
      }

      char v51 = v60;
      if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      {
LABEL_148:

        if ((v51 & 1) != 0) {
          goto LABEL_149;
        }
        goto LABEL_118;
      }
    }

    mfi4Auth_protocol_processIncomingMessageRelay_cold_5();
    goto LABEL_148;
  }

  int v13 = MsgID;
  if (v12)
  {
    int v14 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v14 = (os_log_s *)&_os_log_default;
    id v18 = &_os_log_default;
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = *(unsigned __int16 *)(a1 + 28);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)id v62 = v19;
    *(_WORD *)&v62[4] = 1024;
    *(_DWORD *)&v62[6] = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "processIncomingMessageRelay: cmd:0x%x  rsp:0x%x",  buf,  0xEu);
  }

  if (v13 == 21094)
  {
    if (!a2) {
      goto LABEL_149;
    }
    if (mfi4Auth_relay_handle_iAP2RelaySucceeded(a1, a3, a4))
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        int v15 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        int v15 = (os_log_s *)&_os_log_default;
        id v56 = &_os_log_default;
      }

      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_processIncomingMessageRelay_cold_22();
      }
      goto LABEL_23;
    }

    goto LABEL_137;
  }

  if (v13 == 21093)
  {
    if (!a2) {
      goto LABEL_149;
    }
    mfi4Auth_relay_handle_iAP2RelayFailed(a1, a3);
    goto LABEL_66;
  }

  if (v13 != 21092)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      __int16 v23 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int16 v23 = (os_log_s *)&_os_log_default;
      id v24 = &_os_log_default;
    }

    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processIncomingMessageRelay_cold_18();
    }

LABEL_66:
    char v60 = 0;
    char v22 = 1;
    goto LABEL_67;
  }

  if (!a2) {
    goto LABEL_149;
  }
  if (!mfi4Auth_relay_handle_iAP2RelayRemote(a1, a3, a4))
  {
LABEL_137:
    char v60 = 0;
    char v25 = 0;
    char v22 = 1;
    goto LABEL_68;
  }

  if (gLogObjects && gNumLogObjects >= 56)
  {
    int v15 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v15 = (os_log_s *)&_os_log_default;
    id v55 = &_os_log_default;
  }

  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
    mfi4Auth_protocol_processIncomingMessageRelay_cold_20();
  }
LABEL_23:

LABEL_149:
  if (gLogObjects && gNumLogObjects >= 56)
  {
    int v53 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v53 = (os_log_s *)&_os_log_default;
    id v54 = &_os_log_default;
  }

  if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
    mfi4Auth_protocol_processIncomingMessageRelay_cold_1();
  }

  uint64_t result = 0LL;
  if (a5) {
LABEL_158:
  }
    *a5 = result;
  return result;
}

uint64_t mfi4Auth_relay_handle_iAP2RelayRemote(uint64_t a1, uint64_t a2, void *a3)
{
  BOOL v71 = 1;
  unsigned __int8 v70 = 0;
  unsigned __int16 v69 = 0;
  if (!a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      BOOL v4 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      BOOL v4 = (os_log_s *)&_os_log_default;
      id v11 = &_os_log_default;
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_handle_iAP2RelayRemote_cold_1();
    }
    goto LABEL_28;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      BOOL v4 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      BOOL v4 = (os_log_s *)&_os_log_default;
      id v10 = &_os_log_default;
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_handle_iAP2RelayRemote_cold_20();
    }
    goto LABEL_28;
  }

  if (gLogObjects) {
    BOOL v6 = gNumLogObjects <= 55;
  }
  else {
    BOOL v6 = 1;
  }
  int v7 = !v6;
  if (!a2)
  {
    if (v7)
    {
      BOOL v4 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      BOOL v4 = (os_log_s *)&_os_log_default;
      id v31 = &_os_log_default;
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_handle_iAP2RelayRemote_cold_3();
    }
    goto LABEL_28;
  }

  if (v7)
  {
    uint64_t v9 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v9 = (os_log_s *)&_os_log_default;
    id v13 = &_os_log_default;
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = iAP2MsgGetMsgID(a2);
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = iAP2MsgGetMsgLen(a2);
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_handle_iAP2RelayRemote: msgID 0x%04x, len %d",  buf,  0xEu);
  }

  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
  if (FirstParam)
  {
    int v15 = (unsigned __int16 *)FirstParam;
    uint64_t DataAsData = iAP2MsgGetDataAsData(FirstParam, &v71);
    unsigned int ParamValueLen = iAP2MsgGetParamValueLen(v15);
    BOOL v4 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  DataAsData,  ParamValueLen));
    if (gLogObjects && gNumLogObjects >= 56)
    {
      id v18 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v18 = (os_log_s *)&_os_log_default;
      id v20 = &_os_log_default;
    }

    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      int ParamID = iAP2MsgGetParamID((uint64_t)v15);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = ParamID;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = ParamValueLen;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_handle_iAP2RelayRemote: paramID %d, dataLen %d",  buf,  0xEu);
    }

    if (gLogObjects && gNumLogObjects >= 56)
    {
      char v22 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      char v22 = (os_log_s *)&_os_log_default;
      id v23 = &_os_log_default;
    }

    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_handle_iAP2RelayRemote: %@",  buf,  0xCu);
    }

    id v24 = mfi4Auth_util_unpackFromTunnelDataiAP2Msg(v4, &v70, &v69);
    if (!v24)
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v32 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v32 = (os_log_s *)&_os_log_default;
        id v34 = &_os_log_default;
      }

      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_relay_handle_iAP2RelayRemote_cold_7();
      }

      goto LABEL_28;
    }

    char v25 = v24;
    unint64_t Length = CFDataGetLength(v24);
    uint64_t v27 = Length;
    if (gLogObjects) {
      BOOL v28 = gNumLogObjects <= 55;
    }
    else {
      BOOL v28 = 1;
    }
    int v29 = !v28;
    if (Length <= 5)
    {
      if (v29)
      {
        id v33 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v33 = (os_log_s *)&_os_log_default;
        id v39 = &_os_log_default;
      }

      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_relay_handle_iAP2RelayRemote_cold_15(v27, v33, v40, v41, v42, v43, v44, v45);
      }
    }

    else
    {
      if (v29)
      {
        __int16 v30 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        __int16 v30 = (os_log_s *)&_os_log_default;
        id v35 = &_os_log_default;
      }

      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v69;
        *(_WORD *)&uint8_t buf[8] = 2048;
        *(void *)&buf[10] = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_relay_handle_iAP2RelayRemote: msgID 0x%04x, len %zu",  buf,  0x12u);
      }

      if (v69 == 21763)
      {
        unint64_t v75 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&__int128 v47 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v47 + 1) = 0xAAAAAAAAAAAAAAAALL;
        __int128 v73 = v47;
        __int128 v74 = v47;
        *(_OWORD *)buf = v47;
        *(_OWORD *)&uint8_t buf[16] = v47;
        int v48 = calloc(1uLL, 0x1001FuLL);
        if (v48)
        {
          __int16 v49 = v48;
          uint64_t v50 = mfi4Auth_util_parseMessage((uint64_t)v48, (uint64_t)buf, v25, 16448);
          if (v50)
          {
            BOOL v71 = _mfi4Auth_relay_handle_AccessoryInformationUpdate(a1, v50);
            free(v49);
LABEL_111:
            CFRelease(v25);

            return v71;
          }

          id v61 = logObjectForModule_9();
          id v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
          if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_relay_handle_iAP2RelayRemote_cold_13();
          }

          free(v49);
        }

        else
        {
          id v59 = logObjectForModule_9();
          char v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
          if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_relay_handle_iAP2RelayRemote_cold_12();
          }
        }

uint64_t mfi4Auth_relay_handle_iAP2RelaySucceeded(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    if (*(_BYTE *)(a1 + 30))
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v3 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v3 = (os_log_s *)&_os_log_default;
        id v5 = &_os_log_default;
      }

      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_relay_handle_iAP2RelaySucceeded_cold_5();
      }
    }

    else
    {
      if (a2) {
        return mfi4Auth_relay_initMessage_RequestiAP2RelayRead(a1, a3);
      }
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v3 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v3 = (os_log_s *)&_os_log_default;
        id v7 = &_os_log_default;
      }

      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_relay_handle_iAP2RelaySucceeded_cold_3();
      }
    }
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v3 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v3 = (os_log_s *)&_os_log_default;
      id v6 = &_os_log_default;
    }

    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_handle_iAP2RelaySucceeded_cold_1();
    }
  }

  return 1LL;
}

uint64_t mfi4Auth_relay_handle_iAP2RelayFailed(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v2 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v2 = (os_log_s *)&_os_log_default;
      id v4 = &_os_log_default;
    }

    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_handle_iAP2RelayFailed_cold_1();
    }
    goto LABEL_21;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v2 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v2 = (os_log_s *)&_os_log_default;
      id v3 = &_os_log_default;
    }

    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_handle_iAP2RelayFailed_cold_5();
    }
LABEL_21:

    return 0LL;
  }

  if (!a2)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v2 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v2 = (os_log_s *)&_os_log_default;
      id v6 = &_os_log_default;
    }

    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_handle_iAP2RelayFailed_cold_3();
    }
    goto LABEL_21;
  }

  mfi4Auth_protocol_handle_AuthState(a1, 1);
  return 0LL;
}

uint64_t mfi4Auth_relay_initMessage_DeviceiAP2RelayRemote_RequestAccessoryInfoUpdate(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    return 1LL;
  }
  id v4 = malloc(0x48uLL);
  if (!v4)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v9 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v9 = (os_log_s *)&_os_log_default;
      id v10 = &_os_log_default;
    }

    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_initMessage_DeviceiAP2RelayRemote_RequestAccessoryInfoUpdate_cold_1( v9,  v11,  v12,  v13,  v14,  v15,  v16,  v17);
    }
    goto LABEL_24;
  }

  id v5 = v4;
  id v6 = malloc(0xFFFFuLL);
  if (!v6)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v9 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v9 = (os_log_s *)&_os_log_default;
      id v18 = &_os_log_default;
    }

    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_initMessage_DeviceiAP2RelayRemote_RequestAccessoryInfoUpdate_cold_3( v9,  v19,  v20,  v21,  v22,  v23,  v24,  v25);
    }
LABEL_24:

    return 1LL;
  }

  iAP2MsgInit((uint64_t)v5, 21762, (uint64_t)v6, 0xFFFF, 0LL, 0LL);
  mfi4Auth_relay_initMessage_DeviceiAP2RelayRemote(a1, a2, (uint64_t)v5);
  *(_WORD *)(a1 + 2_Block_object_dispose(va, 8) = 20836;
  iAP2MsgCleanup((uint64_t)v5);
  id v7 = (void *)v5[3];
  if (v7) {
    free(v7);
  }
  free(v5);
  return 0LL;
}

uint64_t mfi4Auth_relay_StartRelayForType(const void **a1, unsigned int a2, uint64_t a3, _BYTE *a4)
{
  if (!a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v13 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v13 = (os_log_s *)&_os_log_default;
      id v15 = &_os_log_default;
    }

    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_StartRelayForType_cold_1();
    }
    goto LABEL_73;
  }

  if (!a3)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v13 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v13 = (os_log_s *)&_os_log_default;
      id v16 = &_os_log_default;
    }

    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_StartRelayForType_cold_3();
    }
    goto LABEL_73;
  }

  if (a2 < 3)
  {
    EndpointWithUUID = acc_manager_getEndpointWithUUID(*a1);
    if (EndpointWithUUID)
    {
      uint64_t v9 = (uint64_t)EndpointWithUUID;
      if (acc_endpoint_getParentConnection((uint64_t)EndpointWithUUID))
      {
        if (gLogObjects) {
          BOOL v10 = gNumLogObjects <= 55;
        }
        else {
          BOOL v10 = 1;
        }
        int v11 = !v10;
        if (*(void *)(v9 + 56))
        {
          if (v11)
          {
            uint64_t v12 = (os_log_s *)*(id *)(gLogObjects + 440);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            uint64_t v12 = (os_log_s *)&_os_log_default;
            id v19 = &_os_log_default;
          }

          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v20 = *(void *)(v9 + 16);
            int v31 = 136315650;
            uint64_t v32 = "mfi4Auth_relay_StartRelayForType";
            __int16 v33 = 2112;
            uint64_t v34 = v20;
            __int16 v35 = 1024;
            unsigned int v36 = a2;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%s: %@, secureTunnelType %d",  (uint8_t *)&v31,  0x1Cu);
          }

          if (a2 == 2)
          {
            uint64_t result = mfi4Auth_relay_StartRelayForT56(a1, a3, a4);
            goto LABEL_75;
          }

          if (gLogObjects && gNumLogObjects >= 56)
          {
            uint64_t v14 = (os_log_s *)*(id *)(gLogObjects + 440);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            uint64_t v14 = (os_log_s *)&_os_log_default;
            id v30 = &_os_log_default;
          }

          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_relay_StartRelayForType_cold_11();
          }
          goto LABEL_39;
        }

        if (v11)
        {
          uint64_t v13 = (os_log_s *)*(id *)(gLogObjects + 440);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v13 = (os_log_s *)&_os_log_default;
          id v29 = &_os_log_default;
        }

        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_endpoint_processIncomingData_cold_1();
        }
      }

      else
      {
        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v13 = (os_log_s *)*(id *)(gLogObjects + 440);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v13 = (os_log_s *)&_os_log_default;
          id v22 = &_os_log_default;
        }

        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_relay_StartRelayForType_cold_7(v9, v13, v23, v24, v25, v26, v27, v28);
        }
      }
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v13 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v13 = (os_log_s *)&_os_log_default;
        id v18 = &_os_log_default;
      }

      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_processIncomingMessageRelay_cold_5();
      }
    }

uint64_t mfi4Auth_relay_StartRelayForT56(const void **a1, uint64_t a2, _BYTE *a3)
{
  if (!a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v11 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v11 = (os_log_s *)&_os_log_default;
      id v13 = &_os_log_default;
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_StartRelayForType_cold_1();
    }
    goto LABEL_43;
  }

  if (!a2)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v11 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v11 = (os_log_s *)&_os_log_default;
      id v14 = &_os_log_default;
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_StartRelayForType_cold_3();
    }
    goto LABEL_43;
  }

  EndpointWithUUID = acc_manager_getEndpointWithUUID(*a1);
  if (!EndpointWithUUID)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v11 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v11 = (os_log_s *)&_os_log_default;
      id v15 = &_os_log_default;
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processIncomingMessageRelay_cold_5();
    }
    goto LABEL_43;
  }

  uint64_t v5 = (uint64_t)EndpointWithUUID;
  ParentConnection = (CFIndex *)acc_endpoint_getParentConnection((uint64_t)EndpointWithUUID);
  if (!ParentConnection)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v11 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v11 = (os_log_s *)&_os_log_default;
      id v16 = &_os_log_default;
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_StartRelayForType_cold_7(v5, v11, v17, v18, v19, v20, v21, v22);
    }
LABEL_43:
    uint64_t v12 = 0LL;
LABEL_44:

    return v12;
  }

  id v7 = acc_manager_newEndpointForConnection(ParentConnection, 0xFu, 0x11u, *(const void **)(v5 + 16));
  if (v7)
  {
    uint64_t v8 = (uint64_t)v7;
    uint64_t v10 = (uint64_t)v7 + 16;
    uint64_t v9 = (const __CFString *)*((void *)v7 + 2);
    if (v9)
    {
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3221225472LL;
      v32[2] = __mfi4Auth_relay_StartRelayForT56_block_invoke;
      v32[3] = &unk_1001FCCF8;
      int v11 = (id)CFStringCreateCopy(kCFAllocatorDefault, v9);
      __int16 v33 = v11;
      acc_endpoint_setEndpointSecureTunnelDataReceiveTypeHandler(v5, 2LL, v32);
      acc_endpoint_setParentEndpointUUID(v8, *(CFStringRef *)(v5 + 16));
      uint64_t v12 = acc_endpoint_publish(v8);
      if ((_DWORD)v12)
      {
        if (a3) {
          *a3 = 1;
        }
      }

      else
      {
        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v24 = (os_log_s *)*(id *)(gLogObjects + 440);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v24 = (os_log_s *)&_os_log_default;
          id v25 = &_os_log_default;
        }

        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_relay_StartRelayForT56_cold_9(v10, v24, v26, v27, v28, v29, v30, v31);
        }
      }

      goto LABEL_44;
    }
  }

  return 0LL;
}

uint64_t mfi4Auth_protocol_setSecureTunnelDataReceiveTypeHandler(uint64_t a1, unsigned int a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (!a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v10 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v10 = (os_log_s *)&_os_log_default;
      id v12 = &_os_log_default;
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_relay_StartRelayForType_cold_1();
    }
    goto LABEL_24;
  }

  if (!v5)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v10 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v10 = (os_log_s *)&_os_log_default;
      id v13 = &_os_log_default;
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_setSecureTunnelDataReceiveTypeHandler_cold_3();
    }
LABEL_24:

    goto LABEL_31;
  }

  if (a2 >= 3)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v11 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v11 = (os_log_s *)&_os_log_default;
      id v14 = &_os_log_default;
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_setSecureTunnelDataReceiveTypeHandler_cold_5();
    }
  }

  else
  {
    id v7 = objc_retainBlock(v5);
    uint64_t v8 = a1 + 8LL * a2;
    uint64_t v9 = *(void **)(v8 + 168);
    *(void *)(v8 + 16_Block_object_dispose(va, 8) = v7;
  }

LABEL_31:
  return 0LL;
}

  if (v26) {
    free(v26);
  }
  return v12;
}

  if ((_DWORD)v4) {
    platform_configStream_deleteParams((const void **)a2);
  }
  return v4;
}

  if ((_DWORD)v4) {
    platform_configStream_deleteParams((const void **)a2);
  }
  return v4;
}

  if ((_DWORD)ClientRequest) {
    platform_configStream_deleteParams((const void **)a2);
  }
  return ClientRequest;
}

  kdebug_trace(731124140LL, 0LL, 0LL, 0LL, 0LL);
  return v2;
}

  id v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLong:",  self->_duration));
  -[NSMutableDictionary setObject:forKey:]( v3,  "setObject:forKey:",  v13,  @"ACCMediaLibraryUpdateItemPlaybackDurationInMilliseconds");

  validMask = self->_validMask;
  if ((validMask & 0x20) == 0)
  {
LABEL_7:
    if ((validMask & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }

  a3->var5 = self->_duration;
  a3->var0 |= 0x10u;
  if ((validMask & 0x20) == 0)
  {
LABEL_7:
    if ((validMask & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }

  a3->var8 = self->_smartPlaylist;
  a3->var0 |= 0x100u;
  if ((validMask & 0x200) == 0) {
    return;
  }
LABEL_20:
  a3->var9 = self->_radioStationOrdering;
  a3->var0 |= 0x200u;
}

uint64_t mfi4Auth_protocol_processOutgoingSecureTunnelDataForClient( uint64_t a1, unsigned int a2, const __CFData *a3)
{
  uint64_t v26 = 0LL;
  if (!a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      id v4 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v4 = (os_log_s *)&_os_log_default;
      id v11 = &_os_log_default;
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processOutgoingSecureTunnelDataForClient_cold_1();
    }
    goto LABEL_29;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      id v4 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v4 = (os_log_s *)&_os_log_default;
      id v10 = &_os_log_default;
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processOutgoingSecureTunnelDataForClient_cold_13();
    }
LABEL_29:

LABEL_30:
    uint64_t v12 = 0LL;
    goto LABEL_31;
  }

  if (!a3)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      id v4 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v4 = (os_log_s *)&_os_log_default;
      id v15 = &_os_log_default;
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processOutgoingSecureTunnelDataForClient_cold_3();
    }
    goto LABEL_29;
  }

  if (gLogObjects) {
    BOOL v7 = gNumLogObjects <= 55;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = !v7;
  if (a2 >= 3)
  {
    if (v8)
    {
      id v14 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v14 = (os_log_s *)&_os_log_default;
      id v21 = &_os_log_default;
    }

    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_setSecureTunnelDataReceiveTypeHandler_cold_5();
    }

    goto LABEL_30;
  }

  if (v8)
  {
    uint64_t v9 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v9 = (os_log_s *)&_os_log_default;
    id v16 = &_os_log_default;
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    int v25 = *(unsigned __int16 *)(a1 + 200);
    *(_DWORD *)buf = 67109634;
    int v28 = v25;
    __int16 v29 = 1024;
    unsigned int v30 = a2;
    __int16 v31 = 2112;
    uint64_t v32 = a3;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "processOutgoingSecureTunnelDataForClient: sessionID %x, type %d, dataOut %@",  buf,  0x18u);
  }

  EndpointWithUUID = acc_manager_getEndpointWithUUID(*(const void **)a1);
  if (!EndpointWithUUID)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      id v4 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v4 = (os_log_s *)&_os_log_default;
      id v23 = &_os_log_default;
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processIncomingMessageRelay_cold_5();
    }
    goto LABEL_29;
  }

  uint64_t v18 = EndpointWithUUID[7];
  if (!v18)
  {
    id v22 = logObjectForModule_9();
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_endpoint_processIncomingData_cold_1();
    }
    goto LABEL_29;
  }

  if (!*(void *)(a1 + 8LL * a2 + 168))
  {
    id v24 = logObjectForModule_9();
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processOutgoingSecureTunnelDataForClient_cold_8();
    }
    goto LABEL_29;
  }

  mfi4Auth_relay_initMessage_DeviceiAP2RelayRemote_TypeData(a1, (uint64_t *)&v26, a2, a3);
  if (*(void *)(a1 + 192))
  {
    id v19 = logObjectForModule_9();
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processOutgoingSecureTunnelDataForClient_cold_9();
    }

    (*(void (**)(void))(*(void *)(a1 + 192) + 16LL))();
    uint64_t v12 = 1LL;
  }

  else
  {
    uint64_t v12 = mfi4Auth_endpoint_sendOutgoingData(v18, (uint64_t)v26);
  }

uint64_t mfi4Auth_relay_initMessage_DeviceiAP2RelayRemote_TypeData( uint64_t a1, uint64_t *a2, char a3, CFDataRef theData)
{
  uint64_t result = 1LL;
  if (a2 && theData)
  {
    uint64_t v7 = mfi4Auth_util_packIntoTunnelDataiAP2Msg(a3, theData, 0);
    if (v7)
    {
      int v8 = (void *)v7;
      mfi4Auth_relay_initMessage_DeviceiAP2RelayRemote(a1, a2, v7);
      *(_WORD *)(a1 + 2_Block_object_dispose(va, 8) = 20836;
      iAP2MsgCleanup((uint64_t)v8);
      uint64_t v9 = (void *)v8[3];
      if (v9) {
        free(v9);
      }
      free(v8);
      return 0LL;
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        id v10 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v10 = (os_log_s *)&_os_log_default;
        id v11 = &_os_log_default;
      }

      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_relay_initMessage_DeviceiAP2RelayRemote_TypeData_cold_1();
      }

      return 1LL;
    }
  }

  return result;
}

uint64_t mfi4Auth_relay_initMessage_RequestiAP2RelayRead(uint64_t a1, void *a2)
{
  if (!a2) {
    return 1LL;
  }
  __int16 v4 = *(_WORD *)(a1 + 200);
  id v5 = malloc(0x48uLL);
  *a2 = v5;
  if (!v5) {
    return 0xFFFFFFFFLL;
  }
  iAP2MsgInitWithSom((uint64_t)v5, v4, 20835, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0LL, 0LL);
  uint64_t result = 0LL;
  *(_WORD *)(a1 + 2_Block_object_dispose(va, 8) = 20835;
  return result;
}

BOOL _mfi4Auth_relay_handle_AccessoryInformationUpdate(uint64_t a1, uint64_t a2)
{
  int v97 = 1;
  char v96 = 0;
  int v90 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int16 v4 = &startLogsNotificationObservers;
  id v5 = &startLogsNotificationObservers;
  if (!a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      id v6 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v6 = (os_log_s *)&_os_log_default;
      id v36 = &_os_log_default;
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      _mfi4Auth_relay_handle_AccessoryInformationUpdate_cold_2(v6, v37, v38, v39, v40, v41, v42, v43);
    }
    goto LABEL_55;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      id v6 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v6 = (os_log_s *)&_os_log_default;
      id v28 = &_os_log_default;
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      _mfi4Auth_relay_handle_AccessoryInformationUpdate_cold_14(v6, v29, v30, v31, v32, v33, v34, v35);
    }
LABEL_55:

    int v8 = 0LL;
    uint64_t v91 = 0LL;
    uint64_t v92 = 0LL;
    BOOL v94 = 0LL;
    uint64_t v95 = 0LL;
    int v93 = 0LL;
    goto LABEL_56;
  }

  if (!a2)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      id v6 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v6 = (os_log_s *)&_os_log_default;
      id v52 = &_os_log_default;
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      _mfi4Auth_relay_handle_AccessoryInformationUpdate_cold_4(v6, v53, v54, v55, v56, v57, v58, v59);
    }
    goto LABEL_55;
  }

  if (iAP2MsgGetMsgID(a2) != 21763)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      id v6 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v6 = (os_log_s *)&_os_log_default;
      id v62 = &_os_log_default;
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      _mfi4Auth_relay_handle_AccessoryInformationUpdate_cold_12(v6, v63, v64, v65, v66, v67, v68, v69);
    }
    goto LABEL_55;
  }

  *(_DWORD *)(a1 + 32) = 0;
  int v97 = 94;
  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0LL);
  int v8 = 0LL;
  uint64_t v91 = 0LL;
  uint64_t v92 = 0LL;
  BOOL v94 = 0LL;
  uint64_t v95 = 0LL;
  int v93 = 0LL;
  while (FirstParam)
  {
    unsigned int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
    id v10 = v4;
    uint64_t v11 = v4[353];
    uint64_t v12 = v5;
    int v13 = *((_DWORD *)v5 + 708);
    if (v11 && v13 >= 56)
    {
      id v14 = (os_log_s *)*(id *)(v11 + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        uint64_t v99 = (const char *)v11;
        __int16 v100 = 1024;
        unsigned int v101 = v13;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
      }

      id v15 = &_os_log_default;
      id v14 = (os_log_s *)&_os_log_default;
    }

    id v5 = v12;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v99 = "_mfi4Auth_relay_handle_AccessoryInformationUpdate";
      __int16 v100 = 1024;
      unsigned int v101 = ParamID;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%s: paramID: %d", buf, 0x12u);
    }

    if (ParamID >= 6)
    {
      __int16 v4 = v10;
      if (ParamID == 242) {
        iAP2MsgGetDataAsU64(FirstParam, &v97);
      }
      goto LABEL_38;
    }

    unsigned int ParamValueLen = iAP2MsgGetParamValueLen(FirstParam);
    DataAsString = iAP2MsgGetDataAsString(FirstParam, (BOOL *)&v97);
    if (!v97)
    {
      if (!*((_BYTE *)DataAsString + ParamValueLen - 1))
      {
        __int16 v4 = v10;
        switch(ParamID)
        {
          case 0u:
            uint64_t v21 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", DataAsString));

            int v8 = (void *)v21;
            break;
          case 1u:
            uint64_t v23 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", DataAsString));

            uint64_t v92 = (void *)v23;
            break;
          case 2u:
            uint64_t v24 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", DataAsString));

            uint64_t v91 = (void *)v24;
            break;
          case 3u:
            uint64_t v25 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", DataAsString));

            uint64_t v95 = (void *)v25;
            break;
          case 4u:
            uint64_t v26 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", DataAsString));

            BOOL v94 = (void *)v26;
            break;
          case 5u:
            uint64_t v27 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", DataAsString));

            int v93 = (void *)v27;
            break;
          default:
            goto LABEL_37;
        }

        goto LABEL_38;
      }

      uint64_t v18 = v10[353];
      int v19 = *((_DWORD *)v12 + 708);
      if (v18 && v19 >= 56)
      {
        uint64_t v20 = (os_log_s *)*(id *)(v18 + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          uint64_t v99 = (const char *)v18;
          __int16 v100 = 1024;
          unsigned int v101 = v19;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
        }

        id v22 = &_os_log_default;
        uint64_t v20 = (os_log_s *)&_os_log_default;
      }

      id v5 = v12;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v99 = "_mfi4Auth_relay_handle_AccessoryInformationUpdate";
        __int16 v100 = 1024;
        unsigned int v101 = ParamID;
        _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "%s: string parameter not NUL terminated! (paramID %d)",  buf,  0x12u);
      }
    }

uint64_t mfi4Auth_relay_initMessage_DeviceiAP2RelayRemote(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = 1LL;
  if (a2 && a3)
  {
    __int16 v7 = *(_WORD *)(a1 + 200);
    int v8 = malloc(0x48uLL);
    *a2 = (uint64_t)v8;
    if (v8)
    {
      iAP2MsgInitWithSom((uint64_t)v8, v7, 20836, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0LL, 0LL);
      uint64_t v9 = *a2;
      id v10 = *(const void **)(a3 + 24);
      unsigned int MsgLen = iAP2MsgGetMsgLen(a3);
      iAP2MsgAddDataParam(v9, 0LL, 0, v10, MsgLen);
      uint64_t result = 0LL;
      *(_WORD *)(a1 + 2_Block_object_dispose(va, 8) = 20836;
    }

    else
    {
      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

BOOL acc_platform_packetLogging_isLogPacketDataAsMsg()
{
  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_25);
  }
  return __PAIR64__(_logPacketToFile, _logPacketDataAsInfo) != 0;
}

void acc_platform_packetLogging_logiAP2Packet(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v45 = objc_autoreleasePoolPush();
  if (!__referenceDate)
  {
    id v6 = objc_alloc_init(&OBJC_CLASS___NSDate);
    __int16 v7 = (void *)__referenceDate;
    __referenceDate = (uint64_t)v6;
  }

  int v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  TransportTypeString = (const char *)acc_endpoint_getTransportTypeString(*a1);
  unsigned int PayloadLen = iAP2PacketGetPayloadLen(a2);
  uint64_t v11 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v44 = v8;
  [v8 timeIntervalSinceDate:__referenceDate];
  *(float *)&double v12 = v12;
  double v13 = *(float *)&v12;
  uint64_t v46 = a1[1];
  if (!TransportTypeString) {
    TransportTypeString = "unknown";
  }
  if (a3) {
    id v14 = @"Acc";
  }
  else {
    id v14 = @"iPod";
  }
  uint64_t v15 = *(unsigned __int16 *)(a2 + 54);
  uint64_t v16 = v11[4];
  uint64_t v17 = v11[5];
  uint64_t v18 = v11[6];
  uint64_t v19 = v11[7];
  unsigned int HdrChecksum = iAP2PacketGetHdrChecksum(a2);
  uint64_t v47 = a2;
  unsigned int PayloadChecksum = iAP2PacketGetPayloadChecksum(a2);
  id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"LOG; %.6f; %@; %s; %@%@; len=0x%04x; control=0x%02x; seq=0x%02x; ack=0x%02x; session=0x%02x; hdrChk=0x%04x; payload(len=%d chk=0x%04x)=",
                    *(void *)&v13,
                    v46,
                    TransportTypeString,
                    v14,
                    &stru_100200A40,
                    v15,
                    v16,
                    v17,
                    v18,
                    v19,
                    HdrChecksum,
                    PayloadLen,
                    PayloadChecksum));
  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_25);
  }
  unsigned int v23 = PayloadLen;
  if (_logPacketDataSizeLimit < 0)
  {
    uint64_t v24 = "";
    goto LABEL_18;
  }

  uint64_t v24 = "";
  if (!_logPacketDataSizeLimit)
  {
LABEL_18:
    unsigned int v25 = PayloadLen;
    goto LABEL_19;
  }

  unsigned int v25 = PayloadLen;
  if (_logPacketDataSizeLimit < PayloadLen)
  {
    if (_logPacketDataSizeLimit) {
      unsigned int v25 = _logPacketDataSizeLimit;
    }
    else {
      unsigned int v25 = 0x10000;
    }
    uint64_t v24 = "...";
  }

id getLogWriter()
{
  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_25);
  }
  if (_logPacketToFile) {
    openLogFileWriter();
  }
  return (id)_logFileWriter;
}

void acc_platform_packetLogging_logEAData(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  int v8 = objc_autoreleasePoolPush();
  if (!__referenceDate)
  {
    uint64_t v9 = objc_alloc_init(&OBJC_CLASS___NSDate);
    id v10 = (void *)__referenceDate;
    __referenceDate = (uint64_t)v9;
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v12 = a3;
  uint64_t TransportTypeString = acc_endpoint_getTransportTypeString(a1);
  id v14 = [v12 length];
  [v11 timeIntervalSinceDate:__referenceDate];
  *(float *)&double v15 = v15;
  double v16 = *(float *)&v15;
  if (a1) {
    uint64_t v17 = *(const __CFString **)(a1 + 16);
  }
  else {
    uint64_t v17 = @"unknown";
  }
  uint64_t v18 = "unknown";
  uint64_t v19 = @"Acc-EA";
  if (TransportTypeString) {
    uint64_t v18 = (const char *)TransportTypeString;
  }
  if (!a4) {
    uint64_t v19 = @"iPod-EA";
  }
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"LOG; %.6f; %@; %s; %@%@; sessionUUID %@; data(len=%d)=",
                    *(void *)&v16,
                    v17,
                    v18,
                    v19,
                    &stru_100200A40,
                    a2,
                    v14));
  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_25);
  }
  if (_logPacketDataSizeLimit < 0) {
    goto LABEL_20;
  }
  uint64_t v21 = _logPacketDataSizeLimit;
  if (!_logPacketDataSizeLimit) {
    uint64_t v21 = 0x10000LL;
  }
  if (v21 >= v14)
  {
LABEL_20:
    id v22 = "";
  }

  else
  {
    if (_logPacketDataSizeLimit) {
      LODWORD(v14) = _logPacketDataSizeLimit;
    }
    else {
      LODWORD(v14) = 0x10000;
    }
    id v22 = "...";
  }

  if (acc_platform_packetLogging_isLogPacketDataAsMsg())
  {
    if (gLogObjects && gNumLogObjects >= 22)
    {
      unsigned int v23 = (os_log_s *)*(id *)(gLogObjects + 168);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      unsigned int v23 = (os_log_s *)&_os_log_default;
      id v27 = &_os_log_default;
    }

    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138544130;
      id v36 = v20;
      __int16 v37 = 1040;
      int v38 = (int)v14;
      __int16 v39 = 2098;
      id v40 = [v12 bytes];
      __int16 v41 = 2080;
      uint64_t v42 = v22;
      id v28 = "%{public}@<%{public,coreacc:bytes}.*P> %s";
      BOOL v29 = v23;
      os_log_type_t v30 = OS_LOG_TYPE_DEFAULT;
LABEL_46:
      _os_log_impl((void *)&_mh_execute_header, v29, v30, v28, buf, 0x26u);
    }
  }

  else
  {
    int isInternalBuild = platform_systemInfo_isInternalBuild();
    if (gLogObjects) {
      BOOL v25 = gNumLogObjects <= 21;
    }
    else {
      BOOL v25 = 1;
    }
    int v26 = !v25;
    if (isInternalBuild)
    {
      if (v26)
      {
        unsigned int v23 = (os_log_s *)*(id *)(gLogObjects + 168);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        unsigned int v23 = (os_log_s *)&_os_log_default;
        id v31 = &_os_log_default;
      }

      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138413058;
        id v36 = v20;
        __int16 v37 = 1040;
        int v38 = (int)v14;
        __int16 v39 = 2096;
        id v40 = [v12 bytes];
        __int16 v41 = 2080;
        uint64_t v42 = v22;
        id v28 = "%@<%{coreacc:bytes}.*P> %s";
        BOOL v29 = v23;
        os_log_type_t v30 = OS_LOG_TYPE_INFO;
        goto LABEL_46;
      }
    }

    else
    {
      if (v26)
      {
        unsigned int v23 = (os_log_s *)*(id *)(gLogObjects + 168);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        unsigned int v23 = (os_log_s *)&_os_log_default;
        id v32 = &_os_log_default;
      }

      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138413058;
        id v36 = v20;
        __int16 v37 = 1040;
        int v38 = (int)v14;
        __int16 v39 = 2096;
        id v40 = [v12 bytes];
        __int16 v41 = 2080;
        uint64_t v42 = v22;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "%@<%{coreacc:bytes}.*P> %s",  buf,  0x26u);
      }
    }
  }

  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_25);
  }
  if (_logPacketToFile)
  {
    id LogWriter = getLogWriter();
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(LogWriter);
    [v34 log:v20 data:v12 limit:v14];
  }

  objc_autoreleasePoolPop(v8);
}

void acc_platform_packetLogging_logAccAuthProtocolMsg(uint64_t a1, unsigned int a2, void *a3, int a4)
{
  uint64_t v44 = objc_autoreleasePoolPush();
  if (!__referenceDate)
  {
    int v8 = objc_alloc_init(&OBJC_CLASS___NSDate);
    uint64_t v9 = (void *)__referenceDate;
    __referenceDate = (uint64_t)v8;
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v11 = a3;
  id v12 = (unsigned __int8 *)[v11 bytes];
  uint64_t TransportTypeString = acc_endpoint_getTransportTypeString(a1);
  id v45 = v11;
  id v14 = [v11 length];
  uint64_t v46 = 0LL;
  LODWORD(v11) = acc_auth_protocol_sizeofMessage((uint64_t)v12, v14, (int *)&v46 + 1, (int *)&v46);
  [v10 timeIntervalSinceDate:__referenceDate];
  *(float *)&double v15 = v15;
  double v16 = *(float *)&v15;
  uint64_t v17 = "unknown";
  uint64_t v18 = @"Acc-AccAuth";
  if ((_DWORD)v11)
  {
    if (a1) {
      uint64_t v19 = *(const __CFString **)(a1 + 16);
    }
    else {
      uint64_t v19 = @"unknown";
    }
    if (TransportTypeString) {
      uint64_t v17 = (const char *)TransportTypeString;
    }
    if (!a4) {
      uint64_t v18 = @"iPod-AccAuth";
    }
    uint64_t v21 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"LOG; %.6f; %@; %s; %@%@; sessionID %u; msgID %#04x; ctl0 %#04x; ctl1 %#04x; payloadLen %d; data(len=%d)=",
            *(void *)&v16,
            v19,
            v17,
            v18,
            &stru_100200A40,
            a2,
            *v12,
            v12[1],
            v12[2],
            v46,
            v14);
  }

  else
  {
    if (a1) {
      uint64_t v20 = *(const __CFString **)(a1 + 16);
    }
    else {
      uint64_t v20 = @"unknown";
    }
    if (TransportTypeString) {
      uint64_t v17 = (const char *)TransportTypeString;
    }
    if (!a4) {
      uint64_t v18 = @"iPod-AccAuth";
    }
    uint64_t v21 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"LOG; %.6f; %@; %s; %@%@; sessionID %u; %s; data(len=%d)=",
            *(void *)&v16,
            v20,
            v17,
            v18,
            &stru_100200A40,
            a2,
            "Unknown Message",
            v14,
            v41,
            v42,
            v43);
  }

  id v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_25);
  }
  if (_logPacketDataSizeLimit < 0) {
    goto LABEL_30;
  }
  uint64_t v23 = _logPacketDataSizeLimit;
  if (!_logPacketDataSizeLimit) {
    uint64_t v23 = 0x10000LL;
  }
  if (v23 >= v14)
  {
LABEL_30:
    uint64_t v24 = "";
  }

  else
  {
    if (_logPacketDataSizeLimit) {
      LODWORD(v14) = _logPacketDataSizeLimit;
    }
    else {
      LODWORD(v14) = 0x10000;
    }
    uint64_t v24 = "...";
  }

  if (acc_platform_packetLogging_isLogPacketDataAsMsg())
  {
    if (gLogObjects && gNumLogObjects >= 22)
    {
      BOOL v25 = (os_log_s *)*(id *)(gLogObjects + 168);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      BOOL v25 = (os_log_s *)&_os_log_default;
      id v29 = &_os_log_default;
    }

    os_log_type_t v30 = v45;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      id v31 = [v45 bytes];
      *(_DWORD *)buf = 138544130;
      int v48 = v22;
      __int16 v49 = 1040;
      int v50 = (int)v14;
      __int16 v51 = 2098;
      id v52 = v31;
      __int16 v53 = 2080;
      __int16 v54 = v24;
      id v32 = "%{public}@<%{public,coreacc:bytes}.*P> %s";
      uint64_t v33 = v25;
      os_log_type_t v34 = OS_LOG_TYPE_DEFAULT;
LABEL_56:
      _os_log_impl((void *)&_mh_execute_header, v33, v34, v32, buf, 0x26u);
    }
  }

  else
  {
    int isInternalBuild = platform_systemInfo_isInternalBuild();
    if (gLogObjects) {
      BOOL v27 = gNumLogObjects <= 21;
    }
    else {
      BOOL v27 = 1;
    }
    int v28 = !v27;
    if (isInternalBuild)
    {
      if (v28)
      {
        BOOL v25 = (os_log_s *)*(id *)(gLogObjects + 168);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        BOOL v25 = (os_log_s *)&_os_log_default;
        id v35 = &_os_log_default;
      }

      os_log_type_t v30 = v45;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        id v36 = [v45 bytes];
        *(_DWORD *)buf = 138413058;
        int v48 = v22;
        __int16 v49 = 1040;
        int v50 = (int)v14;
        __int16 v51 = 2096;
        id v52 = v36;
        __int16 v53 = 2080;
        __int16 v54 = v24;
        id v32 = "%@<%{coreacc:bytes}.*P> %s";
        uint64_t v33 = v25;
        os_log_type_t v34 = OS_LOG_TYPE_INFO;
        goto LABEL_56;
      }
    }

    else
    {
      if (v28)
      {
        BOOL v25 = (os_log_s *)*(id *)(gLogObjects + 168);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        BOOL v25 = (os_log_s *)&_os_log_default;
        id v37 = &_os_log_default;
      }

      os_log_type_t v30 = v45;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        id v40 = [v45 bytes];
        *(_DWORD *)buf = 138413058;
        int v48 = v22;
        __int16 v49 = 1040;
        int v50 = (int)v14;
        __int16 v51 = 2096;
        id v52 = v40;
        __int16 v53 = 2080;
        __int16 v54 = v24;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "%@<%{coreacc:bytes}.*P> %s",  buf,  0x26u);
      }
    }
  }

  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_25);
  }
  if (_logPacketToFile)
  {
    id LogWriter = getLogWriter();
    __int16 v39 = (void *)objc_claimAutoreleasedReturnValue(LogWriter);
    [v39 log:v22 data:v30 limit:v14];
  }

  objc_autoreleasePoolPop(v44);
}

void acc_platform_packetLogging_logMFi4AuthProtocolMsg( uint64_t a1, unsigned int a2, uint64_t a3, int a4, int a5)
{
  id v10 = objc_autoreleasePoolPush();
  if (!__referenceDate)
  {
    id v11 = objc_alloc_init(&OBJC_CLASS___NSDate);
    id v12 = (void *)__referenceDate;
    __referenceDate = (uint64_t)v11;
  }

  double v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t TransportTypeString = acc_endpoint_getTransportTypeString(a1);
  uint64_t MsgLen = iAP2MsgGetMsgLen(a3);
  uint64_t v42 = a3;
  if ((_DWORD)MsgLen)
  {
    uint64_t v16 = *(void *)(a3 + 24);
    uint64_t v17 = MsgLen;
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  v16,  MsgLen));
    [v13 timeIntervalSinceDate:__referenceDate];
    *(float *)&double v19 = v19;
    double v20 = *(float *)&v19;
    if (a1) {
      uint64_t v21 = *(const __CFString **)(a1 + 16);
    }
    else {
      uint64_t v21 = @"unknown";
    }
    uint64_t v23 = "unknown";
    if (TransportTypeString) {
      uint64_t v23 = (const char *)TransportTypeString;
    }
    uint64_t v24 = @"Acc-MFi4Auth";
    if (!a4) {
      uint64_t v24 = @"iPod-MFi4Auth";
    }
    BOOL v25 = @"plain";
    if (a5) {
      BOOL v25 = @"raw";
    }
    id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"LOG; %.6f; %@; %s; %@ %@; session=0x%02x; payload(len=%d)=",
                      *(void *)&v20,
                      v21,
                      v23,
                      v24,
                      v25,
                      a2,
                      v17));
  }

  else
  {
    LODWORD(v17) = 0;
    id v22 = 0LL;
    uint64_t v18 = 0LL;
  }

  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_25);
  }
  if (_logPacketDataSizeLimit < 0)
  {
    int v26 = "";
  }

  else
  {
    int v26 = "";
    if (_logPacketDataSizeLimit && _logPacketDataSizeLimit < v17)
    {
      if (_logPacketDataSizeLimit) {
        LODWORD(v17) = _logPacketDataSizeLimit;
      }
      else {
        LODWORD(v17) = 0x10000;
      }
      int v26 = "...";
    }
  }

  if (acc_platform_packetLogging_isLogPacketDataAsMsg())
  {
    if (gLogObjects && gNumLogObjects >= 22)
    {
      BOOL v27 = (os_log_s *)*(id *)(gLogObjects + 168);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      BOOL v27 = (os_log_s *)&_os_log_default;
      id v31 = &_os_log_default;
    }

    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v32 = *(void *)(v42 + 24);
      *(_DWORD *)buf = 138544130;
      uint64_t v44 = v22;
      __int16 v45 = 1040;
      int v46 = v17;
      __int16 v47 = 2098;
      uint64_t v48 = v32;
      __int16 v49 = 2080;
      int v50 = v26;
      uint64_t v33 = "%{public}@<%{public,coreacc:bytes}.*P> %s";
      os_log_type_t v34 = v27;
      os_log_type_t v35 = OS_LOG_TYPE_DEFAULT;
LABEL_50:
      _os_log_impl((void *)&_mh_execute_header, v34, v35, v33, buf, 0x26u);
    }
  }

  else
  {
    int isInternalBuild = platform_systemInfo_isInternalBuild();
    if (gLogObjects) {
      BOOL v29 = gNumLogObjects <= 21;
    }
    else {
      BOOL v29 = 1;
    }
    int v30 = !v29;
    if (isInternalBuild)
    {
      if (v30)
      {
        BOOL v27 = (os_log_s *)*(id *)(gLogObjects + 168);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        BOOL v27 = (os_log_s *)&_os_log_default;
        id v36 = &_os_log_default;
      }

      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        uint64_t v37 = *(void *)(v42 + 24);
        *(_DWORD *)buf = 138413058;
        uint64_t v44 = v22;
        __int16 v45 = 1040;
        int v46 = v17;
        __int16 v47 = 2096;
        uint64_t v48 = v37;
        __int16 v49 = 2080;
        int v50 = v26;
        uint64_t v33 = "%@<%{coreacc:bytes}.*P> %s";
        os_log_type_t v34 = v27;
        os_log_type_t v35 = OS_LOG_TYPE_INFO;
        goto LABEL_50;
      }
    }

    else
    {
      if (v30)
      {
        BOOL v27 = (os_log_s *)*(id *)(gLogObjects + 168);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        BOOL v27 = (os_log_s *)&_os_log_default;
        id v38 = &_os_log_default;
      }

      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v41 = *(void *)(v42 + 24);
        *(_DWORD *)buf = 138413058;
        uint64_t v44 = v22;
        __int16 v45 = 1040;
        int v46 = v17;
        __int16 v47 = 2096;
        uint64_t v48 = v41;
        __int16 v49 = 2080;
        int v50 = v26;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEBUG,  "%@<%{coreacc:bytes}.*P> %s",  buf,  0x26u);
      }
    }
  }

  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_25);
  }
  if (_logPacketToFile)
  {
    id LogWriter = getLogWriter();
    id v40 = (void *)objc_claimAutoreleasedReturnValue(LogWriter);
    [v40 log:v22 data:v18 limit:v17];
  }

  objc_autoreleasePoolPop(v10);
}

void acc_platform_packetLogging_logParsedData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  id v10 = objc_autoreleasePoolPush();
  if (!__referenceDate)
  {
    id v11 = objc_alloc_init(&OBJC_CLASS___NSDate);
    id v12 = (void *)__referenceDate;
    __referenceDate = (uint64_t)v11;
  }

  double v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t TransportTypeString = acc_endpoint_getTransportTypeString(a1);
  if (a5) {
    double v15 = @"Acc-%@";
  }
  else {
    double v15 = @"iPod-%@";
  }
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v15, a3));
  [v13 timeIntervalSinceDate:__referenceDate];
  *(float *)&double v17 = v17;
  double v18 = *(float *)&v17;
  if (a1) {
    double v19 = *(const __CFString **)(a1 + 16);
  }
  else {
    double v19 = @"unknown";
  }
  double v20 = "unknown";
  if (TransportTypeString) {
    double v20 = (const char *)TransportTypeString;
  }
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"LOG; %.6f; %@; %s; %@; %@; data=%@",
                    *(void *)&v18,
                    v19,
                    v20,
                    v16,
                    a2,
                    a4));
  if (!acc_platform_packetLogging_isLogPacketDataAsMsg())
  {
    int isInternalBuild = platform_systemInfo_isInternalBuild();
    if (gLogObjects) {
      BOOL v24 = gNumLogObjects <= 21;
    }
    else {
      BOOL v24 = 1;
    }
    int v25 = !v24;
    if (isInternalBuild)
    {
      if (v25)
      {
        id v22 = (os_log_s *)*(id *)(gLogObjects + 168);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v22 = (os_log_s *)&_os_log_default;
        id v29 = &_os_log_default;
      }

      if (!os_log_type_enabled(v22, OS_LOG_TYPE_INFO)) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 138543362;
      os_log_type_t v34 = v21;
    }

    else
    {
      if (v25)
      {
        id v22 = (os_log_s *)*(id *)(gLogObjects + 168);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v22 = (os_log_s *)&_os_log_default;
        id v30 = &_os_log_default;
      }

      if (!os_log_type_enabled(v22, OS_LOG_TYPE_INFO)) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 138543362;
      os_log_type_t v34 = v21;
    }

    BOOL v27 = v22;
    os_log_type_t v28 = OS_LOG_TYPE_INFO;
    goto LABEL_42;
  }

  if (gLogObjects && gNumLogObjects >= 22)
  {
    id v22 = (os_log_s *)*(id *)(gLogObjects + 168);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v22 = (os_log_s *)&_os_log_default;
    id v26 = &_os_log_default;
  }

  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    os_log_type_t v34 = v21;
    BOOL v27 = v22;
    os_log_type_t v28 = OS_LOG_TYPE_DEFAULT;
LABEL_42:
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}@", buf, 0xCu);
  }

void acc_platform_packetLogging_logData(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5)
{
  id v10 = objc_autoreleasePoolPush();
  if (!__referenceDate)
  {
    id v11 = objc_alloc_init(&OBJC_CLASS___NSDate);
    id v12 = (void *)__referenceDate;
    __referenceDate = (uint64_t)v11;
  }

  double v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v14 = a4;
  uint64_t TransportTypeString = acc_endpoint_getTransportTypeString(a1);
  if (a5) {
    uint64_t v16 = @"Acc-%@";
  }
  else {
    uint64_t v16 = @"iPod-%@";
  }
  double v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v16, a3));
  id v18 = [v14 length];
  [v13 timeIntervalSinceDate:__referenceDate];
  *(float *)&double v19 = v19;
  double v20 = *(float *)&v19;
  if (a1) {
    uint64_t v21 = *(const __CFString **)(a1 + 16);
  }
  else {
    uint64_t v21 = @"unknown";
  }
  id v22 = "unknown";
  if (TransportTypeString) {
    id v22 = (const char *)TransportTypeString;
  }
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"LOG; %.6f; %@; %s; %@; %@; data(len=%d)=",
                    *(void *)&v20,
                    v21,
                    v22,
                    v17,
                    a2,
                    v18));
  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_25);
  }
  if (_logPacketDataSizeLimit < 0) {
    goto LABEL_21;
  }
  uint64_t v24 = _logPacketDataSizeLimit;
  if (!_logPacketDataSizeLimit) {
    uint64_t v24 = 0x10000LL;
  }
  if (v24 >= v18)
  {
LABEL_21:
    int v25 = "";
  }

  else
  {
    if (_logPacketDataSizeLimit) {
      LODWORD(v1_Block_object_dispose(va, 8) = _logPacketDataSizeLimit;
    }
    else {
      LODWORD(v1_Block_object_dispose(va, 8) = 0x10000;
    }
    int v25 = "...";
  }

  if (acc_platform_packetLogging_isLogPacketDataAsMsg())
  {
    if (gLogObjects && gNumLogObjects >= 22)
    {
      id v26 = (os_log_s *)*(id *)(gLogObjects + 168);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v26 = (os_log_s *)&_os_log_default;
      id v30 = &_os_log_default;
    }

    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138544130;
      __int16 v39 = v23;
      __int16 v40 = 1040;
      int v41 = (int)v18;
      __int16 v42 = 2098;
      id v43 = [v14 bytes];
      __int16 v44 = 2080;
      __int16 v45 = v25;
      id v31 = "%{public}@<%{public,coreacc:bytes}.*P> %s";
      uint64_t v32 = v26;
      os_log_type_t v33 = OS_LOG_TYPE_DEFAULT;
LABEL_47:
      _os_log_impl((void *)&_mh_execute_header, v32, v33, v31, buf, 0x26u);
    }
  }

  else
  {
    int isInternalBuild = platform_systemInfo_isInternalBuild();
    if (gLogObjects) {
      BOOL v28 = gNumLogObjects <= 21;
    }
    else {
      BOOL v28 = 1;
    }
    int v29 = !v28;
    if (isInternalBuild)
    {
      if (v29)
      {
        id v26 = (os_log_s *)*(id *)(gLogObjects + 168);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v26 = (os_log_s *)&_os_log_default;
        id v34 = &_os_log_default;
      }

      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138413058;
        __int16 v39 = v23;
        __int16 v40 = 1040;
        int v41 = (int)v18;
        __int16 v42 = 2096;
        id v43 = [v14 bytes];
        __int16 v44 = 2080;
        __int16 v45 = v25;
        id v31 = "%@<%{coreacc:bytes}.*P> %s";
        uint64_t v32 = v26;
        os_log_type_t v33 = OS_LOG_TYPE_INFO;
        goto LABEL_47;
      }
    }

    else
    {
      if (v29)
      {
        id v26 = (os_log_s *)*(id *)(gLogObjects + 168);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v26 = (os_log_s *)&_os_log_default;
        id v35 = &_os_log_default;
      }

      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138413058;
        __int16 v39 = v23;
        __int16 v40 = 1040;
        int v41 = (int)v18;
        __int16 v42 = 2096;
        id v43 = [v14 bytes];
        __int16 v44 = 2080;
        __int16 v45 = v25;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEBUG,  "%@<%{coreacc:bytes}.*P> %s",  buf,  0x26u);
      }
    }
  }

  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_25);
  }
  if (_logPacketToFile)
  {
    id LogWriter = getLogWriter();
    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(LogWriter);
    [v37 log:v23 data:v14 limit:v18];
  }

  objc_autoreleasePoolPop(v10);
}

void acc_platform_packetLogging_logEvent( uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void acc_platform_packetLogging_logEventVA(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  int v8 = objc_autoreleasePoolPush();
  if (__referenceDate)
  {
    if (!a1) {
      goto LABEL_15;
    }
  }

  else
  {
    uint64_t v9 = objc_alloc_init(&OBJC_CLASS___NSDate);
    id v10 = (void *)__referenceDate;
    __referenceDate = (uint64_t)v9;

    if (!a1)
    {
LABEL_15:
      if (gLogObjects) {
        BOOL v22 = gNumLogObjects < 22;
      }
      else {
        BOOL v22 = 1;
      }
      if (v22)
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v11 = (os_log_s *)&_os_log_default;
        id v23 = &_os_log_default;
      }

      else
      {
        id v11 = (os_log_s *)*(id *)(gLogObjects + 168);
      }

      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        acc_platform_packetLogging_logEventVA_cold_1(v11);
      }
      goto LABEL_57;
    }
  }

  if (!*(void *)(a1 + 16)) {
    goto LABEL_15;
  }
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t TransportTypeString = (const char *)acc_endpoint_getTransportTypeString(a1);
  -[os_log_s timeIntervalSinceDate:](v11, "timeIntervalSinceDate:", __referenceDate);
  *(float *)&double v13 = v13;
  double v14 = *(float *)&v13;
  uint64_t v15 = *(void *)(a1 + 16);
  if (!TransportTypeString) {
    uint64_t TransportTypeString = "unknown";
  }
  if (a2) {
    uint64_t v16 = a2;
  }
  else {
    uint64_t v16 = "null";
  }
  double v17 = objc_alloc(&OBJC_CLASS___NSString);
  id v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a3));
  double v19 = -[NSString initWithFormat:arguments:](v17, "initWithFormat:arguments:", v18, a4);
  double v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"LOG; %.6f; %@; %s; Event; %s; %@",
                    *(void *)&v14,
                    v15,
                    TransportTypeString,
                    v16,
                    v19));

  if (acc_platform_packetLogging_isLogPacketDataAsMsg())
  {
    if (gLogObjects && gNumLogObjects >= 22)
    {
      uint64_t v21 = (os_log_s *)*(id *)(gLogObjects + 168);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v21 = (os_log_s *)&_os_log_default;
      id v27 = &_os_log_default;
    }

    if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_52;
    }
    *(_DWORD *)buf = 138543362;
    id v36 = v20;
    BOOL v28 = "%{public}@";
    int v29 = v21;
    os_log_type_t v30 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_46;
  }

  int isInternalBuild = platform_systemInfo_isInternalBuild();
  if (gLogObjects) {
    BOOL v25 = gNumLogObjects <= 21;
  }
  else {
    BOOL v25 = 1;
  }
  int v26 = !v25;
  if (!isInternalBuild)
  {
    if (v26)
    {
      uint64_t v21 = (os_log_s *)*(id *)(gLogObjects + 168);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v21 = (os_log_s *)&_os_log_default;
      id v32 = &_os_log_default;
    }

    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
      acc_platform_packetLogging_logEventVA_cold_5((uint64_t)v20, v21);
    }
    goto LABEL_52;
  }

  if (v26)
  {
    uint64_t v21 = (os_log_s *)*(id *)(gLogObjects + 168);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v21 = (os_log_s *)&_os_log_default;
    id v31 = &_os_log_default;
  }

  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    id v36 = v20;
    BOOL v28 = "%@";
    int v29 = v21;
    os_log_type_t v30 = OS_LOG_TYPE_INFO;
LABEL_46:
    _os_log_impl((void *)&_mh_execute_header, v29, v30, v28, buf, 0xCu);
  }

void acc_platform_packetLogging_logSNTPTimeSyncMsg(uint64_t a1, void *a2, int a3)
{
  id v38 = objc_autoreleasePoolPush();
  if (!__referenceDate)
  {
    id v6 = objc_alloc_init(&OBJC_CLASS___NSDate);
    __int16 v7 = (void *)__referenceDate;
    __referenceDate = (uint64_t)v6;
  }

  int v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v9 = a2;
  id v10 = (unsigned __int8 *)[v9 bytes];
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t TransportTypeString = acc_endpoint_getTransportTypeString(a1);
  id v14 = [v9 length];
  [v8 timeIntervalSinceDate:__referenceDate];
  *(float *)&double v15 = v15;
  uint64_t v16 = "unknown";
  double v17 = @"Time-FromAcc";
  double v18 = *(float *)&v15;
  if (v11 < 2)
  {
    if (a1) {
      double v20 = *(const __CFString **)(a1 + 16);
    }
    else {
      double v20 = @"unknown";
    }
    if (TransportTypeString) {
      uint64_t v16 = (const char *)TransportTypeString;
    }
    if (!a3) {
      double v17 = @"Time-ToAcc";
    }
    uint64_t v21 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"LOG; %.6f; %@; %s; %@%@; %s; data(len=%d)=",
            *(void *)&v18,
            v20,
            v16,
            v17,
            &stru_100200A40,
            "Unknown Message",
            v14,
            v37);
  }

  else
  {
    if (a1) {
      double v19 = *(const __CFString **)(a1 + 16);
    }
    else {
      double v19 = @"unknown";
    }
    if (TransportTypeString) {
      uint64_t v16 = (const char *)TransportTypeString;
    }
    if (!a3) {
      double v17 = @"Time-ToAcc";
    }
    uint64_t v21 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"LOG; %.6f; %@; %s; %@%@; SNTP BD Cmd %#04x; packetLen %#04x; data(len=%d)=",
            *(void *)&v18,
            v19,
            v16,
            v17,
            &stru_100200A40,
            v12,
            v11,
            v14);
  }

  BOOL v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_25);
  }
  if (_logPacketDataSizeLimit < 0) {
    goto LABEL_30;
  }
  uint64_t v23 = _logPacketDataSizeLimit;
  if (!_logPacketDataSizeLimit) {
    uint64_t v23 = 0x10000LL;
  }
  if (v23 >= v14)
  {
LABEL_30:
    uint64_t v24 = "";
  }

  else
  {
    if (_logPacketDataSizeLimit) {
      LODWORD(v14) = _logPacketDataSizeLimit;
    }
    else {
      LODWORD(v14) = 0x10000;
    }
    uint64_t v24 = "...";
  }

  if (acc_platform_packetLogging_isLogPacketDataAsMsg())
  {
    if (gLogObjects && gNumLogObjects >= 22)
    {
      BOOL v25 = (os_log_s *)*(id *)(gLogObjects + 168);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      BOOL v25 = (os_log_s *)&_os_log_default;
      id v29 = &_os_log_default;
    }

    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138544130;
      __int16 v40 = v22;
      __int16 v41 = 1040;
      int v42 = (int)v14;
      __int16 v43 = 2098;
      id v44 = [v9 bytes];
      __int16 v45 = 2080;
      int v46 = v24;
      os_log_type_t v30 = "%{public}@<%{public,coreacc:bytes}.*P> %s";
      id v31 = v25;
      os_log_type_t v32 = OS_LOG_TYPE_DEFAULT;
LABEL_56:
      _os_log_impl((void *)&_mh_execute_header, v31, v32, v30, buf, 0x26u);
    }
  }

  else
  {
    int isInternalBuild = platform_systemInfo_isInternalBuild();
    if (gLogObjects) {
      BOOL v27 = gNumLogObjects <= 21;
    }
    else {
      BOOL v27 = 1;
    }
    int v28 = !v27;
    if (isInternalBuild)
    {
      if (v28)
      {
        BOOL v25 = (os_log_s *)*(id *)(gLogObjects + 168);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        BOOL v25 = (os_log_s *)&_os_log_default;
        id v33 = &_os_log_default;
      }

      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138413058;
        __int16 v40 = v22;
        __int16 v41 = 1040;
        int v42 = (int)v14;
        __int16 v43 = 2096;
        id v44 = [v9 bytes];
        __int16 v45 = 2080;
        int v46 = v24;
        os_log_type_t v30 = "%@<%{coreacc:bytes}.*P> %s";
        id v31 = v25;
        os_log_type_t v32 = OS_LOG_TYPE_INFO;
        goto LABEL_56;
      }
    }

    else
    {
      if (v28)
      {
        BOOL v25 = (os_log_s *)*(id *)(gLogObjects + 168);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        BOOL v25 = (os_log_s *)&_os_log_default;
        id v34 = &_os_log_default;
      }

      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138413058;
        __int16 v40 = v22;
        __int16 v41 = 1040;
        int v42 = (int)v14;
        __int16 v43 = 2096;
        id v44 = [v9 bytes];
        __int16 v45 = 2080;
        int v46 = v24;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "%@<%{coreacc:bytes}.*P> %s",  buf,  0x26u);
      }
    }
  }

  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_25);
  }
  if (_logPacketToFile)
  {
    id LogWriter = getLogWriter();
    id v36 = (void *)objc_claimAutoreleasedReturnValue(LogWriter);
    [v36 log:v22 data:v9 limit:v14];
  }

  objc_autoreleasePoolPop(v38);
}

void acc_platform_packetLogging_logQiAuthMsg(uint64_t a1, void *a2, int a3)
{
  id v6 = objc_autoreleasePoolPush();
  if (!__referenceDate)
  {
    __int16 v7 = objc_alloc_init(&OBJC_CLASS___NSDate);
    int v8 = (void *)__referenceDate;
    __referenceDate = (uint64_t)v7;
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v10 = a2;
  id v11 = [v10 length];
  id v12 = v10;
  int v13 = *(_BYTE *)[v12 bytes] & 0xF;
  uint64_t TransportTypeString = (const char *)acc_endpoint_getTransportTypeString(a1);
  double v15 = qiAuth_protocol_msgTypeString(v13);
  if (a2 && (uint64_t v16 = v15, [v12 length]))
  {
    [v9 timeIntervalSinceDate:__referenceDate];
    *(float *)&double v17 = v17;
    double v18 = *(float *)&v17;
    if (a1) {
      double v19 = *(const __CFString **)(a1 + 16);
    }
    else {
      double v19 = @"unknown";
    }
    if (!TransportTypeString) {
      uint64_t TransportTypeString = "unknown";
    }
    if (a3) {
      uint64_t v21 = @"Acc-QiAuth";
    }
    else {
      uint64_t v21 = @"iPod-QiAuth";
    }
    id v22 = v12;
    double v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"LOG; %.6f; %@; %s; %@; msg %d(%s); ver %d; payload(len=%u)=",
                      *(void *)&v18,
                      v19,
                      TransportTypeString,
                      v21,
                      *(_BYTE *)[v22 bytes] & 0xF,
                      v16,
                      *(unsigned __int8 *)[v22 bytes] >> 4,
                      v11));
  }

  else
  {
    double v20 = 0LL;
  }

  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_25);
  }
  if (_logPacketDataSizeLimit < 0) {
    goto LABEL_25;
  }
  uint64_t v23 = _logPacketDataSizeLimit;
  if (!_logPacketDataSizeLimit) {
    uint64_t v23 = 0x10000LL;
  }
  if (v23 >= v11)
  {
LABEL_25:
    uint64_t v24 = "";
  }

  else
  {
    if (_logPacketDataSizeLimit) {
      LODWORD(v11) = _logPacketDataSizeLimit;
    }
    else {
      LODWORD(v11) = 0x10000;
    }
    uint64_t v24 = "...";
  }

  if (acc_platform_packetLogging_isLogPacketDataAsMsg())
  {
    if (gLogObjects && gNumLogObjects >= 22)
    {
      BOOL v25 = (os_log_s *)*(id *)(gLogObjects + 168);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      BOOL v25 = (os_log_s *)&_os_log_default;
      id v29 = &_os_log_default;
    }

    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138544130;
      id v38 = v20;
      __int16 v39 = 1040;
      int v40 = (int)v11;
      __int16 v41 = 2098;
      id v42 = [v12 bytes];
      __int16 v43 = 2080;
      id v44 = v24;
      os_log_type_t v30 = "%{public}@<%{public,coreacc:bytes}.*P> %s";
      id v31 = v25;
      os_log_type_t v32 = OS_LOG_TYPE_DEFAULT;
LABEL_51:
      _os_log_impl((void *)&_mh_execute_header, v31, v32, v30, buf, 0x26u);
    }
  }

  else
  {
    int isInternalBuild = platform_systemInfo_isInternalBuild();
    if (gLogObjects) {
      BOOL v27 = gNumLogObjects <= 21;
    }
    else {
      BOOL v27 = 1;
    }
    int v28 = !v27;
    if (isInternalBuild)
    {
      if (v28)
      {
        BOOL v25 = (os_log_s *)*(id *)(gLogObjects + 168);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        BOOL v25 = (os_log_s *)&_os_log_default;
        id v33 = &_os_log_default;
      }

      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138413058;
        id v38 = v20;
        __int16 v39 = 1040;
        int v40 = (int)v11;
        __int16 v41 = 2096;
        id v42 = [v12 bytes];
        __int16 v43 = 2080;
        id v44 = v24;
        os_log_type_t v30 = "%@<%{coreacc:bytes}.*P> %s";
        id v31 = v25;
        os_log_type_t v32 = OS_LOG_TYPE_INFO;
        goto LABEL_51;
      }
    }

    else
    {
      if (v28)
      {
        BOOL v25 = (os_log_s *)*(id *)(gLogObjects + 168);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        BOOL v25 = (os_log_s *)&_os_log_default;
        id v34 = &_os_log_default;
      }

      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138413058;
        id v38 = v20;
        __int16 v39 = 1040;
        int v40 = (int)v11;
        __int16 v41 = 2096;
        id v42 = [v12 bytes];
        __int16 v43 = 2080;
        id v44 = v24;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "%@<%{coreacc:bytes}.*P> %s",  buf,  0x26u);
      }
    }
  }

  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_25);
  }
  if (_logPacketToFile)
  {
    id LogWriter = getLogWriter();
    id v36 = (void *)objc_claimAutoreleasedReturnValue(LogWriter);
    [v36 log:v20 data:v12 limit:v11];
  }

  objc_autoreleasePoolPop(v6);
}

void acc_platform_packetLogging_logT56Msg(uint64_t a1, void *a2, int a3)
{
  id v6 = objc_autoreleasePoolPush();
  if (!__referenceDate)
  {
    __int16 v7 = objc_alloc_init(&OBJC_CLASS___NSDate);
    int v8 = (void *)__referenceDate;
    __referenceDate = (uint64_t)v7;
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v10 = a2;
  id v11 = [v10 length];
  id v12 = v10;
  int v13 = *(unsigned __int8 *)[v12 bytes];
  uint64_t TransportTypeString = (const char *)acc_endpoint_getTransportTypeString(a1);
  double v15 = t56_protocol_msgTypeString(v13);
  if (a2 && (uint64_t v16 = v15, [v12 length]))
  {
    [v9 timeIntervalSinceDate:__referenceDate];
    float v18 = v17;
    if (a1) {
      double v19 = *(const __CFString **)(a1 + 16);
    }
    else {
      double v19 = @"unknown";
    }
    if (!TransportTypeString) {
      uint64_t TransportTypeString = "unknown";
    }
    if (a3) {
      uint64_t v21 = @"Acc-T56";
    }
    else {
      uint64_t v21 = @"iPod-T56";
    }
    double v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"LOG; %.6f; %@; %s; %@; msg %d(%s); payload(len=%u)=",
                      v18,
                      v19,
                      TransportTypeString,
                      v21,
                      *(unsigned __int8 *)[v12 bytes],
                      v16,
                      v11));
  }

  else
  {
    double v20 = 0LL;
  }

  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_25);
  }
  if (_logPacketDataSizeLimit < 0) {
    goto LABEL_25;
  }
  uint64_t v22 = _logPacketDataSizeLimit;
  if (!_logPacketDataSizeLimit) {
    uint64_t v22 = 0x10000LL;
  }
  if (v22 >= v11)
  {
LABEL_25:
    uint64_t v23 = "";
  }

  else
  {
    if (_logPacketDataSizeLimit) {
      LODWORD(v11) = _logPacketDataSizeLimit;
    }
    else {
      LODWORD(v11) = 0x10000;
    }
    uint64_t v23 = "...";
  }

  if (acc_platform_packetLogging_isLogPacketDataAsMsg())
  {
    if (gLogObjects && gNumLogObjects >= 22)
    {
      uint64_t v24 = (os_log_s *)*(id *)(gLogObjects + 168);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v24 = (os_log_s *)&_os_log_default;
      id v28 = &_os_log_default;
    }

    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138544130;
      uint64_t v37 = v20;
      __int16 v38 = 1040;
      int v39 = (int)v11;
      __int16 v40 = 2098;
      id v41 = [v12 bytes];
      __int16 v42 = 2080;
      __int16 v43 = v23;
      id v29 = "%{public}@<%{public,coreacc:bytes}.*P> %s";
      os_log_type_t v30 = v24;
      os_log_type_t v31 = OS_LOG_TYPE_DEFAULT;
LABEL_51:
      _os_log_impl((void *)&_mh_execute_header, v30, v31, v29, buf, 0x26u);
    }
  }

  else
  {
    int isInternalBuild = platform_systemInfo_isInternalBuild();
    if (gLogObjects) {
      BOOL v26 = gNumLogObjects <= 21;
    }
    else {
      BOOL v26 = 1;
    }
    int v27 = !v26;
    if (isInternalBuild)
    {
      if (v27)
      {
        uint64_t v24 = (os_log_s *)*(id *)(gLogObjects + 168);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v24 = (os_log_s *)&_os_log_default;
        id v32 = &_os_log_default;
      }

      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138413058;
        uint64_t v37 = v20;
        __int16 v38 = 1040;
        int v39 = (int)v11;
        __int16 v40 = 2096;
        id v41 = [v12 bytes];
        __int16 v42 = 2080;
        __int16 v43 = v23;
        id v29 = "%@<%{coreacc:bytes}.*P> %s";
        os_log_type_t v30 = v24;
        os_log_type_t v31 = OS_LOG_TYPE_INFO;
        goto LABEL_51;
      }
    }

    else
    {
      if (v27)
      {
        uint64_t v24 = (os_log_s *)*(id *)(gLogObjects + 168);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v24 = (os_log_s *)&_os_log_default;
        id v33 = &_os_log_default;
      }

      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138413058;
        uint64_t v37 = v20;
        __int16 v38 = 1040;
        int v39 = (int)v11;
        __int16 v40 = 2096;
        id v41 = [v12 bytes];
        __int16 v42 = 2080;
        __int16 v43 = v23;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "%@<%{coreacc:bytes}.*P> %s",  buf,  0x26u);
      }
    }
  }

  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_25);
  }
  if (_logPacketToFile)
  {
    id LogWriter = getLogWriter();
    id v35 = (void *)objc_claimAutoreleasedReturnValue(LogWriter);
    [v35 log:v20 data:v12 limit:v11];
  }

  objc_autoreleasePoolPop(v6);
}

void ____registerForLoggingPrefsNotification_block_invoke(id a1)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver( DarwinNotifyCenter,  0LL,  (CFNotificationCallback)receivedNotification,  @"com.apple.iapd.LoggingPreferencesChangedNotification",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
}

void readLoggingPrefs()
{
  _logPacketDataAsInfo = CFPreferencesGetAppBooleanValue(@"IAPLogging", @"com.apple.Preferences", 0LL);
  _logPacketToFile = CFPreferencesGetAppBooleanValue(@"PrintIapPackets", @"com.apple.iapd", 0LL);
  _logPacketDataSizeLimit = CFPreferencesGetAppIntegerValue( @"PacketLoggingDataSizeLimit",  @"com.apple.iapd",  0LL);
  if (gLogObjects && gNumLogObjects >= 22)
  {
    id v0 = (os_log_s *)*(id *)(gLogObjects + 168);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v0 = (os_log_s *)&_os_log_default;
    id v1 = &_os_log_default;
  }

  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315650;
    __int16 v4 = "readLoggingPrefs";
    __int16 v5 = 1024;
    int v6 = 70;
    __int16 v7 = 2048;
    uint64_t v8 = _logPacketDataSizeLimit;
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_DEFAULT,  "%s:%d _logPacketDataSizeLimit %ld",  (uint8_t *)&v3,  0x1Cu);
  }

  if (_logPacketToFile)
  {
    openLogFileWriter();
  }

  else if (_logFileWriter)
  {
    [(id)_logFileWriter flush];
    uint64_t v2 = (void *)_logFileWriter;
    _logFileWriter = 0LL;
  }

void receivedNotification()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 15;
  }
  else {
    BOOL v0 = 1;
  }
  if (v0)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v2 = (os_log_s *)&_os_log_default;
    id v1 = &_os_log_default;
  }

  else
  {
    uint64_t v2 = (os_log_s *)*(id *)(gLogObjects + 112);
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Logging preferences changed!", v3, 2u);
  }

  readLoggingPrefs();
}

void openLogFileWriter()
{
  if (!_logFileWriter)
  {
    id v0 = -[LogFileWriter initFor:](objc_alloc(&OBJC_CLASS___LogFileWriter), "initFor:", @"accessoryd");
    id v1 = (void *)_logFileWriter;
    _logFileWriter = (uint64_t)v0;

    if (!__referenceDate)
    {
      uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSDate);
      int v3 = (void *)__referenceDate;
      __referenceDate = (uint64_t)v2;
    }
  }

uint64_t iAP2BuffPoolGetBuffSize(unsigned int a1)
{
  if (a1 >= 3) {
    iAP2BuffPoolGetBuffSize_cold_1();
  }
  return (iAP2MsgPreSendCtlProcess() + 27) & 0xFFFFFFFC;
}

uint64_t iAP2BuffPoolInit(unsigned int a1, uint64_t a2, int a3, __int16 a4, uint64_t a5)
{
  if (a1 >= 3) {
    iAP2BuffPoolInit_cold_1();
  }
  *(_BYTE *)a5 = a1;
  *(_DWORD *)(a5 + 4) = a3;
  *(_WORD *)(a5 + 2) = a4;
  *(void *)(a5 + _Block_object_dispose(va, 8) = a2;
  *(void *)(a5 + 16) = 0LL;
  __iAP2BuffPoolInitBuffList(a5);
  return a5;
}

uint64_t iAP2BuffPoolCleanup(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 3) {
    iAP2BuffPoolCleanup_cold_1();
  }
  uint64_t result = platform_sleepAssertion_createForApplePencil(a1);
  *a1 = 3;
  *((void *)a1 + 1) = 0LL;
  *((_DWORD *)a1 + 1) = 0;
  *((_WORD *)a1 + 1) = 0;
  return result;
}

_BYTE *iAP2BuffPoolGet(unsigned __int8 *a1, size_t a2)
{
  unsigned int v2 = *a1;
  if (v2 >= 3) {
    iAP2BuffPoolGet_cold_1();
  }
  if (v2 == 2)
  {
    if (!HIDWORD(a2)) {
      return __iAP2BuffPoolGetRecvPacket((uint64_t)a1, a2);
    }
  }

  else
  {
    if (v2 != 1) {
      return __iAP2BuffPoolGetBuff((uint64_t)a1, a2);
    }
    if (!HIDWORD(a2)) {
      return __iAP2BuffPoolGetSendPacket((uint64_t)a1, a2);
    }
  }

  return 0LL;
}

void iAP2BuffPoolReturn(unsigned __int8 *a1, void **a2)
{
  unsigned int v2 = *a1;
  if (v2 >= 3) {
    iAP2BuffPoolReturn_cold_1();
  }
  if (v2 == 2 || v2 == 1) {
    __iAP2BuffPoolReturnSendPacket((uint64_t)a1, a2);
  }
  else {
    __iAP2BuffPoolReturnBuff((int)a1, a2);
  }
}

void sub_1000D9968( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, id a18)
{
}

uint64_t iap2_nowPlaying_mediaItemAttributesUpdateHandler(uint64_t *a1, const __CFDictionary *a2)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v3 = 0LL;
  if (a2 && *a1)
  {
    if (gLogObjects && gNumLogObjects >= 32)
    {
      __int16 v5 = *(os_log_s **)(gLogObjects + 248);
    }

    else
    {
      __int16 v5 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v6 = (const char *)a1[1];
      int v13 = 138412290;
      id v14 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Received mediaItemAttributes update for endpoint: %@",  (uint8_t *)&v13,  0xCu);
    }

    uint64_t Feature = (_BYTE *)iap2_feature_getFeature((uint64_t)a1, 0xEu);
    uint64_t v3 = (uint64_t)Feature;
    if (Feature)
    {
      if (*Feature)
      {
        uint64_t v8 = malloc(0x48uLL);
        id v9 = malloc(0xFFFFuLL);
        iAP2MsgInit((uint64_t)v8, 20481, (uint64_t)v9, 0xFFFF, (uint64_t)_mediaItemAttributesUpdateSentCB, 0LL);
        id v10 = iAP2MsgAddGroupParam((uint64_t)v8, 0);
        if (_addMediaItemAttributesToMessage((uint64_t)v8, (uint64_t)v10, v3, a2))
        {
          iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)v8);
          return 1LL;
        }

        else
        {
          if (gLogObjects && gNumLogObjects >= 32)
          {
            id v11 = *(os_log_s **)(gLogObjects + 248);
          }

          else
          {
            id v11 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            int v13 = 136315138;
            id v14 = "iap2_nowPlaying_mediaItemAttributesUpdateHandler";
            _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%s: no parameters added! cleaning up pOutMsg",  (uint8_t *)&v13,  0xCu);
          }

          uint64_t v3 = 1LL;
          iAP2MsgCleanup((uint64_t)v8);
        }

        return v3;
      }

      return 0LL;
    }
  }

  return v3;
}

void *logObjectForModule_23()
{
  if (gLogObjects && gNumLogObjects >= 32) {
    return *(void **)(gLogObjects + 248);
  }
  id v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

void _mediaItemAttributesUpdateSentCB(void *a1, int a2)
{
  if (a1)
  {
    uint64_t v4 = a1[6];
    if (v4)
    {
      uint64_t Feature = (_BYTE *)iap2_feature_getFeature(v4, 0xEu);
      if (Feature)
      {
        if (!*Feature)
        {
          uint64_t v8 = (os_log_s *)logObjectForModule_23();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            int v9 = 136315394;
            id v10 = "_mediaItemAttributesUpdateSentCB";
            __int16 v11 = 1024;
            int v12 = a2;
            _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s NowPlaying updates not started. NeedDelete:%d",  (uint8_t *)&v9,  0x12u);
          }
        }
      }
    }

    if (a2)
    {
      int v6 = (void *)a1[6];
      if (v6)
      {
        free(v6);
        a1[6] = 0LL;
      }

      __int16 v7 = (void *)a1[3];
      if (v7) {
        free(v7);
      }
      free(a1);
    }
  }

uint64_t _addMediaItemAttributesToMessage(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4)
{
  unsigned __int16 v4 = 0;
  if (!a1 || !a3 || !a4) {
    return v4;
  }
  uint64_t v8 = *(const __CFArray **)(a3 + 8);
  if (!v8) {
    return 0;
  }
  uint64_t Count = CFArrayGetCount(v8);
  __int16 v49 = &v35;
  uint64_t v11 = __chkstk_darwin(Count);
  int v13 = (const void **)((char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (v11) {
    memset((char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL), 170, v12);
  }
  v50.location = 0LL;
  v50.length = Count;
  CFArrayGetValues(*(CFArrayRef *)(a3 + 8), v50, v13);
  if (gLogObjects && gNumLogObjects >= 32)
  {
    id v14 = *(os_log_s **)(gLogObjects + 248);
  }

  else
  {
    id v14 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef RawValuesString = CFArrayCreateRawValuesString(*(const __CFArray **)(a3 + 8), 0);
    if (gLogObjects && gNumLogObjects >= 32)
    {
      uint64_t v16 = *(os_log_s **)(gLogObjects + 248);
    }

    else
    {
      uint64_t v16 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      _addMediaItemAttributesToMessage_cold_3();
      if (!RawValuesString)
      {
LABEL_21:
        if (gLogObjects && gNumLogObjects >= 32)
        {
          double v17 = *(os_log_s **)(gLogObjects + 248);
        }

        else
        {
          double v17 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
          _addMediaItemAttributesToMessage_cold_1();
        }
        goto LABEL_28;
      }
    }

    else if (!RawValuesString)
    {
      goto LABEL_21;
    }

    CFRelease(RawValuesString);
    goto LABEL_21;
  }

uint64_t iap2_nowPlaying_mediaItemArtworkUpdateHandler(uint64_t result, const __CFData *a2)
{
  if (!result) {
    return result;
  }
  unsigned int v2 = (uint64_t *)result;
  if (!*(void *)result) {
    return 0LL;
  }
  if (gLogObjects && gNumLogObjects >= 32)
  {
    unsigned __int16 v4 = *(os_log_s **)(gLogObjects + 248);
  }

  else
  {
    unsigned __int16 v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = v2[1];
    *(_DWORD *)buf = 138412290;
    *(void *)uint64_t v37 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "#Artwork Received mediaItemArtwork update for endpoint: %@",  buf,  0xCu);
  }

  if (gLogObjects) {
    BOOL v6 = gNumLogObjects <= 31;
  }
  else {
    BOOL v6 = 1;
  }
  int v7 = !v6;
  if (a2)
  {
    if (v7)
    {
      uint64_t v8 = *(os_log_s **)(gLogObjects + 248);
    }

    else
    {
      uint64_t v8 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      iap2_nowPlaying_mediaItemArtworkUpdateHandler_cold_8(a2, v8);
    }
  }

  else
  {
    if (v7)
    {
      int v9 = *(os_log_s **)(gLogObjects + 248);
    }

    else
    {
      int v9 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      iap2_nowPlaying_mediaItemArtworkUpdateHandler_cold_6();
    }
  }

  uint64_t result = iap2_feature_getFeature((uint64_t)v2, 0xEu);
  if (!result) {
    return result;
  }
  uint64_t v10 = result;
  if (!*(_BYTE *)result) {
    return 0LL;
  }
  uint64_t result = _isSubscribingForMediaItemAttribute(result);
  if (!(_DWORD)result) {
    return result;
  }
  if (*(_BYTE *)(v10 + 64))
  {
    unint64_t TransferEntry = iap2_sessionFileTransfer_findTransferEntry((unint64_t)v2, *(unsigned __int8 *)(v10 + 65));
    if (TransferEntry)
    {
      size_t v12 = (unsigned __int8 *)TransferEntry;
      uint64_t v13 = *(void *)(TransferEntry + 8);
      if (v13)
      {
        uint64_t v14 = gLogObjects;
        int v15 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 32)
        {
          uint64_t v16 = *(os_log_s **)(gLogObjects + 248);
        }

        else
        {
          uint64_t v16 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)uint64_t v37 = v14;
            *(_WORD *)&v37[8] = 1024;
            *(_DWORD *)__int16 v38 = v15;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            uint64_t v13 = *((void *)v12 + 1);
          }
        }

        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          int v17 = *v12;
          int v18 = *(unsigned __int8 *)(v13 + 109);
          int v19 = *((_DWORD *)v12 + 1);
          int v20 = *(unsigned __int16 *)(v13 + 112);
          int v21 = *(_DWORD *)(v13 + 104);
          *(_DWORD *)buf = 67110144;
          *(_DWORD *)uint64_t v37 = v17;
          *(_WORD *)&v37[4] = 1024;
          *(_DWORD *)&v37[6] = v18;
          *(_WORD *)__int16 v38 = 1024;
          *(_DWORD *)&v38[2] = v19;
          LOWORD(v39) = 1024;
          *(_DWORD *)((char *)&v39 + 2) = v20;
          HIWORD(v39) = 1024;
          int v40 = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "#Artwork cancel previous transfer: id=%d(%d) type=%d(%d) state=%d",  buf,  0x20u);
          uint64_t v13 = *((void *)v12 + 1);
        }

        _cancelPendingTransfer_0(v13);
      }
    }

    *(_WORD *)(v10 + 64) = 0;
  }

  uint64_t v22 = v2[4];
  if (!v22) {
    return 0LL;
  }
  uint64_t result = *(void *)(v22 + 24);
  if (!result) {
    return result;
  }
  int SessionForService = iAP2LinkGetSessionForService(result, 1);
  __int16 v24 = (char *)(v10 + 65);
  if (iAP2FileTransferAllocateBufferID(*(void *)(v2[4] + 24), SessionForService, (_BYTE *)(v10 + 65)))
  {
    *(_BYTE *)(v10 + 64) = 1;
    uint64_t result = (uint64_t)malloc(0x130uLL);
    if (!result) {
      return result;
    }
    BOOL v25 = (void *)result;
    iAP2FileTransferCreate( *(unsigned __int8 **)(v2[4] + 24),  SessionForService,  *v24,  0LL,  0LL,  0,  result);
    iAP2FileTransferTypeData((uint64_t)v25, 2, 0LL);
    if (iap2_sessionFileTransfer_addTransferForFeature((uint64_t)v2, 14, (uint64_t)v25, 0LL))
    {
      BOOL v26 = malloc(0x48uLL);
      uint64_t v35 = malloc(0xFFFFuLL);
      uint64_t v27 = malloc(0x10uLL);
      *(void *)uint64_t v27 = v2;
      v27[8] = *v24;
      *((_DWORD *)v27 + 3) = 2;
      if (gLogObjects && gNumLogObjects >= 32)
      {
        uint64_t v28 = *(os_log_s **)(gLogObjects + 248);
      }

      else
      {
        uint64_t v28 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v31 = v2[1];
        *(_DWORD *)buf = 136315650;
        *(void *)uint64_t v37 = "iap2_nowPlaying_mediaItemArtworkUpdateHandler";
        *(_WORD *)&v37[8] = 1024;
        *(_DWORD *)__int16 v38 = 664;
        *(_WORD *)&v38[4] = 2112;
        uint64_t v39 = v31;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "%s:%d - iAP2MsgInit with cleanupCB - _artworkFileTransferIDSent endpointUUID: %@",  buf,  0x1Cu);
      }

      iAP2MsgInit((uint64_t)v26, 20481, (uint64_t)v35, 0xFFFF, (uint64_t)_artworkFileTransferIDSent, (uint64_t)v27);
      uint64_t v32 = iAP2MsgAddGroupParam((uint64_t)v26, 0);
      iAP2MsgAddU8Param((uint64_t)v26, (uint64_t)v32, 26, *v24);
      if (a2)
      {
        *(void *)(v10 + 72) = CFRetain(a2);
        char v33 = 2;
      }

      else
      {
        id v34 = *(const void **)(v10 + 72);
        if (v34)
        {
          CFRelease(v34);
          char v33 = 0;
          *(void *)(v10 + 72) = 0LL;
        }

        else
        {
          char v33 = 0;
        }
      }

      *(_BYTE *)(v10 + 66) = v33;
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 32)
      {
        os_log_type_t v30 = *(os_log_s **)(gLogObjects + 248);
      }

      else
      {
        os_log_type_t v30 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
        iap2_nowPlaying_mediaItemArtworkUpdateHandler_cold_2();
      }
      free(v25);
    }
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 32)
    {
      __int16 v29 = *(os_log_s **)(gLogObjects + 248);
    }

    else
    {
      __int16 v29 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
      iap2_nowPlaying_mediaItemArtworkUpdateHandler_cold_4();
    }
  }

  return 1LL;
}

BOOL _isSubscribingForMediaItemAttribute(BOOL result)
{
  if (result)
  {
    if (*(void *)(result + 16))
    {
      unsigned int v1 = *(const __CFArray **)(result + 8);
      v2.length = CFArrayGetCount(v1);
      v2.location = 0LL;
      return CFArrayContainsValue(v1, v2, (const void *)0x1A) != 0;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

void _cancelPendingTransfer_0(uint64_t a1)
{
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 32)
    {
      CFRange v2 = *(os_log_s **)(gLogObjects + 248);
    }

    else
    {
      CFRange v2 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      int v3 = *(unsigned __int8 *)(a1 + 109);
      int v4 = *(unsigned __int16 *)(a1 + 112);
      int v5 = *(_DWORD *)(a1 + 104);
      int v19 = 67109632;
      int v20 = v3;
      __int16 v21 = 1024;
      int v22 = v4;
      __int16 v23 = 1024;
      int v24 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "_cancelPendingTransfer: fileXfer(ID=%u type=%d state=%d)",  (uint8_t *)&v19,  0x14u);
    }

    uint64_t v6 = *(void *)(*(void *)a1 + 176LL);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 16);
      if (v7)
      {
        uint64_t v8 = *(_BYTE **)(a1 + 64);
        if (v8)
        {
          *uint64_t v8 = 1;
          int v9 = *(_DWORD *)(a1 + 104);
          if (v9 == 2 || v8[3]) {
            goto LABEL_14;
          }
        }

        else
        {
          int v9 = *(_DWORD *)(a1 + 104);
          if (v9 == 2)
          {
LABEL_14:
            if (gLogObjects && gNumLogObjects >= 32)
            {
              uint64_t v10 = *(os_log_s **)(gLogObjects + 248);
            }

            else
            {
              uint64_t v10 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
            {
              int v11 = *(unsigned __int8 *)(a1 + 109);
              int v12 = *(unsigned __int16 *)(a1 + 112);
              int v13 = *(_DWORD *)(a1 + 104);
              int v19 = 67109632;
              int v20 = v11;
              __int16 v21 = 1024;
              int v22 = v12;
              __int16 v23 = 1024;
              int v24 = v13;
              _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "_cancelPendingTransfer: Call Cancel fileXfer(ID=%u type=%d state=%d)",  (uint8_t *)&v19,  0x14u);
            }

            if (v8) {
              *uint64_t v8 = 0;
            }
            iAP2FileTransferCancel(a1);
            iap2_sessionFileTransfer_removeTransferForFeature(v7, 14, a1);
            uint64_t v14 = *(void **)(a1 + 64);
            if (v14)
            {
              free(v14);
              *(void *)(a1 + 64) = 0LL;
            }

            iAP2FileTransferRelease(a1);
            return;
          }
        }

        if (v9)
        {
          if (v9 == 5 && v8) {
            *uint64_t v8 = 0;
          }
        }

        else
        {
          if (gLogObjects && gNumLogObjects >= 32)
          {
            int v15 = *(os_log_s **)(gLogObjects + 248);
          }

          else
          {
            int v15 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            int v16 = *(unsigned __int8 *)(a1 + 109);
            int v17 = *(unsigned __int16 *)(a1 + 112);
            int v18 = *(_DWORD *)(a1 + 104);
            int v19 = 67109632;
            int v20 = v16;
            __int16 v21 = 1024;
            int v22 = v17;
            __int16 v23 = 1024;
            int v24 = v18;
            _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "_cancelPendingTransfer: Call Start fileXfer(ID=%u type=%d state=%d)",  (uint8_t *)&v19,  0x14u);
          }

          iAP2FileTransferStart(a1, 0LL, 0LL, 0LL, (uint64_t)_artworkFileTransferEndHandler, 0LL, 0, 0);
        }
      }
    }
  }

void _artworkFileTransferIDSent(void *a1, int a2)
{
  if (a1)
  {
    uint64_t v4 = a1[6];
    if (gLogObjects && gNumLogObjects >= 32)
    {
      int v5 = *(os_log_s **)(gLogObjects + 248);
    }

    else
    {
      int v5 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = obfuscatedPointer(v4);
      if (v4) {
        int v7 = *(_DWORD *)(v4 + 12);
      }
      else {
        int v7 = 0;
      }
      int v11 = 134219266;
      uint64_t v12 = v6;
      __int16 v13 = 1024;
      int v14 = v7;
      __int16 v15 = 1024;
      int v16 = a2;
      __int16 v17 = 1024;
      int MsgID = iAP2MsgGetMsgID((uint64_t)a1);
      __int16 v19 = 1024;
      int MsgLen = iAP2MsgGetMsgLen((uint64_t)a1);
      __int16 v21 = 2080;
      label = dispatch_queue_get_label(0LL);
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#Artwork File transfer ID sent callback fired! context=%p (type=%d) needDelete=%d msgID=%xh msgLen=%d currentDispatchQueue: %s",  (uint8_t *)&v11,  0x2Eu);
    }

    if (v4)
    {
      if (*(_DWORD *)(v4 + 12) == 2)
      {
        if (*(void *)v4)
        {
          uint64_t Feature = iap2_feature_getFeature(*(void *)v4, 0xEu);
          if (Feature) {
            _handleFileTransferIDSent( (uint64_t)@"#Artwork",  v4,  (unsigned __int8 *)(Feature + 64),  (uint64_t)_artworkFileTransferEndHandler);
          }
        }
      }
    }

    if (a2)
    {
      int v9 = (void *)a1[6];
      if (v9)
      {
        free(v9);
        a1[6] = 0LL;
      }

      uint64_t v10 = (void *)a1[3];
      if (v10) {
        free(v10);
      }
      free(a1);
    }
  }

uint64_t iap2_nowPlaying_playbackAttributesUpdateHandler(uint64_t result, const __CFDictionary *a2)
{
  if (result)
  {
    int v3 = (uint64_t *)result;
    uint64_t result = 0LL;
    if (a2)
    {
      if (*v3)
      {
        if (gLogObjects && gNumLogObjects >= 32)
        {
          uint64_t v4 = *(os_log_s **)(gLogObjects + 248);
        }

        else
        {
          uint64_t v4 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          uint64_t v5 = v3[1];
          *(_DWORD *)buf = 138412290;
          *(void *)id v41 = v5;
          _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Received playbackAttributes update for endpoint: %@",  buf,  0xCu);
        }

        uint64_t result = iap2_feature_getFeature((uint64_t)v3, 0xEu);
        if (result)
        {
          uint64_t v6 = result;
          if (gLogObjects && gNumLogObjects >= 32)
          {
            int v7 = *(os_log_s **)(gLogObjects + 248);
          }

          else
          {
            int v7 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
          {
            uint64_t v8 = v3[1];
            int v9 = *(unsigned __int8 *)(v6 + 83);
            *(_DWORD *)buf = 138412546;
            *(void *)id v41 = v8;
            *(_WORD *)&v41[8] = 1024;
            int v42 = v9;
            _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Received playbackAttributes update for endpoint: %@, autoChoosePBQListStartIndex=%d",  buf,  0x12u);
          }

          if (!*(_BYTE *)v6) {
            return 0LL;
          }
          if (!*(_BYTE *)(v6 + 40)) {
            goto LABEL_100;
          }
          if (gLogObjects && gNumLogObjects >= 32)
          {
            uint64_t v10 = *(os_log_s **)(gLogObjects + 248);
          }

          else
          {
            uint64_t v10 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Updating elapsed time timer...", buf, 2u);
          }

          int v11 = *(_DWORD *)(v6 + 24);
          int v38 = *(_DWORD *)(v6 + 36);
          int valuePtr = v11;
          uint64_t Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"Status");
          if (Value) {
            CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
          }
          if (gLogObjects && gNumLogObjects >= 32)
          {
            __int16 v13 = *(os_log_s **)(gLogObjects + 248);
          }

          else
          {
            __int16 v13 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
            iap2_nowPlaying_playbackAttributesUpdateHandler_cold_17();
          }
          if (gLogObjects && gNumLogObjects >= 32)
          {
            int v14 = *(os_log_s **)(gLogObjects + 248);
          }

          else
          {
            int v14 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
            iap2_nowPlaying_playbackAttributesUpdateHandler_cold_15();
          }
          __int16 v15 = (const __CFNumber *)CFDictionaryGetValue(a2, @"ElapsedTimeMS");
          if (v15) {
            CFNumberGetValue(v15, kCFNumberIntType, &v38);
          }
          if (gLogObjects && gNumLogObjects >= 32)
          {
            int v16 = *(os_log_s **)(gLogObjects + 248);
          }

          else
          {
            int v16 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
            iap2_nowPlaying_playbackAttributesUpdateHandler_cold_13();
          }
          if (gLogObjects && gNumLogObjects >= 32)
          {
            __int16 v17 = *(os_log_s **)(gLogObjects + 248);
          }

          else
          {
            __int16 v17 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
            iap2_nowPlaying_playbackAttributesUpdateHandler_cold_11();
          }
          if (valuePtr == *(_DWORD *)(v6 + 24) && v38 == *(_DWORD *)(v6 + 36)) {
            goto LABEL_100;
          }
          if ((valuePtr & 0xFFFFFFFD) != 0)
          {
            if (gLogObjects) {
              BOOL v18 = gNumLogObjects <= 31;
            }
            else {
              BOOL v18 = 1;
            }
            int v19 = !v18;
            if ((valuePtr - 3) > 1)
            {
              if (v19)
              {
                int v22 = *(os_log_s **)(gLogObjects + 248);
              }

              else
              {
                int v22 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
                iap2_nowPlaying_playbackAttributesUpdateHandler_cold_9(v22, v23, v24, v25, v26, v27, v28, v29);
              }
              if (*(_BYTE *)(v6 + 40))
              {
                *(_BYTE *)(v6 + 136) = 1;
                if (gLogObjects && gNumLogObjects >= 32)
                {
                  os_log_type_t v30 = *(os_log_s **)(gLogObjects + 248);
                }

                else
                {
                  os_log_type_t v30 = (os_log_s *)&_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }

                if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
                {
                  int v31 = *(unsigned __int8 *)(v6 + 136);
                  int v32 = *(unsigned __int8 *)(v6 + 137);
                  *(_DWORD *)buf = 67109376;
                  *(_DWORD *)id v41 = v31;
                  *(_WORD *)&v41[4] = 1024;
                  *(_DWORD *)&_BYTE v41[6] = v32;
                  _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_INFO,  "Start elapsed time timer! elapsedTimer: Enabled = %d, Running = %d",  buf,  0xEu);
                }

                _continueElapsedTimeTimer(v6);
              }

              goto LABEL_99;
            }

            if (v19)
            {
              int v20 = *(os_log_s **)(gLogObjects + 248);
            }

            else
            {
              int v20 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
              iap2_nowPlaying_playbackAttributesUpdateHandler_cold_6();
            }
          }

          else
          {
            if (gLogObjects && gNumLogObjects >= 32)
            {
              __int16 v21 = *(os_log_s **)(gLogObjects + 248);
            }

            else
            {
              __int16 v21 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
              iap2_nowPlaying_playbackAttributesUpdateHandler_cold_4();
            }
          }

          _pauseElapsedTimeTimer(v6);
LABEL_99:
          *(_DWORD *)(v6 + 24) = valuePtr;
          *(_DWORD *)(v6 + 36) = v38;
LABEL_100:
          char v33 = malloc(0x48uLL);
          id v34 = malloc(0xFFFFuLL);
          iAP2MsgInit((uint64_t)v33, 20481, (uint64_t)v34, 0xFFFF, (uint64_t)_playbackAttributesUpdateSentCB, 0LL);
          uint64_t v35 = iAP2MsgAddGroupParam((uint64_t)v33, 1);
          LOBYTE(valuePtr) = 0;
          if (_addplaybackAttributesToMessage((uint64_t)v33, (uint64_t)v35, v6, a2, &valuePtr, 0))
          {
          }

          else
          {
            if (gLogObjects && gNumLogObjects >= 32)
            {
              id v36 = *(os_log_s **)(gLogObjects + 248);
            }

            else
            {
              id v36 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315138;
              *(void *)id v41 = "iap2_nowPlaying_playbackAttributesUpdateHandler";
              _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "%s: no parameters added! cleaning up pOutMsg",  buf,  0xCu);
            }

            iAP2MsgCleanup((uint64_t)v33);
          }

          if (*(_BYTE *)(v6 + 83))
          {
            if (gLogObjects && gNumLogObjects >= 32)
            {
              uint64_t v37 = *(os_log_s **)(gLogObjects + 248);
            }

            else
            {
              uint64_t v37 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG)) {
              iap2_nowPlaying_playbackAttributesUpdateHandler_cold_1();
            }
            _checkMoveWindowAndRequestPBQList(0, *(_DWORD *)(v6 + 84), (uint64_t)v3, v6);
          }

          return 1LL;
        }
      }
    }
  }

  return result;
}

void _playbackAttributesUpdateSentCB(void *a1, int a2)
{
  if (a1)
  {
    uint64_t v4 = a1[6];
    if (v4)
    {
      uint64_t Feature = (_BYTE *)iap2_feature_getFeature(v4, 0xEu);
      if (Feature)
      {
        if (!*Feature)
        {
          uint64_t v8 = (os_log_s *)logObjectForModule_23();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            int v9 = 136315394;
            uint64_t v10 = "_playbackAttributesUpdateSentCB";
            __int16 v11 = 1024;
            int v12 = a2;
            _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s NowPlaying updates not started. NeedDelete:%d",  (uint8_t *)&v9,  0x12u);
          }
        }
      }
    }

    if (a2)
    {
      uint64_t v6 = (void *)a1[6];
      if (v6)
      {
        free(v6);
        a1[6] = 0LL;
      }

      int v7 = (void *)a1[3];
      if (v7) {
        free(v7);
      }
      free(a1);
    }
  }

uint64_t _addplaybackAttributesToMessage( uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, _BYTE *a5, int a6)
{
  int v69 = a6;
  uint64_t v71 = a2;
  if (gLogObjects && gNumLogObjects >= 32)
  {
    uint64_t v10 = *(os_log_s **)(gLogObjects + 248);
  }

  else
  {
    uint64_t v10 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    unsigned int valuePtr = 134219010;
    uint64_t v73 = obfuscatedPointer(a1);
    __int16 v74 = 2048;
    uint64_t v75 = obfuscatedPointer(v71);
    __int16 v76 = 2048;
    uint64_t v77 = obfuscatedPointer(a3);
    __int16 v78 = 1024;
    int v79 = v69;
    __int16 v80 = 2112;
    unsigned int v81 = a4;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "_addplaybackAttributesToMessage: pMessage=%p pGroupParam=%p pFeature=%p initialSend=%d playbackAttributes=%@",  (uint8_t *)&valuePtr,  0x30u);
  }

  LOWORD(v11) = 0;
  if (a1 && a3 && a4)
  {
    int v12 = *(const __CFArray **)(a3 + 16);
    if (!v12)
    {
      LOWORD(v11) = 0;
      return (unsigned __int16)v11;
    }

    uint64_t Count = CFArrayGetCount(v12);
    uint64_t v68 = &v50;
    uint64_t v14 = __chkstk_darwin(Count);
    int v16 = (const void **)((char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    if (v14) {
      memset((char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL), 170, v15);
    }
    v82.location = 0LL;
    v82.length = Count;
    CFArrayGetValues(*(CFArrayRef *)(a3 + 16), v82, v16);
    if (gLogObjects && gNumLogObjects >= 32)
    {
      __int16 v17 = *(os_log_s **)(gLogObjects + 248);
    }

    else
    {
      __int16 v17 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG);
    __int16 v51 = a5;
    uint64_t v70 = a3;
    if (!v18) {
      goto LABEL_35;
    }
    CFStringRef RawValuesString = CFArrayCreateRawValuesString(*(const __CFArray **)(a3 + 16), 0);
    if (gLogObjects && gNumLogObjects >= 32)
    {
      __int16 v21 = *(os_log_s **)(gLogObjects + 248);
    }

    else
    {
      __int16 v21 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
      _addplaybackAttributesToMessage_cold_3();
    }
    a5 = v51;
    if (RawValuesString) {
      CFRelease(RawValuesString);
    }
    if (gLogObjects && gNumLogObjects >= 32)
    {
      int v22 = *(os_log_s **)(gLogObjects + 248);
    }

    else
    {
      int v22 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      _addplaybackAttributesToMessage_cold_1();
      if (!a5) {
        goto LABEL_37;
      }
    }

    else
    {
LABEL_35:
      if (!a5)
      {
LABEL_37:
        if (Count >= 1)
        {
          int v11 = 0;
          uint64_t v67 = @"AppBundleID";
          uint64_t v66 = @"SetElapsedTimeAvailable";
          uint64_t v65 = @"PlaybackSpeed";
          uint64_t v64 = @"iTunesRadioStationMediaPlaylistPersistentID";
          uint64_t v63 = @"iTunesRadioStation";
          id v62 = @"iTunesRadioAd";
          id v61 = @"MediaLibraryUID";
          uint64_t v60 = @"AppName";
          uint64_t v59 = @"RepeatMode";
          uint64_t v58 = @"ShuffleMode";
          uint64_t v57 = @"QueueChapterIndex";
          uint64_t v56 = @"QueueCount";
          uint64_t v55 = @"QueueIndex";
          __int16 v54 = @"ElapsedTimeMS";
          __int16 v53 = @"Status";
          *(void *)&__int128 v19 = 67109120LL;
          __int128 v52 = v19;
          *(void *)&__int128 v19 = 134218240LL;
          __int128 v50 = v19;
          while (2)
          {
            uint64_t v24 = *v16++;
            unsigned __int16 v23 = (unsigned __int16)v24;
            uint64_t v25 = gLogObjects;
            int v26 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 32)
            {
              uint64_t v27 = *(os_log_s **)(gLogObjects + 248);
            }

            else
            {
              uint64_t v27 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                unsigned int valuePtr = v50;
                uint64_t v73 = v25;
                __int16 v74 = 1024;
                LODWORD(v75) = v26;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  (uint8_t *)&valuePtr,  0x12u);
                uint64_t v27 = (os_log_s *)&_os_log_default;
              }
            }

            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
            {
              unsigned int valuePtr = v52;
              LODWORD(v73) = v23;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEBUG,  "_addplaybackAttributesToMessage: paramID=%d",  (uint8_t *)&valuePtr,  8u);
            }

            switch(v23)
            {
              case 0u:
                uint64_t Value = (const __CFNumber *)CFDictionaryGetValue(a4, v53);
                uint64_t v29 = a1;
                uint64_t v30 = v71;
                __int16 v31 = 0;
                goto LABEL_63;
              case 1u:
                int v32 = (const __CFNumber *)CFDictionaryGetValue(a4, v54);
                unsigned int valuePtr = -1431655766;
                if (v32)
                {
                  if (CFNumberGetValue(v32, kCFNumberSInt32Type, &valuePtr))
                  {
                    if (iAP2MsgAddU32Param(a1, v71, 1, valuePtr))
                    {
                      ++v11;
                      if (v51) {
                        *__int16 v51 = 1;
                      }
                    }
                  }
                }

                goto LABEL_79;
              case 2u:
                char v33 = (const __CFNumber *)CFDictionaryGetValue(a4, v55);
                if (!v33) {
                  goto LABEL_79;
                }
                id v34 = v33;
                if (!iAP2MsgAddCFU32Param(a1, v71, 2, v33)) {
                  goto LABEL_79;
                }
                unsigned int valuePtr = 0;
                CFNumberGetValue(v34, kCFNumberSInt32Type, &valuePtr);
                *(_DWORD *)(v70 + 2_Block_object_dispose(va, 8) = valuePtr;
                goto LABEL_59;
              case 3u:
                uint64_t v35 = (const __CFNumber *)CFDictionaryGetValue(a4, v56);
                if (!v35) {
                  goto LABEL_79;
                }
                id v36 = v35;
                if (!iAP2MsgAddCFU32Param(a1, v71, 3, v35)) {
                  goto LABEL_79;
                }
                unsigned int valuePtr = 0;
                CFNumberGetValue(v36, kCFNumberSInt32Type, &valuePtr);
                *(_DWORD *)(v70 + 32) = valuePtr;
LABEL_59:
                ++v11;
                goto LABEL_79;
              case 4u:
                uint64_t v37 = (const __CFNumber *)CFDictionaryGetValue(a4, v57);
                uint64_t v38 = iAP2MsgAddCFU32Param(a1, v71, 4, v37);
                goto LABEL_77;
              case 5u:
                uint64_t Value = (const __CFNumber *)CFDictionaryGetValue(a4, v58);
                uint64_t v29 = a1;
                uint64_t v30 = v71;
                __int16 v31 = 5;
                goto LABEL_63;
              case 6u:
                uint64_t Value = (const __CFNumber *)CFDictionaryGetValue(a4, v59);
                uint64_t v29 = a1;
                uint64_t v30 = v71;
                __int16 v31 = 6;
LABEL_63:
                uint64_t v38 = (uint64_t)iAP2MsgAddCFU8Param(v29, v30, v31, Value);
                goto LABEL_77;
              case 7u:
                uint64_t v39 = (const __CFString *)CFDictionaryGetValue(a4, v60);
                uint64_t v40 = a1;
                uint64_t v41 = v71;
                __int16 v42 = 7;
                goto LABEL_76;
              case 8u:
                uint64_t v39 = (const __CFString *)CFDictionaryGetValue(a4, v61);
                uint64_t v40 = a1;
                uint64_t v41 = v71;
                __int16 v42 = 8;
                goto LABEL_76;
              case 9u:
                __int16 v43 = (const __CFBoolean *)CFDictionaryGetValue(a4, v62);
                uint64_t v44 = a1;
                uint64_t v45 = v71;
                __int16 v46 = 9;
                goto LABEL_71;
              case 0xAu:
                uint64_t v39 = (const __CFString *)CFDictionaryGetValue(a4, v63);
                uint64_t v40 = a1;
                uint64_t v41 = v71;
                __int16 v42 = 10;
                goto LABEL_76;
              case 0xBu:
                __int16 v47 = (const __CFNumber *)CFDictionaryGetValue(a4, v64);
                uint64_t v38 = (uint64_t)iAP2MsgAddCFU64Param(a1, v71, 11, v47);
                goto LABEL_77;
              case 0xCu:
                uint64_t v48 = (const __CFNumber *)CFDictionaryGetValue(a4, v65);
                uint64_t v38 = iAP2MsgAddCFU16Param(a1, v71, 12, v48);
                goto LABEL_77;
              case 0xDu:
                __int16 v43 = (const __CFBoolean *)CFDictionaryGetValue(a4, v66);
                uint64_t v44 = a1;
                uint64_t v45 = v71;
                __int16 v46 = 13;
LABEL_71:
                uint64_t v38 = (uint64_t)iAP2MsgAddCFBooleanParam(v44, v45, v46, v43);
                goto LABEL_77;
              case 0xEu:
                if (!v69 || !*(_BYTE *)(v70 + 82)) {
                  goto LABEL_79;
                }
                uint64_t v38 = (uint64_t)iAP2MsgAddU8Param(a1, v71, 14, 0);
LABEL_77:
                if (v38) {
                  ++v11;
                }
LABEL_79:
                if (!--Count) {
                  return (unsigned __int16)v11;
                }
                continue;
              case 0x10u:
                uint64_t v39 = (const __CFString *)CFDictionaryGetValue(a4, v67);
                uint64_t v40 = a1;
                uint64_t v41 = v71;
                __int16 v42 = 16;
LABEL_76:
                uint64_t v38 = (uint64_t)iAP2MsgAddCFStringParam(v40, v41, v42, v39);
                goto LABEL_77;
              default:
                goto LABEL_79;
            }
          }
        }

        LOWORD(v11) = 0;
        return (unsigned __int16)v11;
      }
    }

    *a5 = 0;
    goto LABEL_37;
  }

  return (unsigned __int16)v11;
}

void _checkMoveWindowAndRequestPBQList(int a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v22 = -1431655766;
  int started = _calculateStartIndex(a4, a2, *(_DWORD *)(a4 + 88), *(_DWORD *)(a4 + 28), *(_DWORD *)(a4 + 32), &v22);
  if (gLogObjects && gNumLogObjects >= 32)
  {
    int v9 = *(os_log_s **)(gLogObjects + 248);
  }

  else
  {
    int v9 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = *(void *)(a3 + 8);
    int v11 = *(unsigned __int8 *)(a4 + 83);
    int v12 = *(_DWORD *)(a4 + 84);
    int v13 = *(_DWORD *)(a4 + 88);
    int v14 = *(_DWORD *)(a4 + 28);
    int v15 = *(_DWORD *)(a4 + 32);
    *(_DWORD *)buf = 138414594;
    uint64_t v24 = v10;
    __int16 v25 = 1024;
    int v26 = a1;
    __int16 v27 = 1024;
    int v28 = v11;
    __int16 v29 = 1024;
    unsigned int v30 = a2;
    __int16 v31 = 1024;
    int v32 = v12;
    __int16 v33 = 1024;
    int v34 = v13;
    __int16 v35 = 1024;
    int v36 = v14;
    __int16 v37 = 1024;
    int v38 = v15;
    __int16 v39 = 1024;
    int v40 = started;
    __int16 v41 = 1024;
    unsigned int v42 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "_checkMoveWindowAndRequestPBQList: %@, forceListRequest=%d autoChoosePBQListStartIndex=%d startIndexOverride=%u st artIndex=%u contentSize=%u trackIndex=%u trackCount=%u -> newIndex=%u actualCount=%u",  buf,  0x42u);
  }

  if ((a1 & 1) != 0 || started != *(_DWORD *)(a4 + 84))
  {
    *(_DWORD *)(a4 + 84) = started;
    uint64_t v16 = *(void *)(a4 + 96);
    if (v16)
    {
      if (!a3 || (uint64_t v17 = *(void *)(a3 + 8)) == 0) {
        uint64_t v17 = 0LL;
      }
      platform_nowPlaying_cancelRequestPlaybackQueueListInfo(v17, v16);
      BOOL v18 = *(const void **)(a4 + 96);
      if (v18)
      {
        CFRelease(v18);
        *(void *)(a4 + 96) = 0LL;
      }
    }

    __int128 v19 = CFUUIDCreate(kCFAllocatorDefault);
    CFStringRef v20 = CFUUIDCreateString(kCFAllocatorDefault, v19);
    *(void *)(a4 + 96) = v20;
    if (!a3 || (uint64_t v21 = *(void *)(a3 + 8)) == 0) {
      uint64_t v21 = 0LL;
    }
    platform_nowPlaying_requestPlaybackQueueListInfo( v21,  (uint64_t)v20,  *(unsigned int *)(a4 + 84),  *(unsigned int *)(a4 + 88),  *(unsigned int *)(a4 + 92));
    if (v19) {
      CFRelease(v19);
    }
  }

uint64_t iap2_nowPlaying_playbackQueueListChangedHandler(uint64_t *a1, uint64_t a2)
{
  if (!a1 || !*a1) {
    return 0LL;
  }
  if (gLogObjects && gNumLogObjects >= 32)
  {
    uint64_t v4 = *(os_log_s **)(gLogObjects + 248);
  }

  else
  {
    uint64_t v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[1];
    int v14 = 138412546;
    uint64_t v15 = v5;
    __int16 v16 = 1024;
    BOOL v17 = a2 != 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Received playbackQueueListChanged for endpoint: %@, _dueToClientUpdate %d",  (uint8_t *)&v14,  0x12u);
  }

  uint64_t Feature = (_BYTE *)iap2_feature_getFeature((uint64_t)a1, 0xEu);
  if (!Feature) {
    return 0LL;
  }
  uint64_t v7 = (uint64_t)Feature;
  if (!*Feature) {
    return 0LL;
  }
  if (!Feature[80] && !Feature[81]) {
    return 1LL;
  }
  if (gLogObjects && gNumLogObjects >= 32)
  {
    uint64_t v8 = *(os_log_s **)(gLogObjects + 248);
  }

  else
  {
    uint64_t v8 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
    iap2_nowPlaying_playbackQueueListChangedHandler_cold_1();
  }
  _checkMoveWindowAndRequestPBQList(a2 != 0, *(_DWORD *)(v7 + 84), (uint64_t)a1, v7);
  int v9 = malloc(0x48uLL);
  uint64_t v10 = malloc(0xFFFFuLL);
  iAP2MsgInit((uint64_t)v9, 20481, (uint64_t)v10, 0xFFFF, (uint64_t)_playbackQueueListChangedSentCB, 0LL);
  uint64_t v11 = 1LL;
  int v12 = iAP2MsgAddGroupParam((uint64_t)v9, 1);
  iAP2MsgAddU8Param((uint64_t)v9, (uint64_t)v12, 14, 0);
  iap2_sessionControl_sendOutgoingMessageAndCallbackOnACK(a1, (uint64_t)v9);
  return v11;
}

void _playbackQueueListChangedSentCB(void *a1, int a2)
{
  if (a1)
  {
    uint64_t v4 = a1[6];
    if (v4)
    {
      uint64_t Feature = iap2_feature_getFeature(v4, 0xEu);
      if (Feature)
      {
        uint64_t v6 = Feature;
        if (!*(_BYTE *)(Feature + 80) && !*(_BYTE *)(Feature + 81))
        {
          int v9 = (os_log_s *)logObjectForModule_23();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            int v10 = *(unsigned __int8 *)(v6 + 80);
            int v11 = *(unsigned __int8 *)(v6 + 81);
            int v12 = 136315906;
            int v13 = "_playbackQueueListChangedSentCB";
            __int16 v14 = 1024;
            int v15 = a2;
            __int16 v16 = 1024;
            int v17 = v10;
            __int16 v18 = 1024;
            int v19 = v11;
            _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s NeedDelete:%d, supportsPBQListPIDs:%d, supportsPBQListMeta:%d",  (uint8_t *)&v12,  0x1Eu);
          }
        }
      }
    }

    if (a2)
    {
      uint64_t v7 = (void *)a1[6];
      if (v7)
      {
        free(v7);
        a1[6] = 0LL;
      }

      uint64_t v8 = (void *)a1[3];
      if (v8) {
        free(v8);
      }
      free(a1);
    }
  }

uint64_t iap2_nowPlaying_playbackQueueListInfoResponseHandler(uint64_t *a1, const __CFDictionary *a2)
{
  if (!a1) {
    return 0LL;
  }
  CFRange v2 = a1;
  if (!*a1) {
    return 0LL;
  }
  uint64_t v4 = &startLogsNotificationObservers;
  uint64_t v5 = &startLogsNotificationObservers;
  if (gLogObjects && gNumLogObjects >= 32)
  {
    uint64_t v6 = *(os_log_s **)(gLogObjects + 248);
  }

  else
  {
    uint64_t v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = v2[1];
    if (a2) {
      uint64_t Value = (const __CFString *)CFDictionaryGetValue(a2, @"RequestID");
    }
    else {
      uint64_t Value = @"(nil)";
    }
    *(_DWORD *)buf = 138412546;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = Value;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Received playbackQueueListInfoResponse for endpoint: %@, requestID: %@",  buf,  0x16u);
  }

  uint64_t Feature = (_BYTE *)iap2_feature_getFeature((uint64_t)v2, 0xEu);
  if (!Feature) {
    return 0LL;
  }
  if (!*Feature) {
    return 0LL;
  }
  uint64_t v10 = v2[4];
  if (!v10 || !*(void *)(v10 + 24)) {
    return 0LL;
  }
  unint64_t v129 = Feature;
  int v11 = (const __CFNumber *)CFDictionaryGetValue(a2, @"StartIndex");
  int v12 = (const __CFNumber *)CFDictionaryGetValue(a2, @"Count");
  int v13 = (const __CFNumber *)CFDictionaryGetValue(a2, @"NonLibrary");
  __int16 v14 = (const __CFNumber *)CFDictionaryGetValue(a2, @"Available");
  uint64_t valuePtr = 0LL;
  __int16 v130 = 0;
  if (!v14)
  {
    uint64_t v109 = (os_log_s *)logObjectForModule_23();
    if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR)) {
      iap2_nowPlaying_playbackQueueListInfoResponseHandler_cold_1();
    }
    return 0LL;
  }

  if (a2)
  {
    int v15 = v14;
    if (v11) {
      CFNumberGetValue(v11, kCFNumberIntType, (char *)&valuePtr + 4);
    }
    if (v12) {
      CFNumberGetValue(v12, kCFNumberIntType, &valuePtr);
    }
    if (v13) {
      CFNumberGetValue(v13, kCFNumberSInt8Type, (char *)&v130 + 1);
    }
    CFNumberGetValue(v15, kCFNumberSInt8Type, &v130);
    if (gLogObjects && gNumLogObjects >= 32)
    {
      __int16 v16 = *(os_log_s **)(gLogObjects + 248);
    }

    else
    {
      __int16 v16 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = HIDWORD(valuePtr);
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = valuePtr;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = HIBYTE(v130);
      *(_WORD *)&buf[20] = 1024;
      *(_DWORD *)&buf[22] = v130;
      int v17 = "#PlaybackQueueList queueListInfo exists, startIndex=%d count=%d nonLibrary=%d pbqListAvailable=%d";
LABEL_39:
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, v17, buf, 0x1Au);
    }
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 32)
    {
      __int16 v16 = *(os_log_s **)(gLogObjects + 248);
    }

    else
    {
      __int16 v16 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = HIDWORD(valuePtr);
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = valuePtr;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = HIBYTE(v130);
      *(_WORD *)&buf[20] = 1024;
      *(_DWORD *)&buf[22] = v130;
      int v17 = "#PlaybackQueueList queueListInfo doesn't exist, startIndex=%d count=%d nonLibrary=%d pbqListAvailable=%d";
      goto LABEL_39;
    }
  }

  __int16 v18 = CFDictionaryGetValue(a2, @"RequestID");
  if (!v18)
  {
    uint64_t v110 = (os_log_s *)logObjectForModule_23();
    if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR)) {
      iap2_nowPlaying_playbackQueueListInfoResponseHandler_cold_2();
    }
    return 0LL;
  }

  int v19 = v18;
  CFStringRef v20 = (const void *)*((void *)v129 + 12);
  if (!v20)
  {
    uint64_t v111 = (os_log_s *)logObjectForModule_23();
    if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR)) {
      iap2_nowPlaying_playbackQueueListInfoResponseHandler_cold_3();
    }
    return 0LL;
  }

  if (!CFEqual(v20, v19))
  {
    unsigned int v112 = (os_log_s *)logObjectForModule_23();
    if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR)) {
      iap2_nowPlaying_playbackQueueListInfoResponseHandler_cold_4();
    }
    return 0LL;
  }

  if (!v129[80] && !v129[81])
  {
    CFIndex v117 = (os_log_s *)logObjectForModule_23();
    if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR)) {
      iap2_nowPlaying_playbackQueueListInfoResponseHandler_cold_5();
    }
    return 0LL;
  }

  int SessionForService = iAP2LinkGetSessionForService(*(void *)(v2[4] + 24), 1);
  SessionInfo = iAP2LinkGetSessionInfo(*(unsigned __int8 **)(v2[4] + 24), SessionForService);
  unsigned int v22 = SessionInfo;
  if (SessionInfo)
  {
    BOOL v23 = v129[80] != 0;
    if (SessionInfo[2] >= 2u)
    {
      BOOL v24 = v129[81] != 0;
      int v25 = 1;
      goto LABEL_50;
    }
  }

  else
  {
    BOOL v23 = 0;
  }

  int v25 = 0;
  BOOL v24 = 0;
LABEL_50:
  int v124 = v129[82];
  int v26 = (const __CFArray *)CFDictionaryGetValue(a2, @"List");
  if (v24) {
    int v27 = 6;
  }
  else {
    int v27 = 0;
  }
  if (v23) {
    int v28 = 3;
  }
  else {
    int v28 = v27;
  }
  if (!v22)
  {
    uint64_t v113 = (os_log_s *)logObjectForModule_23();
    if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR)) {
      iap2_nowPlaying_playbackQueueListInfoResponseHandler_cold_6();
    }
    return 0LL;
  }

  __int16 v29 = v26;
  uint64_t v30 = (int)valuePtr;
  if (v26) {
    CFIndex Count = CFArrayGetCount(v26);
  }
  else {
    CFIndex Count = 0LL;
  }
  if (Count != v30)
  {
    uint64_t v114 = (os_log_s *)logObjectForModule_23();
    if (os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
    {
      int v115 = valuePtr;
      CFIndex v116 = (CFIndex)v29;
      if (v29) {
        CFIndex v116 = CFArrayGetCount(v29);
      }
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v115;
      *(_WORD *)&uint8_t buf[8] = 2048;
      *(void *)&buf[10] = v116;
      _os_log_error_impl( (void *)&_mh_execute_header,  v114,  OS_LOG_TYPE_ERROR,  "#PlaybackQueueList record count does not match! %d vs %ld",  buf,  0x12u);
    }

    return 0LL;
  }

  int length_4 = v25;
  if (gLogObjects && gNumLogObjects >= 32)
  {
    int v32 = *(os_log_s **)(gLogObjects + 248);
  }

  else
  {
    int v32 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&uint8_t buf[4] = HIBYTE(v130);
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v23;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&uint8_t buf[16] = v24;
    *(_WORD *)&buf[20] = 1024;
    *(_DWORD *)&buf[22] = valuePtr;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_INFO,  "#PlaybackQueueList nonLibrary=%d supportsPBQListPIDs=%d supportsPBQListMeta=%d recordCount=%d",  buf,  0x1Au);
  }

  if (HIBYTE(v130)) {
    BOOL v23 = 0;
  }
  __int16 v33 = v129;
  if (v23)
  {
    theArray = v29;
    unsigned int v34 = 8 * valuePtr;
    int v28 = 3;
LABEL_100:
    int v45 = v124;
    if (!v124 || (_BYTE)v130)
    {
      if (v34) {
        goto LABEL_103;
      }
LABEL_162:
      char v77 = 0;
      unsigned int lengtha = 0;
      __int16 v46 = 0LL;
      goto LABEL_167;
    }

LABEL_165:
    uint64_t v76 = 1LL;
    _sendPBQTransferTypeAndAvailability(v2, v28, length_4, 1, 0);
    return v76;
  }

  if (!v24)
  {
    if (gLogObjects && gNumLogObjects >= 32)
    {
      uint64_t v44 = *(os_log_s **)(gLogObjects + 248);
      int v45 = v124;
    }

    else
    {
      uint64_t v44 = (os_log_s *)&_os_log_default;
      int v45 = v124;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_INFO,  "#PlaybackQueueList Cannot send list, send empty list and availble=false",  buf,  2u);
    }

    LOBYTE(v130) = 0;
    __int16 v33 = v129;
    if (!v45) {
      goto LABEL_162;
    }
    goto LABEL_165;
  }

  theArray = v29;
  if ((int)valuePtr >= 1)
  {
    BOOL length = v23;
    CFIndex v35 = 0LL;
    unsigned int v34 = 22;
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v35);
      if (ValueAtIndex)
      {
        if (*v33) {
          break;
        }
      }

      int v40 = 0;
LABEL_94:
      v34 += v40;
      ++v35;
      __int16 v33 = v129;
      if (v35 >= (int)valuePtr)
      {
        int v28 = 6;
        uint64_t v5 = &startLogsNotificationObservers;
        uint64_t v4 = &startLogsNotificationObservers;
        BOOL v23 = length;
        goto LABEL_100;
      }
    }

    __int16 v37 = ValueAtIndex;
    uint64_t v38 = 0LL;
    unint64_t v39 = *((unsigned int *)v33 + 23);
    int v40 = 4;
    while (1)
    {
      if (((v39 >> v38) & 1) != 0)
      {
        if ((int)v38 > 11)
        {
          switch((int)v38)
          {
            case 12:
              __int16 v41 = v37;
              unsigned int v42 = @"Artist";
              goto LABEL_92;
            case 14:
              __int16 v41 = v37;
              unsigned int v42 = @"AlbumArtist";
              goto LABEL_92;
            case 16:
              __int16 v41 = v37;
              unsigned int v42 = @"Genre";
              goto LABEL_92;
            case 18:
              __int16 v41 = v37;
              unsigned int v42 = @"Composer";
              goto LABEL_92;
            default:
              goto LABEL_93;
          }

          goto LABEL_93;
        }

        switch((_DWORD)v38)
        {
          case 0:
            if (CFDictionaryGetValue(v37, @"PersistentID")) {
              v40 += 12;
            }
            break;
          case 1:
            __int16 v41 = v37;
            unsigned int v42 = @"Title";
            goto LABEL_92;
          case 6:
            __int16 v41 = v37;
            unsigned int v42 = @"AlbumTitle";
LABEL_92:
            __int16 v43 = (const __CFString *)CFDictionaryGetValue(v41, v42);
            v40 += _calculateStrParamSize(v43);
            break;
        }
      }

uint64_t *_sendPBQTransferTypeAndAvailability(uint64_t *result, int a2, int a3, int a4, int a5)
{
  if (!result) {
    return result;
  }
  uint64_t v5 = result;
  if (!*result) {
    return 0LL;
  }
  if (gLogObjects && gNumLogObjects >= 32)
  {
    uint64_t v10 = *(os_log_s **)(gLogObjects + 248);
  }

  else
  {
    uint64_t v10 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    int v11 = (const char *)v5[1];
    *(_DWORD *)buf = 138413058;
    unsigned int v22 = v11;
    __int16 v23 = 1024;
    int v24 = a2;
    __int16 v25 = 1024;
    LODWORD(v26[0]) = a3;
    WORD2(v26[0]) = 1024;
    *(_DWORD *)((char *)v26 + 6) = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "_sendPBQTransferTypeAndAvailability: %@, transferType=%d supportsEnhancedTransfer=%d requestedListAvailable=%d",  buf,  0x1Eu);
  }

  uint64_t result = (uint64_t *)iap2_feature_getFeature((uint64_t)v5, 0xEu);
  if (result)
  {
    int v12 = result;
    if (*(_BYTE *)result)
    {
      int v20 = a5;
      int v13 = a3;
      __int16 v14 = malloc(0x48uLL);
      int v15 = malloc(0xFFFFuLL);
      __int16 v16 = malloc(0x10uLL);
      *(void *)__int16 v16 = v5;
      v16[8] = *((_BYTE *)v12 + 121);
      *((_DWORD *)v16 + 3) = a2;
      if (gLogObjects && gNumLogObjects >= 32)
      {
        int v17 = *(os_log_s **)(gLogObjects + 248);
      }

      else
      {
        int v17 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = v5[1];
        *(_DWORD *)buf = 136315650;
        unsigned int v22 = "_sendPBQTransferTypeAndAvailability";
        __int16 v23 = 1024;
        int v24 = 2851;
        __int16 v25 = 2112;
        v26[0] = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "%s:%d - iAP2MsgInit with cleanupCB - _playbackQueueFileTransferIDSent endpointUUID: %@",  buf,  0x1Cu);
      }

      iAP2MsgInit((uint64_t)v14, 20481, (uint64_t)v15, 0xFFFF, (uint64_t)_playbackQueueFileTransferIDSent, (uint64_t)v16);
      int v19 = iAP2MsgAddGroupParam((uint64_t)v14, 1);
      if (!a4 || (iAP2MsgAddU8Param((uint64_t)v14, (uint64_t)v19, 14, v20), v20))
      {
        if (v13) {
          iAP2MsgAddVoidParam((uint64_t)v14, (uint64_t)v19, 17);
        }
        else {
          iAP2MsgAddU8Param((uint64_t)v14, (uint64_t)v19, 15, *((_BYTE *)v12 + 121));
        }
      }

      return (uint64_t *)iap2_sessionControl_sendOutgoingMessageAndCallbackOnACK(v5, (uint64_t)v14);
    }

    return 0LL;
  }

  return result;
}

void _playbackQueueFileTransferIDSent(void *a1, int a2)
{
  if (a1)
  {
    uint64_t v4 = a1[6];
    if (gLogObjects && gNumLogObjects >= 32)
    {
      uint64_t v5 = *(os_log_s **)(gLogObjects + 248);
    }

    else
    {
      uint64_t v5 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = obfuscatedPointer(v4);
      if (v4) {
        int v7 = *(_DWORD *)(v4 + 12);
      }
      else {
        int v7 = 0;
      }
      int v17 = 134219266;
      *(void *)uint64_t v18 = v6;
      *(_WORD *)&v18[8] = 1024;
      *(_DWORD *)int v19 = v7;
      *(_WORD *)&v19[4] = 1024;
      *(_DWORD *)&v19[6] = a2;
      __int16 v20 = 1024;
      int MsgID = iAP2MsgGetMsgID((uint64_t)a1);
      __int16 v22 = 1024;
      int MsgLen = iAP2MsgGetMsgLen((uint64_t)a1);
      __int16 v24 = 2080;
      label = dispatch_queue_get_label(0LL);
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#PlaybackQueueList File transfer ID sent callback fired! context=%p (type=%d) needDelete=%d msgID=%xh msgLen=%d currentDispatchQueue: %s",  (uint8_t *)&v17,  0x2Eu);
    }

    if (v4)
    {
      int v8 = *(_DWORD *)(v4 + 12);
      if (v8 == 6 || v8 == 3)
      {
        if (*(void *)v4)
        {
          uint64_t Feature = iap2_feature_getFeature(*(void *)v4, 0xEu);
          if (Feature) {
            _handleFileTransferIDSent( (uint64_t)@"#PlaybackQueueList",  v4,  (unsigned __int8 *)(Feature + 120),  (uint64_t)_playbackQueueFileTransferEndHandler);
          }
        }
      }
    }
  }

  if (a2)
  {
    if (gLogObjects && gNumLogObjects >= 32)
    {
      int v11 = *(os_log_s **)(gLogObjects + 248);
    }

    else
    {
      int v11 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      if (a1)
      {
        int v12 = iAP2MsgGetMsgID((uint64_t)a1);
        int v13 = iAP2MsgGetMsgLen((uint64_t)a1);
      }

      else
      {
        int v12 = 0;
        int v13 = 0;
      }

      __int16 v14 = dispatch_queue_get_label(0LL);
      int v17 = 67109634;
      *(_DWORD *)uint64_t v18 = v12;
      *(_WORD *)&v18[4] = 1024;
      *(_DWORD *)&v18[6] = v13;
      *(_WORD *)int v19 = 2080;
      *(void *)&v19[2] = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "PlaybackQueue FileTransfer ID Sent deleting msg! needDelete=True msgID=%xh msgLen=%d currentDispatchQueue: %s",  (uint8_t *)&v17,  0x18u);
    }

    if (a1)
    {
      int v15 = (void *)a1[6];
      if (v15)
      {
        free(v15);
        a1[6] = 0LL;
      }

      __int16 v16 = (void *)a1[3];
      if (v16) {
        free(v16);
      }
      free(a1);
    }
  }

uint64_t _calculateStartIndex( uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int *a6)
{
  if (a3 >= a5) {
    unsigned int v6 = a5;
  }
  else {
    unsigned int v6 = a3;
  }
  if (a3) {
    unsigned int v7 = a2;
  }
  else {
    unsigned int v7 = 0;
  }
  if (!a3) {
    unsigned int v6 = a5;
  }
  if (v7 >= a5 || *(_BYTE *)(a1 + 83) != 0)
  {
    unsigned int v9 = a4 - (v6 >> 1);
    if (a4 < v6 >> 1) {
      unsigned int v9 = 0;
    }
    unsigned int v10 = v9 - v7;
    if (v7 > v9) {
      unsigned int v10 = v7 - v9;
    }
    if (v10 > v6 >> 2) {
      unsigned int v7 = v9;
    }
    if (!*(_BYTE *)(a1 + 83)) {
      unsigned int v7 = v9;
    }
  }

  if (v7 + v6 <= a5) {
    uint64_t result = v7;
  }
  else {
    uint64_t result = a5 - v6;
  }
  if (a6)
  {
    *a6 = v6;
  }

  return result;
}

char *_createFeature_19(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  if (!*(void *)a1) {
    return 0LL;
  }
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2 || !*(void *)(v2 + 24)) {
    return 0LL;
  }
  int v3 = (char *)calloc(1uLL, 0x90uLL);
  uint64_t v4 = v3;
  if (v3)
  {
    *int v3 = 0;
    *((void *)v3 + 6) = 0LL;
    *((_WORD *)v3 + 40) = 0;
    v3[82] = 0;
    v3[136] = 0;
    *(_OWORD *)(v3 + _Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(v3 + 24) = 0u;
    v3[40] = 0;
    *(void *)(v3 + 92) = 0LL;
    *(void *)(v3 + 10_Block_object_dispose(va, 8) = 0LL;
    *(void *)(v3 + 100) = 0LL;
    uint64_t v5 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  *(dispatch_queue_t *)(a1 + 24));
    *((void *)v4 + 7) = v5;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 0x40000000LL;
    _DWORD v7[2] = ___createFeature_block_invoke_0;
    v7[3] = &__block_descriptor_tmp_15;
    v7[4] = a1;
    v7[5] = v4;
    dispatch_source_set_event_handler(v5, v7);
    dispatch_source_set_timer(*((dispatch_source_t *)v4 + 7), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
    dispatch_resume(*((dispatch_object_t *)v4 + 7));
    *((_WORD *)v4 + 32) = 0;
    v4[66] = 0;
    *((void *)v4 + 9) = 0LL;
    *((_WORD *)v4 + 60) = 0;
    v4[122] = 0;
    *((void *)v4 + 16) = 0LL;
    iAP2LinkRegisterEventCallback( *(void *)(*(void *)(a1 + 32) + 24LL),  1u,  (uint64_t)_nowPlayingiAP2LinkEventNotifyHandler);
    platform_nowPlaying_incrementUserCount();
  }

  return v4;
}

uint64_t _destroyFeature_19(void **a1, unint64_t a2)
{
  uint64_t result = 0LL;
  if (a1 && a2)
  {
    uint64_t v5 = (unsigned __int8 *)*a1;
    if (*a1)
    {
      unsigned int v6 = (dispatch_source_s *)*((void *)v5 + 7);
      if (v6) {
        dispatch_source_cancel(v6);
      }
      if (v5[64])
      {
        unint64_t TransferEntry = iap2_sessionFileTransfer_findTransferEntry(a2, v5[65]);
        if (TransferEntry)
        {
          uint64_t v8 = *(void *)(TransferEntry + 8);
          if (v8) {
            iAP2FileTransferCancel(v8);
          }
        }

        *((_WORD *)v5 + 32) = 0;
      }

      if (v5[120])
      {
        unint64_t v9 = iap2_sessionFileTransfer_findTransferEntry(a2, v5[121]);
        if (v9)
        {
          uint64_t v10 = *(void *)(v9 + 8);
          if (v10) {
            iAP2FileTransferCancel(v10);
          }
        }

        *((_WORD *)v5 + 60) = 0;
      }

      if (*v5) {
        _removeSubscribersForSubFeatures((uint64_t)v5);
      }
      platform_nowPlaying_decrementUserCount();
      int v11 = (const void *)*((void *)v5 + 1);
      if (v11)
      {
        CFRelease(v11);
        *((void *)v5 + 1) = 0LL;
      }

      int v12 = (const void *)*((void *)v5 + 2);
      if (v12)
      {
        CFRelease(v12);
        *((void *)v5 + 2) = 0LL;
      }

      int v13 = (dispatch_object_s *)*((void *)v5 + 7);
      if (v13)
      {
        dispatch_release(v13);
        *((void *)v5 + 7) = 0LL;
      }

      __int16 v14 = (const void *)*((void *)v5 + 9);
      if (v14)
      {
        CFRelease(v14);
        *((void *)v5 + 9) = 0LL;
      }

      v5[66] = 0;
      int v15 = (const void *)*((void *)v5 + 12);
      if (v15)
      {
        CFRelease(v15);
        *((void *)v5 + 12) = 0LL;
      }

      __int16 v16 = (const void *)*((void *)v5 + 13);
      if (v16)
      {
        CFRelease(v16);
        *((void *)v5 + 13) = 0LL;
      }

      int v17 = (const void *)*((void *)v5 + 16);
      if (v17)
      {
        CFRelease(v17);
        *((void *)v5 + 16) = 0LL;
      }

      v5[122] = 0;
      if (*a1)
      {
        free(*a1);
        *a1 = 0LL;
      }

      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t _checkIdentificationInfo_17(uint64_t a1)
{
  char v6 = 0;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&_checkIdentificationInfo_kMsgNowPlayingList, 4u, &v6);
  uint64_t v3 = v2;
  if (v6) {
    BOOL v4 = (_DWORD)v2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    iap2_features_createFeature(a1, 0xEu);
    iap2_identification_setIdentifiedForFeature(a1, 0xEu);
  }

  return v3;
}

void ___createFeature_block_invoke_0(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 32)
  {
    uint64_t v2 = *(os_log_s **)(gLogObjects + 248);
  }

  else
  {
    uint64_t v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    ___createFeature_block_invoke_cold_8();
  }
  BOOL v4 = *(uint64_t **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (gLogObjects && gNumLogObjects >= 32)
  {
    uint64_t v5 = *(os_log_s **)(gLogObjects + 248);
  }

  else
  {
    uint64_t v5 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    ___createFeature_block_invoke_cold_6((uint64_t)v4, v3, v5);
    if (!v4) {
      return;
    }
  }

  else if (!v4)
  {
    return;
  }

  if (v3)
  {
    *(_BYTE *)(v3 + 137) = 0;
    int CurrentUnixTimeMS = systemInfo_getCurrentUnixTimeMS();
    uint64_t v7 = *(void *)(v3 + 48);
    if (v7) {
      int v8 = CurrentUnixTimeMS - v7;
    }
    else {
      int v8 = 0;
    }
    if (gLogObjects && gNumLogObjects >= 32)
    {
      unint64_t v9 = *(os_log_s **)(gLogObjects + 248);
    }

    else
    {
      unint64_t v9 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      ___createFeature_block_invoke_cold_4();
    }
    if (*(_DWORD *)(v3 + 24) == 1) {
      *(_DWORD *)(v3 + 36) += v8;
    }
    if (*v4 && *(_BYTE *)v3 && *(_BYTE *)(v3 + 40))
    {
      if (gLogObjects && gNumLogObjects >= 32)
      {
        uint64_t v10 = *(os_log_s **)(gLogObjects + 248);
      }

      else
      {
        uint64_t v10 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
        ___createFeature_block_invoke_cold_2();
      }
      int v11 = malloc(0x48uLL);
      int v12 = malloc(0xFFFFuLL);
      iAP2MsgInit((uint64_t)v11, 20481, (uint64_t)v12, 0xFFFF, (uint64_t)_elapsedTimeSentCB, (uint64_t)v4);
      int v13 = iAP2MsgAddGroupParam((uint64_t)v11, 1);
      if (iAP2MsgAddU32Param((uint64_t)v11, (uint64_t)v13, 1, *(_DWORD *)(v3 + 36)))
      {
      }

      else
      {
        if (gLogObjects && gNumLogObjects >= 32)
        {
          __int16 v14 = *(os_log_s **)(gLogObjects + 248);
        }

        else
        {
          __int16 v14 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          int v15 = 136315138;
          __int16 v16 = "_sendElapsedTimeUpdate";
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%s: no parameters added! cleaning up pOutMsg",  (uint8_t *)&v15,  0xCu);
        }

        iAP2MsgCleanup((uint64_t)v11);
      }
    }
  }

float _nowPlayingiAP2LinkEventNotifyHandler(uint64_t a1, int a2, uint64_t a3)
{
  if (!a1 || a2 != 1) {
    return result;
  }
  if (a3) {
    uint64_t v5 = *(unsigned __int8 **)(a3 + 64);
  }
  else {
    uint64_t v5 = 0LL;
  }
  if (gLogObjects && gNumLogObjects >= 32)
  {
    char v6 = *(os_log_s **)(gLogObjects + 248);
  }

  else
  {
    char v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v15 = obfuscatedPointer(a3);
    if (a3)
    {
      uint64_t v17 = obfuscatedPointer(*(void *)(a3 + 64));
      int v16 = *(unsigned __int8 *)(a3 + 109);
      int v18 = *(_DWORD *)(a3 + 104);
    }

    else
    {
      int v16 = 0;
      uint64_t v17 = 0LL;
      int v18 = -1;
    }

    if (v5)
    {
      int v29 = *v5;
      int v30 = v5[1];
      int v28 = v5[2];
      int v31 = v5[3];
    }

    else
    {
      int v28 = -1;
      int v29 = -1;
      int v30 = -1;
      int v31 = -1;
    }

    int v42 = 134219776;
    *(void *)__int16 v43 = v15;
    *(_WORD *)&v43[8] = 2048;
    uint64_t v44 = v17;
    *(_WORD *)int v45 = 1024;
    *(_DWORD *)&v45[2] = v16;
    *(_WORD *)__int16 v46 = 1024;
    *(_DWORD *)&v46[2] = v18;
    __int16 v47 = 1024;
    int v48 = v29;
    __int16 v49 = 1024;
    int v50 = v30;
    __int16 v51 = 1024;
    int v52 = v28;
    __int16 v53 = 1024;
    int v54 = v31;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Got kiAP2LinkEventNotifyBuffXferStateChange fileXfer=%p(endCBUserInfo=%p ID=%u state=%d) context(needCancel=%d las tSeenSetupState=%d sentSetup=%d gotStart=%d)",  (uint8_t *)&v42,  0x3Au);
    if (!a3) {
      return result;
    }
  }

  else if (!a3)
  {
    return result;
  }

  if (!*(void *)(a3 + 64)) {
    return result;
  }
  unsigned int v8 = *(unsigned __int16 *)(a3 + 112);
  if (v8 > 6) {
    return result;
  }
  if (((1 << v8) & 0x4C) == 0) {
    return result;
  }
  uint64_t v9 = *(void *)(a1 + 176);
  if (!v9) {
    return result;
  }
  uint64_t v10 = *(void *)(v9 + 16);
  if (!v10 || !v5) {
    return result;
  }
  int v11 = *(_DWORD *)(a3 + 104);
  if (v11 != 2) {
    goto LABEL_31;
  }
  if (v5[2])
  {
    uint64_t v12 = gLogObjects;
    int v13 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 32)
    {
      __int16 v14 = *(os_log_s **)(gLogObjects + 248);
    }

    else
    {
      __int16 v14 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int v42 = 134218240;
        *(void *)__int16 v43 = v12;
        *(_WORD *)&v43[8] = 1024;
        LODWORD(v44) = v13;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  (uint8_t *)&v42,  0x12u);
        int v11 = *(_DWORD *)(a3 + 104);
        goto LABEL_28;
      }
    }

    int v11 = 2;
LABEL_28:
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      int v35 = *(unsigned __int8 *)(a3 + 109);
      int v36 = *(unsigned __int16 *)(a3 + 112);
      int v37 = v5[3];
      int v42 = 67110144;
      *(_DWORD *)__int16 v43 = v35;
      *(_WORD *)&v43[4] = 1024;
      *(_DWORD *)&v43[6] = v36;
      LOWORD(v44) = 1024;
      *(_DWORD *)((char *)&v44 + 2) = v11;
      HIWORD(v44) = 1024;
      *(_DWORD *)int v45 = v37;
      *(_WORD *)&v45[4] = 1024;
      *(_DWORD *)__int16 v46 = 1;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "fileXfer(ID=%u type=%d state=%d) context->gotStart %d->%d",  (uint8_t *)&v42,  0x20u);
      int v11 = *(_DWORD *)(a3 + 104);
    }

    v5[3] = 1;
LABEL_31:
    if (v11 == 3 && v5[1])
    {
      if (gLogObjects && gNumLogObjects >= 32)
      {
        int v19 = *(os_log_s **)(gLogObjects + 248);
      }

      else
      {
        int v19 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        int v38 = *(unsigned __int8 *)(a3 + 109);
        int v39 = *(unsigned __int16 *)(a3 + 112);
        int v40 = *(_DWORD *)(a3 + 104);
        int v41 = v5[2];
        int v42 = 67110144;
        *(_DWORD *)__int16 v43 = v38;
        *(_WORD *)&v43[4] = 1024;
        *(_DWORD *)&v43[6] = v39;
        LOWORD(v44) = 1024;
        *(_DWORD *)((char *)&v44 + 2) = v40;
        HIWORD(v44) = 1024;
        *(_DWORD *)int v45 = v41;
        *(_WORD *)&v45[4] = 1024;
        *(_DWORD *)__int16 v46 = 1;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "fileXfer(ID=%u type=%d state=%d) context->sentSetup %d->%d",  (uint8_t *)&v42,  0x20u);
      }

      _DWORD v5[2] = 1;
    }
  }

  if (gLogObjects && gNumLogObjects >= 32)
  {
    __int16 v20 = *(os_log_s **)(gLogObjects + 248);
  }

  else
  {
    __int16 v20 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG);
  int v22 = *(_DWORD *)(a3 + 104);
  if (v21)
  {
    int v32 = *(unsigned __int8 *)(a3 + 109);
    int v33 = *(unsigned __int16 *)(a3 + 112);
    int v34 = v5[1];
    int v42 = 67110144;
    *(_DWORD *)__int16 v43 = v32;
    *(_WORD *)&v43[4] = 1024;
    *(_DWORD *)&v43[6] = v33;
    LOWORD(v44) = 1024;
    *(_DWORD *)((char *)&v44 + 2) = v22;
    HIWORD(v44) = 1024;
    *(_DWORD *)int v45 = v34;
    *(_WORD *)&v45[4] = 1024;
    *(_DWORD *)__int16 v46 = v22 == 1;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "fileXfer(ID=%u type=%d state=%d) context->lastSeenSetupState %d->%d",  (uint8_t *)&v42,  0x20u);
    int v22 = *(_DWORD *)(a3 + 104);
  }

  v5[1] = v22 == 1;
  if (*v5)
  {
    if (gLogObjects && gNumLogObjects >= 32)
    {
      __int16 v23 = *(os_log_s **)(gLogObjects + 248);
    }

    else
    {
      __int16 v23 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      int v24 = *(unsigned __int8 *)(a3 + 109);
      int v25 = *(unsigned __int16 *)(a3 + 112);
      int v26 = *(_DWORD *)(a3 + 104);
      int v42 = 67109632;
      *(_DWORD *)__int16 v43 = v24;
      *(_WORD *)&v43[4] = 1024;
      *(_DWORD *)&v43[6] = v25;
      LOWORD(v44) = 1024;
      *(_DWORD *)((char *)&v44 + 2) = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "Cancel fileXfer(ID=%u type=%d state=%d)",  (uint8_t *)&v42,  0x14u);
    }

    unsigned __int8 *v5 = 0;
    iAP2FileTransferCancel(a3);
    iap2_sessionFileTransfer_removeTransferForFeature(v10, 14, a3);
    int v27 = *(void **)(a3 + 64);
    if (v27)
    {
      free(v27);
      *(void *)(a3 + 64) = 0LL;
    }

    iAP2FileTransferRelease(a3);
  }

  return result;
}

void _elapsedTimeSentCB(void *a1, int a2)
{
  if (a1)
  {
    uint64_t v4 = a1[6];
    if (v4)
    {
      uint64_t Feature = iap2_feature_getFeature(a1[6], 0xEu);
      if (Feature)
      {
        uint64_t v6 = Feature;
        if (*(_BYTE *)(Feature + 136))
        {
          if (gLogObjects && gNumLogObjects >= 32)
          {
            uint64_t v7 = *(os_log_s **)(gLogObjects + 248);
          }

          else
          {
            uint64_t v7 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v9 = *(void *)(v4 + 8);
            int v10 = *(unsigned __int8 *)(v6 + 136);
            int v11 = *(unsigned __int8 *)(v6 + 137);
            int v12 = 138413058;
            uint64_t v13 = v9;
            __int16 v14 = 1024;
            int v15 = a2;
            __int16 v16 = 1024;
            int v17 = v10;
            __int16 v18 = 1024;
            int v19 = v11;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "Elapsed time sent callback fired! %@ needDelete=%d, elapsedTimer: Enabled = %d, Running = %d",  (uint8_t *)&v12,  0x1Eu);
          }

          _continueElapsedTimeTimer(v6);
        }
      }
    }

    if (a2)
    {
      unsigned int v8 = (void *)a1[3];
      if (v8) {
        free(v8);
      }
      free(a1);
    }
  }

void _continueElapsedTimeTimer(uint64_t a1)
{
  if (!a1 || !*(_BYTE *)(a1 + 40)) {
    return;
  }
  if (gLogObjects && gNumLogObjects >= 32)
  {
    uint64_t v2 = *(os_log_s **)(gLogObjects + 248);
  }

  else
  {
    uint64_t v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    _continueElapsedTimeTimer_cold_5();
  }
  if (*(_BYTE *)(a1 + 136))
  {
    uint64_t v3 = gLogObjects;
    int v4 = gNumLogObjects;
    if (!*(_BYTE *)(a1 + 137))
    {
      if (gLogObjects && gNumLogObjects >= 32)
      {
        uint64_t v5 = *(os_log_s **)(gLogObjects + 248);
      }

      else
      {
        uint64_t v5 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
        _continueElapsedTimeTimer_cold_3(v5, v7, v8, v9, v10, v11, v12, v13);
      }
      __int16 v14 = *(dispatch_source_s **)(a1 + 56);
      dispatch_time_t v15 = dispatch_time(0LL, 450000000LL);
      dispatch_source_set_timer(v14, v15, 0xFFFFFFFFFFFFFFFFLL, 0LL);
      *(_BYTE *)(a1 + 137) = 1;
      return;
    }
  }

  else
  {
    uint64_t v3 = gLogObjects;
    int v4 = gNumLogObjects;
  }

  if (v3 && v4 >= 32)
  {
    uint64_t v6 = *(os_log_s **)(v3 + 248);
  }

  else
  {
    uint64_t v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    _continueElapsedTimeTimer_cold_1();
  }
}

void _removeSubscribersForSubFeatures(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(const __CFArray **)(a1 + 8);
    if (v2)
    {
      if (CFArrayGetCount(v2) >= 1) {
        platform_nowPlaying_removeSubscriber((uint64_t)@"MediaItemAttributes");
      }
      if (_isSubscribingForMediaItemAttribute(a1)) {
        platform_nowPlaying_removeSubscriber((uint64_t)@"MediaItemArtwork");
      }
    }

    uint64_t v3 = *(const __CFArray **)(a1 + 16);
    if (v3)
    {
      if (CFArrayGetCount(v3) >= 1) {
        platform_nowPlaying_removeSubscriber((uint64_t)@"PlaybackAttributes");
      }
    }
  }

uint64_t _startNowPlayingUpdatesHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0LL;
  if (!a1) {
    return result;
  }
  if (!a2) {
    return result;
  }
  uint64_t result = iap2_feature_getFeature(a1, 0xEu);
  if (!result) {
    return result;
  }
  uint64_t v5 = result;
  if (gLogObjects && gNumLogObjects >= 32)
  {
    uint64_t v6 = *(os_log_s **)(gLogObjects + 248);
  }

  else
  {
    uint64_t v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    _startNowPlayingUpdatesHandler_cold_25();
  }
  int v90 = (uint64_t *)a1;
  uint64_t v91 = v5;
  CFMutableSetRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 28LL, 0LL);
  theArray = CFArrayCreateMutable(kCFAllocatorDefault, 18LL, 0LL);
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
  if (!FirstParam)
  {
    uint64_t v93 = 0LL;
    char v92 = 0;
    char v94 = 0;
    int v96 = 0;
    int v10 = 0;
LABEL_82:
    _removeSubscribersForSubFeatures(v91);
    int v39 = (CFArrayRef *)(v91 + 8);
    int v38 = *(const void **)(v91 + 8);
    if (v38) {
      CFRelease(v38);
    }
    int v41 = (CFArrayRef *)(v91 + 16);
    int v40 = *(const void **)(v91 + 16);
    *(void *)(v91 + _Block_object_dispose(va, 8) = Mutable;
    if (v40) {
      CFRelease(v40);
    }
    *(void *)(v91 + 16) = theArray;
    *(_BYTE *)(v91 + 40) = v93 & 1;
    int v42 = BYTE4(v93) & 1;
    *(_BYTE *)(v91 + 80) = v42;
    *(_BYTE *)(v91 + 81) = v92 & 1;
    *(_BYTE *)(v91 + 82) = v94 & 1;
    *(_BYTE *)(v91 + 83) = 0;
    *(_DWORD *)(v91 + 84) = 0;
    *(_DWORD *)(v91 + 8_Block_object_dispose(va, 8) = v96;
    *(_DWORD *)(v91 + 92) = v10 | v42;
    *(_BYTE *)uint64_t v91 = 1;
    if (gLogObjects && gNumLogObjects >= 32)
    {
      __int16 v43 = *(os_log_s **)(gLogObjects + 248);
      uint64_t v44 = v90;
    }

    else
    {
      __int16 v43 = (os_log_s *)&_os_log_default;
      uint64_t v44 = v90;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG)) {
      _startNowPlayingUpdatesHandler_cold_14(v39, v43);
    }
    if (gLogObjects && gNumLogObjects >= 32)
    {
      int v45 = *(os_log_s **)(gLogObjects + 248);
    }

    else
    {
      int v45 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG)) {
      _startNowPlayingUpdatesHandler_cold_12(v41, v45);
    }
    if (!*v44 || (__int16 v46 = *v39) == 0LL)
    {
LABEL_186:
      if (*v41 && CFArrayGetCount(*v41) >= 1)
      {
        platform_nowPlaying_addSubscriber((uint64_t)@"PlaybackAttributes");
        platform_nowPlaying_triggerPlaybackAttributesUpdate();
        if (_isSubscribingForPlaybackAttribute(v91, 0xFu) || _isSubscribingForPlaybackAttribute(v91, 0x11u))
        {
          if (gLogObjects && gNumLogObjects >= 32)
          {
            int v83 = *(os_log_s **)(gLogObjects + 248);
          }

          else
          {
            int v83 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v83, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v83,  OS_LOG_TYPE_INFO,  "nowPlaying addSubscriber: PlaybackQueueList",  buf,  2u);
          }

          platform_nowPlaying_addSubscriber((uint64_t)@"PlaybackQueueList");
        }

        if (gLogObjects && gNumLogObjects >= 32)
        {
          uint64_t v84 = *(os_log_s **)(gLogObjects + 248);
        }

        else
        {
          uint64_t v84 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG)) {
          _startNowPlayingUpdatesHandler_cold_1();
        }
        _checkMoveWindowAndRequestPBQList(1, *(_DWORD *)(v91 + 84), (uint64_t)v44, v91);
      }

      __int16 v46 = *v39;
      if (!*v39) {
        return 1LL;
      }
      goto LABEL_207;
    }

    if (!*v41)
    {
LABEL_207:
      if (CFArrayGetCount(v46) >= 1)
      {
        platform_nowPlaying_addSubscriber((uint64_t)@"MediaItemAttributes");
        platform_nowPlaying_triggerMediaItemAttributesUpdate();
      }

      if (_isSubscribingForMediaItemAttribute(v91))
      {
        platform_nowPlaying_addSubscriber((uint64_t)@"MediaItemArtwork");
        platform_nowPlaying_triggerMediaItemArtworkUpdate();
      }

      return 1LL;
    }

    if (gLogObjects && gNumLogObjects >= 32)
    {
      __int16 v47 = *(os_log_s **)(gLogObjects + 248);
    }

    else
    {
      __int16 v47 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v48 = v44[1];
      *(_DWORD *)buf = 138412290;
      *(void *)int v101 = v48;
      _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "Sending initial now playing update for endpoint: %@",  buf,  0xCu);
    }

    __int16 v49 = (const __CFDictionary *)platform_nowPlaying_copyDefaultMediaItemAttributes();
    CFMutableArrayRef theArraya = (CFMutableArrayRef)platform_nowPlaying_copyDefaultPlaybackAttributes();
    int v50 = malloc(0x48uLL);
    __int16 v51 = malloc(0xFFFFuLL);
    if (gLogObjects && gNumLogObjects >= 32)
    {
      int v52 = *(os_log_s **)(gLogObjects + 248);
    }

    else
    {
      int v52 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v53 = v44[1];
      *(_DWORD *)buf = 136315650;
      *(void *)int v101 = "_sendInitialNowPlayingUpdate";
      *(_WORD *)&v101[8] = 1024;
      *(_DWORD *)int v102 = 1451;
      *(_WORD *)&v102[4] = 2112;
      uint64_t v103 = v53;
      _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "%s:%d - iAP2MsgInit with cleanupCB - _artworkFileTransferIDSent endpointUUID: %@",  buf,  0x1Cu);
    }

    iAP2MsgInit((uint64_t)v50, 20481, (uint64_t)v51, 0xFFFF, (uint64_t)_artworkFileTransferIDSent, 0LL);
    if (CFArrayGetCount(*v39) < 1)
    {
      __int128 v59 = 0LL;
      __int16 v60 = 0;
      id v61 = theArraya;
      goto LABEL_166;
    }

    int v54 = iAP2MsgAddGroupParam((uint64_t)v50, 0);
    __int16 v55 = _addMediaItemAttributesToMessage((uint64_t)v50, (uint64_t)v54, v91, v49);
    if (v50 && *v39 && _isSubscribingForMediaItemAttribute(v91))
    {
      __int16 v97 = v55;
      if (*(_BYTE *)(v91 + 64))
      {
        unint64_t TransferEntry = iap2_sessionFileTransfer_findTransferEntry( (unint64_t)v44,  *(unsigned __int8 *)(v91 + 65));
        if (TransferEntry)
        {
          uint64_t v57 = (unsigned __int8 *)TransferEntry;
          if (*(void *)(TransferEntry + 8))
          {
            uint64_t v95 = *(void *)(TransferEntry + 8);
            if (gLogObjects && gNumLogObjects >= 32)
            {
              int v58 = *(os_log_s **)(gLogObjects + 248);
            }

            else
            {
              int v58 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
                int v58 = (os_log_s *)&_os_log_default;
              }
            }

            if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
            {
              int v65 = *v57;
              uint64_t v66 = *((void *)v57 + 1);
              int v67 = *(unsigned __int8 *)(v66 + 109);
              int v68 = *((_DWORD *)v57 + 1);
              int v69 = *(unsigned __int16 *)(v66 + 112);
              LODWORD(v66) = *(_DWORD *)(v66 + 104);
              *(_DWORD *)buf = 67110400;
              *(_DWORD *)int v101 = 1685;
              *(_WORD *)&uint8_t v101[4] = 1024;
              *(_DWORD *)&v101[6] = v65;
              *(_WORD *)int v102 = 1024;
              *(_DWORD *)&v102[2] = v67;
              LOWORD(v103) = 1024;
              *(_DWORD *)((char *)&v103 + 2) = v68;
              HIWORD(v103) = 1024;
              int v104 = v69;
              __int16 v105 = 1024;
              int v106 = v66;
              _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_INFO,  "#Artwork %d: cancel previous transfer: id=%d(%d) type=%d(%d) state=%d",  buf,  0x26u);
            }

            _cancelPendingTransfer_0(v95);
          }
        }

        *(_WORD *)(v91 + 64) = 0;
        __int16 v55 = v97;
      }

      uint64_t v70 = v44[4];
      if (v70)
      {
        uint64_t v71 = *(void *)(v70 + 24);
        if (v71)
        {
          int SessionForService = iAP2LinkGetSessionForService(v71, 1);
          if (iAP2FileTransferAllocateBufferID(*(void *)(v44[4] + 24), SessionForService, (_BYTE *)(v91 + 65)))
          {
            *(_BYTE *)(v91 + 64) = 1;
            __int128 v59 = malloc(0x130uLL);
            if (v59)
            {
              iAP2FileTransferCreate( *(unsigned __int8 **)(v44[4] + 24),  SessionForService,  *(unsigned __int8 *)(v91 + 65),  0LL,  0LL,  0,  (uint64_t)v59);
              iAP2FileTransferTypeData((uint64_t)v59, 2, 0LL);
              if (iap2_sessionFileTransfer_addTransferForFeature((uint64_t)v44, 14, (uint64_t)v59, 0LL))
              {
                iAP2MsgSetCleanupCB((uint64_t)v50, (uint64_t)_artworkFileTransferIDSent);
                uint64_t v73 = malloc(0x10uLL);
                *(void *)uint64_t v73 = v44;
                char v74 = *(_BYTE *)(v91 + 65);
                v73[8] = v74;
                *((_DWORD *)v73 + 3) = 2;
                v50[6] = v73;
                __int16 v75 = iAP2MsgAddU8Param((uint64_t)v50, (uint64_t)v54, 26, v74) != 0LL;
                uint64_t v76 = *(const void **)(v91 + 72);
                if (v76)
                {
                  CFRelease(v76);
                  *(void *)(v91 + 72) = 0LL;
                }

                goto LABEL_164;
              }

              if (gLogObjects && gNumLogObjects >= 32)
              {
                __int16 v78 = *(os_log_s **)(gLogObjects + 248);
              }

              else
              {
                __int16 v78 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR)) {
                iap2_nowPlaying_mediaItemArtworkUpdateHandler_cold_2();
              }
              free(v59);
              __int128 v59 = 0LL;
            }

            __int16 v75 = 0;
LABEL_164:
            id v61 = theArraya;
            __int16 v55 = v97;
            goto LABEL_165;
          }

          if (gLogObjects && gNumLogObjects >= 32)
          {
            char v77 = *(os_log_s **)(gLogObjects + 248);
            __int16 v55 = v97;
          }

          else
          {
            char v77 = (os_log_s *)&_os_log_default;
            __int16 v55 = v97;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR)) {
            iap2_nowPlaying_mediaItemArtworkUpdateHandler_cold_4();
          }
        }
      }
    }

    __int128 v59 = 0LL;
    __int16 v75 = 0;
    id v61 = theArraya;
LABEL_165:
    __int16 v60 = v55 + v75;
LABEL_166:
    if (CFArrayGetCount(*v41) >= 1)
    {
      int v79 = iAP2MsgAddGroupParam((uint64_t)v50, 1);
      v60 += _addplaybackAttributesToMessage((uint64_t)v50, (uint64_t)v79, v91, v61, 0LL, 1);
    }

    if (v60)
    {
      char v80 = iap2_sessionControl_sendOutgoingMessageAndCallbackOnACK(v44, (uint64_t)v50);
      if (!v59 || (v80 & 1) != 0) {
        goto LABEL_182;
      }
      iAP2FileTransferCancel((uint64_t)v59);
      iap2_sessionFileTransfer_removeTransferForFeature((uint64_t)v44, 14, (uint64_t)v59);
      int v81 = (void *)v59[8];
      if (v81)
      {
        free(v81);
        v59[8] = 0LL;
      }

      iAP2FileTransferRelease((uint64_t)v59);
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 32)
      {
        uint64_t v82 = *(os_log_s **)(gLogObjects + 248);
      }

      else
      {
        uint64_t v82 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      id v61 = theArraya;
      if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(void *)int v101 = "_sendInitialNowPlayingUpdate";
        _os_log_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_DEFAULT,  "%s: no parameters added! cleaning up pOutMsg",  buf,  0xCu);
      }
    }

    iAP2MsgCleanup((uint64_t)v50);
LABEL_182:
    if (v49) {
      CFRelease(v49);
    }
    if (v61) {
      CFRelease(v61);
    }
    goto LABEL_186;
  }

  uint64_t v9 = (unsigned __int16 *)FirstParam;
  int v10 = 0;
  int v96 = 0;
  char v94 = 0;
  char v92 = 0;
  uint64_t v93 = 0LL;
  while (1)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)v9);
    uint64_t v12 = gLogObjects;
    int v13 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 32)
    {
      __int16 v14 = *(os_log_s **)(gLogObjects + 248);
    }

    else
    {
      __int16 v14 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)int v101 = v12;
        *(_WORD *)&v101[8] = 1024;
        *(_DWORD *)int v102 = v13;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
        __int16 v14 = (os_log_s *)&_os_log_default;
      }
    }

    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)int v101 = ParamID;
      _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "msgParamID: %d", buf, 8u);
    }

    if (ParamID == 2)
    {
      unint64_t v21 = iAP2MsgGetFirstParam(a2, v9);
      if (v21)
      {
        NextParam = (unsigned __int16 *)v21;
        while (1)
        {
          uint64_t v23 = iAP2MsgGetParamID((uint64_t)NextParam);
          uint64_t v24 = gLogObjects;
          int v25 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 32)
          {
            int v26 = *(os_log_s **)(gLogObjects + 248);
          }

          else
          {
            int v26 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)int v101 = v24;
              *(_WORD *)&v101[8] = 1024;
              *(_DWORD *)int v102 = v25;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              int v26 = (os_log_s *)&_os_log_default;
            }
          }

          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)int v101 = v23;
            _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "msgSubParamID: %d", buf, 8u);
          }

          if (!iAP2MsgIsDataVoid(NextParam)) {
            break;
          }
          v10 |= 1 << v23;
          NextParam = iAP2MsgGetNextParam(a2, v9, NextParam);
          if (!NextParam) {
            goto LABEL_79;
          }
        }

        if (gLogObjects && gNumLogObjects >= 32)
        {
          uint64_t v64 = *(os_log_s **)(gLogObjects + 248);
          uint64_t v63 = theArray;
        }

        else
        {
          uint64_t v64 = (os_log_s *)&_os_log_default;
          uint64_t v63 = theArray;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR)) {
          _startNowPlayingUpdatesHandler_cold_23(v23, a2);
        }
        goto LABEL_221;
      }

      goto LABEL_79;
    }

    if (ParamID == 1)
    {
      unint64_t v27 = iAP2MsgGetFirstParam(a2, v9);
      if (!v27) {
        goto LABEL_79;
      }
      int v28 = (unsigned __int16 *)v27;
      while (1)
      {
        uint64_t v29 = iAP2MsgGetParamID((uint64_t)v28);
        uint64_t v30 = gLogObjects;
        int v31 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 32)
        {
          int v32 = *(os_log_s **)(gLogObjects + 248);
        }

        else
        {
          int v32 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)int v101 = v30;
            *(_WORD *)&v101[8] = 1024;
            *(_DWORD *)int v102 = v31;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            int v32 = (os_log_s *)&_os_log_default;
          }
        }

        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)int v101 = v29;
          _os_log_debug_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "msgSubParamID: %d", buf, 8u);
        }

        if ((int)v29 > 14)
        {
          if ((_DWORD)v29 == 15)
          {
            if (!iAP2MsgIsDataVoid(v28))
            {
              int v88 = (os_log_s *)logObjectForModule_23();
              uint64_t v63 = theArray;
              if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR)) {
                _startNowPlayingUpdatesHandler_cold_20(a2);
              }
              goto LABEL_221;
            }

            BYTE4(v93) = 1;
          }

          else
          {
            if ((_DWORD)v29 != 17) {
              goto LABEL_69;
            }
            *(_DWORD *)buf = 0;
            int DataAsU32 = iAP2MsgGetDataAsU32(v28, buf);
            if (*(_DWORD *)buf)
            {
              int v86 = (os_log_s *)logObjectForModule_23();
              if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR)) {
                _startNowPlayingUpdatesHandler_cold_21(a2);
              }
              uint64_t v63 = theArray;
              goto LABEL_221;
            }

            int v96 = DataAsU32;
            char v92 = 1;
          }
        }

        else
        {
          if ((_DWORD)v29 != 1)
          {
            if ((_DWORD)v29 == 14)
            {
              if (!iAP2MsgIsDataVoid(v28))
              {
                int v85 = (os_log_s *)logObjectForModule_23();
                uint64_t v63 = theArray;
                if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR)) {
                  _startNowPlayingUpdatesHandler_cold_22(a2);
                }
                goto LABEL_221;
              }

              char v94 = 1;
              goto LABEL_70;
            }

LABEL_70:
        CFArrayAppendValue(theArray, (const void *)v29);
        int v28 = iAP2MsgGetNextParam(a2, v9, v28);
        if (!v28) {
          goto LABEL_79;
        }
      }
    }

    if (ParamID)
    {
      uint64_t v34 = gLogObjects;
      int v35 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 32)
      {
        int v36 = *(os_log_s **)(gLogObjects + 248);
      }

      else
      {
        int v36 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)int v101 = v34;
          *(_WORD *)&v101[8] = 1024;
          *(_DWORD *)int v102 = v35;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          int v36 = (os_log_s *)&_os_log_default;
        }
      }

      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        int MsgID = iAP2MsgGetMsgID(a2);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)int v101 = ParamID;
        *(_WORD *)&uint8_t v101[4] = 1024;
        *(_DWORD *)&v101[6] = MsgID;
        _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_INFO,  "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param",  buf,  0xEu);
      }

      goto LABEL_79;
    }

    unint64_t v15 = iAP2MsgGetFirstParam(a2, v9);
    if (v15) {
      break;
    }
LABEL_79:
    uint64_t v9 = iAP2MsgGetNextParam(a2, 0LL, v9);
    if (!v9) {
      goto LABEL_82;
    }
  }

  __int16 v16 = (unsigned __int16 *)v15;
  while (1)
  {
    uint64_t v17 = iAP2MsgGetParamID((uint64_t)v16);
    uint64_t v18 = gLogObjects;
    int v19 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 32)
    {
      __int16 v20 = *(os_log_s **)(gLogObjects + 248);
    }

    else
    {
      __int16 v20 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)int v101 = v18;
        *(_WORD *)&v101[8] = 1024;
        *(_DWORD *)int v102 = v19;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
        __int16 v20 = (os_log_s *)&_os_log_default;
      }
    }

    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)int v101 = v17;
      _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "msgSubParamID: %d", buf, 8u);
    }

    if (!iAP2MsgIsDataVoid(v16)) {
      break;
    }
    CFArrayAppendValue(Mutable, (const void *)v17);
    __int16 v16 = iAP2MsgGetNextParam(a2, v9, v16);
    if (!v16) {
      goto LABEL_79;
    }
  }

  if (gLogObjects && gNumLogObjects >= 32)
  {
    unint64_t v62 = *(os_log_s **)(gLogObjects + 248);
    uint64_t v63 = theArray;
  }

  else
  {
    unint64_t v62 = (os_log_s *)&_os_log_default;
    uint64_t v63 = theArray;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR)) {
    _startNowPlayingUpdatesHandler_cold_16(v17, a2);
  }
LABEL_221:
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v63) {
    CFRelease(v63);
  }
  return 0LL;
}

uint64_t _stopNowPlayingUpdatesHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0LL;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = iap2_feature_getFeature(a1, 0xEu);
      if (result)
      {
        uint64_t v4 = result;
        if (gLogObjects && gNumLogObjects >= 32)
        {
          uint64_t v5 = *(os_log_s **)(gLogObjects + 248);
        }

        else
        {
          uint64_t v5 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
          _stopNowPlayingUpdatesHandler_cold_1();
        }
        _pauseElapsedTimeTimer(v4);
        _removeSubscribersForSubFeatures(v4);
        *(_BYTE *)uint64_t v4 = 0;
        *(_BYTE *)(v4 + 40) = 0;
        *(_BYTE *)(v4 + 136) = 0;
        *(void *)(v4 + 80) = 0LL;
        *(void *)(v4 + 8_Block_object_dispose(va, 8) = 0LL;
        uint64_t v6 = *(const void **)(v4 + 8);
        if (v6)
        {
          CFRelease(v6);
          *(void *)(v4 + _Block_object_dispose(va, 8) = 0LL;
        }

        uint64_t v7 = *(const void **)(v4 + 16);
        if (v7)
        {
          CFRelease(v7);
          *(void *)(v4 + 16) = 0LL;
        }

        return 1LL;
      }
    }
  }

  return result;
}

uint64_t _setNowPlayingInfoHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 32)
  {
    uint64_t v4 = *(os_log_s **)(gLogObjects + 248);
  }

  else
  {
    uint64_t v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    _setNowPlayingInfoHandler_cold_8();
  }
  unint64_t FirstParam = 0LL;
  if (a1 && a2)
  {
    uint64_t Feature = iap2_feature_getFeature(a1, 0xEu);
    if (!Feature) {
      return 0LL;
    }
    uint64_t v7 = Feature;
    unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0LL);
    if (FirstParam)
    {
      uint64_t v25 = a1;
      char v8 = 0;
      unsigned int v9 = 0;
      char v10 = 0;
      unsigned int v11 = 0;
      char v12 = 0;
      unsigned int v13 = 0;
      while (1)
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
        switch(ParamID)
        {
          case 2:
            int v26 = -1431655766;
            unsigned int DataAsU32 = iAP2MsgGetDataAsU32(FirstParam, &v26);
            if (v26)
            {
              uint64_t v23 = (os_log_s *)logObjectForModule_23();
              if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
                iap2_mediaLibrary_playMediaLibraryItemsHandler_cold_4(a2);
              }
              return 0LL;
            }

            unsigned int v9 = DataAsU32;
            char v8 = 1;
            break;
          case 1:
            int v27 = -1431655766;
            unsigned int v17 = iAP2MsgGetDataAsU32(FirstParam, &v27);
            if (v27)
            {
              uint64_t v24 = (os_log_s *)logObjectForModule_23();
              if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
                iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_4(a2);
              }
              return 0LL;
            }

            unsigned int v11 = v17;
            char v10 = 1;
            break;
          case 0:
            int v28 = -1431655766;
            unsigned int v15 = iAP2MsgGetDataAsU32(FirstParam, &v28);
            if (v28)
            {
              int v22 = (os_log_s *)logObjectForModule_23();
              if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
                iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
              }
              return 0LL;
            }

            unsigned int v13 = v15;
            char v12 = 1;
            break;
        }

        unint64_t FirstParam = iAP2MsgGetNextParam(a2, 0LL, FirstParam);
        if (!FirstParam)
        {
          if ((v12 & 1) != 0)
          {
            uint64_t v18 = platform_nowPlaying_setPlaybackElapsedTime(v13);
            if ((v10 & 1) == 0)
            {
LABEL_28:
              unint64_t FirstParam = (unsigned __int16 *)v18;
              goto LABEL_30;
            }
          }

          else if ((v10 & 1) == 0)
          {
            unint64_t FirstParam = 0LL;
LABEL_30:
            if ((v8 & 1) != 0)
            {
              *(_BYTE *)(v7 + 83) = v9 == -1;
              if (gLogObjects && gNumLogObjects >= 32)
              {
                int v19 = *(os_log_s **)(gLogObjects + 248);
              }

              else
              {
                int v19 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
                _setNowPlayingInfoHandler_cold_3();
              }
              if (*(_BYTE *)(v7 + 81))
              {
                if (gLogObjects && gNumLogObjects >= 32)
                {
                  __int16 v20 = *(os_log_s **)(gLogObjects + 248);
                }

                else
                {
                  __int16 v20 = (os_log_s *)&_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }

                if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
                  _setNowPlayingInfoHandler_cold_1();
                }
                _checkMoveWindowAndRequestPBQList(0, v9, v25, v7);
                return 1LL;
              }
            }

            return (uint64_t)FirstParam;
          }

          uint64_t v18 = platform_nowPlaying_setPlaybackQueueIndex(v11);
          goto LABEL_28;
        }
      }
    }
  }

  return (uint64_t)FirstParam;
}

BOOL _isSubscribingForPlaybackAttribute(BOOL result, unsigned int a2)
{
  if (result)
  {
    uint64_t v2 = *(const __CFArray **)(result + 16);
    if (v2)
    {
      v4.BOOL length = CFArrayGetCount(*(CFArrayRef *)(result + 16));
      v4.location = 0LL;
      return CFArrayContainsValue(v2, v4, (const void *)a2) != 0;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

void _pauseElapsedTimeTimer(uint64_t a1)
{
  if (a1)
  {
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 56), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
    *(_WORD *)(a1 + 136) = 0;
    if (gLogObjects && gNumLogObjects >= 32)
    {
      uint64_t v2 = *(os_log_s **)(gLogObjects + 248);
    }

    else
    {
      uint64_t v2 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      int v3 = *(unsigned __int8 *)(a1 + 136);
      int v4 = *(unsigned __int8 *)(a1 + 137);
      v5[0] = 67109376;
      v5[1] = v3;
      __int16 v6 = 1024;
      int v7 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "Pause elapsed time timer! elapsedTimer: Enabled = %d, Running = %d",  (uint8_t *)v5,  0xEu);
    }
  }

void _handleFileTransferIDSent(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  if (a2 && a3)
  {
    if (gLogObjects && gNumLogObjects >= 32)
    {
      char v8 = *(os_log_s **)(gLogObjects + 248);
    }

    else
    {
      char v8 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      int v9 = *(unsigned __int8 *)(a2 + 8);
      int v10 = *(_DWORD *)(a2 + 12);
      int v11 = a3[1];
      int v12 = *a3;
      int v13 = a3[2];
      *(_DWORD *)buf = 138544642;
      uint64_t v34 = a1;
      __int16 v35 = 1024;
      *(_DWORD *)int v36 = v9;
      *(_WORD *)&void v36[4] = 1024;
      *(_DWORD *)&v36[6] = v10;
      *(_WORD *)int v37 = 1024;
      *(_DWORD *)&v37[2] = v11;
      *(_WORD *)int v38 = 1024;
      *(_DWORD *)&v38[2] = v12;
      LOWORD(v39) = 1024;
      *(_DWORD *)((char *)&v39 + 2) = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%{public}@ File transfer ID sent callback fired! context(ID=%u type=%u) currentTransferInfo(ID=%u valid=%d type=%u)",  buf,  0x2Au);
    }

    if (!a3[2] || *(_DWORD *)(a2 + 12) == a3[2])
    {
      unint64_t v14 = *(void *)a2;
      if (*(void *)a2)
      {
        if (iap2_feature_getFeature(*(void *)a2, 0xEu))
        {
          int v15 = *(char *)(a2 + 8);
          if (v15 < 0)
          {
            if (*a3)
            {
              if (a3[1] == v15)
              {
                unint64_t TransferEntry = iap2_sessionFileTransfer_findTransferEntry(v14, *(unsigned __int8 *)(a2 + 8));
                if (TransferEntry)
                {
                  uint64_t v17 = *(void *)(TransferEntry + 8);
                  if (v17)
                  {
                    if (*(_DWORD *)(v17 + 104))
                    {
                      if (gLogObjects && gNumLogObjects >= 32)
                      {
                        uint64_t v18 = *(os_log_s **)(gLogObjects + 248);
                      }

                      else
                      {
                        uint64_t v18 = (os_log_s *)&_os_log_default;
                        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                          platform_connectionInfo_configStreamCategoryListReady_cold_1();
                        }
                      }

                      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
                      {
                        int v22 = *(unsigned __int8 *)(v17 + 109);
                        int v23 = *(_DWORD *)(v17 + 104);
                        *(_DWORD *)buf = 138544130;
                        uint64_t v34 = a1;
                        __int16 v35 = 2048;
                        *(void *)int v36 = v17;
                        *(_WORD *)&v36[8] = 1024;
                        *(_DWORD *)int v37 = v22;
                        *(_WORD *)&v37[4] = 1024;
                        *(_DWORD *)int v38 = v23;
                        _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "%{public}@ ignore starting transfer in non-idle state, transfer (%p id=%d state=%d)",  buf,  0x22u);
                      }
                    }

                    else
                    {
                      int v19 = (const __CFData *)*((void *)a3 + 1);
                      if (v19)
                      {
                        BytePtr = CFDataGetBytePtr(v19);
                        unsigned int Length = CFDataGetLength(*((CFDataRef *)a3 + 1));
                        if (a3[2] == 6)
                        {
                          BytePtr += 6;
                          Length -= 6;
                        }

                        unsigned int v31 = Length;
                        uint64_t v32 = (uint64_t)BytePtr;
                      }

                      else
                      {
                        unsigned int v31 = 0;
                        uint64_t v32 = 0LL;
                      }

                      if (gLogObjects && gNumLogObjects >= 32)
                      {
                        uint64_t v24 = *(os_log_s **)(gLogObjects + 248);
                      }

                      else
                      {
                        uint64_t v24 = (os_log_s *)&_os_log_default;
                        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                          platform_connectionInfo_configStreamCategoryListReady_cold_1();
                        }
                      }

                      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
                      {
                        int v25 = *(unsigned __int8 *)(v17 + 109);
                        int v26 = *(_DWORD *)(v17 + 104);
                        uint64_t v27 = obfuscatedPointer(v32);
                        *(_DWORD *)buf = 138544642;
                        uint64_t v34 = a1;
                        __int16 v35 = 2048;
                        *(void *)int v36 = v17;
                        *(_WORD *)&v36[8] = 1024;
                        *(_DWORD *)int v37 = v25;
                        *(_WORD *)&v37[4] = 1024;
                        *(_DWORD *)int v38 = v26;
                        *(_WORD *)&v38[4] = 2048;
                        uint64_t v39 = v27;
                        __int16 v40 = 1024;
                        unsigned int v41 = v31;
                        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "%{public}@ start transfer (%p id=%d state=%d) pBuffer=%p bufferLen=%u",  buf,  0x32u);
                      }

                      int v28 = malloc(4uLL);
                      *int v28 = 0;
                      if (gLogObjects && gNumLogObjects >= 32)
                      {
                        uint64_t v29 = *(os_log_s **)(gLogObjects + 248);
                      }

                      else
                      {
                        uint64_t v29 = (os_log_s *)&_os_log_default;
                        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                          platform_connectionInfo_configStreamCategoryListReady_cold_1();
                        }
                      }

                      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
                        _handleFileTransferIDSent_cold_3();
                      }
                      if ((iAP2FileTransferStart(v17, v32, v31, v31, a4, (uint64_t)v28, 0, 0) & 1) == 0)
                      {
                        if (gLogObjects && gNumLogObjects >= 32)
                        {
                          uint64_t v30 = *(os_log_s **)(gLogObjects + 248);
                        }

                        else
                        {
                          uint64_t v30 = (os_log_s *)&_os_log_default;
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                            platform_connectionInfo_configStreamCategoryListReady_cold_1();
                          }
                        }

                        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
                          _handleFileTransferIDSent_cold_1();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

uint64_t _artworkFileTransferEndHandler(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v2 = (_DWORD *)result;
    if (!*(void *)result) {
      return 0LL;
    }
    if (gLogObjects && gNumLogObjects >= 32)
    {
      int v4 = *(os_log_s **)(gLogObjects + 248);
    }

    else
    {
      int v4 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v5 = v2[26];
      v7[0] = 67109120;
      v7[1] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "#Artwork File transfer end callback fired! state: %d",  (uint8_t *)v7,  8u);
    }

    uint64_t v6 = *(void *)(*(void *)v2 + 176LL);
    if (v6)
    {
      uint64_t result = *(void *)(v6 + 16);
      if (result)
      {
        uint64_t result = iap2_feature_getFeature(result, 0xEu);
        if (result) {
          return _handleFileTransferEnd((uint64_t)@"#Artwork", (uint64_t)v2, (unsigned __int8 *)(result + 64), a2);
        }
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t _handleFileTransferEnd(uint64_t a1, uint64_t a2, unsigned __int8 *a3, void *a4)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  if (!a3 || !*(void *)a2) {
    return v5;
  }
  if (gLogObjects && gNumLogObjects >= 32)
  {
    int v9 = *(os_log_s **)(gLogObjects + 248);
  }

  else
  {
    int v9 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    int v10 = *(_DWORD *)(a2 + 104);
    int v11 = *(unsigned __int8 *)(a2 + 109);
    uint64_t v12 = *(void *)(a2 + 32);
    int v13 = a3[1];
    int v14 = *a3;
    int v15 = a3[2];
    *(_DWORD *)buf = 138544898;
    uint64_t v32 = a1;
    __int16 v33 = 1024;
    *(_DWORD *)uint64_t v34 = v10;
    *(_WORD *)&v34[4] = 1024;
    *(_DWORD *)&v34[6] = v11;
    *(_WORD *)__int16 v35 = 2048;
    *(void *)&v35[2] = v12;
    __int16 v36 = 1024;
    int v37 = v13;
    __int16 v38 = 1024;
    int v39 = v14;
    __int16 v40 = 1024;
    int v41 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%{public}@ File transfer end callback fired! fileXfer(state=%d bufferID=%u size=%llu) currentTransferInfo(transfer ID=%u valid=%d type=%d)",  buf,  0x34u);
  }

  int v16 = *(_DWORD *)(a2 + 104);
  if (v16 != 5)
  {
    if (v16 != 4)
    {
      if (gLogObjects && gNumLogObjects >= 32)
      {
        unint64_t v21 = *(os_log_s **)(gLogObjects + 248);
      }

      else
      {
        unint64_t v21 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        _handleFileTransferEnd_cold_1();
      }
      return 0LL;
    }

uint64_t _calculateStrParamSize(const __CFString *a1)
{
  if (!a1) {
    return 0LL;
  }
  CStringFromCFString = createCStringFromCFString(a1, 0x8000100u);
  if (!CStringFromCFString) {
    return 5LL;
  }
  uint64_t v2 = CStringFromCFString;
  uint64_t v3 = strlen(CStringFromCFString) + 5;
  free(v2);
  return v3;
}

uint64_t _playbackQueueFileTransferEndHandler(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v2 = (_DWORD *)result;
    if (!*(void *)result) {
      return 0LL;
    }
    if (gLogObjects && gNumLogObjects >= 32)
    {
      int v4 = *(os_log_s **)(gLogObjects + 248);
    }

    else
    {
      int v4 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = v2[26];
      v7[0] = 67109120;
      v7[1] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#PlaybackQueueList File transfer end callback fired! state: %d",  (uint8_t *)v7,  8u);
    }

    uint64_t v6 = *(void *)(*(void *)v2 + 176LL);
    if (v6)
    {
      uint64_t result = *(void *)(v6 + 16);
      if (result)
      {
        uint64_t result = iap2_feature_getFeature(result, 0xEu);
        if (result) {
          return _handleFileTransferEnd( (uint64_t)@"#PlaybackQueueList",  (uint64_t)v2,  (unsigned __int8 *)(result + 120),  a2);
        }
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_15_1(uint64_t a1, uint64_t a2)
{
  return iAP2MsgGetMsgID(a2);
}

CFIndex OUTLINED_FUNCTION_21(CFArrayRef *a1)
{
  return CFArrayGetCount(*a1);
}

void __iAP2FileTransferDataSentCB(uint64_t *a1, uint64_t **a2)
{
  char v4 = *((_BYTE *)a2 + 111);
  LOBYTE(v5) = v4;
  if ((_iAP2LogEnableMask & 4) != 0)
  {
    uint64_t v6 = gLogObjects;
    int v7 = gNumLogObjects;
    if (gLogObjects) {
      BOOL v8 = gNumLogObjects < 20;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8)
    {
      int v9 = (os_log_s *)&_os_log_default;
      unsigned int v5 = *((unsigned __int8 *)a2 + 111);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int v24 = 134218240;
        int v25 = (const char *)v6;
        __int16 v26 = 1024;
        int v27 = v7;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  (uint8_t *)&v24,  0x12u);
        unsigned int v5 = *((unsigned __int8 *)a2 + 111);
      }
    }

    else
    {
      int v9 = *(os_log_s **)(gLogObjects + 152);
      unsigned int v5 = *((unsigned __int8 *)a2 + 111);
    }

    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      int v17 = *((unsigned __int8 *)a2 + 109);
      int v18 = *((_DWORD *)a2 + 26);
      int v19 = *a2;
      uint64_t v20 = **a2;
      int v21 = *((unsigned __int16 *)*a2 + 96);
      int v24 = 136317698;
      int v25 = "__iAP2FileTransferDataSentCB";
      __int16 v26 = 1024;
      int v27 = 475;
      __int16 v28 = 2048;
      *(void *)int v29 = a1;
      *(_WORD *)&v29[8] = 2048;
      int v30 = a2;
      __int16 v31 = 1024;
      int v32 = v17;
      __int16 v33 = 1024;
      int v34 = v18;
      __int16 v35 = 1024;
      int v36 = (v5 >> 3) & 1;
      __int16 v37 = 1024;
      int v38 = 0;
      __int16 v39 = 2048;
      __int16 v40 = v19;
      __int16 v41 = 2048;
      uint64_t v42 = v20;
      __int16 v43 = 1024;
      int v44 = v21;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "%s:%d link %p, fileXfer %p->(buffID %u, state %u, bDataSendQueued %d->%d, link %p->(linkBuffer %p, maxOutPacketSize %d))",  (uint8_t *)&v24,  0x58u);
      LOBYTE(v5) = *((_BYTE *)a2 + 111);
    }
  }

  *((_BYTE *)a2 + 111) = v5 & 0xF7;
  if (a1 && *a2 == a1)
  {
    unsigned int v11 = *((_DWORD *)a2 + 26);
    if (v11 > 9) {
      goto LABEL_38;
    }
    if (((1 << v11) & 0x32A) != 0) {
      return;
    }
    if (v11 == 2)
    {
      __iAP2FileTransferSendBufferPacket(a2, 0LL, 0LL);
      return;
    }

    if (v11 == 4)
    {
      if ((v4 & 8) != 0)
      {
        uint64_t v12 = a2[7];
        if (v12) {
          ((void (*)(uint64_t **, uint64_t *))v12)(a2, a2[8]);
        }
      }
    }

    else
    {
LABEL_38:
      if ((_iAP2LogEnableMask & 1) != 0)
      {
        int v22 = (os_log_s *)logObjectForModule_24();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          int v23 = *((_DWORD *)a2 + 26);
          int v24 = 136315650;
          int v25 = "__iAP2FileTransferDataSentCB";
          __int16 v26 = 1024;
          int v27 = 520;
          __int16 v28 = 1024;
          *(_DWORD *)int v29 = v23;
          int v14 = "ERROR: %s:%d Data send callback with invalid state(%u)!";
          int v15 = v22;
          uint32_t v16 = 24;
          goto LABEL_30;
        }
      }
    }
  }

  else if ((_iAP2LogEnableMask & 1) != 0)
  {
    if (!gLogObjects || gNumLogObjects < 20)
    {
      int v13 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      int v13 = *(os_log_s **)(gLogObjects + 152);
    }

    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v24 = 136315906;
      int v25 = "__iAP2FileTransferDataSentCB";
      __int16 v26 = 1024;
      int v27 = 527;
      __int16 v28 = 1024;
      *(_DWORD *)int v29 = (unsigned __int16)a1;
      *(_WORD *)&v29[4] = 1024;
      *(_DWORD *)&v29[6] = (unsigned __int16)a2;
      int v14 = "ERROR: %s:%d Data send callback with invalid link(%hx)/context(%hx) combo";
      int v15 = v13;
      uint32_t v16 = 30;
LABEL_30:
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v24, v16);
    }
  }

void *logObjectForModule_24()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 20;
  }
  else {
    BOOL v0 = 1;
  }
  if (!v0) {
    return *(void **)(gLogObjects + 152);
  }
  unsigned int v1 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v1;
}

uint64_t __iAP2FileTransferSendBufferPacket(uint64_t a1, int a2, int a3)
{
  if ((_iAP2LogEnableMask & 4) == 0) {
    goto LABEL_10;
  }
  if (!gLogObjects || gNumLogObjects < 20)
  {
    int v7 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    int v7 = *(os_log_s **)(gLogObjects + 152);
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    int v10 = *(unsigned __int8 *)(a1 + 108);
    int v11 = *(unsigned __int8 *)(a1 + 109);
    int v12 = *(unsigned __int16 *)(a1 + 16);
    uint64_t v13 = *(void *)(a1 + 40);
    int v14 = *(unsigned __int16 *)(a1 + 8);
    *(_DWORD *)uint64_t v91 = 136317442;
    *(void *)&v91[4] = "__iAP2FileTransferSendBufferPacket";
    *(_WORD *)&v91[12] = 1024;
    *(_DWORD *)&v91[14] = 154;
    *(_WORD *)&v91[18] = 1024;
    *(_DWORD *)&v91[20] = (unsigned __int16)a1;
    *(_WORD *)&v91[24] = 1024;
    *(_DWORD *)char v92 = v10;
    *(_WORD *)&_DWORD v92[4] = 1024;
    *(_DWORD *)&v92[6] = v11;
    *(_WORD *)&v92[10] = 1024;
    *(_DWORD *)&v92[12] = a2;
    *(_WORD *)&v92[16] = 1024;
    *(_DWORD *)&v92[18] = a3;
    *(_WORD *)&v92[22] = 1024;
    *(_DWORD *)&v92[24] = v12;
    *(_WORD *)&v92[28] = 2048;
    *(void *)&v92[30] = v13;
    *(_WORD *)&v92[38] = 1024;
    *(_DWORD *)&v92[40] = v14;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s:%d fileXfer=%hx session=%d buffID=%d pckType=%d controlOnly=%d pBuffer=%hx buffSize=%lu curPos=%hx",  v91,  0x46u);
    if (a3) {
      goto LABEL_11;
    }
  }

  else
  {
LABEL_10:
    if (a3)
    {
LABEL_11:
      v91[0] = *(_BYTE *)(a1 + 109);
      v91[1] = a2;
      return iAP2LinkQueueSendData(*(void *)a1, v91, 2u, *(unsigned __int8 *)(a1 + 108), 0LL, 0LL, 0LL, 0);
    }
  }

  int v15 = *(_DWORD *)(a1 + 104);
  if (v15 != 5)
  {
    if (v15 != 2)
    {
      if (v15 != 1) {
        return 0LL;
      }
      *(void *)&v92[46] = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v16 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&v92[32] = v16;
      *(_OWORD *)&v92[16] = v16;
      *(_OWORD *)char v92 = v16;
      *(_OWORD *)&_BYTE v91[10] = v16;
      unsigned int v17 = *(unsigned __int8 *)(a1 + 110);
      v91[0] = *(_BYTE *)(a1 + 109);
      v91[1] = 4;
      *(void *)&v91[2] = bswap64(*(void *)(a1 + 32));
      if (v17 < 2)
      {
        if ((_iAP2LogEnableMask & 4) != 0)
        {
          if (gLogObjects && gNumLogObjects >= 20)
          {
            __int16 v37 = *(os_log_s **)(gLogObjects + 152);
          }

          else
          {
            __int16 v37 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG)) {
            __iAP2FileTransferSendBufferPacket_cold_4();
          }
        }

        unsigned int v19 = 10;
      }

      else
      {
        uint64_t v18 = *(unsigned __int16 *)(a1 + 120);
        unsigned int v19 = v18 + 12;
        unsigned int v20 = *(unsigned __int16 *)(a1 + 112);
        *(_WORD *)&_BYTE v91[10] = __rev16(v20);
        switch(v20)
        {
          case 1u:
            __memcpy_chk(&v91[12], a1 + 128, v18, 68LL);
            if ((_iAP2LogEnableMask & 4) == 0) {
              break;
            }
            int v50 = (os_log_s *)logObjectForModule_24();
            if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
              break;
            }
            int v51 = *(unsigned __int8 *)(a1 + 108);
            int v52 = *(unsigned __int8 *)(a1 + 110);
            int v53 = *(unsigned __int16 *)(a1 + 112);
            int v54 = *(unsigned __int16 *)(a1 + 120);
            *(_DWORD *)buf = 136316674;
            char v94 = "__iAP2FileTransferSendBufferPacket";
            __int16 v95 = 1024;
            int v96 = 223;
            __int16 v97 = 1024;
            unsigned int v98 = v18 + 12;
            __int16 v99 = 1024;
            int v100 = v51;
            __int16 v101 = 1024;
            int v102 = v52;
            __int16 v103 = 1024;
            int v104 = v53;
            __int16 v105 = 1024;
            int v106 = v54;
            __int16 v55 = "%s:%d Send Buffer Setup, V2 callUUID, payloadLen=%u fileXfer: session=%u version=%u type=%u typeDataLen=%u";
            goto LABEL_111;
          case 4u:
          case 5u:
          case 7u:
            if (v18 >= 9)
            {
              *(void *)&v91[12] = bswap64(*(void *)(a1 + 128));
              __memcpy_chk(&v91[20], a1 + 136, v18 - 8, 60LL);
              BOOL v21 = 1;
            }

            else
            {
              BOOL v21 = 0;
            }

            if ((_iAP2LogEnableMask & 4) != 0)
            {
              uint64_t v48 = (os_log_s *)logObjectForModule_24();
              if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
              {
                int v82 = *(unsigned __int8 *)(a1 + 108);
                int v83 = *(unsigned __int8 *)(a1 + 110);
                int v84 = *(unsigned __int16 *)(a1 + 112);
                int v85 = *(unsigned __int16 *)(a1 + 120);
                *(_DWORD *)buf = 136316674;
                char v94 = "__iAP2FileTransferSendBufferPacket";
                __int16 v95 = 1024;
                int v96 = 212;
                __int16 v97 = 1024;
                unsigned int v98 = v18 + 12;
                __int16 v99 = 1024;
                int v100 = v82;
                __int16 v101 = 1024;
                int v102 = v83;
                __int16 v103 = 1024;
                int v104 = v84;
                __int16 v105 = 1024;
                int v106 = v85;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEBUG,  "%s:%d Send Buffer Setup, V2 pid+libUID, payloadLen=%u fileXfer: session=%u version=%u type=%u typeDataLen=%u",  buf,  0x30u);
              }
            }

            if ((_iAP2LogEnableMask & 1) != 0)
            {
              if (gLogObjects && gNumLogObjects >= 20)
              {
                __int16 v49 = *(os_log_s **)(gLogObjects + 152);
              }

              else
              {
                __int16 v49 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
              {
                int v64 = *(unsigned __int8 *)(a1 + 108);
                int v65 = *(unsigned __int8 *)(a1 + 110);
                int v66 = *(unsigned __int16 *)(a1 + 112);
                int v67 = *(unsigned __int16 *)(a1 + 120);
                *(_DWORD *)buf = 136316674;
                char v94 = "__iAP2FileTransferSendBufferPacket";
                __int16 v95 = 1024;
                int v96 = 283;
                __int16 v97 = 1024;
                unsigned int v98 = v19;
                __int16 v99 = 1024;
                int v100 = v64;
                __int16 v101 = 1024;
                int v102 = v65;
                __int16 v103 = 1024;
                int v104 = v66;
                __int16 v105 = 1024;
                int v106 = v67;
                _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "ERROR: %s:%d Send Buffer Setup FAILED, invalid setup data, payloadLen=%u fileXfer: session=%u version= %u type=%u typeDataLen=%u",  buf,  0x30u);
              }
            }

            return v21;
          case 8u:
            __memcpy_chk(&v91[12], a1 + 128, v18, 68LL);
            if ((_iAP2LogEnableMask & 4) == 0) {
              break;
            }
            int v50 = (os_log_s *)logObjectForModule_24();
            if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
              break;
            }
            int v60 = *(unsigned __int8 *)(a1 + 108);
            int v61 = *(unsigned __int8 *)(a1 + 110);
            int v62 = *(unsigned __int16 *)(a1 + 112);
            int v63 = *(unsigned __int16 *)(a1 + 120);
            *(_DWORD *)buf = 136316674;
            char v94 = "__iAP2FileTransferSendBufferPacket";
            __int16 v95 = 1024;
            int v96 = 234;
            __int16 v97 = 1024;
            unsigned int v98 = v18 + 12;
            __int16 v99 = 1024;
            int v100 = v60;
            __int16 v101 = 1024;
            int v102 = v61;
            __int16 v103 = 1024;
            int v104 = v62;
            __int16 v105 = 1024;
            int v106 = v63;
            __int16 v55 = "%s:%d Send Buffer Setup, V2 appIcon, payloadLen=%u fileXfer: session=%u version=%u type=%u typeDataLen=%u";
            goto LABEL_111;
          default:
            if ((_iAP2LogEnableMask & 4) == 0) {
              break;
            }
            int v50 = (os_log_s *)logObjectForModule_24();
            if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
              break;
            }
            int v56 = *(unsigned __int8 *)(a1 + 108);
            int v57 = *(unsigned __int8 *)(a1 + 110);
            int v58 = *(unsigned __int16 *)(a1 + 112);
            int v59 = *(unsigned __int16 *)(a1 + 120);
            *(_DWORD *)buf = 136316674;
            char v94 = "__iAP2FileTransferSendBufferPacket";
            __int16 v95 = 1024;
            int v96 = 243;
            __int16 v97 = 1024;
            unsigned int v98 = v18 + 12;
            __int16 v99 = 1024;
            int v100 = v56;
            __int16 v101 = 1024;
            int v102 = v57;
            __int16 v103 = 1024;
            int v104 = v58;
            __int16 v105 = 1024;
            int v106 = v59;
            __int16 v55 = "%s:%d Send Buffer Setup, V2 No typeData, payloadLen=%u fileXfer: session=%u version=%u type=%u typeDataLen=%u";
LABEL_111:
            _os_log_debug_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, v55, buf, 0x30u);
            break;
        }
      }

      if ((_iAP2LogEnableMask & 4) != 0)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          __int16 v47 = *(os_log_s **)(gLogObjects + 152);
        }

        else
        {
          __int16 v47 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
        {
          int v68 = *(unsigned __int8 *)(a1 + 108);
          int v69 = *(unsigned __int8 *)(a1 + 110);
          int v70 = *(unsigned __int16 *)(a1 + 112);
          int v71 = *(unsigned __int16 *)(a1 + 120);
          *(_DWORD *)buf = 136316674;
          char v94 = "__iAP2FileTransferSendBufferPacket";
          __int16 v95 = 1024;
          int v96 = 260;
          __int16 v97 = 1024;
          unsigned int v98 = v19;
          __int16 v99 = 1024;
          int v100 = v68;
          __int16 v101 = 1024;
          int v102 = v69;
          __int16 v103 = 1024;
          int v104 = v70;
          __int16 v105 = 1024;
          int v106 = v71;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEBUG,  "%s:%d Send Buffer Setup, QueueSendData payloadLen=%u fileXfer: session=%u version=%u type=%u typeDataLen=%u",  buf,  0x30u);
        }
      }

      *(_DWORD *)(a1 + 104) = 3;
      iAP2LinkEventNotify(*(void *)a1, 1LL, a1);
      ++*(_BYTE *)(a1 + 296);
      return iAP2LinkQueueSendData( *(void *)a1,  v91,  v19,  *(unsigned __int8 *)(a1 + 108),  a1,  (uint64_t)__iAP2FileTransferDataSentCB,  __iAP2FileTransferContextCleanupCB,  0);
    }

    uint64_t v23 = *(void *)(a1 + 40);
    uint64_t v24 = *(void *)(a1 + 48);
    uint64_t v25 = v23 - v24;
    unsigned int MaxPayloadSize = iAP2LinkGetMaxPayloadSize(*(void *)a1, 0LL);
    unint64_t v27 = v23 - v24 + 2;
    if (v27 >= MaxPayloadSize) {
      int v28 = MaxPayloadSize;
    }
    else {
      int v28 = v27;
    }
    *(_DWORD *)buf = v28;
    EmptySendPacket = iAP2PacketCreateEmptySendPacket(*(void *)a1, (unsigned int *)buf);
    uint64_t v31 = *((void *)EmptySendPacket + 8);
    int v30 = (_BYTE *)*((void *)EmptySendPacket + 9);
    __int16 v32 = iAP2LinkCurPckHdrSize(*(void *)a1);
    __int16 v33 = iAP2LinkCurPckChksumSize(*(void *)a1);
    *(_BYTE *)(v31 + 4) = 64;
    *(_BYTE *)(v31 + 7) = *(_BYTE *)(a1 + 108);
    unsigned __int16 v34 = v33 + v32 + *(_WORD *)buf;
    *((_WORD *)EmptySendPacket + 27) = v34;
    *((_DWORD *)EmptySendPacket + 11) = v34;
    *int v30 = *(_BYTE *)(a1 + 109);
    v30[1] = a2;
    if (!*(void *)(a1 + 24)) {
      v30[1] = a2 | 0x80;
    }
    if (v27 <= iAP2LinkGetMaxPayloadSize(*(void *)a1, (uint64_t)EmptySendPacket))
    {
      unint64_t v38 = *(void *)(a1 + 32);
      if (*(void *)(a1 + 24) + v25 >= v38 && (v38 || (*(_BYTE *)(a1 + 111) & 2) == 0))
      {
        v30[1] |= 0x40u;
        if (v23 != v24) {
          memcpy(v30 + 2, *(const void **)(a1 + 8), v23 - v24);
        }
        if ((_iAP2LogEnableMask & 4) != 0)
        {
          __int16 v41 = (os_log_s *)logObjectForModule_24();
          if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
          {
            int v86 = *(unsigned __int8 *)(a1 + 108);
            uint64_t v87 = *(void *)(a1 + 24);
            uint64_t v88 = *(void *)(a1 + 32);
            int v89 = *(unsigned __int16 *)(a1 + 56);
            int v90 = *(unsigned __int16 *)(a1 + 64);
            *(_DWORD *)uint64_t v91 = 136317442;
            *(void *)&v91[4] = "__iAP2FileTransferSendBufferPacket";
            *(_WORD *)&v91[12] = 1024;
            *(_DWORD *)&v91[14] = 425;
            *(_WORD *)&v91[18] = 1024;
            *(_DWORD *)&v91[20] = (unsigned __int16)v30;
            *(_WORD *)&v91[24] = 2048;
            *(void *)char v92 = *(unsigned int *)buf;
            *(_WORD *)&v92[8] = 1024;
            *(_DWORD *)&v92[10] = (unsigned __int16)a1;
            *(_WORD *)&v92[14] = 1024;
            *(_DWORD *)&v92[16] = v86;
            *(_WORD *)&v92[20] = 2048;
            *(void *)&v92[22] = v87;
            *(_WORD *)&v92[30] = 2048;
            *(void *)&v92[32] = v88;
            *(_WORD *)&v92[40] = 1024;
            *(_DWORD *)&v92[42] = v89;
            *(_WORD *)&v92[46] = 1024;
            *(_DWORD *)&v92[48] = v90;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEBUG,  "%s:%d Send Buffer Data (final), QueueSendData payload=%hx payloadLen=%lu fileXfer=%hx session=%u sentSize= %lu totalSize=%lu (endCB=%hx userInfo=%hx)",  v91,  0x4Eu);
          }
        }

        *(_DWORD *)(a1 + 292) = iAP2TimeGetCurTimeMs();
        uint64_t v42 = *(void (**)(uint64_t, uint64_t, void))(a1 + 88);
        if (v42) {
          v42(a1, 4LL, *(void *)(a1 + 96));
        }
        ++*(_BYTE *)(a1 + 296);
        if (iAP2LinkQueueSendDataPacket( *(void *)a1,  (uint64_t *)EmptySendPacket,  *(unsigned __int8 *)(a1 + 108),  a1,  (uint64_t)__iAP2FileTransferDataSentCB,  __iAP2FileTransferContextCleanupCB,  0))
        {
          *(_BYTE *)(a1 + 111) |= 8u;
          uint64_t v43 = *(void *)a1;
          *(void *)(a1 + 8) += v25;
          *(void *)(a1 + 24) += v25;
          *(void *)(a1 + 48) += v25;
          *(_DWORD *)(a1 + 104) = 5;
          uint64_t v8 = 1LL;
          iAP2LinkEventNotify(v43, 1LL, a1);
          int v44 = *(void (**)(uint64_t, void))(a1 + 56);
          if (v44) {
            v44(a1, *(void *)(a1 + 64));
          }
          goto LABEL_101;
        }

        if ((_iAP2LogEnableMask & 1) == 0) {
          goto LABEL_100;
        }
        int v45 = (os_log_s *)logObjectForModule_24();
        if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_100;
        }
        *(_DWORD *)uint64_t v91 = 136315650;
        *(void *)&v91[4] = "__iAP2FileTransferSendBufferPacket";
        *(_WORD *)&v91[12] = 1024;
        *(_DWORD *)&v91[14] = 454;
        *(_WORD *)&v91[18] = 1024;
        *(_DWORD *)&v91[20] = (unsigned __int16)EmptySendPacket;
        __int16 v46 = "ERROR: %s:%d Failed to iAP2LinkQueueSendDataPAcket, delete packet=%hx";
        goto LABEL_99;
      }

      memcpy(v30 + 2, *(const void **)(a1 + 8), v23 - v24);
      if ((_iAP2LogEnableMask & 4) != 0)
      {
        __int16 v39 = (os_log_s *)logObjectForModule_24();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
        {
          int v76 = *(unsigned __int8 *)(a1 + 108);
          int v77 = *(unsigned __int8 *)(a1 + 109);
          uint64_t v78 = *(void *)(a1 + 24);
          uint64_t v79 = *(void *)(a1 + 32);
          int v80 = *(unsigned __int16 *)(a1 + 56);
          int v81 = *(unsigned __int16 *)(a1 + 64);
          *(_DWORD *)uint64_t v91 = 136317698;
          *(void *)&v91[4] = "__iAP2FileTransferSendBufferPacket";
          *(_WORD *)&v91[12] = 1024;
          *(_DWORD *)&v91[14] = 382;
          *(_WORD *)&v91[18] = 1024;
          *(_DWORD *)&v91[20] = (unsigned __int16)v30;
          *(_WORD *)&v91[24] = 2048;
          *(void *)char v92 = *(unsigned int *)buf;
          *(_WORD *)&v92[8] = 1024;
          *(_DWORD *)&v92[10] = (unsigned __int16)a1;
          *(_WORD *)&v92[14] = 1024;
          *(_DWORD *)&v92[16] = v76;
          *(_WORD *)&v92[20] = 1024;
          *(_DWORD *)&v92[22] = v77;
          *(_WORD *)&v92[26] = 2048;
          *(void *)&v92[28] = v78;
          *(_WORD *)&v92[36] = 2048;
          *(void *)&v92[38] = v79;
          *(_WORD *)&v92[46] = 1024;
          *(_DWORD *)&v92[48] = v80;
          *(_WORD *)&v92[52] = 1024;
          *(_DWORD *)&v92[54] = v81;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEBUG,  "%s:%d Send Buffer Data (end current buffer), QueueSendData payload=%hx payloadLen=%lu fileXfer=%hx session=% u buffID=%u sentSize=%lu totalSize=%lu (endCB=%hx userInfo=%hx)",  v91,  0x54u);
        }
      }

      ++*(_BYTE *)(a1 + 296);
      if (iAP2LinkQueueSendDataPacket( *(void *)a1,  (uint64_t *)EmptySendPacket,  *(unsigned __int8 *)(a1 + 108),  a1,  (uint64_t)__iAP2FileTransferDataSentCB,  __iAP2FileTransferContextCleanupCB,  0))
      {
        *(_BYTE *)(a1 + 111) |= 8u;
        *(void *)(a1 + 8) += v25;
        *(void *)(a1 + 24) += v25;
        __int16 v40 = *(void (**)(uint64_t, void))(a1 + 56);
        *(void *)(a1 + 48) += v25;
        if (v40) {
          v40(a1, *(void *)(a1 + 64));
        }
        goto LABEL_68;
      }

      if ((_iAP2LogEnableMask & 1) != 0)
      {
        int v45 = (os_log_s *)logObjectForModule_24();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t v91 = 136315650;
          *(void *)&v91[4] = "__iAP2FileTransferSendBufferPacket";
          *(_WORD *)&v91[12] = 1024;
          *(_DWORD *)&v91[14] = 406;
          *(_WORD *)&v91[18] = 1024;
          *(_DWORD *)&v91[20] = (unsigned __int16)EmptySendPacket;
          __int16 v46 = "ERROR: %s:%d Failed to iAP2LinkQueueSendDataPAcket, delete packet=%hx";
LABEL_99:
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, v46, v91, 0x18u);
        }
      }
    }

    else
    {
      size_t v35 = (*(_DWORD *)buf - 2);
      memcpy(v30 + 2, *(const void **)(a1 + 8), v35);
      if ((_iAP2LogEnableMask & 4) != 0)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          int v36 = *(os_log_s **)(gLogObjects + 152);
        }

        else
        {
          int v36 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
        {
          int v72 = *((unsigned __int16 *)EmptySendPacket + 27);
          int v73 = *(unsigned __int8 *)(a1 + 108);
          uint64_t v74 = *(void *)(a1 + 24);
          uint64_t v75 = *(void *)(a1 + 32);
          *(_DWORD *)uint64_t v91 = 136317442;
          *(void *)&v91[4] = "__iAP2FileTransferSendBufferPacket";
          *(_WORD *)&v91[12] = 1024;
          *(_DWORD *)&v91[14] = 338;
          *(_WORD *)&v91[18] = 1024;
          *(_DWORD *)&v91[20] = (unsigned __int16)a1;
          *(_WORD *)&v91[24] = 2048;
          *(void *)char v92 = *(unsigned int *)buf;
          *(_WORD *)&v92[8] = 2048;
          *(void *)&v92[10] = v35;
          *(_WORD *)&v92[18] = 1024;
          *(_DWORD *)&v92[20] = (unsigned __int16)EmptySendPacket;
          *(_WORD *)&v92[24] = 1024;
          *(_DWORD *)&v92[26] = v72;
          *(_WORD *)&v92[30] = 1024;
          *(_DWORD *)&v92[32] = v73;
          *(_WORD *)&v92[36] = 2048;
          *(void *)&v92[38] = v74;
          *(_WORD *)&v92[46] = 2048;
          *(void *)&v92[48] = v75;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEBUG,  "%s:%d Send Buffer Data Packet, QueueSendDataPacket fileXfer=%hx payloadLen/dataLen=%lu/%lu packet=%hx packet ->packetLen=%u session=%u sentSize=%lu totalSize=%lu",  v91,  0x52u);
        }
      }

      ++*(_BYTE *)(a1 + 296);
      if (iAP2LinkQueueSendDataPacket( *(void *)a1,  (uint64_t *)EmptySendPacket,  *(unsigned __int8 *)(a1 + 108),  a1,  (uint64_t)__iAP2FileTransferDataSentCB,  __iAP2FileTransferContextCleanupCB,  0))
      {
        *(_BYTE *)(a1 + 111) |= 8u;
        *(void *)(a1 + 8) += v35;
        *(void *)(a1 + 24) += v35;
        *(void *)(a1 + 48) += v35;
LABEL_68:
        uint64_t v8 = 1LL;
LABEL_101:
        iAP2PacketRelease((uint64_t *)EmptySendPacket);
        return v8;
      }

      if ((_iAP2LogEnableMask & 1) != 0)
      {
        int v45 = (os_log_s *)logObjectForModule_24();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t v91 = 136315650;
          *(void *)&v91[4] = "__iAP2FileTransferSendBufferPacket";
          *(_WORD *)&v91[12] = 1024;
          *(_DWORD *)&v91[14] = 358;
          *(_WORD *)&v91[18] = 1024;
          *(_DWORD *)&v91[20] = (unsigned __int16)EmptySendPacket;
          __int16 v46 = "ERROR: %s:%d Failed to iAP2LinkQueueSendDataPacket, delete packet=%hx";
          goto LABEL_99;
        }
      }
    }

LABEL_100:
    EmptySendPacket = 0LL;
    uint64_t v8 = 0LL;
    goto LABEL_101;
  }

  *(_DWORD *)(a1 + 104) = 6;
  iAP2LinkEventNotify(*(void *)a1, 1LL, a1);
  int v22 = *(void (**)(uint64_t, void))(a1 + 56);
  if (v22) {
    v22(a1, *(void *)(a1 + 64));
  }
  iAP2FileTransferCleanup(a1);
  return 1LL;
}

void __iAP2FileTransferContextCleanupCB(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    char v2 = *(_BYTE *)(a2 + 296) - 1;
    *(_BYTE *)(a2 + 296) = v2;
    if (!v2) {
      iAP2FileTransferDelete(a2);
    }
  }

uint64_t iAP2FileTransferRelease(uint64_t result)
{
  if (result)
  {
    char v1 = *(_BYTE *)(result + 296) - 1;
    *(_BYTE *)(result + 296) = v1;
    if (!v1)
    {
      iAP2FileTransferDelete(result);
      return 0LL;
    }
  }

  return result;
}

BOOL iAP2FileTransferAllocateBufferID(uint64_t a1, int a2, _BYTE *a3)
{
  BOOL result = 0LL;
  if (!a1 || !a3) {
    return result;
  }
  SessionInfo = iAP2LinkGetSessionInfo((unsigned __int8 *)a1, a2);
  if (!SessionInfo || SessionInfo[1] != 1)
  {
    if ((_iAP2LogEnableMask & 1) != 0)
    {
      if (gLogObjects && gNumLogObjects >= 20)
      {
        __int128 v16 = *(os_log_s **)(gLogObjects + 152);
      }

      else
      {
        __int128 v16 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
      BOOL result = 0LL;
      if (!v17) {
        return result;
      }
      int v19 = 136315650;
      unsigned int v20 = "iAP2FileTransferAllocateBufferID";
      __int16 v21 = 1024;
      int v22 = 609;
      __int16 v23 = 1024;
      int v24 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "ERROR: %s:%d Attempting to allocate buffer ID for non-buffer transfer session (%d)",  (uint8_t *)&v19,  0x18u);
    }

    return 0LL;
  }

  unsigned int v8 = *(unsigned __int8 *)(a1 + 216);
  LODWORD(v9) = v8 >> 3;
  char v10 = v8 & 7;
  int v11 = -128;
  while (1)
  {
    int v12 = *(unsigned __int8 *)(a1 + v9 + 217);
    int v13 = 1 << v10;
    if ((v13 & v12) == 0) {
      break;
    }
    unsigned int v14 = v8 + 1;
    unsigned int v8 = (v8 + 1) & 0x7F;
    uint64_t v9 = (v14 >> 3) & 0xF;
    char v10 = v14 & 7;
    if (__CFADD__(v11++, 1))
    {
      int v12 = *(unsigned __int8 *)(a1 + v9 + 217);
      int v13 = 1 << v10;
      goto LABEL_19;
    }
  }

  uint64_t v9 = v9;
LABEL_19:
  if ((v13 & v12) == 0)
  {
    *(_BYTE *)(a1 + v9 + 217) = v12 | v13;
    *(_BYTE *)(a1 + 216) = (v8 + 1) & 0x7F;
    *a3 = v8 | ((*(_DWORD *)(a1 + 184) != 0) << 7);
    return 1LL;
  }

  if ((_iAP2LogEnableMask & 4) == 0) {
    return 0LL;
  }
  if (gLogObjects && gNumLogObjects >= 20)
  {
    uint64_t v18 = *(os_log_s **)(gLogObjects + 152);
  }

  else
  {
    uint64_t v18 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  BOOL result = os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    iAP2FileTransferAllocateBufferID_cold_2(a2, v18);
    return 0LL;
  }

  return result;
}

void iAP2FileTransferReleaseBufferID(unsigned __int8 *a1, int a2, unsigned int a3)
{
  if (a1)
  {
    SessionInfo = iAP2LinkGetSessionInfo(a1, a2);
    if (SessionInfo && SessionInfo[1] == 1)
    {
      a1[((a3 >> 3) & 0xF) + 217] &= ~(1 << (a3 & 7));
      iAP2LinkEventNotify((uint64_t)a1, 0LL, a3);
    }

    else if ((_iAP2LogEnableMask & 1) != 0)
    {
      if (gLogObjects && gNumLogObjects >= 20)
      {
        int v7 = *(os_log_s **)(gLogObjects + 152);
      }

      else
      {
        int v7 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = 136315650;
        uint64_t v9 = "iAP2FileTransferReleaseBufferID";
        __int16 v10 = 1024;
        int v11 = 660;
        __int16 v12 = 1024;
        int v13 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "ERROR: %s:%d Attempting to release buffer ID for non-buffer transfer session (%d)",  (uint8_t *)&v8,  0x18u);
      }
    }
  }

uint64_t iAP2FileTransferCreate( unsigned __int8 *a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  int SessionForService = iAP2LinkGetSessionForService((uint64_t)a1, 1);
  SessionInfo = iAP2LinkGetSessionInfo(a1, SessionForService);
  if (!a7) {
    iAP2FileTransferCreate_cold_1();
  }
  __int128 v16 = SessionInfo;
  if ((_iAP2LogEnableMask & 4) != 0)
  {
    if (gLogObjects) {
      BOOL v17 = gNumLogObjects < 20;
    }
    else {
      BOOL v17 = 1;
    }
    if (v17)
    {
      uint64_t v18 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
        uint64_t v18 = (os_log_s *)&_os_log_default;
      }
    }

    else
    {
      uint64_t v18 = *(os_log_s **)(gLogObjects + 152);
    }

    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      int v21 = v16[2];
      *(_DWORD *)buf = 136317186;
      __int16 v23 = "iAP2FileTransferCreate";
      __int16 v24 = 1024;
      int v25 = 808;
      __int16 v26 = 1024;
      int v27 = (unsigned __int16)a1;
      __int16 v28 = 1024;
      int v29 = a2;
      __int16 v30 = 1024;
      int v31 = v21;
      __int16 v32 = 1024;
      int v33 = a3;
      __int16 v34 = 1024;
      int v35 = (unsigned __int16)a4;
      __int16 v36 = 1024;
      int v37 = (unsigned __int16)a5;
      __int16 v38 = 1024;
      int v39 = a6;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "%s:%d link=%hx session=%u version=%d bufferID=%xh callback=%hx userInfo=%hx bRecvAsStream=%d",  buf,  0x3Cu);
    }
  }

  *(_BYTE *)(a7 + 110) = v16[2];
  *(_DWORD *)(a7 + 104) = 0;
  *(void *)a7 = a1;
  *(_BYTE *)(a7 + 10_Block_object_dispose(va, 8) = a2;
  *(_BYTE *)(a7 + 109) = a3;
  *(_OWORD *)(a7 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a7 + 24) = 0u;
  *(_OWORD *)(a7 + 40) = 0u;
  *(_OWORD *)(a7 + 56) = 0u;
  *(void *)(a7 + 72) = a4;
  *(void *)(a7 + 80) = a5;
  else {
    char v19 = 0;
  }
  *(_BYTE *)(a7 + 111) = *(_BYTE *)(a7 + 111) & 0xF0 | v19;
  *(_WORD *)(a7 + 112) = 0;
  *(_WORD *)(a7 + 120) = 0;
  *(void *)(a7 + 28_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a7 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a7 + 96) = 0LL;
  *(_BYTE *)(a7 + 296) = 1;
  return a7;
}

uint64_t iAP2FileTransferTypeData(uint64_t a1, int a2, unsigned __int16 *a3)
{
  switch(a2)
  {
    case 1:
      if (a3 && *a3 >= 0x20u)
      {
        __int16 v11 = 1;
        goto LABEL_23;
      }

      if ((_iAP2LogEnableMask & 1) != 0)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          unsigned int v20 = *(os_log_s **)(gLogObjects + 152);
        }

        else
        {
          unsigned int v20 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          int v28 = *(unsigned __int8 *)(a1 + 109);
          if (a3) {
            int v29 = *a3;
          }
          else {
            int v29 = -1;
          }
          int v34 = 136316162;
          int v35 = "iAP2FileTransferTypeData";
          __int16 v36 = 1024;
          int v37 = 880;
          __int16 v38 = 1024;
          int v39 = v28;
          __int16 v40 = 1024;
          int v41 = 1;
          __int16 v42 = 1024;
          int v43 = v29;
          int v25 = "ERROR: %s:%d buffID=0x%X type=%d typeData.len=%d WARNING: Invalid typeData.len!";
          goto LABEL_69;
        }
      }

      return a1;
    case 2:
    case 3:
    case 6:
      goto LABEL_6;
    case 4:
    case 5:
    case 7:
      if (a3)
      {
        unsigned int v6 = *a3;
        if (v6 >= 9)
        {
          *(_WORD *)(a1 + 112) = a2;
          *(_WORD *)(a1 + 120) = v6;
          *(void *)(a1 + 12_Block_object_dispose(va, 8) = *((void *)a3 + 1);
          __int128 v7 = *((_OWORD *)a3 + 1);
          __int128 v8 = *((_OWORD *)a3 + 2);
          __int128 v9 = *((_OWORD *)a3 + 3);
          *(_OWORD *)(a1 + 180) = *(_OWORD *)(a3 + 30);
          *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = v9;
          *(_OWORD *)(a1 + 152) = v8;
          *(_OWORD *)(a1 + 136) = v7;
          return a1;
        }
      }

      if ((_iAP2LogEnableMask & 1) == 0) {
        return a1;
      }
      if (gLogObjects && gNumLogObjects >= 20)
      {
        __int16 v10 = *(os_log_s **)(gLogObjects + 152);
      }

      else
      {
        __int16 v10 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
        return a1;
      }
      int v21 = *(unsigned __int8 *)(a1 + 109);
      if (a3) {
        int v22 = *a3;
      }
      else {
        int v22 = -1;
      }
      int v34 = 136316162;
      int v35 = "iAP2FileTransferTypeData";
      __int16 v36 = 1024;
      int v37 = 924;
      __int16 v38 = 1024;
      int v39 = v21;
      __int16 v40 = 1024;
      int v41 = a2;
      __int16 v42 = 1024;
      int v43 = v22;
      int v25 = "ERROR: %s:%d buffID=0x%X type=%d typeData.len=%d WARNING: Invalid typeData.len!";
      goto LABEL_64;
    case 8:
      if (a3 && *a3 >= 2u)
      {
        __int16 v11 = 8;
LABEL_23:
        *(_WORD *)(a1 + 112) = v11;
        __int128 v12 = *(_OWORD *)a3;
        __int128 v13 = *((_OWORD *)a3 + 1);
        *(_OWORD *)(a1 + 152) = *((_OWORD *)a3 + 2);
        *(_OWORD *)(a1 + 136) = v13;
        *(_OWORD *)(a1 + 120) = v12;
        __int128 v14 = *((_OWORD *)a3 + 3);
        __int128 v15 = *((_OWORD *)a3 + 4);
        __int128 v16 = *((_OWORD *)a3 + 5);
        *(_OWORD *)(a1 + 216) = *((_OWORD *)a3 + 6);
        *(_OWORD *)(a1 + 200) = v16;
        *(_OWORD *)(a1 + 184) = v15;
        *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = v14;
        __int128 v17 = *((_OWORD *)a3 + 7);
        __int128 v18 = *((_OWORD *)a3 + 8);
        __int128 v19 = *((_OWORD *)a3 + 9);
        *(void *)(a1 + 280) = *((void *)a3 + 20);
        *(_OWORD *)(a1 + 264) = v19;
        *(_OWORD *)(a1 + 24_Block_object_dispose(va, 8) = v18;
        *(_OWORD *)(a1 + 232) = v17;
        return a1;
      }

      if ((_iAP2LogEnableMask & 1) == 0) {
        return a1;
      }
      if (gLogObjects && gNumLogObjects >= 20)
      {
        unsigned int v20 = *(os_log_s **)(gLogObjects + 152);
      }

      else
      {
        unsigned int v20 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
        return a1;
      }
      int v30 = *(unsigned __int8 *)(a1 + 109);
      if (a3) {
        int v31 = *a3;
      }
      else {
        int v31 = -1;
      }
      int v34 = 136316162;
      int v35 = "iAP2FileTransferTypeData";
      __int16 v36 = 1024;
      int v37 = 900;
      __int16 v38 = 1024;
      int v39 = v30;
      __int16 v40 = 1024;
      int v41 = 8;
      __int16 v42 = 1024;
      int v43 = v31;
      int v25 = "ERROR: %s:%d buffID=0x%X type=%d typeData.len=%d WARNING: Invalid typeData.len!";
LABEL_69:
      __int16 v32 = v20;
      goto LABEL_70;
    default:
      if ((a2 - 65534) >= 2)
      {
        if ((_iAP2LogEnableMask & 1) == 0) {
          return a1;
        }
        if (gLogObjects && gNumLogObjects >= 20)
        {
          __int16 v10 = *(os_log_s **)(gLogObjects + 152);
        }

        else
        {
          __int16 v10 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
          return a1;
        }
        int v26 = *(unsigned __int8 *)(a1 + 109);
        if (a3) {
          int v27 = *a3;
        }
        else {
          int v27 = -1;
        }
        int v34 = 136316162;
        int v35 = "iAP2FileTransferTypeData";
        __int16 v36 = 1024;
        int v37 = 958;
        __int16 v38 = 1024;
        int v39 = v26;
        __int16 v40 = 1024;
        int v41 = a2;
        __int16 v42 = 1024;
        int v43 = v27;
        int v25 = "ERROR: %s:%d buffID=0x%X type=%d typeData.len=%d ERROR: Invalid type!";
        goto LABEL_64;
      }

void iAP2FileTransferDelete(uint64_t a1)
{
  if ((_iAP2LogEnableMask & 4) == 0) {
    goto LABEL_10;
  }
  if (!gLogObjects || gNumLogObjects < 20)
  {
    uint64_t v3 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    uint64_t v3 = *(os_log_s **)(gLogObjects + 152);
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    iAP2FileTransferDelete_cold_1();
  }

  else
  {
LABEL_10:
    if (!a1) {
      return;
    }
  }

  char v4 = *(unsigned __int8 **)a1;
  int v5 = *(unsigned __int8 *)(a1 + 108);
  unsigned int v6 = *(unsigned __int8 *)(a1 + 109);
  iAP2FileTransferCleanup(a1);
  iAP2FileTransferReleaseBufferID(v4, v5, v6);
  *(_BYTE *)(a1 + 109) = ~(_BYTE)v6 & 0x80;
}

void iAP2FileTransferCleanup(uint64_t a1)
{
  if ((_iAP2LogEnableMask & 4) != 0)
  {
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 20;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      uint64_t v3 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      uint64_t v3 = *(os_log_s **)(gLogObjects + 152);
    }

    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      iAP2FileTransferCleanup_cold_1();
    }
  }

  *(_DWORD *)(a1 + 104) = 0;
  char v4 = *(void ***)(a1 + 16);
  if (v4 && (*(_BYTE *)(a1 + 111) & 5) != 0) {
    iAP2BuffPoolReturn(*(unsigned __int8 **)(*(void *)a1 + 256LL), v4);
  }
  int v5 = *(void (**)(uint64_t, uint64_t, void))(a1 + 88);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_BYTE *)(a1 + 111) &= ~4u;
  *(_BYTE *)(a1 + 110) = 0;
  *(_WORD *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 120) = 0;
  *(void *)(a1 + 28_Block_object_dispose(va, 8) = 0LL;
  if (v5)
  {
    v5(a1, 1LL, *(void *)(a1 + 96));
    *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
    *(void *)(a1 + 96) = 0LL;
  }

uint64_t iAP2FileTransferStart( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  if ((_iAP2LogEnableMask & 2) == 0) {
    goto LABEL_11;
  }
  if (!gLogObjects || gNumLogObjects < 20)
  {
    __int128 v16 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    __int128 v16 = *(os_log_s **)(gLogObjects + 152);
  }

  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    int v17 = *(_DWORD *)(a1 + 104);
    int v18 = *(unsigned __int8 *)(a1 + 108);
    *(_DWORD *)buf = 136317954;
    int v33 = "iAP2FileTransferStart";
    __int16 v34 = 1024;
    int v35 = 1110;
    __int16 v36 = 1024;
    int v37 = (unsigned __int16)a1;
    __int16 v38 = 1024;
    int v39 = v17;
    __int16 v40 = 1024;
    int v41 = v18;
    __int16 v42 = 1024;
    int v43 = (unsigned __int16)a2;
    __int16 v44 = 2048;
    *(void *)int v45 = a3;
    *(_WORD *)&v45[8] = 2048;
    uint64_t v46 = a4;
    *(_WORD *)__int16 v47 = 1024;
    *(_DWORD *)&v47[2] = (unsigned __int16)a5;
    *(_WORD *)uint64_t v48 = 1024;
    *(_DWORD *)&v48[2] = (unsigned __int16)a6;
    __int16 v49 = 1024;
    int v50 = a7;
    __int16 v51 = 1024;
    int v52 = a8;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "%s:%d fileXfer=%hx state=%d session=%u buff=%hx buffLen=%lu totalLen=%lu callback=%hx userInfo=%hx bSendAsStream=% d bDeleteBuffOnFinish=%d",  buf,  0x56u);
  }

  else
  {
LABEL_11:
    if (!a1) {
      return 0LL;
    }
  }

  if (*(_DWORD *)(a1 + 104)) {
    return 0LL;
  }
  else {
    unsigned int v20 = *(unsigned __int16 *)(a1 + 120) + 12;
  }
  *(_DWORD *)(a1 + 104) = 1;
  iAP2LinkEventNotify(*(void *)a1, 1LL, a1);
  *(void *)(a1 + _Block_object_dispose(va, 8) = a2;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = a3;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 56) = a5;
  *(void *)(a1 + 64) = a6;
  else {
    char v21 = 0;
  }
  *(_BYTE *)(a1 + 111) = v21 | a8 | *(_BYTE *)(a1 + 111) & 0xF8;
  *(_DWORD *)(a1 + 28_Block_object_dispose(va, 8) = iAP2TimeGetCurTimeMs();
  int v22 = *(void (**)(uint64_t, uint64_t, void))(a1 + 88);
  if (v22) {
    v22(a1, 2LL, *(void *)(a1 + 96));
  }
  if ((_iAP2LogEnableMask & 4) != 0)
  {
    if (gLogObjects && gNumLogObjects >= 20)
    {
      int v23 = *(os_log_s **)(gLogObjects + 152);
    }

    else
    {
      int v23 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      int v24 = *(unsigned __int8 *)(a1 + 109);
      int v25 = *(unsigned __int16 *)(a1 + 16);
      int v26 = *(unsigned __int16 *)(a1 + 40);
      int v27 = *(unsigned __int16 *)(a1 + 32);
      unsigned int v28 = *(unsigned __int8 *)(a1 + 111);
      int v29 = *(unsigned __int16 *)(a1 + 112);
      int v30 = *(unsigned __int16 *)(a1 + 120);
      *(_DWORD *)buf = 136317698;
      int v33 = "iAP2FileTransferStart";
      __int16 v34 = 1024;
      int v35 = 1149;
      __int16 v36 = 1024;
      int v37 = (unsigned __int16)a1;
      __int16 v38 = 1024;
      int v39 = v24;
      __int16 v40 = 1024;
      int v41 = v25;
      __int16 v42 = 1024;
      int v43 = v26;
      __int16 v44 = 1024;
      *(_DWORD *)int v45 = v27;
      *(_WORD *)&v45[4] = 1024;
      *(_DWORD *)&_BYTE v45[6] = (v28 >> 1) & 1;
      LOWORD(v46) = 1024;
      *(_DWORD *)((char *)&v46 + 2) = v28 & 1;
      HIWORD(v46) = 1024;
      *(_DWORD *)__int16 v47 = v29;
      *(_WORD *)&v47[4] = 1024;
      *(_DWORD *)uint64_t v48 = v30;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "%s:%d fileXfer=%hx buffID=0x%X Start, send Setup, buff=%hx len=%u totalSize=%u bStream=%d bDeleteBuffOnFinish=%d type=%d typeData.len=%u",  buf,  0x48u);
    }
  }

  return __iAP2FileTransferSendBufferPacket(a1, 4, 0);
}

uint64_t iAP2FileTransferHandleRecv(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = 0LL;
  if (a1)
  {
    if (a2)
    {
      size_t v6 = a3 - 2;
      if (a3 >= 2)
      {
        char v8 = *(_BYTE *)(a2 + 1);
        switch(v8 & 0xF)
        {
          case 0:
            *(_DWORD *)(a1 + 28_Block_object_dispose(va, 8) = 0;
            __int128 v9 = *(void (**)(uint64_t, uint64_t, void))(a1 + 88);
            if (v9) {
              v9(a1, 3LL, *(void *)(a1 + 96));
            }
            if (v8 < 0)
            {
              if ((_iAP2LogEnableMask & 2) != 0)
              {
                int v56 = (os_log_s *)logObjectForModule_24();
                if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
                {
                  int v57 = *(unsigned __int8 *)(a1 + 109);
                  int v58 = (*(unsigned __int8 *)(a1 + 111) >> 1) & 1;
                  uint64_t v59 = *(void *)(a1 + 32);
                  int v109 = 136316418;
                  uint64_t v110 = "iAP2FileTransferHandleRecv";
                  __int16 v111 = 1024;
                  int v112 = 1307;
                  __int16 v113 = 1024;
                  int v114 = (unsigned __int16)a1;
                  __int16 v115 = 1024;
                  int v116 = v57;
                  __int16 v117 = 1024;
                  *(_DWORD *)int v118 = v58;
                  *(_WORD *)&v118[4] = 2048;
                  *(void *)&v118[6] = v59;
                  _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_INFO,  "%s:%d fileXfer=%hx buffID=0x%X First packet, bStream=%d totalSize=%lu",  (uint8_t *)&v109,  0x2Eu);
                }
              }

              *(void *)(a1 + 24) = 0LL;
              int v60 = *(void ***)(a1 + 16);
              if (v60)
              {
                iAP2BuffPoolReturn(*(unsigned __int8 **)(*(void *)a1 + 256LL), v60);
                *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
                *(void *)(a1 + 16) = 0LL;
                *(void *)(a1 + 40) = 0LL;
                *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
              }

              if (*(void *)(a1 + 32) - 1LL < v6 || (*(_BYTE *)(a1 + 111) & 2) == 0) {
                size_t v62 = *(void *)(a1 + 32);
              }
              else {
                size_t v62 = v6;
              }
              *(void *)(a1 + 40) = v62;
              __int16 v11 = iAP2BuffPoolGet(*(unsigned __int8 **)(*(void *)a1 + 256LL), v62);
              *(void *)(a1 + 16) = v11;
              goto LABEL_107;
            }

            if ((*(_BYTE *)(a1 + 111) & 2) != 0 && *(void *)(a1 + 32) - 1LL >= v6)
            {
              __int16 v10 = *(void ***)(a1 + 16);
              if (v10)
              {
                iAP2BuffPoolReturn(*(unsigned __int8 **)(*(void *)a1 + 256LL), v10);
                *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
                *(void *)(a1 + 16) = 0LL;
                *(void *)(a1 + 40) = 0LL;
                *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
              }

              __int16 v11 = iAP2BuffPoolGet(*(unsigned __int8 **)(*(void *)a1 + 256LL), v6);
              *(void *)(a1 + 16) = v11;
              *(void *)(a1 + 40) = v6;
LABEL_107:
              *(void *)(a1 + _Block_object_dispose(va, 8) = v11;
            }

            uint64_t v63 = *(void *)(a1 + 32);
            if (v63)
            {
              uint64_t v64 = *(void *)(a1 + 24);
              if (v63 - v64 < v6)
              {
                if ((_iAP2LogEnableMask & 1) != 0)
                {
                  int v65 = (os_log_s *)logObjectForModule_24();
                  BOOL v66 = os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT);
                  uint64_t v64 = *(void *)(a1 + 24);
                  uint64_t v63 = *(void *)(a1 + 32);
                  if (v66)
                  {
                    int v67 = *(unsigned __int8 *)(a1 + 109);
                    int v109 = 136316418;
                    uint64_t v110 = "iAP2FileTransferHandleRecv";
                    __int16 v111 = 1024;
                    int v112 = 1360;
                    __int16 v113 = 1024;
                    int v114 = (unsigned __int16)a1;
                    __int16 v115 = 1024;
                    int v116 = v67;
                    __int16 v117 = 2048;
                    *(void *)int v118 = v63;
                    *(_WORD *)&v118[8] = 2048;
                    *(void *)&v118[10] = v64 + a3 - 2;
                    _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEFAULT,  "ERROR: %s:%d Got too much data for fileXfer=%hx, buffID=0x%X expected %lu bytes, got %lu",  (uint8_t *)&v109,  0x32u);
                    uint64_t v64 = *(void *)(a1 + 24);
                    uint64_t v63 = *(void *)(a1 + 32);
                  }
                }

                size_t v6 = v63 - v64;
              }
            }

            if (v6 && *(void *)(a1 + 40) - *(void *)(a1 + 48) >= v6)
            {
              memcpy(*(void **)(a1 + 8), (const void *)(a2 + 2), v6);
              *(void *)(a1 + 8) += v6;
              *(void *)(a1 + 24) += v6;
              *(void *)(a1 + 48) += v6;
            }

            if ((_iAP2LogEnableMask & 2) != 0)
            {
              int v68 = (os_log_s *)logObjectForModule_24();
              if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
              {
                int v69 = *(unsigned __int8 *)(a1 + 109);
                uint64_t v70 = *(void *)(a1 + 24);
                uint64_t v71 = *(void *)(a1 + 32);
                int v109 = 136316418;
                uint64_t v110 = "iAP2FileTransferHandleRecv";
                __int16 v111 = 1024;
                int v112 = 1380;
                __int16 v113 = 1024;
                int v114 = (unsigned __int16)a1;
                __int16 v115 = 1024;
                int v116 = v69;
                __int16 v117 = 2048;
                *(void *)int v118 = v70;
                *(_WORD *)&v118[8] = 2048;
                *(void *)&v118[10] = v71;
                _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_INFO,  "%s:%d fileXfer=%hx buffID=0x%X Recv'd bytes %lu/%lu",  (uint8_t *)&v109,  0x32u);
              }
            }

            if ((v8 & 0x40) == 0)
            {
              if ((*(_BYTE *)(a1 + 111) & 2) == 0) {
                return 0LL;
              }
              int v72 = *(unsigned int (**)(uint64_t, void))(a1 + 72);
              if (!v72 || !v72(a1, *(void *)(a1 + 80))) {
                return 0LL;
              }
              iAP2BuffPoolReturn(*(unsigned __int8 **)(*(void *)a1 + 256LL), *(void ***)(a1 + 16));
              uint64_t v3 = 0LL;
              *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
              *(void *)(a1 + 16) = 0LL;
              goto LABEL_133;
            }

            if ((_iAP2LogEnableMask & 2) != 0)
            {
              int v73 = (os_log_s *)logObjectForModule_24();
              if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
              {
                int v74 = *(unsigned __int8 *)(a1 + 109);
                int v75 = *(unsigned __int16 *)(a1 + 72);
                int v76 = *(unsigned __int16 *)(a1 + 80);
                int v77 = *(unsigned __int16 *)(a1 + 16);
                uint64_t v78 = *(void *)(a1 + 40);
                int v109 = 136316930;
                uint64_t v110 = "iAP2FileTransferHandleRecv";
                __int16 v111 = 1024;
                int v112 = 1389;
                __int16 v113 = 1024;
                int v114 = (unsigned __int16)a1;
                __int16 v115 = 1024;
                int v116 = v74;
                __int16 v117 = 1024;
                *(_DWORD *)int v118 = v75;
                *(_WORD *)&v118[4] = 1024;
                *(_DWORD *)&v118[6] = v76;
                *(_WORD *)&v118[10] = 1024;
                *(_DWORD *)&v118[12] = v77;
                *(_WORD *)&v118[16] = 2048;
                *(void *)&v118[18] = v78;
                _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_INFO,  "%s:%d fileXfer=%hx buffID=0x%X Last packet (gotCB=%hx userInfo=%hx) pBuffer=%hx buffSize=%lu",  (uint8_t *)&v109,  0x3Au);
              }
            }

            *(_DWORD *)(a1 + 104) = 11;
            iAP2LinkEventNotify(*(void *)a1, 1LL, a1);
            uint64_t v79 = *(unsigned int (**)(uint64_t, void))(a1 + 72);
            if (v79)
            {
              if (v79(a1, *(void *)(a1 + 80)))
              {
                int v80 = *(void ***)(a1 + 16);
                if (v80) {
                  iAP2BuffPoolReturn(*(unsigned __int8 **)(*(void *)a1 + 256LL), v80);
                }
                *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
                *(void *)(a1 + 16) = 0LL;
                uint64_t v3 = 1LL;
LABEL_133:
                *(void *)(a1 + 40) = 0LL;
                *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
                return v3;
              }
            }

            else
            {
              iAP2FileTransferSuccess(a1);
            }

            uint64_t v3 = 1LL;
            break;
          case 1:
            if ((_iAP2LogEnableMask & 2) != 0)
            {
              if (gLogObjects && gNumLogObjects >= 20)
              {
                int v23 = *(os_log_s **)(gLogObjects + 152);
              }

              else
              {
                int v23 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
              {
                int v50 = *(unsigned __int8 *)(a1 + 109);
                int v51 = *(_DWORD *)(a1 + 104);
                int v109 = 136316162;
                uint64_t v110 = "iAP2FileTransferHandleRecv";
                __int16 v111 = 1024;
                int v112 = 1588;
                __int16 v113 = 1024;
                int v114 = (unsigned __int16)a1;
                __int16 v115 = 1024;
                int v116 = v50;
                __int16 v117 = 1024;
                *(_DWORD *)int v118 = v51;
                _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "%s:%d fileXfer=%hx buffID=0x%X Control Start curState=%d",  (uint8_t *)&v109,  0x24u);
              }
            }

            *(_DWORD *)(a1 + 28_Block_object_dispose(va, 8) = 0;
            int v52 = *(void (**)(uint64_t, uint64_t, void))(a1 + 88);
            if (v52) {
              v52(a1, 3LL, *(void *)(a1 + 96));
            }
            int v53 = *(_DWORD *)(a1 + 104);
            if (v53 == 1 || v53 == 3)
            {
              *(_DWORD *)(a1 + 104) = 2;
              iAP2LinkEventNotify(*(void *)a1, 1LL, a1);
              uint64_t v3 = 0LL;
              if ((__iAP2FileTransferSendBufferPacket(a1, 0, 0) & 1) == 0)
              {
                *(_DWORD *)(a1 + 104) = 7;
                uint64_t v3 = 1LL;
                iAP2LinkEventNotify(*(void *)a1, 1LL, a1);
              }
            }

            else
            {
              if (v53 == 9)
              {
                int v40 = 8;
                goto LABEL_89;
              }

              if ((_iAP2LogEnableMask & 1) == 0) {
                return 0LL;
              }
              int v41 = (os_log_s *)logObjectForModule_24();
              uint64_t v3 = 0LL;
              if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
              {
                int v54 = *(unsigned __int8 *)(a1 + 109);
                int v55 = *(_DWORD *)(a1 + 104);
                int v109 = 136316162;
                uint64_t v110 = "iAP2FileTransferHandleRecv";
                __int16 v111 = 1024;
                int v112 = 1616;
                __int16 v113 = 1024;
                int v114 = (unsigned __int16)a1;
                __int16 v115 = 1024;
                int v116 = v54;
                __int16 v117 = 1024;
                *(_DWORD *)int v118 = v55;
                __int16 v44 = "ERROR: %s:%d Wrong state for Start! fileXfer=%hx buffID=0x%X state=%d";
                goto LABEL_143;
              }
            }

            return v3;
          case 2:
            if ((_iAP2LogEnableMask & 2) != 0)
            {
              if (gLogObjects && gNumLogObjects >= 20)
              {
                __int128 v12 = *(os_log_s **)(gLogObjects + 152);
              }

              else
              {
                __int128 v12 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
              {
                int v27 = *(unsigned __int8 *)(a1 + 109);
                int v28 = *(_DWORD *)(a1 + 104);
                int v29 = *(unsigned __int16 *)(a1 + 56);
                int v30 = *(unsigned __int16 *)(a1 + 64);
                int v31 = *(unsigned __int16 *)(a1 + 16);
                uint64_t v32 = *(void *)(a1 + 40);
                int v109 = 136317186;
                uint64_t v110 = "iAP2FileTransferHandleRecv";
                __int16 v111 = 1024;
                int v112 = 1655;
                __int16 v113 = 1024;
                int v114 = (unsigned __int16)a1;
                __int16 v115 = 1024;
                int v116 = v27;
                __int16 v117 = 1024;
                *(_DWORD *)int v118 = v28;
                *(_WORD *)&v118[4] = 1024;
                *(_DWORD *)&v118[6] = v29;
                *(_WORD *)&v118[10] = 1024;
                *(_DWORD *)&v118[12] = v30;
                *(_WORD *)&v118[16] = 1024;
                *(_DWORD *)&v118[18] = v31;
                *(_WORD *)&v118[22] = 2048;
                *(void *)&v118[24] = v32;
                _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "%s:%d fileXfer=%hx buffID=0x%X Control Cancel curState=%d (endCB=%hx userInfo=%hx) pBuffer=%hx buffSize=%lu",  (uint8_t *)&v109,  0x40u);
              }
            }

            int v33 = *(_DWORD *)(a1 + 104);
            if ((v33 - 8) < 2)
            {
              *(void *)(a1 + 28_Block_object_dispose(va, 8) = 0LL;
              __int16 v36 = *(void (**)(uint64_t, uint64_t, void))(a1 + 88);
              if (v36) {
                v36(a1, 5LL, *(void *)(a1 + 96));
              }
              int v25 = 10;
              goto LABEL_62;
            }

            if ((v33 - 2) > 1)
            {
              if ((_iAP2LogEnableMask & 1) == 0) {
                return 0LL;
              }
              int v41 = (os_log_s *)logObjectForModule_24();
              uint64_t v3 = 0LL;
              if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
              {
                int v81 = *(unsigned __int8 *)(a1 + 109);
                int v82 = *(_DWORD *)(a1 + 104);
                int v109 = 136316162;
                uint64_t v110 = "iAP2FileTransferHandleRecv";
                __int16 v111 = 1024;
                int v112 = 1694;
                __int16 v113 = 1024;
                int v114 = (unsigned __int16)a1;
                __int16 v115 = 1024;
                int v116 = v81;
                __int16 v117 = 1024;
                *(_DWORD *)int v118 = v82;
                __int16 v44 = "ERROR: %s:%d Wrong state for Cancel! fileXfer=%hx buffID=0x%X state=%d";
                goto LABEL_143;
              }
            }

            else
            {
              *(void *)(a1 + 28_Block_object_dispose(va, 8) = 0LL;
              __int16 v34 = *(void (**)(uint64_t, uint64_t, void))(a1 + 88);
              if (v34) {
                v34(a1, 5LL, *(void *)(a1 + 96));
              }
              uint64_t v3 = 1LL;
              __iAP2FileTransferSendBufferPacket(a1, 2, 1);
              *(_DWORD *)(a1 + 104) = 4;
              iAP2LinkEventNotify(*(void *)a1, 1LL, a1);
              int v35 = *(void (**)(uint64_t, void))(a1 + 56);
              if (v35 && (*(_BYTE *)(a1 + 111) & 8) == 0) {
                goto LABEL_63;
              }
            }

            return v3;
          case 3:
            if ((_iAP2LogEnableMask & 2) != 0)
            {
              if (gLogObjects && gNumLogObjects >= 20)
              {
                __int128 v13 = *(os_log_s **)(gLogObjects + 152);
              }

              else
              {
                __int128 v13 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
              {
                int v37 = *(unsigned __int8 *)(a1 + 109);
                int v38 = *(_DWORD *)(a1 + 104);
                int v109 = 136316162;
                uint64_t v110 = "iAP2FileTransferHandleRecv";
                __int16 v111 = 1024;
                int v112 = 1625;
                __int16 v113 = 1024;
                int v114 = (unsigned __int16)a1;
                __int16 v115 = 1024;
                int v116 = v37;
                __int16 v117 = 1024;
                *(_DWORD *)int v118 = v38;
                _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "%s:%d fileXfer=%hx buffID=0x%X Control Pause curState=%d",  (uint8_t *)&v109,  0x24u);
              }
            }

            int v39 = *(_DWORD *)(a1 + 104);
            if (v39 == 2)
            {
              *(_DWORD *)(a1 + 104) = 3;
              iAP2LinkEventNotify(*(void *)a1, 1LL, a1);
              __iAP2FileTransferSendBufferPacket(a1, 3, 1);
              return 0LL;
            }

            if (v39 == 8)
            {
              int v40 = 9;
LABEL_89:
              *(_DWORD *)(a1 + 104) = v40;
              iAP2LinkEventNotify(*(void *)a1, 1LL, a1);
              return 0LL;
            }

            if ((_iAP2LogEnableMask & 1) == 0) {
              return 0LL;
            }
            int v41 = (os_log_s *)logObjectForModule_24();
            uint64_t v3 = 0LL;
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
            {
              int v42 = *(unsigned __int8 *)(a1 + 109);
              int v43 = *(_DWORD *)(a1 + 104);
              int v109 = 136316162;
              uint64_t v110 = "iAP2FileTransferHandleRecv";
              __int16 v111 = 1024;
              int v112 = 1644;
              __int16 v113 = 1024;
              int v114 = (unsigned __int16)a1;
              __int16 v115 = 1024;
              int v116 = v42;
              __int16 v117 = 1024;
              *(_DWORD *)int v118 = v43;
              __int16 v44 = "ERROR: %s:%d Wrong state for Pause! fileXfer=%hx buffID=0x%X state=%d";
              goto LABEL_143;
            }

            return v3;
          case 4:
            uint64_t v3 = 0LL;
            int SessionForService = iAP2LinkGetSessionForService(*(void *)a1, 1);
            SessionInfo = iAP2LinkGetSessionInfo(*(unsigned __int8 **)a1, SessionForService);
            *(_BYTE *)(a1 + 111) |= 4u;
            iAP2FileTransferCleanup(a1);
            unsigned int v16 = SessionInfo[2];
            unsigned int v17 = *(_DWORD *)(a2 + 6);
            *(_BYTE *)(a1 + 110) = v16;
            *(void *)(a1 + 32) = bswap32(v17);
            if (v16 < 2) {
              goto LABEL_159;
            }
            unsigned int v18 = __rev16(*(unsigned __int16 *)(a2 + 10));
            *(_WORD *)(a1 + 112) = v18;
            switch(v18)
            {
              case 1u:
                uint64_t v87 = 0LL;
                *(_WORD *)(a1 + 120) = 0;
                uint64_t v88 = a2 + 12;
                do
                {
                  uint64_t v89 = a1 + v87;
                  *(_BYTE *)(a1 + v87 + 12_Block_object_dispose(va, 8) = *(_BYTE *)(v88 + v87);
                  uint64_t v90 = v87 + 1;
                  *(_WORD *)(a1 + 120) = v87 + 1;
                  if (!*(_BYTE *)(v88 + v87)) {
                    goto LABEL_157;
                  }
                  ++v87;
                }

                while (v90 != 68);
                goto LABEL_156;
              case 2u:
              case 3u:
              case 6u:
                goto LABEL_148;
              case 4u:
              case 5u:
              case 7u:
                uint64_t v19 = 0LL;
                int v20 = 8;
                *(_WORD *)(a1 + 120) = 8;
                *(void *)(a1 + 12_Block_object_dispose(va, 8) = bswap64(*(void *)(a2 + 12));
                uint64_t v21 = a2 + 20;
                do
                {
                  *(_BYTE *)(a1 + 136 + v19) = *(_BYTE *)(v21 + v19);
                  *(_WORD *)(a1 + 120) = ++v20;
                  if (!*(_BYTE *)(v21 + v19)) {
                    break;
                  }
                  ++v19;
                }

                while (v19 != 60);
                goto LABEL_159;
              case 8u:
                uint64_t v91 = 0LL;
                *(_WORD *)(a1 + 120) = 0;
                uint64_t v92 = a2 + 12;
                break;
              default:
                if (v18 - 65534 >= 2)
                {
                  if ((_iAP2LogEnableMask & 1) != 0)
                  {
                    __int16 v103 = (os_log_s *)logObjectForModule_24();
                    if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
                    {
                      int v104 = SessionInfo[2];
                      int v105 = *(unsigned __int8 *)(a1 + 109);
                      uint64_t v106 = *(void *)(a1 + 32);
                      int v107 = *(unsigned __int16 *)(a1 + 112);
                      int v108 = *(unsigned __int16 *)(a1 + 120);
                      int v109 = 136316674;
                      uint64_t v110 = "iAP2FileTransferHandleRecv";
                      __int16 v111 = 1024;
                      int v112 = 1559;
                      __int16 v113 = 1024;
                      int v114 = v104;
                      __int16 v115 = 1024;
                      int v116 = v105;
                      __int16 v117 = 2048;
                      *(void *)int v118 = v106;
                      *(_WORD *)&v118[8] = 1024;
                      *(_DWORD *)&v118[10] = v107;
                      *(_WORD *)&v118[14] = 1024;
                      *(_DWORD *)&v118[16] = v108;
                      _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_DEFAULT,  "ERROR: %s:%d fileXfer ver=%u buffID=0x%X Setup size=%lu type=%d typeData.len=%u, ERROR: Invalid type!",  (uint8_t *)&v109,  0x34u);
                    }
                  }
                }

                else
                {
LABEL_148:
                  *(_WORD *)(a1 + 120) = 0;
                }

                goto LABEL_159;
            }

            while (1)
            {
              uint64_t v89 = a1 + v91;
              *(_BYTE *)(a1 + v91 + 12_Block_object_dispose(va, 8) = *(_BYTE *)(v92 + v91);
              uint64_t v93 = v91 + 1;
              *(_WORD *)(a1 + 120) = v91 + 1;
              if (!*(_BYTE *)(v92 + v91)) {
                break;
              }
              ++v91;
              if (v93 == 68)
              {
LABEL_156:
                char v94 = *(_BYTE *)(a2 + 80);
LABEL_158:
                *(_BYTE *)(v89 + 129) = v94;
LABEL_159:
                if ((_iAP2LogEnableMask & 2) != 0)
                {
                  __int16 v95 = (os_log_s *)logObjectForModule_24();
                  if (os_log_type_enabled(v95, OS_LOG_TYPE_INFO))
                  {
                    int v96 = SessionInfo[2];
                    int v97 = *(unsigned __int8 *)(a1 + 109);
                    uint64_t v98 = *(void *)(a1 + 32);
                    int v99 = *(unsigned __int16 *)(a1 + 112);
                    int v100 = *(unsigned __int16 *)(a1 + 120);
                    int v109 = 136316930;
                    uint64_t v110 = "iAP2FileTransferHandleRecv";
                    __int16 v111 = 1024;
                    int v112 = 1567;
                    __int16 v113 = 1024;
                    int v114 = (unsigned __int16)a1;
                    __int16 v115 = 1024;
                    int v116 = v96;
                    __int16 v117 = 1024;
                    *(_DWORD *)int v118 = v97;
                    *(_WORD *)&v118[4] = 2048;
                    *(void *)&v118[6] = v98;
                    *(_WORD *)&v118[14] = 1024;
                    *(_DWORD *)&v118[16] = v99;
                    *(_WORD *)&v118[20] = 1024;
                    *(_DWORD *)&v118[22] = v100;
                    _os_log_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_INFO,  "%s:%d fileXfer=%hx ver=%u buffID=0x%X Setup size=%lu type=%u typeData.len=%u, send Resume",  (uint8_t *)&v109,  0x3Au);
                  }
                }

                *(_DWORD *)(a1 + 104) = 9;
                iAP2LinkEventNotify(*(void *)a1, 1LL, a1);
                *(_DWORD *)(a1 + 28_Block_object_dispose(va, 8) = iAP2TimeGetCurTimeMs();
                __int16 v101 = *(void (**)(uint64_t, uint64_t, void))(a1 + 88);
                if (v101) {
                  v101(a1, 2LL, *(void *)(a1 + 96));
                }
                iAP2FileTransferResume(a1);
                return 0LL;
              }
            }

LABEL_157:
            char v94 = 0;
            goto LABEL_158;
          case 5:
            if (*(_DWORD *)(a1 + 104) == 5)
            {
              *(void *)(a1 + 28_Block_object_dispose(va, 8) = 0LL;
              int v24 = *(void (**)(uint64_t, uint64_t, void))(a1 + 88);
              if (v24) {
                v24(a1, 5LL, *(void *)(a1 + 96));
              }
              int v25 = 6;
              goto LABEL_62;
            }

            if ((_iAP2LogEnableMask & 1) == 0) {
              return 0LL;
            }
            int v41 = (os_log_s *)logObjectForModule_24();
            uint64_t v3 = 0LL;
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
            {
              int v83 = *(unsigned __int8 *)(a1 + 109);
              int v84 = *(_DWORD *)(a1 + 104);
              int v109 = 136316162;
              uint64_t v110 = "iAP2FileTransferHandleRecv";
              __int16 v111 = 1024;
              int v112 = 1729;
              __int16 v113 = 1024;
              int v114 = (unsigned __int16)a1;
              __int16 v115 = 1024;
              int v116 = v83;
              __int16 v117 = 1024;
              *(_DWORD *)int v118 = v84;
              __int16 v44 = "ERROR: %s:%d Wrong state for Success! fileXfer=%hx buffID=0x%X state=%d";
              goto LABEL_143;
            }

            return v3;
          case 6:
            if (*(_DWORD *)(a1 + 104) == 5)
            {
              *(void *)(a1 + 28_Block_object_dispose(va, 8) = 0LL;
              int v26 = *(void (**)(uint64_t, uint64_t, void))(a1 + 88);
              if (v26) {
                v26(a1, 5LL, *(void *)(a1 + 96));
              }
              int v25 = 7;
LABEL_62:
              *(_DWORD *)(a1 + 104) = v25;
              uint64_t v3 = 1LL;
              iAP2LinkEventNotify(*(void *)a1, 1LL, a1);
              int v35 = *(void (**)(uint64_t, void))(a1 + 56);
              if (v35) {
LABEL_63:
              }
                v35(a1, *(void *)(a1 + 64));
            }

            else
            {
              if ((_iAP2LogEnableMask & 1) != 0)
              {
                int v41 = (os_log_s *)logObjectForModule_24();
                uint64_t v3 = 0LL;
                if (!os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT)) {
                  return v3;
                }
                int v85 = *(unsigned __int8 *)(a1 + 109);
                int v86 = *(_DWORD *)(a1 + 104);
                int v109 = 136316162;
                uint64_t v110 = "iAP2FileTransferHandleRecv";
                __int16 v111 = 1024;
                int v112 = 1764;
                __int16 v113 = 1024;
                int v114 = (unsigned __int16)a1;
                __int16 v115 = 1024;
                int v116 = v85;
                __int16 v117 = 1024;
                *(_DWORD *)int v118 = v86;
                __int16 v44 = "ERROR: %s:%d Wrong state for Failure! fileXfer=%hx buffID=0x%X state=%d";
LABEL_143:
                uint64_t v48 = v41;
                uint32_t v49 = 36;
LABEL_144:
                _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, v44, (uint8_t *)&v109, v49);
              }

              return 0LL;
            }

            return v3;
          default:
            if ((_iAP2LogEnableMask & 1) == 0) {
              return 0LL;
            }
            if (gLogObjects && gNumLogObjects >= 20)
            {
              int v22 = *(os_log_s **)(gLogObjects + 152);
            }

            else
            {
              int v22 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            uint64_t v3 = 0LL;
            if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
              return v3;
            }
            int v45 = *(unsigned __int8 *)(a1 + 109);
            int v46 = *(unsigned __int16 *)(a1 + 16);
            uint64_t v47 = *(void *)(a1 + 40);
            int v109 = 136316930;
            uint64_t v110 = "iAP2FileTransferHandleRecv";
            __int16 v111 = 1024;
            int v112 = 1772;
            __int16 v113 = 1024;
            int v114 = (unsigned __int16)a1;
            __int16 v115 = 1024;
            int v116 = v45;
            __int16 v117 = 1024;
            *(_DWORD *)int v118 = v8 & 0xF;
            *(_WORD *)&v118[4] = 1024;
            *(_DWORD *)&v118[6] = *(_DWORD *)v118;
            *(_WORD *)&v118[10] = 1024;
            *(_DWORD *)&v118[12] = v46;
            *(_WORD *)&v118[16] = 2048;
            *(void *)&v118[18] = v47;
            __int16 v44 = "ERROR: %s:%d fileXfer=%hx buffID=0x%X Invalid packet type! %u(0x%x) pBuffer=%hx buffSize=%lu";
            uint64_t v48 = v22;
            uint32_t v49 = 58;
            goto LABEL_144;
        }
      }
    }
  }

  return v3;
}

    __int16 v44 = 0;
LABEL_158:
    if (*(void *)a2 == 0x66463F78648862ALL && *(_BYTE *)(a2 + 8) == 27) {
      return X509ExtensionParseServerAuthMarker((unsigned __int8 **)result, a2, a3, a4, a5);
    }
    if (!v44) {
      goto LABEL_232;
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 832)
    {
      BOOL result = ccder_blob_check_null((unsigned __int8 **)result);
      if (!(_DWORD)result) {
        return result;
      }
      int v24 = *a4 | 0x400000;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 3586)
    {
      BOOL result = ccder_blob_check_null((unsigned __int8 **)result);
      if (!(_DWORD)result) {
        return result;
      }
      int v54 = *a4;
      int v55 = 37748736LL;
    }

    else
    {
      if (*(void *)a2 != 0x66463F78648862ALL || *(_WORD *)(a2 + 8) != 4354)
      {
        if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 327) {
          return (uint64_t)X509ExtensionParseMFI4Properties((unint64_t *)result, a4, a5);
        }
        if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 3841LL)
        {
          int v52 = *(unsigned __int8 **)result;
          int v51 = *(void *)(result + 8);
          if (a5)
          {
            *a5 = (unint64_t)v52;
            a5[1] = v51 - (void)v52;
          }

          *a4 |= 0x80000000uLL;
LABEL_233:
          if ((unint64_t)v52 <= v51)
          {
            *(void *)BOOL result = v51;
            return 1LL;
          }

void iAP2FileTransferSuccess(uint64_t a1)
{
  if ((_iAP2LogEnableMask & 4) == 0) {
    goto LABEL_10;
  }
  if (!gLogObjects || gNumLogObjects < 20)
  {
    uint64_t v3 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    uint64_t v3 = *(os_log_s **)(gLogObjects + 152);
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    iAP2FileTransferSuccess_cold_3();
  }

  else
  {
LABEL_10:
    if (!a1) {
      return;
    }
  }

  if (*(_DWORD *)(a1 + 104) == 11)
  {
    if ((_iAP2LogEnableMask & 4) != 0)
    {
      if (gLogObjects && gNumLogObjects >= 20)
      {
        char v4 = *(os_log_s **)(gLogObjects + 152);
      }

      else
      {
        char v4 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
        iAP2FileTransferSuccess_cold_1();
      }
    }

    *(void *)(a1 + 28_Block_object_dispose(va, 8) = 0LL;
    int v5 = *(void (**)(uint64_t, uint64_t, void))(a1 + 88);
    if (v5) {
      v5(a1, 5LL, *(void *)(a1 + 96));
    }
    __iAP2FileTransferSendBufferPacket(a1, 5, 1);
  }

void iAP2FileTransferResume(uint64_t a1)
{
  if ((_iAP2LogEnableMask & 4) == 0) {
    goto LABEL_10;
  }
  if (!gLogObjects || gNumLogObjects < 20)
  {
    uint64_t v3 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    uint64_t v3 = *(os_log_s **)(gLogObjects + 152);
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    iAP2FileTransferResume_cold_5();
  }

  else
  {
LABEL_10:
    if (!a1) {
      return;
    }
  }

  int v4 = *(_DWORD *)(a1 + 104);
  if (v4 == 9)
  {
    if ((_iAP2LogEnableMask & 4) != 0)
    {
      if (gLogObjects && gNumLogObjects >= 20)
      {
        size_t v6 = *(os_log_s **)(gLogObjects + 152);
      }

      else
      {
        size_t v6 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
        iAP2FileTransferResume_cold_3();
      }
    }

    *(_DWORD *)(a1 + 104) = 8;
    iAP2LinkEventNotify(*(void *)a1, 1LL, a1);
    uint64_t v7 = a1;
    int v8 = 1;
    int v9 = 1;
  }

  else
  {
    if (v4 != 3) {
      return;
    }
    if ((_iAP2LogEnableMask & 4) != 0)
    {
      if (gLogObjects && gNumLogObjects >= 20)
      {
        int v5 = *(os_log_s **)(gLogObjects + 152);
      }

      else
      {
        int v5 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
        iAP2FileTransferResume_cold_1();
      }
    }

    *(_DWORD *)(a1 + 104) = 2;
    iAP2LinkEventNotify(*(void *)a1, 1LL, a1);
    uint64_t v7 = a1;
    int v8 = 0;
    int v9 = 0;
  }

  __iAP2FileTransferSendBufferPacket(v7, v8, v9);
}

void iAP2FileTransferCancel(uint64_t a1)
{
  if (a1)
  {
    if ((_iAP2LogEnableMask & 4) != 0)
    {
      if (gLogObjects) {
        BOOL v2 = gNumLogObjects < 20;
      }
      else {
        BOOL v2 = 1;
      }
      if (v2)
      {
        uint64_t v3 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      else
      {
        uint64_t v3 = *(os_log_s **)(gLogObjects + 152);
      }

      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
        iAP2FileTransferCancel_cold_6();
      }
    }

    if ((_iAP2LogEnableMask & 2) != 0)
    {
      if (gLogObjects) {
        BOOL v4 = gNumLogObjects < 20;
      }
      else {
        BOOL v4 = 1;
      }
      if (v4)
      {
        int v5 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      else
      {
        int v5 = *(os_log_s **)(gLogObjects + 152);
      }

      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        int v6 = *(_DWORD *)(a1 + 104);
        int v7 = *(unsigned __int8 *)(a1 + 108);
        uint64_t v8 = *(void *)(a1 + 24);
        uint64_t v9 = *(void *)(a1 + 32);
        BOOL v10 = *(void *)(a1 + 56) != 0LL;
        BOOL v11 = *(void *)(a1 + 64) != 0LL;
        int v20 = 136316930;
        uint64_t v21 = "iAP2FileTransferCancel";
        __int16 v22 = 1024;
        int v23 = 1809;
        __int16 v24 = 1024;
        int v25 = v6;
        __int16 v26 = 1024;
        int v27 = v7;
        __int16 v28 = 2048;
        uint64_t v29 = v8;
        __int16 v30 = 2048;
        uint64_t v31 = v9;
        __int16 v32 = 1024;
        BOOL v33 = v10;
        __int16 v34 = 1024;
        BOOL v35 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s:%d fileXfer state=%d session=%u sentSize=%lu totalSize=%lu endCB(%d) userInfo(%d)",  (uint8_t *)&v20,  0x3Eu);
      }
    }

    unsigned int v12 = *(_DWORD *)(a1 + 104);
    BOOL v2 = v12 > 9;
    int v13 = (1 << v12) & 0x32C;
    if (v2 || v13 == 0)
    {
      if ((_iAP2LogEnableMask & 4) != 0)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          uint64_t v19 = *(os_log_s **)(gLogObjects + 152);
        }

        else
        {
          uint64_t v19 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
          iAP2FileTransferCancel_cold_1();
        }
      }
    }

    else
    {
      if ((_iAP2LogEnableMask & 4) != 0)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          __int128 v15 = *(os_log_s **)(gLogObjects + 152);
        }

        else
        {
          __int128 v15 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
          iAP2FileTransferCancel_cold_3();
        }
      }

      *(void *)(a1 + 28_Block_object_dispose(va, 8) = 0LL;
      unsigned int v16 = *(void (**)(uint64_t, uint64_t, void))(a1 + 88);
      if (v16) {
        v16(a1, 5LL, *(void *)(a1 + 96));
      }
      __iAP2FileTransferSendBufferPacket(a1, 2, 1);
      else {
        int v17 = 10;
      }
      *(_DWORD *)(a1 + 104) = v17;
      iAP2LinkEventNotify(*(void *)a1, 1LL, a1);
      unsigned int v18 = *(void (**)(uint64_t, void))(a1 + 56);
      if (v18) {
        v18(a1, *(void *)(a1 + 64));
      }
    }
  }

void OUTLINED_FUNCTION_5_16(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

void OUTLINED_FUNCTION_6_11( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void OUTLINED_FUNCTION_7_9(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

void OUTLINED_FUNCTION_8_9( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void OUTLINED_FUNCTION_9_8(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

  ;
}

void OUTLINED_FUNCTION_12_3( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

  ;
}

id platform_usb_setUSBHostHIDInterface(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (gLogObjects) {
    BOOL v6 = gNumLogObjects < 7;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v8 = (os_log_s *)&_os_log_default;
    id v7 = &_os_log_default;
  }

  else
  {
    uint64_t v8 = (os_log_s *)*(id *)(gLogObjects + 48);
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v15[0] = 67109634;
    v15[1] = a2;
    __int16 v16 = 1024;
    int v17 = a3;
    __int16 v18 = 2112;
    uint64_t v19 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "[#USB] Setting USB Host HID interface: %d with hidFuntionType: %d for connection %@",  (uint8_t *)v15,  0x18u);
  }

  id USBHostPluginInstance = _getUSBHostPluginInstance();
  BOOL v10 = (void *)objc_claimAutoreleasedReturnValue(USBHostPluginInstance);
  if ((objc_opt_respondsToSelector(v10, "setUSBHostHIDInterface:withHIDFunction:forConnectionUUID:") & 1) != 0)
  {
    id v11 = [v10 setUSBHostHIDInterface:a2 withHIDFunction:a3 forConnectionUUID:a1];
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 7)
    {
      unsigned int v12 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      unsigned int v12 = (os_log_s *)&_os_log_default;
      id v13 = &_os_log_default;
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      platform_usb_setUSBHostHIDInterface_cold_1();
    }

    id v11 = 0LL;
  }

  return v11;
}

id _getUSBHostPluginInstance()
{
  BOOL v0 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformPluginManager sharedManager](&OBJC_CLASS___ACCPlatformPluginManager, "sharedManager"));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( [v0 pluginInstanceWithProtocol:&OBJC_PROTOCOL___ACCPlatformUSBHostPluginProtocol fallbackToTransportPlugins:1]);

  if (!v1)
  {
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 7;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      BOOL v4 = (os_log_s *)&_os_log_default;
      id v3 = &_os_log_default;
    }

    else
    {
      BOOL v4 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      _getUSBHostPluginInstance_cold_1(v4);
    }
  }

  return v1;
}

id platform_usb_clearUSBHostHIDInterfaces(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 7;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  else
  {
    BOOL v4 = (os_log_s *)*(id *)(gLogObjects + 48);
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v11 = 138412290;
    uint64_t v12 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[#USB] Clearing USB Host HID interfaces for connection %@",  (uint8_t *)&v11,  0xCu);
  }

  id USBHostPluginInstance = _getUSBHostPluginInstance();
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue(USBHostPluginInstance);
  if ((objc_opt_respondsToSelector(v6, "clearUSBHostHIDInterfacesForConnectionUUID:") & 1) != 0)
  {
    id v7 = [v6 clearUSBHostHIDInterfacesForConnectionUUID:a1];
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 7)
    {
      uint64_t v8 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v8 = (os_log_s *)&_os_log_default;
      id v9 = &_os_log_default;
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      platform_usb_clearUSBHostHIDInterfaces_cold_1();
    }

    id v7 = 0LL;
  }

  return v7;
}

id platform_usb_configureUSBHostNCMInterface(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (gLogObjects) {
    BOOL v6 = gNumLogObjects < 7;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v8 = (os_log_s *)&_os_log_default;
    id v7 = &_os_log_default;
  }

  else
  {
    uint64_t v8 = (os_log_s *)*(id *)(gLogObjects + 48);
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v15[0] = 67109378;
    v15[1] = a2;
    __int16 v16 = 2112;
    uint64_t v17 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "[#USB] Setting USB Host NCM interface to %u for connection %@",  (uint8_t *)v15,  0x12u);
  }

  id USBHostPluginInstance = _getUSBHostPluginInstance();
  BOOL v10 = (void *)objc_claimAutoreleasedReturnValue(USBHostPluginInstance);
  if ((objc_opt_respondsToSelector(v10, "configureUSBHostNCMInterface:asCarPlay:forConnectionUUID:") & 1) != 0)
  {
    id v11 = [v10 configureUSBHostNCMInterface:a2 asCarPlay:a3 forConnectionUUID:a1];
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 7)
    {
      uint64_t v12 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v12 = (os_log_s *)&_os_log_default;
      id v13 = &_os_log_default;
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      platform_usb_configureUSBHostNCMInterface_cold_1();
    }

    id v11 = 0LL;
  }

  return v11;
}

id platform_usb_unlockUSBHostInterfaces(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 7;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  else
  {
    BOOL v4 = (os_log_s *)*(id *)(gLogObjects + 48);
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 138412290;
    uint64_t v11 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[#USB] Unlocking USB interfaces for connection %@...",  (uint8_t *)&v10,  0xCu);
  }

  id USBHostPluginInstance = _getUSBHostPluginInstance();
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue(USBHostPluginInstance);
  id v7 = v6;
  if (v6) {
    id v8 = [v6 unlockUSBHostInterfacesForConnectionUUID:a1];
  }
  else {
    id v8 = 0LL;
  }

  return v8;
}

id platform_usb_lockUSBHostInterfaces(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 7;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  else
  {
    BOOL v4 = (os_log_s *)*(id *)(gLogObjects + 48);
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 138412290;
    uint64_t v11 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[#USB] Locking USB interfaces for connection %@...",  (uint8_t *)&v10,  0xCu);
  }

  id USBHostPluginInstance = _getUSBHostPluginInstance();
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue(USBHostPluginInstance);
  id v7 = v6;
  if (v6) {
    id v8 = [v6 lockUSBHostInterfacesForConnectionUUID:a1];
  }
  else {
    id v8 = 0LL;
  }

  return v8;
}

id platform_usb_setNeedOutZlp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (gLogObjects) {
    BOOL v6 = gNumLogObjects < 7;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v8 = (os_log_s *)&_os_log_default;
    id v7 = &_os_log_default;
  }

  else
  {
    id v8 = (os_log_s *)*(id *)(gLogObjects + 48);
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v15[0] = 67109634;
    v15[1] = a2;
    __int16 v16 = 1024;
    int v17 = a3;
    __int16 v18 = 2112;
    uint64_t v19 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "[#USB] Setting USB Host need Out ZLP %d (max %d) for connection %@",  (uint8_t *)v15,  0x18u);
  }

  id USBHostPluginInstance = _getUSBHostPluginInstance();
  int v10 = (void *)objc_claimAutoreleasedReturnValue(USBHostPluginInstance);
  if ((objc_opt_respondsToSelector(v10, "setNeedOutZLP:maxOutLength:forConnectionUUID:") & 1) != 0)
  {
    id v11 = [v10 setNeedOutZLP:a2 maxOutLength:a3 forConnectionUUID:a1];
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 7)
    {
      uint64_t v12 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v12 = (os_log_s *)&_os_log_default;
      id v13 = &_os_log_default;
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      platform_usb_setNeedOutZlp_cold_1();
    }

    id v11 = 0LL;
  }

  return v11;
}

void sub_1000EAC24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000EB0A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000EB558( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000EB8D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000EBD0C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000EC18C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void sub_1000EC444( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000EC6E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

LABEL_41:
}

  if (v10 >= 2)
  {
    if (gLogObjects && gNumLogObjects >= 60)
    {
      int v27 = *(os_log_s **)(gLogObjects + 472);
    }

    else
    {
      int v27 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG)) {
      _qiAuth_protocol_timeoutCallback_cold_1();
    }
  }
}

    if (gLogObjects && gNumLogObjects >= 14)
    {
      __int16 v32 = *(os_log_s **)(gLogObjects + 104);
    }

    else
    {
      __int16 v32 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)uint64_t v47 = "accAuthProtocol_endpoint_publish";
      *(_WORD *)&v47[8] = 1024;
      *(_DWORD *)uint64_t v48 = 2;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "%s: Already Authenticated, notifyAuthStatus %{coreacc:ACCAuthInfo_Status_t}d",  buf,  0x12u);
    }

    accAuthProtocol_endpoint_notifyAuthStatus(v2, 2);
    isPublished = 0;
    uint64_t v21 = v43;
    goto LABEL_50;
  }

          if (gLogObjects && gNumLogObjects >= 56)
          {
            uint64_t v19 = (os_log_s *)*(id *)(gLogObjects + 440);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            uint64_t v19 = (os_log_s *)&_os_log_default;
            int v20 = &_os_log_default;
          }

          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
            mfi4Auth_protocol_decryptIncomingData_cold_6();
          }
          int v17 = 1LL;
          goto LABEL_50;
        }

        if (((1LL << (v9 - 19)) & 0x8428A480000000LL) == 0)
        {
          if (v9 == 21011)
          {
            if (!a2) {
              goto LABEL_60;
            }
            id v13 = a1;
            __int128 v14 = a3;
            __int128 v15 = 10LL;
            __int16 v16 = 11LL;
LABEL_33:
            goto LABEL_60;
          }

          if (v12 == 1)
          {
            if (a2)
            {
              id v13 = a1;
              __int128 v14 = a3;
              __int128 v15 = 7LL;
              __int16 v16 = 8LL;
              goto LABEL_33;
            }

  -[NSMutableDictionary setObject:forKey:]( v3,  "setObject:forKey:",  self->_albumArtist,  @"ACCMediaLibraryUpdateItemAlbumArtist");
  validMask = self->_validMask;
  if ((validMask & 0x8000) == 0)
  {
LABEL_17:
    if ((validMask & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_43;
  }

  artist = self->_artist;
  if (artist)
  {
    artist = -[NSString UTF8String](artist, "UTF8String");
    validMask = self->_validMask;
  }

  a3->var13 = (char *)artist;
  a3->var0 |= 0x1000u;
  if ((validMask & 0x2000) == 0)
  {
LABEL_15:
    if ((validMask & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_45;
  }

    __break(0x5513u);
LABEL_42:
    __break(0x5519u);
    goto LABEL_43;
  }

  int v27 = 0xAAAAAAAAAAAAAAAALL;
  __int16 v28 = 0xAAAAAAAAAAAAAAAALL;
  if (__CFADD__(a2, v15)) {
    goto LABEL_41;
  }
  int v27 = (unint64_t)a2 + v15;
  __int16 v28 = 33LL;
  BOOL result = decompressECPublicKey((uint64_t)&v27, (int **)&CTOidSECP256r1, (char *)v29, 65LL);
  uint64_t v19 = v14;
  if ((_DWORD)result) {
    return result;
  }
  if (!a4) {
    goto LABEL_37;
  }
LABEL_21:
  int v20 = *a4;
  uint64_t v21 = a4[1];
  if (v21 - *a4 < v17) {
    return 393220LL;
  }
  if (v14 > (_OWORD *)v19 || v20 > v21 || v19 > v13 || v16 > v13 - v19) {
    goto LABEL_42;
  }
  __int16 v22 = ccder_sizeof_tag(2LL);
  BOOL result = ccder_sizeof_len(v16);
  int v23 = v22 + result;
  if (__CFADD__(v22, result))
  {
LABEL_43:
    __break(0x5500u);
    return result;
  }

  __int16 v24 = a4[1];
  if (__CFADD__(v24, v23)) {
    goto LABEL_41;
  }
  int v25 = (_BYTE *)(v24 + v23);
  *v25 &= ~0x80u;
LABEL_37:
  BOOL result = 0LL;
  if (a5) {
    *a5 = v17;
  }
  return result;
}

void sub_1000ECEC4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000ED178( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000ED3B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000ED670( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000ED930( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000EDBF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000EE084( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void OUTLINED_FUNCTION_5_17(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

void OUTLINED_FUNCTION_8_10( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

CFAbsoluteTime *configStream_endpoint_create(uint64_t a1)
{
  if (a1)
  {
    BOOL v2 = (CFAbsoluteTime *)calloc(1uLL, 0x28uLL);
    if (v2)
    {
      dispatch_queue_t v3 = dispatch_queue_create("ConfigStreamQ", 0LL);
      *((void *)v2 + 1) = v3;
      if (v3)
      {
        *(void *)BOOL v2 = a1;
        if (gLogObjects && gNumLogObjects >= 57)
        {
          BOOL v4 = *(os_log_s **)(gLogObjects + 448);
        }

        else
        {
          BOOL v4 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
          configStream_endpoint_create_cold_3(v4);
        }
        v2[3] = CFAbsoluteTimeGetCurrent();
        *((void *)v2 + 4) = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
        *((_BYTE *)v2 + 16) = 0;
        if (gLogObjects && gNumLogObjects >= 57)
        {
          int v5 = *(os_log_s **)(gLogObjects + 448);
        }

        else
        {
          int v5 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          v8[0] = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "configStream initSession: ",  (uint8_t *)v8,  2u);
        }
      }
    }
  }

  else
  {
    id v7 = (os_log_s *)logObjectForModule_25();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      accSNTPTimeSync_endpoint_create_cold_1(v7);
    }
    return 0LL;
  }

  return v2;
}

void *logObjectForModule_25()
{
  if (gLogObjects && gNumLogObjects >= 57) {
    return *(void **)(gLogObjects + 448);
  }
  BOOL v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

uint64_t configStream_endpoint_destroy(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void **)result;
    uint64_t v2 = *(void *)result;
    if (*(void *)result)
    {
      if (gLogObjects && gNumLogObjects >= 57)
      {
        dispatch_queue_t v3 = *(os_log_s **)(gLogObjects + 448);
      }

      else
      {
        dispatch_queue_t v3 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v5 = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "configStream cleanupSession: ", v5, 2u);
      }

      BOOL v4 = *(const void **)(v2 + 32);
      if (v4)
      {
        CFRelease(v4);
        *(void *)(v2 + 32) = 0LL;
      }

      dispatch_sync(*((dispatch_queue_t *)*v1 + 1), &__block_literal_global_28);
      dispatch_release(*((dispatch_object_t *)*v1 + 1));
      *((void *)*v1 + 1) = 0LL;
      if (*v1)
      {
        free(*v1);
        void *v1 = 0LL;
      }

      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t configStream_endpoint_processIncomingData(uint64_t result, CFTypeRef cf)
{
  if (result)
  {
    dispatch_queue_t v3 = (void *)result;
    BOOL result = 0LL;
    if (cf)
    {
      if (*v3)
      {
        CFRetain(cf);
        BOOL v4 = (dispatch_queue_s *)v3[1];
        v5[0] = _NSConcreteStackBlock;
        v5[1] = 0x40000000LL;
        _DWORD v5[2] = __configStream_endpoint_processIncomingData_block_invoke;
        v5[3] = &__block_descriptor_tmp_2_2;
        v5[4] = v3;
        v5[5] = cf;
        dispatch_async(v4, v5);
        return 1LL;
      }
    }
  }

  return result;
}

void __configStream_endpoint_processIncomingData_block_invoke(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(const __CFData **)(a1 + 40);
  if (gLogObjects && gNumLogObjects >= 57)
  {
    BOOL v4 = *(os_log_s **)(gLogObjects + 448);
  }

  else
  {
    BOOL v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    __configStream_endpoint_processIncomingData_block_invoke_cold_6(v3, (uint64_t)v2, v4);
    if (!v3) {
      goto LABEL_101;
    }
  }

  else if (!v3)
  {
    goto LABEL_101;
  }

  if (!v2) {
    goto LABEL_101;
  }
  CFArrayRef v5 = *(CFArrayRef *)v3;
  if (!*(void *)v3) {
    goto LABEL_101;
  }
  BOOL v6 = *(uint64_t **)v5;
  if (!*(void *)v5) {
    goto LABEL_101;
  }
  BytePtr = CFDataGetBytePtr(v2);
  unint64_t Length = CFDataGetLength(v2);
  int v9 = *(unsigned __int16 *)BytePtr;
  if (v9 == 6)
  {
    int v10 = _configStream_endpoint_copyAndRemoveFirstClientForRequest( (CFArrayRef *)v3,  *((unsigned __int16 *)BytePtr + 1),  BytePtr[4]);
    if (v10)
    {
      id v11 = v10;
      CFArrayRef v12 = v5;
      if (*((_WORD *)BytePtr + 3)) {
        CFDataRef v13 = CFDataCreate(kCFAllocatorDefault, BytePtr + 12, *((unsigned __int16 *)BytePtr + 3));
      }
      else {
        CFDataRef v13 = 0LL;
      }
      if (gLogObjects && gNumLogObjects >= 57)
      {
        int v38 = *(os_log_s **)(gLogObjects + 448);
      }

      else
      {
        int v38 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        uint64_t v39 = *(void *)(*(void *)v3 + 16LL);
        int v40 = *((unsigned __int16 *)BytePtr + 1);
        int v41 = *((unsigned __int16 *)BytePtr + 2);
        *(_DWORD *)buf = 138413314;
        *(void *)int v61 = v39;
        *(_WORD *)&v61[8] = 2112;
        CFTypeRef v62 = v11;
        *(_WORD *)uint64_t v63 = 1024;
        *(_DWORD *)&v63[2] = v40;
        *(_WORD *)&v63[6] = 1024;
        *(_DWORD *)&v63[8] = v41;
        *(_WORD *)&v63[12] = 2112;
        *(void *)&v63[14] = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_INFO,  "configStream processIncomingData for endpoint: %@, call configStreamPropertyResponse: clientUID %@, categoryID 0x%x, propertyID %u, propertyValue %@",  buf,  0x2Cu);
      }

      platform_connectionInfo_configStreamPropertyResponse( (uint64_t)v11,  *((void *)v12 + 2),  *v6,  *((unsigned __int16 *)BytePtr + 1),  BytePtr[4],  (uint64_t)v13,  *((_DWORD *)BytePtr + 2) == 0);
      if (CFArrayGetCount(*(CFArrayRef *)(v3 + 32)) >= 1) {
        _configStream_endpoint_sendNextClientRequest((CFArrayRef *)v3);
      }
      CFRelease(v11);
      if (!v13) {
        goto LABEL_101;
      }
      CFDataRef v42 = v13;
      goto LABEL_91;
    }

    if (gLogObjects && gNumLogObjects >= 57)
    {
      uint64_t v31 = *(os_log_s **)(gLogObjects + 448);
    }

    else
    {
      uint64_t v31 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_101;
    }
LABEL_99:
    int v45 = *((_DWORD *)v5 + 6);
    int v46 = *(unsigned __int16 *)BytePtr;
    int v47 = *((unsigned __int16 *)BytePtr + 1);
    int v48 = *((unsigned __int16 *)BytePtr + 2);
    int v49 = *((unsigned __int16 *)BytePtr + 3);
    *(_DWORD *)buf = 67110144;
    *(_DWORD *)int v61 = v45;
    *(_WORD *)&v61[4] = 1024;
    *(_DWORD *)&v61[6] = v46;
    LOWORD(v62) = 1024;
    *(_DWORD *)((char *)&v62 + 2) = v47;
    HIWORD(v62) = 1024;
    *(_DWORD *)uint64_t v63 = v48;
    *(_WORD *)&v63[4] = 1024;
    *(_DWORD *)&v63[6] = v49;
    int v37 = "configStream processIncomingData: %{coreacc:ACCEndpoint_TransportType_t}d, No client found, messageID %x, cate"
          "goryID 0x%x, propertyID %u, paramLen %u";
    goto LABEL_100;
  }

  if (v9 == 5)
  {
    CFTypeRef cf = _configStream_endpoint_copyAndRemoveFirstClientForRequest( (CFArrayRef *)v3,  *((unsigned __int16 *)BytePtr + 1),  BytePtr[4]);
    if (cf)
    {
      int v51 = v6;
      uint64_t v52 = v1;
      int v55 = (CFArrayRef *)v3;
      if (*((_WORD *)BytePtr + 3))
      {
        theDict = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
        if (*((_WORD *)BytePtr + 6))
        {
          unint64_t v14 = 0LL;
          __int128 v15 = BytePtr + 18;
          int v53 = BytePtr;
          while (1)
          {
            __int16 v16 = &BytePtr[20 * v14];
            unsigned __int16 v59 = *((_WORD *)v16 + 7);
            CFIndex v17 = *((unsigned __int16 *)v16 + 8);
            CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, v17, &kCFTypeArrayCallBacks);
            int v57 = v15;
            uint64_t v19 = v15;
            if (v17) {
              break;
            }
LABEL_38:
            CFNumberRef v26 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &v59);
            CFDictionarySetValue(theDict, v26, Mutable);
            uint64_t v27 = gLogObjects;
            int v28 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 57)
            {
              uint64_t v29 = *(os_log_s **)(gLogObjects + 448);
            }

            else
            {
              uint64_t v29 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)int v61 = v27;
                *(_WORD *)&v61[8] = 1024;
                LODWORD(v62) = v28;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                uint64_t v29 = (os_log_s *)&_os_log_default;
              }
            }

            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v30 = *((void *)*v55 + 2);
              *(_DWORD *)buf = 138413058;
              *(void *)int v61 = v30;
              *(_WORD *)&v61[8] = 2112;
              CFTypeRef v62 = cf;
              *(_WORD *)uint64_t v63 = 1024;
              *(_DWORD *)&v63[2] = v59;
              *(_WORD *)&v63[6] = 2112;
              *(void *)&v63[8] = theDict;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "configStream processIncomingData for endpoint: %@, clientUID %@, creating category list, categoryID 0x%x, categories %@",  buf,  0x26u);
            }

            BytePtr = v53;
            if (v26) {
              CFRelease(v26);
            }
            if (Mutable) {
              CFRelease(Mutable);
            }
            ++v14;
            __int128 v15 = v57 + 20;
          }

          while (1)
          {
            unsigned __int8 v20 = *v19++;
            unsigned __int8 valuePtr = v20;
            CFNumberRef v21 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
            CFArrayAppendValue(Mutable, v21);
            uint64_t v22 = gLogObjects;
            int v23 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 57)
            {
              __int16 v24 = *(os_log_s **)(gLogObjects + 448);
            }

            else
            {
              __int16 v24 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)int v61 = v22;
                *(_WORD *)&v61[8] = 1024;
                LODWORD(v62) = v23;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                __int16 v24 = (os_log_s *)&_os_log_default;
              }
            }

            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
              break;
            }
            if (v21) {
              goto LABEL_33;
            }
LABEL_34:
            if (!--v17) {
              goto LABEL_38;
            }
          }

          uint64_t v25 = *((void *)*v55 + 2);
          *(_DWORD *)buf = 138413314;
          *(void *)int v61 = v25;
          *(_WORD *)&v61[8] = 2112;
          CFTypeRef v62 = cf;
          *(_WORD *)uint64_t v63 = 1024;
          *(_DWORD *)&v63[2] = v59;
          *(_WORD *)&v63[6] = 1024;
          *(_DWORD *)&v63[8] = valuePtr;
          *(_WORD *)&v63[12] = 2112;
          *(void *)&v63[14] = Mutable;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "configStream processIncomingData for endpoint: %@, clientUID %@, creating property list for categoryID 0x%x, propertyID %u, properties %@",  buf,  0x2Cu);
          if (!v21) {
            goto LABEL_34;
          }
LABEL_33:
          CFRelease(v21);
          goto LABEL_34;
        }
      }

      else
      {
        theDict = 0LL;
      }

LABEL_101:
  int v50 = *(const void **)(v1 + 40);
  if (v50) {
    CFRelease(v50);
  }
}

uint64_t *configStream_endpoint_sendOutgoingData( uint64_t *a1, __int16 a2, __int16 a3, __int16 a4, const UInt8 *a5, unsigned int a6)
{
  BOOL v6 = a1;
  if (a1)
  {
    *(_WORD *)bytes = a2;
    __int16 v13 = a3;
    __int16 v14 = a4;
    __int16 v15 = a6;
    int v16 = 0;
    CFIndex v9 = a6;
    CFMutableArrayRef Mutable = CFDataCreateMutable(kCFAllocatorDefault, a6 + 12LL);
    CFDataAppendBytes(Mutable, bytes, 12LL);
    if (a5 && a6) {
      CFDataAppendBytes(Mutable, a5, v9);
    }
    BOOL v6 = (uint64_t *)acc_endpoint_sendOutgoingData(*v6, Mutable);
    if (Mutable) {
      CFRelease(Mutable);
    }
  }

  return v6;
}

uint64_t *configStream_getCategories(unsigned __int8 *a1, uint64_t a2)
{
  if (!a1 || !*(void *)a1) {
    goto LABEL_36;
  }
  if (!a1[16])
  {
    __int16 v14 = (os_log_s *)logObjectForModule_25();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(*(void *)a1 + 16LL);
      int v16 = a1[16];
      int v17 = 138412802;
      uint64_t v18 = v15;
      __int16 v19 = 2112;
      __int16 v21 = 1024;
      int v22 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "configStream getCategories for endpoint: %@ clientUID: %@, unable to process as categoriesAvailable = %d",  (uint8_t *)&v17,  0x1Cu);
    }

    goto LABEL_36;
  }

  if (!a2)
  {
LABEL_36:
    BOOL v4 = 0LL;
    CFIndex v9 = 0LL;
    goto LABEL_17;
  }

  BOOL v4 = *(uint64_t **)a2;
  if (*(void *)a2)
  {
    uint64_t v5 = gLogObjects;
    int v6 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 57)
    {
      id v7 = *(os_log_s **)(gLogObjects + 448);
    }

    else
    {
      id v7 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int v17 = 134218240;
        uint64_t v18 = v5;
        __int16 v19 = 1024;
        LODWORD(v20) = v6;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  (uint8_t *)&v17,  0x12u);
        BOOL v4 = *(uint64_t **)a2;
      }
    }

    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(*(void *)a1 + 16LL);
      int v17 = 138412546;
      uint64_t v18 = v8;
      __int16 v19 = 2112;
      unsigned __int8 v20 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "configStream getCategories for endpoint: %@ clientUID: %@",  (uint8_t *)&v17,  0x16u);
      BOOL v4 = *(uint64_t **)a2;
    }

    if (_configStream_endpoint_addClientRequest( (CFMutableArrayRef *)a1,  (const __CFString *)v4,  *(unsigned __int16 *)(a2 + 8),  *(unsigned __int8 *)(a2 + 10))) {
      BOOL v4 = configStream_endpoint_sendOutgoingData((uint64_t *)a1, 1, 0, 0, 0LL, 0);
    }
    else {
      BOOL v4 = 0LL;
    }
  }

  CFIndex v9 = (uint64_t **)a2;
LABEL_17:
  if (gLogObjects && gNumLogObjects >= 57)
  {
    int v10 = *(os_log_s **)(gLogObjects + 448);
  }

  else
  {
    int v10 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    if (a1)
    {
      uint64_t v11 = *(void *)a1;
      if (*(void *)a1) {
        uint64_t v11 = *(void *)(v11 + 16);
      }
      if (v9) {
        goto LABEL_27;
      }
    }

    else
    {
      uint64_t v11 = 0LL;
      if (v9)
      {
LABEL_27:
        CFArrayRef v12 = *v9;
LABEL_30:
        int v17 = 138412802;
        uint64_t v18 = v11;
        __int16 v19 = 2112;
        unsigned __int8 v20 = v12;
        __int16 v21 = 1024;
        int v22 = (int)v4;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "configStream getCachedPropertyValue for endpoint: %@ clientUID: %@, success %d",  (uint8_t *)&v17,  0x1Cu);
        goto LABEL_31;
      }
    }

    CFArrayRef v12 = 0LL;
    goto LABEL_30;
  }

uint64_t _configStream_endpoint_addClientRequest(CFMutableArrayRef *a1, const __CFString *a2, int a3, int a4)
{
  unsigned __int16 valuePtr = a3;
  unsigned __int8 v18 = a4;
  if (gLogObjects && gNumLogObjects >= 57)
  {
    uint64_t v8 = *(os_log_s **)(gLogObjects + 448);
  }

  else
  {
    uint64_t v8 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    if (a1)
    {
      CFMutableArrayRef v17 = *a1;
      if (*a1) {
        CFMutableArrayRef v17 = (CFMutableArrayRef)*((void *)v17 + 2);
      }
    }

    else
    {
      CFMutableArrayRef v17 = 0LL;
    }

    *(_DWORD *)buf = 138413058;
    CFMutableArrayRef v21 = v17;
    __int16 v22 = 2112;
    int v23 = a2;
    __int16 v24 = 1024;
    int v25 = a3;
    __int16 v26 = 1024;
    int v27 = a4;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "configStream addClientRequest for endpoint: %@, client %@, categoryID 0x%x, propertyID %u",  buf,  0x22u);
  }

  uint64_t v9 = 0LL;
  if (a1 && a2 && a1[4])
  {
    *(_OWORD *)keys = *(_OWORD *)off_1001FD0A8;
    int v34 = @"PropertyID";
    values[0] = (void *)CFStringCreateCopy(kCFAllocatorDefault, a2);
    values[1] = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    values[2] = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v18);
    CFDictionaryRef v10 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)keys,  (const void **)values,  3LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    CFArrayAppendValue(a1[4], v10);
    if (v10) {
      CFRelease(v10);
    }
    uint64_t v9 = 1LL;
  }

  if (gLogObjects && gNumLogObjects >= 57)
  {
    uint64_t v11 = *(os_log_s **)(gLogObjects + 448);
  }

  else
  {
    uint64_t v11 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    if (a1)
    {
      if (*a1) {
        CFArrayRef v12 = (__CFArray *)*((void *)*a1 + 2);
      }
      else {
        CFArrayRef v12 = 0LL;
      }
      int v13 = valuePtr;
      int v15 = v18;
      CFIndex Count = CFArrayGetCount(a1[4]);
    }

    else
    {
      CFArrayRef v12 = 0LL;
      int v13 = valuePtr;
      CFIndex Count = -1LL;
      int v15 = v18;
    }

    *(_DWORD *)buf = 138413570;
    CFMutableArrayRef v21 = v12;
    __int16 v22 = 2112;
    int v23 = a2;
    __int16 v24 = 1024;
    int v25 = v13;
    __int16 v26 = 1024;
    int v27 = v15;
    __int16 v28 = 1024;
    int v29 = v9;
    __int16 v30 = 2048;
    CFIndex v31 = Count;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "configStream addClientRequest for endpoint: %@, client %@, categoryID 0x%x, propertyID %u, success %d, requestList count %ld",  buf,  0x32u);
  }

  return v9;
}

uint64_t *configStream_getCachedPropertyValue(unsigned __int8 *a1, uint64_t a2)
{
  if (!a1 || !*(void *)a1) {
    goto LABEL_36;
  }
  if (!a1[16])
  {
    __int16 v14 = (os_log_s *)logObjectForModule_25();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(*(void *)a1 + 16LL);
      int v16 = a1[16];
      int v17 = 138412802;
      uint64_t v18 = v15;
      __int16 v19 = 2112;
      __int16 v21 = 1024;
      int v22 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "configStream getCachedPropertyValue for endpoint: %@ clientUID: %@, unable to process as categoriesAvailable = %d",  (uint8_t *)&v17,  0x1Cu);
    }

    goto LABEL_36;
  }

  if (!a2)
  {
LABEL_36:
    BOOL v4 = 0LL;
    uint64_t v9 = 0LL;
    goto LABEL_17;
  }

  BOOL v4 = *(uint64_t **)a2;
  if (*(void *)a2)
  {
    uint64_t v5 = gLogObjects;
    int v6 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 57)
    {
      id v7 = *(os_log_s **)(gLogObjects + 448);
    }

    else
    {
      id v7 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int v17 = 134218240;
        uint64_t v18 = v5;
        __int16 v19 = 1024;
        LODWORD(v20) = v6;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  (uint8_t *)&v17,  0x12u);
        BOOL v4 = *(uint64_t **)a2;
      }
    }

    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(*(void *)a1 + 16LL);
      int v17 = 138412546;
      uint64_t v18 = v8;
      __int16 v19 = 2112;
      unsigned __int8 v20 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "configStream getCachedPropertyValue for endpoint: %@ clientUID: %@",  (uint8_t *)&v17,  0x16u);
      BOOL v4 = *(uint64_t **)a2;
    }

    if (_configStream_endpoint_addClientRequest( (CFMutableArrayRef *)a1,  (const __CFString *)v4,  *(unsigned __int16 *)(a2 + 8),  *(unsigned __int8 *)(a2 + 10))) {
      BOOL v4 = configStream_endpoint_sendOutgoingData( (uint64_t *)a1,  2,  *(_WORD *)(a2 + 8),  *(unsigned __int8 *)(a2 + 10),  0LL,  0);
    }
    else {
      BOOL v4 = 0LL;
    }
  }

  uint64_t v9 = (uint64_t **)a2;
LABEL_17:
  if (gLogObjects && gNumLogObjects >= 57)
  {
    CFDictionaryRef v10 = *(os_log_s **)(gLogObjects + 448);
  }

  else
  {
    CFDictionaryRef v10 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    if (a1)
    {
      uint64_t v11 = *(void *)a1;
      if (*(void *)a1) {
        uint64_t v11 = *(void *)(v11 + 16);
      }
      if (v9) {
        goto LABEL_27;
      }
    }

    else
    {
      uint64_t v11 = 0LL;
      if (v9)
      {
LABEL_27:
        CFArrayRef v12 = *v9;
LABEL_30:
        int v17 = 138412802;
        uint64_t v18 = v11;
        __int16 v19 = 2112;
        unsigned __int8 v20 = v12;
        __int16 v21 = 1024;
        int v22 = (int)v4;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "configStream getCachedPropertyValue for endpoint: %@ clientUID: %@, success %d",  (uint8_t *)&v17,  0x1Cu);
        goto LABEL_31;
      }
    }

    CFArrayRef v12 = 0LL;
    goto LABEL_30;
  }

uint64_t *configStream_requestGetProperty(unsigned __int8 *a1, uint64_t a2)
{
  if (!a1 || !*(void *)a1) {
    goto LABEL_36;
  }
  if (!a1[16])
  {
    int v16 = (os_log_s *)logObjectForModule_25();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(*(void *)a1 + 16LL);
      int v18 = a1[16];
      int v19 = 138412802;
      uint64_t v20 = v17;
      __int16 v21 = 2112;
      __int16 v23 = 1024;
      int v24 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "configStream requestGetProperty for endpoint: %@ clientUID: %@, unable to process as categoriesAvailable = %d",  (uint8_t *)&v19,  0x1Cu);
    }

    goto LABEL_36;
  }

  if (!a2)
  {
LABEL_36:
    ClientRequest = 0LL;
    uint64_t v9 = 0LL;
    goto LABEL_17;
  }

  ClientRequest = *(uint64_t **)a2;
  if (*(void *)a2)
  {
    uint64_t v5 = gLogObjects;
    int v6 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 57)
    {
      id v7 = *(os_log_s **)(gLogObjects + 448);
    }

    else
    {
      id v7 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int v19 = 134218240;
        uint64_t v20 = v5;
        __int16 v21 = 1024;
        LODWORD(v22) = v6;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  (uint8_t *)&v19,  0x12u);
        ClientRequest = *(uint64_t **)a2;
      }
    }

    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(*(void *)a1 + 16LL);
      int v19 = 138412546;
      uint64_t v20 = v8;
      __int16 v21 = 2112;
      int v22 = ClientRequest;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "configStream requestGetProperty for endpoint: %@ clientUID: %@",  (uint8_t *)&v19,  0x16u);
      ClientRequest = *(uint64_t **)a2;
    }

    if (_configStream_endpoint_addClientRequest( (CFMutableArrayRef *)a1,  (const __CFString *)ClientRequest,  *(unsigned __int16 *)(a2 + 8),  *(unsigned __int8 *)(a2 + 10))) {
      ClientRequest = _configStream_endpoint_sendNextClientRequest((CFArrayRef *)a1);
    }
    else {
      ClientRequest = 0LL;
    }
  }

  uint64_t v9 = a2;
LABEL_17:
  if (gLogObjects && gNumLogObjects >= 57)
  {
    CFDictionaryRef v10 = *(os_log_s **)(gLogObjects + 448);
  }

  else
  {
    CFDictionaryRef v10 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    if (a1)
    {
      CFArrayRef v11 = *(CFArrayRef *)a1;
      if (*(void *)a1) {
        CFArrayRef v11 = (CFArrayRef)*((void *)v11 + 2);
      }
      if (v9) {
        goto LABEL_27;
      }
    }

    else
    {
      CFArrayRef v11 = 0LL;
      if (v9)
      {
LABEL_27:
        CFArrayRef v12 = *(uint64_t **)v9;
        int v13 = *(unsigned __int16 *)(v9 + 8);
        int v14 = *(unsigned __int8 *)(v9 + 10);
LABEL_30:
        int v19 = 138413314;
        uint64_t v20 = (uint64_t)v11;
        __int16 v21 = 2112;
        int v22 = v12;
        __int16 v23 = 1024;
        int v24 = v13;
        __int16 v25 = 1024;
        int v26 = v14;
        __int16 v27 = 1024;
        int v28 = (int)ClientRequest;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "configStream requestGetProperty for endpoint: %@ clientUID: %@, categoryID 0x%x, propertyID %u, success %d",  (uint8_t *)&v19,  0x28u);
        goto LABEL_31;
      }
    }

    CFArrayRef v12 = 0LL;
    int v13 = -1;
    int v14 = -1;
    goto LABEL_30;
  }

uint64_t *_configStream_endpoint_sendNextClientRequest(CFArrayRef *a1)
{
  if (!a1 || !*a1) {
    goto LABEL_42;
  }
  if (gLogObjects && gNumLogObjects >= 57)
  {
    uint64_t v2 = *(os_log_s **)(gLogObjects + 448);
  }

  else
  {
    uint64_t v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    _configStream_endpoint_sendNextClientRequest_cold_3((uint64_t)a1, v2);
  }
  uint64_t v3 = a1[4];
  if (!v3) {
    goto LABEL_42;
  }
  uint64_t v4 = gLogObjects;
  int v5 = gNumLogObjects;
  if (gLogObjects && gNumLogObjects >= 57)
  {
    int v6 = *(os_log_s **)(gLogObjects + 448);
  }

  else
  {
    int v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      uint64_t v25 = v4;
      __int16 v26 = 1024;
      LODWORD(v27[0]) = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
      uint64_t v3 = a1[4];
    }
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v20 = *((void *)*a1 + 2);
    CFIndex Count = CFArrayGetCount(v3);
    *(_DWORD *)buf = 138412546;
    uint64_t v25 = v20;
    __int16 v26 = 2048;
    v27[0] = Count;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "configStream sendNextClientRequest for endpoint: %@, requestList count %ld",  buf,  0x16u);
    uint64_t v3 = a1[4];
  }

  if (CFArrayGetCount(v3) >= 1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1[4], 0LL);
    uint64_t v8 = (uint64_t *)ValueAtIndex;
    if (ValueAtIndex)
    {
      unsigned __int16 valuePtr = -21846;
      unsigned __int8 v22 = -86;
      uint64_t Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"CategoryID");
      CFDictionaryRef v10 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v8, @"PropertyID");
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
      CFNumberGetValue(v10, kCFNumberIntType, &v22);
      if (gLogObjects && gNumLogObjects >= 57)
      {
        CFArrayRef v11 = *(os_log_s **)(gLogObjects + 448);
      }

      else
      {
        CFArrayRef v11 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = *((void *)*a1 + 2);
        int v13 = valuePtr;
        int v14 = v22;
        uint64_t v15 = CFDictionaryGetValue((CFDictionaryRef)v8, @"ClientUID");
        *(_DWORD *)buf = 138413058;
        uint64_t v25 = v12;
        __int16 v26 = 1024;
        LODWORD(v27[0]) = v13;
        WORD2(v27[0]) = 1024;
        *(_DWORD *)((char *)v27 + 6) = v14;
        WORD1(v27[1]) = 2112;
        *(void *)((char *)&v27[1] + 4) = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "configStream sendNextClientRequest for endpoint: %@, send RequestGetProperty: categoryID 0x%x, propertyID %u, client %@",  buf,  0x22u);
      }

      uint64_t v8 = configStream_endpoint_sendOutgoingData((uint64_t *)a1, 3, valuePtr, v22, 0LL, 0);
    }
  }

  else
  {
LABEL_42:
    uint64_t v8 = 0LL;
  }

  if (gLogObjects && gNumLogObjects >= 57)
  {
    int v16 = *(os_log_s **)(gLogObjects + 448);
  }

  else
  {
    int v16 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    if (a1)
    {
      if (*a1) {
        uint64_t v17 = *((void *)*a1 + 2);
      }
      else {
        uint64_t v17 = 0LL;
      }
      CFIndex v18 = CFArrayGetCount(a1[4]);
    }

    else
    {
      uint64_t v17 = 0LL;
      CFIndex v18 = -1LL;
    }

    *(_DWORD *)buf = 138412802;
    uint64_t v25 = v17;
    __int16 v26 = 1024;
    LODWORD(v27[0]) = (_DWORD)v8;
    WORD2(v27[0]) = 2048;
    *(void *)((char *)v27 + 6) = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "configStream sendNextClientRequest for endpoint: %@, success %d, requestList count %ld",  buf,  0x1Cu);
  }

  return v8;
}

uint64_t *configStream_setPropertyValue(unsigned __int8 *a1, uint64_t a2)
{
  if (!a1 || !*(void *)a1) {
    goto LABEL_34;
  }
  if (!a1[16])
  {
    uint64_t v20 = (os_log_s *)logObjectForModule_25();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = *(void *)(*(void *)a1 + 16LL);
      int v22 = a1[16];
      int v23 = 138412802;
      uint64_t v24 = v21;
      __int16 v25 = 2112;
      __int16 v27 = 1024;
      int v28 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "configStream setPropertyValue for endpoint: %@ clientUID: %@, unable to process as categoriesAvailable = %d",  (uint8_t *)&v23,  0x1Cu);
    }

    goto LABEL_34;
  }

  if (!a2)
  {
LABEL_34:
    CFArrayRef v11 = 0LL;
    uint64_t v12 = 0LL;
    goto LABEL_15;
  }

  if (*(void *)a2)
  {
    if (gLogObjects && gNumLogObjects >= 57)
    {
      uint64_t v4 = *(os_log_s **)(gLogObjects + 448);
    }

    else
    {
      uint64_t v4 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(*(void *)a1 + 16LL);
      int v6 = *(const void **)a2;
      int v23 = 138412546;
      uint64_t v24 = v5;
      __int16 v25 = 2112;
      __int16 v26 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "configStream setPropertyValue for endpoint: %@ clientUID: %@",  (uint8_t *)&v23,  0x16u);
    }

    __int16 v7 = *(_WORD *)(a2 + 8);
    __int16 v8 = *(unsigned __int8 *)(a2 + 10);
    BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a2 + 16));
    unsigned __int16 Length = CFDataGetLength(*(CFDataRef *)(a2 + 16));
    CFArrayRef v11 = configStream_endpoint_sendOutgoingData((uint64_t *)a1, 4, v7, v8, BytePtr, Length);
  }

  else
  {
    CFArrayRef v11 = 0LL;
  }

  uint64_t v12 = a2;
LABEL_15:
  if (gLogObjects && gNumLogObjects >= 57)
  {
    int v13 = *(os_log_s **)(gLogObjects + 448);
  }

  else
  {
    int v13 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    if (a1)
    {
      uint64_t v14 = *(void *)a1;
      if (*(void *)a1) {
        uint64_t v14 = *(void *)(v14 + 16);
      }
      if (v12) {
        goto LABEL_25;
      }
    }

    else
    {
      uint64_t v14 = 0LL;
      if (v12)
      {
LABEL_25:
        uint64_t v15 = *(const void **)v12;
        int v16 = *(unsigned __int16 *)(v12 + 8);
        int v17 = *(unsigned __int8 *)(v12 + 10);
        uint64_t v18 = *(void *)(v12 + 16);
LABEL_28:
        int v23 = 138413570;
        uint64_t v24 = v14;
        __int16 v25 = 2112;
        __int16 v26 = v15;
        __int16 v27 = 1024;
        int v28 = v16;
        __int16 v29 = 1024;
        int v30 = v17;
        __int16 v31 = 2112;
        uint64_t v32 = v18;
        __int16 v33 = 1024;
        int v34 = (int)v11;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "configStream setPropertyValue for endpoint: %@ clientUID: %@, categoryID 0x%x, propertyID %u, value %@, success %d",  (uint8_t *)&v23,  0x32u);
        goto LABEL_29;
      }
    }

    uint64_t v15 = 0LL;
    uint64_t v18 = 0LL;
    int v17 = -1;
    int v16 = -1;
    goto LABEL_28;
  }

const void *_configStream_endpoint_copyAndRemoveFirstClientForRequest(CFArrayRef *a1, int a2, int a3)
{
  if (gLogObjects && gNumLogObjects >= 57)
  {
    uint64_t v4 = *(os_log_s **)(gLogObjects + 448);
  }

  else
  {
    uint64_t v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    if (a1)
    {
      CFArrayRef v21 = *a1;
      if (*a1) {
        CFArrayRef v21 = (CFArrayRef)*((void *)v21 + 2);
      }
    }

    else
    {
      CFArrayRef v21 = 0LL;
    }

    *(_DWORD *)buf = 138412802;
    uint64_t v34 = (uint64_t)v21;
    __int16 v35 = 1024;
    *(_DWORD *)int v36 = a2;
    *(_WORD *)&void v36[4] = 1024;
    *(_DWORD *)&v36[6] = a3;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "configStream copyAndRemoveFirstClientForRequest for endpoint: %@, categoryID 0x%x, propertyID %u",  buf,  0x18u);
    if (!a1) {
      goto LABEL_46;
    }
  }

  else if (!a1)
  {
    goto LABEL_46;
  }

  uint64_t v5 = a1[4];
  if (!v5) {
    goto LABEL_46;
  }
  if (CFArrayGetCount(a1[4]) < 1)
  {
    LODWORD(v6) = -1;
  }

  else
  {
    int v28 = a1;
    CFIndex v6 = 0LL;
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v5, v6);
      if (ValueAtIndex)
      {
        __int16 v8 = ValueAtIndex;
        unsigned __int16 valuePtr = -21846;
        unsigned __int8 v31 = -86;
        uint64_t Value = CFDictionaryGetValue(ValueAtIndex, @"ClientUID");
        CFDictionaryRef v10 = (const __CFNumber *)CFDictionaryGetValue(v8, @"CategoryID");
        CFArrayRef v11 = (const __CFNumber *)CFDictionaryGetValue(v8, @"PropertyID");
        CFNumberGetValue(v10, kCFNumberIntType, &valuePtr);
        CFNumberGetValue(v11, kCFNumberIntType, &v31);
        uint64_t v12 = gLogObjects;
        int v13 = gNumLogObjects;
        if (!gLogObjects) {
          goto LABEL_15;
        }
        if (gNumLogObjects >= 57)
        {
          uint64_t v14 = *(os_log_s **)(gLogObjects + 448);
        }

        else
        {
LABEL_15:
          uint64_t v14 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            uint64_t v34 = v12;
            __int16 v35 = 1024;
            *(_DWORD *)int v36 = v13;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            uint64_t v14 = (os_log_s *)&_os_log_default;
          }
        }

        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          CFArrayRef v15 = *v28;
          if (*v28) {
            CFArrayRef v15 = (CFArrayRef)*((void *)v15 + 2);
          }
          *(_DWORD *)buf = 138413826;
          uint64_t v34 = (uint64_t)v15;
          __int16 v35 = 2112;
          *(void *)int v36 = Value;
          *(_WORD *)&v36[8] = 2112;
          *(void *)int v37 = 0LL;
          *(_WORD *)&v37[8] = 1024;
          *(_DWORD *)&_BYTE v37[10] = valuePtr;
          *(_WORD *)&_BYTE v37[14] = 1024;
          *(_DWORD *)&v37[16] = a2;
          __int16 v38 = 1024;
          int v39 = v31;
          __int16 v40 = 1024;
          int v41 = a3;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "configStream findClientRequest for endpoint: %@, clientUID %@ ?= %@, categoryID 0x%x ?= %u, propertyID %u ?= %u",  buf,  0x38u);
        }

        if (valuePtr == a2 && v31 == a3) {
          break;
        }
      }

      if (CFArrayGetCount(v5) <= ++v6)
      {
        LODWORD(v6) = -1;
        break;
      }
    }

    a1 = v28;
  }

  if (gLogObjects && gNumLogObjects >= 57)
  {
    int v16 = *(os_log_s **)(gLogObjects + 448);
  }

  else
  {
    int v16 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_34;
    }
LABEL_46:
    uint64_t v20 = 0LL;
    goto LABEL_47;
  }

  if (*a1) {
    uint64_t v22 = *((void *)*a1 + 2);
  }
  else {
    uint64_t v22 = 0LL;
  }
  CFIndex Count = CFArrayGetCount(a1[4]);
  *(_DWORD *)buf = 138413314;
  uint64_t v34 = v22;
  __int16 v35 = 1024;
  *(_DWORD *)int v36 = a2;
  *(_WORD *)&void v36[4] = 1024;
  *(_DWORD *)&v36[6] = a3;
  *(_WORD *)int v37 = 1024;
  *(_DWORD *)&v37[2] = v6;
  *(_WORD *)&_BYTE v37[6] = 2048;
  *(void *)&v37[8] = Count;
  _os_log_debug_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "configStream findClientRequest for endpoint: %@, categoryID 0x%x, propertyID %u, foundIndex %d, requestList count %ld",  buf,  0x28u);
  if ((v6 & 0x80000000) != 0) {
    goto LABEL_46;
  }
LABEL_34:
  int v17 = a1[4];
  CFIndex v18 = v6;
  int v19 = (const __CFDictionary *)CFArrayGetValueAtIndex(v17, v6);
  if (!v19) {
    goto LABEL_46;
  }
  uint64_t v20 = CFDictionaryGetValue(v19, @"ClientUID");
  CFRetain(v20);
  CFArrayRemoveValueAtIndex(v17, v18);
LABEL_47:
  if (gLogObjects && gNumLogObjects >= 57)
  {
    uint64_t v24 = *(os_log_s **)(gLogObjects + 448);
  }

  else
  {
    uint64_t v24 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    if (a1)
    {
      if (*a1) {
        uint64_t v25 = *((void *)*a1 + 2);
      }
      else {
        uint64_t v25 = 0LL;
      }
      CFIndex v26 = CFArrayGetCount(a1[4]);
    }

    else
    {
      uint64_t v25 = 0LL;
      CFIndex v26 = -1LL;
    }

    *(_DWORD *)buf = 138413314;
    uint64_t v34 = v25;
    __int16 v35 = 1024;
    *(_DWORD *)int v36 = a2;
    *(_WORD *)&void v36[4] = 1024;
    *(_DWORD *)&v36[6] = a3;
    *(_WORD *)int v37 = 2112;
    *(void *)&v37[2] = v20;
    *(_WORD *)&_BYTE v37[10] = 2048;
    *(void *)&v37[12] = v26;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "configStream copyAndRemoveFirstClientForRequest for endpoint: %@, categoryID 0x%x, propertyID %u, client %@, reque stList count %ld",  buf,  0x2Cu);
  }

  return v20;
}

id platform_location_getSupportedNMEASentences()
{
  BOOL v0 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformLocationManager sharedManager](&OBJC_CLASS___ACCPlatformLocationManager, "sharedManager"));
  id v1 = [v0 supportedNMEASentenceMask];

  return v1;
}

id platform_location_setSupportedNMEASentencesForEndpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformLocationManager sharedManager](&OBJC_CLASS___ACCPlatformLocationManager, "sharedManager"));
  id v5 = [v4 setLocationEndpointUUID:a1 withSupportedNMEASentences:a2];

  return v5;
}

id platform_location_resetSupportedNMEASentencesForEndpoint(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformLocationManager sharedManager](&OBJC_CLASS___ACCPlatformLocationManager, "sharedManager"));
  id v3 = [v2 resetLocationEndpointUUID:a1];

  return v3;
}

id platform_location_update(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v4 timeIntervalSince1970];
  double v6 = v5;

  __int16 v7 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int16 v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v6));
  -[NSMutableArray addObject:](v7, "addObject:", v8);

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[ACCExternalAccessoryServer sharedServer](&OBJC_CLASS___ACCExternalAccessoryServer, "sharedServer"));
  id v10 = [v9 sendNMEASentence:a2 forAccessoryUUID:a1 withTimestamps:v7];

  return v10;
}

id platform_location_start(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformLocationManager sharedManager](&OBJC_CLASS___ACCPlatformLocationManager, "sharedManager"));
  id v3 = [v2 startLocationUpdatesForUUID:a1];

  return v3;
}

id platform_location_stop(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformLocationManager sharedManager](&OBJC_CLASS___ACCPlatformLocationManager, "sharedManager"));
  id v3 = [v2 stopLocationUpdatesForUUID:a1];

  return v3;
}

id platform_location_sendNMEAFilterList(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformLocationManager sharedManager](&OBJC_CLASS___ACCPlatformLocationManager, "sharedManager"));
  id v5 = [v4 setNMEAFilterList:a2 forUUID:a1];

  return v5;
}

id platform_location_sendGPRMCDataStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int16 v8 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformLocationManager sharedManager](&OBJC_CLASS___ACCPlatformLocationManager, "sharedManager"));
  id v9 = [v8 sendGPRMCDataStatus:a2 valueV:a3 valueX:a4 forUUID:a1];

  return v9;
}

void OUTLINED_FUNCTION_3_12( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

uint64_t OUTLINED_FUNCTION_11_4(uint64_t a1, uint64_t a2)
{
  return a2;
}

  ;
}

uint64_t qiAuth_protocol_init( uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5, int a6, uint64_t a7, __int16 a8)
{
  if (gLogObjects && gNumLogObjects >= 60)
  {
    uint64_t v13 = a2;
    uint64_t v14 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    uint64_t v13 = a2;
    uint64_t v14 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315906;
    CFArrayRef v21 = "qiAuth_protocol_init";
    __int16 v22 = 1024;
    int v23 = 75;
    __int16 v24 = 1024;
    int v25 = a3;
    __int16 v26 = 1024;
    int v27 = a6;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%s:%d role %d, slotsSupportedMask 0x%X",  buf,  0x1Eu);
  }

  uint64_t v15 = 4294967294LL;
  if (a1 && a4 && a5 <= 1)
  {
    *(void *)a1 = v13;
    *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = a3;
    *(_BYTE *)(a1 + 24) = a6;
    *(void *)(a1 + 32) = a7;
    *(_WORD *)(a1 + 40) = a8;
    *(void *)(a1 + 16) = 0LL;
    *(_BYTE *)(a1 + 13) = a4;
    *(_BYTE *)(a1 + 14) = a5;
    *(_BYTE *)(a1 + 12) = a5;
    *(_OWORD *)(a1 + 22_Block_object_dispose(va, 8) = 0u;
    *(_DWORD *)(a1 + 244) = 0;
    *(_DWORD *)(a1 + 220) = -1;
    *(_BYTE *)(a1 + 224) = 0;
    *(_WORD *)(a1 + 215) = 1280;
    *(_WORD *)(a1 + 24_Block_object_dispose(va, 8) = 0;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 28_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(a1 + 304) = 0u;
    *(_WORD *)(a1 + 320) = 0;
    *(_BYTE *)(a1 + 322) = 0;
    *(void *)(a1 + 324) = 0LL;
    *(_OWORD *)(a1 + 336) = 0u;
    *(_OWORD *)(a1 + 352) = 0u;
    bzero((void *)(a1 + 368), 0x600uLL);
    *(_WORD *)(a1 + 1904) = 0;
    *(_OWORD *)(a1 + 1906) = 0u;
    *(_DWORD *)(a1 + 1922) = 0;
    *(_OWORD *)(a1 + 1926) = 0u;
    *(_WORD *)(a1 + 1942) = 0;
    uint64_t v15 = t56_util_init(a1);
  }

  if (gLogObjects && gNumLogObjects >= 60)
  {
    int v16 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    int v16 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136316162;
    CFArrayRef v21 = "qiAuth_protocol_init";
    __int16 v22 = 1024;
    int v23 = 147;
    __int16 v24 = 1024;
    int v25 = v15;
    __int16 v26 = 1024;
    int v27 = a3;
    __int16 v28 = 1024;
    int v29 = a6;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "%s:%d result %d, role %d, slotsSupportedMask 0x%X",  buf,  0x24u);
  }

  return v15;
}

double qiAuth_protocol_cleanup(uint64_t a1, void *a2, _WORD *a3)
{
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 60)
    {
      double v6 = *(os_log_s **)(gLogObjects + 472);
    }

    else
    {
      double v6 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(a1 + 8);
      int v8 = *(unsigned __int8 *)(a1 + 24);
      int v13 = 136316162;
      uint64_t v14 = "qiAuth_protocol_cleanup";
      __int16 v15 = 1024;
      int v16 = 156;
      __int16 v17 = 1024;
      int v18 = v7;
      __int16 v19 = 1024;
      int v20 = v8;
      __int16 v21 = 1024;
      int v22 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s:%d role %d, slotsSupportedMask 0x%X -> 0x%X",  (uint8_t *)&v13,  0x24u);
    }

    t56_util_cleanup(a1);
    *(_BYTE *)(a1 + 12) = *(_BYTE *)(a1 + 14);
    *(_BYTE *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 44) = 0;
    if (a2) {
      *a2 = *(void *)(a1 + 32);
    }
    if (a3) {
      *a3 = *(_WORD *)(a1 + 40);
    }
    if (gLogObjects && gNumLogObjects >= 60)
    {
      id v9 = *(os_log_s **)(gLogObjects + 472);
    }

    else
    {
      id v9 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v10 = *(_DWORD *)(a1 + 8);
      int v13 = 136315650;
      uint64_t v14 = "qiAuth_protocol_cleanup";
      __int16 v15 = 1024;
      int v16 = 175;
      __int16 v17 = 1024;
      int v18 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s:%d role %d, clear authState and rx digest / cert cache",  (uint8_t *)&v13,  0x18u);
    }

    *(_BYTE *)(a1 + 216) = 0;
    *(_BYTE *)(a1 + 224) = 0;
    *(void *)(a1 + 236) = 0LL;
    *(void *)(a1 + 22_Block_object_dispose(va, 8) = 0LL;
    *(_DWORD *)(a1 + 244) = 0;
    unsigned int v11 = *(_DWORD *)(a1 + 220);
    if ((v11 & 0x80000000) == 0)
    {
      qiAuth_util_cancelTimer((const void **)a1, v11);
      *(_DWORD *)(a1 + 220) = -1;
    }

    *(_BYTE *)(a1 + 215) = 0;
    *(_WORD *)(a1 + 24_Block_object_dispose(va, 8) = 0;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 28_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(a1 + 304) = 0u;
    *(_WORD *)(a1 + 320) = 0;
    *(_BYTE *)(a1 + 322) = 0;
    *(void *)(a1 + 324) = 0LL;
    *(_OWORD *)(a1 + 336) = 0u;
    *(_OWORD *)(a1 + 352) = 0u;
    bzero((void *)(a1 + 368), 0x600uLL);
    *(_WORD *)(a1 + 1904) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 1906) = 0u;
    *(_DWORD *)(a1 + 1922) = 0;
    *(_OWORD *)(a1 + 1926) = 0u;
    *(_WORD *)(a1 + 1942) = 0;
  }

  return result;
}

uint64_t qiAuth_protocol_start(uint64_t a1)
{
  if (!a1 || !*(void *)(a1 + 32) || *(unsigned __int16 *)(a1 + 40) < 2u)
  {
    uint64_t v3 = 4294967294LL;
    goto LABEL_8;
  }

  if (gLogObjects && gNumLogObjects >= 60)
  {
    uint64_t v2 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    uint64_t v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  BOOL v6 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    unsigned int v7 = *(_DWORD *)(a1 + 8);
    int v8 = *(unsigned __int16 *)(a1 + 40);
    int v21 = 136315906;
    int v22 = "qiAuth_protocol_start";
    __int16 v23 = 1024;
    int v24 = 251;
    __int16 v25 = 1024;
    unsigned int v26 = v7;
    __int16 v27 = 1024;
    int v28 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s:%d role %d, outMsgBufferSize %d",  (uint8_t *)&v21,  0x1Eu);
  }

  if (*(_DWORD *)(a1 + 8) || (int v10 = *(_BYTE **)(a1 + 32)) == 0LL || (v11 = *(unsigned __int16 *)(a1 + 40), v11 < 2))
  {
    unsigned int inited = -2;
    goto LABEL_22;
  }

  *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = 4;
  unsigned int inited = qiAuth_protocol_initMsg_GET_DIGESTS(v6, *(unsigned __int8 *)(a1 + 12), 1u, v10, v11, (_WORD *)(a1 + 42));
  if (inited)
  {
LABEL_22:
    if (*(_DWORD *)(a1 + 8) >= 2u) {
      uint64_t v3 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v3 = inited;
    }
    goto LABEL_8;
  }

  unsigned int v12 = qiAuth_protocol_timeoutForRequest(a1, **(_BYTE **)(a1 + 32) & 0xF, 0x7Fu);
  uint64_t v13 = (unint64_t)*(unsigned __int8 *)(a1 + 48) << 16;
  if ((*(_DWORD *)(a1 + 220) & 0x80000000) == 0)
  {
    uint64_t v14 = (os_log_s *)logObjectForModule_19();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = *(_DWORD *)(a1 + 44);
      int v16 = qiAuth_protocol_msgTypeString(v15);
      int v21 = 136316162;
      int v22 = "qiAuth_protocol_start";
      __int16 v23 = 1024;
      int v24 = 269;
      __int16 v25 = 1024;
      unsigned int v26 = v12;
      __int16 v27 = 1024;
      int v28 = v15;
      __int16 v29 = 2080;
      int v30 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%s:%d Cancel responseTimer, %u ms, outMsgType %u(%s)",  (uint8_t *)&v21,  0x28u);
    }

    qiAuth_util_cancelTimer((const void **)a1, *(_DWORD *)(a1 + 220));
  }

  __int16 v17 = (os_log_s *)logObjectForModule_19();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    int v18 = **(_BYTE **)(a1 + 32) & 0xF;
    int v21 = 136315906;
    int v22 = "qiAuth_protocol_start";
    __int16 v23 = 1024;
    int v24 = 273;
    __int16 v25 = 1024;
    unsigned int v26 = v12;
    __int16 v27 = 1024;
    int v28 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "%s:%d Start responseTimer, %u ms, outMsgType %u",  (uint8_t *)&v21,  0x1Eu);
  }

  int v19 = qiAuth_util_callbackOnTimer((const void **)a1, v12, (uint64_t)_qiAuth_protocol_timeoutCallback, v13);
  if ((v19 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 220) = v19;
    qiAuth_protocol_sendData(a1, *(const UInt8 **)(a1 + 32), *(unsigned __int16 *)(a1 + 42));
    unsigned int inited = 0;
    goto LABEL_22;
  }

  int v20 = (os_log_s *)logObjectForModule_19();
  uint64_t v3 = 0LL;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    int v21 = 136315394;
    int v22 = "qiAuth_protocol_start";
    __int16 v23 = 1024;
    int v24 = 276;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "%s:%d Failed to start timer!!!",  (uint8_t *)&v21,  0x12u);
    uint64_t v3 = 0LL;
  }

uint64_t qiAuth_protocol_initMsg_GET_DIGESTS( uint64_t a1, int a2, unsigned int a3, _BYTE *a4, unsigned int a5, _WORD *a6)
{
  if (gLogObjects && gNumLogObjects >= 60)
  {
    unsigned int v11 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    unsigned int v11 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    qiAuth_protocol_initMsg_GET_DIGESTS_cold_2();
    if (!a4) {
      goto LABEL_12;
    }
  }

  else if (!a4)
  {
    goto LABEL_12;
  }

  if (a3 <= 0xF && a5 >= 2)
  {
    uint64_t v12 = 0LL;
    *a4 = (16 * a2) | 9;
    a4[1] = a3;
    *a6 = 2;
    goto LABEL_13;
  }

uint64_t qiAuth_protocol_timeoutForRequest(uint64_t a1, int a2, unsigned int a3)
{
  switch(a2)
  {
    case 9:
      return 43000LL;
    case 11:
      return 23000LL;
    case 10:
      if (a3 <= 3) {
        return 5LL;
      }
      else {
        return 300 * a3 + 4000;
      }
    default:
      if (gLogObjects && gNumLogObjects >= 60)
      {
        BOOL v6 = *(os_log_s **)(gLogObjects + 472);
      }

      else
      {
        BOOL v6 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      uint64_t result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        qiAuth_protocol_timeoutForRequest_cold_1(a1, a2, v6);
        return 0LL;
      }

      break;
  }

  return result;
}

const char *qiAuth_protocol_msgTypeString(int a1)
{
  else {
    return off_1001FD120[a1 - 1];
  }
}

void _qiAuth_protocol_timeoutCallback(uint64_t a1, int a2, unsigned int a3)
{
  if (!a1 || a2 < 0) {
    return;
  }
  int v6 = a3;
  if (gLogObjects && gNumLogObjects >= 60)
  {
    unsigned int v7 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    unsigned int v7 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  unsigned int v8 = HIWORD(a3) & 0xF;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = *(_DWORD *)(a1 + 8);
    int v30 = 136316674;
    __int16 v31 = "_qiAuth_protocol_timeoutCallback";
    __int16 v32 = 1024;
    int v33 = 1337;
    __int16 v34 = 1024;
    int v35 = a2;
    __int16 v36 = 1024;
    int v37 = v6;
    __int16 v38 = 1024;
    int v39 = v9;
    __int16 v40 = 1024;
    int v41 = HIWORD(a3) & 0xF;
    __int16 v42 = 1024;
    unsigned int v43 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s:%d Timeout: timer %d, type %d, role %d, slot %d, context %u",  (uint8_t *)&v30,  0x30u);
  }

  unsigned int v11 = (unsigned int *)(a1 + 8);
  unsigned int v10 = *(_DWORD *)(a1 + 8);
  if (!v10)
  {
    if (*(_DWORD *)(a1 + 220) != a2)
    {
LABEL_40:
      unsigned int v10 = *v11;
      goto LABEL_41;
    }

    *(_DWORD *)(a1 + 220) = -1;
    if (a3 == 2)
    {
      if (gLogObjects && gNumLogObjects >= 60)
      {
        int v19 = *(os_log_s **)(gLogObjects + 472);
      }

      else
      {
        int v19 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (!os_log_type_enabled(v19, OS_LOG_TYPE_INFO)) {
        goto LABEL_35;
      }
      int v25 = **(_BYTE **)(a1 + 32) & 0xF;
      int v26 = *(unsigned __int16 *)(a1 + 42);
      int v30 = 136316162;
      __int16 v31 = "_qiAuth_protocol_timeoutCallback";
      __int16 v32 = 1024;
      int v33 = 1378;
      __int16 v34 = 1024;
      int v35 = HIWORD(a3) & 0xF;
      __int16 v36 = 1024;
      int v37 = v25;
      __int16 v38 = 1024;
      int v39 = v26;
    }

    else
    {
      if ((_BYTE)a3)
      {
        if (gLogObjects && gNumLogObjects >= 60)
        {
          int v22 = *(os_log_s **)(gLogObjects + 472);
        }

        else
        {
          int v22 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
          _qiAuth_protocol_timeoutCallback_cold_3();
        }
        goto LABEL_40;
      }

      int v12 = *(_DWORD *)(a1 + 44);
      unsigned int v13 = *(_BYTE **)(a1 + 32);
      int v14 = *v13 & 0xF;
      if (!*(_BYTE *)(a1 + 216) || v12 != v14)
      {
        __int16 v23 = (os_log_s *)logObjectForModule_19();
        int v24 = v23;
        if (v12 == v14)
        {
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            int v30 = 136315650;
            __int16 v31 = "_qiAuth_protocol_timeoutCallback";
            __int16 v32 = 1024;
            int v33 = 1364;
            __int16 v34 = 1024;
            int v35 = v8;
            _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "%s:%d slot %d, retry limit reached! set authState Failed",  (uint8_t *)&v30,  0x18u);
          }

          qiAuth_protocol_setSlotAuthState((unsigned __int8 *)a1, v8, 3);
        }

        else if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          int v28 = *(_DWORD *)(a1 + 44);
          int v29 = **(_BYTE **)(a1 + 32) & 0xF;
          int v30 = 136316162;
          __int16 v31 = "_qiAuth_protocol_timeoutCallback";
          __int16 v32 = 1024;
          int v33 = 1371;
          __int16 v34 = 1024;
          int v35 = v8;
          __int16 v36 = 1024;
          int v37 = v28;
          __int16 v38 = 1024;
          int v39 = v29;
          _os_log_error_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "%s:%d slot %d, mismatched msgType (%d vs %d)!",  (uint8_t *)&v30,  0x24u);
        }

        goto LABEL_40;
      }

      --*(_BYTE *)(a1 + 216);
      unsigned int v15 = qiAuth_protocol_timeoutForRequest(a1, *v13 & 0xF, 0x7Fu);
      uint64_t v16 = (unint64_t)*(unsigned __int8 *)(a1 + 48) << 16;
      __int16 v17 = (os_log_s *)logObjectForModule_19();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        int v18 = **(_BYTE **)(a1 + 32) & 0xF;
        int v30 = 136315906;
        __int16 v31 = "_qiAuth_protocol_timeoutCallback";
        __int16 v32 = 1024;
        int v33 = 1355;
        __int16 v34 = 1024;
        int v35 = v15;
        __int16 v36 = 1024;
        int v37 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "%s:%d Start responseTimer, %u ms, outMsgType %u",  (uint8_t *)&v30,  0x1Eu);
      }

      *(_DWORD *)(a1 + 220) = qiAuth_util_callbackOnTimer( (const void **)a1,  v15,  (uint64_t)_qiAuth_protocol_timeoutCallback,  v16);
      int v19 = (os_log_s *)logObjectForModule_19();
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_INFO)) {
        goto LABEL_35;
      }
      int v20 = **(_BYTE **)(a1 + 32) & 0xF;
      int v21 = *(unsigned __int16 *)(a1 + 42);
      int v30 = 136316162;
      __int16 v31 = "_qiAuth_protocol_timeoutCallback";
      __int16 v32 = 1024;
      int v33 = 1359;
      __int16 v34 = 1024;
      int v35 = v8;
      __int16 v36 = 1024;
      int v37 = v20;
      __int16 v38 = 1024;
      int v39 = v21;
    }

    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "%s:%d slot %d, resend message %d, len %d",  (uint8_t *)&v30,  0x24u);
LABEL_35:
    qiAuth_protocol_sendData(a1, *(const UInt8 **)(a1 + 32), *(unsigned __int16 *)(a1 + 42));
    goto LABEL_40;
  }

uint64_t qiAuth_protocol_sendData(uint64_t a1, const UInt8 *a2, CFIndex a3)
{
  LODWORD(v4) = 0;
  uint64_t v5 = 4294967294LL;
  if (a1 && a2)
  {
    unsigned int v7 = 0;
    if ((unsigned __int16)(a3 - 1) <= 0x7Fu)
    {
      unsigned int v9 = *a2;
      uint64_t v4 = v9 & 0xF;
      unsigned int v7 = v9 >> 4;
      if (gLogObjects && gNumLogObjects >= 60)
      {
        unsigned int v10 = *(os_log_s **)(gLogObjects + 472);
      }

      else
      {
        unsigned int v10 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = *(_DWORD *)(a1 + 44);
        else {
          int v12 = off_1001FD120[v11 - 1];
        }
        else {
          unsigned int v13 = off_1001FD120[v4 - 1];
        }
        int v18 = 136316930;
        int v19 = "qiAuth_protocol_sendData";
        __int16 v20 = 1024;
        int v21 = 454;
        __int16 v22 = 1024;
        int v23 = v7;
        __int16 v24 = 1024;
        int v25 = a3;
        __int16 v26 = 1024;
        int v27 = v11;
        __int16 v28 = 2080;
        int v29 = v12;
        __int16 v30 = 1024;
        int v31 = v4;
        __int16 v32 = 2080;
        int v33 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%s:%d ver %d, dataOutLen %d, lastMsgSent %d(%s) -> %d(%s)",  (uint8_t *)&v18,  0x3Eu);
      }

      *(_DWORD *)(a1 + 44) = v4;
      qiAuth_util_sendData((const void **)a1, a2, a3);
      uint64_t v5 = 0LL;
    }
  }

  else
  {
    unsigned int v7 = 0;
  }

  if (gLogObjects && gNumLogObjects >= 60)
  {
    int v14 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    int v14 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = v4 - 1LL;
    else {
      uint64_t v16 = off_1001FD120[v15];
    }
    int v18 = 136316674;
    int v19 = "qiAuth_protocol_sendData";
    __int16 v20 = 1024;
    int v21 = 464;
    __int16 v22 = 1024;
    int v23 = v5;
    __int16 v24 = 1024;
    int v25 = v7;
    __int16 v26 = 1024;
    int v27 = v4;
    __int16 v28 = 2080;
    int v29 = v16;
    __int16 v30 = 1024;
    int v31 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%s:%d result %d, ver %d, msgType %d(%s), dataOutLen %d",  (uint8_t *)&v18,  0x34u);
  }

  return v5;
}

uint64_t qiAuth_protocol_processIncomingData(uint64_t a1, char *a2, unsigned int a3)
{
  LODWORD(v5) = 0;
  unsigned __int16 v35 = 0;
  uint64_t v6 = 4294967294LL;
  unsigned int v7 = &startLogsNotificationObservers;
  if (a1 && a2)
  {
    int v9 = 0;
    int v10 = 0;
    if (a3)
    {
      int v11 = (int *)(a1 + 8);
      if (*(_DWORD *)(a1 + 8) < 2u)
      {
        unsigned int v12 = *a2;
        uint64_t v5 = v12 & 0xF;
        int v10 = v12 >> 4;
        unsigned int v13 = *(UInt8 **)(a1 + 32);
        unsigned int v34 = *(unsigned __int16 *)(a1 + 40);
        if (gLogObjects && gNumLogObjects >= 60)
        {
          int v14 = *(os_log_s **)(gLogObjects + 472);
        }

        else
        {
          int v14 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          int v16 = *v11;
          else {
            __int16 v17 = off_1001FD120[v5 - 1];
          }
          *(_DWORD *)buf = 136317186;
          int v37 = "qiAuth_protocol_processIncomingData";
          __int16 v38 = 1024;
          int v39 = 327;
          __int16 v40 = 1024;
          int v41 = v16;
          __int16 v42 = 1024;
          int v43 = v10;
          __int16 v44 = 1024;
          *(_DWORD *)int v45 = v5;
          *(_WORD *)&v45[4] = 2080;
          *(void *)&_BYTE v45[6] = v17;
          *(_WORD *)&v45[14] = 1024;
          *(_DWORD *)&v45[16] = a3;
          __int16 v46 = 1024;
          BOOL v47 = v13 != 0LL;
          __int16 v48 = 1024;
          unsigned int v49 = v34;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "%s:%d role %d, ver %d, msgType %d(%s), dataInLen %d, _dataOut(%d), _dataOutSize %d",  buf,  0x40u);
        }

        int v9 = 0;
        uint64_t v6 = 4294967294LL;
        if (!v13 || !v34) {
          goto LABEL_29;
        }
        if (!qiAuth_protocol_checkValidMessageHeaderAndSize(a1, *a2, a3)
          || (*(_BYTE *)(a1 + 216) = 0, *(_DWORD *)(a1 + 8)))
        {
          int v9 = 0;
LABEL_29:
          unsigned int v7 = &startLogsNotificationObservers;
          goto LABEL_30;
        }

        unsigned int v25 = *(_DWORD *)(a1 + 220);
        if ((v25 & 0x80000000) == 0)
        {
          qiAuth_util_cancelTimer((const void **)a1, v25);
          *(_DWORD *)(a1 + 220) = -1;
        }

        switch((int)v5)
        {
          case 1:
            uint64_t v26 = _qiAuth_protocol_handleResponse_DIGESTS(a1, a2, a3, v13, v34, &v35);
            break;
          case 2:
            uint64_t v26 = _qiAuth_protocol_handleResponse_CERTIFICATE(a1, a2, a3, (uint64_t)v13, v34, &v35);
            break;
          case 3:
            uint64_t v26 = _qiAuth_protocol_handleResponse_CHALLENGE_AUTH(a1, (uint64_t)a2, a3, v13, v34, &v35);
            break;
          case 7:
            uint64_t v26 = _qiAuth_protocol_handleResponse_ERROR(a1, a2, a3, (uint64_t)v13, v34, &v35);
            break;
          default:
            int v27 = (os_log_s *)logObjectForModule_19();
            if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
            {
              int v33 = qiAuth_protocol_msgTypeString(v5);
              *(_DWORD *)buf = 136316418;
              int v37 = "qiAuth_protocol_processIncomingData";
              __int16 v38 = 1024;
              int v39 = 365;
              __int16 v40 = 1024;
              int v41 = v10;
              __int16 v42 = 1024;
              int v43 = v5;
              __int16 v44 = 2080;
              *(void *)int v45 = v33;
              *(_WORD *)&v45[8] = 1024;
              *(_DWORD *)&_BYTE v45[10] = a3;
              _os_log_error_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "%s:%d RX: Unexpected MsgType!!! ver %d, msgType %d(%s), dataInLen %d",  buf,  0x2Eu);
            }

            int v9 = 0;
            uint64_t v6 = 0xFFFFFFFFLL;
            goto LABEL_29;
        }

        uint64_t v6 = v26;
        unsigned int v7 = &startLogsNotificationObservers;
        if (!(_DWORD)v26)
        {
          int v28 = v35;
          *(_WORD *)(a1 + 42) = v35;
          if (v28)
          {
            int v9 = *v13 & 0xF;
            if (!*v11)
            {
              unsigned int v29 = qiAuth_protocol_timeoutForRequest(a1, *v13 & 0xF, 0x7Fu);
              uint64_t v30 = (unint64_t)*(unsigned __int8 *)(a1 + 48) << 16;
              int v31 = (os_log_s *)logObjectForModule_19();
              if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315906;
                int v37 = "qiAuth_protocol_processIncomingData";
                __int16 v38 = 1024;
                int v39 = 421;
                __int16 v40 = 1024;
                int v41 = v29;
                __int16 v42 = 1024;
                int v43 = v9;
                _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "%s:%d Start responseTimer, %u ms, outMsgType %u",  buf,  0x1Eu);
              }

              *(_DWORD *)(a1 + 220) = qiAuth_util_callbackOnTimer( (const void **)a1,  v29,  (uint64_t)_qiAuth_protocol_timeoutCallback,  v30);
            }

            __int16 v32 = (os_log_s *)logObjectForModule_19();
            if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
              qiAuth_protocol_processIncomingData_cold_2(v9, v32);
            }
            qiAuth_protocol_sendData(a1, v13, v35);
            uint64_t v6 = 0LL;
            goto LABEL_29;
          }

          uint64_t v6 = 0LL;
        }

        int v9 = 0;
        goto LABEL_30;
      }

      if (gLogObjects && gNumLogObjects >= 60)
      {
        uint64_t v15 = *(os_log_s **)(gLogObjects + 472);
      }

      else
      {
        uint64_t v15 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        qiAuth_protocol_processIncomingData_cold_4();
      }
      LODWORD(v5) = 0;
      int v9 = 0;
      int v10 = 0;
      uint64_t v6 = 0xFFFFFFFFLL;
      unsigned int v7 = &startLogsNotificationObservers;
    }
  }

  else
  {
    int v9 = 0;
    int v10 = 0;
  }

BOOL qiAuth_protocol_checkValidMessageHeaderAndSize(uint64_t a1, unsigned int a2, unsigned int a3)
{
  int v5 = a2 >> 4;
  uint64_t v6 = a2 & 0xF;
  if (!a1)
  {
LABEL_12:
    int v9 = -2;
    goto LABEL_13;
  }

  if ((a2 & 0xF0) != 0x10)
  {
    if (gLogObjects && gNumLogObjects >= 60)
    {
      int v10 = *(os_log_s **)(gLogObjects + 472);
    }

    else
    {
      int v10 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316674;
      int v23 = "qiAuth_protocol_checkValidMessageHeaderAndSize";
      __int16 v24 = 1024;
      int v25 = 480;
      __int16 v26 = 1024;
      int v27 = v5;
      __int16 v28 = 1024;
      int v29 = v6;
      __int16 v30 = 2080;
      *(void *)int v31 = qiAuth_protocol_msgTypeString(v6);
      *(_WORD *)&v31[8] = 1024;
      *(_DWORD *)&v31[10] = a2;
      *(_WORD *)&v31[14] = 1024;
      *(_DWORD *)&v31[16] = a3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s:%d Invalid Version!!! ver %d, msgType %d(%s), msgHeader 0x%02X, msgDataLen %d",  buf,  0x34u);
    }

    goto LABEL_12;
  }

  unsigned int v8 = *(_DWORD *)(a1 + 8);
  if (v8)
  {
    int v9 = -2;
  }

  else
  {
    int v21 = a2 >> 4;
    if (gLogObjects && gNumLogObjects >= 60)
    {
      int v14 = *(os_log_s **)(gLogObjects + 472);
    }

    else
    {
      int v14 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136316674;
      int v23 = "qiAuth_protocol_checkValidMessageHeaderAndSize";
      __int16 v24 = 1024;
      int v25 = 486;
      __int16 v26 = 1024;
      int v27 = 1;
      __int16 v28 = 1024;
      int v29 = v6;
      __int16 v30 = 2080;
      *(void *)int v31 = qiAuth_protocol_msgTypeString(v6);
      *(_WORD *)&v31[8] = 1024;
      *(_DWORD *)&v31[10] = a2;
      *(_WORD *)&v31[14] = 1024;
      *(_DWORD *)&v31[16] = a3;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "%s:%d RX, ver %d, msgType %d(%s), msgHeader 0x%02X, msgDataLen %d",  buf,  0x34u);
    }

    switch((int)v6)
    {
      case 1:
        int v9 = -2;
        if (a3 >= 3)
        {
          if ((((_BYTE)a3 + 30) & 0x1F) != 0) {
            int v9 = -2;
          }
          else {
            int v9 = 0;
          }
        }

        break;
      case 2:
        if (a3 <= 1) {
          int v9 = -2;
        }
        else {
          int v9 = 0;
        }
        break;
      case 3:
        BOOL v15 = a3 == 67;
        goto LABEL_41;
      case 7:
        BOOL v15 = a3 == 3;
LABEL_41:
        if (v15) {
          int v9 = 0;
        }
        else {
          int v9 = -2;
        }
        break;
      default:
        if (gLogObjects && gNumLogObjects >= 60)
        {
          int v16 = *(os_log_s **)(gLogObjects + 472);
        }

        else
        {
          int v16 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          uint64_t v20 = qiAuth_protocol_msgTypeString(v6);
          *(_DWORD *)buf = 136316674;
          int v23 = "qiAuth_protocol_checkValidMessageHeaderAndSize";
          __int16 v24 = 1024;
          int v25 = 525;
          __int16 v26 = 1024;
          int v27 = 1;
          __int16 v28 = 1024;
          int v29 = v6;
          __int16 v30 = 2080;
          *(void *)int v31 = v20;
          *(_WORD *)&v31[8] = 1024;
          *(_DWORD *)&v31[10] = a2;
          *(_WORD *)&v31[14] = 1024;
          *(_DWORD *)&v31[16] = a3;
          _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%s:%d RX: Unexpected MsgType!!! ver %d, msgType %d(%s), msgHeader 0x%02X, msgDataLen %d",  buf,  0x34u);
        }

        int v9 = -2;
        int v5 = v21;
        break;
    }

    unsigned int v8 = *(_DWORD *)(a1 + 8);
  }

  if (v8 >= 2)
  {
    if (gLogObjects && gNumLogObjects >= 60)
    {
      __int16 v17 = *(os_log_s **)(gLogObjects + 472);
    }

    else
    {
      __int16 v17 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      int v18 = *(_DWORD *)(a1 + 8);
      int v19 = qiAuth_protocol_msgTypeString(v6);
      *(_DWORD *)buf = 136317186;
      int v23 = "qiAuth_protocol_checkValidMessageHeaderAndSize";
      __int16 v24 = 1024;
      int v25 = 573;
      __int16 v26 = 1024;
      int v27 = v18;
      __int16 v28 = 1024;
      int v29 = v9;
      __int16 v30 = 1024;
      *(_DWORD *)int v31 = 1;
      *(_WORD *)&v31[4] = 1024;
      *(_DWORD *)&v31[6] = v6;
      *(_WORD *)&v31[10] = 2080;
      *(void *)&v31[12] = v19;
      __int16 v32 = 1024;
      unsigned int v33 = a2;
      __int16 v34 = 1024;
      unsigned int v35 = a3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "%s:%d Unknown Role! %d, result %d, ver %d, msgType %d(%s), msgHeader 0x%02X, msgDataLen %d",  buf,  0x40u);
    }
  }

uint64_t _qiAuth_protocol_handleResponse_DIGESTS( uint64_t a1, char *a2, unsigned int a3, _BYTE *a4, unsigned int a5, unsigned __int16 *a6)
{
  unsigned int v7 = &startLogsNotificationObservers;
  unsigned int v8 = &startLogsNotificationObservers;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 60)
    {
      unsigned int v12 = a5;
      unsigned int v13 = *(os_log_s **)(gLogObjects + 472);
    }

    else
    {
      unsigned int v12 = a5;
      unsigned int v13 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
      _qiAuth_protocol_handleResponse_DIGESTS_cold_3();
    }
    int v14 = 0;
    uint64_t inited = 4294967294LL;
    if (a3 >= 0x22 && a2 && !*(_DWORD *)(a1 + 8))
    {
      int v75 = a4;
      int v14 = *a2 & 0xF;
      if (gLogObjects && gNumLogObjects >= 60)
      {
        int v16 = *(os_log_s **)(gLogObjects + 472);
      }

      else
      {
        int v16 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        int v41 = *(_DWORD *)(a1 + 8);
        int v42 = *(unsigned __int8 *)(a1 + 48);
        *(_DWORD *)buf = 136316418;
        uint64_t v78 = "_qiAuth_protocol_handleResponse_DIGESTS";
        __int16 v79 = 1024;
        int v80 = 1880;
        __int16 v81 = 1024;
        int v82 = v41;
        unsigned int v7 = &startLogsNotificationObservers;
        __int16 v83 = 1024;
        int v84 = v42;
        unsigned int v8 = &startLogsNotificationObservers;
        __int16 v85 = 1024;
        *(_DWORD *)int v86 = v14;
        *(_WORD *)&v86[4] = 2080;
        *(void *)&v86[6] = qiAuth_protocol_msgTypeString(v14);
        _os_log_debug_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "%s:%d role %d, currentSlot %d, msgType %d(%s)",  buf,  0x2Eu);
      }

      uint64_t inited = 4294967294LL;
      if (a6)
      {
        if (v12 >= 0x80 && a4 && v14 == 1)
        {
          char v17 = *a2;
          *a6 = 0;
          *(_BYTE *)(a1 + 224) = 0;
          unsigned int v18 = a2[1];
          int v19 = *(unsigned __int8 *)(a1 + 24);
          int v20 = v19 & (v18 >> 4);
          *(_BYTE *)(a1 + 321) = v19 & (a2[1] >> 4);
          uint64_t v21 = gLogObjects;
          int v22 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 60)
          {
            int v23 = *(os_log_s **)(gLogObjects + 472);
          }

          else
          {
            int v23 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              uint64_t v78 = (const char *)v21;
              __int16 v79 = 1024;
              int v80 = v22;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              int v20 = *(unsigned __int8 *)(a1 + 321);
            }
          }

          int v14 = v17 & 0xF;
          int v24 = v18 & 0xF;
          if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315906;
            uint64_t v78 = "_qiAuth_protocol_handleResponse_DIGESTS";
            __int16 v79 = 1024;
            int v80 = 1899;
            __int16 v81 = 1024;
            int v82 = v20;
            __int16 v83 = 1024;
            int v84 = v24;
            _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "%s:%d rxCertsTXSupportedMask 0x%02x, digestReturnedMask 0x%02x",  buf,  0x1Eu);
            int v20 = *(unsigned __int8 *)(a1 + 321);
          }

          if (!v20)
          {
            else {
              unsigned int v40 = *(unsigned __int8 *)(a1 + 48);
            }
            qiAuth_protocol_setSlotAuthState((unsigned __int8 *)a1, v40, 2);
            uint64_t inited = 4294967294LL;
            unsigned int v8 = &startLogsNotificationObservers;
LABEL_51:
            unsigned int v7 = &startLogsNotificationObservers;
            goto LABEL_72;
          }

          int v25 = 0;
          uint64_t inited = 0LL;
          unsigned __int16 v26 = 0;
          do
          {
            if (((1 << v25) & v24) != 0)
            {
              v26 += 32;
            }

            ++v25;
          }

          while (v25 != 4);
          unsigned int v8 = &startLogsNotificationObservers;
          unsigned int v7 = &startLogsNotificationObservers;
          if (!(_DWORD)inited)
          {
            int v27 = *(unsigned __int8 *)(a1 + 248);
            int v28 = *(unsigned __int8 *)(a1 + 321);
            if (v27 == v28)
            {
              unsigned __int8 v29 = qiAuth_util_policy_challengeFirst(a1);
              unsigned int v30 = qiAuth_util_policy_preferredSlot();
              *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = v30;
              uint64_t v31 = (uint64_t)v75;
              if ((v29 & 1) != 0)
              {
                qiAuth_util_generateNonce(a1, (void *)(a1 + 135), 0x10u);
                *(_BYTE *)(a1 + 215) = 0;
                __int16 v32 = (os_log_s *)logObjectForModule_19();
                if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
                {
                  int v33 = *(unsigned __int8 *)(a1 + 48);
                  *(_DWORD *)buf = 136315650;
                  uint64_t v78 = "_qiAuth_protocol_handleResponse_DIGESTS";
                  __int16 v79 = 1024;
                  int v80 = 2051;
                  __int16 v81 = 1024;
                  int v82 = v33;
                  _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "%s:%d ChallengeBeforeAuth, CHALLENGE, currentSlot %d",  buf,  0x18u);
                }

                qiAuth_util_logCertData((const void **)a1, (uint64_t)"DIGEST: --nonce--", a1 + 135, 0x10u, 1);
                uint64_t inited = qiAuth_protocol_initMsg_CHALLENGE( v34,  *(unsigned __int8 *)(a1 + 12),  *(unsigned __int8 *)(a1 + 48),  (_OWORD *)(a1 + 135),  0x10u,  (uint64_t)v75,  v12,  a6);
                if ((_DWORD)inited || (int v35 = *a6, v35 != 18))
                {
                  __int16 v36 = (os_log_s *)logObjectForModule_19();
                  if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
                  {
                    int v37 = *(unsigned __int8 *)(a1 + 48);
                    int v38 = *a6;
                    *(_DWORD *)buf = 136316162;
                    uint64_t v78 = "_qiAuth_protocol_handleResponse_DIGESTS";
                    __int16 v79 = 1024;
                    int v80 = 2066;
                    __int16 v81 = 1024;
                    int v82 = v37;
                    __int16 v83 = 1024;
                    int v84 = inited;
                    __int16 v85 = 1024;
                    *(_DWORD *)int v86 = v38;
                    int v39 = "%s:%d ChallengeBeforeAuth, CHALLENGE, currentSlot %d, result %d, dataOutLen %d, skip saving challengeMsg!";
LABEL_88:
                    _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, v39, buf, 0x24u);
                    goto LABEL_71;
                  }

                  goto LABEL_71;
                }

uint64_t _qiAuth_protocol_handleResponse_CERTIFICATE( uint64_t a1, _BYTE *a2, unsigned int a3, uint64_t a4, unsigned int a5, unsigned __int16 *a6)
{
  unsigned int v8 = &startLogsNotificationObservers;
  int v9 = &startLogsNotificationObservers;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 60)
    {
      int v14 = *(os_log_s **)(gLogObjects + 472);
    }

    else
    {
      int v14 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
      _qiAuth_protocol_handleResponse_CERTIFICATE_cold_7();
    }
    int v15 = 0;
    uint64_t inited = 4294967294LL;
    if (a3 < 2) {
      goto LABEL_72;
    }
    unsigned int v8 = &startLogsNotificationObservers;
    if (a2 && !*(_DWORD *)(a1 + 8))
    {
      int v15 = *a2 & 0xF;
      if (gLogObjects && gNumLogObjects >= 60)
      {
        char v17 = *(os_log_s **)(gLogObjects + 472);
      }

      else
      {
        char v17 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        int v30 = *(_DWORD *)(a1 + 8);
        int v31 = *(unsigned __int8 *)(a1 + 48);
        *(_DWORD *)buf = 136316418;
        uint64_t v70 = "_qiAuth_protocol_handleResponse_CERTIFICATE";
        __int16 v71 = 1024;
        int v72 = 2104;
        __int16 v73 = 1024;
        int v74 = v30;
        __int16 v75 = 1024;
        int v76 = v31;
        __int16 v77 = 1024;
        LODWORD(v7_Block_object_dispose(va, 8) = v15;
        WORD2(v7_Block_object_dispose(va, 8) = 2080;
        *(void *)((char *)&v78 + 6) = qiAuth_protocol_msgTypeString(v15);
        _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "%s:%d role %d, currentSlot %d, msgType %d(%s)",  buf,  0x2Eu);
      }

      uint64_t inited = 4294967294LL;
      if (!a6) {
        goto LABEL_71;
      }
      int v9 = &startLogsNotificationObservers;
      unsigned int v8 = &startLogsNotificationObservers;
      if (a5 >= 0x80)
      {
        if (a4)
        {
          if (v15 == 2)
          {
            int v15 = *a2 & 0xF;
            if (*(unsigned __int8 *)(a1 + 48) <= 3u)
            {
              uint64_t v68 = *(unsigned __int8 *)(a1 + 48);
              if (gLogObjects && gNumLogObjects >= 60)
              {
                unsigned int v18 = *(os_log_s **)(gLogObjects + 472);
              }

              else
              {
                unsigned int v18 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_INFO);
              unsigned int v20 = *(_DWORD *)(a1 + 8);
              if (v19)
              {
                int v21 = *(unsigned __int16 *)(a1 + 244);
                int v22 = *(unsigned __int16 *)(a1 + 246);
                *(_DWORD *)buf = 136316674;
                uint64_t v70 = "_qiAuth_protocol_handleResponse_CERTIFICATE";
                __int16 v71 = 1024;
                int v72 = 2119;
                __int16 v73 = 1024;
                int v74 = v20;
                __int16 v75 = 1024;
                unsigned int v23 = v68;
                int v76 = v68;
                __int16 v77 = 1024;
                LODWORD(v7_Block_object_dispose(va, 8) = v21;
                WORD2(v7_Block_object_dispose(va, 8) = 1024;
                *(_DWORD *)((char *)&v78 + 6) = v22;
                WORD5(v7_Block_object_dispose(va, 8) = 1024;
                HIDWORD(v7_Block_object_dispose(va, 8) = (unsigned __int16)(a3 - 1);
                _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "%s:%d Save certs segment, role %d, slot %d, lastCertOffsetRequest %d, lastCertLenRequest %d, certSegmentLen %d",  buf,  0x30u);
                unsigned int v20 = *(_DWORD *)(a1 + 8);
                int v9 = &startLogsNotificationObservers;
              }

              else
              {
                int v9 = &startLogsNotificationObservers;
                unsigned int v23 = v68;
              }

              unsigned __int16 v67 = a3 - 1;
              uint64_t Segment = qiAuth_protocol_saveCertNextSegment( a1,  v20,  v23,  a2 + 1,  *(unsigned __int16 *)(a1 + 244),  (unsigned __int16)(a3 - 1));
              if ((_DWORD)Segment)
              {
                uint64_t inited = Segment;
                if (gLogObjects && *((int *)v9 + 708) >= 60)
                {
                  int v25 = *(os_log_s **)(gLogObjects + 472);
                }

                else
                {
                  int v25 = (os_log_s *)&_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }

                if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_72;
                }
                int v28 = *(_DWORD *)(a1 + 8);
                *(_DWORD *)buf = 136316162;
                uint64_t v70 = "_qiAuth_protocol_handleResponse_CERTIFICATE";
                __int16 v71 = 1024;
                int v72 = 2126;
                __int16 v73 = 1024;
                int v74 = v28;
                __int16 v75 = 1024;
                int v76 = v68;
                __int16 v77 = 1024;
                LODWORD(v7_Block_object_dispose(va, 8) = v67;
                unsigned __int8 v29 = "%s:%d Failed to save certs segment, role %d, slot %d, certSegmentLen %d";
LABEL_44:
                _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, v29, buf, 0x24u);
LABEL_72:
                unsigned int v8 = &startLogsNotificationObservers;
                goto LABEL_73;
              }

              unsigned int CachedCertLengthFromHeader = _qiAuth_protocol_getCachedCertLengthFromHeader(a1, v23);
              if (gLogObjects && *((int *)v9 + 708) >= 60)
              {
                int v27 = *(os_log_s **)(gLogObjects + 472);
              }

              else
              {
                int v27 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
              {
                int v59 = *(_DWORD *)(a1 + 8);
                int v60 = *(unsigned __int16 *)(a1 + 244);
                int v61 = *(unsigned __int16 *)(a1 + 246);
                *(_DWORD *)buf = 136316930;
                uint64_t v70 = "_qiAuth_protocol_handleResponse_CERTIFICATE";
                __int16 v71 = 1024;
                int v72 = 2131;
                __int16 v73 = 1024;
                int v74 = v59;
                __int16 v75 = 1024;
                uint64_t v32 = v68;
                int v76 = v68;
                __int16 v77 = 1024;
                LODWORD(v7_Block_object_dispose(va, 8) = v60;
                WORD2(v7_Block_object_dispose(va, 8) = 1024;
                *(_DWORD *)((char *)&v78 + 6) = v61;
                WORD5(v7_Block_object_dispose(va, 8) = 1024;
                HIDWORD(v7_Block_object_dispose(va, 8) = v67;
                LOWORD(v79[0]) = 1024;
                *(_DWORD *)((char *)v79 + 2) = CachedCertLengthFromHeader;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEBUG,  "%s:%d role %d, slot %d, lastCertOffsetRequest %d, lastCertLenRequest %d, certSegmentLen %d, maxCertLen %d",  buf,  0x36u);
                int v9 = &startLogsNotificationObservers;
              }

              else
              {
                int v9 = &startLogsNotificationObservers;
                uint64_t v32 = v68;
              }

              unsigned int v8 = &startLogsNotificationObservers;
              if (CachedCertLengthFromHeader >= 2)
              {
                *a6 = 0;
                *(_BYTE *)(a1 + 224) = 0;
                int v33 = (unsigned __int16 *)(a1 + 2 * v32 + 324);
                if (CachedCertLengthFromHeader <= *v33)
                {
                  int v37 = (os_log_s *)logObjectForModule_19();
                  if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
                  {
                    int v38 = *v33;
                    *(_DWORD *)buf = 136315906;
                    uint64_t v70 = "_qiAuth_protocol_handleResponse_CERTIFICATE";
                    __int16 v71 = 1024;
                    int v72 = 2142;
                    __int16 v73 = 1024;
                    int v74 = v68;
                    __int16 v75 = 1024;
                    int v76 = v38;
                    _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_INFO,  "%s:%d Got all certs segments, CHALLENGE, slot %d, rxCertsLen %d",  buf,  0x1Eu);
                  }

                  int v39 = *(unsigned __int16 **)(a1 + 8 * v68 + 336);
                  uint64_t v40 = (uint64_t)(v39 + 1);
                  unsigned int v41 = *v39;
                  v39 += 17;
                  qiAuth_util_logCertData((const void **)a1, (uint64_t)"CERTIFICATE: --RootHash--", v40, 0x20u, 1);
                  unsigned int v42 = (unsigned __int16)((bswap32(v41) >> 16) - 34);
                  qiAuth_util_logCertData((const void **)a1, (uint64_t)"CERTIFICATE: --CertData--", (uint64_t)v39, v42, 1);
                  uint64_t v43 = qiAuth_util_verifyCertificateChain( a1,  *(unsigned __int8 *)(a1 + 48),  v40,  32,  (uint64_t)v39,  v42);
                  if ((_DWORD)v43)
                  {
                    uint64_t inited = v43;
                    __int16 v44 = (os_log_s *)logObjectForModule_19();
                    int v9 = &startLogsNotificationObservers;
                    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
                      _qiAuth_protocol_handleResponse_CERTIFICATE_cold_2();
                    }
                    qiAuth_protocol_setSlotAuthState((unsigned __int8 *)a1, v68, 2);
                    goto LABEL_72;
                  }

                  *(_BYTE *)(a1 + 320) |= 1 << v68;
                  if (!*(_BYTE *)(a1 + 215))
                  {
                    qiAuth_util_generateNonce(a1, (void *)(a1 + 135), 0x10u);
                    qiAuth_util_logCertData((const void **)a1, (uint64_t)"CERTIFICATE: --nonce--", a1 + 135, 0x10u, 1);
                    uint64_t inited = qiAuth_protocol_initMsg_CHALLENGE( v62,  *(unsigned __int8 *)(a1 + 12),  *(unsigned __int8 *)(a1 + 48),  (_OWORD *)(a1 + 135),  0x10u,  a4,  a5,  a6);
                    int v9 = &startLogsNotificationObservers;
                    if (!(_DWORD)inited && *a6 == 18)
                    {
                      uint64_t inited = 0LL;
                      *(_WORD *)(a1 + 1904) = 18;
                      __int128 v63 = *(_OWORD *)a4;
                      *(_WORD *)(a1 + 1922) = *(_WORD *)(a4 + 16);
                      *(_OWORD *)(a1 + 1906) = v63;
                      goto LABEL_72;
                    }

                    int v25 = (os_log_s *)logObjectForModule_19();
                    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_72;
                    }
                    int v64 = *(unsigned __int8 *)(a1 + 48);
                    int v65 = *a6;
                    *(_DWORD *)buf = 136316162;
                    uint64_t v70 = "_qiAuth_protocol_handleResponse_CERTIFICATE";
                    __int16 v71 = 1024;
                    int v72 = 2177;
                    __int16 v73 = 1024;
                    int v74 = v64;
                    __int16 v75 = 1024;
                    int v76 = inited;
                    __int16 v77 = 1024;
                    LODWORD(v7_Block_object_dispose(va, 8) = v65;
                    unsigned __int8 v29 = "%s:%d ChallengeBeforeAuth, CHALLENGE, currentSlot %d, result %d, dataOutLen %d, skip saving challengeMsg!";
                    goto LABEL_44;
                  }

                  uint64_t inited = _qiAuth_protocol_finishAuth(a1);
                }

                else
                {
                  unsigned int v34 = *(unsigned __int16 *)(a1 + 246);
                  int v35 = (os_log_s *)logObjectForModule_19();
                  if ((unsigned __int16)(a3 - 1) <= v34)
                  {
                    BOOL v45 = v35;
                    int v9 = &startLogsNotificationObservers;
                    if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
                    {
                      int v46 = *v33;
                      *(_DWORD *)buf = 136315906;
                      uint64_t v70 = "_qiAuth_protocol_handleResponse_CERTIFICATE";
                      __int16 v71 = 1024;
                      int v72 = 2196;
                      __int16 v73 = 1024;
                      int v74 = v68;
                      __int16 v75 = 1024;
                      int v76 = v46;
                      _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_INFO,  "%s:%d Get next certs segment, GET_CERTIFICATE, slot %d, rxCertsLen %d",  buf,  0x1Eu);
                    }

                    __int16 v47 = *v33;
                    *(_WORD *)(a1 + 244) = *v33;
                    unsigned int v48 = (unsigned __int16)(CachedCertLengthFromHeader - v47);
                    if (v48 >= 0x7F) {
                      LOWORD(v4_Block_object_dispose(va, 8) = 127;
                    }
                    *(_WORD *)(a1 + 246) = v48;
                    unsigned int v49 = (os_log_s *)logObjectForModule_19();
                    BOOL v50 = os_log_type_enabled(v49, OS_LOG_TYPE_INFO);
                    if (v50)
                    {
                      int v51 = *v33;
                      int v52 = *(unsigned __int16 *)(a1 + 244);
                      int v53 = *(unsigned __int16 *)(a1 + 246);
                      *(_DWORD *)buf = 136316674;
                      uint64_t v70 = "_qiAuth_protocol_handleResponse_CERTIFICATE";
                      __int16 v71 = 1024;
                      int v72 = 2206;
                      __int16 v73 = 1024;
                      int v74 = v68;
                      __int16 v75 = 1024;
                      int v76 = v51;
                      __int16 v77 = 1024;
                      LODWORD(v7_Block_object_dispose(va, 8) = v52;
                      WORD2(v7_Block_object_dispose(va, 8) = 1024;
                      *(_DWORD *)((char *)&v78 + 6) = v53;
                      WORD5(v7_Block_object_dispose(va, 8) = 1024;
                      HIDWORD(v7_Block_object_dispose(va, 8) = CachedCertLengthFromHeader;
                      _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_INFO,  "%s:%d Get next certs segment, GET_CERTIFICATE, slot %d, rxCertsLen %d, lastCertOffsetRequest %d, lastCertLenRequest %d, maxCertLen %d",  buf,  0x30u);
                    }

                    uint64_t inited = qiAuth_protocol_initMsg_GET_CERTIFICATE( v50,  *(unsigned __int8 *)(a1 + 12),  v68,  *(unsigned __int16 *)(a1 + 244),  *(unsigned __int16 *)(a1 + 246),  (_BYTE *)a4,  a5,  a6);
                    goto LABEL_72;
                  }

                  __int16 v36 = v35;
                  if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
                  {
                    int v66 = *v33;
                    *(_DWORD *)buf = 136316162;
                    uint64_t v70 = "_qiAuth_protocol_handleResponse_CERTIFICATE";
                    __int16 v71 = 1024;
                    int v72 = 2215;
                    __int16 v73 = 1024;
                    int v74 = v68;
                    __int16 v75 = 1024;
                    int v76 = (unsigned __int16)(a3 - 1);
                    __int16 v77 = 1024;
                    LODWORD(v7_Block_object_dispose(va, 8) = v66;
                    _os_log_error_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_ERROR,  "%s:%d Invalid segment length! GET_CERTIFICATE, slot %d, certSegmentLen %d, rxCertsLen %d",  buf,  0x24u);
                  }

                  uint64_t inited = 0xFFFFFFFFLL;
                }

uint64_t _qiAuth_protocol_handleResponse_CHALLENGE_AUTH( uint64_t a1, uint64_t a2, int a3, _BYTE *a4, unsigned int a5, unsigned __int16 *a6)
{
  unsigned int v8 = &startLogsNotificationObservers;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 60)
    {
      unsigned int v13 = *(os_log_s **)(gLogObjects + 472);
    }

    else
    {
      unsigned int v13 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
      _qiAuth_protocol_handleResponse_CHALLENGE_AUTH_cold_7();
    }
    int v14 = 0;
    uint64_t v15 = 4294967294LL;
    LODWORD(v16) = 4;
    if (a3 == 67 && a2 && !*(_DWORD *)(a1 + 8))
    {
      int v14 = *(_BYTE *)a2 & 0xF;
      if (gLogObjects && gNumLogObjects >= 60)
      {
        char v17 = *(os_log_s **)(gLogObjects + 472);
      }

      else
      {
        char v17 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        int v29 = *(_DWORD *)(a1 + 8);
        int v30 = *(unsigned __int8 *)(a1 + 48);
        *(_DWORD *)buf = 136316418;
        __int16 v47 = "_qiAuth_protocol_handleResponse_CHALLENGE_AUTH";
        __int16 v48 = 1024;
        int v49 = 2246;
        __int16 v50 = 1024;
        int v51 = v29;
        __int16 v52 = 1024;
        *(_DWORD *)int v53 = v30;
        *(_WORD *)&v53[4] = 1024;
        *(_DWORD *)&v53[6] = v14;
        *(_WORD *)&v53[10] = 2080;
        *(void *)&v53[12] = qiAuth_protocol_msgTypeString(v14);
        _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "%s:%d role %d, currentSlot %d, msgType %d(%s)",  buf,  0x2Eu);
      }

      uint64_t v15 = 4294967294LL;
      LODWORD(v16) = 4;
      if (a6)
      {
        unsigned int v8 = &startLogsNotificationObservers;
        if (a5 >= 0x80 && a4 && v14 == 3)
        {
          int v18 = *(_BYTE *)(a2 + 1) & 0xF;
          unsigned __int8 v45 = *(_BYTE *)(a2 + 2);
          uint64_t v16 = *(unsigned __int8 *)(a1 + 48);
          *a6 = 0;
          *(_BYTE *)(a1 + 224) = 0;
          *(_WORD *)(a1 + 1924) = 67;
          __int128 v19 = *(_OWORD *)(a2 + 16);
          __int128 v20 = *(_OWORD *)(a2 + 32);
          __int128 v21 = *(_OWORD *)(a2 + 48);
          *(_DWORD *)(a1 + 1989) = *(_DWORD *)(a2 + 63);
          *(_OWORD *)(a1 + 195_Block_object_dispose(va, 8) = v20;
          *(_OWORD *)(a1 + 1974) = v21;
          *(_OWORD *)(a1 + 1942) = v19;
          *(_OWORD *)(a1 + 1926) = *(_OWORD *)a2;
          __int128 v22 = *(_OWORD *)(a2 + 3);
          __int128 v23 = *(_OWORD *)(a2 + 19);
          __int128 v24 = *(_OWORD *)(a2 + 35);
          *(_OWORD *)(a1 + 199) = *(_OWORD *)(a2 + 51);
          *(_OWORD *)(a1 + 183) = v24;
          *(_OWORD *)(a1 + 167) = v23;
          *(_OWORD *)(a1 + 151) = v22;
          *(_BYTE *)(a1 + 215) = 1;
          if (!*(_BYTE *)(a1 + 321)) {
            *(_BYTE *)(a1 + 321) = v18;
          }
          if (gLogObjects && gNumLogObjects >= 60)
          {
            int v25 = *(os_log_s **)(gLogObjects + 472);
          }

          else
          {
            int v25 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136316674;
            __int16 v47 = "_qiAuth_protocol_handleResponse_CHALLENGE_AUTH";
            __int16 v48 = 1024;
            int v49 = 2273;
            __int16 v50 = 1024;
            int v51 = 3;
            __int16 v52 = 2080;
            *(void *)int v53 = "CHALLENGE_AUTH";
            *(_WORD *)&v53[8] = 1024;
            *(_DWORD *)&v53[10] = v16;
            *(_WORD *)&v53[14] = 1024;
            *(_DWORD *)&v53[16] = v18;
            __int16 v54 = 1024;
            int v55 = v45;
            _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "%s:%d msgType %d(%s), slot %d, slotPopMask %x, certChainHashLSB %02x",  buf,  0x34u);
          }

          uint64_t v26 = a1 + 8 * v16;
          if (*(void *)(v26 + 336)) {
            goto LABEL_45;
          }
          int v27 = (void *)(v26 + 336);
          if (qiAuth_util_certificateExistsCache(a1, v16, &v45, 1u))
          {
            if (gLogObjects && gNumLogObjects >= 60)
            {
              int v28 = *(os_log_s **)(gLogObjects + 472);
            }

            else
            {
              int v28 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315906;
              __int16 v47 = "_qiAuth_protocol_handleResponse_CHALLENGE_AUTH";
              __int16 v48 = 1024;
              int v49 = 2279;
              __int16 v50 = 1024;
              int v51 = v16;
              __int16 v52 = 1024;
              *(_DWORD *)int v53 = v45;
              _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "%s:%d Found in cache! slot %d, certChainHashLSB %02x",  buf,  0x1Eu);
            }

            if (!*(_BYTE *)(a1 + 322))
            {
              *int v27 = a1 + 368;
              int v37 = (_WORD *)(a1 + 2 * v16 + 324);
              *int v37 = 0;
              *(_BYTE *)(a1 + 322) = 1;
              uint64_t v38 = a1 + 8 * v16;
              if (qiAuth_util_copyCertificateFromCache( a1,  v16,  &v45,  1u,  *(UInt8 **)(v38 + 256),  0x20u,  (UInt8 *)(a1 + 368),  0x600u,  (uint64_t)v37))
              {
                *int v27 = 0LL;
                *int v37 = 0;
                *(_BYTE *)(a1 + 322) = 0;
                goto LABEL_69;
              }

              unsigned int v41 = (uint64_t *)(v38 + 256);
              uint64_t v42 = *v27 + 2LL;
              uint64_t v43 = *v27 + 34LL;
              unsigned int v44 = (bswap32(*(unsigned __int16 *)*v27) >> 16) - 34;
              qiAuth_util_logCertData((const void **)a1, (uint64_t)"CACHE: --CertDigest--", *v41, 0x20u, 1);
              qiAuth_util_logCertData((const void **)a1, (uint64_t)"CACHE: --RootHash--", v42, 0x20u, 1);
              qiAuth_util_logCertData((const void **)a1, (uint64_t)"CACHE: --CertData--", v43, (unsigned __int16)v44, 1);
              if (!qiAuth_util_verifyCertificateChain( a1,  *(unsigned __int8 *)(a1 + 48),  v42,  32,  v43,  (unsigned __int16)v44)) {
                *(_BYTE *)(a1 + 320) |= 1 << v16;
              }
            }
          }

          if (*v27)
          {
LABEL_45:
            unsigned int v8 = &startLogsNotificationObservers;
            if (gLogObjects && gNumLogObjects >= 60)
            {
              int v31 = *(os_log_s **)(gLogObjects + 472);
            }

            else
            {
              int v31 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315650;
              __int16 v47 = "_qiAuth_protocol_handleResponse_CHALLENGE_AUTH";
              __int16 v48 = 1024;
              int v49 = 2328;
              __int16 v50 = 1024;
              int v51 = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "%s:%d Have cert for slot %d !!! verify signature",  buf,  0x18u);
            }

            uint64_t inited = _qiAuth_protocol_finishAuth(a1);
LABEL_53:
            uint64_t v15 = inited;
            int v14 = 3;
            goto LABEL_54;
          }

LABEL_54:
  if (gLogObjects && *((int *)v8 + 708) >= 60)
  {
    int v33 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    int v33 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    if ((v14 - 1) > 0xA)
    {
      unsigned int v34 = "UNKNOWN";
      if (a6) {
        goto LABEL_62;
      }
    }

    else
    {
      unsigned int v34 = off_1001FD120[v14 - 1];
      if (a6)
      {
LABEL_62:
        int v35 = *a6;
LABEL_65:
        *(_DWORD *)buf = 136316930;
        __int16 v47 = "_qiAuth_protocol_handleResponse_CHALLENGE_AUTH";
        __int16 v48 = 1024;
        int v49 = 2349;
        __int16 v50 = 1024;
        int v51 = v15;
        __int16 v52 = 1024;
        *(_DWORD *)int v53 = v14;
        *(_WORD *)&v53[4] = 2080;
        *(void *)&v53[6] = v34;
        *(_WORD *)&v53[14] = 1024;
        *(_DWORD *)&v53[16] = v16;
        __int16 v54 = 1024;
        int v55 = a3;
        __int16 v56 = 1024;
        int v57 = v35;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "%s:%d result %d, msgType %d(%s), slot %d, dataInLen %u, dataOutLen %u",  buf,  0x3Au);
        return v15;
      }
    }

    int v35 = -1;
    goto LABEL_65;
  }

  return v15;
}

          iAP2FSMHandleEvent_cold_2();
        }
      }

      if (!v4) {
        goto LABEL_54;
      }
      unsigned int v7 = *(void (**)(uint64_t *, unsigned __int8 *))v6;
      if (!*(void *)v6) {
        goto LABEL_22;
      }
      *((_BYTE *)a1 + 11) = v2;
      v7(a1, &v28);
      unsigned int v8 = *(unsigned __int8 *)(v6 + 8);
      *((_BYTE *)a1 + 10) = v8;
      uint64_t v2 = v28;
      int v9 = *((unsigned __int8 *)a1 + 9);
    }

    while (v28 < v9);
LABEL_52:
    *((_BYTE *)a1 + 11) = v9;
  }

  else if ((_iAP2LogEnableMask & 1) != 0)
  {
    int v10 = gLogObjects;
    int v11 = gNumLogObjects;
    if (gLogObjects) {
      unsigned int v12 = gNumLogObjects < 20;
    }
    else {
      unsigned int v12 = 1;
    }
    if (v12)
    {
      uint64_t v16 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        acc_nvmInfo_getPairingStatus_cold_1(v10, v11);
      }
    }

    else
    {
      uint64_t v16 = *(os_log_s **)(gLogObjects + 152);
    }

    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      char v17 = "";
      if (a1)
      {
        if (a1[3]) {
          int v18 = (const char *)a1[3];
        }
        else {
          int v18 = "";
        }
        __int128 v19 = a1[5];
        if (v19) {
          __int128 v20 = *(const char **)(v19 + 8LL * v2);
        }
        else {
          __int128 v20 = "";
        }
        char v17 = v18;
      }

      else
      {
        __int128 v20 = "";
      }

      *(_DWORD *)buf = 136315906;
      int v30 = (uint64_t)v17;
      int v31 = 2048;
      uint64_t v32 = a1;
      int v33 = 1024;
      unsigned int v34 = v2;
      int v35 = 2080;
      __int16 v36 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "ERROR: '%s': NULL fsm(%p) pointer or invalid event(%d:%s)!",  buf,  0x26u);
    }
  }

          if ([v33 count])
          {
            int v49 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
            __int16 v71 = 0u;
            int v72 = 0u;
            __int16 v73 = 0u;
            int v74 = 0u;
            __int16 v50 = v33;
            int v51 = [v50 countByEnumeratingWithState:&v71 objects:v87 count:16];
            if (v51)
            {
              __int16 v52 = v51;
              int v53 = *(void *)v72;
              do
              {
                for (k = 0LL; k != v52; k = (char *)k + 1)
                {
                  if (*(void *)v72 != v53) {
                    objc_enumerationMutation(v50);
                  }
                  int v55 = *(void *)(*((void *)&v71 + 1) + 8LL * (void)k);
                  __int16 v56 = (void *)objc_claimAutoreleasedReturnValue([v14 path]);
                  int v57 = (void *)objc_claimAutoreleasedReturnValue([v56 stringByAppendingPathComponent:v55]);
                  -[NSMutableArray addObject:](v49, "addObject:", v57);
                }

                __int16 v52 = [v50 countByEnumeratingWithState:&v71 objects:v87 count:16];
              }

              while (v52);
            }

            int v10 = v64;
            [v64 addObjectsFromArray:v49];

            unsigned int v8 = v70;
            int v9 = v65;
          }

          goto LABEL_64;
        }

        int v18 = (void *)objc_claimAutoreleasedReturnValue([v16 enumeratorAtPath:v17]);

        __int128 v19 = objc_claimAutoreleasedReturnValue([v18 nextObject]);
        if (v19)
        {
          __int128 v20 = (void *)v19;
          while (!v69)
          {
            if (v9) {
              goto LABEL_23;
            }
            if (v8 && [v8 length])
            {
              int v28 = (void *)objc_claimAutoreleasedReturnValue([v20 pathExtension]);
              int v29 = [v28 isEqualToString:v8];

              if ((v29 & 1) == 0) {
                goto LABEL_32;
              }
              goto LABEL_30;
            }

            int v30 = (void *)objc_claimAutoreleasedReturnValue([v20 pathExtension]);
            int v31 = [v30 length];

            if (v31) {
              goto LABEL_30;
            }
LABEL_32:
            uint64_t v32 = objc_claimAutoreleasedReturnValue([v18 nextObject]);

            __int128 v20 = (void *)v32;
            if (!v32) {
              goto LABEL_64;
            }
          }

          if ([v8 length])
          {
            __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([v20 lastPathComponent]);
            __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([v21 stringByDeletingPathExtension]);
            if ([v9 containsObject:v22])
            {
              __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v20 pathExtension]);
              __int128 v24 = [v23 isEqualToString:v8];

              if ((v24 & 1) == 0) {
                goto LABEL_32;
              }
LABEL_30:
              __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([v14 path]);
              __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([v21 stringByAppendingPathComponent:v20]);
              [v10 addObject:v22];
            }

            goto LABEL_32;
          }

  if (gLogObjects && gNumLogObjects >= 61)
  {
    __int128 v23 = *(os_log_s **)(gLogObjects + 480);
  }

  else
  {
    __int128 v23 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    else {
      __int128 v24 = off_1001FE3D0[(char)(v5 - 1)];
    }
    int v25 = *(_DWORD *)(a1 + 8);
    else {
      uint64_t v26 = off_1001FE3D0[(char)(v8 - 1)];
    }
    *(_DWORD *)buf = 136317698;
    int v35 = "t56_protocol_processIncomingData";
    __int16 v36 = 1024;
    int v37 = 358;
    uint64_t v38 = 1024;
    int v39 = v6;
    uint64_t v40 = 1024;
    unsigned int v41 = v25;
    uint64_t v42 = 1024;
    *(_DWORD *)uint64_t v43 = 0;
    *(_WORD *)&v43[4] = 1024;
    *(_DWORD *)&v43[6] = v5;
    *(_WORD *)&_BYTE v43[10] = 2080;
    *(void *)&v43[12] = v24;
    unsigned int v44 = 1024;
    unsigned __int8 v45 = a3;
    int v46 = 1024;
    __int16 v47 = v8;
    __int16 v48 = 2080;
    int v49 = v26;
    __int16 v50 = 1024;
    int v51 = v33;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "%s:%d result %d, role %d, ver %d, msgType %d(%s), dataInLen %d, outMsgType %d(%s), dataOutLen %d",  buf,  0x50u);
  }

  return v6;
}

  __int128 v23 = (v36 | v14) == 0;
  if (v14) {
LABEL_55:
  }
    iap2_identification_addRejectParam(a1, 18, v14);
  return v23;
}

uint64_t _qiAuth_protocol_handleResponse_ERROR( uint64_t a1, _BYTE *a2, int a3, uint64_t a4, unsigned int a5, _WORD *a6)
{
  unsigned int v8 = &startLogsNotificationObservers;
  int v9 = &startLogsNotificationObservers;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 60)
    {
      int v14 = *(os_log_s **)(gLogObjects + 472);
    }

    else
    {
      int v14 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
      _qiAuth_protocol_handleResponse_ERROR_cold_8();
    }
    int v15 = 0;
    uint64_t v16 = 4294967294LL;
    unsigned int v8 = &startLogsNotificationObservers;
    if (a3 == 3 && a2 && !*(_DWORD *)(a1 + 8))
    {
      int v15 = *a2 & 0xF;
      if (gLogObjects && gNumLogObjects >= 60)
      {
        char v17 = *(os_log_s **)(gLogObjects + 472);
      }

      else
      {
        char v17 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        int v31 = *(_DWORD *)(a1 + 8);
        int v32 = *(unsigned __int8 *)(a1 + 48);
        int v50 = 136316418;
        int v51 = "_qiAuth_protocol_handleResponse_ERROR";
        __int16 v52 = 1024;
        int v53 = 2372;
        __int16 v54 = 1024;
        int v55 = v31;
        __int16 v56 = 1024;
        int v57 = v32;
        __int16 v58 = 1024;
        *(_DWORD *)int v59 = v15;
        *(_WORD *)&v59[4] = 2080;
        *(void *)&v59[6] = qiAuth_protocol_msgTypeString(v15);
        _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "%s:%d role %d, currentSlot %d, msgType %d(%s)",  (uint8_t *)&v50,  0x2Eu);
      }

      uint64_t v16 = 4294967294LL;
      if (a6)
      {
        int v9 = &startLogsNotificationObservers;
        unsigned int v8 = &startLogsNotificationObservers;
        if (a5 >= 0x80 && a4 && v15 == 7)
        {
          *a6 = 0;
          if (gLogObjects && gNumLogObjects >= 60)
          {
            int v18 = *(os_log_s **)(gLogObjects + 472);
          }

          else
          {
            int v18 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            int v19 = a2[1];
            int v20 = a2[2];
            int v50 = 136316162;
            int v51 = "_qiAuth_protocol_handleResponse_ERROR";
            __int16 v52 = 1024;
            int v53 = 2382;
            __int16 v54 = 1024;
            int v55 = 7;
            __int16 v56 = 1024;
            int v57 = v19;
            __int16 v58 = 1024;
            *(_DWORD *)int v59 = v20;
            _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%s:%d RX: ERROR msg(%d): errorCode 0x%02X, errorData 0x%02X",  (uint8_t *)&v50,  0x24u);
          }

          switch(a2[1])
          {
            case 0:
            case 1:
            case 4:
              goto LABEL_34;
            case 2:
              if (gLogObjects && gNumLogObjects >= 60)
              {
                __int128 v24 = *(os_log_s **)(gLogObjects + 472);
              }

              else
              {
                __int128 v24 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
              {
                int v44 = a2[1];
                int v45 = a2[2];
                int v46 = *(unsigned __int8 *)(a1 + 224);
                int v50 = 136316418;
                int v51 = "_qiAuth_protocol_handleResponse_ERROR";
                __int16 v52 = 1024;
                int v53 = 2403;
                __int16 v54 = 1024;
                int v55 = 7;
                __int16 v56 = 1024;
                int v57 = v44;
                __int16 v58 = 1024;
                *(_DWORD *)int v59 = v45;
                *(_WORD *)&v59[4] = 1024;
                *(_DWORD *)&v59[6] = v46;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "%s:%d RX: ERROR msg(%d): errorCode 0x%02X, errorData 0x%02X, retryOnErrorCount %d",  (uint8_t *)&v50,  0x2Au);
              }

              if (*(_BYTE *)(a1 + 224))
              {
                int v33 = (os_log_s *)logObjectForModule_19();
                if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
                {
                  int v34 = a2[1];
                  int v35 = a2[2];
                  int v36 = *(unsigned __int8 *)(a1 + 224);
                  int v50 = 136316418;
                  int v51 = "_qiAuth_protocol_handleResponse_ERROR";
                  __int16 v52 = 1024;
                  int v53 = 2419;
                  __int16 v54 = 1024;
                  int v55 = 7;
                  __int16 v56 = 1024;
                  int v57 = v34;
                  __int16 v58 = 1024;
                  *(_DWORD *)int v59 = v35;
                  *(_WORD *)&v59[4] = 1024;
                  *(_DWORD *)&v59[6] = v36;
                  _os_log_debug_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "%s:%d RX: ERROR msg(%d): errorCode 0x%02X, errorData 0x%02X, retryOnErrorCount %d, Already retried, fail auth.",  (uint8_t *)&v50,  0x2Au);
                }

uint64_t qiAuth_protocol_setSlotAuthState(unsigned __int8 *a1, unsigned int a2, int a3)
{
  uint64_t v5 = 4294967294LL;
  if (a1 && a2 <= 3)
  {
    unsigned int v7 = &a1[4 * a2];
    unsigned int v10 = *((_DWORD *)v7 + 57);
    unsigned int v8 = (int *)(v7 + 228);
    unsigned int v9 = v10;
    *unsigned int v8 = a3;
    if (gLogObjects && gNumLogObjects >= 60)
    {
      int v11 = *(os_log_s **)(gLogObjects + 472);
    }

    else
    {
      int v11 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v34 = 136316162;
      int v35 = "qiAuth_protocol_setSlotAuthState";
      __int16 v36 = 1024;
      int v37 = 594;
      __int16 v38 = 1024;
      int v39 = a2;
      __int16 v40 = 1024;
      unsigned int v41 = v9;
      __int16 v42 = 1024;
      int v43 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%s:%d slot %d, authState %d -> %d",  (uint8_t *)&v34,  0x24u);
    }

    if (v9 == a3) {
      goto LABEL_46;
    }
    if (gLogObjects && gNumLogObjects >= 60)
    {
      unsigned int v12 = *(os_log_s **)(gLogObjects + 472);
    }

    else
    {
      unsigned int v12 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = a1[248];
      int v14 = &a1[8 * a2];
      BOOL v15 = *((void *)v14 + 32) != 0LL;
      int v16 = a1[320];
      LODWORD(v14) = *((void *)v14 + 42) != 0LL;
      int v17 = *(unsigned __int16 *)&a1[2 * a2 + 324];
      int v34 = 136317186;
      int v35 = "qiAuth_protocol_setSlotAuthState";
      __int16 v36 = 1024;
      int v37 = 604;
      __int16 v38 = 1024;
      int v39 = a2;
      __int16 v40 = 1024;
      unsigned int v41 = a3;
      __int16 v42 = 1024;
      int v43 = v13;
      __int16 v44 = 1024;
      BOOL v45 = v15;
      __int16 v46 = 1024;
      int v47 = v16;
      __int16 v48 = 1024;
      int v49 = (int)v14;
      __int16 v50 = 1024;
      int v51 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%s:%d slot %d, authState %d, rxDigestsRetrievedMask 0x%x, rxDigests(%d), rxCertsAvailbleMask 0x%x, rxCerts(%d), len %d",  (uint8_t *)&v34,  0x3Cu);
    }

    int v18 = *v8;
    if (*v8 == 1)
    {
      if (((1 << a2) & a1[248]) == 0
        || (int v19 = &a1[8 * a2], !*((void *)v19 + 32))
        || ((1 << a2) & a1[320]) == 0
        || (int v20 = &a1[8 * a2], !*((void *)v20 + 42))
        || (unsigned int v21 = &a1[2 * a2], !*((_WORD *)v21 + 162)))
      {
        uint64_t v27 = gLogObjects;
        int v28 = gNumLogObjects;
        if (!gLogObjects) {
          goto LABEL_33;
        }
        goto LABEL_31;
      }

      uint64_t v22 = (unsigned __int8 **)(v19 + 256);
      __int128 v23 = (const UInt8 **)(v20 + 336);
      __int128 v24 = (unsigned __int16 *)(v21 + 324);
      unsigned int v25 = (os_log_s *)logObjectForModule_19();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v26 = *v24;
        int v34 = 136315906;
        int v35 = "qiAuth_protocol_setSlotAuthState";
        __int16 v36 = 1024;
        int v37 = 613;
        __int16 v38 = 1024;
        int v39 = a2;
        __int16 v40 = 1024;
        unsigned int v41 = v26;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "%s:%d slot %d, Save cert in cache!! certsLen %d",  (uint8_t *)&v34,  0x1Eu);
      }

      qiAuth_util_saveCertificateInCache((uint64_t)a1, a2, *v22, 0x20u, *v23, *v24);
      int v18 = *v8;
    }

    uint64_t v27 = gLogObjects;
    int v28 = gNumLogObjects;
    if (!v18)
    {
LABEL_38:
      if (v27 && v28 >= 60)
      {
        int v31 = *(os_log_s **)(v27 + 472);
      }

      else
      {
        int v31 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        int v34 = 136315906;
        int v35 = "qiAuth_protocol_setSlotAuthState";
        __int16 v36 = 1024;
        int v37 = 630;
        __int16 v38 = 1024;
        int v39 = a2;
        __int16 v40 = 1024;
        unsigned int v41 = a3;
        _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_INFO,  "%s:%d slot %d, notify system of authState %d",  (uint8_t *)&v34,  0x1Eu);
      }

      qiAuth_util_notifySlotAuthState((uint64_t)a1, a2, a3);
LABEL_46:
      uint64_t v5 = 0LL;
      goto LABEL_47;
    }

    if (!gLogObjects) {
      goto LABEL_33;
    }
LABEL_31:
    if (v28 >= 60)
    {
      uint64_t v29 = *(os_log_s **)(v27 + 472);
LABEL_35:
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        unsigned int v30 = a1[48];
        int v34 = 136316162;
        int v35 = "qiAuth_protocol_setSlotAuthState";
        __int16 v36 = 1024;
        int v37 = 623;
        __int16 v38 = 1024;
        int v39 = a2;
        __int16 v40 = 1024;
        unsigned int v41 = v30;
        __int16 v42 = 1024;
        int v43 = 4;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_INFO,  "%s:%d slot %d, done with auth, clear currenSlot %d -> %d",  (uint8_t *)&v34,  0x24u);
      }

      a1[48] = 4;
      uint64_t v27 = gLogObjects;
      int v28 = gNumLogObjects;
      goto LABEL_38;
    }

const char *qiAuth_protocol_authStateString(int a1)
{
  else {
    id v1 = off_1001FD108[a1 - 1];
  }
  if (gLogObjects && gNumLogObjects >= 60)
  {
    uint64_t v2 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    uint64_t v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    qiAuth_protocol_authStateString_cold_1();
  }
  return v1;
}

uint64_t qiAuth_protocol_saveDigest(uint64_t a1, int a2, unsigned int a3, _OWORD *a4, int a5)
{
  uint64_t v7 = 4294967294LL;
  if (a1 && a3 <= 3 && ((1 << a3) & *(unsigned __int8 *)(a1 + 24)) != 0)
  {
    if (a2)
    {
      if (gLogObjects && gNumLogObjects >= 60)
      {
        unsigned int v8 = *(os_log_s **)(gLogObjects + 472);
      }

      else
      {
        unsigned int v8 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        qiAuth_protocol_saveDigest_cold_2();
      }
      uint64_t v7 = 4294967294LL;
    }

    else if (a4 && a5 == 32 && !*(_BYTE *)(a1 + 249))
    {
      uint64_t v7 = 0LL;
      *(void *)(a1 + 8LL * a3 + 256) = a1 + 288;
      __int128 v9 = a4[1];
      *(_OWORD *)(a1 + 28_Block_object_dispose(va, 8) = *a4;
      *(_OWORD *)(a1 + 304) = v9;
      *(_BYTE *)(a1 + 249) = 1;
      *(_BYTE *)(a1 + 248) |= 1 << a3;
    }
  }

  if (gLogObjects && gNumLogObjects >= 60)
  {
    unsigned int v10 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    unsigned int v10 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    int v12 = 136316162;
    int v13 = "qiAuth_protocol_saveDigest";
    __int16 v14 = 1024;
    int v15 = 922;
    __int16 v16 = 1024;
    int v17 = v7;
    __int16 v18 = 1024;
    int v19 = a2;
    __int16 v20 = 1024;
    unsigned int v21 = a3;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "%s:%d Result %d, role %d, slot %d",  (uint8_t *)&v12,  0x24u);
  }

  return v7;
}

uint64_t qiAuth_protocol_saveCertNextSegment( uint64_t a1, unsigned int a2, unsigned int a3, const void *a4, unsigned int a5, unsigned int a6)
{
  unsigned int __n = a6;
  if (gLogObjects && gNumLogObjects >= 60)
  {
    int v11 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    int v11 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    int __n_4 = 136316418;
    int v32 = "qiAuth_protocol_saveCertNextSegment";
    __int16 v33 = 1024;
    int v34 = 1032;
    __int16 v35 = 1024;
    int v36 = a2;
    __int16 v37 = 1024;
    unsigned int v38 = a3;
    __int16 v39 = 1024;
    unsigned int v40 = a5;
    __int16 v41 = 1024;
    unsigned int v42 = __n;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "%s:%d role %d, slot %d, offset %d, length %d",  (uint8_t *)&__n_4,  0x2Au);
  }

  uint64_t v12 = 4294967294LL;
  if (a1 && a3 <= 3 && ((*(unsigned __int8 *)(a1 + 24) >> a3) & 1) != 0)
  {
    if (a2)
    {
      if (gLogObjects && gNumLogObjects >= 60)
      {
        int v13 = *(os_log_s **)(gLogObjects + 472);
      }

      else
      {
        int v13 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        qiAuth_protocol_saveCertNextSegment_cold_3();
      }
      uint64_t v12 = 4294967294LL;
      goto LABEL_28;
    }

    if (!a4 || a5 > 0x600 || __n > 0x600 || __n + a5 > 0x600) {
      goto LABEL_28;
    }
    __int16 v14 = (void *)(a1 + 8LL * a3 + 336);
    if (*v14)
    {
      if (gLogObjects && gNumLogObjects >= 60)
      {
        int v15 = *(os_log_s **)(gLogObjects + 472);
      }

      else
      {
        int v15 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        int __n_4 = 136316418;
        int v32 = "qiAuth_protocol_saveCertNextSegment";
        __int16 v33 = 1024;
        int v34 = 1062;
        __int16 v35 = 1024;
        int v36 = 0;
        __int16 v37 = 1024;
        unsigned int v38 = a3;
        __int16 v39 = 1024;
        unsigned int v40 = a5;
        __int16 v41 = 1024;
        unsigned int v42 = __n;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "%s:%d Already have slot assigned, role %d, slot %d, offset %d, length %d",  (uint8_t *)&__n_4,  0x2Au);
      }

      __int16 v14 = (void *)(a1 + 8LL * a3 + 336);
      if (!*v14)
      {
        uint64_t v12 = 0LL;
        goto LABEL_28;
      }

      uint64_t v23 = a3;
      int v24 = *(unsigned __int16 *)(a1 + 2LL * a3 + 324);
    }

    else
    {
      int v18 = *(unsigned __int8 *)(a1 + 322);
      int v19 = (os_log_s *)logObjectForModule_19();
      __int16 v20 = v19;
      if (v18)
      {
        uint64_t v12 = 0xFFFFFFFFLL;
        if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
          goto LABEL_28;
        }
        int __n_4 = 136316674;
        int v32 = "qiAuth_protocol_saveCertNextSegment";
        __int16 v33 = 1024;
        int v34 = 1057;
        __int16 v35 = 1024;
        int v36 = 0;
        __int16 v37 = 1024;
        unsigned int v38 = a3;
        __int16 v39 = 1024;
        unsigned int v40 = a5;
        __int16 v41 = 1024;
        unsigned int v42 = __n;
        __int16 v43 = 1024;
        int v44 = -1;
        unsigned int v21 = "%s:%d rxCerts failed to init, role %d, slot %d, offset %d, length %d, result %d";
        uint64_t v22 = v20;
        goto LABEL_55;
      }

      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        int __n_4 = 136316418;
        int v32 = "qiAuth_protocol_saveCertNextSegment";
        __int16 v33 = 1024;
        int v34 = 1048;
        __int16 v35 = 1024;
        int v36 = 0;
        __int16 v37 = 1024;
        unsigned int v38 = a3;
        __int16 v39 = 1024;
        unsigned int v40 = a5;
        __int16 v41 = 1024;
        unsigned int v42 = __n;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "%s:%d rxCerts init, role %d, slot %d, offset %d, length %d",  (uint8_t *)&__n_4,  0x2Au);
      }

      int v24 = 0;
      unsigned __int8 v25 = *(_BYTE *)(a1 + 322);
      *__int16 v14 = a1 + 1536LL * v25 + 368;
      uint64_t v23 = a3;
      *(_WORD *)(a1 + 2LL * a3 + 324) = 0;
      *(_BYTE *)(a1 + 322) = v25 + 1;
    }

    unsigned int v26 = (_WORD *)(a1 + 2 * v23 + 324);
    uint64_t v27 = (os_log_s *)logObjectForModule_19();
    int v28 = v27;
    if (v24 == a5)
    {
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        int __n_4 = 136316418;
        int v32 = "qiAuth_protocol_saveCertNextSegment";
        __int16 v33 = 1024;
        int v34 = 1071;
        __int16 v35 = 1024;
        int v36 = 0;
        __int16 v37 = 1024;
        unsigned int v38 = a3;
        __int16 v39 = 1024;
        unsigned int v40 = a5;
        __int16 v41 = 1024;
        unsigned int v42 = __n;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "%s:%d Save certSegment in rxCerts, role %d, slot %d, offset %d, length %d",  (uint8_t *)&__n_4,  0x2Au);
      }

      memcpy((void *)(*v14 + a5), a4, __n);
      uint64_t v12 = 0LL;
      *v26 += __n;
      goto LABEL_28;
    }

    uint64_t v12 = 0xFFFFFFFFLL;
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      goto LABEL_28;
    }
    unsigned int v29 = (unsigned __int16)*v26;
    int __n_4 = 136316674;
    int v32 = "qiAuth_protocol_saveCertNextSegment";
    __int16 v33 = 1024;
    int v34 = 1081;
    __int16 v35 = 1024;
    int v36 = a5;
    __int16 v37 = 1024;
    unsigned int v38 = v29;
    __int16 v39 = 1024;
    unsigned int v40 = 0;
    __int16 v41 = 1024;
    unsigned int v42 = a3;
    __int16 v43 = 1024;
    int v44 = -1;
    unsigned int v21 = "%s:%d offset(%d) not in sequence(%d)! role %d, slot %d, result %d";
    uint64_t v22 = v28;
LABEL_55:
    _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&__n_4, 0x30u);
  }

uint64_t qiAuth_protocol_composeTBSAuth( uint64_t a1, __int128 *a2, int a3, __int128 *a4, int a5, __int16 *a6, int a7, uint64_t a8, unsigned __int16 a9, _WORD *a10)
{
  int v13 = 0;
  uint64_t v14 = 4294967294LL;
  if (a1 && a2 && a3 == 32 && a4 && a5 == 18 && a8 && a9 >= 0x36u && a10)
  {
    uint64_t v14 = 0LL;
    *(_BYTE *)a8 = 65;
    __int128 v15 = *a2;
    *(_OWORD *)(a8 + 17) = a2[1];
    *(_OWORD *)(a8 + 1) = v15;
    __int128 v16 = *a4;
    *(_WORD *)(a8 + 49) = *((_WORD *)a4 + 8);
    *(_OWORD *)(a8 + 33) = v16;
    __int16 v17 = *a6;
    *(_BYTE *)(a8 + 53) = *((_BYTE *)a6 + 2);
    *(_WORD *)(a8 + 51) = v17;
    int v13 = 54;
    *a10 = 54;
  }

  if (gLogObjects && gNumLogObjects >= 60)
  {
    int v18 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    int v18 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = 136316930;
    unsigned int v21 = "qiAuth_protocol_composeTBSAuth";
    __int16 v22 = 1024;
    int v23 = 1126;
    __int16 v24 = 1024;
    int v25 = v14;
    __int16 v26 = 1024;
    int v27 = v13;
    __int16 v28 = 1024;
    int v29 = a3;
    __int16 v30 = 1024;
    int v31 = a5;
    __int16 v32 = 1024;
    int v33 = a7;
    __int16 v34 = 1024;
    int v35 = a9;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%s:%d Result %d, tbsAuthLen %d, certChainHashLen %d, challengeMsgLen %d, challengeAuthHdrLen %d, dataOutSize %d",  (uint8_t *)&v20,  0x36u);
  }

  return v14;
}

uint64_t qiAuth_protocol_calculateChallengeHash( uint64_t a1, unsigned int a2, __int128 *a3, int a4, _BYTE *a5, void *a6, int a7, _WORD *a8, unsigned __int8 *a9, unsigned __int16 a10, _WORD *a11)
{
  int v12 = 0;
  *(void *)&__int128 v13 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v54 = v13;
  __int128 v55 = v13;
  *(_DWORD *)&v53[15] = -1431655766;
  v52[2] = v13;
  *(_OWORD *)int v53 = v13;
  v52[0] = v13;
  v52[1] = v13;
  uint64_t v14 = 4294967294LL;
  if (!a1 || !a5 || !a6 || a7 != 54 || !a8 || !a9 || a10 < 0x20u || !a11) {
    goto LABEL_40;
  }
  if (*(_DWORD *)(a1 + 8))
  {
    int v19 = &startLogsNotificationObservers;
    int v20 = &startLogsNotificationObservers;
LABEL_11:
    if (gLogObjects && gNumLogObjects >= 60)
    {
      unsigned int v21 = *(os_log_s **)(gLogObjects + 472);
    }

    else
    {
      unsigned int v21 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      qiAuth_protocol_calculateChallengeHash_cold_8();
    }
    int v12 = 170;
LABEL_19:
    if (gLogObjects && gNumLogObjects >= 60)
    {
      __int16 v22 = *(os_log_s **)(gLogObjects + 472);
    }

    else
    {
      __int16 v22 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      qiAuth_protocol_calculateChallengeHash_cold_6();
    }
    goto LABEL_26;
  }

  int v29 = *(__int128 **)(a1 + 8LL * a2 + 256);
  if (!v29)
  {
    int v20 = &startLogsNotificationObservers;
    int v19 = &startLogsNotificationObservers;
    if (gLogObjects && gNumLogObjects >= 60)
    {
      __int16 v32 = *(os_log_s **)(gLogObjects + 472);
    }

    else
    {
      __int16 v32 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
      qiAuth_protocol_calculateChallengeHash_cold_10();
    }
    uint64_t v14 = 0xFFFFFFFFLL;
    goto LABEL_11;
  }

  __int128 v30 = v29[1];
  __int128 v54 = *v29;
  __int128 v55 = v30;
  int v12 = HIBYTE(v30);
  if (*(unsigned __int16 *)(a1 + 1924) <= 2u)
  {
    int v20 = &startLogsNotificationObservers;
    int v19 = &startLogsNotificationObservers;
    if (gLogObjects && gNumLogObjects >= 60)
    {
      int v33 = *(os_log_s **)(gLogObjects + 472);
    }

    else
    {
      int v33 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
      qiAuth_protocol_calculateChallengeHash_cold_12();
    }
    uint64_t v14 = 0xFFFFFFFFLL;
    goto LABEL_19;
  }

  LOWORD(v52[0]) = *(_WORD *)(a1 + 1926);
  BYTE2(v52[0]) = *(_BYTE *)(a1 + 1928);
  uint64_t v31 = qiAuth_protocol_composeTBSAuth(a1, &v54, 32, a3, a4, (__int16 *)v52, 3, (uint64_t)a6, 0x36u, a8);
  if (!(_DWORD)v31)
  {
    uint64_t v14 = qiAuth_util_hash_SHA256(a1, a6, (unsigned __int16)*a8, a9, a10, a11);
    if (!(_DWORD)v14)
    {
      *a5 = v12;
      goto LABEL_40;
    }

    int v19 = &startLogsNotificationObservers;
    int v20 = &startLogsNotificationObservers;
    goto LABEL_33;
  }

  uint64_t v14 = v31;
  int v19 = &startLogsNotificationObservers;
  int v20 = &startLogsNotificationObservers;
LABEL_26:
  uint64_t v23 = v20[353];
  if (v23 && *((int *)v19 + 708) >= 60)
  {
    __int16 v24 = *(os_log_s **)(v23 + 472);
  }

  else
  {
    __int16 v24 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
    qiAuth_protocol_calculateChallengeHash_cold_4();
  }
LABEL_33:
  uint64_t v25 = v20[353];
  if (v25 && *((int *)v19 + 708) >= 60)
  {
    __int16 v26 = *(os_log_s **)(v25 + 472);
  }

  else
  {
    __int16 v26 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
    qiAuth_protocol_calculateChallengeHash_cold_2();
  }
LABEL_40:
  if (gLogObjects && gNumLogObjects >= 60)
  {
    int v27 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    int v27 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316930;
    __int16 v37 = "qiAuth_protocol_calculateChallengeHash";
    __int16 v38 = 1024;
    int v39 = 1244;
    __int16 v40 = 1024;
    int v41 = v14;
    __int16 v42 = 1024;
    unsigned int v43 = a2;
    __int16 v44 = 1024;
    int v45 = a4;
    __int16 v46 = 1024;
    int v47 = v12;
    __int16 v48 = 1024;
    int v49 = a7;
    __int16 v50 = 1024;
    int v51 = a10;
    _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "%s:%d result %d, slot %d, challengeMsgLen %d, digestLSB 0x%02x, outTBSAuthSize %d, outChallengeHashSize %d",  buf,  0x36u);
  }

  return v14;
}

uint64_t _qiAuth_protocol_getCachedCertLengthFromHeader(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = 0LL;
  if (a1 && a2 <= 3)
  {
    if (*(_DWORD *)(a1 + 8))
    {
      if (gLogObjects && gNumLogObjects >= 60)
      {
        uint64_t v4 = *(os_log_s **)(gLogObjects + 472);
      }

      else
      {
        uint64_t v4 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        _qiAuth_protocol_getCachedCertLengthFromHeader_cold_3();
      }
      goto LABEL_16;
    }

    uint64_t v5 = a1 + 8LL * a2;
    uint64_t v6 = *(unsigned __int8 **)(v5 + 336);
    if (!v6 || (uint64_t v7 = a1 + 2LL * a2, *(unsigned __int16 *)(v7 + 324) < 2u))
    {
LABEL_16:
      uint64_t v3 = 0LL;
      goto LABEL_17;
    }

    unsigned int v8 = (unsigned __int8 **)(v5 + 336);
    uint64_t v9 = gLogObjects;
    int v10 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 60)
    {
      int v11 = *(os_log_s **)(gLogObjects + 472);
    }

    else
    {
      int v11 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int v23 = 134218240;
        __int16 v24 = (const char *)v9;
        __int16 v25 = 1024;
        int v26 = v10;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  (uint8_t *)&v23,  0x12u);
        uint64_t v6 = *v8;
      }
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      int v14 = *(unsigned __int16 *)(v7 + 324);
      int v15 = *v6;
      int v16 = v6[1];
      int v17 = v6[2];
      int v18 = v6[3];
      int v19 = v6[4];
      int v20 = v6[5];
      int v21 = v6[6];
      int v22 = v6[7];
      int v23 = 136317954;
      __int16 v24 = "_qiAuth_protocol_getCachedCertLengthFromHeader";
      __int16 v25 = 1024;
      int v26 = 1274;
      __int16 v27 = 1024;
      unsigned int v28 = a2;
      __int16 v29 = 1024;
      int v30 = v14;
      __int16 v31 = 1024;
      int v32 = v15;
      __int16 v33 = 1024;
      int v34 = v16;
      __int16 v35 = 1024;
      int v36 = v17;
      __int16 v37 = 1024;
      int v38 = v18;
      __int16 v39 = 1024;
      int v40 = v19;
      __int16 v41 = 1024;
      int v42 = v20;
      __int16 v43 = 1024;
      int v44 = v21;
      __int16 v45 = 1024;
      int v46 = v22;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "%s:%d slot %d, rxCerts(%d bytes): [%02X %02X] %02X %02X %02X %02X %02X %02X ... \n",  (uint8_t *)&v23,  0x4Eu);
      uint64_t v6 = *v8;
    }

    uint64_t v3 = bswap32(*(unsigned __int16 *)v6) >> 16;
  }

uint64_t qiAuth_protocol_initMsg_CHALLENGE( uint64_t a1, unsigned int a2, unsigned int a3, _OWORD *a4, unsigned int a5, uint64_t a6, unsigned int a7, _WORD *a8)
{
  if (gLogObjects && gNumLogObjects >= 60)
  {
    __int128 v13 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    __int128 v13 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136316162;
    __int16 v24 = "qiAuth_protocol_initMsg_CHALLENGE";
    __int16 v25 = 1024;
    int v26 = 2700;
    __int16 v27 = 1024;
    int v28 = a2;
    __int16 v29 = 1024;
    unsigned int v30 = a3;
    __int16 v31 = 1024;
    unsigned int v32 = a5;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s:%d version %d, slotNum %d, nonceLen %d",  buf,  0x24u);
    if (!a6) {
      goto LABEL_14;
    }
  }

  else if (!a6)
  {
    goto LABEL_14;
  }

  if (a5 == 16 && a4 && a3 <= 3 && a7 >= 0x12)
  {
    uint64_t v14 = 0LL;
    *(_BYTE *)a6 = (16 * a2) | 0xB;
    *(_BYTE *)(a6 + 1) = a3;
    *(_OWORD *)(a6 + 2) = *a4;
    *a8 = 18;
    goto LABEL_15;
  }

uint64_t qiAuth_protocol_initMsg_GET_CERTIFICATE( uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, _BYTE *a6, unsigned int a7, unsigned __int16 *a8)
{
  if (gLogObjects && gNumLogObjects >= 60)
  {
    __int128 v13 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    __int128 v13 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136316418;
    __int16 v29 = "qiAuth_protocol_initMsg_GET_CERTIFICATE";
    __int16 v30 = 1024;
    int v31 = 2662;
    __int16 v32 = 1024;
    int v33 = a2;
    __int16 v34 = 1024;
    unsigned int v35 = a3;
    __int16 v36 = 1024;
    unsigned int v37 = a4;
    __int16 v38 = 1024;
    *(_DWORD *)__int16 v39 = a5;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s:%d version %d, slotNum %d, offset, %d, length %d",  buf,  0x2Au);
  }

  if (a6 && a5 <= 0x7F && a4 <= 0x5FF && a3 <= 3 && a7 >= 4 && a5 + a4 <= 0x600)
  {
    *a6 = (16 * a2) | 0xA;
    a6[1] = (a5 >> 6) & 0x1C | (a4 >> 3) & 0xE0 | a3;
    a6[2] = a4;
    a6[3] = a5;
    if (gLogObjects && gNumLogObjects >= 60)
    {
      uint64_t v14 = *(os_log_s **)(gLogObjects + 472);
    }

    else
    {
      uint64_t v14 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v23 = a6[1];
      int v24 = a6[2];
      int v25 = a6[3];
      *(_DWORD *)buf = 136316674;
      __int16 v29 = "qiAuth_protocol_initMsg_GET_CERTIFICATE";
      __int16 v30 = 1024;
      int v31 = 2679;
      __int16 v32 = 1024;
      int v33 = a4;
      __int16 v34 = 1024;
      unsigned int v35 = a5;
      __int16 v36 = 1024;
      unsigned int v37 = v23;
      __int16 v38 = 1024;
      *(_DWORD *)__int16 v39 = v24;
      *(_WORD *)&v39[4] = 1024;
      *(_DWORD *)&v39[6] = v25;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "%s:%d offset %d, length %d, msg: offset_len_slotNum 0x%02X, offset 0x%02X, length 0x%02X",  buf,  0x30u);
    }

    uint64_t v15 = 0LL;
    int v16 = a8;
    *a8 = 4;
    goto LABEL_24;
  }

  uint64_t v15 = 4294967294LL;
  int v16 = a8;
  if (a6)
  {
LABEL_24:
    unsigned int v17 = *a6 & 0xF;
    goto LABEL_25;
  }

  unsigned int v17 = 15;
LABEL_25:
  if (gLogObjects && gNumLogObjects >= 60)
  {
    uint64_t v18 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    uint64_t v18 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v20 = v17 - 1LL;
    if (v20 > 0xA)
    {
      int v21 = "UNKNOWN";
      if (v16) {
        goto LABEL_34;
      }
    }

    else
    {
      int v21 = off_1001FD120[v20];
      if (v16)
      {
LABEL_34:
        int v22 = *v16;
LABEL_37:
        *(_DWORD *)buf = 136316674;
        __int16 v29 = "qiAuth_protocol_initMsg_GET_CERTIFICATE";
        __int16 v30 = 1024;
        int v31 = 2688;
        __int16 v32 = 1024;
        int v33 = v15;
        __int16 v34 = 1024;
        unsigned int v35 = a2;
        __int16 v36 = 1024;
        unsigned int v37 = v17;
        __int16 v38 = 2080;
        *(void *)__int16 v39 = v21;
        *(_WORD *)&v39[8] = 1024;
        int v40 = v22;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "%s:%d result %d, version %u, msgType %d(%s), msgDataOutLen %d",  buf,  0x34u);
        return v15;
      }
    }

    int v22 = -1;
    goto LABEL_37;
  }

  return v15;
}

uint64_t _qiAuth_protocol_finishAuth(uint64_t a1)
{
  if (!a1) {
    goto LABEL_10;
  }
  if (gLogObjects && gNumLogObjects >= 60)
  {
    uint64_t v2 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    uint64_t v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    _qiAuth_protocol_finishAuth_cold_12();
  }
  if (*(_DWORD *)(a1 + 8))
  {
LABEL_10:
    uint64_t v3 = 4294967294LL;
    goto LABEL_11;
  }

  if (gLogObjects && gNumLogObjects >= 60)
  {
    uint64_t v6 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    uint64_t v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    _qiAuth_protocol_finishAuth_cold_10();
  }
  uint64_t v7 = *(unsigned __int8 *)(a1 + 48);
  if (v7 < 4)
  {
    uint64_t v8 = a1 + 8 * v7;
    if (!*(void *)(v8 + 336))
    {
LABEL_69:
      uint64_t v3 = 0LL;
      goto LABEL_11;
    }

    if (gLogObjects && gNumLogObjects >= 60)
    {
      uint64_t v9 = *(os_log_s **)(gLogObjects + 472);
    }

    else
    {
      uint64_t v9 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    int v11 = (unsigned __int16 **)(v8 + 336);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      __int16 v30 = "_qiAuth_protocol_finishAuth";
      __int16 v31 = 1024;
      int v32 = 2483;
      __int16 v33 = 1024;
      int v34 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s:%d Have cert for slot %d !!! verify signature",  buf,  0x18u);
    }

    uint64_t v12 = (uint64_t)*v11;
    uint64_t v13 = (uint64_t)(*v11 + 17);
    unsigned int v14 = **v11;
    unsigned __int8 v28 = 0;
    __int16 v27 = 0;
    __int16 v26 = 0;
    if (*(_WORD *)(a1 + 1904) == 18)
    {
      if (!qiAuth_protocol_calculateChallengeHash( a1,  v7,  (__int128 *)(a1 + 1906),  18,  &v28,  (void *)(a1 + 49),  54,  &v27,  (unsigned __int8 *)(a1 + 103),  0x20u,  &v26))
      {
        uint64_t v15 = v12 + 2;
        unsigned int v16 = (bswap32(v14) >> 16) - 34;
        int v17 = 1;
        qiAuth_util_logCertData((const void **)a1, (uint64_t)"FINISH: --RootHash--", v15, 0x20u, 1);
        qiAuth_util_logCertData((const void **)a1, (uint64_t)"FINISH: --CertData--", v13, (unsigned __int16)v16, 1);
        qiAuth_util_logCertData((const void **)a1, (uint64_t)"FINISH: --nonce--", a1 + 135, 0x10u, 1);
        int v25 = (void *)(a1 + 49);
        qiAuth_util_logCertData((const void **)a1, (uint64_t)"FINISH: --TBSAuth--", a1 + 49, 0x36u, 1);
        qiAuth_util_logCertData((const void **)a1, (uint64_t)"FINISH: --TBSAuthHash--", a1 + 103, 0x20u, 1);
        qiAuth_util_logCertData((const void **)a1, (uint64_t)"FINISH: --Signature--", a1 + 151, 0x40u, 1);
        *(_BYTE *)(a1 + 215) = 1;
        if (!qiAuth_util_verifyChallengeSignature( a1,  v7,  v15,  32,  v13,  (unsigned __int16)v16,  a1 + 103,  0x20u,  a1 + 151,  0x40u))
        {
LABEL_68:
          qiAuth_protocol_setSlotAuthState((unsigned __int8 *)a1, v7, v17);
          goto LABEL_69;
        }

        uint64_t v18 = (os_log_s *)logObjectForModule_19();
        BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
        if (v19)
        {
          int v20 = *(_DWORD *)(a1 + 44);
          *(_DWORD *)buf = 136316162;
          __int16 v30 = "_qiAuth_protocol_finishAuth";
          __int16 v31 = 1024;
          int v32 = 2531;
          __int16 v33 = 1024;
          int v34 = v7;
          __int16 v35 = 1024;
          int v36 = v20;
          __int16 v37 = 1024;
          int v38 = v28;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%s:%d Signature verification failed, retry with legacy hash calculation!!!  slot %d, lastMsgSent %d, digestLSB 0x%x",  buf,  0x24u);
        }

        if (!qiAuth_protocol_initMsg_CHALLENGE_AUTH( v19,  *(unsigned __int8 *)(a1 + 12),  1u,  *(unsigned __int8 *)(a1 + 24),  v28,  0LL,  0,  (_BYTE *)(a1 + 1926),  0x12u,  (__int16 *)(a1 + 1924)))
        {
          unsigned int v21 = *(unsigned __int16 *)(a1 + 1924);
          if (v21 >= 3)
          {
            qiAuth_util_logCertData((const void **)a1, (uint64_t)"FINISH: recalc --CHALLENGE_AUTH--", a1 + 1926, v21, 1);
            if (!qiAuth_protocol_calculateChallengeHash( a1,  v7,  (__int128 *)(a1 + 1906),  *(unsigned __int16 *)(a1 + 1904),  &v28,  v25,  54,  &v27,  (unsigned __int8 *)(a1 + 103),  0x20u,  &v26))
            {
              qiAuth_util_logCertData((const void **)a1, (uint64_t)"FINISH: recalc --TBSAuth--", (uint64_t)v25, 0x36u, 1);
              qiAuth_util_logCertData((const void **)a1, (uint64_t)"FINISH: recalc --TBSAuthHash--", a1 + 103, 0x20u, 1);
              if (qiAuth_util_verifyChallengeSignature( a1,  v7,  v15,  32,  v13,  (unsigned __int16)v16,  a1 + 103,  0x20u,  a1 + 151,  0x40u)) {
                int v17 = 2;
              }
              else {
                int v17 = 1;
              }
              goto LABEL_68;
            }
          }
        }

        int v22 = (os_log_s *)logObjectForModule_19();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
          _qiAuth_protocol_finishAuth_cold_2();
        }
LABEL_67:
        int v17 = 2;
        goto LABEL_68;
      }
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 60)
      {
        unsigned int v23 = *(os_log_s **)(gLogObjects + 472);
      }

      else
      {
        unsigned int v23 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        _qiAuth_protocol_finishAuth_cold_5();
      }
    }

    if (gLogObjects && gNumLogObjects >= 60)
    {
      int v24 = *(os_log_s **)(gLogObjects + 472);
    }

    else
    {
      int v24 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      _qiAuth_protocol_finishAuth_cold_3();
    }
    goto LABEL_67;
  }

  if (gLogObjects && gNumLogObjects >= 60)
  {
    int v10 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    int v10 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
    _qiAuth_protocol_finishAuth_cold_8();
  }
  uint64_t v3 = 0xFFFFFFFFLL;
LABEL_11:
  if (gLogObjects && gNumLogObjects >= 60)
  {
    uint64_t v4 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    uint64_t v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    __int16 v30 = "_qiAuth_protocol_finishAuth";
    __int16 v31 = 1024;
    int v32 = 2587;
    __int16 v33 = 1024;
    int v34 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s:%d result %d", buf, 0x18u);
  }

  return v3;
}

uint64_t qiAuth_protocol_initMsg_CHALLENGE_AUTH( uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, const void *a6, unsigned int a7, _BYTE *a8, unsigned __int16 a9, __int16 *a10)
{
  if (gLogObjects && gNumLogObjects >= 60)
  {
    uint64_t v15 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    uint64_t v15 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    if (a8) {
      goto LABEL_8;
    }
LABEL_19:
    unsigned int v18 = 15;
    uint64_t v16 = 4294967294LL;
    goto LABEL_20;
  }

  *(_DWORD *)buf = 136316674;
  __int16 v27 = "qiAuth_protocol_initMsg_CHALLENGE_AUTH";
  __int16 v28 = 1024;
  int v29 = 2830;
  __int16 v30 = 1024;
  int v31 = a2;
  __int16 v32 = 1024;
  unsigned int v33 = a3;
  __int16 v34 = 1024;
  unsigned int v35 = a4;
  __int16 v36 = 1024;
  *(_DWORD *)__int16 v37 = a5;
  *(_WORD *)&v37[4] = 1024;
  *(_DWORD *)&_BYTE v37[6] = a7;
  _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "%s:%d version %d, maxProtocolVersion %d, slotPopulatedMask 0x%x, certChainHashLSB, 0x%02x, signatureLen %d",  buf,  0x30u);
  if (!a8) {
    goto LABEL_19;
  }
LABEL_8:
  uint64_t v16 = 4294967294LL;
  if (a3 <= 0xF && a7 <= 0x7D && a7 + 3 <= a9 && a4 <= 0xF && (!a6 || a7 == 64))
  {
    __int16 v17 = 3;
    *a8 = (16 * a2) | 3;
    a8[1] = a4 & 0xF | (16 * a3);
    a8[2] = a5;
    if (a6)
    {
      memcpy(a8 + 3, a6, a7);
      __int16 v17 = a7 + 3;
    }

    uint64_t v16 = 0LL;
    *a10 = v17;
  }

  unsigned int v18 = *a8 & 0xF;
LABEL_20:
  if (gLogObjects && gNumLogObjects >= 60)
  {
    BOOL v19 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    BOOL v19 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v21 = v18 - 1LL;
    if (v21 > 0xA)
    {
      int v22 = "UNKNOWN";
      if (a10) {
        goto LABEL_29;
      }
    }

    else
    {
      int v22 = off_1001FD120[v21];
      if (a10)
      {
LABEL_29:
        int v23 = (unsigned __int16)*a10;
LABEL_32:
        *(_DWORD *)buf = 136316674;
        __int16 v27 = "qiAuth_protocol_initMsg_CHALLENGE_AUTH";
        __int16 v28 = 1024;
        int v29 = 2859;
        __int16 v30 = 1024;
        int v31 = v16;
        __int16 v32 = 1024;
        unsigned int v33 = a2;
        __int16 v34 = 1024;
        unsigned int v35 = v18;
        __int16 v36 = 2080;
        *(void *)__int16 v37 = v22;
        *(_WORD *)&v37[8] = 1024;
        int v38 = v23;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "%s:%d result %d, version %u, msgType %d(%s), msgDataOutLen %d",  buf,  0x34u);
        return v16;
      }
    }

    int v23 = -1;
    goto LABEL_32;
  }

  return v16;
}

void OUTLINED_FUNCTION_4_18(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

void OUTLINED_FUNCTION_7_10(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void OUTLINED_FUNCTION_8_11(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

void OUTLINED_FUNCTION_9_9(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

  ;
}

  ;
}

void OUTLINED_FUNCTION_16_2(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

  ;
}

void OUTLINED_FUNCTION_18_1(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

  ;
}

  ;
}

  ;
}

uint64_t iap2_features_registerMessageHandlers()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects <= 18;
  }
  else {
    BOOL v0 = 1;
  }
  int v1 = !v0;
  if ((iap2_features_registerMessageHandlers_handlersRegistered & 1) != 0)
  {
    if (v1)
    {
      uint64_t v2 = *(os_log_s **)(gLogObjects + 144);
    }

    else
    {
      uint64_t v2 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
      iap2_features_registerMessageHandlers_cold_1(v2, v4, v5, v6, v7, v8, v9, v10);
    }
  }

  else
  {
    if (v1)
    {
      uint64_t v3 = *(os_log_s **)(gLogObjects + 144);
    }

    else
    {
      uint64_t v3 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Registering message handlers...", buf, 2u);
    }

    for (uint64_t i = 0LL; i != 29; ++i)
    {
      uint64_t v12 = gLogObjects;
      int v13 = gNumLogObjects;
      if (gLogObjects) {
        BOOL v14 = gNumLogObjects < 19;
      }
      else {
        BOOL v14 = 1;
      }
      if (v14)
      {
        uint64_t v15 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          uint64_t v26 = v12;
          __int16 v27 = 1024;
          int v28 = v13;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          uint64_t v15 = (os_log_s *)&_os_log_default;
        }
      }

      else
      {
        uint64_t v15 = *(os_log_s **)(gLogObjects + 144);
      }

      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
        iap2_features_registerMessageHandlers_cold_3(v23, i, v24, v15);
      }
      uint64_t v16 = &_kiAP2FeatureInfoEntries[4 * i];
      uint64_t v17 = *((void *)v16 + 1);
      if (*(void *)(v17 + 8))
      {
        if (*(_WORD *)(v17 + 16))
        {
          uint64_t v18 = 0LL;
          unint64_t v19 = 0LL;
          do
          {
            iap2_messageHandlers_setHandler( (void *)*(unsigned __int16 *)(*(void *)(v17 + 8) + v18),  *(void **)(*(void *)(v17 + 8) + v18 + 8));
            ++v19;
            v18 += 16LL;
          }

          while (v19 < *(unsigned __int16 *)(v17 + 16));
        }
      }

      else
      {
        int v20 = (os_log_s *)logObjectForModule_26();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          int v21 = *v16;
          *(_DWORD *)buf = 67109120;
          LODWORD(v26) = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "pMessageHandlerEntries = NULL for %{coreacc:iAP2Feature_t}d!",  buf,  8u);
        }
      }
    }

    iap2_features_registerMessageHandlers_handlersRegistered = 1;
  }

  return 1LL;
}

void *logObjectForModule_26()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 19;
  }
  else {
    BOOL v0 = 1;
  }
  if (!v0) {
    return *(void **)(gLogObjects + 144);
  }
  int v1 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v1;
}

uint64_t iap2_features_registerIdentificationParamHandlers()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects <= 18;
  }
  else {
    BOOL v0 = 1;
  }
  int v1 = !v0;
  if ((iap2_features_registerIdentificationParamHandlers_handlersRegistered & 1) != 0)
  {
    if (v1)
    {
      uint64_t v2 = *(os_log_s **)(gLogObjects + 144);
    }

    else
    {
      uint64_t v2 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
      iap2_features_registerIdentificationParamHandlers_cold_1(v2, v4, v5, v6, v7, v8, v9, v10);
    }
  }

  else
  {
    if (v1)
    {
      uint64_t v3 = *(os_log_s **)(gLogObjects + 144);
    }

    else
    {
      uint64_t v3 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Registering identification param handlers...",  buf,  2u);
    }

    for (uint64_t i = 0LL; i != 29; ++i)
    {
      uint64_t v12 = gLogObjects;
      int v13 = gNumLogObjects;
      if (gLogObjects) {
        BOOL v14 = gNumLogObjects < 19;
      }
      else {
        BOOL v14 = 1;
      }
      if (v14)
      {
        uint64_t v15 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          uint64_t v27 = v12;
          __int16 v28 = 1024;
          int v29 = v13;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          uint64_t v15 = (os_log_s *)&_os_log_default;
        }
      }

      else
      {
        uint64_t v15 = *(os_log_s **)(gLogObjects + 144);
      }

      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
        iap2_features_registerIdentificationParamHandlers_cold_3(v24, i, v25, v15);
      }
      uint64_t v16 = &_kiAP2FeatureInfoEntries[4 * i];
      uint64_t v17 = *((void *)v16 + 1);
      if (*(void *)(v17 + 24))
      {
        if (*(_WORD *)(v17 + 32))
        {
          uint64_t v18 = 0LL;
          unint64_t v19 = 0LL;
          do
          {
            int v20 = (void **)(*(void *)(v17 + 24) + v18);
            iap2_identification_setParamHandler((void *)*(unsigned int *)v20, v20[1]);
            if (*((_BYTE *)v20 + 16)) {
              iap2_identification_setRequiredIdentificationParam(*(_DWORD *)v20);
            }
            ++v19;
            v18 += 24LL;
          }

          while (v19 < *(unsigned __int16 *)(v17 + 32));
        }
      }

      else
      {
        int v21 = (os_log_s *)logObjectForModule_26();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          int v22 = *v16;
          *(_DWORD *)buf = 67109120;
          LODWORD(v27) = v22;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "pIdentificationParamHandlerEntries = NULL for %{coreacc:iAP2Feature_t}d!",  buf,  8u);
        }
      }
    }

    iap2_features_registerIdentificationParamHandlers_handlersRegistered = 1;
  }

  return 1LL;
}

uint64_t iap2_features_createFeatures(const __CFSet *a1, int a2)
{
  uint64_t v4 = &startLogsNotificationObservers;
  if (gLogObjects) {
    BOOL v5 = gNumLogObjects <= 18;
  }
  else {
    BOOL v5 = 1;
  }
  int v6 = !v5;
  if (a2)
  {
    if (v6)
    {
      uint64_t v7 = *(os_log_s **)(gLogObjects + 144);
    }

    else
    {
      uint64_t v7 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_21;
    }
    *(_WORD *)buf = 0;
    uint64_t v8 = "Creating required features...";
  }

  else
  {
    if (v6)
    {
      uint64_t v7 = *(os_log_s **)(gLogObjects + 144);
    }

    else
    {
      uint64_t v7 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_21;
    }
    *(_WORD *)buf = 0;
    uint64_t v8 = "Creating optional features that have been identified for...";
  }

  _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, buf, 2u);
LABEL_21:
  for (uint64_t i = 0LL; i != 116; i += 4LL)
  {
    uint64_t v10 = *(void *)&_kiAP2FeatureInfoEntries[i + 2];
    if (*(void *)v10 && *(unsigned __int8 *)(v10 + 34) == a2)
    {
      uint64_t v11 = _kiAP2FeatureInfoEntries[i];
      if (a1 && *((void *)a1 + v11 + 25))
      {
        uint64_t v12 = v4[353];
        int v13 = gNumLogObjects;
        if (v12 && gNumLogObjects >= 19)
        {
          BOOL v14 = *(os_log_s **)(v12 + 144);
        }

        else
        {
          BOOL v14 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            uint64_t v32 = v12;
            __int16 v33 = 1024;
            int v34 = v13;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          }
        }

        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v32) = v11;
          unint64_t v19 = v14;
          os_log_type_t v20 = OS_LOG_TYPE_INFO;
          int v21 = "Feature already created: %{coreacc:iAP2Feature_t}d!";
LABEL_38:
          _os_log_impl((void *)&_mh_execute_header, v19, v20, v21, buf, 8u);
          continue;
        }
      }

      else if ((a2 & 1) != 0 || iap2_identification_isIdentifiedForFeature(a1, v11))
      {
        uint64_t v15 = v4;
        uint64_t v16 = v4[353];
        int v17 = gNumLogObjects;
        if (v16 && gNumLogObjects >= 19)
        {
          uint64_t v18 = *(os_log_s **)(v16 + 144);
        }

        else
        {
          uint64_t v18 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            uint64_t v32 = v16;
            __int16 v33 = 1024;
            int v34 = v17;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          }
        }

        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v32) = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "Creating feature: %{coreacc:iAP2Feature_t}d...",  buf,  8u);
        }

        int v22 = **(uint64_t (***)(const __CFSet *))v10;
        uint64_t v4 = v15;
        if (v22)
        {
          uint64_t v23 = v22(a1);
          if (v23)
          {
            if (a1) {
              *((void *)a1 + v11 + 25) = v23;
            }
          }

          else
          {
            uint64_t v27 = v15[353];
            int v28 = gNumLogObjects;
            if (v27 && gNumLogObjects >= 19)
            {
              int v29 = *(os_log_s **)(v27 + 144);
            }

            else
            {
              int v29 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                uint64_t v32 = v27;
                __int16 v33 = 1024;
                int v34 = v28;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              }
            }

            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67109120;
              LODWORD(v32) = v11;
              _os_log_error_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_ERROR,  "Error creating feature: %{coreacc:iAP2Feature_t}d!",  buf,  8u);
            }
          }
        }

        else
        {
          uint64_t v24 = v15[353];
          int v25 = gNumLogObjects;
          if (v24 && gNumLogObjects >= 19)
          {
            uint64_t v26 = *(os_log_s **)(v24 + 144);
          }

          else
          {
            uint64_t v26 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              uint64_t v32 = v24;
              __int16 v33 = 1024;
              int v34 = v25;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            }
          }

          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v32) = v11;
            unint64_t v19 = v26;
            os_log_type_t v20 = OS_LOG_TYPE_DEFAULT;
            int v21 = "No create function for feature: %{coreacc:iAP2Feature_t}d!";
            goto LABEL_38;
          }
        }
      }
    }
  }

  return 0LL;
}

uint64_t iap2_feature_getFeature(uint64_t result, unsigned int a2)
{
  if (result) {
    return *(void *)(result + 8LL * a2 + 200);
  }
  return result;
}

uint64_t iap2_features_createFeature(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = 0LL;
  while (1)
  {
    if (_kiAP2FeatureInfoEntries[v4] == a2)
    {
      BOOL v5 = *(uint64_t (****)(uint64_t))&_kiAP2FeatureInfoEntries[v4 + 2];
      if (*v5) {
        break;
      }
    }

    v4 += 4LL;
    if (v4 == 116) {
      return 0LL;
    }
  }

  uint64_t v7 = a1 + 8LL * a2;
  if (a1 && *(void *)(v7 + 200))
  {
    if (gLogObjects && gNumLogObjects >= 19)
    {
      uint64_t v8 = *(os_log_s **)(gLogObjects + 144);
    }

    else
    {
      uint64_t v8 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      int v17 = 67109120;
      unsigned int v18 = a2;
      uint64_t v10 = "Feature already created: %{coreacc:iAP2Feature_t}d!";
      uint64_t v11 = v8;
      os_log_type_t v12 = OS_LOG_TYPE_INFO;
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, v11, v12, v10, (uint8_t *)&v17, 8u);
    }
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 19)
    {
      uint64_t v9 = *(os_log_s **)(gLogObjects + 144);
    }

    else
    {
      uint64_t v9 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v17 = 67109120;
      unsigned int v18 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Creating feature: %{coreacc:iAP2Feature_t}d...",  (uint8_t *)&v17,  8u);
    }

    int v13 = **v5;
    if (v13)
    {
      uint64_t v14 = v13(a1);
      if (v14)
      {
        if (a1) {
          *(void *)(v7 + 200) = v14;
        }
      }

      else
      {
        if (gLogObjects && gNumLogObjects >= 19)
        {
          uint64_t v16 = *(os_log_s **)(gLogObjects + 144);
        }

        else
        {
          uint64_t v16 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
          iap2_features_createFeature_cold_2(a2, v16);
        }
      }
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 19)
      {
        uint64_t v15 = *(os_log_s **)(gLogObjects + 144);
      }

      else
      {
        uint64_t v15 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = 67109120;
        unsigned int v18 = a2;
        uint64_t v10 = "No create function for feature: %{coreacc:iAP2Feature_t}d!";
        uint64_t v11 = v15;
        os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_18;
      }
    }
  }

  return 0LL;
}

uint64_t iap2_features_destroyFeatures(uint64_t a1, int a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects <= 18;
  }
  else {
    BOOL v4 = 1;
  }
  int v5 = !v4;
  if (a2)
  {
    if (v5)
    {
      int v6 = *(os_log_s **)(gLogObjects + 144);
    }

    else
    {
      int v6 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      label = dispatch_queue_get_label(0LL);
      uint64_t v7 = "Destroying required features... currentDispatchQueue: %s";
LABEL_20:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v7, buf, 0xCu);
    }
  }

  else
  {
    if (v5)
    {
      int v6 = *(os_log_s **)(gLogObjects + 144);
    }

    else
    {
      int v6 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      label = dispatch_queue_get_label(0LL);
      uint64_t v7 = "Destroying optional features... currentDispatchQueue: %s";
      goto LABEL_20;
    }
  }

  for (uint64_t i = 0LL; i != 116; i += 4LL)
  {
    uint64_t v9 = *(unsigned __int8 **)&_kiAP2FeatureInfoEntries[i + 2];
    if (*(void *)v9)
    {
      if (v9[34] == a2)
      {
        if (a1)
        {
          uint64_t v10 = _kiAP2FeatureInfoEntries[i];
          uint64_t v11 = a1 + 8 * v10;
          uint64_t v13 = *(void *)(v11 + 200);
          os_log_type_t v12 = (void *)(v11 + 200);
          uint64_t v25 = v13;
          if (v13)
          {
            uint64_t v14 = gLogObjects;
            int v15 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 19)
            {
              uint64_t v16 = *(os_log_s **)(gLogObjects + 144);
            }

            else
            {
              uint64_t v16 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                label = (const char *)v14;
                __int16 v28 = 1024;
                int v29 = v15;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              }
            }

            if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 67109120;
              LODWORD(label) = v10;
              _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "Destroying feature: %{coreacc:iAP2Feature_t}d...",  buf,  8u);
            }

            int v17 = *(uint64_t (**)(uint64_t *, uint64_t))(*(void *)v9 + 8LL);
            *os_log_type_t v12 = 0LL;
            if (v17)
            {
              if ((v17(&v25, a1) & 1) == 0)
              {
                uint64_t v18 = gLogObjects;
                int v19 = gNumLogObjects;
                if (gLogObjects && gNumLogObjects >= 19)
                {
                  os_log_type_t v20 = *(os_log_s **)(gLogObjects + 144);
                }

                else
                {
                  os_log_type_t v20 = (os_log_s *)&_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 134218240;
                    label = (const char *)v18;
                    __int16 v28 = 1024;
                    int v29 = v19;
                    _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                  }
                }

                if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 67109120;
                  LODWORD(label) = v10;
                  _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "Error destroying feature: %{coreacc:iAP2Feature_t}d!",  buf,  8u);
                }
              }
            }

            else
            {
              uint64_t v21 = gLogObjects;
              int v22 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 19)
              {
                uint64_t v23 = *(os_log_s **)(gLogObjects + 144);
              }

              else
              {
                uint64_t v23 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  label = (const char *)v21;
                  __int16 v28 = 1024;
                  int v29 = v22;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                }
              }

              if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109120;
                LODWORD(label) = v10;
                _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "No destroy function for feature: %{coreacc:iAP2Feature_t}d!",  buf,  8u);
              }
            }
          }
        }
      }
    }
  }

  return 0LL;
}

uint64_t iap2_features_startFeaturesFromDevice(const __CFSet *a1, int a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects <= 18;
  }
  else {
    BOOL v4 = 1;
  }
  int v5 = !v4;
  if (a2)
  {
    if (v5)
    {
      int v6 = *(os_log_s **)(gLogObjects + 144);
    }

    else
    {
      int v6 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_21;
    }
    *(_WORD *)buf = 0;
    uint64_t v7 = "Auto-starting required features...";
  }

  else
  {
    if (v5)
    {
      int v6 = *(os_log_s **)(gLogObjects + 144);
    }

    else
    {
      int v6 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_21;
    }
    *(_WORD *)buf = 0;
    uint64_t v7 = "Auto-starting optional features...";
  }

  _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v7, buf, 2u);
LABEL_21:
  for (uint64_t i = 0LL; i != 116; i += 4LL)
  {
    uint64_t v9 = *(uint64_t **)&_kiAP2FeatureInfoEntries[i + 2];
    uint64_t v10 = *v9;
    if (*v9 && *((unsigned __int8 *)v9 + 34) == a2)
    {
      int v11 = _kiAP2FeatureInfoEntries[i];
      if ((a2 & 1) == 0)
      {
        uint64_t v10 = *v9;
      }

      os_log_type_t v12 = *(void (**)(const __CFSet *))(v10 + 16);
      uint64_t v13 = gLogObjects;
      int v14 = gNumLogObjects;
      if (gLogObjects) {
        BOOL v15 = gNumLogObjects <= 18;
      }
      else {
        BOOL v15 = 1;
      }
      int v16 = !v15;
      if (v12)
      {
        if (v16)
        {
          int v17 = *(os_log_s **)(gLogObjects + 144);
        }

        else
        {
          int v17 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            uint64_t v21 = v13;
            __int16 v22 = 1024;
            int v23 = v14;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            int v17 = (os_log_s *)&_os_log_default;
          }
        }

        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v21) = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "Auto-starting feature: %{coreacc:iAP2Feature_t}d...",  buf,  8u);
        }

        v12(a1);
      }

      else
      {
        if (v16)
        {
          uint64_t v18 = *(os_log_s **)(gLogObjects + 144);
        }

        else
        {
          uint64_t v18 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            uint64_t v21 = v13;
            __int16 v22 = 1024;
            int v23 = v14;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            uint64_t v18 = (os_log_s *)&_os_log_default;
          }
        }

        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v21) = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "No auto-start function for feature: %{coreacc:iAP2Feature_t}d!",  buf,  8u);
        }
      }
    }
  }

  return 0LL;
}

uint64_t iap2_features_startFeatureFromDevice(const __CFSet *a1, unsigned int a2)
{
  uint64_t v4 = 0LL;
  while (1)
  {
    if (_kiAP2FeatureInfoEntries[v4] == a2)
    {
      int v5 = *(uint64_t **)&_kiAP2FeatureInfoEntries[v4 + 2];
      uint64_t v6 = *v5;
      if (*v5) {
        break;
      }
    }

    v4 += 4LL;
    if (v4 == 116) {
      return 0LL;
    }
  }

  if (!*((_BYTE *)v5 + 34))
  {
    uint64_t v6 = *v5;
  }

  uint64_t v7 = *(void (**)(const __CFSet *))(v6 + 16);
  if (v7)
  {
    if (gLogObjects && gNumLogObjects >= 19)
    {
      uint64_t v8 = *(os_log_s **)(gLogObjects + 144);
    }

    else
    {
      uint64_t v8 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v10[0] = 67109120;
      v10[1] = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Auto-starting feature: %{coreacc:iAP2Feature_t}d...",  (uint8_t *)v10,  8u);
    }

    v7(a1);
  }

  return 0LL;
}

int *iap2_feature_getFeatureInfoEntries(int *result)
{
  if (result)
  {
    *(_BYTE *)uint64_t result = 29;
    return &_kiAP2FeatureInfoEntries;
  }

  return result;
}

void OUTLINED_FUNCTION_3_13(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, os_log_s *a4@<X8>)
{
}

uint64_t iap2_sessionRouter_processSessionData( unint64_t a1, uint64_t a2, unsigned __int16 *a3, unsigned int a4)
{
  if (gLogObjects) {
    BOOL v8 = gNumLogObjects < 19;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    uint64_t v9 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      _parseIdentificationParams_cold_2();
    }
  }

  else
  {
    uint64_t v9 = *(os_log_s **)(gLogObjects + 144);
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
    iap2_sessionRouter_processSessionData_cold_2(a2, v9);
  }
  unint64_t v10 = 0LL;
  switch(*(_BYTE *)(a2 + 1))
  {
    case 0:
      unint64_t v11 = iap2_sessionControl_parseIncomingMessage(a1, (char *)a3, a4);
      goto LABEL_17;
    case 1:
      unint64_t v11 = iap2_sessionFileTransfer_handleDatagram(a1, (unsigned __int8 *)a3, a4);
      goto LABEL_17;
    case 2:
      if (a4 < 3)
      {
        if (a4 == 2)
        {
          if (gLogObjects && gNumLogObjects >= 19)
          {
            int v16 = *(os_log_s **)(gLogObjects + 144);
          }

          else
          {
            int v16 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              _parseIdentificationParams_cold_2();
            }
          }

          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int v17 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Received EA packet of 0 bytes, no data to process!",  v17,  2u);
          }

          return 1LL;
        }

        else
        {
          return 0LL;
        }
      }

      else
      {
        uint64_t v12 = a4;
        uint64_t v13 = bswap32(*a3) >> 16;
        CFDataRef v14 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)a3 + 2, v12 - 2);
        unint64_t v10 = (unint64_t)platform_externalAccessory_handleIncomingEADataFromAccessoryForSessionID( v13,  (uint64_t)v14);
        if (v14) {
          CFRelease(v14);
        }
      }

      return v10;
    case 4:
      unint64_t v11 = iap2_sessionLog_parseIncomingMessage(a1, (uint64_t)a3, a4);
LABEL_17:
      unint64_t v10 = v11;
      break;
    default:
      return v10;
  }

  return v10;
}

uint64_t iAP2FSMGetBuffSize()
{
  return 48LL;
}

uint64_t iAP2FSMCreate( char a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result = a9;
  if (!a9) {
    iAP2FSMCreate_cold_1();
  }
  *(void *)a9 = a4;
  *(_BYTE *)(a9 + 9) = a3;
  *(_BYTE *)(a9 + _Block_object_dispose(va, 8) = a1;
  *(_BYTE *)(a9 + 10) = a2;
  *(_BYTE *)(a9 + 11) = a3;
  *(void *)(a9 + 16) = a5;
  *(void *)(a9 + 24) = a6;
  *(void *)(a9 + 32) = a7;
  *(void *)(a9 + 40) = a8;
  return result;
}

void iAP2FSMHandleEvent(uint64_t *a1, unsigned int a2)
{
  unsigned int v2 = a2;
  unsigned __int8 v28 = a2;
  if (a1 && *((unsigned __int8 *)a1 + 9) > a2)
  {
    do
    {
      uint64_t v4 = *a1;
      uint64_t v5 = *a1 + 16LL * *((unsigned __int8 *)a1 + 10);
      if (!*(_BYTE *)(v5 + 8)) {
        goto LABEL_22;
      }
      unint64_t v6 = *(void *)v5;
      while (*(unsigned __int8 *)(v6 + 9) != v2)
      {
        v6 += 16LL;
        if (v6 >= *(void *)v5 + 16 * (unint64_t)*(unsigned __int8 *)(v5 + 8))
        {
          if (v4)
          {
LABEL_22:
            if ((_iAP2LogEnableMask & 1) != 0)
            {
              uint64_t v13 = gLogObjects;
              int v14 = gNumLogObjects;
              if (gLogObjects) {
                BOOL v15 = gNumLogObjects < 20;
              }
              else {
                BOOL v15 = 1;
              }
              if (v15)
              {
                uint64_t v21 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  uint64_t v30 = v13;
                  __int16 v31 = 1024;
                  LODWORD(v32) = v14;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                }
              }

              else
              {
                uint64_t v21 = *(os_log_s **)(gLogObjects + 152);
              }

              if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
              {
                __int16 v22 = "";
                if (a1[3]) {
                  int v23 = (const char *)a1[3];
                }
                else {
                  int v23 = "";
                }
                uint64_t v24 = a1[5];
                if (v24) {
                  __int16 v22 = *(const char **)(v24 + 8LL * v28);
                }
                int v25 = *((unsigned __int8 *)a1 + 10);
                uint64_t v26 = a1[4];
                if (v26) {
                  uint64_t v27 = *(const char **)(v26 + 8LL * *((unsigned __int8 *)a1 + 10));
                }
                else {
                  uint64_t v27 = "";
                }
                *(_DWORD *)buf = 136316418;
                uint64_t v30 = (uint64_t)v23;
                __int16 v31 = 2048;
                uint64_t v32 = a1;
                __int16 v33 = 1024;
                unsigned int v34 = v28;
                __int16 v35 = 2080;
                __int16 v36 = v22;
                __int16 v37 = 1024;
                int v38 = v25;
                __int16 v39 = 2080;
                int v40 = v27;
                _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "ERROR: '%s'(%p): No handler for event(%d:%s) for state(%d:%s)",  buf,  0x36u);
              }
            }

            LOBYTE(v9) = *((_BYTE *)a1 + 9);
            goto LABEL_52;
          }

uint64_t _startCallStateUpdatesHandler(uint64_t a1, uint64_t a2)
{
  uint64_t Feature = 0LL;
  if (!a1) {
    return Feature;
  }
  if (!a2) {
    return Feature;
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 6u);
  if (!Feature) {
    return Feature;
  }
  if (gLogObjects && gNumLogObjects >= 40)
  {
    uint64_t v4 = *(os_log_s **)(gLogObjects + 312);
  }

  else
  {
    uint64_t v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    _startCallStateUpdatesHandler_cold_5();
  }
  CFMutableArrayRef Mutable = CFSetCreateMutable(kCFAllocatorDefault, 13LL, 0LL);
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
  if (FirstParam)
  {
    NextParam = (unsigned __int16 *)FirstParam;
    uint64_t v26 = Feature;
    char v27 = 0;
    char v8 = 0;
    while (1)
    {
      unsigned int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
      uint64_t v10 = gLogObjects;
      int v11 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 40)
      {
        BOOL v12 = *(os_log_s **)(gLogObjects + 312);
      }

      else
      {
        BOOL v12 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)int v29 = v10;
          *(_WORD *)&v29[8] = 1024;
          LODWORD(v30) = v11;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          BOOL v12 = (os_log_s *)&_os_log_default;
        }
      }

      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)int v29 = ParamID;
        _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "paramID: %d", buf, 8u);
      }

      if (ParamID > 0xC)
      {
        uint64_t v13 = gLogObjects;
        int v14 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 40)
        {
          BOOL v15 = *(os_log_s **)(gLogObjects + 312);
        }

        else
        {
          BOOL v15 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)int v29 = v13;
            *(_WORD *)&v29[8] = 1024;
            LODWORD(v30) = v14;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            BOOL v15 = (os_log_s *)&_os_log_default;
          }
        }

        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          int MsgID = iAP2MsgGetMsgID(a2);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)int v29 = ParamID;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&v29[6] = MsgID;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param",  buf,  0xEu);
        }
      }

      else
      {
        if (!iAP2MsgIsDataVoid(NextParam))
        {
          int v25 = (os_log_s *)logObjectForModule_27();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
            _startCallStateUpdatesHandler_cold_4(a2);
          }
          uint64_t Feature = 0LL;
          if (Mutable) {
            goto LABEL_64;
          }
          return Feature;
        }

        CFSetAddValue(Mutable, (const void *)ParamID);
        if (ParamID == 5) {
          char v27 = 1;
        }
        else {
          char v8 = 1;
        }
      }

      NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
      if (!NextParam)
      {
        if ((v8 & 1) != 0)
        {
          char v17 = 0;
          uint64_t Feature = v26;
          char v18 = v27;
          goto LABEL_39;
        }

        uint64_t Feature = v26;
        char v18 = v27;
        goto LABEL_38;
      }
    }
  }

  char v18 = 0;
LABEL_38:
  CFSetAddValue(Mutable, 0LL);
  char v17 = 1;
  CFSetAddValue(Mutable, (const void *)1);
  CFSetAddValue(Mutable, (const void *)2);
  CFSetAddValue(Mutable, (const void *)3);
  CFSetAddValue(Mutable, (const void *)4);
LABEL_39:
  _removeSubscriberForSubFeature(Feature, 0);
  if (*(void *)Feature)
  {
    CFRelease(*(CFTypeRef *)Feature);
    *(void *)uint64_t Feature = 0LL;
  }

  if (Mutable) {
    CFTypeRef v19 = CFRetain(Mutable);
  }
  else {
    CFTypeRef v19 = 0LL;
  }
  *(void *)uint64_t Feature = v19;
  *(_BYTE *)(Feature + 10) = 1;
  *(_BYTE *)(Feature + _Block_object_dispose(va, 8) = v17;
  *(_BYTE *)(Feature + 9) = v18 & 1;
  if (gLogObjects && gNumLogObjects >= 40)
  {
    os_log_type_t v20 = *(os_log_s **)(gLogObjects + 312);
  }

  else
  {
    os_log_type_t v20 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    uint64_t v21 = "YES";
    if (*(_BYTE *)(Feature + 8)) {
      __int16 v22 = "YES";
    }
    else {
      __int16 v22 = "NO";
    }
    if (!*(_BYTE *)(Feature + 9)) {
      uint64_t v21 = "NO";
    }
    *(_DWORD *)buf = 136315394;
    *(void *)int v29 = v22;
    *(_WORD *)&v29[8] = 2080;
    uint64_t v30 = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "useLegacySpec: %s, sendVCards: %s", buf, 0x16u);
  }

  if (gLogObjects && gNumLogObjects >= 40)
  {
    int v23 = *(os_log_s **)(gLogObjects + 312);
  }

  else
  {
    int v23 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
    _startCallStateUpdatesHandler_cold_1((CFSetRef *)Feature, v23);
  }
  _addSubscriberForSubFeature(Feature, 0);
  uint64_t Feature = 1LL;
  if (Mutable) {
LABEL_64:
  }
    CFRelease(Mutable);
  return Feature;
}

void *logObjectForModule_27()
{
  if (gLogObjects && gNumLogObjects >= 40) {
    return *(void **)(gLogObjects + 312);
  }
  BOOL v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

void _removeSubscriberForSubFeature(uint64_t a1, int a2)
{
  if (a1)
  {
    switch(a2)
    {
      case 3:
        if (*(_BYTE *)(a1 + 67))
        {
          if (*(_BYTE *)(a1 + 46))
          {
            uint64_t v5 = kCFACCCommunications_SubscriberList_ListUpdates_Recents;
            if (*(_BYTE *)(a1 + 42)) {
              uint64_t v5 = kCFACCCommunications_SubscriberList_ListUpdates_Recents_Coalesced;
            }
            platform_communications_removeSubscriber((uint64_t)*v5);
          }

          if (*(_BYTE *)(a1 + 61))
          {
            uint64_t v4 = kCFACCCommunications_SubscriberList_ListUpdates_Favorites;
            goto LABEL_20;
          }
        }

        break;
      case 1:
        if (*(_BYTE *)(a1 + 24))
        {
          unint64_t v6 = *(const __CFSet **)(a1 + 16);
          if (v6)
          {
            if (CFSetGetCount(v6) > 0)
            {
              uint64_t v4 = kCFACCCommunications_SubscriberList_CommunicationsUpdates;
              goto LABEL_20;
            }
          }
        }

        break;
      case 0:
        if (*(_BYTE *)(a1 + 10))
        {
          uint64_t v3 = *(const __CFSet **)a1;
          if (*(void *)a1)
          {
            if (CFSetGetCount(v3) > 0)
            {
              uint64_t v4 = kCFACCCommunications_SubscriberList_CallStateUpdates;
LABEL_20:
              platform_communications_removeSubscriber((uint64_t)*v4);
            }
          }
        }

        break;
    }
  }

void _addSubscriberForSubFeature(uint64_t a1, int a2)
{
  if (a1)
  {
    switch(a2)
    {
      case 3:
        if (*(_BYTE *)(a1 + 67))
        {
          if (*(_BYTE *)(a1 + 46))
          {
            uint64_t v4 = kCFACCCommunications_SubscriberList_ListUpdates_Recents;
            if (*(_BYTE *)(a1 + 42)) {
              uint64_t v4 = kCFACCCommunications_SubscriberList_ListUpdates_Recents_Coalesced;
            }
            platform_communications_addSubscriber((uint64_t)*v4);
            platform_communications_triggerListUpdate(0LL, *(unsigned __int8 *)(a1 + 42));
          }

          if (*(_BYTE *)(a1 + 61))
          {
            platform_communications_addSubscriber((uint64_t)@"ListUpdates_Favorites");
            platform_communications_triggerListUpdate(1LL, 0LL);
          }
        }

        break;
      case 1:
        if (*(_BYTE *)(a1 + 24))
        {
          uint64_t v5 = *(const __CFSet **)(a1 + 16);
          if (v5)
          {
            if (CFSetGetCount(v5) >= 1)
            {
              platform_communications_addSubscriber((uint64_t)@"CommunicationsUpdates");
              platform_communications_triggerCommunicationsUpdate();
            }
          }
        }

        break;
      case 0:
        if (*(_BYTE *)(a1 + 10))
        {
          uint64_t v3 = *(const __CFSet **)a1;
          if (*(void *)a1)
          {
            if (CFSetGetCount(v3) >= 1)
            {
              platform_communications_addSubscriber((uint64_t)@"CallStateUpdates");
              platform_communications_triggerCallStateUpdates();
            }
          }
        }

        break;
    }
  }

uint64_t _stopCallStateUpdatesHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0LL;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = iap2_feature_getFeature(a1, 6u);
      if (result)
      {
        uint64_t v4 = result;
        if (gLogObjects && gNumLogObjects >= 40)
        {
          uint64_t v5 = *(os_log_s **)(gLogObjects + 312);
        }

        else
        {
          uint64_t v5 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
          _stopCallStateUpdatesHandler_cold_1();
        }
        _removeSubscriberForSubFeature(v4, 0);
        *(_BYTE *)(v4 + 10) = 0;
        uint64_t result = 1LL;
        *(_WORD *)(v4 + _Block_object_dispose(va, 8) = 1;
        if (*(void *)v4)
        {
          CFRelease(*(CFTypeRef *)v4);
          *(void *)uint64_t v4 = 0LL;
          return 1LL;
        }
      }
    }
  }

  return result;
}

uint64_t _startCommunicationsUpdatesHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0LL;
  if (!a1 || !a2) {
    return v2;
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 6u);
  if (!Feature) {
    return 0LL;
  }
  uint64_t v22 = Feature;
  if (gLogObjects && gNumLogObjects >= 40)
  {
    uint64_t v5 = *(os_log_s **)(gLogObjects + 312);
  }

  else
  {
    uint64_t v5 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    _startCommunicationsUpdatesHandler_cold_4();
  }
  CFMutableSetRef Mutable = CFSetCreateMutable(kCFAllocatorDefault, 18LL, 0LL);
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
  if (!FirstParam)
  {
LABEL_31:
    _removeSubscriberForSubFeature(v22, 1);
    char v17 = *(const void **)(v22 + 16);
    if (v17)
    {
      CFRelease(v17);
      *(void *)(v22 + 16) = 0LL;
    }

    if (Mutable) {
      CFTypeRef v18 = CFRetain(Mutable);
    }
    else {
      CFTypeRef v18 = 0LL;
    }
    *(void *)(v22 + 16) = v18;
    *(_BYTE *)(v22 + 24) = 1;
    if (gLogObjects && gNumLogObjects >= 40)
    {
      CFTypeRef v19 = *(os_log_s **)(gLogObjects + 312);
    }

    else
    {
      CFTypeRef v19 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
      _startCallStateUpdatesHandler_cold_1((CFSetRef *)(v22 + 16), v19);
    }
    uint64_t v2 = 1LL;
    _addSubscriberForSubFeature(v22, 1);
    if (!Mutable) {
      return v2;
    }
    goto LABEL_44;
  }

  NextParam = (unsigned __int16 *)FirstParam;
  while (1)
  {
    unsigned int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
    uint64_t v10 = gLogObjects;
    int v11 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 40)
    {
      BOOL v12 = *(os_log_s **)(gLogObjects + 312);
    }

    else
    {
      BOOL v12 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)uint64_t v24 = v10;
        *(_WORD *)&v24[8] = 1024;
        int v25 = v11;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
        BOOL v12 = (os_log_s *)&_os_log_default;
      }
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)uint64_t v24 = ParamID;
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "paramID: %d", buf, 8u);
    }

    if (ParamID > 0x11)
    {
      uint64_t v13 = gLogObjects;
      int v14 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 40)
      {
        BOOL v15 = *(os_log_s **)(gLogObjects + 312);
      }

      else
      {
        BOOL v15 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)uint64_t v24 = v13;
          *(_WORD *)&v24[8] = 1024;
          int v25 = v14;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          BOOL v15 = (os_log_s *)&_os_log_default;
        }
      }

      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        int MsgID = iAP2MsgGetMsgID(a2);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)uint64_t v24 = ParamID;
        *(_WORD *)&uint8_t v24[4] = 1024;
        *(_DWORD *)&v24[6] = MsgID;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param",  buf,  0xEu);
      }

      goto LABEL_30;
    }

    if (!iAP2MsgIsDataVoid(NextParam)) {
      break;
    }
    CFSetAddValue(Mutable, (const void *)ParamID);
LABEL_30:
    NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
    if (!NextParam) {
      goto LABEL_31;
    }
  }

  uint64_t v21 = (os_log_s *)logObjectForModule_27();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
    _startCallStateUpdatesHandler_cold_4(a2);
  }
  uint64_t v2 = 0LL;
  if (Mutable) {
LABEL_44:
  }
    CFRelease(Mutable);
  return v2;
}

uint64_t _stopCommunicationsUpdatesHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0LL;
  if (a1 && a2)
  {
    uint64_t Feature = iap2_feature_getFeature(a1, 6u);
    if (Feature)
    {
      uint64_t v4 = Feature;
      if (gLogObjects && gNumLogObjects >= 40)
      {
        uint64_t v5 = *(os_log_s **)(gLogObjects + 312);
      }

      else
      {
        uint64_t v5 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
        _stopCommunicationsUpdatesHandler_cold_1();
      }
      uint64_t v2 = 1LL;
      _removeSubscriberForSubFeature(v4, 1);
      *(_BYTE *)(v4 + 24) = 0;
      unint64_t v6 = *(const void **)(v4 + 16);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(v4 + 16) = 0LL;
      }
    }

    else
    {
      return 0LL;
    }
  }

  return v2;
}

id _initiateCallHandler(uint64_t a1, uint64_t a2)
{
  id v2 = 0LL;
  if (a1 && a2)
  {
    unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
    if (FirstParam)
    {
      NextParam = (unsigned __int16 *)FirstParam;
      CFStringRef v6 = 0LL;
      CFStringRef v7 = 0LL;
      unsigned int v8 = 3;
      unsigned int v33 = 4;
      while (2)
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        BOOL v34 = 0;
        switch(ParamID)
        {
          case 0:
            unsigned int DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v34);
            if (!v34)
            {
              unsigned int v8 = DataAsU8;
              goto LABEL_26;
            }

            int v25 = (os_log_s *)logObjectForModule_27();
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
              iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
            }
            break;
          case 1:
            if (v7) {
              CFRelease(v7);
            }
            CFStringRef v7 = iAP2MsgCopyDataAsCFString(NextParam, &v34);
            if (!v34) {
              goto LABEL_26;
            }
            uint64_t v26 = (os_log_s *)logObjectForModule_27();
            if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
              iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_4(a2);
            }
            break;
          case 2:
            unsigned int v33 = iAP2MsgGetDataAsU8(NextParam, &v34);
            if (!v34) {
              goto LABEL_26;
            }
            unsigned __int8 v28 = (os_log_s *)logObjectForModule_27();
            if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
              iap2_mediaLibrary_playMediaLibraryItemsHandler_cold_4(a2);
            }
            break;
          case 3:
            if (v6) {
              CFRelease(v6);
            }
            CFStringRef v6 = iAP2MsgCopyDataAsCFString(NextParam, &v34);
            if (!v34) {
              goto LABEL_26;
            }
            uint64_t v30 = (os_log_s *)logObjectForModule_27();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
              iap2_mediaLibrary_playMediaLibraryCollectionHandler_cold_5(a2);
            }
            break;
          default:
            int v11 = v6;
            uint64_t v12 = gLogObjects;
            int v13 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 40)
            {
              int v14 = *(os_log_s **)(gLogObjects + 312);
            }

            else
            {
              int v14 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)__int16 v36 = v12;
                *(_WORD *)&v36[8] = 1024;
                unsigned int v37 = v13;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              }
            }

            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
            {
              int MsgID = iAP2MsgGetMsgID(a2);
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)__int16 v36 = ParamID;
              *(_WORD *)&void v36[4] = 1024;
              *(_DWORD *)&v36[6] = MsgID;
              _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param",  buf,  0xEu);
            }

            CFStringRef v6 = v11;
LABEL_26:
            NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
            if (NextParam) {
              continue;
            }
            unsigned int v16 = v8;
            if (v8 >= 3) {
              goto LABEL_36;
            }
            uint64_t v17 = v33;
            if (v16)
            {
              if (v7 || v33 != 4 || v6)
              {
                uint64_t v32 = (os_log_s *)logObjectForModule_27();
                if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412802;
                  *(void *)__int16 v36 = v7;
                  *(_WORD *)&v36[8] = 1024;
                  unsigned int v37 = v33;
                  __int16 v38 = 2112;
                  CFStringRef v39 = v6;
                  _os_log_error_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_ERROR,  "Call type is not destination with destination ID: %@, service type: %d, addressBookID: %@ - ignoring message",  buf,  0x1Cu);
                }

                goto LABEL_61;
              }

              if (v16 == 1) {
                return platform_communications_initiateCallToVoicemail();
              }
              if (v16 == 2) {
                return platform_communications_initiateRedial();
              }
              if (gLogObjects && gNumLogObjects >= 40)
              {
                uint64_t v21 = *(os_log_s **)(gLogObjects + 312);
              }

              else
              {
                uint64_t v21 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
                _initiateCallHandler_cold_6();
              }
              return 0LL;
            }

            if (v7 && v33 - 4 > 0xFFFFFFFC)
            {
              if (v33 - 1 >= 3)
              {
                if (gLogObjects && gNumLogObjects >= 40)
                {
                  os_log_type_t v20 = *(os_log_s **)(gLogObjects + 312);
                }

                else
                {
                  os_log_type_t v20 = (os_log_s *)&_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }

                if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
                  _initiateCallHandler_cold_4();
                }
                uint64_t v17 = 0LL;
              }

              id v23 = platform_communications_initiateCallToDestination((uint64_t)v7, v17, (uint64_t)v6);
              goto LABEL_71;
            }

            if (gLogObjects && gNumLogObjects >= 40)
            {
              uint64_t v22 = *(os_log_s **)(gLogObjects + 312);
            }

            else
            {
              uint64_t v22 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
              _initiateCallHandler_cold_2();
            }
            break;
        }

        break;
      }
    }

    else
    {
      CFStringRef v6 = 0LL;
      CFStringRef v7 = 0LL;
LABEL_36:
      CFTypeRef v19 = (os_log_s *)logObjectForModule_27();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        _initiateCallHandler_cold_1();
      }
    }

id _acceptCallHandler(uint64_t a1, uint64_t a2)
{
  id v2 = 0LL;
  if (a1 && a2)
  {
    unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
    if (FirstParam)
    {
      NextParam = (unsigned __int16 *)FirstParam;
      CFStringRef v6 = 0LL;
      uint64_t v7 = 2LL;
      do
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        BOOL v21 = 0;
        if (ParamID == 1)
        {
          if (v6) {
            CFRelease(v6);
          }
          CFStringRef v6 = iAP2MsgCopyDataAsCFString(NextParam, &v21);
          if (v21)
          {
            CFTypeRef v18 = (os_log_s *)logObjectForModule_27();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
              iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_4(a2);
            }
            goto LABEL_40;
          }
        }

        else
        {
          int v9 = ParamID;
          if (ParamID)
          {
            uint64_t v11 = gLogObjects;
            int v12 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 40)
            {
              int v13 = *(os_log_s **)(gLogObjects + 312);
            }

            else
            {
              int v13 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)id v23 = v11;
                *(_WORD *)&v23[8] = 1024;
                int v24 = v12;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                int v13 = (os_log_s *)&_os_log_default;
              }
            }

            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            {
              int MsgID = iAP2MsgGetMsgID(a2);
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)id v23 = v9;
              *(_WORD *)&uint8_t v23[4] = 1024;
              *(_DWORD *)&v23[6] = MsgID;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param",  buf,  0xEu);
            }
          }

          else
          {
            uint64_t DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v21);
            if (v21)
            {
              uint64_t v17 = (os_log_s *)logObjectForModule_27();
              if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
                iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
              }
              goto LABEL_40;
            }

            uint64_t v7 = DataAsU8;
          }
        }

        NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
      }

      while (NextParam);
      if ((_DWORD)v7 == 2) {
        goto LABEL_25;
      }
      os_log_type_t v20 = (os_log_s *)logObjectForModule_27();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        _acceptCallHandler_cold_2();
      }
LABEL_40:
      id v2 = 0LL;
      if (v6) {
        goto LABEL_34;
      }
    }

    else
    {
      CFStringRef v6 = 0LL;
LABEL_25:
      if (gLogObjects && gNumLogObjects >= 40)
      {
        BOOL v15 = *(os_log_s **)(gLogObjects + 312);
      }

      else
      {
        BOOL v15 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "AcceptCall message with no acceptAction parameter - falling back to Accept/HoldAndAccept",  buf,  2u);
      }

      uint64_t v7 = 0LL;
LABEL_33:
      id v2 = platform_communications_acceptCall(v7, (uint64_t)v6);
      if (v6) {
LABEL_34:
      }
        CFRelease(v6);
    }
  }

  return v2;
}

id _endCallHandler(uint64_t a1, uint64_t a2)
{
  id v2 = 0LL;
  if (a1 && a2)
  {
    unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
    if (FirstParam)
    {
      NextParam = (unsigned __int16 *)FirstParam;
      CFStringRef v6 = 0LL;
      unsigned int v7 = 2;
      do
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        BOOL v22 = 0;
        if (ParamID == 1)
        {
          if (v6) {
            CFRelease(v6);
          }
          CFStringRef v6 = iAP2MsgCopyDataAsCFString(NextParam, &v22);
          if (v22)
          {
            CFTypeRef v19 = (os_log_s *)logObjectForModule_27();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
              iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_4(a2);
            }
            goto LABEL_41;
          }
        }

        else
        {
          int v9 = ParamID;
          if (ParamID)
          {
            uint64_t v11 = gLogObjects;
            int v12 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 40)
            {
              int v13 = *(os_log_s **)(gLogObjects + 312);
            }

            else
            {
              int v13 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)int v24 = v11;
                *(_WORD *)&v24[8] = 1024;
                int v25 = v12;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                int v13 = (os_log_s *)&_os_log_default;
              }
            }

            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            {
              int MsgID = iAP2MsgGetMsgID(a2);
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)int v24 = v9;
              *(_WORD *)&uint8_t v24[4] = 1024;
              *(_DWORD *)&v24[6] = MsgID;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param",  buf,  0xEu);
            }
          }

          else
          {
            unsigned int DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v22);
            if (v22)
            {
              CFTypeRef v18 = (os_log_s *)logObjectForModule_27();
              if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
                iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
              }
              goto LABEL_41;
            }

            unsigned int v7 = DataAsU8;
          }
        }

        NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
      }

      while (NextParam);
      if (v7 == 2) {
        goto LABEL_26;
      }
      if (v7 < 2)
      {
        if (v7 != 1) {
          goto LABEL_33;
        }
        id v15 = platform_communications_endAllCalls();
        goto LABEL_34;
      }

      BOOL v21 = (os_log_s *)logObjectForModule_27();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        _endCallHandler_cold_2();
      }
LABEL_41:
      id v2 = 0LL;
      if (v6) {
        goto LABEL_35;
      }
    }

    else
    {
      CFStringRef v6 = 0LL;
LABEL_26:
      if (gLogObjects && gNumLogObjects >= 40)
      {
        unsigned int v16 = *(os_log_s **)(gLogObjects + 312);
      }

      else
      {
        unsigned int v16 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "EndCall message with no endAction parameter - falling back to End/Decline",  buf,  2u);
      }

id _swapCallHandler(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return platform_communications_swapCalls();
  }
  else {
    return 0LL;
  }
}

id _mergeCallHandler(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return platform_communications_mergeCalls();
  }
  else {
    return 0LL;
  }
}

id _holdStatusUpdateHandler(uint64_t a1, uint64_t a2)
{
  id updated = 0LL;
  if (a1 && a2)
  {
    unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
    if (FirstParam)
    {
      NextParam = (unsigned __int16 *)FirstParam;
      CFStringRef v6 = 0LL;
      char v7 = 0;
      BOOL v8 = 0;
      do
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        BOOL v21 = 0;
        if (ParamID == 1)
        {
          if (v6) {
            CFRelease(v6);
          }
          CFStringRef v6 = iAP2MsgCopyDataAsCFString(NextParam, &v21);
          if (v21)
          {
            CFTypeRef v18 = (os_log_s *)logObjectForModule_27();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
              iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_4(a2);
            }
            goto LABEL_29;
          }
        }

        else
        {
          int v10 = ParamID;
          if (ParamID)
          {
            uint64_t v12 = gLogObjects;
            int v13 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 40)
            {
              int v14 = *(os_log_s **)(gLogObjects + 312);
            }

            else
            {
              int v14 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)id v23 = v12;
                *(_WORD *)&v23[8] = 1024;
                int v24 = v13;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                int v14 = (os_log_s *)&_os_log_default;
              }
            }

            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
            {
              int MsgID = iAP2MsgGetMsgID(a2);
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)id v23 = v10;
              *(_WORD *)&uint8_t v23[4] = 1024;
              *(_DWORD *)&v23[6] = MsgID;
              _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param",  buf,  0xEu);
            }
          }

          else
          {
            BOOL DataAsBool = iAP2MsgGetDataAsBool(NextParam, &v21);
            if (v21)
            {
              uint64_t v17 = (os_log_s *)logObjectForModule_27();
              if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
                iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
              }
              goto LABEL_29;
            }

            BOOL v8 = DataAsBool;
            char v7 = 1;
          }
        }

        NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
      }

      while (NextParam);
      if ((v7 & 1) == 0) {
        goto LABEL_32;
      }
      id updated = platform_communications_updateHoldStatus(v8, (uint64_t)v6);
      if (v6) {
        goto LABEL_23;
      }
    }

    else
    {
      CFStringRef v6 = 0LL;
LABEL_32:
      os_log_type_t v20 = (os_log_s *)logObjectForModule_27();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        _holdStatusUpdateHandler_cold_1();
      }
LABEL_29:
      id updated = 0LL;
      if (v6) {
LABEL_23:
      }
        CFRelease(v6);
    }
  }

  return updated;
}

id _muteStatusUpdateHandler(uint64_t a1, uint64_t a2)
{
  id result = 0LL;
  if (a1 && a2)
  {
    unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
    if (FirstParam)
    {
      NextParam = (unsigned __int16 *)FirstParam;
      char v7 = 0;
      BOOL v8 = 0;
      do
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        BOOL v18 = 0;
        if (ParamID)
        {
          int v10 = ParamID;
          uint64_t v11 = gLogObjects;
          int v12 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 40)
          {
            int v13 = *(os_log_s **)(gLogObjects + 312);
          }

          else
          {
            int v13 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)os_log_type_t v20 = v11;
              *(_WORD *)&v20[8] = 1024;
              int v21 = v12;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              int v13 = (os_log_s *)&_os_log_default;
            }
          }

          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            int MsgID = iAP2MsgGetMsgID(a2);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)os_log_type_t v20 = v10;
            *(_WORD *)&v20[4] = 1024;
            *(_DWORD *)&v20[6] = MsgID;
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param",  buf,  0xEu);
          }
        }

        else
        {
          BOOL DataAsBool = iAP2MsgGetDataAsBool(NextParam, &v18);
          if (v18)
          {
            unsigned int v16 = (os_log_s *)logObjectForModule_27();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
              iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
            }
            return 0LL;
          }

          BOOL v8 = DataAsBool;
          char v7 = 1;
        }

        NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
      }

      while (NextParam);
      if ((v7 & 1) == 0) {
        goto LABEL_22;
      }
      return platform_communications_updateMuteStatus(v8);
    }

    else
    {
LABEL_22:
      uint64_t v17 = (os_log_s *)logObjectForModule_27();
      id result = (id)os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        _muteStatusUpdateHandler_cold_1();
        return 0LL;
      }
    }
  }

  return result;
}

id _sendDTMFHandler(uint64_t a1, uint64_t a2)
{
  id v2 = 0LL;
  if (a1 && a2)
  {
    unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
    if (FirstParam)
    {
      NextParam = (unsigned __int16 *)FirstParam;
      CFStringRef v6 = 0LL;
      uint64_t v7 = 12LL;
      do
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        BOOL v20 = 0;
        if (ParamID == 1)
        {
          if (v6) {
            CFRelease(v6);
          }
          CFStringRef v6 = iAP2MsgCopyDataAsCFString(NextParam, &v20);
          if (v20)
          {
            BOOL v18 = (os_log_s *)logObjectForModule_27();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
              iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_4(a2);
            }
            goto LABEL_28;
          }
        }

        else
        {
          int v9 = ParamID;
          if (ParamID)
          {
            uint64_t v11 = gLogObjects;
            int v12 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 40)
            {
              int v13 = *(os_log_s **)(gLogObjects + 312);
            }

            else
            {
              int v13 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)BOOL v22 = v11;
                *(_WORD *)&v22[8] = 1024;
                int v23 = v12;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                int v13 = (os_log_s *)&_os_log_default;
              }
            }

            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            {
              int MsgID = iAP2MsgGetMsgID(a2);
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)BOOL v22 = v9;
              *(_WORD *)&v22[4] = 1024;
              *(_DWORD *)&v22[6] = MsgID;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param",  buf,  0xEu);
            }
          }

          else
          {
            uint64_t DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v20);
            if (v20)
            {
              uint64_t v17 = (os_log_s *)logObjectForModule_27();
              if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
                iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
              }
              goto LABEL_28;
            }

            uint64_t v7 = DataAsU8;
          }
        }

        NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
      }

      while (NextParam);
      id v2 = platform_communications_sendDTMF(v7, (uint64_t)v6);
      if (v6) {
        goto LABEL_23;
      }
    }

    else
    {
      CFStringRef v6 = 0LL;
LABEL_26:
      unsigned int v16 = (os_log_s *)logObjectForModule_27();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        _sendDTMFHandler_cold_1();
      }
LABEL_28:
      id v2 = 0LL;
      if (v6) {
LABEL_23:
      }
        CFRelease(v6);
    }
  }

  return v2;
}

uint64_t _startListUpdatesHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 40)
  {
    uint64_t v4 = *(os_log_s **)(gLogObjects + 312);
  }

  else
  {
    uint64_t v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Starting List Updates...", buf, 2u);
  }

  uint64_t Feature = iap2_feature_getFeature(a1, 6u);
  CFMutableSetRef Mutable = CFSetCreateMutable(kCFAllocatorDefault, 10LL, 0LL);
  CFStringRef v6 = CFSetCreateMutable(kCFAllocatorDefault, 6LL, 0LL);
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
  if (!FirstParam)
  {
    unint64_t v29 = 0LL;
    unint64_t v32 = 0LL;
    LOBYTE(v10) = 0;
    LODWORD(v11) = 0;
    unsigned int v12 = 0;
    LOBYTE(v9) = 0;
    int v31 = 0;
    unsigned int v30 = 0;
    goto LABEL_53;
  }

  BOOL v8 = (unsigned __int16 *)FirstParam;
  int v9 = 0;
  uint64_t v70 = 0LL;
  unsigned int v73 = 0;
  unsigned __int16 v66 = 0;
  BOOL v67 = 0;
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  unsigned int v12 = 0;
  unsigned __int16 v65 = 0;
  while (2)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)v8);
    BOOL v75 = 0;
    switch(ParamID)
    {
      case 0:
        if (iAP2MsgIsDataVoid(v8)) {
          goto LABEL_25;
        }
        __int128 v55 = (os_log_s *)logObjectForModule_27();
        if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
          iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
        }
        goto LABEL_112;
      case 1:
        unint64_t v19 = iAP2MsgGetFirstParam(a2, v8);
        if (!v19) {
          goto LABEL_20;
        }
        NextParam = (unsigned __int16 *)v19;
        while (1)
        {
          uint64_t v21 = iAP2MsgGetParamID((uint64_t)NextParam);
          if (!iAP2MsgIsDataVoid(NextParam)) {
            break;
          }
          CFSetAddValue(Mutable, (const void *)v21);
          NextParam = iAP2MsgGetNextParam(a2, v8, NextParam);
          if (!NextParam)
          {
LABEL_20:
            if (CFSetGetCount(Mutable) > 0) {
              int v9 = 1;
            }
            uint64_t v70 = 1LL;
            unsigned int v73 = 1;
            goto LABEL_50;
          }
        }

        int v53 = (os_log_s *)logObjectForModule_27();
        if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
          _startListUpdatesHandler_cold_6(v21, a2);
        }
        goto LABEL_112;
      case 2:
        if (iAP2MsgIsDataVoid(v8))
        {
          uint64_t v70 = 1LL;
LABEL_25:
          unsigned int v73 = 1;
          goto LABEL_50;
        }

        int v57 = (os_log_s *)logObjectForModule_27();
        if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR)) {
          iap2_mediaLibrary_playMediaLibraryItemsHandler_cold_4(a2);
        }
        goto LABEL_112;
      case 3:
        unsigned __int16 DataAsU16 = iAP2MsgGetDataAsU16(v8, &v75);
        if (!v75)
        {
          unsigned __int16 v66 = DataAsU16;
          goto LABEL_50;
        }

        __int16 v58 = (os_log_s *)logObjectForModule_27();
        if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
          iap2_mediaLibrary_playMediaLibraryCollectionHandler_cold_5(a2);
        }
        goto LABEL_112;
      case 4:
        BOOL DataAsBool = iAP2MsgGetDataAsBool(v8, &v75);
        if (!v75)
        {
          BOOL v67 = DataAsBool;
          goto LABEL_50;
        }

        int v59 = (os_log_s *)logObjectForModule_27();
        if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR)) {
          iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_8(a2);
        }
        goto LABEL_112;
      case 5:
        if (iAP2MsgIsDataVoid(v8)) {
          goto LABEL_42;
        }
        __int16 v60 = (os_log_s *)logObjectForModule_27();
        if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR)) {
          iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_9(a2);
        }
        goto LABEL_112;
      case 6:
        unint64_t v24 = iAP2MsgGetFirstParam(a2, v8);
        if (!v24) {
          goto LABEL_36;
        }
        int v25 = (unsigned __int16 *)v24;
        while (1)
        {
          uint64_t v26 = iAP2MsgGetParamID((uint64_t)v25);
          if (!iAP2MsgIsDataVoid(v25)) {
            break;
          }
          CFSetAddValue(v6, (const void *)v26);
          int v25 = iAP2MsgGetNextParam(a2, v8, v25);
          if (!v25)
          {
LABEL_36:
            if (CFSetGetCount(v6) > 0) {
              uint64_t v10 = 1LL;
            }
            else {
              uint64_t v10 = v10;
            }
            uint64_t v11 = 1LL;
            unsigned int v12 = 1;
            goto LABEL_50;
          }
        }

        __int128 v54 = (os_log_s *)logObjectForModule_27();
        if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
          _startListUpdatesHandler_cold_11(v26, a2);
        }
        goto LABEL_112;
      case 7:
        if (!iAP2MsgIsDataVoid(v8))
        {
          uint64_t v62 = (os_log_s *)logObjectForModule_27();
          if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR)) {
            _startListUpdatesHandler_cold_12(a2);
          }
LABEL_112:
          if (Mutable) {
            CFRelease(Mutable);
          }
          if (v6) {
            CFRelease(v6);
          }
          return 0LL;
        }

        uint64_t v11 = 1LL;
LABEL_42:
        unsigned int v12 = 1;
LABEL_50:
        BOOL v8 = iAP2MsgGetNextParam(a2, 0LL, v8);
        if (v8) {
          continue;
        }
        unint64_t v29 = v65 | ((unint64_t)v12 << 16) | ((unint64_t)v11 << 24) | ((unint64_t)v10 << 32);
        unsigned int v30 = v73;
        int v31 = v70;
        unint64_t v32 = v66 | ((unint64_t)v67 << 16) | ((unint64_t)v73 << 24) | (v70 << 32) | ((unint64_t)v9 << 40);
LABEL_53:
        unsigned int v33 = v30;
        char v34 = v9;
        uint64_t v74 = (v30 | v31 | v9) != 0;
        unint64_t v69 = v32;
        unint64_t v71 = v29;
        if (gLogObjects && gNumLogObjects >= 40)
        {
          int v35 = v31;
          __int16 v36 = *(os_log_s **)(gLogObjects + 312);
        }

        else
        {
          int v35 = v31;
          __int16 v36 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
        {
          unsigned int v37 = "NO";
          if (v33) {
            __int16 v38 = "YES";
          }
          else {
            __int16 v38 = "NO";
          }
          if (v35) {
            CFStringRef v39 = "YES";
          }
          else {
            CFStringRef v39 = "NO";
          }
          *(_DWORD *)buf = 136315906;
          *(void *)__int16 v77 = v38;
          if (v34) {
            int v40 = "YES";
          }
          else {
            int v40 = "NO";
          }
          *(_WORD *)&v77[8] = 2080;
          __int128 v78 = v39;
          __int16 v79 = 2080;
          int v80 = v40;
          if ((_DWORD)v74) {
            unsigned int v37 = "YES";
          }
          __int16 v81 = 2080;
          int v82 = v37;
          _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_INFO,  "[tempRecentsConfig] sendListAvailable: %s, sendListCount: %s, sendList: %s, started: %s",  buf,  0x2Au);
        }

        if (gLogObjects && gNumLogObjects >= 40)
        {
          __int16 v41 = *(os_log_s **)(gLogObjects + 312);
        }

        else
        {
          __int16 v41 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
        {
          CFIndex Count = CFSetGetCount(Mutable);
          *(_DWORD *)buf = 134217984;
          *(void *)__int16 v77 = Count;
          _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_INFO,  "recentsSubscriptionListCount: %ld",  buf,  0xCu);
        }

        if (gLogObjects && gNumLogObjects >= 40)
        {
          __int16 v43 = *(os_log_s **)(gLogObjects + 312);
        }

        else
        {
          __int16 v43 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
        {
          int v44 = "NO";
          if (v12) {
            __int16 v45 = "YES";
          }
          else {
            __int16 v45 = "NO";
          }
          if ((_DWORD)v11) {
            int v46 = "YES";
          }
          else {
            int v46 = "NO";
          }
          *(_DWORD *)buf = 136315906;
          *(void *)__int16 v77 = v45;
          if ((_BYTE)v10) {
            int v47 = "YES";
          }
          else {
            int v47 = "NO";
          }
          *(_WORD *)&v77[8] = 2080;
          __int128 v78 = v46;
          __int16 v79 = 2080;
          int v80 = v47;
          __int16 v81 = 2080;
          int v82 = v44;
          _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_INFO,  "[tempFavoritesConfig] sendListAvailable: %s, sendListCount: %s, sendList: %s, started: %s",  buf,  0x2Au);
        }

        if (gLogObjects && gNumLogObjects >= 40)
        {
          __int16 v48 = *(os_log_s **)(gLogObjects + 312);
        }

        else
        {
          __int16 v48 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
        {
          CFIndex v49 = CFSetGetCount(v6);
          *(_DWORD *)buf = 134217984;
          *(void *)__int16 v77 = v49;
          _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_INFO,  "favoritesSubscriptionListCount: %ld",  buf,  0xCu);
        }

        _removeSubscriberForSubFeature(Feature, 3);
        __int16 v50 = *(const void **)(Feature + 32);
        if (v50) {
          CFRelease(v50);
        }
        *(void *)(Feature + 32) = Mutable;
        *(void *)(Feature + 40) = v69 | (v74 << 48);
        int v51 = *(const void **)(Feature + 48);
        if (v51) {
          CFRelease(v51);
        }
        *(void *)(Feature + 4_Block_object_dispose(va, 8) = v6;
        *(void *)(Feature + 56) = v71 | ((unint64_t)((v12 | v11 | v10) != 0) << 40);
        *(_WORD *)(Feature + 66) = 257;
        _addSubscriberForSubFeature(Feature, 3);
        return 1LL;
      case 8:
        unsigned __int16 v27 = iAP2MsgGetDataAsU16(v8, &v75);
        if (!v75)
        {
          unsigned __int16 v65 = v27;
          goto LABEL_50;
        }

        __int128 v63 = (os_log_s *)logObjectForModule_27();
        if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR)) {
          _startListUpdatesHandler_cold_13(a2);
        }
        goto LABEL_112;
      default:
        int v68 = v9;
        unsigned int v72 = v12;
        uint64_t v14 = v11;
        uint64_t v15 = v10;
        uint64_t v16 = gLogObjects;
        int v17 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 40)
        {
          BOOL v18 = *(os_log_s **)(gLogObjects + 312);
        }

        else
        {
          BOOL v18 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)__int16 v77 = v16;
            *(_WORD *)&v77[8] = 1024;
            LODWORD(v7_Block_object_dispose(va, 8) = v17;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          }
        }

        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          int MsgID = iAP2MsgGetMsgID(a2);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)__int16 v77 = ParamID;
          *(_WORD *)&v77[4] = 1024;
          *(_DWORD *)&v77[6] = MsgID;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param",  buf,  0xEu);
        }

        uint64_t v10 = v15;
        uint64_t v11 = v14;
        unsigned int v12 = v72;
        int v9 = v68;
        goto LABEL_50;
    }
  }

uint64_t _stopListUpdatesHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0LL;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = iap2_feature_getFeature(a1, 6u);
      if (result)
      {
        uint64_t v4 = result;
        if (gLogObjects && gNumLogObjects >= 40)
        {
          uint64_t v5 = *(os_log_s **)(gLogObjects + 312);
        }

        else
        {
          uint64_t v5 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t v10 = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Stopping List Updates...", v10, 2u);
        }

        _removeSubscriberForSubFeature(v4, 3);
        BOOL v8 = *(const void **)(v4 + 32);
        uint64_t v7 = v4 + 32;
        CFStringRef v6 = v8;
        *(_BYTE *)(v7 + 35) = 0;
        *(_BYTE *)(v7 + 14) = 0;
        int v9 = (CFTypeRef *)(v7 + 16);
        *(_BYTE *)(v7 + 29) = 0;
        if (v8)
        {
          CFRelease(v6);
          *(void *)uint64_t v7 = 0LL;
        }

        if (*v9) {
          CFRelease(*v9);
        }
        *(void *)uint64_t v7 = 0LL;
        *(void *)(v7 + _Block_object_dispose(va, 8) = 0LL;
        uint64_t result = 1LL;
        *int v9 = 0LL;
        *(void *)(v7 + 24) = 0LL;
      }
    }
  }

  return result;
}

uint64_t iap2_communications_callStateUpdateHandler(uint64_t result, const __CFDictionary *a2)
{
  if (result)
  {
    id v2 = a2;
    uint64_t v3 = (uint64_t *)result;
    uint64_t result = 0LL;
    if (a2)
    {
      if (*v3)
      {
        if (gLogObjects && gNumLogObjects >= 40)
        {
          uint64_t v4 = *(os_log_s **)(gLogObjects + 312);
        }

        else
        {
          uint64_t v4 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          uint64_t v5 = v3[1];
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = v5;
          _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Received call state update for endpoint: %@",  buf,  0xCu);
        }

        uint64_t result = iap2_feature_getFeature((uint64_t)v3, 6u);
        CFStringRef v6 = &startLogsNotificationObservers;
        if (result)
        {
          uint64_t v7 = result;
          if (*(_BYTE *)(result + 10))
          {
            uint64_t v8 = (uint64_t)(v3 + 15);
            iAP2MsgInit((uint64_t)(v3 + 15), 16725, v3[24], 0xFFFF, 0LL, 0LL);
            int v9 = *(const __CFSet **)v7;
            if (*(void *)v7)
            {
              int v61 = v3;
              CFIndex Count = CFSetGetCount(v9);
              unsigned __int16 v66 = &v53;
              uint64_t v11 = __chkstk_darwin(Count);
              int v13 = (const void **)((char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
              if (v11) {
                memset((char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL), 170, v12);
              }
              CFSetGetValues(*(CFSetRef *)v7, v13);
              if (gLogObjects && gNumLogObjects >= 40)
              {
                uint64_t v14 = *(os_log_s **)(gLogObjects + 312);
              }

              else
              {
                uint64_t v14 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
              unint64_t v69 = v2;
              if (v15)
              {
                CFStringRef RawValuesString = CFSetCreateRawValuesString(*(const __CFSet **)v7, 0);
                if (gLogObjects && gNumLogObjects >= 40)
                {
                  int v17 = *(os_log_s **)(gLogObjects + 312);
                }

                else
                {
                  int v17 = (os_log_s *)&_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }

                if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
                  iap2_communications_callStateUpdateHandler_cold_3();
                }
                id v2 = v69;
                if (RawValuesString) {
                  CFRelease(RawValuesString);
                }
                if (gLogObjects && gNumLogObjects >= 40)
                {
                  BOOL v18 = *(os_log_s **)(gLogObjects + 312);
                }

                else
                {
                  BOOL v18 = (os_log_s *)&_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }

                if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
                  iap2_communications_callStateUpdateHandler_cold_1();
                }
              }

              uint64_t Value = (const __CFNumber *)CFDictionaryGetValue(v2, @"Status");
              if (Value && (int valuePtr = -1431655766, CFNumberGetValue(Value, kCFNumberIntType, &valuePtr)))
              {
                BOOL v20 = (const __CFString *)CFDictionaryGetValue(v2, @"CallUUID");
                uint64_t v21 = (const __CFBoolean *)CFDictionaryGetValue(v2, @"IsConferenced");
                if (v21) {
                  BOOL v67 = CFBooleanGetValue(v21) != 0;
                }
                else {
                  BOOL v67 = 0;
                }
                if (Count < 1)
                {
                  int v52 = 0;
                }

                else
                {
                  int v23 = 0;
                  __int16 v60 = @"StartTimestamp";
                  __int16 v56 = @"DisconnectReason";
                  __int128 v55 = @"ConferenceGroup";
                  int v59 = @"Service";
                  __int16 v58 = @"Label";
                  int v57 = @"AddressBookID";
                  int v64 = @"Direction";
                  __int128 v63 = @"DisplayName";
                  uint64_t v62 = @"RemoteID";
                  *(void *)&__int128 v22 = 67109376LL;
                  __int128 v54 = v22;
                  *(void *)&__int128 v22 = 134218240LL;
                  __int128 v53 = v22;
                  uint64_t v65 = v7;
                  int v68 = v3 + 15;
                  while (2)
                  {
                    int v24 = *(unsigned __int16 *)v13++;
                    switch(v24)
                    {
                      case 0:
                        if (v20 && CFStringGetLength(v20) > 0 || *(_BYTE *)(v7 + 8))
                        {
                          int v25 = (const __CFString *)CFDictionaryGetValue(v2, v62);
                          if (v25)
                          {
                            uint64_t v26 = v25;
                            uint64_t v27 = v8;
                            __int16 v28 = 0;
                            goto LABEL_80;
                          }

                          uint64_t v47 = v8;
                          __int16 v48 = 0;
                          goto LABEL_119;
                        }

                        goto LABEL_125;
                      case 1:
                        if (v20 && CFStringGetLength(v20) > 0 || *(_BYTE *)(v7 + 8))
                        {
                          unint64_t v29 = (const __CFString *)CFDictionaryGetValue(v2, v63);
                          if (v29)
                          {
                            uint64_t v26 = v29;
                            uint64_t v27 = v8;
                            __int16 v28 = 1;
                            goto LABEL_80;
                          }

                          uint64_t v47 = v8;
                          __int16 v48 = 1;
                          goto LABEL_119;
                        }

                        goto LABEL_125;
                      case 2:
                        int v30 = valuePtr;
                        if (*(_BYTE *)(v7 + 8))
                        {
                          else {
                            int v31 = dword_10019EB24[valuePtr - 1];
                          }
                          uint64_t v49 = v6[353];
                          int v50 = gNumLogObjects;
                          if (v49 && gNumLogObjects >= 40)
                          {
                            int v51 = *(os_log_s **)(v49 + 312);
                          }

                          else
                          {
                            int v51 = (os_log_s *)&_os_log_default;
                            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                            {
                              *(_DWORD *)buf = v53;
                              *(void *)&uint8_t buf[4] = v49;
                              *(_WORD *)&buf[12] = 1024;
                              int v73 = v50;
                              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                            }
                          }

                          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
                          {
                            *(_DWORD *)buf = v54;
                            *(_DWORD *)&uint8_t buf[4] = v30;
                            *(_WORD *)&uint8_t buf[8] = 1024;
                            *(_DWORD *)&buf[10] = v31;
                            _os_log_debug_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEBUG,  "Converted callStatus %d, to legacyCallStatus: %d",  buf,  0xEu);
                          }

                          id v2 = v69;
                          CFStringRef v6 = &startLogsNotificationObservers;
                          uint64_t v7 = v65;
                        }

                        else
                        {
                          LOBYTE(v31) = valuePtr;
                        }

                        LOBYTE(v39) = v31;
                        uint64_t v8 = (uint64_t)v68;
                        uint64_t v42 = (uint64_t)v68;
                        __int16 v43 = 2;
                        goto LABEL_122;
                      case 3:
                        if ((!v20 || CFStringGetLength(v20) <= 0) && !*(_BYTE *)(v7 + 8)) {
                          goto LABEL_125;
                        }
                        unint64_t v32 = (const __CFNumber *)CFDictionaryGetValue(v2, v64);
                        if (!v32)
                        {
                          uint64_t v42 = v8;
                          __int16 v43 = 3;
                          LOBYTE(v39) = 2;
                          goto LABEL_122;
                        }

                        int v70 = -1431655766;
                        if (CFNumberGetValue(v32, kCFNumberIntType, &v70))
                        {
                          int v33 = v70;
                          if (*(_BYTE *)(v7 + 8))
                          {
                            if (v70 == 2) {
                              int v34 = 1;
                            }
                            else {
                              int v34 = 2 * (v70 != 1);
                            }
                            uint64_t v35 = gLogObjects;
                            int v36 = gNumLogObjects;
                            if (gLogObjects && gNumLogObjects >= 40)
                            {
                              unsigned int v37 = *(os_log_s **)(gLogObjects + 312);
                            }

                            else
                            {
                              unsigned int v37 = (os_log_s *)&_os_log_default;
                              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                              {
                                *(_DWORD *)buf = v53;
                                *(void *)&uint8_t buf[4] = v35;
                                *(_WORD *)&buf[12] = 1024;
                                int v73 = v36;
                                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                              }
                            }

                            if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
                            {
                              *(_DWORD *)buf = v54;
                              *(_DWORD *)&uint8_t buf[4] = v33;
                              *(_WORD *)&uint8_t buf[8] = 1024;
                              *(_DWORD *)&buf[10] = v34;
                              _os_log_debug_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEBUG,  "Converted direction %d, to legacyDirection: %d",  buf,  0xEu);
                            }

                            id v2 = v69;
                            uint64_t v7 = v65;
                          }

                          else
                          {
                            LOBYTE(v34) = v70;
                          }

                          uint64_t v8 = (uint64_t)v68;
                          CFStringRef v6 = &startLogsNotificationObservers;
                        }

                        goto LABEL_125;
                      case 4:
                        if (v20 && CFStringGetLength(v20) >= 1)
                        {
                          uint64_t v27 = v8;
                          __int16 v28 = 4;
                          uint64_t v26 = v20;
LABEL_80:
                          uint64_t v38 = (uint64_t)iAP2MsgAddCFStringParam(v27, 0LL, v28, v26);
                        }

                        else
                        {
                          if (!*(_BYTE *)(v7 + 8)) {
                            goto LABEL_125;
                          }
                          uint64_t v47 = v8;
                          __int16 v48 = 4;
LABEL_119:
                          uint64_t v38 = (uint64_t)iAP2MsgAddStringParam(v47, 0LL, v48, "");
                        }

uint64_t iap2_communications_communicationsUpdateHandler(uint64_t result, const __CFDictionary *a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t *)result;
    uint64_t result = 0LL;
    if (a2)
    {
      if (*v3)
      {
        if (gLogObjects && gNumLogObjects >= 40)
        {
          uint64_t v4 = *(os_log_s **)(gLogObjects + 312);
        }

        else
        {
          uint64_t v4 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          uint64_t v5 = v3[1];
          *(_DWORD *)buf = 138412290;
          uint64_t v42 = v5;
          _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Received communications update for endpoint: %@",  buf,  0xCu);
        }

        uint64_t result = iap2_feature_getFeature((uint64_t)v3, 6u);
        if (result)
        {
          uint64_t v6 = result;
          if (!*(_BYTE *)(result + 24)) {
            return 0LL;
          }
          iAP2MsgInit((uint64_t)(v3 + 15), 16728, v3[24], 0xFFFF, 0LL, 0LL);
          uint64_t result = *(void *)(v6 + 16);
          if (result)
          {
            CFIndex Count = CFSetGetCount((CFSetRef)result);
            uint64_t v40 = &v25;
            uint64_t v8 = __chkstk_darwin(Count);
            uint64_t v10 = (const void **)((char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
            if (v8) {
              memset((char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL), 170, v9);
            }
            CFSetGetValues(*(CFSetRef *)(v6 + 16), v10);
            if (gLogObjects && gNumLogObjects >= 40)
            {
              uint64_t v11 = *(os_log_s **)(gLogObjects + 312);
            }

            else
            {
              uint64_t v11 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_37;
            }
            CFStringRef RawValuesString = CFSetCreateRawValuesString(*(const __CFSet **)(v6 + 16), 0);
            if (gLogObjects && gNumLogObjects >= 40)
            {
              int v13 = *(os_log_s **)(gLogObjects + 312);
            }

            else
            {
              int v13 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
            {
              iap2_communications_communicationsUpdateHandler_cold_3();
              if (!RawValuesString)
              {
LABEL_30:
                if (gLogObjects && gNumLogObjects >= 40)
                {
                  uint64_t v14 = *(os_log_s **)(gLogObjects + 312);
                }

                else
                {
                  uint64_t v14 = (os_log_s *)&_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }

                if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
                  iap2_communications_communicationsUpdateHandler_cold_1();
                }
LABEL_37:
                if (Count >= 1)
                {
                  __int16 v15 = 0;
                  CFStringRef v39 = @"HoldAvailable";
                  uint64_t v38 = @"MergeAvailable";
                  unsigned int v37 = @"SwapAvailable";
                  int v36 = @"HoldAndAcceptAvailable";
                  uint64_t v35 = @"EndAndAcceptAvailable";
                  int v34 = @"InitiateCallAvailable";
                  int v33 = @"NewVoicemailCount";
                  unint64_t v32 = @"CurrentCallCount";
                  int v31 = @"MuteStatus";
                  int v30 = @"FaceTimeVideoEnabled";
                  unint64_t v29 = @"FaceTimeAudioEnabled";
                  __int16 v28 = @"TelephonyEnabled";
                  uint64_t v27 = @"CellularSupported";
                  uint64_t v26 = @"CarrierName";
                  int v25 = @"TTYStatus";
                  do
                  {
                    int v16 = *(unsigned __int16 *)v10++;
                    switch(v16)
                    {
                      case 0:
                        uint64_t Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"SignalStrength");
                        uint64_t v18 = (uint64_t)(v3 + 15);
                        __int16 v19 = 0;
                        goto LABEL_52;
                      case 1:
                        uint64_t Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"RegistrationStatus");
                        uint64_t v18 = (uint64_t)(v3 + 15);
                        __int16 v19 = 1;
                        goto LABEL_52;
                      case 2:
                        BOOL v20 = (const __CFBoolean *)CFDictionaryGetValue(a2, @"AirplaneModeStatus");
                        uint64_t v21 = (uint64_t)(v3 + 15);
                        __int16 v22 = 2;
                        goto LABEL_59;
                      case 3:
                        BOOL v20 = (const __CFBoolean *)CFDictionaryGetValue(a2, v25);
                        uint64_t v21 = (uint64_t)(v3 + 15);
                        __int16 v22 = 3;
                        goto LABEL_59;
                      case 4:
                        int v23 = (const __CFString *)CFDictionaryGetValue(a2, v26);
                        int v24 = iAP2MsgAddCFStringParam((uint64_t)(v3 + 15), 0LL, 4, v23);
                        goto LABEL_60;
                      case 5:
                        BOOL v20 = (const __CFBoolean *)CFDictionaryGetValue(a2, v27);
                        uint64_t v21 = (uint64_t)(v3 + 15);
                        __int16 v22 = 5;
                        goto LABEL_59;
                      case 6:
                        BOOL v20 = (const __CFBoolean *)CFDictionaryGetValue(a2, v28);
                        uint64_t v21 = (uint64_t)(v3 + 15);
                        __int16 v22 = 6;
                        goto LABEL_59;
                      case 7:
                        BOOL v20 = (const __CFBoolean *)CFDictionaryGetValue(a2, v29);
                        uint64_t v21 = (uint64_t)(v3 + 15);
                        __int16 v22 = 7;
                        goto LABEL_59;
                      case 8:
                        BOOL v20 = (const __CFBoolean *)CFDictionaryGetValue(a2, v30);
                        uint64_t v21 = (uint64_t)(v3 + 15);
                        __int16 v22 = 8;
                        goto LABEL_59;
                      case 9:
                        BOOL v20 = (const __CFBoolean *)CFDictionaryGetValue(a2, v31);
                        uint64_t v21 = (uint64_t)(v3 + 15);
                        __int16 v22 = 9;
                        goto LABEL_59;
                      case 10:
                        uint64_t Value = (const __CFNumber *)CFDictionaryGetValue(a2, v32);
                        uint64_t v18 = (uint64_t)(v3 + 15);
                        __int16 v19 = 10;
                        goto LABEL_52;
                      case 11:
                        uint64_t Value = (const __CFNumber *)CFDictionaryGetValue(a2, v33);
                        uint64_t v18 = (uint64_t)(v3 + 15);
                        __int16 v19 = 11;
LABEL_52:
                        int v24 = iAP2MsgAddCFU8Param(v18, 0LL, v19, Value);
                        goto LABEL_60;
                      case 12:
                        BOOL v20 = (const __CFBoolean *)CFDictionaryGetValue(a2, v34);
                        uint64_t v21 = (uint64_t)(v3 + 15);
                        __int16 v22 = 12;
                        goto LABEL_59;
                      case 13:
                        BOOL v20 = (const __CFBoolean *)CFDictionaryGetValue(a2, v35);
                        uint64_t v21 = (uint64_t)(v3 + 15);
                        __int16 v22 = 13;
                        goto LABEL_59;
                      case 14:
                        BOOL v20 = (const __CFBoolean *)CFDictionaryGetValue(a2, v36);
                        uint64_t v21 = (uint64_t)(v3 + 15);
                        __int16 v22 = 14;
                        goto LABEL_59;
                      case 15:
                        BOOL v20 = (const __CFBoolean *)CFDictionaryGetValue(a2, v37);
                        uint64_t v21 = (uint64_t)(v3 + 15);
                        __int16 v22 = 15;
                        goto LABEL_59;
                      case 16:
                        BOOL v20 = (const __CFBoolean *)CFDictionaryGetValue(a2, v38);
                        uint64_t v21 = (uint64_t)(v3 + 15);
                        __int16 v22 = 16;
                        goto LABEL_59;
                      case 17:
                        BOOL v20 = (const __CFBoolean *)CFDictionaryGetValue(a2, v39);
                        uint64_t v21 = (uint64_t)(v3 + 15);
                        __int16 v22 = 17;
LABEL_59:
                        int v24 = iAP2MsgAddCFBooleanParam(v21, 0LL, v22, v20);
LABEL_60:
                        if (v24) {
                          ++v15;
                        }
                        break;
                      default:
                        break;
                    }

                    --Count;
                  }

                  while (Count);
                  if (v15) {
                    iap2_sessionControl_sendOutgoingMessage(v3, (uint64_t)(v3 + 15));
                  }
                }

                return 1LL;
              }
            }

            else if (!RawValuesString)
            {
              goto LABEL_30;
            }

            CFRelease(RawValuesString);
            goto LABEL_30;
          }
        }
      }
    }
  }

  return result;
}

uint64_t iap2_communications_recentsListUpdateHandler(uint64_t result, const __CFArray *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if (*(void *)result)
    {
      if (gLogObjects && gNumLogObjects >= 40)
      {
        uint64_t v4 = *(os_log_s **)(gLogObjects + 312);
      }

      else
      {
        uint64_t v4 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        uint64_t v5 = *(void *)(v2 + 8);
        int v6 = 138412290;
        uint64_t v7 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Received recents list update for endpoint: %@",  (uint8_t *)&v6,  0xCu);
      }

      uint64_t result = iap2_feature_getFeature(v2, 6u);
      if (result)
      {
        if (*(_BYTE *)(result + 42)) {
          return 1LL;
        }
        else {
          return _recentsListUpdateHandler(v2, a2, 0);
        }
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t _recentsListUpdateHandler(uint64_t result, const __CFArray *a2, int a3)
{
  if (!result) {
    return result;
  }
  uint64_t v3 = (uint64_t *)result;
  if (!*(void *)result) {
    return 0LL;
  }
  uint64_t result = iap2_feature_getFeature(result, 6u);
  if (!result) {
    return result;
  }
  uint64_t v6 = result;
  if (!*(_BYTE *)(result + 67)) {
    return 0LL;
  }
  if (!*(_BYTE *)(result + 66))
  {
    __int128 v63 = (os_log_s *)logObjectForModule_27();
    if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEFAULT,  "Accessory is not paired to CarPlay, list updates are unavailable!",  buf,  2u);
    }

    return 1LL;
  }

  if (gLogObjects && gNumLogObjects >= 40)
  {
    uint64_t v7 = *(os_log_s **)(gLogObjects + 312);
  }

  else
  {
    uint64_t v7 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = "YES";
    if (!a2) {
      uint64_t v8 = "NO";
    }
    *(_DWORD *)buf = 136315138;
    *(void *)uint64_t v93 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "recentsListAvailable: %s", buf, 0xCu);
  }

  if (gLogObjects && gNumLogObjects >= 40)
  {
    size_t v9 = *(os_log_s **)(gLogObjects + 312);
  }

  else
  {
    size_t v9 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    if (a2) {
      CFIndex Count = CFArrayGetCount(a2);
    }
    else {
      CFIndex Count = 0LL;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)uint64_t v93 = Count;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "recentsListCount: %ld", buf, 0xCu);
  }

  if (!a2)
  {
    iAP2MsgInit((uint64_t)(v3 + 15), 16753, v3[24], 0xFFFF, 0LL, 0LL);
    return 1LL;
  }

  unsigned int v11 = _calculateListCap_0(v3, v6, a2, 0);
  uint64_t v12 = (uint64_t)(v3 + 15);
  iAP2MsgInit((uint64_t)(v3 + 15), 16753, v3[24], 0xFFFF, 0LL, 0LL);
  unint64_t v13 = (unint64_t)iAP2MsgAddU8Param((uint64_t)(v3 + 15), 0LL, 0, 1);
  if (*(_BYTE *)(v6 + 44))
  {
    if (!(iAP2MsgAddU16Param((uint64_t)(v3 + 15), 0LL, 2, v11) | v13))
    {
LABEL_28:
      uint64_t result = 1LL;
      goto LABEL_33;
    }
  }

  else if (!v13)
  {
    goto LABEL_28;
  }

  uint64_t result = iap2_sessionControl_sendOutgoingMessage(v3, (uint64_t)(v3 + 15));
LABEL_33:
  if (*(_BYTE *)(v6 + 45))
  {
    CFIndex v14 = CFSetGetCount(*(CFSetRef *)(v6 + 32));
    BOOL v67 = &v64;
    uint64_t v15 = __chkstk_darwin(v14);
    int v17 = (const void **)((char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    uint64_t v81 = v15;
    if (v15) {
      memset((char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL), 170, v16);
    }
    int v76 = a3;
    CFSetGetValues(*(CFSetRef *)(v6 + 32), v17);
    if (gLogObjects && gNumLogObjects >= 40)
    {
      uint64_t v18 = *(os_log_s **)(gLogObjects + 312);
    }

    else
    {
      uint64_t v18 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG);
    BOOL v20 = &startLogsNotificationObservers;
    if (v19)
    {
      CFStringRef RawValuesString = CFSetCreateRawValuesString(*(const __CFSet **)(v6 + 32), 0);
      if (gLogObjects && gNumLogObjects >= 40)
      {
        __int16 v22 = *(os_log_s **)(gLogObjects + 312);
      }

      else
      {
        __int16 v22 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
        _recentsListUpdateHandler_cold_1();
      }
      BOOL v20 = &startLogsNotificationObservers;
      if (RawValuesString) {
        CFRelease(RawValuesString);
      }
    }

    unsigned int v78 = _iAP2MessageCutoffSize_0((uint64_t)v3);
    iAP2MsgInit((uint64_t)(v3 + 15), 16753, v3[24], 0xFFFF, 0LL, 0LL);
    if (v11)
    {
      int v73 = v17;
      unint64_t v71 = v3;
      CFIndex v24 = 0LL;
      unsigned __int16 v25 = 0;
      int v26 = 0;
      int v72 = 0;
      uint64_t v89 = @"Occurrences";
      __int16 v79 = @"Duration";
      int v88 = @"UnixTimestamp";
      __int16 v87 = @"Type";
      int v86 = @"Service";
      __int16 v85 = @"AddressBookID";
      uint64_t v75 = v11 - 1;
      CFIndex v70 = (int)v75;
      unsigned int v69 = v11;
      uint64_t v80 = v11;
      int v84 = @"Label";
      __int16 v83 = @"DisplayName";
      int v82 = @"RemoteID";
      *(void *)&__int128 v23 = 67109120LL;
      __int128 v64 = v23;
      *(void *)&__int128 v23 = 134218240LL;
      __int128 v66 = v23;
      *(void *)&__int128 v23 = 67109376LL;
      __int128 v65 = v23;
      *(void *)&__int128 v23 = 67109632LL;
      __int128 v68 = v23;
      int v74 = 1;
      int v27 = v76;
      __int16 v77 = a2;
      do
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v24);
        if (ValueAtIndex)
        {
          unint64_t v29 = ValueAtIndex;
          int v30 = iAP2MsgAddGroupParam(v12, 1);
          if (v30) {
            ++v26;
          }
          int v90 = v26;
          if (v81 >= 1)
          {
            uint64_t v31 = (uint64_t)v30;
            uint64_t v32 = v81;
            int v33 = v73;
            while (2)
            {
              int v34 = *(unsigned __int16 *)v33++;
              switch(v34)
              {
                case 0:
                  iAP2MsgAddU16Param(v12, v31, 0, v25);
                  goto LABEL_88;
                case 1:
                  uint64_t Value = (const __CFString *)CFDictionaryGetValue(v29, v82);
                  uint64_t v36 = v12;
                  uint64_t v37 = v31;
                  __int16 v38 = 1;
                  goto LABEL_64;
                case 2:
                  uint64_t Value = (const __CFString *)CFDictionaryGetValue(v29, v83);
                  uint64_t v36 = v12;
                  uint64_t v37 = v31;
                  __int16 v38 = 2;
                  goto LABEL_64;
                case 3:
                  uint64_t Value = (const __CFString *)CFDictionaryGetValue(v29, v84);
                  uint64_t v36 = v12;
                  uint64_t v37 = v31;
                  __int16 v38 = 3;
                  goto LABEL_64;
                case 4:
                  uint64_t Value = (const __CFString *)CFDictionaryGetValue(v29, v85);
                  uint64_t v36 = v12;
                  uint64_t v37 = v31;
                  __int16 v38 = 4;
LABEL_64:
                  iAP2MsgAddCFStringParam(v36, v37, v38, Value);
                  goto LABEL_88;
                case 5:
                  CFStringRef v39 = (const __CFNumber *)CFDictionaryGetValue(v29, v86);
                  char v40 = _convertACCCallServiceToiAP2CallService(v39);
                  uint64_t v41 = v12;
                  uint64_t v42 = v31;
                  __int16 v43 = 5;
                  goto LABEL_87;
                case 6:
                  int v44 = (const __CFNumber *)CFDictionaryGetValue(v29, v87);
                  int valuePtr = 0;
                  if (v44 && CFNumberGetValue(v44, kCFNumberIntType, &valuePtr))
                  {
                    if ((valuePtr - 1) >= 3)
                    {
                      uint64_t v50 = v20[353];
                      int v51 = gNumLogObjects;
                      if (v50 && gNumLogObjects >= 40)
                      {
                        int v52 = *(os_log_s **)(v50 + 312);
                      }

                      else
                      {
                        int v52 = (os_log_s *)&_os_log_default;
                        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = v66;
                          *(void *)uint64_t v93 = v50;
                          *(_WORD *)&v93[8] = 1024;
                          v94[0] = v51;
                          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                        }
                      }

                      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = v64;
                        *(_DWORD *)uint64_t v93 = valuePtr;
                        _os_log_error_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_ERROR,  "Invalid ACCCommunications_ListUpdate_Recents_CallType_t: %d!",  buf,  8u);
                      }

                      char v45 = 0;
                      int v27 = v76;
                      BOOL v20 = &startLogsNotificationObservers;
                    }

                    else
                    {
                      char v45 = valuePtr;
                    }
                  }

                  else
                  {
                    char v45 = 0;
                  }

                  char v40 = v45;
                  uint64_t v41 = v12;
                  uint64_t v42 = v31;
                  __int16 v43 = 6;
                  goto LABEL_87;
                case 7:
                  int v46 = (const __CFNumber *)CFDictionaryGetValue(v29, v88);
                  iAP2MsgAddCFU64Param(v12, v31, 7, v46);
                  goto LABEL_88;
                case 8:
                  buf[0] = 1;
                  if (!v27
                    || (uint64_t v47 = (const __CFNumber *)CFDictionaryGetValue(v29, v89)) == 0LL
                    || (CFNumberGetValue(v47, kCFNumberCharType, buf), buf[0] == 1))
                  {
                    __int16 v48 = (const __CFNumber *)CFDictionaryGetValue(v29, v79);
                    iAP2MsgAddCFU32Param(v12, v31, 8, v48);
                  }

                  goto LABEL_88;
                case 9:
                  if (v27)
                  {
                    uint64_t v49 = (const __CFNumber *)CFDictionaryGetValue(v29, v89);
                    iAP2MsgAddCFU8Param(v12, v31, 9, v49);
                  }

                  else
                  {
                    uint64_t v41 = v12;
                    uint64_t v42 = v31;
                    __int16 v43 = 9;
                    char v40 = 1;
LABEL_87:
                    iAP2MsgAddU8Param(v41, v42, v43, v40);
                  }

uint64_t iap2_communications_recentsListUpdateCoalescedHandler(uint64_t result, const __CFArray *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if (*(void *)result)
    {
      if (gLogObjects && gNumLogObjects >= 40)
      {
        uint64_t v4 = *(os_log_s **)(gLogObjects + 312);
      }

      else
      {
        uint64_t v4 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        uint64_t v5 = *(void *)(v2 + 8);
        int v6 = 138412290;
        uint64_t v7 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Received recents list update (coalesced) for endpoint: %@",  (uint8_t *)&v6,  0xCu);
      }

      uint64_t result = iap2_feature_getFeature(v2, 6u);
      if (result)
      {
        if (*(_BYTE *)(result + 42)) {
          return _recentsListUpdateHandler(v2, a2, 1);
        }
        else {
          return 1LL;
        }
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t iap2_communications_favoritesListUpdateHandler(uint64_t result, const __CFArray *a2)
{
  if (!result) {
    return result;
  }
  uint64_t v2 = (uint64_t *)result;
  if (!*(void *)result) {
    return 0LL;
  }
  uint64_t result = iap2_feature_getFeature(result, 6u);
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  if (!*(_BYTE *)(result + 67)) {
    return 0LL;
  }
  if (!*(_BYTE *)(result + 66))
  {
    uint64_t v47 = (os_log_s *)logObjectForModule_27();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "Accessory is not paired to CarPlay, list updates are unavailable!",  buf,  2u);
    }

    return 1LL;
  }

  if (gLogObjects && gNumLogObjects >= 40)
  {
    uint64_t v5 = *(os_log_s **)(gLogObjects + 312);
  }

  else
  {
    uint64_t v5 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    int v6 = "YES";
    if (!a2) {
      int v6 = "NO";
    }
    *(_DWORD *)buf = 136315138;
    *(void *)__int128 v68 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "favoritesListAvailable: %s", buf, 0xCu);
  }

  if (gLogObjects && gNumLogObjects >= 40)
  {
    uint64_t v7 = *(os_log_s **)(gLogObjects + 312);
  }

  else
  {
    uint64_t v7 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    if (a2) {
      CFIndex Count = CFArrayGetCount(a2);
    }
    else {
      CFIndex Count = 0LL;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)__int128 v68 = Count;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "favoritesListCount: %ld", buf, 0xCu);
  }

  if (!a2)
  {
    iAP2MsgInit((uint64_t)(v2 + 15), 16753, v2[24], 0xFFFF, 0LL, 0LL);
    return 1LL;
  }

  unsigned int v9 = _calculateListCap_0(v2, v4, a2, 1);
  uint64_t v10 = (uint64_t)(v2 + 15);
  iAP2MsgInit((uint64_t)(v2 + 15), 16753, v2[24], 0xFFFF, 0LL, 0LL);
  unint64_t v11 = (unint64_t)iAP2MsgAddU8Param((uint64_t)(v2 + 15), 0LL, 5, 1);
  if (*(_BYTE *)(v4 + 59))
  {
    if (!(iAP2MsgAddU16Param((uint64_t)(v2 + 15), 0LL, 7, v9) | v11))
    {
LABEL_28:
      uint64_t result = 1LL;
      goto LABEL_33;
    }
  }

  else if (!v11)
  {
    goto LABEL_28;
  }

  uint64_t result = iap2_sessionControl_sendOutgoingMessage(v2, (uint64_t)(v2 + 15));
LABEL_33:
  if (!*(_BYTE *)(v4 + 60)) {
    return result;
  }
  CFIndex v12 = CFSetGetCount(*(CFSetRef *)(v4 + 48));
  uint64_t v50 = &v48;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (const void **)((char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v62 = v13;
  if (v13) {
    memset((char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL), 170, v14);
  }
  int v59 = a2;
  CFSetGetValues(*(CFSetRef *)(v4 + 48), v15);
  if (gLogObjects && gNumLogObjects >= 40)
  {
    size_t v16 = *(os_log_s **)(gLogObjects + 312);
  }

  else
  {
    size_t v16 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_50;
  }
  CFStringRef RawValuesString = CFSetCreateRawValuesString(*(const __CFSet **)(v4 + 48), 0);
  if (gLogObjects && gNumLogObjects >= 40)
  {
    uint64_t v18 = *(os_log_s **)(gLogObjects + 312);
  }

  else
  {
    uint64_t v18 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    _recentsListUpdateHandler_cold_1();
    if (!RawValuesString) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }

  if (RawValuesString) {
LABEL_49:
  }
    CFRelease(RawValuesString);
LABEL_50:
  unsigned int v60 = _iAP2MessageCutoffSize_0((uint64_t)v2);
  iAP2MsgInit((uint64_t)(v2 + 15), 16753, v2[24], 0xFFFF, 0LL, 0LL);
  if (v9)
  {
    __int16 v56 = v15;
    uint64_t v54 = v2;
    CFIndex v20 = 0LL;
    unsigned __int16 v21 = 0;
    __int16 v22 = 0;
    int v55 = 0;
    __int128 v66 = @"Service";
    __int128 v65 = @"AddressBookID";
    __int128 v64 = @"Label";
    __int128 v63 = @"DisplayName";
    uint64_t v58 = v9 - 1;
    CFIndex v53 = (int)v58;
    unsigned int v52 = v9;
    uint64_t v61 = v9;
    int v57 = 1;
    *(void *)&__int128 v19 = 67109376LL;
    __int128 v49 = v19;
    *(void *)&__int128 v19 = 67109632LL;
    __int128 v51 = v19;
    *(void *)&__int128 v19 = 134218240LL;
    __int128 v48 = v19;
    __int128 v23 = v59;
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v23, v20);
      if (ValueAtIndex)
      {
        unsigned __int16 v25 = ValueAtIndex;
        int v26 = iAP2MsgAddGroupParam(v10, 6);
        if (v26) {
          ++v22;
        }
        if (v62 >= 1)
        {
          uint64_t v27 = (uint64_t)v26;
          uint64_t v28 = v62;
          unint64_t v29 = v56;
          do
          {
            int v30 = *(unsigned __int16 *)v29++;
            switch(v30)
            {
              case 0:
                iAP2MsgAddU16Param(v10, v27, 0, v21);
                break;
              case 1:
                uint64_t Value = (const __CFString *)CFDictionaryGetValue(v25, @"RemoteID");
                uint64_t v32 = v10;
                uint64_t v33 = v27;
                __int16 v34 = 1;
                goto LABEL_63;
              case 2:
                uint64_t Value = (const __CFString *)CFDictionaryGetValue(v25, v63);
                uint64_t v32 = v10;
                uint64_t v33 = v27;
                __int16 v34 = 2;
                goto LABEL_63;
              case 3:
                uint64_t Value = (const __CFString *)CFDictionaryGetValue(v25, v64);
                uint64_t v32 = v10;
                uint64_t v33 = v27;
                __int16 v34 = 3;
                goto LABEL_63;
              case 4:
                uint64_t Value = (const __CFString *)CFDictionaryGetValue(v25, v65);
                uint64_t v32 = v10;
                uint64_t v33 = v27;
                __int16 v34 = 4;
LABEL_63:
                iAP2MsgAddCFStringParam(v32, v33, v34, Value);
                break;
              case 5:
                uint64_t v35 = (const __CFNumber *)CFDictionaryGetValue(v25, v66);
                char v36 = _convertACCCallServiceToiAP2CallService(v35);
                iAP2MsgAddU8Param(v10, v27, 5, v36);
                break;
              default:
                break;
            }

            --v28;
          }

          while (v28);
        }

        unsigned int MsgLen = iAP2MsgGetMsgLen(v10);
        uint64_t v38 = gLogObjects;
        int v39 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 40)
        {
          char v40 = *(os_log_s **)(gLogObjects + 312);
        }

        else
        {
          char v40 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = v48;
            *(void *)__int128 v68 = v38;
            *(_WORD *)&v68[8] = 1024;
            v69[0] = v39;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          }
        }

        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = v49;
          *(_DWORD *)__int128 v68 = MsgLen;
          *(_WORD *)&v68[4] = 1024;
          *(_DWORD *)&v68[6] = v60;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEBUG,  "messageSize: %d bytes, messageCutoffSize: %d bytes",  buf,  0xEu);
        }

        if (MsgLen > v60 || v20 == v58)
        {
          uint64_t v41 = gLogObjects;
          int v42 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 40)
          {
            __int16 v43 = *(os_log_s **)(gLogObjects + 312);
          }

          else
          {
            __int16 v43 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = v48;
              *(void *)__int128 v68 = v41;
              *(_WORD *)&v68[8] = 1024;
              v69[0] = v42;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            }
          }

          if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
          {
            int v44 = v55 + 1;
            *(_DWORD *)buf = v51;
            *(_DWORD *)__int128 v68 = (unsigned __int16)v55;
            *(_WORD *)&v68[4] = 1024;
            *(_DWORD *)&v68[6] = v20 + 1;
            LOWORD(v69[0]) = 1024;
            *(_DWORD *)((char *)v69 + 2) = v52;
            _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_INFO,  "Sending ListUpdate message (FavoritesList %d, entry: %d/%d)",  buf,  0x14u);
            int v55 = v44;
          }

          __int128 v23 = v59;
          if (!v22) {
            goto LABEL_86;
          }
          char v45 = v54;
          int v46 = iap2_sessionControl_sendOutgoingMessage(v54, v10);
          v57 &= v46;
          if (v20 < v53)
          {
            iAP2MsgInit(v10, 16753, v45[24], 0xFFFF, 0LL, 0LL);
LABEL_86:
            __int16 v22 = 0;
          }
        }

        else
        {
          __int128 v23 = v59;
        }
      }

      ++v20;
      ++v21;
      if (v20 == v61) {
        return v57 & 1;
      }
    }
  }

  int v57 = 1;
  return v57 & 1;
}

uint64_t _calculateListCap_0(void *a1, uint64_t a2, const __CFArray *a3, int a4)
{
  if (!a1) {
    return 50;
  }
  unsigned __int16 v5 = 50;
  if (a2 && *a1)
  {
    else {
      unsigned int v8 = 50;
    }
    if (a4 == 1)
    {
      uint64_t v10 = (unsigned __int16 *)(a2 + 56);
    }

    else
    {
      unsigned int v9 = v8;
      if (a4)
      {
LABEL_12:
        CFIndex Count = CFArrayGetCount(a3);
        CFIndex v12 = Count;
        else {
          unsigned __int16 v13 = v8;
        }
        if (v13 <= v9 || v9 == 0) {
          unsigned __int16 v5 = v13;
        }
        else {
          unsigned __int16 v5 = v9;
        }
        if (gLogObjects && gNumLogObjects >= 40)
        {
          uint64_t v15 = *(os_log_s **)(gLogObjects + 312);
        }

        else
        {
          uint64_t v15 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          v17[0] = 67109888;
          v17[1] = v5;
          __int16 v18 = 2048;
          CFIndex v19 = v12;
          __int16 v20 = 1024;
          unsigned int v21 = v8;
          __int16 v22 = 1024;
          unsigned int v23 = v9;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "listCap: %d (listCount: %ld, hardCap: %d, listMax: %d)",  (uint8_t *)v17,  0x1Eu);
        }

        return v5;
      }

      uint64_t v10 = (unsigned __int16 *)(a2 + 40);
    }

    unsigned int v9 = *v10;
    goto LABEL_12;
  }

  return v5;
}

uint64_t _iAP2MessageCutoffSize_0(uint64_t a1)
{
  unsigned int MaxSendPayloadSize = iap2_endpoint_getMaxSendPayloadSize(a1);
  if (gLogObjects && gNumLogObjects >= 40)
  {
    uint64_t v2 = *(os_log_s **)(gLogObjects + 312);
  }

  else
  {
    uint64_t v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109376;
    v4[1] = MaxSendPayloadSize;
    __int16 v5 = 1024;
    unsigned int v6 = MaxSendPayloadSize >> 1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "maxPayloadSize: %d, messageCutoffSize: %d",  (uint8_t *)v4,  0xEu);
  }

  return MaxSendPayloadSize >> 1;
}

CFNumberRef _convertACCCallServiceToiAP2CallService(const __CFNumber *result)
{
  unsigned int valuePtr = 0;
  if (result)
  {
    uint64_t result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberIntType, &valuePtr);
    if ((_DWORD)result)
    {
      uint64_t result = (const __CFNumber *)valuePtr;
      if (valuePtr - 1 >= 3)
      {
        if (gLogObjects && gNumLogObjects >= 40)
        {
          int v1 = *(os_log_s **)(gLogObjects + 312);
        }

        else
        {
          int v1 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        uint64_t result = (const __CFNumber *)os_log_type_enabled(v1, OS_LOG_TYPE_ERROR);
        if ((_DWORD)result)
        {
          _convertACCCallServiceToiAP2CallService_cold_1((uint64_t)&valuePtr, v1, v2, v3, v4, v5, v6, v7);
          return 0LL;
        }
      }
    }
  }

  return result;
}

uint64_t iap2_communications_carPlayPairedVehiclesDidChangeHandler(uint64_t *a1, int a2)
{
  if (a1)
  {
    if (*a1)
    {
      uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 6u);
      if (Feature)
      {
        uint64_t v5 = (unsigned __int8 *)Feature;
        if ((a2 & 1) == 0)
        {
          if (gLogObjects && gNumLogObjects >= 40)
          {
            uint64_t v6 = *(os_log_s **)(gLogObjects + 312);
          }

          else
          {
            uint64_t v6 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v13) = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "CarPlay paired vehicles did change!",  (uint8_t *)&v13,  2u);
          }
        }

        CFTypeRef v7 = iap2_accAuthentication_copyCertificateSerial((uint64_t)a1);
        if (v7)
        {
          unsigned int v8 = v7;
          int isWirelessCarPlayAllowedForCertSerial = platform_CarPlay_isWirelessCarPlayAllowedForCertSerial();
          CFRelease(v8);
          if (gLogObjects && gNumLogObjects >= 40)
          {
            uint64_t v10 = *(os_log_s **)(gLogObjects + 312);
          }

          else
          {
            uint64_t v10 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            unint64_t v11 = "NO";
            if (isWirelessCarPlayAllowedForCertSerial) {
              unint64_t v11 = "YES";
            }
            int v13 = 136315138;
            size_t v14 = v11;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "carPlayPaired: %s", (uint8_t *)&v13, 0xCu);
          }

          if (v5[66] != isWirelessCarPlayAllowedForCertSerial || a2)
          {
            v5[66] = isWirelessCarPlayAllowedForCertSerial;
            if (!isWirelessCarPlayAllowedForCertSerial || (a2 & 1) != 0)
            {
              iAP2MsgInit((uint64_t)(a1 + 15), 16753, a1[24], 0xFFFF, 0LL, 0LL);
              iAP2MsgAddU8Param((uint64_t)(a1 + 15), 0LL, 0, 0);
              iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
              iAP2MsgInit((uint64_t)(a1 + 15), 16753, a1[24], 0xFFFF, 0LL, 0LL);
              iAP2MsgAddU8Param((uint64_t)(a1 + 15), 0LL, 5, 0);
              iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
            }

            else
            {
              if (v5[46]) {
                platform_communications_triggerListUpdate(0LL, v5[42]);
              }
              if (v5[61]) {
                platform_communications_triggerListUpdate(1LL, 0LL);
              }
            }
          }
        }
      }
    }
  }

  return 0LL;
}

void *_createFeature_20(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  int v1 = calloc(1uLL, 0x48uLL);
  uint64_t v2 = v1;
  if (v1)
  {
    void *v1 = 0LL;
    v1[1] = 0LL;
    *((_BYTE *)v1 + _Block_object_dispose(va, 8) = 1;
    *((_OWORD *)v1 + 1) = 0u;
    *((_OWORD *)v1 + 2) = 0u;
    *((_OWORD *)v1 + 3) = 0u;
    v1[8] = 0LL;
    platform_communications_incrementUserCount();
  }

  return v2;
}

void **_destroyFeature_20(void **result)
{
  if (result)
  {
    int v1 = result;
    uint64_t v2 = (uint64_t)*result;
    if (*result)
    {
      for (int i = 0; i != 4; ++i)
        _removeSubscriberForSubFeature(v2, i);
      platform_communications_decrementUserCount();
      if (*(void *)v2)
      {
        CFRelease(*(CFTypeRef *)v2);
        *(void *)uint64_t v2 = 0LL;
      }

      uint64_t v4 = *(const void **)(v2 + 16);
      if (v4)
      {
        CFRelease(v4);
        *(void *)(v2 + 16) = 0LL;
      }

      uint64_t v5 = *(const void **)(v2 + 32);
      if (v5)
      {
        CFRelease(v5);
        *(void *)(v2 + 32) = 0LL;
      }

      uint64_t v6 = *(const void **)(v2 + 48);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(v2 + 4_Block_object_dispose(va, 8) = 0LL;
      }

      if (*v1)
      {
        free(*v1);
        void *v1 = 0LL;
      }

      return (void **)1;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t _checkIdentificationInfo_18(uint64_t a1)
{
  unsigned __int8 v6 = 0;
  uint64_t result = iap2_identification_checkIdentificationMsgIDs( a1,  (uint64_t)&_checkIdentificationInfo_kMsgCallStateList,  3u,  &v6);
  if (!(_DWORD)result)
  {
    int v3 = v6;
    uint64_t result = iap2_identification_checkIdentificationMsgIDs( a1,  (uint64_t)&_checkIdentificationInfo_kMsgCommunicationsList,  3u,  &v6);
    if (!(_DWORD)result)
    {
      int v4 = v6;
      uint64_t result = iap2_identification_checkIdentificationMsgIDs( a1,  (uint64_t)&_checkIdentificationInfo_kMsgCallControlList,  0xBu,  &v6);
      if (!(_DWORD)result)
      {
        int v5 = v6;
        uint64_t result = iap2_identification_checkIdentificationMsgIDs( a1,  (uint64_t)&_checkIdentificationInfo_kMsgListUpdatesList,  3u,  &v6);
        if (!(_DWORD)result)
        {
          if (v4 | v3 | v5 | v6)
          {
            iap2_features_createFeature(a1, 6u);
            iap2_identification_setIdentifiedForFeature(a1, 6u);
          }

          return 0LL;
        }
      }
    }
  }

  return result;
}

CFIndex OUTLINED_FUNCTION_19_2(CFSetRef *a1)
{
  return CFSetGetCount(*a1);
}

void sub_100104484( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id location, id a22)
{
}

void sub_1001067F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100106CB0(_Unwind_Exception *a1)
{
}

void sub_100107E5C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id location, id a22)
{
}

uint64_t iAP2MsgInitMessage( uint64_t result, __int16 a2, __int16 a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 4_Block_object_dispose((const void *)(v1 - 144), 8) = 0u;
  *(void *)(result + 64) = 0LL;
  *(_OWORD *)uint64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(void *)(result + 24) = a4;
  *(_DWORD *)(result + 16) = a5;
  *(void *)(result + 40) = a6;
  *(void *)(result + 4_Block_object_dispose((const void *)(v1 - 144), 8) = a7;
  if (a4)
  {
    *(_BYTE *)a4 = HIBYTE(a2);
    *(_BYTE *)(a4 + 1) = a2;
    *(_WORD *)(a4 + 2) = 1536;
    *(_BYTE *)(a4 + 4) = HIBYTE(a3);
    uint64_t v7 = a4 + 6;
    *(_BYTE *)(a4 + 5) = a3;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  *(void *)(result + 32) = v7;
  return result;
}

uint64_t iAP2MsgInitParam(uint64_t result, _BYTE *a2, __int16 a3, int a4, unsigned int a5, uint64_t a6)
{
  if (a6)
  {
    char v6 = *(_BYTE *)(a6 + 1);
    unsigned __int16 v7 = _byteswap_ushort(*(_WORD *)a6);
    if (a4 == 12) {
      __int16 v8 = 4;
    }
    else {
      __int16 v8 = a5;
    }
    *(_BYTE *)a6 = (unsigned __int16)(v7 + v8) >> 8;
    *(_BYTE *)(a6 + 1) = v6 + v8;
  }

  unsigned int v9 = 0;
  *(void *)(result + 32) += a5;
  *a2 = BYTE1(a5);
  a2[1] = a5;
  a2[2] = HIBYTE(a3);
  a2[3] = a3;
  uint64_t v10 = *(void *)(result + 24);
  unsigned int v11 = *(_DWORD *)(result + 16);
  if (v10 && v11 >= 6) {
    unsigned int v9 = __rev16(*(unsigned __int16 *)(v10 + 2));
  }
  char v12 = 0;
  unsigned int v13 = (v9 + a5) >> 8;
  size_t v14 = (_BYTE *)(v10 + 2);
  if (v11 <= 5) {
    size_t v14 = 0LL;
  }
  *size_t v14 = v13;
  uint64_t v15 = *(void *)(result + 24);
  unsigned int v16 = *(_DWORD *)(result + 16);
  if (v15 && v16 >= 6) {
    char v12 = *(_BYTE *)(v15 + 3);
  }
  char v17 = v12 + a5;
  uint64_t v18 = v15 + 2;
  if (v16 <= 5) {
    uint64_t v18 = 0LL;
  }
  *(_BYTE *)(v18 + 1) = v17;
  return result;
}

uint64_t iAP2MsgGetMsgLen(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 24);
    if (v1 && *(_DWORD *)(result + 16) >= 6u) {
      return bswap32(*(unsigned __int16 *)(v1 + 2)) >> 16;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t iAP2MsgInit(uint64_t a1, __int16 a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a1) {
    iAP2MsgInitMessage(a1, 16448, a2, a3, a4, a5, a6);
  }
  return a1;
}

uint64_t iAP2MsgCleanup(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(uint64_t (**)(void))(result + 40);
    if (v1) {
      return v1();
    }
  }

  return result;
}

uint64_t iAP2MsgSetCallbackOnSend(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 64) = a2;
  }
  return result;
}

uint64_t iAP2MsgGetFreeParam(uint64_t a1)
{
  else {
    return 0LL;
  }
}

uint64_t iAP2MsgGetSom(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(unsigned __int16 **)(result + 24);
    if (v1 && *(_DWORD *)(result + 16) >= 6u) {
      return bswap32(*v1) >> 16;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t iAP2MsgGetMsgID(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 24);
    if (v1 && *(_DWORD *)(result + 16) >= 6u) {
      return bswap32(*(unsigned __int16 *)(v1 + 4)) >> 16;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t iAP2MsgSetMsgID(uint64_t result, __int16 a2)
{
  if (result)
  {
    uint64_t v2 = *(void *)(result + 24);
    if (v2 && *(_DWORD *)(result + 16) >= 6u)
    {
      *(_BYTE *)(v2 + 4) = HIBYTE(a2);
      *(_BYTE *)(*(void *)(result + 24) + 5LL) = a2;
      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

BOOL iAP2MsgSetCleanupCB(uint64_t a1, uint64_t a2)
{
  if (a1) {
    *(void *)(a1 + 40) = a2;
  }
  return a1 != 0;
}

uint64_t iAP2MsgGetParamID(uint64_t a1)
{
  return bswap32(*(unsigned __int16 *)(a1 + 2)) >> 16;
}

uint64_t iAP2MsgGetParamValueLen(unsigned __int16 *a1)
{
  unsigned int v1 = __rev16(*a1);
  BOOL v2 = v1 >= 4;
  unsigned int v3 = v1 - 4;
  if (v2) {
    return v3;
  }
  else {
    return 0LL;
  }
}

uint64_t iAP2MsgGetParamValueData(uint64_t a1)
{
  return a1 + 4;
}

unint64_t iAP2MsgGetFirstParam(uint64_t a1, unsigned __int16 *a2)
{
  if (a2)
  {
    unsigned int v3 = *a2;
    BOOL v2 = a2 + 2;
    if (__rev16(v3) <= 4) {
      return 0LL;
    }
    else {
      return (unint64_t)v2;
    }
  }

  else
  {
    unint64_t result = 0LL;
    unint64_t v6 = *(void *)(a1 + 32);
    unint64_t v7 = *(void *)(a1 + 24) + 6LL;
    uint64_t v8 = v6 - v7;
    if (v6 > v7) {
      unsigned int v9 = (unsigned __int16 *)v7;
    }
    else {
      unsigned int v9 = 0LL;
    }
    if (v6) {
      BOOL v10 = v6 > v7;
    }
    else {
      BOOL v10 = 0;
    }
    if (v10)
    {
      if (v8 < 4) {
        return 0LL;
      }
      unint64_t result = v7;
    }
  }

  return result;
}

unsigned __int16 *iAP2MsgGetNextParam(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  return iAP2MsgGetNextParamWithError(a1, a2, a3, 0LL);
}

unsigned __int16 *iAP2MsgGetNextParamWithError( uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, _BYTE *a4)
{
  if (a2) {
    unsigned int v4 = __rev16(*a2);
  }
  else {
    unsigned int v4 = 0;
  }
  if (a1)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5 && *(_DWORD *)(a1 + 16) >= 6u) {
      unsigned int v6 = bswap32(*(unsigned __int16 *)(v5 + 2)) >> 16;
    }
    else {
      unsigned int v6 = 0;
    }
  }

  else
  {
    unsigned int v6 = 0;
    uint64_t v5 = MEMORY[0x18];
  }

  uint64_t v7 = __rev16(*a3);
  if (!a4)
  {
    goto LABEL_14;
  }

  *a4 = 0;
  if (v7 > 3)
  {
LABEL_14:
    uint64_t v8 = (unsigned __int16 *)((char *)a3 + v7);
    unint64_t v9 = *(void *)(a1 + 32);
    BOOL v12 = v9 >= (unint64_t)a3 + v7;
    uint64_t v10 = v9 - ((void)a3 + v7);
    if (v12
      && v10 >= 4
      && ((unint64_t v11 = __rev16(*v8), a2) ? (v12 = v8 >= (unsigned __int16 *)((char *)a2 + v4)) : (v12 = 0),
          v12 ? (char v13 = 0) : (char v13 = 1),
          v10 >= v11 && (v13 & 1) != 0))
    {
      if ((_iAP2LogEnableMask & 4) != 0)
      {
        size_t v14 = (os_log_s *)logObjectForModule_24();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
          iAP2MsgGetNextParamWithError_cold_3(v6, v14);
        }
      }
    }

    else if ((_iAP2LogEnableMask & 4) != 0)
    {
      if (gLogObjects && gNumLogObjects >= 20)
      {
        uint64_t v15 = *(os_log_s **)(gLogObjects + 152);
      }

      else
      {
        uint64_t v15 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
        iAP2MsgGetNextParamWithError_cold_1(v7, v4, v15);
      }
    }

    return 0LL;
  }

  uint64_t v8 = 0LL;
  *a4 = 1;
  return v8;
}

uint64_t iAP2MsgForEachParamDo( uint64_t a1, unsigned __int16 *a2, uint64_t (*a3)(uint64_t, unsigned __int16 *, unsigned __int16 *, uint64_t), uint64_t a4)
{
  unint64_t FirstParam = iAP2MsgGetFirstParam(a1, a2);
  char v17 = 0;
  if (!FirstParam) {
    return 0LL;
  }
  unint64_t v9 = (unsigned __int16 *)FirstParam;
  while (1)
  {
    uint64_t v10 = a3(a1, a2, v9, a4);
    NextParamWithError = iAP2MsgGetNextParamWithError(a1, a2, v9, &v17);
    if (v17) {
      break;
    }
    unint64_t v9 = NextParamWithError;
    if (!NextParamWithError || (_DWORD)v10) {
      return v10;
    }
  }

  if ((_iAP2LogEnableMask & 1) != 0)
  {
    uint64_t v12 = gLogObjects;
    int v13 = gNumLogObjects;
    if (gLogObjects) {
      BOOL v14 = gNumLogObjects < 20;
    }
    else {
      BOOL v14 = 1;
    }
    if (v14)
    {
      uint64_t v15 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        CFIndex v19 = (const char *)v12;
        __int16 v20 = 1024;
        int v21 = v13;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
      }
    }

    else
    {
      uint64_t v15 = *(os_log_s **)(gLogObjects + 152);
    }

    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      CFIndex v19 = "iAP2MsgForEachParamDo";
      __int16 v20 = 1024;
      int v21 = 466;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "ERROR: %s:%d Couldn't get next param from iAP2MsgGetNextParamWithError\n",  buf,  0x12u);
    }
  }

  return 0xFFFFFFFFLL;
}

_BYTE *iAP2MsgAddGroupParam(uint64_t a1, __int16 a2)
{
  else {
    BOOL v2 = 0LL;
  }
  if (v2) {
    iAP2MsgInitParam(a1, v2, a2, 10, 4u, 0LL);
  }
  return v2;
}

uint64_t iAP2MsgAddU64Param(uint64_t a1, uint64_t a2, __int16 a3, unint64_t a4)
{
  else {
    uint64_t v4 = 0LL;
  }
  if (v4)
  {
    iAP2MsgInitParam(a1, (_BYTE *)v4, a3, 0, 0xCu, a2);
    *(void *)(v4 + 4) = bswap64(a4);
  }

  return v4;
}

uint64_t iAP2MsgAddU32Param(uint64_t a1, uint64_t a2, __int16 a3, unsigned int a4)
{
  else {
    uint64_t v4 = 0LL;
  }
  if (v4)
  {
    iAP2MsgInitParam(a1, (_BYTE *)v4, a3, 1, 8u, a2);
    *(_DWORD *)(v4 + 4) = bswap32(a4);
  }

  return v4;
}

uint64_t iAP2MsgAddU16Param(uint64_t a1, uint64_t a2, __int16 a3, unsigned int a4)
{
  else {
    uint64_t v4 = 0LL;
  }
  if (v4)
  {
    iAP2MsgInitParam(a1, (_BYTE *)v4, a3, 2, 6u, a2);
    *(_WORD *)(v4 + 4) = __rev16(a4);
  }

  return v4;
}

_BYTE *iAP2MsgAddU8Param(uint64_t a1, uint64_t a2, __int16 a3, char a4)
{
  else {
    uint64_t v4 = 0LL;
  }
  if (v4)
  {
    iAP2MsgInitParam(a1, v4, a3, 3, 5u, a2);
    v4[4] = a4;
  }

  return v4;
}

uint64_t iAP2MsgAddI64Param(uint64_t a1, uint64_t a2, __int16 a3, unint64_t a4)
{
  else {
    uint64_t v4 = 0LL;
  }
  if (v4)
  {
    iAP2MsgInitParam(a1, (_BYTE *)v4, a3, 4, 0xCu, a2);
    *(void *)(v4 + 4) = bswap64(a4);
  }

  return v4;
}

uint64_t iAP2MsgAddI32Param(uint64_t a1, uint64_t a2, __int16 a3, unsigned int a4)
{
  else {
    uint64_t v4 = 0LL;
  }
  if (v4)
  {
    iAP2MsgInitParam(a1, (_BYTE *)v4, a3, 5, 8u, a2);
    *(_DWORD *)(v4 + 4) = bswap32(a4);
  }

  return v4;
}

uint64_t iAP2MsgAddI16Param(uint64_t a1, uint64_t a2, __int16 a3, unsigned int a4)
{
  else {
    uint64_t v4 = 0LL;
  }
  if (v4)
  {
    iAP2MsgInitParam(a1, (_BYTE *)v4, a3, 6, 6u, a2);
    *(_WORD *)(v4 + 4) = bswap32(a4) >> 16;
  }

  return v4;
}

_BYTE *iAP2MsgAddI8Param(uint64_t a1, uint64_t a2, __int16 a3, char a4)
{
  else {
    uint64_t v4 = 0LL;
  }
  if (v4)
  {
    iAP2MsgInitParam(a1, v4, a3, 7, 5u, a2);
    v4[4] = a4;
  }

  return v4;
}

_BYTE *iAP2MsgAddStringParam(uint64_t a1, uint64_t a2, __int16 a3, char *__s)
{
  int64_t v8 = *(unsigned int *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  unint64_t v9 = *(_BYTE **)(a1 + 32);
  unint64_t v11 = v10 + v8 - (void)v9;
  if (v11 < 5)
  {
    size_t v16 = 0LL;
  }

  else
  {
    size_t v12 = strlen(__s) + 1;
    if (v11 - 4 < v12)
    {
      int v13 = __s - 5;
      do
      {
        unint64_t v14 = v11;
        if (&v13[v11] <= __s) {
          break;
        }
        int v15 = v13[v11--];
      }

      while (v15 < -64);
      size_t v12 = v14 - 4;
    }

    if (v12 - 65532 >= 0xFFFFFFFFFFFF0000LL) {
      size_t v16 = v12;
    }
    else {
      size_t v16 = 0LL;
    }
  }

  else {
    char v17 = 0LL;
  }
  if (v17)
  {
    iAP2MsgInitParam(a1, v17, a3, 8, (unsigned __int16)(v16 + 4), a2);
    strlcpy(v17 + 4, __s, v16);
  }

  return v17;
}

_BYTE *iAP2MsgAddDataParam(uint64_t a1, uint64_t a2, __int16 a3, const void *a4, unsigned int a5)
{
  else {
    uint64_t v5 = 0LL;
  }
  if (v5)
  {
    iAP2MsgInitParam(a1, v5, a3, 9, (unsigned __int16)(a5 + 4), a2);
    memcpy(v5 + 4, a4, a5);
  }

  return v5;
}

_BYTE *iAP2MsgAddVoidParam(uint64_t a1, uint64_t a2, __int16 a3)
{
  else {
    unsigned int v3 = 0LL;
  }
  if (v3) {
    iAP2MsgInitParam(a1, v3, a3, 11, 4u, a2);
  }
  return v3;
}

_BYTE *iAP2MsgAddArrayU8Param(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, unsigned int a5)
{
  if (a5 > 0xFFFB) {
    return 0LL;
  }
  uint64_t v6 = a5;
  uint64_t v7 = *(void *)(a1 + 32);
  else {
    int64_t v8 = 0LL;
  }
  if (v8)
  {
    iAP2MsgInitParam(a1, v8, a3, 9, (unsigned __int16)(a5 + 4), a2);
    if (a5)
    {
      uint64_t v10 = 0LL;
      do
      {
        v8[v10 + 4] = *(_BYTE *)(a4 + v10);
        ++v10;
      }

      while (v6 != v10);
    }

    else
    {
      return (_BYTE *)v7;
    }
  }

  return v8;
}

unint64_t iAP2MsgGetDataAsU64(unsigned __int16 *a1, _DWORD *a2)
{
  *a2 = __rev16(*a1) != 12;
  return bswap64(*(void *)(a1 + 2));
}

uint64_t iAP2MsgGetDataAsU32(unsigned __int16 *a1, _DWORD *a2)
{
  uint64_t v2 = bswap32(*((_DWORD *)a1 + 1));
  *a2 = __rev16(*a1) != 8;
  return v2;
}

uint64_t iAP2MsgGetDataAsU16(unsigned __int16 *a1, _DWORD *a2)
{
  uint64_t v2 = bswap32(a1[2]) >> 16;
  *a2 = __rev16(*a1) != 6;
  return v2;
}

uint64_t iAP2MsgGetDataAsU8(unsigned __int16 *a1, _DWORD *a2)
{
  uint64_t v2 = *((unsigned __int8 *)a1 + 4);
  *a2 = __rev16(*a1) != 5;
  return v2;
}

BOOL iAP2MsgGetDataAsBool(unsigned __int16 *a1, BOOL *a2)
{
  unsigned int v2 = *((unsigned __int8 *)a1 + 4);
  BOOL v4 = __rev16(*a1) != 5 || v2 > 1;
  *a2 = v4;
  return v2 != 0;
}

uint64_t iAP2MsgGetDataAsI16(unsigned __int16 *a1, _DWORD *a2)
{
  int v2 = bswap32(a1[2]);
  *a2 = __rev16(*a1) != 6;
  return (v2 >> 16);
}

unsigned __int16 *iAP2MsgGetDataAsString(unsigned __int16 *a1, BOOL *a2)
{
  unsigned int v3 = *a1;
  unint64_t result = a1 + 2;
  unsigned int v4 = __rev16(v3);
  BOOL v5 = v4 < 5 || *((unsigned __int8 *)result + v4 - 5) != 0;
  *a2 = v5;
  return result;
}

uint64_t iAP2MsgGetDataAsData(uint64_t a1, _DWORD *a2)
{
  uint64_t result = a1 + 4;
  *a2 = 0;
  return result;
}

BOOL iAP2MsgIsDataVoid(unsigned __int16 *a1)
{
  return __rev16(*a1) < 5;
}

size_t iAP2MsgGetDataAsArrayU8(unsigned __int16 *a1, _DWORD *a2, void *__dst, int a4)
{
  size_t result = 0LL;
  unsigned int v6 = __rev16(*a1);
  BOOL v7 = v6 >= 4;
  unsigned int v8 = v6 - 4;
  if (v7) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = 0LL;
  }
  *a2 = 0;
  if ((int)v9 <= a4)
  {
    memcpy(__dst, a1 + 2, v9);
    return v9;
  }

  return result;
}

uint64_t iAP2MsgGetDataAsArrayI32(unsigned __int16 *a1, _DWORD *a2, _DWORD *a3, int a4)
{
  uint64_t result = 0LL;
  unsigned int v6 = __rev16(*a1);
  BOOL v7 = v6 >= 4;
  unsigned int v8 = v6 - 4;
  if (!v7) {
    unsigned int v8 = 0;
  }
  *a2 = (v8 & 3) != 0;
  if ((v8 & 3) == 0)
  {
    uint64_t result = v8 >> 2;
    if ((int)result <= a4)
    {
      if (v8 >= 4)
      {
        size_t v9 = (unsigned int *)(a1 + 2);
        else {
          int v10 = v8 >> 2;
        }
        do
        {
          unsigned int v11 = *v9++;
          *a3++ = bswap32(v11);
          --v10;
        }

        while (v10);
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t iAP2MsgCalcMessageLen(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  unint64_t v3 = *(void *)(a1 + 32);
  NextParamWithError = (unsigned __int16 *)(v2 + 6);
  uint64_t v5 = v3 - (v2 + 6);
  if (v3 > v2 + 6) {
    unsigned int v6 = (unsigned __int16 *)(v2 + 6);
  }
  else {
    unsigned int v6 = 0LL;
  }
  if (v3) {
    BOOL v7 = v3 > (unint64_t)NextParamWithError;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7 && v5 >= 4 && v5 >= (unint64_t)__rev16(*v6))
  {
    LODWORD(v_Block_object_dispose((const void *)(v1 - 144), 8) = 6;
    do
    {
      uint64_t v8 = v8 + (bswap32(*NextParamWithError) >> 16);
      NextParamWithError = iAP2MsgGetNextParamWithError(a1, 0LL, NextParamWithError, 0LL);
    }

    while (NextParamWithError);
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2) {
      goto LABEL_12;
    }
    return 0LL;
  }

  uint64_t v8 = 6LL;
  if (!v2) {
    return 0LL;
  }
LABEL_12:
  *(_BYTE *)(v2 + 2) = BYTE1(v8);
  *(_BYTE *)(*(void *)(a1 + 24) + 3LL) = v8;
  return v8;
}

uint64_t iAP2MsgInitWithSom(uint64_t a1, __int16 a2, __int16 a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  if (a1) {
    iAP2MsgInitMessage(a1, a2, a3, a4, a5, a6, a7);
  }
  return a1;
}

id platform_oobBtPairing_accessoryDictionaryForLogging(uint64_t a1)
{
  unsigned int v1 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  a1));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"ACCOOBBTPairingCertData"]);

  if (v2)
  {
    unint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"ACCOOBBTPairingCertData"]);
    id v4 = [v3 length];

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%lu bytes", v4));
    [v1 setObject:v5 forKey:@"ACCOOBBTPairingCertData"];
  }

  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"ACCOOBBTPairingCertSerial"]);

  if (v6)
  {
    BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"ACCOOBBTPairingCertSerial"]);
    id v8 = [v7 length];

    size_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%lu bytes", v8));
    [v1 setObject:v9 forKey:@"ACCOOBBTPairingCertSerial"];
  }

  return v1;
}

void platform_oobBtPairing_accessoryAttached(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 46)
  {
    id v4 = (os_log_s *)*(id *)(gLogObjects + 360);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v4 = (os_log_s *)&_os_log_default;
    id v5 = &_os_log_default;
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v6 = platform_oobBtPairing_accessoryDictionaryForLogging(a2);
    BOOL v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    int v9 = 138412546;
    uint64_t v10 = a1;
    __int16 v11 = 2112;
    size_t v12 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "oobBtPairing accessoryAttached: %@, accInfoDict=%@",  (uint8_t *)&v9,  0x16u);
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[ACCOOBBTPairingServer sharedServer](&OBJC_CLASS___ACCOOBBTPairingServer, "sharedServer"));
  [v8 accessoryOOBBTPairingAttached:a1 accInfoDict:a2];
}

void platform_oobBtPairing_accessoryDetached(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 46)
  {
    uint64_t v2 = (os_log_s *)*(id *)(gLogObjects + 360);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v2 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v5 = 138412290;
    uint64_t v6 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "oobBtPairing accessoryDetached: %@",  (uint8_t *)&v5,  0xCu);
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACCOOBBTPairingServer sharedServer](&OBJC_CLASS___ACCOOBBTPairingServer, "sharedServer"));
  [v4 accessoryOOBBTPairingDetached:a1];
}

void platform_oobBtPairing_accessoryInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (gLogObjects && gNumLogObjects >= 46)
  {
    id v8 = (os_log_s *)*(id *)(gLogObjects + 360);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v8 = (os_log_s *)&_os_log_default;
    id v9 = &_os_log_default;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    int v11 = 138412802;
    uint64_t v12 = a1;
    __int16 v13 = 2112;
    uint64_t v14 = a2;
    __int16 v15 = 1024;
    int v16 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "oobBtPairing accessoryInfo: %@, oobBtPairingUID %@, deviceClass=%xh",  (uint8_t *)&v11,  0x1Cu);
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[ACCOOBBTPairingServer sharedServer](&OBJC_CLASS___ACCOOBBTPairingServer, "sharedServer"));
  [v10 accessoryOOBBTPairingBTAccessoryInfo:a1 oobBtPairingUID:a2 accessoryMacAddr:a3 deviceClass:a4];
}

void platform_oobBtPairing_completionStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (gLogObjects && gNumLogObjects >= 46)
  {
    uint64_t v6 = (os_log_s *)*(id *)(gLogObjects + 360);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v6 = (os_log_s *)&_os_log_default;
    id v7 = &_os_log_default;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v9 = 138412802;
    uint64_t v10 = a1;
    __int16 v11 = 2112;
    uint64_t v12 = a2;
    __int16 v13 = 1024;
    int v14 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "oobBtPairing completionStatus: %@, oobBtPairingUID %@, result=%d",  (uint8_t *)&v9,  0x1Cu);
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[ACCOOBBTPairingServer sharedServer](&OBJC_CLASS___ACCOOBBTPairingServer, "sharedServer"));
  [v8 accessoryOOBBTPairingCompletionStatus:a1 oobBtPairingUID:a2 accessoryMacAddr:0 result:a3];
}

void platform_oobBtPairing_startOobBtPairingHandler(void *a1)
{
  id v1 = a1;
  if (gLogObjects && gNumLogObjects >= 46)
  {
    uint64_t v2 = (os_log_s *)*(id *)(gLogObjects + 360);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v2 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v4 = 138412290;
    id v5 = v1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "oobBtPairing startOOBBTPairing: %@",  (uint8_t *)&v4,  0xCu);
  }

  accFeatureHandlers_invokeHandler(v1, 40, 0LL);
}

void platform_oobBtPairing_linkKeyInfoHandler(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (gLogObjects && gNumLogObjects >= 46)
  {
    __int16 v11 = (os_log_s *)*(id *)(gLogObjects + 360);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v11 = (os_log_s *)&_os_log_default;
    id v12 = &_os_log_default;
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    int v14 = 138413058;
    id v15 = v7;
    __int16 v16 = 2112;
    id v17 = v8;
    __int16 v18 = 2048;
    id v19 = [v9 length];
    __int16 v20 = 2112;
    id v21 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "oobBtPairing linkKeyInfo: %@, oobBtPairingUID=%@, linkKey=(%lu bytes), deviceMacAddr=%@",  (uint8_t *)&v14,  0x2Au);
  }

  __int16 v13 = malloc(0x20uLL);
  *(_DWORD *)__int16 v13 = 1;
  v13[1] = v8;
  _DWORD v13[2] = v9;
  v13[3] = v10;
}

void platform_oobBtPairing_deleteParams(void *a1)
{
  if (a1)
  {
    if (*(_DWORD *)a1 == 1)
    {
      uint64_t v2 = (const void *)a1[2];
      if (v2) {
        CFRelease(v2);
      }
      id v3 = (const void *)a1[3];
      if (v3) {
        CFRelease(v3);
      }
    }

    int v4 = (const void *)a1[1];
    if (v4) {
      CFRelease(v4);
    }
    free(a1);
  }

void platform_oobBtPairing_stopOobBtPairingHandler(void *a1)
{
  id v1 = a1;
  if (gLogObjects && gNumLogObjects >= 46)
  {
    uint64_t v2 = (os_log_s *)*(id *)(gLogObjects + 360);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v2 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v4 = 138412290;
    id v5 = v1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "oobBtPairing stopOOBBTPairing: %@",  (uint8_t *)&v4,  0xCu);
  }

  accFeatureHandlers_invokeHandler(v1, 42, 0LL);
}

__CFDictionary *platform_oobBtPairing_createAccInfoMutableDict( const void *a1, const void *a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, const void *a8, const void *a9, char a10)
{
  CFMutableSetRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeDictionaryKeyCallBacks, 0LL);
  id v19 = Mutable;
  if (a2 && a1 && Mutable)
  {
    CFDictionaryAddValue(Mutable, @"ACCOOBBTPairingAccManufacturer", a2);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingAccModel", a1);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingAccName", a3);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingAccSerialNum", a4);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingAccFwVer", a5);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingAccHwVer", a6);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingCertData", a8);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingCertSerial", a9);
    if (a7) {
      CFDictionaryAddValue(v19, @"ACCOOBBTPairingDisplayName", a7);
    }
    char valuePtr = a10;
    CFNumberRef v20 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCharType, &valuePtr);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingCarPlaySupported", v20);
    CFRelease(v20);
  }

  return v19;
}

void platform_oobBtPairing_requestLegacyConnectionIDForAccessoryUID(void *a1)
{
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  _DWORD v10[2] = __platform_oobBtPairing_requestLegacyConnectionIDForAccessoryUID_block_invoke;
  v10[3] = &unk_1001F96F8;
  id v1 = a1;
  id v11 = v1;
  uint64_t v2 = objc_retainBlock(v10);
  EndpointWithUUID = acc_manager_getEndpointWithUUID(v1);
  if (EndpointWithUUID
    && (int v4 = EndpointWithUUID, acc_endpoint_getProtocol((uint64_t)EndpointWithUUID) == 4)
    && (uint64_t v5 = v4[7]) != 0)
  {
    dispatch_async(*(dispatch_queue_t *)(v5 + 24), v2);
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 46)
    {
      uint64_t v6 = (os_log_s *)*(id *)(gLogObjects + 360);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v6 = (os_log_s *)&_os_log_default;
      id v7 = &_os_log_default;
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v13 = v1;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "oobBtPairing requestLegacyConnectionIDForAccessoryUID: %@, couldn't find accessory endpoint",  buf,  0xCu);
    }

    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    id v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
    dispatch_async(v9, v2);
  }
}

void __platform_oobBtPairing_requestLegacyConnectionIDForAccessoryUID_block_invoke(uint64_t a1)
{
  id v2 = platform_externalAccesory_legacyConnectionUUIDForPrimaryEndpointUUID(*(void **)(a1 + 32));
  if (gLogObjects && gNumLogObjects >= 46)
  {
    id v3 = (os_log_s *)*(id *)(gLogObjects + 360);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v3 = (os_log_s *)&_os_log_default;
    id v4 = &_os_log_default;
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138412546;
    uint64_t v7 = v5;
    __int16 v8 = 1024;
    int v9 = (int)v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "oobBtPairing requestLegacyConnectionIDForAccessoryUID: %@, return connectionID %d",  (uint8_t *)&v6,  0x12u);
  }

  platform_oobBtPairing_legacyConnectionIDForAccessoryUID(*(void **)(a1 + 32), (uint64_t)v2);
}

void platform_oobBtPairing_legacyConnectionIDForAccessoryUID(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (gLogObjects && gNumLogObjects >= 46)
  {
    id v4 = (os_log_s *)*(id *)(gLogObjects + 360);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v4 = (os_log_s *)&_os_log_default;
    id v5 = &_os_log_default;
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v7 = 138412546;
    id v8 = v3;
    __int16 v9 = 1024;
    int v10 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "oobBtPairing legacyConnectionIDForAccessoryUID: %@ connectionID: %d",  (uint8_t *)&v7,  0x12u);
  }

  int v6 = (void *)objc_claimAutoreleasedReturnValue(+[ACCOOBBTPairingServer sharedServer](&OBJC_CLASS___ACCOOBBTPairingServer, "sharedServer"));
  [v6 legacyConnectionIDForAccessoryUID:v3 connectionID:a2];
}

void platform_oobBTPairing_incrementUserCount()
{
  BOOL v0 = (void *)objc_claimAutoreleasedReturnValue(+[ACCOOBBTPairingServer sharedServer](&OBJC_CLASS___ACCOOBBTPairingServer, "sharedServer"));
  [v0 incrementUserCount];

  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[ACCOOBBTPairingServer sharedServer](&OBJC_CLASS___ACCOOBBTPairingServer, "sharedServer"));
  unsigned int v2 = [v1 featureUserCount];

  if (v2 == 1)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[ACCFeaturePluginManager sharedManager](&OBJC_CLASS___ACCFeaturePluginManager, "sharedManager"));
    [v3 startPlugInsWithClasses:&off_100206B00];
  }

void platform_oobBTPairing_decrementUserCount()
{
  id v0 = (id)objc_claimAutoreleasedReturnValue(+[ACCOOBBTPairingServer sharedServer](&OBJC_CLASS___ACCOOBBTPairingServer, "sharedServer"));
  [v0 decrementUserCount];
}

void platform_system_launchApplication(void *a1, char a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 7;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v6 = (os_log_s *)&_os_log_default;
    id v5 = &_os_log_default;
  }

  else
  {
    int v6 = (os_log_s *)*(id *)(gLogObjects + 48);
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 138412290;
    id v15 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[#System] Launching app with bundle ID: %@...",  (uint8_t *)&v14,  0xCu);
  }

  id SystemPluginInstance = _getSystemPluginInstance();
  uint64_t v8 = objc_claimAutoreleasedReturnValue(SystemPluginInstance);
  __int16 v9 = (void *)v8;
  if (v8)
  {
    if ((objc_opt_respondsToSelector(v8, "launchApplication:options:") & 1) != 0)
    {
      [v9 launchApplication:a1 options:a2 & 1];
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 7)
      {
        int v10 = (os_log_s *)*(id *)(gLogObjects + 48);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        int v10 = (os_log_s *)&_os_log_default;
        id v11 = &_os_log_default;
      }

      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        id v12 = NSStringFromSelector("launchApplication:options:");
        id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
        int v14 = 138412290;
        id v15 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[#System] Platform plugin does not implement selector %@!",  (uint8_t *)&v14,  0xCu);
      }
    }
  }
}

id _getSystemPluginInstance()
{
  id v0 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformPluginManager sharedManager](&OBJC_CLASS___ACCPlatformPluginManager, "sharedManager"));
  id v1 = (void *)objc_claimAutoreleasedReturnValue( [v0 pluginInstanceWithProtocol:&OBJC_PROTOCOL___ACCPlatformSystemPluginProtocol fallbackToTransportPlugins:0]);

  if (!v1)
  {
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 7;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      BOOL v4 = (os_log_s *)&_os_log_default;
      id v3 = &_os_log_default;
    }

    else
    {
      BOOL v4 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      _getSystemPluginInstance_cold_1(v4);
    }
  }

  return v1;
}

uint64_t platform_system_isApplicationVisible(uint64_t a1)
{
  id SystemPluginInstance = _getSystemPluginInstance();
  uint64_t v3 = objc_claimAutoreleasedReturnValue(SystemPluginInstance);
  BOOL v4 = (void *)v3;
  if (v3)
  {
    if ((objc_opt_respondsToSelector(v3, "isAppVisibleInCurrentMode:") & 1) != 0)
    {
      uint64_t v5 = (uint64_t)[v4 isAppVisibleInCurrentMode:a1];
    }

    else
    {
      if (gLogObjects) {
        BOOL v6 = gNumLogObjects < 7;
      }
      else {
        BOOL v6 = 1;
      }
      if (v6)
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v8 = (os_log_s *)&_os_log_default;
        id v7 = &_os_log_default;
      }

      else
      {
        uint64_t v8 = (os_log_s *)*(id *)(gLogObjects + 48);
      }

      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v9 = NSStringFromSelector("isAppVisibleInCurrentMode:");
        int v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        int v12 = 138412290;
        id v13 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[#System] Platform plugin does not implement selector %@, assuming app is visible!",  (uint8_t *)&v12,  0xCu);
      }

      uint64_t v5 = 1LL;
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  return v5;
}

id platform_system_applicationSupportsExternalAccessoryBackgroundMode(uint64_t a1)
{
  id SystemPluginInstance = _getSystemPluginInstance();
  uint64_t v3 = objc_claimAutoreleasedReturnValue(SystemPluginInstance);
  BOOL v4 = (void *)v3;
  if (!v3)
  {
LABEL_15:
    id v5 = 0LL;
    goto LABEL_16;
  }

  if ((objc_opt_respondsToSelector(v3, "supportsExternalAccessoryBackgroundMode:") & 1) == 0)
  {
    if (gLogObjects) {
      BOOL v6 = gNumLogObjects < 7;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v8 = (os_log_s *)&_os_log_default;
      id v7 = &_os_log_default;
    }

    else
    {
      uint64_t v8 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v9 = NSStringFromSelector("supportsExternalAccessoryBackgroundMode:");
      int v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      int v12 = 138412290;
      id v13 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[#System] Platform plugin does not implement selector %@!",  (uint8_t *)&v12,  0xCu);
    }

    goto LABEL_15;
  }

  id v5 = [v4 supportsExternalAccessoryBackgroundMode:a1];
LABEL_16:

  return v5;
}

uint64_t platform_system_copyInstalledApplicationsForExternalAccessoryProtocol(uint64_t a1)
{
  id SystemPluginInstance = _getSystemPluginInstance();
  uint64_t v3 = objc_claimAutoreleasedReturnValue(SystemPluginInstance);
  BOOL v4 = (void *)v3;
  if (!v3)
  {
LABEL_15:
    uint64_t v5 = 0LL;
    goto LABEL_16;
  }

  if ((objc_opt_respondsToSelector(v3, "applicationsInstalledWithExternalAccessoryProtocol:") & 1) == 0)
  {
    if (gLogObjects) {
      BOOL v6 = gNumLogObjects < 7;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v8 = (os_log_s *)&_os_log_default;
      id v7 = &_os_log_default;
    }

    else
    {
      uint64_t v8 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v9 = NSStringFromSelector("applicationsInstalledWithExternalAccessoryProtocol:");
      int v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      int v12 = 138412290;
      id v13 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[#System] Platform plugin does not implement selector %@",  (uint8_t *)&v12,  0xCu);
    }

    goto LABEL_15;
  }

  uint64_t v5 = objc_claimAutoreleasedReturnValue([v4 applicationsInstalledWithExternalAccessoryProtocol:a1]);
LABEL_16:

  return v5;
}

id platform_system_launchURL(uint64_t a1)
{
  id SystemPluginInstance = _getSystemPluginInstance();
  uint64_t v3 = objc_claimAutoreleasedReturnValue(SystemPluginInstance);
  BOOL v4 = (void *)v3;
  if (!v3)
  {
LABEL_15:
    id v5 = 0LL;
    goto LABEL_16;
  }

  if ((objc_opt_respondsToSelector(v3, "isAppVisibleInCurrentMode:") & 1) == 0)
  {
    if (gLogObjects) {
      BOOL v6 = gNumLogObjects < 7;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v8 = (os_log_s *)&_os_log_default;
      id v7 = &_os_log_default;
    }

    else
    {
      uint64_t v8 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v9 = NSStringFromSelector("launchURL:");
      int v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      int v12 = 138412290;
      id v13 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[#System] Platform plugin does not implement selector %@",  (uint8_t *)&v12,  0xCu);
    }

    goto LABEL_15;
  }

  id v5 = [v4 launchURL:a1];
LABEL_16:

  return v5;
}

id platform_system_isAppInstalledWithBundleID(uint64_t a1)
{
  id SystemPluginInstance = _getSystemPluginInstance();
  uint64_t v3 = objc_claimAutoreleasedReturnValue(SystemPluginInstance);
  BOOL v4 = (void *)v3;
  if (!v3)
  {
LABEL_15:
    id v5 = 0LL;
    goto LABEL_16;
  }

  if ((objc_opt_respondsToSelector(v3, "isAppInstalledWithBundleID:") & 1) == 0)
  {
    if (gLogObjects) {
      BOOL v6 = gNumLogObjects < 7;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v8 = (os_log_s *)&_os_log_default;
      id v7 = &_os_log_default;
    }

    else
    {
      uint64_t v8 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v9 = NSStringFromSelector("isAppInstalledWithBundleID:");
      int v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      int v12 = 138412290;
      id v13 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[#System] Platform plugin does not implement selector %@!",  (uint8_t *)&v12,  0xCu);
    }

    goto LABEL_15;
  }

  id v5 = [v4 isAppInstalledWithBundleID:a1];
LABEL_16:

  return v5;
}

uint64_t platform_system_copyAppNameForBundleID(uint64_t a1)
{
  id SystemPluginInstance = _getSystemPluginInstance();
  uint64_t v3 = objc_claimAutoreleasedReturnValue(SystemPluginInstance);
  BOOL v4 = (void *)v3;
  if (!v3)
  {
LABEL_15:
    uint64_t v5 = 0LL;
    goto LABEL_16;
  }

  if ((objc_opt_respondsToSelector(v3, "appNameForBundleID:") & 1) == 0)
  {
    if (gLogObjects) {
      BOOL v6 = gNumLogObjects < 7;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v8 = (os_log_s *)&_os_log_default;
      id v7 = &_os_log_default;
    }

    else
    {
      uint64_t v8 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v9 = NSStringFromSelector("appNameForBundleID:");
      int v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      int v12 = 138412290;
      id v13 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[#System] Platform plugin does not implement selector %@!",  (uint8_t *)&v12,  0xCu);
    }

    goto LABEL_15;
  }

  uint64_t v5 = objc_claimAutoreleasedReturnValue([v4 appNameForBundleID:a1]);
LABEL_16:

  return v5;
}

void platform_system_launchApplicationToBackground(void *a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 7;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  else
  {
    BOOL v4 = (os_log_s *)*(id *)(gLogObjects + 48);
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 138412290;
    id v13 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[#System] Launching app with bundle ID to background: %@...",  (uint8_t *)&v12,  0xCu);
  }

  id SystemPluginInstance = _getSystemPluginInstance();
  uint64_t v6 = objc_claimAutoreleasedReturnValue(SystemPluginInstance);
  id v7 = (void *)v6;
  if (v6)
  {
    if ((objc_opt_respondsToSelector(v6, "launchBundleIDToBackground:") & 1) != 0)
    {
      [v7 launchBundleIDToBackground:a1];
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 7)
      {
        uint64_t v8 = (os_log_s *)*(id *)(gLogObjects + 48);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v8 = (os_log_s *)&_os_log_default;
        id v9 = &_os_log_default;
      }

      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = NSStringFromSelector("launchBundleIDToBackground:");
        id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
        int v12 = 138412290;
        id v13 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[#System] Platform plugin does not implement selector %@!",  (uint8_t *)&v12,  0xCu);
      }
    }
  }
}

id platform_system_isApplicationInForeground(void *a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 7;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  else
  {
    BOOL v4 = (os_log_s *)*(id *)(gLogObjects + 48);
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 138412290;
    id v15 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[#System] isApplicationInForeground? : %@...",  (uint8_t *)&v14,  0xCu);
  }

  id SystemPluginInstance = _getSystemPluginInstance();
  uint64_t v6 = objc_claimAutoreleasedReturnValue(SystemPluginInstance);
  id v7 = (void *)v6;
  if (!v6) {
    goto LABEL_23;
  }
  if ((objc_opt_respondsToSelector(v6, "isApplicationInForeground:") & 1) == 0)
  {
    if (gLogObjects && gNumLogObjects >= 7)
    {
      id v9 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v9 = (os_log_s *)&_os_log_default;
      id v10 = &_os_log_default;
    }

    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = NSStringFromSelector("isApplicationInForeground:");
      int v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      int v14 = 138412290;
      id v15 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[#System] Platform plugin does not implement selector %@!",  (uint8_t *)&v14,  0xCu);
    }

LABEL_23:
    id v8 = 0LL;
    goto LABEL_24;
  }

  id v8 = [v7 isApplicationInForeground:a1];
LABEL_24:

  return v8;
}

void platform_system_toggleProcessAssertionForBundleID(uint64_t a1, uint64_t a2)
{
  id SystemPluginInstance = _getSystemPluginInstance();
  uint64_t v5 = objc_claimAutoreleasedReturnValue(SystemPluginInstance);
  uint64_t v6 = (void *)v5;
  if (v5)
  {
    if ((objc_opt_respondsToSelector(v5, "toggleProcessAssertionForBundleID:applicationPid:") & 1) != 0)
    {
      [v6 toggleProcessAssertionForBundleID:a1 applicationPid:a2];
    }

    else
    {
      if (gLogObjects) {
        BOOL v7 = gNumLogObjects < 7;
      }
      else {
        BOOL v7 = 1;
      }
      if (v7)
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v9 = (os_log_s *)&_os_log_default;
        id v8 = &_os_log_default;
      }

      else
      {
        id v9 = (os_log_s *)*(id *)(gLogObjects + 48);
      }

      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = NSStringFromSelector("toggleProcessAssertionForBundleID:applicationPid:");
        id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
        int v12 = 138412290;
        id v13 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[#System] Platform plugin does not implement selector %@!",  (uint8_t *)&v12,  0xCu);
      }
    }
  }
}

uint64_t platform_system_isDeviceLocked()
{
  id SystemPluginInstance = _getSystemPluginInstance();
  uint64_t v1 = objc_claimAutoreleasedReturnValue(SystemPluginInstance);
  BOOL v2 = (void *)v1;
  if (!v1)
  {
LABEL_15:
    uint64_t v3 = 1LL;
    goto LABEL_16;
  }

  if ((objc_opt_respondsToSelector(v1, "isDeviceLocked") & 1) == 0)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 7;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v6 = (os_log_s *)&_os_log_default;
      id v5 = &_os_log_default;
    }

    else
    {
      uint64_t v6 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v7 = NSStringFromSelector("isDeviceLocked");
      id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      int v10 = 138412290;
      id v11 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[#System] Platform plugin does not implement selector %@!",  (uint8_t *)&v10,  0xCu);
    }

    goto LABEL_15;
  }

  uint64_t v3 = (uint64_t)[v2 isDeviceLocked];
LABEL_16:

  return v3;
}

uint64_t platform_system_unlockedSinceBoot()
{
  id SystemPluginInstance = _getSystemPluginInstance();
  uint64_t v1 = objc_claimAutoreleasedReturnValue(SystemPluginInstance);
  BOOL v2 = (void *)v1;
  if (!v1)
  {
LABEL_15:
    uint64_t v3 = 1LL;
    goto LABEL_16;
  }

  if ((objc_opt_respondsToSelector(v1, "unlockedSinceBoot") & 1) == 0)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 7;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v6 = (os_log_s *)&_os_log_default;
      id v5 = &_os_log_default;
    }

    else
    {
      uint64_t v6 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v7 = NSStringFromSelector("unlockedSinceBoot");
      id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      int v10 = 138412290;
      id v11 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[#System] Platform plugin does not implement selector %@!",  (uint8_t *)&v10,  0xCu);
    }

    goto LABEL_15;
  }

  uint64_t v3 = (uint64_t)[v2 unlockedSinceBoot];
LABEL_16:

  return v3;
}

id platform_system_isLockScreenUIDisplayed()
{
  id SystemPluginInstance = _getSystemPluginInstance();
  uint64_t v1 = objc_claimAutoreleasedReturnValue(SystemPluginInstance);
  BOOL v2 = (void *)v1;
  if (!v1)
  {
LABEL_15:
    id v3 = 0LL;
    goto LABEL_16;
  }

  if ((objc_opt_respondsToSelector(v1, "isLockScreenUIDisplayed") & 1) == 0)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 7;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v6 = (os_log_s *)&_os_log_default;
      id v5 = &_os_log_default;
    }

    else
    {
      uint64_t v6 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v7 = NSStringFromSelector("isLockScreenUIDisplayed");
      id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      int v10 = 138412290;
      id v11 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[#System] Platform plugin does not implement selector %@!",  (uint8_t *)&v10,  0xCu);
    }

    goto LABEL_15;
  }

  id v3 = [v2 isLockScreenUIDisplayed];
LABEL_16:

  return v3;
}

void platform_system_startObservingApplicationState()
{
  id SystemPluginInstance = _getSystemPluginInstance();
  uint64_t v1 = objc_claimAutoreleasedReturnValue(SystemPluginInstance);
  BOOL v2 = (void *)v1;
  if (v1)
  {
    if ((objc_opt_respondsToSelector(v1, "startObservingApplicationState") & 1) != 0)
    {
      [v2 startObservingApplicationState];
    }

    else
    {
      if (gLogObjects) {
        BOOL v3 = gNumLogObjects < 7;
      }
      else {
        BOOL v3 = 1;
      }
      if (v3)
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v5 = (os_log_s *)&_os_log_default;
        id v4 = &_os_log_default;
      }

      else
      {
        id v5 = (os_log_s *)*(id *)(gLogObjects + 48);
      }

      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = NSStringFromSelector("startObservingApplicationState");
        BOOL v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
        int v8 = 138412290;
        id v9 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[#System] Platform plugin does not implement selector %@!",  (uint8_t *)&v8,  0xCu);
      }
    }
  }
}

void platform_system_startObservingFirstUnlockNotification()
{
  id SystemPluginInstance = _getSystemPluginInstance();
  uint64_t v1 = objc_claimAutoreleasedReturnValue(SystemPluginInstance);
  BOOL v2 = (void *)v1;
  if (v1)
  {
    if ((objc_opt_respondsToSelector(v1, "startObservingFirstUnlockNotification") & 1) != 0)
    {
      [v2 startObservingFirstUnlockNotification];
    }

    else
    {
      if (gLogObjects) {
        BOOL v3 = gNumLogObjects < 7;
      }
      else {
        BOOL v3 = 1;
      }
      if (v3)
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v5 = (os_log_s *)&_os_log_default;
        id v4 = &_os_log_default;
      }

      else
      {
        id v5 = (os_log_s *)*(id *)(gLogObjects + 48);
      }

      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = NSStringFromSelector("startObservingFirstUnlockNotification");
        BOOL v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
        int v8 = 138412290;
        id v9 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[#System] Platform plugin does not implement selector %@!",  (uint8_t *)&v8,  0xCu);
      }
    }
  }
}

CFStringRef platform_system_copyMediaLibraryUIDString(int a1, uint64_t a2)
{
  if (a1)
  {
    id SystemPluginInstance = _getSystemPluginInstance();
    uint64_t v4 = objc_claimAutoreleasedReturnValue(SystemPluginInstance);
    id v5 = (void *)v4;
    if (v4)
    {
      if ((objc_opt_respondsToSelector(v4, "mediaLibraryUIDString:") & 1) != 0)
      {
        uint64_t v6 = (const __CFString *)objc_claimAutoreleasedReturnValue([v5 mediaLibraryUIDString:a2]);
LABEL_16:

        return v6;
      }

      if (gLogObjects && gNumLogObjects >= 7)
      {
        BOOL v7 = (os_log_s *)*(id *)(gLogObjects + 48);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        BOOL v7 = (os_log_s *)&_os_log_default;
        id v8 = &_os_log_default;
      }

      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        id v9 = NSStringFromSelector("mediaLibraryUIDString:");
        int v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        int v12 = 138412290;
        id v13 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[#System] Platform plugin does not implement selector %@!",  (uint8_t *)&v12,  0xCu);
      }
    }

    uint64_t v6 = &stru_100200A40;
    goto LABEL_16;
  }

  return &stru_100200A40;
}

id platform_system_createFolder(uint64_t a1, uint64_t a2)
{
  id SystemPluginInstance = _getSystemPluginInstance();
  uint64_t v5 = objc_claimAutoreleasedReturnValue(SystemPluginInstance);
  uint64_t v6 = (void *)v5;
  if (!v5)
  {
LABEL_15:
    id v7 = 0LL;
    goto LABEL_16;
  }

  if ((objc_opt_respondsToSelector(v5, "createFolder:mode:") & 1) == 0)
  {
    if (gLogObjects) {
      BOOL v8 = gNumLogObjects < 7;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v10 = (os_log_s *)&_os_log_default;
      id v9 = &_os_log_default;
    }

    else
    {
      int v10 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = NSStringFromSelector("createFolder:mode:");
      int v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      int v14 = 138412290;
      id v15 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[#System] Platform plugin does not implement selector %@!",  (uint8_t *)&v14,  0xCu);
    }

    goto LABEL_15;
  }

  id v7 = [v6 createFolder:a1 mode:a2];
LABEL_16:

  return v7;
}

BOOL loggingProtocol_requestLogsFromAccessory(uint64_t a1, uint64_t a2)
{
  int v2 = a1;
  if (a1 < 2)
  {
    if (a2)
    {
      loggingProtocol_requestAccessoryLogs(a1, a2);
      return 1LL;
    }

    if (gLogObjects && gNumLogObjects >= 53)
    {
      BOOL v8 = *(os_log_s **)(gLogObjects + 416);
    }

    else
    {
      BOOL v8 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
    if (result)
    {
      LOWORD(v9[0]) = 0;
      uint64_t v5 = "Session state invalid.";
      uint64_t v6 = v8;
      uint32_t v7 = 2;
      goto LABEL_18;
    }
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 53)
    {
      BOOL v3 = *(os_log_s **)(gLogObjects + 416);
    }

    else
    {
      BOOL v3 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
    if (result)
    {
      v9[0] = 67109120;
      v9[1] = v2;
      uint64_t v5 = "Invalid LoggingProtocoLogFilePriority. [priority: %d]. Not requesting logs from accessory.";
      uint64_t v6 = v3;
      uint32_t v7 = 8;
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, v5, (uint8_t *)v9, v7);
      return 0LL;
    }
  }

  return result;
}

BOOL loggingProtocol_stopLogsFromAccessory(unsigned int a1, uint64_t a2)
{
  if (a2)
  {
    loggingProtocol_stopAccessoryLogTransfer(a1, a2);
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 53)
    {
      BOOL v3 = *(os_log_s **)(gLogObjects + 416);
    }

    else
    {
      BOOL v3 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Session state invalid.", v5, 2u);
    }
  }

  return a2 != 0;
}

uint64_t loggingProtocol_parseIncomingByteStream(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t result = 0LL;
  if (a1 && a3)
  {
    uint64_t v6 = *(unsigned __int16 **)(a3 + 16);
    if (v6)
    {
      if (a2)
      {
        unsigned int v8 = 0;
        unsigned int v9 = 0;
        int v10 = *(unsigned __int16 *)(a3 + 24);
        do
        {
          int v11 = *(unsigned __int16 *)(a3 + 4);
          unsigned int v12 = v8 + v11;
          if (v8 + v11 <= a2)
          {
            memcpy((char *)v6 + (unsigned __int16)v10, (const void *)(a1 + v8), *(unsigned __int16 *)(a3 + 4));
            v10 += v11;
            unsigned int v14 = (*(_DWORD *)a3 + 1) % 3u;
            *(_DWORD *)a3 = v14;
            if (v14 == 2)
            {
              unsigned int v15 = (bswap32(*(unsigned __int16 *)((char *)v6 + (unsigned __int16)v10 - 2)) >> 16) - 4;
              *(_WORD *)(a3 + 4) = v15;
              if (!(_WORD)v15)
              {
                *(_DWORD *)a3 = 0;
                *(_WORD *)(a3 + 4) = 2;
LABEL_12:
                loggingProtocol_handleMessage(v6, (unsigned __int16)v10, a3);
                int v10 = 0;
              }
            }

            else
            {
              *(_WORD *)(a3 + 4) = 2;
              if (!v14) {
                goto LABEL_12;
              }
            }
          }

          else
          {
            unsigned int v13 = a2 - v9;
            *(_WORD *)(a3 + 4) = v11 - (a2 - v9);
            memcpy((char *)v6 + (unsigned __int16)v10, (const void *)(a1 + v8), (unsigned __int16)(a2 - v9));
            v10 += v13;
            unsigned int v12 = v8 + (unsigned __int16)v13;
          }

          *(_WORD *)(a3 + 24) = v10;
          unsigned int v8 = (unsigned __int16)v12;
          unsigned int v9 = v12;
        }

        while ((unsigned __int16)v12 < a2);
      }

      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t loggingProtocol_sendMessage(int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v8 = 0LL;
  unsigned __int16 v7 = 0;
  uint64_t result = loggingProtocol_buildMessageDataFromStruct(a1, a2, &v8, &v7);
  if ((_DWORD)result)
  {
    uint64_t v5 = v8;
    BOOL v6 = loggingProtocol_sendMessageData(v8, v7, a3);
    free(v5);
    return v6;
  }

  return result;
}

uint64_t loggingProtocol_buildMessageDataFromStruct(int a1, uint64_t a2, void *a3, unsigned __int16 *a4)
{
  __int16 v7 = a1;
  switch(a1)
  {
    case 0:
      if (!a2) {
        goto LABEL_48;
      }
      size_t v15 = *(unsigned __int8 *)(a2 + 20);
      size_t v16 = *(unsigned __int8 *)(a2 + 32);
      int v17 = v15 + v16 + 15;
      __int16 v18 = *(const char **)(a2 + 48);
      if (v18) {
        v17 += strnlen(*(const char **)(a2 + 48), 0x200uLL);
      }
      unsigned __int16 v8 = v17 + 4;
      uint64_t result = (uint64_t)malloc((unsigned __int16)(v17 + 4));
      if (result)
      {
        int v10 = (_BYTE *)result;
        *(_DWORD *)(result + 4) = bswap32(*(_DWORD *)a2);
        *(void *)(result + _Block_object_dispose((const void *)(v1 - 144), 8) = bswap64(*(void *)(a2 + 8));
        *(_BYTE *)(result + 16) = *(_DWORD *)(a2 + 16);
        *(_BYTE *)(result + 17) = v15;
        memcpy((void *)(result + 18), *(const void **)(a2 + 24), v15);
        id v19 = &v10[v15];
        size_t v20 = v15 + 19;
        v19[18] = v16;
        memcpy(&v10[v20], *(const void **)(a2 + 40), v16);
        if (v18) {
          strlcpy(&v10[(v20 + v16)], v18, v8 - (unint64_t)(v20 + v16));
        }
        goto LABEL_14;
      }

      break;
    case 1:
      if (!a2) {
        goto LABEL_48;
      }
      uint64_t v21 = *(unsigned __int8 *)(a2 + 24);
      unsigned __int16 v22 = 8 * v21 + 22;
      uint64_t result = (uint64_t)malloc(8LL * *(unsigned __int8 *)(a2 + 24) + 22);
      if (result)
      {
        int v10 = (_BYTE *)result;
        *(_DWORD *)(result + 4) = bswap32(*(_DWORD *)a2);
        *(void *)(result + _Block_object_dispose((const void *)(v1 - 144), 8) = bswap64(*(void *)(a2 + 8));
        int v23 = *(_DWORD *)(a2 + 20);
        *(_BYTE *)(result + 16) = *(_DWORD *)(a2 + 16);
        *(_BYTE *)(result + 17) = HIBYTE(v23);
        *(_BYTE *)(result + 1_Block_object_dispose((const void *)(v1 - 144), 8) = BYTE2(v23);
        *(_BYTE *)(result + 19) = BYTE1(v23);
        *(_BYTE *)(result + 20) = v23;
        *(_BYTE *)(result + 21) = v21;
        if ((_DWORD)v21)
        {
          CFIndex v24 = *(unint64_t **)(a2 + 32);
          unsigned __int16 v25 = 22;
          do
          {
            unint64_t v26 = *v24++;
            *(void *)(result + v25) = bswap64(v26);
            v25 += 8;
            --v21;
          }

          while (v21);
        }

        unsigned __int16 v8 = v22;
        goto LABEL_14;
      }

      break;
    case 2:
      if (!a2) {
        goto LABEL_48;
      }
      size_t v27 = *(unsigned __int8 *)(a2 + 64);
      size_t v28 = *(unsigned __int8 *)(a2 + 48);
      size_t v29 = *(unsigned __int8 *)(a2 + 32);
      unsigned __int16 v30 = v27 + v28 + v29 + 32;
      uint64_t result = (uint64_t)malloc((v27 + v28 + v29 + 32));
      if (result)
      {
        int v10 = (_BYTE *)result;
        *(_BYTE *)(result + 4) = *(_BYTE *)a2;
        *(void *)(result + 5) = bswap64(*(void *)(a2 + 8));
        *(_OWORD *)(result + 13) = *(_OWORD *)(a2 + 16);
        *(_BYTE *)(result + 29) = v29;
        memcpy((void *)(result + 30), *(const void **)(a2 + 40), v29);
        uint64_t v31 = &v10[v29];
        size_t v32 = v29 + 31;
        v31[30] = v28;
        memcpy(&v10[v32], *(const void **)(a2 + 56), v28);
        v10[(v32 + v28)] = v27;
        memcpy(&v10[(v32 + v28 + 1)], *(const void **)(a2 + 72), v27);
        unsigned __int16 v8 = v30;
        goto LABEL_14;
      }

      break;
    case 3:
      if (!a2) {
        goto LABEL_48;
      }
      uint64_t result = (uint64_t)malloc(5uLL);
      if (result)
      {
        int v10 = (_BYTE *)result;
        *(_BYTE *)(result + 4) = *(_BYTE *)a2;
        unsigned __int16 v8 = 5;
        goto LABEL_14;
      }

      break;
    case 4:
    case 5:
    case 8:
      unsigned __int16 v8 = 4;
      uint64_t result = (uint64_t)malloc(4uLL);
      if (result)
      {
        int v10 = (_BYTE *)result;
        goto LABEL_14;
      }

      break;
    case 6:
    case 7:
      if (!a2) {
        goto LABEL_48;
      }
      uint64_t result = (uint64_t)malloc(0xCuLL);
      if (result)
      {
        int v10 = (_BYTE *)result;
        unsigned int v11 = bswap32(*(_DWORD *)(a2 + 4));
        *(_DWORD *)(result + 4) = bswap32(*(_DWORD *)a2);
        *(_DWORD *)(result + _Block_object_dispose((const void *)(v1 - 144), 8) = v11;
        goto LABEL_13;
      }

      break;
    case 9:
    case 11:
      if (!a2) {
        goto LABEL_48;
      }
      uint64_t result = (uint64_t)malloc(0x24uLL);
      if (result)
      {
        int v10 = (_BYTE *)result;
        unsigned int v12 = bswap32(*(_DWORD *)(a2 + 4));
        *(_DWORD *)(result + 4) = bswap32(*(_DWORD *)a2);
        *(_DWORD *)(result + _Block_object_dispose((const void *)(v1 - 144), 8) = v12;
        unint64_t v13 = *(void *)(a2 + 16);
        *(void *)(result + 12) = bswap64(*(void *)(a2 + 8));
        *(void *)(result + 20) = bswap64(v13);
        *(_BYTE *)(result + 2_Block_object_dispose((const void *)(v1 - 144), 8) = *(_DWORD *)(a2 + 24);
        unsigned __int16 v8 = 36;
        goto LABEL_14;
      }

      break;
    case 10:
      if (!a2) {
        goto LABEL_48;
      }
      uint64_t result = (uint64_t)malloc(0x1CuLL);
      if (result)
      {
        int v10 = (_BYTE *)result;
        *(_BYTE *)(result + 4) = *(_DWORD *)a2;
        unint64_t v33 = *(void *)(a2 + 16);
        *(void *)(result + 5) = bswap64(*(void *)(a2 + 8));
        *(void *)(result + 13) = bswap64(v33);
        unsigned __int16 v8 = 28;
        goto LABEL_14;
      }

      break;
    case 12:
    case 14:
      if (!a2) {
        goto LABEL_48;
      }
      uint64_t result = (uint64_t)malloc(0xCuLL);
      if (result)
      {
        int v10 = (_BYTE *)result;
        int v14 = *(_DWORD *)(a2 + 4);
        *(_DWORD *)(result + 4) = bswap32(*(_DWORD *)a2);
        *(_BYTE *)(result + _Block_object_dispose((const void *)(v1 - 144), 8) = v14;
LABEL_13:
        unsigned __int16 v8 = 12;
        goto LABEL_14;
      }

      break;
    case 13:
      if (!a2) {
        goto LABEL_48;
      }
      size_t v34 = *(unsigned __int16 *)(a2 + 24);
      unsigned __int16 v8 = v34 + 31;
      uint64_t result = (uint64_t)malloc((unsigned __int16)(v34 + 31));
      if (result)
      {
        int v10 = (_BYTE *)result;
        unsigned int v35 = bswap32(*(_DWORD *)(a2 + 4));
        *(_DWORD *)(result + 4) = bswap32(*(_DWORD *)a2);
        *(_DWORD *)(result + _Block_object_dispose((const void *)(v1 - 144), 8) = v35;
        uint64_t v36 = *(void *)(a2 + 16);
        *(void *)(result + 12) = bswap64(*(void *)(a2 + 8));
        *(_BYTE *)(result + 20) = HIBYTE(v36);
        *(_BYTE *)(result + 21) = BYTE6(v36);
        *(_BYTE *)(result + 22) = BYTE5(v36);
        *(_BYTE *)(result + 23) = BYTE4(v36);
        *(_BYTE *)(result + 24) = BYTE3(v36);
        *(_BYTE *)(result + 25) = BYTE2(v36);
        *(_BYTE *)(result + 26) = BYTE1(v36);
        *(_BYTE *)(result + 27) = v36;
        *(_BYTE *)(result + 2_Block_object_dispose((const void *)(v1 - 144), 8) = BYTE1(v34);
        *(_BYTE *)(result + 29) = v34;
        memcpy((void *)(result + 30), *(const void **)(a2 + 32), v34);
        v10[(unsigned __int16)(v34 + 30)] = *(_DWORD *)(a2 + 40);
        goto LABEL_14;
      }

      break;
    case 15:
      if (!a2) {
        goto LABEL_48;
      }
      uint64_t result = (uint64_t)malloc(0x10uLL);
      if (result)
      {
        int v10 = (_BYTE *)result;
        unsigned int v37 = bswap32(*(_DWORD *)(a2 + 4));
        *(_DWORD *)(result + 4) = bswap32(*(_DWORD *)a2);
        *(_DWORD *)(result + _Block_object_dispose((const void *)(v1 - 144), 8) = v37;
        *(_DWORD *)(result + 12) = bswap32(*(_DWORD *)(a2 + 8));
        unsigned __int16 v8 = 16;
        goto LABEL_14;
      }

      break;
    case 16:
      if (a2)
      {
        size_t v38 = *(unsigned int *)(a2 + 8);
        unsigned __int16 v8 = v38 + 16;
        uint64_t result = (uint64_t)malloc((unsigned __int16)(v38 + 16));
        if (result)
        {
          int v10 = (_BYTE *)result;
          int v39 = *(_DWORD *)(a2 + 4);
          *(_DWORD *)(result + 4) = bswap32(*(_DWORD *)a2);
          *(_BYTE *)(result + _Block_object_dispose((const void *)(v1 - 144), 8) = HIBYTE(v39);
          *(_BYTE *)(result + 9) = BYTE2(v39);
          *(_BYTE *)(result + 10) = BYTE1(v39);
          *(_BYTE *)(result + 11) = v39;
          *(_BYTE *)(result + 12) = BYTE3(v38);
          *(_BYTE *)(result + 13) = BYTE2(v38);
          *(_BYTE *)(result + 14) = BYTE1(v38);
          *(_BYTE *)(result + 15) = v38;
          memcpy((void *)(result + 16), *(const void **)(a2 + 16), v38);
LABEL_14:
          *int v10 = HIBYTE(v7);
          v10[1] = v7;
          _DWORD v10[2] = HIBYTE(v8);
          v10[3] = v8;
          *a3 = v10;
          uint64_t result = 1LL;
          *a4 = v8;
        }
      }

      else
      {
LABEL_48:
        uint64_t result = 0LL;
      }

      break;
    default:
      uint64_t result = 0LL;
      break;
  }

  return result;
}

LABEL_4:
  unsigned int v9 = 1;
LABEL_7:

  return v9;
}

LABEL_23:
          unsigned __int16 v25 = (void *)objc_claimAutoreleasedReturnValue([v20 lastPathComponent]);
          unint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 stringByDeletingPathExtension]);
          size_t v27 = [v9 containsObject:v26];

          if ((v27 & 1) == 0) {
            goto LABEL_32;
          }
          goto LABEL_30;
        }

  unint64_t v13 = a2[13];
  if (v13)
  {
    int v14 = CFSetGetCount(v13);
    size_t v15 = (const void **)calloc(v14, 8uLL);
    CFSetGetValues(a2[13], v15);
    if (v14 >= 1)
    {
      size_t v16 = 0LL;
      int v17 = 1;
      do
      {
        if (!CFSetContainsValue(a2[23], v15[v16]))
        {
          int v2 = 1LL;
          iap2_identification_rejectMsgID(a1, LOWORD(v15[v16]), 1, 1u);
        }

        size_t v16 = v17;
        unsigned int v11 = v14 <= v17++;
      }

      while (!v11);
      goto LABEL_35;
    }

    if (v15) {
LABEL_35:
    }
      free(v15);
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 26)
    {
      __int16 v18 = *(os_log_s **)(gLogObjects + 200);
    }

    else
    {
      __int16 v18 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      iap2_identification_checkMsgIDList_cold_1();
    }
  }

  return v2;
}

  __break(0x5519u);
  return result;
}

  __break(0x5519u);
LABEL_24:
  __break(1u);
  return result;
}

void sub_10010FC8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, id a18)
{
}

void sub_100110194( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location)
{
}

BOOL platform_transactions_connectionTypeRequiresTransaction(int a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 14;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v4 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  else
  {
    uint64_t v4 = (os_log_s *)*(id *)(gLogObjects + 104);
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v6[0] = 67109376;
    v6[1] = a1;
    __int16 v7 = 1024;
    BOOL v8 = a1 != 7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[#Transactions] connectionType: connectionType: %{coreacc:ACCConnection_Type_t}d requires os transaction %d",  (uint8_t *)v6,  0xEu);
  }

  return a1 != 7;
}

void platform_transactions_accessoryConnected(void *a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 7;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v4 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  else
  {
    uint64_t v4 = (os_log_s *)*(id *)(gLogObjects + 48);
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 138412290;
    id v12 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[#Transactions] Creating transaction for connection %@...",  (uint8_t *)&v11,  0xCu);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[ACCPlatformTransactionManager sharedManager]( &OBJC_CLASS___ACCPlatformTransactionManager,  "sharedManager"));
  [v5 addTransactionForConnectionUUID:a1];

  if (gLogObjects && gNumLogObjects >= 7)
  {
    BOOL v6 = (os_log_s *)*(id *)(gLogObjects + 48);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v6 = (os_log_s *)&_os_log_default;
    id v7 = &_os_log_default;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    BOOL v8 = (void *)objc_claimAutoreleasedReturnValue( +[ACCPlatformTransactionManager sharedManager]( &OBJC_CLASS___ACCPlatformTransactionManager,  "sharedManager"));
    unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([v8 transactions]);
    id v10 = [v9 count];
    int v11 = 134217984;
    id v12 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "[#Transactions] There are now %lu transaction(s).",  (uint8_t *)&v11,  0xCu);
  }
}

void platform_transactions_accessoryDisconnected(void *a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 7;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v4 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  else
  {
    uint64_t v4 = (os_log_s *)*(id *)(gLogObjects + 48);
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 138412290;
    id v12 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[#Transactions] Removing transaction for connection %@...",  (uint8_t *)&v11,  0xCu);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[ACCPlatformTransactionManager sharedManager]( &OBJC_CLASS___ACCPlatformTransactionManager,  "sharedManager"));
  [v5 removeTransactionForConnectionUUID:a1];

  if (gLogObjects && gNumLogObjects >= 7)
  {
    BOOL v6 = (os_log_s *)*(id *)(gLogObjects + 48);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v6 = (os_log_s *)&_os_log_default;
    id v7 = &_os_log_default;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    BOOL v8 = (void *)objc_claimAutoreleasedReturnValue( +[ACCPlatformTransactionManager sharedManager]( &OBJC_CLASS___ACCPlatformTransactionManager,  "sharedManager"));
    unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([v8 transactions]);
    id v10 = [v9 count];
    int v11 = 134217984;
    id v12 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "[#Transactions] There are now %lu transaction(s).",  (uint8_t *)&v11,  0xCu);
  }
}

__CFString *_dumpSimpleHex(const __CFData *a1)
{
  CFIndex Length = CFDataGetLength(a1);
  BytePtr = CFDataGetBytePtr(a1);
  CFMutableSetRef Mutable = CFStringCreateMutable(0LL, (6 * Length) | 1);
  if (Length >= 1)
  {
    do
    {
      memset(__str, 170, sizeof(__str));
      int v5 = *BytePtr++;
      snprintf(__str, 3uLL, "%02x", v5);
      BOOL v6 = CFStringCreateWithBytes(0LL, (const UInt8 *)__str, 2LL, 0x600u, 0);
      CFStringAppend(Mutable, v6);
      CFRelease(v6);
      --Length;
    }

    while (Length);
  }

  return Mutable;
}

uint64_t mfi4Auth_util_parseMessage(uint64_t a1, uint64_t a2, CFDataRef theData, __int16 a4)
{
  unsigned int Length = CFDataGetLength(theData);
  BytePtr = (char *)CFDataGetBytePtr(theData);
  iAP2MsgInitWithSom(a2, a4, 0, 0LL, 0, 0LL, 0LL);
  uint64_t v10 = iAP2MsgParserInit(0xFFFF, a1, 0LL, a4);
  uint64_t v11 = Length;
  if (!Length) {
    return 0LL;
  }
  id v12 = (unsigned __int16 *)v10;
  while (1)
  {
    char v13 = *BytePtr++;
    uint64_t result = iAP2MsgParserConsumeByte(v12, v13, a2);
    if (result) {
      break;
    }
    if (!--v11) {
      return 0LL;
    }
  }

  return result;
}

uint64_t mfi4Auth_util_packIntoTunnelDataiAP2Msg(char a1, CFDataRef theData, int a3)
{
  BytePtr = CFDataGetBytePtr(theData);
  if (!BytePtr)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      char v13 = *(os_log_s **)(gLogObjects + 440);
    }

    else
    {
      char v13 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_util_packIntoTunnelDataiAP2Msg_cold_1(v13, v15, v16, v17, v18, v19, v20, v21);
    }
    return 0LL;
  }

  id v7 = BytePtr;
  BOOL v8 = malloc(0x48uLL);
  if (!v8)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v14 = *(os_log_s **)(gLogObjects + 440);
    }

    else
    {
      int v14 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_util_packIntoTunnelDataiAP2Msg_cold_3(v14, v23, v24, v25, v26, v27, v28, v29);
    }
    return 0LL;
  }

  uint64_t v9 = (uint64_t)v8;
  uint64_t v10 = malloc(0xFFFFuLL);
  if (v10)
  {
    if (a3) {
      __int16 v11 = 21761;
    }
    else {
      __int16 v11 = 21760;
    }
    iAP2MsgInit(v9, v11, (uint64_t)v10, 0xFFFF, 0LL, 0LL);
    iAP2MsgAddU8Param(v9, 0LL, 0, a1);
    unsigned __int16 Length = CFDataGetLength(theData);
    iAP2MsgAddDataParam(v9, 0LL, 1, v7, Length);
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      unsigned __int16 v22 = *(os_log_s **)(gLogObjects + 440);
    }

    else
    {
      unsigned __int16 v22 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_util_packIntoTunnelDataiAP2Msg_cold_5(v22, v31, v32, v33, v34, v35, v36, v37);
    }
  }

  return v9;
}

CFDataRef mfi4Auth_util_unpackFromTunnelDataiAP2Msg(const __CFData *a1, _BYTE *a2, _WORD *a3)
{
  unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v42[2] = v5;
  v42[3] = v5;
  v42[0] = v5;
  v42[1] = v5;
  char v40 = calloc(1uLL, 0x1001FuLL);
  uint64_t v6 = mfi4Auth_util_parseMessage((uint64_t)v40, (uint64_t)v42, a1, 16448);
  id v7 = &startLogsNotificationObservers;
  BOOL v8 = &startLogsNotificationObservers;
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v9 = *(os_log_s **)(gLogObjects + 440);
  }

  else
  {
    uint64_t v9 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    if (!a3) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

  mfi4Auth_util_unpackFromTunnelDataiAP2Msg_cold_4(v6, v9);
  if (a3) {
LABEL_8:
  }
    *a3 = iAP2MsgGetMsgID(v6);
LABEL_9:
  int MsgID = iAP2MsgGetMsgID(v6);
  if (MsgID == 21763)
  {
    uint64_t v26 = *(const UInt8 **)(v6 + 24);
    unsigned int MsgLen = iAP2MsgGetMsgLen(v6);
    char v13 = CFDataCreate(kCFAllocatorDefault, v26, MsgLen);
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v28 = *(os_log_s **)(gLogObjects + 440);
    }

    else
    {
      uint64_t v28 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      int v30 = iAP2MsgGetMsgID(v6);
      CFIndex Length = CFDataGetLength(v13);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)char v45 = v30;
      *(_WORD *)&v45[4] = 1024;
      *(_DWORD *)&_BYTE v45[6] = 0;
      LOWORD(v46[0]) = 2048;
      *(void *)((char *)v46 + 2) = Length;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_INFO,  "mfi4Auth_util_unpackFromTunnelDataiAP2Msg: message 0x%04X, type %d, unpackedMessage %ld bytes",  buf,  0x18u);
    }
  }

  else if (MsgID == 21761)
  {
    unint64_t FirstParam = iAP2MsgGetFirstParam(v6, 0LL);
    if (FirstParam)
    {
      NextParam = (unsigned __int16 *)FirstParam;
      char v13 = 0LL;
      uint64_t DataAsU8 = 0LL;
      while (1)
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        if (ParamID != 1)
        {
          if (!ParamID)
          {
            *(_DWORD *)buf = 0;
            uint64_t DataAsU8 = iAP2MsgGetDataAsU8(NextParam, buf);
          }

          goto LABEL_27;
        }

        int v41 = 0;
        uint64_t DataAsData = (const UInt8 *)iAP2MsgGetDataAsData((uint64_t)NextParam, &v41);
        if (v13) {
          break;
        }
LABEL_26:
        unsigned int ParamValueLen = iAP2MsgGetParamValueLen(NextParam);
        char v13 = CFDataCreate(kCFAllocatorDefault, DataAsData, ParamValueLen);
LABEL_27:
        NextParam = iAP2MsgGetNextParam(v6, 0LL, NextParam);
        if (!NextParam) {
          goto LABEL_47;
        }
      }

      uint64_t v17 = DataAsU8;
      uint64_t v18 = v7;
      uint64_t v19 = v7[353];
      uint64_t v20 = v8;
      int v21 = *((_DWORD *)v8 + 708);
      if (v19 && v21 >= 56)
      {
        unsigned __int16 v22 = *(os_log_s **)(v19 + 440);
      }

      else
      {
        unsigned __int16 v22 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)char v45 = v19;
          *(_WORD *)&v45[8] = 1024;
          v46[0] = v21;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
        }
      }

      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        int v24 = iAP2MsgGetMsgID(v6);
        CFIndex v25 = CFDataGetLength(v13);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)char v45 = v24;
        *(_WORD *)&v45[4] = 1024;
        *(_DWORD *)&_BYTE v45[6] = v17;
        LOWORD(v46[0]) = 2048;
        *(void *)((char *)v46 + 2) = v25;
        _os_log_error_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "mfi4Auth_util_unpackFromTunnelDataiAP2Msg: message 0x%04X, type %d, Already have unpackedMessage %ld bytes !!! , release and create new one",  buf,  0x18u);
        if (!DataAsData) {
          goto LABEL_25;
        }
      }

      else if (!DataAsData)
      {
LABEL_25:
        BOOL v8 = v20;
        id v7 = v18;
        uint64_t DataAsU8 = v17;
        goto LABEL_26;
      }

      CFRelease(DataAsData);
      uint64_t DataAsData = 0LL;
      goto LABEL_25;
    }

    LODWORD(DataAsU_Block_object_dispose((const void *)(v1 - 144), 8) = 0;
    char v13 = 0LL;
LABEL_47:
    uint64_t v33 = v7[353];
    int v34 = *((_DWORD *)v8 + 708);
    if (v33 && v34 >= 56)
    {
      uint64_t v35 = *(os_log_s **)(v33 + 440);
    }

    else
    {
      uint64_t v35 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
    {
      int v36 = iAP2MsgGetMsgID(v6);
      CFIndex v37 = CFDataGetLength(v13);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)char v45 = v36;
      *(_WORD *)&v45[4] = 1024;
      *(_DWORD *)&_BYTE v45[6] = DataAsU8;
      LOWORD(v46[0]) = 2048;
      *(void *)((char *)v46 + 2) = v37;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_INFO,  "mfi4Auth_util_unpackFromTunnelDataiAP2Msg: message 0x%04X, type %d, unpackedMessage %ld bytes",  buf,  0x18u);
    }

    if (a2) {
      *a2 = DataAsU8;
    }
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v29 = *(os_log_s **)(gLogObjects + 440);
    }

    else
    {
      uint64_t v29 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      int v32 = iAP2MsgGetMsgID(v6);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)char v45 = v32;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_INFO,  "mfi4Auth_util_unpackFromTunnelDataiAP2Msg: Unrecognized message 0x%04X !!!",  buf,  8u);
    }

    char v13 = 0LL;
  }

  if (v40) {
    free(v40);
  }
  return v13;
}

void mfi4Auth_util_packetLogging(const void *a1, unsigned int a2, uint64_t a3, int a4, int a5)
{
  EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
  acc_platform_packetLogging_logMFi4AuthProtocolMsg((uint64_t)EndpointWithUUID, a2, a3, a4, a5);
}

void mfi4Auth_util_packetLogging_logData( const void *a1, const char *a2, const char *a3, const UInt8 *a4, CFIndex a5, int a6)
{
  EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
  CFStringRef v12 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  CFStringRef v13 = CFStringCreateWithCString(kCFAllocatorDefault, a3, 0x8000100u);
  CFDataRef v14 = CFDataCreateWithBytesNoCopy(kCFAllocatorDefault, a4, a5, kCFAllocatorNull);
  acc_platform_packetLogging_logData((uint64_t)EndpointWithUUID, (uint64_t)v12, (uint64_t)v13, v14, a6);
  if (v12) {
    CFRelease(v12);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v14) {
    CFRelease(v14);
  }
}

uint64_t mfi4Auth_util_packetLoggingEncryptedData()
{
  return acc_userDefaults_BOOLForKey((uint64_t)@"PacketLoggingPlainTextOnly") ^ 1;
}

void platform_btConnectionStatus_updateHandler(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (gLogObjects) {
    BOOL v8 = gNumLogObjects < 8;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v10 = (os_log_s *)&_os_log_default;
    id v9 = &_os_log_default;
  }

  else
  {
    uint64_t v10 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412802;
    id v24 = v5;
    __int16 v25 = 2112;
    id v26 = v6;
    __int16 v27 = 2112;
    id v28 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "[#BT Connection Status] btConnectionStatus updateHandler: %@, componentUID=%@, profiles=%@",  buf,  0x20u);
  }

  if (v5 && v6 && v7)
  {
    __int16 v11 = malloc(0x18uLL);
    *(_DWORD *)__int16 v11 = 0;
    v11[1] = v6;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    id v12 = v7;
    id v13 = [v12 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v13)
    {
      id v14 = v13;
      int v15 = 0;
      uint64_t v16 = *(void *)v19;
      do
      {
        for (int i = 0LL; i != v14; int i = (char *)i + 1)
        {
          if (*(void *)v19 != v16) {
            objc_enumerationMutation(v12);
          }
          v15 |= 1 << (char)objc_msgSend(*(id *)(*((void *)&v18 + 1) + 8 * (void)i), "intValue", (void)v18);
        }

        id v14 = [v12 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }

      while (v14);
    }

    else
    {
      int v15 = 0;
    }

    *((_DWORD *)v11 + 4) = v15;
  }
}

id _getBTStatusPluginInstance()
{
  id v0 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformPluginManager sharedManager](&OBJC_CLASS___ACCPlatformPluginManager, "sharedManager"));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( [v0 pluginInstanceWithProtocol:&OBJC_PROTOCOL___ACCPlatformBluetoothStatusPluginProtocol fallbackToTransportPlugins:1]);

  return v1;
}

void platform_btConnectionStatus_accessoryAttached(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 8;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v4 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  else
  {
    uint64_t v4 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v10 = 138412290;
    uint64_t v11 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[#BT Connection Status] btConnectionStatus accessoryAttached: %@",  (uint8_t *)&v10,  0xCu);
  }

  id v5 = -[_ACCBTConnectionStatusAccessory initWithUID:]( objc_alloc(&OBJC_CLASS____ACCBTConnectionStatusAccessory),  "initWithUID:",  a1);
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[_ACCBTConnectionStatusAccessory accessoryList]( &OBJC_CLASS____ACCBTConnectionStatusAccessory,  "accessoryList"));
  [v6 setObject:v5 forKey:a1];

  id BTStatusPluginInstance = _getBTStatusPluginInstance();
  BOOL v8 = (void *)objc_claimAutoreleasedReturnValue(BTStatusPluginInstance);
  if ((objc_opt_respondsToSelector(v8, "accessoryAttached:") & 1) != 0)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 accessoryAttached:a1]);
    -[_ACCBTConnectionStatusAccessory setPluginAccessory:](v5, "setPluginAccessory:", v9);
  }
}

void platform_btConnectionStatus_accessoryDetached(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 8;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v4 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  else
  {
    uint64_t v4 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v12 = 138412290;
    uint64_t v13 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[#BT Connection Status] btConnectionStatus accessoryDetached: %@",  (uint8_t *)&v12,  0xCu);
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[_ACCBTConnectionStatusAccessory accessoryList]( &OBJC_CLASS____ACCBTConnectionStatusAccessory,  "accessoryList"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:a1]);

  if (v6)
  {
    id BTStatusPluginInstance = _getBTStatusPluginInstance();
    id v8 = (id)objc_claimAutoreleasedReturnValue(BTStatusPluginInstance);
    if ((objc_opt_respondsToSelector(v8, "accessoryDetached:") & 1) != 0)
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 pluginAccessory]);
      [v8 accessoryDetached:v9];

      [v6 setPluginAccessory:0];
    }

    int v10 = (void *)objc_claimAutoreleasedReturnValue( +[_ACCBTConnectionStatusAccessory accessoryList]( &OBJC_CLASS____ACCBTConnectionStatusAccessory,  "accessoryList"));
    [v10 removeObjectForKey:a1];
    goto LABEL_23;
  }

  if (gLogObjects && gNumLogObjects >= 8)
  {
    id v8 = *(id *)(gLogObjects + 56);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v8 = &_os_log_default;
    id v11 = &_os_log_default;
  }

  if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_INFO))
  {
    int v10 = (void *)objc_claimAutoreleasedReturnValue( +[_ACCBTConnectionStatusAccessory accessoryList]( &OBJC_CLASS____ACCBTConnectionStatusAccessory,  "accessoryList"));
    int v12 = 138412546;
    uint64_t v13 = a1;
    __int16 v14 = 2112;
    int v15 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v8,  OS_LOG_TYPE_INFO,  "[#BT Connection Status] btConnectionStatus accessoryDetached: Unable to find accessory for accessoryUID %@ ! accessoryList=%@",  (uint8_t *)&v12,  0x16u);
LABEL_23:
  }
}

void platform_btConnectionStatus_accessoryStartConnectionUpdates( uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (gLogObjects) {
    BOOL v8 = gNumLogObjects < 8;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v10 = (os_log_s *)&_os_log_default;
    id v9 = &_os_log_default;
  }

  else
  {
    int v10 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    int v21 = 138412546;
    uint64_t v22 = a1;
    __int16 v23 = 2112;
    id v24 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "[#BT Connection Status] btConnectionStatus accessoryStartConnectionUpdates: %@ componentUID:%@",  (uint8_t *)&v21,  0x16u);
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue( +[_ACCBTConnectionStatusAccessory accessoryList]( &OBJC_CLASS____ACCBTConnectionStatusAccessory,  "accessoryList"));
  int v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKey:a1]);

  if (v12)
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 components]);
    __int16 v14 = (_ACCBTConnectionStatusComponent *)objc_claimAutoreleasedReturnValue([v13 objectForKey:a2]);

    if (v14
      || (__int16 v14 = -[_ACCBTConnectionStatusComponent initWithUID:componentUID:name:macAddr:]( [_ACCBTConnectionStatusComponent alloc],  "initWithUID:componentUID:name:macAddr:",  a1,  a2,  a3,  a4),  v15 = (void *)objc_claimAutoreleasedReturnValue([v12 components]),  objc_msgSend(v15, "setObject:forKey:", v14, a2),  v15,  v14))
    {
      -[_ACCBTConnectionStatusComponent setUpdateStarted:](v14, "setUpdateStarted:", 1LL);
      id BTStatusPluginInstance = _getBTStatusPluginInstance();
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(BTStatusPluginInstance);
      id v18 = -[_ACCBTConnectionStatusComponent copyDictionary](v14, "copyDictionary");
      [v17 startCheckingForUpdates:v18 forAccessory:a1];

LABEL_23:
      goto LABEL_24;
    }

    if (gLogObjects && gNumLogObjects >= 8)
    {
      __int16 v14 = (_ACCBTConnectionStatusComponent *)*(id *)(gLogObjects + 56);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int16 v14 = (_ACCBTConnectionStatusComponent *)&_os_log_default;
      id v20 = &_os_log_default;
    }

    if (os_log_type_enabled((os_log_t)v14, OS_LOG_TYPE_INFO))
    {
      int v21 = 138412290;
      uint64_t v22 = (uint64_t)a2;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v14,  OS_LOG_TYPE_INFO,  "[#BT Connection Status] btConnectionStatus accessoryStartConnectionUpdates: Unable to find component %@ !",  (uint8_t *)&v21,  0xCu);
    }
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 8)
    {
      __int16 v14 = (_ACCBTConnectionStatusComponent *)*(id *)(gLogObjects + 56);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int16 v14 = (_ACCBTConnectionStatusComponent *)&_os_log_default;
      id v19 = &_os_log_default;
    }

    if (os_log_type_enabled((os_log_t)v14, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[_ACCBTConnectionStatusAccessory accessoryList]( &OBJC_CLASS____ACCBTConnectionStatusAccessory,  "accessoryList"));
      int v21 = 138412546;
      uint64_t v22 = a1;
      __int16 v23 = 2112;
      id v24 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v14,  OS_LOG_TYPE_INFO,  "[#BT Connection Status] btConnectionStatus accessoryStartConnectionUpdates: Unable to find accessory for accesso ryUID %@ ! accessoryList=%@",  (uint8_t *)&v21,  0x16u);
      goto LABEL_23;
    }
  }

void platform_btConnectionStatus_accessoryStopConnectionUpdates(uint64_t a1, void *a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 8;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v6 = (os_log_s *)&_os_log_default;
    id v5 = &_os_log_default;
  }

  else
  {
    id v6 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v15 = 138412546;
    uint64_t v16 = a1;
    __int16 v17 = 2112;
    id v18 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "[#BT Connection Status] btConnectionStatus accessoryStopConnectionUpdates: %@ componentUID:%@",  (uint8_t *)&v15,  0x16u);
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[_ACCBTConnectionStatusAccessory accessoryList]( &OBJC_CLASS____ACCBTConnectionStatusAccessory,  "accessoryList"));
  BOOL v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:a1]);

  if (v8)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 components]);
    id v10 = (id)objc_claimAutoreleasedReturnValue([v9 objectForKey:a2]);

    if (v10)
    {
      [v10 setUpdateStarted:0];
      id BTStatusPluginInstance = _getBTStatusPluginInstance();
      int v12 = (void *)objc_claimAutoreleasedReturnValue(BTStatusPluginInstance);
      id v13 = [v10 copyDictionary];
      [v12 stopCheckingForUpdates:v13 forAccessory:a1];

LABEL_22:
    }
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 8)
    {
      id v10 = *(id *)(gLogObjects + 56);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v10 = &_os_log_default;
      id v14 = &_os_log_default;
    }

    if (os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_INFO))
    {
      int v12 = (void *)objc_claimAutoreleasedReturnValue( +[_ACCBTConnectionStatusAccessory accessoryList]( &OBJC_CLASS____ACCBTConnectionStatusAccessory,  "accessoryList"));
      int v15 = 138412546;
      uint64_t v16 = a1;
      __int16 v17 = 2112;
      id v18 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v10,  OS_LOG_TYPE_INFO,  "[#BT Connection Status] btConnectionStatus accessoryStopConnectionUpdates: Unable to find accessory for accessor yUID %@ ! accessoryList=%@",  (uint8_t *)&v15,  0x16u);
      goto LABEL_22;
    }
  }
}

void platform_btConnectionStatus_accessoryStopAllConnectionUpdates(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 8;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  else
  {
    BOOL v4 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v21 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[#BT Connection Status] btConnectionStatus accessoryStopAllConnectionUpdates: %@",  buf,  0xCu);
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[_ACCBTConnectionStatusAccessory accessoryList]( &OBJC_CLASS____ACCBTConnectionStatusAccessory,  "accessoryList"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:a1]);

  if (v6)
  {
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    id v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "components", 0));
    id v8 = (id)objc_claimAutoreleasedReturnValue([v7 allValues]);

    id v9 = [v8 countByEnumeratingWithState:&v16 objects:v24 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v17;
      do
      {
        for (int i = 0LL; i != v10; int i = (char *)i + 1)
        {
          if (*(void *)v17 != v11) {
            objc_enumerationMutation(v8);
          }
          id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v16 + 1) + 8 * (void)i) componentUID]);
          platform_btConnectionStatus_accessoryStopConnectionUpdates(a1, v13);
        }

        id v10 = [v8 countByEnumeratingWithState:&v16 objects:v24 count:16];
      }

      while (v10);
    }
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 8)
    {
      id v8 = *(id *)(gLogObjects + 56);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v8 = &_os_log_default;
      id v14 = &_os_log_default;
    }

    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_INFO))
    {
      int v15 = (void *)objc_claimAutoreleasedReturnValue( +[_ACCBTConnectionStatusAccessory accessoryList]( &OBJC_CLASS____ACCBTConnectionStatusAccessory,  "accessoryList"));
      *(_DWORD *)buf = 138412546;
      uint64_t v21 = a1;
      __int16 v22 = 2112;
      __int16 v23 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v8,  OS_LOG_TYPE_INFO,  "[#BT Connection Status] btConnectionStatus accessoryStopAllConnectionUpdates: Unable to find accessory for acces soryUID %@ ! accessoryList=%@",  buf,  0x16u);
    }
  }
}

void platform_btComponentStatus_btComponentInfo(uint64_t a1, void *a2)
{
  uint64_t v26 = a1;
  if (gLogObjects) {
    BOOL v3 = gNumLogObjects < 8;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v5 = (os_log_s *)&_os_log_default;
    id v4 = &_os_log_default;
  }

  else
  {
    id v5 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412546;
    uint64_t v36 = v26;
    __int16 v37 = 2112;
    size_t v38 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "[#BT Connection Status] btConnectionStatus btComponentInfo: %@ componentList=%@",  buf,  0x16u);
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[_ACCBTConnectionStatusAccessory accessoryList]( &OBJC_CLASS____ACCBTConnectionStatusAccessory,  "accessoryList"));
  uint64_t v7 = objc_claimAutoreleasedReturnValue([v6 objectForKey:v26]);

  id v28 = (void *)v7;
  if (v7)
  {
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    id v8 = a2;
    id v9 = [v8 countByEnumeratingWithState:&v30 objects:v34 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v29 = *(void *)v31;
      id obj = v8;
      do
      {
        for (int i = 0LL; i != v10; int i = (char *)i + 1)
        {
          if (*(void *)v31 != v29) {
            objc_enumerationMutation(obj);
          }
          int v12 = *(void **)(*((void *)&v30 + 1) + 8LL * (void)i);
          id v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", @"ACCBluetoothStatusComponentInfoUID", v26));
          id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:@"ACCBluetoothStatusComponentInfoMACAddr"]);
          int v15 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:@"ACCBluetoothStatusComponentInfoEnabled"]);
          __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:@"ACCBluetoothStatusComponentInfoName"]);
          if (v13) {
            BOOL v17 = v14 == 0LL;
          }
          else {
            BOOL v17 = 1;
          }
          if (!v17 && v15 != 0LL)
          {
            __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v28 components]);
            id v20 = (_ACCBTConnectionStatusComponent *)objc_claimAutoreleasedReturnValue([v19 objectForKey:v13]);

            if (v20
              || (id v20 = -[_ACCBTConnectionStatusComponent initWithUID:componentUID:name:macAddr:]( [_ACCBTConnectionStatusComponent alloc],  "initWithUID:componentUID:name:macAddr:",  v26,  v13,  v16,  v14),  v21 = (void *)objc_claimAutoreleasedReturnValue([v28 components]),  objc_msgSend(v21, "setObject:forKey:", v20, v13),  v21,  v20))
            {
              -[_ACCBTConnectionStatusComponent setEnabled:](v20, "setEnabled:", [v15 BOOLValue]);
              id BTStatusPluginInstance = _getBTStatusPluginInstance();
              __int16 v23 = (void *)objc_claimAutoreleasedReturnValue(BTStatusPluginInstance);
              if ((objc_opt_respondsToSelector(v23, "updateBTComponent:forAccessory:withEnabledState:") & 1) != 0
                && !objc_msgSend( v23,  "updateBTComponent:forAccessory:withEnabledState:",  v12,  v26,  -[_ACCBTConnectionStatusComponent enabled](v20, "enabled")))
              {
                -[_ACCBTConnectionStatusComponent setNeedToUnplugBTDevice:]( v20,  "setNeedToUnplugBTDevice:",  -[_ACCBTConnectionStatusComponent enabled](v20, "enabled"));
              }
            }
          }
        }

        id v8 = obj;
        id v10 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
      }

      while (v10);
    }
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 8)
    {
      id v8 = *(id *)(gLogObjects + 56);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v8 = &_os_log_default;
      id v24 = &_os_log_default;
    }

    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_INFO))
    {
      __int16 v25 = (void *)objc_claimAutoreleasedReturnValue( +[_ACCBTConnectionStatusAccessory accessoryList]( &OBJC_CLASS____ACCBTConnectionStatusAccessory,  "accessoryList"));
      *(_DWORD *)buf = 138412546;
      uint64_t v36 = v26;
      __int16 v37 = 2112;
      size_t v38 = v25;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v8,  OS_LOG_TYPE_INFO,  "[#BT Connection Status] btConnectionStatus btComponentInfo: Unable to find accessory for accessoryUID %@ ! accessoryList=%@",  buf,  0x16u);
    }
  }
}

void platform_btConnectionStatus_deleteParams(void *a1)
{
  if (a1)
  {
    BOOL v2 = (const void *)a1[1];
    if (v2) {
      CFRelease(v2);
    }
    free(a1);
  }

__CFDictionary *platform_btComponentStatus_createComponentInfoDict( const void *a1, const void *a2, const void *a3, UInt8 *bytes, char a5)
{
  char valuePtr = a5;
  CFDataRef v8 = CFDataCreate(kCFAllocatorDefault, bytes, 6LL);
  CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
  CFMutableSetRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  3LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  CFDictionarySetValue(Mutable, @"ACCBluetoothStatusComponentInfoAccessoryUID", a1);
  CFDictionarySetValue(Mutable, @"ACCBluetoothStatusComponentInfoUID", a2);
  CFDictionarySetValue(Mutable, @"ACCBluetoothStatusComponentInfoName", a3);
  CFDictionarySetValue(Mutable, @"ACCBluetoothStatusComponentInfoMACAddr", v8);
  CFDictionarySetValue(Mutable, @"ACCBluetoothStatusComponentInfoEnabled", v9);
  if (v8) {
    CFRelease(v8);
  }
  if (v9) {
    CFRelease(v9);
  }
  return Mutable;
}

void *accAuthProtocol_endpoint_create(uint64_t a1)
{
  if (a1)
  {
    BOOL v2 = calloc(1uLL, 0x48uLL);
    if (v2)
    {
      dispatch_queue_t v3 = dispatch_queue_create("ACCAuthProtocolQ", 0LL);
      v2[7] = v3;
      if (v3)
      {
        dispatch_set_context(v3, v2);
        dispatch_set_finalizer_f( (dispatch_object_t)v2[7],  (dispatch_function_t)_accAuthProtocol_endpoint_dispatchQueueFinalizer);
        void *v2 = a1;
        _accAuthProtocol_endpoint_initSession((uint64_t)v2);
        unsigned int v4 = acc_auth_protocol_maxSizeofMessageData();
        *((_DWORD *)v2 + _Block_object_dispose((const void *)(v1 - 144), 8) = v4;
        v2[3] = calloc(1uLL, v4);
      }
    }
  }

  else
  {
    id v6 = (os_log_s *)logObjectForModule_1(54);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      accAuthProtocol_endpoint_create_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    return 0LL;
  }

  return v2;
}

void _accAuthProtocol_endpoint_dispatchQueueFinalizer(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    BOOL v2 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    BOOL v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    uint64_t v7 = "_accAuthProtocol_endpoint_dispatchQueueFinalizer";
    __int16 v8 = 1024;
    BOOL v9 = a1 != 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s: protocolEndpoint %d", (uint8_t *)&v6, 0x12u);
  }

  if (a1)
  {
    dispatch_queue_t v3 = *(void **)(a1 + 16);
    if (v3)
    {
      if (!*(_BYTE *)(a1 + 8) {
        || (acc_auth_protocol_endSession((unsigned __int8 *)v3),
      }
            *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 144), 8) = 0,
            (dispatch_queue_t v3 = *(void **)(a1 + 16)) != 0LL))
      {
        free(v3);
        *(void *)(a1 + 16) = 0LL;
      }
    }

    *(void *)(a1 + 56) = 0LL;
    unsigned int v4 = *(const void **)(a1 + 40);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(a1 + 40) = 0LL;
    }

    id v5 = *(void **)(a1 + 24);
    if (v5) {
      free(v5);
    }
    free((void *)a1);
  }

uint64_t _accAuthProtocol_endpoint_initSession(uint64_t a1)
{
  id v2 = acc_userDefaults_copyIntegerForKey((uint64_t)@"ACCAuthProtocolMaxMessageSize");
  int v21 = -1431655766;
  *(void *)&v20[4] = 0xAAAAAAAAAAAAAAAALL;
  *(_DWORD *)id v20 = _acc_auth_protocol_supportedAuthCapabilities(1);
  int v3 = _acc_auth_protocol_supportedAuthTypes(1, &v20[4], 4u);
  else {
    int v4 = (int)v2;
  }
  *(_DWORD *)&v20[8] = v3;
  int v21 = v4;
  unsigned int v5 = acc_auth_protocol_sizeofSessionData();
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v6 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    int v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    __int128 v18 = *(unsigned __int8 **)(a1 + 16);
    if (v18) {
      int v19 = *v18;
    }
    else {
      int v19 = -1;
    }
    *(_DWORD *)buf = 67109888;
    int v23 = v19;
    __int16 v24 = 1024;
    int v25 = *(_DWORD *)v20;
    __int16 v26 = 1024;
    int v27 = *(_DWORD *)&v20[8];
    __int16 v28 = 1024;
    unsigned int v29 = v5;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "accAuthProtocol initSession: sessionID %d, characteristics %#10x, authTypesLen %d, sessionDataLen %d",  buf,  0x1Au);
  }

  if (!*(void *)(a1 + 16)) {
    *(void *)(a1 + 16) = calloc(1uLL, v5);
  }
  *(CFAbsoluteTime *)(a1 + 64) = CFAbsoluteTimeGetCurrent();
  acc_platform_packetLogging_logEvent( *(void *)a1,  "ATTACH",  (uint64_t)"ACCAuthProtocol accessory attached!",  v7,  v8,  v9,  v10,  v11,  *(uint64_t *)v20);
  if (*(void *)a1) {
    uint64_t v12 = *(void *)(*(void *)a1 + 16LL);
  }
  else {
    uint64_t v12 = 0LL;
  }
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 144), 8) = acc_auth_protocol_createSessionWithContext( 1,  (uint64_t)v20,  *(_BYTE **)(a1 + 16),  v12) == 0;
  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v13 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    uint64_t v13 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    id v14 = *(unsigned __int8 **)(a1 + 16);
    if (v14) {
      int v15 = *v14;
    }
    else {
      int v15 = -1;
    }
    int v16 = *(unsigned __int8 *)(a1 + 8);
    *(_DWORD *)buf = 67110144;
    int v23 = v15;
    __int16 v24 = 1024;
    int v25 = *(_DWORD *)v20;
    __int16 v26 = 1024;
    int v27 = *(_DWORD *)&v20[8];
    __int16 v28 = 1024;
    unsigned int v29 = v5;
    __int16 v30 = 1024;
    int v31 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "accAuthProtocol initSession: sessionID %d, characteristics %#10x, authTypesLen %d, sessionDataLen %d, authSessionInitialized %d",  buf,  0x20u);
  }

  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t accAuthProtocol_endpoint_publish(uint64_t result, uint64_t a2)
{
  if (!result) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t result = *(void *)result;
  if (!result) {
    return result;
  }
  int Protocol = acc_endpoint_getProtocol(result);
  unsigned int v5 = acc_policies_allowACCAuthProtocolOnTransport(*(_DWORD *)(*(void *)v2 + 24LL));
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v6 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    int v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(*(void *)v2 + 24LL);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)uint64_t v47 = v7;
    *(_WORD *)&v47[4] = 1024;
    *(_DWORD *)&_BYTE v47[6] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "accAuthProtocol publish: transportType %{coreacc:ACCEndpoint_TransportType_t}d, allowed %d ",  buf,  0xEu);
  }

  if (Protocol != 10) {
    return 0LL;
  }
  unsigned int v41 = v5;
  BOOL isPublished = acc_endpoint_isPublished(*(void *)v2);
  CFMutableSetRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 1LL, &kCFTypeArrayCallBacks);
  uint64_t v10 = Mutable;
  if (*(void *)v2) {
    uint64_t v11 = *(const void **)(*(void *)v2 + 16LL);
  }
  else {
    uint64_t v11 = 0LL;
  }
  CFArrayAppendValue(Mutable, v11);
  uint64_t v12 = acc_accInfo_copyAccessoryInfoDictionary(a2);
  CFTypeRef cf = v12;
  uint64_t v13 = v10;
  if (v12) {
    MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, (CFDictionaryRef)v12);
  }
  else {
    MutableCFStringRef Copy = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  }
  int v15 = MutableCopy;
  uint64_t v16 = v2 + 16;
  int valuePtr = *(_DWORD *)(*(void *)(v2 + 16) + 1156LL);
  CFNumberRef v17 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(v15, @"NegotiatedAuthType", v17);
  int v44 = *(_DWORD *)(*(void *)(v2 + 16) + 1152LL);
  CFNumberRef v18 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v44);
  unint64_t v43 = v15;
  CFDictionaryAddValue(v15, @"NegotiatedCharacteristics", v18);
  int AuthStatus = acc_connection_getAuthStatus(**(void **)v2, 1LL);
  if (gLogObjects && gNumLogObjects >= 55)
  {
    id v20 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    id v20 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  int v21 = v43;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    int v22 = *(_DWORD *)(*(void *)v16 + 1156LL);
    int v23 = *(_DWORD *)(*(void *)v16 + 1152LL);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)uint64_t v47 = isPublished;
    *(_WORD *)&v47[4] = 1024;
    *(_DWORD *)&_BYTE v47[6] = v22;
    *(_WORD *)__int128 v48 = 1024;
    *(_DWORD *)&v48[2] = v23;
    __int16 v49 = 2112;
    uint64_t v50 = v43;
    __int16 v51 = 1024;
    int v52 = AuthStatus;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "accAuthProtocol publish: wasPublished = %d, authType %d, characteristics %#10x, accInfoDict = %@, curAuthStatus %d ",  buf,  0x24u);
  }

  if (AuthStatus == 1 && isPublished)
  {
    if (*(_BYTE *)(v2 + 8))
    {
      if (gLogObjects && gNumLogObjects >= 55)
      {
        int v25 = *(os_log_s **)(gLogObjects + 432);
      }

      else
      {
        int v25 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
        accAuthProtocol_endpoint_publish_cold_1(v2 + 16, v25, v26, v27, v28, v29, v30, v31);
      }
      _accAuthProtocol_endpoint_cleanupSession(v2);
      int v21 = v43;
    }

    _accAuthProtocol_endpoint_initSession(v2);
    if (acc_connection_isAuthenticated(**(void **)v2, 6LL)) {
      goto LABEL_41;
    }
    BOOL isPublished = 0;
  }

  else if (acc_connection_isAuthenticated(**(void **)v2, 6LL))
  {
    if (isPublished)
    {
      BOOL isPublished = 1;
LABEL_50:
      if (*(_BYTE *)(v2 + 8)
        && (acc_userDefaults_BOOLForKey((uint64_t)@"DontSkipInductiveAuthOnCTA") & 1) == 0)
      {
        if (gLogObjects && gNumLogObjects >= 55)
        {
          __int128 v33 = *(os_log_s **)(gLogObjects + 432);
        }

        else
        {
          __int128 v33 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
          accAuthProtocol_endpoint_publish_cold_1(v2 + 16, v33, v34, v35, v36, v37, v38, v39);
        }
        _accAuthProtocol_endpoint_cleanupSession(v2);
        int v21 = v43;
      }

      goto LABEL_60;
    }

LABEL_60:
  if (acc_connection_isAuthenticated(**(void **)v2, 6LL)) {
    unsigned int v40 = acc_userDefaults_BOOLForKey((uint64_t)@"DontSkipInductiveAuthOnCTA") & v41;
  }
  else {
    unsigned int v40 = v41;
  }
  if (((v40 ^ 1 | isPublished) & 1) == 0 && *(_BYTE *)(v2 + 8))
  {
    if (*(_DWORD *)(*(void *)v2 + 24LL) == 13)
    {
    }

    else
    {
      _accAuthProtocol_endpoint_sendAuthSetupStart(v2);
    }
  }

  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v13) {
    CFRelease(v13);
  }
  return 1LL;
}

            if (gLogObjects && gNumLogObjects >= 56)
            {
              int v19 = (os_log_s *)*(id *)(gLogObjects + 440);
            }

            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
              int v19 = (os_log_s *)&_os_log_default;
              uint64_t v26 = &_os_log_default;
            }

            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
              mfi4Auth_protocol_decryptIncomingData_cold_1();
            }
            CFNumberRef v17 = 0LL;
LABEL_50:

            return v17;
          }

          goto LABEL_36;
        }
      }

      if (!a2) {
        goto LABEL_60;
      }
      uint64_t v13 = a1;
      id v14 = a3;
      int v15 = 12LL;
      uint64_t v16 = 13LL;
      goto LABEL_33;
    }

    int v25 = logObjectForModule_29();
    int v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_decryptIncomingData_cold_5();
    }
LABEL_59:

    goto LABEL_60;
  }

  return 1LL;
}

void _accAuthProtocol_endpoint_cleanupSession(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v2 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    uint64_t v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = **(unsigned __int8 **)(a1 + 16);
    int v4 = *(unsigned __int8 *)(a1 + 8);
    v5[0] = 67109376;
    v5[1] = v3;
    __int16 v6 = 1024;
    int v7 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "accAuthProtocol cleanupSession: acc_auth_protocol_endSession sessionID %d, authSessionInitialized %d",  (uint8_t *)v5,  0xEu);
  }

  if (*(_BYTE *)(a1 + 8))
  {
    acc_auth_protocol_endSession(*(unsigned __int8 **)(a1 + 16));
    *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 144), 8) = 0;
  }

uint64_t accAuthProtocol_endpoint_notifyAuthStatus(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = 0LL;
    if (a2)
    {
      uint64_t v4 = *(void *)v3;
      if (*(void *)v3)
      {
        double v10 = CFAbsoluteTimeGetCurrent() - *(double *)(v3 + 64);
        if (a2 == 3)
        {
          acc_platform_packetLogging_logEvent( v4,  "AUTH TIMEOUT",  (uint64_t)"ACCAuthProtocol accessory authentication Timed Out! (in %lf seconds)",  v5,  v6,  v7,  v8,  v9,  *(uint64_t *)&v10);
        }

        else if (a2 == 2)
        {
          acc_platform_packetLogging_logEvent( v4,  "AUTH PASSED",  (uint64_t)"ACCAuthProtocol accessory authentication Passed! (in %lf seconds)",  v5,  v6,  v7,  v8,  v9,  *(uint64_t *)&v10);
        }

        else
        {
          acc_platform_packetLogging_logEvent( v4,  "AUTH FAILED",  (uint64_t)"ACCAuthProtocol accessory authentication Failed! (in %lf seconds)",  v5,  v6,  v7,  v8,  v9,  *(uint64_t *)&v10);
        }

        if (*(_DWORD *)(v4 + 24) == 13) {
          return acc_endpoint_setProperty( (pthread_mutex_t *)v4,  kCFACCProperties_Endpoint_NFC_RequestSessionOpen,  kCFBooleanFalse);
        }
        else {
          return 1LL;
        }
      }
    }
  }

  return result;
}

void __accAuthProtocol_endpoint_publish_block_invoke(id a1)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v1 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    uint64_t v1 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "accAuthProtocol publish: CFNotificationCenterAddObserver",  v3,  2u);
  }

  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver( LocalCenter,  0LL,  (CFNotificationCallback)_accAuthProtocol_endpoint_authReadyChanged,  @"NfcAuthReady",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
}

void _accAuthProtocol_endpoint_authReadyChanged( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v6 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    uint64_t v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "accAuthProtocol: Auth Ready changed", buf, 2u);
  }

  uint64_t Value = CFDictionaryGetValue(a5, @"endpointUUID");
  if (Value)
  {
    uint64_t v8 = Value;
    CFTypeID v9 = CFGetTypeID(Value);
    if (v9 == CFStringGetTypeID())
    {
      EndpointWithUUID = acc_manager_getEndpointWithUUID(v8);
      if (EndpointWithUUID)
      {
        uint64_t v11 = EndpointWithUUID;
        if (EndpointWithUUID[7] == 10 && EndpointWithUUID[6] == 13)
        {
          if (gLogObjects && gNumLogObjects >= 55)
          {
            uint64_t v12 = *(os_log_s **)(gLogObjects + 432);
          }

          else
          {
            uint64_t v12 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t v13 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "accAuthProtocol: endpoint is ACCAuthProtocol",  v13,  2u);
          }

          if (acc_endpoint_setProperty( (pthread_mutex_t *)v11,  kCFACCProperties_Endpoint_NFC_RequestSessionOpen,  kCFBooleanTrue)) {
            _accAuthProtocol_endpoint_sendAuthSetupStart(*((void *)v11 + 7));
          }
        }
      }
    }
  }

void _accAuthProtocol_endpoint_sendAuthSetupStart(uint64_t a1)
{
  if (a1
    && !acc_auth_protocol_authSetupStart( *(unsigned __int8 **)(a1 + 16),  *(unsigned __int8 **)(a1 + 24),  *(_DWORD *)(a1 + 32)))
  {
    uint64_t v2 = *(void *)(*(void *)a1 + 16LL);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(*(void *)a1 + 16LL));
      if (gLogObjects && gNumLogObjects >= 55)
      {
        uint64_t v3 = *(os_log_s **)(gLogObjects + 432);
      }

      else
      {
        uint64_t v3 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        uint64_t v17 = v2;
        __int16 v18 = 1024;
        int v19 = 100;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "accAuthProtocol sendAuthSetupStart: %@, send after %d ms ...",  buf,  0x12u);
      }

      dispatch_time_t v5 = dispatch_time(0LL, 100000000LL);
      uint64_t v6 = *(dispatch_queue_s **)(a1 + 56);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 0x40000000LL;
      _DWORD v14[2] = ___accAuthProtocol_endpoint_sendAuthSetupStart_block_invoke;
      v14[3] = &__block_descriptor_tmp_22;
      v14[4] = v2;
      int v15 = 100;
      dispatch_after(v5, v6, v14);
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 55)
      {
        uint64_t v4 = *(os_log_s **)(gLogObjects + 432);
      }

      else
      {
        uint64_t v4 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        _accAuthProtocol_endpoint_sendAuthSetupStart_cold_1(v4, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }

uint64_t **accAuthProtocol_endpoint_destroy( uint64_t **result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    uint64_t v8 = (uint64_t *)result;
    if (*result)
    {
      acc_platform_packetLogging_logEvent( **result,  "DETACH",  (uint64_t)"ACCAuthProtocol accessory detached!",  a4,  a5,  a6,  a7,  a8,  v9);
      _accAuthProtocol_endpoint_cleanupSession(*v8);
      dispatch_sync(*(dispatch_queue_t *)(*v8 + 56), &__block_literal_global_10);
      dispatch_release(*(dispatch_object_t *)(*v8 + 56));
      return (uint64_t **)1;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t accAuthProtocol_endpoint_processIncomingData(uint64_t result, CFTypeRef cf)
{
  if (result)
  {
    uint64_t v2 = result;
    if (*(void *)result && *(void *)(result + 16))
    {
      uint64_t result = 0LL;
      if (cf)
      {
        if (*(_BYTE *)(v2 + 8))
        {
          CFRetain(cf);
          uint64_t v4 = *(dispatch_queue_s **)(v2 + 56);
          v5[0] = _NSConcreteStackBlock;
          v5[1] = 0x40000000LL;
          _DWORD v5[2] = __accAuthProtocol_endpoint_processIncomingData_block_invoke;
          v5[3] = &__block_descriptor_tmp_11_1;
          v5[4] = v2;
          v5[5] = cf;
          dispatch_async(v4, v5);
          return 1LL;
        }
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

void __accAuthProtocol_endpoint_processIncomingData_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t _accAuthProtocol_endpoint_processIncomingData(uint64_t a1, const __CFData *a2)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v3 = 0LL;
  if (a2)
  {
    uint64_t v5 = *(void *)a1;
    if (*(void *)a1)
    {
      if (gLogObjects && gNumLogObjects >= 55)
      {
        uint64_t v6 = *(os_log_s **)(gLogObjects + 432);
      }

      else
      {
        uint64_t v6 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        int v34 = *(_DWORD *)(v5 + 24);
        int v35 = **(unsigned __int8 **)(a1 + 16);
        *(_DWORD *)buf = 67109634;
        int v39 = v34;
        __int16 v40 = 1024;
        *(_DWORD *)unsigned int v41 = v35;
        *(_WORD *)&v41[4] = 2112;
        *(void *)&_BYTE v41[6] = a2;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "accAuthProtocol processIncomingData: %{coreacc:ACCEndpoint_TransportType_t}d sessionID %d, dataIn %@",  buf,  0x18u);
      }

      if (acc_policies_allowACCAuthProtocolOnAllTransport()
        && (uint64_t v7 = CFDataGetBytePtr(a2), v8 = CFDataGetLength(a2), v7)
        && v8 >= 6
        && ((unint64_t)v8 >= 7
         && (*(_DWORD *)v7 == 39190527 ? (BOOL v9 = *(_DWORD *)(v7 + 3) == 1420427266) : (BOOL v9 = 0), v9)
         || (*(_DWORD *)v7 == 153087 ? (BOOL v10 = *((unsigned __int16 *)v7 + 2) == 21674) : (BOOL v10 = 0), v10)))
      {
        if (gLogObjects && gNumLogObjects >= 15)
        {
          uint64_t v30 = *(os_log_s **)(gLogObjects + 112);
        }

        else
        {
          uint64_t v30 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          int v31 = *(_DWORD *)(v5 + 28);
          uint64_t v32 = *(void *)(v5 + 16);
          *(_DWORD *)buf = 67109378;
          int v39 = v31;
          __int16 v40 = 2112;
          *(void *)unsigned int v41 = v32;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Protocol %{coreacc:ACCEndpoint_Protocol_t}d... got DETECT for endpoint %@! don't propagate.",  buf,  0x12u);
        }

        return accAuthProtocol_endpoint_publish(*(void *)(v5 + 56), *(void *)(v5 + 64));
      }

      else
      {
        if (*(void *)v5 && *(_DWORD *)(a1 + 48))
        {
          platform_connectionInfo_handleInterceptData(*(void *)(v5 + 8), *(const void **)(v5 + 16), (uint64_t)a2);
          int v11 = *(_DWORD *)(a1 + 48);
          BOOL v12 = __OFSUB__(v11, 1);
          int v13 = v11 - 1;
          if (v13 < 0 == v12)
          {
            uint64_t v3 = 0LL;
            *(_DWORD *)(a1 + 4_Block_object_dispose((const void *)(v1 - 144), 8) = v13;
            return v3;
          }

          return 0LL;
        }

        if (!*(void *)(a1 + 40))
        {
          CFMutableDataRef Mutable = CFDataCreateMutable(kCFAllocatorDefault, 0LL);
          *(void *)(a1 + 40) = Mutable;
          if (!Mutable) {
            return 0LL;
          }
        }

        BytePtr = CFDataGetBytePtr(a2);
        CFIndex Length = CFDataGetLength(a2);
        if (!BytePtr) {
          return 0LL;
        }
        CFDataAppendBytes(*(CFMutableDataRef *)(a1 + 40), BytePtr, Length);
        uint64_t v17 = (unsigned __int8 *)CFDataGetBytePtr(*(CFDataRef *)(a1 + 40));
        CFIndex v18 = CFDataGetLength(*(CFDataRef *)(a1 + 40));
        if (v18 < 4) {
          return 1LL;
        }
        unsigned int v19 = v18;
        acc_platform_packetLogging_logAccAuthProtocolMsg(*(void *)a1, **(unsigned __int8 **)(a1 + 16), a2, 1);
        unsigned int range = 0;
        unsigned int v20 = acc_auth_protocol_checkMessage(*(unsigned __int8 **)(a1 + 16), (uint64_t)v17, v19, &range);
        if (gLogObjects && gNumLogObjects >= 55)
        {
          int v21 = *(os_log_s **)(gLogObjects + 432);
        }

        else
        {
          int v21 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        {
          int v36 = **(unsigned __int8 **)(a1 + 16);
          *(_DWORD *)buf = 67109890;
          int v39 = v36;
          __int16 v40 = 1024;
          *(_DWORD *)unsigned int v41 = range;
          *(_WORD *)&v41[4] = 1024;
          *(_DWORD *)&_BYTE v41[6] = v20;
          *(_WORD *)&_BYTE v41[10] = 2112;
          *(void *)&v41[12] = a2;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "accAuthProtocol processIncomingData: after checkMessage, sessionID %d, skipBytes %d, msgLen %d,dataIn %@",  buf,  0x1Eu);
        }

        v22.BOOL length = range;
        if (range)
        {
          v22.location = 0LL;
          CFDataDeleteBytes(*(CFMutableDataRef *)(a1 + 40), v22);
        }

        if (v20 < 4) {
          return 1LL;
        }
        if (acc_userDefaults_BOOLForKey((uint64_t)@"ForceAuthTimeout"))
        {
          if (gLogObjects && gNumLogObjects >= 55)
          {
            int v23 = *(os_log_s **)(gLogObjects + 432);
          }

          else
          {
            int v23 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            int v29 = **(unsigned __int8 **)(a1 + 16);
            *(_DWORD *)buf = 67109120;
            int v39 = v29;
            _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "accAuthProtocol processIncomingData: ForceAuthTimeout, ignore incoming messages for sessionID %d, allow ti meout to occur, if any",  buf,  8u);
          }

          return 1LL;
        }

        uint64_t v3 = 1LL;
        ACCAuthProtocol_PrintMessage( v17,  v19,  "\n----------------\n**** ACCAuthProtocol incoming handler ****: \nACCESSORY",  0,  1);
        int v24 = acc_auth_protocol_handleMessage( *(unsigned __int8 **)(a1 + 16),  v17,  v19,  *(unsigned __int8 **)(a1 + 24),  *(_DWORD *)(a1 + 32));
        v42.BOOL length = v20;
        v42.location = 0LL;
        CFDataDeleteBytes(*(CFMutableDataRef *)(a1 + 40), v42);
        if (!v24)
        {
          int v25 = *(unsigned __int8 **)(a1 + 24);
          unsigned int v26 = acc_auth_protocol_sizeofMessage((uint64_t)v25, *(_DWORD *)(a1 + 32), 0LL, 0LL);
          ACCAuthProtocol_PrintMessage( v25,  v26,  "\n----------------\n**** ACCAuthProtocol outgoing handler ****: \nHOST",  0,  1);
          uint64_t v27 = *(const UInt8 **)(a1 + 24);
          unsigned __int16 v28 = acc_auth_protocol_sizeofMessage((uint64_t)v27, *(_DWORD *)(a1 + 32), 0LL, 0LL);
          accAuthProtocol_endpoint_sendOutgoingData(a1, v27, v28);
        }
      }
    }
  }

  return v3;
}

uint64_t accAuthProtocol_endpoint_sendOutgoingData(uint64_t a1, const UInt8 *a2, unsigned int a3)
{
  if (!a1 || !*(void *)(a1 + 16)) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  if (!a2 || !*(_BYTE *)(a1 + 8)) {
    return v5;
  }
  if (a3 < 4) {
    return 0LL;
  }
  uint64_t v7 = *(void *)a1;
  if (!acc_auth_protocol_validMessageID(*a2)
    || acc_auth_protocol_sizeofMessage((uint64_t)a2, a3, 0LL, 0LL) > a3)
  {
    return 0LL;
  }

  CFDataRef v8 = CFDataCreate(kCFAllocatorDefault, a2, a3);
  acc_platform_packetLogging_logAccAuthProtocolMsg(v7, **(unsigned __int8 **)(a1 + 16), v8, 0);
  uint64_t v5 = acc_endpoint_sendOutgoingData(v7, v8);
  if (v8) {
    CFRelease(v8);
  }
  return v5;
}

void accAuthProtocol_endpoint_setIncomingIntercept(_DWORD *a1, int a2)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v4 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    uint64_t v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(*(void *)a1 + 16LL);
    int v6 = a1[12];
    int v7 = 138412802;
    uint64_t v8 = v5;
    __int16 v9 = 1024;
    int v10 = v6;
    __int16 v11 = 1024;
    int v12 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "_setIncomingIntercept: %@, interceptIncomingCount %d -> %d",  (uint8_t *)&v7,  0x18u);
  }

  a1[12] = a2;
}

uint64_t accAuthProtocol_endpoint_getIncomingInterceptCount(_DWORD *a1)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v2 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    uint64_t v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(*(void *)a1 + 16LL);
    int v4 = a1[12];
    int v6 = 138412546;
    uint64_t v7 = v3;
    __int16 v8 = 1024;
    int v9 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "_getIncomingInterceptCount: %@, interceptIncomingCount %d",  (uint8_t *)&v6,  0x12u);
  }

  return a1[12];
}

void ___accAuthProtocol_endpoint_sendAuthSetupStart_block_invoke(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v2 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    uint64_t v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(_DWORD *)(a1 + 40);
    int v14 = 138412546;
    *(void *)int v15 = v3;
    *(_WORD *)&__int16 v15[8] = 1024;
    *(_DWORD *)uint64_t v16 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "accAuthProtocol sendAuthSetupStart: %@, ... sending after %d ms",  (uint8_t *)&v14,  0x12u);
  }

  EndpointWithUUID = (uint64_t *)acc_manager_getEndpointWithUUID(*(const void **)(a1 + 32));
  int v6 = EndpointWithUUID;
  if (EndpointWithUUID && *((_DWORD *)EndpointWithUUID + 7) == 10 && (uint64_t v7 = EndpointWithUUID[7]) != 0)
  {
    __int16 v8 = *(const UInt8 **)(v7 + 24);
    unsigned __int16 v9 = acc_auth_protocol_sizeofMessage((uint64_t)v8, *(_DWORD *)(v7 + 32), 0LL, 0LL);
    accAuthProtocol_endpoint_sendOutgoingData(v7, v8, v9);
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 55)
    {
      int v10 = *(os_log_s **)(gLogObjects + 432);
    }

    else
    {
      int v10 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      if (v6)
      {
        BOOL v11 = *((_DWORD *)v6 + 7) == 10;
        BOOL v12 = v6[7] != 0;
      }

      else
      {
        BOOL v11 = 0;
        BOOL v12 = 0;
      }

      uint64_t v13 = *(void *)(a1 + 32);
      int v14 = 67109890;
      *(_DWORD *)int v15 = v6 != 0LL;
      *(_WORD *)&uint8_t v15[4] = 1024;
      *(_DWORD *)&v15[6] = v11;
      *(_WORD *)uint64_t v16 = 1024;
      *(_DWORD *)&v16[2] = v12;
      __int16 v17 = 2112;
      uint64_t v18 = v13;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "accAuthProtocol sendAuthSetupStart: no endpoint(%d) or wrong protocol(%d) or no protocolEndpoint(%d) for endpointUUID %@ !!",  (uint8_t *)&v14,  0x1Eu);
    }
  }

  CFRelease(*(CFTypeRef *)(a1 + 32));
}

id _getUSBModePluginInstance()
{
  id v0 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformPluginManager sharedManager](&OBJC_CLASS___ACCPlatformPluginManager, "sharedManager"));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( [v0 pluginInstanceWithProtocol:&OBJC_PROTOCOL___ACCPlatformUSBModePluginProtocol fallbackToTransportPlugins:1]);

  return v1;
}

id _getUSBFaultPluginInstance()
{
  id v0 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformPluginManager sharedManager](&OBJC_CLASS___ACCPlatformPluginManager, "sharedManager"));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( [v0 pluginInstanceWithProtocol:&OBJC_PROTOCOL___ACCPlatformUSBFaultPluginProtocol fallbackToTransportPlugins:0]);

  return v1;
}

uint64_t platform_usb_send_notification(const void *a1, const void *a2, const void *a3)
{
  uint64_t v3 = 0LL;
  if (a1 && a2)
  {
    CFMutableDataRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionaryAddValue(Mutable, @"USBMode", a2);
    if (a3) {
      CFDictionaryAddValue(Mutable, @"USBFaultState", a3);
    }
    uint64_t v3 = accFeatureHandlers_invokeHandler(a1, 12, (uint64_t)Mutable);
    if (Mutable) {
      CFRelease(Mutable);
    }
  }

  return v3;
}

id platform_usb_get_mode(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformUSBManager sharedManager](&OBJC_CLASS___ACCPlatformUSBManager, "sharedManager"));
  id v3 = [v2 getUSBModeForEndpointUUID:a1];

  return v3;
}

id platform_usb_set_mode_monitoring(uint64_t a1, uint64_t a2)
{
  int v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformUSBManager sharedManager](&OBJC_CLASS___ACCPlatformUSBManager, "sharedManager"));
  id v5 = [v4 setUSBModeMonitoringForEndpointUUID:a1 withState:a2];

  return v5;
}

id platform_usb_set_fault_monitoring(uint64_t a1, uint64_t a2)
{
  int v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformUSBManager sharedManager](&OBJC_CLASS___ACCPlatformUSBManager, "sharedManager"));
  id v5 = [v4 setUSBFaultMonitoringForEndpointUUID:a1 withState:a2];

  return v5;
}

id platform_usb_set_mode(uint64_t a1, uint64_t a2)
{
  int v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformUSBManager sharedManager](&OBJC_CLASS___ACCPlatformUSBManager, "sharedManager"));
  id v5 = [v4 setUSBModeForEndpointUUID:a1 newMode:a2];

  return v5;
}

void acc_platform_loggingProtocol_registerForPrefsNotification()
{
  if (acc_platform_loggingProtocol_registerForPrefsNotification_onceToken != -1) {
    dispatch_once(&acc_platform_loggingProtocol_registerForPrefsNotification_onceToken, &__block_literal_global_35);
  }
}

void __acc_platform_loggingProtocol_registerForPrefsNotification_block_invoke(id a1)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver( DarwinNotifyCenter,  0LL,  (CFNotificationCallback)receivedNotification_0,  @"com.apple.iapd.LoggingPreferencesChangedNotification",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
}

void receivedNotification_0()
{
  if (gLogObjects && gNumLogObjects >= 53)
  {
    id v0 = (os_log_s *)*(id *)(gLogObjects + 416);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v0 = (os_log_s *)&_os_log_default;
    id v1 = &_os_log_default;
  }

  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    LOWORD(v4[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_INFO,  "Logs enabled from Accessory Developer Profile.",  (uint8_t *)v4,  2u);
  }

  _accessoryDeveloperLoggingEnabled = CFPreferencesGetAppBooleanValue( @"CarPlayLoggingEnableAccessoryLogs",  @"com.apple.CoreAccessories",  0LL) != 0;
  if (gLogObjects && gNumLogObjects >= 53)
  {
    uint64_t v2 = (os_log_s *)*(id *)(gLogObjects + 416);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v2 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = _accessoryDeveloperLoggingEnabled;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "Logs enabled from Accessory Developer Profile. value: %d",  (uint8_t *)v4,  8u);
  }
}

void acc_platform_loggingProtocol_registerForStartCarPlayLoggingNotification(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (!startLogsNotificationObservers)
    {
      int v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      id v5 = (void *)startLogsNotificationObservers;
      startLogsNotificationObservers = (uint64_t)v4;
    }

    int v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@", a1));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([(id)startLogsNotificationObservers objectForKey:v6]);

    if (v7)
    {
      if (gLogObjects && gNumLogObjects >= 53)
      {
        __int16 v8 = (os_log_s *)*(id *)(gLogObjects + 416);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        __int16 v8 = (os_log_s *)&_os_log_default;
        id v11 = &_os_log_default;
      }

      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Already registered for Request Accessory Logs notification.",  buf,  2u);
      }
    }

    else
    {
      unsigned __int16 v9 = (void *)startLogsNotificationObservers;
      int v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithPointer:](&OBJC_CLASS___NSValue, "valueWithPointer:", a2));
      [v9 setObject:v10 forKey:v6];

      if (acc_platform_loggingProtocol_registerForStartCarPlayLoggingNotification_onceToken != -1) {
        dispatch_once( &acc_platform_loggingProtocol_registerForStartCarPlayLoggingNotification_onceToken,  &__block_literal_global_14_0);
      }
    }
  }

void __acc_platform_loggingProtocol_registerForStartCarPlayLoggingNotification_block_invoke(id a1)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver( DarwinNotifyCenter,  0LL,  (CFNotificationCallback)receivedStartCarPlayAccessoryLoggingNotification,  @"com.apple.iapd.StartCarPlayAccessoryLogging",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
}

void receivedStartCarPlayAccessoryLoggingNotification()
{
  if ([(id)startLogsNotificationObservers count])
  {
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    __int128 v9 = 0u;
    __int128 v10 = 0u;
    id v0 = (id)startLogsNotificationObservers;
    id v1 = [v0 countByEnumeratingWithState:&v9 objects:v14 count:16];
    if (v1)
    {
      id v2 = v1;
      uint64_t v3 = *(void *)v10;
      do
      {
        for (int i = 0LL; i != v2; int i = (char *)i + 1)
        {
          if (*(void *)v10 != v3) {
            objc_enumerationMutation(v0);
          }
          id v5 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( (id)startLogsNotificationObservers,  "objectForKey:",  *(void *)(*((void *)&v9 + 1) + 8 * (void)i),  (void)v9));
          id v6 = [v5 pointerValue];

          if (v6)
          {
            BOOL AccessoryLoggingLevel = readAccessoryLoggingLevel();
            loggingProtocol_requestLogsFromAccessory(AccessoryLoggingLevel, (uint64_t)v6);
          }
        }

        id v2 = [v0 countByEnumeratingWithState:&v9 objects:v14 count:16];
      }

      while (v2);
    }
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 53)
    {
      id v0 = *(id *)(gLogObjects + 416);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v0 = &_os_log_default;
      id v8 = &_os_log_default;
    }

    if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v0,  OS_LOG_TYPE_INFO,  "No connected logging session found! Ignoring Request Accessory Logs request.",  buf,  2u);
    }
  }
}

void acc_platform_loggingProtocol_registerForStopCarPlayLoggingNotification(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (!stopLogsNotificationObservers)
    {
      int v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      id v5 = (void *)stopLogsNotificationObservers;
      stopLogsNotificationObservers = (uint64_t)v4;
    }

    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@", a1));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([(id)stopLogsNotificationObservers objectForKey:v6]);

    if (v7)
    {
      if (gLogObjects && gNumLogObjects >= 53)
      {
        id v8 = (os_log_s *)*(id *)(gLogObjects + 416);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v8 = (os_log_s *)&_os_log_default;
        id v11 = &_os_log_default;
      }

      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Already registered for Stop Accessory Logs notification.",  buf,  2u);
      }
    }

    else
    {
      __int128 v9 = (void *)stopLogsNotificationObservers;
      __int128 v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithPointer:](&OBJC_CLASS___NSValue, "valueWithPointer:", a2));
      [v9 setObject:v10 forKey:v6];

      if (acc_platform_loggingProtocol_registerForStopCarPlayLoggingNotification_onceToken != -1) {
        dispatch_once( &acc_platform_loggingProtocol_registerForStopCarPlayLoggingNotification_onceToken,  &__block_literal_global_17);
      }
    }
  }

void __acc_platform_loggingProtocol_registerForStopCarPlayLoggingNotification_block_invoke(id a1)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver( DarwinNotifyCenter,  0LL,  (CFNotificationCallback)receivedStopCarPlayAccessoryLoggingNotification,  @"com.apple.iapd.StopCarPlayAccessoryLogging",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
}

void receivedStopCarPlayAccessoryLoggingNotification()
{
  if ([(id)stopLogsNotificationObservers count])
  {
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    __int128 v8 = 0u;
    __int128 v9 = 0u;
    id v0 = (id)stopLogsNotificationObservers;
    id v1 = [v0 countByEnumeratingWithState:&v8 objects:v13 count:16];
    if (v1)
    {
      id v2 = v1;
      uint64_t v3 = *(void *)v9;
      do
      {
        for (int i = 0LL; i != v2; int i = (char *)i + 1)
        {
          if (*(void *)v9 != v3) {
            objc_enumerationMutation(v0);
          }
          id v5 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( (id)stopLogsNotificationObservers,  "objectForKey:",  *(void *)(*((void *)&v8 + 1) + 8 * (void)i),  (void)v8));
          id v6 = [v5 pointerValue];

          if (v6) {
            loggingProtocol_stopLogsFromAccessory(2u, (uint64_t)v6);
          }
        }

        id v2 = [v0 countByEnumeratingWithState:&v8 objects:v13 count:16];
      }

      while (v2);
    }
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 53)
    {
      id v0 = *(id *)(gLogObjects + 416);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v0 = &_os_log_default;
      id v7 = &_os_log_default;
    }

    if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v0,  OS_LOG_TYPE_INFO,  "No connected logging session found! Ignoring Stop Accessory Logs request.",  buf,  2u);
    }
  }
}

BOOL readAccessoryLoggingLevel()
{
  id v0 = (const __CFString *)CFPreferencesCopyAppValue( @"CarPlayLoggingAccessoryLogLevel",  @"com.apple.CoreAccessories");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  BOOL v2 = CFStringCompare(v0, @"debug", 1uLL) == kCFCompareEqualTo;
  CFRelease(v1);
  return v2;
}

id acc_platform_loggingProtocol_removeNotificationObserver(id result)
{
  if (result)
  {
    id v1 = result;
    [(id)startLogsNotificationObservers removeObjectForKey:result];
    return [(id)stopLogsNotificationObservers removeObjectForKey:v1];
  }

  return result;
}

void acc_platform_loggingProtocol_logSessionSync(uint64_t a1)
{
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v2 timeIntervalSince1970];
  double v4 = v3 + (double)*(unint64_t *)(a1 + 40) / -1000000000.0;

  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 48);
  id v8 = **(id **)(a1 + 32);
  __int128 v9 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", a1 + 57);
  __int128 v10 = (void *)objc_claimAutoreleasedReturnValue(-[NSUUID UUIDString](v9, "UUIDString"));
  id v14 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@; SYNC; EP_UUID=%@; PROT_VER=%hhu; CONN_WALL_TIME=%lluns (0x%llX); CONN_ACC_TIME=%lluns (0x%llX); SEC_SINCE_CONN=%.6f; STR_TABLE_ID=%@; ACC_NAME='%s'; ACC_MODEL_ID='%s'; ACC_MFR='%s'",
                @"LOGGING_PROTOCOL",
                v8,
                v6,
                v5,
                v5,
                v7,
                v7,
                *(void *)&v4,
                v10,
                *(void *)(a1 + 80),
                *(void *)(a1 + 96),
                *(void *)(a1 + 88)));

  __int128 v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%s-%@",  @"accLogging",  *(void *)(a1 + 80),  v8));
  id LogFileWriter = getLogFileWriter(v11);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(LogFileWriter);
  [v13 log:v14];
}

id getLogFileWriter(void *a1)
{
  id v1 = a1;
  BOOL v2 = (void *)_logFileWriters;
  if (!_logFileWriters)
  {
    double v3 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    double v4 = (void *)_logFileWriters;
    _logFileWriters = (uint64_t)v3;

    BOOL v2 = (void *)_logFileWriters;
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v1]);

  if (!v5)
  {
    id v6 = -[LogFileWriter initFor:fileLabel:]( objc_alloc(&OBJC_CLASS___LogFileWriter),  "initFor:fileLabel:",  @"accessoryd",  v1);
    [(id)_logFileWriters setObject:v6 forKeyedSubscript:v1];
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([(id)_logFileWriters objectForKeyedSubscript:v1]);
  return v7;
}

void acc_platform_loggingProtocol_logLogEntry(unsigned int *a1, uint64_t a2)
{
  unint64_t v4 = *((void *)a1 + 1);
  double v5 = (double)v4 / 1000000000.0;
  double v6 = (double)(v4 - *(void *)(a2 + 40) + *(void *)(a2 + 48)) / 1000000000.0;
  id v7 = **(id **)(a2 + 32);
  id v8 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
  -[NSDateFormatter setDateFormat:](v8, "setDateFormat:", @"yyyy-MM-dd HH:mm:ss.SSSSSS ZZZ");
  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSince1970:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSince1970:", v5));
  id v14 = (id)objc_claimAutoreleasedReturnValue(-[NSDateFormatter stringFromDate:](v8, "stringFromDate:", v9));

  __int128 v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@; ENTRY; SEQ_NUM=%u; WALL_TS='%@'; WALL_UNIX_TIME=%.6fs; ACC_TIME=%.6fs; LVL=%d; SYS='%s'; CAT='%s'; DES='%s'",
                    @"LOGGING_PROTOCOL",
                    *a1,
                    v14,
                    *(void *)&v5,
                    *(void *)&v6,
                    a1[4],
                    *((void *)a1 + 3),
                    *((void *)a1 + 5),
                    *((void *)a1 + 6)));
  __int128 v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%s-%@",  @"accLogging",  *(void *)(a2 + 80),  v7));

  id LogFileWriter = getLogFileWriter(v11);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(LogFileWriter);
  [v13 log:v10];
}

void acc_platform_loggingProtocol_logIndexBasedLogEntry(unsigned int *a1, uint64_t a2)
{
  unint64_t v4 = *((void *)a1 + 1);
  double v5 = (double)v4 / 1000000000.0;
  double v6 = (double)(v4 - *(void *)(a2 + 40) + *(void *)(a2 + 48)) / 1000000000.0;
  id v16 = **(id **)(a2 + 32);
  id v7 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
  -[NSDateFormatter setDateFormat:](v7, "setDateFormat:", @"yyyy-MM-dd HH:mm:ss.SSSSSS ZZZ");
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSince1970:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSince1970:", v5));
  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue(-[NSDateFormatter stringFromDate:](v7, "stringFromDate:", v8));

  __int128 v10 = objc_alloc_init(&OBJC_CLASS___NSMutableString);
  -[NSMutableString appendFormat:]( v10,  "appendFormat:",  @"%@; INDEX_BASED_ENTRY; SEQ_NUM=%u; WALL_TS='%@'; WALL_UNIX_TIME=%.6fs; ACC_TIME=%.6fs; LVL=%d; TABLE_INDEX=%u; NUM_PARAMS=%u; ",
    @"LOGGING_PROTOCOL",
    *a1,
    v9,
    *(void *)&v5,
    *(void *)&v6,
    a1[4],
    a1[5],
    *((unsigned __int8 *)a1 + 24));
  if (*((_BYTE *)a1 + 24))
  {
    unint64_t v11 = 0LL;
    do
    {
      unint64_t v12 = v11 + 1;
      -[NSMutableString appendFormat:]( v10,  "appendFormat:",  @"PARAM_%d=%llu; ",
        v11 + 1,
        *(void *)(*((void *)a1 + 4) + 8 * v11));
      unint64_t v11 = v12;
    }

    while (v12 < *((unsigned __int8 *)a1 + 24));
  }

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%s-%@",  @"accLogging",  *(void *)(a2 + 80),  v16));
  id LogFileWriter = getLogFileWriter(v13);
  int v15 = (void *)objc_claimAutoreleasedReturnValue(LogFileWriter);
  [v15 log:v10];
}

void acc_platform_loggingProtocol_logBinaryBlock(uint64_t a1, unsigned int a2, uint64_t a3)
{
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%s-%@-%u-%llu-%llu",  @"accBinaryLogging",  *(void *)(a3 + 80),  **(void **)(a3 + 32),  *(unsigned int *)(a3 + 120),  *(void *)(a3 + 128),  *(void *)(a3 + 136)));
  double v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", a1, a2));
  id LogFileWriter = getLogFileWriter(v8);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(LogFileWriter);
  [v7 logRawData:v5];
}

void acc_platform_loggingProtocol_postLoggingCleanup()
{
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v0 = (id)_logFileWriters;
  id v1 = [v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v1)
  {
    id v2 = v1;
    uint64_t v3 = *(void *)v8;
    do
    {
      for (int i = 0LL; i != v2; int i = (char *)i + 1)
      {
        if (*(void *)v8 != v3) {
          objc_enumerationMutation(v0);
        }
        if (_logFileWriters)
        {
          double v5 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( (id)_logFileWriters,  "objectForKeyedSubscript:",  *(void *)(*((void *)&v7 + 1) + 8 * (void)i),  (void)v7));
          [v5 flush];
        }
      }

      id v2 = [v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }

    while (v2);
  }

  [(id)_logFileWriters removeAllObjects];
  double v6 = (void *)_logFileWriters;
  _logFileWriters = 0LL;
}

uint64_t __iAP2BuffPoolInitBuffList(uint64_t result)
{
  *(void *)(result + 16) = 0LL;
  return result;
}

void *__iAP2BuffPoolGetBuff(uint64_t a1, size_t a2)
{
  return calloc(1uLL, a2);
}

void __iAP2BuffPoolReturnBuff(int a1, void *a2)
{
}

_BYTE *__iAP2BuffPoolGetSendPacket(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned int MaxPayloadSize = iAP2LinkGetMaxPayloadSize(v3, 0LL);
  int v5 = iAP2LinkCurPckHdrSize(v3);
  int v6 = iAP2LinkCurPckChksumSize(v3);
  if (MaxPayloadSize >= a2) {
    unsigned int MaxPayloadSize = a2;
  }
  __int128 v7 = calloc(1uLL, 0x50uLL);
  if (!v7) {
    __iAP2BuffPoolGetSendPacket_cold_1();
  }
  __int128 v8 = v7;
  size_t v9 = MaxPayloadSize + v5 + v6;
  v7[60] = 0;
  __int128 v10 = (char *)calloc(1uLL, v9);
  *((void *)v8 + _Block_object_dispose((const void *)(v1 - 144), 8) = v10;
  if (!v10) {
    __iAP2BuffPoolGetSendPacket_cold_2();
  }
  *((_DWORD *)v8 + 10) = v9;
  *((void *)v8 + 9) = &v10[v6 + 8];
  *(_WORD *)(v8 + 61) = ((iAP2LinkGetChecksumType(v3) & 3) << 12) | *(_WORD *)(v8 + 61) & 0xCFFF;
  return v8;
}

void __iAP2BuffPoolReturnSendPacket(uint64_t a1, void **a2)
{
}

_BYTE *__iAP2BuffPoolGetRecvPacket(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = iAP2LinkCurPckHdrSize(v3);
  int v5 = iAP2LinkCurPckChksumSize(v3);
  int v6 = v5 + v4;
  if (__CFADD__(a2, v5 + v4)) {
    return 0LL;
  }
  int v8 = v5;
  size_t v9 = calloc(1uLL, 0x50uLL);
  if (!v9) {
    __iAP2BuffPoolGetRecvPacket_cold_1();
  }
  __int128 v7 = v9;
  size_t v10 = (v6 + a2);
  v9[60] = 0;
  unint64_t v11 = (char *)calloc(1uLL, v10);
  *((void *)v7 + _Block_object_dispose((const void *)(v1 - 144), 8) = v11;
  if (!v11) {
    __iAP2BuffPoolGetRecvPacket_cold_2();
  }
  *((_DWORD *)v7 + 10) = v10;
  *((void *)v7 + 9) = &v11[v8 + 8];
  *(_WORD *)(v7 + 61) = ((iAP2LinkGetChecksumType(v3) & 3) << 12) | *(_WORD *)(v7 + 61) & 0xCFFF;
  return v7;
}

uint64_t oobPairing_bleToOobPairingType(int a1)
{
  if (a1 == 1) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 2;
  }
  if (a1) {
    return v1;
  }
  else {
    return 0LL;
  }
}

uint64_t qiAuth_util_generateNonce(uint64_t a1, void *a2, unsigned int a3)
{
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 60)
    {
      int v6 = (os_log_s *)*(id *)(gLogObjects + 472);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v6 = (os_log_s *)&_os_log_default;
      id v7 = &_os_log_default;
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      qiAuth_util_generateNonce_cold_1();
    }

    if (a3 && a2 && !*(_DWORD *)(a1 + 8)) {
      arc4random_buf(a2, a3);
    }
  }

  return 4294967294LL;
}

uint64_t qiAuth_util_verifyCertificateChain( uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6)
{
  size_t v9 = &startLogsNotificationObservers;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 60)
    {
      uint64_t v13 = (os_log_s *)*(id *)(gLogObjects + 472);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v13 = (os_log_s *)&_os_log_default;
      id v17 = &_os_log_default;
    }

    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      int v25 = *(_DWORD *)(a1 + 8);
      int v39 = 136316418;
      __int16 v40 = "qiAuth_util_verifyCertificateChain";
      __int16 v41 = 1024;
      int v42 = 176;
      __int16 v43 = 1024;
      *(_DWORD *)int v44 = v25;
      *(_WORD *)&v44[4] = 1024;
      *(_DWORD *)&_BYTE v44[6] = a2;
      __int16 v45 = 1024;
      int v46 = a4;
      __int16 v47 = 1024;
      unsigned int v48 = a6;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s:%d role %d, slot %d, certChainRootHashLength %d, certChainLength %d",  (uint8_t *)&v39,  0x2Au);
    }

    id v14 = 0LL;
    uint64_t v16 = 4294967294LL;
    if (a6 <= 0x600 && a5 && a4 == 32 && a3 && a2 <= 3)
    {
      id v15 = 0LL;
      if (!*(_DWORD *)(a1 + 8))
      {
        uint64_t v18 = *(id **)(a1 + 16);
        if (v18)
        {
          id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", a5, a6));
          unsigned int v19 = (void *)objc_claimAutoreleasedReturnValue(+[MFAACertificateManager sharedManager](&OBJC_CLASS___MFAACertificateManager, "sharedManager"));
          id v15 = [v19 copyParsedCertificateChainInfo:v14];

          if (gLogObjects && gNumLogObjects >= 60)
          {
            unsigned int v20 = (os_log_s *)*(id *)(gLogObjects + 472);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            unsigned int v20 = (os_log_s *)&_os_log_default;
            id v21 = &_os_log_default;
          }

          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            id v22 = objc_claimAutoreleasedReturnValue([v15 description]);
            id v23 = [v22 UTF8String];
            if (v23)
            {
              size_t v9 = (uint64_t *) objc_claimAutoreleasedReturnValue([v15 description]);
              int v24 = (const char *)[v9 UTF8String];
            }

            else
            {
              int v24 = "<nil>";
            }

            int v39 = 136315650;
            __int16 v40 = "qiAuth_util_verifyCertificateChain";
            __int16 v41 = 1024;
            int v42 = 196;
            __int16 v43 = 2080;
            *(void *)int v44 = v24;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "%s:%d parsedCertChainInfo = %s",  (uint8_t *)&v39,  0x1Cu);
            if (v23) {

            }
            size_t v9 = &startLogsNotificationObservers;
          }

          unsigned int v26 = (void *)objc_claimAutoreleasedReturnValue(+[MFAACertificateManager sharedManager](&OBJC_CLASS___MFAACertificateManager, "sharedManager"));
          id v27 = [v26 copyEvaluatedCertificateChainInfo:v15 forSpecificType:128];
          id v28 = *v18;
          *uint64_t v18 = v27;

          if (gLogObjects && gNumLogObjects >= 60)
          {
            int v29 = (os_log_s *)*(id *)(gLogObjects + 472);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            int v29 = (os_log_s *)&_os_log_default;
            id v30 = &_os_log_default;
          }

          if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
          {
            id v31 = objc_claimAutoreleasedReturnValue([*v18 description]);
            id v32 = [v31 UTF8String];
            if (v32)
            {
              size_t v9 = (uint64_t *) objc_claimAutoreleasedReturnValue([*v18 description]);
              __int128 v33 = (const char *)[v9 UTF8String];
            }

            else
            {
              __int128 v33 = "<nil>";
            }

            int v39 = 136315650;
            __int16 v40 = "qiAuth_util_verifyCertificateChain";
            __int16 v41 = 1024;
            int v42 = 215;
            __int16 v43 = 2080;
            *(void *)int v44 = v33;
            _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_INFO,  "%s:%d certChainInfo = %s",  (uint8_t *)&v39,  0x1Cu);
            if (v32) {
          }
            }

          if (*v18)
          {
            uint64_t v16 = 0LL;
          }

          else if (acc_userDefaults_BOOLForKey((uint64_t)@"MPPAuthEnablePretendAuth"))
          {
            if (gLogObjects && gNumLogObjects >= 60)
            {
              uint64_t v37 = (os_log_s *)*(id *)(gLogObjects + 472);
            }

            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
              uint64_t v37 = (os_log_s *)&_os_log_default;
              id v38 = &_os_log_default;
            }

            if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
              qiAuth_util_verifyCertificateChain_cold_2();
            }

            uint64_t v16 = 0LL;
          }

          else
          {
            uint64_t v16 = 0xFFFFFFFFLL;
          }
        }

        else
        {
          id v14 = 0LL;
          id v15 = 0LL;
        }
      }
    }

    else
    {
      id v15 = 0LL;
    }
  }

  else
  {
    id v14 = 0LL;
    id v15 = 0LL;
    uint64_t v16 = 4294967294LL;
  }

  if (gLogObjects && gNumLogObjects >= 60)
  {
    int v34 = (os_log_s *)*(id *)(gLogObjects + 472);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v34 = (os_log_s *)&_os_log_default;
    id v35 = &_os_log_default;
  }

  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    int v39 = 136316418;
    __int16 v40 = "qiAuth_util_verifyCertificateChain";
    __int16 v41 = 1024;
    int v42 = 239;
    __int16 v43 = 1024;
    *(_DWORD *)int v44 = v16;
    *(_WORD *)&v44[4] = 1024;
    *(_DWORD *)&_BYTE v44[6] = a2;
    __int16 v45 = 1024;
    int v46 = a4;
    __int16 v47 = 1024;
    unsigned int v48 = a6;
    _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "%s:%d result %d, slot %d, certChainRootHashLength %d, certChainLength %d",  (uint8_t *)&v39,  0x2Au);
  }

  return v16;
}

uint64_t qiAuth_util_verifyChallengeSignature( uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6, uint64_t a7, unsigned int a8, uint64_t a9, unsigned __int16 a10)
{
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 60)
    {
      id v15 = (os_log_s *)*(id *)(gLogObjects + 472);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v15 = (os_log_s *)&_os_log_default;
      id v20 = &_os_log_default;
    }

    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      int v29 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)buf = 136316930;
      __int16 v83 = "qiAuth_util_verifyChallengeSignature";
      __int16 v84 = 1024;
      int v85 = 259;
      __int16 v86 = 1024;
      *(_DWORD *)__int16 v87 = v29;
      *(_WORD *)&v87[4] = 1024;
      *(_DWORD *)&v87[6] = a2;
      __int16 v88 = 1024;
      int v89 = a4;
      __int16 v90 = 1024;
      unsigned int v91 = a6;
      __int16 v92 = 1024;
      unsigned int v93 = a8;
      __int16 v94 = 1024;
      int v95 = a10;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "%s:%d role %d, slot %d, certChainRootHashLength %d, certChainLength %d, challengeLen %d, signatureSize %d",  buf,  0x36u);
    }

    id v16 = 0LL;
    uint64_t v19 = 4294967294LL;
    if (a2 > 3)
    {
      id v17 = 0LL;
      id v18 = 0LL;
      int v73 = 0LL;
    }

    else
    {
      id v17 = 0LL;
      id v18 = 0LL;
      int v73 = 0LL;
      if (!*(_DWORD *)(a1 + 8))
      {
        unsigned int v69 = *(id **)(a1 + 16);
        if (v69)
        {
          id v21 = &ACCConnectionInfoCopyLocalizedAccessoryNameCFPrivate_ptr;
          uint64_t v22 = objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", a5, a6));
          id v23 = (void *)objc_claimAutoreleasedReturnValue(+[MFAACertificateManager sharedManager](&OBJC_CLASS___MFAACertificateManager, "sharedManager"));
          int v73 = (void *)v22;
          id v16 = [v23 copyParsedCertificateChainInfo:v22];

          unsigned int v67 = a6;
          if (gLogObjects && gNumLogObjects >= 60)
          {
            int v24 = (os_log_s *)*(id *)(gLogObjects + 472);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            int v24 = (os_log_s *)&_os_log_default;
            id v25 = &_os_log_default;
          }

          unsigned int v68 = a8;
          if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            id v26 = objc_claimAutoreleasedReturnValue([v16 description]);
            id v27 = [v26 UTF8String];
            if (v27)
            {
              id v18 = objc_claimAutoreleasedReturnValue([v16 description]);
              id v28 = (const char *)[v18 UTF8String];
            }

            else
            {
              id v28 = "<nil>";
            }

            *(_DWORD *)buf = 136315650;
            __int16 v83 = "qiAuth_util_verifyChallengeSignature";
            __int16 v84 = 1024;
            int v85 = 275;
            __int16 v86 = 2080;
            *(void *)__int16 v87 = v28;
            _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "%s:%d parsedCertChainInfo = %s",  buf,  0x1Cu);
            if (v27) {
          }
            }

          __int128 v79 = 0u;
          __int128 v80 = 0u;
          __int128 v77 = 0u;
          __int128 v78 = 0u;
          id obj = (id)objc_claimAutoreleasedReturnValue([v16 allKeys]);
          id v30 = [obj countByEnumeratingWithState:&v77 objects:v81 count:16];
          if (v30)
          {
            id v31 = v30;
            uint64_t v32 = *(void *)v78;
            do
            {
              for (int i = 0LL; i != v31; int i = (char *)i + 1)
              {
                if (*(void *)v78 != v32) {
                  objc_enumerationMutation(obj);
                }
                uint64_t v34 = *(void *)(*((void *)&v77 + 1) + 8LL * (void)i);
                id v35 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKey:v34]);
                if (v35)
                {
                  uint64_t v36 = objc_opt_class(v21[228]);
                  if ((objc_opt_isKindOfClass(v35, v36) & 1) != 0)
                  {
                    int v76 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"ParsedCertChainInfo-%@",  v34));
                    id v37 = objc_claimAutoreleasedReturnValue([v76 description]);
                    id v18 = v21;
                    id v38 = [v37 UTF8String];
                    id v39 = v31;
                    uint64_t v40 = v32;
                    id v41 = v16;
                    id v42 = v35;
                    id v43 = [v42 bytes];
                    int v44 = v42;
                    id v16 = v41;
                    uint64_t v32 = v40;
                    id v31 = v39;
                    unsigned __int16 v45 = (unsigned __int16)[v44 length];
                    uint64_t v46 = (uint64_t)v38;
                    id v21 = (_UNKNOWN **)v18;
                    qiAuth_util_logCertData((const void **)a1, v46, (uint64_t)v43, v45, 1);
                  }
                }
              }

              id v31 = [obj countByEnumeratingWithState:&v77 objects:v81 count:16];
            }

            while (v31);
          }

          __int16 v47 = (void *)objc_claimAutoreleasedReturnValue(+[MFAACertificateManager sharedManager](&OBJC_CLASS___MFAACertificateManager, "sharedManager"));
          id v48 = [v47 copyEvaluatedCertificateChainInfo:v16 forSpecificType:128];
          __int16 v49 = v69;
          id v50 = *v69;
          *unsigned int v69 = v48;

          if (gLogObjects && gNumLogObjects >= 60)
          {
            __int16 v51 = (os_log_s *)*(id *)(gLogObjects + 472);
            a8 = v68;
          }

          else
          {
            a8 = v68;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            __int16 v51 = (os_log_s *)&_os_log_default;
            id v52 = &_os_log_default;
          }

          if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
          {
            id v53 = objc_claimAutoreleasedReturnValue([*v69 description]);
            id v54 = [v53 UTF8String];
            if (v54)
            {
              id v18 = objc_claimAutoreleasedReturnValue([*v69 description]);
              int v55 = (const char *)[v18 UTF8String];
            }

            else
            {
              int v55 = "<nil>";
            }

            *(_DWORD *)buf = 136315650;
            __int16 v83 = "qiAuth_util_verifyChallengeSignature";
            __int16 v84 = 1024;
            int v85 = 292;
            __int16 v86 = 2080;
            *(void *)__int16 v87 = v55;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_INFO, "%s:%d certChainInfo = %s", buf, 0x1Cu);
            if (v54) {

            }
            __int16 v49 = v69;
          }

          if (!*v49)
          {
            if (acc_userDefaults_BOOLForKey((uint64_t)@"MPPAuthEnablePretendAuth"))
            {
              if (gLogObjects && gNumLogObjects >= 60)
              {
                __int16 v56 = (os_log_s *)*(id *)(gLogObjects + 472);
              }

              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
                __int16 v56 = (os_log_s *)&_os_log_default;
                id v57 = &_os_log_default;
              }

              if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
                qiAuth_util_verifyChallengeSignature_cold_5();
              }

              objc_storeStrong(v49, v16);
            }

            else if (!acc_userDefaults_BOOLForKey((uint64_t)@"MPPAuthEnablePretendAuth"))
            {
              id v17 = 0LL;
              id v18 = 0LL;
              uint64_t v19 = 0xFFFFFFFFLL;
LABEL_75:
              a6 = v67;
              goto LABEL_87;
            }
          }

          id v17 = (void *)objc_claimAutoreleasedReturnValue([v21[228] dataWithBytes:a7 length:a8]);
          id v18 = (id)objc_claimAutoreleasedReturnValue([v21[228] dataWithBytes:a9 length:a10]);
          uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue(+[MFAACertificateManager sharedManager](&OBJC_CLASS___MFAACertificateManager, "sharedManager"));
          unsigned int v59 = [v58 verifyNonceSignature:*v49 nonce:v17 signature:v18];

          if (gLogObjects && gNumLogObjects >= 60)
          {
            unsigned int v60 = (os_log_s *)*(id *)(gLogObjects + 472);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            unsigned int v60 = (os_log_s *)&_os_log_default;
            id v61 = &_os_log_default;
          }

          if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            __int16 v83 = "qiAuth_util_verifyChallengeSignature";
            __int16 v84 = 1024;
            int v85 = 327;
            __int16 v86 = 1024;
            *(_DWORD *)__int16 v87 = v59 - 1;
            _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_INFO,  "%s:%d verifyNonceSignature result %d",  buf,  0x18u);
          }

          if ((v59 & 1) != 0)
          {
            uint64_t v19 = 0LL;
            goto LABEL_75;
          }

          a6 = v67;
          if (acc_userDefaults_BOOLForKey((uint64_t)@"MPPAuthEnablePretendAuth"))
          {
            if (gLogObjects && gNumLogObjects >= 60)
            {
              uint64_t v62 = (os_log_s *)*(id *)(gLogObjects + 472);
            }

            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
              uint64_t v62 = (os_log_s *)&_os_log_default;
              id v63 = &_os_log_default;
            }

            if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR)) {
              qiAuth_util_verifyChallengeSignature_cold_2();
            }

            uint64_t v19 = 0LL;
          }

          else
          {
            uint64_t v19 = 0xFFFFFFFFLL;
          }
        }

        else
        {
          id v16 = 0LL;
          id v17 = 0LL;
          id v18 = 0LL;
          int v73 = 0LL;
        }
      }
    }
  }

  else
  {
    id v16 = 0LL;
    id v17 = 0LL;
    id v18 = 0LL;
    int v73 = 0LL;
    uint64_t v19 = 4294967294LL;
  }

void qiAuth_util_logCertData(const void **a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  if (a1)
  {
    if (a3)
    {
      if (a4)
      {
        EndpointWithUUID = acc_manager_getEndpointWithUUID(*a1);
        if (EndpointWithUUID)
        {
          size_t v10 = (uint64_t *)*((void *)EndpointWithUUID + 7);
          if (v10) {
            acc_platform_packetLogging_logData( *v10,  (uint64_t)+[NSString stringWithCString:encoding:]( &OBJC_CLASS___NSString,  "stringWithCString:encoding:",  a2,  1LL),  (uint64_t)@"QiAuth",  +[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", a3, a4),  a5);
          }
        }
      }
    }
  }

void qiAuth_util_notifySlotAuthState(uint64_t a1, unsigned int a2, int a3)
{
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 60)
    {
      int v6 = (os_log_s *)*(id *)(gLogObjects + 472);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v6 = (os_log_s *)&_os_log_default;
      id v7 = &_os_log_default;
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      int v21 = *(_DWORD *)(a1 + 8);
      int v22 = 136316162;
      id v23 = "qiAuth_util_notifySlotAuthState";
      __int16 v24 = 1024;
      int v25 = 348;
      __int16 v26 = 1024;
      *(_DWORD *)id v27 = v21;
      *(_WORD *)&v27[4] = 1024;
      *(_DWORD *)&v27[6] = a2;
      *(_WORD *)id v28 = 1024;
      *(_DWORD *)&v28[2] = a3;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "%s:%d role %d, slot %d, authState %d",  (uint8_t *)&v22,  0x24u);
    }

    if (a2 <= 3 && !*(_DWORD *)(a1 + 8))
    {
      EndpointWithUUID = acc_manager_getEndpointWithUUID(*(const void **)a1);
      if (EndpointWithUUID)
      {
        uint64_t v9 = EndpointWithUUID[7];
        if (v9)
        {
          else {
            int v10 = dword_10019EB68[a3 - 1];
          }
          if (gLogObjects && gNumLogObjects >= 60)
          {
            unint64_t v11 = (os_log_s *)*(id *)(gLogObjects + 472);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            unint64_t v11 = (os_log_s *)&_os_log_default;
            id v12 = &_os_log_default;
          }

          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v13 = qiAuth_protocol_authStateString(a3);
            uint64_t v14 = *(void *)(v9 + 16);
            int v22 = 136316162;
            id v23 = "qiAuth_util_notifySlotAuthState";
            __int16 v24 = 1024;
            int v25 = 361;
            __int16 v26 = 2080;
            *(void *)id v27 = v13;
            *(_WORD *)&v27[8] = 1024;
            *(_DWORD *)id v28 = a2;
            *(_WORD *)&v28[4] = 2112;
            uint64_t v29 = v14;
            _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%s:%d AUTH[%s] for slot %d, endpoint %@",  (uint8_t *)&v22,  0x2Cu);
          }

          qiAuth_endpoint_setAuthState((uint64_t **)v9, v10, v15, v16, v17, v18, v19, v20);
        }
      }
    }
  }

BOOL qiAuth_util_certificateExistsCache(uint64_t a1, unsigned int a2, unsigned __int8 *a3, unsigned int a4)
{
  if (!a1) {
    return 0LL;
  }
  if (gLogObjects && gNumLogObjects >= 60)
  {
    int v8 = (os_log_s *)*(id *)(gLogObjects + 472);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v8 = (os_log_s *)&_os_log_default;
    id v10 = &_os_log_default;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    int v18 = *(_DWORD *)(a1 + 8);
    int v19 = 136316162;
    uint64_t v20 = "qiAuth_util_certificateExistsCache";
    __int16 v21 = 1024;
    int v22 = 376;
    __int16 v23 = 1024;
    int v24 = v18;
    __int16 v25 = 1024;
    unsigned int v26 = a2;
    __int16 v27 = 1024;
    unsigned int v28 = a4;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "%s:%d role %d, slot %d, certHashLen %d",  (uint8_t *)&v19,  0x24u);
  }

  BOOL v9 = 0LL;
  if (a4 && a3 && a2 <= 3 && !*(_DWORD *)(a1 + 8))
  {
    if (__getCerCacheObj_onceToken_0 != -1) {
      dispatch_once(&__getCerCacheObj_onceToken_0, &__block_literal_global_36);
    }
    uint64_t v11 = __getCerCacheObj___certCacheObj_0;
    id v12 = __copyDataBytesHexString(a3, a4);
    uint64_t v13 = v12;
    BOOL v14 = 0;
    if (a4 == 1 && v12)
    {
      uint64_t v15 = MFAACreateMatchingHashForCertChainFromHashLSB(v11, v12);
      BOOL v14 = v15 != 0;
      CFRelease(v13);
      uint64_t v13 = (const void *)v15;
    }

    if (v13)
    {
      uint64_t v16 = (const void *)MFAACreateCertChainDataFromHash(v11, v13);
      if (v16)
      {
        CFRelease(v16);
        BOOL v14 = 1;
      }

      BOOL v9 = v14;
      CFRelease(v13);
    }

    else
    {
      return v14;
    }
  }

  return v9;
}

__CFString *__copyDataBytesHexString(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2 = a2;
  CFMutableDataRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 2LL * a2);
  if (a1 && v2)
  {
    do
    {
      unsigned int v5 = *a1++;
      CFStringAppendFormat(Mutable, 0LL, @"%02x", v5);
      --v2;
    }

    while ((_WORD)v2);
  }

  return Mutable;
}

uint64_t qiAuth_util_copyCertificateFromCache( uint64_t a1, unsigned int a2, unsigned __int8 *a3, unsigned int a4, UInt8 *a5, unsigned int a6, UInt8 *a7, unsigned int a8, uint64_t a9)
{
  if (!a1) {
    return 4294967294LL;
  }
  uint64_t v10 = 4294967294LL;
  if (a3 && a2 <= 3 && !*(_DWORD *)(a1 + 8) && (a4 == 32 || a4 == 1))
  {
    BOOL v18 = a6 >= 0x20 || a5 == 0LL;
    if (v18 && a7 && a8 && a9)
    {
      if (__getCerCacheObj_onceToken_0 != -1) {
        dispatch_once(&__getCerCacheObj_onceToken_0, &__block_literal_global_36);
      }
      uint64_t v34 = __getCerCacheObj___certCacheObj_0;
      int v19 = __copyDataBytesHexString(a3, a4);
      uint64_t v20 = v19;
      if (a4 == 1 && v19)
      {
        if (gLogObjects && gNumLogObjects >= 60)
        {
          __int16 v21 = (os_log_s *)*(id *)(gLogObjects + 472);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          __int16 v21 = (os_log_s *)&_os_log_default;
          id v22 = &_os_log_default;
        }

        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          int v23 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)buf = 136316162;
          uint64_t v36 = "qiAuth_util_copyCertificateFromCache";
          __int16 v37 = 1024;
          int v38 = 440;
          __int16 v39 = 1024;
          int v40 = v23;
          __int16 v41 = 1024;
          unsigned int v42 = a2;
          __int16 v43 = 2112;
          int v44 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "%s:%d role %d, slot %d, certHashLSB %@",  buf,  0x28u);
        }

        uint64_t v24 = MFAACreateMatchingHashForCertChainFromHashLSB(v34, v20);
        CFRelease(v20);
        uint64_t v20 = (const __CFString *)v24;
      }

      if (gLogObjects && gNumLogObjects >= 60)
      {
        __int16 v25 = (os_log_s *)*(id *)(gLogObjects + 472);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        __int16 v25 = (os_log_s *)&_os_log_default;
        id v26 = &_os_log_default;
      }

      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        int v27 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)buf = 136316162;
        uint64_t v36 = "qiAuth_util_copyCertificateFromCache";
        __int16 v37 = 1024;
        int v38 = 450;
        __int16 v39 = 1024;
        int v40 = v27;
        __int16 v41 = 1024;
        unsigned int v42 = a2;
        __int16 v43 = 2112;
        int v44 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "%s:%d role %d, slot %d, certHash %@",  buf,  0x28u);
      }

      if (v20)
      {
        unsigned int v28 = (const __CFData *)MFAACreateCertChainDataFromHash(v34, v20);
        if (v28 && (uint64_t v29 = v28, CFDataGetLength(v28) <= a8))
        {
          v45.BOOL length = CFDataGetLength(v29);
          v45.location = 0LL;
          CFDataGetBytes(v29, v45, a7);
          uint64_t v10 = 0LL;
          int v30 = 1;
        }

        else
        {
          int v30 = 0;
          uint64_t v10 = 0xFFFFFFFFLL;
        }

        uint64_t v32 = __copyHexStringToData(v20);
        __int128 v33 = v32;
        if (a5 && v30 && v32)
        {
          if (CFDataGetLength(v32) <= a6)
          {
            v46.BOOL length = CFDataGetLength(v33);
            v46.location = 0LL;
            CFDataGetBytes(v33, v46, a5);
          }
        }

        else if (!v32)
        {
LABEL_50:
          CFRelease(v20);
          return v10;
        }

        CFRelease(v33);
        goto LABEL_50;
      }

      return 4294967294LL;
    }
  }

  return v10;
}

__CFData *__copyHexStringToData(const __CFString *a1)
{
  CFMutableDataRef Mutable = CFDataCreateMutable(kCFAllocatorDefault, 0LL);
  CFIndex Length = CFStringGetLength(a1);
  uint64_t v4 = __chkstk_darwin(Length);
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  id v7 = &v13[-v6];
  size_t v8 = v4 + 1;
  if (v4 == -1)
  {
    CFStringGetCString(a1, &v13[-v6], v8, 0x600u);
  }

  else
  {
    memset(&v13[-v6], 170, v8);
    CFStringGetCString(a1, v7, v8, 0x600u);
    if (Length >= 1)
    {
      CFIndex v9 = 0LL;
      while (1)
      {
        int v10 = v7[v9];
        int v11 = v7[v9 + 1];
        UInt8 bytes = 0;
        if ((__hexDigitsToByte(v10, v11, &bytes) & 1) == 0) {
          break;
        }
        CFDataAppendBytes(Mutable, &bytes, 1LL);
        v9 += 2LL;
        if (v9 >= Length) {
          return Mutable;
        }
      }

      if (Mutable) {
        CFRelease(Mutable);
      }
      return 0LL;
    }
  }

  return Mutable;
}

uint64_t qiAuth_util_saveCertificateInCache( uint64_t a1, unsigned int a2, unsigned __int8 *a3, unsigned int a4, const UInt8 *a5, unsigned int a6)
{
  if (!a1) {
    return 4294967294LL;
  }
  uint64_t v7 = 4294967294LL;
  if (a6 && a5 && a4 && a3 && a2 <= 3 && !*(_DWORD *)(a1 + 8))
  {
    if (__getCerCacheObj_onceToken_0 != -1) {
      dispatch_once(&__getCerCacheObj_onceToken_0, &__block_literal_global_36);
    }
    uint64_t v13 = __getCerCacheObj___certCacheObj_0;
    BOOL v14 = __copyDataBytesHexString(a3, a4);
    CFDataRef v15 = CFDataCreateWithBytesNoCopy(kCFAllocatorDefault, a5, a6, kCFAllocatorNull);
    int v16 = MFAAAddCertChainDataEntryToCacheForHash(v13, v15, v14);
    if (gLogObjects && gNumLogObjects >= 60)
    {
      uint64_t v17 = (os_log_s *)*(id *)(gLogObjects + 472);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v17 = (os_log_s *)&_os_log_default;
      id v18 = &_os_log_default;
    }

    uint64_t v7 = (v16 - 1);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      int v19 = *(_DWORD *)(a1 + 8);
      int v21 = 136316674;
      id v22 = "qiAuth_util_saveCertificateInCache";
      __int16 v23 = 1024;
      int v24 = 511;
      __int16 v25 = 1024;
      int v26 = v7;
      __int16 v27 = 1024;
      int v28 = v19;
      __int16 v29 = 1024;
      unsigned int v30 = a2;
      __int16 v31 = 2112;
      uint64_t v32 = v14;
      __int16 v33 = 2112;
      CFDataRef v34 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "%s:%d result %d, role %d, slot %d, certHash %@, certDataObj %@",  (uint8_t *)&v21,  0x38u);
    }

    if (v14) {
      CFRelease(v14);
    }
    if (v15) {
      CFRelease(v15);
    }
  }

  return v7;
}

uint64_t qiAuth_util_policy_preferredSlot()
{
  if (gLogObjects && gNumLogObjects >= 60)
  {
    id v0 = (os_log_s *)*(id *)(gLogObjects + 472);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v0 = (os_log_s *)&_os_log_default;
    id v1 = &_os_log_default;
  }

  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG)) {
    qiAuth_util_policy_preferredSlot_cold_1();
  }

  return 0LL;
}

id qiAuth_util_policy_challengeFirst(uint64_t a1)
{
  if (a1 && !*(_DWORD *)(a1 + 8)) {
    id v1 = acc_userDefaults_BOOLForKey((uint64_t)@"MPPAuthChallengeFirst");
  }
  else {
    id v1 = 0LL;
  }
  if (gLogObjects && gNumLogObjects >= 60)
  {
    unsigned int v2 = (os_log_s *)*(id *)(gLogObjects + 472);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    unsigned int v2 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    qiAuth_util_policy_challengeFirst_cold_1((uint64_t)v1, v2, v4, v5, v6, v7, v8, v9);
  }

  return v1;
}

const void **qiAuth_util_sendData(const void **result, const UInt8 *a2, CFIndex a3)
{
  if (result)
  {
    if (a2)
    {
      if ((_DWORD)a3)
      {
        uint64_t result = (const void **)acc_manager_getEndpointWithUUID(*result);
        if (result)
        {
          uint64_t result = (const void **)result[7];
          if (result) {
            return (const void **)qiAuth_endpoint_sendOutgoingData((uint64_t *)result, a2, a3);
          }
        }
      }
    }
  }

  return result;
}

uint64_t qiAuth_util_callbackOnTimer(const void **a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = 1000000LL * a2;
  uint64_t v6 = 0xFFFFFFFFLL;
  uint64_t v7 = &startLogsNotificationObservers;
  uint64_t v8 = &startLogsNotificationObservers;
  if (a1 && a2 && a3)
  {
    EndpointWithUUID = acc_manager_getEndpointWithUUID(*a1);
    if (EndpointWithUUID)
    {
      uint64_t v12 = EndpointWithUUID[7];
      if (v12)
      {
        uint64_t v39 = a4;
        uint64_t v40 = EndpointWithUUID[7];
        int64_t v41 = v5;
        uint64_t v6 = 0LL;
        uint64_t v13 = v12 + 2056;
        BOOL v14 = (uint64_t *)(v12 + 1992);
        while (1)
        {
          CFDataRef v15 = v7;
          uint64_t v16 = v7[353];
          uint64_t v17 = v8;
          int v18 = *((_DWORD *)v8 + 708);
          if (v16 && v18 >= 60)
          {
            int v19 = (os_log_s *)*(id *)(v16 + 472);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              __int16 v43 = (const char *)v16;
              __int16 v44 = 1024;
              int v45 = v18;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            }

            id v20 = &_os_log_default;
            int v19 = (os_log_s *)&_os_log_default;
          }

          uint64_t v8 = v17;
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v21 = *v14;
            int v22 = *(unsigned __int8 *)(v13 + v6);
            *(_DWORD *)buf = 136316162;
            __int16 v43 = "qiAuth_util_callbackOnTimer";
            __int16 v44 = 1024;
            int v45 = 830;
            __int16 v46 = 1024;
            int v47 = v6;
            __int16 v48 = 2048;
            *(void *)__int16 v49 = v21;
            *(_WORD *)&v49[8] = 1024;
            *(_DWORD *)&v49[10] = v22;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "%s:%d [%d] timer %p, running %d",  buf,  0x28u);
          }

          uint64_t v7 = v15;
          if (!*v14)
          {
            uint64_t v23 = v15[353];
            if (v23 && *((int *)v8 + 708) >= 60)
            {
              int v24 = (os_log_s *)*(id *)(v23 + 472);
              uint64_t v5 = v41;
            }

            else
            {
              uint64_t v5 = v41;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
              int v24 = (os_log_s *)&_os_log_default;
              id v32 = &_os_log_default;
            }

            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
              qiAuth_util_callbackOnTimer_cold_2();
            }
            goto LABEL_46;
          }

          if (!*(_BYTE *)(v13 + v6)) {
            break;
          }
          ++v6;
          ++v14;
          if (v6 == 4)
          {
            uint64_t v6 = 0xFFFFFFFFLL;
            uint64_t v25 = v40;
            goto LABEL_23;
          }
        }

        v14[4] = a3;
        v14[9] = v39;
        uint64_t v25 = v40;
        *(_BYTE *)(v40 + v6 + 2056) = 1;
LABEL_23:
        uint64_t v26 = v15[353];
        uint64_t v5 = v41;
        if (v26 && *((int *)v8 + 708) >= 60)
        {
          __int16 v27 = (os_log_s *)*(id *)(v26 + 472);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          __int16 v27 = (os_log_s *)&_os_log_default;
          id v28 = &_os_log_default;
        }

        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v38 = *(void *)(v25 + 8LL * (int)v6 + 1992);
          *(_DWORD *)buf = 136316418;
          __int16 v43 = "qiAuth_util_callbackOnTimer";
          __int16 v44 = 1024;
          int v45 = 846;
          __int16 v46 = 1024;
          int v47 = v6;
          __int16 v48 = 2048;
          *(void *)__int16 v49 = v38;
          *(_WORD *)&v49[8] = 1024;
          *(_DWORD *)&v49[10] = a2;
          __int16 v50 = 2048;
          int64_t v51 = v41;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEBUG,  "%s:%d timerID %d, timer %p, timeoutMs %u, timeoutNs %lld",  buf,  0x32u);
        }

        if ((v6 & 0x80000000) == 0)
        {
          __int16 v29 = *(dispatch_source_s **)(v25 + 8LL * v6 + 1992);
          dispatch_time_t v30 = dispatch_time(0LL, v41);
          dispatch_source_set_timer(v29, v30, 0xFFFFFFFFFFFFFFFFLL, 0LL);
          goto LABEL_48;
        }

        uint64_t v31 = v7[353];
        if (v31 && *((int *)v8 + 708) >= 60)
        {
          int v24 = (os_log_s *)*(id *)(v31 + 472);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          int v24 = (os_log_s *)&_os_log_default;
          id v33 = &_os_log_default;
        }

        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
          qiAuth_util_callbackOnTimer_cold_4();
        }
LABEL_46:
      }
    }

    uint64_t v6 = 0xFFFFFFFFLL;
  }

LABEL_48:
  uint64_t v34 = v7[353];
  if (v34 && *((int *)v8 + 708) >= 60)
  {
    id v35 = (os_log_s *)*(id *)(v34 + 472);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v35 = (os_log_s *)&_os_log_default;
    id v36 = &_os_log_default;
  }

  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316162;
    __int16 v43 = "qiAuth_util_callbackOnTimer";
    __int16 v44 = 1024;
    int v45 = 854;
    __int16 v46 = 1024;
    int v47 = v6;
    __int16 v48 = 1024;
    *(_DWORD *)__int16 v49 = a2;
    *(_WORD *)&v49[4] = 2048;
    *(void *)&v49[6] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "%s:%d timerID %d, timeoutMs %u, timeoutNs %lld",  buf,  0x28u);
  }

  return v6;
}

  a3->var16 = self->_genrePersistentID;
  a3->var0 |= 0x8000u;
  validMask = self->_validMask;
  if ((validMask & 0x10000) == 0)
  {
LABEL_18:
    if ((validMask & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_52;
  }

void qiAuth_util_cancelTimer(const void **a1, unsigned int a2)
{
  if (a1)
  {
    if ((a2 & 0x80000000) == 0)
    {
      EndpointWithUUID = acc_manager_getEndpointWithUUID(*a1);
      if (EndpointWithUUID)
      {
        uint64_t v4 = EndpointWithUUID[7];
        if (v4)
        {
          uint64_t v5 = v4 + a2;
          if (gLogObjects) {
            BOOL v6 = gNumLogObjects <= 59;
          }
          else {
            BOOL v6 = 1;
          }
          int v7 = !v6;
          if (*(_BYTE *)(v5 + 2056))
          {
            if (v7)
            {
              uint64_t v8 = (os_log_s *)*(id *)(gLogObjects + 472);
            }

            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
              uint64_t v8 = (os_log_s *)&_os_log_default;
              id v10 = &_os_log_default;
            }

            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
            {
              int v13 = 136315650;
              BOOL v14 = "qiAuth_util_cancelTimer";
              __int16 v15 = 1024;
              int v16 = 871;
              __int16 v17 = 1024;
              unsigned int v18 = a2;
              _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s:%d Cancel timerID %d",  (uint8_t *)&v13,  0x18u);
            }

            *(_BYTE *)(v5 + 2056) = 0;
            uint64_t v11 = v4 + 8LL * a2;
            *(void *)(v11 + 2024) = 0LL;
            *(void *)(v11 + 2064) = 0LL;
            dispatch_source_set_timer(*(dispatch_source_t *)(v11 + 1992), 0xFFFFFFFFFFFFFFFFLL, 0LL, 0LL);
          }

          else
          {
            if (v7)
            {
              uint64_t v9 = (os_log_s *)*(id *)(gLogObjects + 472);
            }

            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
              uint64_t v9 = (os_log_s *)&_os_log_default;
              id v12 = &_os_log_default;
            }

            if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
              qiAuth_util_cancelTimer_cold_1();
            }
          }
        }
      }
    }
  }

uint64_t qiAuth_util_hash_SHA256( uint64_t a1, void *data, CC_LONG len, unsigned __int8 *md, unsigned int a5, _WORD *a6)
{
  uint64_t result = 4294967294LL;
  if (a1 && data && len && md && a5 >= 0x20)
  {
    if (a6)
    {
      CC_SHA256(data, len, md);
      uint64_t result = 0LL;
      *a6 = 32;
    }
  }

  return result;
}

uint64_t __hexDigitsToByte(int a1, int a2, _BYTE *a3)
{
  if (!a3) {
    return 0LL;
  }
  char v3 = a1 - 48;
  char v4 = a2 - 48;
  else {
    char v6 = a1 - 87;
  }
  else {
    char v7 = v6;
  }
  else {
    char v8 = a2 - 87;
  }
  else {
    char v9 = v8;
  }
  *a3 = v4 | (16 * v3);
  return 1LL;
}

void ____getCerCacheObj_block_invoke_0(id a1)
{
  __getCerCacheObj___certCacheObj_0 = MFAACreateCertificateCache(@"com.apple.accessoryd");
}

void OUTLINED_FUNCTION_4_20( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

void sub_10011D120( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id location, id a22)
{
}

void OUTLINED_FUNCTION_4_21(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

uint64_t platform_CarPlay_isWirelessCarPlayAllowedForCertSerial()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 7;
  }
  else {
    BOOL v0 = 1;
  }
  if (v0)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    unsigned int v2 = (os_log_s *)&_os_log_default;
    id v1 = &_os_log_default;
  }

  else
  {
    unsigned int v2 = (os_log_s *)*(id *)(gLogObjects + 48);
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[#CarPlay] CarPlay not supported on this platform!",  v4,  2u);
  }

  return 0LL;
}

void platform_CarPlay_sendConnectionEvent()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 7;
  }
  else {
    BOOL v0 = 1;
  }
  if (v0)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    unsigned int v2 = (os_log_s *)&_os_log_default;
    id v1 = &_os_log_default;
  }

  else
  {
    unsigned int v2 = (os_log_s *)*(id *)(gLogObjects + 48);
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v3 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[#CarPlay] CarPlay not supported on this platform!",  v3,  2u);
  }
}

void platform_CarPlay_availability(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 52)
  {
    char v4 = (os_log_s *)*(id *)(gLogObjects + 408);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    char v4 = (os_log_s *)&_os_log_default;
    id v5 = &_os_log_default;
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412546;
    uint64_t v9 = a1;
    __int16 v10 = 2112;
    uint64_t v11 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[#CarPlay] platform_CarPlay_availability: %@, parameters %@",  (uint8_t *)&v8,  0x16u);
  }

  if (gLogObjects && gNumLogObjects >= 7)
  {
    char v6 = (os_log_s *)*(id *)(gLogObjects + 48);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    char v6 = (os_log_s *)&_os_log_default;
    id v7 = &_os_log_default;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v_Block_object_dispose((const void *)(v1 - 144), 8) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[#CarPlay] CarPlay not supported on this platform!",  (uint8_t *)&v8,  2u);
  }
}

char *acc_accInfo_create()
{
  BOOL v0 = (char *)calloc(1uLL, 0xB0uLL);
  id v1 = v0;
  if (v0) {
    pthread_mutex_init((pthread_mutex_t *)(v0 + 112), 0LL);
  }
  return v1;
}

BOOL acc_accInfo_destroy(void **a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v2 = (uint64_t)*a1;
  if (!v2) {
    return 0LL;
  }
  BOOL v3 = acc_accInfo_reset(v2);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)*a1 + 112));
  if (*a1)
  {
    free(*a1);
    *a1 = 0LL;
  }

  return v3;
}

BOOL acc_accInfo_reset(uint64_t a1)
{
  if (a1)
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 112));
    if (*(void *)a1)
    {
      CFRelease(*(CFTypeRef *)a1);
      *(void *)a1 = 0LL;
    }

    uint64_t v2 = *(const void **)(a1 + 8);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 144), 8) = 0LL;
    }

    BOOL v3 = *(const void **)(a1 + 16);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1 + 16) = 0LL;
    }

    char v4 = *(const void **)(a1 + 24);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(a1 + 24) = 0LL;
    }

    id v5 = *(const void **)(a1 + 32);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 32) = 0LL;
    }

    char v6 = *(const void **)(a1 + 40);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 40) = 0LL;
    }

    id v7 = *(const void **)(a1 + 48);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 144), 8) = 0LL;
    }

    int v8 = *(const void **)(a1 + 56);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(a1 + 56) = 0LL;
    }

    uint64_t v9 = *(const void **)(a1 + 72);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(a1 + 72) = 0LL;
    }

    __int16 v10 = *(const void **)(a1 + 64);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(a1 + 64) = 0LL;
    }

    uint64_t v11 = *(const void **)(a1 + 80);
    if (v11)
    {
      CFRelease(v11);
      *(void *)(a1 + 80) = 0LL;
    }

    id v12 = *(const void **)(a1 + 88);
    if (v12)
    {
      CFRelease(v12);
      *(void *)(a1 + 8_Block_object_dispose((const void *)(v1 - 144), 8) = 0LL;
    }

    int v13 = *(const void **)(a1 + 96);
    if (v13)
    {
      CFRelease(v13);
      *(void *)(a1 + 96) = 0LL;
    }

    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 112));
  }

  return a1 != 0;
}

uint64_t acc_accInfo_setAccessoryInfo(uint64_t a1, uint64_t a2)
{
  if (a1) {
    BOOL v2 = a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  uint64_t v3 = !v2;
  if (!v2)
  {
    acc_accInfo_reset(a1);
    char v6 = (pthread_mutex_t *)(a2 + 112);
    pthread_mutex_lock((pthread_mutex_t *)(a2 + 112));
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 112));
    if (*(void *)a2)
    {
      CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, *(CFStringRef *)a2);
      uint64_t v8 = ACCConnectionInfoCopyLocalizedAccessoryNameCFPrivate();
      if (v8)
      {
        uint64_t v9 = v8;
        if (Copy) {
          CFRelease(Copy);
        }
      }

      else
      {
        uint64_t v9 = (uint64_t)Copy;
      }

      *(void *)a1 = v9;
    }

    __int16 v10 = *(const __CFString **)(a2 + 8);
    if (v10) {
      *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 144), 8) = CFStringCreateCopy(kCFAllocatorDefault, v10);
    }
    uint64_t v11 = *(const __CFString **)(a2 + 16);
    if (v11) {
      *(void *)(a1 + 16) = CFStringCreateCopy(kCFAllocatorDefault, v11);
    }
    id v12 = *(const __CFString **)(a2 + 24);
    if (v12) {
      *(void *)(a1 + 24) = CFStringCreateCopy(kCFAllocatorDefault, v12);
    }
    int v13 = *(const __CFString **)(a2 + 32);
    if (v13) {
      *(void *)(a1 + 32) = CFStringCreateCopy(kCFAllocatorDefault, v13);
    }
    BOOL v14 = *(const __CFString **)(a2 + 40);
    if (v14) {
      *(void *)(a1 + 40) = CFStringCreateCopy(kCFAllocatorDefault, v14);
    }
    __int16 v15 = *(const __CFString **)(a2 + 48);
    if (v15) {
      *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 144), 8) = CFStringCreateCopy(kCFAllocatorDefault, v15);
    }
    int v16 = *(const __CFString **)(a2 + 56);
    if (v16) {
      *(void *)(a1 + 56) = CFStringCreateCopy(kCFAllocatorDefault, v16);
    }
    __int16 v17 = *(const __CFString **)(a2 + 72);
    if (v17) {
      *(void *)(a1 + 72) = CFStringCreateCopy(kCFAllocatorDefault, v17);
    }
    unsigned int v18 = *(const __CFString **)(a2 + 64);
    if (v18) {
      *(void *)(a1 + 64) = CFStringCreateCopy(kCFAllocatorDefault, v18);
    }
    int v19 = *(const void **)(a2 + 80);
    if (v19) {
      *(void *)(a1 + 80) = CFRetain(v19);
    }
    id v20 = *(const void **)(a2 + 88);
    if (v20) {
      *(void *)(a1 + 8_Block_object_dispose((const void *)(v1 - 144), 8) = CFRetain(v20);
    }
    uint64_t v21 = *(const void **)(a2 + 96);
    if (v21) {
      *(void *)(a1 + 96) = CFRetain(v21);
    }
    int v22 = *(const void **)(a2 + 104);
    if (v22) {
      *(void *)(a1 + 104) = CFRetain(v22);
    }
    if (gLogObjects && gNumLogObjects >= 12)
    {
      uint64_t v23 = *(os_log_s **)(gLogObjects + 88);
    }

    else
    {
      uint64_t v23 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        _parseIdentificationParams_cold_2();
      }
    }

    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      uint64_t v24 = *(void *)a1;
      uint64_t v25 = *(void *)(a1 + 8);
      uint64_t v26 = *(void *)(a1 + 16);
      uint64_t v27 = *(void *)(a1 + 24);
      uint64_t v28 = *(void *)(a1 + 32);
      uint64_t v29 = *(void *)(a1 + 40);
      uint64_t v30 = *(void *)(a1 + 48);
      uint64_t v31 = *(void *)(a1 + 56);
      uint64_t v32 = *(void *)(a1 + 64);
      uint64_t v33 = *(void *)(a1 + 72);
      uint64_t v34 = *(void *)(a1 + 80);
      uint64_t v35 = *(void *)(a1 + 88);
      uint64_t v36 = *(void *)(a1 + 96);
      uint64_t v37 = *(void *)(a1 + 104);
      int v39 = 136318978;
      uint64_t v40 = "acc_accInfo_setAccessoryInfo";
      __int16 v41 = 1024;
      int v42 = 211;
      __int16 v43 = 2112;
      uint64_t v44 = v24;
      __int16 v45 = 2112;
      uint64_t v46 = v25;
      __int16 v47 = 2112;
      uint64_t v48 = v26;
      __int16 v49 = 2112;
      uint64_t v50 = v27;
      __int16 v51 = 2112;
      uint64_t v52 = v28;
      __int16 v53 = 2112;
      uint64_t v54 = v29;
      __int16 v55 = 2112;
      uint64_t v56 = v30;
      __int16 v57 = 2112;
      uint64_t v58 = v31;
      __int16 v59 = 2112;
      uint64_t v60 = v33;
      __int16 v61 = 2112;
      uint64_t v62 = v32;
      __int16 v63 = 2112;
      uint64_t v64 = v34;
      __int16 v65 = 2112;
      uint64_t v66 = v35;
      __int16 v67 = 2112;
      uint64_t v68 = v36;
      __int16 v69 = 2112;
      uint64_t v70 = v37;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "[#Accessory Info] %s:%d Set accessory info: name: %@, manufacturer: %@, model: %@, serialNumber: %@, hardwareVer sion: %@, firmwareVersionActive: %@, firmwareVersionPending: %@, ppid: %@ regionCode: %@, deviceUID: %@, deviceC ompatibility: %@, vid/pid: %@/%@, accessoryPlatformID: %@",  (uint8_t *)&v39,  0x9Eu);
    }

    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 112));
    pthread_mutex_unlock(v6);
  }

  return v3;
}

uint64_t acc_accInfo_updateAccessoryInfoWithDictionary(uint64_t a1, const __CFDictionary *a2)
{
  if (a1) {
    BOOL v2 = a2 == 0LL;
  }
  else {
    BOOL v2 = 1;
  }
  uint64_t v3 = !v2;
  if (!v2)
  {
    char v6 = (pthread_mutex_t *)(a1 + 112);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 112));
    uint64_t Value = CFDictionaryGetValue(a2, kCFACCInfo_Name);
    if (Value)
    {
      CFTypeRef v8 = CFRetain(Value);
      uint64_t v9 = ACCConnectionInfoCopyLocalizedAccessoryNameCFPrivate();
      if (v9)
      {
        uint64_t v10 = v9;
        if (v8) {
          CFRelease(v8);
        }
      }

      else
      {
        uint64_t v10 = (uint64_t)v8;
      }

      if (*(void *)a1) {
        CFRelease(*(CFTypeRef *)a1);
      }
      *(void *)a1 = v10;
    }

    uint64_t v11 = (const __CFString *)CFDictionaryGetValue(a2, kCFACCInfo_Manufacturer);
    if (v11)
    {
      id v12 = v11;
      int v13 = *(const void **)(a1 + 8);
      if (v13)
      {
        CFRelease(v13);
        *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 144), 8) = 0LL;
      }

      *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 144), 8) = CFStringCreateCopy(kCFAllocatorDefault, v12);
    }

    BOOL v14 = (const __CFString *)CFDictionaryGetValue(a2, kCFACCInfo_Model);
    if (v14)
    {
      __int16 v15 = v14;
      int v16 = *(const void **)(a1 + 16);
      if (v16)
      {
        CFRelease(v16);
        *(void *)(a1 + 16) = 0LL;
      }

      *(void *)(a1 + 16) = CFStringCreateCopy(kCFAllocatorDefault, v15);
    }

    __int16 v17 = (const __CFString *)CFDictionaryGetValue(a2, kCFACCInfo_SerialNumber);
    if (v17)
    {
      unsigned int v18 = v17;
      int v19 = *(const void **)(a1 + 24);
      if (v19)
      {
        CFRelease(v19);
        *(void *)(a1 + 24) = 0LL;
      }

      *(void *)(a1 + 24) = CFStringCreateCopy(kCFAllocatorDefault, v18);
    }

    id v20 = (const __CFString *)CFDictionaryGetValue(a2, kCFACCInfo_HardwareVersion);
    if (v20)
    {
      uint64_t v21 = v20;
      int v22 = *(const void **)(a1 + 32);
      if (v22)
      {
        CFRelease(v22);
        *(void *)(a1 + 32) = 0LL;
      }

      *(void *)(a1 + 32) = CFStringCreateCopy(kCFAllocatorDefault, v21);
    }

    uint64_t v23 = (const __CFString *)CFDictionaryGetValue(a2, kCFACCInfo_FirmwareVersionActive);
    if (v23)
    {
      uint64_t v24 = v23;
      uint64_t v25 = *(const void **)(a1 + 40);
      if (v25)
      {
        CFRelease(v25);
        *(void *)(a1 + 40) = 0LL;
      }

      *(void *)(a1 + 40) = CFStringCreateCopy(kCFAllocatorDefault, v24);
    }

    uint64_t v26 = (const __CFString *)CFDictionaryGetValue(a2, kCFACCInfo_FirmwareVersionPending);
    if (v26)
    {
      uint64_t v27 = v26;
      uint64_t v28 = *(const void **)(a1 + 48);
      if (v28)
      {
        CFRelease(v28);
        *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 144), 8) = 0LL;
      }

      *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 144), 8) = CFStringCreateCopy(kCFAllocatorDefault, v27);
    }

    uint64_t v29 = (const __CFString *)CFDictionaryGetValue(a2, kCFACCInfo_PPID);
    if (v29)
    {
      uint64_t v30 = v29;
      uint64_t v31 = *(const void **)(a1 + 56);
      if (v31)
      {
        CFRelease(v31);
        *(void *)(a1 + 56) = 0LL;
      }

      *(void *)(a1 + 56) = CFStringCreateCopy(kCFAllocatorDefault, v30);
    }

    uint64_t v32 = (const __CFString *)CFDictionaryGetValue(a2, kCFACCInfo_RegionCode);
    if (v32)
    {
      uint64_t v33 = v32;
      uint64_t v34 = *(const void **)(a1 + 72);
      if (v34)
      {
        CFRelease(v34);
        *(void *)(a1 + 72) = 0LL;
      }

      *(void *)(a1 + 72) = CFStringCreateCopy(kCFAllocatorDefault, v33);
    }

    uint64_t v35 = (const __CFString *)CFDictionaryGetValue(a2, kCFACCInfo_AccessoryDeviceUID);
    if (v35)
    {
      uint64_t v36 = v35;
      uint64_t v37 = *(const void **)(a1 + 64);
      if (v37)
      {
        CFRelease(v37);
        *(void *)(a1 + 64) = 0LL;
      }

      *(void *)(a1 + 64) = CFStringCreateCopy(kCFAllocatorDefault, v36);
    }

    uint64_t v38 = CFDictionaryGetValue(a2, kCFACCInfo_DeviceCompatibility);
    if (v38)
    {
      int v39 = v38;
      uint64_t v40 = *(const void **)(a1 + 80);
      if (v40)
      {
        CFRelease(v40);
        *(void *)(a1 + 80) = 0LL;
      }

      *(void *)(a1 + 80) = CFRetain(v39);
    }

    __int16 v41 = CFDictionaryGetValue(a2, kCFACCInfo_VendorID);
    if (v41)
    {
      int v42 = v41;
      __int16 v43 = *(const void **)(a1 + 88);
      if (v43)
      {
        CFRelease(v43);
        *(void *)(a1 + 8_Block_object_dispose((const void *)(v1 - 144), 8) = 0LL;
      }

      *(void *)(a1 + 8_Block_object_dispose((const void *)(v1 - 144), 8) = CFRetain(v42);
    }

    uint64_t v44 = CFDictionaryGetValue(a2, kCFACCInfo_ProductID);
    if (v44)
    {
      __int16 v45 = v44;
      uint64_t v46 = *(const void **)(a1 + 96);
      if (v46)
      {
        CFRelease(v46);
        *(void *)(a1 + 96) = 0LL;
      }

      *(void *)(a1 + 96) = CFRetain(v45);
    }

    __int16 v47 = CFDictionaryGetValue(a2, kCFACCInfo_AccessoryPlatformID);
    if (v47)
    {
      uint64_t v48 = v47;
      __int16 v49 = *(const void **)(a1 + 104);
      if (v49)
      {
        CFRelease(v49);
        *(void *)(a1 + 104) = 0LL;
      }

      *(void *)(a1 + 104) = CFRetain(v48);
    }

    if (gLogObjects && gNumLogObjects >= 12)
    {
      uint64_t v50 = *(os_log_s **)(gLogObjects + 88);
    }

    else
    {
      uint64_t v50 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        _parseIdentificationParams_cold_2();
      }
    }

    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
      acc_accInfo_updateAccessoryInfoWithDictionary_cold_1((uint64_t *)a1, v50);
    }
    pthread_mutex_unlock(v6);
  }

  return v3;
}

int64x2_t *acc_accInfo_copyAccessoryInfoDictionary(uint64_t a1)
{
  id v1 = (int64x2_t *)a1;
  if (a1)
  {
    BOOL v2 = (pthread_mutex_t *)(a1 + 112);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 112));
    uint64_t v3 = (const double *)&kCFNull;
    int8x16_t v4 = (int8x16_t)vld1q_dup_f64(v3);
    int8x16_t v5 = vbslq_s8((int8x16_t)vceqzq_s64(v1[1]), v4, (int8x16_t)v1[1]);
    v10[0] = vbslq_s8((int8x16_t)vceqzq_s64(*v1), v4, *(int8x16_t *)v1);
    v10[1] = v5;
    int8x16_t v6 = vbslq_s8((int8x16_t)vceqzq_s64(v1[3]), v4, (int8x16_t)v1[3]);
    _DWORD v10[2] = vbslq_s8((int8x16_t)vceqzq_s64(v1[2]), v4, (int8x16_t)v1[2]);
    v10[3] = v6;
    int8x16_t v7 = vbslq_s8((int8x16_t)vceqzq_s64(v1[4]), v4, (int8x16_t)v1[4]);
    int8x16_t v8 = vbslq_s8((int8x16_t)vceqzq_s64(v1[5]), v4, (int8x16_t)v1[5]);
    keys[0] = (void *)kCFACCInfo_Name;
    keys[1] = (void *)kCFACCInfo_Manufacturer;
    keys[2] = (void *)kCFACCInfo_Model;
    keys[3] = (void *)kCFACCInfo_SerialNumber;
    keys[4] = (void *)kCFACCInfo_HardwareVersion;
    keys[5] = (void *)kCFACCInfo_FirmwareVersionActive;
    keys[6] = (void *)kCFACCInfo_FirmwareVersionPending;
    keys[7] = (void *)kCFACCInfo_PPID;
    keys[8] = (void *)kCFACCInfo_AccessoryDeviceUID;
    keys[9] = (void *)kCFACCInfo_RegionCode;
    keys[10] = (void *)kCFACCInfo_DeviceCompatibility;
    keys[11] = (void *)kCFACCInfo_VendorID;
    void v10[4] = v7;
    v10[5] = v8;
    keys[12] = (void *)kCFACCInfo_ProductID;
    keys[13] = (void *)kCFACCInfo_AccessoryPlatformID;
    v10[6] = vbslq_s8((int8x16_t)vceqzq_s64(v1[6]), v4, (int8x16_t)v1[6]);
    id v1 = (int64x2_t *)CFDictionaryCreate( kCFAllocatorDefault,  (const void **)keys,  (const void **)v10,  14LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    pthread_mutex_unlock(v2);
  }

  return v1;
}

CFStringRef acc_accInfo_copyAccessoryInfoDescription(CFStringRef result)
{
  if (result)
  {
    p_isa = &result->isa;
    p_data = (pthread_mutex_t *)&result[3].data;
    pthread_mutex_lock((pthread_mutex_t *)&result[3].data);
    CFStringRef v3 = CFStringCreateWithFormat( kCFAllocatorDefault,  0LL,  @"<ACCAccessoryInfo_t: name: %@; manufacturer: %@; model: %@; serialNumber: %@; hardwareVersion: %@; firmwareVersionActive: %@; firmwareVersionPending: %@; ppid: %@, regionCode: %@; deviceUID: %@>; deviceCompatibility: %@; vid/pid: %@/%@, accessoryPlatformID: %@",
           *p_isa,
           p_isa[1],
           p_isa[2],
           p_isa[3],
           p_isa[4],
           p_isa[5],
           p_isa[6],
           p_isa[7],
           p_isa[9],
           p_isa[8],
           p_isa[10],
           p_isa[11],
           p_isa[12],
           p_isa[13]);
    pthread_mutex_unlock(p_data);
    return v3;
  }

  return result;
}

CFTypeRef acc_accInfo_retainedProperty(uint64_t a1, int a2, CFTypeRef a3)
{
  if (!a1) {
    return 0LL;
  }
  int8x16_t v6 = (pthread_mutex_t *)(a1 + 112);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 112));
  switch(a2)
  {
    case 0:
      int8x16_t v7 = *(const void **)a1;
      if (*(void *)a1) {
        goto LABEL_29;
      }
      break;
    case 1:
      int8x16_t v7 = *(const void **)(a1 + 8);
      if (v7) {
        goto LABEL_29;
      }
      break;
    case 2:
      int8x16_t v7 = *(const void **)(a1 + 16);
      if (v7) {
        goto LABEL_29;
      }
      break;
    case 3:
      int8x16_t v7 = *(const void **)(a1 + 24);
      if (v7) {
        goto LABEL_29;
      }
      break;
    case 4:
      int8x16_t v7 = *(const void **)(a1 + 32);
      if (v7) {
        goto LABEL_29;
      }
      break;
    case 5:
      int8x16_t v7 = *(const void **)(a1 + 40);
      if (v7) {
        goto LABEL_29;
      }
      break;
    case 6:
      int8x16_t v7 = *(const void **)(a1 + 48);
      if (v7) {
        goto LABEL_29;
      }
      break;
    case 7:
      int8x16_t v7 = *(const void **)(a1 + 56);
      if (v7) {
        goto LABEL_29;
      }
      break;
    case 8:
      int8x16_t v7 = *(const void **)(a1 + 64);
      if (v7) {
        goto LABEL_29;
      }
      break;
    case 9:
      int8x16_t v7 = *(const void **)(a1 + 72);
      if (v7) {
        goto LABEL_29;
      }
      break;
    case 10:
      int8x16_t v7 = *(const void **)(a1 + 80);
      if (v7) {
        goto LABEL_29;
      }
      break;
    case 11:
      int8x16_t v7 = *(const void **)(a1 + 88);
      if (v7) {
        goto LABEL_29;
      }
      break;
    case 12:
      int8x16_t v7 = *(const void **)(a1 + 96);
      if (v7) {
LABEL_29:
      }
        a3 = CFRetain(v7);
      break;
    default:
      a3 = 0LL;
      break;
  }

  pthread_mutex_unlock(v6);
  return a3;
}

void platform_system_resetLightningBusForEndpointWithUUID(void *a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 7;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int8x16_t v4 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  else
  {
    int8x16_t v4 = (os_log_s *)*(id *)(gLogObjects + 48);
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 138412290;
    int v13 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[#Lightning] Resetting lightning bus for endpoint %@...",  (uint8_t *)&v12,  0xCu);
  }

  id PluginInstance = _getPluginInstance();
  uint64_t v6 = objc_claimAutoreleasedReturnValue(PluginInstance);
  int8x16_t v7 = (void *)v6;
  if (v6)
  {
    if ((objc_opt_respondsToSelector(v6, "resetLightningBusForEndpointWithUUID:") & 1) != 0)
    {
      [v7 resetLightningBusForEndpointWithUUID:a1];
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 7)
      {
        int8x16_t v8 = (os_log_s *)*(id *)(gLogObjects + 48);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        int8x16_t v8 = (os_log_s *)&_os_log_default;
        id v9 = &_os_log_default;
      }

      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = NSStringFromSelector("resetLightningBusForEndpointWithUUID:");
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
        int v12 = 138412290;
        int v13 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[#Lightning] Platform plugin does not implement selector %@!",  (uint8_t *)&v12,  0xCu);
      }
    }
  }
}

id _getPluginInstance()
{
  BOOL v0 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformPluginManager sharedManager](&OBJC_CLASS___ACCPlatformPluginManager, "sharedManager"));
  id v1 = (void *)objc_claimAutoreleasedReturnValue( [v0 pluginInstanceWithProtocol:&OBJC_PROTOCOL___ACCPlatformLightningPluginProtocol fallbackToTransportPlugins:1]);

  if (!v1)
  {
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 7;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int8x16_t v4 = (os_log_s *)&_os_log_default;
      id v3 = &_os_log_default;
    }

    else
    {
      int8x16_t v4 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      _getPluginInstance_cold_1(v4);
    }
  }

  return v1;
}

void platform_digitalAudio_accessoryAttached(uint64_t a1, uint64_t a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 8;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v6 = (os_log_s *)&_os_log_default;
    id v5 = &_os_log_default;
  }

  else
  {
    uint64_t v6 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v9 = 138412546;
    uint64_t v10 = a1;
    __int16 v11 = 1024;
    int v12 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "[#DigitalAudio] endpointUUID: %@, supportedSampleRatesMask: %d",  (uint8_t *)&v9,  0x12u);
  }

  int8x16_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[ACCPlatformDigitalAudioManager getManager]( &OBJC_CLASS___ACCPlatformDigitalAudioManager,  "getManager"));
  [v7 setDigitalAudioEndpointUUID:a1 withSupportedSampleRates:a2];

  int8x16_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[ACCAudioServer sharedServer](&OBJC_CLASS___ACCAudioServer, "sharedServer"));
  [v8 incrementUserCount];
}

void platform_digitalAudio_accessoryDetached(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 8;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  else
  {
    BOOL v4 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v8 = 138412290;
    uint64_t v9 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[#DigitalAudio] endpointUUID: %@",  (uint8_t *)&v8,  0xCu);
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[ACCAudioServer sharedServer](&OBJC_CLASS___ACCAudioServer, "sharedServer"));
  [v5 decrementUserCount];

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[ACCPlatformDigitalAudioManager getManager]( &OBJC_CLASS___ACCPlatformDigitalAudioManager,  "getManager"));
  [v6 stopAudioPropertyNotifications];

  int8x16_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[ACCPlatformDigitalAudioManager getManager]( &OBJC_CLASS___ACCPlatformDigitalAudioManager,  "getManager"));
  [v7 setDigitalAudioEndpointUUID:0 withSupportedSampleRates:0];
}

void platform_digitalAudio_eaAccessoryAttached()
{
  id v0 = (id)objc_claimAutoreleasedReturnValue(+[ACCAudioServer sharedServer](&OBJC_CLASS___ACCAudioServer, "sharedServer"));
  [v0 incrementUserCount];
}

void platform_digitalAudio_eaAccessoryDetached()
{
  id v0 = (id)objc_claimAutoreleasedReturnValue(+[ACCAudioServer sharedServer](&OBJC_CLASS___ACCAudioServer, "sharedServer"));
  [v0 decrementUserCount];
}

uint64_t platform_digitalAudio_start()
{
  id v0 = (void *)objc_claimAutoreleasedReturnValue( +[ACCPlatformDigitalAudioManager getManager]( &OBJC_CLASS___ACCPlatformDigitalAudioManager,  "getManager"));
  id v1 = v0;
  if (v0 && ([v0 bDigAudIsActive] & 1) == 0)
  {
    [v1 startAudioPropertyNotifications];
    uint64_t v2 = 1LL;
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  return v2;
}

uint64_t platform_digitalAudio_stop()
{
  id v0 = (void *)objc_claimAutoreleasedReturnValue( +[ACCPlatformDigitalAudioManager getManager]( &OBJC_CLASS___ACCPlatformDigitalAudioManager,  "getManager"));
  id v1 = v0;
  if (v0 && [v0 bDigAudIsActive])
  {
    [v1 stopAudioPropertyNotifications];
    uint64_t v2 = 1LL;
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  return v2;
}

id platform_digitalAudio_getSupportedSampleRate(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[ACCPlatformDigitalAudioManager getManager]( &OBJC_CLASS___ACCPlatformDigitalAudioManager,  "getManager"));
  id v3 = v2;
  else {
    id v4 = 0LL;
  }
  if (gLogObjects) {
    BOOL v5 = gNumLogObjects < 8;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int8x16_t v7 = (os_log_s *)&_os_log_default;
    id v6 = &_os_log_default;
  }

  else
  {
    int8x16_t v7 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v9[0] = 67109376;
    v9[1] = a1;
    __int16 v10 = 1024;
    int v11 = (int)v4;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "[#DigitalAudio] inputRate: %d, supportedRate: %d",  (uint8_t *)v9,  0xEu);
  }

  return v4;
}

id platform_digitalAudio_copySupportedSampleRates()
{
  id v0 = (void *)objc_claimAutoreleasedReturnValue( +[ACCPlatformDigitalAudioManager getManager]( &OBJC_CLASS___ACCPlatformDigitalAudioManager,  "getManager"));
  else {
    id v1 = 0LL;
  }
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 8;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v4 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  else
  {
    id v4 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v7 = 138412290;
    int v8 = v1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[#DigitalAudio] pSuppSampleRates: %@",  (uint8_t *)&v7,  0xCu);
  }

  id v5 = [v1 copy];
  return v5;
}

id platform_digitalAudio_copyDeviceAudioStates()
{
  v14[0] = @"IAPAudioTransportNameKey";
  id v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 1LL));
  v15[0] = v0;
  v14[1] = @"IAPAudioTransportLineoutStateKey";
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 4LL));
  v15[1] = v1;
  _DWORD v14[2] = @"IAPAudioTransportLineinStateKey";
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 4LL));
  _DWORD v15[2] = v2;
  v14[3] = @"IAPAudioTransportUSBAudioStateKey";
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[ACCPlatformDigitalAudioManager getManager]( &OBJC_CLASS___ACCPlatformDigitalAudioManager,  "getManager"));
  else {
    uint64_t v4 = 4LL;
  }
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v4));
  v15[3] = v5;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v15,  v14,  4LL));

  int v7 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  -[NSMutableArray addObject:](v7, "addObject:", v6);
  if (gLogObjects && gNumLogObjects >= 8)
  {
    int v8 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v8 = (os_log_s *)&_os_log_default;
    id v9 = &_os_log_default;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    int v12 = 138412290;
    int v13 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "[#DigitalAudio] audioDeviceStates: %@",  (uint8_t *)&v12,  0xCu);
  }

  id v10 = -[NSMutableArray copy](v7, "copy");
  return v10;
}

uint64_t platform_digitalAudio_setSampleRate(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 8;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v4 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  else
  {
    uint64_t v4 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v9[0] = 67109120;
    v9[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[#DigitalAudio] newSampleRate: %d",  (uint8_t *)v9,  8u);
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[ACCPlatformDigitalAudioManager getManager]( &OBJC_CLASS___ACCPlatformDigitalAudioManager,  "getManager"));
  id v6 = v5;
  if (v5 && [v5 bDigAudIsActive])
  {
    [v6 updateSampleRate:a1];
    uint64_t v7 = 1LL;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  return v7;
}

void sub_100122A80( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void platform_oobBtPairing2_startOobBtPairingHandler(void *a1)
{
  id v1 = a1;
  if (gLogObjects && gNumLogObjects >= 51)
  {
    BOOL v2 = (os_log_s *)*(id *)(gLogObjects + 400);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v2 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v14 = 138412290;
    id v15 = v1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "oobBtPairing2 startOOBBTPairing: %@",  (uint8_t *)&v14,  0xCu);
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[OOBBTPairing2Accessory accessoryListLock](&OBJC_CLASS___OOBBTPairing2Accessory, "accessoryListLock"));
  [v4 lock];
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[OOBBTPairing2Accessory accessoryForUID:]( &OBJC_CLASS___OOBBTPairing2Accessory,  "accessoryForUID:",  v1));
  id v6 = v5;
  if (v5)
  {
    uint64_t v7 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([v5 waitForBeginPairingTimer]);
    dispatch_source_set_timer(v7, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);

    int v8 = (void *)objc_claimAutoreleasedReturnValue([v6 getPendingComponent]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 getDeviceMacAddress]);
    if (v9)
    {
      _sendStartOOBBTPairing(v6, v8, v9);
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 51)
      {
        id v10 = (os_log_s *)*(id *)(gLogObjects + 400);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v10 = (os_log_s *)&_os_log_default;
        id v11 = &_os_log_default;
      }

      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = (void *)objc_claimAutoreleasedReturnValue([v8 componentUID]);
        int v13 = (void *)objc_claimAutoreleasedReturnValue([v8 componentID]);
        int v14 = 138412802;
        id v15 = v1;
        __int16 v16 = 2112;
        __int16 v17 = v12;
        __int16 v18 = 2112;
        int v19 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "oobBtPairing2 startOOBBTPairing: %@, could not get device address, unable to start pairing of component %@ (id:%@)",  (uint8_t *)&v14,  0x20u);
      }

      _sendStartOOBBTPairing(v6, v8, 0LL);
      _sendStopOOBBTPairing(v6, v8, 4);
    }
  }

  [v4 unlock];
}

void sub_1001235B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void sub_100123A90(_Unwind_Exception *a1)
{
}

void _sendStopOOBBTPairing(void *a1, void *a2, int a3)
{
  id v5 = a1;
  id v6 = a2;
  uint64_t v7 = v6;
  if (v5 && v6)
  {
    if (gLogObjects && gNumLogObjects >= 51)
    {
      int v8 = (os_log_s *)*(id *)(gLogObjects + 400);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v8 = (os_log_s *)&_os_log_default;
      id v9 = &_os_log_default;
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 accessoryUID]);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 componentUID]);
      int v18 = 138413058;
      int v19 = v10;
      __int16 v20 = 2112;
      uint64_t v21 = v11;
      __int16 v22 = 1024;
      unsigned int v23 = [v7 status];
      __int16 v24 = 1024;
      int v25 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "oobBtPairing2: %@, _sendStopOOBBTPairing, component %@ (status %d), status %d",  (uint8_t *)&v18,  0x22u);
    }

    int v12 = malloc(0x18uLL);
    if (v12)
    {
      uint64_t v13 = (uint64_t)v12;
      *(_DWORD *)int v12 = 1;
      v12[1] = objc_claimAutoreleasedReturnValue([v7 componentUID]);
      *(_DWORD *)(v13 + 16) = a3;
      int v14 = (void *)objc_claimAutoreleasedReturnValue([v5 accessoryUID]);
      char v15 = accFeatureHandlers_invokeHandler(v14, 55, v13);

      if ((v15 & 1) == 0) {
        platform_oobBtPairing2_deleteParams((void *)v13);
      }
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 51)
      {
        __int16 v16 = (os_log_s *)*(id *)(gLogObjects + 400);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        __int16 v16 = (os_log_s *)&_os_log_default;
        id v17 = &_os_log_default;
      }

      if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT)) {
        _sendStopOOBBTPairing_cold_1();
      }
    }
  }
}

void platform_oobBtPairing2_accessoryAttached(uint64_t a1, uint64_t a2, void *a3)
{
  if (gLogObjects && gNumLogObjects >= 51)
  {
    id v6 = (os_log_s *)*(id *)(gLogObjects + 400);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v6 = (os_log_s *)&_os_log_default;
    id v7 = &_os_log_default;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    id v8 = platform_oobBtPairing_accessoryDictionaryForLogging(a2);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    *(_DWORD *)buf = 138412546;
    uint64_t v44 = a1;
    __int16 v45 = 2112;
    uint64_t v46 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "oobBtPairing2 accessoryAttached: %@, accInfoDict=%@",  buf,  0x16u);
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[OOBBTPairing2Accessory accessoryListLock](&OBJC_CLASS___OOBBTPairing2Accessory, "accessoryListLock"));
  [v10 lock];
  id v11 = (OOBBTPairing2Accessory *)objc_claimAutoreleasedReturnValue( +[OOBBTPairing2Accessory accessoryForUID:]( &OBJC_CLASS___OOBBTPairing2Accessory,  "accessoryForUID:",  a1));
  if (!v11)
  {
    id v11 = -[OOBBTPairing2Accessory initWithUID:accInfo:]( objc_alloc(&OBJC_CLASS___OOBBTPairing2Accessory),  "initWithUID:accInfo:",  a1,  a2);
    +[OOBBTPairing2Accessory addAccessory:](&OBJC_CLASS___OOBBTPairing2Accessory, "addAccessory:", v11);
  }

  id v12 = a3;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  id v13 = [v12 countByEnumeratingWithState:&v38 objects:v42 count:16];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = *(void *)v39;
    do
    {
      for (int i = 0LL; i != v14; int i = (char *)i + 1)
      {
        if (*(void *)v39 != v15) {
          objc_enumerationMutation(v12);
        }
        id v17 = -[OOBBTPairing2Component initWithComponentInfo:]( objc_alloc(&OBJC_CLASS___OOBBTPairing2Component),  "initWithComponentInfo:",  *(void *)(*((void *)&v38 + 1) + 8LL * (void)i));
        -[OOBBTPairing2Accessory addComponent:](v11, "addComponent:", v17);
      }

      id v14 = [v12 countByEnumeratingWithState:&v38 objects:v42 count:16];
    }

    while (v14);
  }

  [v10 unlock];
  int v18 = (void *)objc_claimAutoreleasedReturnValue(+[ACCOOBBTPairingServer sharedServer](&OBJC_CLASS___ACCOOBBTPairingServer, "sharedServer"));
  [v18 incrementUserCount];
  [v18 accessoryOOBBTPairingAttached:a1 accInfoDict:a2];
  int v19 = -[OOBBTPairing2Accessory checkComponentsAlreadyPaired](v11, "checkComponentsAlreadyPaired");
  if (-[OOBBTPairing2Accessory carPlaySupported](v11, "carPlaySupported"))
  {
    if (gLogObjects && gNumLogObjects >= 51)
    {
      __int16 v20 = (os_log_s *)*(id *)(gLogObjects + 400);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int16 v20 = (os_log_s *)&_os_log_default;
      id v24 = &_os_log_default;
    }

    int v25 = &OBJC_METACLASS___ACCExternalAccessoryClientInfo;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v44 = a1;
      uint64_t v26 = "oobBtPairing2 accessoryAttached: %@, CarPlay so SKIP OOB Pairing user notification";
      uint64_t v27 = v20;
      uint32_t v28 = 12;
LABEL_49:
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, v26, buf, v28);
    }
  }

  else
  {
    if (gLogObjects) {
      BOOL v21 = gNumLogObjects <= 50;
    }
    else {
      BOOL v21 = 1;
    }
    int v22 = !v21;
    if (v19 < 1)
    {
      if (v22)
      {
        __int16 v20 = (os_log_s *)*(id *)(gLogObjects + 400);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        __int16 v20 = (os_log_s *)&_os_log_default;
        id v31 = &_os_log_default;
      }

      int v25 = &OBJC_METACLASS___ACCExternalAccessoryClientInfo;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        uint64_t v44 = a1;
        __int16 v45 = 1024;
        LODWORD(v46) = v19;
        uint64_t v26 = "oobBtPairing2 accessoryAttached: %@, not CarPlay but all components are already paired, anyNeedPairing=%d";
        uint64_t v27 = v20;
        uint32_t v28 = 18;
        goto LABEL_49;
      }
    }

    else
    {
      if (v22)
      {
        unsigned int v23 = (os_log_s *)*(id *)(gLogObjects + 400);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        unsigned int v23 = (os_log_s *)&_os_log_default;
        id v29 = &_os_log_default;
      }

      int v25 = &OBJC_METACLASS___ACCExternalAccessoryClientInfo;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v44 = a1;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "oobBtPairing2 accessoryAttached: %@, not CarPlay so present OOB Pairing user notification",  buf,  0xCu);
      }

      __int16 v20 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[ACCUserNotificationManager sharedManager]( &OBJC_CLASS___ACCUserNotificationManager,  "sharedManager"));
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(-[OOBBTPairing2Accessory userNotification](v11, "userNotification"));
      v37[0] = _NSConcreteStackBlock;
      v37[1] = 3221225472LL;
      v37[2] = __platform_oobBtPairing2_accessoryAttached_block_invoke;
      v37[3] = &__block_descriptor_40_e8_v12__0i8l;
      v37[4] = a1;
      -[os_log_s presentNotification:completionHandler:](v20, "presentNotification:completionHandler:", v30, v37);
    }
  }

  uint64_t v32 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([&v25[79] processingQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = __platform_oobBtPairing2_accessoryAttached_block_invoke_194;
  block[3] = &unk_1001FC658;
  uint64_t v35 = v11;
  uint64_t v36 = a1;
  uint64_t v33 = v11;
  dispatch_async(v32, block);
}

void __platform_oobBtPairing2_accessoryAttached_block_invoke(uint64_t a1, int a2)
{
  id v3 = *(id *)(a1 + 32);
  if (gLogObjects && gNumLogObjects >= 51)
  {
    uint64_t v4 = (os_log_s *)*(id *)(gLogObjects + 400);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v4 = (os_log_s *)&_os_log_default;
    id v5 = &_os_log_default;
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412546;
    id v20 = v3;
    __int16 v21 = 1024;
    int v22 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "oobBtPairing2: %@, _handleUserResponse response = %d",  buf,  0x12u);
  }

  if (a2)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[OOBBTPairing2Accessory accessoryForUID:]( &OBJC_CLASS___OOBBTPairing2Accessory,  "accessoryForUID:",  v3));
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 componentList]);
    id v8 = v7;
    if (v6 && v7)
    {
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "allValues", 0));
      id v10 = [v9 countByEnumeratingWithState:&v15 objects:buf count:16];
      if (v10)
      {
        id v11 = v10;
        uint64_t v12 = *(void *)v16;
        do
        {
          for (int i = 0LL; i != v11; int i = (char *)i + 1)
          {
            if (*(void *)v16 != v12) {
              objc_enumerationMutation(v9);
            }
            id v14 = *(void **)(*((void *)&v15 + 1) + 8LL * (void)i);
            _sendStartOOBBTPairing(v6, v14, 0LL);
            _sendStopOOBBTPairing(v6, v14, 4);
          }

          id v11 = [v9 countByEnumeratingWithState:&v15 objects:buf count:16];
        }

        while (v11);
      }
    }
  }

  else
  {
    platform_oobBtPairing2_startOobBtPairingHandler(v3);
  }
}

void __platform_oobBtPairing2_accessoryAttached_block_invoke_194(uint64_t a1)
{
  BOOL v2 = &startLogsNotificationObservers;
  if (gLogObjects && gNumLogObjects >= 51)
  {
    id v3 = (os_log_s *)*(id *)(gLogObjects + 400);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v3 = (os_log_s *)&_os_log_default;
    id v4 = &_os_log_default;
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138412290;
    uint64_t v38 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "oobBtPairing2 accessoryAttached: %@, Check for already paired components",  buf,  0xCu);
  }

  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) componentList]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 allValues]);

  id v8 = [v7 countByEnumeratingWithState:&v32 objects:v36 count:16];
  if (v8)
  {
    id v10 = v8;
    uint64_t v11 = *(void *)v33;
    *(void *)&__int128 v9 = 134218240LL;
    __int128 v30 = v9;
    do
    {
      uint64_t v12 = 0LL;
      id v31 = v10;
      do
      {
        if (*(void *)v33 != v11) {
          objc_enumerationMutation(v7);
        }
        id v13 = *(void **)(*((void *)&v32 + 1) + 8LL * (void)v12);
        if (objc_msgSend(v13, "status", v30) == 3)
        {
          id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accessoryUID]);
          __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v13 componentUID]);
          id v16 = v14;
          id v17 = v15;
          uint64_t v18 = v2[353];
          int v19 = gNumLogObjects;
          if (v18 && gNumLogObjects >= 51)
          {
            id v20 = (os_log_s *)*(id *)(v18 + 400);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = v30;
              uint64_t v38 = v18;
              __int16 v39 = 1024;
              LODWORD(v40) = v19;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            }

            id v21 = &_os_log_default;
            id v20 = (os_log_s *)&_os_log_default;
            id v10 = v31;
          }

          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            uint64_t v38 = (uint64_t)v16;
            __int16 v39 = 2112;
            id v40 = v17;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "oobBtPairing2: %@, _handleAlreadyPaired componentUID %@",  buf,  0x16u);
          }

          if (v16 && v17)
          {
            uint64_t v22 = v11;
            unsigned int v23 = v7;
            id v24 = v2;
            uint64_t v25 = a1;
            uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( +[OOBBTPairing2Accessory accessoryForUID:]( &OBJC_CLASS___OOBBTPairing2Accessory,  "accessoryForUID:",  v16));
            uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 componentList]);
            uint32_t v28 = v27;
            if (v26 && v27)
            {
              id v29 = (void *)objc_claimAutoreleasedReturnValue([v27 objectForKey:v17]);
              if (v29)
              {
                _sendStartOOBBTPairing(v26, v29, 0LL);
                _sendStopOOBBTPairing(v26, v29, 3);
              }
            }

            a1 = v25;
            BOOL v2 = v24;
            id v7 = v23;
            uint64_t v11 = v22;
            id v10 = v31;
          }
        }

        uint64_t v12 = (char *)v12 + 1;
      }

      while (v10 != v12);
      id v10 = [v7 countByEnumeratingWithState:&v32 objects:v36 count:16];
    }

    while (v10);
  }
}

void platform_oobBtPairing2_accessoryDetached(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 51)
  {
    BOOL v2 = (os_log_s *)*(id *)(gLogObjects + 400);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v2 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v6 = 138412290;
    uint64_t v7 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "oobBtPairing2 accessoryDetached: %@",  (uint8_t *)&v6,  0xCu);
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACCOOBBTPairingServer sharedServer](&OBJC_CLASS___ACCOOBBTPairingServer, "sharedServer"));
  [v4 accessoryOOBBTPairingDetached:a1];
  [v4 decrementUserCount];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[OOBBTPairing2Accessory accessoryListLock](&OBJC_CLASS___OOBBTPairing2Accessory, "accessoryListLock"));
  [v5 lock];
  +[OOBBTPairing2Accessory removeAccessoryForUID:](&OBJC_CLASS___OOBBTPairing2Accessory, "removeAccessoryForUID:", a1);
  [v5 unlock];
}

void platform_oobBtPairing2_accessoryInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (gLogObjects && gNumLogObjects >= 51)
  {
    id v10 = (os_log_s *)*(id *)(gLogObjects + 400);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v10 = (os_log_s *)&_os_log_default;
    id v11 = &_os_log_default;
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    int v17 = 138413058;
    uint64_t v18 = a1;
    __int16 v19 = 2112;
    uint64_t v20 = a2;
    __int16 v21 = 2112;
    uint64_t v22 = a4;
    __int16 v23 = 2112;
    uint64_t v24 = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "oobBtPairing2 accessoryInfo: %@, componentUID %@, pairingDataP192 %@, pairingDataP256 %@",  (uint8_t *)&v17,  0x2Au);
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[OOBBTPairing2Accessory accessoryListLock](&OBJC_CLASS___OOBBTPairing2Accessory, "accessoryListLock"));
  [v12 lock];
  id v13 = (void *)objc_claimAutoreleasedReturnValue( +[OOBBTPairing2Accessory accessoryForUID:]( &OBJC_CLASS___OOBBTPairing2Accessory,  "accessoryForUID:",  a1));
  id v14 = v13;
  if (v13)
  {
    __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v13 componentList]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKey:a2]);
    if (v16) {
      [v14 startPairing:v16 macAddr:a3 pairingDataP192:a4 pairingDataP256:a5];
    }
  }

  [v12 unlock];
}

void platform_oobBtPairing2_completionStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (gLogObjects && gNumLogObjects >= 51)
  {
    int v6 = (os_log_s *)*(id *)(gLogObjects + 400);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v6 = (os_log_s *)&_os_log_default;
    id v7 = &_os_log_default;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138413314;
    uint64_t v34 = a1;
    __int16 v35 = 2112;
    uint64_t v36 = a2;
    __int16 v37 = 1024;
    unsigned int v38 = a3;
    __int16 v39 = 1024;
    int v40 = 2;
    __int16 v41 = 1024;
    int v42 = 4;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "oobBtPairing2 completionStatus: %@, componentUID %@, uint64_t result = %d (%d=Success, %d=Cancelled)",  buf,  0x28u);
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[OOBBTPairing2Accessory accessoryListLock](&OBJC_CLASS___OOBBTPairing2Accessory, "accessoryListLock"));
  [v8 lock];
  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue( +[OOBBTPairing2Accessory accessoryForUID:]( &OBJC_CLASS___OOBBTPairing2Accessory,  "accessoryForUID:",  a1));
  id v10 = v9;
  if (v9)
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 componentList]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKey:a2]);
    if (v12)
    {
      if (gLogObjects && gNumLogObjects >= 51)
      {
        id v13 = (os_log_s *)*(id *)(gLogObjects + 400);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v13 = (os_log_s *)&_os_log_default;
        id v15 = &_os_log_default;
      }

      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        unsigned int v16 = [v12 status];
        unsigned int v17 = [v12 accessoryStatus];
        *(_DWORD *)buf = 138413314;
        uint64_t v34 = a1;
        __int16 v35 = 2112;
        uint64_t v36 = a2;
        __int16 v37 = 1024;
        unsigned int v38 = v16;
        __int16 v39 = 1024;
        int v40 = v17;
        __int16 v41 = 1024;
        int v42 = a3;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "oobBtPairing2 completionStatus: %@, componentUID %@, status %d, accessoryStatus %d->%d",  buf,  0x28u);
      }

      [v12 setAccessoryStatus:a3];
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 macAddr]);
      if ([v12 accessoryStatus] == 4 || objc_msgSend(v12, "status") >= 2)
      {
        if ([v12 accessoryStatus] == 4)
        {
          [v12 setStatus:4];
        }

        uint64_t v18 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue( +[OOBBTPairing2Accessory processingQueue]( &OBJC_CLASS___OOBBTPairing2Accessory,  "processingQueue"));
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = __platform_oobBtPairing2_completionStatus_block_invoke;
        block[3] = &unk_1001F9798;
        id v31 = v10;
        id v32 = v12;
        dispatch_async(v18, block);
      }
    }

    else
    {
      id v14 = 0LL;
    }

    __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([v10 getPendingComponent]);

    if (v19)
    {
      uint64_t v20 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue( +[OOBBTPairing2Accessory processingQueue]( &OBJC_CLASS___OOBBTPairing2Accessory,  "processingQueue"));
      uint64_t v22 = _NSConcreteStackBlock;
      uint64_t v23 = 3221225472LL;
      uint64_t v24 = __platform_oobBtPairing2_completionStatus_block_invoke_2;
      uint64_t v25 = &unk_1001FDD40;
      id v26 = v10;
      id v27 = v19;
      uint64_t v28 = a1;
      uint64_t v29 = a2;
      dispatch_async(v20, &v22);
    }
  }

  else
  {
    id v14 = 0LL;
  }

  objc_msgSend(v8, "unlock", v22, v23, v24, v25);
  __int16 v21 = (void *)objc_claimAutoreleasedReturnValue(+[ACCOOBBTPairingServer sharedServer](&OBJC_CLASS___ACCOOBBTPairingServer, "sharedServer"));
  [v21 accessoryOOBBTPairingCompletionStatus:a1 oobBtPairingUID:a2 accessoryMacAddr:v14 result:(_DWORD)a3 != 2];
}

void __platform_oobBtPairing2_completionStatus_block_invoke(uint64_t a1)
{
}

void __platform_oobBtPairing2_completionStatus_block_invoke_2(uint64_t a1)
{
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) getDeviceMacAddress]);
  if (v2)
  {
    _sendStartOOBBTPairing(*(void **)(a1 + 32), *(void **)(a1 + 40), v2);
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 51)
    {
      id v3 = (os_log_s *)*(id *)(gLogObjects + 400);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v3 = (os_log_s *)&_os_log_default;
      id v4 = &_os_log_default;
    }

    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 48);
      uint64_t v6 = *(void *)(a1 + 56);
      int v7 = 138412546;
      uint64_t v8 = v5;
      __int16 v9 = 2112;
      uint64_t v10 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "oobBtPairing2 completionStatus: %@, could not get device address, unable to start pairing of %@",  (uint8_t *)&v7,  0x16u);
    }
  }
}

void _sendStartOOBBTPairing(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v5 && v6)
  {
    if (gLogObjects && gNumLogObjects >= 51)
    {
      uint64_t v8 = (os_log_s *)*(id *)(gLogObjects + 400);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v8 = (os_log_s *)&_os_log_default;
      id v9 = &_os_log_default;
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 accessoryUID]);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v6 componentUID]);
      int v18 = 138413058;
      __int16 v19 = v10;
      __int16 v20 = 2112;
      __int16 v21 = v11;
      __int16 v22 = 1024;
      unsigned int v23 = [v6 status];
      __int16 v24 = 2048;
      id v25 = [v7 length];
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "oobBtPairing2: %@, _sendStartOOBBTPairing, component %@ (status %d), deviceMacAddr %lu bytes",  (uint8_t *)&v18,  0x26u);
    }

    uint64_t v12 = malloc(0x18uLL);
    if (v12)
    {
      id v13 = v12;
      *(_DWORD *)uint64_t v12 = 0;
      v12[1] = objc_claimAutoreleasedReturnValue([v6 componentUID]);
      _DWORD v13[2] = 0LL;
      if (v7) {
        _DWORD v13[2] = v7;
      }
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v5 accessoryUID]);
      int v15 = accFeatureHandlers_invokeHandler(v14, 54, (uint64_t)v13);

      if (v15) {
        [v6 setStatus:1];
      }
      else {
        platform_oobBtPairing2_deleteParams(v13);
      }
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 51)
      {
        unsigned int v16 = (os_log_s *)*(id *)(gLogObjects + 400);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        unsigned int v16 = (os_log_s *)&_os_log_default;
        id v17 = &_os_log_default;
      }

      if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT)) {
        _sendStopOOBBTPairing_cold_1();
      }
    }
  }
}

void platform_oobBtPairing2_stopOobBtPairingHandler(void *a1)
{
  id v1 = a1;
  if (gLogObjects && gNumLogObjects >= 51)
  {
    BOOL v2 = (os_log_s *)*(id *)(gLogObjects + 400);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v2 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    id v20 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "oobBtPairing2 stopOOBBTPairing: %@", buf, 0xCu);
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[OOBBTPairing2Accessory accessoryListLock](&OBJC_CLASS___OOBBTPairing2Accessory, "accessoryListLock"));
  [v4 lock];
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[OOBBTPairing2Accessory accessoryForUID:]( &OBJC_CLASS___OOBBTPairing2Accessory,  "accessoryForUID:",  v1));
  id v6 = v5;
  if (v5)
  {
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    id v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "componentList", 0));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 allValues]);

    id v9 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v15;
      do
      {
        for (int i = 0LL; i != v10; int i = (char *)i + 1)
        {
          if (*(void *)v15 != v11) {
            objc_enumerationMutation(v8);
          }
          id v13 = *(void **)(*((void *)&v14 + 1) + 8LL * (void)i);
        }

        id v10 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }

      while (v10);
    }
  }

  [v4 unlock];
}

void platform_oobBtPairing2_deleteParams(void *a1)
{
  if (a1)
  {
    if (!*(_DWORD *)a1)
    {
      BOOL v2 = (const void *)a1[2];
      if (v2)
      {
        CFRelease(v2);
        a1[2] = 0LL;
      }
    }

    id v3 = (const void *)a1[1];
    if (v3) {
      CFRelease(v3);
    }
    free(a1);
  }

BOOL platform_oobBtPairing2_isSupported(uint64_t a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue( +[OOBBTPairing2Accessory accessoryForUID:]( &OBJC_CLASS___OOBBTPairing2Accessory,  "accessoryForUID:",  a1));
  BOOL v2 = v1 != 0LL;

  return v2;
}

__CFDictionary *platform_oobBtPairing2_createAccInfoMutableDict( const void *a1, const void *a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, const void *a8, const void *a9, char a10)
{
  CFMutableDataRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeDictionaryKeyCallBacks, 0LL);
  __int16 v19 = Mutable;
  if (a2 && a1 && Mutable)
  {
    CFDictionaryAddValue(Mutable, @"ACCOOBBTPairingAccManufacturer", a2);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingAccModel", a1);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingAccName", a3);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingAccSerialNum", a4);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingAccFwVer", a5);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingAccHwVer", a6);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingCertData", a8);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingCertSerial", a9);
    if (a7) {
      CFDictionaryAddValue(v19, @"ACCOOBBTPairingDisplayName", a7);
    }
    char valuePtr = a10;
    CFNumberRef v20 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCharType, &valuePtr);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairingCarPlaySupported", v20);
    CFRelease(v20);
    char valuePtr = 1;
    CFNumberRef v21 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCharType, &valuePtr);
    CFDictionaryAddValue(v19, @"ACCOOBBTPairing2Supported", v21);
    CFRelease(v21);
  }

  return v19;
}

__CFDictionary *platform_oobBtPairing2_createBtComponentMutableDict( __int16 a1, const void *a2, const void *a3, const void *a4)
{
  __int16 valuePtr = a1;
  CFMutableDataRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
  CFDictionaryAddValue(Mutable, @"ACCOOBBTPairingComponentInfoID", v8);
  if (a2) {
    CFDictionaryAddValue(Mutable, @"ACCOOBBTPairingComponentInfoUID", a2);
  }
  if (a3) {
    CFDictionaryAddValue(Mutable, @"ACCOOBBTPairingComponentInfoName", a3);
  }
  if (a4) {
    CFDictionaryAddValue(Mutable, @"ACCOOBBTPairingComponentInfoMacAddr", a4);
  }
  if (v8) {
    CFRelease(v8);
  }
  return Mutable;
}

void platform_oobBTPairing2_incrementUserCount()
{
  id v0 = (void *)objc_claimAutoreleasedReturnValue(+[ACCOOBBTPairingServer sharedServer](&OBJC_CLASS___ACCOOBBTPairingServer, "sharedServer"));
  [v0 incrementUserCount];

  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[ACCOOBBTPairingServer sharedServer](&OBJC_CLASS___ACCOOBBTPairingServer, "sharedServer"));
  unsigned int v2 = [v1 featureUserCount];

  if (v2 == 1)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[ACCFeaturePluginManager sharedManager](&OBJC_CLASS___ACCFeaturePluginManager, "sharedManager"));
    [v3 startPlugInsWithClasses:&off_100206B18];
  }

void OUTLINED_FUNCTION_3_15( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void OUTLINED_FUNCTION_7_11( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void iap2_identification_setIdentificationState(uint64_t *a1, int a2)
{
  if (a2 == 6)
  {
    if (*a1)
    {
      __int128 v11 = 0u;
      __int128 v12 = 0u;
      __int128 v9 = 0u;
      __int128 v10 = 0u;
      __int128 v7 = 0u;
      __int128 v8 = 0u;
      __int128 v6 = 0u;
      v5[0] = *(void *)(*(void *)(iap2_feature_getFeature((uint64_t)a1, 1u) + 8) + 8LL);
      v5[1] = *(void *)(*(void *)(iap2_feature_getFeature((uint64_t)a1, 1u) + 8) + 24LL);
      _DWORD v5[2] = *(void *)(*(void *)(iap2_feature_getFeature((uint64_t)a1, 1u) + 8) + 16LL);
      v5[3] = *(void *)(*(void *)(iap2_feature_getFeature((uint64_t)a1, 1u) + 8) + 32LL);
      v5[4] = *(void *)(*(void *)(iap2_feature_getFeature((uint64_t)a1, 1u) + 8) + 48LL);
      v5[5] = *(void *)(*(void *)(iap2_feature_getFeature((uint64_t)a1, 1u) + 8) + 40LL);
      void v5[6] = 0LL;
      v5[7] = *(void *)(*(void *)(iap2_feature_getFeature((uint64_t)a1, 1u) + 8) + 64LL);
      acc_endpoint_setAccessoryInfo(*a1, (uint64_t)v5);
    }
  }

  else if ((a2 & 0xFFFFFFFD) == 1)
  {
    acc_endpoint_clearAccessoryInfo(*a1);
  }

  if (gLogObjects && gNumLogObjects >= 26)
  {
    id v4 = *(os_log_s **)(gLogObjects + 200);
  }

  else
  {
    id v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v5[0]) = 67109120;
    HIDWORD(v5[0]) = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Identification state changed: %{coreacc:iAP2Feature_Identification_State_t}d",  (uint8_t *)v5,  8u);
  }

  iap2_sessionControl_identificationStateChanged((uint64_t)a1, a2);
}

uint64_t iap2_identification_getState(uint64_t a1)
{
  uint64_t result = iap2_feature_getFeature(a1, 1u);
  if (result) {
    return *(unsigned int *)iap2_feature_getFeature(a1, 1u);
  }
  return result;
}

uint64_t iap2_identification_setIdentificationInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0LL;
  if (a1 && a2)
  {
    if (iap2_feature_getFeature(a1, 1u))
    {
      if (*(void *)(iap2_feature_getFeature(a1, 1u) + 8))
      {
        uint64_t Feature = iap2_feature_getFeature(a1, 1u);
        iap2_identification_releaseIdentInfo(*(void *)(Feature + 8));
        if (*(void *)(iap2_feature_getFeature(a1, 1u) + 8))
        {
          uint64_t v6 = iap2_feature_getFeature(a1, 1u);
          free(*(void **)(v6 + 8));
          *(void *)(iap2_feature_getFeature(a1, 1u) + _Block_object_dispose((const void *)(v1 - 96), 8) = 0LL;
        }
      }

      uint64_t v2 = 1LL;
      *(void *)(iap2_feature_getFeature(a1, 1u) + _Block_object_dispose((const void *)(v1 - 96), 8) = a2;
    }

    else
    {
      return 0LL;
    }
  }

  return v2;
}

void iap2_identification_releaseIdentInfo(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 26;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    id v3 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    id v3 = *(os_log_s **)(gLogObjects + 200);
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    iap2_identification_releaseIdentInfo_cold_1();
    if (!a1) {
      return;
    }
  }

  else if (!a1)
  {
    return;
  }

  id v4 = *(const void **)(a1 + 8);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 96), 8) = 0LL;
  }

  id v5 = *(const void **)(a1 + 16);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 16) = 0LL;
  }

  uint64_t v6 = *(const void **)(a1 + 24);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 24) = 0LL;
  }

  __int128 v7 = *(const void **)(a1 + 32);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 32) = 0LL;
  }

  __int128 v8 = *(const void **)(a1 + 40);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 40) = 0LL;
  }

  __int128 v9 = *(const void **)(a1 + 48);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 96), 8) = 0LL;
  }

  __int128 v10 = *(const void **)(a1 + 56);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 56) = 0LL;
  }

  __int128 v11 = *(const void **)(a1 + 96);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 96) = 0LL;
  }

  __int128 v12 = *(const void **)(a1 + 104);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 104) = 0LL;
  }

  id v13 = *(const void **)(a1 + 112);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(a1 + 112) = 0LL;
  }

  __int128 v14 = *(const void **)(a1 + 64);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(a1 + 64) = 0LL;
  }

  __int128 v15 = *(const __CFDictionary **)(a1 + 72);
  if (v15)
  {
    CFIndex Count = CFDictionaryGetCount(v15);
    uint64_t v17 = __chkstk_darwin(Count);
    __int16 v19 = (const void **)((char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    if (v17)
    {
      memset((char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL), 170, v18);
      CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 72), 0LL, v19);
      if (Count >= 1)
      {
        do
        {
          CFNumberRef v20 = (void **)*((void *)*v19 + 7);
          if (!*v20 || (free(*v20), v21 = *v19, (CFNumberRef v20 = (void **)*((void *)*v19 + 7)) != 0LL))
          {
            free(v20);
            *((void *)*v19 + 7) = 0LL;
            CFNumberRef v21 = *v19;
          }

          __int16 v22 = (void *)v21[4];
          if (v22)
          {
            free(v22);
            *((void *)*v19 + 4) = 0LL;
            CFNumberRef v21 = *v19;
          }

          unsigned int v23 = (const void *)v21[1];
          if (v23)
          {
            CFRelease(v23);
            *((void *)*v19 + 1) = 0LL;
            CFNumberRef v21 = *v19;
          }

          CFNumberRef v24 = CFNumberCreate(0LL, kCFNumberShortType, v21);
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 72), v24);
          if (v24) {
            CFRelease(v24);
          }
          if (*v19)
          {
            free((void *)*v19);
            *__int16 v19 = 0LL;
          }

          ++v19;
          --Count;
        }

        while (Count);
      }
    }

    else
    {
      CFDictionaryGetKeysAndValues( *(CFDictionaryRef *)(a1 + 72),  0LL,  (const void **)((char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)));
    }

    id v25 = *(const void **)(a1 + 72);
    if (v25)
    {
      CFRelease(v25);
      *(void *)(a1 + 72) = 0LL;
    }
  }

  id v26 = *(const void **)(a1 + 88);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(a1 + 8_Block_object_dispose((const void *)(v1 - 96), 8) = 0LL;
  }

  id v27 = *(void ***)(a1 + 216);
  if (v27)
  {
    if (!*v27 || (free(*v27), (id v27 = *(void ***)(a1 + 216)) != 0LL))
    {
      free(v27);
      *(void *)(a1 + 216) = 0LL;
    }
  }

  iap2_identification_releaseRejectMessage((void *)a1);
}

uint64_t iap2_identification_getIdentificationInfo(uint64_t a1)
{
  uint64_t result = iap2_feature_getFeature(a1, 1u);
  if (result) {
    return *(void *)(iap2_feature_getFeature(a1, 1u) + 8);
  }
  return result;
}

uint64_t iap2_identification_checkIdentificationInfoFeatures(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v40 = 0;
  FeatureInfoEntries = iap2_feature_getFeatureInfoEntries((int *)&v40);
  id v4 = &startLogsNotificationObservers;
  id v5 = &startLogsNotificationObservers;
  if (FeatureInfoEntries)
  {
    if (v40)
    {
      uint64_t v6 = FeatureInfoEntries;
      unint64_t v7 = 0LL;
      uint64_t v8 = 0LL;
      do
      {
        __int128 v9 = (unsigned __int8 *)*((void *)v6 + 1);
        if (*(void *)v9)
        {
          if (*(void *)(*(void *)v9 + 24LL))
          {
            uint64_t v10 = v4[353];
            int v11 = *((_DWORD *)v5 + 708);
            if (v10) {
              BOOL v12 = v11 < 26;
            }
            else {
              BOOL v12 = 1;
            }
            if (v12)
            {
              __int16 v19 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)int v42 = v10;
                *(_WORD *)&v42[8] = 1024;
                int v43 = v11;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                __int16 v19 = (os_log_s *)&_os_log_default;
              }
            }

            else
            {
              __int16 v19 = *(os_log_s **)(v10 + 200);
            }

            if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
            {
              int v20 = *v6;
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)int v42 = v20;
              _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "Checking identification info for feature: %{coreacc:iAP2Feature_t}d...",  buf,  8u);
            }

            int v21 = (*(uint64_t (**)(uint64_t, uint64_t))(**((void **)v6 + 1) + 24LL))(a1, a2);
            if (v21)
            {
              uint64_t v22 = v4[353];
              unsigned int v23 = v5;
              int v24 = *((_DWORD *)v5 + 708);
              if (v22 && v24 >= 26)
              {
                id v25 = *(os_log_s **)(v22 + 200);
              }

              else
              {
                id v25 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  *(void *)int v42 = v22;
                  *(_WORD *)&v42[8] = 1024;
                  int v43 = v24;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                  id v25 = (os_log_s *)&_os_log_default;
                }
              }

              id v5 = v23;
              id v4 = &startLogsNotificationObservers;
              if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
              {
                int v26 = *v6;
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)int v42 = v26;
                *(_WORD *)&_OWORD v42[4] = 1024;
                *(_DWORD *)&_BYTE v42[6] = v21;
                _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Identification info rejected for feature %{coreacc:iAP2Feature_t}d, reject reason: %d",  buf,  0xEu);
              }
            }

            uint64_t v8 = v21 | v8;
          }

          else
          {
            int v13 = v9[34];
            uint64_t v14 = v4[353];
            int v15 = *((_DWORD *)v5 + 708);
            if (v14) {
              BOOL v16 = v15 <= 25;
            }
            else {
              BOOL v16 = 1;
            }
            int v17 = !v16;
            if (v13)
            {
              if (v17)
              {
                size_t v18 = *(os_log_s **)(v14 + 200);
              }

              else
              {
                size_t v18 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  *(void *)int v42 = v14;
                  *(_WORD *)&v42[8] = 1024;
                  int v43 = v15;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                  size_t v18 = (os_log_s *)&_os_log_default;
                }
              }

              if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
              {
                int v28 = *v6;
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)int v42 = v28;
                _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "No checkIdentificationInfo function for feature: %{coreacc:iAP2Feature_t}d!",  buf,  8u);
              }
            }

            else
            {
              if (v17)
              {
                id v27 = *(os_log_s **)(v14 + 200);
              }

              else
              {
                id v27 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  *(void *)int v42 = v14;
                  *(_WORD *)&v42[8] = 1024;
                  int v43 = v15;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                  id v27 = (os_log_s *)&_os_log_default;
                }
              }

              if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
              {
                int v29 = *v6;
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)int v42 = v29;
                _os_log_error_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "No checkIdentificationInfo function for feature: %{coreacc:iAP2Feature_t}d!",  buf,  8u);
              }
            }
          }
        }

        ++v7;
        v6 += 4;
      }

      while (v7 < v40);
    }

    else
    {
      uint64_t v8 = 0LL;
    }

    id v31 = *(const __CFSet **)(a2 + 112);
    if (v31) {
      CFIndex Count = CFSetGetCount(v31);
    }
    else {
      CFIndex Count = 0LL;
    }
    uint64_t v33 = v4[353];
    if (v33) {
      BOOL v34 = *((_DWORD *)v5 + 708) < 26;
    }
    else {
      BOOL v34 = 1;
    }
    if (v34)
    {
      __int16 v35 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      __int16 v35 = *(os_log_s **)(v33 + 200);
    }

    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)int v42 = Count;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Identified for %lu feature(s)!", buf, 0xCu);
    }

    if ((_DWORD)v8)
    {
      if (gLogObjects && *((int *)v5 + 708) >= 26)
      {
        uint64_t v36 = *(os_log_s **)(gLogObjects + 200);
      }

      else
      {
        uint64_t v36 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)int v42 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "IdentificationInfo needs to be rejected. Status : %d",  buf,  8u);
      }
    }
  }

  else
  {
    if (gLogObjects) {
      BOOL v30 = gNumLogObjects < 26;
    }
    else {
      BOOL v30 = 1;
    }
    if (v30)
    {
      __int16 v37 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      __int16 v37 = *(os_log_s **)(gLogObjects + 200);
    }

    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
      iap2_identification_checkIdentificationInfoFeatures_cold_1();
    }
    return 0LL;
  }

  return v8;
}

const char *iap2_identification_rejectName(unsigned int a1)
{
  if (a1 > 0x10) {
    return "def";
  }
  else {
    return off_1001FDFD0[a1];
  }
}

const char *iap2_identification_paramName(int a1)
{
  uint64_t result = "AccName";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "AccModel";
      break;
    case 2:
      uint64_t result = "AccManufacturer";
      break;
    case 3:
      uint64_t result = "AccSerialNumber";
      break;
    case 4:
      uint64_t result = "AccFirmwareVersion";
      break;
    case 5:
      uint64_t result = "AccHardwareVersion";
      break;
    case 6:
      uint64_t result = "MessagesSentByAccessory";
      break;
    case 7:
      uint64_t result = "MessagesRcvdFromDevice";
      break;
    case 8:
      uint64_t result = "PowerSourceType";
      break;
    case 9:
      uint64_t result = "MaximumCurrentDrawnFromDevice";
      break;
    case 10:
      uint64_t result = "SupportedEAProtocol";
      break;
    case 11:
      uint64_t result = "PreferredAppBundleSeedID";
      break;
    case 12:
      uint64_t result = "CurrentLanguage";
      break;
    case 13:
      uint64_t result = "SupportedLanguage";
      break;
    case 14:
      uint64_t result = "SerialTransportComponent";
      break;
    case 15:
      uint64_t result = "USBDeviceTransportComponent";
      break;
    case 16:
      uint64_t result = "USBHostTransportComponent";
      break;
    case 17:
      uint64_t result = "BluetoothTransportComponent";
      break;
    case 18:
      uint64_t result = "iAPHIDComponent";
      break;
    case 19:
      uint64_t result = "Reserved";
      break;
    case 20:
      uint64_t result = "VehicleInfo";
      break;
    case 21:
      uint64_t result = "VehicleStatus";
      break;
    case 22:
      uint64_t result = "LocationInfo";
      break;
    case 23:
      uint64_t result = "USBHostHIDComponent";
      break;
    case 24:
      uint64_t result = "WirelessCarPlayTransportComponent";
      break;
    case 25:
      uint64_t result = "MaximumSiphoningCurrent";
      break;
    case 26:
      uint64_t result = "BluetoothLETransportComponent";
      break;
    case 27:
      uint64_t result = "MaximumPOIDataFormatVersion";
      break;
    case 28:
    case 30:
    case 31:
    case 33:
    case 35:
    case 36:
    case 37:
      goto LABEL_6;
    case 29:
      uint64_t result = "NativeBTHIDComponent";
      break;
    case 32:
      uint64_t result = "ElectricVehicleChargingComponent";
      break;
    case 34:
      uint64_t result = "PPID";
      break;
    case 38:
      uint64_t result = "VehicleDigitalCarKeyInfo";
      break;
    default:
      if (a1 == 240)
      {
        uint64_t result = "MaximumCurrentDrawnInUHPM";
      }

      else if (a1 == 241)
      {
        uint64_t result = "PowerDuringSleep";
      }

      else
      {
LABEL_6:
        uint64_t result = "Unknown";
      }

      break;
  }

  return result;
}

void _addRejectParam(uint64_t a1, int a2, unsigned int a3)
{
  if (a1)
  {
    iAP2MsgAddVoidParam(*(void *)(a1 + 136), 0LL, a2);
    uint64_t v6 = iap2_identification_paramName(a2);
    unint64_t v7 = iap2_identification_rejectName(a3);
    uint64_t v8 = CFStringCreateWithFormat(kCFAllocatorDefault, 0LL, @"iapreject:  Param: %s Reason: %s\n", v6, v7);
    CFStringAppend(*(CFMutableStringRef *)(a1 + 192), v8);
    if (v8) {
      CFRelease(v8);
    }
  }

  else
  {
    if (gLogObjects) {
      BOOL v9 = gNumLogObjects < 26;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      uint64_t v10 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      uint64_t v10 = *(os_log_s **)(gLogObjects + 200);
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      _addRejectParam_cold_1();
    }
  }

void iap2_identification_addRejectParam(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t IdentificationInfo = iap2_identification_getIdentificationInfo(a1);
  _addRejectParam(IdentificationInfo, a2, a3);
}

void _addRejectGroup(uint64_t a1, int a2, int a3, unsigned int a4)
{
  if (a3 < 0) {
    uint64_t v7 = 0xFFFFLL;
  }
  else {
    uint64_t v7 = (unsigned __int16)a3;
  }
  iAP2MsgAddVoidParam(*(void *)(a1 + 136), 0LL, a2);
  uint64_t v8 = iap2_identification_paramName(a2);
  BOOL v9 = iap2_identification_rejectName(a4);
  uint64_t v10 = CFStringCreateWithFormat( kCFAllocatorDefault,  0LL,  @"iapreject:  Param: %s ID: 0x%04x Reason: %s\n",  v8,  v7,  v9);
  CFStringAppend(*(CFMutableStringRef *)(a1 + 192), v10);
  if (v10) {
    CFRelease(v10);
  }
}

void iap2_identification_addRejectGroup(uint64_t a1, int a2, int a3, unsigned int a4)
{
  uint64_t IdentificationInfo = iap2_identification_getIdentificationInfo(a1);
  _addRejectGroup(IdentificationInfo, a2, a3, a4);
}

uint64_t iap2_identification_createRejectMessage(uint64_t a1)
{
  if (!a1) {
    return 1LL;
  }
  BOOL v2 = calloc(1uLL, 0x48uLL);
  *(void *)(a1 + 136) = v2;
  id v3 = malloc(0xFFFFuLL);
  *(void *)(a1 + 144) = v3;
  iAP2MsgInit((uint64_t)v2, 7427, (uint64_t)v3, 0xFFFF, (uint64_t)_iap2_identification_cleanupRejectMsg, 0LL);
  *(void *)(a1 + 152) = CFDataCreateMutable(kCFAllocatorDefault, 0LL);
  *(void *)(a1 + 160) = CFDataCreateMutable(kCFAllocatorDefault, 0LL);
  *(_WORD *)(a1 + 16_Block_object_dispose((const void *)(v1 - 96), 8) = 0;
  *(void *)(a1 + 176) = CFSetCreateMutable(kCFAllocatorDefault, 0LL, 0LL);
  *(void *)(a1 + 184) = CFSetCreateMutable(kCFAllocatorDefault, 0LL, 0LL);
  *(void *)(a1 + 120) = CFSetCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeSetCallBacks);
  *(void *)(a1 + 192) = CFStringCreateMutable(kCFAllocatorDefault, 0LL);
  *(void *)(a1 + 200) = CFStringCreateMutable(kCFAllocatorDefault, 0LL);
  CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0LL);
  *(void *)(a1 + 20_Block_object_dispose((const void *)(v1 - 96), 8) = Mutable;
  if (!*(void *)(a1 + 136)
    || !*(void *)(a1 + 144)
    || !*(void *)(a1 + 152)
    || !*(void *)(a1 + 160)
    || !*(void *)(a1 + 176)
    || !*(void *)(a1 + 184)
    || !*(void *)(a1 + 120))
  {
    return 12LL;
  }

  CFMutableStringRef v5 = Mutable;
  uint64_t result = 12LL;
  if (*(void *)(a1 + 200) && v5)
  {
    uint64_t v7 = *(__CFString **)(a1 + 192);
    if (v7)
    {
      CFStringAppend(v7, @"iapreject: Identification Rejected Details:\n");
      CFStringAppendFormat( *(CFMutableStringRef *)(a1 + 200),  0LL,  @"iapreject:  Param: %s",  "MessagesSentByAccessory");
      CFStringAppendFormat( *(CFMutableStringRef *)(a1 + 208),  0LL,  @"iapreject:  Param: %s",  "MessagesRcvdFromDevice");
      return 0LL;
    }

    return 12LL;
  }

  return result;
}

void _iap2_identification_cleanupRejectMsg(void *a1, int a2)
{
  if (a2)
  {
    if (gLogObjects) {
      BOOL v3 = gNumLogObjects < 26;
    }
    else {
      BOOL v3 = 1;
    }
    if (v3)
    {
      id v4 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      id v4 = *(os_log_s **)(gLogObjects + 200);
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      if (a1)
      {
        int MsgID = iAP2MsgGetMsgID((uint64_t)a1);
        int MsgLen = iAP2MsgGetMsgLen((uint64_t)a1);
      }

      else
      {
        int MsgID = 0;
        int MsgLen = 0;
      }

      int v8 = 136316418;
      BOOL v9 = "_iap2_identification_cleanupRejectMsg";
      __int16 v10 = 1024;
      int v11 = 3067;
      __int16 v12 = 1024;
      int v13 = 1;
      __int16 v14 = 1024;
      int v15 = MsgID;
      __int16 v16 = 1024;
      int v17 = MsgLen;
      __int16 v18 = 2080;
      label = dispatch_queue_get_label(0LL);
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s:%d iAP2 IdentificationReject MSG Cleanup callback deleting msg! needDelete=%d msgID=%xh msgLen=%d currentDispatchQueue: %s",  (uint8_t *)&v8,  0x2Eu);
    }

    if (a1)
    {
      uint64_t v7 = (void *)a1[3];
      if (v7) {
        free(v7);
      }
      free(a1);
    }
  }

void iap2_identification_appendRejectMsgID(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  if (a3 == 1)
  {
    uint64_t v7 = *(__CFData **)(a1 + 160);
    int v8 = *(__CFString **)(a1 + 208);
    *(_BYTE *)(a1 + 169) = 1;
  }

  else
  {
    if (a3) {
      return;
    }
    uint64_t v7 = *(__CFData **)(a1 + 152);
    int v8 = *(__CFString **)(a1 + 200);
    *(_BYTE *)(a1 + 16_Block_object_dispose((const void *)(v1 - 96), 8) = 1;
  }

  if ((_DWORD)a2 == 255)
  {
    CFStringAppendFormat(v8, 0LL, @" Parameter Parse Error");
  }

  else
  {
    if (a4 == 1)
    {
      *(_WORD *)UInt8 bytes = __rev16(a2);
      CFDataAppendBytes(v7, bytes, 2LL);
    }

    BOOL v9 = iap2_identification_rejectName(a4);
    CFStringAppendFormat(v8, 0LL, @" [msgID: 0x%04x Reason: %s]", a2, v9);
  }

void iap2_identification_addMsgListParamWithDirection(uint64_t a1, int a2)
{
  if (a2 == 1)
  {
    if (*(_BYTE *)(a1 + 169) && *(_DWORD *)(**(void **)(a1 + 216) + 28LL))
    {
      uint64_t v7 = *(void *)(a1 + 136);
      BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a1 + 160));
      unsigned __int16 Length = CFDataGetLength(*(CFDataRef *)(a1 + 160));
      iAP2MsgAddDataParam(v7, 0LL, 7, BytePtr, Length);
      uint64_t v6 = (CFMutableStringRef *)(a1 + 208);
      goto LABEL_9;
    }
  }

  else if (!a2 && *(_BYTE *)(a1 + 168) && *(_DWORD *)(**(void **)(a1 + 216) + 24LL))
  {
    uint64_t v3 = *(void *)(a1 + 136);
    id v4 = CFDataGetBytePtr(*(CFDataRef *)(a1 + 152));
    unsigned __int16 v5 = CFDataGetLength(*(CFDataRef *)(a1 + 152));
    iAP2MsgAddDataParam(v3, 0LL, 6, v4, v5);
    uint64_t v6 = (CFMutableStringRef *)(a1 + 200);
LABEL_9:
    CFStringAppend(*v6, @"\n");
    CFStringAppend(*(CFMutableStringRef *)(a1 + 192), *v6);
  }

void iap2_identification_rejectMsgID(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t IdentificationInfo = iap2_identification_getIdentificationInfo(a1);
  uint64_t v8 = IdentificationInfo;
  if (a3 == 1)
  {
    BOOL v9 = (CFMutableSetRef *)(IdentificationInfo + 184);
    goto LABEL_5;
  }

  if (!a3)
  {
    BOOL v9 = (CFMutableSetRef *)(IdentificationInfo + 176);
LABEL_5:
    CFSetAddValue(*v9, (const void *)a2);
    iap2_identification_appendRejectMsgID(v8, a2, a3, a4);
    return;
  }

  if (gLogObjects) {
    BOOL v10 = gNumLogObjects < 26;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    int v11 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    int v11 = *(os_log_s **)(gLogObjects + 200);
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 67109120;
    v12[1] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Incorrect message direction : %d",  (uint8_t *)v12,  8u);
  }

void iap2_identification_acceptMsgID(uint64_t a1, void *value, int a3)
{
  if (a3 == 1)
  {
    id v4 = *(__CFSet **)(a1 + 184);
    goto LABEL_5;
  }

  if (!a3)
  {
    id v4 = *(__CFSet **)(a1 + 176);
LABEL_5:
    CFSetAddValue(v4, (const void *)value);
    return;
  }

  if (gLogObjects) {
    BOOL v5 = gNumLogObjects < 26;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    uint64_t v6 = *(os_log_s **)(gLogObjects + 200);
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Incorrect message direction : %d",  (uint8_t *)v7,  8u);
  }

BOOL iap2_identification_processStringParam(uint64_t a1, unsigned __int16 *a2, CFStringRef *a3)
{
  BOOL v14 = 0;
  int ParamID = iAP2MsgGetParamID((uint64_t)a2);
  CFStringRef v7 = iAP2MsgCopyDataAsCFString(a2, &v14);
  if (!a3 || v14)
  {
    if (v7) {
      CFRelease(v7);
    }
    _addRejectParam(a1, ParamID, 8u);
    if (!a3)
    {
      if (gLogObjects && gNumLogObjects >= 26)
      {
        BOOL v9 = *(os_log_s **)(gLogObjects + 200);
      }

      else
      {
        BOOL v9 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        iap2_identification_processStringParam_cold_1();
      }
    }

    BOOL v8 = v14;
    if (v14)
    {
      uint64_t v10 = gLogObjects;
      int v11 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 26)
      {
        __int16 v12 = *(os_log_s **)(gLogObjects + 200);
      }

      else
      {
        __int16 v12 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          uint64_t v16 = v10;
          __int16 v17 = 1024;
          int v18 = v11;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          BOOL v8 = v14;
        }
      }

      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v16) = v8;
        _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "iAP2MsgCopyDataAsCFString returned status: %08x",  buf,  8u);
        return v14;
      }
    }
  }

  else
  {
    BOOL v8 = 0LL;
    *a3 = v7;
  }

  return v8;
}

uint64_t iap2_identification_processMessagesSet(uint64_t a1, unsigned __int16 *a2, unsigned int a3, int a4)
{
  if (!a1) {
    return 1LL;
  }
  char v4 = a4;
  if ((a3 & 1) != 0)
  {
    if (a4) {
      int v14 = 6;
    }
    else {
      int v14 = 7;
    }
    _addRejectParam(a1, v14, 7u);
    return 22LL;
  }

  else
  {
    unsigned int v8 = a3 >> 1;
    CFMutableStringRef Mutable = CFSetCreateMutable(kCFAllocatorDefault, a3 >> 1, 0LL);
    if (a3 >= 2)
    {
      if (v8 <= 1) {
        uint64_t v10 = 1LL;
      }
      else {
        uint64_t v10 = v8;
      }
      do
      {
        unsigned int v11 = *a2++;
        CFSetAddValue(Mutable, (const void *)(bswap32(v11) >> 16));
        --v10;
      }

      while (v10);
    }

    if ((v4 & 1) != 0)
    {
      __int16 v12 = *(const void **)(a1 + 96);
      if (v12) {
        CFRelease(v12);
      }
      uint64_t result = 0LL;
      *(void *)(a1 + 96) = Mutable;
    }

    else
    {
      int v15 = *(const void **)(a1 + 104);
      if (v15) {
        CFRelease(v15);
      }
      uint64_t result = 0LL;
      *(void *)(a1 + 104) = Mutable;
    }
  }

  return result;
}

uint64_t cbIdentificationInfoSerialTransportComponentParams( uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  int v15 = 0;
  unsigned int ParamID = iAP2MsgGetParamID((uint64_t)a3);
  unsigned int v7 = ParamID;
  if (ParamID == 2)
  {
    if (iAP2MsgIsDataVoid(a3))
    {
      *(_BYTE *)(a4 + 16) = 1;
    }

    else
    {
      *(_BYTE *)(a4 + 16) = -1;
      int v15 = 1;
    }
  }

  else if (ParamID == 1)
  {
    CFStringRef v9 = iAP2MsgCopyDataAsCFString(a3, (BOOL *)&v15);
    CFStringRef v10 = v9;
    if (v15)
    {
      if (v9) {
        CFRelease(v9);
      }
    }

    else
    {
      __int16 v12 = *(const void **)(a4 + 8);
      if (v12) {
        CFRelease(v12);
      }
      *(void *)(a4 + _Block_object_dispose((const void *)(v1 - 96), 8) = v10;
    }
  }

  else if (ParamID)
  {
    if (gLogObjects && gNumLogObjects >= 26)
    {
      unsigned int v11 = *(os_log_s **)(gLogObjects + 200);
    }

    else
    {
      unsigned int v11 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      unsigned int v17 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "iAP2MsgIdentificationInfo SerialTransportComponent unhandled sub-paramID:%04X\n",  buf,  8u);
    }
  }

  else
  {
    __int16 DataAsU16 = iAP2MsgGetDataAsU16(a3, &v15);
    if (!v15) {
      *(_WORD *)a4 = DataAsU16;
    }
  }

  uint64_t v13 = *(void *)(a4 + 56);
  if (*(_DWORD *)(v13 + 8) > v7) {
    ++*(_DWORD *)(*(void *)v13 + 4LL * v7);
  }
  return v15;
}

uint64_t cbIdentificationInfoUSBDeviceTransportComponentParams( uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  int v15 = 0;
  unsigned int ParamID = iAP2MsgGetParamID((uint64_t)a3);
  switch(ParamID)
  {
    case 0u:
      __int16 DataAsU16 = iAP2MsgGetDataAsU16(a3, &v15);
      if (!v15) {
        *(_WORD *)a4 = DataAsU16;
      }
      break;
    case 1u:
      CFStringRef v9 = iAP2MsgCopyDataAsCFString(a3, (BOOL *)&v15);
      if (v15)
      {
        if (v9) {
          CFRelease(v9);
        }
      }

      else
      {
        *(void *)(a4 + _Block_object_dispose((const void *)(v1 - 96), 8) = v9;
      }

      break;
    case 2u:
      if (!iAP2MsgIsDataVoid(a3))
      {
        *(_BYTE *)(a4 + 16) = -1;
        goto LABEL_27;
      }

      *(_BYTE *)(a4 + 16) = 1;
      break;
    case 3u:
      unsigned int DataAsU8 = iAP2MsgGetDataAsU8(a3, &v15);
      if (v15) {
        BOOL v11 = 1;
      }
      else {
        BOOL v11 = DataAsU8 > 8;
      }
      if (!v11) {
        *(_DWORD *)(a4 + 48) |= 1 << DataAsU8;
      }
      break;
    case 4u:
      if (iAP2MsgIsDataVoid(a3))
      {
        *(_BYTE *)(a4 + 55) = 1;
      }

      else
      {
        *(_BYTE *)(a4 + 55) = 0;
LABEL_27:
        int v15 = 1;
      }

      break;
    default:
      if (gLogObjects) {
        BOOL v8 = gNumLogObjects < 26;
      }
      else {
        BOOL v8 = 1;
      }
      if (v8)
      {
        __int16 v12 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      else
      {
        __int16 v12 = *(os_log_s **)(gLogObjects + 200);
      }

      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        unsigned int v17 = ParamID;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "iAP2MsgIdentificationInfo USBDeviceTransportComponent unhandled sub-paramID:%04X\n",  buf,  8u);
      }

      break;
  }

  uint64_t v13 = *(void *)(a4 + 56);
  if (*(_DWORD *)(v13 + 8) > ParamID) {
    ++*(_DWORD *)(*(void *)v13 + 4LL * ParamID);
  }
  return v15;
}

uint64_t cbIdentificationInfoUSBHostTransportComponentParams( uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  int v14 = 0;
  unsigned int ParamID = iAP2MsgGetParamID((uint64_t)a3);
  switch(ParamID)
  {
    case 0u:
      __int16 DataAsU16 = iAP2MsgGetDataAsU16(a3, &v14);
      if (!v14) {
        *(_WORD *)a4 = DataAsU16;
      }
      break;
    case 1u:
      CFStringRef v9 = iAP2MsgCopyDataAsCFString(a3, (BOOL *)&v14);
      if (v14)
      {
        if (v9) {
          CFRelease(v9);
        }
      }

      else
      {
        *(void *)(a4 + _Block_object_dispose((const void *)(v1 - 96), 8) = v9;
      }

      break;
    case 2u:
      if (!iAP2MsgIsDataVoid(a3))
      {
        *(_BYTE *)(a4 + 16) = -1;
        goto LABEL_24;
      }

      *(_BYTE *)(a4 + 16) = 1;
      break;
    case 3u:
      char DataAsU8 = iAP2MsgGetDataAsU8(a3, &v14);
      if (v14)
      {
        *(_BYTE *)(a4 + 53) = 0;
      }

      else
      {
        *(_BYTE *)(a4 + 53) = 1;
        *(_BYTE *)(a4 + 54) = DataAsU8;
      }

      break;
    case 4u:
      if (iAP2MsgIsDataVoid(a3))
      {
        *(_BYTE *)(a4 + 55) = 1;
      }

      else
      {
        *(_BYTE *)(a4 + 55) = 0;
LABEL_24:
        int v14 = 1;
      }

      break;
    default:
      if (gLogObjects) {
        BOOL v8 = gNumLogObjects < 26;
      }
      else {
        BOOL v8 = 1;
      }
      if (v8)
      {
        BOOL v11 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      else
      {
        BOOL v11 = *(os_log_s **)(gLogObjects + 200);
      }

      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        unsigned int v16 = ParamID;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "iAP2MsgIdentificationInfo USBHostTransportComponent unhandled sub-paramID:%04X\n",  buf,  8u);
      }

      break;
  }

  uint64_t v12 = *(void *)(a4 + 56);
  if (*(_DWORD *)(v12 + 8) > ParamID) {
    ++*(_DWORD *)(*(void *)v12 + 4LL * ParamID);
  }
  return v14;
}

uint64_t cbIdentificationInfoBluetoothTransportComponentParams( uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  int v17 = 0;
  unsigned int ParamID = iAP2MsgGetParamID((uint64_t)a3);
  switch(ParamID)
  {
    case 0u:
      __int16 DataAsU16 = iAP2MsgGetDataAsU16(a3, &v17);
      if (!v17) {
        *(_WORD *)a4 = DataAsU16;
      }
      break;
    case 1u:
      CFStringRef v9 = iAP2MsgCopyDataAsCFString(a3, (BOOL *)&v17);
      if (v17)
      {
        if (v9) {
          CFRelease(v9);
        }
      }

      else
      {
        *(void *)(a4 + _Block_object_dispose((const void *)(v1 - 96), 8) = v9;
      }

      break;
    case 2u:
      if (!iAP2MsgIsDataVoid(a3))
      {
        *(_BYTE *)(a4 + 16) = -1;
        goto LABEL_23;
      }

      *(_BYTE *)(a4 + 16) = 1;
      break;
    case 3u:
      uint64_t DataAsData = iAP2MsgGetDataAsData((uint64_t)a3, &v17);
      if (!v17)
      {
        uint64_t v11 = DataAsData;
        char ParamValueLen = iAP2MsgGetParamValueLen(a3);
        if (v11 && ParamValueLen == 6)
        {
          int v13 = *(_DWORD *)v11;
          *(_WORD *)(a4 + 2_Block_object_dispose((const void *)(v1 - 96), 8) = *(_WORD *)(v11 + 4);
          *(_DWORD *)(a4 + 24) = v13;
        }

        else
        {
LABEL_23:
          int v17 = 1;
        }
      }

      break;
    default:
      if (gLogObjects) {
        BOOL v8 = gNumLogObjects < 26;
      }
      else {
        BOOL v8 = 1;
      }
      if (v8)
      {
        int v14 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      else
      {
        int v14 = *(os_log_s **)(gLogObjects + 200);
      }

      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        unsigned int v19 = ParamID;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "iAP2MsgIdentificationInfo BluetoothTransportComponent unhandled sub-paramID:%04X\n",  buf,  8u);
      }

      break;
  }

  uint64_t v15 = *(void *)(a4 + 56);
  if (*(_DWORD *)(v15 + 8) > ParamID) {
    ++*(_DWORD *)(*(void *)v15 + 4LL * ParamID);
  }
  return v17;
}

uint64_t cbIdentificationInfoWirelessCarPlayTransportComponentParams( uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  int v13 = 0;
  unsigned int ParamID = iAP2MsgGetParamID((uint64_t)a3);
  switch(ParamID)
  {
    case 0u:
      __int16 DataAsU16 = iAP2MsgGetDataAsU16(a3, &v13);
      if (!v13) {
        *(_WORD *)a4 = DataAsU16;
      }
      break;
    case 1u:
      CFStringRef v8 = iAP2MsgCopyDataAsCFString(a3, (BOOL *)&v13);
      if (v13)
      {
        if (v8) {
          CFRelease(v8);
        }
      }

      else
      {
        *(void *)(a4 + _Block_object_dispose((const void *)(v1 - 96), 8) = v8;
      }

      break;
    case 2u:
      if (!iAP2MsgIsDataVoid(a3))
      {
        *(_BYTE *)(a4 + 16) = -1;
        goto LABEL_22;
      }

      *(_BYTE *)(a4 + 16) = 1;
      break;
    case 4u:
      if (iAP2MsgIsDataVoid(a3))
      {
        *(_BYTE *)(a4 + 55) = 1;
      }

      else
      {
        *(_BYTE *)(a4 + 55) = 0;
LABEL_22:
        int v13 = 1;
      }

      break;
    default:
      if (gLogObjects) {
        BOOL v9 = gNumLogObjects < 26;
      }
      else {
        BOOL v9 = 1;
      }
      if (v9)
      {
        CFStringRef v10 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      else
      {
        CFStringRef v10 = *(os_log_s **)(gLogObjects + 200);
      }

      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        unsigned int v15 = ParamID;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "iAP2MsgIdentificationInfo WirelessCarPlayTransportComponent unhandled sub-paramID:%04X\n",  buf,  8u);
      }

      break;
  }

  uint64_t v11 = *(void *)(a4 + 56);
  if (*(_DWORD *)(v11 + 8) > ParamID) {
    ++*(_DWORD *)(*(void *)v11 + 4LL * ParamID);
  }
  return v13;
}

uint64_t cbIdentificationInfoBluetoothLETransportComponentParams( uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  int v22 = 0;
  unsigned int ParamID = iAP2MsgGetParamID((uint64_t)a3);
  switch(ParamID)
  {
    case 0u:
      __int16 DataAsU16 = iAP2MsgGetDataAsU16(a3, &v22);
      if (!v22) {
        *(_WORD *)a4 = DataAsU16;
      }
      break;
    case 1u:
      CFStringRef v9 = iAP2MsgCopyDataAsCFString(a3, (BOOL *)&v22);
      if (v22)
      {
        if (v9) {
          CFRelease(v9);
        }
      }

      else
      {
        *(void *)(a4 + _Block_object_dispose((const void *)(v1 - 96), 8) = v9;
      }

      break;
    case 2u:
      if (!iAP2MsgIsDataVoid(a3))
      {
        *(_BYTE *)(a4 + 16) = -1;
        goto LABEL_26;
      }

      *(_BYTE *)(a4 + 16) = 1;
      break;
    case 3u:
      uint64_t DataAsData = iAP2MsgGetDataAsData((uint64_t)a3, &v22);
      if (!v22)
      {
        uint64_t v11 = DataAsData;
        char ParamValueLen = iAP2MsgGetParamValueLen(a3);
        if (!v11 || ParamValueLen != 6) {
          goto LABEL_26;
        }
        int v13 = *(_DWORD *)v11;
        *(_WORD *)(a4 + 2_Block_object_dispose((const void *)(v1 - 96), 8) = *(_WORD *)(v11 + 4);
        *(_DWORD *)(a4 + 24) = v13;
      }

      break;
    case 4u:
      uint64_t v14 = iAP2MsgGetDataAsData((uint64_t)a3, &v22);
      if (!v22)
      {
        unsigned int v15 = (const void *)v14;
        if (v14)
        {
          unsigned __int8 v16 = iAP2MsgGetParamValueLen(a3);
          *(_BYTE *)(a4 + 40) = v16;
          size_t v17 = v16;
          int v18 = calloc(v16, 1uLL);
          *(void *)(a4 + 32) = v18;
          memcpy(v18, v15, v17);
        }

        else
        {
LABEL_26:
          int v22 = 1;
        }
      }

      break;
    default:
      if (gLogObjects) {
        BOOL v8 = gNumLogObjects < 26;
      }
      else {
        BOOL v8 = 1;
      }
      if (v8)
      {
        unsigned int v19 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      else
      {
        unsigned int v19 = *(os_log_s **)(gLogObjects + 200);
      }

      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        unsigned int v24 = ParamID;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "iAP2MsgIdentificationInfo BluetoothLETransportComponent unhandled sub-paramID:%04X\n",  buf,  8u);
      }

      break;
  }

  uint64_t v20 = *(void *)(a4 + 56);
  if (*(_DWORD *)(v20 + 8) > ParamID) {
    ++*(_DWORD *)(*(void *)v20 + 4LL * ParamID);
  }
  return v22;
}

uint64_t iap2_identification_addTransportComponent(uint64_t a1, uint64_t a2, void *valuePtr)
{
  uint64_t v3 = valuePtr[7];
  unsigned int v4 = *(_DWORD *)(v3 + 8);
  if (!v4) {
    return 2LL;
  }
  BOOL v5 = *(unsigned int **)v3;
  unsigned int v6 = *v5;
  if (v4 == 1 || v6 == 0) {
    return 2LL;
  }
  unsigned int v8 = v5[1];
  if (!v8) {
    return 2LL;
  }
  BOOL v9 = v6 <= 1 && v8 == 1;
  if (!v9 || v4 >= 3 && v5[2] > 1) {
    return 5LL;
  }
  switch(*((_DWORD *)valuePtr + 5))
  {
    case 0:
      if ((*(_DWORD *)(**(void **)a1 + 8LL) | 2) == 3) {
        goto LABEL_24;
      }
      goto LABEL_26;
    case 1:
      if (!*(_DWORD *)(*(void *)a1 + 24LL)) {
        goto LABEL_24;
      }
      goto LABEL_26;
    case 2:
      if (*(_DWORD *)(*(void *)a1 + 24LL) != 8) {
        goto LABEL_26;
      }
LABEL_24:
      if (v4 < 3 || !v5[2]) {
        return 2LL;
      }
LABEL_26:
      if (!valuePtr[1]) {
        return 8LL;
      }
      if (!*(void *)(a2 + 72)) {
        *(void *)(a2 + 72) = CFDictionaryCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeDictionaryKeyCallBacks, 0LL);
      }
      CFNumberRef v14 = CFNumberCreate(0LL, kCFNumberShortType, valuePtr);
      unsigned int v15 = *(const __CFDictionary **)(a2 + 72);
      if (v15 && v14)
      {
        if (CFDictionaryContainsKey(v15, v14))
        {
          uint64_t v10 = 3LL;
        }

        else
        {
          CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a2 + 72), v14, valuePtr);
          uint64_t v10 = 0LL;
        }
      }

      else
      {
        uint64_t v10 = 17LL;
        if (!v14) {
          return v10;
        }
      }

      CFRelease(v14);
      break;
    case 3:
    case 5:
      if (v4 < 4) {
        return 2LL;
      }
      unsigned int v13 = v5[3];
      if (!v13) {
        return 2LL;
      }
      if (v13 != 1) {
        return 5LL;
      }
      goto LABEL_26;
    default:
      goto LABEL_26;
  }

  return v10;
}

uint64_t iap2_identification_parseTransportComponent( uint64_t a1, _BYTE *a2, uint64_t a3, unsigned __int16 *a4, int a5, uint64_t (*a6)(uint64_t, unsigned __int16 *, unsigned __int16 *, uint64_t))
{
  int ParamID = iAP2MsgGetParamID((uint64_t)a4);
  unsigned int v13 = (unsigned __int16 *)calloc(1uLL, 0x40uLL);
  *((_DWORD *)v13 + 5) = a5;
  *((void *)v13 + 7) = iap2_messageParameterUtility_initWithMaxParamCount(5u);
  uint64_t v14 = iAP2MsgForEachParamDo(a3, a4, a6, (uint64_t)v13);
  if ((_DWORD)v14)
  {
    uint64_t v15 = v14;
    int v16 = *v13;
    uint64_t v17 = (uint64_t)a2;
    int v18 = ParamID;
    unsigned int v19 = 10;
    goto LABEL_13;
  }

  if (*((_BYTE *)v13 + 55))
  {
    a2[128] = 1;
    int v20 = *((_DWORD *)v13 + 5);
    if ((v20 - 1) >= 2)
    {
      if (v20 == 4) {
        a2[129] = 1;
      }
      goto LABEL_11;
    }
  }

  else
  {
    if (*((_DWORD *)v13 + 5) != 2 || !*((_BYTE *)v13 + 53)) {
      goto LABEL_11;
    }
    a2[128] = 1;
  }

  a2[130] = 1;
LABEL_11:
  uint64_t v15 = iap2_identification_addTransportComponent(a1, (uint64_t)a2, v13);
  if (!(_DWORD)v15) {
    return v15;
  }
  int v16 = *v13;
  uint64_t v17 = (uint64_t)a2;
  int v18 = ParamID;
  unsigned int v19 = v15;
LABEL_13:
  _addRejectGroup(v17, v18, v16, v19);
  int v21 = (void **)*((void *)v13 + 7);
  if (v21 && *v21) {
    free(*v21);
  }
  int v22 = (const void *)*((void *)v13 + 1);
  if (v22)
  {
    CFRelease(v22);
    *((void *)v13 + 1) = 0LL;
  }

  unsigned int v23 = (void *)*((void *)v13 + 7);
  if (v23) {
    free(v23);
  }
  free(v13);
  return v15;
}

_DWORD *iap2_messageParameterUtility_initWithMaxParamCount(unsigned int a1)
{
  BOOL v2 = calloc(1uLL, 0x10uLL);
  uint64_t v3 = malloc(4LL * a1);
  *(void *)BOOL v2 = v3;
  if (v3)
  {
    v2[2] = a1;
    bzero(v3, 4LL * a1);
  }

  else
  {
    v2[2] = 0;
  }

  return v2;
}

uint64_t iap2_identification_cbIdentificationInfoParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 1LL;
  if (!a1 || !a3 || !a4) {
    return v4;
  }
  int ParamID = (void *)iAP2MsgGetParamID(a3);
  if (gLogObjects && gNumLogObjects >= 26)
  {
    BOOL v9 = *(os_log_s **)(gLogObjects + 200);
  }

  else
  {
    BOOL v9 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    int v28 = 67109120;
    int v29 = (int)ParamID;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Checking identification info group for paramID: %u...",  (uint8_t *)&v28,  8u);
  }

  ParamHandler = (uint64_t (*)(uint64_t, uint64_t, uint64_t))iap2_identification_getParamHandler(ParamID);
  if (ParamHandler)
  {
    if ((ParamHandler(a4, a1, a3) & 1) != 0)
    {
      int v28 = (int)ParamID;
      CFNumberRef v11 = CFNumberCreate(0LL, kCFNumberIntType, &v28);
      uint64_t v12 = (const __CFArray *)_giAP2RequiredIdentificationParams;
      v32.BOOL length = CFArrayGetCount((CFArrayRef)_giAP2RequiredIdentificationParams);
      v32.location = 0LL;
      if (CFArrayContainsValue(v12, v32, v11))
      {
        uint64_t IdentificationInfo = iap2_identification_getIdentificationInfo(a4);
        if (!IdentificationInfo)
        {
          char v25 = 0;
          if (!v11) {
            goto LABEL_40;
          }
          goto LABEL_39;
        }

        CFSetAddValue(*(CFMutableSetRef *)(IdentificationInfo + 120), v11);
        if (gLogObjects && gNumLogObjects >= 26)
        {
          uint64_t v14 = *(os_log_s **)(gLogObjects + 200);
        }

        else
        {
          uint64_t v14 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
          iap2_identification_cbIdentificationInfoParams_cold_4((uint64_t)&v28, v14, v19, v20, v21, v22, v23, v24);
        }
      }

      char v25 = 1;
      if (!v11)
      {
LABEL_40:
        if ((v25 & 1) == 0)
        {
          if (gLogObjects && gNumLogObjects >= 26)
          {
            int v26 = *(os_log_s **)(gLogObjects + 200);
          }

          else
          {
            int v26 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
            iap2_identification_cbIdentificationInfoParams_cold_2();
          }
        }

        return 0LL;
      }

void *iap2_identification_getParamHandler(void *key)
{
  value = 0LL;
  if (_giAP2IdentificationParamHandlers)
  {
    int ValueIfPresent = CFDictionaryGetValueIfPresent( (CFDictionaryRef)_giAP2IdentificationParamHandlers,  (const void *)key,  (const void **)&value);
    if (!value && ValueIfPresent != 0)
    {
      if (gLogObjects) {
        BOOL v3 = gNumLogObjects < 26;
      }
      else {
        BOOL v3 = 1;
      }
      if (v3)
      {
        uint64_t v4 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      else
      {
        uint64_t v4 = *(os_log_s **)(gLogObjects + 200);
      }

      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        iap2_identification_getParamHandler_cold_1();
      }
    }
  }

  return value;
}

void *iap2_identification_createIdentificationInfo()
{
  id v0 = calloc(1uLL, 0xE0uLL);
  if (v0) {
    v0[27] = iap2_messageParameterUtility_initWithMaxParamCount(0xF3u);
  }
  return v0;
}

void iap2_identification_releaseRejectMessage(void *a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 26;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    BOOL v3 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    BOOL v3 = *(os_log_s **)(gLogObjects + 200);
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    iap2_identification_releaseRejectMessage_cold_1();
  }
  uint64_t v4 = (void *)a1[17];
  if (v4)
  {
    free(v4);
    a1[17] = 0LL;
  }

  BOOL v5 = (void *)a1[18];
  if (v5)
  {
    free(v5);
    a1[18] = 0LL;
  }

  unsigned int v6 = (const void *)a1[19];
  if (v6)
  {
    CFRelease(v6);
    a1[19] = 0LL;
  }

  unsigned int v7 = (const void *)a1[20];
  if (v7)
  {
    CFRelease(v7);
    a1[20] = 0LL;
  }

  unsigned int v8 = (const void *)a1[22];
  if (v8)
  {
    CFRelease(v8);
    a1[22] = 0LL;
  }

  BOOL v9 = (const void *)a1[23];
  if (v9)
  {
    CFRelease(v9);
    a1[23] = 0LL;
  }

  uint64_t v10 = (const void *)a1[24];
  if (v10)
  {
    CFRelease(v10);
    a1[24] = 0LL;
  }

  CFNumberRef v11 = (const void *)a1[25];
  if (v11)
  {
    CFRelease(v11);
    a1[25] = 0LL;
  }

  uint64_t v12 = (const void *)a1[26];
  if (v12)
  {
    CFRelease(v12);
    a1[26] = 0LL;
  }

  unsigned int v13 = (const void *)a1[15];
  if (v13)
  {
    CFRelease(v13);
    a1[15] = 0LL;
  }

BOOL iap2_identification_cbIdentificationInfoUpdateParams( uint64_t a1, uint64_t a2, unsigned __int16 *a3, void *a4)
{
  BOOL v21 = 0;
  int ParamID = iAP2MsgGetParamID((uint64_t)a3);
  switch(ParamID)
  {
    case 0:
      DataAsString = iAP2MsgGetDataAsString(a3, &v21);
      if (!v21) {
        a4[1] = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)DataAsString, 0x8000100u);
      }
      break;
    case 1:
      uint64_t v12 = iAP2MsgGetDataAsString(a3, &v21);
      if (!v21) {
        a4[2] = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v12, 0x8000100u);
      }
      break;
    case 2:
      BOOL v9 = iAP2MsgGetDataAsString(a3, &v21);
      if (!v21) {
        a4[3] = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v9, 0x8000100u);
      }
      break;
    case 3:
      uint64_t v10 = iAP2MsgGetDataAsString(a3, &v21);
      if (!v21) {
        a4[4] = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v10, 0x8000100u);
      }
      break;
    case 4:
      CFNumberRef v11 = iAP2MsgGetDataAsString(a3, &v21);
      if (!v21) {
        a4[5] = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v11, 0x8000100u);
      }
      break;
    case 5:
      unsigned int v13 = iAP2MsgGetDataAsString(a3, &v21);
      if (!v21) {
        a4[6] = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v13, 0x8000100u);
      }
      break;
    case 6:
      if (gLogObjects) {
        BOOL v14 = gNumLogObjects < 26;
      }
      else {
        BOOL v14 = 1;
      }
      if (v14)
      {
        uint64_t v19 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      else
      {
        uint64_t v19 = *(os_log_s **)(gLogObjects + 200);
      }

      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        int v23 = 6;
        int v16 = "language updates no longer supported, paramID:%04X";
        uint64_t v17 = v19;
        os_log_type_t v18 = OS_LOG_TYPE_INFO;
        goto LABEL_32;
      }

      break;
    default:
      if (gLogObjects) {
        BOOL v8 = gNumLogObjects < 26;
      }
      else {
        BOOL v8 = 1;
      }
      if (v8)
      {
        uint64_t v15 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      else
      {
        uint64_t v15 = *(os_log_s **)(gLogObjects + 200);
      }

      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        int v23 = ParamID;
        int v16 = "iAP2MsgIdentificationInfoUpdate unhandled paramID:%04X\n";
        uint64_t v17 = v15;
        os_log_type_t v18 = OS_LOG_TYPE_DEFAULT;
LABEL_32:
        _os_log_impl((void *)&_mh_execute_header, v17, v18, v16, buf, 8u);
      }

      break;
  }

  return v21;
}

uint64_t iap2_identification_updateIdentificationInfo(uint64_t *a1, void *a2)
{
  if (a1)
  {
    if (*a1)
    {
      if (a2)
      {
        if (a1[1])
        {
          uint64_t IdentificationInfo = iap2_identification_getIdentificationInfo((uint64_t)a1);
          if (IdentificationInfo)
          {
            BOOL v5 = (void *)IdentificationInfo;
            uint64_t v25 = 0LL;
            __int128 v24 = 0u;
            __int128 v23 = 0u;
            __int128 v21 = 0u;
            __int128 v22 = 0u;
            __int128 v19 = 0u;
            __int128 v20 = 0u;
            __int128 v17 = 0u;
            __int128 v18 = 0u;
            __int128 v15 = 0u;
            __int128 v16 = 0u;
            unsigned int v6 = *(const void **)(IdentificationInfo + 8);
            if (a2[1])
            {
              if (v6)
              {
                CFRelease(v6);
                v5[1] = 0LL;
              }

              unsigned int v6 = (const void *)a2[1];
              v5[1] = v6;
            }

            BOOL v14 = v6;
            unsigned int v7 = (const void *)v5[2];
            if (a2[2])
            {
              if (v7)
              {
                CFRelease(v7);
                _DWORD v5[2] = 0LL;
              }

              unsigned int v7 = (const void *)a2[2];
              _DWORD v5[2] = v7;
            }

            *((void *)&v15 + 1) = v7;
            BOOL v8 = (const void *)v5[3];
            if (a2[3])
            {
              if (v8)
              {
                CFRelease(v8);
                v5[3] = 0LL;
              }

              BOOL v8 = (const void *)a2[3];
              v5[3] = v8;
            }

            *(void *)&__int128 v15 = v8;
            BOOL v9 = (const void *)v5[4];
            if (a2[4])
            {
              if (v9)
              {
                CFRelease(v9);
                v5[4] = 0LL;
              }

              BOOL v9 = (const void *)a2[4];
              v5[4] = v9;
            }

            *(void *)&__int128 v16 = v9;
            uint64_t v10 = (const void *)v5[5];
            if (a2[5])
            {
              if (v10)
              {
                CFRelease(v10);
                v5[5] = 0LL;
              }

              uint64_t v10 = (const void *)a2[5];
              v5[5] = v10;
            }

            *(void *)&__int128 v17 = v10;
            CFNumberRef v11 = (const void *)v5[6];
            if (a2[6])
            {
              if (v11)
              {
                CFRelease(v11);
                void v5[6] = 0LL;
              }

              CFNumberRef v11 = (const void *)a2[6];
              void v5[6] = v11;
            }

            *((void *)&v16 + 1) = v11;
            uint64_t v12 = (const void *)v5[8];
            if (a2[8])
            {
              if (v12)
              {
                CFRelease(v12);
                void v5[8] = 0LL;
              }

              uint64_t v12 = (const void *)a2[8];
              void v5[8] = v12;
            }

            *(void *)&__int128 v18 = v12;
            acc_endpoint_setAccessoryInfo(*a1, (uint64_t)&v14);
          }
        }
      }
    }
  }

  return 0xFFFFFFFFLL;
}

BOOL iap2_identification_identificationInfoUpdateHandler(uint64_t *a1, uint64_t a2)
{
  if (iap2_identification_getState((uint64_t)a1) == 6)
  {
    uint64_t IdentificationInfo = iap2_identification_createIdentificationInfo();
    if (IdentificationInfo)
    {
      int v5 = iAP2MsgForEachParamDo( a2,  0LL,  (uint64_t (*)(uint64_t, unsigned __int16 *, unsigned __int16 *, uint64_t))iap2_identification_cbIdentificationInfoUpdateParams,  (uint64_t)IdentificationInfo);
      if (v5)
      {
        int v6 = v5;
        if (gLogObjects && gNumLogObjects >= 26)
        {
          unsigned int v7 = *(os_log_s **)(gLogObjects + 200);
        }

        else
        {
          unsigned int v7 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          v12[0] = 67109120;
          v12[1] = v6;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "IdentificationInfoUpdate message processing error: %d\n",  (uint8_t *)v12,  8u);
        }
      }

      else
      {
        iap2_identification_updateIdentificationInfo(a1, IdentificationInfo);
        int v6 = -1;
      }
    }

    else
    {
      if (gLogObjects) {
        BOOL v8 = gNumLogObjects < 26;
      }
      else {
        BOOL v8 = 1;
      }
      if (v8)
      {
        BOOL v9 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      else
      {
        BOOL v9 = *(os_log_s **)(gLogObjects + 200);
      }

      int v6 = 0;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v12[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "iAP2MsgIdentificationInfoUpdate: IdentificationInfo invalid\n",  (uint8_t *)v12,  2u);
        int v6 = 0;
      }
    }

    uint64_t v10 = (void **)IdentificationInfo[27];
    if (v10)
    {
    }

    free(IdentificationInfo);
  }

  else
  {
    int v6 = 0;
  }

  return v6 == 0;
}

BOOL iap2_identification_cancelIdentificationHandler(uint64_t *a1)
{
  if (a1)
  {
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 26;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      BOOL v3 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      BOOL v3 = *(os_log_s **)(gLogObjects + 200);
    }

    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Identification cancelled by accessory!",  buf,  2u);
    }

    if ((iap2_identification_getState((uint64_t)a1) & 0xFFFFFFFD) == 1)
    {
      if (gLogObjects && gNumLogObjects >= 26)
      {
        uint64_t v4 = *(os_log_s **)(gLogObjects + 200);
      }

      else
      {
        uint64_t v4 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v10 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Displaying accessory not supported dialog...",  v10,  2u);
      }

      iap2_identification_setIdentificationState(a1, 4);
      AccessoryNotSupportedCF = (void *)acc_userNotifications_createAccessoryNotSupportedCF();
      CFStringRef Identifier = acc_userNotifications_createIdentifier((uint64_t)@"identification", a1[1]);
      ACCUNSetIdentifier(AccessoryNotSupportedCF, (uint64_t)Identifier);
      if (Identifier) {
        CFRelease(Identifier);
      }
      uint64_t ParentConnection = acc_endpoint_getParentConnection(*a1);
      uint64_t v8 = acc_endpoint_getParentConnection(ParentConnection);
      ACCUNSetGroupIdentifier(AccessoryNotSupportedCF, v8);
      ACCUNManagerPresentNotification(AccessoryNotSupportedCF, 0LL);
      if (AccessoryNotSupportedCF) {
        CFRelease(AccessoryNotSupportedCF);
      }
    }
  }

  return a1 != 0LL;
}

int *iap2_identification_handleIdentificationRejected(int *result)
{
  if (result)
  {
    id v1 = result;
    unsigned __int8 v11 = 0;
    uint64_t result = iap2_feature_getFeatureInfoEntries((int *)&v11);
    if (result)
    {
      unsigned int v2 = v11;
      if (v11)
      {
        unint64_t v3 = 0LL;
        uint64_t v4 = (uint64_t **)(result + 2);
        do
        {
          uint64_t v5 = **v4;
          if (v5 && *(void *)(v5 + 32))
          {
            uint64_t v6 = gLogObjects;
            int v7 = gNumLogObjects;
            if (gLogObjects) {
              BOOL v8 = gNumLogObjects < 26;
            }
            else {
              BOOL v8 = 1;
            }
            if (v8)
            {
              BOOL v9 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                uint64_t v13 = v6;
                __int16 v14 = 1024;
                int v15 = v7;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                BOOL v9 = (os_log_s *)&_os_log_default;
              }
            }

            else
            {
              BOOL v9 = *(os_log_s **)(gLogObjects + 200);
            }

            if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
            {
              int v10 = *((_DWORD *)v4 - 2);
              *(_DWORD *)buf = 67109120;
              LODWORD(v13) = v10;
              _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Clearing feature data for feature: %{coreacc:iAP2Feature_t}d...",  buf,  8u);
            }

            uint64_t result = (int *)(*(uint64_t (**)(int *))(**v4 + 32))(v1);
            unsigned int v2 = v11;
          }

          ++v3;
          v4 += 2;
        }

        while (v3 < v2);
      }
    }
  }

  return result;
}

uint64_t iap2_identification_identificationRejected(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    uint64_t v5 = (uint64_t *)(a2 + 136);
    if (*(void *)(a2 + 136))
    {
      if (gLogObjects) {
        BOOL v6 = gNumLogObjects < 26;
      }
      else {
        BOOL v6 = 1;
      }
      if (v6)
      {
        int v7 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      else
      {
        int v7 = *(os_log_s **)(gLogObjects + 200);
      }

      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        CStringPtr = CFStringGetCStringPtr(*(CFStringRef *)(a2 + 192), 0x8000100u);
        int v11 = 136315138;
        uint64_t v12 = CStringPtr;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%s\n", (uint8_t *)&v11, 0xCu);
      }

      if (!iap2_sessionControl_sendOutgoingMessage(a1, *v5))
      {
        if (gLogObjects && gNumLogObjects >= 26)
        {
          int v10 = *(os_log_s **)(gLogObjects + 200);
        }

        else
        {
          int v10 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        uint64_t v2 = 1LL;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          int v11 = 67109120;
          LODWORD(v12) = 1;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "IdentificationRejected processing error : %d\n",  (uint8_t *)&v11,  8u);
        }

        goto LABEL_16;
      }

      uint64_t *v5 = 0LL;
      *(void *)(a2 + 144) = 0LL;
    }

    iap2_identification_setIdentificationState(a1, 3);
    uint64_t v2 = 0LL;
LABEL_16:
    iap2_identification_handleIdentificationRejected((int *)a1);
  }

  return v2;
}

uint64_t iap2_identification_checkIdentificationMsgIDs(uint64_t a1, uint64_t a2, unsigned int a3, _BYTE *a4)
{
  uint64_t IdentificationInfo = iap2_identification_getIdentificationInfo(a1);
  BOOL v9 = *(const __CFSet **)(IdentificationInfo + 96);
  int v10 = *(const __CFSet **)(IdentificationInfo + 104);
  char v20 = 0;
  int v11 = iap2_identification_checkRequiredMsgIDs(a1, a2, a3, &v20);
  char v12 = v20;
  if (!v20)
  {
    uint64_t result = 0LL;
    if (!a4) {
      return result;
    }
    goto LABEL_18;
  }

  int v19 = v11;
  if (a3)
  {
    uint64_t v13 = a3;
    __int16 v14 = (_BYTE *)(a2 + 8);
    do
    {
      uint64_t v15 = *((unsigned __int16 *)v14 - 4);
      int v16 = *((_DWORD *)v14 - 1);
      if (v16 == 1)
      {
        if (!v10) {
          goto LABEL_11;
        }
        __int128 v17 = v10;
      }

      else
      {
        if (!v9) {
          goto LABEL_11;
        }
        __int128 v17 = v9;
      }

      if (!CFSetContainsValue(v17, (const void *)*((unsigned __int16 *)v14 - 4)))
      {
LABEL_11:
        if (*v14) {
          iap2_identification_rejectMsgID(a1, v15, v16, 2u);
        }
        goto LABEL_13;
      }

      iap2_identification_acceptMsgID(IdentificationInfo, (void *)v15, v16);
LABEL_13:
      v14 += 12;
      --v13;
    }

    while (v13);
  }

  if (v19) {
    uint64_t result = 0LL;
  }
  else {
    uint64_t result = 2LL;
  }
  if (a4) {
LABEL_18:
  }
    *a4 = v12;
  return result;
}

uint64_t iap2_identification_checkRequiredMsgIDs(uint64_t a1, uint64_t a2, int a3, _BYTE *a4)
{
  LODWORD(v5) = a3;
  uint64_t IdentificationInfo = iap2_identification_getIdentificationInfo(a1);
  char v8 = 0;
  if ((_DWORD)v5)
  {
    BOOL v9 = *(const __CFSet **)(IdentificationInfo + 96);
    int v10 = *(const __CFSet **)(IdentificationInfo + 104);
    int v11 = (unsigned __int8 *)(a2 + 8);
    LODWORD(a2) = 1;
    uint64_t v5 = v5;
    while (1)
    {
      if (*((_DWORD *)v11 - 1) == 1)
      {
        char v12 = v10;
        if (v10) {
          goto LABEL_7;
        }
      }

      else
      {
        char v12 = v9;
        if (v9)
        {
LABEL_7:
          BOOL v13 = CFSetContainsValue(v12, (const void *)*((unsigned __int16 *)v11 - 4)) != 0;
          goto LABEL_8;
        }
      }

      BOOL v13 = 0;
LABEL_8:
      int v14 = *v11;
      v11 += 12;
      v8 |= v13;
      if (!v14) {
        BOOL v13 = 1;
      }
      a2 = a2 & v13;
      if (!--v5) {
        goto LABEL_13;
      }
    }
  }

  a2 = 1LL;
LABEL_13:
  *a4 = v8 & 1;
  return a2;
}

void iap2_identification_rejectAllMsgIDsForList(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t IdentificationInfo = iap2_identification_getIdentificationInfo(a1);
  if (a3)
  {
    BOOL v9 = *(const __CFSet **)(IdentificationInfo + 96);
    int v10 = *(const __CFSet **)(IdentificationInfo + 104);
    uint64_t v11 = a3;
    char v12 = (int *)(a2 + 4);
    do
    {
      uint64_t v13 = *((unsigned __int16 *)v12 - 2);
      int v14 = *v12;
      if (*v12 == 1) {
        uint64_t v15 = v10;
      }
      else {
        uint64_t v15 = v9;
      }
      v12 += 3;
      --v11;
    }

    while (v11);
  }

uint64_t iap2_identification_checkMsgIDList(uint64_t a1, CFSetRef *a2)
{
  uint64_t v2 = 1LL;
  if (!a1 || !a2) {
    return v2;
  }
  uint64_t v5 = a2[12];
  if (v5)
  {
    int64_t Count = CFSetGetCount(v5);
    int v7 = (const void **)calloc(Count, 8uLL);
    CFSetGetValues(a2[12], v7);
    if (Count < 1)
    {
      uint64_t v9 = 0LL;
      uint64_t v2 = 0LL;
      if (!v7) {
        goto LABEL_23;
      }
    }

    else
    {
      uint64_t v8 = 0LL;
      uint64_t v9 = 0LL;
      unsigned int v10 = 1;
      do
      {
        if (!CFSetContainsValue(a2[22], v7[v8]))
        {
          uint64_t v9 = 1LL;
          iap2_identification_rejectMsgID(a1, LOWORD(v7[v8]), 0, 1u);
        }

        uint64_t v8 = v10;
        BOOL v11 = Count <= v10++;
      }

      while (!v11);
    }

    free(v7);
    uint64_t v2 = v9;
  }

  else
  {
    if (gLogObjects) {
      BOOL v11 = gNumLogObjects < 26;
    }
    else {
      BOOL v11 = 1;
    }
    if (v11)
    {
      char v12 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      char v12 = *(os_log_s **)(gLogObjects + 200);
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      iap2_identification_checkMsgIDList_cold_3();
    }
    uint64_t v2 = 0LL;
  }

BOOL iap2_identification_checkRequiredTransportComponentParam(uint64_t *a1, uint64_t a2, int a3)
{
  if (!a1) {
    return 1LL;
  }
  BOOL result = 1LL;
  if (a2)
  {
    uint64_t v6 = *a1;
    if (v6)
    {
      BOOL result = 0LL;
      switch(a3)
      {
        case 14:
          if (*(_DWORD *)(v6 + 24) != 6) {
            goto LABEL_32;
          }
          int v7 = *(_DWORD **)(a2 + 216);
          if (v7[2] >= 0xFu)
          {
            if (*(_DWORD *)(*(void *)v7 + 56LL)) {
              goto LABEL_32;
            }
          }

          goto LABEL_27;
        case 15:
          if (!*(_DWORD *)(v6 + 24))
          {
            uint64_t v8 = *(_DWORD **)(a2 + 216);
            if (v8[2] < 0x10u || !*(_DWORD *)(*(void *)v8 + 60LL)) {
              goto LABEL_27;
            }
          }

          goto LABEL_32;
        case 16:
          if (*(_DWORD *)(v6 + 24) == 8)
          {
            uint64_t v9 = *(_DWORD **)(a2 + 216);
            if (v9[2] < 0x11u || !*(_DWORD *)(*(void *)v9 + 64LL)) {
              goto LABEL_27;
            }
          }

          goto LABEL_32;
        case 17:
          if ((*(_DWORD *)(v6 + 24) & 0xFFFFFFFE) == 2)
          {
            unsigned int v10 = *(_DWORD **)(a2 + 216);
            if (v10[2] < 0x12u || !*(_DWORD *)(*(void *)v10 + 68LL)) {
              goto LABEL_27;
            }
          }

          goto LABEL_32;
        case 24:
          if (*(_DWORD *)(v6 + 24) != 4) {
            goto LABEL_32;
          }
          char v12 = *(_DWORD **)(a2 + 216);
          if (v12[2] > 0x18u)
          {
            if (*(_DWORD *)(*(void *)v12 + 96LL)) {
              goto LABEL_32;
            }
          }

uint64_t iap2_identification_checkIdentificationInfoForRequiredTransportParam(uint64_t *a1, uint64_t a2)
{
  uint64_t result = 1LL;
  if (a1)
  {
    if (a2)
    {
      BOOL v5 = iap2_identification_checkRequiredTransportComponentParam(a1, a2, 14);
      int v6 = iap2_identification_checkRequiredTransportComponentParam(a1, a2, 15) || v5;
      BOOL v7 = iap2_identification_checkRequiredTransportComponentParam(a1, a2, 16);
      int v8 = v6 | v7 | iap2_identification_checkRequiredTransportComponentParam(a1, a2, 17);
      return v8 | iap2_identification_checkRequiredTransportComponentParam(a1, a2, 24) | (*a1 == 0);
    }
  }

  return result;
}

uint64_t iap2_identification_checkIdentificationInfo(uint64_t a1)
{
  if (!a1) {
    return 1LL;
  }
  uint64_t IdentificationInfo = (CFSetRef *)iap2_identification_getIdentificationInfo(a1);
  int v3 = iap2_identification_checkIdentificationInfoFeatures(a1, (uint64_t)IdentificationInfo);
  uint64_t v4 = iap2_identification_checkMsgIDList(a1, IdentificationInfo) | v3;
  if ((_DWORD)v4)
  {
    iap2_identification_addMsgListParamWithDirection((uint64_t)IdentificationInfo, 0);
    iap2_identification_addMsgListParamWithDirection((uint64_t)IdentificationInfo, 1);
  }

  return v4;
}

uint64_t iap2_identification_checkIdentificationInfoAll(uint64_t a1, uint64_t a2)
{
  if (!a1 || !a2) {
    return 1LL;
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 1u);
  if (Feature)
  {
    uint64_t v4 = Feature;
    BOOL v5 = *(__CFSet **)(*(void *)(Feature + 8) + 112LL);
    if (v5) {
      CFSetRemoveAllValues(v5);
    }
    else {
      *(void *)(*(void *)(v4 + 8) + 112LL) = CFSetCreateMutable(kCFAllocatorDefault, 0LL, 0LL);
    }
  }

  return iap2_identification_checkIdentificationInfo(a1);
}

void _CFSetValidateRequiredIdentificationParamsApplierFunction(const __CFNumber *a1, uint64_t a2)
{
  if (a2)
  {
    int valuePtr = 0;
    CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
    if (!CFSetContainsValue(*(CFSetRef *)(a2 + 120), a1))
    {
      _addRejectParam(a2, valuePtr, 2u);
      *(_BYTE *)(a2 + 131) = 1;
    }
  }

BOOL iap2_identification_identificationInfoHandler(uint64_t *a1, uint64_t a2)
{
  if (a1 && *a1)
  {
    if ((iap2_identification_getState((uint64_t)a1) & 0xFFFFFFFD) == 1)
    {
      uint64_t IdentificationInfo = iap2_identification_createIdentificationInfo();
      if (IdentificationInfo)
      {
        uint64_t v5 = (uint64_t)IdentificationInfo;
        if (iap2_identification_setIdentificationInfo((uint64_t)a1, (uint64_t)IdentificationInfo))
        {
          int RejectMessage = iap2_identification_createRejectMessage(v5);
          if (!RejectMessage)
          {
            int v7 = iAP2MsgForEachParamDo( a2,  0LL,  (uint64_t (*)(uint64_t, unsigned __int16 *, unsigned __int16 *, uint64_t))iap2_identification_cbIdentificationInfoParams,  (uint64_t)a1);
            if (v7)
            {
              int RejectMessage = v7;
              if (gLogObjects && gNumLogObjects >= 26)
              {
                int v8 = *(os_log_s **)(gLogObjects + 200);
              }

              else
              {
                int v8 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
                iap2_identification_identificationInfoHandler_cold_5();
              }
            }

            else
            {
              uint64_t v13 = (const __CFArray *)_giAP2RequiredIdentificationParams;
              v24.BOOL length = CFArrayGetCount((CFArrayRef)_giAP2RequiredIdentificationParams);
              v24.location = 0LL;
              CFArrayApplyFunction( v13,  v24,  (CFArrayApplierFunction)_CFSetValidateRequiredIdentificationParamsApplierFunction,  (void *)v5);
              int v14 = iap2_identification_checkIdentificationInfoForRequiredTransportParam(a1, v5);
              if (*(_BYTE *)(v5 + 131))
              {
                int RejectMessage = -1;
              }

              else
              {
                if (!v14)
                {
                  if (gLogObjects && gNumLogObjects >= 26)
                  {
                    __int128 v18 = *(os_log_s **)(gLogObjects + 200);
                  }

                  else
                  {
                    __int128 v18 = (os_log_s *)&_os_log_default;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                      platform_connectionInfo_configStreamCategoryListReady_cold_1();
                    }
                  }

                  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "IdentificationInfo params processed, checking identification info...",  buf,  2u);
                  }

                  int RejectMessage = iap2_identification_checkIdentificationInfoAll((uint64_t)a1, v5);
                  uint64_t v16 = *(const void **)(v5 + 8);
                  v19[0] = _NSConcreteStackBlock;
                  v19[1] = 0x40000000LL;
                  v19[2] = __iap2_identification_identificationInfoHandler_block_invoke_69;
                  v19[3] = &__block_descriptor_tmp_70;
                  int v20 = RejectMessage;
                  v19[4] = a1;
                  v19[5] = v5;
                  unsigned int v17 = v19;
                  goto LABEL_49;
                }

                int RejectMessage = 1;
              }
            }
          }

          if (gLogObjects && gNumLogObjects >= 26)
          {
            uint64_t v15 = *(os_log_s **)(gLogObjects + 200);
          }

          else
          {
            uint64_t v15 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            int v23 = RejectMessage;
            _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "IdentificationInfo rejected. Error: %d",  buf,  8u);
          }

          uint64_t v16 = *(const void **)(v5 + 8);
          v21[0] = _NSConcreteStackBlock;
          v21[1] = 0x40000000LL;
          _DWORD v21[2] = __iap2_identification_identificationInfoHandler_block_invoke;
          v21[3] = &__block_descriptor_tmp_18;
          v21[4] = a1;
          v21[5] = v5;
          unsigned int v17 = v21;
LABEL_49:
          iap2_sessionControl_authorizationHook_identification((unsigned int *)a1, v16, (uint64_t)v17);
          return RejectMessage == 0;
        }

        if (gLogObjects && gNumLogObjects >= 26)
        {
          BOOL v11 = *(os_log_s **)(gLogObjects + 200);
        }

        else
        {
          BOOL v11 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          iap2_identification_identificationInfoHandler_cold_7();
        }
        free((void *)v5);
      }

      else
      {
        if (gLogObjects && gNumLogObjects >= 26)
        {
          unsigned int v10 = *(os_log_s **)(gLogObjects + 200);
        }

        else
        {
          unsigned int v10 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          _addRejectParam_cold_1();
        }
      }
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 26)
      {
        uint64_t v9 = *(os_log_s **)(gLogObjects + 200);
      }

      else
      {
        uint64_t v9 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "After accessory has already completed Identify process once, any subsequent IdentificationInfo is ignored.",  buf,  2u);
      }
    }
  }

  int RejectMessage = -1;
  return RejectMessage == 0;
}

uint64_t __iap2_identification_identificationInfoHandler_block_invoke(uint64_t result, int a2)
{
  if (a2) {
    return iap2_identification_identificationRejected(*(uint64_t **)(result + 32), *(void *)(result + 40));
  }
  return result;
}

void __iap2_identification_identificationInfoHandler_block_invoke_69(uint64_t a1, int a2)
{
  if (a2)
  {
    if (*(_DWORD *)(a1 + 48))
    {
      if (gLogObjects) {
        BOOL v3 = gNumLogObjects < 26;
      }
      else {
        BOOL v3 = 1;
      }
      if (v3)
      {
        uint64_t v5 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      else
      {
        uint64_t v5 = *(os_log_s **)(gLogObjects + 200);
      }

      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = *(_DWORD *)(a1 + 48);
        int v8 = 67109120;
        int v9 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "IdentificationInfo rejected. Error: %d",  (uint8_t *)&v8,  8u);
      }

      iap2_identification_identificationRejected(*(uint64_t **)(a1 + 32), *(void *)(a1 + 40));
    }

    else
    {
      iap2_identification_setIdentificationState(*(uint64_t **)(a1 + 32), 2);
      uint64_t v4 = *(uint64_t **)(a1 + 32);
      iAP2MsgInit((uint64_t)(v4 + 15), 7426, v4[24], 0xFFFF, 0LL, 0LL);
      if ((iap2_sessionControl_sendOutgoingMessage(v4, (uint64_t)(v4 + 15)) & 1) != 0)
      {
        iap2_identification_setIdentificationState(v4, 6);
      }

      else
      {
        if (gLogObjects && gNumLogObjects >= 26)
        {
          int v7 = *(os_log_s **)(gLogObjects + 200);
        }

        else
        {
          int v7 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          int v8 = 67109120;
          int v9 = 1;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "IdentificationAccepted processing error : %d\n",  (uint8_t *)&v8,  8u);
        }
      }

      if (iap2_identification_isIdentifiedForCarPlay((uint64_t)v4)
        && *(double *)(iap2_feature_getFeature((uint64_t)v4, 0) + 88) != 0.0)
      {
        iAP2_carPlaySendAllConnectionEvents((uint64_t)v4);
      }

      iap2_identification_releaseRejectMessage(*(void **)(a1 + 40));
    }
  }

uint64_t iap2_identification_isIdentifiedForIncomingMessageID(uint64_t result, int a2)
{
  if (!result) {
    return result;
  }
  BOOL v3 = (unsigned int *)result;
  uint64_t result = 1LL;
  if (a2 <= 7424)
  {
    int v4 = 1 << a2;
    goto LABEL_8;
  }

  if (a2 <= 43520)
  {
    int v4 = 1 << (a2 - 1);
LABEL_8:
    if ((v4 & 0x31) != 0) {
      return result;
    }
    goto LABEL_17;
  }

  if (a2 == 43521 || a2 == 43523) {
    return result;
  }
  if (a2 == 43526)
  {
    uint64_t result = iap2_identification_getIdentificationInfo((uint64_t)v3);
    if (!result) {
      return result;
    }
    uint64_t v5 = result;
    if (*(void *)(result + 96) && iap2_identification_getState((uint64_t)v3) == 6)
    {
      uint64_t result = *(void *)(v5 + 96);
      uint64_t v6 = 43526LL;
      return CFSetContainsValue((CFSetRef)result, (const void *)v6) != 0;
    }

    return 0LL;
  }

BOOL iap2_identification_isIdentificationAccepted(uint64_t a1)
{
  return iap2_identification_getState(a1) == 6;
}

uint64_t iap2_identification_isIdentifiedForOutgoingMessageID(uint64_t result, unsigned int a2)
{
  if (result)
  {
    BOOL v3 = (unsigned int *)result;
    uint64_t result = 1LL;
    if ((a2 - 43520 > 5 || ((1 << a2) & 0x35) == 0)
      && (a2 > 5 || ((1 << a2) & 0x31) == 0)
      && (a2 - 7424 > 3 || a2 == 7425))
    {
      uint64_t result = iap2_identification_getIdentificationInfo((uint64_t)v3);
      if (result)
      {
        uint64_t v4 = result;
        if (iap2_accAuthentication_getState(v3) == 2
          && iap2_identification_getState((uint64_t)v3) == 6)
        {
          uint64_t result = *(void *)(v4 + 104);
          if (result)
          {
            uint64_t result = CFSetContainsValue((CFSetRef)result, (const void *)a2);
            if ((_DWORD)result)
            {
              kdebug_trace(731124060LL, 0LL, 0LL, 0LL, 0LL);
              return 1LL;
            }
          }
        }

        else
        {
          return 0LL;
        }
      }
    }
  }

  return result;
}

CFSetRef iap2_identification_isIdentifiedForFeature(const __CFSet *result, unsigned int a2)
{
  if (result)
  {
    uint64_t result = (const __CFSet *)iap2_feature_getFeature((uint64_t)result, 1u);
    if (result)
    {
      if (*(_DWORD *)result == 6 && (uint64_t v3 = *((void *)result + 1)) != 0)
      {
        uint64_t result = *(const __CFSet **)(v3 + 112);
        if (result) {
          return (const __CFSet *)(CFSetContainsValue(result, (const void *)a2) != 0);
        }
      }

      else
      {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t iap2_identification_isIdentifiedForCarPlay(uint64_t result)
{
  if (result)
  {
    uint64_t result = iap2_feature_getFeature(result, 1u);
    if (result) {
      return *(_DWORD *)result == 6
    }
          && (uint64_t v1 = *(void *)(result + 8)) != 0
          && *(void *)(v1 + 112)
          && *(unsigned __int8 *)(v1 + 128) != 0;
  }

  return result;
}

uint64_t iap2_identification_isIdentifiedForWirelessCarPlay(uint64_t result)
{
  if (result)
  {
    uint64_t result = iap2_feature_getFeature(result, 1u);
    if (result) {
      return *(_DWORD *)result == 6
    }
          && (uint64_t v1 = *(void *)(result + 8)) != 0
          && *(void *)(v1 + 112)
          && *(unsigned __int8 *)(v1 + 129) != 0;
  }

  return result;
}

uint64_t iap2_identification_isIdentifiedForUSBCarPlay(uint64_t result)
{
  if (result)
  {
    uint64_t result = iap2_feature_getFeature(result, 1u);
    if (result) {
      return *(_DWORD *)result == 6
    }
          && (uint64_t v1 = *(void *)(result + 8)) != 0
          && *(void *)(v1 + 112)
          && *(unsigned __int8 *)(v1 + 130) != 0;
  }

  return result;
}

void iap2_identification_setIdentifiedForFeature(uint64_t a1, unsigned int a2)
{
  if (a1)
  {
    uint64_t Feature = iap2_feature_getFeature(a1, 1u);
    if (Feature)
    {
      uint64_t v4 = *(void *)(Feature + 8);
      if (v4)
      {
        uint64_t v5 = *(__CFSet **)(v4 + 112);
        if (v5)
        {
          CFSetAddValue(v5, (const void *)a2);
          if (gLogObjects && gNumLogObjects >= 26)
          {
            uint64_t v6 = *(os_log_s **)(gLogObjects + 200);
          }

          else
          {
            uint64_t v6 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
          {
            v7[0] = 67109120;
            v7[1] = a2;
            _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Identified for feature: %{coreacc:iAP2Feature_t}d!",  (uint8_t *)v7,  8u);
          }
        }
      }
    }
  }

uint64_t iap2_identification_transportComponents(uint64_t result)
{
  if (result)
  {
    uint64_t result = iap2_identification_getIdentificationInfo(result);
    if (result) {
      return *(void *)(result + 72);
    }
  }

  return result;
}

void *iap2_identification_getTransportComponent(void *result, int a2)
{
  if (!result) {
    return result;
  }
  uint64_t result = (void *)iap2_feature_getFeature((uint64_t)result, 1u);
  if (!result) {
    return result;
  }
  uint64_t v3 = result[1];
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = *(const __CFDictionary **)(v3 + 72);
  if (!v4) {
    return 0LL;
  }
  CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(v3 + 72));
  uint64_t v6 = __chkstk_darwin();
  int v8 = (const void **)((char *)&v9 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (!v6)
  {
    CFDictionaryGetKeysAndValues(v4, 0LL, (const void **)((char *)&v9 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)));
    return 0LL;
  }

  memset((char *)&v9 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL), 170, v7);
  CFDictionaryGetKeysAndValues(v4, 0LL, v8);
  if (Count < 1) {
    return 0LL;
  }
  while (1)
  {
    uint64_t result = *v8;
    if (*v8)
    {
      if (*((_DWORD *)result + 5) == a2) {
        break;
      }
    }

    ++v8;
    if (!--Count) {
      return 0LL;
    }
  }

  return result;
}

CFDataRef iap2_identification_copyMacAddressForComponentID(uint64_t a1, int a2)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t IdentificationInfo = iap2_identification_getIdentificationInfo(a1);
  if (!IdentificationInfo) {
    return 0LL;
  }
  uint64_t v4 = *(const __CFDictionary **)(IdentificationInfo + 72);
  if (!v4) {
    return 0LL;
  }
  size_t Count = CFDictionaryGetCount(*(CFDictionaryRef *)(IdentificationInfo + 72));
  if (!Count) {
    return 0LL;
  }
  uint64_t v6 = Count;
  size_t v7 = (const void **)calloc(Count, 8uLL);
  if (!v7) {
    return 0LL;
  }
  int v8 = v7;
  CFDictionaryGetKeysAndValues(v4, 0LL, v7);
  if (v6 < 1)
  {
LABEL_26:
    CFDataRef v17 = 0LL;
    goto LABEL_35;
  }

  uint64_t v9 = v8;
  while (1)
  {
    unsigned int v10 = (unsigned __int16 *)*v9;
    if (!*v9)
    {
      uint64_t v13 = gLogObjects;
      int v14 = gNumLogObjects;
      if (gLogObjects) {
        BOOL v15 = gNumLogObjects < 26;
      }
      else {
        BOOL v15 = 1;
      }
      if (v15)
      {
        uint64_t v16 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          uint64_t v21 = v13;
          __int16 v22 = 1024;
          int v23 = v14;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          uint64_t v16 = (os_log_s *)&_os_log_default;
        }
      }

      else
      {
        uint64_t v16 = *(os_log_s **)(gLogObjects + 200);
      }

      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "transportComponent is NULL!", buf, 2u);
      }

      goto LABEL_25;
    }

    if (*v10 == a2)
    {
      int v11 = *((_DWORD *)v10 + 5);
      if (v11 == 5 || v11 == 3) {
        break;
      }
    }

uint64_t iap2_identification_setParamHandler(void *key, void *value)
{
  unsigned int v3 = key;
  uint64_t result = _giAP2IdentificationParamHandlers;
  if (_giAP2IdentificationParamHandlers) {
    goto LABEL_12;
  }
  _giAP2IdentificationParamHandlers = (uint64_t)CFDictionaryCreateMutable(kCFAllocatorDefault, 0LL, 0LL, 0LL);
  if (!gLogObjects || gNumLogObjects < 26)
  {
    uint64_t v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    uint64_t v6 = *(os_log_s **)(gLogObjects + 200);
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    iap2_identification_setParamHandler_cold_3();
  }
  uint64_t result = _giAP2IdentificationParamHandlers;
  if (_giAP2IdentificationParamHandlers)
  {
LABEL_12:
    CFDictionarySetValue((CFMutableDictionaryRef)result, (const void *)v3, value);
    if (gLogObjects) {
      BOOL v7 = gNumLogObjects < 26;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
      int v8 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      int v8 = *(os_log_s **)(gLogObjects + 200);
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      iap2_identification_setParamHandler_cold_1();
    }
    return 1LL;
  }

  return result;
}

uint64_t iap2_identification_setRequiredIdentificationParam(int a1)
{
  int valuePtr = a1;
  if (!_giAP2RequiredIdentificationParams)
  {
    _giAP2RequiredIdentificationParams = (uint64_t)CFArrayCreateMutable( kCFAllocatorDefault,  243LL,  &kCFTypeArrayCallBacks);
    if (!gLogObjects || gNumLogObjects < 26)
    {
      uint64_t v2 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      uint64_t v2 = *(os_log_s **)(gLogObjects + 200);
    }

    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
      iap2_identification_setRequiredIdentificationParam_cold_3();
    }
    if (!_giAP2RequiredIdentificationParams) {
      return 0LL;
    }
  }

  CFNumberRef v3 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
  CFArrayAppendValue((CFMutableArrayRef)_giAP2RequiredIdentificationParams, v3);
  if (v3) {
    CFRelease(v3);
  }
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 26;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    uint64_t v5 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    uint64_t v5 = *(os_log_s **)(gLogObjects + 200);
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    iap2_identification_setRequiredIdentificationParam_cold_1((uint64_t)&valuePtr, v5, v6, v7, v8, v9, v10, v11);
  }
  return 1LL;
}

_DWORD *_createFeature_21(_DWORD *result)
{
  if (result)
  {
    uint64_t result = calloc(1uLL, 0x10uLL);
    if (result) {
      *uint64_t result = 0;
    }
  }

  return result;
}

uint64_t _destroyFeature_21(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void **)result;
    uint64_t v2 = *(void *)result;
    if (*(void *)result)
    {
      iap2_identification_releaseIdentInfo(*(void *)(v2 + 8));
      CFNumberRef v3 = *(void **)(v2 + 8);
      if (v3)
      {
        free(v3);
        *(void *)(v2 + _Block_object_dispose((const void *)(v1 - 96), 8) = 0LL;
      }

      if (*v1)
      {
        free(*v1);
        int *v1 = 0LL;
      }

      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t _startFeatureFromDevice_12(uint64_t *a1)
{
  if ((iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15)) & 1) != 0)
  {
    uint64_t v2 = 1LL;
    iap2_identification_setIdentificationState(a1, 1);
    return v2;
  }

  if (gLogObjects && gNumLogObjects >= 26)
  {
    CFNumberRef v3 = *(os_log_s **)(gLogObjects + 200);
  }

  else
  {
    CFNumberRef v3 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  uint64_t v2 = 0LL;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "StartIdentification processing error!", v5, 2u);
    return 0LL;
  }

  return v2;
}

BOOL _parseIdentificationParams_3(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  BOOL v36 = 0;
  if (a1 && (uint64_t IdentificationInfo = iap2_identification_getIdentificationInfo(a1)) != 0)
  {
    uint64_t v7 = IdentificationInfo;
    unsigned int ParamID = iAP2MsgGetParamID((uint64_t)a3);
    switch(ParamID)
    {
      case 0u:
        uint64_t v10 = (CFStringRef *)(v7 + 8);
        uint64_t v9 = *(const void **)(v7 + 8);
        if (!v9) {
          goto LABEL_6;
        }
        goto LABEL_5;
      case 1u:
        uint64_t v10 = (CFStringRef *)(v7 + 16);
        uint64_t v9 = *(const void **)(v7 + 16);
        if (!v9) {
          goto LABEL_6;
        }
        goto LABEL_5;
      case 2u:
        uint64_t v10 = (CFStringRef *)(v7 + 24);
        uint64_t v9 = *(const void **)(v7 + 24);
        if (!v9) {
          goto LABEL_6;
        }
        goto LABEL_5;
      case 3u:
        uint64_t v10 = (CFStringRef *)(v7 + 32);
        uint64_t v9 = *(const void **)(v7 + 32);
        if (!v9) {
          goto LABEL_6;
        }
        goto LABEL_5;
      case 4u:
        uint64_t v10 = (CFStringRef *)(v7 + 40);
        uint64_t v9 = *(const void **)(v7 + 40);
        if (!v9) {
          goto LABEL_6;
        }
        goto LABEL_5;
      case 5u:
        uint64_t v10 = (CFStringRef *)(v7 + 48);
        uint64_t v9 = *(const void **)(v7 + 48);
        if (!v9) {
          goto LABEL_6;
        }
        goto LABEL_5;
      case 6u:
        uint64_t DataAsData = iAP2MsgGetDataAsData((uint64_t)a3, &v36);
        if (v36)
        {
          uint64_t v13 = *(__CFString **)(v7 + 200);
          *(_BYTE *)(v7 + 16_Block_object_dispose((const void *)(v1 - 96), 8) = 1;
          CFStringAppendFormat(v13, 0LL, @" [msgID: 0x%04x Reason: %s]", 0xFFFFLL, "ParamParseError");
          uint64_t v14 = v7;
          int v15 = 0;
          goto LABEL_21;
        }

        int v29 = (unsigned __int16 *)DataAsData;
        unsigned int ParamValueLen = iAP2MsgGetParamValueLen(a3);
        uint64_t v31 = v7;
        CFRange v32 = v29;
        int v33 = 1;
        goto LABEL_51;
      case 7u:
        uint64_t v16 = iAP2MsgGetDataAsData((uint64_t)a3, &v36);
        if (v36)
        {
          CFDataRef v17 = *(__CFString **)(v7 + 208);
          *(_BYTE *)(v7 + 169) = 1;
          CFStringAppendFormat(v17, 0LL, @" [msgID: 0x%04x Reason: %s]", 0xFFFFLL, "ParamParseError");
          uint64_t v14 = v7;
          int v15 = 1;
LABEL_21:
          iap2_identification_addMsgListParamWithDirection(v14, v15);
        }

        else
        {
          BOOL v34 = (unsigned __int16 *)v16;
          unsigned int ParamValueLen = iAP2MsgGetParamValueLen(a3);
          uint64_t v31 = v7;
          CFRange v32 = v34;
          int v33 = 0;
LABEL_51:
          int v11 = iap2_identification_processMessagesSet(v31, v32, ParamValueLen, v33);
LABEL_37:
          BOOL v36 = v11;
        }

uint64_t platform_timeSync_getAccessoryTime(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 59)
  {
    uint64_t v2 = (os_log_s *)*(id *)(gLogObjects + 464);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v2 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    uint64_t v6 = "platform_timeSync_getAccessoryTime";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[#<Undefined>] %s entering get time from acc",  (uint8_t *)&v5,  0xCu);
  }

  return accFeatureHandlers_invokeHandler(0LL, 64, a1);
}

uint64_t platform_timeSync_sendHostTimeToAccessory(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 59)
  {
    uint64_t v2 = (os_log_s *)*(id *)(gLogObjects + 464);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v2 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    uint64_t v6 = "platform_timeSync_sendHostTimeToAccessory";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[#<Undefined>] %s entering send host time to accessory",  (uint8_t *)&v5,  0xCu);
  }

  return accFeatureHandlers_invokeHandler(0LL, 65, a1);
}

void platform_timeSync_setSystemTime(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 59)
  {
    uint64_t v2 = (os_log_s *)*(id *)(gLogObjects + 464);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v2 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    uint64_t v6 = "platform_timeSync_setSystemTime";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[#<Undefined>] %s sending time to CoreTime plugin",  (uint8_t *)&v5,  0xCu);
  }

  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACCTimeSyncServer sharedServer](&OBJC_CLASS___ACCTimeSyncServer, "sharedServer"));
  [v4 setSystemTime:a1];
}

void platform_timeSync_startServer()
{
  id v0 = (void *)objc_claimAutoreleasedReturnValue(+[ACCTimeSyncServer sharedServer](&OBJC_CLASS___ACCTimeSyncServer, "sharedServer"));
  if (gLogObjects && gNumLogObjects >= 59)
  {
    uint64_t v1 = (os_log_s *)*(id *)(gLogObjects + 464);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v1 = (os_log_s *)&_os_log_default;
    id v2 = &_os_log_default;
  }

  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = [v0 isServerActive];
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "[#<Undefined>] is TimeSync Server active:%u",  (uint8_t *)v3,  8u);
  }
}

LABEL_45:
                }

                else
                {
LABEL_26:
                  if (!v56 || ![v56 count]) {
                    goto LABEL_44;
                  }
                  __int16 v59 = 0u;
                  uint64_t v60 = 0u;
                  __int16 v57 = 0u;
                  uint64_t v58 = 0u;
                  BOOL v34 = v56;
                  __int16 v35 = [v34 countByEnumeratingWithState:&v57 objects:v70 count:16];
                  if (v35)
                  {
                    BOOL v36 = v35;
                    __int16 v37 = 0LL;
                    unsigned int v38 = *(void *)v58;
LABEL_30:
                    __int16 v39 = 0LL;
                    while (1)
                    {
                      if (*(void *)v58 != v38) {
                        objc_enumerationMutation(v34);
                      }
                      if (-[objc_class conformsToProtocol:]( v22,  "conformsToProtocol:",  *(void *)(*((void *)&v57 + 1) + 8 * v39)))
                      {
                        ++v37;
                        if (a7) {
                          break;
                        }
                      }

                      if (v36 == (id)++v39)
                      {
                        BOOL v36 = [v34 countByEnumeratingWithState:&v57 objects:v70 count:16];
                        if (v36) {
                          goto LABEL_30;
                        }
                        break;
                      }
                    }
                  }

                  else
                  {
                    __int16 v37 = 0LL;
                  }

                  unsigned __int8 v40 = (char *)[v34 count];
                  __int16 v41 = v37 && a7;
                  uint64_t v13 = v50;
                  uint64_t v14 = v51;
                  if (v41 || v37 == v40)
                  {
LABEL_44:
                    int v28 = (id)objc_claimAutoreleasedReturnValue(-[ACCPluginManager pluginBundlesMutable](v52, "pluginBundlesMutable"));
                    [v28 addObject:v18];
                    goto LABEL_45;
                  }
                }
              }
            }

            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              int v42 = NSStringFromClass(v22);
              int v28 = (id)objc_claimAutoreleasedReturnValue(v42);
              int v43 = (void *)objc_claimAutoreleasedReturnValue([v18 bundlePath]);
              *(_DWORD *)buf = v48;
              int v73 = v28;
              int v74 = 2112;
              uint64_t v75 = v43;
              int v76 = 2112;
              __int128 v77 = v25;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Class '%@' in bundle '%@' is missing implementation(s) for the following instance method(s):\n%@",  buf,  0x20u);

              goto LABEL_45;
            }

  -[NSMutableDictionary setObject:forKey:]( v3,  "setObject:forKey:",  self->_composer,  @"ACCMediaLibraryUpdateItemComposer");
  validMask = self->_validMask;
  if ((validMask & 0x80000) == 0)
  {
LABEL_21:
    if ((validMask & 0x2000000) == 0) {
      goto LABEL_22;
    }
LABEL_47:
    int v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", self->_local));
    -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v24, @"ACCMediaLibraryUpdateItemIsLocal");

    if ((self->_validMask & 0x8000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }

  albumArtist = self->_albumArtist;
  if (albumArtist)
  {
    albumArtist = -[NSString UTF8String](albumArtist, "UTF8String");
    validMask = self->_validMask;
  }

  a3->var15 = (char *)albumArtist;
  a3->var0 |= 0x4000u;
  if ((validMask & 0x8000) == 0)
  {
LABEL_17:
    if ((validMask & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_49;
  }

uint64_t iap2_sessionLog_init()
{
  return 1LL;
}

uint64_t iap2_sessionLog_start(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (uint64_t)malloc(0xA8uLL);
    if (result)
    {
      id v2 = (void *)result;
      id v3 = calloc(1uLL, 0x50uLL);
      if (v3)
      {
        BOOL v4 = v3;
        *id v3 = *(void *)(v1 + 8);
        v3[8] = dispatch_queue_create("LoggingProtocol-DeviceContext-Queue", 0LL);
        v2[4] = v4;
        *(_DWORD *)id v2 = 0;
        *((_WORD *)v2 + 2) = 2;
        v2[2] = 0LL;
        *((_WORD *)v2 + 12) = 0;
        *((_DWORD *)v2 + 2) = 0;
        v2[11] = 0LL;
        v2[12] = 0LL;
        v2[10] = 0LL;
        *((_BYTE *)v2 + 104) = 0;
        *((_DWORD *)v2 + 27) = 2;
        *((_BYTE *)v2 + 112) = 0;
        *((_DWORD *)v2 + 29) = 0;
        uint64_t result = 1LL;
        *(void *)(v1 + 44_Block_object_dispose((const void *)(v1 - 96), 8) = v2;
      }

      else
      {
        free(v2);
        return 0LL;
      }
    }
  }

  return result;
}

BOOL iap2_sessionLog_cleanup(uint64_t a1)
{
  if (a1)
  {
    id v2 = *(dispatch_object_t **)(*(void *)(a1 + 448) + 32LL);
    id v3 = (dispatch_source_s *)v2[9];
    if (v3)
    {
      dispatch_source_cancel(v3);
      dispatch_release(v2[9]);
      v2[9] = 0LL;
    }

    BOOL v4 = (dispatch_source_s *)v2[6];
    if (v4)
    {
      dispatch_source_cancel(v4);
      dispatch_release(v2[6]);
      v2[6] = 0LL;
    }

    int v5 = (dispatch_source_s *)v2[7];
    if (v5)
    {
      dispatch_source_cancel(v5);
      dispatch_release(v2[7]);
      v2[7] = 0LL;
    }

    uint64_t v6 = (dispatch_queue_s *)v2[8];
    if (v6)
    {
      dispatch_sync(v6, &__block_literal_global_40);
      dispatch_release(v2[8]);
      v2[8] = 0LL;
    }

    acc_platform_loggingProtocol_removeNotificationObserver(**(id **)(*(void *)(a1 + 448) + 32LL));
    uint64_t v7 = *(void ***)(a1 + 448);
    if (v7[4])
    {
      free(v7[4]);
      uint64_t v7 = *(void ***)(a1 + 448);
      v7[4] = 0LL;
    }

    if (v7[2])
    {
      free(v7[2]);
      uint64_t v7 = *(void ***)(a1 + 448);
      _DWORD v7[2] = 0LL;
    }

    if (v7[10])
    {
      free(v7[10]);
      uint64_t v7 = *(void ***)(a1 + 448);
      v7[10] = 0LL;
    }

    if (v7[11])
    {
      free(v7[11]);
      uint64_t v7 = *(void ***)(a1 + 448);
      v7[11] = 0LL;
    }

    if (v7[12])
    {
      free(v7[12]);
      uint64_t v7 = *(void ***)(a1 + 448);
      v7[12] = 0LL;
    }

    free(v7);
    *(void *)(a1 + 44_Block_object_dispose((const void *)(v1 - 96), 8) = 0LL;
    acc_platform_loggingProtocol_postLoggingCleanup();
  }

  return a1 != 0;
}

uint64_t iap2_sessionLog_parseIncomingMessage(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!a1 || !a2) {
    return 0LL;
  }
  uint64_t v5 = *(void *)(a1 + 448);
  if (!*(void *)(v5 + 16)) {
    *(void *)(v5 + 16) = malloc(0xFFFFuLL);
  }
  return loggingProtocol_parseIncomingByteStream(a2, a3, v5);
}

BOOL iap2_sessionLog_sendOutgoingMessage(uint64_t a1, char *a2, unsigned int a3)
{
  if (!a1) {
    return 0LL;
  }
  if (!a2) {
    return 0LL;
  }
  BOOL v4 = *(const void ***)(a1 + 32);
  if (!v4) {
    return 0LL;
  }
  if (!*v4) {
    return 0LL;
  }
  EndpointWithUUID = acc_manager_getEndpointWithUUID(*v4);
  uint64_t v7 = EndpointWithUUID[7];
  if (!v7) {
    return 0LL;
  }
  uint64_t v8 = *(void *)(v7 + 32);
  if (v8) {
    uint64_t v9 = *(void *)(v8 + 24);
  }
  else {
    uint64_t v9 = 0LL;
  }
  unsigned int SessionForService = iAP2LinkGetSessionForService(v9, 4);
  return iAP2LinkQueueSendData(v9, a2, a3, SessionForService, 0LL, 0LL, 0LL, 0);
}

void iap2_sessionLog_registerForNotifications(uint64_t a1)
{
}

uint64_t iap2_oobBtPairing_accessoryInfoHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 46)
  {
    BOOL v4 = *(os_log_s **)(gLogObjects + 360);
  }

  else
  {
    BOOL v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v5 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v5 = 0LL;
    }
    *(_DWORD *)buf = 138412290;
    *(void *)__int16 v37 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "iAP2OOBBTPairing AccessoryInfo Handler %@",  buf,  0xCu);
  }

  uint64_t v6 = 0LL;
  if (a1 && a2)
  {
    unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
    int v35 = 0;
    unsigned __int16 valuePtr = 0;
    if (FirstParam)
    {
      NextParam = (unsigned __int16 *)FirstParam;
      unsigned __int16 v9 = 0;
      int v10 = 0;
      uint64_t v11 = 0LL;
      int v12 = 0;
      while (1)
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        int v14 = ParamID;
        if (ParamID == 1) {
          break;
        }
        if (ParamID) {
          goto LABEL_21;
        }
        unsigned __int16 DataAsU16 = iAP2MsgGetDataAsU16(NextParam, &v35);
        if (v35)
        {
          int MsgID = iAP2MsgGetMsgID(a2);
          printf("Param ID: %d parse error for Msg ID: 0x%04X - ignoring message", 0, MsgID);
          return 0LL;
        }

        unsigned __int16 v9 = DataAsU16;
        unsigned __int16 valuePtr = DataAsU16;
        int v12 = 1;
LABEL_22:
        NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
        if (!NextParam) {
          goto LABEL_25;
        }
      }

      uint64_t DataAsU32 = iAP2MsgGetDataAsU32(NextParam, &v35);
      if (v35)
      {
        int v33 = iAP2MsgGetMsgID(a2);
        printf("Param ID: %d parse error for Msg ID: 0x%04X - ignoring message", 1, v33);
        return 0LL;
      }

      uint64_t v11 = DataAsU32;
      int v10 = 1;
LABEL_21:
      int v17 = iAP2MsgGetMsgID(a2);
      printf("Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", v14, v17);
      goto LABEL_22;
    }

    unsigned __int16 v9 = 0;
    int v12 = 0;
    uint64_t v11 = 0LL;
    int v10 = 0;
LABEL_25:
    if (gLogObjects && gNumLogObjects >= 46)
    {
      __int128 v18 = *(os_log_s **)(gLogObjects + 360);
    }

    else
    {
      __int128 v18 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = *(void *)(a1 + 8);
      *(_DWORD *)buf = 138412290;
      *(void *)__int16 v37 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing AccessoryInfo: %@", buf, 0xCu);
    }

    uint64_t Feature = iap2_feature_getFeature(a1, 0xFu);
    if (Feature
      && (uint64_t v21 = Feature, *(_BYTE *)(Feature + 28))
      && (buf[0] = 0,
          iap2_identification_checkRequiredMsgIDs(a1, (uint64_t)&gskMsgOOBBTPairingMainList, 5, buf)))
    {
      if ((v10 & v12 & 1) != 0)
      {
        CFNumberRef v22 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
        uint64_t Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)v21, v22);
        CFDataRef v24 = iap2_identification_copyMacAddressForComponentID(a1, valuePtr);
        if (gLogObjects && gNumLogObjects >= 46)
        {
          uint64_t v25 = *(os_log_s **)(gLogObjects + 360);
        }

        else
        {
          uint64_t v25 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)__int16 v37 = valuePtr;
          *(_WORD *)&v37[4] = 2112;
          *(void *)&_BYTE v37[6] = Value;
          *(_WORD *)&_BYTE v37[14] = 2112;
          *(void *)&v37[16] = v24;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "iAP2OOBBTPairing AccessoryInfo: for componentID=%d, uuid=%@ accessoryMacAddr=%@",  buf,  0x1Cu);
        }

        if (Value) {
          BOOL v27 = v24 == 0LL;
        }
        else {
          BOOL v27 = 1;
        }
        uint64_t v6 = !v27;
        if (v27)
        {
          if (gLogObjects && gNumLogObjects >= 46)
          {
            int v29 = *(os_log_s **)(gLogObjects + 360);
          }

          else
          {
            int v29 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v30 = *(void *)(a1 + 8);
            *(_DWORD *)buf = 138413058;
            *(void *)__int16 v37 = v30;
            *(_WORD *)&v37[8] = 2112;
            *(void *)&_BYTE v37[10] = Value;
            *(_WORD *)&v37[18] = 2112;
            *(void *)&_BYTE v37[20] = v24;
            LOWORD(v38[0]) = 1024;
            *(_DWORD *)((char *)v38 + 2) = valuePtr;
            _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "iAP2OOBBTPairing AccessoryInfo: %@, no uuid(%@) or accesoryMacAddr(%@) for componentID %d, ignore message",  buf,  0x26u);
          }
        }

        else
        {
          if (*(_DWORD *)(v21 + 24) != valuePtr)
          {
            *(_DWORD *)(v21 + 24) = valuePtr;
            *(void *)(v21 + 16) = CFStringCreateCopy(kCFAllocatorDefault, Value);
          }

          platform_oobBtPairing_accessoryInfo(*(void *)(a1 + 8), (uint64_t)Value, (uint64_t)v24, v11);
        }

        if (v22) {
          CFRelease(v22);
        }
        if (v24) {
          CFRelease(v24);
        }
      }

      else
      {
        if (gLogObjects && gNumLogObjects >= 46)
        {
          int v26 = *(os_log_s **)(gLogObjects + 360);
        }

        else
        {
          int v26 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        uint64_t v6 = 0LL;
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v28 = *(void *)(a1 + 8);
          *(_DWORD *)buf = 138413314;
          *(void *)__int16 v37 = v28;
          *(_WORD *)&v37[8] = 1024;
          *(_DWORD *)&_BYTE v37[10] = v9;
          *(_WORD *)&_BYTE v37[14] = 1024;
          *(_DWORD *)&v37[16] = v12 & 1;
          *(_WORD *)&_BYTE v37[20] = 1024;
          *(_DWORD *)&v37[22] = v11;
          *(_WORD *)&v37[26] = 1024;
          v38[0] = v10 & 1;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "iAP2OOBBTPairing AccessoryInfo: %@, no componentID (%d / %d) or no deviceClass (%d / %d) parameter, ignore message",  buf,  0x24u);
          return 0LL;
        }
      }
    }

    else
    {
      return 0LL;
    }
  }

  return v6;
}

uint64_t iap2_oobBtPairing_completionInfoHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 46)
  {
    BOOL v4 = *(os_log_s **)(gLogObjects + 360);
  }

  else
  {
    BOOL v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v5 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v5 = 0LL;
    }
    *(_DWORD *)buf = 138412290;
    uint64_t v27 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "iAP2OOBBTPairing CompletionInfo Handler %@",  buf,  0xCu);
  }

  uint64_t result = 0LL;
  if (!a1 || !a2) {
    return result;
  }
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
  int v25 = 0;
  if (FirstParam)
  {
    NextParam = (unsigned __int16 *)FirstParam;
    char v9 = 0;
    unsigned __int8 v10 = 0;
    while (1)
    {
      int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
      if (ParamID)
      {
        int v12 = ParamID;
        int MsgID = iAP2MsgGetMsgID(a2);
        printf("Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", v12, MsgID);
      }

      else
      {
        unsigned __int8 DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v25);
        if (v25)
        {
          int v24 = iAP2MsgGetMsgID(a2);
          printf("Param ID: %d parse error for Msg ID: 0x%04X - ignoring message", 0, v24);
          return 0LL;
        }

        unsigned __int8 v10 = DataAsU8;
        char v9 = 1;
      }

      NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
      if (!NextParam) {
        goto LABEL_22;
      }
    }
  }

  unsigned __int8 v10 = 0;
  char v9 = 0;
LABEL_22:
  if (gLogObjects && gNumLogObjects >= 46)
  {
    int v15 = *(os_log_s **)(gLogObjects + 360);
  }

  else
  {
    int v15 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    uint64_t v16 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 138412290;
    uint64_t v27 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing CompletionInfo: %@", buf, 0xCu);
  }

  uint64_t result = iap2_feature_getFeature(a1, 0xFu);
  if (result)
  {
    uint64_t v17 = result;
    if (!*(_BYTE *)(result + 28)) {
      return 0LL;
    }
    buf[0] = 0;
    uint64_t result = iap2_identification_checkRequiredMsgIDs(a1, (uint64_t)&gskMsgOOBBTPairingMainList, 5, buf);
    if ((_DWORD)result)
    {
      if ((v9 & 1) != 0 && (uint64_t v18 = *(void *)(v17 + 16)) != 0)
      {
        platform_oobBtPairing_completionStatus(*(void *)(a1 + 8), v18, v10);
        *(_DWORD *)(v17 + 24) = -1;
        uint64_t v19 = *(const void **)(v17 + 16);
        if (v19)
        {
          CFRelease(v19);
          *(void *)(v17 + 16) = 0LL;
        }

        return 1LL;
      }

      else
      {
        if (gLogObjects && gNumLogObjects >= 46)
        {
          uint64_t v20 = *(os_log_s **)(gLogObjects + 360);
        }

        else
        {
          uint64_t v20 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0LL;
        if (v21)
        {
          uint64_t v22 = *(void *)(a1 + 8);
          uint64_t v23 = *(void *)(v17 + 16);
          *(_DWORD *)buf = 138413058;
          uint64_t v27 = v22;
          __int16 v28 = 1024;
          int v29 = v10;
          __int16 v30 = 1024;
          int v31 = v9 & 1;
          __int16 v32 = 2112;
          uint64_t v33 = v23;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "iAP2OOBBTPairing CompletionInfo: %@, no resultCode (%d / %d) parameter or no currentOOBBTPairingUID (%@), ignore message",  buf,  0x22u);
          return 0LL;
        }
      }
    }
  }

  return result;
}

uint64_t iap2_oobBtPairing_startPairingHandler(uint64_t *a1, void *a2)
{
  if (gLogObjects && gNumLogObjects >= 46)
  {
    BOOL v4 = *(os_log_s **)(gLogObjects + 360);
  }

  else
  {
    BOOL v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v5 = a1[1];
    }
    else {
      uint64_t v5 = 0LL;
    }
    int v18 = 138412290;
    uint64_t v19 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "iAP2OOBBTPairing StartPairing Handler %@",  (uint8_t *)&v18,  0xCu);
  }

  if (!a1) {
    return 0LL;
  }
  uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0xFu);
  if (gLogObjects && gNumLogObjects >= 46)
  {
    uint64_t v7 = *(os_log_s **)(gLogObjects + 360);
  }

  else
  {
    uint64_t v7 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = "exists";
    uint64_t v9 = a1[1];
    if (!Feature) {
      uint64_t v8 = "missing!!";
    }
    int v18 = 138412546;
    uint64_t v19 = v9;
    __int16 v20 = 2080;
    BOOL v21 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "iAP2OOBBTPairing StartPairing %@ oobBtPairing %s",  (uint8_t *)&v18,  0x16u);
  }

  if (!Feature) {
    return 0LL;
  }
  *(_DWORD *)(Feature + 24) = -1;
  unsigned __int8 v10 = *(const void **)(Feature + 16);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(Feature + 16) = 0LL;
  }

  if (gLogObjects && gNumLogObjects >= 46)
  {
    uint64_t v11 = *(os_log_s **)(gLogObjects + 360);
  }

  else
  {
    uint64_t v11 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    uint64_t v12 = a1[1];
    int v18 = 138412290;
    uint64_t v19 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "iAP2OOBBTPairing StartPairing %@, create msg",  (uint8_t *)&v18,  0xCu);
  }

  uint64_t v13 = iAP2MsgInit((uint64_t)(a1 + 15), 176, a1[24], 0xFFFF, 0LL, 0LL);
  *(_BYTE *)(Feature + 2_Block_object_dispose((const void *)(v1 - 96), 8) = 1;
  if (gLogObjects && gNumLogObjects >= 46)
  {
    int v14 = *(os_log_s **)(gLogObjects + 360);
  }

  else
  {
    int v14 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    uint64_t v15 = a1[1];
    int MsgID = iAP2MsgGetMsgID(v13);
    int v18 = 138412546;
    uint64_t v19 = v15;
    __int16 v20 = 1024;
    LODWORD(v21) = MsgID;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "iAP2OOBBTPairing StartPairing %@ send message %xh",  (uint8_t *)&v18,  0x12u);
  }

  iap2_sessionControl_sendOutgoingMessage(a1, v13);
  platform_oobBtPairing_deleteParams(a2);
  return 1LL;
}

uint64_t iap2_oobBtPairing_pairingLinkKeyInfoHandler(uint64_t *a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 46)
  {
    BOOL v4 = *(os_log_s **)(gLogObjects + 360);
  }

  else
  {
    BOOL v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v5 = a1[1];
    }
    else {
      uint64_t v5 = 0LL;
    }
    int v31 = 138412290;
    uint64_t v32 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "iAP2OOBBTPairing pairingLinkKeyInfo Handler %@",  (uint8_t *)&v31,  0xCu);
  }

  if (!a1) {
    return 0LL;
  }
  uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0xFu);
  if (gLogObjects && gNumLogObjects >= 46)
  {
    uint64_t v7 = *(os_log_s **)(gLogObjects + 360);
  }

  else
  {
    uint64_t v7 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = "exists";
    uint64_t v9 = a1[1];
    if (!Feature) {
      uint64_t v8 = "missing!!";
    }
    int v31 = 138412546;
    uint64_t v32 = v9;
    __int16 v33 = 2080;
    CFIndex v34 = (CFIndex)v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "iAP2OOBBTPairing pairingLinkKeyInfo %@ oobBtPairing %s",  (uint8_t *)&v31,  0x16u);
  }

  if (!Feature) {
    return 0LL;
  }
  uint64_t result = 0LL;
  if (!a2 || !*(_BYTE *)(Feature + 28)) {
    return result;
  }
  if (*(_DWORD *)a2 != 1) {
    return 0LL;
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v11 = gLogObjects;
    int v12 = gNumLogObjects;
    if (*(void *)(a2 + 24))
    {
      if (gLogObjects && gNumLogObjects >= 46)
      {
        uint64_t v13 = *(os_log_s **)(gLogObjects + 360);
      }

      else
      {
        uint64_t v13 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v19 = a1[1];
        int v31 = 138412290;
        uint64_t v32 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "iAP2OOBBTPairing pairingLinkKeyInfo %@, create msg",  (uint8_t *)&v31,  0xCu);
      }

      uint64_t v20 = iAP2MsgInit((uint64_t)(a1 + 15), 178, a1[24], 0xFFFF, 0LL, 0LL);
      BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a2 + 16));
      unsigned __int16 Length = CFDataGetLength(*(CFDataRef *)(a2 + 16));
      unint64_t v23 = (unint64_t)iAP2MsgAddDataParam(v20, 0LL, 0, BytePtr, Length);
      int v24 = CFDataGetBytePtr(*(CFDataRef *)(a2 + 24));
      unsigned __int16 v25 = CFDataGetLength(*(CFDataRef *)(a2 + 24));
      if ((unint64_t)iAP2MsgAddDataParam(v20, 0LL, 1, v24, v25) | v23)
      {
        if (gLogObjects && gNumLogObjects >= 46)
        {
          int v26 = *(os_log_s **)(gLogObjects + 360);
        }

        else
        {
          int v26 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          uint64_t v29 = a1[1];
          int MsgID = iAP2MsgGetMsgID(v20);
          int v31 = 138412546;
          uint64_t v32 = v29;
          __int16 v33 = 1024;
          LODWORD(v34) = MsgID;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "iAP2OOBBTPairing pairingLinkKeyInfo %@ send message %xh",  (uint8_t *)&v31,  0x12u);
        }

        iap2_sessionControl_sendOutgoingMessage(a1, v20);
      }

      platform_oobBtPairing_deleteParams((void *)a2);
      return 1LL;
    }
  }

  else
  {
    uint64_t v11 = gLogObjects;
    int v12 = gNumLogObjects;
  }

  if (v11 && v12 >= 46)
  {
    int v14 = *(os_log_s **)(v11 + 360);
  }

  else
  {
    int v14 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0LL;
  if (v15)
  {
    uint64_t v16 = a1[1];
    uint64_t v17 = *(const __CFData **)(a2 + 16);
    if (v17) {
      CFIndex v18 = CFDataGetLength(v17);
    }
    else {
      CFIndex v18 = -1LL;
    }
    uint64_t v27 = *(const __CFData **)(a2 + 24);
    if (v27) {
      CFIndex v28 = CFDataGetLength(v27);
    }
    else {
      CFIndex v28 = -1LL;
    }
    int v31 = 138412802;
    uint64_t v32 = v16;
    __int16 v33 = 2048;
    CFIndex v34 = v18;
    __int16 v35 = 2048;
    CFIndex v36 = v28;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "iAP2OOBBTPairing pairingLinkKeyInfo %@, Invalid linkKey(%ld bytes) or deviceMacAddr(%ld bytes), message not sent!",  (uint8_t *)&v31,  0x20u);
    return 0LL;
  }

  return result;
}

uint64_t iap2_oobBtPairing_stopPairingHandler(uint64_t *a1, void *a2)
{
  if (gLogObjects && gNumLogObjects >= 46)
  {
    BOOL v4 = *(os_log_s **)(gLogObjects + 360);
  }

  else
  {
    BOOL v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v5 = a1[1];
    }
    else {
      uint64_t v5 = 0LL;
    }
    int v17 = 138412290;
    uint64_t v18 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "iAP2OOBBTPairing StopPairing Handler %@",  (uint8_t *)&v17,  0xCu);
  }

  if (!a1) {
    return 0LL;
  }
  uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0xFu);
  if (gLogObjects && gNumLogObjects >= 46)
  {
    uint64_t v7 = *(os_log_s **)(gLogObjects + 360);
  }

  else
  {
    uint64_t v7 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = "exists";
    uint64_t v9 = a1[1];
    if (!Feature) {
      uint64_t v8 = "missing!!";
    }
    int v17 = 138412546;
    uint64_t v18 = v9;
    __int16 v19 = 2080;
    uint64_t v20 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "iAP2OOBBTPairing StopPairing %@ oobBtPairing %s",  (uint8_t *)&v17,  0x16u);
  }

  if (!Feature) {
    return 0LL;
  }
  if (gLogObjects && gNumLogObjects >= 46)
  {
    unsigned __int8 v10 = *(os_log_s **)(gLogObjects + 360);
  }

  else
  {
    unsigned __int8 v10 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = a1[1];
    int v17 = 138412290;
    uint64_t v18 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "iAP2OOBBTPairing StopPairing %@, create msg",  (uint8_t *)&v17,  0xCu);
  }

  uint64_t v12 = iAP2MsgInit((uint64_t)(a1 + 15), 180, a1[24], 0xFFFF, 0LL, 0LL);
  *(_BYTE *)(Feature + 2_Block_object_dispose((const void *)(v1 - 96), 8) = 0;
  if (gLogObjects && gNumLogObjects >= 46)
  {
    uint64_t v13 = *(os_log_s **)(gLogObjects + 360);
  }

  else
  {
    uint64_t v13 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    uint64_t v14 = a1[1];
    int MsgID = iAP2MsgGetMsgID(v12);
    int v17 = 138412546;
    uint64_t v18 = v14;
    __int16 v19 = 1024;
    LODWORD(v20) = MsgID;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "iAP2OOBBTPairing StopPairing %@ send message %xh",  (uint8_t *)&v17,  0x12u);
  }

  iap2_sessionControl_sendOutgoingMessage(a1, v12);
  platform_oobBtPairing_deleteParams(a2);
  return 1LL;
}

void *_createFeature_22(void *a1)
{
  if (gLogObjects && gNumLogObjects >= 46)
  {
    id v2 = *(os_log_s **)(gLogObjects + 360);
  }

  else
  {
    id v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v5[0] = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "iAP2OOBBTPairing _createFeature",  (uint8_t *)v5,  2u);
  }

  if (a1)
  {
    id v3 = calloc(1uLL, 0x20uLL);
    a1 = v3;
    if (v3)
    {
      _DWORD v3[2] = 0LL;
      *((_DWORD *)v3 + 6) = -1;
      *((_BYTE *)v3 + 2_Block_object_dispose((const void *)(v1 - 96), 8) = 0;
      *id v3 = CFDictionaryCreateMutable( kCFAllocatorDefault,  1LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      a1[1] = CFDictionaryCreateMutable( kCFAllocatorDefault,  1LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    }
  }

  return a1;
}

uint64_t _destroyFeature_22(void **a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 46)
  {
    BOOL v4 = *(os_log_s **)(gLogObjects + 360);
  }

  else
  {
    BOOL v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v9[0] = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "iAP2OOBBTPairing _destroyFeature",  (uint8_t *)v9,  2u);
  }

  uint64_t result = 0LL;
  if (a1 && a2)
  {
    uint64_t v6 = (CFTypeRef *)*a1;
    if (*a1)
    {
      platform_oobBtPairing_accessoryDetached(*(void *)(a2 + 8));
      platform_oobBTPairing_decrementUserCount();
      if (*v6)
      {
        CFRelease(*v6);
        CFTypeRef *v6 = 0LL;
      }

      CFTypeRef v7 = v6[1];
      if (v7)
      {
        CFRelease(v7);
        v6[1] = 0LL;
      }

      CFTypeRef v8 = v6[2];
      if (v8)
      {
        CFRelease(v8);
        _DWORD v6[2] = 0LL;
      }

      if (*a1)
      {
        free(*a1);
        *a1 = 0LL;
      }

      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

BOOL _startFeatureFromDevice_13(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 46)
  {
    id v2 = *(os_log_s **)(gLogObjects + 360);
  }

  else
  {
    id v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "iAP2OOBBTPairing _startFeatureFromDevice", buf, 2u);
  }

  uint64_t Feature = (CFMutableDictionaryRef *)iap2_feature_getFeature(a1, 0xFu);
  if (Feature)
  {
    buf[0] = 0;
    if (iap2_identification_checkRequiredMsgIDs(a1, (uint64_t)&gskMsgOOBBTPairingMainList, 5, buf))
    {
      uint64_t v4 = iap2_feature_getFeature(a1, 0);
      uint64_t v5 = iap2_feature_getFeature(a1, 1u);
      uint64_t v6 = iap2_feature_getFeature(a1, 0x14u);
      if (v6)
      {
        CFTypeRef v7 = *(const void **)(v6 + 24);
        if (v4)
        {
LABEL_12:
          CFTypeRef v8 = iap2_accAuthentication_copyCertificate(a1);
          CFTypeRef v9 = iap2_accAuthentication_copyCertificateSerial(a1);
          goto LABEL_15;
        }
      }

      else
      {
        CFTypeRef v7 = 0LL;
        if (v4) {
          goto LABEL_12;
        }
      }

      CFTypeRef v8 = 0LL;
      CFTypeRef v9 = 0LL;
LABEL_15:
      unsigned __int8 v10 = (const __CFDictionary *)iap2_identification_transportComponents(a1);
      if (v10)
      {
        uint64_t v11 = v10;
        CFIndex Count = CFDictionaryGetCount(v10);
        if (Count)
        {
          uint64_t v13 = Count;
          uint64_t v47 = v5;
          uint64_t v48 = v7;
          CFTypeRef v49 = v8;
          CFTypeRef v50 = v9;
          uint64_t v51 = a1;
          uint64_t v46 = &v42;
          __chkstk_darwin(Count);
          BOOL v15 = (unsigned __int16 **)((char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
          memset(v15, 170, v14);
          CFDictionaryGetKeysAndValues(v11, 0LL, (const void **)v15);
          if (v13 >= 1)
          {
            CFAllocatorRef v52 = kCFAllocatorDefault;
            int v43 = v54;
            *(void *)&__int128 v16 = 134218240LL;
            __int128 v44 = v16;
            *(void *)&__int128 v16 = 67111170LL;
            __int128 v45 = v16;
            do
            {
              int v17 = *v15;
              if (*v15)
              {
                int v18 = *((_DWORD *)v17 + 5);
                if (v18 == 5 || v18 == 3)
                {
                  uint64_t v20 = v52;
                  BOOL v21 = CFUUIDCreate(v52);
                  CFStringRef v22 = CFUUIDCreateString(v20, v21);
                  CFNumberRef v23 = CFNumberCreate(v20, kCFNumberSInt16Type, v17);
                  uint64_t v24 = gLogObjects;
                  int v25 = gNumLogObjects;
                  if (gLogObjects && gNumLogObjects >= 46)
                  {
                    int v26 = *(os_log_s **)(gLogObjects + 360);
                  }

                  else
                  {
                    int v26 = (os_log_s *)&_os_log_default;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = v44;
                      *(void *)uint64_t v56 = v24;
                      *(_WORD *)&v56[8] = 1024;
                      *(_DWORD *)&_BYTE v56[10] = v25;
                      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                    }
                  }

                  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
                  {
                    int v30 = *v17;
                    int v31 = *((unsigned __int8 *)v17 + 24);
                    int v32 = *((unsigned __int8 *)v17 + 25);
                    int v33 = *((unsigned __int8 *)v17 + 26);
                    int v34 = *((unsigned __int8 *)v17 + 27);
                    int v35 = *((unsigned __int8 *)v17 + 28);
                    int v36 = *((unsigned __int8 *)v17 + 29);
                    *(_DWORD *)buf = v45;
                    *(_DWORD *)uint64_t v56 = v30;
                    *(_WORD *)&v56[4] = 2112;
                    *(void *)&v56[6] = v23;
                    __int16 v57 = 2112;
                    CFStringRef v58 = v22;
                    char v59 = 0;
                    char v60 = 4;
                    int v61 = v31;
                    __int16 v62 = 1024;
                    int v63 = v32;
                    __int16 v64 = 1024;
                    int v65 = v33;
                    __int16 v66 = 1024;
                    int v67 = v34;
                    __int16 v68 = 1024;
                    int v69 = v35;
                    __int16 v70 = 1024;
                    int v71 = v36;
                    _os_log_debug_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEBUG,  "iAP2OOBBTPairing _startFeatureFromDevice: add transportComponent: componentID=%d componentIDObj=%@ uuidStr=%@ macAddr=(%02X %02X %02X %02X %02X %02X)",  buf,  0x40u);
                  }

                  CFDictionarySetValue(*Feature, v23, v22);
                  CFDictionarySetValue(Feature[1], v22, v23);
                  if (v21) {
                    CFRelease(v21);
                  }
                  if (v22) {
                    CFRelease(v22);
                  }
                  if (v23) {
                    CFRelease(v23);
                  }
                }
              }

              else
              {
                uint64_t v27 = gLogObjects;
                int v28 = gNumLogObjects;
                if (gLogObjects && gNumLogObjects >= 46)
                {
                  uint64_t v29 = *(os_log_s **)(gLogObjects + 360);
                }

                else
                {
                  uint64_t v29 = (os_log_s *)&_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = v44;
                    *(void *)uint64_t v56 = v27;
                    *(_WORD *)&v56[8] = 1024;
                    *(_DWORD *)&_BYTE v56[10] = v28;
                    _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                  }
                }

                if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
                  _checkIdentificationInfo_cold_5(&v53, v43, v29);
                }
              }

              ++v15;
              --v13;
            }

            while (v13);
          }

          uint64_t v5 = v47;
          CFTypeRef v9 = v50;
          a1 = v51;
          CFTypeRef v7 = v48;
          CFTypeRef v8 = v49;
        }
      }

      char isIdentifiedForCarPlay = iap2_identification_isIdentifiedForCarPlay(a1);
      unsigned int v38 = *(const void ***)(v5 + 8);
      AccInfoMutableDict = platform_oobBtPairing_createAccInfoMutableDict( v38[2],  v38[3],  v38[1],  v38[4],  v38[5],  v38[6],  v7,  v8,  v9,  isIdentifiedForCarPlay);
      platform_oobBTPairing_incrementUserCount();
      if (!a1 || (uint64_t v40 = *(void *)(a1 + 8)) == 0) {
        uint64_t v40 = 0LL;
      }
      platform_oobBtPairing_accessoryAttached(v40, (uint64_t)AccInfoMutableDict);
      if (AccInfoMutableDict) {
        CFRelease(AccInfoMutableDict);
      }
      if (v8) {
        CFRelease(v8);
      }
      if (v9) {
        CFRelease(v9);
      }
    }
  }

  return Feature != 0LL;
}

uint64_t _checkIdentificationInfo_19(uint64_t a1)
{
  char v9 = 0;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&gskMsgOOBBTPairingMainList, 5u, &v9);
  uint64_t v3 = v2;
  if (v9) {
    BOOL v4 = (_DWORD)v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  int v5 = v4;
  if (v9) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6 && (_DWORD)v2 == 0)
  {
    iap2_features_createFeature(a1, 0xFu);
    iap2_identification_setIdentifiedForFeature(a1, 0xFu);
  }

  return v3;
}

CFStringRef acc_userNotifications_createIdentifier(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return CFStringCreateWithFormat(kCFAllocatorDefault, 0LL, @"%@_%@", a1, a2);
  }
  else {
    return 0LL;
  }
}

uint64_t acc_userNotifications_createAccessoryNotSupportedCF()
{
  id v0 = acc_userNotifications_accessoryNotSupported();
  return objc_claimAutoreleasedReturnValue(v0);
}

uint64_t acc_protocolParser_init(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(void *)result) {
      return 0LL;
    }
    uint64_t result = (uint64_t)calloc(1uLL, 0x20uLL);
    *(void *)uint64_t v1 = result;
    if (!result) {
      return result;
    }
    **(void **)uint64_t v1 = CFDataCreateMutable(kCFAllocatorDefault, 0LL);
    if (!**(void **)v1) {
      return 0LL;
    }
    *(_WORD *)(*(void *)v1 + 24LL) = 512;
    *(void *)(*(void *)v1 + 16LL) = calloc(2uLL, 0x10uLL);
    uint64_t v2 = *(void *)(*(void *)v1 + 16LL);
    *(_DWORD *)uint64_t v2 = 3;
    acc_protocolParser_iAP1_create((void *)(v2 + 8));
    uint64_t v3 = *(void *)(*(void *)v1 + 16LL);
    *(_DWORD *)(v3 + 16) = 4;
    acc_protocolParser_iAP2_create((void *)(v3 + 24));
    *(_DWORD *)(*(void *)v1 + 28LL) = 0;
    if (gLogObjects && gNumLogObjects >= 16)
    {
      BOOL v4 = *(os_log_s **)(gLogObjects + 120);
    }

    else
    {
      BOOL v4 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(unsigned __int8 *)(*(void *)v1 + 25LL);
      v6[0] = 67109120;
      v6[1] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Initialized protocol parser. Matching against %u protocols...",  (uint8_t *)v6,  8u);
    }

    return 1LL;
  }

  return result;
}

BOOL acc_protocolParser_destroy(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void **)a1;
    if (*(void *)a1)
    {
      if (*((_BYTE *)v2 + 25))
      {
        uint64_t v3 = 0LL;
        unint64_t v4 = 0LL;
        do
        {
          uint64_t v5 = v2[2];
          int v6 = *(_DWORD *)(v5 + v3);
          if (v6 == 4 || v6 == 3)
          {
            acc_protocolParser_iAP2_destroy((void **)(v5 + v3 + 8));
          }

          else
          {
            uint64_t v7 = gLogObjects;
            int v8 = gNumLogObjects;
            if (gLogObjects) {
              BOOL v9 = gNumLogObjects < 16;
            }
            else {
              BOOL v9 = 1;
            }
            if (v9)
            {
              unsigned __int8 v10 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                uint64_t v15 = v7;
                __int16 v16 = 1024;
                int v17 = v8;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                unsigned __int8 v10 = (os_log_s *)&_os_log_default;
              }
            }

            else
            {
              unsigned __int8 v10 = *(os_log_s **)(gLogObjects + 120);
            }

            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            {
              int v11 = *(_DWORD *)(v2[2] + v3);
              *(_DWORD *)buf = 67109120;
              LODWORD(v15) = v11;
              _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Cannot destroy parser for unknown protocol: %d",  buf,  8u);
            }
          }

          ++v4;
          v3 += 16LL;
        }

        while (v4 < *((unsigned __int8 *)v2 + 25));
        uint64_t v2 = *(void **)a1;
      }

      if (*v2)
      {
        CFRelease((CFTypeRef)*v2);
        **(void **)a1 = 0LL;
        uint64_t v2 = *(void **)a1;
      }

      uint64_t v12 = (void *)v2[2];
      if (!v12 || (free(v12), *(void *)(*(void *)a1 + 16LL) = 0LL, (uint64_t v2 = *(void **)a1) != 0LL))
      {
        free(v2);
        *(void *)a1 = 0LL;
      }
    }
  }

  return a1 != 0;
}

uint64_t acc_protocolParser_detectProtocol(uint64_t *a1, CFDataRef theData)
{
  uint64_t result = 0LL;
  if (!a1 || !theData) {
    return result;
  }
  uint64_t v5 = (void *)*a1;
  if (!*a1)
  {
    uint64_t result = acc_protocolParser_init((uint64_t)a1);
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v5 = (void *)*a1;
  }

  if (!*v5) {
    return 0LL;
  }
  CFIndex Length = CFDataGetLength(theData);
  if (CFDataGetLength(*(CFDataRef *)*a1) >= 33)
  {
    if (gLogObjects && gNumLogObjects >= 16)
    {
      uint64_t v7 = *(os_log_s **)(gLogObjects + 120);
    }

    else
    {
      uint64_t v7 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = 67109120;
      int v21 = 32;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Reached buffer reset size of %u, resetting parser...",  (uint8_t *)&v20,  8u);
    }

    _resetParser(*a1);
  }

  if (Length >= 0x10000)
  {
    __int16 v19 = (os_log_s *)logObjectForModule_10();
    uint64_t result = os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result) {
      return result;
    }
    acc_protocolParser_detectProtocol_cold_1(v19);
    return 0LL;
  }

  int v8 = *(__CFData **)*a1;
  BytePtr = CFDataGetBytePtr(theData);
  CFIndex v10 = CFDataGetLength(theData);
  CFDataAppendBytes(v8, BytePtr, v10);
  CFIndex v11 = CFDataGetLength(*(CFDataRef *)*a1);
  unsigned __int16 v12 = v11;
  CFIndex v13 = *(unsigned __int16 *)(*a1 + 8);
  if (v11 < v13)
  {
    LODWORD(v13) = 0;
    *(_WORD *)(*a1 + _Block_object_dispose((const void *)(v1 - 96), 8) = 0;
  }

  if (gLogObjects && gNumLogObjects >= 16)
  {
    size_t v14 = *(os_log_s **)(gLogObjects + 120);
  }

  else
  {
    size_t v14 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    int v20 = 67109120;
    int v21 = (unsigned __int16)(v12 - v13);
    _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "parseDataLength: %hu", (uint8_t *)&v20, 8u);
  }

  uint64_t v15 = *a1;
  if ((_DWORD)v13 != v12)
  {
    else {
      int v16 = (unsigned __int16)(v12 - v13);
    }
    do
    {
      _runFSM(v15);
      uint64_t v15 = *a1;
      if (*(_DWORD *)(*a1 + 28)) {
        break;
      }
      if (*(unsigned __int8 *)(v15 + 24) >= *(unsigned __int8 *)(v15 + 25))
      {
        if (gLogObjects) {
          BOOL v17 = gNumLogObjects < 16;
        }
        else {
          BOOL v17 = 1;
        }
        if (v17)
        {
          int v18 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        else
        {
          int v18 = *(os_log_s **)(gLogObjects + 120);
        }

        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v20) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "All protocol matching verifications have failed, resetting parser...",  (uint8_t *)&v20,  2u);
        }

        _resetParser(*a1);
        uint64_t v15 = *a1;
        return *(unsigned int *)(v15 + 28);
      }

      --v16;
    }

    while (v16);
  }

  return *(unsigned int *)(v15 + 28);
}

void _resetParser(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(__CFData **)a1;
    if (v2)
    {
      v16.BOOL length = *(unsigned __int16 *)(a1 + 8);
      v16.location = 0LL;
      CFDataDeleteBytes(v2, v16);
      *(_WORD *)(a1 + _Block_object_dispose((const void *)(v1 - 96), 8) = 0;
      *(_BYTE *)(a1 + 24) = 0;
      if (*(_BYTE *)(a1 + 25))
      {
        uint64_t v3 = 0LL;
        unint64_t v4 = 0LL;
        do
        {
          uint64_t v5 = *(void *)(a1 + 16);
          int v6 = *(_DWORD *)(v5 + v3);
          if (v6 == 4)
          {
            acc_protocolParser_iAP2_reset(*(void *)(v5 + v3 + 8));
          }

          else if (v6 == 3)
          {
            acc_protocolParser_iAP1_reset(*(void *)(v5 + v3 + 8));
          }

          else
          {
            uint64_t v7 = gLogObjects;
            int v8 = gNumLogObjects;
            if (gLogObjects) {
              BOOL v9 = gNumLogObjects < 16;
            }
            else {
              BOOL v9 = 1;
            }
            if (v9)
            {
              CFIndex v10 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                uint64_t v13 = v7;
                __int16 v14 = 1024;
                int v15 = v8;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                CFIndex v10 = (os_log_s *)&_os_log_default;
              }
            }

            else
            {
              CFIndex v10 = *(os_log_s **)(gLogObjects + 120);
            }

            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            {
              int v11 = *(_DWORD *)(*(void *)(a1 + 16) + v3);
              *(_DWORD *)buf = 67109120;
              LODWORD(v13) = v11;
              _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Cannot reset parser for unknown protocol: %d",  buf,  8u);
            }
          }

          ++v4;
          v3 += 16LL;
        }

        while (v4 < *(unsigned __int8 *)(a1 + 25));
      }
    }
  }

void _runFSM(uint64_t a1)
{
  uint64_t v2 = (_WORD *)(a1 + 8);
  uint64_t v3 = (unsigned __int8 *)&CFDataGetBytePtr(*(CFDataRef *)a1)[*(unsigned __int16 *)(a1 + 8)];
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 16;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    uint64_t v5 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    uint64_t v5 = *(os_log_s **)(gLogObjects + 120);
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    _runFSM_cold_1(v3, (unsigned __int16 *)(a1 + 8), v5);
  }
  if (*(_BYTE *)(a1 + 25))
  {
    uint64_t v6 = 0LL;
    unint64_t v7 = 0LL;
    do
    {
      int v8 = (_DWORD *)(*(void *)(a1 + 16) + v6);
      if (*v8 == 4)
      {
        acc_protocolParser_iAP2_run(a1, (uint64_t)v8, v3);
      }

      else if (*v8 == 3)
      {
        acc_protocolParser_iAP1_run(a1, (uint64_t)v8, v3);
      }

      ++v7;
      v6 += 16LL;
    }

    while (v7 < *(unsigned __int8 *)(a1 + 25));
  }

  ++*v2;
}

uint64_t iap2_messageHandlers_setHandler(void *key, void *value)
{
  unsigned int v3 = key;
  uint64_t result = _giAP2MessageHandlers;
  if (_giAP2MessageHandlers) {
    goto LABEL_12;
  }
  _giAP2MessageHandlers = (uint64_t)CFDictionaryCreateMutable(kCFAllocatorDefault, 0LL, 0LL, 0LL);
  if (!gLogObjects || gNumLogObjects < 23)
  {
    uint64_t v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      _parseIdentificationParams_cold_2();
    }
  }

  else
  {
    uint64_t v6 = *(os_log_s **)(gLogObjects + 176);
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    iap2_messageHandlers_setHandler_cold_3(v6);
  }
  uint64_t result = _giAP2MessageHandlers;
  if (_giAP2MessageHandlers)
  {
LABEL_12:
    CFDictionarySetValue((CFMutableDictionaryRef)result, (const void *)v3, value);
    if (gLogObjects) {
      BOOL v7 = gNumLogObjects < 23;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
      int v8 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        _parseIdentificationParams_cold_2();
      }
    }

    else
    {
      int v8 = *(os_log_s **)(gLogObjects + 176);
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      iap2_messageHandlers_setHandler_cold_1(v3, v8);
    }
    return 1LL;
  }

  return result;
}

const void *iap2_messageHandlers_getHandler(void *key)
{
  unsigned int v1 = key;
  uint64_t result = (const void *)_giAP2MessageHandlers;
  if (_giAP2MessageHandlers) {
    return CFDictionaryGetValue((CFDictionaryRef)_giAP2MessageHandlers, (const void *)v1);
  }
  return result;
}

void *t56_endpoint_create(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = calloc(1uLL, 0x108uLL);
    unsigned int v3 = v2;
    if (v2)
    {
      void *v2 = a1;
      CFTypeRef v4 = *(CFTypeRef *)(a1 + 16);
      if (v4) {
        CFTypeRef v4 = CFRetain(v4);
      }
      _DWORD v3[2] = v4;
      CFTypeRef v5 = *(CFTypeRef *)(a1 + 8);
      if (v5) {
        CFTypeRef v5 = CFRetain(v5);
      }
      v3[1] = v5;
      *((_WORD *)v3 + 12_Block_object_dispose((const void *)(v1 - 96), 8) = 2000;
      uint64_t v6 = calloc(1uLL, 0x7D0uLL);
      v3[31] = v6;
      *((_WORD *)v3 + 129) = 0;
      *(_OWORD *)(v3 + 27) = 0u;
      *(_OWORD *)(v3 + 29) = 0u;
      *((_OWORD *)v3 + 9) = 0u;
      *((_OWORD *)v3 + 10) = 0u;
      *((_OWORD *)v3 + 11) = 0u;
      *((_OWORD *)v3 + 12) = 0u;
      *((_DWORD *)v3 + 52) = 0;
      if (v6)
      {
        CFStringRef Copy = (const __CFString *)v3[2];
        if (Copy)
        {
          CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, Copy);
          uint64_t v8 = v3[31];
        }

        else
        {
          uint64_t v8 = (uint64_t)v6;
        }

        v3[17] = v3 + 5;
        if (!t56_protocol_init((uint64_t)(v3 + 5), (uint64_t)Copy, 0, 1, 1u, v8, *((_WORD *)v3 + 128)))
        {
          dispatch_queue_t v9 = dispatch_queue_create("T56Endpoint", 0LL);
          v3[4] = v9;
          if (v9)
          {
            dispatch_set_context(v9, v3);
            dispatch_set_finalizer_f( (dispatch_object_t)v3[4],  (dispatch_function_t)_t56_endpoint_dispatchQueueFinalizer);
            uint64_t v10 = 0LL;
            while (1)
            {
              int v11 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  (dispatch_queue_t)v3[4]);
              unsigned __int16 v12 = &v3[v10];
              v12[18] = v11;
              if (!v11) {
                break;
              }
              dispatch_source_set_timer(v11, 0xFFFFFFFFFFFFFFFFLL, 0LL, 0LL);
              uint64_t v13 = (dispatch_source_s *)v12[18];
              v26[0] = (uint64_t)_NSConcreteStackBlock;
              v26[1] = 0x40000000LL;
              void v26[2] = (uint64_t)__t56_endpoint_create_block_invoke;
              v26[3] = (uint64_t)&__block_descriptor_tmp_20;
              v26[4] = (uint64_t)v3;
              int v27 = v10;
              dispatch_source_set_event_handler(v13, v26);
              dispatch_activate((dispatch_object_t)v12[18]);
              if (++v10 == 4)
              {
                acc_platform_packetLogging_logEvent( *v3,  "ATTACH",  (uint64_t)"T56 accessory attached!",  v14,  v15,  v16,  v17,  v18,  v26[0]);
                return v3;
              }
            }
          }
        }
      }
    }
  }

  else
  {
    int v20 = (os_log_s *)logObjectForModule_28();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_endpoint_create_cold_1();
    }
    unsigned int v3 = 0LL;
  }

  uint64_t v21 = v3[17];
  if (v21) {
    t56_protocol_cleanup(v21, 0LL, 0LL);
  }
  for (uint64_t i = 18LL; i != 22; ++i)
  {
    CFNumberRef v23 = (dispatch_object_s *)v3[i];
    if (v23)
    {
      dispatch_release(v23);
      v3[i] = 0LL;
    }
  }

  uint64_t v24 = (dispatch_object_s *)v3[4];
  if (v24)
  {
    v3[4] = 0LL;
    dispatch_release(v24);
  }

  else
  {
    int v25 = (void *)v3[31];
    if (v25) {
      free(v25);
    }
    free(v3);
  }

  return 0LL;
}

void *logObjectForModule_28()
{
  if (gLogObjects && gNumLogObjects >= 61) {
    return *(void **)(gLogObjects + 480);
  }
  id v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

void _t56_endpoint_dispatchQueueFinalizer(uint64_t *a1)
{
  if (a1)
  {
    t56_protocol_cleanup(a1[17], 0LL, 0LL);
    for (uint64_t i = 18LL; i != 22; ++i)
    {
      unsigned int v3 = (dispatch_object_s *)a1[i];
      if (v3)
      {
        dispatch_release(v3);
        a1[i] = 0LL;
      }
    }

    CFTypeRef v4 = (void *)a1[31];
    if (v4) {
      free(v4);
    }
    free(a1);
  }

  else
  {
    CFTypeRef v5 = (os_log_s *)logObjectForModule_28();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_endpoint_create_cold_1();
    }
  }

void __t56_endpoint_create_block_invoke(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 61)
  {
    uint64_t v2 = *(os_log_s **)(gLogObjects + 480);
  }

  else
  {
    uint64_t v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(int *)(a1 + 40);
    BOOL v4 = *(void *)(*(void *)(a1 + 32) + 8 * v3 + 176) != 0LL;
    v7[0] = 67109376;
    v7[1] = v4;
    __int16 v8 = 1024;
    int v9 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "T56 timer source fired!!! T56TimerCallback(%d), timerID %d",  (uint8_t *)v7,  0xEu);
  }

  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void (**)(void))(v5 + 8LL * *(int *)(a1 + 40) + 176);
  if (v6)
  {
    v6(*(void *)(v5 + 136));
    *(void *)(*(void *)(a1 + 32) + 8LL * *(int *)(a1 + 40) + 176) = 0LL;
  }

uint64_t t56_endpoint_publish(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 61)
  {
    uint64_t v2 = *(os_log_s **)(gLogObjects + 480);
  }

  else
  {
    uint64_t v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "T56 endpoint_publish", buf, 2u);
  }

  if (a1)
  {
    if (!*(void *)a1 || !*(void *)(a1 + 248) || !*(_WORD *)(a1 + 256)) {
      return 0LL;
    }
    CFStringRef v3 = acc_endpoint_copyParentEndpointUUID(*(void *)a1);
    if (gLogObjects && gNumLogObjects >= 61)
    {
      BOOL v4 = *(os_log_s **)(gLogObjects + 480);
    }

    else
    {
      BOOL v4 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(_DWORD *)(*(void *)a1 + 24LL);
      *(_DWORD *)buf = 67109378;
      int v15 = v5;
      __int16 v16 = 2112;
      CFStringRef v17 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "T56 publish: transportType %{coreacc:ACCEndpoint_TransportType_t}d, parentEndpointUUID %@",  buf,  0x12u);
    }

    if (acc_endpoint_isPublished(*(void *)a1))
    {
      uint64_t v6 = *(const __CFString **)(a1 + 16);
      CFStringRef v7 = v6 ? CFStringCreateCopy(kCFAllocatorDefault, v6) : 0LL;
      t56_protocol_cleanup(*(void *)(a1 + 136), 0LL, 0LL);
      if (!t56_protocol_init( *(void *)(a1 + 136),  (uint64_t)v7,  0,  1,  1u,  *(void *)(a1 + 248),  *(_WORD *)(a1 + 256)))
      {
        a1 = 0LL;
        if (!v3) {
          return a1;
        }
        goto LABEL_33;
      }
    }

    if (gLogObjects && gNumLogObjects >= 61)
    {
      __int16 v8 = *(os_log_s **)(gLogObjects + 480);
    }

    else
    {
      __int16 v8 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(_DWORD *)(*(void *)a1 + 24LL);
      *(_DWORD *)buf = 67109378;
      int v15 = v9;
      __int16 v16 = 2112;
      CFStringRef v17 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "T56 publish: transportType %{coreacc:ACCEndpoint_TransportType_t}d, parentEndpointUUID %@, start protocol!!!",  buf,  0x12u);
    }

    if (v3) {
      CFRetain(v3);
    }
    dispatch_time_t v10 = dispatch_time(0LL, 100000000LL);
    int v11 = *(dispatch_queue_s **)(a1 + 32);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 0x40000000LL;
    _DWORD v13[2] = __t56_endpoint_publish_block_invoke;
    v13[3] = &__block_descriptor_tmp_4_3;
    v13[4] = a1;
    v13[5] = v3;
    dispatch_after(v10, v11, v13);
    a1 = 1LL;
    if (v3) {
LABEL_33:
    }
      CFRelease(v3);
  }

  return a1;
}

void __t56_endpoint_publish_block_invoke(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 61)
  {
    uint64_t v2 = *(os_log_s **)(gLogObjects + 480);
  }

  else
  {
    uint64_t v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    int v4 = *(_DWORD *)(**(void **)(a1 + 32) + 24LL);
    v6[0] = 67109378;
    v6[1] = v4;
    __int16 v7 = 2112;
    uint64_t v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "T56 publish: transportType %{coreacc:ACCEndpoint_TransportType_t}d, parentEndpointUUID %@, after delay, call t56_protocol_start",  (uint8_t *)v6,  0x12u);
  }

  t56_protocol_start(*(void *)(*(void *)(a1 + 32) + 136LL));
  int v5 = *(const void **)(a1 + 40);
  if (v5) {
    CFRelease(v5);
  }
}

uint64_t t56_endpoint_destroy( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    uint64_t v9 = *a1;
    if (*a1)
    {
      acc_platform_packetLogging_logEvent( *(void *)v9,  "DETACH",  (uint64_t)"T56 accessory detached!",  a4,  a5,  a6,  a7,  a8,  v16);
      dispatch_release(*(dispatch_object_t *)(v9 + 32));
      *a1 = 0LL;
      return 1LL;
    }

    if (gLogObjects && gNumLogObjects >= 61)
    {
      int v11 = *(os_log_s **)(gLogObjects + 480);
    }

    else
    {
      int v11 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0LL;
    if (v12)
    {
      LOWORD(v16) = 0;
      uint64_t v13 = "T56 Endpoint Destroy. *ppProtocolEndpoint is null!";
      uint64_t v14 = (uint8_t *)&v16;
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v13, v14, 2u);
      return 0LL;
    }
  }

  else
  {
    int v11 = (os_log_s *)logObjectForModule_28();
    BOOL v15 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0LL;
    if (v15)
    {
      __int16 v17 = 0;
      uint64_t v13 = "T56 Endpoint Destroy. NULL ppProtocolEndpoint!";
      uint64_t v14 = (uint8_t *)&v17;
      goto LABEL_11;
    }
  }

  return result;
}

uint64_t t56_endpoint_processIncomingData(uint64_t result, CFDataRef theData)
{
  if (result)
  {
    uint64_t v3 = (uint64_t *)result;
    uint64_t result = 0LL;
    if (theData)
    {
      if (v3[17])
      {
        unsigned int Length = CFDataGetLength(theData);
        if (Length > 1
          && (CFRetain(theData),
              unsigned int v5 = *CFDataGetBytePtr(theData),
              acc_platform_packetLogging_logT56Msg(*v3, theData, 1),
              t56_protocol_checkValidMessageHeaderAndSize(v3[17], v5, Length)))
        {
          uint64_t v6 = (dispatch_queue_s *)v3[4];
          block[0] = _NSConcreteStackBlock;
          block[1] = 0x40000000LL;
          block[2] = __t56_endpoint_processIncomingData_block_invoke;
          block[3] = &__block_descriptor_tmp_7_1;
          void block[4] = v3;
          void block[5] = theData;
          char v9 = v5;
          unsigned int v8 = Length;
          dispatch_async(v6, block);
          return 1LL;
        }

        else
        {
          CFRelease(theData);
          return 0LL;
        }
      }
    }
  }

  return result;
}

void __t56_endpoint_processIncomingData_block_invoke(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 40);
  if (!_t56_endpoint_handleMessage(*(void *)(a1 + 32), *(CFDataRef *)(a1 + 40)))
  {
    if (gLogObjects && gNumLogObjects >= 61)
    {
      uint64_t v3 = *(os_log_s **)(gLogObjects + 480);
    }

    else
    {
      uint64_t v3 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      __t56_endpoint_processIncomingData_block_invoke_cold_1(a1, v2, v3);
    }
  }

  if (*v2) {
    CFRelease((CFTypeRef)*v2);
  }
}

BOOL _t56_endpoint_handleMessage(uint64_t a1, CFDataRef theData)
{
  if (a1)
  {
    if (*(void *)(a1 + 248) && *(_WORD *)(a1 + 256))
    {
      uint64_t v3 = *(void *)(a1 + 136);
      BytePtr = (unsigned __int8 *)CFDataGetBytePtr(theData);
      unsigned __int16 Length = CFDataGetLength(theData);
      return t56_protocol_processIncomingData(v3, BytePtr, Length) < 2;
    }

    __int16 v7 = (os_log_s *)logObjectForModule_28();
    BOOL result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      _t56_endpoint_handleMessage_cold_2();
      return 0LL;
    }
  }

  else
  {
    unsigned int v8 = (os_log_s *)logObjectForModule_28();
    BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      mfi4Auth_endpoint_create_cold_1();
      return 0LL;
    }
  }

  return result;
}

uint64_t t56_endpoint_sendOutgoingData(uint64_t *a1, const UInt8 *a2, unsigned int a3)
{
  if (gLogObjects && gNumLogObjects >= 61)
  {
    uint64_t v6 = *(os_log_s **)(gLogObjects + 480);
  }

  else
  {
    uint64_t v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    t56_endpoint_sendOutgoingData_cold_3((uint64_t)a1, a3, v6);
    if (a2) {
      goto LABEL_9;
    }
LABEL_14:
    dispatch_time_t v10 = (os_log_s *)logObjectForModule_28();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      t56_endpoint_sendOutgoingData_cold_1();
    }
    return 0LL;
  }

  if (!a1)
  {
    int v11 = (os_log_s *)logObjectForModule_28();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_endpoint_create_cold_1();
    }
    return 0LL;
  }

  if (!a2) {
    goto LABEL_14;
  }
LABEL_9:
  if (!a3)
  {
    BOOL v12 = (os_log_s *)logObjectForModule_28();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      t56_endpoint_sendOutgoingData_cold_2();
    }
    return 0LL;
  }

  CFDataRef v7 = CFDataCreateWithBytesNoCopy(kCFAllocatorDefault, a2, a3, kCFAllocatorNull);
  uint64_t v8 = t56_endpoint_sendOutgoingDataCF(a1, v7);
  if (v7) {
    CFRelease(v7);
  }
  return v8;
}

uint64_t t56_endpoint_sendOutgoingDataCF(uint64_t *a1, void *a2)
{
  if (!a1)
  {
    int v11 = (os_log_s *)logObjectForModule_28();
    uint64_t result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result) {
      return result;
    }
    mfi4Auth_endpoint_create_cold_1();
    return 0LL;
  }

  if (!a2)
  {
    BOOL v12 = (os_log_s *)logObjectForModule_28();
    uint64_t result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result) {
      return result;
    }
    t56_endpoint_sendOutgoingDataCF_cold_2();
    return 0LL;
  }

  if (gLogObjects && gNumLogObjects >= 61)
  {
    int v4 = *(os_log_s **)(gLogObjects + 480);
  }

  else
  {
    int v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    t56_endpoint_sendOutgoingDataCF_cold_8();
  }
  if (!*a1)
  {
    uint64_t v13 = (os_log_s *)logObjectForModule_28();
    uint64_t result = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result) {
      return result;
    }
    t56_endpoint_sendOutgoingDataCF_cold_3();
    return 0LL;
  }

  acc_platform_packetLogging_logT56Msg(*a1, a2, 0);
  CFStringRef v5 = acc_endpoint_copyParentEndpointUUID(*a1);
  if (v5 && (EndpointWithUUID = acc_manager_getEndpointWithUUID(v5)) != 0LL)
  {
    uint64_t v7 = (uint64_t)EndpointWithUUID;
    if (gLogObjects && gNumLogObjects >= 61)
    {
      uint64_t v8 = *(os_log_s **)(gLogObjects + 480);
    }

    else
    {
      uint64_t v8 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      t56_endpoint_sendOutgoingDataCF_cold_6();
    }
    return acc_endpoint_processOutgoingSecureTunnelDataForClient(v7, 2, (CFDataRef)a2);
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 61)
    {
      char v9 = *(os_log_s **)(gLogObjects + 480);
    }

    else
    {
      char v9 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      t56_endpoint_sendOutgoingDataCF_cold_4((uint64_t)a2, v9);
    }
    return acc_endpoint_sendOutgoingData(*a1, (const __CFData *)a2);
  }

uint64_t iAP2PacketCreateTimeSyncPacket( uint64_t a1, char a2, char a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v9[0] = a2;
  v9[1] = HIBYTE(a5);
  _DWORD v9[2] = BYTE6(a5);
  v9[3] = BYTE5(a5);
  v9[4] = BYTE4(a5);
  v9[5] = BYTE3(a5);
  v9[6] = BYTE2(a5);
  v9[7] = BYTE1(a5);
  __int16 v9[8] = a5;
  v9[9] = HIBYTE(a6);
  v9[10] = BYTE6(a6);
  v9[11] = BYTE5(a6);
  v9[12] = BYTE4(a6);
  v9[13] = BYTE3(a6);
  v9[14] = BYTE2(a6);
  v9[15] = BYTE1(a6);
  uint8_t v9[16] = a6;
  v9[17] = HIBYTE(a7);
  v9[18] = BYTE6(a7);
  v9[19] = BYTE5(a7);
  v9[20] = BYTE4(a7);
  v9[21] = BYTE3(a7);
  v9[22] = BYTE2(a7);
  v9[23] = BYTE1(a7);
  v9[24] = a7;
  if (a4)
  {
    LOBYTE(a4) = *a4;
    char v7 = 68;
  }

  else
  {
    char v7 = 4;
  }

  return iAP2PacketCreate(a1, v7, a3, (char)a4, v9, 25, 0, 1);
}

uint64_t mfi4Auth_protocol_decryptIncomingData(uint64_t a1, int a2, uint64_t a3)
{
  if (!a1)
  {
    id v21 = logObjectForModule_29();
    CFStringRef v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_decryptIncomingData_cold_3();
    }
    goto LABEL_59;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v23 = logObjectForModule_29();
    CFStringRef v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_decryptIncomingData_cold_10();
    }
    goto LABEL_59;
  }

  if (!a3)
  {
    id v24 = logObjectForModule_29();
    CFStringRef v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_decryptIncomingData_cold_4();
    }
    goto LABEL_59;
  }

  if (*(_DWORD *)(a1 + 160))
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v6 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v6 = (os_log_s *)&_os_log_default;
      id v7 = &_os_log_default;
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v27[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "decryptIncomingData", (uint8_t *)v27, 2u);
    }

    int MsgID = iAP2MsgGetMsgID(a3);
    if (MsgID)
    {
      int v9 = MsgID;
      if (gLogObjects && gNumLogObjects >= 56)
      {
        dispatch_time_t v10 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        dispatch_time_t v10 = (os_log_s *)&_os_log_default;
        id v11 = &_os_log_default;
      }

      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v27[0] = 67109120;
        v27[1] = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "decryptIncomingData: rsp:0x%x",  (uint8_t *)v27,  8u);
      }

      if (v9 > 21091)
      {
      }

      else
      {
        uint64_t v12 = (v9 - 21011);
        if (v12 > 0x37)
        {
LABEL_36:
          if (v9 == 21010)
          {
            if (!a2) {
              goto LABEL_60;
            }
            uint64_t v13 = a1;
            uint64_t v14 = a3;
            unint64_t v15 = 3LL;
            unint64_t v16 = 4LL;
            goto LABEL_33;
          }

id logObjectForModule_29()
{
  if (gLogObjects && gNumLogObjects >= 56)
  {
    id v0 = *(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      logObjectForModule_cold_1_0();
    }
    id v0 = &_os_log_default;
    id v1 = &_os_log_default;
  }

  return v0;
}

uint64_t mfi4Auth_protocol_decryptPayload( uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, int a5)
{
  *(void *)&__int128 v40 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
  if (!a1)
  {
    id v32 = logObjectForModule_29();
    int v28 = (__CFString *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled((os_log_t)v28, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_decryptPayload_cold_1();
    }
    goto LABEL_62;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v33 = logObjectForModule_29();
    int v28 = (__CFString *)objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled((os_log_t)v28, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_decryptPayload_cold_9();
    }
    goto LABEL_62;
  }

  if (!a2)
  {
    id v34 = logObjectForModule_29();
    int v28 = (__CFString *)objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled((os_log_t)v28, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_decryptPayload_cold_2();
    }
LABEL_62:
    uint64_t v27 = 1LL;
    goto LABEL_54;
  }

  uint64_t MsgLen = iAP2MsgGetMsgLen(a2);
  uint64_t v10 = *(void *)(a2 + 24);
  size_t v11 = MsgLen - 22;
  uint64_t v12 = calloc(MsgLen - 22, 1uLL);
  if (!v12) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v13 = v12;
  __int128 v40 = *(_OWORD *)(v10 + 6 + MsgLen - 22);
  uint64_t v14 = _dumpSimpleHex((const __CFData *)+[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  v10 + 6,  v11));
  if (gLogObjects && gNumLogObjects >= 56)
  {
    unint64_t v15 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    unint64_t v15 = (os_log_s *)&_os_log_default;
    id v16 = &_os_log_default;
  }

  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    unint64_t v39 = (unint64_t)v14;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "decryptPayload: cyphertext: %@", buf, 0xCu);
  }

  uint64_t v17 = _dumpSimpleHex((const __CFData *)+[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  &v40,  16LL));
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v18 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v18 = (os_log_s *)&_os_log_default;
    id v19 = &_os_log_default;
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    unint64_t v39 = (unint64_t)v17;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "tag: %@", buf, 0xCu);
  }

  if (gLogObjects && gNumLogObjects >= 56)
  {
    id v20 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v20 = (os_log_s *)&_os_log_default;
    id v21 = &_os_log_default;
  }

  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    unint64_t v39 = a3;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "decryptPayload: key_index: %zu", buf, 0xCu);
  }

  if (gLogObjects && gNumLogObjects >= 56)
  {
    CFStringRef v22 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    CFStringRef v22 = (os_log_s *)&_os_log_default;
    id v23 = &_os_log_default;
  }

  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    int v24 = *(unsigned __int8 *)(a1 + 144);
    *(_DWORD *)buf = 67109120;
    LODWORD(v39) = v24;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "decryptPayload: negotiatedVersion: %d",  buf,  8u);
  }

  if (*(unsigned __int8 *)(a1 + 144) < 3u)
  {
    uint64_t v26 = ccsigma_open(*(uint64_t **)(a1 + 96), a3, a4, 0LL, 0LL, v11, v10 + 6, (uint64_t)v13, (uint64_t)&v40);
  }

  else
  {
    if (a5) {
      id v25 = **(uint64_t ***)(a1 + 712);
    }
    else {
      id v25 = *(uint64_t **)(a1 + 96);
    }
    uint64_t v26 = ccsigma_open(v25, a3, a4, 6LL, v10, v11, v10 + 6, (uint64_t)v13, (uint64_t)&v40);
  }

  uint64_t v27 = v26;
  int v28 = _dumpSimpleHex((const __CFData *)+[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  v13,  v11));

  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v29 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v29 = (os_log_s *)&_os_log_default;
    id v30 = &_os_log_default;
  }

  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    unint64_t v39 = (unint64_t)v28;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "decryptPayload: plainText: %@", buf, 0xCu);
  }

  if ((_DWORD)v27)
  {
    id v35 = logObjectForModule_29();
    int v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_decryptPayload_cold_3();
    }
  }

  else
  {
    memcpy((void *)(*(void *)(a2 + 24) + 6LL), v13, v11);
    *(_BYTE *)(*(void *)(a2 + 24) + 2LL) = (unsigned __int16)(MsgLen - 16) >> 8;
    *(_BYTE *)(*(void *)(a2 + 24) + 3LL) = MsgLen - 16;
  }

  free(v13);
LABEL_54:

  return v27;
}

uint64_t mfi4Auth_protocol_encryptOutgoingData(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    id v15 = logObjectForModule_29();
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_encryptOutgoingData_cold_1();
    }
    goto LABEL_49;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v16 = logObjectForModule_29();
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_encryptOutgoingData_cold_9();
    }
    goto LABEL_49;
  }

  if (!a2)
  {
    id v17 = logObjectForModule_29();
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_encryptOutgoingData_cold_2();
    }
    goto LABEL_49;
  }

  if (*(_DWORD *)(a1 + 160))
  {
    int MsgID = iAP2MsgGetMsgID(a2);
    if (!MsgID)
    {
      id v18 = logObjectForModule_29();
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_encryptOutgoingData_cold_3();
      }
      goto LABEL_49;
    }

    int v5 = MsgID;
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v6 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v6 = (os_log_s *)&_os_log_default;
      id v7 = &_os_log_default;
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = 67109120;
      int v21 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "encryptOutgoingData: cmd:0x%x",  (uint8_t *)&v20,  8u);
    }

    uint64_t v8 = (v5 - 20754);
    if (v8 <= 0x37)
    {
      if (v5 == 20754)
      {
        id v13 = logObjectForModule_29();
        uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
          goto LABEL_49;
        }
        goto LABEL_48;
      }

      if (v8 == 1)
      {
        id v11 = logObjectForModule_29();
        uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
          goto LABEL_49;
        }
        goto LABEL_48;
      }
    }

    if ((v5 - 20835) >= 2 && v5 != 20991)
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v12 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v12 = (os_log_s *)&_os_log_default;
        id v14 = &_os_log_default;
      }

      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int v20 = 67109120;
        int v21 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "encryptOutgoingData: no encrypting required: %x",  (uint8_t *)&v20,  8u);
      }

      uint64_t v9 = 1LL;
      goto LABEL_38;
    }

uint64_t mfi4Auth_protocol_encryptPayload( uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, int a5)
{
  *(void *)&__int128 v35 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v35 + 1) = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v9 = *(void *)(a2 + 24);
  unsigned int MsgLen = iAP2MsgGetMsgLen(a2);
  uint64_t v11 = MsgLen;
  *(_WORD *)(v9 + 2) = bswap32(MsgLen + 16) >> 16;
  uint64_t v12 = MsgLen - 6LL;
  id v13 = malloc(v12);
  if (!v13) {
    return 0xFFFFFFFFLL;
  }
  id v14 = v13;
  if (a1)
  {
    if (!*(_BYTE *)(a1 + 30))
    {
      unint64_t v32 = a3;
      id v15 = _dumpSimpleHex((const __CFData *)+[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  v9 + 6,  v12));
      if (gLogObjects && gNumLogObjects >= 56)
      {
        id v16 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v16 = (os_log_s *)&_os_log_default;
        id v17 = &_os_log_default;
      }

      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v34 = v15;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "encryptPayload: plaintext: %@", buf, 0xCu);
      }

      if (gLogObjects && gNumLogObjects >= 56)
      {
        id v18 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v18 = (os_log_s *)&_os_log_default;
        id v19 = &_os_log_default;
      }

      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        int v20 = *(unsigned __int8 *)(a1 + 144);
        *(_DWORD *)buf = 67109120;
        LODWORD(v34) = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "decryptPayload: negotiatedVersion: %d",  buf,  8u);
      }

      if (*(unsigned __int8 *)(a1 + 144) < 3u)
      {
        uint64_t v22 = ccsigma_seal(*(uint64_t **)(a1 + 96), v32, a4, 0LL, 0LL, v12, v9 + 6, (uint64_t)v14, (uint64_t)&v35);
      }

      else
      {
        if (a5) {
          int v21 = **(uint64_t ***)(a1 + 712);
        }
        else {
          int v21 = *(uint64_t **)(a1 + 96);
        }
        uint64_t v22 = ccsigma_seal(v21, v32, a4, 6LL, v9, v12, v9 + 6, (uint64_t)v14, (uint64_t)&v35);
      }

      uint64_t v23 = v22;
      if ((_DWORD)v22)
      {
        id v30 = logObjectForModule_29();
        int v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_protocol_encryptPayload_cold_3();
        }
      }

      else
      {
        memcpy((void *)(v9 + 6), v14, v12);
        *(_OWORD *)(v9 + v11) = v35;
        int v24 = _dumpSimpleHex((const __CFData *)+[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  v14,  v12));

        if (gLogObjects && gNumLogObjects >= 56)
        {
          id v25 = (os_log_s *)*(id *)(gLogObjects + 440);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          id v25 = (os_log_s *)&_os_log_default;
          id v26 = &_os_log_default;
        }

        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          id v34 = v24;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "encryptPayload: cyphertext: %@",  buf,  0xCu);
        }

        uint64_t v23 = 0LL;
        id v15 = v24;
      }

      goto LABEL_36;
    }

    id v29 = logObjectForModule_29();
    id v15 = (__CFString *)objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled((os_log_t)v15, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_encryptPayload_cold_6();
    }
  }

  else
  {
    id v28 = logObjectForModule_29();
    id v15 = (__CFString *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled((os_log_t)v15, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_encryptPayload_cold_1();
    }
  }

  uint64_t v23 = 1LL;
LABEL_36:

  free(v14);
  return v23;
}

uint64_t mfi4Auth_protocol_authSetupStart(uint64_t a1, uint64_t *a2)
{
  if (a1)
  {
    if (*(_BYTE *)(a1 + 30))
    {
      id v5 = logObjectForModule_29();
      int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_authSetupStart_cold_3();
      }
    }

    else
    {
      if (a2) {
        return mfi4Auth_protocol_initMessage_RequestAuthSetup(a1, a2);
      }
      id v6 = logObjectForModule_29();
      int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_authSetupStart_cold_2();
      }
    }
  }

  else
  {
    id v3 = logObjectForModule_29();
    int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_authSetupStart_cold_1();
    }
  }

  return 1LL;
}

uint64_t mfi4Auth_protocol_initMessage_RequestAuthSetup(uint64_t a1, uint64_t *a2)
{
  if (!a1)
  {
    id v8 = logObjectForModule_29();
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestAuthSetup_cold_1();
    }
    goto LABEL_18;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v10 = logObjectForModule_29();
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestAuthSetup_cold_3();
    }
    goto LABEL_18;
  }

  if (!a2)
  {
    id v11 = logObjectForModule_29();
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestAuthSetup_cold_2();
    }
LABEL_18:

    return 1LL;
  }

  int v4 = malloc(0x48uLL);
  *a2 = (uint64_t)v4;
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  iAP2MsgInitWithSom((uint64_t)v4, 0, 20736, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0LL, 0LL);
  iAP2MsgAddU8Param(*a2, 0LL, 0, *(_BYTE *)(a1 + 112));
  iAP2MsgAddU8Param(*a2, 0LL, 1, *(_BYTE *)(a1 + 113));
  iAP2MsgAddU8Param(*a2, 0LL, 2, 1);
  if (*(void *)(a1 + 120))
  {
    unint64_t v5 = 0LL;
    do
      iAP2MsgAddU8Param(*a2, 0LL, 3, *(_BYTE *)(a1 + 114 + v5++));
    while (*(void *)(a1 + 120) > v5);
  }

  if (*(void *)(a1 + 136))
  {
    unint64_t v6 = 0LL;
    do
      iAP2MsgAddU8Param(*a2, 0LL, 4, *(_BYTE *)(a1 + 128 + v6++));
    while (*(void *)(a1 + 136) > v6);
  }

  uint64_t result = 0LL;
  *(_WORD *)(a1 + 2_Block_object_dispose((const void *)(v1 - 96), 8) = 20736;
  return result;
}

void mfi4Auth_protocol_handleAuthSessionClose(uint64_t a1, int a2)
{
  if (gLogObjects && gNumLogObjects >= 56)
  {
    int v4 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v4 = (os_log_s *)&_os_log_default;
    id v5 = &_os_log_default;
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v22 = 136315650;
    uint64_t v23 = (uint64_t)"mfi4Auth_protocol_handleAuthSessionClose";
    __int16 v24 = 1024;
    BOOL v25 = a1 != 0;
    __int16 v26 = 1024;
    int v27 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s: authSession(%d), keepOpen %d",  (uint8_t *)&v22,  0x18u);
  }

  if (a1)
  {
    if (*(_BYTE *)(a1 + 30))
    {
      id v17 = logObjectForModule_29();
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_handleAuthSessionClose_cold_6();
      }
    }

    else
    {
      CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, *(CFStringRef *)a1);
      if (Copy)
      {
        CFStringRef v7 = Copy;
        EndpointWithUUID = (pthread_mutex_t *)acc_manager_getEndpointWithUUID(Copy);
        if (EndpointWithUUID)
        {
          uint64_t v9 = EndpointWithUUID;
          uint64_t v10 = *(void *)&EndpointWithUUID->__opaque[48];
          if (v10)
          {
            if (acc_endpoint_getTransportType(*(void *)v10) == 13)
            {
              if (a2)
              {
                if (gLogObjects && gNumLogObjects >= 56)
                {
                  id v11 = (os_log_s *)*(id *)(gLogObjects + 440);
                }

                else
                {
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                  id v11 = (os_log_s *)&_os_log_default;
                  id v12 = &_os_log_default;
                }

                if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
                {
                  int v22 = 134217984;
                  uint64_t v23 = 10LL;
                  _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_handleAuthSessionClose: Keep session open for %llds",  (uint8_t *)&v22,  0xCu);
                }

                id v13 = *(dispatch_source_s **)(v10 + 32);
                dispatch_time_t v14 = dispatch_time(0LL, 10000000000LL);
                dispatch_source_set_timer(v13, v14, 0xFFFFFFFFFFFFFFFFLL, 0LL);
              }

              else
              {
                dispatch_source_set_timer( *(dispatch_source_t *)(v10 + 32),  0xFFFFFFFFFFFFFFFFLL,  0xFFFFFFFFFFFFFFFFLL,  0LL);
                acc_endpoint_setProperty(v9, kCFACCProperties_Endpoint_NFC_RequestSessionOpen, kCFBooleanFalse);
              }
            }

            goto LABEL_26;
          }

          id v21 = logObjectForModule_29();
          int v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handleAuthSessionClose_cold_4();
          }
        }

        else
        {
          id v19 = logObjectForModule_29();
          int v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handleAuthSessionClose_cold_3();
          }
        }

LABEL_26:
        CFRelease(v7);
        return;
      }

      id v18 = logObjectForModule_29();
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_handleAuthSessionClose_cold_2();
      }
    }
  }

  else
  {
    id v15 = logObjectForModule_29();
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handleAuthSessionClose_cold_1();
    }
  }
}

uint64_t mfi4Auth_protocol_handle_AuthSetup(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v75 = 1;
  if (!a1)
  {
    id v67 = logObjectForModule_29();
    id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthSetup_cold_1();
    }
LABEL_69:

    if (!v75) {
      return 0LL;
    }
    goto LABEL_70;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v68 = logObjectForModule_29();
    id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v68);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthSetup_cold_21();
    }
    goto LABEL_69;
  }

  if (!a2)
  {
    id v69 = logObjectForModule_29();
    id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v69);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthSetup_cold_2();
    }
    goto LABEL_69;
  }

  char v74 = 0;
  *(_WORD *)(a1 + 145) = 0;
  *(_BYTE *)(a1 + 147) = 0;
  *(void *)(a1 + 152) = 0LL;
  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0LL);
  int v6 = 0;
  CFStringRef v7 = (unsigned int *)(a1 + 160);
  id v8 = (_BYTE *)(a1 + 144);
  while (FirstParam)
  {
    switch(iAP2MsgGetParamID((uint64_t)FirstParam))
    {
      case 0u:
        unsigned int DataAsU8 = iAP2MsgGetDataAsU8(FirstParam, &v75);
        *id v8 = DataAsU8;
        if (v75)
        {
          id v45 = logObjectForModule_29();
          id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_AuthSetup_cold_11();
          }
        }

        else
        {
          if (*(unsigned __int8 *)(a1 + 112) <= DataAsU8 && DataAsU8 <= *(unsigned __int8 *)(a1 + 113))
          {
            v6 |= 1u;
            goto LABEL_25;
          }

          unsigned int v75 = -1;
          if (gLogObjects && gNumLogObjects >= 56)
          {
            id v34 = (os_log_s *)*(id *)(gLogObjects + 440);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            id v34 = (os_log_s *)&_os_log_default;
            id v38 = &_os_log_default;
          }

          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_AuthSetup_cold_9((uint64_t)v8, v34, v39, v40, v41, v42, v43, v44);
          }
        }

        goto LABEL_69;
      case 1u:
        unsigned int v10 = iAP2MsgGetDataAsU8(FirstParam, &v75);
        *CFStringRef v7 = v10;
        if (v75)
        {
          id v46 = logObjectForModule_29();
          id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_AuthSetup_cold_13();
          }
          goto LABEL_69;
        }

        if (v10 >= 4)
        {
          unsigned int v75 = -1;
          id v51 = logObjectForModule_29();
          id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_AuthSetup_cold_12(a1 + 160, v34, v52, v53, v54, v55, v56, v57);
          }
          goto LABEL_69;
        }

        v6 |= 2u;
        goto LABEL_25;
      case 2u:
        uint64_t v11 = iAP2MsgGetDataAsU8(FirstParam, &v75);
        if (v75)
        {
          id v47 = logObjectForModule_29();
          id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_AuthSetup_cold_15();
          }
          goto LABEL_69;
        }

        uint64_t v12 = v11;
        if ((_DWORD)v11)
        {
          unsigned int v75 = -1;
          id v58 = logObjectForModule_29();
          id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_AuthSetup_cold_14(v12, v34, v59, v60, v61, v62, v63, v64);
          }
          goto LABEL_69;
        }

        v6 |= 4u;
        goto LABEL_25;
      case 3u:
        *(_WORD *)(a1 + 202) = iAP2MsgGetDataAsU16(FirstParam, &v75);
        if (v75)
        {
          id v48 = logObjectForModule_29();
          id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_AuthSetup_cold_16();
          }
          goto LABEL_69;
        }

        v6 |= 8u;
        goto LABEL_25;
      case 4u:
        int DataAsArrayU8 = iAP2MsgGetDataAsArrayU8(FirstParam, &v75, (void *)(a1 + 206), 33);
        if (v75)
        {
          id v49 = logObjectForModule_29();
          id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_AuthSetup_cold_18();
          }
          goto LABEL_69;
        }

        if (DataAsArrayU8 != 33)
        {
          unsigned int v75 = -1;
          id v65 = logObjectForModule_29();
          id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_AuthSetup_cold_17();
          }
          goto LABEL_69;
        }

        v6 |= 0x10u;
        goto LABEL_25;
      case 5u:
        char v14 = iAP2MsgGetDataAsU8(FirstParam, &v75);
        if (v75)
        {
          id v50 = logObjectForModule_29();
          id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_AuthSetup_cold_20();
          }
          goto LABEL_69;
        }

        unint64_t v15 = *(void *)(a1 + 152);
        if (v15 >= 3)
        {
          unsigned int v75 = -1;
          id v66 = logObjectForModule_29();
          id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_AuthSetup_cold_19();
          }
          goto LABEL_69;
        }

        *(_BYTE *)(a1 + v15 + 145) = v14;
        ++*(void *)(a1 + 152);
        v6 |= 0x20u;
LABEL_25:
        unint64_t FirstParam = iAP2MsgGetNextParamWithError(a2, 0LL, FirstParam, &v74);
        if (v74) {
          goto LABEL_26;
        }
        break;
      default:
        goto LABEL_25;
    }
  }

  if ((~v6 & 7) != 0)
  {
LABEL_26:
    unsigned int v75 = -1;
LABEL_70:
    mfi4Auth_protocol_handle_AuthState(a1, 1);
    return v75;
  }

  if (gLogObjects && gNumLogObjects >= 56)
  {
    id v16 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v16 = (os_log_s *)&_os_log_default;
    id v17 = &_os_log_default;
  }

  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v18 = *v7;
    *(_DWORD *)buf = 67109120;
    unsigned int v77 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_handle_AuthSetup: authType:%x",  buf,  8u);
  }

  unsigned int v19 = *v7;
  if (*v7 == 2)
  {
    if ((~v6 & 0x18) != 0)
    {
      unsigned int v75 = -1;
      id v70 = logObjectForModule_29();
      id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_handle_AuthSetup_cold_7();
      }
    }

    else
    {
      do
      {
        __int16 v21 = arc4random();
        *(_WORD *)(a1 + 204) = v21;
        unsigned __int16 v22 = *(_WORD *)(a1 + 202) ^ v21;
        *(_WORD *)(a1 + 200) = v22;
        if (v22) {
          BOOL v23 = v22 == 0xFFFF;
        }
        else {
          BOOL v23 = 1;
        }
      }

      while (v23);
      size_t v24 = *(void *)(a1 + 120);
      size_t v25 = *(void *)(a1 + 136);
      size_t v26 = v24 + v25;
      size_t v27 = *(void *)(a1 + 152);
      uint64_t v28 = v24 + v25 + 3;
      id v29 = malloc(v28 + v27);
      if (v29)
      {
        id v30 = v29;
        *id v29 = *(_BYTE *)(a1 + 113);
        memcpy(v29 + 1, (const void *)(a1 + 114), v24);
        size_t v31 = v24 + 1;
        memcpy(&v30[v31], (const void *)(a1 + 128), v25);
        v30[v25 + v31] = *(_BYTE *)(a1 + 144);
        v30[v26 + 2] = *(_DWORD *)(a1 + 160);
        memcpy(&v30[v28], (const void *)(a1 + 145), v27);
        unsigned int inited = mfi4Auth_protocol_initSigmaContext(a1, (uint64_t)v30, v28 + v27);
        unsigned int v75 = inited;
        free(v30);
        if (inited)
        {
          id v72 = logObjectForModule_29();
          id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v72);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_AuthSetup_cold_6();
          }
        }

        else
        {
          uint64_t result = mfi4Auth_protocol_initMessage_AuthStart(a1, a3);
          unsigned int v75 = result;
          if (!(_DWORD)result) {
            return result;
          }
          id v33 = logObjectForModule_29();
          id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_AuthSetup_cold_5();
          }
        }
      }

      else
      {
        unsigned int v75 = -1;
        id v71 = logObjectForModule_29();
        id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v71);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_protocol_handle_AuthSetup_cold_4();
        }
      }
    }

    goto LABEL_69;
  }

  if (v19 != 1)
  {
    if (!v19)
    {
      *(_OWORD *)(a1 + 56_Block_object_dispose((const void *)(v1 - 96), 8) = 0u;
      arc4random_buf((void *)(a1 + 568), 0x10uLL);
      mfi4Auth_protocol_initMessage_RequestAuthChallengeResponse(a1, a3);
    }

    return 0LL;
  }

  unsigned __int16 v35 = 0;
  *(_BYTE *)(a1 + 23_Block_object_dispose((const void *)(v1 - 96), 8) = 0;
  *(_OWORD *)(a1 + 206) = 0u;
  *(_OWORD *)(a1 + 222) = 0u;
  while (1)
  {
    *(_WORD *)(a1 + 202) = v35;
    if (v35 != 0xFFFF && v35 != 0) {
      break;
    }
    unsigned __int16 v35 = arc4random();
  }

  uint64_t result = mfi4Auth_protocol_initMessage_RequestAuthStart(a1, a3);
  unsigned int v75 = result;
  if ((_DWORD)result)
  {
    id v37 = logObjectForModule_29();
    id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthSetup_cold_3();
    }
    goto LABEL_69;
  }

  return result;
}

uint64_t mfi4Auth_protocol_initMessage_RequestAuthChallengeResponse(uint64_t a1, uint64_t *a2)
{
  if (!a1)
  {
    id v8 = logObjectForModule_29();
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestAuthChallengeResponse_cold_1();
    }
    goto LABEL_18;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v10 = logObjectForModule_29();
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestAuthChallengeResponse_cold_4();
    }
    goto LABEL_18;
  }

  if (!a2)
  {
    id v11 = logObjectForModule_29();
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestAuthChallengeResponse_cold_2();
    }
    goto LABEL_18;
  }

  if (*(_DWORD *)(a1 + 160))
  {
    id v12 = logObjectForModule_29();
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestAuthChallengeResponse_cold_3();
    }
LABEL_18:

    return 1LL;
  }

  int v4 = malloc(0x48uLL);
  *a2 = (uint64_t)v4;
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  int v5 = *(unsigned __int8 *)(a1 + 144);
  iAP2MsgInitWithSom((uint64_t)v4, 0, 20757, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0LL, 0LL);
  if (v5 == 2) {
    unsigned int v6 = 33;
  }
  else {
    unsigned int v6 = 16;
  }
  iAP2MsgAddArrayU8Param(*a2, 0LL, 0, a1 + 568, v6);
  uint64_t result = 0LL;
  *(_WORD *)(a1 + 2_Block_object_dispose((const void *)(v1 - 96), 8) = 20757;
  return result;
}

uint64_t mfi4Auth_protocol_initMessage_RequestAuthStart(uint64_t a1, uint64_t *a2)
{
  if (!a1)
  {
    id v6 = logObjectForModule_29();
    CFStringRef v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestAuthStart_cold_1();
    }
    goto LABEL_12;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v8 = logObjectForModule_29();
    CFStringRef v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestAuthStart_cold_3();
    }
    goto LABEL_12;
  }

  if (!a2)
  {
    id v9 = logObjectForModule_29();
    CFStringRef v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestAuthStart_cold_2();
    }
LABEL_12:

    return 1LL;
  }

  int v4 = malloc(0x48uLL);
  *a2 = (uint64_t)v4;
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  iAP2MsgInitWithSom((uint64_t)v4, 0, 20752, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0LL, 0LL);
  iAP2MsgAddU16Param(*a2, 0LL, 0, *(unsigned __int16 *)(a1 + 202));
  iAP2MsgAddArrayU8Param(*a2, 0LL, 1, a1 + 206, 0x21u);
  uint64_t result = 0LL;
  *(_WORD *)(a1 + 2_Block_object_dispose((const void *)(v1 - 96), 8) = 20752;
  return result;
}

uint64_t mfi4Auth_protocol_initSigmaContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = ccsigma_mfi_info();
  rsize_t v68 = 33LL;
  if (gLogObjects && gNumLogObjects >= 56)
  {
    CFStringRef v7 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    CFStringRef v7 = (os_log_s *)&_os_log_default;
    id v8 = &_os_log_default;
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "mfi4Auth_protocol_initSigmaContext", buf, 2u);
  }

  if (!a1)
  {
    id v59 = logObjectForModule_29();
    unint64_t v32 = (__CFString *)objc_claimAutoreleasedReturnValue(v59);
    if (os_log_type_enabled((os_log_t)v32, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initSigmaContext_cold_1();
    }
    goto LABEL_155;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v60 = logObjectForModule_29();
    unint64_t v32 = (__CFString *)objc_claimAutoreleasedReturnValue(v60);
    if (os_log_type_enabled((os_log_t)v32, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initSigmaContext_cold_27();
    }
    goto LABEL_155;
  }

  if (!a2)
  {
    id v61 = logObjectForModule_29();
    unint64_t v32 = (__CFString *)objc_claimAutoreleasedReturnValue(v61);
    if (os_log_type_enabled((os_log_t)v32, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initSigmaContext_cold_2();
    }
    goto LABEL_155;
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[ACCUserDefaults sharedDefaults](&OBJC_CLASS___ACCUserDefaults, "sharedDefaults"));
  unsigned int v10 = [v9 BOOLForKey:@"AllowMFi4DevCertsOnProdDevice"];

  int v11 = MFAAIsDevelopmentHW();
  char v12 = *(_BYTE *)(a1 + 88);
  if ((v12 & 1 | 2) == 2)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      id v13 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v13 = (os_log_s *)&_os_log_default;
      id v15 = &_os_log_default;
    }

    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_initSigmaContext: try prod identity",  buf,  2u);
    }

    *(_BYTE *)(a1 + 8_Block_object_dispose((const void *)(v1 - 96), 8) = *(_BYTE *)(a1 + 88) & 0xFC | 1;
LABEL_36:
    int v18 = 1;
    goto LABEL_37;
  }

  if ((v11 | v10) != 1 || (v12 & 4 | 8) != 8)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      id v16 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v16 = (os_log_s *)&_os_log_default;
      id v17 = &_os_log_default;
    }

    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initSigmaContext_cold_23();
    }

    goto LABEL_36;
  }

  if (gLogObjects && gNumLogObjects >= 56)
  {
    char v14 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    char v14 = (os_log_s *)&_os_log_default;
    id v58 = &_os_log_default;
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_initSigmaContext: try dev identity",  buf,  2u);
  }

  int v18 = 0;
  *(_BYTE *)(a1 + 8_Block_object_dispose((const void *)(v1 - 96), 8) = *(_BYTE *)(a1 + 88) & 0xF3 | 4;
LABEL_37:
  uint64_t inited = mfi4Auth_protocol_initIdentity(a1, v18);
  if ((_DWORD)inited)
  {
    uint64_t v30 = inited;
    id v62 = logObjectForModule_29();
    unint64_t v32 = (__CFString *)objc_claimAutoreleasedReturnValue(v62);
    if (os_log_type_enabled((os_log_t)v32, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initSigmaContext_cold_22();
    }
    goto LABEL_121;
  }

  int v20 = malloc(0x2F0uLL);
  *(void *)(a1 + 96) = v20;
  if (!v20)
  {
    id v63 = logObjectForModule_29();
    unint64_t v32 = (__CFString *)objc_claimAutoreleasedReturnValue(v63);
    if (os_log_type_enabled((os_log_t)v32, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initSigmaContext_cold_3();
    }
    goto LABEL_155;
  }

  __int16 v21 = ccrng(0LL);
  *(void *)(a1 + 104) = v21;
  if (!v21)
  {
    id v64 = logObjectForModule_29();
    unint64_t v32 = (__CFString *)objc_claimAutoreleasedReturnValue(v64);
    if (os_log_type_enabled((os_log_t)v32, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initSigmaContext_cold_4();
    }
LABEL_155:
    uint64_t v30 = 0xFFFFFFFFLL;
    goto LABEL_121;
  }

  unsigned __int16 v22 = *(unint64_t ****)(a1 + 96);
  uint64_t v23 = ccsigma_init((uint64_t)v6, (uint64_t)v22, 1, (uint64_t (**)(void, uint64_t, uint64_t *))v21);
  if ((_DWORD)v23)
  {
    uint64_t v30 = v23;
    id v65 = logObjectForModule_29();
    unint64_t v32 = (__CFString *)objc_claimAutoreleasedReturnValue(v65);
    if (os_log_type_enabled((os_log_t)v32, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initSigmaContext_cold_21();
    }
    goto LABEL_121;
  }

  if (*(void *)(a1 + 376))
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      size_t v24 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      size_t v24 = (os_log_s *)&_os_log_default;
      id v28 = &_os_log_default;
    }

    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "initSigmaContext: ccsigma_import_signing_key",  buf,  2u);
    }

    uint64_t v29 = ccsigma_import_signing_key(v22, *(void *)(a1 + 384), *(unsigned __int8 **)(a1 + 376));
    if ((_DWORD)v29)
    {
      uint64_t v30 = v29;
      id v31 = logObjectForModule_29();
      unint64_t v32 = (__CFString *)objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled((os_log_t)v32, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_initSigmaContext_cold_19();
      }
      goto LABEL_121;
    }
  }

  else
  {
    if (gLogObjects) {
      BOOL v25 = gNumLogObjects <= 55;
    }
    else {
      BOOL v25 = 1;
    }
    int v26 = !v25;
    if (*(void *)(a1 + 392))
    {
      if (v26)
      {
        size_t v27 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        size_t v27 = (os_log_s *)&_os_log_default;
        id v34 = &_os_log_default;
      }

      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "initSigmaContext: ccsigma_set_signing_function",  buf,  2u);
      }

      if (ccsigma_set_signing_function((uint64_t)v22, (uint64_t)seckey_sign, *(void *)(a1 + 392)))
      {
        id v35 = logObjectForModule_29();
        unint64_t v32 = (__CFString *)objc_claimAutoreleasedReturnValue(v35);
        if (os_log_type_enabled((os_log_t)v32, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_protocol_initSigmaContext_cold_17();
        }
        uint64_t v30 = 0LL;
        goto LABEL_121;
      }
    }

    else
    {
      if (v26)
      {
        id v33 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v33 = (os_log_s *)&_os_log_default;
        id v36 = &_os_log_default;
      }

      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_initSigmaContext_cold_15();
      }
    }
  }

  uint64_t v37 = a1 + 206;
  uint64_t v38 = ccsigma_import_peer_key_share(v22, 33LL, (unsigned __int8 *)(a1 + 206));
  if ((_DWORD)v38)
  {
    uint64_t v30 = v38;
    id v66 = logObjectForModule_29();
    unint64_t v32 = (__CFString *)objc_claimAutoreleasedReturnValue(v66);
    if (os_log_type_enabled((os_log_t)v32, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initSigmaContext_cold_14();
    }
    goto LABEL_121;
  }

  uint64_t v39 = ccsigma_derive_session_keys( (uint64_t **)v22,  a3,  a2,  *(uint64_t (***)(void, uint64_t, uint64_t *))(a1 + 104));
  if ((_DWORD)v39)
  {
    uint64_t v30 = v39;
    id v67 = logObjectForModule_29();
    unint64_t v32 = (__CFString *)objc_claimAutoreleasedReturnValue(v67);
    if (os_log_type_enabled((os_log_t)v32, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initSigmaContext_cold_13();
    }
    goto LABEL_121;
  }

  uint64_t v40 = malloc(*(void *)(a1 + 352) + 16LL);
  if (!v40) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v41 = v40;
  arc4random_buf((void *)(a1 + 272), 0x10uLL);
  _OWORD *v41 = *(_OWORD *)(a1 + 272);
  size_t v42 = *(void *)(a1 + 352);
  memcpy(v41 + 1, *(const void **)(a1 + 344), v42);
  CC_SHA256(v41, v42 + 16, (unsigned __int8 *)(a1 + 308));
  unint64_t v32 = _dumpSimpleHex((const __CFData *)+[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  a1 + 308,  32LL));
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v43 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v43 = (os_log_s *)&_os_log_default;
    id v44 = &_os_log_default;
  }

  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v70 = v32;
    _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "initSigmaContext: cert_hash_resp: %@",  buf,  0xCu);
  }

  id v45 = (char *)(a1 + 239);
  uint64_t v30 = ccsigma_export_key_share((uint64_t **)v22, &v68, v45);
  if ((_DWORD)v30)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      id v46 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v46 = (os_log_s *)&_os_log_default;
      id v49 = &_os_log_default;
    }

    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initSigmaContext_cold_10();
    }
  }

  else
  {
    if (v68 == 33)
    {
      id v47 = _dumpSimpleHex((const __CFData *)+[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  a2,  a3));

      if (gLogObjects && gNumLogObjects >= 56)
      {
        id v48 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v48 = (os_log_s *)&_os_log_default;
        id v50 = &_os_log_default;
      }

      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v70 = v47;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "negoTrans %@", buf, 0xCu);
      }

      id v51 = _dumpSimpleHex((const __CFData *)+[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  v37,  33LL));
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v52 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v52 = (os_log_s *)&_os_log_default;
        id v55 = &_os_log_default;
      }

      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v70 = v51;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "dhPublicKeyInitiator %@", buf, 0xCu);
      }

      unint64_t v32 = _dumpSimpleHex((const __CFData *)+[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  v45,  33LL));
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v56 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v56 = (os_log_s *)&_os_log_default;
        id v57 = &_os_log_default;
      }

      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v70 = v32;
        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "dhPublicKeyResponder %@", buf, 0xCu);
      }

      printSessionKeys((uint64_t)v22, 0);
      goto LABEL_120;
    }

    if (gLogObjects && gNumLogObjects >= 56)
    {
      id v46 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v46 = (os_log_s *)&_os_log_default;
      id v53 = &_os_log_default;
    }

    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initSigmaContext_cold_8();
    }
  }

LABEL_120:
  free(v41);
LABEL_121:

  return v30;
}

uint64_t mfi4Auth_protocol_initMessage_AuthStart(uint64_t a1, uint64_t *a2)
{
  if (!a1)
  {
    id v12 = logObjectForModule_29();
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_AuthStart_cold_3();
    }
    goto LABEL_15;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v14 = logObjectForModule_29();
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_AuthStart_cold_7();
    }
    goto LABEL_15;
  }

  if (!a2)
  {
    id v15 = logObjectForModule_29();
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_AuthStart_cold_4();
    }
LABEL_15:
    uint64_t v10 = 1LL;
LABEL_20:

    goto LABEL_21;
  }

  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v28 = v4;
  __int128 v29 = v4;
  __int128 v30 = v4;
  __int128 v31 = v4;
  __int128 v32 = v4;
  __int128 v33 = v4;
  __int128 v22 = v4;
  __int128 v23 = v4;
  __int128 v24 = v4;
  __int128 v25 = v4;
  __int128 v26 = v4;
  __int128 v27 = v4;
  *(void *)&__int128 v21 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
  int v5 = *(uint64_t **)(a1 + 96);
  uint64_t v6 = ccsigma_sign(v5, (uint64_t)&v34, 32LL, a1 + 308, *(void *)(a1 + 104));
  if ((_DWORD)v6)
  {
    uint64_t v10 = v6;
    id v16 = logObjectForModule_29();
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_AuthStart_cold_6();
    }
    goto LABEL_20;
  }

  __int128 v7 = *(_OWORD *)(a1 + 324);
  __int128 v28 = *(_OWORD *)(a1 + 308);
  __int128 v29 = v7;
  __int128 v30 = v34;
  __int128 v31 = v35;
  __int128 v32 = v36;
  __int128 v33 = v37;
  uint64_t v8 = ccsigma_seal(v5, 0LL, 1uLL, 0LL, 0LL, 96LL, (uint64_t)&v28, (uint64_t)&v22, (uint64_t)&v21);
  if ((_DWORD)v8)
  {
    uint64_t v10 = v8;
    id v17 = logObjectForModule_29();
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_AuthStart_cold_5();
    }
    goto LABEL_20;
  }

  _DWORD v20[2] = v24;
  v20[3] = v25;
  v20[4] = v26;
  v20[5] = v27;
  v20[0] = v22;
  v20[1] = v23;
  v20[6] = v21;
  id v9 = malloc(0x48uLL);
  *a2 = (uint64_t)v9;
  if (v9)
  {
    iAP2MsgInitWithSom((uint64_t)v9, 0, 20753, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0LL, 0LL);
    iAP2MsgAddU16Param(*a2, 0LL, 0, *(unsigned __int16 *)(a1 + 204));
    iAP2MsgAddArrayU8Param(*a2, 0LL, 1, a1 + 239, 0x21u);
    iAP2MsgAddArrayU8Param(*a2, 0LL, 2, (uint64_t)v20, 0x70u);
    uint64_t v10 = 0LL;
    *(_WORD *)(a1 + 2_Block_object_dispose((const void *)(v1 - 96), 8) = 20753;
    return v10;
  }

  uint64_t v10 = 0xFFFFFFFFLL;
LABEL_21:
  if (gLogObjects && gNumLogObjects >= 56)
  {
    int v18 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v18 = (os_log_s *)&_os_log_default;
    id v19 = &_os_log_default;
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
    mfi4Auth_protocol_initMessage_AuthStart_cold_1();
  }

  return v10;
}

void mfi4Auth_protocol_handle_AuthState(uint64_t a1, int a2)
{
  if (!a1)
  {
    id v30 = logObjectForModule_29();
    __int128 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthState_cold_1();
    }
    goto LABEL_50;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v32 = logObjectForModule_29();
    __int128 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthState_cold_4();
    }
LABEL_50:

    return;
  }

  if (*(void *)a1)
  {
    CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, *(CFStringRef *)a1);
    if (Copy)
    {
      CFStringRef v5 = Copy;
      EndpointWithUUID = acc_manager_getEndpointWithUUID(Copy);
      if (!EndpointWithUUID)
      {
        CFRelease(v5);
        return;
      }

      id v12 = EndpointWithUUID;
      switch(a2)
      {
        case 1:
          id v13 = "AUTH FAILED";
          id v14 = "MFi4Auth accessory authentication Failed!";
          break;
        case 3:
          id v13 = "AUTH TIMEOUT";
          id v14 = "MFi4Auth accessory authentication Timed Out!";
          break;
        case 2:
          id v13 = "AUTH PASSED";
          id v14 = "MFi4Auth accessory authentication Passed!";
          break;
        default:
          if (gLogObjects && gNumLogObjects >= 56)
          {
            id v15 = (os_log_s *)*(id *)(gLogObjects + 440);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            id v15 = (os_log_s *)&_os_log_default;
            id v16 = &_os_log_default;
          }

          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_AuthState_cold_2();
          }

LABEL_22:
          CFDataRef v17 = CFDataCreate(kCFAllocatorDefault, *(const UInt8 **)(a1 + 440), *(void *)(a1 + 448));
          acc_connection_setAuthCertData(*(void *)v12, v17);
          acc_connection_setAuthStatus(*(void *)v12, 1LL, a2);
          if (a2 == 2)
          {
            if (*((_DWORD *)v12 + 6) == 4)
            {
              int v18 = (const __CFData *)acc_properties_copyProperty( *((const __CFDictionary **)v12 + 10),  kCFACCProperties_Endpoint_MFi4Auth_AccessoryCertInfoToMatch);
              if (!v18)
              {
                __int128 v24 = (const __CFData *)v5;
                goto LABEL_36;
              }

              id v19 = v18;
              if (*(_DWORD *)(a1 + 400) == 3)
              {
                BytePtr = (unint64_t *)CFDataGetBytePtr(v18);
                unint64_t v21 = bswap64(*BytePtr);
                unint64_t v22 = bswap64(*(void *)(a1 + 404));
                if (v21 == v22
                  && (unint64_t v21 = bswap64(BytePtr[1]), v22 = bswap64(*(void *)(a1 + 412)), v21 == v22)
                  && (unint64_t v21 = bswap64(BytePtr[2]), v22 = bswap64(*(void *)(a1 + 420)), v21 == v22)
                  && (unint64_t v21 = bswap64(BytePtr[3]), v22 = bswap64(*(void *)(a1 + 428)), v21 == v22))
                {
                  int v23 = 0;
                }

                else if (v21 < v22)
                {
                  int v23 = -1;
                }

                else
                {
                  int v23 = 1;
                }
              }

              else
              {
                uint64_t v25 = MFAACreateCertificateSerialNumber(v17);
                if (!v25) {
                  goto LABEL_52;
                }
                __int128 v26 = (const __CFData *)v25;
                __int128 v27 = CFDataGetBytePtr(v19);
                __int128 v28 = CFDataGetBytePtr(v26);
                size_t Length = CFDataGetLength(v26);
                int v23 = memcmp(v27, v28, Length);
                CFRelease(v26);
              }

              if (!v23)
              {
                acc_connection_setProperty( *(void *)v12,  kCFACCProperties_Connection_MFi4Auth_AccessoryCertInfoToMatch,  v19);
                if (!v17)
                {
LABEL_34:
                  CFRelease(v5);
                  if (!v19) {
                    return;
                  }
                  goto LABEL_35;
                }

uint64_t mfi4Auth_protocol_handle_AuthSetupFailed(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    id v3 = logObjectForModule_29();
    __int128 v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthSetupFailed_cold_1();
    }
    goto LABEL_12;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v5 = logObjectForModule_29();
    __int128 v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthSetupFailed_cold_3();
    }
    goto LABEL_12;
  }

  if (!a2)
  {
    id v6 = logObjectForModule_29();
    __int128 v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthSetupFailed_cold_2();
    }
LABEL_12:

    return 0LL;
  }

  mfi4Auth_protocol_handle_AuthState(a1, 1);
  return 0LL;
}

uint64_t mfi4Auth_protocol_handle_AuthStart(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (*(_BYTE *)(a1 + 30))
    {
      id v5 = logObjectForModule_29();
      __int128 v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_initMessage_AuthStart_cold_7();
      }
    }

    else
    {
      if (a2) {
        return 0LL;
      }
      id v6 = logObjectForModule_29();
      __int128 v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_handle_AuthStart_cold_2();
      }
    }
  }

  else
  {
    id v3 = logObjectForModule_29();
    __int128 v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_AuthStart_cold_3();
    }
  }

  return 1LL;
}

uint64_t mfi4Auth_protocol_handle_RequestAuthCert(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = a1;
  unsigned int inited = 1;
  char v38 = 0;
  if (!a1)
  {
    id v32 = logObjectForModule_29();
    uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_RequestAuthCert_cold_1();
    }
    goto LABEL_78;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v34 = logObjectForModule_29();
    uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_RequestAuthCert_cold_6();
    }
    goto LABEL_78;
  }

  if (!a2)
  {
    id v35 = logObjectForModule_29();
    uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_RequestAuthCert_cold_2();
    }
LABEL_78:

    int v18 = 0LL;
    goto LABEL_67;
  }

  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
  uint64_t v37 = v3;
  if (!FirstParam)
  {
    LOBYTE(v7) = 0;
LABEL_48:
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v25 = (os_log_s *)*(id *)(gLogObjects + 440);
      uint64_t v3 = v37;
    }

    else
    {
      uint64_t v3 = v37;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v25 = (os_log_s *)&_os_log_default;
      id v26 = &_os_log_default;
    }

    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
      mfi4Auth_protocol_handle_RequestAuthCert_cold_3(v7, v25);
    }

    if ((v7 - 3) <= 0xFDu)
    {
      int v18 = 0LL;
      unsigned int inited = -1;
    }

    else
    {
      else {
        int v27 = 4;
      }
      int v18 = 0LL;
      unsigned int inited = mfi4Auth_protocol_initMessage_AuthCert(v3, a3, v27);
      if (!inited) {
        goto LABEL_62;
      }
    }

    goto LABEL_61;
  }

  id v6 = (unsigned __int16 *)FirstParam;
  int v7 = 0;
  uint64_t v8 = (void *)(v3 + 308);
  while (1)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)v6);
    uint64_t v10 = gLogObjects;
    int v11 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 56)
    {
      id v12 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = v10;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = v11;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
      }

      id v13 = &_os_log_default;
      id v12 = (os_log_s *)&_os_log_default;
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = ParamID;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = ParamID;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "RequestAuthCert: paramId %d (0x%x)",  buf,  0xEu);
    }

    if (ParamID == 1) {
      break;
    }
    if (ParamID)
    {
      int v18 = 0LL;
    }

    else
    {
      *(void *)&__int128 v14 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)buf = v14;
      *(_OWORD *)&uint8_t buf[16] = v14;
      if (iAP2MsgGetDataAsArrayU8(v6, &inited, buf, 32) != 32
        || (*v8 == *(void *)buf ? (BOOL v15 = v8[1] == *(void *)&buf[8]) : (BOOL v15 = 0),
            v15 ? (BOOL v16 = v8[2] == *(void *)&buf[16]) : (BOOL v16 = 0),
            v16 ? (BOOL v17 = v8[3] == *(void *)&buf[24]) : (BOOL v17 = 0),
            !v17))
      {
LABEL_65:
        int v18 = 0LL;
LABEL_66:
        unsigned int inited = -1;
        uint64_t v3 = v37;
        goto LABEL_67;
      }

      int v18 = 0LL;
      v7 |= 1u;
    }

uint64_t mfi4Auth_protocol_initMessage_AuthCert(uint64_t a1, uint64_t *a2, int a3)
{
  size_t __size = 0xAAAAAAAAAAAAAAAALL;
  if (*(_BYTE *)(a1 + 30))
  {
    id v21 = logObjectForModule_29();
    unint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_AuthCert_cold_4();
    }
    goto LABEL_36;
  }

  if (!a2)
  {
    id v23 = logObjectForModule_29();
    unint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_AuthCert_cold_1();
    }
    goto LABEL_36;
  }

  __int16 v6 = *(_WORD *)(a1 + 200);
  int v7 = malloc(0x48uLL);
  *a2 = (uint64_t)v7;
  if (!v7) {
    return 0xFFFFFFFFLL;
  }
  if (a3 == 6) {
    uint64_t v8 = "MFi40Attestation-Certificate";
  }
  else {
    uint64_t v8 = "MFi40Attestation-Intermediate";
  }
  uint64_t v9 = 360LL;
  if (a3 == 6) {
    uint64_t v9 = 344LL;
  }
  uint64_t v10 = 368LL;
  if (a3 == 6) {
    uint64_t v10 = 352LL;
  }
  CFIndex v11 = *(void *)(a1 + v10);
  id v12 = *(const UInt8 **)(a1 + v9);
  mfi4Auth_util_packetLogging_logData(*(const void **)a1, v8, "MFi4Auth", v12, v11, 0);
  if (!v11 || !v12)
  {
    id v24 = logObjectForModule_29();
    unint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_AuthCert_cold_2();
    }
LABEL_36:

    return 1LL;
  }

  uint64_t v13 = CTCompressComputeBufferSize((unint64_t)v12, v11, &__size);
  if (!(_DWORD)v13)
  {
    size_t v14 = __size;
    BOOL v15 = malloc(__size);
    if (v15)
    {
      BOOL v16 = v15;
      uint64_t v17 = CTCompress((unint64_t)v12, v11, v15, v14);
      if ((_DWORD)v17)
      {
        id v27 = logObjectForModule_29();
        __int128 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67110146;
          int v31 = v17;
          __int16 v32 = 1024;
          *(_DWORD *)uint64_t v33 = a3;
          *(_WORD *)&v33[4] = 2048;
          *(void *)&v33[6] = v11;
          *(_WORD *)&v33[14] = 1040;
          *(_DWORD *)&v33[16] = v11;
          __int16 v34 = 2096;
          id v35 = v12;
          _os_log_error_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "CTCompress: error: %d, certType %d, cert_resp: (%zu bytes)\n%{coreacc:bytes}.*P>",  buf,  0x28u);
        }
      }

      else
      {
        if (gLogObjects && gNumLogObjects >= 56)
        {
          int v18 = (os_log_s *)*(id *)(gLogObjects + 440);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          int v18 = (os_log_s *)&_os_log_default;
          id v19 = &_os_log_default;
        }

        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109632;
          int v31 = a3;
          __int16 v32 = 2048;
          *(void *)uint64_t v33 = v11;
          *(_WORD *)&v33[8] = 2048;
          *(void *)&v33[10] = __size;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "AuthCert:: certType %d, cert_resp_len %zu, compressedLength %zu",  buf,  0x1Cu);
        }

        iAP2MsgInitWithSom(*a2, v6, 20755, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0LL, 0LL);
        iAP2MsgAddU8Param(*a2, 0LL, 0, a3);
        iAP2MsgAddDataParam(*a2, 0LL, 1, v16, (unsigned __int16)__size);
        if (a3 == 6) {
          iAP2MsgAddArrayU8Param(*a2, 0LL, 2, a1 + 272, 0x10u);
        }
        *(_WORD *)(a1 + 2_Block_object_dispose((const void *)(v1 - 96), 8) = 20755;
      }

      free(v16);
      return v17;
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v17 = v13;
  id v25 = logObjectForModule_29();
  id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67110146;
    int v31 = v17;
    __int16 v32 = 1024;
    *(_DWORD *)uint64_t v33 = a3;
    *(_WORD *)&v33[4] = 2048;
    *(void *)&v33[6] = v11;
    *(_WORD *)&v33[14] = 1040;
    *(_DWORD *)&v33[16] = v11;
    __int16 v34 = 2096;
    id v35 = v12;
    _os_log_error_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "CTCompressComputeBufferSize: error: %d, certType %d, cert_resp: (%zu bytes)\n%{coreacc:bytes}.*P>",  buf,  0x28u);
  }

  return v17;
}

uint64_t mfi4Auth_protocol_handle_AuthCert(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = a1;
  unsigned int v124 = 1;
  char v123 = 0;
  size_t __size = 0LL;
  if (!a1)
  {
    id v100 = logObjectForModule_29();
    __int16 v101 = (os_log_s *)objc_claimAutoreleasedReturnValue(v100);
    if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthCert_cold_1();
    }
    goto LABEL_190;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v102 = logObjectForModule_29();
    __int16 v101 = (os_log_s *)objc_claimAutoreleasedReturnValue(v102);
    if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_AuthCert_cold_4();
    }
    goto LABEL_190;
  }

  if (!a2)
  {
    id v103 = logObjectForModule_29();
    __int16 v101 = (os_log_s *)objc_claimAutoreleasedReturnValue(v103);
    if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthCert_cold_2();
    }
LABEL_190:

    id v30 = 0LL;
    id v29 = 0LL;
    int v20 = 0LL;
    goto LABEL_181;
  }

  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0LL);
  uint64_t DataAsData = 0LL;
  unsigned __int16 v7 = 0;
  int v8 = 0;
  uint64_t v120 = v3;
  uint64_t v9 = (_OWORD *)(v3 + 288);
  unsigned int DataAsU8 = 13;
  while (1)
  {
    if (!FirstParam)
    {
      if (DataAsU8 >= 4)
      {
LABEL_60:
        int v20 = 0LL;
      }

      else
      {
        if (DataAsU8)
        {
          unsigned int v124 = CTDecompressComputeBufferSize((unint64_t)DataAsData, v7, &__size);
          if (v124)
          {
            id v114 = logObjectForModule_29();
            int v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(v114);
            if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR)) {
              mfi4Auth_protocol_handle_AuthCert_cold_16();
            }
            goto LABEL_177;
          }

          size_t v18 = __size;
          id v19 = (const UInt8 *)malloc(__size);
          if (!v19)
          {
            unsigned int v124 = -1;
            id v115 = logObjectForModule_29();
            int v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(v115);
            if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR)) {
              mfi4Auth_protocol_handle_AuthCert_cold_14();
            }
            goto LABEL_177;
          }

          int v20 = v19;
          unsigned int v124 = CTDecompress((unint64_t)DataAsData, v7, (unint64_t)v19, v18);
          if (v124)
          {
            id v116 = logObjectForModule_29();
            int v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(v116);
            if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR)) {
              mfi4Auth_protocol_handle_AuthCert_cold_15();
            }
            goto LABEL_177;
          }

          if (DataAsU8 == 3) {
            id v21 = "MFi40Accessory-Certificate";
          }
          else {
            id v21 = "MFi40Accessory-Intermediate";
          }
          unint64_t v22 = *(const void **)v120;
          size_t v23 = __size;
          id v24 = v20;
LABEL_38:
          mfi4Auth_util_packetLogging_logData(v22, v21, "MFi4Auth", v24, v23, 1);
          if (gLogObjects && gNumLogObjects >= 56)
          {
            id v26 = (os_log_s *)*(id *)(gLogObjects + 440);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            id v26 = (os_log_s *)&_os_log_default;
            id v27 = &_os_log_default;
          }

          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = v7;
            *(_WORD *)&uint8_t buf[8] = 2048;
            *(void *)&buf[10] = __size;
            _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_handle_AuthCert: compressedLength %d, decompressedLength %zu",  buf,  0x12u);
          }

          size_t v28 = __size;
          if (__size > 0x1000)
          {
            id v104 = logObjectForModule_29();
            int v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(v104);
            if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR)) {
              mfi4Auth_protocol_handle_AuthCert_cold_3();
            }
            goto LABEL_177;
          }

          switch(DataAsU8)
          {
            case 0u:
              if ((~v8 & 3) != 0) {
                goto LABEL_60;
              }
              uint64_t v3 = v120;
              if (*(_DWORD *)(v120 + 160))
              {
                *(void *)(v120 + 440) = v20;
                *(void *)(v120 + 44_Block_object_dispose((const void *)(v1 - 96), 8) = v28;
                *(_DWORD *)(v120 + 400) = 0;
              }

              else
              {
                *(void *)(v120 + 696) = v20;
                *(void *)(v120 + 704) = v28;
                *(_DWORD *)(v120 + 652) = 0;
              }

              *(void *)&__int128 v31 = 0xAAAAAAAAAAAAAAAALL;
              *((void *)&v31 + 1) = 0xAAAAAAAAAAAAAAAALL;
              *(_OWORD *)buf = v31;
              *(_OWORD *)&uint8_t buf[16] = v31;
              id v32 = logObjectForModule_29();
              uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
              BOOL v34 = os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
              if ((v8 & 2) != 0)
              {
                if (v34)
                {
                  *(_WORD *)unint64_t v121 = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_handle_AuthCert: Accessory DID provide PrivacyPrefix!",  v121,  2u);
                }

                size_t v39 = __size;
                __int128 v36 = malloc(__size + 16);
                _OWORD *v36 = *v9;
                memcpy(v36 + 1, v20, v39);
                CC_LONG v38 = v39 + 16;
                uint64_t v37 = v36;
              }

              else
              {
                if (v34)
                {
                  *(_WORD *)unint64_t v121 = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_handle_AuthCert: Accessory did NOT provide PrivacyPrefix!",  v121,  2u);
                }

                size_t v35 = __size;
                __int128 v36 = malloc(__size);
                memcpy(v36, v20, v35);
                uint64_t v37 = v36;
                CC_LONG v38 = v35;
              }

              CC_SHA256(v37, v38, buf);
              if (*(_DWORD *)(v120 + 160)) {
                uint64_t v40 = (uint64_t *)(v120 + 404);
              }
              else {
                uint64_t v40 = (uint64_t *)(v120 + 656);
              }
              uint64_t v41 = *v40;
              uint64_t v42 = v40[1];
              uint64_t v44 = v40[2];
              uint64_t v43 = v40[3];
              BOOL v48 = *(void *)buf != v41
                 || *(void *)&buf[8] != v42
                 || *(void *)&buf[16] != v44
                 || *(void *)&buf[24] != v43;
              if (v36) {
                free(v36);
              }
              if (!v48)
              {
                int v20 = 0LL;
                id v29 = 0LL;
                id v30 = 0LL;
                goto LABEL_142;
              }

              unsigned int v124 = -1;
              id v117 = logObjectForModule_29();
              int v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(v117);
              if (!os_log_type_enabled(v97, OS_LOG_TYPE_ERROR)) {
                goto LABEL_177;
              }
              goto LABEL_215;
            case 1u:
              if (v8 != 3) {
                goto LABEL_60;
              }
              *(void *)(v120 + 456) = v20;
              *(void *)(v120 + 464) = v28;
              goto LABEL_118;
            case 2u:
              if (v8 != 3) {
                goto LABEL_60;
              }
              *(void *)(v120 + 472) = v20;
              *(void *)(v120 + 480) = v28;
              goto LABEL_118;
            case 3u:
              if ((~v8 & 3) != 0) {
                goto LABEL_60;
              }
              if (*(_DWORD *)(v120 + 160))
              {
                *(void *)(v120 + 440) = v20;
                *(void *)(v120 + 44_Block_object_dispose((const void *)(v1 - 96), 8) = v28;
                *(_DWORD *)(v120 + 400) = 3;
              }

              else
              {
                *(void *)(v120 + 696) = v20;
                *(void *)(v120 + 704) = v28;
                *(_DWORD *)(v120 + 652) = 3;
              }

              *(void *)&__int128 v49 = 0xAAAAAAAAAAAAAAAALL;
              *((void *)&v49 + 1) = 0xAAAAAAAAAAAAAAAALL;
              *(_OWORD *)buf = v49;
              *(_OWORD *)&uint8_t buf[16] = v49;
              id v50 = logObjectForModule_29();
              id v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
              BOOL v52 = os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
              if ((v8 & 2) != 0)
              {
                if (v52)
                {
                  *(_WORD *)unint64_t v121 = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_handle_AuthCert: Accessory DID provide PrivacyPrefix!",  v121,  2u);
                }

                size_t v57 = __size;
                uint64_t v54 = malloc(__size + 16);
                *uint64_t v54 = *v9;
                memcpy(v54 + 1, v20, v57);
                CC_LONG v56 = v57 + 16;
                id v55 = v54;
              }

              else
              {
                if (v52)
                {
                  *(_WORD *)unint64_t v121 = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_handle_AuthCert: Accessory did NOT provide PrivacyPrefix!",  v121,  2u);
                }

                size_t v53 = __size;
                uint64_t v54 = malloc(__size);
                memcpy(v54, v20, v53);
                id v55 = v54;
                CC_LONG v56 = v53;
              }

              CC_SHA256(v55, v56, buf);
              if (*(_DWORD *)(v120 + 160)) {
                id v58 = (uint64_t *)(v120 + 404);
              }
              else {
                id v58 = (uint64_t *)(v120 + 656);
              }
              uint64_t v59 = *v58;
              uint64_t v60 = v58[1];
              uint64_t v62 = v58[2];
              uint64_t v61 = v58[3];
              BOOL v66 = *(void *)buf != v59
                 || *(void *)&buf[8] != v60
                 || *(void *)&buf[16] != v62
                 || *(void *)&buf[24] != v61;
              if (v54) {
                free(v54);
              }
              if (v66)
              {
                unsigned int v124 = -1;
                id v118 = logObjectForModule_29();
                int v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(v118);
                if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR)) {
LABEL_215:
                }
                  mfi4Auth_protocol_handle_AuthCert_cold_11();
                goto LABEL_177;
              }

              size_t v28 = __size;
LABEL_118:
              uint64_t CertificateRefWithBytes = __createCertificateRefWithBytes((uint64_t)v20, v28, DataAsU8);
              if (!CertificateRefWithBytes)
              {
                unsigned int v124 = -1;
                id v105 = logObjectForModule_29();
                int v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(v105);
                if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR)) {
                  mfi4Auth_protocol_handle_AuthCert_cold_5();
                }
                goto LABEL_177;
              }

              id v30 = (const void *)CertificateRefWithBytes;
              uint64_t AuthorityKeyID = SecCertificateGetAuthorityKeyID();
              if (AuthorityKeyID)
              {
                id v69 = (void *)AuthorityKeyID;
                uint64_t v70 = SecCertificateCreateWithBytes( kCFAllocatorDefault,  &kCertDER_Mfi4_Root_Test,  kCertDER_Mfi4_Root_Test_Length);
                if (v70)
                {
                  int v20 = (const UInt8 *)v70;
                  uint64_t SubjectKeyID = SecCertificateGetSubjectKeyID(v70);
                  if (SubjectKeyID)
                  {
                    id v72 = (const void *)SubjectKeyID;
                    uint64_t v73 = SecCertificateCreateWithBytes( kCFAllocatorDefault,  &kCertDER_Mfi4_Root,  kCertDER_Mfi4_Root_Length);
                    if (v73)
                    {
                      id v29 = (const void *)v73;
                      uint64_t v74 = SecCertificateGetSubjectKeyID(v73);
                      if (!v74)
                      {
                        unsigned int v124 = -1;
                        id v112 = logObjectForModule_29();
                        __int16 v113 = (os_log_s *)objc_claimAutoreleasedReturnValue(v112);
                        if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR)) {
                          mfi4Auth_protocol_handle_AuthCert_cold_8();
                        }

                        goto LABEL_180;
                      }

                      unsigned int v75 = (const void *)v74;
                      if (DataAsU8 != 2)
                      {
                        if (DataAsU8 != 1) {
                          goto LABEL_133;
                        }
                        int v76 = CFEqual(v69, v72);
                        int v77 = CFEqual(v69, v75);
                        id v78 = logObjectForModule_29();
                        __int128 v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
                        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)buf = 67109376;
                          *(_DWORD *)&uint8_t buf[4] = v76 != 0;
                          *(_WORD *)&uint8_t buf[8] = 1024;
                          *(_DWORD *)&buf[10] = v77 != 0;
                          _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_handle_AuthCert: authorityIsRoot: dev:%d, prod:%d",  buf,  0xEu);
                        }

                        if (!(v76 | v77))
                        {
LABEL_133:
                          uint64_t v3 = v120;
                          unsigned int inited = mfi4Auth_protocol_initMessage_RequestAuthCert(v120, a3, v69);
                          goto LABEL_134;
                        }

                        id v80 = logObjectForModule_29();
                        uint64_t v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
                        if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_WORD *)buf = 0;
                          _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_handle_AuthCert: known skid",  buf,  2u);
                        }

LABEL_132:
                        uint64_t v3 = v120;
LABEL_142:
                        unsigned int inited = mfi4Auth_protocol_validateCertChain(v3);
                        unsigned int v124 = inited;
                        if (inited) {
                          goto LABEL_182;
                        }
                        unsigned int v124 = mfi4Auth_protocol_validateSignature(v3);
                        if (v124) {
                          goto LABEL_63;
                        }
                        if (acc_userDefaults_BOOLForKey((uint64_t)@"PretendNFCAuthFailed"))
                        {
                          if (gLogObjects && gNumLogObjects >= 56)
                          {
                            int v89 = (os_log_s *)*(id *)(gLogObjects + 440);
                          }

                          else
                          {
                            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                              platform_connectionInfo_configStreamCategoryListReady_cold_1();
                            }
                            int v89 = (os_log_s *)&_os_log_default;
                            id v92 = &_os_log_default;
                          }

                          if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
                          {
                            *(_DWORD *)buf = 136315394;
                            *(void *)&uint8_t buf[4] = "mfi4Auth_protocol_handle_AuthCert";
                            *(_WORD *)&buf[12] = 1024;
                            *(_DWORD *)&_BYTE buf[14] = 1;
                            _os_log_impl( (void *)&_mh_execute_header,  v89,  OS_LOG_TYPE_DEFAULT,  "%s: PretendNFCAuthFailed!!!, set status(%d)",  buf,  0x12u);
                          }

                          uint64_t v93 = v3;
                          int v94 = 1;
                          goto LABEL_158;
                        }

                        if (acc_userDefaults_BOOLForKey((uint64_t)@"PretendNFCAuthTimeout"))
                        {
                          id v90 = logObjectForModule_29();
                          unsigned int v91 = (os_log_s *)objc_claimAutoreleasedReturnValue(v90);
                          if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
                          {
                            *(_DWORD *)buf = 136315394;
                            *(void *)&uint8_t buf[4] = "mfi4Auth_protocol_handle_AuthCert";
                            *(_WORD *)&buf[12] = 1024;
                            *(_DWORD *)&_BYTE buf[14] = 2;
                            _os_log_impl( (void *)&_mh_execute_header,  v91,  OS_LOG_TYPE_DEFAULT,  "%s: PretendNFCAuthTimeout!!!, ignore status(%d)",  buf,  0x12u);
                          }

                          goto LABEL_159;
                        }

                        if (!*(_DWORD *)(v3 + 160))
                        {
                          uint64_t v93 = v3;
                          int v94 = 2;
LABEL_158:
                          mfi4Auth_protocol_handle_AuthState(v93, v94);
LABEL_159:
                          unsigned int v124 = 0;
                          goto LABEL_160;
                        }

                        unsigned int inited = mfi4Auth_protocol_initMessage_AuthenticationSucceeded(v3, a3);
LABEL_134:
                        unsigned int v124 = inited;
                        if (inited) {
                          goto LABEL_182;
                        }
                        goto LABEL_159;
                      }

                      int v83 = CFEqual(v69, v72);
                      int v84 = CFEqual(v69, v75);
                      id v85 = logObjectForModule_29();
                      __int16 v86 = (os_log_s *)objc_claimAutoreleasedReturnValue(v85);
                      if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)buf = 67109376;
                        *(_DWORD *)&uint8_t buf[4] = v83 != 0;
                        *(_WORD *)&uint8_t buf[8] = 1024;
                        *(_DWORD *)&buf[10] = v84 != 0;
                        _os_log_impl( (void *)&_mh_execute_header,  v86,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_handle_AuthCert: authorityIsRoot: dev:%d, prod:%d",  buf,  0xEu);
                      }

                      if (v83 | v84)
                      {
                        id v87 = logObjectForModule_29();
                        __int16 v88 = (os_log_s *)objc_claimAutoreleasedReturnValue(v87);
                        uint64_t v3 = v120;
                        if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_WORD *)buf = 0;
                          _os_log_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_handle_AuthCert: known skid",  buf,  2u);
                        }

                        goto LABEL_142;
                      }

uint64_t __createCertificateRefWithBytes(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1 || !a2) {
    return 0LL;
  }
  __int128 v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", a1, a2));
  uint64_t CertificateRefWithData = __createCertificateRefWithData(v4, a3);

  return CertificateRefWithData;
}

uint64_t mfi4Auth_protocol_initMessage_RequestAuthCert(uint64_t a1, uint64_t *a2, void *a3)
{
  id v5 = a3;
  if (!a1)
  {
    id v15 = logObjectForModule_29();
    BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_RequestAuthCert_cold_1();
    }
    goto LABEL_19;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v17 = logObjectForModule_29();
    BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_RequestAuthCert_cold_6();
    }
    goto LABEL_19;
  }

  if (!a2)
  {
    id v18 = logObjectForModule_29();
    BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestAuthCert_cold_2();
    }
LABEL_19:

    uint64_t v13 = 1LL;
    goto LABEL_12;
  }

  __int16 v6 = *(_WORD *)(a1 + 200);
  unsigned __int16 v7 = malloc(0x48uLL);
  *a2 = (uint64_t)v7;
  if (v7)
  {
    iAP2MsgInitWithSom((uint64_t)v7, v6, 20754, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0LL, 0LL);
    if (v5)
    {
      uint64_t v8 = *a2;
      id v9 = [v5 bytes];
      uint64_t v10 = v8;
      __int16 v11 = 1;
      unsigned int v12 = 20;
    }

    else
    {
      uint64_t v10 = *a2;
      if (*(_DWORD *)(a1 + 160)) {
        id v9 = (id)(a1 + 404);
      }
      else {
        id v9 = (id)(a1 + 656);
      }
      __int16 v11 = 0;
      unsigned int v12 = 32;
    }

    iAP2MsgAddArrayU8Param(v10, 0LL, v11, (uint64_t)v9, v12);
    uint64_t v13 = 0LL;
    *(_WORD *)(a1 + 2_Block_object_dispose((const void *)(v1 - 96), 8) = 20754;
  }

  else
  {
    id v19 = logObjectForModule_29();
    int v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestAuthCert_cold_3();
    }

    uint64_t v13 = 0xFFFFFFFFLL;
  }

uint64_t mfi4Auth_protocol_validateCertChain(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", 3LL));
  uint64_t v3 = (void *)v2;
  if (!a1)
  {
    id v34 = logObjectForModule_29();
    size_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_validateCertChain_cold_3();
    }
    goto LABEL_69;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v36 = logObjectForModule_29();
    size_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_validateCertChain_cold_8();
    }
LABEL_69:
    uint64_t v30 = 0xFFFFFFFFLL;
LABEL_73:

    goto LABEL_54;
  }

  if (!v2)
  {
    id v37 = logObjectForModule_29();
    size_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_validateCertChain_cold_4();
    }
    uint64_t v30 = 2LL;
    goto LABEL_73;
  }

  if (gLogObjects) {
    BOOL v4 = gNumLogObjects <= 55;
  }
  else {
    BOOL v4 = 1;
  }
  int v5 = !v4;
  if (*(_DWORD *)(a1 + 160))
  {
    if (v5)
    {
      __int16 v6 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int16 v6 = (os_log_s *)&_os_log_default;
      id v8 = &_os_log_default;
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v9 = *(_DWORD *)(a1 + 160);
      uint64_t v10 = *(void *)(a1 + 448);
      int v11 = *(_DWORD *)(a1 + 400);
      uint64_t v12 = *(void *)(a1 + 464);
      int v38 = 136316418;
      size_t v39 = "mfi4Auth_protocol_validateCertChain";
      __int16 v40 = 1024;
      int v41 = 2448;
      __int16 v42 = 1024;
      int v43 = v9;
      __int16 v44 = 2048;
      uint64_t v45 = v10;
      __int16 v46 = 1024;
      int v47 = v11;
      __int16 v48 = 2048;
      uint64_t v49 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s:%d negotiatedAuthType %d, cert_init_len %zu, cert_init_type %d, intermediate1_cert_init_len %zu",  (uint8_t *)&v38,  0x32u);
    }

    if (!*(void *)(a1 + 448)) {
      goto LABEL_64;
    }
    unsigned int v13 = *(_DWORD *)(a1 + 400);
    if (v13)
    {
      if (!*(void *)(a1 + 464)) {
        goto LABEL_64;
      }
    }

    size_t v14 = (void *)(a1 + 440);
  }

  else
  {
    if (v5)
    {
      unsigned __int16 v7 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      unsigned __int16 v7 = (os_log_s *)&_os_log_default;
      id v15 = &_os_log_default;
    }

    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v16 = *(_DWORD *)(a1 + 160);
      uint64_t v17 = *(void *)(a1 + 704);
      int v18 = *(_DWORD *)(a1 + 652);
      uint64_t v19 = *(void *)(a1 + 464);
      int v38 = 136316418;
      size_t v39 = "mfi4Auth_protocol_validateCertChain";
      __int16 v40 = 1024;
      int v41 = 2433;
      __int16 v42 = 1024;
      int v43 = v16;
      __int16 v44 = 2048;
      uint64_t v45 = v17;
      __int16 v46 = 1024;
      int v47 = v18;
      __int16 v48 = 2048;
      uint64_t v49 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s:%d negotiatedAuthType %d, leafCertLen %zu, leafCertType %d, intermediate1_cert_init_len %zu",  (uint8_t *)&v38,  0x32u);
    }

    if (!*(void *)(a1 + 704)) {
      goto LABEL_64;
    }
    unsigned int v13 = *(_DWORD *)(a1 + 652);
    if (v13)
    {
      if (!*(void *)(a1 + 464)) {
        goto LABEL_64;
      }
    }

    size_t v14 = (void *)(a1 + 696);
  }

  if (!*v14) {
    goto LABEL_64;
  }
  int v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:"));
  [v3 addObject:v20];

  if (*(void *)(a1 + 464))
  {
    id v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  *(void *)(a1 + 456)));
    [v3 addObject:v21];
  }

  if (*(void *)(a1 + 480))
  {
    unint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  *(void *)(a1 + 472)));
    [v3 addObject:v22];
  }

  if (![v3 count]
    || (v13 > 9 ? (uint64_t v23 = 0xFFFFFFFFLL) : (uint64_t v23 = dword_10019F1B4[v13]),
        id v24 = (void *)objc_claimAutoreleasedReturnValue(+[MFAACertificateManager sharedManager](&OBJC_CLASS___MFAACertificateManager, "sharedManager")),
        id v25 = [v24 copyParsedCertificateChainInfoFromCerts:v3 assumeType:v23],
        v24,
        !v25))
  {
LABEL_64:
    uint64_t v30 = 2LL;
    goto LABEL_54;
  }

  id v26 = (void *)objc_claimAutoreleasedReturnValue(+[MFAACertificateManager sharedManager](&OBJC_CLASS___MFAACertificateManager, "sharedManager"));
  id v27 = (char *)[v26 copyEvaluatedCertificateChainInfo:v25];

  if (gLogObjects && gNumLogObjects >= 56)
  {
    size_t v28 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    size_t v28 = (os_log_s *)&_os_log_default;
    id v29 = &_os_log_default;
  }

  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    int v38 = 138412290;
    size_t v39 = v27;
    _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_validateCertChain: certListDict %@",  (uint8_t *)&v38,  0xCu);
  }

  if (v27)
  {
    uint64_t v30 = 0LL;
    goto LABEL_63;
  }

  uint64_t v30 = 0xFFFFFFFFLL;
LABEL_54:
  if (gLogObjects && gNumLogObjects >= 56)
  {
    __int128 v31 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int128 v31 = (os_log_s *)&_os_log_default;
    id v32 = &_os_log_default;
  }

  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
    mfi4Auth_protocol_validateCertChain_cold_1();
  }

  id v27 = 0LL;
LABEL_63:

  return v30;
}

uint64_t mfi4Auth_protocol_validateSignature(uint64_t a1)
{
  CFErrorRef error = 0LL;
  if (!a1)
  {
    id v29 = logObjectForModule_29();
    uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_validateSignature_cold_1();
    }
    goto LABEL_72;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v31 = logObjectForModule_29();
    uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_validateSignature_cold_15();
    }
    goto LABEL_72;
  }

  if (!*(_DWORD *)(a1 + 160))
  {
    uint64_t v12 = *(const UInt8 **)(a1 + 696);
    if (v12)
    {
      CFIndex v13 = *(void *)(a1 + 704);
      data[0] = 0;
      *(_OWORD *)&data[1] = *(_OWORD *)(a1 + 568);
      __int128 v48 = *(_OWORD *)(a1 + 552);
      *(void *)&__int128 v14 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)md = v14;
      __int128 v46 = v14;
      CC_SHA256(data, 0x21u, md);
      CFDataRef v15 = CFDataCreate(kCFAllocatorDefault, v12, v13);
      CFDataRef v16 = CFDataCreate(kCFAllocatorDefault, md, 32LL);
      CFDataRef v17 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)(a1 + 584), 64LL);
      if (v15)
      {
        if (v16)
        {
          if (v17)
          {
            if ((MFAAVerifyNonceSignature(v15, v16, v17) & 1) != 0)
            {
              uint64_t v3 = 0LL;
              int v5 = 0LL;
              __int16 v6 = 0LL;
              uint64_t v10 = 0LL;
LABEL_26:
              if (gLogObjects && gNumLogObjects >= 56)
              {
                id v24 = (os_log_s *)*(id *)(gLogObjects + 440);
              }

              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
                id v24 = (os_log_s *)&_os_log_default;
                id v25 = &_os_log_default;
              }

              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)data = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_validateSignature: verification passed",  data,  2u);
              }

              uint64_t v26 = 0LL;
              uint64_t v27 = 0LL;
              if (!v3) {
                goto LABEL_36;
              }
              goto LABEL_35;
            }

            id v43 = logObjectForModule_29();
            uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
              mfi4Auth_protocol_validateSignature_cold_7();
            }
          }

          else
          {
            id v42 = logObjectForModule_29();
            uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
              mfi4Auth_protocol_validateSignature_cold_5();
            }
          }
        }

        else
        {
          id v41 = logObjectForModule_29();
          uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_validateSignature_cold_4();
          }
        }
      }

      else
      {
        id v40 = logObjectForModule_29();
        uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_protocol_validateSignature_cold_3();
        }
      }
    }

    else
    {
      id v39 = logObjectForModule_29();
      uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_validateSignature_cold_2();
      }
    }

uint64_t mfi4Auth_protocol_initMessage_AuthenticationSucceeded(uint64_t a1, void *a2)
{
  if (*(_BYTE *)(a1 + 30))
  {
    id v7 = logObjectForModule_29();
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_AuthenticationSucceeded_cold_2();
    }
    goto LABEL_9;
  }

  if (!a2)
  {
    id v9 = logObjectForModule_29();
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_AuthenticationSucceeded_cold_1();
    }
LABEL_9:

    return 1LL;
  }

  __int16 v4 = *(_WORD *)(a1 + 200);
  int v5 = malloc(0x48uLL);
  *a2 = v5;
  if (!v5) {
    return 0xFFFFFFFFLL;
  }
  iAP2MsgInitWithSom((uint64_t)v5, v4, 20991, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0LL, 0LL);
  uint64_t result = 0LL;
  *(_WORD *)(a1 + 2_Block_object_dispose((const void *)(v1 - 96), 8) = 20991;
  return result;
}

uint64_t mfi4Auth_protocol_handle_AuthFinish(_BYTE *a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v17 = 1;
  if (!a1)
  {
    id v13 = logObjectForModule_29();
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthFinish_cold_1();
    }
    goto LABEL_27;
  }

  if (a1[30])
  {
    id v14 = logObjectForModule_29();
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthFinish_cold_4();
    }
    goto LABEL_27;
  }

  if (!a2)
  {
    id v15 = logObjectForModule_29();
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthFinish_cold_2();
    }
    goto LABEL_27;
  }

  char v16 = 0;
  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0LL);
  while (FirstParam)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
    if (ParamID == 1)
    {
      int DataAsArrayU8 = iAP2MsgGetDataAsArrayU8(FirstParam, &v17, a1 + 488, 64);
      if (v17) {
        goto LABEL_15;
      }
      if (DataAsArrayU8 != 64) {
        return 0LL;
      }
    }

    else if (!ParamID)
    {
      int v8 = iAP2MsgGetDataAsArrayU8(FirstParam, &v17, a1 + 404, 32);
      if (v17) {
        goto LABEL_15;
      }
      if (v8 != 32) {
        return 0LL;
      }
    }

    unint64_t FirstParam = iAP2MsgGetNextParamWithError(a2, 0LL, FirstParam, &v16);
    if (v16) {
      goto LABEL_14;
    }
  }

  uint64_t result = mfi4Auth_protocol_initMessage_RequestAuthCert((uint64_t)a1, a3, 0LL);
  unsigned int v17 = result;
  if ((_DWORD)result)
  {
    id v11 = logObjectForModule_29();
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthFinish_cold_3();
    }
LABEL_27:

LABEL_14:
    if (v17)
    {
LABEL_15:
      mfi4Auth_protocol_handle_AuthState((uint64_t)a1, 1);
      return v17;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t mfi4Auth_protocol_handle_AuthChallengeResponse(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v19 = 1;
  if (!a1)
  {
    id v14 = logObjectForModule_29();
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthChallengeResponse_cold_1();
    }
    goto LABEL_31;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v16 = logObjectForModule_29();
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthChallengeResponse_cold_3();
    }
    goto LABEL_31;
  }

  if (!a2)
  {
    id v17 = logObjectForModule_29();
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthChallengeResponse_cold_2();
    }
LABEL_31:

    goto LABEL_21;
  }

  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0LL);
  int v7 = 0;
  char v18 = 0;
  while (FirstParam)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
    switch(ParamID)
    {
      case 2:
        *(void *)(a1 + 68_Block_object_dispose((const void *)(v1 - 96), 8) = 32LL;
        int DataAsArrayU8 = iAP2MsgGetDataAsArrayU8(FirstParam, &v19, (void *)(a1 + 656), 32);
        unsigned int v10 = v19;
        if (v19 || DataAsArrayU8 != 32) {
          goto LABEL_20;
        }
        v7 |= 4u;
        break;
      case 1:
        int v12 = iAP2MsgGetDataAsArrayU8(FirstParam, &v19, (void *)(a1 + 552), 16);
        unsigned int v10 = v19;
        if (v19 || v12 != 16) {
          goto LABEL_20;
        }
        v7 |= 2u;
        break;
      case 0:
        int v9 = iAP2MsgGetDataAsArrayU8(FirstParam, &v19, (void *)(a1 + 584), 64);
        unsigned int v10 = v19;
        if (v19 || v9 != 64) {
          goto LABEL_20;
        }
        v7 |= 1u;
        break;
    }

    unint64_t FirstParam = iAP2MsgGetNextParamWithError(a2, 0LL, FirstParam, &v18);
    if (v18)
    {
      unsigned int v10 = v19;
LABEL_20:
      if (v10) {
        goto LABEL_21;
      }
      return 0LL;
    }
  }

  if ((~v7 & 7) == 0)
  {
    mfi4Auth_protocol_initMessage_RequestAuthCert(a1, a3, 0LL);
    return 0LL;
  }

  unsigned int v19 = -1;
LABEL_21:
  mfi4Auth_protocol_handle_AuthState(a1, 1);
  return v19;
}

uint64_t mfi4Auth_protocol_handle_AuthenticationReset(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!a1)
  {
    id v8 = logObjectForModule_29();
    int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthenticationReset_cold_1();
    }
    goto LABEL_21;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v10 = logObjectForModule_29();
    int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthenticationReset_cold_4();
    }
    goto LABEL_21;
  }

  if (!a2)
  {
    id v11 = logObjectForModule_29();
    int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthenticationReset_cold_2();
    }
LABEL_21:

    return 1LL;
  }

  if (gLogObjects && gNumLogObjects >= 56)
  {
    int v5 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v5 = (os_log_s *)&_os_log_default;
    id v7 = &_os_log_default;
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "AuthenticationReset: Ignored", v12, 2u);
  }

  return 0LL;
}

uint64_t mfi4Auth_protocol_handle_AuthenticationFailed(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!a1)
  {
    id v7 = logObjectForModule_29();
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthenticationFailed_cold_1();
    }
    goto LABEL_17;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v9 = logObjectForModule_29();
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthenticationFailed_cold_3();
    }
    goto LABEL_17;
  }

  if (!a2)
  {
    id v10 = logObjectForModule_29();
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthenticationFailed_cold_2();
    }
LABEL_17:

    return 0LL;
  }

  int v3 = *(unsigned __int8 *)(a1 + 88);
  if ((v3 & 3) == 1) {
    int v4 = 3;
  }
  else {
    int v4 = 12;
  }
  int v5 = v4 | v3;
  *(_BYTE *)(a1 + 8_Block_object_dispose((const void *)(v1 - 96), 8) = v5;
  if ((~v5 & 0xF) != 0) {
    mfi4Auth_protocol_initMessage_RequestAuthSetup(a1, a3);
  }
  else {
    mfi4Auth_protocol_handle_AuthState(a1, 1);
  }
  return 0LL;
}

uint64_t mfi4Auth_protocol_handle_AuthenticationSucceeded(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!a1)
  {
    id v31 = logObjectForModule_29();
    id v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthenticationSucceeded_cold_1();
    }
    goto LABEL_64;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v33 = logObjectForModule_29();
    id v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_AuthenticationSucceeded_cold_2();
    }
    goto LABEL_64;
  }

  if (!a2)
  {
    id v34 = logObjectForModule_29();
    id v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_AuthenticationSucceeded_cold_2();
    }
LABEL_64:

    return 1LL;
  }

  char v5 = *(_BYTE *)(a1 + 88);
  int v6 = v5 & 3;
  char v7 = v5 & 0xF3 | 8;
  char v8 = v5 & 0xFC | 2;
  if (v6 != 1) {
    char v8 = v7;
  }
  *(_BYTE *)(a1 + 8_Block_object_dispose((const void *)(v1 - 96), 8) = v8;
  mfi4Auth_protocol_handle_AuthState(a1, 2);
  switch(*(_DWORD *)(a1 + 32))
  {
    case 1:
      id v13 = (unsigned __int16 *)malloc(0x12uLL);
      if (!v13) {
        goto LABEL_57;
      }
      id v14 = v13;
      for (uint64_t i = 0LL; i != 9; ++i)
        v13[i] = i + 20994;
      uint64_t inited = mfi4Auth_protocol_initMessage_RequestVendorNVMRead(a1, a3, v13, 9);
      free(v14);
      if (!(_DWORD)inited) {
        goto LABEL_47;
      }
      return inited;
    case 4:
    case 0xC:
      __int16 v9 = *(_WORD *)(a1 + 200);
      uint64_t v10 = a1;
      id v11 = a3;
      unsigned int v12 = 21248;
      goto LABEL_35;
    case 5:
      if (*(_BYTE *)(a1 + 144) == 2)
      {
        uint64_t v17 = mfi4Auth_protocol_initMessage_RequestNVMPublicKeyChallenge(a1, *(_WORD *)(a1 + 200), a3, 0x5300u);
      }

      else
      {
        *(_WORD *)buf = 20736;
        uint64_t v17 = mfi4Auth_protocol_initMessage_RequestManufacturerNVMRead(a1, a3, (unsigned __int16 *)buf, 1);
      }

      uint64_t inited = v17;
      if ((_DWORD)v17) {
        return inited;
      }
      goto LABEL_47;
    case 6:
      if (!*(_DWORD *)(a1 + 36)) {
        goto LABEL_57;
      }
      char v18 = *(unsigned __int16 **)(a1 + 40);
      if (!v18) {
        goto LABEL_57;
      }
      unsigned int v19 = *(uint64_t **)(a1 + 48);
      if (!v19) {
        goto LABEL_57;
      }
      int v20 = *(_DWORD **)(a1 + 56);
      if (!v20) {
        goto LABEL_57;
      }
      uint64_t v21 = mfi4Auth_protocol_initMessage_RequestUserNVMWrite( a1,  *(_WORD *)(a1 + 200),  a3,  v18,  v19,  v20,  *(_DWORD *)(a1 + 36),  0LL,  0LL);
      if ((_DWORD)v21) {
        goto LABEL_65;
      }
      goto LABEL_47;
    case 7:
      if (!*(_DWORD *)(a1 + 36)) {
        goto LABEL_57;
      }
      uint64_t v22 = *(unsigned __int16 **)(a1 + 40);
      if (!v22) {
        goto LABEL_57;
      }
      int v23 = *(_DWORD *)(a1 + 36);
      goto LABEL_46;
    case 8:
      if (*(_DWORD *)(a1 + 36) && *(void *)(a1 + 40) && *(void *)(a1 + 48) && *(void *)(a1 + 56))
      {
        if (gLogObjects && gNumLogObjects >= 56)
        {
          id v24 = (os_log_s *)*(id *)(gLogObjects + 440);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          id v24 = (os_log_s *)&_os_log_default;
          id v28 = &_os_log_default;
        }

        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          int v29 = *(_DWORD *)(a1 + 36);
          int v30 = **(unsigned __int16 **)(a1 + 40);
          *(_DWORD *)buf = 67109376;
          int v36 = v29;
          __int16 v37 = 1024;
          int v38 = v30;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "kMfi4Auth_Action_WriteUserName: count:%d, [0]:0x%x",  buf,  0xEu);
        }

        if (*(_BYTE *)(a1 + 144) == 2) {
          mfi4Auth_protocol_initMessage_RequestUserNVMWrite( a1,  *(_WORD *)(a1 + 200),  a3,  *(unsigned __int16 **)(a1 + 40),  *(uint64_t **)(a1 + 48),  *(_DWORD **)(a1 + 56),  *(unsigned __int8 *)(a1 + 36),  0LL,  0LL);
        }
        else {
          mfi4Auth_protocol_initMessage_RequestNVMAuthStart(a1, a3, 0x5300u);
        }
LABEL_47:
        uint64_t inited = 0LL;
      }

      else
      {
LABEL_57:
        uint64_t inited = 0xFFFFFFFFLL;
      }

      break;
    case 9:
      if (gLogObjects && gNumLogObjects >= 56)
      {
        id v25 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v25 = (os_log_s *)&_os_log_default;
        id v26 = &_os_log_default;
      }

      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "kMfi4Auth_Action_ReadUserName", buf, 2u);
      }

      uint64_t v22 = *(unsigned __int16 **)(a1 + 40);
      int v23 = *(unsigned __int8 *)(a1 + 36);
LABEL_46:
      uint64_t v21 = mfi4Auth_protocol_initMessage_RequestUserNVMRead(a1, a3, v22, v23, 0LL, 0LL);
      if (!(_DWORD)v21) {
        goto LABEL_47;
      }
      goto LABEL_65;
    case 0xA:
      __int16 v9 = *(_WORD *)(a1 + 200);
      uint64_t v10 = a1;
      id v11 = a3;
      unsigned int v12 = 20992;
LABEL_35:
      uint64_t v21 = mfi4Auth_protocol_initMessage_RequestNVMPublicKeyChallenge(v10, v9, v11, v12);
      if (!(_DWORD)v21) {
        goto LABEL_47;
      }
LABEL_65:
      uint64_t inited = v21;
      break;
    default:
      goto LABEL_47;
  }

  return inited;
}

uint64_t mfi4Auth_protocol_initIdentity(uint64_t a1, int a2)
{
  if (!a1)
  {
    id v16 = logObjectForModule_29();
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initIdentity_cold_2();
    }
    goto LABEL_25;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v18 = logObjectForModule_29();
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initIdentity_cold_3();
    }
LABEL_25:

    uint64_t inited = 0LL;
    goto LABEL_11;
  }

  uint64_t v4 = *(void *)(a1 + 712);
  *(void *)(v4 + 12_Block_object_dispose((const void *)(v1 - 96), 8) = 97LL;
  char v5 = *(void **)(v4 + 120);
  if (v5) {
    free(v5);
  }
  *(void *)(v4 + 120) = malloc(0x61uLL);
  if (a2)
  {
    uint64_t inited = mfi4Auth_protocol_initIdentityCerts(a1);
  }

  else
  {
    *(void *)(a1 + 384) = 97LL;
    char v7 = malloc(0x61uLL);
    *(void *)(a1 + 376) = v7;
    if (!v7) {
      goto LABEL_20;
    }
    char v8 = v7;
    *(void *)(a1 + 352) = 617LL;
    __int16 v9 = malloc(0x269uLL);
    *(void *)(a1 + 344) = v9;
    if (!v9) {
      goto LABEL_20;
    }
    uint64_t v10 = v9;
    *(void *)(a1 + 36_Block_object_dispose((const void *)(v1 - 96), 8) = 557LL;
    id v11 = malloc(0x22DuLL);
    *(void *)(a1 + 360) = v11;
    if (v11)
    {
      unsigned int v12 = v11;
      v8[96] = -89;
      *((_OWORD *)v8 + 2) = xmmword_10019F172;
      *((_OWORD *)v8 + 3) = unk_10019F182;
      *((_OWORD *)v8 + 4) = xmmword_10019F192;
      *((_OWORD *)v8 + 5) = unk_10019F1A2;
      *(_OWORD *)char v8 = pvt_key_test;
      *((_OWORD *)v8 + 1) = unk_10019F162;
      memcpy(v10, &cert_resp_test, 0x269uLL);
      memcpy(v12, &intermediate_cert_resp_test, 0x22DuLL);
      uint64_t inited = 0LL;
      *(void *)(a1 + 392) = 0LL;
    }

    else
    {
LABEL_20:
      uint64_t inited = 0xFFFFFFFFLL;
    }
  }

uint64_t mfi4Auth_protocol_initIdentityCerts(uint64_t a1)
{
  uint64_t v24 = 0LL;
  CFArrayRef theArray = 0LL;
  CFArrayRef v2 = theArray;
  if (theArray) {
    BOOL v3 = v24 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v17 = 0xFFFFFFFFLL;
    if (!theArray) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }

  if (CFArrayGetCount(theArray) != 2
    || (ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0LL)) == 0LL
    || (char v5 = ValueAtIndex, (v6 = CFArrayGetValueAtIndex(theArray, 1LL)) == 0LL))
  {
LABEL_25:
    uint64_t v17 = 0xFFFFFFFFLL;
    goto LABEL_14;
  }

  char v7 = v6;
  size_t Length = SecCertificateGetLength(v5);
  uint64_t v9 = SecCertificateGetLength(v7);
  if (a1)
  {
    if (!*(_BYTE *)(a1 + 30))
    {
      size_t v10 = v9;
      id v11 = malloc(Length);
      *(void *)(a1 + 344) = v11;
      if (v11)
      {
        unsigned int v12 = v11;
        id v13 = malloc(v10);
        *(void *)(a1 + 360) = v13;
        if (v13)
        {
          BytePtr = (const void *)SecCertificateGetBytePtr(v5);
          memcpy(v12, BytePtr, Length);
          id v15 = *(void **)(a1 + 360);
          id v16 = (const void *)SecCertificateGetBytePtr(v7);
          memcpy(v15, v16, v10);
          uint64_t v17 = 0LL;
          *(void *)(a1 + 352) = Length;
          *(void *)(a1 + 36_Block_object_dispose((const void *)(v1 - 96), 8) = v10;
          *(void *)(a1 + 376) = 0LL;
          *(void *)(a1 + 392) = v24;
          goto LABEL_14;
        }
      }

      goto LABEL_25;
    }

    id v23 = logObjectForModule_29();
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initIdentityCerts_cold_3();
    }
  }

  else
  {
    id v21 = logObjectForModule_29();
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initIdentityCerts_cold_2();
    }
  }

  uint64_t v17 = 0LL;
LABEL_14:
  CFArrayRef v2 = theArray;
  if (theArray)
  {
LABEL_15:
    CFRelease(v2);
    CFArrayRef theArray = 0LL;
  }

uint64_t copyDeviceIdentityCertificates(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACCUserDefaults sharedDefaults](&OBJC_CLASS___ACCUserDefaults, "sharedDefaults"));
  id v5 = [v4 integerForKey:@"IdentityCertRefreshInterval"];
  double v6 = (double)(uint64_t)v5;

  if (!v5) {
    double v6 = 86400.0;
  }
  if (gLogObjects && gNumLogObjects >= 56)
  {
    char v7 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    char v7 = (os_log_s *)&_os_log_default;
    id v8 = &_os_log_default;
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    double v20 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "copyDeviceIdentityCertificates interval: %f\n",  buf,  0xCu);
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", 4LL));
  size_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  v6,  @"Count",  @"RefreshInterval",  v9));
  v18[1] = v10;
  id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v18,  &v17,  2LL));
  unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v11));

  uint64_t v13 = MFAADeviceIdentityCopyCertificate(0LL, v12, 0LL, a1, a2);
  if (gLogObjects && gNumLogObjects >= 56)
  {
    id v14 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v14 = (os_log_s *)&_os_log_default;
    id v15 = &_os_log_default;
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v20) = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "copyDeviceIdentityCertificates completed: %d\n",  buf,  8u);
  }

  if (!*a2) {
    uint64_t v13 = 0LL;
  }

  return v13;
}

uint64_t seckey_sign(uint64_t a1, CFIndex a2, const UInt8 *a3, size_t *a4, void *a5)
{
  if (gLogObjects && gNumLogObjects >= 56)
  {
    size_t v10 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    size_t v10 = (os_log_s *)&_os_log_default;
    id v11 = &_os_log_default;
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v30) = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "seckey_sign\n", (uint8_t *)&v30, 2u);
  }

  unsigned int v12 = CFDataCreate(kCFAllocatorDefault, a3, a2);
  Signature = (const __CFData *)MFAADeviceIdentityCreateSignature(0LL, a1, v12);
  id v14 = Signature;
  if (Signature)
  {
    unint64_t v15 = *a4;
    if (v15 >= CFDataGetLength(Signature))
    {
      *a4 = CFDataGetLength(v14);
      BytePtr = CFDataGetBytePtr(v14);
      memcpy(a5, BytePtr, *a4);
      id v18 = _dumpSimpleHex(v12);
      if (gLogObjects && gNumLogObjects >= 56)
      {
        id v19 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v19 = (os_log_s *)&_os_log_default;
        id v26 = &_os_log_default;
      }

      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        int v30 = 138412290;
        id v31 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "seckey_sign: challenge: %@\n",  (uint8_t *)&v30,  0xCu);
      }

      int v27 = _dumpSimpleHex(v14);
      if (gLogObjects && gNumLogObjects >= 56)
      {
        id v28 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v28 = (os_log_s *)&_os_log_default;
        id v29 = &_os_log_default;
      }

      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        int v30 = 138412290;
        id v31 = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "seckey_sign: signature: %@\n",  (uint8_t *)&v30,  0xCu);
      }

      uint64_t v21 = 0LL;
LABEL_58:
      CFRelease(v14);
      if (!v12) {
        return v21;
      }
      goto LABEL_42;
    }

    if (gLogObjects && gNumLogObjects >= 56)
    {
      id v16 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v16 = (os_log_s *)&_os_log_default;
      id v22 = &_os_log_default;
    }

    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v30) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "seckey_sign: signature buffer is too small\n",  (uint8_t *)&v30,  2u);
    }

    uint64_t v21 = 4294967289LL;
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      id v16 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v16 = (os_log_s *)&_os_log_default;
      id v20 = &_os_log_default;
    }

    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v30) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "seckey_sign: MFAADeviceIdentityCreateSignature error\n",  (uint8_t *)&v30,  2u);
    }

    uint64_t v21 = 0xFFFFFFFFLL;
  }

  if (gLogObjects && gNumLogObjects >= 56)
  {
    id v23 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v23 = (os_log_s *)&_os_log_default;
    id v24 = &_os_log_default;
  }

  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    int v30 = 67109120;
    LODWORD(v31) = v21;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "seckey_sign: error: %d\n", (uint8_t *)&v30, 8u);
  }

  if (v14) {
    goto LABEL_58;
  }
  if (v12) {
LABEL_42:
  }
    CFRelease(v12);
  return v21;
}

uint64_t mfi4Auth_protocol_processIncomingMessage(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  if (a1)
  {
    if (*(_BYTE *)(a1 + 30))
    {
      id v37 = logObjectForModule_29();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_processIncomingMessage_cold_27();
      }
    }

    else if (a3)
    {
      int MsgID = iAP2MsgGetMsgID(a3);
      if (MsgID)
      {
        int v9 = MsgID;
        if (gLogObjects && gNumLogObjects >= 56)
        {
          size_t v10 = (os_log_s *)*(id *)(gLogObjects + 440);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          size_t v10 = (os_log_s *)&_os_log_default;
          id v11 = &_os_log_default;
        }

        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          int v12 = *(unsigned __int16 *)(a1 + 28);
          v43[0] = 67109376;
          v43[1] = v12;
          __int16 v44 = 1024;
          int v45 = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_processIncomingMessage: cmd:0x%x  rsp:0x%x",  (uint8_t *)v43,  0xEu);
        }

        if (v9 > 21241)
        {
          switch(v9)
          {
            case 21242:
              if (a2) {
                goto LABEL_103;
              }
              if (gLogObjects && gNumLogObjects >= 56)
              {
                unint64_t v15 = (os_log_s *)*(id *)(gLogObjects + 440);
              }

              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
                unint64_t v15 = (os_log_s *)&_os_log_default;
                id v25 = &_os_log_default;
              }

              if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
                mfi4Auth_protocol_processIncomingMessage_cold_9();
              }

              return 1LL;
            case 21245:
              if (a2) {
                goto LABEL_103;
              }
              if (gLogObjects && gNumLogObjects >= 56)
              {
                id v16 = (os_log_s *)*(id *)(gLogObjects + 440);
              }

              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
                id v16 = (os_log_s *)&_os_log_default;
                id v26 = &_os_log_default;
              }

              if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
                mfi4Auth_protocol_processIncomingMessage_cold_20();
              }

              id v27 = logObjectForModule_29();
              id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
              if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
                mfi4Auth_protocol_processIncomingMessage_cold_19();
              }
              break;
            case 21246:
              if (a2) {
                goto LABEL_103;
              }
              if (gLogObjects && gNumLogObjects >= 56)
              {
                uint64_t v17 = (os_log_s *)*(id *)(gLogObjects + 440);
              }

              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
                uint64_t v17 = (os_log_s *)&_os_log_default;
                id v28 = &_os_log_default;
              }

              if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
                mfi4Auth_protocol_processIncomingMessage_cold_22();
              }

              mfi4Auth_protocol_handle_AuthenticationFailed(a1, a3, a4);
              return 1LL;
            case 21247:
              if (!a2) {
                goto LABEL_103;
              }
              int v18 = *(_DWORD *)(a1 + 160);
              if (v18 == 2)
              {
                if (*(_WORD *)(a1 + 28) != 20991) {
                  goto LABEL_103;
                }
              }

              else if (v18 == 1 && *(unsigned __int16 *)(a1 + 28) - 20757 < 0xFFFFFFFE)
              {
                goto LABEL_103;
              }

              if (gLogObjects && gNumLogObjects >= 56)
              {
                id v33 = (os_log_s *)*(id *)(gLogObjects + 440);
              }

              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
                id v33 = (os_log_s *)&_os_log_default;
                id v34 = &_os_log_default;
              }

              if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(v43[0]) = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "Received AuthenticationSucceeded",  (uint8_t *)v43,  2u);
              }

              id v35 = logObjectForModule_29();
              id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
              if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
                mfi4Auth_protocol_processIncomingMessage_cold_24();
              }
              break;
            default:
LABEL_69:
              if (gLogObjects && gNumLogObjects >= 56)
              {
                id v14 = (os_log_s *)*(id *)(gLogObjects + 440);
              }

              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
                id v14 = (os_log_s *)&_os_log_default;
                id v29 = &_os_log_default;
              }

              if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
                mfi4Auth_protocol_processIncomingMessageRelay_cold_18();
              }
              break;
          }
        }

        else
        {
          switch(v9)
          {
            case 21009:
              if (a2 || *(_DWORD *)(a1 + 160) != 1 || *(_WORD *)(a1 + 28) != 20752) {
                goto LABEL_103;
              }
              id v13 = logObjectForModule_29();
              id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
              if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
                mfi4Auth_protocol_processIncomingMessage_cold_11();
              }
              break;
            case 21010:
              if (!a2) {
                goto LABEL_103;
              }
              int v19 = *(_DWORD *)(a1 + 160);
              if ((v19 - 3) <= 0xFFFFFFFD)
              {
                id v40 = logObjectForModule_29();
                id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
                if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
                  break;
                }
                goto LABEL_140;
              }

              if (v19 == 2)
              {
                if ((*(_WORD *)(a1 + 28) & 0xFFFD) != 0x5111)
                {
                  id v42 = logObjectForModule_29();
                  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
                  if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
                    break;
                  }
                  goto LABEL_140;
                }
              }

              else if (v19 == 1 && *(unsigned __int16 *)(a1 + 28) - 20757 <= 0xFFFFFFFD)
              {
                id v20 = logObjectForModule_29();
                id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
                if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
                  break;
                }
LABEL_140:
                mfi4Auth_protocol_processIncomingMessage_cold_12();
                break;
              }

              id v41 = logObjectForModule_29();
              id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
              if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
                mfi4Auth_protocol_processIncomingMessage_cold_13();
              }
              break;
            case 21011:
              if (!a2 && *(_DWORD *)(a1 + 160) || *(_WORD *)(a1 + 28) != 20754) {
                goto LABEL_103;
              }
              id v21 = logObjectForModule_29();
              id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
              if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
                mfi4Auth_protocol_processIncomingMessage_cold_16();
              }
              break;
            case 21012:
              if (!a2 || *(_DWORD *)(a1 + 160) != 2 || (*(_WORD *)(a1 + 28) & 0xFFFD) != 0x5111) {
                goto LABEL_103;
              }
              id v22 = logObjectForModule_29();
              id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
              if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
                mfi4Auth_protocol_processIncomingMessage_cold_17();
              }
              break;
            case 21013:
              goto LABEL_69;
            case 21014:
              if (a2 || *(_DWORD *)(a1 + 160)) {
                goto LABEL_103;
              }
              id v23 = logObjectForModule_29();
              id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
              if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
                mfi4Auth_protocol_processIncomingMessage_cold_18();
              }
              break;
            default:
              if (v9 != 20993)
              {
                if (v9 != 20994) {
                  goto LABEL_69;
                }
                if (!a2 && *(_WORD *)(a1 + 28) == 20736)
                {
                  mfi4Auth_protocol_handle_AuthSetupFailed(a1, a3);
                  return 1LL;
                }

                goto LABEL_103;
              }

              if (a2 || *(_WORD *)(a1 + 28) != 20736) {
                goto LABEL_103;
              }
              id v24 = logObjectForModule_29();
              id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
              if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
                mfi4Auth_protocol_processIncomingMessage_cold_8();
              }
              break;
          }
        }
      }

      else
      {
        id v39 = logObjectForModule_29();
        id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_protocol_processIncomingMessage_cold_5();
        }
      }
    }

    else
    {
      id v38 = logObjectForModule_29();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_processIncomingMessage_cold_4();
      }
    }
  }

  else
  {
    id v36 = logObjectForModule_29();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processIncomingMessage_cold_3();
    }
  }

LABEL_103:
  if (gLogObjects && gNumLogObjects >= 56)
  {
    int v30 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v30 = (os_log_s *)&_os_log_default;
    id v31 = &_os_log_default;
  }

  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
    mfi4Auth_protocol_processIncomingMessage_cold_1();
  }

  return 0LL;
}

uint64_t mfi4Auth_protocol_processIncomingMessageExtra( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _BYTE *a5)
{
  if (!a1)
  {
    id v20 = logObjectForModule_29();
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processIncomingMessageExtra_cold_3();
    }
    goto LABEL_63;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v22 = logObjectForModule_29();
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processIncomingMessageExtra_cold_9();
    }
    goto LABEL_63;
  }

  if (!a3)
  {
    id v23 = logObjectForModule_29();
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processIncomingMessageExtra_cold_4();
    }
    goto LABEL_63;
  }

  int MsgID = iAP2MsgGetMsgID(a3);
  if (!MsgID)
  {
    id v24 = logObjectForModule_29();
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_processIncomingMessage_cold_5();
    }
LABEL_63:

    goto LABEL_64;
  }

  int v11 = MsgID;
  if (gLogObjects && gNumLogObjects >= 56)
  {
    int v12 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v12 = (os_log_s *)&_os_log_default;
    id v13 = &_os_log_default;
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = *(unsigned __int16 *)(a1 + 28);
    v26[0] = 67109376;
    v26[1] = v14;
    __int16 v27 = 1024;
    int v28 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_processIncomingMessageExtra: cmd:0x%x  rsp:0x%x",  (uint8_t *)v26,  0xEu);
  }

  if (v11 <= 21060)
  {
    switch(v11)
    {
      case 21045:
        return 1LL;
      case 21046:
      case 21047:
      case 21049:
      case 21051:
      case 21052:
      case 21053:
        goto LABEL_30;
      case 21048:
        return 1LL;
      case 21050:
        return 1LL;
      case 21054:
        if (!(_DWORD)a2
          || *(_WORD *)(a1 + 28) != 20797
          || mfi4Auth_protocol_handle_NVMAuthStart(a1, a3, (uint64_t)a4, (uint64_t)a5))
        {
          goto LABEL_64;
        }

        return 1LL;
      default:
        if (v11 != 21042) {
          goto LABEL_30;
        }
        if (!(_DWORD)a2) {
          goto LABEL_64;
        }
        unsigned int v15 = *(unsigned __int16 *)(a1 + 28) - 20784;
        if (v15 > 0x12
          || ((1 << v15) & 0x40003) == 0
          || mfi4Auth_protocol_handle_NVMReadResponse(a1, a3, a4))
        {
          goto LABEL_64;
        }

        return 1LL;
    }
  }

  if (v11 == 21061)
  {
    if (!(_DWORD)a2
      || *(_WORD *)(a1 + 28) != 20799
      || mfi4Auth_protocol_handle_NVMAuthFinish(a1, a3, a4, (uint64_t)a5))
    {
      goto LABEL_64;
    }
  }

  else
  {
    if (v11 != 21066)
    {
LABEL_30:
      if (gLogObjects && gNumLogObjects >= 56)
      {
        id v16 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v16 = (os_log_s *)&_os_log_default;
        id v19 = &_os_log_default;
      }

      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_processIncomingMessageRelay_cold_18();
      }
      uint64_t v17 = 1LL;
      goto LABEL_54;
    }

    if (!(_DWORD)a2
      || *(_WORD *)(a1 + 28) != 20809
      || mfi4Auth_protocol_handle_NVMOperationResponse(a1, a3, a4, (uint64_t)a5))
    {
LABEL_64:
      if (gLogObjects && gNumLogObjects >= 56)
      {
        id v16 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v16 = (os_log_s *)&_os_log_default;
        id v25 = &_os_log_default;
      }

      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_processIncomingMessageExtra_cold_1();
      }
      uint64_t v17 = 0LL;
LABEL_54:

      return v17;
    }
  }

  return 1LL;
}

uint64_t __createCertificateRefWithData(void *a1, int a2)
{
  id v3 = a1;
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v4 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v4 = (os_log_s *)&_os_log_default;
    id v5 = &_os_log_default;
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v14 = 136315394;
    unsigned int v15 = "__createCertificateRefWithData";
    __int16 v16 = 2048;
    id v17 = [v3 length];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s (certData.length: %lu)", (uint8_t *)&v14, 0x16u);
  }

  if (v3)
  {
    if (!a2)
    {
      size_t v10 = (void *)SecCMSCertificatesOnlyMessageCopyCertificates(v3);
      int v9 = v10;
      if (!v10 || ![v10 count])
      {
        id v12 = v3;
        uint64_t v11 = SecCertificateCreateWithBytes( kCFAllocatorDefault,  [v12 bytes],  objc_msgSend(v12, "length"));
        goto LABEL_20;
      }

void sub_10013E15C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, id a18)
{
}

void sub_10013EDA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10013EFB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10013F1F8(_Unwind_Exception *a1)
{
}

uint64_t t56_protocol_init(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5, uint64_t a6, __int16 a7)
{
  if (gLogObjects && gNumLogObjects >= 61)
  {
    uint64_t v11 = a2;
    uint64_t v12 = a6;
    id v13 = *(os_log_s **)(gLogObjects + 480);
  }

  else
  {
    uint64_t v11 = a2;
    uint64_t v12 = a6;
    id v13 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    id v19 = "t56_protocol_init";
    __int16 v20 = 1024;
    int v21 = 81;
    __int16 v22 = 1024;
    int v23 = a3;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%s:%d role %d", buf, 0x18u);
  }

  uint64_t v14 = 4294967294LL;
  if (a1 && a4 && a5 <= 1)
  {
    *(void *)a1 = v11;
    *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 80), 8) = a3;
    *(_WORD *)(a1 + 32) = a7;
    *(void *)(a1 + 16) = 0LL;
    *(void *)(a1 + 24) = v12;
    *(_BYTE *)(a1 + 13) = a4;
    *(_BYTE *)(a1 + 14) = a5;
    *(_BYTE *)(a1 + 12) = a5;
    *(_BYTE *)(a1 + 40) = 5;
    *(_DWORD *)(a1 + 44) = -1;
    *(_BYTE *)(a1 + 4_Block_object_dispose((const void *)(v1 - 80), 8) = 0;
    *(void *)(a1 + 84) = 0xFFFFFFFF00000000LL;
    uint64_t v14 = t56_util_init(a1);
  }

  if (gLogObjects && gNumLogObjects >= 61)
  {
    unsigned int v15 = *(os_log_s **)(gLogObjects + 480);
  }

  else
  {
    unsigned int v15 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
    t56_protocol_init_cold_1();
  }
  return v14;
}

void t56_protocol_cleanup(uint64_t a1, void *a2, _WORD *a3)
{
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 61)
    {
      id v6 = *(os_log_s **)(gLogObjects + 480);
    }

    else
    {
      id v6 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(a1 + 8);
      int v14 = 136315650;
      unsigned int v15 = "t56_protocol_cleanup";
      __int16 v16 = 1024;
      int v17 = 122;
      __int16 v18 = 1024;
      int v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%s:%d role %d", (uint8_t *)&v14, 0x18u);
    }

    t56_util_cleanup(a1);
    *(_BYTE *)(a1 + 12) = *(_BYTE *)(a1 + 14);
    *(_DWORD *)(a1 + 36) = 0;
    if (a2) {
      *a2 = *(void *)(a1 + 24);
    }
    if (a3) {
      *a3 = *(_WORD *)(a1 + 32);
    }
    if (gLogObjects && gNumLogObjects >= 61)
    {
      id v8 = *(os_log_s **)(gLogObjects + 480);
    }

    else
    {
      id v8 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      int v9 = *(_DWORD *)(a1 + 8);
      int v14 = 136315650;
      unsigned int v15 = "t56_protocol_cleanup";
      __int16 v16 = 1024;
      int v17 = 140;
      __int16 v18 = 1024;
      int v19 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s:%d role %d, clear authState and rx digest / cert cache",  (uint8_t *)&v14,  0x18u);
    }

    *(_BYTE *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 4_Block_object_dispose((const void *)(v1 - 80), 8) = 0;
    unsigned int v10 = *(_DWORD *)(a1 + 44);
    if ((v10 & 0x80000000) == 0)
    {
      t56_util_cancelTimer((const void **)a1, v10);
      *(_DWORD *)(a1 + 44) = -1;
    }

    if (gLogObjects && gNumLogObjects >= 61)
    {
      uint64_t v11 = *(os_log_s **)(gLogObjects + 480);
    }

    else
    {
      uint64_t v11 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      int v12 = *(_DWORD *)(a1 + 8);
      int v14 = 136315650;
      unsigned int v15 = "t56_protocol_cleanup";
      __int16 v16 = 1024;
      int v17 = 153;
      __int16 v18 = 1024;
      int v19 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s:%d role %d, clear tx digest / cert cache",  (uint8_t *)&v14,  0x18u);
    }

    unsigned int v13 = *(_DWORD *)(a1 + 88);
    if ((v13 & 0x80000000) == 0)
    {
      t56_util_cancelTimer((const void **)a1, v13);
      *(_DWORD *)(a1 + 8_Block_object_dispose((const void *)(v1 - 80), 8) = -1;
    }
  }

uint64_t t56_protocol_start(uint64_t a1)
{
  if (!a1 || !*(void *)(a1 + 24) || !*(_WORD *)(a1 + 32))
  {
    uint64_t v3 = 4294967294LL;
    goto LABEL_20;
  }

  if (gLogObjects && gNumLogObjects >= 61)
  {
    CFArrayRef v2 = *(os_log_s **)(gLogObjects + 480);
  }

  else
  {
    CFArrayRef v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  BOOL v4 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(unsigned __int16 *)(a1 + 32);
    int v22 = 136315906;
    int v23 = "t56_protocol_start";
    __int16 v24 = 1024;
    int v25 = 175;
    __int16 v26 = 1024;
    unsigned int v27 = v5;
    __int16 v28 = 1024;
    int v29 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s:%d role %d, outMsgBufferSize %d",  (uint8_t *)&v22,  0x1Eu);
  }

  if (*(_DWORD *)(a1 + 8)
    || (int v12 = *(unsigned __int8 **)(a1 + 24)) == 0LL
    || (unsigned int v13 = *(unsigned __int16 *)(a1 + 32), v13 < 7))
  {
    int inited = -2;
LABEL_14:
    unsigned int v8 = *(_DWORD *)(a1 + 8);
    if (v8 == 1) {
      unsigned int v9 = 0;
    }
    else {
      unsigned int v9 = inited;
    }
    if (v8 >= 2) {
      uint64_t v3 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v3 = v9;
    }
    goto LABEL_20;
  }

  int inited = t56_protocol_initMsg_SESSION(v4, 0, 1, 0, v12, v13, (_WORD *)(a1 + 34));
  if (inited) {
    goto LABEL_14;
  }
  unsigned int v14 = t56_protocol_timeoutForRequest(a1, **(unsigned __int8 **)(a1 + 24));
  if ((*(_DWORD *)(a1 + 44) & 0x80000000) == 0)
  {
    unsigned int v15 = (os_log_s *)logObjectForModule_28();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = *(_DWORD *)(a1 + 36);
      else {
        int v17 = off_1001FE3D0[v16 - 1];
      }
      int v22 = 136316162;
      int v23 = "t56_protocol_start";
      __int16 v24 = 1024;
      int v25 = 194;
      __int16 v26 = 1024;
      unsigned int v27 = v14;
      __int16 v28 = 1024;
      int v29 = v16;
      __int16 v30 = 2080;
      id v31 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "%s:%d Cancel responseTimer, %u ms, outMsgType %u(%s)",  (uint8_t *)&v22,  0x28u);
    }

    t56_util_cancelTimer((const void **)a1, *(_DWORD *)(a1 + 44));
  }

  __int16 v18 = (os_log_s *)logObjectForModule_28();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = **(unsigned __int8 **)(a1 + 24);
    int v22 = 136315906;
    int v23 = "t56_protocol_start";
    __int16 v24 = 1024;
    int v25 = 198;
    __int16 v26 = 1024;
    unsigned int v27 = v14;
    __int16 v28 = 1024;
    int v29 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%s:%d Start responseTimer, %u ms, outMsgType %u",  (uint8_t *)&v22,  0x1Eu);
  }

  int v20 = t56_util_callbackOnTimer((const void **)a1, v14, (uint64_t)_T56Protocol_timeoutCallback, 0LL);
  if ((v20 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 44) = v20;
    t56_protocol_sendData(a1, *(const UInt8 **)(a1 + 24), *(unsigned __int16 *)(a1 + 34));
    int inited = 0;
    goto LABEL_14;
  }

  int v21 = (os_log_s *)logObjectForModule_28();
  uint64_t v3 = 0LL;
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    int v22 = 136315394;
    int v23 = "t56_protocol_start";
    __int16 v24 = 1024;
    int v25 = 201;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "%s:%d Failed to start timer!!!",  (uint8_t *)&v22,  0x12u);
    uint64_t v3 = 0LL;
  }

uint64_t t56_protocol_initMsg_SESSION( uint64_t a1, int a2, int a3, int a4, unsigned __int8 *a5, unsigned int a6, _WORD *a7)
{
  if (gLogObjects && gNumLogObjects >= 61)
  {
    int v12 = *(os_log_s **)(gLogObjects + 480);
  }

  else
  {
    int v12 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136316162;
    int v21 = "t56_protocol_initMsg_SESSION";
    __int16 v22 = 1024;
    int v23 = 1267;
    __int16 v24 = 1024;
    int v25 = a2;
    __int16 v26 = 1024;
    int v27 = a3;
    __int16 v28 = 1024;
    int v29 = a4;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "%s:%d sessionID %d, version %d, sessionCommand %d",  buf,  0x24u);
  }

  uint64_t v13 = 4294967294LL;
  if (a5 && a6 >= 7)
  {
    uint64_t v13 = 0LL;
    *a5 = 1;
    a5[1] = BYTE1(a2);
    a5[2] = a2;
    a5[3] = BYTE1(a3);
    a5[4] = a3;
    a5[5] = a4;
    a5[6] = 0;
    *a7 = 7;
  }

  int v14 = *a5;
  if (gLogObjects && gNumLogObjects >= 61)
  {
    unsigned int v15 = *(os_log_s **)(gLogObjects + 480);
  }

  else
  {
    unsigned int v15 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    if ((v14 - 1) > 7u)
    {
      int v17 = "UNKNOWN";
      if (a7) {
        goto LABEL_20;
      }
    }

    else
    {
      int v17 = off_1001FE3D0[(char)(v14 - 1)];
      if (a7)
      {
LABEL_20:
        int v18 = (unsigned __int16)*a7;
LABEL_23:
        *(_DWORD *)buf = 136316674;
        int v21 = "t56_protocol_initMsg_SESSION";
        __int16 v22 = 1024;
        int v23 = 1287;
        __int16 v24 = 1024;
        int v25 = v13;
        __int16 v26 = 1024;
        int v27 = a2;
        __int16 v28 = 1024;
        int v29 = v14;
        __int16 v30 = 2080;
        id v31 = v17;
        __int16 v32 = 1024;
        int v33 = v18;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "%s:%d result %d, sessionID %u, msgType %d(%s), msgDataOutLen %d",  buf,  0x34u);
        return v13;
      }
    }

    int v18 = -1;
    goto LABEL_23;
  }

  return v13;
}

uint64_t t56_protocol_timeoutForRequest(uint64_t a1, int a2)
{
  if (gLogObjects && gNumLogObjects >= 61)
  {
    BOOL v4 = *(os_log_s **)(gLogObjects + 480);
  }

  else
  {
    BOOL v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  uint64_t result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    t56_protocol_timeoutForRequest_cold_1(a1, a2, v4);
    return 0LL;
  }

  return result;
}

const char *t56_protocol_msgTypeString(int a1)
{
  else {
    return off_1001FE3D0[a1 - 1];
  }
}

void _T56Protocol_timeoutCallback(uint64_t a1, int a2, unsigned int a3)
{
  if (a1 && (a2 & 0x80000000) == 0)
  {
    int v6 = a3;
    if (gLogObjects && gNumLogObjects >= 61)
    {
      int v7 = *(os_log_s **)(gLogObjects + 480);
    }

    else
    {
      int v7 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *(_DWORD *)(a1 + 8);
      int v15 = 136316674;
      int v16 = "_T56Protocol_timeoutCallback";
      __int16 v17 = 1024;
      int v18 = 571;
      __int16 v19 = 1024;
      int v20 = a2;
      __int16 v21 = 1024;
      int v22 = v6;
      __int16 v23 = 1024;
      int v24 = v8;
      __int16 v25 = 1024;
      int v26 = HIWORD(a3) & 0xF;
      __int16 v27 = 1024;
      unsigned int v28 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s:%d Timeout: timer %d, type %d, role %d, slot %d, context %u",  (uint8_t *)&v15,  0x30u);
    }

    int v9 = *(_DWORD *)(a1 + 8);
    if (!v9)
    {
      if (*(_DWORD *)(a1 + 44) == a2)
      {
        *(_DWORD *)(a1 + 44) = -1;
        if ((_BYTE)a3)
        {
          if (a3 == 1)
          {
            if (gLogObjects && gNumLogObjects >= 61)
            {
              unsigned int v10 = *(os_log_s **)(gLogObjects + 480);
            }

            else
            {
              unsigned int v10 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
            {
              int v12 = **(unsigned __int8 **)(a1 + 24);
              int v13 = *(unsigned __int16 *)(a1 + 34);
              int v15 = 136316162;
              int v16 = "_T56Protocol_timeoutCallback";
              __int16 v17 = 1024;
              int v18 = 612;
              __int16 v19 = 1024;
              int v20 = HIWORD(a3) & 0xF;
              __int16 v21 = 1024;
              int v22 = v12;
              __int16 v23 = 1024;
              int v24 = v13;
              _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s:%d slot %d, resend message %d, len %d",  (uint8_t *)&v15,  0x24u);
            }

            t56_protocol_sendData(a1, *(const UInt8 **)(a1 + 24), *(unsigned __int16 *)(a1 + 34));
          }

          else
          {
            if (gLogObjects && gNumLogObjects >= 61)
            {
              uint64_t v11 = *(os_log_s **)(gLogObjects + 480);
            }

            else
            {
              uint64_t v11 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
              _T56Protocol_timeoutCallback_cold_3();
            }
          }
        }
      }

      int v9 = *(_DWORD *)(a1 + 8);
    }

    if (v9)
    {
      if (v9 == 1)
      {
        if (*(_DWORD *)(a1 + 88) == a2) {
          *(_DWORD *)(a1 + 8_Block_object_dispose((const void *)(v1 - 80), 8) = -1;
        }
      }

      else
      {
        if (gLogObjects && gNumLogObjects >= 61)
        {
          int v14 = *(os_log_s **)(gLogObjects + 480);
        }

        else
        {
          int v14 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
          _T56Protocol_timeoutCallback_cold_1();
        }
      }
    }
  }

uint64_t t56_protocol_sendData(uint64_t a1, const UInt8 *a2, unsigned int a3)
{
  unsigned int v4 = 0;
  uint64_t v5 = 4294967294LL;
  if (a1 && a2 && (unsigned __int16)(a3 - 1) <= 0x7CFu)
  {
    unsigned int v4 = *a2;
    if (gLogObjects && gNumLogObjects >= 61)
    {
      int v8 = *(os_log_s **)(gLogObjects + 480);
    }

    else
    {
      int v8 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v9 = *(_DWORD *)(a1 + 36);
      if (v9 - 1 > 7) {
        unsigned int v10 = "UNKNOWN";
      }
      else {
        unsigned int v10 = off_1001FE3D0[v9 - 1];
      }
      else {
        uint64_t v11 = off_1001FE3D0[(char)(v4 - 1)];
      }
      int v15 = 136316930;
      int v16 = "t56_protocol_sendData";
      __int16 v17 = 1024;
      int v18 = 378;
      __int16 v19 = 1024;
      int v20 = 0;
      __int16 v21 = 1024;
      unsigned int v22 = a3;
      __int16 v23 = 1024;
      unsigned int v24 = v9;
      __int16 v25 = 2080;
      int v26 = v10;
      __int16 v27 = 1024;
      unsigned int v28 = v4;
      __int16 v29 = 2080;
      __int16 v30 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s:%d ver %d, dataOutLen %d, lastMsgSent %d(%s) -> %d(%s)",  (uint8_t *)&v15,  0x3Eu);
    }

    *(_DWORD *)(a1 + 36) = v4;
    t56_util_sendData((const void **)a1, a2, a3);
    uint64_t v5 = 0LL;
  }

  if (gLogObjects && gNumLogObjects >= 61)
  {
    int v12 = *(os_log_s **)(gLogObjects + 480);
  }

  else
  {
    int v12 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    else {
      int v13 = off_1001FE3D0[(char)(v4 - 1)];
    }
    int v15 = 136316674;
    int v16 = "t56_protocol_sendData";
    __int16 v17 = 1024;
    int v18 = 388;
    __int16 v19 = 1024;
    int v20 = v5;
    __int16 v21 = 1024;
    unsigned int v22 = 0;
    __int16 v23 = 1024;
    unsigned int v24 = v4;
    __int16 v25 = 2080;
    int v26 = v13;
    __int16 v27 = 1024;
    unsigned int v28 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%s:%d result %d, ver %d, msgType %d(%s), dataOutLen %d",  (uint8_t *)&v15,  0x34u);
  }

  return v5;
}

uint64_t t56_protocol_processIncomingData(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  int v5 = 0;
  unsigned __int16 v33 = 0;
  uint64_t v6 = 4294967294LL;
  if (a1 && a2)
  {
    unsigned int v8 = 0;
    if (a3)
    {
      unsigned int v9 = (int *)(a1 + 8);
      if (*(_DWORD *)(a1 + 8) >= 2u)
      {
        if (gLogObjects && gNumLogObjects >= 61)
        {
          int v13 = *(os_log_s **)(gLogObjects + 480);
        }

        else
        {
          int v13 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          t56_protocol_processIncomingData_cold_4();
        }
        int v5 = 0;
LABEL_22:
        unsigned int v8 = 0;
        uint64_t v6 = 0xFFFFFFFFLL;
      }

      else
      {
        int v5 = *a2;
        unsigned int v10 = *(unsigned __int8 **)(a1 + 24);
        unsigned int v11 = *(unsigned __int16 *)(a1 + 32);
        if (gLogObjects && gNumLogObjects >= 61)
        {
          int v12 = *(os_log_s **)(gLogObjects + 480);
        }

        else
        {
          int v12 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          int v14 = *v9;
          else {
            int v15 = off_1001FE3D0[(char)(v5 - 1)];
          }
          *(_DWORD *)buf = 136317186;
          id v35 = "t56_protocol_processIncomingData";
          __int16 v36 = 1024;
          int v37 = 251;
          __int16 v38 = 1024;
          int v39 = v14;
          __int16 v40 = 1024;
          int v41 = 0;
          __int16 v42 = 1024;
          *(_DWORD *)id v43 = v5;
          *(_WORD *)&v43[4] = 2080;
          *(void *)&v43[6] = v15;
          *(_WORD *)&v43[14] = 1024;
          *(_DWORD *)&v43[16] = a3;
          __int16 v44 = 1024;
          BOOL v45 = v10 != 0LL;
          __int16 v46 = 1024;
          unsigned int v47 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "%s:%d role %d, ver %d, msgType %d(%s), dataInLen %d, _dataOut(%d), _dataOutSize %d",  buf,  0x40u);
        }

        unsigned int v8 = 0;
        uint64_t v6 = 4294967294LL;
        if (v10 && v11)
        {
          if (!t56_protocol_checkValidMessageHeaderAndSize(a1, *a2, a3)) {
            goto LABEL_53;
          }
          *(_BYTE *)(a1 + 40) = 0;
          if (!*(_DWORD *)(a1 + 8))
          {
            unsigned int v16 = *(_DWORD *)(a1 + 44);
            if ((v16 & 0x80000000) == 0)
            {
              t56_util_cancelTimer((const void **)a1, v16);
              *(_DWORD *)(a1 + 44) = -1;
            }

            switch(v5)
            {
              case 2:
                uint64_t v17 = _t56_protocol_handleResponse_SESSION_RSP(a1, a2, a3, v10, v11, &v33);
                goto LABEL_38;
              case 4:
                uint64_t v17 = _t56_protocol_handleResponse_DISCOVER_RSP(a1, a2, a3, v10, v11, &v33);
                goto LABEL_38;
              case 6:
                uint64_t v17 = _t56_protocol_handleResponse_DATA(a1, a2, a3, (uint64_t)v10, v11, &v33);
                goto LABEL_38;
              case 8:
                uint64_t v17 = _t56_protocol_handleResponse_STATUS(a1, a2, a3, v10, v11, &v33);
LABEL_38:
                uint64_t v6 = v17;
                break;
              default:
                int v18 = (os_log_s *)logObjectForModule_28();
                if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
                {
                  else {
                    __int16 v32 = off_1001FE358[(char)(v5 - 1)];
                  }
                  *(_DWORD *)buf = 136316418;
                  id v35 = "t56_protocol_processIncomingData";
                  __int16 v36 = 1024;
                  int v37 = 289;
                  __int16 v38 = 1024;
                  int v39 = 0;
                  __int16 v40 = 1024;
                  int v41 = v5;
                  __int16 v42 = 2080;
                  *(void *)id v43 = v32;
                  *(_WORD *)&v43[8] = 1024;
                  *(_DWORD *)&_BYTE v43[10] = a3;
                  _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%s:%d Device: Unexpected MsgType!!! ver %d, msgType %d(%s), dataInLen %d",  buf,  0x2Eu);
                }

                uint64_t v6 = 0xFFFFFFFFLL;
                break;
            }
          }

          if (t56_protocol_checkValidMessageHeaderAndSize(a1, *a2, a3) && *v9 == 1)
          {
            switch(v5)
            {
              case 1:
                uint64_t v20 = _t56_protocol_handleRequest_SESSION(a1, a2, a3, v10, v11, &v33);
                goto LABEL_51;
              case 3:
                _t56_protocol_handleRequest_DISCOVER(a1, a2, a3, v19, 0LL, &v33);
                unsigned int v8 = 0;
                int v5 = 3;
                goto LABEL_48;
              case 5:
                _t56_protocol_handleRequest_POLL(a1, a2, a3, v19, 0LL, &v33);
                unsigned int v8 = 0;
                int v5 = 5;
LABEL_48:
                uint64_t v6 = 4294967294LL;
                goto LABEL_54;
              case 6:
                uint64_t v20 = _t56_protocol_handleRequest_DATA(a1, a2, a3, v10, v11, &v33);
                goto LABEL_51;
              case 7:
                uint64_t v20 = _t56_protocol_handleRequest_TERMINATE(a1, a2, a3, v10, v11, &v33);
LABEL_51:
                uint64_t v6 = v20;
                break;
              default:
                __int16 v21 = (os_log_s *)logObjectForModule_28();
                if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
                {
                  else {
                    unsigned int v22 = off_1001FE390[(char)(v5 - 1)];
                  }
                  *(_DWORD *)buf = 136316418;
                  id v35 = "t56_protocol_processIncomingData";
                  __int16 v36 = 1024;
                  int v37 = 324;
                  __int16 v38 = 1024;
                  int v39 = 0;
                  __int16 v40 = 1024;
                  int v41 = v5;
                  __int16 v42 = 2080;
                  *(void *)id v43 = v22;
                  *(_WORD *)&v43[8] = 1024;
                  *(_DWORD *)&_BYTE v43[10] = a3;
                  _os_log_error_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%s:%d Accessory: Unexpected MsgType!!! ver %d, msgType %d(%s), dataInLen %d",  buf,  0x2Eu);
                }

                goto LABEL_22;
            }
          }

          if ((_DWORD)v6) {
            goto LABEL_53;
          }
          int v28 = v33;
          *(_WORD *)(a1 + 34) = v33;
          if (!v28)
          {
            uint64_t v6 = 0LL;
LABEL_53:
            unsigned int v8 = 0;
            goto LABEL_54;
          }

          unsigned int v8 = *v10;
          if (!*v9)
          {
            unsigned int v29 = t56_protocol_timeoutForRequest(a1, *v10);
            __int16 v30 = (os_log_s *)logObjectForModule_28();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315906;
              id v35 = "t56_protocol_processIncomingData";
              __int16 v36 = 1024;
              int v37 = 346;
              __int16 v38 = 1024;
              int v39 = v29;
              __int16 v40 = 1024;
              int v41 = v8;
              _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "%s:%d Start responseTimer, %u ms, outMsgType %u",  buf,  0x1Eu);
            }

            *(_DWORD *)(a1 + 44) = t56_util_callbackOnTimer( (const void **)a1,  v29,  (uint64_t)_T56Protocol_timeoutCallback,  0LL);
          }

          id v31 = (os_log_s *)logObjectForModule_28();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
            t56_protocol_processIncomingData_cold_2();
          }
          t56_protocol_sendData(a1, v10, v33);
          uint64_t v6 = 0LL;
        }
      }
    }
  }

  else
  {
    unsigned int v8 = 0;
  }

BOOL t56_protocol_checkValidMessageHeaderAndSize(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 61)
    {
      uint64_t v6 = *(os_log_s **)(gLogObjects + 480);
    }

    else
    {
      uint64_t v6 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      else {
        unsigned int v8 = off_1001FE3D0[(char)(a2 - 1)];
      }
      int v26 = 136316418;
      __int16 v27 = "t56_protocol_checkValidMessageHeaderAndSize";
      __int16 v28 = 1024;
      int v29 = 400;
      __int16 v30 = 1024;
      int v31 = a2;
      __int16 v32 = 2080;
      *(void *)unsigned __int16 v33 = v8;
      *(_WORD *)&v33[8] = 1024;
      *(_DWORD *)&v33[10] = a2;
      *(_WORD *)&v33[14] = 1024;
      *(_DWORD *)&v33[16] = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s:%d msgType %d(%s), msgHeader 0x%02X, msgDataLen %d",  (uint8_t *)&v26,  0x2Eu);
    }

    int v9 = *(_DWORD *)(a1 + 8);
    if (v9)
    {
      int v7 = -2;
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 61)
      {
        unsigned int v10 = *(os_log_s **)(gLogObjects + 480);
      }

      else
      {
        unsigned int v10 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        else {
          unsigned int v24 = off_1001FE3D0[(char)(a2 - 1)];
        }
        int v26 = 136316418;
        __int16 v27 = "t56_protocol_checkValidMessageHeaderAndSize";
        __int16 v28 = 1024;
        int v29 = 406;
        __int16 v30 = 1024;
        int v31 = a2;
        __int16 v32 = 2080;
        *(void *)unsigned __int16 v33 = v24;
        *(_WORD *)&v33[8] = 1024;
        *(_DWORD *)&v33[10] = a2;
        *(_WORD *)&v33[14] = 1024;
        *(_DWORD *)&v33[16] = a3;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "%s:%d Device, msgType %d(%s), msgHeader 0x%02X, msgDataLen %d",  (uint8_t *)&v26,  0x2Eu);
      }

      switch(a2)
      {
        case 2u:
          BOOL v11 = a3 > 0xC;
          goto LABEL_27;
        case 4u:
          BOOL v11 = (unint64_t)a3 - 17 < 0xFFFFFFFFFFFFFFF6LL && a3 > 6;
          goto LABEL_27;
        case 6u:
          BOOL v11 = a3 > 8;
LABEL_27:
          if (v11) {
            int v7 = 0;
          }
          else {
            int v7 = -2;
          }
          break;
        case 8u:
          if (a3 == 9) {
            int v7 = 0;
          }
          else {
            int v7 = -2;
          }
          break;
        default:
          if (gLogObjects && gNumLogObjects >= 61)
          {
            int v12 = *(os_log_s **)(gLogObjects + 480);
          }

          else
          {
            int v12 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            if (a2 - 1 > 6) {
              int v25 = "UNKNOWN";
            }
            else {
              int v25 = off_1001FE358[(char)(a2 - 1)];
            }
            int v26 = 136316418;
            __int16 v27 = "t56_protocol_checkValidMessageHeaderAndSize";
            __int16 v28 = 1024;
            int v29 = 441;
            __int16 v30 = 1024;
            int v31 = a2;
            __int16 v32 = 2080;
            *(void *)unsigned __int16 v33 = v25;
            *(_WORD *)&v33[8] = 1024;
            *(_DWORD *)&v33[10] = a2;
            *(_WORD *)&v33[14] = 1024;
            *(_DWORD *)&v33[16] = a3;
            _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "%s:%d Device: Unexpected MsgType!!! msgType %d(%s), msgHeader 0x%02X, msgDataLen %d",  (uint8_t *)&v26,  0x2Eu);
          }

          int v7 = -2;
          break;
      }

      int v9 = *(_DWORD *)(a1 + 8);
    }

    if (v9 == 1)
    {
      if (gLogObjects && gNumLogObjects >= 61)
      {
        int v13 = *(os_log_s **)(gLogObjects + 480);
      }

      else
      {
        int v13 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        else {
          __int16 v21 = off_1001FE3D0[(char)(a2 - 1)];
        }
        int v26 = 136316418;
        __int16 v27 = "t56_protocol_checkValidMessageHeaderAndSize";
        __int16 v28 = 1024;
        int v29 = 450;
        __int16 v30 = 1024;
        int v31 = a2;
        __int16 v32 = 2080;
        *(void *)unsigned __int16 v33 = v21;
        *(_WORD *)&v33[8] = 1024;
        *(_DWORD *)&v33[10] = a2;
        *(_WORD *)&v33[14] = 1024;
        *(_DWORD *)&v33[16] = a3;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s:%d Accessory, msgType %d(%s), msgHeader 0x%02X, msgDataLen %d",  (uint8_t *)&v26,  0x2Eu);
      }

      switch(a2)
      {
        case 1u:
          BOOL v14 = a3 > 6;
          goto LABEL_56;
        case 3u:
        case 7u:
          BOOL v14 = a3 > 2;
          goto LABEL_56;
        case 5u:
          BOOL v14 = a3 > 4;
          goto LABEL_56;
        case 6u:
          BOOL v14 = a3 > 8;
LABEL_56:
          if (v14) {
            int v7 = 0;
          }
          break;
        default:
          if (gLogObjects && gNumLogObjects >= 61)
          {
            int v15 = *(os_log_s **)(gLogObjects + 480);
          }

          else
          {
            int v15 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            else {
              uint64_t v20 = off_1001FE390[(char)(a2 - 1)];
            }
            int v26 = 136316418;
            __int16 v27 = "t56_protocol_checkValidMessageHeaderAndSize";
            __int16 v28 = 1024;
            int v29 = 491;
            __int16 v30 = 1024;
            int v31 = a2;
            __int16 v32 = 2080;
            *(void *)unsigned __int16 v33 = v20;
            *(_WORD *)&v33[8] = 1024;
            *(_DWORD *)&v33[10] = a2;
            *(_WORD *)&v33[14] = 1024;
            *(_DWORD *)&v33[16] = a3;
            _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%s:%d Accessory: Unexpected MsgType!!! msgType %d(%s), msgHeader 0x%02X, msgDataLen %d",  (uint8_t *)&v26,  0x2Eu);
          }

          break;
      }
    }

    if (*(_DWORD *)(a1 + 8) >= 2u)
    {
      if (gLogObjects && gNumLogObjects >= 61)
      {
        unsigned int v16 = *(os_log_s **)(gLogObjects + 480);
      }

      else
      {
        unsigned int v16 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        int v22 = *(_DWORD *)(a1 + 8);
        else {
          __int16 v23 = off_1001FE3D0[(char)(a2 - 1)];
        }
        int v26 = 136316930;
        __int16 v27 = "t56_protocol_checkValidMessageHeaderAndSize";
        __int16 v28 = 1024;
        int v29 = 500;
        __int16 v30 = 1024;
        int v31 = v22;
        __int16 v32 = 1024;
        *(_DWORD *)unsigned __int16 v33 = v7;
        *(_WORD *)&v33[4] = 1024;
        *(_DWORD *)&v33[6] = a2;
        *(_WORD *)&v33[10] = 2080;
        *(void *)&v33[12] = v23;
        __int16 v34 = 1024;
        unsigned int v35 = a2;
        __int16 v36 = 1024;
        unsigned int v37 = a3;
        _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%s:%d Unknown Role! %d, result %d, msgType %d(%s), msgHeader 0x%02X, msgDataLen %d",  (uint8_t *)&v26,  0x3Au);
      }
    }
  }

  else
  {
    int v7 = -2;
  }

  if (gLogObjects && gNumLogObjects >= 61)
  {
    uint64_t v17 = *(os_log_s **)(gLogObjects + 480);
  }

  else
  {
    uint64_t v17 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    else {
      int v18 = off_1001FE3D0[(char)(a2 - 1)];
    }
    int v26 = 136316674;
    __int16 v27 = "t56_protocol_checkValidMessageHeaderAndSize";
    __int16 v28 = 1024;
    int v29 = 505;
    __int16 v30 = 1024;
    int v31 = v7;
    __int16 v32 = 1024;
    *(_DWORD *)unsigned __int16 v33 = a2;
    *(_WORD *)&v33[4] = 2080;
    *(void *)&v33[6] = v18;
    *(_WORD *)&v33[14] = 1024;
    *(_DWORD *)&v33[16] = a2;
    __int16 v34 = 1024;
    unsigned int v35 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "%s:%d result %d, msgType %d(%s), msgHeader 0x%02X, msgDataLen %d",  (uint8_t *)&v26,  0x34u);
  }

  return v7 == 0;
}

uint64_t _t56_protocol_handleResponse_SESSION_RSP( uint64_t a1, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5, unsigned __int16 *a6)
{
  uint64_t v7 = gLogObjects;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 61)
    {
      int v12 = *(os_log_s **)(gLogObjects + 480);
    }

    else
    {
      int v12 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
      _t56_protocol_handleResponse_SESSION_RSP_cold_4();
    }
    int v13 = 0;
    uint64_t v7 = gLogObjects;
    uint64_t inited = 4294967294LL;
    if (a3 >= 0xD && a2 && !*(_DWORD *)(a1 + 8))
    {
      int v13 = *a2;
      if (gLogObjects && gNumLogObjects >= 61)
      {
        int v15 = *(os_log_s **)(gLogObjects + 480);
      }

      else
      {
        int v15 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        int v26 = *(_DWORD *)(a1 + 8);
        else {
          __int16 v27 = off_1001FE3D0[(char)(v13 - 1)];
        }
        *(_DWORD *)buf = 136316162;
        unsigned int v37 = "_t56_protocol_handleResponse_SESSION_RSP";
        __int16 v38 = 1024;
        int v39 = 1001;
        __int16 v40 = 1024;
        int v41 = v26;
        __int16 v42 = 1024;
        int v43 = v13;
        __int16 v44 = 2080;
        BOOL v45 = v27;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "%s:%d role %d, msgType %d(%s)",  buf,  0x28u);
      }

      uint64_t v7 = gLogObjects;
      uint64_t inited = 4294967294LL;
      if (a6 && a5 >= 0x7D0 && a4 && v13 == 2)
      {
        *a6 = 0;
        *(_BYTE *)(a1 + 4_Block_object_dispose((const void *)(v1 - 80), 8) = 0;
        unsigned int v16 = *(unsigned __int16 *)(a2 + 1);
        int v33 = a2[4];
        int v34 = a2[3];
        int v31 = a2[8];
        int v32 = a2[7];
        int v29 = a2[10];
        int v30 = a2[9];
        int v28 = a2[11];
        int v17 = a2[12];
        if (v7 && gNumLogObjects >= 61)
        {
          int v18 = *(os_log_s **)(v7 + 480);
        }

        else
        {
          int v18 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        int v19 = __rev16(v16);
        BOOL v20 = os_log_type_enabled(v18, OS_LOG_TYPE_INFO);
        if (v20)
        {
          int v21 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)buf = 136317442;
          unsigned int v37 = "_t56_protocol_handleResponse_SESSION_RSP";
          __int16 v38 = 1024;
          int v39 = 1024;
          __int16 v40 = 1024;
          int v41 = v21;
          __int16 v42 = 1024;
          int v43 = 2;
          __int16 v44 = 2080;
          BOOL v45 = "SESSION_RSP";
          __int16 v46 = 1024;
          unsigned int v47 = v19;
          __int16 v48 = 1024;
          int v49 = v33 | (v34 << 8);
          __int16 v50 = 1024;
          int v51 = v31 | (v32 << 8);
          __int16 v52 = 1024;
          int v53 = v29 | (v30 << 8);
          __int16 v54 = 1024;
          int v55 = v17 | (v28 << 8);
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "%s:%d role %d, msgType %d(%s), sessionID %d, version %d, maxLength %d, status %d, info %d",  buf,  0x46u);
        }

        uint64_t inited = t56_protocol_initMsg_DISCOVER(v20, v19, a4, a5, a6);
        uint64_t v7 = gLogObjects;
        int v13 = 2;
      }
    }
  }

  else
  {
    int v13 = 0;
    uint64_t inited = 4294967294LL;
  }

  if (v7 && gNumLogObjects >= 61)
  {
    int v22 = *(os_log_s **)(v7 + 480);
  }

  else
  {
    int v22 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    if ((v13 - 1) > 7u)
    {
      __int16 v23 = "UNKNOWN";
      if (a6) {
        goto LABEL_39;
      }
    }

    else
    {
      __int16 v23 = off_1001FE3D0[(char)(v13 - 1)];
      if (a6)
      {
LABEL_39:
        int v24 = *a6;
LABEL_42:
        *(_DWORD *)buf = 136316674;
        unsigned int v37 = "_t56_protocol_handleResponse_SESSION_RSP";
        __int16 v38 = 1024;
        int v39 = 1030;
        __int16 v40 = 1024;
        int v41 = inited;
        __int16 v42 = 1024;
        int v43 = v13;
        __int16 v44 = 2080;
        BOOL v45 = v23;
        __int16 v46 = 1024;
        unsigned int v47 = a3;
        __int16 v48 = 1024;
        int v49 = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "%s:%d result %d, msgType %d(%s), dataInLen %u, dataOutLen %u",  buf,  0x34u);
        return inited;
      }
    }

    int v24 = -1;
    goto LABEL_42;
  }

  return inited;
}

uint64_t _t56_protocol_handleResponse_DISCOVER_RSP( uint64_t a1, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5, _WORD *a6)
{
  unsigned int v7 = a3;
  unsigned int v8 = &startLogsNotificationObservers;
  int v9 = &startLogsNotificationObservers;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 61)
    {
      unsigned int v12 = a5;
      int v13 = *(os_log_s **)(gLogObjects + 480);
    }

    else
    {
      unsigned int v12 = a5;
      int v13 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
      _t56_protocol_handleResponse_DISCOVER_RSP_cold_6();
    }
    int v14 = 0;
    uint64_t inited = 4294967294LL;
    unsigned int v7 = a3;
    if (a3 >= 7 && a2 && !*(_DWORD *)(a1 + 8))
    {
      int v14 = *a2;
      if (gLogObjects && gNumLogObjects >= 61)
      {
        unsigned int v16 = *(os_log_s **)(gLogObjects + 480);
      }

      else
      {
        unsigned int v16 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      unsigned int v7 = a3;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        int v51 = *(_DWORD *)(a1 + 8);
        else {
          __int16 v52 = off_1001FE3D0[(char)(v14 - 1)];
        }
        *(_DWORD *)buf = 136316162;
        uint64_t v62 = "_t56_protocol_handleResponse_DISCOVER_RSP";
        __int16 v63 = 1024;
        int v64 = 1053;
        __int16 v65 = 1024;
        int v66 = v51;
        __int16 v67 = 1024;
        int v68 = v14;
        __int16 v69 = 2080;
        *(void *)uint64_t v70 = v52;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "%s:%d role %d, msgType %d(%s)",  buf,  0x28u);
      }

      uint64_t inited = 4294967294LL;
      if (a6)
      {
        if (v12 >= 0x7D0)
        {
          if (a4)
          {
            unsigned int v54 = v12;
            if (v14 == 4)
            {
              *a6 = 0;
              *(_BYTE *)(a1 + 4_Block_object_dispose((const void *)(v1 - 80), 8) = 0;
              int v56 = __rev16(*(unsigned __int16 *)(a2 + 1));
              uint64_t v17 = __rev16(*(unsigned __int16 *)(a2 + 5));
              if (v17 >= 5)
              {
                uint64_t v22 = a1;
                if (gLogObjects && gNumLogObjects >= 61)
                {
                  __int16 v23 = *(os_log_s **)(gLogObjects + 480);
                }

                else
                {
                  __int16 v23 = (os_log_s *)&_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }

                int v14 = 4;
                if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
                {
                  int v25 = *(_DWORD *)(v22 + 8);
                  *(_DWORD *)buf = 136317186;
                  uint64_t v62 = "_t56_protocol_handleResponse_DISCOVER_RSP";
                  __int16 v63 = 1024;
                  int v64 = 1071;
                  __int16 v65 = 1024;
                  int v66 = v17;
                  __int16 v67 = 1024;
                  int v68 = 4;
                  __int16 v69 = 1024;
                  *(_DWORD *)uint64_t v70 = v25;
                  *(_WORD *)&v70[4] = 1024;
                  *(_DWORD *)&v70[6] = 4;
                  *(_WORD *)id v71 = 2080;
                  *(void *)&v71[2] = "DISCOVER_RSP";
                  __int16 v72 = 1024;
                  int v73 = v56;
                  __int16 v74 = 1024;
                  int v75 = v17;
                  _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "%s:%d numClients(%d) too large! (max %d), role %d, msgType %d(%s), sessionID %d, numClients %d",  buf,  0x40u);
                }

                uint64_t inited = 4294967294LL;
                unsigned int v8 = &startLogsNotificationObservers;
              }

              else
              {
                int v53 = a6;
                if (gLogObjects) {
                  BOOL v18 = gNumLogObjects <= 60;
                }
                else {
                  BOOL v18 = 1;
                }
                int v19 = !v18;
                if (10 * (int)v17 + 7 <= a3)
                {
                  if (v19)
                  {
                    int v24 = *(os_log_s **)(gLogObjects + 480);
                  }

                  else
                  {
                    int v24 = (os_log_s *)&_os_log_default;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                      platform_connectionInfo_configStreamCategoryListReady_cold_1();
                    }
                  }

                  BOOL v27 = os_log_type_enabled(v24, OS_LOG_TYPE_INFO);
                  if (v27)
                  {
                    int v28 = *(_DWORD *)(a1 + 8);
                    *(_DWORD *)buf = 136316674;
                    uint64_t v62 = "_t56_protocol_handleResponse_DISCOVER_RSP";
                    __int16 v63 = 1024;
                    int v64 = 1082;
                    __int16 v65 = 1024;
                    int v66 = v28;
                    __int16 v67 = 1024;
                    int v68 = 4;
                    __int16 v69 = 2080;
                    *(void *)uint64_t v70 = "DISCOVER_RSP";
                    *(_WORD *)&v70[8] = 1024;
                    *(_DWORD *)id v71 = v56;
                    *(_WORD *)&v71[4] = 1024;
                    *(_DWORD *)&v71[6] = v17;
                    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "%s:%d role %d, msgType %d(%s), sessionID %d, numClients %d",  buf,  0x34u);
                  }

                  uint64_t v55 = a1;
                  if ((_DWORD)v17)
                  {
                    uint64_t v29 = 0LL;
                    int v30 = (int *)(a1 + 56);
                    int v31 = a2 + 16;
                    uint64_t v57 = v17;
                    do
                    {
                      *((_WORD *)v30 - 2) = bswap32(*(unsigned __int16 *)(v31 - 7)) >> 16;
                      int v32 = *(v31 - 3);
                      int v33 = *(v31 - 2);
                      int v34 = *(v31 - 1);
                      int v35 = *v31;
                      *int v30 = (v32 << 24) | (v33 << 16) | (v34 << 8) | v35;
                      uint64_t v36 = gLogObjects;
                      int v37 = gNumLogObjects;
                      if (gLogObjects && gNumLogObjects >= 61)
                      {
                        __int16 v38 = *(os_log_s **)(gLogObjects + 480);
                      }

                      else
                      {
                        __int16 v38 = (os_log_s *)&_os_log_default;
                        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = 134218240;
                          uint64_t v62 = (const char *)v36;
                          __int16 v63 = 1024;
                          int v64 = v37;
                          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                        }
                      }

                      BOOL v27 = os_log_type_enabled(v38, OS_LOG_TYPE_INFO);
                      if (v27)
                      {
                        int v39 = *(_DWORD *)(v55 + 8);
                        int v40 = *((unsigned __int16 *)v30 - 2);
                        int v41 = *v30;
                        else {
                          int v42 = v32;
                        }
                        else {
                          int v43 = v33;
                        }
                        *(_DWORD *)buf = 136318722;
                        else {
                          int v44 = v34;
                        }
                        uint64_t v62 = "_t56_protocol_handleResponse_DISCOVER_RSP";
                        __int16 v63 = 1024;
                        else {
                          int v45 = v35;
                        }
                        int v64 = 1103;
                        __int16 v65 = 1024;
                        int v66 = v39;
                        __int16 v67 = 1024;
                        int v68 = 4;
                        __int16 v69 = 2080;
                        *(void *)uint64_t v70 = "DISCOVER_RSP";
                        *(_WORD *)&v70[8] = 1024;
                        *(_DWORD *)id v71 = v56;
                        *(_WORD *)&v71[4] = 1024;
                        *(_DWORD *)&v71[6] = v29;
                        __int16 v72 = 1024;
                        int v73 = v40;
                        __int16 v74 = 1024;
                        int v75 = v40;
                        __int16 v76 = 1024;
                        int v77 = v41;
                        __int16 v78 = 1024;
                        int v79 = v41;
                        __int16 v80 = 1024;
                        int v81 = v42;
                        __int16 v82 = 1024;
                        int v83 = v43;
                        __int16 v84 = 1024;
                        int v85 = v44;
                        __int16 v86 = 1024;
                        int v87 = v45;
                        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_INFO,  "%s:%d role %d, msgType %d(%s), sessionID %d, client[%d]: clientID 0x%x(%d), identifier 0x%x(%d '%c%c%c%c')",  buf,  0x64u);
                      }

                      v31 += 10;
                      ++v29;
                      v30 += 2;
                    }

                    while (v57 != v29);
                  }

                  char v60 = 0;
                  a6 = v53;
                  uint64_t inited = t56_protocol_initMsg_DATA( v27,  v56,  *(unsigned __int16 *)(v55 + 52),  0,  1u,  &v60,  a4,  v54,  v53);
                  int v14 = 4;
                  unsigned int v7 = a3;
                  int v9 = &startLogsNotificationObservers;
                  unsigned int v8 = &startLogsNotificationObservers;
                }

                else
                {
                  uint64_t v20 = a1;
                  if (v19)
                  {
                    int v21 = *(os_log_s **)(gLogObjects + 480);
                  }

                  else
                  {
                    int v21 = (os_log_s *)&_os_log_default;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                      platform_connectionInfo_configStreamCategoryListReady_cold_1();
                    }
                  }

                  int v14 = 4;
                  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
                  {
                    int v26 = *(_DWORD *)(v20 + 8);
                    *(_DWORD *)buf = 136317186;
                    uint64_t v62 = "_t56_protocol_handleResponse_DISCOVER_RSP";
                    __int16 v63 = 1024;
                    int v64 = 1078;
                    __int16 v65 = 1024;
                    unsigned int v7 = a3;
                    int v66 = a3;
                    __int16 v67 = 1024;
                    int v68 = 10 * v17 + 7;
                    __int16 v69 = 1024;
                    *(_DWORD *)uint64_t v70 = v26;
                    *(_WORD *)&v70[4] = 1024;
                    *(_DWORD *)&v70[6] = 4;
                    *(_WORD *)id v71 = 2080;
                    *(void *)&v71[2] = "DISCOVER_RSP";
                    __int16 v72 = 1024;
                    int v73 = v56;
                    __int16 v74 = 1024;
                    int v75 = v17;
                    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "%s:%d Invalid message size %d vs %d, role %d, msgType %d(%s), sessionID %d, numClients %d",  buf,  0x40u);
                    uint64_t inited = 4294967294LL;
                  }

                  else
                  {
                    uint64_t inited = 4294967294LL;
                    unsigned int v7 = a3;
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  else
  {
    int v14 = 0;
    uint64_t inited = 4294967294LL;
  }

  uint64_t v46 = v8[353];
  if (v46 && *((int *)v9 + 708) >= 61)
  {
    unsigned int v47 = *(os_log_s **)(v46 + 480);
  }

  else
  {
    unsigned int v47 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
  {
    if ((v14 - 1) > 7u)
    {
      __int16 v48 = "UNKNOWN";
      if (a6) {
        goto LABEL_83;
      }
    }

    else
    {
      __int16 v48 = off_1001FE3D0[(char)(v14 - 1)];
      if (a6)
      {
LABEL_83:
        int v49 = (unsigned __int16)*a6;
LABEL_86:
        *(_DWORD *)buf = 136316674;
        uint64_t v62 = "_t56_protocol_handleResponse_DISCOVER_RSP";
        __int16 v63 = 1024;
        int v64 = 1114;
        __int16 v65 = 1024;
        int v66 = inited;
        __int16 v67 = 1024;
        int v68 = v14;
        __int16 v69 = 2080;
        *(void *)uint64_t v70 = v48;
        *(_WORD *)&v70[8] = 1024;
        *(_DWORD *)id v71 = v7;
        *(_WORD *)&v71[4] = 1024;
        *(_DWORD *)&v71[6] = v49;
        _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "%s:%d result %d, msgType %d(%s), dataInLen %u, dataOutLen %u",  buf,  0x34u);
        return inited;
      }
    }

    int v49 = -1;
    goto LABEL_86;
  }

  return inited;
}

uint64_t _t56_protocol_handleResponse_DATA( uint64_t a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4, unsigned int a5, _WORD *a6)
{
  if (gLogObjects && gNumLogObjects >= 61)
  {
    unsigned int v12 = *(os_log_s **)(gLogObjects + 480);
  }

  else
  {
    unsigned int v12 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      int v13 = *(_DWORD *)(a1 + 8);
    }
    else {
      int v13 = -1;
    }
    *(_DWORD *)buf = 136316162;
    uint64_t v46 = "_t56_protocol_handleResponse_DATA";
    __int16 v47 = 1024;
    int v48 = 1127;
    __int16 v49 = 1024;
    int v50 = v13;
    __int16 v51 = 1024;
    int v52 = a3;
    __int16 v53 = 1024;
    LODWORD(v54) = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "%s:%d role %d, dataInLen %d, dataOutSize %d",  buf,  0x24u);
  }

  if (!a1)
  {
    int v15 = 0;
    goto LABEL_16;
  }

  if (gLogObjects && gNumLogObjects >= 61)
  {
    int v14 = *(os_log_s **)(gLogObjects + 480);
  }

  else
  {
    int v14 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
    _t56_protocol_handleResponse_DATA_cold_7();
  }
  int v15 = 0;
  uint64_t v16 = 4294967294LL;
  if (a3 >= 9 && a2 && !*(_DWORD *)(a1 + 8))
  {
    int v15 = *a2;
    if (gLogObjects && gNumLogObjects >= 61)
    {
      uint64_t v17 = *(os_log_s **)(gLogObjects + 480);
    }

    else
    {
      uint64_t v17 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      int v39 = *(_DWORD *)(a1 + 8);
      else {
        int v40 = off_1001FE3D0[(char)(v15 - 1)];
      }
      *(_DWORD *)buf = 136316162;
      uint64_t v46 = "_t56_protocol_handleResponse_DATA";
      __int16 v47 = 1024;
      int v48 = 1139;
      __int16 v49 = 1024;
      int v50 = v39;
      __int16 v51 = 1024;
      int v52 = v15;
      __int16 v53 = 2080;
      unsigned int v54 = v40;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "%s:%d role %d, msgType %d(%s)",  buf,  0x28u);
    }

    uint64_t v16 = 4294967294LL;
    if (a6)
    {
      if (a5 >= 0x7D0 && a4 && v15 == 6)
      {
        int v44 = a6;
        *a6 = 0;
        unsigned int v18 = *(unsigned __int16 *)(a2 + 1);
        unsigned int v19 = *(unsigned __int16 *)(a2 + 3);
        int v43 = a2[5];
        int v20 = a2[6];
        unsigned int v21 = *(unsigned __int16 *)(a2 + 7);
        if (gLogObjects && gNumLogObjects >= 61)
        {
          uint64_t v22 = *(os_log_s **)(gLogObjects + 480);
        }

        else
        {
          uint64_t v22 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        unsigned int v23 = __rev16(v21);
        unsigned int v24 = __rev16(v18);
        unsigned int v25 = __rev16(v19);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          int v26 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)buf = 136317186;
          uint64_t v46 = "_t56_protocol_handleResponse_DATA";
          __int16 v47 = 1024;
          int v48 = 1164;
          __int16 v49 = 1024;
          int v50 = v26;
          __int16 v51 = 1024;
          int v52 = 6;
          __int16 v53 = 2080;
          unsigned int v54 = "DATA";
          __int16 v55 = 1024;
          unsigned int v56 = v24;
          __int16 v57 = 1024;
          unsigned int v58 = v25;
          __int16 v59 = 1024;
          int v60 = v20 | (v43 << 8);
          __int16 v61 = 1024;
          int v62 = v23;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "%s:%d role %d, msgType %d(%s), sessionID %d, clientID %d, remaining %d, payloadLen %d",  buf,  0x40u);
        }

        a6 = v44;
        if (v23 > 3)
        {
          unsigned int v27 = v25;
          if (a2[9] == 1)
          {
            int v28 = (a2[12] << 16) | (a2[11] << 8);
            int v29 = a2[10];
            if (gLogObjects && gNumLogObjects >= 61)
            {
              int v30 = *(os_log_s **)(gLogObjects + 480);
            }

            else
            {
              int v30 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
            {
              int v34 = *(_DWORD *)(a1 + 8);
              *(_DWORD *)buf = 136317186;
              uint64_t v46 = "_t56_protocol_handleResponse_DATA";
              __int16 v47 = 1024;
              int v48 = 1180;
              __int16 v49 = 1024;
              int v50 = v34;
              __int16 v51 = 1024;
              int v52 = 6;
              __int16 v53 = 2080;
              unsigned int v54 = "DATA";
              __int16 v55 = 1024;
              unsigned int v56 = v24;
              __int16 v57 = 1024;
              unsigned int v58 = v27;
              __int16 v59 = 1024;
              int v60 = v28 | v29;
              __int16 v61 = 1024;
              int v62 = v28 | v29;
              _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_INFO,  "%s:%d role %d, msgType %d(%s), sessionID %d, clientID %d, received rxID 0x%x (%d)",  buf,  0x40u);
            }

            t56_util_notifyRxID((const void **)a1, v28 | v29);
            uint64_t v16 = 0LL;
            int v15 = 6;
            a6 = v44;
          }

          else
          {
            if (gLogObjects && gNumLogObjects >= 61)
            {
              int v32 = *(os_log_s **)(gLogObjects + 480);
            }

            else
            {
              int v32 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            int v15 = 6;
            if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
            {
              int v41 = *(_DWORD *)(a1 + 8);
              int v42 = a2[9];
              *(_DWORD *)buf = 136317186;
              uint64_t v46 = "_t56_protocol_handleResponse_DATA";
              __int16 v47 = 1024;
              int v48 = 1188;
              __int16 v49 = 1024;
              int v50 = v41;
              __int16 v51 = 1024;
              int v52 = 6;
              __int16 v53 = 2080;
              unsigned int v54 = "DATA";
              __int16 v55 = 1024;
              unsigned int v56 = v24;
              __int16 v57 = 1024;
              unsigned int v58 = v25;
              __int16 v59 = 1024;
              int v60 = v42;
              __int16 v61 = 1024;
              int v62 = v42;
              _os_log_error_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_ERROR,  "%s:%d role %d, msgType %d(%s), sessionID %d, clientID %d, Unknown RxID command 0x%x (%d)",  buf,  0x40u);
            }

            uint64_t v16 = 0LL;
          }

          goto LABEL_66;
        }

        if (gLogObjects && gNumLogObjects >= 61)
        {
          int v31 = *(os_log_s **)(gLogObjects + 480);
        }

        else
        {
          int v31 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        int v15 = 6;
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          int v33 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)buf = 136316930;
          uint64_t v46 = "_t56_protocol_handleResponse_DATA";
          __int16 v47 = 1024;
          int v48 = 1170;
          __int16 v49 = 1024;
          int v50 = v33;
          __int16 v51 = 1024;
          int v52 = 6;
          __int16 v53 = 2080;
          unsigned int v54 = "DATA";
          __int16 v55 = 1024;
          unsigned int v56 = v24;
          __int16 v57 = 1024;
          unsigned int v58 = v25;
          __int16 v59 = 1024;
          int v60 = 3;
          _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "%s:%d role %d, msgType %d(%s), sessionID %d, clientID %d, expecting payloadLen at least %d!!!",  buf,  0x3Au);
        }

uint64_t _t56_protocol_handleResponse_STATUS( uint64_t a1, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5, unsigned __int16 *a6)
{
  uint64_t v7 = gLogObjects;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 61)
    {
      unsigned int v12 = *(os_log_s **)(gLogObjects + 480);
    }

    else
    {
      unsigned int v12 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
      _t56_protocol_handleResponse_STATUS_cold_4();
    }
    int v13 = 0;
    uint64_t v7 = gLogObjects;
    uint64_t v14 = 4294967294LL;
    if (a3 >= 9 && a2 && !*(_DWORD *)(a1 + 8))
    {
      int v13 = *a2;
      if (gLogObjects && gNumLogObjects >= 61)
      {
        int v15 = *(os_log_s **)(gLogObjects + 480);
      }

      else
      {
        int v15 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        int v25 = *(_DWORD *)(a1 + 8);
        else {
          int v26 = off_1001FE3D0[(char)(v13 - 1)];
        }
        *(_DWORD *)buf = 136316162;
        int v35 = "_t56_protocol_handleResponse_STATUS";
        __int16 v36 = 1024;
        int v37 = 1219;
        __int16 v38 = 1024;
        int v39 = v25;
        __int16 v40 = 1024;
        int v41 = v13;
        __int16 v42 = 2080;
        int v43 = v26;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "%s:%d role %d, msgType %d(%s)",  buf,  0x28u);
      }

      uint64_t v7 = gLogObjects;
      uint64_t v14 = 4294967294LL;
      if (a6 && a5 >= 0x7D0 && a4 && v13 == 8)
      {
        *a6 = 0;
        *(_BYTE *)(a1 + 4_Block_object_dispose((const void *)(v1 - 80), 8) = 0;
        int v31 = a2[2];
        int v32 = a2[1];
        int v29 = a2[4];
        int v30 = a2[3];
        int v16 = a2[5];
        int v17 = a2[6];
        int v27 = a2[8];
        int v28 = a2[7];
        if (v7 && gNumLogObjects >= 61)
        {
          unsigned int v18 = *(os_log_s **)(v7 + 480);
        }

        else
        {
          unsigned int v18 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_INFO);
        if (v19)
        {
          int v20 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)buf = 136316930;
          int v35 = "_t56_protocol_handleResponse_STATUS";
          __int16 v36 = 1024;
          int v37 = 1238;
          __int16 v38 = 1024;
          int v39 = v20;
          __int16 v40 = 1024;
          int v41 = 8;
          __int16 v42 = 2080;
          int v43 = "STATUS";
          __int16 v44 = 1024;
          int v45 = v31 | (v32 << 8);
          __int16 v46 = 1024;
          int v47 = v29 | (v30 << 8);
          __int16 v48 = 1024;
          int v49 = (v16 << 24) | (v17 << 16) | (v28 << 8) | v27;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "%s:%d role %d, msgType %d(%s), sessionID %d, status %d, errorCode %d",  buf,  0x3Au);
        }

        t56_protocol_initMsg_POLL(v19, a4, a5, a6);
        uint64_t v14 = 0LL;
        uint64_t v7 = gLogObjects;
        int v13 = 8;
      }
    }
  }

  else
  {
    int v13 = 0;
    uint64_t v14 = 4294967294LL;
  }

  if (v7 && gNumLogObjects >= 61)
  {
    unsigned int v21 = *(os_log_s **)(v7 + 480);
  }

  else
  {
    unsigned int v21 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    if ((v13 - 1) > 7u)
    {
      uint64_t v22 = "UNKNOWN";
      if (a6) {
        goto LABEL_39;
      }
    }

    else
    {
      uint64_t v22 = off_1001FE3D0[(char)(v13 - 1)];
      if (a6)
      {
LABEL_39:
        int v23 = *a6;
LABEL_42:
        *(_DWORD *)buf = 136316674;
        int v35 = "_t56_protocol_handleResponse_STATUS";
        __int16 v36 = 1024;
        int v37 = 1248;
        __int16 v38 = 1024;
        int v39 = v14;
        __int16 v40 = 1024;
        int v41 = v13;
        __int16 v42 = 2080;
        int v43 = v22;
        __int16 v44 = 1024;
        int v45 = a3;
        __int16 v46 = 1024;
        int v47 = v23;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "%s:%d result %d, msgType %d(%s), dataInLen %u, dataOutLen %u",  buf,  0x34u);
        return v14;
      }
    }

    int v23 = -1;
    goto LABEL_42;
  }

  return v14;
}

uint64_t _t56_protocol_handleRequest_SESSION( uint64_t a1, unsigned __int8 *a2, int a3, unsigned __int8 *a4, unsigned int a5, unsigned __int16 *a6)
{
  uint64_t v7 = gLogObjects;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 61)
    {
      unsigned int v12 = *(os_log_s **)(gLogObjects + 480);
    }

    else
    {
      unsigned int v12 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
      _t56_protocol_handleRequest_SESSION_cold_4();
    }
    int v13 = 0;
    uint64_t v7 = gLogObjects;
    uint64_t inited = 4294967294LL;
    if (a3 == 7 && a2 && *(_DWORD *)(a1 + 8) == 1)
    {
      int v13 = *a2;
      if (gLogObjects && gNumLogObjects >= 61)
      {
        int v15 = *(os_log_s **)(gLogObjects + 480);
      }

      else
      {
        int v15 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        int v26 = *(_DWORD *)(a1 + 8);
        else {
          int v27 = off_1001FE3D0[(char)(v13 - 1)];
        }
        *(_DWORD *)buf = 136316162;
        int v32 = "_t56_protocol_handleRequest_SESSION";
        __int16 v33 = 1024;
        int v34 = 662;
        __int16 v35 = 1024;
        int v36 = v26;
        __int16 v37 = 1024;
        int v38 = v13;
        __int16 v39 = 2080;
        __int16 v40 = v27;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "%s:%d role %d, msgType %d(%s)",  buf,  0x28u);
      }

      uint64_t v7 = gLogObjects;
      uint64_t inited = 4294967294LL;
      if (a6 && a5 >= 0x7D0 && a4 && v13 == 1)
      {
        *a6 = 0;
        unsigned int v16 = *(unsigned __int16 *)(a2 + 1);
        int v28 = a2[3];
        int v29 = a2[5];
        int v17 = a2[4];
        if (v7 && gNumLogObjects >= 61)
        {
          unsigned int v18 = *(os_log_s **)(v7 + 480);
        }

        else
        {
          unsigned int v18 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        int v19 = __rev16(v16);
        BOOL v20 = os_log_type_enabled(v18, OS_LOG_TYPE_INFO);
        if (v20)
        {
          int v21 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)buf = 136316930;
          int v32 = "_t56_protocol_handleRequest_SESSION";
          __int16 v33 = 1024;
          int v34 = 684;
          __int16 v35 = 1024;
          int v36 = v21;
          __int16 v37 = 1024;
          int v38 = 1;
          __int16 v39 = 2080;
          __int16 v40 = "SESSION";
          __int16 v41 = 1024;
          int v42 = v19;
          __int16 v43 = 1024;
          int v44 = v17 | (v28 << 8);
          __int16 v45 = 1024;
          int v46 = v29;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "%s:%d role %d, msgType %d(%s), sessionID %d, version %d, sessionCommand %d",  buf,  0x3Au);
        }

        uint64_t inited = t56_protocol_initMsg_STATUS(v20, v19, 0, 0, a4, a5, a6);
        uint64_t v7 = gLogObjects;
        int v13 = 1;
      }
    }
  }

  else
  {
    int v13 = 0;
    uint64_t inited = 4294967294LL;
  }

  if (v7 && gNumLogObjects >= 61)
  {
    uint64_t v22 = *(os_log_s **)(v7 + 480);
  }

  else
  {
    uint64_t v22 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    if ((v13 - 1) > 7u)
    {
      int v23 = "UNKNOWN";
      if (a6) {
        goto LABEL_39;
      }
    }

    else
    {
      int v23 = off_1001FE3D0[(char)(v13 - 1)];
      if (a6)
      {
LABEL_39:
        int v24 = *a6;
LABEL_42:
        *(_DWORD *)buf = 136316674;
        int v32 = "_t56_protocol_handleRequest_SESSION";
        __int16 v33 = 1024;
        int v34 = 704;
        __int16 v35 = 1024;
        int v36 = inited;
        __int16 v37 = 1024;
        int v38 = v13;
        __int16 v39 = 2080;
        __int16 v40 = v23;
        __int16 v41 = 1024;
        int v42 = a3;
        __int16 v43 = 1024;
        int v44 = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "%s:%d result %d, msgType %d(%s), dataInLen %u, dataOutLen %u",  buf,  0x34u);
        return inited;
      }
    }

    int v24 = -1;
    goto LABEL_42;
  }

  return inited;
}

uint64_t _t56_protocol_handleRequest_DISCOVER( uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4, uint64_t a5, unsigned __int16 *a6)
{
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 61)
    {
      unsigned int v10 = *(os_log_s **)(gLogObjects + 480);
    }

    else
    {
      unsigned int v10 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      _t56_protocol_handleRequest_DISCOVER_cold_3();
    }
    int v11 = 0;
    if (a3 == 3 && a2 && *(_DWORD *)(a1 + 8) == 1)
    {
      int v11 = *a2;
      if (gLogObjects && gNumLogObjects >= 61)
      {
        unsigned int v12 = *(os_log_s **)(gLogObjects + 480);
      }

      else
      {
        unsigned int v12 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        int v17 = *(_DWORD *)(a1 + 8);
        else {
          unsigned int v18 = off_1001FE3D0[(char)(v11 - 1)];
        }
        int v19 = 136316162;
        BOOL v20 = "_t56_protocol_handleRequest_DISCOVER";
        __int16 v21 = 1024;
        int v22 = 726;
        __int16 v23 = 1024;
        int v24 = v17;
        __int16 v25 = 1024;
        int v26 = v11;
        __int16 v27 = 2080;
        int v28 = v18;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "%s:%d role %d, msgType %d(%s)",  (uint8_t *)&v19,  0x28u);
      }
    }
  }

  else
  {
    int v11 = 0;
  }

  if (gLogObjects && gNumLogObjects >= 61)
  {
    int v13 = *(os_log_s **)(gLogObjects + 480);
  }

  else
  {
    int v13 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    if ((v11 - 1) > 7u)
    {
      uint64_t v14 = "UNKNOWN";
      if (a6) {
        goto LABEL_27;
      }
    }

    else
    {
      uint64_t v14 = off_1001FE3D0[(char)(v11 - 1)];
      if (a6)
      {
LABEL_27:
        int v15 = *a6;
LABEL_30:
        int v19 = 136316674;
        BOOL v20 = "_t56_protocol_handleRequest_DISCOVER";
        __int16 v21 = 1024;
        int v22 = 767;
        __int16 v23 = 1024;
        int v24 = -2;
        __int16 v25 = 1024;
        int v26 = v11;
        __int16 v27 = 2080;
        int v28 = v14;
        __int16 v29 = 1024;
        int v30 = a3;
        __int16 v31 = 1024;
        int v32 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%s:%d result %d, msgType %d(%s), dataInLen %u, dataOutLen %u",  (uint8_t *)&v19,  0x34u);
        return 4294967294LL;
      }
    }

    int v15 = -1;
    goto LABEL_30;
  }

  return 4294967294LL;
}

uint64_t _t56_protocol_handleRequest_POLL( uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4, uint64_t a5, unsigned __int16 *a6)
{
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 61)
    {
      unsigned int v10 = *(os_log_s **)(gLogObjects + 480);
    }

    else
    {
      unsigned int v10 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      _t56_protocol_handleRequest_POLL_cold_3();
    }
    int v11 = 0;
    if (a3 == 5 && a2 && *(_DWORD *)(a1 + 8) == 1)
    {
      int v11 = *a2;
      if (gLogObjects && gNumLogObjects >= 61)
      {
        unsigned int v12 = *(os_log_s **)(gLogObjects + 480);
      }

      else
      {
        unsigned int v12 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        int v17 = *(_DWORD *)(a1 + 8);
        else {
          unsigned int v18 = off_1001FE3D0[(char)(v11 - 1)];
        }
        int v19 = 136316162;
        BOOL v20 = "_t56_protocol_handleRequest_POLL";
        __int16 v21 = 1024;
        int v22 = 790;
        __int16 v23 = 1024;
        int v24 = v17;
        __int16 v25 = 1024;
        int v26 = v11;
        __int16 v27 = 2080;
        int v28 = v18;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "%s:%d role %d, msgType %d(%s)",  (uint8_t *)&v19,  0x28u);
      }
    }
  }

  else
  {
    int v11 = 0;
  }

  if (gLogObjects && gNumLogObjects >= 61)
  {
    int v13 = *(os_log_s **)(gLogObjects + 480);
  }

  else
  {
    int v13 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    if ((v11 - 1) > 7u)
    {
      uint64_t v14 = "UNKNOWN";
      if (a6) {
        goto LABEL_27;
      }
    }

    else
    {
      uint64_t v14 = off_1001FE3D0[(char)(v11 - 1)];
      if (a6)
      {
LABEL_27:
        int v15 = *a6;
LABEL_30:
        int v19 = 136316674;
        BOOL v20 = "_t56_protocol_handleRequest_POLL";
        __int16 v21 = 1024;
        int v22 = 830;
        __int16 v23 = 1024;
        int v24 = -2;
        __int16 v25 = 1024;
        int v26 = v11;
        __int16 v27 = 2080;
        int v28 = v14;
        __int16 v29 = 1024;
        int v30 = a3;
        __int16 v31 = 1024;
        int v32 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%s:%d result %d, msgType %d(%s), dataInLen %u, dataOutLen %u",  (uint8_t *)&v19,  0x34u);
        return 4294967294LL;
      }
    }

    int v15 = -1;
    goto LABEL_30;
  }

  return 4294967294LL;
}

uint64_t _t56_protocol_handleRequest_DATA( uint64_t a1, unsigned __int8 *a2, int a3, unsigned __int8 *a4, unsigned int a5, unsigned __int16 *a6)
{
  uint64_t v7 = gLogObjects;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 61)
    {
      unsigned int v12 = *(os_log_s **)(gLogObjects + 480);
    }

    else
    {
      unsigned int v12 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
      _t56_protocol_handleRequest_DATA_cold_4();
    }
    int v13 = 0;
    uint64_t v7 = gLogObjects;
    uint64_t inited = 4294967294LL;
    if (a3 == 9 && a2 && *(_DWORD *)(a1 + 8) == 1)
    {
      int v13 = *a2;
      if (gLogObjects && gNumLogObjects >= 61)
      {
        int v15 = *(os_log_s **)(gLogObjects + 480);
      }

      else
      {
        int v15 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        int v26 = *(_DWORD *)(a1 + 8);
        else {
          __int16 v27 = off_1001FE3D0[(char)(v13 - 1)];
        }
        *(_DWORD *)buf = 136316162;
        __int16 v35 = "_t56_protocol_handleRequest_DATA";
        __int16 v36 = 1024;
        int v37 = 853;
        __int16 v38 = 1024;
        int v39 = v26;
        __int16 v40 = 1024;
        int v41 = v13;
        __int16 v42 = 2080;
        __int16 v43 = v27;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "%s:%d role %d, msgType %d(%s)",  buf,  0x28u);
      }

      uint64_t v7 = gLogObjects;
      uint64_t inited = 4294967294LL;
      if (a6 && a5 >= 0x7D0 && a4 && v13 == 6)
      {
        *a6 = 0;
        unsigned int v16 = *(unsigned __int16 *)(a2 + 1);
        int v31 = a2[4];
        int v32 = a2[3];
        int v29 = a2[6];
        int v30 = a2[5];
        int v28 = a2[7];
        int v17 = a2[8];
        if (v7 && gNumLogObjects >= 61)
        {
          unsigned int v18 = *(os_log_s **)(v7 + 480);
        }

        else
        {
          unsigned int v18 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        int v19 = __rev16(v16);
        BOOL v20 = os_log_type_enabled(v18, OS_LOG_TYPE_INFO);
        if (v20)
        {
          int v21 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)buf = 136317186;
          __int16 v35 = "_t56_protocol_handleRequest_DATA";
          __int16 v36 = 1024;
          int v37 = 877;
          __int16 v38 = 1024;
          int v39 = v21;
          __int16 v40 = 1024;
          int v41 = 6;
          __int16 v42 = 2080;
          __int16 v43 = "DATA";
          __int16 v44 = 1024;
          int v45 = v19;
          __int16 v46 = 1024;
          int v47 = v31 | (v32 << 8);
          __int16 v48 = 1024;
          int v49 = v29 | (v30 << 8);
          __int16 v50 = 1024;
          int v51 = v17 | (v28 << 8);
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "%s:%d role %d, msgType %d(%s), sessionID %d, clientID %d, remaining %d, payloadLen %d",  buf,  0x40u);
        }

        uint64_t inited = t56_protocol_initMsg_STATUS(v20, v19, 0, 0, a4, a5, a6);
        uint64_t v7 = gLogObjects;
        int v13 = 6;
      }
    }
  }

  else
  {
    int v13 = 0;
    uint64_t inited = 4294967294LL;
  }

  if (v7 && gNumLogObjects >= 61)
  {
    int v22 = *(os_log_s **)(v7 + 480);
  }

  else
  {
    int v22 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    if ((v13 - 1) > 7u)
    {
      __int16 v23 = "UNKNOWN";
      if (a6) {
        goto LABEL_39;
      }
    }

    else
    {
      __int16 v23 = off_1001FE3D0[(char)(v13 - 1)];
      if (a6)
      {
LABEL_39:
        int v24 = *a6;
LABEL_42:
        *(_DWORD *)buf = 136316674;
        __int16 v35 = "_t56_protocol_handleRequest_DATA";
        __int16 v36 = 1024;
        int v37 = 889;
        __int16 v38 = 1024;
        int v39 = inited;
        __int16 v40 = 1024;
        int v41 = v13;
        __int16 v42 = 2080;
        __int16 v43 = v23;
        __int16 v44 = 1024;
        int v45 = a3;
        __int16 v46 = 1024;
        int v47 = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "%s:%d result %d, msgType %d(%s), dataInLen %u, dataOutLen %u",  buf,  0x34u);
        return inited;
      }
    }

    int v24 = -1;
    goto LABEL_42;
  }

  return inited;
}

uint64_t _t56_protocol_handleRequest_TERMINATE( uint64_t a1, unsigned __int8 *a2, int a3, unsigned __int8 *a4, unsigned int a5, unsigned __int16 *a6)
{
  int v7 = a3;
  uint64_t v8 = gLogObjects;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 61)
    {
      uint64_t v14 = *(os_log_s **)(gLogObjects + 480);
    }

    else
    {
      uint64_t v14 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
      _t56_protocol_handleRequest_TERMINATE_cold_4();
    }
    int v15 = 0;
    uint64_t v8 = gLogObjects;
    uint64_t inited = 4294967294LL;
    int v7 = a3;
    if (a3 == 3 && a2 && *(_DWORD *)(a1 + 8) == 1)
    {
      int v15 = *a2;
      if (gLogObjects && gNumLogObjects >= 61)
      {
        int v17 = *(os_log_s **)(gLogObjects + 480);
      }

      else
      {
        int v17 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      int v7 = 3;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        int v27 = *(_DWORD *)(a1 + 8);
        else {
          int v28 = off_1001FE3D0[(char)(v15 - 1)];
        }
        int v29 = 136316162;
        int v30 = "_t56_protocol_handleRequest_TERMINATE";
        __int16 v31 = 1024;
        int v32 = 912;
        __int16 v33 = 1024;
        int v34 = v27;
        __int16 v35 = 1024;
        int v36 = v15;
        __int16 v37 = 2080;
        __int16 v38 = v28;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "%s:%d role %d, msgType %d(%s)",  (uint8_t *)&v29,  0x28u);
      }

      uint64_t v8 = gLogObjects;
      uint64_t inited = 4294967294LL;
      if (a6 && a5 >= 0x7D0 && a4 && v15 == 7)
      {
        *a6 = 0;
        unsigned int v18 = *(unsigned __int16 *)(a2 + 1);
        if (v8 && gNumLogObjects >= 61)
        {
          int v19 = *(os_log_s **)(v8 + 480);
        }

        else
        {
          int v19 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        int v20 = __rev16(v18);
        BOOL v21 = os_log_type_enabled(v19, OS_LOG_TYPE_INFO);
        if (v21)
        {
          int v22 = *(_DWORD *)(a1 + 8);
          int v29 = 136316418;
          int v30 = "_t56_protocol_handleRequest_TERMINATE";
          __int16 v31 = 1024;
          int v32 = 929;
          __int16 v33 = 1024;
          int v34 = v22;
          __int16 v35 = 1024;
          int v36 = 7;
          __int16 v37 = 2080;
          __int16 v38 = "DATA";
          __int16 v39 = 1024;
          int v40 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "%s:%d role %d, msgType %d(%s), sessionID %d",  (uint8_t *)&v29,  0x2Eu);
        }

        uint64_t inited = t56_protocol_initMsg_STATUS(v21, v20, 0, 0, a4, a5, a6);
        uint64_t v8 = gLogObjects;
        int v15 = 7;
      }
    }
  }

  else
  {
    int v15 = 0;
    uint64_t inited = 4294967294LL;
  }

  if (v8 && gNumLogObjects >= 61)
  {
    __int16 v23 = *(os_log_s **)(v8 + 480);
  }

  else
  {
    __int16 v23 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    if ((v15 - 1) > 7u)
    {
      int v24 = "UNKNOWN";
      if (a6) {
        goto LABEL_39;
      }
    }

    else
    {
      int v24 = off_1001FE3D0[(char)(v15 - 1)];
      if (a6)
      {
LABEL_39:
        int v25 = *a6;
LABEL_42:
        int v29 = 136316674;
        int v30 = "_t56_protocol_handleRequest_TERMINATE";
        __int16 v31 = 1024;
        int v32 = 938;
        __int16 v33 = 1024;
        int v34 = inited;
        __int16 v35 = 1024;
        int v36 = v15;
        __int16 v37 = 2080;
        __int16 v38 = v24;
        __int16 v39 = 1024;
        int v40 = v7;
        __int16 v41 = 1024;
        int v42 = v25;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "%s:%d result %d, msgType %d(%s), dataInLen %u, dataOutLen %u",  (uint8_t *)&v29,  0x34u);
        return inited;
      }
    }

    int v25 = -1;
    goto LABEL_42;
  }

  return inited;
}

uint64_t t56_protocol_initMsg_STATUS( uint64_t a1, int a2, int a3, int a4, unsigned __int8 *a5, unsigned int a6, _WORD *a7)
{
  if (gLogObjects && gNumLogObjects >= 61)
  {
    unsigned int v12 = *(os_log_s **)(gLogObjects + 480);
  }

  else
  {
    unsigned int v12 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136316162;
    BOOL v21 = "t56_protocol_initMsg_STATUS";
    __int16 v22 = 1024;
    int v23 = 1463;
    __int16 v24 = 1024;
    int v25 = a2;
    __int16 v26 = 1024;
    int v27 = a3;
    __int16 v28 = 1024;
    int v29 = a4;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "%s:%d sessionID %d, status %d, status 0x%08x",  buf,  0x24u);
  }

  uint64_t v13 = 4294967294LL;
  if (a5 && a6 >= 9)
  {
    uint64_t v13 = 0LL;
    *a5 = 8;
    a5[1] = BYTE1(a2);
    a5[3] = BYTE1(a3);
    a5[2] = a2;
    a5[4] = a3;
    a5[5] = HIBYTE(a4);
    a5[6] = BYTE2(a4);
    a5[7] = BYTE1(a4);
    a5[8] = a4;
    *a7 = 9;
  }

  int v14 = *a5;
  if (gLogObjects && gNumLogObjects >= 61)
  {
    int v15 = *(os_log_s **)(gLogObjects + 480);
  }

  else
  {
    int v15 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    if ((v14 - 1) > 7u)
    {
      int v17 = "UNKNOWN";
      if (a7) {
        goto LABEL_20;
      }
    }

    else
    {
      int v17 = off_1001FE3D0[(char)(v14 - 1)];
      if (a7)
      {
LABEL_20:
        int v18 = (unsigned __int16)*a7;
LABEL_23:
        *(_DWORD *)buf = 136316674;
        BOOL v21 = "t56_protocol_initMsg_STATUS";
        __int16 v22 = 1024;
        int v23 = 1482;
        __int16 v24 = 1024;
        int v25 = v13;
        __int16 v26 = 1024;
        int v27 = a2;
        __int16 v28 = 1024;
        int v29 = v14;
        __int16 v30 = 2080;
        __int16 v31 = v17;
        __int16 v32 = 1024;
        int v33 = v18;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "%s:%d result %d, sessionID %u, msgType %d(%s), msgDataOutLen %d",  buf,  0x34u);
        return v13;
      }
    }

    int v18 = -1;
    goto LABEL_23;
  }

  return v13;
}

uint64_t t56_protocol_initMsg_DATA( uint64_t a1, int a2, int a3, int a4, unsigned int a5, const void *a6, unsigned __int8 *a7, unsigned int a8, _WORD *a9)
{
  if (gLogObjects && gNumLogObjects >= 61)
  {
    unsigned int v13 = a8;
    int v14 = *(os_log_s **)(gLogObjects + 480);
  }

  else
  {
    unsigned int v13 = a8;
    int v14 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136316418;
    int v25 = "t56_protocol_initMsg_DATA";
    __int16 v26 = 1024;
    int v27 = 1499;
    __int16 v28 = 1024;
    int v29 = a2;
    __int16 v30 = 1024;
    int v31 = a3;
    __int16 v32 = 1024;
    int v33 = a4;
    __int16 v34 = 1024;
    LODWORD(v35) = a5;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "%s:%d sessionID %d, clientID %d, remaining %d, payloadLen %d",  buf,  0x2Au);
  }

  uint64_t v15 = 4294967294LL;
  if (a5)
  {
    if (a6)
    {
      if (a7)
      {
        if (a5 <= 0x7C7)
        {
          unint64_t v16 = a5 + 9LL;
          if (v16 <= v13)
          {
            *a7 = 6;
            a7[1] = BYTE1(a2);
            a7[2] = a2;
            a7[3] = BYTE1(a3);
            a7[4] = a3;
            a7[5] = BYTE1(a4);
            a7[6] = a4;
            a7[7] = BYTE1(a5);
            a7[8] = a5;
            memcpy(a7 + 9, a6, a5);
            uint64_t v15 = 0LL;
            *a9 = v16;
          }
        }
      }
    }
  }

  int v17 = *a7;
  if (gLogObjects && gNumLogObjects >= 61)
  {
    int v18 = *(os_log_s **)(gLogObjects + 480);
  }

  else
  {
    int v18 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    if ((v17 - 1) > 7u)
    {
      int v20 = "UNKNOWN";
      if (a9) {
        goto LABEL_23;
      }
    }

    else
    {
      int v20 = off_1001FE3D0[(char)(v17 - 1)];
      if (a9)
      {
LABEL_23:
        int v21 = (unsigned __int16)*a9;
LABEL_26:
        *(_DWORD *)buf = 136316674;
        int v25 = "t56_protocol_initMsg_DATA";
        __int16 v26 = 1024;
        int v27 = 1522;
        __int16 v28 = 1024;
        int v29 = v15;
        __int16 v30 = 1024;
        int v31 = a2;
        __int16 v32 = 1024;
        int v33 = v17;
        __int16 v34 = 2080;
        __int16 v35 = v20;
        __int16 v36 = 1024;
        int v37 = v21;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "%s:%d result %d, sessionID %u, msgType %d(%s), msgDataOutLen %d",  buf,  0x34u);
        return v15;
      }
    }

    int v21 = -1;
    goto LABEL_26;
  }

  return v15;
}

uint64_t t56_protocol_initMsg_DISCOVER(uint64_t a1, int a2, unsigned __int8 *a3, unsigned int a4, _WORD *a5)
{
  if (gLogObjects && gNumLogObjects >= 61)
  {
    int v9 = *(os_log_s **)(gLogObjects + 480);
  }

  else
  {
    int v9 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
    t56_protocol_initMsg_DISCOVER_cold_2();
  }
  uint64_t v10 = 4294967294LL;
  if (a3 && a4 >= 3)
  {
    uint64_t v10 = 0LL;
    *a3 = 3;
    a3[1] = BYTE1(a2);
    a3[2] = a2;
    *a5 = 3;
  }

  int v11 = *a3;
  if (gLogObjects && gNumLogObjects >= 61)
  {
    unsigned int v12 = *(os_log_s **)(gLogObjects + 480);
  }

  else
  {
    unsigned int v12 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    if ((v11 - 1) > 7u)
    {
      int v14 = "UNKNOWN";
      if (a5) {
        goto LABEL_20;
      }
    }

    else
    {
      int v14 = off_1001FE3D0[(char)(v11 - 1)];
      if (a5)
      {
LABEL_20:
        int v15 = (unsigned __int16)*a5;
LABEL_23:
        int v16 = 136316674;
        int v17 = "t56_protocol_initMsg_DISCOVER";
        __int16 v18 = 1024;
        int v19 = 1316;
        __int16 v20 = 1024;
        int v21 = v10;
        __int16 v22 = 1024;
        int v23 = a2;
        __int16 v24 = 1024;
        int v25 = v11;
        __int16 v26 = 2080;
        int v27 = v14;
        __int16 v28 = 1024;
        int v29 = v15;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "%s:%d result %d, sessionID %u, msgType %d(%s), msgDataOutLen %d",  (uint8_t *)&v16,  0x34u);
        return v10;
      }
    }

    int v15 = -1;
    goto LABEL_23;
  }

  return v10;
}

uint64_t t56_protocol_initMsg_POLL(uint64_t a1, unsigned __int8 *a2, unsigned int a3, _WORD *a4)
{
  if (gLogObjects && gNumLogObjects >= 61)
  {
    int v7 = *(os_log_s **)(gLogObjects + 480);
  }

  else
  {
    int v7 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    t56_protocol_initMsg_POLL_cold_2();
  }
  uint64_t v8 = 4294967294LL;
  if (a2 && a3 >= 5)
  {
    uint64_t v8 = 0LL;
    *a2 = 5;
    *(_DWORD *)(a2 + 1) = 0;
    *a4 = 5;
  }

  int v9 = *a2;
  if (gLogObjects && gNumLogObjects >= 61)
  {
    uint64_t v10 = *(os_log_s **)(gLogObjects + 480);
  }

  else
  {
    uint64_t v10 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    else {
      unsigned int v12 = off_1001FE3D0[(char)(v9 - 1)];
    }
    int v13 = -1;
    if (a4) {
      int v13 = (unsigned __int16)*a4;
    }
    int v14 = 136316674;
    int v15 = "t56_protocol_initMsg_POLL";
    __int16 v16 = 1024;
    int v17 = 1344;
    __int16 v18 = 1024;
    int v19 = v8;
    __int16 v20 = 1024;
    int v21 = -1;
    __int16 v22 = 1024;
    int v23 = v9;
    __int16 v24 = 2080;
    int v25 = v12;
    __int16 v26 = 1024;
    int v27 = v13;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "%s:%d result %d sessionID %d, msgType %d(%s), msgDataOutLen %d",  (uint8_t *)&v14,  0x34u);
  }

  return v8;
}

void OUTLINED_FUNCTION_7_13(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose((const void *)(v1 - 80), 8) = a1;
}

  ;
}

void *_createFeature_23(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v1 = calloc(1uLL, 0x10uLL);
  CFArrayRef v2 = v1;
  if (v1)
  {
    *(_WORD *)uint64_t v1 = 0;
    v1[1] = 0LL;
    platform_hid_incrementUserCount();
  }

  return v2;
}

uint64_t _destroyFeature_23(void **a1, uint64_t a2)
{
  uint64_t v2 = 0LL;
  if (a1 && a2)
  {
    int v5 = *a1;
    if (*a1)
    {
      uint64_t v2 = platform_hid_unregister_all_descriptors(*(void *)(a2 + 8));
      uint64_t v6 = (const __CFDictionary *)*((void *)v5 + 1);
      if (v6)
      {
        CFDictionaryApplyFunction( v6,  (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_releaseHIDComponents,  0LL);
        int v7 = (const void *)*((void *)v5 + 1);
        if (v7)
        {
          CFRelease(v7);
          *((void *)v5 + 1) = 0LL;
        }
      }

      acc_endpoint_removeProperty(*(pthread_mutex_t **)a2, kCFACCProperties_Endpoint_Bluetooth_HIDFunction);
      platform_hid_decrementUserCount();
      if (*a1)
      {
        free(*a1);
        *a1 = 0LL;
      }
    }

    else
    {
      return 0LL;
    }
  }

  return v2;
}

uint64_t _startFeatureFromDevice_14(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t *)result;
    if (*(void *)result)
    {
      uint64_t v2 = (uint64_t *)*v1;
      if (*v1)
      {
        uint64_t result = *v2;
        if (!*v2) {
          return result;
        }
        if (acc_connection_getType(result) == 2 || acc_endpoint_getTransportType(*v1) == 8)
        {
          iAP2MsgInit((uint64_t)(v1 + 15), 26630, v1[24], 0xFFFF, 0LL, 0LL);
          return iap2_sessionControl_sendOutgoingMessage(v1, (uint64_t)(v1 + 15));
        }
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t _checkIdentificationInfo_20(uint64_t a1)
{
  unsigned __int8 v14 = -86;
  if (gLogObjects && gNumLogObjects >= 33)
  {
    uint64_t v2 = *(os_log_s **)(gLogObjects + 256);
  }

  else
  {
    uint64_t v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    _checkIdentificationInfo_cold_5_0();
  }
  uint64_t v3 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&_checkIdentificationInfo__kMsgHIDList, 7u, &v14);
  if ((_DWORD)v3) {
    return v3;
  }
  int v4 = v14;
  uint64_t v5 = iap2_identification_checkIdentificationMsgIDs( a1,  (uint64_t)&_checkIdentificationInfo__kMsgNativeHIDList,  1u,  &v14);
  uint64_t v6 = v5;
  BOOL v7 = 0;
  int v8 = v14;
  BOOL v9 = 0;
  if (v14 | v4 && !(_DWORD)v5)
  {
    iap2_features_createFeature(a1, 0xBu);
    iap2_identification_setIdentifiedForFeature(a1, 0xBu);
    BOOL v7 = v4 != 0;
    BOOL v9 = v8 != 0;
  }

  uint64_t Feature = (_BYTE *)iap2_feature_getFeature(a1, 0xBu);
  if (Feature)
  {
    *uint64_t Feature = v7;
    Feature[1] = v9;
  }

  if (!v7) {
    goto LABEL_21;
  }
  if (gLogObjects && gNumLogObjects >= 33)
  {
    int v11 = *(os_log_s **)(gLogObjects + 256);
  }

  else
  {
    int v11 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    _checkIdentificationInfo_cold_3_1();
    if (!v9) {
      return v6;
    }
  }

  else
  {
LABEL_21:
    if (!v9) {
      return v6;
    }
  }

  if (gLogObjects && gNumLogObjects >= 33)
  {
    unsigned int v12 = *(os_log_s **)(gLogObjects + 256);
  }

  else
  {
    unsigned int v12 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
    _checkIdentificationInfo_cold_1_4();
  }
  return v6;
}

void _handleIdentificationRejection_3(uint64_t a1)
{
  uint64_t Feature = iap2_feature_getFeature(a1, 0xBu);
  if (Feature)
  {
    uint64_t v2 = Feature;
    uint64_t v3 = *(const __CFDictionary **)(Feature + 8);
    if (v3)
    {
      CFDictionaryApplyFunction(v3, (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_releaseHIDComponents, 0LL);
      int v4 = *(const void **)(v2 + 8);
      if (v4)
      {
        CFRelease(v4);
        *(void *)(v2 + _Block_object_dispose((const void *)(v1 - 80), 8) = 0LL;
      }
    }
  }

uint64_t _hidComponentFunctionType(uint64_t a1, int a2)
{
  if (!a1) {
    return 11LL;
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 0xBu);
  if (!Feature)
  {
    __int16 v16 = (os_log_s *)logObjectForModule_30();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      _hidComponentFunctionType_cold_1();
    }
    return 11LL;
  }

  uint64_t v4 = Feature;
  uint64_t v5 = *(const __CFDictionary **)(Feature + 8);
  if (!v5)
  {
    int v17 = (os_log_s *)logObjectForModule_30();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      _hidComponentFunctionType_cold_2();
    }
    return 11LL;
  }

  CFIndex Count = CFDictionaryGetCount(v5);
  if (!Count) {
    return 11LL;
  }
  uint64_t v7 = Count;
  __chkstk_darwin(Count);
  BOOL v9 = (uint64_t *)((char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  memset(v9, 170, v8);
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v4 + 8), 0LL, (const void **)v9);
  if (v7 >= 1)
  {
    int v19 = v21;
    *(void *)&__int128 v10 = 134218240LL;
    __int128 v18 = v10;
    do
    {
      uint64_t v11 = *v9;
      if (*v9)
      {
        if (!*(_DWORD *)v11)
        {
          uint64_t result = *(unsigned int *)(v11 + 16);
        }
      }

      else
      {
        uint64_t v13 = gLogObjects;
        int v14 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 33)
        {
          int v15 = *(os_log_s **)(gLogObjects + 256);
        }

        else
        {
          int v15 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = v18;
            uint64_t v23 = v13;
            __int16 v24 = 1024;
            int v25 = v14;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            int v15 = (os_log_s *)&_os_log_default;
          }
        }

        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          _hidComponentFunctionType_cold_3(&v20, v19, v15);
        }
      }

      ++v9;
      --v7;
    }

    while (v7);
  }

  return 11LL;
}

void *logObjectForModule_30()
{
  if (gLogObjects && gNumLogObjects >= 33) {
    return *(void **)(gLogObjects + 256);
  }
  id v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

uint64_t _validateHIDComponent(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t Feature = iap2_feature_getFeature(result, 0xBu);
    if (Feature)
    {
      uint64_t v4 = *(const __CFDictionary **)(Feature + 8);
      if (v4)
      {
        CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(Feature + 8));
        if (Count)
        {
          uint64_t v6 = Count;
          __chkstk_darwin(Count);
          size_t v8 = (uint64_t *)((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
          memset(v8, 170, v7);
          CFDictionaryGetKeysAndValues(v4, 0LL, (const void **)v8);
          if (v6 >= 1)
          {
            int v17 = v19;
            *(void *)&__int128 v9 = 134218240LL;
            __int128 v16 = v9;
            do
            {
              uint64_t v10 = *v8;
              if (*v8)
              {
                if (!*(_DWORD *)v10 && *(_DWORD *)(v10 + 16) <= 0xAu && *(unsigned __int16 *)(v10 + 4) == a2)
                {
                  int v14 = 1;
                  return v14 != 0;
                }
              }

              else
              {
                uint64_t v11 = gLogObjects;
                int v12 = gNumLogObjects;
                if (gLogObjects && gNumLogObjects >= 33)
                {
                  uint64_t v13 = *(os_log_s **)(gLogObjects + 256);
                }

                else
                {
                  uint64_t v13 = (os_log_s *)&_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = v16;
                    uint64_t v21 = v11;
                    __int16 v22 = 1024;
                    int v23 = v12;
                    _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                    uint64_t v13 = (os_log_s *)&_os_log_default;
                  }
                }

                if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
                  _hidComponentFunctionType_cold_3(&v18, v17, v13);
                }
              }

              ++v8;
              --v6;
            }

            while (v6);
          }

          int v14 = 0;
          return v14 != 0;
        }
      }
    }

    else
    {
      int v15 = (os_log_s *)logObjectForModule_30();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        _hidComponentFunctionType_cold_1();
      }
    }

    int v14 = 0;
    return v14 != 0;
  }

  return result;
}

uint64_t iap2_hid_StartHIDMsgHandler(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = 0LL;
  int v73 = 0;
  char DataAsU8 = 0;
  int v71 = 0;
  if (a1 && a2)
  {
    kdebug_trace(731124096LL, 0LL, 0LL, 0LL, 0LL);
    if (iAP2MsgGetMsgID(a2) != 26624)
    {
      uint64_t v2 = 0LL;
      goto LABEL_83;
    }

    unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
    if (FirstParam)
    {
      NextParam = (unsigned __int16 *)FirstParam;
      char v56 = 0;
      char v6 = 0;
      char key = 0;
      CFDataRef v7 = 0LL;
      unsigned __int16 v8 = 0;
      while (1)
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        switch(ParamID)
        {
          case 0:
            int DataAsU16 = iAP2MsgGetDataAsU16(NextParam, &v73);
            if (!v73)
            {
              unsigned __int16 v8 = DataAsU16;
              char key = _validateHIDComponent((uint64_t)a1, DataAsU16);
              goto LABEL_23;
            }

            __int16 v36 = (os_log_s *)logObjectForModule_30();
            if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
              iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
            }
            goto LABEL_81;
          case 1:
            HIWORD(v71) = iAP2MsgGetDataAsU16(NextParam, &v73);
            char v6 = 1;
            goto LABEL_23;
          case 2:
            LOWORD(v71) = iAP2MsgGetDataAsU16(NextParam, &v73);
            char v56 = 1;
            goto LABEL_23;
          case 3:
            char DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v73);
            goto LABEL_23;
          case 4:
            unsigned int ParamValueLen = iAP2MsgGetParamValueLen(NextParam);
            uint64_t DataAsData = iAP2MsgGetDataAsData((uint64_t)NextParam, &v73);
            if (v73)
            {
              int v37 = (os_log_s *)logObjectForModule_30();
              if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
                iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_8(a2);
              }
              goto LABEL_81;
            }

            __int128 v16 = (const UInt8 *)DataAsData;
            if (v7) {
              CFRelease(v7);
            }
            CFDataRef v7 = CFDataCreate(kCFAllocatorDefault, v16, ParamValueLen);
LABEL_23:
            NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
            if (!NextParam) {
              goto LABEL_26;
            }
            break;
          default:
            uint64_t v11 = gLogObjects;
            int v12 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 33)
            {
              uint64_t v13 = *(os_log_s **)(gLogObjects + 256);
            }

            else
            {
              uint64_t v13 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                uint64_t v75 = v11;
                __int16 v76 = 1024;
                int v77 = v12;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              }
            }

            if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 67109120;
              LODWORD(v75) = ParamID;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Unrecognized paramID:0x%04X", buf, 8u);
            }

            goto LABEL_23;
        }
      }
    }

    unsigned __int16 v8 = 0;
    CFDataRef v7 = 0LL;
    char key = 0;
    char v6 = 0;
    char v56 = 0;
LABEL_26:
    if (v7 && (v6 & 1) != 0 && (v56 & 1) != 0 && (key & 1) != 0)
    {
      CFDataRef v57 = v7;
      *(_DWORD *)buf = 0;
      int v69 = 2;
      int valuePtr = 1;
      int v67 = 4;
      int v68 = 3;
      int v65 = 6;
      int v66 = 5;
      int v64 = 7;
      int v63 = 9;
      int v61 = 11;
      int v62 = 10;
      int v60 = 12;
      CFNumberRef v17 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, buf);
      CFNumberRef v18 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
      CFNumberRef v19 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v69);
      CFNumberRef v53 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v68);
      CFNumberRef v52 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v67);
      CFNumberRef v51 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v66);
      CFNumberRef v50 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v65);
      CFNumberRef v49 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v64);
      CFNumberRef v48 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v63);
      CFNumberRef v47 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v62);
      CFNumberRef v46 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v61);
      CFNumberRef v45 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v60);
      CFNumberRef value = CFNumberCreate(kCFAllocatorDefault, kCFNumberShortType, (char *)&v71 + 2);
      CFNumberRef v20 = CFNumberCreate(kCFAllocatorDefault, kCFNumberShortType, &v71);
      CFNumberRef v43 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCharType, &DataAsU8);
      uint64_t AccessoryInfo = acc_endpoint_getAccessoryInfo(*a1);
      CFAllocatorRef allocator = v19;
      CFNumberRef cf = v20;
      if (AccessoryInfo)
      {
        uint64_t v22 = AccessoryInfo;
        int v23 = acc_accInfo_retainedProperty(AccessoryInfo, 0, 0LL);
        __int16 v24 = acc_accInfo_retainedProperty(v22, 1, 0LL);
        int v40 = acc_accInfo_retainedProperty(v22, 2, 0LL);
        __int16 v39 = acc_accInfo_retainedProperty(v22, 3, 0LL);
        int v25 = (void *)acc_accInfo_retainedProperty(v22, 5, 0LL);
      }

      else
      {
        __int16 v26 = iap2_identification_paramName(0);
        int v23 = CFStringCreateWithCString(kCFAllocatorDefault, v26, 0x8000100u);
        int v27 = iap2_identification_paramName(2);
        __int16 v24 = CFStringCreateWithCString(kCFAllocatorDefault, v27, 0x8000100u);
        __int16 v28 = iap2_identification_paramName(1);
        int v40 = CFStringCreateWithCString(kCFAllocatorDefault, v28, 0x8000100u);
        int v29 = iap2_identification_paramName(3);
        __int16 v39 = CFStringCreateWithCString(kCFAllocatorDefault, v29, 0x8000100u);
        __int16 v30 = iap2_identification_paramName(4);
        int v25 = (void *)CFStringCreateWithCString(kCFAllocatorDefault, v30, 0x8000100u);
      }

      int v31 = v25;
      uint64_t v32 = v8;
      int v59 = _hidComponentFunctionType((uint64_t)a1, v8);
      CFNumberRef v33 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v59);
      CFMutableStringRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      CFDictionaryAddValue(Mutable, v17, @"iAP");
      CFDictionaryAddValue(Mutable, v18, value);
      CFDictionaryAddValue(Mutable, allocator, cf);
      CFDictionaryAddValue(Mutable, v45, v23);
      CFDictionaryAddValue(Mutable, v52, v24);
      CFDictionaryAddValue(Mutable, v51, v40);
      CFDictionaryAddValue(Mutable, v50, v39);
      CFTypeRef v41 = v31;
      CFDictionaryAddValue(Mutable, v53, v31);
      CFDictionaryAddValue(Mutable, v49, v43);
      CFDictionaryAddValue(Mutable, v48, v57);
      CFDictionaryAddValue(Mutable, v47, v33);
      CFDictionaryAddValue(Mutable, v46, kCFBooleanTrue);
      uint64_t v35 = platform_hid_register_descriptor(a1[1], v32, (uint64_t)Mutable);
      if (value) {
        CFRelease(value);
      }
      if (cf) {
        CFRelease(cf);
      }
      if (v43) {
        CFRelease(v43);
      }
      if (v23) {
        CFRelease(v23);
      }
      if (v24) {
        CFRelease(v24);
      }
      if (v40) {
        CFRelease(v40);
      }
      CFDataRef v7 = v57;
      if (v39) {
        CFRelease(v39);
      }
      if (v41) {
        CFRelease(v41);
      }
      if (v33) {
        CFRelease(v33);
      }
      if (v17) {
        CFRelease(v17);
      }
      if (v18) {
        CFRelease(v18);
      }
      if (allocator) {
        CFRelease(allocator);
      }
      if (v53) {
        CFRelease(v53);
      }
      if (v52) {
        CFRelease(v52);
      }
      if (v51) {
        CFRelease(v51);
      }
      if (v50) {
        CFRelease(v50);
      }
      if (v49) {
        CFRelease(v49);
      }
      if (v48) {
        CFRelease(v48);
      }
      if (v47) {
        CFRelease(v47);
      }
      if (v46) {
        CFRelease(v46);
      }
      if (v45) {
        CFRelease(v45);
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
      goto LABEL_82;
    }

uint64_t iap2_hid_AccessoryHIDReportHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0LL;
  int v23 = 0;
  if (a1 && a2)
  {
    kdebug_trace(731124136LL, 0LL, 0LL, 0LL, 0LL);
    if (iAP2MsgGetMsgID(a2) == 26626 && (unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL)) != 0)
    {
      NextParam = (unsigned __int16 *)FirstParam;
      unsigned __int8 v7 = 0;
      CFDataRef v8 = 0LL;
      unsigned __int16 v9 = 0;
      do
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        if (ParamID == 1)
        {
          unsigned int ParamValueLen = iAP2MsgGetParamValueLen(NextParam);
          uint64_t DataAsData = iAP2MsgGetDataAsData((uint64_t)NextParam, &v23);
          if (v23)
          {
            uint64_t v21 = (os_log_s *)logObjectForModule_30();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
              iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_4(a2);
            }
            goto LABEL_29;
          }

          int v15 = (const UInt8 *)DataAsData;
          if (v8) {
            CFRelease(v8);
          }
          CFDataRef v8 = CFDataCreate(kCFAllocatorDefault, v15, ParamValueLen);
        }

        else
        {
          int v11 = ParamID;
          if (ParamID)
          {
            uint64_t v16 = gLogObjects;
            int v17 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 33)
            {
              CFNumberRef v18 = *(os_log_s **)(gLogObjects + 256);
            }

            else
            {
              CFNumberRef v18 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                uint64_t v25 = v16;
                __int16 v26 = 1024;
                int v27 = v17;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              }
            }

            if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 67109120;
              LODWORD(v25) = v11;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Unrecognized paramID:0x%04X", buf, 8u);
            }
          }

          else
          {
            int DataAsU16 = iAP2MsgGetDataAsU16(NextParam, &v23);
            if (v23)
            {
              CFNumberRef v20 = (os_log_s *)logObjectForModule_30();
              if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
                iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
              }
              goto LABEL_29;
            }

            unsigned __int16 v9 = DataAsU16;
            unsigned __int8 v7 = _validateHIDComponent(a1, DataAsU16);
          }
        }

        NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
      }

      while (NextParam);
      if ((v7 & (v8 != 0LL)) == 1)
      {
        uint64_t v19 = platform_hid_in_report(*(void *)(a1 + 8), v9, (uint64_t)v8);
        goto LABEL_30;
      }

unint64_t iap2_hid_AccessoryHIDGetReportResponseHandler(uint64_t a1, uint64_t a2)
{
  unint64_t result = 0LL;
  int v27 = 0;
  uint64_t v26 = a1;
  if (a1 && a2)
  {
    if (iAP2MsgGetMsgID(a2) == 26629)
    {
      unint64_t result = iAP2MsgGetFirstParam(a2, 0LL);
      if (result)
      {
        NextParam = (unsigned __int16 *)result;
        uint64_t v24 = 0LL;
        uint64_t v25 = 0LL;
        CFDataRef v6 = 0LL;
        unsigned __int8 v7 = 0;
        unsigned __int16 v8 = 0;
        while (2)
        {
          int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
          switch(ParamID)
          {
            case 0:
              int DataAsU16 = iAP2MsgGetDataAsU16(NextParam, &v27);
              if (!v27)
              {
                unsigned __int16 v8 = DataAsU16;
                HIDWORD(v24) = _validateHIDComponent(v26, DataAsU16);
                goto LABEL_24;
              }

              CFNumberRef v20 = (os_log_s *)logObjectForModule_30();
              if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
                iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
              }
              goto LABEL_36;
            case 1:
              unsigned __int8 DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v27);
              if (v27)
              {
                uint64_t v21 = (os_log_s *)logObjectForModule_30();
                if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
                  iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_4(a2);
                }
                goto LABEL_36;
              }

              unsigned __int8 v7 = DataAsU8;
              LODWORD(v25) = 1;
LABEL_24:
              NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
              if (NextParam) {
                continue;
              }
              if ((HIDWORD(v24) & v25 & HIDWORD(v25) & 1) != 0 && v6)
              {
                uint64_t report_response = platform_hid_get_report_response( *(void *)(v26 + 8),  v8,  v7,  v24,  (uint64_t)v6);
                goto LABEL_37;
              }

uint64_t iap2_hid_StopHIDMsgHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0LL;
  int v15 = 0;
  if (a1 && a2)
  {
    uint64_t result = iAP2MsgGetFirstParam(a2, 0LL);
    if (result)
    {
      NextParam = (unsigned __int16 *)result;
      char v6 = 0;
      unsigned __int16 v7 = 0;
      while (1)
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        if (ParamID)
        {
          int v9 = ParamID;
          uint64_t v10 = gLogObjects;
          int v11 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 33)
          {
            int v12 = *(os_log_s **)(gLogObjects + 256);
          }

          else
          {
            int v12 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              uint64_t v17 = v10;
              __int16 v18 = 1024;
              int v19 = v11;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              int v12 = (os_log_s *)&_os_log_default;
            }
          }

          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v17) = v9;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Unrecognized paramID:0x%04X", buf, 8u);
          }
        }

        else
        {
          int DataAsU16 = iAP2MsgGetDataAsU16(NextParam, &v15);
          if (v15)
          {
            int v14 = (os_log_s *)logObjectForModule_30();
            uint64_t result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
            if (!(_DWORD)result) {
              return result;
            }
            iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
            return 0LL;
          }

          unsigned __int16 v7 = DataAsU16;
          char v6 = _validateHIDComponent(a1, DataAsU16);
        }

        NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
        if (!NextParam)
        {
          if ((v6 & 1) == 0) {
            return 0LL;
          }
          return platform_hid_unregister_descriptor(*(void *)(a1 + 8), v7);
        }
      }
    }
  }

  return result;
}

uint64_t iap2_hid_sendOutReport(uint64_t *a1, CFDictionaryRef theDict)
{
  uint64_t result = 0LL;
  if (a1 && theDict)
  {
    uint64_t Value = (const __CFData *)CFDictionaryGetValue(theDict, @"Report");
    char v6 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"ComponentID");
    __int16 valuePtr = 0;
    CFNumberGetValue(v6, kCFNumberShortType, &valuePtr);
    iAP2MsgInit((uint64_t)(a1 + 15), 26625, a1[24], 0xFFFF, 0LL, 0LL);
    if (v6)
    {
      unsigned __int16 v11 = 0;
      CFNumberGetValue(v6, kCFNumberShortType, &v11);
      BOOL v7 = iAP2MsgAddU16Param((uint64_t)(a1 + 15), 0LL, 0, v11) == 0;
      if (!Value) {
        return 0LL;
      }
    }

    else
    {
      BOOL v7 = 1;
      if (!Value) {
        return 0LL;
      }
    }

    BytePtr = CFDataGetBytePtr(Value);
    unsigned __int16 Length = CFDataGetLength(Value);
    else {
      char v10 = 1;
    }
    if ((v10 & 1) != 0) {
      return 0LL;
    }
    return iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
  }

  return result;
}

uint64_t iap2_hid_sendGetReport(uint64_t *a1, CFDictionaryRef theDict)
{
  uint64_t result = 0LL;
  if (!a1 || !theDict) {
    return result;
  }
  uint64_t Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"ComponentID");
  char v6 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"ReportType");
  BOOL v7 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"ReportID");
  iAP2MsgInit((uint64_t)(a1 + 15), 26628, a1[24], 0xFFFF, 0LL, 0LL);
  if (Value)
  {
    unsigned __int16 valuePtr = 0;
    CFNumberGetValue(Value, kCFNumberShortType, &valuePtr);
    BOOL v8 = iAP2MsgAddU16Param((uint64_t)(a1 + 15), 0LL, 0, valuePtr) == 0;
    if (v6) {
      goto LABEL_5;
    }
  }

  else
  {
    BOOL v8 = 1;
    if (v6)
    {
LABEL_5:
      char v12 = 0;
      CFNumberGetValue(v6, kCFNumberCharType, &v12);
      BOOL v9 = iAP2MsgAddU8Param((uint64_t)(a1 + 15), 0LL, 1, v12) == 0LL;
      if (v7) {
        goto LABEL_6;
      }
      return 0LL;
    }
  }

  BOOL v9 = 1;
  if (!v7) {
    return 0LL;
  }
LABEL_6:
  char v11 = 0;
  CFNumberGetValue(v7, kCFNumberCharType, &v11);
  char v10 = iAP2MsgAddU8Param((uint64_t)(a1 + 15), 0LL, 2, v11);
  uint64_t result = 0LL;
  if (!v8 && !v9)
  {
    if (v10) {
      return iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
    }
  }

  return result;
}

uint64_t iap2_hid_sendComponentUpdate(uint64_t *a1, CFDictionaryRef theDict)
{
  uint64_t result = 0LL;
  if (!a1 || !theDict) {
    return result;
  }
  uint64_t Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"ComponentID");
  char v6 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"Enabled");
  iAP2MsgInit((uint64_t)(a1 + 15), 26631, a1[24], 0xFFFF, 0LL, 0LL);
  if (!Value)
  {
    BOOL v7 = 1;
    if (v6) {
      goto LABEL_5;
    }
    return 0LL;
  }

  unsigned __int16 valuePtr = 0;
  CFNumberGetValue(Value, kCFNumberShortType, &valuePtr);
  BOOL v7 = iAP2MsgAddU16Param((uint64_t)(a1 + 15), 0LL, 0, valuePtr) == 0;
  if (!v6) {
    return 0LL;
  }
LABEL_5:
  char v10 = 0;
  CFNumberGetValue(v6, kCFNumberCharType, &v10);
  BOOL v8 = iAP2MsgAddU8Param((uint64_t)(a1 + 15), 0LL, 1, v10);
  uint64_t result = 0LL;
  if (v8) {
    char v9 = v7;
  }
  else {
    char v9 = 1;
  }
  if ((v9 & 1) == 0) {
    return iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
  }
  return result;
}

BOOL _parseiAPHIDComponentIdentificationParams(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  int v36 = -1;
  if (!a1)
  {
    uint64_t v32 = (os_log_s *)logObjectForModule_30();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
      _parseiAPHIDComponentIdentificationParams_cold_1();
    }
    return 0LL;
  }

  uint64_t Feature = iap2_feature_getFeature(a1, 0xBu);
  if (!Feature)
  {
    iap2_features_createFeature(a1, 0xBu);
    uint64_t Feature = iap2_feature_getFeature(a1, 0xBu);
    if (!Feature)
    {
      CFNumberRef v33 = (os_log_s *)logObjectForModule_30();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
        _parseiAPHIDComponentIdentificationParams_cold_2();
      }
      return 0LL;
    }
  }

  int ParamID = iAP2MsgGetParamID((uint64_t)a3);
  if (gLogObjects && gNumLogObjects >= 33)
  {
    BOOL v8 = *(os_log_s **)(gLogObjects + 256);
  }

  else
  {
    BOOL v8 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    int v38 = ParamID;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "parsing identification paramID 0x%X", buf, 8u);
  }

  if (ParamID != 18)
  {
    BOOL v23 = 0LL;
    unsigned int v14 = 10;
    goto LABEL_55;
  }

  __int16 valuePtr = 0;
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, a3);
  if (!FirstParam) {
    goto LABEL_43;
  }
  NextParam = (unsigned __int16 *)FirstParam;
  cStr = 0LL;
  BOOL v11 = 0;
  BOOL v12 = 0;
  BOOL v13 = 0;
  unsigned int v14 = 10;
  int v15 = 9;
  do
  {
    int v16 = iAP2MsgGetParamID((uint64_t)NextParam);
    if (v16 == 2)
    {
      if (v11)
      {
        BOOL v11 = 1;
        goto LABEL_23;
      }

      unsigned int DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v36);
      int v15 = DataAsU8;
      if (v36)
      {
        BOOL v11 = 0;
      }

      else
      {
        BOOL v11 = DataAsU8 < 0xB;
        if (DataAsU8 >= 0xB) {
          unsigned int v14 = 6;
        }
      }
    }

    else if (v16 == 1)
    {
      if (v12)
      {
        BOOL v12 = 1;
        goto LABEL_23;
      }

      cStr = (char *)iAP2MsgGetDataAsString(NextParam, (BOOL *)&v36);
      BOOL v12 = v36 == 0;
    }

    else
    {
      if (v16) {
        goto LABEL_30;
      }
      if (v13)
      {
        BOOL v13 = 1;
LABEL_23:
        unsigned int v14 = 5;
        goto LABEL_30;
      }

      __int16 valuePtr = iAP2MsgGetDataAsU16(NextParam, &v36);
      BOOL v13 = v36 == 0;
    }

BOOL _parseUSBHostHIDComponentIdentificationParams(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  BOOL v43 = 0;
  if (!a1)
  {
    uint64_t v35 = (os_log_s *)logObjectForModule_30();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
      _parseiAPHIDComponentIdentificationParams_cold_1();
    }
    return 0LL;
  }

  uint64_t v5 = a1;
  uint64_t Feature = iap2_feature_getFeature(a1, 0xBu);
  if (!Feature)
  {
    iap2_features_createFeature(v5, 0xBu);
    uint64_t Feature = iap2_feature_getFeature(v5, 0xBu);
    if (!Feature)
    {
      int v36 = (os_log_s *)logObjectForModule_30();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
        _parseiAPHIDComponentIdentificationParams_cold_2();
      }
      return 0LL;
    }
  }

  int ParamID = iAP2MsgGetParamID((uint64_t)a3);
  if (gLogObjects && gNumLogObjects >= 33)
  {
    BOOL v8 = *(os_log_s **)(gLogObjects + 256);
  }

  else
  {
    BOOL v8 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    int v45 = ParamID;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "parsing identification paramID 0x%X", buf, 8u);
  }

  if (ParamID != 23)
  {
    BOOL v18 = 0LL;
    unsigned int v16 = 10;
LABEL_63:
    platform_usb_clearUSBHostHIDInterfaces(*(void *)(v5 + 16));
    iap2_identification_addRejectParam(v5, 18, v16);
    return v18;
  }

  __int16 valuePtr = 0;
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, a3);
  if (!FirstParam)
  {
LABEL_48:
    BOOL v18 = 0LL;
    unsigned int v16 = 2;
    goto LABEL_63;
  }

  NextParam = (unsigned __int16 *)FirstParam;
  uint64_t v37 = Feature;
  uint64_t v38 = v5;
  cStr = 0LL;
  uint64_t v41 = 0LL;
  BOOL v11 = 0;
  BOOL v12 = 0;
  BOOL v13 = 0;
  BOOL v14 = 0;
  BOOL v15 = 0;
  unsigned int v16 = 10;
  int v39 = 9;
  do
  {
    switch(iAP2MsgGetParamID((uint64_t)NextParam))
    {
      case 0u:
        if (v15)
        {
          BOOL v15 = 1;
          goto LABEL_25;
        }

        __int16 valuePtr = iAP2MsgGetDataAsU16(NextParam, &v43);
        BOOL v15 = !v43;
        break;
      case 1u:
        if (v14)
        {
          BOOL v14 = 1;
          goto LABEL_25;
        }

        cStr = (char *)iAP2MsgGetDataAsString(NextParam, &v43);
        BOOL v14 = !v43;
        break;
      case 2u:
        if (v13)
        {
          BOOL v13 = 1;
          goto LABEL_25;
        }

        unsigned int DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v43);
        int v39 = DataAsU8;
        if (v43)
        {
          BOOL v13 = 0;
        }

        else
        {
          BOOL v13 = DataAsU8 < 0xB;
          if (DataAsU8 >= 0xB) {
            unsigned int v16 = 6;
          }
        }

        break;
      case 3u:
        if (v12)
        {
          BOOL v12 = 1;
          goto LABEL_25;
        }

        LOWORD(v41) = iAP2MsgGetDataAsU16(NextParam, &v43);
        BOOL v12 = !v43;
        break;
      case 4u:
        if (v11)
        {
          BOOL v11 = 1;
LABEL_25:
          unsigned int v16 = 5;
        }

        else
        {
          WORD2(v41) = iAP2MsgGetDataAsU16(NextParam, &v43);
          BOOL v11 = !v43;
        }

        break;
      default:
        break;
    }

    NextParam = iAP2MsgGetNextParam(a2, a3, NextParam);
  }

  while (NextParam);
  if (!v15 || !v14 || !v13 || !v12 || !v11 || v16 == 5)
  {
    uint64_t v5 = v38;
    if (v16 != 10) {
      goto LABEL_62;
    }
    goto LABEL_48;
  }

  CFNumberRef v19 = CFNumberCreate(kCFAllocatorDefault, kCFNumberShortType, &valuePtr);
  uint64_t v5 = v38;
  if (v19)
  {
    CFNumberRef v20 = v19;
    CFMutableStringRef Mutable = *(const __CFDictionary **)(v37 + 8);
    if (!Mutable)
    {
      CFMutableStringRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 1LL, &kCFTypeDictionaryKeyCallBacks, 0LL);
      *(void *)(v37 + _Block_object_dispose((const void *)(v1 - 80), 8) = Mutable;
    }

    if (CFDictionaryContainsKey(Mutable, v20))
    {
      uint64_t v22 = *(const __CFDictionary **)(v37 + 8);
      if (v22)
      {
        CFDictionaryApplyFunction( v22,  (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_releaseHIDComponents,  0LL);
        BOOL v23 = *(const void **)(v37 + 8);
        if (v23)
        {
          CFRelease(v23);
          *(void *)(v37 + _Block_object_dispose((const void *)(v1 - 80), 8) = 0LL;
        }
      }

      unsigned int v16 = 3;
    }

    else
    {
      uint64_t v24 = calloc(1uLL, 0x18uLL);
      if (v24)
      {
        uint64_t v25 = v24;
        *(_DWORD *)uint64_t v24 = 1;
        v24[2] = valuePtr;
        *((void *)v24 + 1) = CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
        *((_DWORD *)v25 + 4) = v39;
        _BYTE v25[10] = v41;
        v25[11] = WORD2(v41);
        if (gLogObjects && gNumLogObjects >= 33)
        {
          uint64_t v26 = *(os_log_s **)(gLogObjects + 256);
        }

        else
        {
          uint64_t v26 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          int v27 = *(_DWORD *)v25;
          int v28 = (unsigned __int16)v25[2];
          uint64_t v29 = *((void *)v25 + 1);
          int v30 = *((_DWORD *)v25 + 4);
          int v31 = (unsigned __int16)v25[10];
          int v32 = (unsigned __int16)v25[11];
          *(_DWORD *)buf = 67110402;
          int v45 = v27;
          __int16 v46 = 1024;
          int v47 = v28;
          __int16 v48 = 2112;
          uint64_t v49 = v29;
          __int16 v50 = 1024;
          int v51 = v30;
          __int16 v52 = 1024;
          int v53 = v31;
          __int16 v54 = 1024;
          int v55 = v32;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "Adding Native USB HID componentType: %d componentID: %d: '%@' %{coreacc:iAP2ParamID_IdentificationInfo_HIDCo mponent_Function_t}d nativeTransportComponentID: %d, interfaceNumber: %d",  buf,  0x2Au);
        }

        CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v37 + 8), v20, v25);
        if ((platform_usb_setUSBHostHIDInterface( *(void *)(v38 + 16),  *((unsigned __int8 *)v25 + 22),  *((unsigned int *)v25 + 4)) & 1) == 0)
        {
          CFNumberRef v33 = (os_log_s *)logObjectForModule_30();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
            _parseUSBHostHIDComponentIdentificationParams_cold_3();
          }
        }

        unsigned int v16 = 0;
        *(_BYTE *)(v37 + 1) = 1;
      }
    }

    CFRelease(v20);
  }

BOOL _parseNativeBTHIDComponentIdentificationParams(pthread_mutex_t **a1, uint64_t a2, unsigned __int16 *a3)
{
  BOOL v42 = 0;
  if (!a1)
  {
    __int16 v34 = (os_log_s *)logObjectForModule_30();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
      _parseiAPHIDComponentIdentificationParams_cold_1();
    }
    return 0LL;
  }

  if (!*a1)
  {
    uint64_t v35 = (os_log_s *)logObjectForModule_30();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
      _parseNativeBTHIDComponentIdentificationParams_cold_2();
    }
    return 0LL;
  }

  uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0xBu);
  if (!Feature)
  {
    iap2_features_createFeature((uint64_t)a1, 0xBu);
    uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0xBu);
    if (!Feature)
    {
      int v36 = (os_log_s *)logObjectForModule_30();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
        _parseiAPHIDComponentIdentificationParams_cold_2();
      }
      return 0LL;
    }
  }

  int ParamID = iAP2MsgGetParamID((uint64_t)a3);
  if (gLogObjects && gNumLogObjects >= 33)
  {
    BOOL v8 = *(os_log_s **)(gLogObjects + 256);
  }

  else
  {
    BOOL v8 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    int v44 = ParamID;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "parsing identification paramID 0x%X", buf, 8u);
  }

  if (ParamID != 29)
  {
    BOOL v22 = 0LL;
    unsigned int v15 = 10;
LABEL_48:
    iap2_identification_addRejectParam((uint64_t)a1, 18, v15);
    return v22;
  }

  __int16 valuePtr = 0;
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, a3);
  if (!FirstParam)
  {
LABEL_46:
    BOOL v22 = 0LL;
    unsigned int v15 = 2;
    goto LABEL_48;
  }

  NextParam = (unsigned __int16 *)FirstParam;
  uint64_t v37 = Feature;
  __int16 DataAsU16 = 0;
  cStr = 0LL;
  BOOL v11 = 0;
  BOOL v12 = 0;
  BOOL v13 = 0;
  BOOL v14 = 0;
  unsigned int v15 = 10;
  int v38 = 9;
  do
  {
    switch(iAP2MsgGetParamID((uint64_t)NextParam))
    {
      case 0u:
        if (v14)
        {
          BOOL v14 = 1;
          goto LABEL_24;
        }

        __int16 valuePtr = iAP2MsgGetDataAsU16(NextParam, &v42);
        BOOL v14 = !v42;
        break;
      case 1u:
        if (v13)
        {
          BOOL v13 = 1;
          goto LABEL_24;
        }

        cStr = (char *)iAP2MsgGetDataAsString(NextParam, &v42);
        BOOL v13 = !v42;
        break;
      case 2u:
        if (v12)
        {
          BOOL v12 = 1;
          goto LABEL_24;
        }

        unsigned int DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v42);
        int v38 = DataAsU8;
        if (v42)
        {
          BOOL v12 = 0;
        }

        else
        {
          BOOL v12 = DataAsU8 < 0xB;
          if (DataAsU8 >= 0xB) {
            unsigned int v15 = 6;
          }
        }

        break;
      case 3u:
        if (v11)
        {
          BOOL v11 = 1;
LABEL_24:
          unsigned int v15 = 5;
        }

        else
        {
          __int16 DataAsU16 = iAP2MsgGetDataAsU16(NextParam, &v42);
          BOOL v11 = !v42;
        }

        break;
      default:
        break;
    }

    NextParam = iAP2MsgGetNextParam(a2, a3, NextParam);
  }

  while (NextParam);
  if (!v14 || !v13 || !v12 || !v11 || v15 == 5)
  {
    if (v15 != 10) {
      goto LABEL_47;
    }
    goto LABEL_46;
  }

  CFNumberRef v17 = CFNumberCreate(kCFAllocatorDefault, kCFNumberShortType, &valuePtr);
  if (v17)
  {
    CFNumberRef v18 = v17;
    CFMutableStringRef Mutable = *(const __CFDictionary **)(v37 + 8);
    if (!Mutable)
    {
      CFMutableStringRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 1LL, &kCFTypeDictionaryKeyCallBacks, 0LL);
      *(void *)(v37 + _Block_object_dispose((const void *)(v1 - 80), 8) = Mutable;
    }

    if (CFDictionaryContainsKey(Mutable, v18))
    {
      CFNumberRef v20 = *(const __CFDictionary **)(v37 + 8);
      if (v20)
      {
        CFDictionaryApplyFunction( v20,  (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_releaseHIDComponents,  0LL);
        uint64_t v21 = *(const void **)(v37 + 8);
        if (v21)
        {
          CFRelease(v21);
          *(void *)(v37 + _Block_object_dispose((const void *)(v1 - 80), 8) = 0LL;
        }
      }

      unsigned int v15 = 3;
    }

    else
    {
      uint64_t v24 = calloc(1uLL, 0x18uLL);
      if (v24)
      {
        uint64_t v25 = v24;
        *(_DWORD *)uint64_t v24 = 2;
        v24[2] = valuePtr;
        CFStringRef v26 = CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
        *((_DWORD *)v25 + 4) = v38;
        *((void *)v25 + 1) = v26;
        _BYTE v25[10] = DataAsU16;
        if (gLogObjects && gNumLogObjects >= 33)
        {
          int v27 = *(os_log_s **)(gLogObjects + 256);
        }

        else
        {
          int v27 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
        {
          int v28 = *(_DWORD *)v25;
          int v29 = (unsigned __int16)v25[2];
          uint64_t v30 = *((void *)v25 + 1);
          int v31 = *((_DWORD *)v25 + 4);
          int v32 = (unsigned __int16)v25[10];
          *(_DWORD *)buf = 67110146;
          int v44 = v28;
          __int16 v45 = 1024;
          int v46 = v29;
          __int16 v47 = 2112;
          uint64_t v48 = v30;
          __int16 v49 = 1024;
          int v50 = v31;
          __int16 v51 = 1024;
          int v52 = v32;
          _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_INFO,  "Adding Native BT HID componentType: %d componentID: %d: '%@' %{coreacc:iAP2ParamID_IdentificationInfo_HIDCom ponent_Function_t}d nativeTransportComponentID: %d",  buf,  0x24u);
        }

        CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v37 + 8), v18, v25);
        CFNumberRef v33 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, v25 + 8);
        if (acc_endpoint_setProperty(*a1, kCFACCProperties_Endpoint_Bluetooth_HIDFunction, v33))
        {
          unsigned int v15 = 0;
          *(_BYTE *)(v37 + 1) = 1;
        }

        if (v33) {
          CFRelease(v33);
        }
      }
    }

    CFRelease(v18);
  }

void _CFDictionaryApplierFunction_releaseHIDComponents(int a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (const void *)a2[1];
    if (v3) {
      CFRelease(v3);
    }
    free(a2);
  }

void platform_notifications_authenticationStatusDidChangeForConnectionUUID( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (gLogObjects) {
    BOOL v12 = gNumLogObjects < 7;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v14 = (os_log_s *)&_os_log_default;
    id v13 = &_os_log_default;
  }

  else
  {
    BOOL v14 = (os_log_s *)*(id *)(gLogObjects + 48);
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    int v32 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "[#Notifications] Informing transport clients/plugins that auth status has changed for connection %@...",  buf,  0xCu);
  }

  if (a1)
  {
    v29[0] = ACCTransportPlugin_AuthStatusDidChangeNotification_ConnectionUUID;
    id v15 = a1;
    unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithString:](&OBJC_CLASS___NSString, "stringWithString:", v15));
    v30[0] = v16;
    v29[1] = ACCTransportPlugin_AuthStatusDidChangeNotification_AuthStatusOld;
    CFNumberRef v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a2));
    v30[1] = v17;
    _DWORD v29[2] = ACCTransportPlugin_AuthStatusDidChangeNotification_AuthStatusNew;
    unsigned int v28 = a3;
    CFNumberRef v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a3));
    v30[2] = v18;
    v29[3] = ACCTransportPlugin_AuthStatusDidChangeNotification_AuthType;
    CFNumberRef v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a4));
    v30[3] = v19;
    v29[4] = ACCTransportPlugin_AuthStatusDidChangeNotification_ConnectionIsAuthenticated;
    unsigned int v27 = a5;
    CFNumberRef v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a5));
    v30[4] = v20;
    v29[5] = ACCTransportPlugin_AuthStatusDidChangeNotification_ConnectionWasAuthenticated;
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a6));
    v30[5] = v21;
    unsigned int v26 = a6;
    BOOL v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v30,  v29,  6LL));

    BOOL v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v23 postNotificationName:ACCTransportPlugin_AuthStatusDidChangeNotification object:0 userInfo:v22];

    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[ACCTransportServer sharedServer](&OBJC_CLASS___ACCTransportServer, "sharedServer"));
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithString:](&OBJC_CLASS___NSString, "stringWithString:", v15));
    [v24 authStateDidChange:v28 forConnectionWithUUID:v25 previousAuthState:a2 authType:a4 connectionIsAuthenticated:v27 connectionWasAuthenticated:v26];
  }