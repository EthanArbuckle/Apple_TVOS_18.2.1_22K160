id acc_policies_shouldHideAccessoryWithModelNumber(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  id v4;
  const char *v5;
  const char *v6;
  int v8;
  const char *v9;
  __int16 v10;
  const char *v11;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ACCUserDefaults sharedDefaults](&OBJC_CLASS___ACCUserDefaults, "sharedDefaults"));
  v3 = [v2 BOOLForKey:@"ShowHiddenAccessories"];

  if ((v3 & 1) != 0)
  {
    v4 = 0LL;
  }

  else
  {
    if (acc_policies_shouldHideAccessoryWithModelNumber_onceToken != -1) {
      dispatch_once(&acc_policies_shouldHideAccessoryWithModelNumber_onceToken, &__block_literal_global);
    }
    v4 = [(id)acc_policies_shouldHideAccessoryWithModelNumber_hiddenModelNumbers containsObject:a1];
  }

  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v5 = "NO";
    if ((_DWORD)v4) {
      v6 = "YES";
    }
    else {
      v6 = "NO";
    }
    if (v3) {
      v5 = "YES";
    }
    v8 = 136315394;
    v9 = v6;
    v10 = 2080;
    v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "shouldHideAccessory: %s, showHiddenAccessories: %s",  (uint8_t *)&v8,  0x16u);
  }

  return v4;
}

void __acc_policies_shouldHideAccessoryWithModelNumber_block_invoke(id a1)
{
  v1 = (void *)acc_policies_shouldHideAccessoryWithModelNumber_hiddenModelNumbers;
  acc_policies_shouldHideAccessoryWithModelNumber_hiddenModelNumbers = (uint64_t)&off_100206A40;
}

BOOL acc_policies_endpointRequiresUserAuthorization(void *a1)
{
  return !a1 || *a1 == 0LL;
}

id acc_policies_shouldOverrideNameOnAccessoryWithModelNumber(uint64_t a1)
{
  if (acc_policies_shouldOverrideNameOnAccessoryWithModelNumber_onceToken != -1) {
    dispatch_once(&acc_policies_shouldOverrideNameOnAccessoryWithModelNumber_onceToken, &__block_literal_global_50);
  }
  id v2 = [(id)acc_policies_shouldOverrideNameOnAccessoryWithModelNumber_hiddenModelNumbers containsObject:a1];
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v3 = "NO";
    if ((_DWORD)v2) {
      v3 = "YES";
    }
    int v5 = 136315138;
    v6 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "shouldOverrideName: %s",  (uint8_t *)&v5,  0xCu);
  }

  return v2;
}

void __acc_policies_shouldOverrideNameOnAccessoryWithModelNumber_block_invoke(id a1)
{
  v1 = (void *)acc_policies_shouldOverrideNameOnAccessoryWithModelNumber_hiddenModelNumbers;
  acc_policies_shouldOverrideNameOnAccessoryWithModelNumber_hiddenModelNumbers = (uint64_t)&off_100206A58;
}

BOOL acc_policies_isTransportSupervised(unsigned int a1, int a2)
{
  BOOL v2 = ((1 << a1) & 0x1C3) != 0 && a2 == 1;
  return a1 <= 8 && v2;
}

uint64_t acc_policies_shouldResetLightningBusWhenTransportIsNoLongerRestricted(unsigned int a1, int a2)
{
  else {
    return 0LL;
  }
}

BOOL acc_policies_endpointRequiresChargingCurrentLimit( uint64_t a1, int a2, int a3, unsigned int a4, unsigned int a5, _WORD *a6)
{
  v85[0] = @"nameMatch";
  v85[1] = @"modelContain";
  v86[0] = @"IntelliLink";
  v86[1] = @"1.0";
  v85[2] = @"overrideCurrentLimit";
  v86[2] = &off_100206B48;
  v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v86,  v85,  3LL));
  v87[0] = v6;
  v83[0] = @"nameMatch";
  v83[1] = @"modelContain";
  v84[0] = @"MyLink";
  v84[1] = @"1.0";
  v83[2] = @"overrideCurrentLimit";
  v84[2] = &off_100206B48;
  v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v84,  v83,  3LL));
  v87[1] = v7;
  v81[0] = @"nameMatch";
  v81[1] = @"manufacturerMatch";
  v82[0] = @"iPL24Z";
  v82[1] = @"SDI Technologies";
  v81[2] = @"overrideCurrentLimit";
  v82[2] = &off_100206B48;
  v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v82,  v81,  3LL));
  v87[2] = v8;
  v79[0] = @"modelMatch";
  v79[1] = @"manufacturerMatch";
  v80[0] = @"MIB2";
  v80[1] = @"HARMAN";
  v79[2] = @"overrideCurrentLimit";
  v80[2] = &off_100206B60;
  v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v80,  v79,  3LL));
  v87[3] = v9;
  v77[0] = @"modelMatch";
  v77[1] = @"manufacturerMatch";
  v78[0] = @"Range Rover Velar";
  v78[1] = @"Land Rover";
  v77[2] = @"overrideCurrentLimit";
  v78[2] = &off_100206B48;
  v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v78,  v77,  3LL));
  v87[4] = v10;
  v75[0] = @"modelMatch";
  v75[1] = @"manufacturerMatch";
  v76[0] = @"Jaguar I-PACE";
  v76[1] = @"Jaguar";
  v75[2] = @"overrideCurrentLimit";
  v76[2] = &off_100206B48;
  v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v76,  v75,  3LL));
  v87[5] = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v87, 6LL));

  unsigned __int16 v13 = (unsigned __int16)acc_userDefaultsIapd_copyIntegerForKey((uint64_t)@"ChargingPowerOverride");
  unsigned int v14 = acc_userDefaultsIapd_copyIntegerForKey((uint64_t)@"ChargingPowerBehavior");
  int v15 = acc_userDefaultsIapd_copyIntegerForKey((uint64_t)@"ChargingPowerBehavior");
  if (v15 <= 0) {
    int v16 = a5;
  }
  else {
    int v16 = v15;
  }
  if (v14 - 3 < 6)
  {
    int v17 = 10 * v14 - 5;
    unsigned int v18 = a4;
LABEL_7:
    int v19 = 1;
    goto LABEL_8;
  }

  int v17 = 45;
  unsigned int v18 = a4;
  if (v14 != 1) {
    goto LABEL_7;
  }
  int v19 = 0;
LABEL_8:
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67110656;
    int v62 = a2;
    __int16 v63 = 1024;
    int v64 = a3;
    __int16 v65 = 1024;
    unsigned int v66 = v19;
    __int16 v67 = 1024;
    unsigned int v68 = v13;
    __int16 v69 = 1024;
    unsigned int v70 = v18;
    __int16 v71 = 1024;
    unsigned int v72 = v14;
    __int16 v73 = 1024;
    int v74 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "RequiresChargingCurrentLimit: isApple=%d deviceType=%d checkChargingCurrentLimit=%d chargingCurrentLimit=%d inLimi t=%d behavior=%d batteryThreshold=%d",  buf,  0x2Cu);
  }

  if (!v19) {
    goto LABEL_66;
  }
  v55 = 0LL;
  unsigned int v20 = v13;
  BOOL v21 = v13 < v18 && v13 != 0;
  if (a1 && !v21)
  {
    v22 = *(CFTypeRef **)(a1 + 64);
    if (v22)
    {
      if (*v22) {
        v55 = (void *)CFRetain(*v22);
      }
      else {
        v55 = 0LL;
      }
      v23 = *(const void **)(*(void *)(a1 + 64) + 16LL);
      if (v23) {
        v54 = (void *)CFRetain(v23);
      }
      else {
        v54 = 0LL;
      }
      v24 = *(const void **)(*(void *)(a1 + 64) + 8LL);
      if (v24) {
        v53 = (void *)CFRetain(v24);
      }
      else {
        v53 = 0LL;
      }
      if (v55 && v54)
      {
        int v45 = v17;
        __int128 v58 = 0u;
        __int128 v59 = 0u;
        __int128 v56 = 0u;
        __int128 v57 = 0u;
        id obj = v12;
        id v25 = [obj countByEnumeratingWithState:&v56 objects:v60 count:16];
        if (v25)
        {
          id v26 = v25;
          LODWORD(v44) = v13;
          HIDWORD(v44) = v16;
          uint64_t v27 = *(void *)v57;
          while (2)
          {
            for (i = 0LL; i != v26; i = (char *)i + 1)
            {
              if (*(void *)v57 != v27) {
                objc_enumerationMutation(obj);
              }
              v29 = *(void **)(*((void *)&v56 + 1) + 8LL * (void)i);
              v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "objectForKey:", @"nameMatch", v44));
              v31 = (void *)objc_claimAutoreleasedReturnValue([v29 objectForKey:@"nameContain"]);
              BOOL v32 = _matchOrContainString(v55, v30, v31);

              v33 = (void *)objc_claimAutoreleasedReturnValue([v29 objectForKey:@"modelMatch"]);
              v34 = (void *)objc_claimAutoreleasedReturnValue([v29 objectForKey:@"modelContain"]);
              BOOL v35 = _matchOrContainString(v54, v33, v34);

              v36 = (void *)objc_claimAutoreleasedReturnValue([v29 objectForKey:@"manufacturerMatch"]);
              v37 = (void *)objc_claimAutoreleasedReturnValue([v29 objectForKey:@"manufacturerContain"]);
              BOOL v38 = _matchOrContainString(v53, v36, v37);

              if (v32 && v35 && v38)
              {
                v39 = (void *)objc_claimAutoreleasedReturnValue([v29 objectForKey:@"overrideCurrentLimit"]);
                unsigned int v20 = (unsigned __int16)[v39 intValue];

                unsigned int v18 = a4;
                int v16 = HIDWORD(v44);
                goto LABEL_40;
              }
            }

            id v26 = [obj countByEnumeratingWithState:&v56 objects:v60 count:16];
            if (v26) {
              continue;
            }
            break;
          }

          unsigned int v18 = a4;
          unsigned int v20 = v44;
          int v16 = HIDWORD(v44);
        }

LABEL_40:
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67110400;
          int v62 = a2;
          __int16 v63 = 1024;
          int v64 = a3;
          __int16 v65 = 1024;
          unsigned int v66 = v20;
          __int16 v67 = 1024;
          unsigned int v68 = v18;
          __int16 v69 = 1024;
          unsigned int v70 = v16;
          __int16 v71 = 1024;
          unsigned int v72 = v45;
          _os_log_debug_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEBUG,  "RequiresChargingCurrentLimit: isApple=%d deviceType=%d chargingCurrentLimit=%d inLimit=%d battery=%d threshold=%d",  buf,  0x26u);
        }

        if (a3 != 3 && v16 >= v45 && (a2 & 1) == 0 && (v18 > 0x5DC || v20 >= 0x5DD) && v20 - 1501 < 0xFFFFFA24) {
          unsigned int v20 = 1500;
        }
        if (v20) {
          BOOL v40 = v20 >= v18;
        }
        else {
          BOOL v40 = 1;
        }
        BOOL v21 = !v40;
        goto LABEL_55;
      }

          if (gLogObjects && gNumLogObjects >= 44)
          {
            v11 = *(os_log_s **)(gLogObjects + 344);
          }

          else
          {
            v11 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          BOOL v21 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
          result = 0LL;
          if (!v21) {
            return result;
          }
          v22 = v3[1];
          v23 = *(void **)(a2 + 8);
          v39 = 138412546;
          BOOL v40 = v22;
          BOOL v41 = 2112;
          int v42 = v23;
          unsigned int v18 = "connectionUpdateHandler %@, Not found componentUID:%@, connectionUpdate not sent";
          goto LABEL_47;
        }

        if (gLogObjects && gNumLogObjects >= 44)
        {
          v11 = *(os_log_s **)(gLogObjects + 344);
        }

        else
        {
          v11 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        int v15 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
        result = 0LL;
        if (v15)
        {
          int v16 = v3[1];
          int v17 = *(void **)(a2 + 8);
          v39 = 138412546;
          BOOL v40 = v16;
          BOOL v41 = 2112;
          int v42 = v17;
          unsigned int v18 = "connectionUpdateHandler %@, Invalid componentUID:%@, connectionUpdate not sent";
LABEL_47:
          v24 = v11;
          id v25 = 22;
LABEL_48:
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, v18, (uint8_t *)&v39, v25);
          return 0LL;
        }
      }
    }
  }

  return result;
}

  v24 = 1;
LABEL_48:

  return v24;
}

    NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
  }

  while (NextParam);
  if (!v7) {
    return 0LL;
  }
  result = CFArrayGetCount(v7);
  if (result)
  {
    v24 = *(const void **)(v5 + 72);
    if (v24) {
      CFRelease(v24);
    }
    *(void *)(v5 + 72) = v7;
    id v25 = gLogObjects;
    id v26 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 50)
    {
      uint64_t v27 = *(os_log_s **)(gLogObjects + 392);
    }

    else
    {
      uint64_t v27 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)v34 = v25;
        *(_WORD *)&v34[8] = 1024;
        LODWORD(v35) = v26;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
        v7 = *(__CFArray **)(v30 + 72);
      }
    }

    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      v28 = *(void *)(v29 + 8);
      *(_DWORD *)buf = 138412546;
      *(void *)v34 = v28;
      *(_WORD *)&v34[8] = 2112;
      BOOL v35 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_INFO,  "EndpointUUID: %@ received app icon list: %@",  buf,  0x16u);
    }

    return iAP2MsgPreSendCtlProcess();
  }

  return result;
}

  unsigned int v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_albumArtistPersistentID));
  -[NSMutableDictionary setObject:forKey:]( v3,  "setObject:forKey:",  v20,  @"ACCMediaLibraryUpdateItemAlbumArtistPersistentID");

  validMask = self->_validMask;
  if ((validMask & 0x4000) == 0)
  {
LABEL_16:
    if ((validMask & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }

  a3->var12 = self->_artistPersistentID;
  a3->var0 |= 0x800u;
  validMask = self->_validMask;
  if ((validMask & 0x1000) == 0)
  {
LABEL_14:
    if ((validMask & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_44;
  }

LABEL_67:
      BOOL v21 = 0LL;
      BOOL v41 = a6 != 0LL;
      goto LABEL_58;
    }

  __break(0x5519u);
  return result;
}

LABEL_66:
    v54 = 0LL;
    v55 = 0LL;
    v53 = 0LL;
    goto LABEL_67;
  }

  v53 = 0LL;
  v54 = 0LL;
LABEL_55:
  BOOL v41 = a6 != 0LL;
  if (a6 && v21)
  {
    *a6 = v20;
    BOOL v41 = 1;
    BOOL v21 = 1LL;
  }

  platform_power_setAccessoryPowerMode(-[ACCPlatformPowerInfo endpointUID](self, "endpointUID"), 3LL, 0LL);
LABEL_67:
  if (-[ACCPlatformPowerInfo isUpdateTypeEnabled:](self, "isUpdateTypeEnabled:", 4LL))
  {
    if (gLogObjects && gNumLogObjects >= 8)
    {
      v24 = (os_log_s *)*(id *)(gLogObjects + 56);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      v24 = (os_log_s *)&_os_log_default;
      id v25 = &_os_log_default;
    }

    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      __int128 v57 = "-[ACCPlatformPowerInfo startPowerUpdates]";
      __int128 v58 = 1024;
      __int128 v59 = 847;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "[#Power] %s:%d Set observer for IsExternalChargerConnected",  buf,  0x12u);
    }

    [v3 addObserver:self selector:"powerInfoChangeNotificationHandler:" name:ACCPlatformIOKitPowerPlugin_IsExternalChargerConnected object:0];
  }

  if (-[ACCPlatformPowerInfo isUpdateTypeEnabled:](self, "isUpdateTypeEnabled:", 5LL))
  {
    if (gLogObjects && gNumLogObjects >= 8)
    {
      id v26 = (os_log_s *)*(id *)(gLogObjects + 56);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v26 = (os_log_s *)&_os_log_default;
      uint64_t v27 = &_os_log_default;
    }

    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      __int128 v57 = "-[ACCPlatformPowerInfo startPowerUpdates]";
      __int128 v58 = 1024;
      __int128 v59 = 853;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "[#Power] %s:%d Set observer for BatteryChargingState",  buf,  0x12u);
    }

    [v3 addObserver:self selector:"powerInfoChangeNotificationHandler:" name:ACCPlatformIOKitPowerPlugin_BatteryChargingState object:0];
  }

  if (-[ACCPlatformPowerInfo isUpdateTypeEnabled:](self, "isUpdateTypeEnabled:", 6LL))
  {
    if (gLogObjects && gNumLogObjects >= 8)
    {
      v28 = (os_log_s *)*(id *)(gLogObjects + 56);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      v28 = (os_log_s *)&_os_log_default;
      v29 = &_os_log_default;
    }

    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      __int128 v57 = "-[ACCPlatformPowerInfo startPowerUpdates]";
      __int128 v58 = 1024;
      __int128 v59 = 859;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_INFO,  "[#Power] %s:%d Set observer for BatteryChargeLevel",  buf,  0x12u);
    }

    [v3 addObserver:self selector:"powerInfoChangeNotificationHandler:" name:ACCPlatformIOKitPowerPlugin_BatteryChargeLevel object:0];
  }

  if (-[ACCPlatformPowerInfo isUpdateTypeEnabled:](self, "isUpdateTypeEnabled:", 7LL))
  {
    if (gLogObjects && gNumLogObjects >= 8)
    {
      v30 = (os_log_s *)*(id *)(gLogObjects + 56);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      v30 = (os_log_s *)&_os_log_default;
      BOOL v32 = &_os_log_default;
    }

    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      __int128 v57 = "-[ACCPlatformPowerInfo startPowerUpdates]";
      __int128 v58 = 1024;
      __int128 v59 = 865;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_INFO,  "[#Power] %s:%d Set observer for PowerDidChangeNotification",  buf,  0x12u);
    }

    v33 = ACCPlatformPowerPlugin_PowerDidChangeNotification;
    [v3 addObserver:self selector:"powerInfoChangeNotificationHandler:" name:ACCPlatformPowerPlugin_PowerDidChangeNotification object:0];
    v34 = acc_manager_copyConnectionUUIDForEndpointUUID(-[ACCPlatformPowerInfo endpointUID](self, "endpointUID"));
    BOOL v35 = v34;
    if (v34)
    {
      v54 = ACCPlatformPowerPlugin_ConnectionUUID;
      v55 = v34;
      v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v55,  &v54,  1LL));
      v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSNotification notificationWithName:object:userInfo:]( &OBJC_CLASS___NSNotification,  "notificationWithName:object:userInfo:",  v33,  0LL,  v36));
      -[ACCPlatformPowerInfo powerInfoChangeNotificationHandler:](self, "powerInfoChangeNotificationHandler:", v37);
    }

    BOOL v38 = (void *)objc_claimAutoreleasedReturnValue(-[ACCPlatformPowerInfo endpointUID](self, "endpointUID"));
    isModelNumberConnected = _isModelNumberConnected(v38, @"A1603");
  }

  else
  {
    isModelNumberConnected = 0;
  }

  if (-[ACCPlatformPowerInfo requestSleepUpdate](self, "requestSleepUpdate") || isModelNumberConnected)
  {
    v39 = (void *)objc_claimAutoreleasedReturnValue(-[ACCPlatformPowerInfo sleepNotificationClientUUID](self, "sleepNotificationClientUUID"));

    if (v39)
    {
      IOKitPowerPluginInstance = _getIOKitPowerPluginInstance();
      BOOL v41 = (void *)objc_claimAutoreleasedReturnValue(IOKitPowerPluginInstance);
      int v42 = (void *)objc_claimAutoreleasedReturnValue(-[ACCPlatformPowerInfo sleepNotificationClientUUID](self, "sleepNotificationClientUUID"));
      [v41 destroySleepNotificationsForClient:v42];

      -[ACCPlatformPowerInfo setSleepNotificationClientUUID:](self, "setSleepNotificationClientUUID:", 0LL);
    }

    v43 = _getIOKitPowerPluginInstance();
    uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
    int v45 = (void *)objc_claimAutoreleasedReturnValue([v44 createSleepNotificationClient]);
    -[ACCPlatformPowerInfo setSleepNotificationClientUUID:](self, "setSleepNotificationClientUUID:", v45);

    if (gLogObjects && gNumLogObjects >= 8)
    {
      v46 = (os_log_s *)*(id *)(gLogObjects + 56);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      v46 = (os_log_s *)&_os_log_default;
      v47 = &_os_log_default;
    }

    if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
    {
      v48 = (char *)objc_claimAutoreleasedReturnValue(-[ACCPlatformPowerInfo sleepNotificationClientUUID](self, "sleepNotificationClientUUID"));
      *(_DWORD *)buf = 138412290;
      __int128 v57 = v48;
      _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_INFO,  "[#Power] sleepNotificationClientUUID: %@",  buf,  0xCu);
    }

    [v3 addObserver:self selector:"systemWillSleepNotificationHandler:" name:ACCPlatformSystemPower_SystemWillSleepNotification object:0];
    [v3 addObserver:self selector:"systemHasPoweredOnNotificationHandler:" name:ACCPlatformSystemPower_SystemHasPoweredOnNotification object:0];
  }

  if (-[ACCPlatformPowerInfo isUpdateTypeEnabled:](self, "isUpdateTypeEnabled:", 4LL)
    || -[ACCPlatformPowerInfo isUpdateTypeEnabled:](self, "isUpdateTypeEnabled:", 5LL)
    || -[ACCPlatformPowerInfo isUpdateTypeEnabled:](self, "isUpdateTypeEnabled:", 6LL))
  {
    v49 = _getIOKitPowerPluginInstance();
    v50 = (void *)objc_claimAutoreleasedReturnValue(v49);
    v51 = (void *)objc_claimAutoreleasedReturnValue([v50 createBatteryNotificationClient]);
    -[ACCPlatformPowerInfo setBatteryNotificationClientUUID:](self, "setBatteryNotificationClientUUID:", v51);
  }

  if (-[ACCPlatformPowerInfo isUpdateTypeEnabled:](self, "isUpdateTypeEnabled:", 3LL)
    || -[ACCPlatformPowerInfo isUpdateTypeEnabled:](self, "isUpdateTypeEnabled:", 8LL)
    || -[ACCPlatformPowerInfo isUpdateTypeEnabled:](self, "isUpdateTypeEnabled:", 9LL)
    || -[ACCPlatformPowerInfo isUpdateTypeEnabled:](self, "isUpdateTypeEnabled:", 10LL)
    || -[ACCPlatformPowerInfo isUpdateTypeEnabled:](self, "isUpdateTypeEnabled:", 11LL))
  {
    if (gLogObjects && gNumLogObjects >= 8)
    {
      v52 = (os_log_s *)*(id *)(gLogObjects + 56);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      v52 = (os_log_s *)&_os_log_default;
      v53 = &_os_log_default;
    }

    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG)) {
      -[ACCPlatformPowerInfo startPowerUpdates].cold.1(self, v52);
    }

    -[ACCPlatformPowerInfo startSiphoningControl](self, "startSiphoningControl");
  }
}

  if (gLogObjects && gNumLogObjects >= 61)
  {
    BOOL v35 = *(os_log_s **)(gLogObjects + 480);
  }

  else
  {
    BOOL v35 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    if ((v15 - 1) > 7u)
    {
      v36 = "UNKNOWN";
      if (a6) {
        goto LABEL_74;
      }
    }

    else
    {
      v36 = off_1001FE3D0[(char)(v15 - 1)];
      if (a6)
      {
LABEL_74:
        v37 = (unsigned __int16)*a6;
LABEL_77:
        *(_DWORD *)buf = 136316674;
        v46 = "_t56_protocol_handleResponse_DATA";
        v47 = 1024;
        v48 = 1196;
        v49 = 1024;
        v50 = v16;
        v51 = 1024;
        v52 = v15;
        v53 = 2080;
        v54 = v36;
        v55 = 1024;
        __int128 v56 = a3;
        __int128 v57 = 1024;
        __int128 v58 = v37;
        _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "%s:%d result %d, msgType %d(%s), dataInLen %u, dataOutLen %u",  buf,  0x34u);
        return v16;
      }
    }

    v37 = -1;
    goto LABEL_77;
  }

  return v16;
}

LABEL_58:
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    if (v41) {
      int v42 = (unsigned __int16)*a6;
    }
    else {
      int v42 = -1;
    }
    *(_DWORD *)buf = 67110656;
    int v62 = a2;
    __int16 v63 = 1024;
    int v64 = a3;
    __int16 v65 = 1024;
    unsigned int v66 = a5;
    __int16 v67 = 1024;
    unsigned int v68 = v16;
    __int16 v69 = 1024;
    unsigned int v70 = v18;
    __int16 v71 = 1024;
    unsigned int v72 = v42;
    __int16 v73 = 1024;
    int v74 = v21;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "RequiresChargingCurrentLimit: isApple=%d, deviceType=%d, batt=%d(%d), %d->%d, return %d",  buf,  0x2Cu);
  }

  return v21;
}
  }

  return inited;
}

BOOL _matchOrContainString(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  unint64_t v6 = a2;
  unint64_t v7 = a3;
  v8 = (void *)v7;
  BOOL v9 = (v6 | v7) == 0;
  if (v5)
  {
    if (v6)
    {
      id v10 = [v5 isEqualToString:v6];
LABEL_6:
      BOOL v9 = (BOOL)v10;
      goto LABEL_7;
    }

    if (v7)
    {
      id v10 = [v5 containsString:v7];
      goto LABEL_6;
    }
  }

LABEL_7:
  return v9;
}

  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1LL, 0LL);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))(*(void *)(a1 + 32));
  }

  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1LL, 0LL);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))(*(void *)(a1 + 32));
  }

  FirstParam = 0LL;
  id v10 = -1;
  if (!a1 || !a2 || !a3) {
    goto LABEL_55;
  }
  uint64_t v44 = 0;
  FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, a3);
  if (!FirstParam) {
    goto LABEL_54;
  }
  BOOL v38 = 0LL;
  v37 = a4;
  int v42 = 0LL;
  v43 = 0LL;
  BOOL v40 = 0LL;
  BOOL v41 = 0LL;
  cf = 0LL;
  while (2)
  {
    v11 = iAP2MsgGetParamID((uint64_t)FirstParam);
    v12 = gLogObjects;
    unsigned __int16 v13 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 47)
    {
      unsigned int v14 = *(os_log_s **)(gLogObjects + 368);
    }

    else
    {
      unsigned int v14 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        valuePtr = 134218240;
        v46 = v12;
        v47 = 1024;
        v48 = v13;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  (uint8_t *)&valuePtr,  0x12u);
        unsigned int v14 = (os_log_s *)&_os_log_default;
      }
    }

    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      int v16 = *(void *)(a1 + 8);
      valuePtr = 138412546;
      v46 = v16;
      v47 = 1024;
      v48 = v11;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "_parseRoadSignParameter: %@, process paramID=%d",  (uint8_t *)&valuePtr,  0x12u);
    }

    switch(v11)
    {
      case 0:
        valuePtr = -1431655766;
        valuePtr = iAP2MsgGetDataAsU32(FirstParam, &v44);
        if (v44)
        {
          v29 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_86;
          }
          goto LABEL_73;
        }

        if (!v38)
        {
          BOOL v38 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
          goto LABEL_38;
        }

        BOOL v32 = (os_log_s *)logObjectForModule_12();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
LABEL_73:
          _parseRoadSignParameter_cold_1();
          goto LABEL_86;
        }

        goto LABEL_86;
      case 1:
        LOBYTE(valuePtr) = -86;
        LOBYTE(valuePtr) = iAP2MsgGetDataAsU8(FirstParam, &v44);
        if (!v44)
        {
          if (!cf)
          {
            cf = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
            goto LABEL_38;
          }

          v34 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_86;
          }
          goto LABEL_67;
        }

        id v26 = (os_log_s *)logObjectForModule_12();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
LABEL_67:
          _parseRoadSignParameter_cold_3();
          goto LABEL_86;
        }

        goto LABEL_86;
      case 2:
        LOBYTE(valuePtr) = -86;
        LOBYTE(valuePtr) = iAP2MsgGetDataAsU8(FirstParam, &v44);
        if (v44)
        {
          id v25 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
          {
LABEL_86:
            a4 = v37;
            goto LABEL_87;
          }
        }

        else
        {
          if (!v40)
          {
            BOOL v40 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
            goto LABEL_38;
          }

          v31 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_86;
          }
        }

        _parseRoadSignParameter_cold_5();
        goto LABEL_86;
      case 3:
        int v15 = iAP2MsgCopyDataAsCFString(FirstParam, &v44);
        if (v44)
        {
          uint64_t v27 = (os_log_s *)logObjectForModule_12();
          a4 = v37;
          if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_87;
          }
        }

        else
        {
          if (!v41)
          {
            BOOL v41 = v15;
            goto LABEL_38;
          }

          v36 = (os_log_s *)logObjectForModule_12();
          a4 = v37;
          if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
          {
LABEL_87:
            unsigned int v18 = 0;
            ObjectDetectionRoadSignDict = 0LL;
            unsigned int v20 = 0;
            FirstParam = 0LL;
            int v19 = v38;
            if (v38)
            {
LABEL_41:
              CFRelease(v19);
              unsigned int v20 = v18;
              FirstParam = (unsigned __int16 *)ObjectDetectionRoadSignDict;
            }

            goto LABEL_42;
          }
        }

        _parseRoadSignParameter_cold_7();
        goto LABEL_87;
      case 4:
        valuePtr = -1431655766;
        valuePtr = iAP2MsgGetDataAsU32(FirstParam, &v44);
        if (v44)
        {
          v28 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_86;
          }
        }

        else
        {
          if (!v42)
          {
            int v42 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
            goto LABEL_38;
          }

          v33 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_86;
          }
        }

        _parseRoadSignParameter_cold_9();
        goto LABEL_86;
      case 5:
        valuePtr = -1431655766;
        valuePtr = iAP2MsgGetDataAsU32(FirstParam, &v44);
        if (v44)
        {
          v30 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_86;
          }
LABEL_85:
          _parseRoadSignParameter_cold_11();
          goto LABEL_86;
        }

        if (v43)
        {
          BOOL v35 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_86;
          }
          goto LABEL_85;
        }

        v43 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
LABEL_38:
        FirstParam = iAP2MsgGetNextParam(a2, a3, FirstParam);
        if (FirstParam) {
          continue;
        }
        FirstParam = (unsigned __int16 *)v38;
        if (v38)
        {
          ObjectDetectionRoadSignDict = platform_navigation_createObjectDetectionRoadSignDict(*(CFMutableDictionaryRef *)(a1 + 8));
          platform_navigation_objectDetectionRoadSignSetInfo(ObjectDetectionRoadSignDict, 0LL, v38);
          unsigned int v18 = 1;
          platform_navigation_objectDetectionRoadSignSetInfo(ObjectDetectionRoadSignDict, 1LL, cf);
          platform_navigation_objectDetectionRoadSignSetInfo(ObjectDetectionRoadSignDict, 2LL, v40);
          platform_navigation_objectDetectionRoadSignSetInfo(ObjectDetectionRoadSignDict, 3LL, v41);
          platform_navigation_objectDetectionRoadSignSetInfo(ObjectDetectionRoadSignDict, 4LL, v42);
          platform_navigation_objectDetectionRoadSignSetInfo(ObjectDetectionRoadSignDict, 5LL, v43);
          a4 = v37;
          int v19 = v38;
          goto LABEL_41;
        }

        unsigned int v20 = 0;
        a4 = v37;
LABEL_42:
        if (cf) {
          CFRelease(cf);
        }
        if (v40) {
          CFRelease(v40);
        }
        if (v41) {
          CFRelease(v41);
        }
        if (v42) {
          CFRelease(v42);
        }
        if (v43)
        {
          CFRelease(v43);
          if ((v20 & 1) != 0) {
            goto LABEL_52;
          }
LABEL_54:
          id v10 = -1;
        }

        else
        {
          if (!v20) {
            goto LABEL_54;
          }
LABEL_52:
          id v10 = 0;
        }

  FirstParam = 0LL;
  id v10 = -1;
  if (!a1 || !a2 || !a3) {
    goto LABEL_78;
  }
  __int16 v63 = 0;
  FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, a3);
  if (!FirstParam) {
    goto LABEL_77;
  }
  v51 = a1;
  v52 = 0LL;
  v50 = a4;
  v54 = 0LL;
  v55 = 0LL;
  v53 = 0LL;
  v60 = 0LL;
  v61 = 0LL;
  __int128 v58 = 0LL;
  __int128 v59 = 0LL;
  cf = 0LL;
  __int128 v57 = 0LL;
  while (2)
  {
    v11 = iAP2MsgGetParamID((uint64_t)FirstParam);
    v12 = gLogObjects;
    unsigned __int16 v13 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 47)
    {
      unsigned int v14 = *(os_log_s **)(gLogObjects + 368);
    }

    else
    {
      unsigned int v14 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)valuePtr = 134218240;
        *(void *)&valuePtr[4] = v12;
        __int16 v65 = 1024;
        unsigned int v66 = v13;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  valuePtr,  0x12u);
        unsigned int v14 = (os_log_s *)&_os_log_default;
      }
    }

    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v18 = *(void *)(v51 + 8);
      *(_DWORD *)valuePtr = 138412546;
      *(void *)&valuePtr[4] = v18;
      __int16 v65 = 1024;
      unsigned int v66 = v11;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "_parseRoadLaneParameter: %@, process paramID=%d",  valuePtr,  0x12u);
    }

    switch(v11)
    {
      case 0:
        *(_DWORD *)valuePtr = -1431655766;
        *(_DWORD *)valuePtr = iAP2MsgGetDataAsU32(FirstParam, &v63);
        if (v63)
        {
          v36 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_133;
          }
          goto LABEL_106;
        }

        if (!v52)
        {
          v52 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, valuePtr);
          goto LABEL_53;
        }

        v37 = (os_log_s *)logObjectForModule_12();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
        {
LABEL_106:
          _parseRoadSignParameter_cold_1();
          goto LABEL_133;
        }

        goto LABEL_133;
      case 1:
        valuePtr[0] = -86;
        valuePtr[0] = iAP2MsgGetDataAsU8(FirstParam, &v63);
        if (v63)
        {
          v28 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_133;
          }
          goto LABEL_90;
        }

        if (!cf)
        {
          cf = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, valuePtr);
          goto LABEL_53;
        }

        v46 = (os_log_s *)logObjectForModule_12();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
        {
LABEL_90:
          _parseRoadSignParameter_cold_3();
          goto LABEL_133;
        }

        goto LABEL_133;
      case 2:
        valuePtr[0] = -86;
        valuePtr[0] = iAP2MsgGetDataAsU8(FirstParam, &v63);
        if (v63)
        {
          v33 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_133;
          }
          goto LABEL_100;
        }

        if (!v57)
        {
          __int128 v57 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, valuePtr);
          goto LABEL_53;
        }

        uint64_t v44 = (os_log_s *)logObjectForModule_12();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
        {
LABEL_100:
          _parseRoadSignParameter_cold_5();
          goto LABEL_133;
        }

        goto LABEL_133;
      case 3:
        valuePtr[0] = -86;
        valuePtr[0] = iAP2MsgGetDataAsU8(FirstParam, &v63);
        if (v63)
        {
          v34 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_133;
          }
          goto LABEL_102;
        }

        if (!v58)
        {
          __int128 v58 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, valuePtr);
          goto LABEL_53;
        }

        BOOL v41 = (os_log_s *)logObjectForModule_12();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
        {
LABEL_102:
          _parseRoadSignParameter_cold_7();
          goto LABEL_133;
        }

        goto LABEL_133;
      case 4:
        valuePtr[0] = -86;
        valuePtr[0] = iAP2MsgGetDataAsU8(FirstParam, &v63);
        if (v63)
        {
          BOOL v32 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_133;
          }
          goto LABEL_98;
        }

        if (!v59)
        {
          __int128 v59 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, valuePtr);
          goto LABEL_53;
        }

        v39 = (os_log_s *)logObjectForModule_12();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
        {
LABEL_98:
          _parseRoadSignParameter_cold_9();
          goto LABEL_133;
        }

        goto LABEL_133;
      case 5:
        valuePtr[0] = -86;
        valuePtr[0] = iAP2MsgGetDataAsU8(FirstParam, &v63);
        if (v63)
        {
          v30 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_133;
          }
          goto LABEL_94;
        }

        if (!v60)
        {
          v60 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, valuePtr);
          goto LABEL_53;
        }

        BOOL v38 = (os_log_s *)logObjectForModule_12();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
        {
LABEL_94:
          _parseRoadSignParameter_cold_11();
          goto LABEL_133;
        }

        goto LABEL_133;
      case 6:
        *(_DWORD *)valuePtr = -1431655766;
        *(_DWORD *)valuePtr = iAP2MsgGetDataAsU32(FirstParam, &v63);
        if (v63)
        {
          v31 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_133;
          }
          goto LABEL_96;
        }

        if (!v61)
        {
          v61 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, valuePtr);
          goto LABEL_53;
        }

        v43 = (os_log_s *)logObjectForModule_12();
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
        {
LABEL_96:
          _parseRoadLaneParameter_cold_13();
          goto LABEL_133;
        }

        goto LABEL_133;
      case 7:
        *(void *)valuePtr = 0xAAAAAAAAAAAAAAAALL;
        DataAsArrayI32 = iAP2MsgGetDataAsArrayI32(FirstParam, &v63, valuePtr, 2);
        if (v63)
        {
          BOOL v35 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_133;
          }
          goto LABEL_130;
        }

        if (DataAsArrayI32 != 2)
        {
          int v42 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_133;
          }
          goto LABEL_130;
        }

        if (!v53)
        {
          int v62 = (float)*(int *)valuePtr / (float)*(int *)&valuePtr[4];
          v53 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloatType, &v62);
          goto LABEL_53;
        }

        v48 = (os_log_s *)logObjectForModule_12();
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
        {
LABEL_130:
          _parseRoadLaneParameter_cold_15();
          goto LABEL_133;
        }

        goto LABEL_133;
      case 8:
        *(void *)valuePtr = 0xAAAAAAAAAAAAAAAALL;
        int v17 = iAP2MsgGetDataAsArrayI32(FirstParam, &v63, valuePtr, 2);
        if (v63)
        {
          uint64_t v27 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_133;
          }
LABEL_128:
          _parseRoadLaneParameter_cold_18();
          goto LABEL_133;
        }

        if (v17 != 2)
        {
          BOOL v40 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_133;
          }
          goto LABEL_128;
        }

        if (v54)
        {
          v47 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_133;
          }
          goto LABEL_128;
        }

        int v62 = (float)*(int *)valuePtr / (float)*(int *)&valuePtr[4];
        v54 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloatType, &v62);
LABEL_53:
        FirstParam = iAP2MsgGetNextParam(a2, a3, FirstParam);
        if (FirstParam) {
          continue;
        }
        int v19 = v52;
        if (v52)
        {
          ObjectDetectionRoadSignDict = platform_navigation_createObjectDetectionRoadSignDict(*(CFMutableDictionaryRef *)(v51 + 8));
          platform_navigation_objectDetectionRoadLaneSetInfo(ObjectDetectionRoadSignDict, 0LL, v52);
          BOOL v21 = 1;
          platform_navigation_objectDetectionRoadLaneSetInfo(ObjectDetectionRoadSignDict, 1LL, cf);
          platform_navigation_objectDetectionRoadLaneSetInfo(ObjectDetectionRoadSignDict, 2LL, v57);
          platform_navigation_objectDetectionRoadLaneSetInfo(ObjectDetectionRoadSignDict, 3LL, v58);
          platform_navigation_objectDetectionRoadLaneSetInfo(ObjectDetectionRoadSignDict, 4LL, v59);
          platform_navigation_objectDetectionRoadLaneSetInfo(ObjectDetectionRoadSignDict, 5LL, v60);
          platform_navigation_objectDetectionRoadLaneSetInfo(ObjectDetectionRoadSignDict, 6LL, v61);
          platform_navigation_objectDetectionRoadLaneSetInfo(ObjectDetectionRoadSignDict, 7LL, v53);
          platform_navigation_objectDetectionRoadLaneSetInfo(ObjectDetectionRoadSignDict, 8LL, v54);
          platform_navigation_objectDetectionRoadLaneSetInfo(ObjectDetectionRoadSignDict, 7LL, v55);
          a4 = v50;
          goto LABEL_56;
        }

        v22 = 0;
        FirstParam = 0LL;
        a4 = v50;
LABEL_57:
        if (cf) {
          CFRelease(cf);
        }
        if (v57) {
          CFRelease(v57);
        }
        if (v58) {
          CFRelease(v58);
        }
        if (v59) {
          CFRelease(v59);
        }
        if (v60) {
          CFRelease(v60);
        }
        if (v61) {
          CFRelease(v61);
        }
        if (v53) {
          CFRelease(v53);
        }
        if (v54) {
          CFRelease(v54);
        }
        if (v55)
        {
          CFRelease(v55);
          if ((v22 & 1) != 0) {
            goto LABEL_75;
          }
LABEL_77:
          id v10 = -1;
        }

        else
        {
          if (!v22) {
            goto LABEL_77;
          }
LABEL_75:
          id v10 = 0;
        }

  FirstParam = 0LL;
  id v10 = -1;
  if (!a1 || !a2 || !a3) {
    goto LABEL_75;
  }
  __int128 v56 = 0;
  FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, a3);
  if (!FirstParam) {
    goto LABEL_74;
  }
  int v45 = a1;
  v46 = 0LL;
  uint64_t v44 = a4;
  v54 = 0LL;
  v55 = 0LL;
  v52 = 0LL;
  v53 = 0LL;
  v50 = 0LL;
  v51 = 0LL;
  v48 = 0LL;
  v49 = 0LL;
  cf = 0LL;
  while (2)
  {
    v11 = iAP2MsgGetParamID((uint64_t)FirstParam);
    v12 = gLogObjects;
    unsigned __int16 v13 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 47)
    {
      unsigned int v14 = *(os_log_s **)(gLogObjects + 368);
    }

    else
    {
      unsigned int v14 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        valuePtr = 134218240;
        __int128 v58 = v12;
        __int128 v59 = 1024;
        v60 = v13;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  (uint8_t *)&valuePtr,  0x12u);
        unsigned int v14 = (os_log_s *)&_os_log_default;
      }
    }

    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      int v15 = *(void *)(v45 + 8);
      valuePtr = 138412546;
      __int128 v58 = v15;
      __int128 v59 = 1024;
      v60 = v11;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "_parseRoadObjectParameter: %@, process paramID=%d",  (uint8_t *)&valuePtr,  0x12u);
    }

    switch(v11)
    {
      case 0:
        valuePtr = -1431655766;
        valuePtr = iAP2MsgGetDataAsU32(FirstParam, &v56);
        if (v56)
        {
          v29 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_124;
          }
          goto LABEL_95;
        }

        if (!v46)
        {
          v46 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
          goto LABEL_50;
        }

        v39 = (os_log_s *)logObjectForModule_12();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
        {
LABEL_95:
          _parseRoadSignParameter_cold_1();
          goto LABEL_124;
        }

        goto LABEL_124;
      case 1:
        LOBYTE(valuePtr) = -86;
        LOBYTE(valuePtr) = iAP2MsgGetDataAsU8(FirstParam, &v56);
        if (v56)
        {
          uint64_t v27 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_124;
          }
          goto LABEL_91;
        }

        if (!cf)
        {
          cf = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
          goto LABEL_50;
        }

        int v42 = (os_log_s *)logObjectForModule_12();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
        {
LABEL_91:
          _parseRoadSignParameter_cold_3();
          goto LABEL_124;
        }

        goto LABEL_124;
      case 2:
        LOBYTE(valuePtr) = -86;
        LOBYTE(valuePtr) = iAP2MsgGetDataAsU8(FirstParam, &v56);
        if (v56)
        {
          id v26 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_124;
          }
          goto LABEL_89;
        }

        if (!v48)
        {
          v48 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
          goto LABEL_50;
        }

        v34 = (os_log_s *)logObjectForModule_12();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
        {
LABEL_89:
          _parseRoadSignParameter_cold_5();
          goto LABEL_124;
        }

        goto LABEL_124;
      case 3:
        LOBYTE(valuePtr) = -86;
        LOBYTE(valuePtr) = iAP2MsgGetDataAsU8(FirstParam, &v56);
        if (v56)
        {
          v31 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_124;
          }
          goto LABEL_99;
        }

        if (!v49)
        {
          v49 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
          goto LABEL_50;
        }

        v36 = (os_log_s *)logObjectForModule_12();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
        {
LABEL_99:
          _parseRoadSignParameter_cold_7();
          goto LABEL_124;
        }

        goto LABEL_124;
      case 4:
        valuePtr = -1431655766;
        valuePtr = iAP2MsgGetDataAsU32(FirstParam, &v56);
        if (v56)
        {
          v33 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_124;
          }
          goto LABEL_103;
        }

        if (!v50)
        {
          v50 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
          goto LABEL_50;
        }

        BOOL v40 = (os_log_s *)logObjectForModule_12();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
        {
LABEL_103:
          _parseRoadSignParameter_cold_9();
          goto LABEL_124;
        }

        goto LABEL_124;
      case 5:
        valuePtr = -1431655766;
        valuePtr = iAP2MsgGetDataAsU32(FirstParam, &v56);
        if (v56)
        {
          v24 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_124;
          }
LABEL_123:
          _parseRoadSignParameter_cold_11();
          goto LABEL_124;
        }

        if (!v51)
        {
          v51 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
          goto LABEL_50;
        }

        v43 = (os_log_s *)logObjectForModule_12();
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_123;
        }
        goto LABEL_124;
      case 6:
        valuePtr = -1431655766;
        valuePtr = iAP2MsgGetDataAsU32(FirstParam, &v56);
        if (v56)
        {
          v28 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_124;
          }
        }

        else
        {
          if (!v52)
          {
            v52 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
            goto LABEL_50;
          }

          BOOL v38 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_124;
          }
        }

        _parseRoadLaneParameter_cold_13();
        goto LABEL_124;
      case 7:
        valuePtr = -1431655766;
        valuePtr = iAP2MsgGetDataAsU32(FirstParam, &v56);
        if (v56)
        {
          BOOL v32 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_124;
          }
          goto LABEL_101;
        }

        if (!v53)
        {
          v53 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
          goto LABEL_50;
        }

        BOOL v35 = (os_log_s *)logObjectForModule_12();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
        {
LABEL_101:
          _parseRoadLaneParameter_cold_15();
          goto LABEL_124;
        }

        goto LABEL_124;
      case 8:
        valuePtr = -1431655766;
        valuePtr = iAP2MsgGetDataAsU32(FirstParam, &v56);
        if (v56)
        {
          id v25 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_124;
          }
          goto LABEL_87;
        }

        if (v54)
        {
          v37 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_124;
          }
LABEL_87:
          _parseRoadLaneParameter_cold_18();
          goto LABEL_124;
        }

        v54 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
LABEL_50:
        FirstParam = iAP2MsgGetNextParam(a2, a3, FirstParam);
        if (FirstParam) {
          continue;
        }
        int v16 = v46;
        if (v46)
        {
          ObjectDetectionRoadSignDict = platform_navigation_createObjectDetectionRoadSignDict(*(CFMutableDictionaryRef *)(v45 + 8));
          platform_navigation_objectDetectionRoadObjectSetInfo(ObjectDetectionRoadSignDict, 0LL, v46);
          unsigned int v18 = 1;
          platform_navigation_objectDetectionRoadObjectSetInfo(ObjectDetectionRoadSignDict, 1LL, cf);
          platform_navigation_objectDetectionRoadObjectSetInfo(ObjectDetectionRoadSignDict, 2LL, v48);
          platform_navigation_objectDetectionRoadObjectSetInfo(ObjectDetectionRoadSignDict, 3LL, v49);
          platform_navigation_objectDetectionRoadObjectSetInfo(ObjectDetectionRoadSignDict, 4LL, v50);
          platform_navigation_objectDetectionRoadObjectSetInfo(ObjectDetectionRoadSignDict, 5LL, v51);
          platform_navigation_objectDetectionRoadObjectSetInfo(ObjectDetectionRoadSignDict, 6LL, v52);
          platform_navigation_objectDetectionRoadObjectSetInfo(ObjectDetectionRoadSignDict, 7LL, v53);
          platform_navigation_objectDetectionRoadObjectSetInfo(ObjectDetectionRoadSignDict, 8LL, v54);
          platform_navigation_objectDetectionRoadObjectSetInfo(ObjectDetectionRoadSignDict, 9LL, v55);
          a4 = v44;
          goto LABEL_53;
        }

        int v19 = 0;
        FirstParam = 0LL;
        a4 = v44;
LABEL_54:
        if (cf) {
          CFRelease(cf);
        }
        if (v48) {
          CFRelease(v48);
        }
        if (v49) {
          CFRelease(v49);
        }
        if (v50) {
          CFRelease(v50);
        }
        if (v51) {
          CFRelease(v51);
        }
        if (v52) {
          CFRelease(v52);
        }
        if (v53) {
          CFRelease(v53);
        }
        if (v54) {
          CFRelease(v54);
        }
        if (v55)
        {
          CFRelease(v55);
          if ((v19 & 1) != 0) {
            goto LABEL_72;
          }
LABEL_74:
          id v10 = -1;
        }

        else
        {
          if (!v19) {
            goto LABEL_74;
          }
LABEL_72:
          id v10 = 0;
        }

  id v10 = acc_strings_placeholder_Unknown();
  BOOL v9 = (id)objc_claimAutoreleasedReturnValue(v10);
  if (!v6) {
    goto LABEL_10;
  }
LABEL_8:
  v11 = v6[2];
  if (!v11)
  {
LABEL_10:
    unsigned __int16 v13 = acc_strings_placeholder_Unknown();
    v12 = (id)objc_claimAutoreleasedReturnValue(v13);
    if (!v6) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }

  v12 = v11;
LABEL_11:
  unsigned int v14 = v6[3];
  if (v14)
  {
    int v15 = v14;
    goto LABEL_14;
  }

    unint64_t v7 = (char *)v4;
    if ((unint64_t)(v8 - v4) <= 8)
    {
      if (v4 == v8)
      {
        id v5 = 0LL;
        if (!a2) {
          return 1LL;
        }
      }

      else
      {
        id v5 = 0LL;
        do
        {
          unint64_t v6 = *v4++;
          id v5 = v6 | (v5 << 8);
        }

        while (v4 != v8);
        if (!a2) {
          return 1LL;
        }
      }

      *a2 = v5;
      return 1LL;
    }

    return 0LL;
  }

  return result;
}

BOOL acc_policies_shouldFailAuthOnOOBPairingFailure(BOOL result)
{
  if (result) {
    return *(_DWORD *)(result + 24) == 9;
  }
  return result;
}

id acc_policies_allowACCAuthProtocolOnAllTransport()
{
  v0 = (void *)objc_claimAutoreleasedReturnValue(+[ACCUserDefaults sharedDefaults](&OBJC_CLASS___ACCUserDefaults, "sharedDefaults"));
  id v1 = [v0 BOOLForKey:@"AllowACCAuthProtocolOnAllTransport"];

  return v1;
}

uint64_t acc_policies_allowACCAuthProtocolOnTransport(int a1)
{
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue(+[ACCUserDefaults sharedDefaults](&OBJC_CLASS___ACCUserDefaults, "sharedDefaults"));
  unsigned __int8 v3 = [v2 BOOLForKey:@"EnableACCAuthProtocolOnNFC"];

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACCUserDefaults sharedDefaults](&OBJC_CLASS___ACCUserDefaults, "sharedDefaults"));
  unsigned int v5 = [v4 BOOLForKey:@"DisableACCAuthProtocolOnInductive"];

  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[ACCUserDefaults sharedDefaults](&OBJC_CLASS___ACCUserDefaults, "sharedDefaults"));
  unsigned int v7 = [v6 BOOLForKey:@"AllowACCAuthProtocolOnAllTransport"];

  if (a1 == 13 && (v3 & 1) != 0) {
    return 1LL;
  }
  int v9 = v5 ^ 1;
  if (a1 != 12) {
    int v9 = 0;
  }
  return v9 | v7;
}

BOOL acc_policies_allowAudioProductCertsOnTransport(int a1)
{
  return (a1 & 0xFFFFFFFE) == 2;
}

CFDataRef acc_policies_nfcTagUseKeys(const __CFData *result)
{
  if (result)
  {
    id v1 = result;
    result = (const __CFData *)CFDataGetLength(result);
    if (result) {
      return (const __CFData *)(*CFDataGetBytePtr(v1) - 87 < 2);
    }
  }

  return result;
}

void platform_connectionInfo_configStreamCategoryListReady(uint64_t a1, uint64_t a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 9;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    unint64_t v6 = (os_log_s *)&_os_log_default;
    id v5 = &_os_log_default;
  }

  else
  {
    unint64_t v6 = (os_log_s *)*(id *)(gLogObjects + 64);
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v8 = 138412546;
    uint64_t v9 = a2;
    __int16 v10 = 2112;
    uint64_t v11 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "connectionInfo configStreamCategoryListReady: %@ - %@",  (uint8_t *)&v8,  0x16u);
  }

  if (a1)
  {
    if (a2)
    {
      unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue(+[ACCConnectionInfoServer sharedServer](&OBJC_CLASS___ACCConnectionInfoServer, "sharedServer"));
      [v7 configStreamCategoryListReady:a1 connection:a2 client:0];
    }
  }
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

id logObjectForModule()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 9;
  }
  else {
    BOOL v0 = 1;
  }
  if (v0)
  {
    BOOL v1 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v1) {
      logObjectForModule_cold_1(v1, v2, v3, v4, v5, v6, v7, v8);
    }
    id v10 = &_os_log_default;
    id v9 = &_os_log_default;
  }

  else
  {
    id v10 = *(id *)(gLogObjects + 64);
  }

  return v10;
}

void platform_connectionInfo_configStreamCategoriesResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (gLogObjects) {
    BOOL v10 = gNumLogObjects < 9;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    v12 = (os_log_s *)&_os_log_default;
    id v11 = &_os_log_default;
  }

  else
  {
    v12 = (os_log_s *)*(id *)(gLogObjects + 64);
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    int v14 = 138413058;
    uint64_t v15 = a1;
    __int16 v16 = 2112;
    uint64_t v17 = a3;
    __int16 v18 = 2112;
    uint64_t v19 = a2;
    __int16 v20 = 2112;
    uint64_t v21 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "connectionInfo configStreamCategoriesResponse: %@: %@ - %@, categories: %@",  (uint8_t *)&v14,  0x2Au);
  }

  if (a2 && a1)
  {
    if (a3)
    {
      unsigned __int16 v13 = (void *)objc_claimAutoreleasedReturnValue(+[ACCConnectionInfoServer sharedServer](&OBJC_CLASS___ACCConnectionInfoServer, "sharedServer"));
      [v13 configStreamCategoriesResponse:a4 forEndpoint:a2 connection:a3 client:a1 success:a5];
    }
  }

void platform_connectionInfo_configStreamPropertyResponse( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (gLogObjects) {
    BOOL v14 = gNumLogObjects < 9;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v16 = (os_log_s *)&_os_log_default;
    id v15 = &_os_log_default;
  }

  else
  {
    __int16 v16 = (os_log_s *)*(id *)(gLogObjects + 64);
  }

  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138413570;
    uint64_t v20 = a1;
    __int16 v21 = 2112;
    uint64_t v22 = a3;
    __int16 v23 = 2112;
    uint64_t v24 = a2;
    __int16 v25 = 1024;
    int v26 = a4;
    __int16 v27 = 1024;
    int v28 = a5;
    __int16 v29 = 2112;
    uint64_t v30 = a6;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "connectionInfo configStreamPropertyResponse: %@: %@ - %@, categoryID: %u, propertyID: %u, value: %@",  buf,  0x36u);
  }

  if (a2)
  {
    if (a3)
    {
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[ACCConnectionInfoServer sharedServer](&OBJC_CLASS___ACCConnectionInfoServer, "sharedServer"));
      LOBYTE(v18) = a7;
      [v17 configStreamPropertyResponse:a5 forCategory:a4 forEndpoint:a2 connection:a3 client:a1 value:a6 success:v18];
    }
  }

BOOL platform_connectionInfo_checkConfigStreamCategoryListReady(const void *a1, uint64_t a2)
{
  BOOL v4 = 0LL;
  if (!a1 || !a2) {
    goto LABEL_7;
  }
  EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
  if (EndpointWithUUID)
  {
    uint64_t v6 = EndpointWithUUID;
    if (*((_DWORD *)EndpointWithUUID + 7) == 11)
    {
      uint64_t v7 = EndpointWithUUID[7];
      if (v7)
      {
        BOOL v4 = *(unsigned __int8 *)(v7 + 16) != 0;
        goto LABEL_7;
      }

      id v19 = logObjectForModule();
      unsigned __int16 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        int v20 = 138412546;
        *(void *)__int16 v21 = a2;
        *(_WORD *)&v21[8] = 2112;
        *(void *)&v21[10] = a1;
        BOOL v14 = "No protocol specific endpoint! %@ - %@";
        goto LABEL_24;
      }
    }

    else
    {
      id v15 = logObjectForModule();
      unsigned __int16 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = *((_DWORD *)v6 + 7);
        int v20 = 67109634;
        *(_DWORD *)__int16 v21 = v16;
        *(_WORD *)&v21[4] = 2112;
        *(void *)&v21[6] = a2;
        *(_WORD *)&v21[14] = 2112;
        *(void *)&v21[16] = a1;
        BOOL v14 = "Invalid endpoint protocol! %d, %@ - %@";
        uint64_t v17 = v13;
        uint32_t v18 = 28;
LABEL_25:
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v20, v18);
      }
    }
  }

  else
  {
    id v12 = logObjectForModule();
    unsigned __int16 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = 138412546;
      *(void *)__int16 v21 = a2;
      *(_WORD *)&v21[8] = 2112;
      *(void *)&v21[10] = a1;
      BOOL v14 = "Invalid endpointUUID! %@ - %@";
LABEL_24:
      uint64_t v17 = v13;
      uint32_t v18 = 22;
      goto LABEL_25;
    }
  }

  BOOL v4 = 0LL;
LABEL_7:
  if (gLogObjects) {
    BOOL v8 = gNumLogObjects < 9;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v10 = (os_log_s *)&_os_log_default;
    id v9 = &_os_log_default;
  }

  else
  {
    BOOL v10 = (os_log_s *)*(id *)(gLogObjects + 64);
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    int v20 = 138412802;
    *(void *)__int16 v21 = a2;
    *(_WORD *)&v21[8] = 2112;
    *(void *)&v21[10] = a1;
    *(_WORD *)&v21[18] = 1024;
    *(_DWORD *)&v21[20] = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "connectionInfo checkConfigStreamCategoryListReady: %@ - %@, isReady %d",  (uint8_t *)&v20,  0x1Cu);
  }

  return v4;
}

void platform_connectionInfo_configStreamGetCategories(const void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = 0LL;
  if (a2 && a3)
  {
    if ((_categoriesAvailableForEndpoint(a3) & 1) != 0)
    {
      uint64_t v6 = (const void **)calloc(1uLL, 0x18uLL);
      void *v6 = CFRetain(a1);
      v6[2] = 0LL;
    }

    else
    {
      id v10 = logObjectForModule();
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = 138412546;
        uint64_t v13 = a2;
        __int16 v14 = 2112;
        id v15 = a3;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "CategoryList not available yet! %@ - %@",  (uint8_t *)&v12,  0x16u);
      }

      uint64_t v6 = 0LL;
    }
  }

  if (gLogObjects) {
    BOOL v7 = gNumLogObjects < 9;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v9 = (os_log_s *)&_os_log_default;
    id v8 = &_os_log_default;
  }

  else
  {
    id v9 = (os_log_s *)*(id *)(gLogObjects + 64);
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    int v12 = 138412802;
    uint64_t v13 = a2;
    __int16 v14 = 2112;
    id v15 = a3;
    __int16 v16 = 1024;
    int v17 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "connectionInfo configStreamPropertyRequest: %@ - %@, success %d",  (uint8_t *)&v12,  0x1Cu);
  }

  platform_connectionInfo_configStreamCategoriesResponse((uint64_t)a1, (uint64_t)a3, a2, 0LL, 0LL);
  platform_configStream_deleteParams(v6);
}

uint64_t _categoriesAvailableForEndpoint(void *a1)
{
  uint64_t v4 = 0LL;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  char v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = ___categoriesAvailableForEndpoint_block_invoke;
  v3[3] = &unk_1001F96D0;
  v3[4] = &v4;
  v3[5] = a1;
  acc_manager_protectedEndpointCall(a1, 0, 0LL, v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000045E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void platform_configStream_deleteParams(const void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2)
    {
      CFRelease(v2);
      *a1 = 0LL;
    }

    uint64_t v3 = a1[2];
    if (v3) {
      CFRelease(v3);
    }
    free(a1);
  }

void platform_connectionInfo_configStreamPropertyRequest( const void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v10 = 0LL;
  if (a2 && a3)
  {
    if ((_categoriesAvailableForEndpoint(a3) & 1) != 0)
    {
      id v10 = calloc(1uLL, 0x18uLL);
      *(void *)id v10 = CFRetain(a1);
      v10[4] = a4;
      *((_BYTE *)v10 + 10) = a5;
      *((void *)v10 + 2) = 0LL;
    }

    else
    {
      id v14 = logObjectForModule();
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = 138412546;
        uint64_t v17 = a2;
        __int16 v18 = 2112;
        id v19 = a3;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "CategoryList not available yet! %@ - %@",  (uint8_t *)&v16,  0x16u);
      }

      id v10 = 0LL;
    }
  }

  if (gLogObjects) {
    BOOL v11 = gNumLogObjects < 9;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v13 = (os_log_s *)&_os_log_default;
    id v12 = &_os_log_default;
  }

  else
  {
    uint64_t v13 = (os_log_s *)*(id *)(gLogObjects + 64);
  }

  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    int v16 = 138413314;
    uint64_t v17 = a2;
    __int16 v18 = 2112;
    id v19 = a3;
    __int16 v20 = 1024;
    int v21 = 0;
    __int16 v22 = 1024;
    int v23 = a4;
    __int16 v24 = 1024;
    int v25 = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "connectionInfo configStreamPropertyRequest: %@ - %@, success %d, categoryID 0x%x, propertyID %u",  (uint8_t *)&v16,  0x28u);
  }

  platform_connectionInfo_configStreamPropertyResponse((uint64_t)a1, (uint64_t)a3, a2, a4, a5, 0LL, 0);
  platform_configStream_deleteParams((const void **)v10);
}

void platform_connectionInfo_configStreamPropertySetValue( const void *a1, uint64_t a2, void *a3, __int16 a4, char a5, const void *a6)
{
  uint64_t v6 = 0LL;
  if (!a2 || !a3) {
    goto LABEL_8;
  }
  if ((_categoriesAvailableForEndpoint(a3) & 1) == 0)
  {
    id v14 = logObjectForModule();
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 138412546;
      uint64_t v17 = a2;
      __int16 v18 = 2112;
      id v19 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "CategoryList not available yet! %@ - %@",  (uint8_t *)&v16,  0x16u);
    }

    uint64_t v6 = 0LL;
    goto LABEL_8;
  }

  uint64_t v6 = calloc(1uLL, 0x18uLL);
  *(void *)uint64_t v6 = CFRetain(a1);
  v6[4] = a4;
  *((_BYTE *)v6 + 10) = a5;
  CFTypeRef v13 = a6 ? CFRetain(a6) : 0LL;
  *((void *)v6 + 2) = v13;
  if ((accFeatureHandlers_invokeHandler(a3, 63, (uint64_t)v6) & 1) == 0) {
LABEL_8:
  }
    platform_configStream_deleteParams((const void **)v6);
}

uint64_t ___categoriesAvailableForEndpoint_block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 28) == 11 && (uint64_t v4 = *(void *)(a2 + 56)) != 0)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(_BYTE *)(v4 + 16);
  }

  else
  {
    if (gLogObjects) {
      BOOL v5 = gNumLogObjects < 9;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      char v7 = (os_log_s *)&_os_log_default;
      id v6 = &_os_log_default;
    }

    else
    {
      char v7 = (os_log_s *)*(id *)(gLogObjects + 64);
    }

    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *(_DWORD *)(a2 + 28);
      uint64_t v9 = *(void *)(a1 + 40);
      v11[0] = 67109378;
      v11[1] = v8;
      __int16 v12 = 2112;
      uint64_t v13 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Unexpected protocol %{coreacc:ACCEndpoint_Protocol_t}d for %@ !",  (uint8_t *)v11,  0x12u);
    }
  }

  return 1LL;
}

  ;
}

void OUTLINED_FUNCTION_1( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

uint64_t acc_manager_protectedConnectionCall(void *a1, int a2, uint64_t a3, void *a4)
{
  id v7 = a1;
  id v8 = a4;
  uint64_t v9 = v8;
  if (v7)
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAA00LL;
    uint64_t v13 = a3;
    id v14 = objc_retainBlock(v8);
    uint64_t v10 = acc_manager_callbackForConnection( v7,  (void (*)(uint64_t, uint64_t))_handleConnectionCallback,  (uint64_t)&v13,  a2);
    id v11 = v14;
    id v14 = 0LL;
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  return v10;
}

void sub_100004BCC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t _handleConnectionCallback(uint64_t a1, void *a2)
{
  if (a2 && (uint64_t v3 = a2[1]) != 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(v3 + 16))(v3, a1, *a2);
  }
  else {
    return 0LL;
  }
}

uint64_t acc_manager_protectedEndpointCall(void *a1, int a2, uint64_t a3, void *a4)
{
  id v7 = a1;
  id v8 = a4;
  uint64_t v9 = v8;
  if (v7)
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAA00LL;
    uint64_t v13 = a3;
    id v14 = objc_retainBlock(v8);
    uint64_t v10 = acc_manager_callbackForEndpoint( v7,  (void (*)(uint64_t, uint64_t))_handleEndpointCallback,  (uint64_t)&v13,  a2);
    id v11 = v14;
    id v14 = 0LL;
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  return v10;
}

void sub_100004CB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t _handleEndpointCallback(uint64_t a1, void *a2)
{
  if (a2 && (uint64_t v3 = a2[1]) != 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(v3 + 16))(v3, a1, *a2);
  }
  else {
    return 0LL;
  }
}

void OUTLINED_FUNCTION_3( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void OUTLINED_FUNCTION_5( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

id _getUSBCameraKitHubPluginInstance()
{
  BOOL v0 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformPluginManager sharedManager](&OBJC_CLASS___ACCPlatformPluginManager, "sharedManager"));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( [v0 pluginInstanceWithProtocol:&OBJC_PROTOCOL___ACCPlatformUSBCameraKitHubPluginProtocol fallbackToTransportPlugins:1]);

  return v1;
}

LABEL_26:
    if (gLogObjects && gNumLogObjects >= 7)
    {
      unint64_t v15 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      unint64_t v15 = (os_log_s *)&_os_log_default;
      __int16 v18 = &_os_log_default;
    }

    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      id v19 = self->_siphoningCurrentInmAOld;
      __int16 v20 = self->_siphoningCurrentInmA;
      int v21 = self->_siphoningCurrentNeedSend;
      v39 = 67109888;
      BOOL v40 = v3;
      BOOL v41 = 1024;
      int v42 = v19;
      v43 = 1024;
      uint64_t v44 = v20;
      int v45 = 1024;
      *(_DWORD *)v46 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "sendPowerUpdate usbRequiredCurrent=%d _siphoningCurrent=%d->%d _siphoningCurrentNeedSend=%d",  (uint8_t *)&v39,  0x1Au);
    }

    __int16 v22 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue(-[ACCPowerSiphoningControlDelegate endpointUID](self->_delegate, "endpointUID"));
    platform_power_sendPowerUpdate(v22, 3, self->_siphoningCurrentInmA, 13, 0);
    int v23 = 0;
    goto LABEL_40;
  }

  if (gLogObjects && gNumLogObjects >= 7)
  {
    uint64_t v17 = (os_log_s *)*(id *)(gLogObjects + 48);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v17 = (os_log_s *)&_os_log_default;
    int v28 = &_os_log_default;
  }

  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    v36 = self->_siphoningCurrentNeedSend;
    v37 = self->_siphoningCurrentInmAOld;
    BOOL v38 = self->_siphoningCurrentInmA;
    v39 = 67110144;
    BOOL v40 = v3;
    BOOL v41 = 1024;
    int v42 = v36;
    v43 = 1024;
    uint64_t v44 = v37;
    int v45 = 1024;
    *(_DWORD *)v46 = v38;
    *(_WORD *)&v46[4] = 1024;
    *(_DWORD *)&v46[6] = v37;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "Skip check/send siphoning current, usbRequiredCurrent=%d _siphoningCurrentNeedSend=%d _siphoningCurrentInmAOld=%d _siphoningCurrentInmA=%d _siphoningCurrentInmAOld=%d",  (uint8_t *)&v39,  0x20u);
  }
}

      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[ACCVoiceOverServer sharedServer](&OBJC_CLASS___ACCVoiceOverServer, "sharedServer"));
      [v17 accessoryVoiceOver:a1 performAction:a2 parameters:v9];

      return;
    default:
      if ((_DWORD)a2 != 1) {
        goto LABEL_26;
      }
LABEL_14:
      if (!a3 || *(_DWORD *)a3 != (_DWORD)a2) {
        return;
      }
      LODWORD(v_Block_object_dispose(va, 8) = *(_DWORD *)(a3 + 8);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v8));
      LODWORD(v12) = *(_DWORD *)(a3 + 12);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v12));
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v10,  @"ACCVoiceOverActionParameterPointXKey",  v13,  @"ACCVoiceOverActionParameterPointYKey",  0LL));

      goto LABEL_24;
  }
    }
  }

  else
  {
    id v7 = 0LL;
  }
}
}

      int v28 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformUSBManager sharedManager](&OBJC_CLASS___ACCPlatformUSBManager, "sharedManager"));
      __int16 v29 = (void *)objc_claimAutoreleasedReturnValue([v28 usbFaultSubscribers]);
      [v29 removeObject:v10];

      int v23 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformUSBManager sharedManager](&OBJC_CLASS___ACCPlatformUSBManager, "sharedManager"));
      __int16 v24 = (void *)objc_claimAutoreleasedReturnValue([v23 subscriberList]);
      int v25 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformUSBManager sharedManager](&OBJC_CLASS___ACCPlatformUSBManager, "sharedManager"));
      int v26 = (void *)objc_claimAutoreleasedReturnValue([v25 usbFaultSubscribers]);
      __int16 v27 = @"USBFaultSubscribers";
LABEL_27:
      [v24 setObject:v26 forKey:v27];
    }
  }
}

  a3->var3 = self->_parentPersistentID;
  a3->var0 |= 4u;
  validMask = self->_validMask;
  if ((validMask & 8) == 0)
  {
LABEL_15:
    if ((validMask & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }

  __break(0x5513u);
  return result;
}

void sub_10000892C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100008B78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100008DA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

id _getSleepAssertionPluginInstance()
{
  BOOL v0 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformPluginManager sharedManager](&OBJC_CLASS___ACCPlatformPluginManager, "sharedManager"));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( [v0 pluginInstanceWithProtocol:&OBJC_PROTOCOL___ACCPlatformSleepAssertionPluginProtocol fallbackToTransportPlugins:0]);

  if (!v1)
  {
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 7;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v4 = (os_log_s *)&_os_log_default;
      id v3 = &_os_log_default;
    }

    else
    {
      uint64_t v4 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      _getSleepAssertionPluginInstance_cold_1();
    }
  }

  return v1;
}

LABEL_53:
}

  composer = self->_composer;
  if (composer)
  {
    composer = -[NSString UTF8String](composer, "UTF8String");
    validMask = self->_validMask;
  }

  a3->var19 = (char *)composer;
  a3->var0 |= 0x40000u;
  if ((validMask & 0x80000) == 0)
  {
LABEL_21:
    if ((validMask & 0x2000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_57;
  }

id _getACPowerPluginInstance()
{
  BOOL v0 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformPluginManager sharedManager](&OBJC_CLASS___ACCPlatformPluginManager, "sharedManager"));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( [v0 pluginInstanceWithProtocol:&OBJC_PROTOCOL___ACCPlatformIOKitPowerPluginProtocol fallbackToTransportPlugins:0]);

  if (!v1)
  {
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 7;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v4 = (os_log_s *)&_os_log_default;
      id v3 = &_os_log_default;
    }

    else
    {
      uint64_t v4 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      _getACPowerPluginInstance_cold_1();
    }
  }

  return v1;
}

LABEL_32:
            __int16 v27 = (dispatch_source_s *)v19;
            int v28 = -1LL;
          }

          dispatch_source_set_timer(v27, v28, 0xFFFFFFFFFFFFFFFFLL, 0LL);
          goto LABEL_34;
        }

        BOOL v35 = gLogObjects;
        v36 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 7)
        {
          id v19 = (os_log_s *)*(id *)(gLogObjects + 48);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = v41;
            *(void *)v49 = v35;
            *(_WORD *)&v49[8] = 1024;
            LODWORD(v50) = v36;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          }

          v37 = &_os_log_default;
          id v19 = (os_log_s *)&_os_log_default;
        }

        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)v49 = v17;
          _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "[#SleepAssertions] Failed to get sleep assertion for uuid %@ !!",  buf,  0xCu);
        }

        *(_WORD *)(a3 + 52) = 0;
        if (*(unsigned __int16 *)(a3 + 54) == v76)
        {
          int v42 = 18;
LABEL_68:
          *(_BYTE *)(a3 + 61) = v42;
        }

        goto LABEL_69;
      case 9u:
        v80 = v20;
        iAP2PacketGetChecksum((unsigned __int16 *)(*(void *)(a3 + 64) + 8LL), (v22 >> 12) & 3);
        v39 = *a1++;
        iAP2PacketSetHdrChecksum(a3, ChecksumType, v39);
        *(_BYTE *)(a3 + 61) = 10;
        ++*(_DWORD *)(a3 + 44);
        *((void *)&v40 + 1) = *((void *)&v80 + 1);
        *(int32x2_t *)&BOOL v40 = vadd_s32(*(int32x2_t *)&v80, (int32x2_t)0xFFFFFFFF00000001LL);
        v79 = v40;
        BOOL v41 = iAP2PacketCalcChecksum(*(unsigned __int8 **)(a3 + 64), 8u, ChecksumType);
        if (v41 == iAP2PacketGetChecksum( (unsigned __int16 *)(*(void *)(a3 + 64) + 8LL),  (*(unsigned __int16 *)(a3 + 61) >> 12) & 3)) {
          goto LABEL_32;
        }
        goto LABEL_29;
      case 0xAu:
        v79 = v20;
        PayloadLen = iAP2PacketGetPayloadLen(a3);
        uint64_t v44 = *(unsigned __int16 *)(a3 + 52);
        int v45 = PayloadLen - v44;
        if (PayloadLen == v44)
        {
          v46 = PayloadLen;
        }

        else
        {
          if (DWORD1(v79) >= v45) {
            __int16 v65 = v45;
          }
          else {
            __int16 v65 = DWORD1(v79);
          }
          memcpy((void *)(*(void *)(a3 + 72) + *(unsigned __int16 *)(a3 + 52)), a1, v65);
          v46 = *(_WORD *)(a3 + 52) + v65;
          *(_WORD *)(a3 + 52) = v46;
          *(_DWORD *)(a3 + 44) += v65;
          a1 += v65;
          unsigned int v66 = vdup_n_s32(v65);
          LODWORD(v67) = v65;
          a8 = v77;
          LODWORD(v67) = vadd_s32(*(int32x2_t *)&v79, *(int32x2_t *)&v67).u32[0];
          DWORD1(v67) = vsub_s32(*(int32x2_t *)&v79, v66).i32[1];
          v79 = v67;
        }

        int v42 = 11;
        goto LABEL_68;
      case 0xBu:
        v47 = *a1++;
        v81 = v20;
        iAP2PacketSetPayloadChecksum(a3, v47);
        *((void *)&v20 + 1) = *((void *)&v81 + 1);
        *(_BYTE *)(a3 + 61) = 12;
        ++*(_DWORD *)(a3 + 44);
        *(int32x2_t *)&__int16 v20 = vadd_s32(*(int32x2_t *)&v81, (int32x2_t)0xFFFFFFFF00000001LL);
        if (ChecksumType) {
          goto LABEL_95;
        }
        v79 = v20;
        v48 = *(unsigned __int8 **)(a3 + 72);
        v49 = iAP2PacketGetPayloadLen(a3);
        v50 = v48;
        v51 = 0;
LABEL_39:
        __int128 v56 = iAP2PacketCalcChecksum(v50, v49, v51);
        if (v56 == iAP2PacketGetChecksum( (unsigned __int16 *)(*(void *)(a3 + 72) + *(unsigned __int16 *)(a3 + 52)),  (*(unsigned __int16 *)(a3 + 61) >> 12) & 3))
        {
          *(_BYTE *)(a3 + 61) = 18;
        }

        else
        {
          if (a6) {
            ++*a6;
          }
          __iAP2PacketResetPacket((void *)a3);
        }

        a8 = v77;
        goto LABEL_69;
      case 0xCu:
        v82 = v20;
        Checksum = iAP2PacketGetChecksum( (unsigned __int16 *)(*(void *)(a3 + 72) + *(unsigned __int16 *)(a3 + 52)),  (v22 >> 12) & 3);
        v53 = *a1++;
        iAP2PacketSetPayloadChecksum(a3, v53 | (Checksum << 8));
        ++*(_DWORD *)(a3 + 44);
        *((void *)&v54 + 1) = *((void *)&v82 + 1);
        *(int32x2_t *)&v54 = vadd_s32(*(int32x2_t *)&v82, (int32x2_t)0xFFFFFFFF00000001LL);
        v79 = v54;
        v55 = *(unsigned __int8 **)(a3 + 72);
        v49 = iAP2PacketGetPayloadLen(a3);
        v50 = v55;
        v51 = ChecksumType;
        goto LABEL_39;
      case 0xDu:
        *(_BYTE *)(*(void *)(a3 + 64) + *(unsigned int *)(a3 + 44)) = *a1;
        __int128 v57 = *a1;
        if (a8 != 2)
        {
          if (*a1) {
            goto LABEL_71;
          }
          v31 = 14;
LABEL_90:
          *(_BYTE *)(a3 + 61) = v31;
          goto LABEL_91;
        }

        if (v57 == 2 || v57 == 4)
        {
LABEL_71:
          *(_BYTE *)(a3 + 61) = 16;
          *(_WORD *)(a3 + 54) = *a1 + 4;
          goto LABEL_91;
        }

        __int128 v58 = (void *)a3;
        v79 = v20;
LABEL_52:
        __iAP2PacketResetPacket(v58);
LABEL_69:
        __int16 v20 = v79;
        goto LABEL_95;
      case 0xEu:
        *(_BYTE *)(*(void *)(a3 + 64) + *(unsigned int *)(a3 + 44)) = *a1;
        __int128 v59 = *a1++;
        *(_WORD *)(a3 + 54) = v59;
        int v28 = 15;
        goto LABEL_47;
      case 0xFu:
        *(_BYTE *)(*(void *)(a3 + 64) + *(unsigned int *)(a3 + 44)) = *a1;
        v60 = *(_WORD *)(a3 + 54);
        *(_WORD *)(a3 + 54) = v60 << 8;
        v61 = *a1++;
        *(_WORD *)(a3 + 54) = (v61 | (unsigned __int16)(v60 << 8)) + 6;
        int v28 = 16;
LABEL_47:
        *(_BYTE *)(a3 + 61) = v28;
        ++*(_DWORD *)(a3 + 44);
        goto LABEL_94;
      case 0x10u:
        int v62 = *a1++;
        *(_BYTE *)(*(void *)(a3 + 64) + *(unsigned int *)(a3 + 44)) = v62;
        __int16 v63 = *(_DWORD *)(a3 + 44);
        *(_DWORD *)(a3 + 44) = v63 + 1;
        *(int32x2_t *)&__int16 v20 = vadd_s32(*(int32x2_t *)&v20, (int32x2_t)0xFFFFFFFF00000001LL);
        goto LABEL_95;
      case 0x11u:
        v79 = v20;
        *(_BYTE *)(*(void *)(a3 + 64) + *(unsigned int *)(a3 + 44)) = *a1;
        if (iAP2PacketCalcChecksum( (unsigned __int8 *)(*(void *)(a3 + 64) + 2LL),  *(unsigned __int16 *)(a3 + 54) - 2,  0)) {
          goto LABEL_51;
        }
        unsigned int v68 = *(_WORD *)(a3 + 61) | 0x400;
        *(_WORD *)(a3 + 61) = v68;
        if (iAP2PacketCheckDetect(a3))
        {
          __int16 v69 = v68 & 0xFF00;
          unsigned int v70 = 19;
        }

        else
        {
          if (!iAP2PacketCheckDetectNACK(a3))
          {
            if (iAP2PacketCheckRequestIdentify(a3))
            {
              unsigned int v72 = v68 & 0xFF00;
              __int16 v73 = 21;
              goto LABEL_100;
            }

            if (v77 == 2)
            {
              __iAP2PacketResetPacket((void *)a3);
            }

            else
            {
              unsigned int v72 = v68 & 0xFF00;
              __int16 v73 = 22;
LABEL_100:
              *(_WORD *)(a3 + 61) = v72 | v73;
            }

            a8 = v77;
            __int16 v20 = v79;
            goto LABEL_91;
          }

          __int16 v69 = v68 & 0xFF00;
          unsigned int v70 = 20;
        }

        *(_WORD *)(a3 + 61) = v69 | v70;
        a8 = v77;
        __int16 v20 = v79;
        if (a5) {
          *a5 = 1;
        }
LABEL_91:
        __int16 v24 = *(_DWORD *)(a3 + 44) + 1;
LABEL_92:
        *(_DWORD *)(a3 + 44) = v24;
LABEL_93:
        ++a1;
LABEL_94:
        *(int32x2_t *)&__int16 v20 = vadd_s32(*(int32x2_t *)&v20, (int32x2_t)0xFFFFFFFF00000001LL);
LABEL_95:
        if (a1 >= v19) {
          return v20;
        }
        break;
      default:
        goto LABEL_95;
    }
  }

      __int16 v20 = *(_DWORD *)(a1 + 8);
      if (v20 == 2)
      {
        int v21 = v19[353];
        if (v21 && gNumLogObjects >= 14)
        {
          __int16 v22 = *(os_log_s **)(v21 + 104);
        }

        else
        {
          __int16 v22 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
          acc_connection_setAuthStatus_cold_3();
        }
        acc_manager_checkForWirelessCTA();
        __int16 v20 = *(_DWORD *)(a1 + 8);
      }

      if (v20 == 9)
      {
        int v23 = v19[353];
        if (v23 && gNumLogObjects >= 14)
        {
          __int16 v24 = *(os_log_s **)(v23 + 104);
        }

        else
        {
          __int16 v24 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
          acc_connection_setAuthStatus_cold_1();
        }
        acc_manager_checkForInductiveCTA();
      }

      goto LABEL_50;
    }
  }

  id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_albumPersistentID));
  -[NSMutableDictionary setObject:forKey:]( v3,  "setObject:forKey:",  v14,  @"ACCMediaLibraryUpdateItemAlbumPersistentID");

  validMask = self->_validMask;
  if ((validMask & 0x40) == 0)
  {
LABEL_8:
    if ((validMask & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }

  a3->var6 = self->_albumPersistentID;
  a3->var0 |= 0x20u;
  validMask = self->_validMask;
  if ((validMask & 0x40) == 0)
  {
LABEL_8:
    if ((validMask & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }

LABEL_34:
        int v16 = (char *)v16 + 1;
      }

      while (v14 != v16);
      BOOL v40 = -[NSSet countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v44,  v51,  16LL);
      id v14 = v40;
    }

    while (v40);
  }
}

  if (gLogObjects && gNumLogObjects >= 55)
  {
    __int16 v20 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    __int16 v20 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    int v21 = *((_DWORD *)a3 + 286);
    __int16 v22 = *((_DWORD *)a3 + 331);
    int v23 = *((_DWORD *)a3 + 333);
    __int16 v24 = a3[1328];
    int v25 = a3[1329];
    int v26 = a3[1330];
    __int16 v27 = a3[1331];
    __int16 v29 = 67110912;
    uint64_t v30 = v21;
    v31 = 1024;
    BOOL v32 = v22;
    v33 = 1024;
    v34 = v23;
    BOOL v35 = 1024;
    v36 = v24;
    v37 = 1024;
    BOOL v38 = v25;
    v39 = 1024;
    BOOL v40 = v26;
    BOOL v41 = 1024;
    int v42 = v27;
    v43 = 1024;
    uint64_t v44 = SessionImplementation;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "[AccAuth] createSession: outSession: role %d, characteristics %#10x, authTypes(%d)[%d %d %d %d], errorNo %d \n",  (uint8_t *)&v29,  0x32u);
  }

  return SessionImplementation;
}

                else {
                  int v21 = *(unsigned __int8 *)(a1 + 48);
                }
                __int16 v22 = qiAuth_protocol_setSlotAuthState((unsigned __int8 *)a1, v21, 2);
              }

              else
              {
                *(_BYTE *)(a1 + 224) = 1;
                v43 = (os_log_s *)logObjectForModule_19();
                if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
                {
                  v47 = a2[1];
                  v48 = a2[2];
                  v49 = *(unsigned __int8 *)(a1 + 224);
                  v50 = 136316418;
                  v51 = "_qiAuth_protocol_handleResponse_ERROR";
                  v52 = 1024;
                  v53 = 2411;
                  v54 = 1024;
                  v55 = 7;
                  __int128 v56 = 1024;
                  __int128 v57 = v47;
                  __int128 v58 = 1024;
                  *(_DWORD *)__int128 v59 = v48;
                  *(_WORD *)&v59[4] = 1024;
                  *(_DWORD *)&v59[6] = v49;
                  _os_log_debug_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEBUG,  "%s:%d RX: ERROR msg(%d): errorCode 0x%02X, errorData 0x%02X, retryOnErrorCount %d, Retry once!",  (uint8_t *)&v50,  0x2Au);
                }

                __int16 v22 = qiAuth_protocol_sendData(a1, *(const UInt8 **)(a1 + 32), *(unsigned __int16 *)(a1 + 42));
              }

              int v16 = v22;
LABEL_69:
              unint64_t v15 = 7;
              break;
            case 3:
              int v25 = qiAuth_protocol_timeoutForRequest(a1, *(_DWORD *)(a1 + 44) & 0xF, 0x7Fu);
              int v26 = *(unsigned __int8 *)(a1 + 48);
              if ((*(_DWORD *)(a1 + 220) & 0x80000000) == 0)
              {
                __int16 v27 = (os_log_s *)logObjectForModule_19();
                if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
                {
                  int v28 = *(_DWORD *)(a1 + 44);
                  v50 = 136315906;
                  v51 = "_qiAuth_protocol_handleResponse_ERROR";
                  v52 = 1024;
                  v53 = 2437;
                  v54 = 1024;
                  v55 = v25;
                  __int128 v56 = 1024;
                  __int128 v57 = v28;
                  _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "%s:%d Cancel responseTimer, %u ms, outMsgType %u",  (uint8_t *)&v50,  0x1Eu);
                }

                qiAuth_util_cancelTimer((const void **)a1, *(_DWORD *)(a1 + 220));
              }

              __int16 v29 = (v26 << 16) | 2;
              if (gLogObjects && gNumLogObjects >= 60)
              {
                uint64_t v30 = *(os_log_s **)(gLogObjects + 472);
              }

              else
              {
                uint64_t v30 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
              {
                v37 = *(_DWORD *)(a1 + 44);
                v50 = 136315906;
                v51 = "_qiAuth_protocol_handleResponse_ERROR";
                v52 = 1024;
                v53 = 2441;
                v54 = 1024;
                v55 = v25;
                __int128 v56 = 1024;
                __int128 v57 = v37;
                _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "%s:%d Start responseTimer, %u ms, outMsgType %u",  (uint8_t *)&v50,  0x1Eu);
              }

              int v16 = 0LL;
              *(_DWORD *)(a1 + 220) = qiAuth_util_callbackOnTimer( (const void **)a1,  v25,  (uint64_t)_qiAuth_protocol_timeoutCallback,  v29);
              goto LABEL_69;
            default:
              if (gLogObjects && gNumLogObjects >= 60)
              {
                int v23 = *(os_log_s **)(gLogObjects + 472);
              }

              else
              {
                int v23 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
                _qiAuth_protocol_handleResponse_ERROR_cold_2();
              }
              unint64_t v15 = 7;
              goto LABEL_6;
          }
        }
      }

      else
      {
        uint64_t v9 = &startLogsNotificationObservers;
        id v8 = &startLogsNotificationObservers;
      }
    }
  }

  else
  {
    unint64_t v15 = 0;
LABEL_6:
    int v16 = 4294967294LL;
  }

  BOOL v38 = v8[353];
  if (v38 && *((int *)v9 + 708) >= 60)
  {
    v39 = *(os_log_s **)(v38 + 472);
  }

  else
  {
    v39 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    if ((v15 - 1) > 0xA)
    {
      BOOL v40 = "UNKNOWN";
      if (a6) {
        goto LABEL_78;
      }
    }

    else
    {
      BOOL v40 = off_1001FD120[v15 - 1];
      if (a6)
      {
LABEL_78:
        BOOL v41 = (unsigned __int16)*a6;
LABEL_81:
        v50 = 136316674;
        v51 = "_qiAuth_protocol_handleResponse_ERROR";
        v52 = 1024;
        v53 = 2459;
        v54 = 1024;
        v55 = v16;
        __int128 v56 = 1024;
        __int128 v57 = v15;
        __int128 v58 = 2080;
        *(void *)__int128 v59 = v40;
        *(_WORD *)&v59[8] = 1024;
        *(_DWORD *)&v59[10] = a3;
        v60 = 1024;
        v61 = v41;
        _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "%s:%d result %d, msgType %d(%s), dataInLen %u, dataOutLen %u",  (uint8_t *)&v50,  0x34u);
        return v16;
      }
    }

    BOOL v41 = -1;
    goto LABEL_81;
  }

  return v16;
}

  unint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  self->_albumTrackNumber));
  -[NSMutableDictionary setObject:forKey:]( v3,  "setObject:forKey:",  v15,  @"ACCMediaLibraryUpdateItemAlbumTrackNumber");

  validMask = self->_validMask;
  if ((validMask & 0x100) == 0)
  {
LABEL_10:
    if ((validMask & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }

          __break(0x5519u);
          return result;
        }

        __int16 v12 = 786432LL;
      }

      else
      {
        if (v7 != 16) {
          goto LABEL_30;
        }
        if (*(void *)v8 != 0x2D20656761766153LL || *((void *)v8 + 1) != 0x79726F7463614620LL) {
          goto LABEL_30;
        }
        __int16 v12 = 3LL;
      }

      uint64_t v13 = v12 & 0xFFFF0000FFFFFFFFLL | 0x30000000000LL;
    }

    *a2 = v10 | v13;
    goto LABEL_30;
  }

  return result;
}

uint64_t platform_sleepAssertion_connectionTypeAllowsAssertion(int a1)
{
  if ((platform_systemInfo_isATV() & 1) == 0
    && (a1 - 1) < 6
    && ((0x2Du >> (a1 - 1)) & 1) != 0)
  {
    uint64_t v2 = 1LL;
  }

  else
  {
    uint64_t v2 = (uint64_t)platform_systemInfo_isWatch();
  }

  if (gLogObjects) {
    BOOL v3 = gNumLogObjects < 14;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v5 = (os_log_s *)&_os_log_default;
    id v4 = &_os_log_default;
  }

  else
  {
    BOOL v5 = (os_log_s *)*(id *)(gLogObjects + 104);
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v7[0] = 67109376;
    v7[1] = a1;
    __int16 v8 = 1024;
    int v9 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "[#SleepAssertions] connectionType: %{coreacc:ACCConnection_Type_t}d allows sleep assertion %d",  (uint8_t *)v7,  0xEu);
  }

  return v2;
}

uint64_t platform_sleepAssertion_connectionTypeRequiresAssertion(int a1)
{
  unsigned int v2 = platform_systemInfo_isATV();
  else {
    uint64_t v3 = 1LL;
  }
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 14;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v6 = (os_log_s *)&_os_log_default;
    id v5 = &_os_log_default;
  }

  else
  {
    id v6 = (os_log_s *)*(id *)(gLogObjects + 104);
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v8[0] = 67109376;
    v8[1] = a1;
    __int16 v9 = 1024;
    int v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "[#SleepAssertions] connectionType: %{coreacc:ACCConnection_Type_t}d requires sleep assertion %d",  (uint8_t *)v8,  0xEu);
  }

  return v3;
}

BOOL platform_sleepAssertion_endpointProtocolAllowsAssertion(int a1)
{
  return a1 != 2;
}

void platform_sleepAssertion_create(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 7;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  else
  {
    BOOL v4 = (os_log_s *)*(id *)(gLogObjects + 48);
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    uint64_t v7 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[#SleepAssertions] Creating sleep assertion for UUID %@...",  (uint8_t *)&v6,  0xCu);
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[ACCPlatformSleepAssertionManager sharedManager]( &OBJC_CLASS___ACCPlatformSleepAssertionManager,  "sharedManager"));
  [v5 addSleepAssertionForUUID:a1];
}

void platform_sleepAssertion_destroy(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 7;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  else
  {
    BOOL v4 = (os_log_s *)*(id *)(gLogObjects + 48);
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    uint64_t v7 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[#SleepAssertions] Removing sleep assertion for UUID %@...",  (uint8_t *)&v6,  0xCu);
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[ACCPlatformSleepAssertionManager sharedManager]( &OBJC_CLASS___ACCPlatformSleepAssertionManager,  "sharedManager"));
  [v5 removeSleepAssertionForUUID:a1];
}

void platform_sleepAssertion_createEA()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 7;
  }
  else {
    BOOL v0 = 1;
  }
  if (v0)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v2 = (os_log_s *)&_os_log_default;
    id v1 = &_os_log_default;
  }

  else
  {
    BOOL v2 = (os_log_s *)*(id *)(gLogObjects + 48);
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[#SleepAssertions] Creating EA sleep assertion...",  v5,  2u);
  }

  id SleepAssertionPluginInstance = _getSleepAssertionPluginInstance();
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(SleepAssertionPluginInstance);
  [v4 createEASleepAssertion];
}

void platform_sleepAssertion_destroyEA()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 7;
  }
  else {
    BOOL v0 = 1;
  }
  if (v0)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v2 = (os_log_s *)&_os_log_default;
    id v1 = &_os_log_default;
  }

  else
  {
    BOOL v2 = (os_log_s *)*(id *)(gLogObjects + 48);
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[#SleepAssertions] Removing EA sleep assertion...",  v5,  2u);
  }

  id SleepAssertionPluginInstance = _getSleepAssertionPluginInstance();
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(SleepAssertionPluginInstance);
  [v4 removeEASleepAssertion];
}

void OUTLINED_FUNCTION_3_0( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

uint64_t acc_properties_setProperty(__CFDictionary *a1, const void *a2, CFNullRef a3)
{
  if (a1) {
    BOOL v3 = a2 == 0LL;
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t v4 = !v3;
  if (!v3)
  {
    if (!a3) {
      a3 = kCFNull;
    }
    CFDictionarySetValue(a1, a2, a3);
  }

  return v4;
}

BOOL acc_properties_setProperties(void *context, CFDictionaryRef theDict)
{
  if (context && theDict) {
    CFDictionaryApplyFunction( theDict,  (CFDictionaryApplierFunction)CFDictionaryApplierFunction_setValueInMutableDictionary,  context);
  }
  return context != 0LL;
}

BOOL acc_properties_removeProperty(CFMutableDictionaryRef theDict, const void *a2)
{
  if (theDict) {
    CFDictionaryRemoveValue(theDict, a2);
  }
  return theDict != 0LL;
}

BOOL acc_properties_containsProperty(CFDictionaryRef theDict, const void *a2)
{
  BOOL result = 0LL;
  if (theDict)
  {
    if (a2) {
      return CFDictionaryContainsKey(theDict, a2) != 0;
    }
  }

  return result;
}

const void *acc_properties_copyProperty(const __CFDictionary *a1, const void *a2)
{
  BOOL v2 = 0LL;
  if (a1)
  {
    if (a2)
    {
      Value = CFDictionaryGetValue(a1, a2);
      BOOL v2 = Value;
      if (Value) {
        CFRetain(Value);
      }
    }
  }

  return v2;
}

CFDictionaryRef acc_properties_copyProperties(const __CFDictionary *theDict)
{
  if (theDict) {
    return CFDictionaryCreateCopy(kCFAllocatorDefault, theDict);
  }
  return theDict;
}

uint64_t acc_nvmInfo_init(_DWORD *a1)
{
  *a1 = 0;
  return 1LL;
}

uint64_t acc_nvmInfo_setPairingStatus(_DWORD *a1, int a2)
{
  *a1 = a2;
  return 1LL;
}

uint64_t acc_nvmInfo_getPairingStatus(unsigned int *a1)
{
  uint64_t v2 = gLogObjects;
  int v3 = gNumLogObjects;
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 9;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    id v5 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      acc_nvmInfo_getPairingStatus_cold_1(v2, v3);
    }
  }

  else
  {
    id v5 = *(os_log_s **)(gLogObjects + 64);
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *a1;
    v8[0] = 67109120;
    v8[1] = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "acc_nvmInfo_getPairingStatus: %d",  (uint8_t *)v8,  8u);
  }

  return *a1;
}

_BYTE *_createFeature(_BYTE *result)
{
  if (result)
  {
    BOOL result = calloc(1uLL, 1uLL);
    if (result) {
      *BOOL result = 1;
    }
  }

  return result;
}

uint64_t _destroyFeature(void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2)
    {
      free(v2);
      *a1 = 0LL;
    }
  }

  return 0LL;
}

uint64_t _parseIdentificationParams(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    int ParamID = iAP2MsgGetParamID(a3);
    if (gLogObjects && gNumLogObjects >= 52)
    {
      id v5 = *(os_log_s **)(gLogObjects + 408);
    }

    else
    {
      id v5 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        _parseIdentificationParams_cold_2();
      }
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v8[0] = 67109120;
      v8[1] = ParamID;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "parsing identification paramID 0x%X",  (uint8_t *)v8,  8u);
    }

    if (ParamID == 38) {
      iap2_identification_addRejectParam(a1, 38, 1u);
    }
  }

  else
  {
    uint64_t v7 = (os_log_s *)logObjectForModule_0();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      _parseIdentificationParams_cold_1(v7);
    }
  }

  return 0LL;
}

void *logObjectForModule_0()
{
  if (gLogObjects && gNumLogObjects >= 52) {
    return *(void **)(gLogObjects + 408);
  }
  BOOL v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    _parseIdentificationParams_cold_2();
  }
  return v0;
}

uint64_t iap2_accAuthentication_certificate(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0LL;
  if (!a1) {
    return result;
  }
  if (!a2) {
    return result;
  }
  uint64_t result = iap2_feature_getFeature(a1, 0);
  if (!result) {
    return result;
  }
  id v5 = (_DWORD *)result;
  if (*(_DWORD *)result)
  {
    v39 = (os_log_s *)logObjectForModule_1(24);
    if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT)) {
      return 1LL;
    }
    if (*v5 == 2) {
      v88 = "passed";
    }
    else {
      v88 = "failed";
    }
    *(_DWORD *)buf = 136315138;
    *(void *)v98 = v88;
    int v42 = "Authentication already %s, ignoring message!";
    goto LABEL_81;
  }

  int v96 = 0;
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
  if (!FirstParam)
  {
    if (!acc_userDefaults_BOOLForKey((uint64_t)@"ForceAuthTimeout"))
    {
LABEL_74:
      if (gLogObjects && gNumLogObjects >= 25)
      {
        BOOL v40 = *(os_log_s **)(gLogObjects + 192);
      }

      else
      {
        BOOL v40 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
        iap2_accAuthentication_certificate_cold_2(v40, v43, v44, v45, v46, v47, v48, v49);
      }
      BytePtr = 0LL;
      CFIndex Length = 0LL;
      BOOL v52 = 0;
      goto LABEL_173;
    }

    goto LABEL_71;
  }

  NextParam = (unsigned __int16 *)FirstParam;
  v89 = v5;
  uint64_t v90 = a1;
  unsigned int v92 = 0;
  CFDataRef cf = 0LL;
  CFDataRef v93 = 0LL;
  do
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
    if (ParamID == 2)
    {
      ParamValueData = (const UInt8 *)iAP2MsgGetParamValueData((uint64_t)NextParam);
      unsigned int ParamValueLen = iAP2MsgGetParamValueLen(NextParam);
      unsigned int v15 = ParamValueLen;
      if (ParamValueData && ParamValueLen && !v96)
      {
        CFDataRef cf = CFDataCreate(kCFAllocatorDefault, ParamValueData, ParamValueLen);
        goto LABEL_63;
      }

      uint64_t v29 = gLogObjects;
      int v30 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 25)
      {
        v31 = *(os_log_s **)(gLogObjects + 192);
      }

      else
      {
        v31 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)v98 = v29;
          *(_WORD *)&v98[8] = 1024;
          *(_DWORD *)v99 = v30;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          v31 = (os_log_s *)&_os_log_default;
        }
      }

      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218496;
        *(void *)v98 = (unsigned __int16)ParamValueData;
        *(_WORD *)&v98[8] = 1024;
        *(_DWORD *)v99 = v15;
        *(_WORD *)&v99[4] = 1024;
        *(_DWORD *)&v99[6] = v96;
        v34 = v31;
        BOOL v35 = "Cert param malformed pAccIntermediateCertData:%04lX, accIntermediateCertLen:%04X, paramError:%02X\n";
LABEL_56:
        uint32_t v36 = 24;
LABEL_62:
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, v35, buf, v36);
      }
    }

    else
    {
      int v9 = ParamID;
      if (ParamID == 1)
      {
        unsigned int DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v96);
        unsigned int v17 = DataAsU8;
        uint64_t v18 = gLogObjects;
        int v19 = gNumLogObjects;
        if (gLogObjects) {
          BOOL v20 = gNumLogObjects <= 24;
        }
        else {
          BOOL v20 = 1;
        }
        int v21 = !v20;
        if (DataAsU8 > 1 || v96)
        {
          if (v21)
          {
            BOOL v32 = *(os_log_s **)(gLogObjects + 192);
          }

          else
          {
            BOOL v32 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)v98 = v18;
              *(_WORD *)&v98[8] = 1024;
              *(_DWORD *)v99 = v19;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              BOOL v32 = (os_log_s *)&_os_log_default;
            }
          }

          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)v98 = v17;
            *(_WORD *)&v98[4] = 1024;
            *(_DWORD *)&v98[6] = v96;
            v34 = v32;
            BOOL v35 = "Got invalid auth type %d, paramError:%02X";
            goto LABEL_61;
          }
        }

        else
        {
          if (v21)
          {
            __int16 v22 = *(os_log_s **)(gLogObjects + 192);
          }

          else
          {
            __int16 v22 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)v98 = v18;
              *(_WORD *)&v98[8] = 1024;
              *(_DWORD *)v99 = v19;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              __int16 v22 = (os_log_s *)&_os_log_default;
            }
          }

          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)v98 = v17;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Got valid auth type %d", buf, 8u);
          }

          unsigned int v92 = v17;
        }
      }

      else if (ParamID)
      {
        uint64_t v23 = gLogObjects;
        int v24 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 25)
        {
          int v25 = *(os_log_s **)(gLogObjects + 192);
        }

        else
        {
          int v25 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)v98 = v23;
            *(_WORD *)&v98[8] = 1024;
            *(_DWORD *)v99 = v24;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            int v25 = (os_log_s *)&_os_log_default;
          }
        }

        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          int MsgID = iAP2MsgGetMsgID(a2);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)v98 = v9;
          *(_WORD *)&v98[4] = 1024;
          *(_DWORD *)&v98[6] = MsgID;
          v34 = v25;
          BOOL v35 = "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param";
LABEL_61:
          uint32_t v36 = 14;
          goto LABEL_62;
        }
      }

      else
      {
        int v10 = (const UInt8 *)iAP2MsgGetParamValueData((uint64_t)NextParam);
        unsigned int v11 = iAP2MsgGetParamValueLen(NextParam);
        unsigned int v12 = v11;
        if (v10 && v11 && !v96)
        {
          CFDataRef v93 = CFDataCreate(0LL, v10, v11);
          goto LABEL_63;
        }

        uint64_t v26 = gLogObjects;
        int v27 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 25)
        {
          int v28 = *(os_log_s **)(gLogObjects + 192);
        }

        else
        {
          int v28 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)v98 = v26;
            *(_WORD *)&v98[8] = 1024;
            *(_DWORD *)v99 = v27;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            int v28 = (os_log_s *)&_os_log_default;
          }
        }

        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218496;
          *(void *)v98 = (unsigned __int16)v10;
          *(_WORD *)&v98[8] = 1024;
          *(_DWORD *)v99 = v12;
          *(_WORD *)&v99[4] = 1024;
          *(_DWORD *)&v99[6] = v96;
          v34 = v28;
          BOOL v35 = "Cert param malformed pAccCertData:%04lX, accCertLen:%04X, paramError:%02X\n";
          goto LABEL_56;
        }
      }
    }

LABEL_63:
    NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
  }

  while (NextParam);
  CFDataRef v37 = v93;
  if ((acc_userDefaults_BOOLForKey((uint64_t)@"ForceAuthTimeout") & 1) != 0)
  {
LABEL_71:
    if (gLogObjects && gNumLogObjects >= 25)
    {
      v39 = *(os_log_s **)(gLogObjects + 192);
    }

    else
    {
      v39 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT)) {
      return 1LL;
    }
    uint64_t v41 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 138412290;
    *(void *)v98 = v41;
    int v42 = "ForceAuthTimeout: %@ ignore incoming auth messages, allow timeout to occur, if any";
LABEL_81:
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, v42, buf, 0xCu);
    return 1LL;
  }

  if (!v93) {
    goto LABEL_74;
  }
  if (v92)
  {
    if (gLogObjects && gNumLogObjects >= 25)
    {
      BOOL v38 = *(os_log_s **)(gLogObjects + 192);
    }

    else
    {
      BOOL v38 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "Have BAA certificate ... try to verify the chain",  buf,  2u);
    }

    if (cf)
    {
      BOOL v53 = platform_auth_verifyBAACertificateChain(v93, cf);
      if (gLogObjects && gNumLogObjects >= 25)
      {
        v54 = *(os_log_s **)(gLogObjects + 192);
      }

      else
      {
        v54 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)v98 = v53;
        _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "After verifying BAA cert chain, bCertValid = %d",  buf,  8u);
        if (!v53) {
          goto LABEL_102;
        }
LABEL_104:
        if (gLogObjects && gNumLogObjects >= 25)
        {
          v55 = *(os_log_s **)(gLogObjects + 192);
        }

        else
        {
          v55 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)v98 = 1;
          _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "Not checking serial number revocation list for authType %d",  buf,  8u);
        }

    v17 *= 2LL;
  }

  while (v17);
  if (v15 | v6)
  {
    else {
      uint64_t v18 = v6 + 124;
    }
    int v19 = (v18 + (MaxSendPayloadSizeWithOverride >> 1) - 1) / v18 * v18;
    BOOL v20 = v19 * LinkMaxCumAck;
    if (v19 * LinkMaxCumAck > 0x186A0) {
      int v19 = 0x186A0 / LinkMaxCumAck;
    }
    int v30 = v19;
    if (v20 > 0x186A0) {
      int v21 = 0x186A0 / LinkMaxCumAck / v18;
    }
    else {
      int v21 = (v18 + (MaxSendPayloadSizeWithOverride >> 1) - 1) / v18;
    }
    if (!v21)
    {
      if (gLogObjects && gNumLogObjects >= 31)
      {
        __int16 v22 = *(os_log_s **)(gLogObjects + 240);
      }

      else
      {
        __int16 v22 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
        _calcWindowSize_cold_4();
      }
      int v21 = 1;
      uint64_t v7 = &startLogsNotificationObservers;
    }

    uint64_t v23 = 5 * v21;
    int v24 = 1;
    CFDataRef v37 = 5;
  }

  else
  {
    unsigned int v15 = 0;
    LODWORD(v6) = 0;
    uint64_t v18 = 0;
    int v30 = 0;
    int v21 = 0;
    LinkMaxCumAck = 0;
    CFDataRef v37 = 0;
    uint64_t v23 = 0;
    int v24 = 1;
  }

    BOOL v40 = (const __CFArray *)*((void *)v8 + 1);
    if (!v40 || CFArrayGetCount(v40) <= 0)
    {
      if (gLogObjects && gNumLogObjects >= 30)
      {
        uint64_t v41 = *(os_log_s **)(gLogObjects + 232);
      }

      else
      {
        uint64_t v41 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v49 = (uint64_t)Value;
        _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "free buffers are not remaining for eaSessionUUID %@, stop notifications",  buf,  0xCu);
      }

      platform_externalAccessory_stopIncomingDataNotificationsForEASessionUUID((uint64_t)Value);
    }

    int v9 = 1LL;
  }

LABEL_112:
        CertificateSerialNumber = (const void *)platform_auth_createCertificateSerialNumber(v93);
        SerialNumberStringFromData = (const __CFString *)platform_auth_createSerialNumberStringFromData(CertificateSerialNumber);
        __int128 v58 = v89;
        __int128 v59 = (const __CFString *)*((void *)v89 + 6);
        if (v59)
        {
          if (SerialNumberStringFromData)
          {
            CFComparisonResult v60 = CFStringCompare(v59, SerialNumberStringFromData, 1uLL);
            if (v60)
            {
              CFComparisonResult v61 = v60;
              if (gLogObjects && gNumLogObjects >= 25)
              {
                int v62 = *(os_log_s **)(gLogObjects + 192);
              }

              else
              {
                int v62 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
              {
                CStringPtr = CFStringGetCStringPtr(*((CFStringRef *)v89 + 6), 0x8000100u);
                __int16 v65 = CFStringGetCStringPtr(SerialNumberStringFromData, 0x8000100u);
                *(_DWORD *)buf = 136315906;
                *(void *)v98 = "iap2_accAuthentication_certificate";
                *(_WORD *)&v98[8] = 2080;
                *(void *)v99 = CStringPtr;
                *(_WORD *)&v99[8] = 2080;
                v100 = v65;
                __int16 v101 = 2048;
                CFComparisonResult v102 = v61;
                _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEFAULT,  "%s Auth cert serial number data string mismatch: AuthSerNum:[%s] != CertSerNum:[%s], serNumCompareStatus:%02lX",  buf,  0x2Au);
              }

              if (gLogObjects && gNumLogObjects >= 25)
              {
                unsigned int v66 = *(os_log_s **)(gLogObjects + 192);
              }

              else
              {
                unsigned int v66 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "Continuing with iAP2 authentication of the accessory after mismatch serial number, because accessory m ay authenticate differently over iAP2",  buf,  2u);
              }

              __int128 v58 = v89;
              if (*(void *)a1)
              {
                if (**(void **)a1)
                {
                  uint64_t Feature = iap2_feature_getFeature(a1, 0);
                  if (Feature)
                  {
                    uint64_t v68 = Feature;
                    if (gLogObjects && gNumLogObjects >= 25)
                    {
                      __int16 v69 = *(os_log_s **)(gLogObjects + 192);
                    }

                    else
                    {
                      __int16 v69 = (os_log_s *)&_os_log_default;
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        platform_connectionInfo_configStreamCategoryListReady_cold_1();
                      }
                    }

                    if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
                    {
                      uint64_t v70 = *(void *)(v90 + 8);
                      *(_DWORD *)buf = 138412290;
                      *(void *)v98 = v70;
                      _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_DEFAULT,  "Clearing auth state for iAP2 Endpoint %@",  buf,  0xCu);
                    }

                    *(_DWORD *)uint64_t v68 = 0;
                    __int16 v71 = *(const void **)(v68 + 16);
                    __int128 v58 = v89;
                    if (v71)
                    {
                      CFRelease(v71);
                      *(void *)(v68 + 16) = 0LL;
                    }

                    unsigned int v72 = *(const void **)(v68 + 24);
                    if (v72)
                    {
                      CFRelease(v72);
                      *(void *)(v68 + 24) = 0LL;
                    }

                    __int16 v73 = *(const void **)(v68 + 48);
                    if (v73)
                    {
                      CFRelease(v73);
                      *(void *)(v68 + 4_Block_object_dispose(va, 8) = 0LL;
                    }

                    int v74 = *(const void **)(v68 + 56);
                    if (v74)
                    {
                      CFRelease(v74);
                      *(void *)(v68 + 56) = 0LL;
                    }

                    v75 = *(const void **)(v68 + 40);
                    if (v75)
                    {
                      CFRelease(v75);
                      *(void *)(v68 + 40) = 0LL;
                    }

                    platform_auth_deallocAuthCertCaps(*(void *)(v68 + 64));
                    *(void *)(v68 + 64) = 0LL;
                  }
                }
              }
            }

            goto LABEL_153;
          }

          if (gLogObjects && gNumLogObjects >= 25)
          {
            __int16 v63 = *(os_log_s **)(gLogObjects + 192);
          }

          else
          {
            __int16 v63 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR)) {
            iap2_accAuthentication_certificate_cold_4(v63, v80, v81, v82, v83, v84, v85, v86);
          }
          BOOL v53 = 0;
          BytePtr = 0LL;
          CFIndex Length = 0LL;
        }

        else
        {
LABEL_153:
          uint64_t RandomNonce = platform_auth_createRandomNonce(v93);
          if (RandomNonce)
          {
            v77 = (const __CFData *)RandomNonce;
            *((void *)v58 + 2) = CFRetain(v93);
            v78 = (const void *)*((void *)v58 + 3);
            a1 = v90;
            if (v78)
            {
              CFRelease(v78);
              *((void *)v58 + 3) = 0LL;
            }

            *((void *)v58 + 3) = CFRetain(CertificateSerialNumber);
            v79 = (const void *)*((void *)v58 + 6);
            if (v79)
            {
              CFRelease(v79);
              *((void *)v58 + 6) = 0LL;
            }

            *((void *)v58 + 6) = CFRetain(SerialNumberStringFromData);
            *((void *)v58 + 7) = v77;
            v58[8] = v92;
            if (cf)
            {
              *((void *)v58 + 5) = CFRetain(cf);
              CFRelease(cf);
            }

            BytePtr = CFDataGetBytePtr(v77);
            CFIndex Length = CFDataGetLength(v77);
            BOOL v53 = 1;
          }

          else
          {
            BytePtr = 0LL;
            CFIndex Length = 0LL;
            BOOL v53 = 1;
            a1 = v90;
          }
        }

        if (CertificateSerialNumber) {
          CFRelease(CertificateSerialNumber);
        }
        if (SerialNumberStringFromData) {
          CFRelease(SerialNumberStringFromData);
        }
        CFDataRef v37 = v93;
      }

      else
      {
        if (v53) {
          goto LABEL_104;
        }
        BytePtr = 0LL;
        CFIndex Length = 0LL;
      }
    }

    else
    {
LABEL_102:
      BytePtr = 0LL;
      CFIndex Length = 0LL;
      BOOL v53 = 0;
    }
  }

  else
  {
    if ((platform_auth_verifyPublicCertificate(v93) & 1) == 0) {
      goto LABEL_102;
    }
    BytePtr = 0LL;
    CFIndex Length = 0LL;
    BOOL v53 = 0;
  }

  CFRelease(v37);
  BOOL v52 = v53;
LABEL_173:
  v87 = *(dispatch_queue_s **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = __iap2_accAuthentication_certificate_block_invoke;
  block[3] = &__block_descriptor_tmp_4;
  BOOL v95 = v52;
  block[4] = a1;
  block[5] = BytePtr;
  block[6] = Length;
  dispatch_async(v87, block);
  return 1LL;
}

  CFRelease(v36);
  int v6 = v48;
  if (v10) {
LABEL_109:
  }
    CFRelease(v10);
  return v6;
}

void *logObjectForModule_1(int a1)
{
  if (gLogObjects) {
    BOOL v1 = gNumLogObjects <= a1;
  }
  else {
    BOOL v1 = 1;
  }
  if (!v1) {
    return *(void **)(gLogObjects + 8LL * a1);
  }
  uint64_t v2 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v2;
}

void __iap2_accAuthentication_certificate_block_invoke(uint64_t a1)
{
  v1[0] = _NSConcreteStackBlock;
  v1[1] = 0x40000000LL;
  v1[2] = __iap2_accAuthentication_certificate_block_invoke_2;
  v1[3] = &__block_descriptor_tmp;
  char v4 = *(_BYTE *)(a1 + 56);
  __int128 v2 = *(_OWORD *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 48);
  iap2_sessionControl_authorizationHook_authentication((unsigned int *)v2, (uint64_t)v1);
}

void __iap2_accAuthentication_certificate_block_invoke_2(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = (unsigned __int8 *)(a1 + 56);
    if (*(_BYTE *)(a1 + 56) && *(void *)(a1 + 40) && *(void *)(a1 + 48))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      uint64_t v5 = v4 + 120;
      iAP2MsgInit(v4 + 120, 43522, *(void *)(v4 + 192), 0xFFFF, 0LL, 0LL);
      iAP2MsgAddDataParam(v5, 0LL, 0, *(const void **)(a1 + 40), *(unsigned __int16 *)(a1 + 48));
      iap2_sessionControl_sendOutgoingMessage(*(uint64_t **)(a1 + 32), v5);
    }

    else
    {
      if (gLogObjects) {
        BOOL v6 = gNumLogObjects < 25;
      }
      else {
        BOOL v6 = 1;
      }
      if (v6)
      {
        uint64_t v7 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      else
      {
        uint64_t v7 = *(os_log_s **)(gLogObjects + 192);
      }

      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        __iap2_accAuthentication_certificate_block_invoke_2_cold_1(v3, a1, v7);
      }
      _authCompleted(*(uint64_t **)(a1 + 32), 0);
    }
  }

void _authCompleted(uint64_t *a1, int a2)
{
  if (a1)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 25;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      uint64_t v5 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      uint64_t v5 = *(os_log_s **)(gLogObjects + 192);
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 67109120;
      v10[1] = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "bAuthPassed=%d", (uint8_t *)v10, 8u);
    }

    iAP2MsgInit((uint64_t)(a1 + 15), 43524, a1[24], 0xFFFF, 0LL, 0LL);
    if (a2)
    {
      uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0);
      *(CFAbsoluteTime *)(Feature + 8_Block_object_dispose(va, 8) = CFAbsoluteTimeGetCurrent();
      iAP2MsgSetMsgID((uint64_t)(a1 + 15), 43525);
      if (iap2_identification_isIdentificationAccepted((uint64_t)a1))
      {
      }

      iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
      _setAuthState((uint64_t **)a1, 2);
    }

    else
    {
      iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
      _setAuthState((uint64_t **)a1, 1);
      AccessoryNotSupportedCF = (void *)acc_userNotifications_createAccessoryNotSupportedCF();
      CFStringRef Identifier = acc_userNotifications_createIdentifier((uint64_t)@"auth-failed", a1[1]);
      ACCUNSetIdentifier(AccessoryNotSupportedCF, (uint64_t)Identifier);
      if (Identifier) {
        CFRelease(Identifier);
      }
      if (*a1)
      {
        if (*(void *)*a1)
        {
          uint64_t v9 = a1[2];
          if (v9) {
            ACCUNSetGroupIdentifier(AccessoryNotSupportedCF, v9);
          }
        }
      }

      ACCUNManagerPresentNotification(AccessoryNotSupportedCF, 0LL);
      if (AccessoryNotSupportedCF) {
        CFRelease(AccessoryNotSupportedCF);
      }
    }
  }

uint64_t iap2_accAuthentication_challengeResponse(uint64_t *a1, uint64_t a2)
{
  uint64_t result = 0LL;
  if (!a1) {
    return result;
  }
  if (!a2) {
    return result;
  }
  uint64_t result = iap2_feature_getFeature((uint64_t)a1, 0);
  if (!result) {
    return result;
  }
  uint64_t v5 = result;
  if (*(_DWORD *)result)
  {
    v31 = (os_log_s *)logObjectForModule_1(24);
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
      return 1LL;
    }
    if (*(_DWORD *)v5 == 2) {
      BOOL v32 = "passed";
    }
    else {
      BOOL v32 = "failed";
    }
    *(_DWORD *)buf = 136315138;
    *(void *)BOOL v35 = v32;
    uint64_t v29 = "Authentication already %s, ignoring message!";
    int v30 = v31;
    goto LABEL_48;
  }

  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
  if (!FirstParam)
  {
    goto LABEL_39;
  }

  uint64_t v7 = (unsigned __int16 *)FirstParam;
  v33 = a1;
  do
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)v7);
    if (ParamID)
    {
      int v9 = ParamID;
      uint64_t v10 = gLogObjects;
      int v11 = gNumLogObjects;
      if (gLogObjects) {
        BOOL v12 = gNumLogObjects < 25;
      }
      else {
        BOOL v12 = 1;
      }
      if (v12)
      {
        unsigned int v17 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)BOOL v35 = v10;
          *(_WORD *)&v35[8] = 1024;
          int v36 = v11;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
        }
      }

      else
      {
        unsigned int v17 = *(os_log_s **)(gLogObjects + 192);
      }

      if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_28;
      }
      int MsgID = iAP2MsgGetMsgID(a2);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)BOOL v35 = v9;
      *(_WORD *)&v35[4] = 1024;
      *(_DWORD *)&v35[6] = MsgID;
      int v19 = v17;
      BOOL v20 = "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param";
      uint32_t v21 = 14;
LABEL_27:
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v20, buf, v21);
LABEL_28:
      CFDataRef v16 = 0LL;
      goto LABEL_29;
    }

    ParamValueData = (const UInt8 *)iAP2MsgGetParamValueData((uint64_t)v7);
    unsigned int ParamValueLen = iAP2MsgGetParamValueLen(v7);
    int v15 = ParamValueLen;
    if (!ParamValueData || !ParamValueLen)
    {
      uint64_t v22 = gLogObjects;
      int v23 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 25)
      {
        int v24 = *(os_log_s **)(gLogObjects + 192);
      }

      else
      {
        int v24 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)BOOL v35 = v22;
          *(_WORD *)&v35[8] = 1024;
          int v36 = v23;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
        }
      }

      if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        CFDataRef v16 = 0LL;
        goto LABEL_29;
      }

      *(_DWORD *)buf = 134218496;
      *(void *)BOOL v35 = (unsigned __int16)ParamValueData;
      *(_WORD *)&v35[8] = 1024;
      int v36 = v15;
      __int16 v37 = 1024;
      int v38 = 0;
      int v19 = v24;
      BOOL v20 = "Cert param malformed pAccSignData:%04lX, accSignLen:%04X, paramError:%02X\n";
      uint32_t v21 = 24;
      goto LABEL_27;
    }

    CFDataRef v16 = CFDataCreate(0LL, ParamValueData, ParamValueLen);
LABEL_29:
    NextParam = iAP2MsgGetNextParam(a2, 0LL, v7);
    if (!NextParam) {
      break;
    }
    uint64_t v7 = NextParam;
  }

  while (!v16);
  a1 = v33;
  if ((acc_userDefaults_BOOLForKey((uint64_t)@"ForceAuthTimeout") & 1) != 0)
  {
LABEL_39:
    if (gLogObjects && gNumLogObjects >= 25)
    {
      int v27 = *(os_log_s **)(gLogObjects + 192);
    }

    else
    {
      int v27 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
      return 1LL;
    }
    uint64_t v28 = a1[1];
    *(_DWORD *)buf = 138412290;
    *(void *)BOOL v35 = v28;
    uint64_t v29 = "ForceAuthTimeout: %@ ignore incoming auth messages, allow timeout to occur, if any";
    int v30 = v27;
LABEL_48:
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, v29, buf, 0xCu);
    return 1LL;
  }

  if (!v16)
  {
LABEL_42:
    int v26 = 0;
    goto LABEL_43;
  }

  int v26 = platform_auth_verifyNonceSignature(*(void *)(v5 + 16), *(void *)(v5 + 56), (uint64_t)v16);
  if (v26) {
    *(void *)(v5 + 64) = platform_auth_createCapsFromAuthCert(*(void *)(v5 + 16));
  }
  CFRelease(v16);
LABEL_43:
  _authCompleted(a1, v26);
  return 1LL;
}

uint64_t iap2_accAuthentication_certSerial(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0LL;
  if (!a1) {
    return result;
  }
  if (!a2) {
    return result;
  }
  uint64_t result = iap2_feature_getFeature(a1, 0);
  if (!result) {
    return result;
  }
  uint64_t v5 = (_DWORD *)result;
  if (!*(_BYTE *)(result + 72)) {
    return 0LL;
  }
  if (*(_DWORD *)result)
  {
    int v42 = (os_log_s *)logObjectForModule_1(24);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      if (*v5 == 2) {
        uint64_t v43 = "passed";
      }
      else {
        uint64_t v43 = "failed";
      }
      *(_DWORD *)buf = 136315138;
      *(void *)uint64_t v48 = v43;
      _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "Authentication already %s, ignoring message!",  buf,  0xCu);
    }

    return 1LL;
  }

  uint64_t v44 = (void *)result;
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
  if (!FirstParam) {
    goto LABEL_42;
  }
  uint64_t v7 = (unsigned __int16 *)FirstParam;
  uint64_t v45 = a1;
  do
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)v7);
    if (ParamID)
    {
      int v9 = ParamID;
      uint64_t v10 = gLogObjects;
      int v11 = gNumLogObjects;
      if (gLogObjects) {
        BOOL v12 = gNumLogObjects < 25;
      }
      else {
        BOOL v12 = 1;
      }
      if (v12)
      {
        unsigned int v17 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)uint64_t v48 = v10;
          *(_WORD *)&v48[8] = 1024;
          int v49 = v11;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
        }
      }

      else
      {
        unsigned int v17 = *(os_log_s **)(gLogObjects + 192);
      }

      if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_29;
      }
      int MsgID = iAP2MsgGetMsgID(a2);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)uint64_t v48 = v9;
      *(_WORD *)&v48[4] = 1024;
      *(_DWORD *)&v48[6] = MsgID;
      int v19 = v17;
      BOOL v20 = "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param";
      uint32_t v21 = 14;
LABEL_28:
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v20, buf, v21);
LABEL_29:
      CFDataRef v16 = 0LL;
      goto LABEL_30;
    }

    ParamValueData = (const UInt8 *)iAP2MsgGetParamValueData((uint64_t)v7);
    unsigned int ParamValueLen = iAP2MsgGetParamValueLen(v7);
    int v15 = ParamValueLen;
    if (!ParamValueData || !ParamValueLen)
    {
      uint64_t v22 = gLogObjects;
      int v23 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 25)
      {
        int v24 = *(os_log_s **)(gLogObjects + 192);
      }

      else
      {
        int v24 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)uint64_t v48 = v22;
          *(_WORD *)&v48[8] = 1024;
          int v49 = v23;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
        }
      }

      if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        CFDataRef v16 = 0LL;
        goto LABEL_30;
      }

      *(_DWORD *)buf = 134218496;
      *(void *)uint64_t v48 = (unsigned __int16)ParamValueData;
      *(_WORD *)&v48[8] = 1024;
      int v49 = v15;
      __int16 v50 = 1024;
      int v51 = 0;
      int v19 = v24;
      BOOL v20 = "Cert serial number param malformed pAccSerNumData:%04lX, accSerNumLen:%04X, paramError:%02X\n";
      uint32_t v21 = 24;
      goto LABEL_28;
    }

    CFDataRef v16 = CFDataCreate(0LL, ParamValueData, ParamValueLen);
LABEL_30:
    NextParam = iAP2MsgGetNextParam(a2, 0LL, v7);
    if (!NextParam) {
      break;
    }
    uint64_t v7 = NextParam;
  }

  while (!v16);
  if (v16)
  {
    CFIndex Length = CFDataGetLength(v16);
    if ((unint64_t)(Length - 1) >= 0x10)
    {
      uint64_t v39 = Length;
      if (gLogObjects && gNumLogObjects >= 25)
      {
        BOOL v40 = *(os_log_s **)(gLogObjects + 192);
      }

      else
      {
        BOOL v40 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
        iap2_accAuthentication_certSerial_cold_3(v39, v40);
      }
      uint64_t CertDataFromSerialNumber = 0LL;
    }

    else
    {
      SerialNumberStringFromData = (const __CFData *)platform_auth_createSerialNumberStringFromData(v16);
      uint64_t CertDataFromSerialNumber = platform_auth_createCertDataFromSerialNumber(v44[1], SerialNumberStringFromData);
      if (SerialNumberStringFromData)
      {
        uint64_t v29 = (const void *)v44[3];
        if (v29)
        {
          CFRelease(v29);
          v44[3] = 0LL;
        }

        v44[3] = CFRetain(v16);
        int v30 = (const void *)v44[6];
        if (v30)
        {
          CFRelease(v30);
          v44[6] = 0LL;
        }

        v44[6] = CFRetain(SerialNumberStringFromData);
        CFRelease(v16);
LABEL_58:
        CFRelease(SerialNumberStringFromData);
        uint64_t v41 = *(dispatch_queue_s **)(v45 + 24);
        block[0] = _NSConcreteStackBlock;
        block[1] = 0x40000000LL;
        block[2] = __iap2_accAuthentication_certSerial_block_invoke;
        block[3] = &__block_descriptor_tmp_5;
        block[4] = v45;
        block[5] = CertDataFromSerialNumber;
        dispatch_async(v41, block);
        return 0LL;
      }
    }

    SerialNumberStringFromData = v16;
    goto LABEL_58;
  }

LABEL_42:
  if (gLogObjects && gNumLogObjects >= 25)
  {
    v31 = *(os_log_s **)(gLogObjects + 192);
  }

  else
  {
    v31 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  uint64_t result = os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    iap2_accAuthentication_certSerial_cold_1(v31, v32, v33, v34, v35, v36, v37, v38);
    return 0LL;
  }

  return result;
}

  iAP2LinkHandleTimeout(*(void *)(v3 + 24), CurTimeMs, 0xDu);
  if ((ResetEventMask & 0x80) != 0) {
LABEL_32:
  }
    iAP2LinkHandleTimeout(*(void *)(v3 + 24), CurTimeMs, 0xBu);
LABEL_33:
  iAP2LinkProcessSendBuff(*(void *)(v3 + 24));
  int v11 = 0;
  do
  {
    SessSendPckListCount = iAP2LinkGetSessSendPckListCount(*(void *)(v3 + 24), v11);
    uint64_t v13 = SessSendPckListCount == 0;
    uint64_t result = SessSendPckListCount != 0;
    uint64_t v13 = !v13 || v11++ == 4;
  }

  while (!v13);
  return result;
}

            unint64_t FirstParam = iAP2MsgGetNextParam(a2, 0LL, FirstParam);
            if (!FirstParam) {
              goto LABEL_45;
            }
            break;
          default:
            goto LABEL_35;
        }
      }
    }

    int v9 = 0;
    __int16 v8 = 0;
    uint64_t v7 = 0;
    uint64_t v46 = 0LL;
    uint64_t v47 = 0;
LABEL_45:
    if (gLogObjects && gNumLogObjects >= 47)
    {
      CFDataRef v16 = *(os_log_s **)(gLogObjects + 368);
    }

    else
    {
      CFDataRef v16 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      unsigned int v17 = *(void *)(a1 + 8);
      *(_DWORD *)buf = 138412290;
      *(void *)__int16 v50 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "iAP2Navigation StartRouteGuidance: %@",  buf,  0xCu);
    }

    uint64_t Feature = iap2_feature_getFeature(a1, 0x11u);
    if (!Feature
      || (int v19 = (_BYTE *)Feature,
          buf[0] = 0,
          !iap2_identification_checkRequiredMsgIDs(a1, (uint64_t)&gskMsgNavigationMainList, 5, buf)))
    {
LABEL_100:
      uint64_t v5 = 0LL;
      uint32_t v21 = theArray;
      if (!theArray) {
        return v5;
      }
      goto LABEL_76;
    }

    v19[16] = v9 & 1;
    v19[17] = v8 & 1;
    v19[18] = v7 & 1;
    v19[19] = iap2_identification_isIdentifiedForOutgoingMessageID(a1, 0x5204u);
    v19[20] = v46 & 1;
    v19[21] = BYTE4(v46) & 1;
    if (gLogObjects && gNumLogObjects >= 47)
    {
      BOOL v20 = *(os_log_s **)(gLogObjects + 368);
      uint32_t v21 = theArray;
      uint64_t v22 = v47;
    }

    else
    {
      BOOL v20 = (os_log_s *)&_os_log_default;
      uint32_t v21 = theArray;
      uint64_t v22 = v47;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
      iap2_navigation_startRouteGuidanceHandler_cold_1((uint64_t)v21, v20, v23, v24, v25, v26, v27, v28);
    }
    uint64_t v29 = v19[16];
    if (v19[17]) {
      v29 |= 2uLL;
    }
    if (v19[18]) {
      v29 |= 4uLL;
    }
    if (v19[19]) {
      v29 |= 8uLL;
    }
    if (v19[20]) {
      v29 |= 0x10uLL;
    }
    if (v19[21]) {
      int v30 = v29 | 0x20;
    }
    else {
      int v30 = v29;
    }
    if (v22 <= 0) {
      v31 = 0LL;
    }
    else {
      v31 = (uint64_t)v21;
    }
    platform_navigation_startRouteGuidance(*(void *)(a1 + 8), v31, v30);
    uint64_t v5 = 1LL;
    if (v21) {
LABEL_76:
    }
      CFRelease(v21);
  }

  return v5;
}

    NextParamWithError = iAP2MsgGetNextParamWithError(a2, 0LL, v6, &v38);
    if (v38) {
      goto LABEL_66;
    }
    BOOL v6 = NextParamWithError;
    if (v18) {
      CFRelease(v18);
    }
    if (!v6) {
      goto LABEL_48;
    }
  }

  memset(buf, 0, 20);
  int v19 = SecCertificateCreateWithBytes(kCFAllocatorDefault, *(void *)(v37 + 360), *(void *)(v37 + 368));
  uint64_t v18 = (const void *)v19;
  if (!v19) {
    goto LABEL_66;
  }
  SubjectKeyID = (const __CFData *)SecCertificateGetSubjectKeyID(v19);
  if (!SubjectKeyID) {
    goto LABEL_66;
  }
  BytePtr = CFDataGetBytePtr(SubjectKeyID);
  if (*(void *)buf == *(void *)BytePtr
    && *(void *)&buf[8] == *((void *)BytePtr + 1)
    && *(unsigned int *)&buf[16] == (unint64_t)*((unsigned int *)BytePtr + 4))
  {
    v7 |= 2u;
    goto LABEL_42;
  }

  inited = -1;
  uint64_t v29 = logObjectForModule_29();
  int v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
  v31 = os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
  uint64_t v3 = v37;
  if (v31) {
    mfi4Auth_protocol_handle_RequestAuthCert_cold_5();
  }

LABEL_67:
  if (inited) {
LABEL_61:
  }
    mfi4Auth_protocol_handle_AuthState(v3, 1);
LABEL_62:
  if (v18) {
    CFRelease(v18);
  }
  return inited;
}

  uint32_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_genrePersistentID));
  -[NSMutableDictionary setObject:forKey:]( v3,  "setObject:forKey:",  v21,  @"ACCMediaLibraryUpdateItemGenrePersistentID");

  validMask = self->_validMask;
  if ((validMask & 0x10000) == 0)
  {
LABEL_18:
    if ((validMask & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }

  if ((_iAP2LogEnableMask & 1) == 0) {
    return 0LL;
  }
  if (gLogObjects && gNumLogObjects >= 20)
  {
    int v30 = *(os_log_s **)(gLogObjects + 152);
  }

  else
  {
    int v30 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  v31 = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0LL;
  if (v31)
  {
    uint64_t v33 = *(unsigned __int8 *)(v4 + 4);
    uint64_t v34 = *(unsigned __int8 *)(v4 + 5);
    uint64_t v35 = *(unsigned __int8 *)(a1 + 190);
    uint64_t v36 = *(unsigned __int8 *)(a1 + 189);
    uint64_t v37 = *(unsigned __int8 *)(a1 + 188);
    uint64_t v38 = *(unsigned __int8 *)(a1 + 191);
    *(_DWORD *)uint64_t v46 = 136316930;
    *(void *)&v46[4] = "iAP2LinkProcessInOrderPacket";
    *(_WORD *)&v46[12] = 1024;
    *(_DWORD *)&v46[14] = 5304;
    *(_WORD *)&v46[18] = 1024;
    *(_DWORD *)&v46[20] = v33;
    *(_WORD *)&v46[24] = 1024;
    *(_DWORD *)&v46[26] = v34;
    *(_WORD *)&v46[30] = 1024;
    LODWORD(v47) = v35;
    WORD2(v47) = 1024;
    *(_DWORD *)((char *)&v47 + 6) = v36;
    WORD5(v47) = 1024;
    HIDWORD(v47) = v37;
    uint64_t v48 = 1024;
    int v49 = v38;
    _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "ERROR: %s:%d Received Invalid Packet (control=0x%x seq=%u sentSeq=%u recvAck=%u recvSeq=%u sentAck=%u)",  v46,  0x36u);
    return 0LL;
  }

  return result;
}

void __iap2_accAuthentication_certSerial_block_invoke(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  __int128 v2 = *(const __CFData **)(a1 + 40);
  uint64_t v4 = v3 + 120;
  if (v2)
  {
    BytePtr = CFDataGetBytePtr(v2);
    unsigned __int16 Length = CFDataGetLength(*(CFDataRef *)(a1 + 40));
    iAP2MsgInit(v4, 43521, *(void *)(*(void *)(a1 + 32) + 192LL), 0xFFFF, 0LL, 0LL);
    iAP2MsgAddDataParam(v4, 0LL, 0, BytePtr, Length);
    iap2_accAuthentication_certificate(*(void *)(a1 + 32), v4);
    CFRelease(*(CFTypeRef *)(a1 + 40));
  }

  else
  {
    iAP2MsgInit(v3 + 120, 43520, *(void *)(v3 + 192), 0xFFFF, 0LL, 0LL);
    iap2_sessionControl_sendOutgoingMessage(*(uint64_t **)(a1 + 32), v4);
  }

unsigned int *iap2_accAuthentication_getState(unsigned int *result)
{
  if (result)
  {
    uint64_t result = (unsigned int *)iap2_feature_getFeature((uint64_t)result, 0);
    if (result) {
      return (unsigned int *)*result;
    }
  }

  return result;
}

CFTypeRef iap2_accAuthentication_copyCertificate(uint64_t a1)
{
  else {
    return 0LL;
  }
}

CFTypeRef iap2_accAuthentication_copyCertificateSerial(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 0);
  if (!Feature) {
    return 0LL;
  }
  if (*(void *)(Feature + 24)) {
    return CFRetain(*(CFTypeRef *)(Feature + 24));
  }
  uint64_t v3 = *(void *)(Feature + 16);
  if (v3) {
    return (CFTypeRef)platform_auth_createCertificateSerialNumber(v3);
  }
  else {
    return 0LL;
  }
}

CFTypeRef iap2_accAuthentication_copyCertificateSerialString(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 0);
  if (!Feature) {
    return 0LL;
  }
  if (*(void *)(Feature + 48)) {
    return CFRetain(*(CFTypeRef *)(Feature + 48));
  }
  if (*(void *)(Feature + 24)) {
    return (CFTypeRef)platform_auth_createSerialNumberStringFromData(*(void *)(Feature + 24));
  }
  uint64_t v3 = *(void *)(Feature + 16);
  if (!v3) {
    return 0LL;
  }
  CertificateSerialNumber = (const void *)platform_auth_createCertificateSerialNumber(v3);
  uint64_t v5 = ((uint64_t (*)(void))platform_auth_createSerialNumberStringFromData)();
  if (CertificateSerialNumber) {
    CFRelease(CertificateSerialNumber);
  }
  return (CFTypeRef)v5;
}

_DWORD *_createFeature_0(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  if (_createFeature_onceToken != -1) {
    dispatch_once(&_createFeature_onceToken, &__block_literal_global_0);
  }
  BOOL v1 = calloc(1uLL, 0x60uLL);
  __int128 v2 = v1;
  if (v1)
  {
    _DWORD *v1 = 0;
    uint64_t CertificateCache = platform_auth_createCertificateCache(@"com.apple.accessoryd.iap2d");
    *((void *)v2 + 2) = 0LL;
    *((void *)v2 + 3) = 0LL;
    *((void *)v2 + 1) = CertificateCache;
    v2[8] = 0;
    *(_OWORD *)(v2 + 10) = 0u;
    *(_OWORD *)(v2 + 14) = 0u;
    *((_BYTE *)v2 + 72) = gbAuthCertAlwaysCached;
    *((void *)v2 + 10) = 0LL;
    *((void *)v2 + 11) = 0LL;
  }

  return v2;
}

uint64_t _destroyFeature_0(uint64_t result)
{
  if (result)
  {
    BOOL v1 = (void **)result;
    uint64_t v2 = *(void *)result;
    if (*(void *)result)
    {
      platform_auth_deallocCertificateCache(*(void *)(v2 + 8));
      platform_auth_deallocAuthCertCaps(*(void *)(v2 + 64));
      *(void *)(v2 + 64) = 0LL;
      *(_DWORD *)(v2 + 32) = 0;
      uint64_t v3 = *(const void **)(v2 + 16);
      if (v3)
      {
        CFRelease(v3);
        *(void *)(v2 + 16) = 0LL;
      }

      uint64_t v4 = *(const void **)(v2 + 40);
      if (v4)
      {
        CFRelease(v4);
        *(void *)(v2 + 40) = 0LL;
      }

      uint64_t v5 = *(const void **)(v2 + 24);
      if (v5)
      {
        CFRelease(v5);
        *(void *)(v2 + 24) = 0LL;
      }

      BOOL v6 = *(const void **)(v2 + 48);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(v2 + 4_Block_object_dispose(va, 8) = 0LL;
      }

      uint64_t v7 = *(const void **)(v2 + 56);
      if (v7)
      {
        CFRelease(v7);
        *(void *)(v2 + 56) = 0LL;
      }

      if (*v1)
      {
        free(*v1);
        _DWORD *v1 = 0LL;
      }

      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t _startFeatureFromDevice(uint64_t **a1)
{
  uint64_t v2 = **a1;
  unsigned int Version = iap2_sessionControl_getVersion((unsigned __int8 *)a1);
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 25;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    uint64_t v5 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    uint64_t v5 = *(os_log_s **)(gLogObjects + 192);
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v17) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Starting Accessory Authentication...",  (uint8_t *)&v17,  2u);
  }

  _setAuthState(a1, 0);
  kdebug_trace(731123616LL, 0LL, 0LL, 0LL, 0LL);
  LODWORD(v6) = 0;
  if (Version != 2)
  {
    LODWORD(v6) = 0;
    if (acc_connection_isAuthenticated(v2, 0LL))
    {
      uint64_t AuthInfo = acc_connection_getAuthInfo(v2);
      uint64_t v6 = AuthInfo;
      if (AuthInfo)
      {
        CFDataRef v8 = acc_authInfo_copyCertCapabilities(AuthInfo);
        CFStringRef v9 = acc_authInfo_copyCertSerialString(v6);
        BOOL isCTAAllowed = acc_authInfo_isCTAAllowed(v6);
        if (v8) {
          BOOL v11 = v9 == 0LL;
        }
        else {
          BOOL v11 = 1;
        }
        LODWORD(v6) = !v11 && isCTAAllowed;
        if (v8) {
          CFRelease(v8);
        }
        if (v9) {
          CFRelease(v9);
        }
      }
    }
  }

  if (acc_userDefaults_BOOLForKey((uint64_t)@"AuthenticationOverride"))
  {
    if (gLogObjects && gNumLogObjects >= 14)
    {
      BOOL v12 = *(os_log_s **)(gLogObjects + 104);
    }

    else
    {
      BOOL v12 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 136315138;
      uint64_t v18 = "_startFeatureFromDevice";
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%s: skip iAP2 authentication due to property",  (uint8_t *)&v17,  0xCu);
    }

    goto LABEL_38;
  }

  if ((_DWORD)v6)
  {
LABEL_38:
    _authCompleted((uint64_t *)a1, 1);
    return 1LL;
  }

  uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0);
  *(CFAbsoluteTime *)(Feature + 80) = CFAbsoluteTimeGetCurrent();
  if (!*(_BYTE *)(Feature + 72))
  {
    int isIdentifiedForIncomingMessageID = iap2_identification_isIdentifiedForIncomingMessageID((uint64_t)a1, 43526);
    if (Version < 2 || !isIdentifiedForIncomingMessageID)
    {
      uint64_t v15 = (uint64_t)(a1 + 15);
      iAP2MsgInit((uint64_t)(a1 + 15), 43520, (uint64_t)a1[24], 0xFFFF, 0LL, 0LL);
      goto LABEL_33;
    }

    *(_BYTE *)(Feature + 72) = 1;
  }

  uint64_t v15 = (uint64_t)(a1 + 15);
  iAP2MsgInit((uint64_t)(a1 + 15), 43520, (uint64_t)a1[24], 0xFFFF, 0LL, 0LL);
  iAP2MsgAddVoidParam((uint64_t)(a1 + 15), 0LL, 0);
LABEL_33:
  iap2_sessionControl_sendOutgoingMessage((uint64_t *)a1, v15);
  return 1LL;
}

uint64_t _checkIdentificationInfo(uint64_t a1)
{
  char v2 = 0;
  return iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&gskMsgAccAuthenticationList, 7u, &v2);
}

void ___createFeature_block_invoke(id a1)
{
  gbIsInternalBuild = platform_auth_isInternalBuild(a1);
  gbIsDesenseBuild = platform_auth_isDesenseBuild();
  int isDevelopmentHW = platform_auth_isDevelopmentHW();
  gbIsDevelopmentHW = isDevelopmentHW;
  if (isDevelopmentHW && gbIsInternalBuild | gbIsDesenseBuild) {
    gbAuthCertAlwaysCached = CFPreferencesGetAppBooleanValue( @"AuthCertAlwaysCached",  @"com.apple.accessoryd",  0LL) != 0;
  }
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 25;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    uint64_t v3 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    uint64_t v3 = *(os_log_s **)(gLogObjects + 192);
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109632;
    v4[1] = gbIsInternalBuild;
    __int16 v5 = 1024;
    int v6 = gbIsDesenseBuild;
    __int16 v7 = 1024;
    int v8 = gbIsDevelopmentHW;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "gbIsInternalBuild:%d, gbIsDesenseBuild:%d, gbIsDevelopmentHW:%d",  (uint8_t *)v4,  0x14u);
  }

void _setAuthState(uint64_t **a1, int a2)
{
  if (a1)
  {
    uint64_t v3 = *a1;
    if (*a1)
    {
      uint64_t v4 = *v3;
      if (*v3)
      {
        uint64_t Feature = (_DWORD *)iap2_feature_getFeature((uint64_t)a1, 0);
        if (Feature)
        {
          __int16 v7 = Feature;
          *uint64_t Feature = a2;
          if (gLogObjects && gNumLogObjects >= 25)
          {
            int v8 = *(os_log_s **)(gLogObjects + 192);
          }

          else
          {
            int v8 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            CFStringRef v9 = a1[1];
            v16[0] = 67109378;
            v16[1] = a2;
            __int16 v17 = 2112;
            uint64_t v18 = v9;
            _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Authentication state changed: %{coreacc:iAP2Feature_AccAuthentication_State_t}d for endpoint: %@",  (uint8_t *)v16,  0x12u);
          }

          if (a2 == 2 || !acc_connection_isAuthenticated(v4, 0LL))
          {
            if (!acc_connection_isAuthenticated(v4, 0LL))
            {
              if (a2 == 1)
              {
                int v15 = 1;
                kdebug_trace(731123620LL, 1LL, 0LL, 0LL, 0LL);
                platform_auth_removeCertDataEntryFromCache(*((void *)v7 + 1), *((void *)v7 + 6));
              }

              else if (a2 == 2)
              {
                kdebug_trace(731123620LL, 0LL, 0LL, 0LL, 0LL);
                if (*((_BYTE *)v7 + 72)) {
                  platform_auth_addCertDataEntryToCache(*((void *)v7 + 1), *((void *)v7 + 2));
                }
                acc_connection_setAuthCertData(v4, *((const void **)v7 + 2));
                int v15 = 2;
              }

              else
              {
                int v15 = 0;
              }

              acc_connection_setAuthStatus(v4, 1LL, v15);
            }
          }

          else
          {
            uint64_t AuthInfo = acc_connection_getAuthInfo(v4);
            if (AuthInfo)
            {
              uint64_t v11 = AuthInfo;
              BOOL v12 = (const void *)*((void *)v7 + 2);
              if (v12)
              {
                CFRelease(v12);
                *((void *)v7 + 2) = 0LL;
              }

              *((void *)v7 + 2) = oobPairing_endpoint_copyCachedOOBPairingInfo(v11);
              uint64_t v13 = (const void *)*((void *)v7 + 3);
              if (v13)
              {
                CFRelease(v13);
                *((void *)v7 + 3) = 0LL;
              }

              *((void *)v7 + 3) = oobPairing_endpoint_copyCachedOOBPairingData(v11);
              id v14 = (const void *)*((void *)v7 + 6);
              if (v14)
              {
                CFRelease(v14);
                *((void *)v7 + 6) = 0LL;
              }

              *((void *)v7 + 6) = acc_authInfo_copyCertSerialString(v11);
            }
          }

          iap2_sessionControl_accAuthenticationStateChanged((const __CFSet *)a1, a2);
        }
      }
    }
  }

void OUTLINED_FUNCTION_3_1( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void OUTLINED_FUNCTION_3_2( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

uint64_t iap2_destinationSharing_StartDestinationInformation(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0LL;
  if (!a1 || !a2) {
    return result;
  }
  uint64_t v24 = a1;
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
  if (FirstParam)
  {
    NextParam = (unsigned __int16 *)FirstParam;
    char v7 = 0;
    while (1)
    {
      int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
      if (ParamID)
      {
        int v9 = ParamID;
        uint64_t v10 = gLogObjects;
        int v11 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 45)
        {
          BOOL v12 = *(os_log_s **)(gLogObjects + 352);
        }

        else
        {
          BOOL v12 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)int v26 = v10;
            *(_WORD *)&v26[8] = 1024;
            int v27 = v11;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            BOOL v12 = (os_log_s *)&_os_log_default;
          }
        }

        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          int MsgID = iAP2MsgGetMsgID(a2);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)int v26 = v9;
          *(_WORD *)&v26[4] = 1024;
          *(_DWORD *)&v26[6] = MsgID;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param",  buf,  0xEu);
        }
      }

      else
      {
        if (!iAP2MsgIsDataVoid(NextParam))
        {
          uint32_t v21 = (os_log_s *)logObjectForModule_1(44);
          uint64_t result = os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG);
          if (!(_DWORD)result) {
            return result;
          }
          iap2_destinationSharing_StartDestinationInformation_cold_4(a2);
          return 0LL;
        }

        if ((v7 & 1) != 0)
        {
          uint64_t v22 = (os_log_s *)logObjectForModule_1(44);
          uint64_t result = os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG);
          if (!(_DWORD)result) {
            return result;
          }
          iap2_destinationSharing_StartDestinationInformation_cold_3(a2);
          return 0LL;
        }

        char v7 = 1;
      }

      NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
      if (!NextParam) {
        goto LABEL_20;
      }
    }
  }

  char v7 = 0;
LABEL_20:
  if (gLogObjects && gNumLogObjects >= 45)
  {
    id v14 = *(os_log_s **)(gLogObjects + 352);
    uint64_t v15 = v24;
  }

  else
  {
    id v14 = (os_log_s *)&_os_log_default;
    uint64_t v15 = v24;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    uint64_t v16 = *(void *)(v15 + 8);
    *(_DWORD *)buf = 138412290;
    *(void *)int v26 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "iAP2DestinationSharing StartDestinationInformation: %@",  buf,  0xCu);
  }

  uint64_t result = iap2_feature_getFeature(v15, 0x17u);
  if (!result) {
    return result;
  }
  uint64_t v17 = result;
  if (!*(_BYTE *)result || *(_BYTE *)(result + 1))
  {
    uint64_t v18 = (os_log_s *)logObjectForModule_1(44);
    BOOL v23 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0LL;
    if (!v23) {
      return result;
    }
    *(_WORD *)buf = 0;
    BOOL v20 = "Already started destination sharing!";
LABEL_39:
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v20, buf, 2u);
    return 0LL;
  }

  *(_BYTE *)(result + 2) = v7 & 1;
  if (platform_destinationSharing_startDestinationInformation(*(void *)(v15 + 8), v7 & 1))
  {
    uint64_t result = 1LL;
    *(_BYTE *)(v17 + 1) = 1;
    return result;
  }

  if (gLogObjects && gNumLogObjects >= 45)
  {
    uint64_t v18 = *(os_log_s **)(gLogObjects + 352);
  }

  else
  {
    uint64_t v18 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0LL;
  if (v19)
  {
    *(_WORD *)buf = 0;
    BOOL v20 = "platform_destinationSharing_startDestinationInformation failed!";
    goto LABEL_39;
  }

  return result;
}

uint64_t iap2_destinationSharing_StopDestinationInformation(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0LL;
  if (a1 && a2)
  {
    uint64_t v16 = a1;
    unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
    if (FirstParam)
    {
      NextParam = (unsigned __int16 *)FirstParam;
      do
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
        uint64_t v8 = gLogObjects;
        int v9 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 45)
        {
          uint64_t v10 = *(os_log_s **)(gLogObjects + 352);
        }

        else
        {
          uint64_t v10 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            uint64_t v18 = v8;
            __int16 v19 = 1024;
            int v20 = v9;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            uint64_t v10 = (os_log_s *)&_os_log_default;
          }
        }

        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v1_Block_object_dispose(va, 8) = ParamID;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Unrecognized paramID:0x%04X", buf, 8u);
        }

        NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
      }

      while (NextParam);
    }

    uint64_t result = iap2_feature_getFeature(v16, 0x17u);
    if (result)
    {
      uint64_t v11 = result;
      if (*(_BYTE *)(result + 1))
      {
        if (platform_destinationSharing_stopDestinationInformation(*(void *)(v16 + 8)))
        {
          *(_BYTE *)(v11 + 1) = 0;
          return 1LL;
        }

        if (gLogObjects && gNumLogObjects >= 45)
        {
          BOOL v12 = *(os_log_s **)(gLogObjects + 352);
        }

        else
        {
          BOOL v12 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        BOOL v15 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0LL;
        if (v15)
        {
          *(_WORD *)buf = 0;
          id v14 = "platform_destinationSharing_stopDestinationInformation failed!";
          goto LABEL_32;
        }
      }

      else
      {
        if (gLogObjects && gNumLogObjects >= 45)
        {
          BOOL v12 = *(os_log_s **)(gLogObjects + 352);
        }

        else
        {
          BOOL v12 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0LL;
        if (v13)
        {
          *(_WORD *)buf = 0;
          id v14 = "Destination sharing already inactive!";
LABEL_32:
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v14, buf, 2u);
          return 0LL;
        }
      }
    }
  }

  return result;
}

id iap2_destinationSharing_DestinationInformationStatus(uint64_t a1, uint64_t a2)
{
  id v2 = 0LL;
  if (a1 && a2)
  {
    if (iAP2MsgGetMsgID(a2) == 4317)
    {
      unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
      if (FirstParam)
      {
        int v6 = (unsigned __int16 *)FirstParam;
        char v27 = 0;
        Mutable = 0LL;
        CFStringRef v26 = 0LL;
        do
        {
          int ParamID = iAP2MsgGetParamID((uint64_t)v6);
          int v28 = -1431655766;
          if (ParamID == 2)
          {
            if (!Mutable) {
              Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
            }
            unint64_t v11 = iAP2MsgGetFirstParam(a2, v6);
            if (v11)
            {
              NextParam = (unsigned __int16 *)v11;
              while (1)
              {
                int v13 = iAP2MsgGetParamID((uint64_t)NextParam);
                uint64_t v14 = gLogObjects;
                int v15 = gNumLogObjects;
                if (gLogObjects && gNumLogObjects >= 45)
                {
                  uint64_t v16 = *(os_log_s **)(gLogObjects + 352);
                }

                else
                {
                  uint64_t v16 = (os_log_s *)&_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 134218240;
                    uint64_t v30 = v14;
                    __int16 v31 = 1024;
                    int v32 = v15;
                    _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                    uint64_t v16 = (os_log_s *)&_os_log_default;
                  }
                }

                if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 67109120;
                  LODWORD(v30) = v13;
                  _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "msgSubParamID: %d", buf, 8u);
                }

                if (!iAP2MsgIsDataVoid(NextParam)) {
                  break;
                }
                NextParam = iAP2MsgGetNextParam(a2, v6, NextParam);
                if (!NextParam) {
                  goto LABEL_37;
                }
              }

              if (gLogObjects && gNumLogObjects >= 45)
              {
                uint64_t v24 = *(os_log_s **)(gLogObjects + 352);
              }

              else
              {
                uint64_t v24 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
                iap2_destinationSharing_DestinationInformationStatus_cold_1(v13, a2, v24);
              }
              return 0LL;
            }
          }

          else
          {
            int v9 = ParamID;
            if (ParamID == 1)
            {
              uint64_t v17 = gLogObjects;
              int v18 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 45)
              {
                __int16 v19 = *(os_log_s **)(gLogObjects + 352);
              }

              else
              {
                __int16 v19 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  uint64_t v30 = v17;
                  __int16 v31 = 1024;
                  int v32 = v18;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                  __int16 v19 = (os_log_s *)&_os_log_default;
                }
              }

              if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "accessory returned a failure param!",  buf,  2u);
              }

              char v27 = 1;
            }

            else if (ParamID)
            {
              int MsgID = iAP2MsgGetMsgID(a2);
              printf("Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param", v9, MsgID);
            }

            else
            {
              DataAsString = iAP2MsgGetDataAsString(v6, (BOOL *)&v28);
              if (v28)
              {
                int v25 = iAP2MsgGetMsgID(a2);
                printf("Param ID: %d parse error for Msg ID: 0x%04X - ignoring message", 0, v25);
                return 0LL;
              }

              if (DataAsString) {
                CFStringRef v26 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)DataAsString, 0x8000100u);
              }
            }
          }

LABEL_37:
          int v6 = iAP2MsgGetNextParam(a2, 0LL, v6);
        }

        while (v6);
        CFStringRef v21 = v26;
        char v22 = v27;
        if (v26) {
          goto LABEL_42;
        }
      }

      else
      {
        char v22 = 0;
        Mutable = 0LL;
      }

      CFStringRef v21 = CFStringCreateWithCString(kCFAllocatorDefault, "", 0x8000100u);
LABEL_42:
      id v2 = platform_destinationSharing_destinationInformationStatus( *(void *)(a1 + 8),  (uint64_t)v21,  (v22 & 1) == 0,  (uint64_t)Mutable);
      if (v21) {
        CFRelease(v21);
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
    }

    else
    {
      return 0LL;
    }
  }

  return v2;
}

    LOWORD(v12) = 0;
    return (unsigned __int16)v12;
  }

  if ((_iAP2LogEnableMask & 1) == 0) {
    goto LABEL_37;
  }
  if (gLogObjects) {
    int v13 = gNumLogObjects < 20;
  }
  else {
    int v13 = 1;
  }
  if (v13)
  {
    int v18 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    int v18 = *(os_log_s **)(gLogObjects + 152);
  }

  __int16 v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
  LOWORD(v12) = 0;
  if (v19)
  {
    int v25 = 136315906;
    CFStringRef v26 = "iAP2PacketCalcChecksum";
    char v27 = 1024;
    int v28 = 2028;
    uint64_t v29 = 1024;
    uint64_t v30 = (unsigned __int16)v4;
    __int16 v31 = 1024;
    int v32 = v3;
    int v20 = "ERROR: %s:%d NULL buffer(%hx) pointer or nothing to copy (len=%u)!";
    CFStringRef v21 = v18;
    char v22 = 30;
LABEL_36:
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, v20, (uint8_t *)&v25, v22);
    goto LABEL_37;
  }

  return (unsigned __int16)v12;
}

    uint64_t v4 = v10;
LABEL_38:
    unint64_t FirstParam = iAP2MsgGetNextParamWithError(a2, 0LL, FirstParam, &v96);
    if (v96) {
      goto LABEL_56;
    }
  }

  if (v8)
  {
    CFComparisonResult v60 = v4[353];
    if (v60 && *((int *)v5 + 708) >= 56)
    {
      CFComparisonResult v61 = (os_log_s *)*(id *)(v60 + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      CFComparisonResult v61 = (os_log_s *)&_os_log_default;
      uint64_t v70 = &_os_log_default;
    }

    if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v99 = (const char *)v8;
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "vendor nameString %@", buf, 0xCu);
    }

    -[NSMutableDictionary setObject:forKey:](v90, "setObject:forKey:", v8, kACCInfo_Name);
  }

  if (v92)
  {
    __int16 v71 = v4[353];
    if (v71 && *((int *)v5 + 708) >= 56)
    {
      unsigned int v72 = (os_log_s *)*(id *)(v71 + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      unsigned int v72 = (os_log_s *)&_os_log_default;
      __int16 v73 = &_os_log_default;
    }

    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v99 = (const char *)v92;
      _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "modelIdentifierString %@", buf, 0xCu);
    }

    -[NSMutableDictionary setObject:forKey:](v90, "setObject:forKey:", v92, kACCInfo_Model);
  }

  if (v91)
  {
    int v74 = v4[353];
    if (v74 && *((int *)v5 + 708) >= 56)
    {
      v75 = (os_log_s *)*(id *)(v74 + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      v75 = (os_log_s *)&_os_log_default;
      v76 = &_os_log_default;
    }

    if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v99 = (const char *)v91;
      _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "manufacturerString %@", buf, 0xCu);
    }

    -[NSMutableDictionary setObject:forKey:](v90, "setObject:forKey:", v91, kACCInfo_Manufacturer);
  }

  if (v95)
  {
    v77 = v4[353];
    if (v77 && *((int *)v5 + 708) >= 56)
    {
      v78 = (os_log_s *)*(id *)(v77 + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      v78 = (os_log_s *)&_os_log_default;
      v79 = &_os_log_default;
    }

    if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v99 = (const char *)v95;
      _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "serialNumberString %@", buf, 0xCu);
    }

    -[NSMutableDictionary setObject:forKey:](v90, "setObject:forKey:", v95, kACCInfo_SerialNumber);
  }

  if (v94)
  {
    uint64_t v80 = v4[353];
    if (v80 && *((int *)v5 + 708) >= 56)
    {
      uint64_t v81 = (os_log_s *)*(id *)(v80 + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v81 = (os_log_s *)&_os_log_default;
      uint64_t v82 = &_os_log_default;
    }

    if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v99 = (const char *)v94;
      _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEFAULT, "firmwareVersionString %@", buf, 0xCu);
    }

    -[NSMutableDictionary setObject:forKey:](v90, "setObject:forKey:", v94, kACCInfo_FirmwareVersionActive);
  }

  if (!v93)
  {
    if (v8 || v92 || v91 || v95 || v94) {
      goto LABEL_147;
    }
LABEL_151:
    v97 = 0;
    goto LABEL_56;
  }

  uint64_t v83 = v4[353];
  if (v83 && *((int *)v5 + 708) >= 56)
  {
    uint64_t v84 = (os_log_s *)*(id *)(v83 + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v84 = (os_log_s *)&_os_log_default;
    uint64_t v85 = &_os_log_default;
  }

  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v99 = (const char *)v93;
    _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "hardwareVersionString %@", buf, 0xCu);
  }

  -[NSMutableDictionary setObject:forKey:](v90, "setObject:forKey:", v93, kACCInfo_HardwareVersion);
LABEL_147:
  uint64_t v86 = *(const __CFString **)a1;
  if (!*(void *)a1) {
    goto LABEL_151;
  }
  v97 = 12;
  Copy = CFStringCreateCopy(kCFAllocatorDefault, v86);
  if (Copy)
  {
    v88 = Copy;
    v97 = 1;
    EndpointWithUUID = acc_manager_getEndpointWithUUID(Copy);
    if (EndpointWithUUID)
    {
      acc_endpoint_setAccessoryInfoOverridesWithDictionary((uint64_t)EndpointWithUUID, v90);
      CFRelease(v88);
      goto LABEL_151;
    }

    CFRelease(v88);
  }

  int v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  self->_albumDiscCount));
  -[NSMutableDictionary setObject:forKey:]( v3,  "setObject:forKey:",  v18,  @"ACCMediaLibraryUpdateItemAlbumDiscCount");

  validMask = self->_validMask;
  if ((validMask & 0x800) == 0)
  {
LABEL_13:
    if ((validMask & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }

  a3->var9 = self->_albumTrackCount;
  a3->var0 |= 0x100u;
  if ((validMask & 0x200) == 0)
  {
LABEL_11:
    if ((validMask & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_39;
  }

uint64_t iap2_destinationSharing_DestinationInformationUpdateHandler(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t result = 0LL;
  if (!a1) {
    return result;
  }
  uint64_t v4 = a2;
  if (!a2) {
    return result;
  }
  uint64_t result = iap2_feature_getFeature(a1, 0x17u);
  if (!result) {
    return result;
  }
  if (!*(_BYTE *)(result + 1))
  {
    if (gLogObjects && gNumLogObjects >= 45)
    {
      uint64_t v8 = *(os_log_s **)(gLogObjects + 352);
    }

    else
    {
      uint64_t v8 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0LL;
    if (v9)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Destination sharing inactive, can't send destination information!",  buf,  2u);
      return 0LL;
    }

    return result;
  }

  uint64_t v86 = result;
  v87 = (uint64_t *)a1;
  uint64_t v5 = a1 + 120;
  iAP2MsgInit(a1 + 120, 4315, *(void *)(a1 + 192), 0xFFFF, 0LL, 0LL);
  Value = (const __CFString *)CFDictionaryGetValue(v4, kCFACCDestinationSharing_IdentifierKey);
  if (Value && !iAP2MsgAddCFStringParam(a1 + 120, 0LL, 0, Value))
  {
    if (gLogObjects && gNumLogObjects >= 45)
    {
      char v7 = *(os_log_s **)(gLogObjects + 352);
    }

    else
    {
      char v7 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "failed to add destination sharing Identifier",  buf,  2u);
    }
  }

  uint64_t v10 = (const __CFString *)CFDictionaryGetValue(v4, kCFACCDestinationSharingParameter_DisplayName);
  if (v10 && !iAP2MsgAddCFStringParam(v5, 0LL, 1, v10))
  {
    if (gLogObjects && gNumLogObjects >= 45)
    {
      unint64_t v11 = *(os_log_s **)(gLogObjects + 352);
    }

    else
    {
      unint64_t v11 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "failed to add destination sharing Display Name",  buf,  2u);
    }
  }

  BOOL v12 = (const __CFArray *)CFDictionaryGetValue(v4, kCFACCDestinationSharingParameter_Address);
  theDict = v4;
  if (v12)
  {
    int v13 = v12;
    CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0LL);
    CFIndex Count = CFArrayGetCount(v13);
    if (gLogObjects && gNumLogObjects >= 45)
    {
      uint64_t v16 = *(os_log_s **)(gLogObjects + 352);
    }

    else
    {
      uint64_t v16 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
      iap2_destinationSharing_DestinationInformationUpdateHandler_cold_19();
    }
    if (Count >= 1)
    {
      for (CFIndex i = 0LL; i != Count; ++i)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v13, i);
        if (ValueAtIndex) {
          CFStringAppend(Mutable, ValueAtIndex);
        }
        CFStringAppendCString(Mutable, "\n", 0x8000100u);
      }
    }

    if (gLogObjects && gNumLogObjects >= 45)
    {
      __int16 v19 = *(os_log_s **)(gLogObjects + 352);
      uint64_t v5 = a1 + 120;
      uint64_t v4 = theDict;
    }

    else
    {
      __int16 v19 = (os_log_s *)&_os_log_default;
      uint64_t v5 = a1 + 120;
      uint64_t v4 = theDict;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
      iap2_destinationSharing_DestinationInformationUpdateHandler_cold_17();
    }
    if (!iAP2MsgAddCFStringParam(v5, 0LL, 3, Mutable))
    {
      if (gLogObjects && gNumLogObjects >= 45)
      {
        int v20 = *(os_log_s **)(gLogObjects + 352);
      }

      else
      {
        int v20 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "failed to add destination sharing Address String",  buf,  2u);
      }
    }

    if (Mutable) {
      CFRelease(Mutable);
    }
  }

  CFStringRef v21 = (const __CFArray *)CFDictionaryGetValue(v4, kCFACCDestinationSharingParameter_CenterCoordinate);
  if (v21)
  {
    char v22 = v21;
    CFIndex v23 = CFArrayGetCount(v21);
    if (v23 == 2) {
      goto LABEL_70;
    }
    uint64_t v24 = v23;
    if (gLogObjects && gNumLogObjects >= 45)
    {
      int v25 = *(os_log_s **)(gLogObjects + 352);
    }

    else
    {
      int v25 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      double v92 = *(double *)&v24;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "center coordinates count is not 2, it's %ld",  buf,  0xCu);
    }

    uint64_t v4 = theDict;
    if (v24 >= 2)
    {
LABEL_70:
      CFStringRef v26 = iAP2MsgAddGroupParam(v5, 2);
      char v27 = (const __CFNumber *)CFArrayGetValueAtIndex(v22, 0LL);
      int v28 = (const __CFNumber *)CFArrayGetValueAtIndex(v22, 1LL);
      double v89 = 0.0;
      double valuePtr = 0.0;
      if (CFNumberGetValue(v27, kCFNumberDoubleType, &valuePtr))
      {
        if (valuePtr > 90.0 || valuePtr < -90.0)
        {
          if (gLogObjects && gNumLogObjects >= 45)
          {
            uint64_t v29 = *(os_log_s **)(gLogObjects + 352);
          }

          else
          {
            uint64_t v29 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          uint64_t v4 = theDict;
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            double v92 = valuePtr;
            __int16 v31 = "unsupported dLatitude value %f";
            int v32 = v29;
            uint32_t v33 = 12;
            goto LABEL_87;
          }
        }
      }

      else
      {
        if (gLogObjects && gNumLogObjects >= 45)
        {
          uint64_t v30 = *(os_log_s **)(gLogObjects + 352);
        }

        else
        {
          uint64_t v30 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        uint64_t v4 = theDict;
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          __int16 v31 = "failed to get latitude";
          int v32 = v30;
          uint32_t v33 = 2;
LABEL_87:
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, v31, buf, v33);
        }
      }

      if (CFNumberGetValue(v28, kCFNumberDoubleType, &v89))
      {
        if (v89 <= 180.0 && v89 >= -180.0) {
          goto LABEL_106;
        }
        if (gLogObjects && gNumLogObjects >= 45)
        {
          uint64_t v34 = *(os_log_s **)(gLogObjects + 352);
        }

        else
        {
          uint64_t v34 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_106;
        }
        *(_DWORD *)buf = 134217984;
        double v92 = v89;
        uint64_t v36 = "unsupported dLongitude value %f";
        uint64_t v37 = v34;
        uint32_t v38 = 12;
      }

      else
      {
        if (gLogObjects && gNumLogObjects >= 45)
        {
          uint64_t v35 = *(os_log_s **)(gLogObjects + 352);
        }

        else
        {
          uint64_t v35 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_106;
        }
        *(_WORD *)buf = 0;
        uint64_t v36 = "failed to get longitude";
        uint64_t v37 = v35;
        uint32_t v38 = 2;
      }

      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, v36, buf, v38);
LABEL_106:
      if (gLogObjects && gNumLogObjects >= 45)
      {
        uint64_t v39 = *(os_log_s **)(gLogObjects + 352);
      }

      else
      {
        uint64_t v39 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG)) {
        iap2_destinationSharing_DestinationInformationUpdateHandler_cold_9(&valuePtr, &v89, v39);
      }
      unsigned int v40 = vcvtd_n_s64_f64(v89, 0x16uLL);
      iAP2MsgAddI32Param(v5, (uint64_t)v26, 0, vcvtd_n_s64_f64(valuePtr, 0x16uLL));
      iAP2MsgAddI32Param(v5, (uint64_t)v26, 1, v40);
    }
  }

  uint64_t v41 = (const __CFNumber *)CFDictionaryGetValue(v4, kCFACCDestinationSharingParameter_CoordinateThreshold);
  if (v41 && !iAP2MsgAddCFU32Param(v5, 0LL, 5, v41))
  {
    if (gLogObjects && gNumLogObjects >= 45)
    {
      int v42 = *(os_log_s **)(gLogObjects + 352);
    }

    else
    {
      int v42 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "failed to add destination sharing Coordinate Threshold",  buf,  2u);
    }
  }

  uint64_t v43 = (const __CFArray *)CFDictionaryGetValue(v4, kCFACCDestinationSharingParameter_EntryPoints);
  if (v43)
  {
    uint64_t v44 = v43;
    CFIndex v45 = CFArrayGetCount(v43);
    if (gLogObjects && gNumLogObjects >= 45)
    {
      uint64_t v46 = *(os_log_s **)(gLogObjects + 352);
    }

    else
    {
      uint64_t v46 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG)) {
      iap2_destinationSharing_DestinationInformationUpdateHandler_cold_6();
    }
    if (v45 >= 1)
    {
      for (CFIndex j = 0LL; v45 != j; ++j)
      {
        uint64_t v48 = (const __CFArray *)CFArrayGetValueAtIndex(v44, j);
        CFIndex v49 = CFArrayGetCount(v48);
        if (v49 < 2)
        {
          CFIndex v57 = v49;
          uint64_t v58 = gLogObjects;
          int v59 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 45)
          {
            CFComparisonResult v60 = *(os_log_s **)(gLogObjects + 352);
          }

          else
          {
            CFComparisonResult v60 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              double v92 = *(double *)&v58;
              __int16 v93 = 1024;
              LODWORD(v94) = v59;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              CFComparisonResult v60 = (os_log_s *)&_os_log_default;
            }
          }

          if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            double v92 = *(double *)&v57;
            _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "entry point count is unexpected: not 2, it's %ld",  buf,  0xCu);
          }

          continue;
        }

        uint64_t v50 = v5;
        int v51 = iAP2MsgAddGroupParam(v5, 4);
        BOOL v52 = (const __CFNumber *)CFArrayGetValueAtIndex(v48, 0LL);
        BOOL v53 = (const __CFNumber *)CFArrayGetValueAtIndex(v48, 1LL);
        double v89 = 0.0;
        double valuePtr = 0.0;
        if (CFNumberGetValue(v52, kCFNumberDoubleType, &valuePtr))
        {
          if (valuePtr > 90.0 || valuePtr < -90.0)
          {
            uint64_t v54 = gLogObjects;
            int v55 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 45)
            {
              __int128 v56 = *(os_log_s **)(gLogObjects + 352);
            }

            else
            {
              __int128 v56 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                double v92 = *(double *)&v54;
                __int16 v93 = 1024;
                LODWORD(v94) = v55;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                __int128 v56 = (os_log_s *)&_os_log_default;
              }
            }

            if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134217984;
              double v92 = valuePtr;
              int v64 = v56;
              __int16 v65 = "unsupported dEntryPointsLatitude value %f";
              uint32_t v66 = 12;
              goto LABEL_158;
            }
          }
        }

        else
        {
          uint64_t v61 = gLogObjects;
          int v62 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 45)
          {
            __int16 v63 = *(os_log_s **)(gLogObjects + 352);
          }

          else
          {
            __int16 v63 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              double v92 = *(double *)&v61;
              __int16 v93 = 1024;
              LODWORD(v94) = v62;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              __int16 v63 = (os_log_s *)&_os_log_default;
            }
          }

          if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            int v64 = v63;
            __int16 v65 = "failed to get entry points latitude";
            uint32_t v66 = 2;
LABEL_158:
            _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, v65, buf, v66);
          }
        }

        if (CFNumberGetValue(v53, kCFNumberDoubleType, &v89))
        {
          if (v89 <= 180.0 && v89 >= -180.0) {
            goto LABEL_177;
          }
          uint64_t v67 = gLogObjects;
          int v68 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 45)
          {
            __int16 v69 = *(os_log_s **)(gLogObjects + 352);
          }

          else
          {
            __int16 v69 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              double v92 = *(double *)&v67;
              __int16 v93 = 1024;
              LODWORD(v94) = v68;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              __int16 v69 = (os_log_s *)&_os_log_default;
            }
          }

          if (!os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_177;
          }
          *(_DWORD *)buf = 134217984;
          double v92 = v89;
          __int16 v73 = v69;
          int v74 = "unsupported dEntryPointsLongitude value %f";
          uint32_t v75 = 12;
        }

        else
        {
          uint64_t v70 = gLogObjects;
          int v71 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 45)
          {
            unsigned int v72 = *(os_log_s **)(gLogObjects + 352);
          }

          else
          {
            unsigned int v72 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              double v92 = *(double *)&v70;
              __int16 v93 = 1024;
              LODWORD(v94) = v71;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              unsigned int v72 = (os_log_s *)&_os_log_default;
            }
          }

          if (!os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_177;
          }
          *(_WORD *)buf = 0;
          __int16 v73 = v72;
          int v74 = "failed to get entry points longitude";
          uint32_t v75 = 2;
        }

        _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, v74, buf, v75);
LABEL_177:
        uint64_t v76 = gLogObjects;
        int v77 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 45)
        {
          v78 = *(os_log_s **)(gLogObjects + 352);
        }

        else
        {
          v78 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            double v92 = *(double *)&v76;
            __int16 v93 = 1024;
            LODWORD(v94) = v77;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            v78 = (os_log_s *)&_os_log_default;
          }
        }

        if (os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134218240;
          double v92 = valuePtr;
          __int16 v93 = 2048;
          double v94 = v89;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v78,  OS_LOG_TYPE_DEBUG,  "entryPointsLatitude = %f, entryPointsLongitude = %f",  buf,  0x16u);
        }

        unsigned int v79 = vcvtd_n_s64_f64(v89, 0x16uLL);
        uint64_t v5 = v50;
        iAP2MsgAddI32Param(v50, (uint64_t)v51, 0, vcvtd_n_s64_f64(valuePtr, 0x16uLL));
        iAP2MsgAddI32Param(v50, (uint64_t)v51, 1, v79);
      }
    }
  }

  uint64_t v80 = (const __CFString *)CFDictionaryGetValue(theDict, kCFACCDestinationSharingParameter_Locale);
  if (v80)
  {
    uint64_t v81 = v80;
    if (gLogObjects && gNumLogObjects >= 45)
    {
      uint64_t v82 = *(os_log_s **)(gLogObjects + 352);
    }

    else
    {
      uint64_t v82 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG)) {
      iap2_destinationSharing_DestinationInformationUpdateHandler_cold_4();
    }
    if (!iAP2MsgAddCFStringParam(v5, 0LL, 6, v81))
    {
      if (gLogObjects && gNumLogObjects >= 45)
      {
        uint64_t v83 = *(os_log_s **)(gLogObjects + 352);
      }

      else
      {
        uint64_t v83 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v83,  OS_LOG_TYPE_DEFAULT,  "failed to add destination sharing Locale",  buf,  2u);
      }
    }
  }

  if (*(_BYTE *)(v86 + 2))
  {
    uint64_t v84 = (const __CFString *)CFDictionaryGetValue(theDict, kCFACCDestinationSharingParameter_SourceName);
    if (v84)
    {
      if (!iAP2MsgAddCFStringParam(v5, 0LL, 7, v84))
      {
        if (gLogObjects && gNumLogObjects >= 45)
        {
          uint64_t v85 = *(os_log_s **)(gLogObjects + 352);
        }

        else
        {
          uint64_t v85 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEFAULT,  "failed to add destination sharing Source Name",  buf,  2u);
        }
      }
    }
  }

  return iap2_sessionControl_sendOutgoingMessage(v87, v5);
}

_BYTE *_createFeature_1(_BYTE *result)
{
  if (result)
  {
    uint64_t result = calloc(1uLL, 3uLL);
    if (result)
    {
      *(_WORD *)uint64_t result = 0;
      result[2] = 0;
    }
  }

  return result;
}

uint64_t _destroyFeature_1(void **a1)
{
  if (a1)
  {
    id v2 = *a1;
    if (v2)
    {
      free(v2);
      *a1 = 0LL;
    }
  }

  return 0LL;
}

uint64_t _checkIdentificationInfo_0(uint64_t a1)
{
  unsigned __int8 v7 = -86;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&_kMsgDestinationSharingList, 4u, &v7);
  if (!(_DWORD)v2)
  {
    int v3 = v7;
    if (v7)
    {
      iap2_features_createFeature(a1, 0x17u);
      iap2_identification_setIdentifiedForFeature(a1, 0x17u);
    }

    uint64_t Feature = (_BYTE *)iap2_feature_getFeature(a1, 0x17u);
    if (Feature)
    {
      *uint64_t Feature = v3;
      Feature[1] = 0;
    }

    if (v3)
    {
      if (gLogObjects && gNumLogObjects >= 39)
      {
        uint64_t v5 = *(os_log_s **)(gLogObjects + 304);
      }

      else
      {
        uint64_t v5 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
        _checkIdentificationInfo_cold_1(v5);
      }
    }
  }

  return v2;
}

void OUTLINED_FUNCTION_4_0( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void OUTLINED_FUNCTION_5_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

void sub_100010B6C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, id a18)
{
}

void OUTLINED_FUNCTION_3_3( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

void iAP2LinkRunLoopSignal(uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  if (a2)
  {
    iAP2LinkRunLoopRunOnce(a1, a2, a3);
  }

  else
  {
    void block[7] = v3;
    block[8] = v4;
    uint64_t v5 = *(dispatch_queue_s **)(*(void *)(a1 + 16) + 24LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = __iAP2LinkRunLoopSignal_block_invoke;
    block[3] = &__block_descriptor_56_e5_v8__0l;
    block[4] = a1;
    block[5] = 0LL;
    void block[6] = a3;
    dispatch_async(v5, block);
  }

uint64_t __iAP2LinkRunLoopSignal_block_invoke(uint64_t a1)
{
  return iAP2LinkRunLoopRunOnce(*(void *)(a1 + 32), *(uint64_t **)(a1 + 40), *(_BYTE **)(a1 + 48));
}

uint64_t iAP2LinkRunLoopSetEventMaskBit(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(result + 16) + 92LL) |= a2;
  return result;
}

uint64_t iAP2LinkRunLoopGetResetEventMask(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t result = *(unsigned int *)(v1 + 92);
  *(_DWORD *)(v1 + 92) = 0;
  return result;
}

uint64_t iAP2LinkDataReadyCB(uint64_t a1, unsigned __int16 *a2, unsigned __int16 a3, uint64_t a4, int a5)
{
  unint64_t v7 = *(void *)(*(void *)(a1 + 176) + 16LL);
  SessionInfo = iAP2LinkGetSessionInfo((unsigned __int8 *)a1, a5);
  if (!SessionInfo) {
    return 0LL;
  }
  uint64_t v9 = (uint64_t)SessionInfo;
  if (gLogObjects) {
    BOOL v10 = gNumLogObjects < 20;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v12 = (os_log_s *)&_os_log_default;
    id v11 = &_os_log_default;
  }

  else
  {
    BOOL v12 = (os_log_s *)*(id *)(gLogObjects + 152);
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Processing session data...", buf, 2u);
  }

  uint64_t v13 = iap2_sessionRouter_processSessionData(v7, v9, a2, a3);
  if (gLogObjects && gNumLogObjects >= 20)
  {
    uint64_t v14 = (os_log_s *)*(id *)(gLogObjects + 152);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v14 = (os_log_s *)&_os_log_default;
    id v15 = &_os_log_default;
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Finished processing session data!", v17, 2u);
  }

  return v13;
}

uint64_t iAP2LinkSendPacketCB(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (a2)
    {
      uint64_t v3 = *(void *)(result + 176);
      if (v3)
      {
        uint64_t v4 = *(uint64_t **)(v3 + 16);
        if (v4)
        {
          Buffer = (const UInt8 *)iAP2PacketGenerateBuffer(a2);
          unsigned int v6 = *(unsigned __int16 *)(a2 + 54);
          acc_platform_packetLogging_logiAP2Packet(v4, a2, 0);
          return iap2_endpoint_sendOutgoingData(v4, Buffer, v6);
        }
      }
    }
  }

  return result;
}

void iAP2LinkConnectedCB(uint64_t a1, int a2)
{
}

void iAP2LinkSendDetectCB( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    uint64_t v8 = *(void *)(a1 + 176);
    if (v8)
    {
      uint64_t v9 = *(uint64_t **)(v8 + 16);
      if (v9)
      {
        if (a2)
        {
          if (gLogObjects && gNumLogObjects >= 20)
          {
            BOOL v10 = (os_log_s *)*(id *)(gLogObjects + 152);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            BOOL v10 = (os_log_s *)&_os_log_default;
            id v11 = &_os_log_default;
          }

          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v12) = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "-------------------------------------------------------\n BadParameter or RequestIdentify response to DETECT:  \n must be iAP1 only device!                          \n -------------------------------------------------------",  (uint8_t *)&v12,  2u);
          }
        }

        else
        {
          acc_platform_packetLogging_logEvent(*v9, "DETECT", (uint64_t)"Send DETECT packet", a4, a5, a6, a7, a8, v12);
          iap2_endpoint_sendOutgoingData(v9, kIap2PacketDetectData, (unsigned __int16)kIap2PacketDetectDataLen);
        }
      }
    }
  }

_WORD *oobPairing_endpoint_create(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = calloc(1uLL, 0x28uLL);
    uint64_t v3 = v2;
    if (v2)
    {
      *(void *)uint64_t v2 = a1;
      v2[8] = 514;
      *((_BYTE *)v2 + 1_Block_object_dispose(va, 8) = 0;
      *((void *)v2 + 4) = 0LL;
      *(void *)bytes = CFHash(*(CFTypeRef *)(a1 + 16));
      *((void *)v3 + 1) = CFDataCreate(kCFAllocatorDefault, bytes, 8LL);
      platform_blePairing_incrementUserCount();
    }
  }

  else
  {
    uint64_t v5 = (os_log_s *)logObjectForModule_1(10);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      oobPairing_endpoint_create_cold_1(v5);
    }
    return 0LL;
  }

  return v3;
}

uint64_t oobPairing_endpoint_publish(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    uint64_t result = *(void *)result;
    if (result)
    {
      BOOL isPublished = acc_endpoint_isPublished(result);
      if (acc_endpoint_getProtocol(*(void *)v2) == 8)
      {
        _oobPairing_endpoint_init(*(void *)v2);
        CFMutableStringRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 1LL, &kCFTypeArrayCallBacks);
        unsigned int v6 = Mutable;
        if (*(void *)v2) {
          unint64_t v7 = *(const void **)(*(void *)v2 + 16LL);
        }
        else {
          unint64_t v7 = 0LL;
        }
        CFArrayAppendValue(Mutable, v7);
        uint64_t v8 = acc_accInfo_copyAccessoryInfoDictionary(a2);
        MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, (CFDictionaryRef)v8);
        CFDataRef v10 = _oobPairing_copySupportedTypes((const UInt8 *)(v2 + 16), 2LL);
        if (v10) {
          CFDictionaryAddValue(MutableCopy, @"SupportedTypes", v10);
        }
        int valuePtr = *(unsigned __int8 *)(v2 + 18);
        CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
        CFDictionaryAddValue(MutableCopy, @"Supports2Way", v11);
        if (gLogObjects && gNumLogObjects >= 11)
        {
          uint64_t v12 = *(os_log_s **)(gLogObjects + 80);
        }

        else
        {
          uint64_t v12 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          int v13 = *(unsigned __int8 *)(v2 + 16);
          int v14 = *(unsigned __int8 *)(v2 + 17);
          *(_DWORD *)buf = 67110146;
          BOOL v21 = isPublished;
          __int16 v22 = 1024;
          int v23 = v13;
          __int16 v24 = 1024;
          int v25 = v14;
          __int16 v26 = 2112;
          CFDataRef v27 = v10;
          __int16 v28 = 2112;
          uint64_t v29 = MutableCopy;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "oobPairing publish: wasPublished = %d, supportedTypes { %d, %d } = %@, accInfoDict = %@",  buf,  0x28u);
        }

        uint64_t v15 = *(void *)v2;
        if (isPublished)
        {
          if (v15) {
            uint64_t v16 = *(void *)(v15 + 16);
          }
          else {
            uint64_t v16 = 0LL;
          }
          int v18 = (uint64_t *)(v2 + 8);
          platform_blePairing_accessoryDetached(v16, *(void *)(v2 + 8));
          if (*(void *)v2) {
            uint64_t v17 = *(void *)(*(void *)v2 + 16LL);
          }
          else {
            uint64_t v17 = 0LL;
          }
        }

        else
        {
          if (v15) {
            uint64_t v17 = *(void *)(v15 + 16);
          }
          else {
            uint64_t v17 = 0LL;
          }
          int v18 = (uint64_t *)(v2 + 8);
        }

        platform_blePairing_accessoryAttached(v17, *v18, (uint64_t)MutableCopy, (uint64_t)v10);
        if (v8) {
          CFRelease(v8);
        }
        if (v10) {
          CFRelease(v10);
        }
        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
        if (v6) {
          CFRelease(v6);
        }
        return 1LL;
      }

      else
      {
        return 0LL;
      }
    }
  }

  return result;
}

CFNumberRef _oobPairing_endpoint_init(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  Value = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), @"SupportedTypes");
  if (Value)
  {
    uint64_t v4 = Value;
    if (CFDataGetLength(Value) <= 1)
    {
      *(_WORD *)(v2 + 16) = 514;
      BytePtr = CFDataGetBytePtr(v4);
      size_t Length = CFDataGetLength(v4);
      memcpy((void *)(v2 + 16), BytePtr, Length);
    }
  }

  uint64_t result = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), @"Supports2Way");
  if (result)
  {
    int valuePtr = 0;
    uint64_t result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberIntType, &valuePtr);
    *(_BYTE *)(v2 + 1_Block_object_dispose(va, 8) = valuePtr != 0;
  }

  return result;
}

CFDataRef _oobPairing_copySupportedTypes(const UInt8 *a1, CFIndex capacity)
{
  CFDataRef Copy = 0LL;
  if (a1)
  {
    CFIndex v3 = capacity;
    if (capacity)
    {
      uint64_t v4 = a1;
      CFMutableStringRef Mutable = CFDataCreateMutable(kCFAllocatorDefault, capacity);
      do
      {
        if (*v4 <= 1u) {
          CFDataAppendBytes(Mutable, v4, 1LL);
        }
        ++v4;
        --v3;
      }

      while (v3);
      if (Mutable && CFDataGetLength(Mutable) >= 1) {
        CFDataRef Copy = CFDataCreateCopy(kCFAllocatorDefault, Mutable);
      }
      else {
        CFDataRef Copy = 0LL;
      }
      CFRelease(Mutable);
    }
  }

  return Copy;
}

BOOL oobPairing_endpoint_destroy(uint64_t *a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v2 = *a1;
  BOOL v3 = v2 != 0;
  if (v2)
  {
    if (*(void *)v2)
    {
      int Protocol = acc_endpoint_getProtocol(*(void *)v2);
      uint64_t v2 = *a1;
      if (Protocol == 8)
      {
        if (v2)
        {
          uint64_t v5 = *(void *)v2;
          if (*(void *)v2) {
            uint64_t v5 = *(void *)(v5 + 16);
          }
        }

        else
        {
          uint64_t v5 = 0LL;
        }

        platform_blePairing_accessoryDetached(v5, *(void *)(v2 + 8));
        uint64_t v2 = *a1;
      }
    }

    if (*(void *)(v2 + 32))
    {
      CFRelease(*(CFTypeRef *)(v2 + 32));
      *(void *)(*a1 + 32) = 0LL;
      uint64_t v2 = *a1;
    }

    if (!*(void *)(v2 + 8) || (CFRelease(*(CFTypeRef *)(v2 + 8)), *(void *)(*a1 + 8) = 0LL, (uint64_t v2 = *a1) != 0))
    {
      free((void *)v2);
      *a1 = 0LL;
    }
  }

  platform_blePairing_decrementUserCount();
  return v3;
}

BOOL oobPairing_endpoint_processIncomingData(uint64_t a1, CFDataRef theData)
{
  BOOL result = 0LL;
  if (a1)
  {
    if (theData)
    {
      BytePtr = CFDataGetBytePtr(theData);
      unint64_t Length = CFDataGetLength(theData);
      BOOL result = 0LL;
      if (BytePtr)
      {
        CFIndex v7 = Length - 4;
        if (Length >= 4)
        {
          unsigned int v8 = *((unsigned __int16 *)BytePtr + 1);
          int v9 = *(unsigned __int16 *)BytePtr;
          int v10 = *((_WORD *)BytePtr + 1);
          if (gLogObjects && gNumLogObjects >= 11)
          {
            CFNumberRef v11 = *(os_log_s **)(gLogObjects + 80);
          }

          else
          {
            CFNumberRef v11 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            int v12 = *(unsigned __int8 *)(a1 + 16);
            int v13 = *(unsigned __int8 *)(a1 + 17);
            *(_DWORD *)buf = 67110402;
            int v32 = v9;
            __int16 v33 = 1024;
            *(_DWORD *)uint64_t v34 = v10;
            *(_WORD *)&v34[4] = 1024;
            *(_DWORD *)&v34[6] = v8 >> 15;
            __int16 v35 = 1024;
            int v36 = v12;
            __int16 v37 = 1024;
            int v38 = v13;
            __int16 v39 = 2112;
            CFDataRef v40 = theData;
            _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "IncomingOOBPairingInfo/Data: messageID %d, pairingType %d, supports2way %d, supportedTypes[%d %d], dataIn %@",  buf,  0x2Au);
          }

          if (*(unsigned __int8 *)(a1 + 16) != v8
            && *(unsigned __int8 *)(a1 + 17) != v8)
          {
            return 0LL;
          }

          int v14 = BytePtr + 4;
          if (v9 == 5)
          {
            uint64_t v17 = CFDataCreate(kCFAllocatorDefault, v14, v7);
            if (gLogObjects && gNumLogObjects >= 11)
            {
              int v18 = *(os_log_s **)(gLogObjects + 80);
            }

            else
            {
              int v18 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109378;
              int v32 = v10;
              __int16 v33 = 2112;
              *(void *)uint64_t v34 = v17;
              _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "IncomingOOBPairingData: pairingType %d, payload %@",  buf,  0x12u);
            }

            __int16 v22 = *(const void **)(a1 + 32);
            if (v22)
            {
              CFRelease(v22);
              *(void *)(a1 + 32) = 0LL;
            }

            *(void *)(a1 + 32) = CFDataCreateCopy(kCFAllocatorDefault, v17);
            if (*(void *)a1) {
              uint64_t v23 = *(void *)(*(void *)a1 + 16LL);
            }
            else {
              uint64_t v23 = 0LL;
            }
            uint64_t v26 = *(void *)(a1 + 8);
            int v27 = oobPairing_bleToOobPairingType(v10);
            platform_blePairing_accessoryPairingCFData(v23, v26, v27, (uint64_t)v17);
            if (v17) {
              CFRelease(v17);
            }
            if (*(void *)a1) {
              uint64_t v28 = *(void *)(*(void *)a1 + 16LL);
            }
            else {
              uint64_t v28 = 0LL;
            }
            platform_blePairing_finishedNegotiation(v28, *(void *)(a1 + 8));
            if (gLogObjects && gNumLogObjects >= 14)
            {
              uint64_t v29 = *(os_log_s **)(gLogObjects + 104);
            }

            else
            {
              uint64_t v29 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
              oobPairing_endpoint_processIncomingData_cold_4(v29);
            }
            acc_manager_checkForWirelessCTA();
            return 1LL;
          }

          if (v9 == 4)
          {
            values = CFDataCreate(kCFAllocatorDefault, v14, v7);
            CFArrayRef v15 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1LL, &kCFTypeArrayCallBacks);
            if (gLogObjects && gNumLogObjects >= 11)
            {
              uint64_t v16 = *(os_log_s **)(gLogObjects + 80);
            }

            else
            {
              uint64_t v16 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109378;
              int v32 = v10;
              __int16 v33 = 2112;
              *(void *)uint64_t v34 = values;
              _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "IncomingOOBPairingInfo: pairingType %d, payload %@",  buf,  0x12u);
            }

            int v20 = *(const void **)(a1 + 24);
            if (v20)
            {
              CFRelease(v20);
              *(void *)(a1 + 24) = 0LL;
            }

            *(void *)(a1 + 24) = CFDataCreateCopy(kCFAllocatorDefault, (CFDataRef)values);
            acc_connection_setProperty( **(void **)a1,  kCFACCProperties_Connection_AWC_OOBPairingInfo,  (const __CFNull *)values);
            if (*(void *)a1) {
              uint64_t v21 = *(void *)(*(void *)a1 + 16LL);
            }
            else {
              uint64_t v21 = 0LL;
            }
            uint64_t v24 = *(void *)(a1 + 8);
            int v25 = oobPairing_bleToOobPairingType(v10);
            platform_blePairing_accessoryPairingInfo(v21, v24, v25, (uint64_t)v15);
            if (values)
            {
              CFRelease(values);
              values = 0LL;
            }

            if (v15) {
              CFRelease(v15);
            }
            return 1LL;
          }

          if (gLogObjects && gNumLogObjects >= 11)
          {
            __int16 v19 = *(os_log_s **)(gLogObjects + 80);
          }

          else
          {
            __int16 v19 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          BOOL result = os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
          if (result)
          {
            oobPairing_endpoint_processIncomingData_cold_1(v9, v19);
            return 0LL;
          }
        }
      }
    }
  }

  return result;
}

BOOL oobPairing_endpoint_sendOutgoingData( uint64_t a1, unsigned int a2, int a3, const UInt8 *a4, unsigned int a5)
{
  if (a1)
  {
    uint64_t v10 = *(void *)a1;
    if (gLogObjects) {
      BOOL v11 = gNumLogObjects < 11;
    }
    else {
      BOOL v11 = 1;
    }
    if (v11)
    {
      int v12 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      int v12 = *(os_log_s **)(gLogObjects + 80);
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      if (v10) {
        int v13 = *(const __CFString **)(v10 + 16);
      }
      else {
        int v13 = @"nil";
      }
      *(_DWORD *)buf = 138413314;
      int v25 = v13;
      __int16 v26 = 1024;
      unsigned int v27 = a2;
      __int16 v28 = 1024;
      int v29 = a3;
      __int16 v30 = 1024;
      unsigned int v31 = a5;
      __int16 v32 = 1024;
      BOOL v33 = a2 < 2;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "oobPairing_endpoint_sendOutgoingData: endpointUUID %@, messageID %d, pairingType %d, dataOutLen %d, startOrStopType %d",  buf,  0x24u);
    }

    BOOL v15 = a2 < 2 || a4 != 0LL;
    if (a2 <= 3
      && v15
      && (a2 > 1
       || *(unsigned __int8 *)(a1 + 16) == a3
       || *(unsigned __int8 *)(a1 + 17) == a3))
    {
      *(_WORD *)bytes = a2;
      CFIndex v16 = a5;
      CFMutableStringRef Mutable = CFDataCreateMutable(kCFAllocatorDefault, a5 + 4LL);
      CFDataAppendBytes(Mutable, bytes, 2LL);
      *(_WORD *)bytes = a3;
      CFDataAppendBytes(Mutable, bytes, 2LL);
      if (a4) {
        CFDataAppendBytes(Mutable, a4, v16);
      }
      char v18 = acc_endpoint_sendOutgoingData(*(void *)a1, Mutable);
      if (Mutable) {
        CFRelease(Mutable);
      }
      if ((v18 & 1) != 0) {
        return 1LL;
      }
    }
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  BOOL result = acc_policies_shouldFailAuthOnOOBPairingFailure(v10);
  if (result)
  {
    if (gLogObjects) {
      BOOL v20 = gNumLogObjects < 11;
    }
    else {
      BOOL v20 = 1;
    }
    if (v20)
    {
      uint64_t v21 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      uint64_t v21 = *(os_log_s **)(gLogObjects + 80);
    }

    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      int v22 = *(_DWORD *)(*(void *)a1 + 24LL);
      *(_DWORD *)buf = 67109120;
      LODWORD(v25) = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Failed sendOutgoingData for OOBPairing for transportTpe %{coreacc:ACCEndpoint_TransportType_t}d, fail auth",  buf,  8u);
    }

    acc_connection_setAuthStatus(**(void **)a1, 2LL, 1);
    return 0LL;
  }

  return result;
}

CFDataRef oobPairing_endpoint_copyCachedOOBPairingInfo(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(const __CFData **)(a1 + 24)) != 0LL) {
    return CFDataCreateCopy(kCFAllocatorDefault, v1);
  }
  else {
    return 0LL;
  }
}

CFDataRef oobPairing_endpoint_copyCachedOOBPairingData(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(const __CFData **)(a1 + 32)) != 0LL) {
    return CFDataCreateCopy(kCFAllocatorDefault, v1);
  }
  else {
    return 0LL;
  }
}

uint64_t accFeatureHandlers_invokeHandler(const void *a1, int a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v4 = a1;
    int v6 = -1431655766;
    int v5 = a2;
    uint64_t v7 = a3;
    unint64_t v8 = 0xAAAAAAAAAAAAAA00LL;
    LODWORD(result) = acc_manager_callbackForEndpoint( a1,  (void (*)(uint64_t, uint64_t))_invokeFeatureHandlerIterator,  (uint64_t)&v4,  0);
  }

  else
  {
    uint64_t v4 = 0LL;
    int v6 = -1431655766;
    int v5 = a2;
    uint64_t v7 = a3;
    unint64_t v8 = 0xAAAAAAAAAAAAAA00LL;
    LODWORD(result) = acc_manager_iterateAllEndpoints( (unsigned int (*)(void, uint64_t))_invokeFeatureHandlerIterator,  (uint64_t)&v4,  0);
  }

  if ((_BYTE)v8) {
    return result;
  }
  else {
    return 0LL;
  }
}

BOOL _invokeFeatureHandlerIterator(uint64_t a1, uint64_t a2)
{
  if (!*(void *)a2)
  {
    if (a1 && ((int v5 = *(_DWORD *)(a1 + 28), v5 != 15) ? (v6 = v5 == 4) : (v6 = 1), v6))
    {
      char v7 = _invokeFeatureHandler(a1, *(_DWORD *)(a2 + 8), *(void *)(a2 + 16));
      if ((v7 & 1) == 0)
      {
        if (gLogObjects && gNumLogObjects >= 15)
        {
          unint64_t v8 = *(os_log_s **)(gLogObjects + 112);
        }

        else
        {
          unint64_t v8 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          int v23 = *(_DWORD *)(a2 + 8);
          int v24 = *(_DWORD *)(a1 + 28);
          uint64_t v25 = *(void *)(a1 + 16);
          int v26 = 67109634;
          int v27 = v23;
          __int16 v28 = 1024;
          int v29 = v24;
          __int16 v30 = 2112;
          uint64_t v31 = v25;
          _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "invokeHandler returned false (handlerType: %d) for %{coreacc:ACCEndpoint_Protocol_t}d endpoint %@!",  (uint8_t *)&v26,  0x18u);
        }
      }

      if (*(_BYTE *)(a2 + 24)) {
        char v22 = v7;
      }
      else {
        char v22 = 0;
      }
      *(_BYTE *)(a2 + 24) = v22;
    }

    else
    {
      if (gLogObjects) {
        BOOL v11 = gNumLogObjects < 15;
      }
      else {
        BOOL v11 = 1;
      }
      if (v11)
      {
        char v18 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      else
      {
        char v18 = *(os_log_s **)(gLogObjects + 112);
      }

      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
        _invokeFeatureHandlerIterator_cold_1(a2, a1, v18);
      }
    }

    return 1LL;
  }

  if (CFStringCompare(*(CFStringRef *)a2, *(CFStringRef *)(a1 + 16), 0LL))
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 15;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      int v12 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      int v12 = *(os_log_s **)(gLogObjects + 112);
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v13 = *(_DWORD *)(a2 + 8);
      int v14 = *(_DWORD *)(a1 + 28);
      uint64_t v15 = *(void *)(a1 + 16);
      CFStringRef v16 = *(CFStringRef *)a2;
      int v26 = 67109890;
      int v27 = v13;
      __int16 v28 = 1024;
      int v29 = v14;
      __int16 v30 = 2112;
      uint64_t v31 = v15;
      __int16 v32 = 2112;
      CFStringRef v33 = v16;
      _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "Skipping invokeHandler (handlerType: %d) for %{coreacc:ACCEndpoint_Protocol_t}d endpoint %@ != %@ !!!",  (uint8_t *)&v26,  0x22u);
    }

    return 1LL;
  }

  char v9 = _invokeFeatureHandler(a1, *(_DWORD *)(a2 + 8), *(void *)(a2 + 16));
  *(_BYTE *)(a2 + 24) = v9;
  if ((v9 & 1) != 0) {
    return 0LL;
  }
  if (gLogObjects && gNumLogObjects >= 15)
  {
    uint64_t v17 = *(os_log_s **)(gLogObjects + 112);
  }

  else
  {
    uint64_t v17 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  BOOL result = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  if (result)
  {
    int v19 = *(_DWORD *)(a2 + 8);
    int v20 = *(_DWORD *)(a1 + 28);
    uint64_t v21 = *(void *)(a1 + 16);
    int v26 = 67109634;
    int v27 = v19;
    __int16 v28 = 1024;
    int v29 = v20;
    __int16 v30 = 2112;
    uint64_t v31 = v21;
    _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "invokeHandler returned false (handlerType: %d) for %{coreacc:ACCEndpoint_Protocol_t}d endpoint %@!",  (uint8_t *)&v26,  0x18u);
    return 0LL;
  }

  return result;
}

uint64_t _invokeFeatureHandler(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v27 = 0LL;
  __int16 v28 = &v27;
  uint64_t v29 = 0x2000000000LL;
  char v30 = 0;
  if (!a1) {
    goto LABEL_14;
  }
  int v5 = *(_DWORD *)(a1 + 28) - 4;
  if (((0x89Fu >> v5) & 1) == 0) {
    goto LABEL_12;
  }
  BOOL v6 = (unsigned __int16 *)*(&off_1001F9C80 + v5);
  if (*v6 > a2) {
    goto LABEL_12;
  }
  unsigned int v7 = *(_DWORD *)*(&off_1001F9CE0 + v5) - 1;
  if (v6[8 * v7] < a2) {
    goto LABEL_12;
  }
  unsigned int v8 = 0;
  while (1)
  {
    uint64_t v9 = (v8 + v7) >> 1;
    unsigned int v10 = v6[8 * v9];
    if (v10 <= a2) {
      break;
    }
    unsigned int v7 = v9 - 1;
LABEL_11:
    if (v8 > v7) {
      goto LABEL_12;
    }
  }

  if (v10 < a2)
  {
    unsigned int v8 = v9 + 1;
    goto LABEL_11;
  }

  CFStringRef v16 = *(uint64_t (**)(void, uint64_t))&v6[8 * v9 + 4];
  if (!v16)
  {
LABEL_12:
    char v30 = 1;
    BOOL v11 = (os_log_s *)logObjectForModule_2();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      int v14 = *(_DWORD *)(a1 + 28);
      uint64_t v15 = *(void *)(a1 + 16);
      *(_DWORD *)buf = 67109634;
      unsigned int v32 = a2;
      __int16 v33 = 1024;
      int v34 = v14;
      __int16 v35 = 2112;
      uint64_t v36 = v15;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "handlerType %d not found for %{coreacc:ACCEndpoint_Protocol_t}d! (endpoint %@)",  buf,  0x18u);
    }

    goto LABEL_14;
  }

  switch(*(_DWORD *)(a1 + 28))
  {
    case 4:
      uint64_t v18 = *(void *)(a1 + 56);
      if (v18)
      {
        uint64_t v19 = *(void *)(v18 + 32);
        if (v19)
        {
          if (!*(_BYTE *)(v19 + 44))
          {
            int v20 = *(dispatch_queue_s **)(v18 + 24);
            v26[0] = _NSConcreteStackBlock;
            v26[1] = 0x40000000LL;
            v26[2] = ___invokeFeatureHandler_block_invoke;
            v26[3] = &unk_1001F9C10;
            v26[4] = &v27;
            v26[5] = v16;
            v26[6] = v18;
            v26[7] = a3;
            uint64_t v21 = v26;
            goto LABEL_28;
          }
        }
      }

      break;
    case 5:
    case 6:
    case 7:
    case 8:
      char v17 = v16(*(void *)(a1 + 56), a3);
      *((_BYTE *)v28 + 24) = v17;
      break;
    case 0xB:
      uint64_t v22 = *(void *)(a1 + 56);
      if (v22)
      {
        int v20 = *(dispatch_queue_s **)(v22 + 8);
        if (v20)
        {
          v25[0] = _NSConcreteStackBlock;
          v25[1] = 0x40000000LL;
          v25[2] = ___invokeFeatureHandler_block_invoke_2;
          v25[3] = &unk_1001F9C38;
          v25[4] = &v27;
          v25[5] = v16;
          v25[6] = a1;
          v25[7] = a3;
          uint64_t v21 = v25;
          goto LABEL_28;
        }
      }

      break;
    case 0xF:
      uint64_t v23 = *(void *)(a1 + 56);
      if (v23)
      {
        int v20 = *(dispatch_queue_s **)(v23 + 24);
        if (v20)
        {
          v24[0] = _NSConcreteStackBlock;
          v24[1] = 0x40000000LL;
          v24[2] = ___invokeFeatureHandler_block_invoke_3;
          v24[3] = &unk_1001F9C60;
          v24[4] = &v27;
          v24[5] = v16;
          v24[6] = a1;
          v24[7] = a3;
          uint64_t v21 = v24;
LABEL_28:
          dispatch_sync(v20, v21);
        }
      }

      break;
    default:
      break;
  }

LABEL_14:
  uint64_t v12 = *((unsigned __int8 *)v28 + 24);
  _Block_object_dispose(&v27, 8);
  return v12;
}

  iAP2LinkHandleResume(*(void *)(v3 + 24));
  if ((ResetEventMask & 0x1000) == 0) {
    goto LABEL_25;
  }
LABEL_15:
  if (a3)
  {
    unsigned int v8 = *a3;
    *a3 = v8 & 0x7F;
    iAP2LinkRenegotiate(*(void *)(v3 + 24), (uint64_t)a3, v8 >> 7);
  }

  else if ((_iAP2LogEnableMask & 1) != 0)
  {
    if (gLogObjects && gNumLogObjects >= 20)
    {
      uint64_t v9 = *(os_log_s **)(gLogObjects + 152);
    }

    else
    {
      uint64_t v9 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "ERROR: syn == NULL!", v14, 2u);
    }
  }

  if (*((_DWORD *)v7 + 286) != 2 || *a2 != 160) {
    goto LABEL_31;
  }
  uint64_t v22 = v9[353];
  uint64_t v23 = *((_DWORD *)v10 + 708);
  if (v22 && v23 >= 55)
  {
    int v24 = *(os_log_s **)(v22 + 432);
  }

  else
  {
    int v24 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = v22;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v23;
      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
      char v30 = *((_DWORD *)v7 + 286);
      goto LABEL_28;
    }
  }

  char v30 = 2;
LABEL_28:
  uint64_t v9 = &startLogsNotificationObservers;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v30;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "[AccAuth] handleMessage: role %d, Got AuthSetup, reset session \n",  buf,  8u);
    char v30 = *((_DWORD *)v7 + 286);
  }

  uint64_t v31 = *((void *)v7 + 168);
  *(_OWORD *)buf = *(_OWORD *)(v7 + 1324);
  acc_auth_protocol_endSession(v7);
  acc_auth_protocol_createSessionWithContext(v30, (uint64_t)buf, v7, v31);
  const void *v7 = a2[2] & 0xF;
  uint64_t v21 = isRespMessage;
LABEL_31:
  unsigned int v32 = acc_auth_protocol_messagePayload((uint64_t)a2, a3, 0LL, 0LL, 0LL);
  if (!v21 || (__int16 v33 = v7[71], v33 > 0xF) || v33 != v12)
  {
    int v77 = v12;
    unsigned __int16 *v6 = 0;
    __int16 v37 = *a2;
    int v38 = a5;
    if ((v37 & 0xFE) == 0xA4) {
      __int16 v39 = *(unsigned __int8 *)(v32 + 1);
    }
    else {
      __int16 v39 = 255;
    }
    CFDataRef v40 = v9[353];
    uint64_t v41 = *((_DWORD *)v10 + 708);
    if (v40 && v41 >= 55)
    {
      int v42 = *(os_log_s **)(v40 + 432);
    }

    else
    {
      int v42 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = v40;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v41;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
        __int16 v37 = *a2;
      }
    }

    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v48 = *((_DWORD *)v7 + 286);
      CFIndex v49 = v6;
      uint64_t v50 = v10;
      int v51 = *v7;
      uint64_t v80 = 0;
      acc_auth_protocol_sizeofMessage((uint64_t)a2, a3, (int *)buf, &v80);
      *(_DWORD *)buf = 67110656;
      *(_DWORD *)&uint8_t buf[4] = v48;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v51;
      unsigned int v10 = v50;
      BOOL v6 = v49;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = v37;
      uint64_t v82 = 1024;
      uint64_t v83 = v80;
      uint64_t v84 = 1024;
      uint64_t v85 = v39;
      uint64_t v86 = 1024;
      v87 = isRespMessage;
      v88 = 1024;
      double v89 = v77;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEBUG,  "[AccAuth] handleMessage: authSession: role %d, sessionID %d, inMessage %#04x, len %d, infoType %#04x, inMessageI sResp %d, inMsgSeqNum %d \n",  buf,  0x2Cu);
      __int16 v37 = *a2;
    }

    a5 = v38;
    kdebug_trace(731159624LL, a2[2] & 0xF, (unint64_t)a2[2] >> 4, v37, v39);
    kdebug_trace(731159636LL, a2[2] & 0xF, (unint64_t)a2[2] >> 4, *a2, v39);
    v7[71] = a2[2] >> 4;
    uint64_t v43 = *((_DWORD *)v7 + 286);
    uint64_t v9 = &startLogsNotificationObservers;
    if (v43 == 2)
    {
      if (_acc_auth_protocol_supportsAuthRole(2))
      {
        switch(*a2)
        {
          case 0xA0u:
            uint64_t v44 = __acc_auth_protocol_handleAuthSetup(v7, a2, a3, v6, v38);
            break;
          case 0xA2u:
            uint64_t v44 = __acc_auth_protocol_handleAuthStart(v7, a2, a3, v6, v38);
            break;
          case 0xA4u:
            uint64_t v44 = __acc_auth_protocol_handleAuthInfo(v7, a2, a3, v6, v38);
            break;
          case 0xA6u:
            uint64_t v44 = __acc_auth_protocol_handleAuthFinish(v7, a2, a3, v6, v38);
            break;
          default:
            BOOL v52 = (os_log_s *)logObjectForModule_13();
            if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
            {
              BOOL v53 = *a2;
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v53;
              _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "[AccAuth] handleMessage: invalid incoming messageID(%#04x) ! \n",  buf,  8u);
            }

            goto LABEL_58;
        }

        unsigned int v8 = v44;
      }

      else
      {
LABEL_58:
        unsigned int v8 = 1LL;
      }

      uint64_t v43 = *((_DWORD *)v7 + 286);
    }

    else
    {
      unsigned int v8 = 1LL;
    }

    if (v43 == 1 && _acc_auth_protocol_supportsAuthRole(1))
    {
      switch(*a2)
      {
        case 0xA1u:
          started = __acc_auth_protocol_handleAuthSetupResp(v7, a2, a3, v6, v38);
          goto LABEL_73;
        case 0xA3u:
          started = __acc_auth_protocol_handleAuthStartResp(v7, a2, a3, v6, v38);
          goto LABEL_73;
        case 0xA5u:
          started = __acc_auth_protocol_handleAuthInfoResp(v7, a2, a3, v6, v38);
LABEL_73:
          unsigned int v8 = started;
          break;
        case 0xA7u:
          __acc_auth_protocol_handleAuthFinishResp(v7, a2, a3);
          unsigned int v8 = 1LL;
          break;
        default:
          int v55 = v10;
          __int128 v56 = (os_log_s *)logObjectForModule_13();
          if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
          {
            CFIndex v57 = *a2;
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v57;
            _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEFAULT,  "[AccAuth] handleMessage: invalid incoming messageID(%#04x) ! \n",  buf,  8u);
          }

          unsigned int v10 = v55;
          uint64_t v9 = &startLogsNotificationObservers;
          break;
      }
    }

    kdebug_trace(731159628LL, a2[2] & 0xF, (unint64_t)a2[2] >> 4, *a2, v39);
    if ((_DWORD)v8) {
      goto LABEL_93;
    }
    unsigned int v8 = *v6;
    if ((v8 - 164) >= 2)
    {
      if (!*v6) {
        goto LABEL_93;
      }
    }

    else
    {
      uint64_t v80 = 0;
      *(_DWORD *)buf = 0;
      if (acc_auth_protocol_sizeofMessage((uint64_t)v6, v38, (int *)buf, &v80) && v80)
      {
        uint64_t v58 = v6[*(unsigned int *)buf + 1];
        goto LABEL_85;
      }

      if ((isRespMessage & 1) != 0 && v7[70] != v77)
      {
        unsigned int v72 = (os_log_s *)logObjectForModule_13();
        unsigned int v8 = 0LL;
        if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_DEFAULT,  "[AccAuth] handleMessage: Cannot get messagePayload ! \n",  buf,  2u);
          unsigned int v8 = 0LL;
        }

        goto LABEL_93;
      }
    }

    uint64_t v58 = 0;
LABEL_85:
    kdebug_trace(731159632LL, v6[2] & 0xF, (unint64_t)v6[2] >> 4, v8, v58);
    int v59 = v9[353];
    CFComparisonResult v60 = v10;
    uint64_t v61 = *((_DWORD *)v10 + 708);
    if (v59 && v61 >= 55)
    {
      int v62 = *(os_log_s **)(v59 + 432);
    }

    else
    {
      int v62 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
    {
      __int16 v73 = *((_DWORD *)v7 + 286);
      int v74 = *v7;
      uint32_t v75 = *v6;
      uint64_t v80 = 0;
      acc_auth_protocol_sizeofMessage((uint64_t)v6, a5, (int *)buf, &v80);
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)&uint8_t buf[4] = v73;
      uint64_t v9 = &startLogsNotificationObservers;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v74;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = v75;
      uint64_t v82 = 1024;
      uint64_t v83 = v80;
      uint64_t v84 = 1024;
      uint64_t v85 = v58;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEBUG,  "[AccAuth] handleMessage: authSession: role %d, sessionID %d, outMessage %#04x, len %d, infoType %#04x \n",  buf,  0x20u);
    }

    unsigned int v8 = 0LL;
    unsigned int v10 = v60;
    goto LABEL_93;
  }

  uint64_t v25 = v12;
  int v34 = v10;
  __int16 v35 = v9[353];
  uint64_t v36 = v34;
  if (v35 && *((int *)v34 + 708) >= 55)
  {
    uint64_t v29 = *(os_log_s **)(v35 + 432);
  }

  else
  {
    uint64_t v29 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  unsigned int v8 = 1LL;
  unsigned int v10 = v36;
  uint64_t v9 = &startLogsNotificationObservers;
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
LABEL_55:
    CFIndex v45 = acc_auth_protocol_isRespMessage(a2);
    uint64_t v46 = v7[70];
    uint64_t v47 = *a2;
    *(_DWORD *)buf = 67110144;
    *(_DWORD *)&uint8_t buf[4] = v45;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = 1;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&uint8_t buf[16] = v46;
    uint64_t v82 = 1024;
    uint64_t v83 = v25;
    uint64_t v84 = 1024;
    uint64_t v85 = v47;
    _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "[AccAuth] handleMessage: isResponse(%d/%d) and seq#(%d != %d) doesn't match messageID(%#04x) ! \n",  buf,  0x20u);
  }

  if ([v8 unsignedIntValue])
  {
  }

  else
  {
    [(id)gWiredConnectionSessionCountDict removeObjectForKey:*(void *)(a1 + 8)];
  }

  BOOL v11 = 1;
LABEL_19:
  if (gLogObjects && gNumLogObjects >= 10)
  {
    uint64_t v12 = (os_log_s *)*(id *)(gLogObjects + 72);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v12 = (os_log_s *)&_os_log_default;
    int v13 = &_os_log_default;
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    uint64_t v19 = 138412290;
    int v20 = gWiredConnectionSessionCountDict;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "gWiredConnectionSessionCountDict: %@",  (uint8_t *)&v19,  0xCu);
  }

  if (a2 == 2)
  {
    goto LABEL_34;
  }

  int v14 = v11 ^ 1;
  if (a2 != 1) {
    int v14 = 1;
  }
  if ((v14 & 1) == 0 && ![v8 unsignedIntValue])
  {
LABEL_34:
    CFStringRef v16 = *(const void **)(a1 + 16);
    uint64_t v15 = (uint64_t *)(a1 + 16);
    if ((platform_power_setExternalAccessoryPowerMode(v16, 1LL, a2 == 2) & 1) == 0)
    {
      if (gLogObjects && gNumLogObjects >= 10)
      {
        char v17 = (os_log_s *)*(id *)(gLogObjects + 72);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        char v17 = (os_log_s *)&_os_log_default;
        uint64_t v18 = &_os_log_default;
      }

      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        _sendEAPowerSourceUpdate_cold_1(v15, v17);
      }
    }
  }

  if (gLogObjects && *((int *)v14 + 708) >= 55)
  {
    uint64_t v15 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    uint64_t v15 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    CFStringRef v16 = *a1;
    char v17 = *((_DWORD *)a1 + 286);
    *(_DWORD *)buf = 67110144;
    *(_DWORD *)&uint8_t buf[4] = v16;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v17;
    *(_WORD *)&buf[14] = 1024;
    LODWORD(v33) = DWORD2(v28);
    WORD2(v33) = 1024;
    *(_DWORD *)((char *)&v33 + 6) = v31;
    WORD5(v33) = 1024;
    HIDWORD(v33) = CertificateData;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "[AccAuth][1Way] handleCertificateChainCert: sessionID %d, role %d, certificateDataLen %d, transferFinished %d, errorNo %d \n",  buf,  0x20u);
  }

  _acc_auth_protocol_cleanupCertificateData((uint64_t)&v28);
  return CertificateData;
}

  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v18 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    uint64_t v18 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    uint64_t v19 = *a1;
    int v20 = *((_DWORD *)a1 + 286);
    v22[0] = 67109632;
    v22[1] = v19;
    uint64_t v23 = 1024;
    int v24 = v20;
    uint64_t v25 = 1024;
    int v26 = inited;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "[AccAuth][1Way] sendCertChainRequestOrChallenge: sessionID %d, role %d, errorNo %d \n",  (uint8_t *)v22,  0x14u);
  }

  return inited;
}

  char v17 = acc_strings_placeholder_Unknown();
  CFStringRef v16 = (id)objc_claimAutoreleasedReturnValue(v17);
  if (!v6) {
    goto LABEL_17;
  }
LABEL_15:
  uint64_t v18 = v6[4];
  if (!v18)
  {
LABEL_17:
    int v20 = acc_strings_placeholder_Unknown();
    uint64_t v19 = (id)objc_claimAutoreleasedReturnValue(v20);
    if (!v6) {
      goto LABEL_20;
    }
    goto LABEL_18;
  }

  uint64_t v19 = v18;
LABEL_18:
  uint64_t v21 = v6[5];
  if (v21)
  {
    uint64_t v22 = v21;
    goto LABEL_21;
  }

        int v13 = acc_strings_placeholder_Unknown();
        int v64 = (id)objc_claimAutoreleasedReturnValue(v13);
        if (!v6) {
          goto LABEL_17;
        }
        goto LABEL_15;
      }

    *(void *)(a2 + 16) = 0LL;
    *(void *)(a2 + 40) = 0LL;
    char v17 = *(void *)(*(void *)a2 + 176LL);
    if (v17)
    {
      uint64_t v18 = *(void *)(v17 + 16);
      if (v18)
      {
        int v5 = iap2_sessionFileTransfer_removeTransferForFeature(v18, 14, a2);
        if ((v5 & 1) == 0)
        {
          if (gLogObjects && gNumLogObjects >= 32)
          {
            uint64_t v19 = *(os_log_s **)(gLogObjects + 248);
          }

          else
          {
            uint64_t v19 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
            _handleFileTransferEnd_cold_4();
          }
        }

        uint64_t v22 = *(unsigned __int8 *)(a2 + 109);
        if (*(void **)(a2 + 64) == a4)
        {
          if (a4)
          {
            free(a4);
            *(void *)(a2 + 64) = 0LL;
          }
        }

        else
        {
          if (gLogObjects && gNumLogObjects >= 32)
          {
            uint64_t v23 = *(os_log_s **)(gLogObjects + 248);
          }

          else
          {
            uint64_t v23 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
          {
            uint64_t v27 = *(_DWORD *)(a2 + 104);
            __int16 v28 = *(unsigned __int8 *)(a2 + 109);
            uint64_t v29 = *(unsigned __int16 *)(a2 + 16);
            char v30 = *(unsigned __int16 *)(a2 + 64);
            *(_DWORD *)buf = 138545154;
            unsigned int v32 = a1;
            __int16 v33 = 2080;
            *(void *)int v34 = "_handleFileTransferEnd";
            *(_WORD *)&v34[8] = 1024;
            *(_DWORD *)__int16 v35 = (unsigned __int16)a2;
            *(_WORD *)&v35[4] = 1024;
            *(_DWORD *)&v35[6] = v27;
            uint64_t v36 = 1024;
            __int16 v37 = v28;
            int v38 = 1024;
            __int16 v39 = v29;
            CFDataRef v40 = 1024;
            uint64_t v41 = (unsigned __int16)a4;
            int v42 = 1024;
            uint64_t v43 = v30;
            _os_log_fault_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_FAULT,  "%{public}@ %s: fileXfer=%hxh state=%d bufferID=%u pBuffer=%hxh userInfo=%hxh, userInfo != endCBUserInfo(%hxh) !!!!",  buf,  0x3Au);
          }
        }

        iAP2FileTransferRelease(a2);
        if (*a3 && v22 == a3[1])
        {
          int v24 = (const void *)*((void *)a3 + 1);
          if (v24)
          {
            CFRelease(v24);
            *((void *)a3 + 1) = 0LL;
          }

          a3[2] = 0;
          *(_WORD *)a3 = 0;
        }

        return v5;
      }
    }

    return 0LL;
  }

  if (gLogObjects && gNumLogObjects >= 32)
  {
    int v20 = *(os_log_s **)(gLogObjects + 248);
  }

  else
  {
    int v20 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  int v5 = 0LL;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v25 = *(_DWORD *)(a2 + 104);
    *(_DWORD *)buf = 138543618;
    unsigned int v32 = a1;
    __int16 v33 = 1024;
    *(_DWORD *)int v34 = v25;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "%{public}@ state: %d, waiting for status from accessory before cleanup",  buf,  0x12u);
    return 0LL;
  }

  return v5;
}

  int v14 = 4294967294LL;
  if (!a6)
  {
    uint64_t v15 = 15;
    goto LABEL_16;
  }

    -[NSMutableDictionary setObject:forKey:]( v4,  "setObject:forKey:",  self->_albumTitle,  @"ACCMediaLibraryPlaylistItemAlbumTitle");
    validMask = self->_validMask;
    if ((validMask & 0x1000) == 0)
    {
LABEL_7:
      if ((validMask & 0x4000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_16;
    }

  if (v12)
  {
    uint64_t v18 = [v12 BOOLValue];
    v16 |= 4u;
  }

  else
  {
    uint64_t v18 = 0;
  }

  platform_voiceOver_informationUpdateHandler(v16, v18, v15, v13);
}

  int v20 = v66;
  uint64_t v19 = v67;
  if (v67 < v66) {
    goto LABEL_186;
  }
  uint64_t v21 = v70;
  if (v70 > v67 - v66) {
    goto LABEL_186;
  }
  *(void *)(a1 + 136) = v66;
  *(void *)(a1 + 144) = v21;
  if (__CFADD__(v20, v21)) {
    goto LABEL_187;
  }
  uint64_t v22 = &v20[v21];
  if (v20 > v22 || v22 > v19) {
    goto LABEL_186;
  }
  uint32_t v66 = v22;
  int v24 = v66;
  uint64_t v23 = v67;
  if (v67 < v66) {
    goto LABEL_186;
  }
  uint64_t v25 = v70;
  if (v70 > v67 - v66) {
    goto LABEL_186;
  }
  *(void *)(a1 + 120) = v66;
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = v25;
  if (__CFADD__(v24, v25)) {
    goto LABEL_187;
  }
  int v26 = &v24[v25];
  if (v24 > v26 || v26 > v23) {
    goto LABEL_186;
  }
  uint32_t v66 = v26;
  __int16 v28 = v66;
  uint64_t v27 = v67;
  if (v67 < v66) {
    goto LABEL_186;
  }
  uint64_t v29 = v70;
  if (v70 > v67 - v66) {
    goto LABEL_186;
  }
  *(void *)(a1 + 72) = v66;
  *(void *)(a1 + 80) = v29;
  if (__CFADD__(v28, v29)) {
    goto LABEL_187;
  }
  char v30 = &v28[v29];
  if (v28 > v30 || v30 > v27) {
    goto LABEL_186;
  }
  uint32_t v66 = v30;
  uint64_t v31 = v66;
  unsigned int v32 = v67;
  if (v67 < v66) {
    goto LABEL_186;
  }
  __int16 v33 = v70;
  if (v70 > v67 - v66) {
    goto LABEL_186;
  }
  *(void *)(a1 + 104) = v66;
  *(void *)(a1 + 112) = v33;
  if (__CFADD__(v31, v33)) {
    goto LABEL_187;
  }
  int v34 = &v31[v33];
  if (v31 > &v31[v33] || v34 > v32) {
    goto LABEL_186;
  }
  uint32_t v66 = &v31[v33];
  BOOL result = ccder_blob_decode_tl(&v66, 0x2000000000000010LL, &v70);
  if (!(_DWORD)result) {
    return 720922LL;
  }
  __int16 v35 = v66;
  uint64_t v36 = v70;
  __int16 v37 = (unsigned __int8 *)(v66 - v34 + v70);
  if (!__CFADD__(v66 - v34, v70))
  {
    *(void *)(a1 + 8_Block_object_dispose(va, 8) = v34;
    *(void *)(a1 + 96) = v37;
    if (__CFADD__(v35, v36)) {
      goto LABEL_187;
    }
    int v38 = &v35[v36];
    if (v35 > v38 || v38 > v67) {
      goto LABEL_186;
    }
    __int16 v65 = v67;
    uint32_t v66 = v38;
    int v64 = v38;
    if ((ccder_blob_decode_tl(&v64, 0x8000000000000001LL, &v70) & 1) != 0) {
      return 720923LL;
    }
    if (v66 > v67) {
      goto LABEL_186;
    }
    int v64 = v66;
    __int16 v65 = v67;
    if ((ccder_blob_decode_tl(&v64, 0x8000000000000002LL, &v70) & 1) != 0) {
      return 720924LL;
    }
    if (v66 > v67) {
      goto LABEL_186;
    }
    int v64 = v66;
    __int16 v65 = v67;
    if (ccder_blob_decode_tl(&v64, 0xA000000000000003LL, &v70))
    {
      int v62 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
      __int16 v63 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
      if (__CFADD__(v64, v70)) {
        goto LABEL_187;
      }
      if (v64 > &v64[v70] || &v64[v70] > v65) {
        goto LABEL_186;
      }
      int v62 = v64;
      __int16 v63 = &v64[v70];
      __int16 v39 = v62;
      if (__CFADD__(v62, v70)) {
LABEL_187:
      }
        __break(0x5513u);
      CFDataRef v40 = &v62[v70];
      if (v62 > &v62[v70] || v40 > v63) {
        goto LABEL_186;
      }
      __int16 v63 = &v62[v70];
      *(_BYTE *)(a1 + 266) = 0;
      memset(&v72[2], 0, 128);
      if (a3) {
        uint64_t v41 = a4 == 0;
      }
      else {
        uint64_t v41 = 1;
      }
      int v42 = !v41;
      memset(v72, 0, 32);
      if (v39 < v40)
      {
        int v55 = 0;
        uint64_t v43 = 0;
        do
        {
          CFComparisonResult v60 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
          uint64_t v61 = 0xAAAAAAAAAAAAAAAALL;
          int v59 = 0;
          uint64_t v58 = 0LL;
          if ((ccder_blob_decode_tl(&v62, 0x2000000000000010LL, &v58) & 1) == 0) {
            return 720926LL;
          }
          __int128 v56 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
          CFIndex v57 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
          if (__CFADD__(v62, v58)) {
            goto LABEL_187;
          }
          if (v62 > &v62[v58] || &v62[v58] > v63) {
            goto LABEL_186;
          }
          __int128 v56 = v62;
          CFIndex v57 = &v62[v58];
          if (v57 < v56 || v70 > v57 - v56) {
            goto LABEL_186;
          }
          CFComparisonResult v60 = v56;
          uint64_t v61 = v70;
          if (__CFADD__(v56, v70)) {
            goto LABEL_187;
          }
          if (v56 > &v56[v70] || &v56[v70] > v57) {
            goto LABEL_186;
          }
          v56 += v70;
          if (__CFADD__(v56, v70)) {
            goto LABEL_187;
          }
          if (v57 != &v56[v70]) {
            return 720929LL;
          }
          if (v42 && !compare_octet_string_raw((uint64_t)&v60, a3, a4))
          {
            if (v57 < v56) {
              goto LABEL_186;
            }
            CFIndex v45 = v70;
            if (v70 > v57 - v56) {
              goto LABEL_186;
            }
            *(void *)(a1 + 24_Block_object_dispose(va, 8) = v56;
            *(void *)(a1 + 256) = v45;
          }

          if (v61 == 3)
          {
            if (*(_WORD *)v60 == 7509 && v60[2] == 15)
            {
              uint64_t v18 = 720930LL;
              v43 |= 1u;
              goto LABEL_155;
            }

            if (*(_WORD *)v60 == 7509 && v60[2] == 19)
            {
              uint64_t v18 = 720931LL;
              if ((v43 & 2) != 0
                || (X509ExtensionParseBasicConstraints(&v56, (unint64_t *)(a1 + 200), (BOOL *)(a1 + 265)) & 1) == 0)
              {
                return v18;
              }

              v43 |= 2u;
              goto LABEL_155;
            }

            if (*(_WORD *)v60 == 7509 && v60[2] == 35)
            {
              uint64_t v18 = 720932LL;
              if ((v43 & 4) != 0
                || (X509ExtensionParseAuthorityKeyIdentifier(&v56, (void *)(a1 + 168), (unint64_t *)(a1 + 176)) & 1) == 0)
              {
                return v18;
              }

              v43 |= 4u;
              goto LABEL_155;
            }

            if (*(_WORD *)v60 == 7509 && v60[2] == 14)
            {
              uint64_t v18 = 720933LL;
              if ((v43 & 8) != 0
                || (X509ExtensionParseSubjectKeyIdentifier( &v56,  (unsigned __int8 **)(a1 + 184),  (unint64_t *)(a1 + 192)) & 1) == 0)
              {
                return v18;
              }

              v43 |= 8u;
              goto LABEL_155;
            }

            if (*(_WORD *)v60 == 7509 && v60[2] == 37)
            {
              uint64_t v18 = 720934LL;
              if ((v43 & 0x10) != 0
                || (X509ExtensionParseExtendedKeyUsage(&v56, (void *)(a1 + 208), (unint64_t *)(a1 + 216)) & 1) == 0)
              {
                return v18;
              }

              v43 |= 0x10u;
              goto LABEL_155;
            }

            if (*(_WORD *)v60 == 7509 && v60[2] == 17)
            {
              uint64_t v18 = 720935LL;
              if ((v43 & 0x20) != 0
                || (X509ExtensionParseSubjectAltName( &v56,  (unsigned __int8 **)(a1 + 224),  (unint64_t *)(a1 + 232)) & 1) == 0)
              {
                return v18;
              }

              v43 |= 0x20u;
              goto LABEL_155;
            }
          }

          else if (v61 >= 8 && *(_DWORD *)v60 == -2042067414 && *(_DWORD *)(v60 + 3) == 1684273030)
          {
            uint64_t v18 = 720936LL;
            BOOL result = X509ExtensionParseAppleExtension( (uint64_t)&v56,  (unint64_t)v60,  v61,  (unint64_t *)(a1 + 240),  (unint64_t *)(a1 + 248),  v42);
            if (!(_DWORD)result) {
              return v18;
            }
            if (v55 == 0xFF) {
              goto LABEL_189;
            }
            ++v55;
            goto LABEL_155;
          }

          if (__CFADD__(v56, v70)) {
            goto LABEL_187;
          }
          if (v56 > &v56[v70] || &v56[v70] > v57) {
            goto LABEL_186;
          }
          v56 += v70;
          if (v59) {
            *(_BYTE *)(a1 + 266) = 1;
          }
LABEL_155:
          if (v56 != v57) {
            return 720926LL;
          }
          if (__CFADD__(v62, v58)) {
            goto LABEL_187;
          }
          __int16 v39 = &v62[v58];
          if (v62 > &v62[v58]) {
            goto LABEL_186;
          }
          CFDataRef v40 = v63;
          if (v39 > v63) {
            goto LABEL_186;
          }
          v62 += v58;
        }

        while (v39 < v63);
      }

      if (v39 != v40) {
        return 720925LL;
      }
      if (v39 > v67 || v66 > v39) {
        goto LABEL_186;
      }
      uint32_t v66 = v39;
    }

    if (*(void *)(a1 + 32) < 3uLL)
    {
      uint64_t v18 = 720915LL;
      if (v66 != v67) {
        return v18;
      }
LABEL_170:
      if (__CFADD__(v68, v71)) {
        goto LABEL_187;
      }
      v68 += v71;
      *(void *)&v72[0] = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v72[0] + 1) = 0xAAAAAAAAAAAAAAAALL;
      int v62 = 0LL;
      BOOL result = ccder_blob_decode_bitstring(&v68, (uint64_t)v72, (unint64_t *)&v62);
      if (!(_DWORD)result) {
        return 720938LL;
      }
      if ((unint64_t)v62 < 0xFFFFFFFFFFFFFFF9LL)
      {
        if (*((void *)&v72[0] + 1) >= *(void *)&v72[0])
        {
          BOOL v53 = (unint64_t)(v62 + 7) >> 3;
          if (v53 <= *((void *)&v72[0] + 1) - *(void *)&v72[0])
          {
            *(void *)(a1 + 56) = *(void *)&v72[0];
            *(void *)(a1 + 64) = v53;
            uint64_t v54 = v69;
            if ((unint64_t)v68 <= v69)
            {
              uint64_t v18 = 0LL;
              *a2 = v68;
              a2[1] = (unsigned __int8 *)v54;
              return v18;
            }
          }
        }

        goto LABEL_186;
      }

      goto LABEL_188;
    }

    if (v67 <= a2[1] && *a2 <= v67)
    {
      *a2 = v67;
      goto LABEL_170;
    }

void *logObjectForModule_2()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 15;
  }
  else {
    BOOL v0 = 1;
  }
  if (!v0) {
    return *(void **)(gLogObjects + 112);
  }
  uint64_t v1 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v1;
}

uint64_t ___invokeFeatureHandler_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void))(a1 + 40))(*(void *)(a1 + 48), *(void *)(a1 + 56));
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

uint64_t ___invokeFeatureHandler_block_invoke_2(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void))(a1 + 40))( *(void *)(*(void *)(a1 + 48) + 56LL),  *(void *)(a1 + 56));
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

uint64_t ___invokeFeatureHandler_block_invoke_3(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void))(a1 + 40))( *(void *)(*(void *)(a1 + 48) + 56LL),  *(void *)(a1 + 56));
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

uint64_t mfi4Auth_protocol_messageHandler_receiveIncomingData(uint64_t a1, const void *a2)
{
  if (gLogObjects && gNumLogObjects >= 56)
  {
    BOOL v4 = *(os_log_s **)(gLogObjects + 440);
  }

  else
  {
    BOOL v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "mfi4Auth_protocol_messageHandler_receiveIncomingData",  buf,  2u);
  }

  uint64_t v54 = 0LL;
  unsigned __int8 v53 = 0;
  if (!a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      BOOL v6 = *(os_log_s **)(gLogObjects + 440);
    }

    else
    {
      BOOL v6 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_messageHandler_receiveIncomingData_cold_7(v6, v18, v19, v20, v21, v22, v23, v24);
    }
    goto LABEL_27;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v5 = *(os_log_s **)(gLogObjects + 440);
    }

    else
    {
      int v5 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_messageHandler_receiveIncomingData_cold_17(v5, v11, v12, v13, v14, v15, v16, v17);
    }
LABEL_27:
    uint64_t v25 = 0LL;
    goto LABEL_28;
  }

  if (!a2)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      __int16 v37 = *(os_log_s **)(gLogObjects + 440);
    }

    else
    {
      __int16 v37 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_messageHandler_receiveIncomingData_cold_9();
    }
    goto LABEL_27;
  }

  CFRetain(a2);
  *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v51[0] = v7;
  v51[1] = v7;
  v51[2] = v7;
  v51[3] = v7;
  unint64_t v52 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = *(unsigned __int16 *)(a1 + 200);
  uint64_t v9 = mfi4Auth_util_parseMessage(*(void *)(a1 + 8), (uint64_t)v51, (CFDataRef)a2, *(_WORD *)(a1 + 200));
  if (v9)
  {
    uint64_t v10 = v9;
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v38 = *(os_log_s **)(gLogObjects + 440);
    }

    else
    {
      int v38 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v56) = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_INFO,  "mfi4Auth_protocol_messageHandler_receiveIncomingData: Found no message starting with: %x",  buf,  8u);
    }

    uint64_t v39 = mfi4Auth_util_parseMessage(*(void *)(a1 + 8), (uint64_t)v51, (CFDataRef)a2, 0);
    if (!v39)
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v43 = *(os_log_s **)(gLogObjects + 440);
      }

      else
      {
        uint64_t v43 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_messageHandler_receiveIncomingData_cold_11(v43, v44, v45, v46, v47, v48, v49, v50);
      }
      goto LABEL_27;
    }

    uint64_t v10 = v39;
    uint64_t v8 = 0LL;
  }

  if (gLogObjects && gNumLogObjects >= 56)
  {
    CFDataRef v40 = *(os_log_s **)(gLogObjects + 440);
  }

  else
  {
    CFDataRef v40 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_INFO,  "mfi4Auth_protocol_messageHandler_receiveIncomingData: Found message",  buf,  2u);
  }

  if ((mfi4Auth_protocol_decryptIncomingData(a1, v8, v10) & 1) == 0)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v42 = *(os_log_s **)(gLogObjects + 440);
    }

    else
    {
      int v42 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_messageHandler_receiveIncomingData_cold_13();
    }
    goto LABEL_27;
  }

  int v41 = 1;
  mfi4Auth_util_packetLogging(*(const void **)a1, v8, v10, 1, 0);
  if (v41 && v54) {
    uint64_t v25 = 1LL;
  }
  else {
    uint64_t v25 = mfi4Auth_protocol_processIncomingMessageRelay(a1, v8, v10, (uint64_t *)&v54, &v53);
  }
LABEL_28:
  if (gLogObjects && gNumLogObjects >= 56)
  {
    int v26 = *(os_log_s **)(gLogObjects + 440);
  }

  else
  {
    int v26 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v56) = v25;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "receiveIncomingData: processIncomingData returned:%d",  buf,  8u);
  }

  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v27 = *(os_log_s **)(gLogObjects + 440);
  }

  else
  {
    uint64_t v27 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v56) = v54 != 0LL;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "receiveIncomingData: outMessage:(%d)", buf, 8u);
  }

  if (gLogObjects && gNumLogObjects >= 56)
  {
    __int16 v28 = *(os_log_s **)(gLogObjects + 440);
  }

  else
  {
    __int16 v28 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v56) = v53;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "receiveIncomingData: keepOpen:%d", buf, 8u);
  }

  if (v54) {
    int v29 = v25;
  }
  else {
    int v29 = 0;
  }
  if (v29 == 1)
  {
    EndpointWithUUID = (uint64_t *)acc_manager_getEndpointWithUUID(*(const void **)a1);
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v31 = *(os_log_s **)(gLogObjects + 440);
    }

    else
    {
      uint64_t v31 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v56 = (uint64_t)EndpointWithUUID;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "receiveIncomingData: pEndpoint:%p", buf, 0xCu);
    }

    if (EndpointWithUUID)
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        unsigned int v32 = *(os_log_s **)(gLogObjects + 440);
      }

      else
      {
        unsigned int v32 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
        int v33 = *((_DWORD *)EndpointWithUUID + 7);
        *(_DWORD *)buf = 67109120;
        LODWORD(v56) = v33;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_INFO,  "receiveIncomingData: protocol type:%d",  buf,  8u);
      }

      uint64_t v34 = EndpointWithUUID[7];
      if (gLogObjects && gNumLogObjects >= 56)
      {
        __int16 v35 = *(os_log_s **)(gLogObjects + 440);
      }

      else
      {
        __int16 v35 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        uint64_t v56 = v34;
        _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_INFO,  "receiveIncomingData: pProtocolEndpoint:%p",  buf,  0xCu);
      }

      mfi4Auth_endpoint_sendOutgoingData(v34, (uint64_t)v54);
    }

    if (v54)
    {
      free(v54);
      uint64_t v54 = 0LL;
    }
  }

  else
  {
    mfi4Auth_protocol_handleAuthSessionClose(a1, v53);
  }

  if (a2) {
    CFRelease(a2);
  }
  return v25;
}

uint64_t mfi4Auth_protocol_messageHandler_setEndpointSecureTunnelDataReceiveTypeHandler( uint64_t a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    if (a3)
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        __int128 v7 = *(os_log_s **)(gLogObjects + 440);
      }

      else
      {
        __int128 v7 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_messageHandler_setEndpointSecureTunnelDataReceiveTypeHandler_cold_5( a2,  v7,  v8,  v9,  v10,  v11,  v12,  v13);
      }
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        BOOL v6 = *(os_log_s **)(gLogObjects + 440);
      }

      else
      {
        BOOL v6 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_messageHandler_setEndpointSecureTunnelDataReceiveTypeHandler_cold_3();
      }
    }
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v5 = *(os_log_s **)(gLogObjects + 440);
    }

    else
    {
      int v5 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_messageHandler_setEndpointSecureTunnelDataReceiveTypeHandler_cold_1();
    }
  }

  return 0LL;
}

void mfi4Auth_protocol_messageHandler_handleOutgoingSecureTunnelDataForClient( uint64_t a1, uint64_t a2, const __CFData *a3)
{
  if (gLogObjects && gNumLogObjects >= 56)
  {
    BOOL v6 = *(os_log_s **)(gLogObjects + 440);
  }

  else
  {
    BOOL v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v39 = 136315906;
    CFDataRef v40 = "mfi4Auth_protocol_messageHandler_handleOutgoingSecureTunnelDataForClient";
    __int16 v41 = 1024;
    BOOL v42 = a1 != 0;
    __int16 v43 = 1024;
    int v44 = a2;
    __int16 v45 = 2112;
    uint64_t v46 = a3;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "%s: authSession(%d), secureTunnelType %d, dataOut %@",  (uint8_t *)&v39,  0x22u);
    if (a1)
    {
LABEL_8:
      if (*(_BYTE *)(a1 + 30))
      {
        if (gLogObjects && gNumLogObjects >= 56)
        {
          __int128 v7 = *(os_log_s **)(gLogObjects + 440);
        }

        else
        {
          __int128 v7 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_protocol_messageHandler_handleOutgoingSecureTunnelDataForClient_cold_9( v7,  v8,  v9,  v10,  v11,  v12,  v13,  v14);
        }
      }

      else if (a3)
      {
        if (a2 >= 3)
        {
          if (gLogObjects && gNumLogObjects >= 56)
          {
            uint64_t v16 = *(os_log_s **)(gLogObjects + 440);
          }

          else
          {
            uint64_t v16 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_messageHandler_setEndpointSecureTunnelDataReceiveTypeHandler_cold_5( a2,  v16,  v26,  v27,  v28,  v29,  v30,  v31);
          }
        }

        else if ((a2 - 1) > 1u)
        {
          if (gLogObjects && gNumLogObjects >= 56)
          {
            uint64_t v25 = *(os_log_s **)(gLogObjects + 440);
          }

          else
          {
            uint64_t v25 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_messageHandler_handleOutgoingSecureTunnelDataForClient_cold_5( v25,  v32,  v33,  v34,  v35,  v36,  v37,  v38);
          }
        }

        else
        {
          mfi4Auth_protocol_processOutgoingSecureTunnelDataForClient(a1, a2, a3);
        }
      }

      else
      {
        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v15 = *(os_log_s **)(gLogObjects + 440);
        }

        else
        {
          uint64_t v15 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_protocol_messageHandler_setEndpointSecureTunnelDataReceiveTypeHandler_cold_3();
        }
      }

      return;
    }
  }

  else if (a1)
  {
    goto LABEL_8;
  }

  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v17 = *(os_log_s **)(gLogObjects + 440);
  }

  else
  {
    uint64_t v17 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
    mfi4Auth_protocol_messageHandler_handleOutgoingSecureTunnelDataForClient_cold_1( v17,  v18,  v19,  v20,  v21,  v22,  v23,  v24);
  }
}

void OUTLINED_FUNCTION_4_2( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void OUTLINED_FUNCTION_6_0( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

BOOL mfi4Auth_endpoint_setAccessoryUserName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = 0LL;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000LL;
  char v15 = 0;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      BOOL v6 = *(os_log_s **)(gLogObjects + 440);
    }

    else
    {
      BOOL v6 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_endpoint_setAccessoryUserName",  buf,  2u);
    }

    __int128 v7 = *(dispatch_queue_s **)(a1 + 16);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 0x40000000LL;
    _DWORD v10[2] = __mfi4Auth_endpoint_setAccessoryUserName_block_invoke;
    v10[3] = &unk_1001F9D48;
    v10[6] = a1;
    v10[7] = a2;
    v10[4] = a3;
    v10[5] = &v12;
    dispatch_sync(v7, v10);
    BOOL v8 = *((_BYTE *)v13 + 24) != 0;
  }

  else
  {
    BOOL v8 = 0LL;
  }

  _Block_object_dispose(&v12, 8);
  return v8;
}

void *logObjectForModule_3()
{
  if (gLogObjects && gNumLogObjects >= 56) {
    return *(void **)(gLogObjects + 440);
  }
  BOOL v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

void __mfi4Auth_endpoint_setAccessoryUserName_block_invoke(uint64_t a1)
{
  if (_mfi4Auth_endpoint_waitSessionClosed(*(uint64_t **)(a1 + 48)))
  {
    if (acc_endpoint_getTransportType(**(void **)(a1 + 48)) == 13) {
      acc_endpoint_setProperty( **(pthread_mutex_t ***)(a1 + 48),  kCFACCProperties_Endpoint_NFC_RequestSessionOpen,  kCFBooleanTrue);
    }
    mfi4Auth_protocol_convertUserAccessoryInfoToAction( *(void *)(*(void *)(a1 + 48) + 8LL),  *(CFStringRef *)(a1 + 56));
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 32LL) = 8;
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 64LL) = _Block_copy(*(const void **)(a1 + 32));
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
    uint64_t v2 = (os_log_s *)logObjectForModule_3();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      __mfi4Auth_endpoint_setAccessoryUserName_block_invoke_cold_1();
    }
  }

  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1LL, 0LL);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

BOOL _mfi4Auth_endpoint_waitSessionClosed(uint64_t *a1)
{
  uint64_t v2 = (const void *)kCFACCProperties_Endpoint_NFC_RequestSessionOpen;
  BOOL v3 = acc_endpoint_copyProperty((pthread_mutex_t *)*a1, kCFACCProperties_Endpoint_NFC_RequestSessionOpen);
  if (v3)
  {
    BOOL v4 = v3;
    unsigned int v5 = 0;
    BOOL v6 = (const void *)kCFACCProperties_Endpoint_NFC_SessionOpen;
    while (1)
    {
      CFTypeID v7 = CFGetTypeID(v4);
      if (v7 != CFBooleanGetTypeID())
      {
        uint64_t v16 = (os_log_s *)logObjectForModule_3();
        BOOL result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        _mfi4Auth_endpoint_waitSessionClosed_cold_5();
        return 0LL;
      }

      if (v4 != (pthread_mutex_t *)kCFBooleanFalse)
      {
        uint64_t v17 = (os_log_s *)logObjectForModule_3();
        BOOL result = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        _mfi4Auth_endpoint_waitSessionClosed_cold_4();
        return 0LL;
      }

      BOOL v8 = acc_endpoint_copyProperty((pthread_mutex_t *)*a1, v6);
      if (!v8)
      {
        uint64_t v18 = (os_log_s *)logObjectForModule_3();
        BOOL result = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        _mfi4Auth_endpoint_waitSessionClosed_cold_2();
        return 0LL;
      }

      uint64_t v9 = (const __CFBoolean *)v8;
      CFTypeID v10 = CFGetTypeID(v8);
      if (v10 != CFBooleanGetTypeID()) {
        break;
      }
      BOOL result = 1LL;
      if (v9 != kCFBooleanTrue || v5 > 4) {
        return result;
      }
      uint64_t v12 = gLogObjects;
      int v13 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v14 = *(os_log_s **)(gLogObjects + 440);
      }

      else
      {
        uint64_t v14 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          uint64_t v21 = v12;
          __int16 v22 = 1024;
          int v23 = v13;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          uint64_t v14 = (os_log_s *)&_os_log_default;
        }
      }

      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v21) = 20;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "waitSessionClosed: wait %d ms", buf, 8u);
      }

      usleep(0x4E20u);
      ++v5;
      BOOL v4 = acc_endpoint_copyProperty((pthread_mutex_t *)*a1, v2);
      if (!v4) {
        goto LABEL_21;
      }
    }

    uint64_t v19 = (os_log_s *)logObjectForModule_3();
    BOOL result = os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    _mfi4Auth_endpoint_waitSessionClosed_cold_3();
    return 0LL;
  }

LABEL_21:
  char v15 = (os_log_s *)logObjectForModule_3();
  BOOL result = os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
  if (result)
  {
    _mfi4Auth_endpoint_waitSessionClosed_cold_1();
    return 0LL;
  }

  return result;
}

      if (v18 == (id)++v21)
      {
        uint64_t v18 = [v16 countByEnumeratingWithState:&v34 objects:v38 count:16];
        if (v18) {
          goto LABEL_11;
        }

        uint64_t v12 = &startLogsNotificationObservers;
        int v13 = &startLogsNotificationObservers;
        if ((v19 & 1) != 0) {
          goto LABEL_36;
        }
        goto LABEL_27;
      }
    }
  }

LABEL_27:
  uint64_t v30 = v12[353];
  if (v30 && *((int *)v13 + 708) >= 9)
  {
    uint64_t v29 = (os_log_s *)*(id *)(v30 + 64);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v29 = (os_log_s *)&_os_log_default;
    uint64_t v31 = &_os_log_default;
  }

  if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412802;
    CFDataRef v40 = v33;
    __int16 v41 = 2112;
    BOOL v42 = v32;
    __int16 v43 = 2112;
    int v44 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_INFO,  "Could not find client to send configStreamCategoryListReady for endpointUUID %@, connectionUUID %@, clientUUID %@",  buf,  0x20u);
  }

  char v15 = *v10;
  uint64_t v16 = *(_BYTE *)(a3 + 109);
  __src = -1431655766;
  uint64_t v32 = 0LL;
  LOBYTE(__src) = v16;
  __src_4 = a2;
  uint64_t v33 = 0LL;
  if (iAP2ListArrayFindItem( v15,  (uint64_t)&__src,  (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))_compareBufferIDAndFeatureType) == 255)
  {
    LOBYTE(__src) = *(_BYTE *)(a3 + 109);
    __src_4 = a2;
    uint64_t v32 = a3;
    uint64_t v33 = a4;
    LastItemIndex = iAP2ListArrayGetLastItemIndex((uint64_t)v15);
    if (gLogObjects && gNumLogObjects >= 24)
    {
      uint64_t v24 = *(os_log_s **)(gLogObjects + 184);
    }

    else
    {
      uint64_t v24 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    uint64_t v25 = os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0LL;
    if (v25)
    {
      uint64_t v26 = *(unsigned __int8 *)(a3 + 109);
      uint64_t v27 = "incoming";
      if (v15 == *v7) {
        uint64_t v27 = "outgoing";
      }
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)uint64_t v35 = v26;
      *(_WORD *)&v35[4] = 2080;
      *(void *)&v35[6] = v27;
      uint64_t v21 = "Failed to add new fileXfer (bufferID=%xh) to %s list";
      __int16 v22 = v24;
      int v23 = 18;
      goto LABEL_31;
    }
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 24)
    {
      uint64_t v17 = *(os_log_s **)(gLogObjects + 184);
    }

    else
    {
      uint64_t v17 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    uint64_t v19 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0LL;
    if (v19)
    {
      uint64_t v20 = *(unsigned __int8 *)(a3 + 109);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)uint64_t v35 = v20;
      *(_WORD *)&v35[4] = 1024;
      *(_DWORD *)&v35[6] = a2;
      uint64_t v21 = "Transfer for bufferID(%u) already exists! type=%d";
      __int16 v22 = v17;
      int v23 = 14;
LABEL_31:
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v21, buf, v23);
      return 0LL;
    }
  }

  return result;
}

  int v13 = (unsigned __int8 *)v6[2];
  uint64_t v14 = *v8;
  char v15 = *(_BYTE *)(a3 + 109);
  v26[0] = -1431655766;
  uint64_t v27 = 0LL;
  LOBYTE(v26[0]) = v15;
  v26[1] = a2;
  uint64_t v28 = 0LL;
  Item = iAP2ListArrayFindItem( v14,  (uint64_t)v26,  (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))_compareBufferIDAndFeatureType);
  if (Item != 255)
  {
    uint64_t v17 = Item;
    LastItemIndex = iAP2ListArrayGetLastItemIndex((uint64_t)v13);
    uint64_t v19 = (void *)iAP2ListArrayItemForIndex((uint64_t)v14, v17);
    iAP2ListArrayAddItemAfter(v13, LastItemIndex, v19);
    iAP2ListArrayDeleteItem(v14, v17, 0LL);
    return 1LL;
  }

  if (gLogObjects && gNumLogObjects >= 24)
  {
    uint64_t v20 = *(os_log_s **)(gLogObjects + 184);
  }

  else
  {
    uint64_t v20 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  uint64_t v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  BOOL result = 0LL;
  if (v21)
  {
    __int16 v22 = *(unsigned __int8 *)(a3 + 109);
    if (v14 == (_BYTE *)*v6)
    {
      int v23 = "outgoing";
    }

    else if (v14 == (_BYTE *)v6[1])
    {
      int v23 = "incoming";
    }

    else
    {
      int v23 = "unknown";
    }

    *(_DWORD *)buf = 67109378;
    *(_DWORD *)uint64_t v30 = v22;
    *(_WORD *)&v30[4] = 2080;
    *(void *)&v30[6] = v23;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Failed to remove new fileXfer (bufferID=%xh) from %s list... doesn't exist!",  buf,  0x12u);
    return 0LL;
  }

  return result;
}

  return v8;
}

  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v13 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    int v13 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    uint64_t v14 = *a1;
    char v15 = *((_DWORD *)a1 + 286);
    *(_DWORD *)buf = 67110400;
    uint64_t v25 = v14;
    uint64_t v26 = 1024;
    uint64_t v27 = v15;
    uint64_t v28 = 1024;
    uint64_t v29 = v8;
    uint64_t v30 = 1024;
    uint64_t v31 = __n;
    uint64_t v32 = 1024;
    uint64_t v33 = DWORD2(__n_1[0]);
    uint64_t v34 = 1024;
    uint64_t v35 = Certificate;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "[AccAuth][1Way] handleChallenge: sessionID %d, role %d, challengeLen %d, responseLen=%d, certificateDataLen %d, errorNo %d \n",  buf,  0x26u);
  }

  _acc_auth_protocol_cleanupCertificateData((uint64_t)__n_1);
  return Certificate;
}

  if (gLogObjects && gNumLogObjects >= 8)
  {
    CFTypeID v7 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      _parseIdentificationParams_cold_2();
    }
    CFTypeID v7 = (os_log_s *)&_os_log_default;
    BOOL v8 = &_os_log_default;
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    LOWORD(v20) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "[#Now Playing] Injecting MediaLibraryUID...",  (uint8_t *)&v20,  2u);
  }

  if (platform_nowPlaying_playbackAttributesUpdate_iTunesRadioStationIdentifier) {
    uint64_t v9 = [platform_nowPlaying_playbackAttributesUpdate_iTunesRadioStationIdentifier length] != 0;
  }
  else {
    uint64_t v9 = 0LL;
  }
  if (platform_nowPlaying_playbackAttributesUpdate_isMusicAppNS) {
    CFTypeID v10 = [(id)platform_nowPlaying_playbackAttributesUpdate_isMusicAppNS BOOLValue];
  }
  else {
    CFTypeID v10 = 0;
  }
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v1));
  uint64_t v12 = (__CFString *)platform_system_copyMediaLibraryUIDString(v10, v9);
  if (gLogObjects && gNumLogObjects >= 8)
  {
    int v13 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      _parseIdentificationParams_cold_2();
    }
    int v13 = (os_log_s *)&_os_log_default;
    uint64_t v14 = &_os_log_default;
  }

  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    char v15 = "NO";
    if (v10) {
      uint64_t v16 = "YES";
    }
    else {
      uint64_t v16 = "NO";
    }
    uint64_t v20 = 138412802;
    uint64_t v21 = v12;
    __int16 v22 = 2080;
    int v23 = v16;
    if (v9) {
      char v15 = "YES";
    }
    uint64_t v24 = 2080;
    uint64_t v25 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "[#Now Playing] mediaLibraryUID: '%@'; isMusicApp: %s; isiTunesRadio: %s",
      (uint8_t *)&v20,
      0x20u);
  }

  [v11 setObject:v12 forKey:@"MediaLibraryUID"];
  uint64_t v17 = [v11 copy];

  _gShouldSendMediaLibraryUID = 0;
  uint64_t v1 = v17;
LABEL_49:
  uint64_t v18 = accFeatureHandlers_invokeHandler(0LL, 6, (uint64_t)v1);

  return v18;
}

  uint64_t v24 = v6[6];
  uint64_t v25 = v6[7];
  uint64_t v90 = v6[9];
  double v89 = v6[11];
  uint64_t v26 = v6[12];
LABEL_22:
  uint64_t v27 = v26;
  uint64_t v28 = (NSString *)[v7 copy];
  EAName = self->_EAName;
  self->_EAName = v28;

  uint64_t v30 = (NSString *)[v10 copy];
  EAManufacturer = self->_EAManufacturer;
  self->_EAManufacturer = v30;

  uint64_t v32 = (NSString *)[v13 copy];
  EAModelNumber = self->_EAModelNumber;
  self->_EAModelNumber = v32;

  uint64_t v34 = (NSString *)[v16 copy];
  EASerialNumber = self->_EASerialNumber;
  self->_EASerialNumber = v34;

  uint64_t v36 = (NSString *)[v19 copy];
  EAHardwareRevision = self->_EAHardwareRevision;
  self->_EAHardwareRevision = v36;

  uint64_t v38 = (NSString *)[v22 copy];
  EAFirmwareRevisionActive = self->_EAFirmwareRevisionActive;
  self->_EAFirmwareRevisionActive = v38;

  if (v24)
  {
    CFDataRef v40 = (NSString *)[v24 copy];
    EAFirmwareRevisionPending = self->_EAFirmwareRevisionPending;
    self->_EAFirmwareRevisionPending = v40;
  }

  else
  {
    EAFirmwareRevisionPending = self->_EAFirmwareRevisionPending;
    self->_EAFirmwareRevisionPending = 0LL;
  }

  if (v25)
  {
    BOOL v42 = (NSString *)[v25 copy];
    EAPPID = self->_EAPPID;
    self->_EAPPID = v42;
  }

  else
  {
    EAPPID = self->_EAPPID;
    self->_EAPPID = 0LL;
  }

  if (v90)
  {
    int v44 = (NSString *)[v90 copy];
    EARegionCode = self->_EARegionCode;
    self->_EARegionCode = v44;
  }

  else
  {
    EARegionCode = self->_EARegionCode;
    self->_EARegionCode = 0LL;
  }

  if (v89)
  {
    uint64_t v46 = (NSNumber *)[v89 copy];
    EAVendorID = self->_EAVendorID;
    self->_EAVendorID = v46;
  }

  else
  {
    EAVendorID = self->_EAVendorID;
    self->_EAVendorID = 0LL;
  }

  v87 = v10;
  v88 = v7;
  uint64_t v86 = v27;
  if (v27)
  {
    uint64_t v48 = v27;
    uint64_t v49 = v25;
    uint64_t v50 = (NSNumber *)[v48 copy];
    EAProductID = self->_EAProductID;
    self->_EAProductID = v50;
  }

  else
  {
    uint64_t v49 = v25;
    EAProductID = self->_EAProductID;
    self->_EAProductID = 0LL;
  }

  unint64_t v52 = v24;

  if (gLogObjects && gNumLogObjects >= 10)
  {
    unsigned __int8 v53 = v22;
    uint64_t v54 = v19;
    int v55 = (os_log_s *)*(id *)(gLogObjects + 72);
  }

  else
  {
    unsigned __int8 v53 = v22;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v54 = v19;
    int v55 = (os_log_s *)&_os_log_default;
    uint64_t v56 = &_os_log_default;
  }

  CFIndex v57 = v13;
  if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG)) {
    -[ACCExternalAccessory updateAccessoryInfo].cold.3(self);
  }

  uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue(-[ACCExternalAccessory EAAccessoryDictionary](self, "EAAccessoryDictionary"));
  int v59 = [v58 mutableCopy];

  CFComparisonResult v60 = (void *)objc_claimAutoreleasedReturnValue(-[ACCExternalAccessory EAName](self, "EAName"));
  if (v60)
  {
    [v59 setObject:v60 forKey:kACCExternalAccessoryNameKey];
  }

  else
  {
    uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    [v59 setObject:v61 forKey:kACCExternalAccessoryNameKey];
  }

  int v62 = (void *)objc_claimAutoreleasedReturnValue(-[ACCExternalAccessory EAManufacturer](self, "EAManufacturer"));
  if (v62)
  {
    [v59 setObject:v62 forKey:kACCExternalAccessoryManufacturerKey];
  }

  else
  {
    __int16 v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    [v59 setObject:v63 forKey:kACCExternalAccessoryManufacturerKey];
  }

  int v64 = (void *)objc_claimAutoreleasedReturnValue(-[ACCExternalAccessory EAModelNumber](self, "EAModelNumber"));
  if (v64)
  {
    [v59 setObject:v64 forKey:kACCExternalAccessoryModelNumberKey];
  }

  else
  {
    __int16 v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    [v59 setObject:v65 forKey:kACCExternalAccessoryModelNumberKey];
  }

  uint32_t v66 = (void *)objc_claimAutoreleasedReturnValue(-[ACCExternalAccessory EASerialNumber](self, "EASerialNumber"));
  if (v66)
  {
    [v59 setObject:v66 forKey:kACCExternalAccessorySerialNumberKey];
  }

  else
  {
    uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    [v59 setObject:v67 forKey:kACCExternalAccessorySerialNumberKey];
  }

  int v68 = (void *)objc_claimAutoreleasedReturnValue(-[ACCExternalAccessory EAFirmwareRevisionActive](self, "EAFirmwareRevisionActive"));
  if (v68)
  {
    [v59 setObject:v68 forKey:kACCExternalAccessoryFirmwareRevisionActiveKey];
  }

  else
  {
    __int16 v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    [v59 setObject:v69 forKey:kACCExternalAccessoryFirmwareRevisionActiveKey];
  }

  uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue(-[ACCExternalAccessory EAFirmwareRevisionPending](self, "EAFirmwareRevisionPending"));
  if (v70)
  {
    [v59 setObject:v70 forKey:kACCExternalAccessoryFirmwareRevisionPendingKey];
  }

  else
  {
    int v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    [v59 setObject:v71 forKey:kACCExternalAccessoryFirmwareRevisionPendingKey];
  }

  unsigned int v72 = (void *)objc_claimAutoreleasedReturnValue(-[ACCExternalAccessory EAHardwareRevision](self, "EAHardwareRevision"));
  if (v72)
  {
    [v59 setObject:v72 forKey:kACCExternalAccessoryHardwareRevisionKey];
  }

  else
  {
    __int16 v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    [v59 setObject:v73 forKey:kACCExternalAccessoryHardwareRevisionKey];
  }

  int v74 = (void *)objc_claimAutoreleasedReturnValue(-[ACCExternalAccessory EAPPID](self, "EAPPID"));
  if (v74)
  {
    [v59 setObject:v74 forKey:kACCExternalAccessoryPPIDKey];
  }

  else
  {
    uint32_t v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    [v59 setObject:v75 forKey:kACCExternalAccessoryPPIDKey];
  }

  uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue(-[ACCExternalAccessory EARegionCode](self, "EARegionCode"));
  if (v76)
  {
    [v59 setObject:v76 forKey:kACCExternalAccessoryRegionCodeKey];
  }

  else
  {
    int v77 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    [v59 setObject:v77 forKey:kACCExternalAccessoryRegionCodeKey];
  }

  v78 = (void *)objc_claimAutoreleasedReturnValue(-[ACCExternalAccessory EAVendorID](self, "EAVendorID"));
  if (v78)
  {
    [v59 setObject:v78 forKey:kACCExternalAccessoryVendorIDKey];
  }

  else
  {
    unsigned int v79 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    [v59 setObject:v79 forKey:kACCExternalAccessoryVendorIDKey];
  }

  uint64_t v80 = (void *)objc_claimAutoreleasedReturnValue(-[ACCExternalAccessory EAProductID](self, "EAProductID"));
  if (v80)
  {
    [v59 setObject:v80 forKey:kACCExternalAccessoryProductIDKey];
  }

  else
  {
    uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    [v59 setObject:v81 forKey:kACCExternalAccessoryProductIDKey];
  }

  uint64_t v82 = (NSDictionary *)[v59 copy];
  EAAccessoryDictionary = self->_EAAccessoryDictionary;
  self->_EAAccessoryDictionary = v82;

  if (gLogObjects && gNumLogObjects >= 10)
  {
    uint64_t v84 = (os_log_s *)*(id *)(gLogObjects + 72);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v84 = (os_log_s *)&_os_log_default;
    uint64_t v85 = &_os_log_default;
  }

  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG)) {
    -[ACCExternalAccessory updateAccessoryInfo].cold.1(self);
  }
}

            uint64_t v20 = v6[6];
            uint64_t v21 = v6[7];
            __int16 v22 = v6[9];
            goto LABEL_22;
          }

  __break(0x5500u);
  return result;
}

BOOL mfi4Auth_endpoint_getAccessoryUserName(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = 0LL;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2000000000LL;
  char v13 = 0;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      BOOL v4 = *(os_log_s **)(gLogObjects + 440);
    }

    else
    {
      BOOL v4 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_endpoint_getAccessoryUserName",  buf,  2u);
    }

    unsigned int v5 = *(dispatch_queue_s **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = __mfi4Auth_endpoint_getAccessoryUserName_block_invoke;
    block[3] = &unk_1001F9D70;
    block[5] = &v10;
    void block[6] = a1;
    block[4] = a2;
    dispatch_sync(v5, block);
    BOOL v6 = *((_BYTE *)v11 + 24) != 0;
  }

  else
  {
    BOOL v6 = 0LL;
  }

  _Block_object_dispose(&v10, 8);
  return v6;
}

void __mfi4Auth_endpoint_getAccessoryUserName_block_invoke(uint64_t a1)
{
  if (_mfi4Auth_endpoint_waitSessionClosed(*(uint64_t **)(a1 + 48)))
  {
    if (acc_endpoint_getTransportType(**(void **)(a1 + 48)) == 13) {
      acc_endpoint_setProperty( **(pthread_mutex_t ***)(a1 + 48),  kCFACCProperties_Endpoint_NFC_RequestSessionOpen,  kCFBooleanTrue);
    }
    uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 8LL);
    *(_DWORD *)(v2 + 36) = 9;
    BOOL v3 = malloc(0x12uLL);
    uint64_t v4 = 0LL;
    *(void *)(v2 + 40) = v3;
    uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v6 = *(void *)(v5 + 40);
    do
    {
      *(_WORD *)(v6 + 2 * v4) = v4 + 21250;
      ++v4;
    }

    while (v4 != 9);
    *(_DWORD *)(v5 + 32) = 9;
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 64LL) = _Block_copy(*(const void **)(a1 + 32));
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
    CFTypeID v7 = (os_log_s *)logObjectForModule_3();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      __mfi4Auth_endpoint_getAccessoryUserName_block_invoke_cold_1();
    }
  }

  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1LL, 0LL);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

BOOL mfi4Auth_endpoint_provisionPairing(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = 0LL;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2000000000LL;
  char v13 = 0;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v4 = *(os_log_s **)(gLogObjects + 440);
    }

    else
    {
      uint64_t v4 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_provisionPairing", buf, 2u);
    }

    uint64_t v5 = *(dispatch_queue_s **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = __mfi4Auth_endpoint_provisionPairing_block_invoke;
    block[3] = &unk_1001F9D98;
    block[5] = &v10;
    void block[6] = a1;
    block[4] = a2;
    dispatch_sync(v5, block);
    BOOL v6 = *((_BYTE *)v11 + 24) != 0;
  }

  else
  {
    BOOL v6 = 0LL;
  }

  _Block_object_dispose(&v10, 8);
  return v6;
}

void __mfi4Auth_endpoint_provisionPairing_block_invoke(uint64_t a1)
{
  if (_mfi4Auth_endpoint_waitSessionClosed(*(uint64_t **)(a1 + 48)))
  {
    if (acc_endpoint_getTransportType(**(void **)(a1 + 48)) == 13) {
      acc_endpoint_setProperty( **(pthread_mutex_t ***)(a1 + 48),  kCFACCProperties_Endpoint_NFC_RequestSessionOpen,  kCFBooleanTrue);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 32LL) = 4;
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 64LL) = _Block_copy(*(const void **)(a1 + 32));
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
    uint64_t v2 = (os_log_s *)logObjectForModule_3();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      __mfi4Auth_endpoint_provisionPairing_block_invoke_cold_1();
    }
  }

  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1LL, 0LL);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

uint64_t mfi4Auth_endpoint_erasePairing(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0LL;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2000000000LL;
  char v14 = 0;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v4 = *(os_log_s **)(gLogObjects + 440);
    }

    else
    {
      uint64_t v4 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_erasePairing", buf, 2u);
    }

    uint64_t v5 = *(dispatch_queue_s **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = __mfi4Auth_endpoint_erasePairing_block_invoke;
    block[3] = &unk_1001F9DC0;
    block[5] = &v11;
    void block[6] = a1;
    block[4] = a2;
    dispatch_sync(v5, block);
  }

  else
  {
    BOOL v8 = (os_log_s *)logObjectForModule_3();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_endpoint_erasePairing: !pProtocolEndpoint",  buf,  2u);
    }
  }

  uint64_t v6 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v6;
}

void __mfi4Auth_endpoint_erasePairing_block_invoke(uint64_t a1)
{
  if (_mfi4Auth_endpoint_waitSessionClosed(*(uint64_t **)(a1 + 48)))
  {
    if (acc_endpoint_getTransportType(**(void **)(a1 + 48)) == 13) {
      acc_endpoint_setProperty( **(pthread_mutex_t ***)(a1 + 48),  kCFACCProperties_Endpoint_NFC_RequestSessionOpen,  kCFBooleanTrue);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 32LL) = 5;
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 64LL) = _Block_copy(*(const void **)(a1 + 32));
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
    uint64_t v2 = (os_log_s *)logObjectForModule_3();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      __mfi4Auth_endpoint_erasePairing_block_invoke_cold_1();
    }
  }

  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1LL, 0LL);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

uint64_t mfi4Auth_endpoint_setPublicNvmKeyValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0LL;
  BOOL v8 = &v7;
  uint64_t v9 = 0x2000000000LL;
  char v10 = 0;
  BOOL v3 = *(dispatch_queue_s **)(a1 + 16);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000LL;
  v6[2] = __mfi4Auth_endpoint_setPublicNvmKeyValues_block_invoke;
  v6[3] = &unk_1001F9DE8;
  v6[6] = a1;
  v6[7] = a2;
  v6[4] = a3;
  v6[5] = &v7;
  dispatch_sync(v3, v6);
  uint64_t v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t __mfi4Auth_endpoint_setPublicNvmKeyValues_block_invoke(uint64_t a1)
{
  uint64_t result = _mfi4Auth_endpoint_setNvmKeyValues( *(void *)(a1 + 48),  *(const __CFDictionary **)(a1 + 56),  *(const void **)(a1 + 32),  1);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1LL, 0LL);
    return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  return result;
}

BOOL _mfi4Auth_endpoint_setNvmKeyValues(BOOL result, const __CFDictionary *a2, const void *a3, int a4)
{
  if (!result) {
    return result;
  }
  uint64_t v7 = result;
  if (_mfi4Auth_endpoint_waitSessionClosed((uint64_t *)result))
  {
    unsigned __int8 Count = CFDictionaryGetCount(a2);
    uint64_t v9 = Count;
    char v10 = (const void **)calloc(Count, 8uLL);
    uint64_t v11 = (const void **)calloc(Count, 8uLL);
    uint64_t result = 0LL;
    if (!v10) {
      return result;
    }
    if (!v11) {
      return result;
    }
    CFDictionaryGetKeysAndValues(a2, v10, v11);
    uint64_t v12 = (unsigned __int16 *)calloc(Count, 2uLL);
    uint64_t v13 = calloc(Count, 8uLL);
    char v14 = calloc(Count, 4uLL);
    uint64_t result = 0LL;
    unsigned __int8 v53 = v12;
    if (!v12 || !v13 || !v14) {
      return result;
    }
    unsigned __int8 v49 = Count;
    uint64_t v50 = a3;
    int v51 = v14;
    unint64_t v52 = v13;
    if (gLogObjects && gNumLogObjects >= 56)
    {
      char v15 = *(os_log_s **)(gLogObjects + 440);
    }

    else
    {
      char v15 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_setNvmKeyValues", buf, 2u);
    }

    if (!Count)
    {
      int v43 = 0;
LABEL_58:
      uint64_t v44 = *(void *)(v7 + 8);
      *(_DWORD *)(v44 + 32) = 6;
      *(_DWORD *)(v44 + 36) = v43;
      *(void *)(v44 + 40) = v53;
      *(void *)(v44 + 4_Block_object_dispose(va, 8) = v52;
      *(void *)(v44 + 56) = v51;
      *(void *)(*(void *)(v7 + 8) + 64LL) = _Block_copy(v50);
      if (acc_endpoint_getTransportType(*(void *)v7) == 13) {
        acc_endpoint_setProperty( *(pthread_mutex_t **)v7,  kCFACCProperties_Endpoint_NFC_RequestSessionOpen,  kCFBooleanTrue);
      }
      return 1LL;
    }

    uint64_t v48 = v7;
    uint64_t v17 = v51;
    uint64_t v16 = (UInt8 **)v13;
    uint64_t v18 = v53;
    while (1)
    {
      unsigned __int16 valuePtr = 0;
      CFTypeID v19 = CFGetTypeID(*v10);
      CFTypeID TypeID = CFStringGetTypeID();
      uint64_t v21 = (const __CFString *)*v10;
      if (v19 == TypeID)
      {
        unsigned __int16 valuePtr = CFStringGetIntValue(v21);
      }

      else
      {
        CFTypeID v22 = CFGetTypeID(v21);
        if (v22 != CFNumberGetTypeID())
        {
          if (gLogObjects && gNumLogObjects >= 56)
          {
            __int16 v45 = *(os_log_s **)(gLogObjects + 440);
          }

          else
          {
            __int16 v45 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            uint64_t v46 = "mfi4Auth_endpoint_setNvmKeyValues: bad key type";
LABEL_74:
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, v46, buf, 2u);
          }

          return 0LL;
        }

        CFNumberGetValue((CFNumberRef)*v10, kCFNumberSInt16Type, &valuePtr);
      }

      uint64_t v23 = gLogObjects;
      int v24 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v25 = *(os_log_s **)(gLogObjects + 440);
      }

      else
      {
        uint64_t v25 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)&uint8_t buf[4] = v23;
          *(_WORD *)&buf[12] = 1024;
          int v56 = v24;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
        }
      }

      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = a4;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = valuePtr;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_endpoint_setNvmKeyValues: public:%d, 0x%x",  buf,  0xEu);
      }

      if (a4)
      {
      }

      else if (valuePtr - 21504 < 0xFFFFFF50)
      {
        return 0LL;
      }

      *uint64_t v18 = valuePtr;
      CFTypeID v26 = CFGetTypeID(*v11);
      if (v26 == CFStringGetTypeID())
      {
        uint64_t v27 = gLogObjects;
        int v28 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v29 = *(os_log_s **)(gLogObjects + 440);
        }

        else
        {
          uint64_t v29 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)&uint8_t buf[4] = v27;
            *(_WORD *)&buf[12] = 1024;
            int v56 = v28;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          }
        }

        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_endpoint_setNvmKeyValues: string value",  buf,  2u);
        }

        CFIndex Length = CFStringGetLength((CFStringRef)*v11);
        CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
        *(void *)buf = 0LL;
        int v39 = (UInt8 *)calloc(MaximumSizeForEncoding + 1, 1uLL);
        *uint64_t v16 = v39;
        v57.location = 0LL;
        v57.length = Length;
        CFStringGetBytes((CFStringRef)*v11, v57, 0x8000100u, 0, 0, v39, MaximumSizeForEncoding, (CFIndex *)buf);
        *uint64_t v17 = *(_DWORD *)buf + 1;
      }

      else
      {
        CFTypeID v30 = CFGetTypeID(*v11);
        CFTypeID v31 = CFDataGetTypeID();
        uint64_t v32 = gLogObjects;
        int v33 = gNumLogObjects;
        if (gLogObjects) {
          BOOL v34 = gNumLogObjects <= 55;
        }
        else {
          BOOL v34 = 1;
        }
        int v35 = !v34;
        if (v30 != v31)
        {
          if (v35)
          {
            __int16 v45 = *(os_log_s **)(gLogObjects + 440);
          }

          else
          {
            __int16 v45 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            uint64_t v46 = "mfi4Auth_endpoint_setNvmKeyValues: bad value type";
            goto LABEL_74;
          }

          return 0LL;
        }

        if (v35)
        {
          uint64_t v36 = *(os_log_s **)(gLogObjects + 440);
        }

        else
        {
          uint64_t v36 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)&uint8_t buf[4] = v32;
            *(_WORD *)&buf[12] = 1024;
            int v56 = v33;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          }
        }

        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_endpoint_setNvmKeyValues: data value",  buf,  2u);
        }

        size_t v40 = (int)CFDataGetLength((CFDataRef)*v11);
        __int16 v41 = (UInt8 *)calloc(v40, 1uLL);
        *uint64_t v16 = v41;
        BytePtr = CFDataGetBytePtr((CFDataRef)*v11);
        memcpy(v41, BytePtr, v40);
        *uint64_t v17 = v40;
      }

      ++v18;
      ++v16;
      ++v17;
      ++v11;
      ++v10;
      if (!--v9)
      {
        int v43 = v49;
        uint64_t v7 = v48;
        goto LABEL_58;
      }
    }
  }

  uint64_t v47 = (os_log_s *)logObjectForModule_3();
  uint64_t result = os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
  if (result)
  {
    _mfi4Auth_endpoint_setNvmKeyValues_cold_4();
    return 0LL;
  }

  return result;
}

uint64_t mfi4Auth_endpoint_getPublicNvmKeyValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0LL;
  BOOL v8 = &v7;
  uint64_t v9 = 0x2000000000LL;
  char v10 = 0;
  if (a1)
  {
    BOOL v3 = *(dispatch_queue_s **)(a1 + 16);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 0x40000000LL;
    v6[2] = __mfi4Auth_endpoint_getPublicNvmKeyValues_block_invoke;
    v6[3] = &unk_1001F9E10;
    v6[6] = a1;
    v6[7] = a2;
    v6[4] = a3;
    v6[5] = &v7;
    dispatch_sync(v3, v6);
  }

  else
  {
    (*(void (**)(uint64_t, void, void))(a3 + 16))(a3, 0LL, 0LL);
  }

  uint64_t v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v4;
}

void __mfi4Auth_endpoint_getPublicNvmKeyValues_block_invoke(uint64_t a1)
{
  if (_mfi4Auth_endpoint_waitSessionClosed(*(uint64_t **)(a1 + 48)))
  {
    unsigned __int8 Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 56));
    uint64_t v3 = Count;
    uint64_t v4 = calloc(Count, 2uLL);
    if (v4)
    {
      uint64_t v5 = v4;
      if (Count)
      {
        int v14 = Count;
        CFIndex v6 = 0LL;
        while (1)
        {
          unsigned __int16 valuePtr = -21846;
          ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v6);
          CFNumberGetValue(ValueAtIndex, kCFNumberSInt16Type, &valuePtr);
          uint64_t v8 = gLogObjects;
          int v9 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 56)
          {
            char v10 = *(os_log_s **)(gLogObjects + 440);
          }

          else
          {
            char v10 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)uint64_t v17 = v8;
              *(_WORD *)&v17[8] = 1024;
              v18[0] = v9;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              char v10 = (os_log_s *)&_os_log_default;
            }
          }

          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109632;
            *(_DWORD *)uint64_t v17 = v6;
            *(_WORD *)&v17[4] = 1024;
            *(_DWORD *)&v17[6] = v14;
            LOWORD(v18[0]) = 1024;
            *(_DWORD *)((char *)v18 + 2) = valuePtr;
            _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_endpoint_getPublicNvmKeyValues: [%d / %d] 0x%x",  buf,  0x14u);
          }

          v5[v6++] = valuePtr;
          if (v3 == v6)
          {
            int v11 = v14;
            goto LABEL_16;
          }
        }

        *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
        free(v5);
      }

      else
      {
        int v11 = 0;
LABEL_16:
        uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8LL);
        *(_DWORD *)(v12 + 32) = 7;
        *(_DWORD *)(v12 + 36) = v11;
        *(void *)(v12 + 40) = v5;
        *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 64LL) = _Block_copy(*(const void **)(a1 + 32));
        if (acc_endpoint_getTransportType(**(void **)(a1 + 48)) == 13) {
          acc_endpoint_setProperty( **(pthread_mutex_t ***)(a1 + 48),  kCFACCProperties_Endpoint_NFC_RequestSessionOpen,  kCFBooleanTrue);
        }
        *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
      }
    }

    else
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
    }
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
    uint64_t v13 = (os_log_s *)logObjectForModule_3();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      __mfi4Auth_endpoint_getPublicNvmKeyValues_block_invoke_cold_1();
    }
  }

  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1LL, 0LL);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

BOOL mfi4Auth_endpoint_getPrivateNvmKeyValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2000000000LL;
  char v10 = 0;
  if (a1)
  {
    uint64_t v3 = *(dispatch_queue_s **)(a1 + 16);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 0x40000000LL;
    v6[2] = __mfi4Auth_endpoint_getPrivateNvmKeyValues_block_invoke;
    v6[3] = &unk_1001F9E38;
    v6[6] = a1;
    v6[7] = a2;
    v6[4] = a3;
    v6[5] = &v7;
    dispatch_sync(v3, v6);
    BOOL v4 = *((_BYTE *)v8 + 24) != 0;
  }

  else
  {
    BOOL v4 = 0LL;
  }

  _Block_object_dispose(&v7, 8);
  return v4;
}

void __mfi4Auth_endpoint_getPrivateNvmKeyValues_block_invoke(uint64_t a1)
{
  if (_mfi4Auth_endpoint_waitSessionClosed(*(uint64_t **)(a1 + 48)))
  {
    unsigned __int8 Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 56));
    uint64_t v3 = calloc(Count, 2uLL);
    if (!v3)
    {
LABEL_15:
      *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
      goto LABEL_12;
    }

    BOOL v4 = v3;
    if (Count)
    {
      CFIndex v5 = 0LL;
      while (1)
      {
        unsigned __int16 valuePtr = -21846;
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v5);
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt16Type, &valuePtr);
        v4[v5++] = valuePtr;
        if (Count == v5)
        {
          int v7 = Count;
          goto LABEL_9;
        }
      }
    }

    int v7 = 0;
LABEL_9:
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8LL);
    *(_DWORD *)(v8 + 32) = 7;
    *(_DWORD *)(v8 + 36) = v7;
    *(void *)(v8 + 40) = v4;
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 64LL) = _Block_copy(*(const void **)(a1 + 32));
    if (acc_endpoint_getTransportType(**(void **)(a1 + 48)) == 13) {
      acc_endpoint_setProperty( **(pthread_mutex_t ***)(a1 + 48),  kCFACCProperties_Endpoint_NFC_RequestSessionOpen,  kCFBooleanTrue);
    }
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
    uint64_t v9 = (os_log_s *)logObjectForModule_3();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      __mfi4Auth_endpoint_getPrivateNvmKeyValues_block_invoke_cold_1();
    }
  }

LABEL_12:
  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1LL, 0LL);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

    int v11 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      acc_connection_create_cold_2();
    }
    goto LABEL_14;
  }

  return v7;
}

  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v12 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    uint64_t v12 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = *a1;
    int v14 = *((_DWORD *)a1 + 286);
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&uint8_t buf[4] = v13;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v14;
    *(_WORD *)&_BYTE buf[14] = 1024;
    LODWORD(v23) = DWORD2(v19);
    WORD2(v23) = 1024;
    *(_DWORD *)((char *)&v23 + 6) = inited;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "[AccAuth][1Way] handleCertificateHash: sessionID %d, role %d, certificateDataLen %d, errorNo %d \n",  buf,  0x1Au);
  }

  _acc_auth_protocol_cleanupCertificateData((uint64_t)&v19);
  return inited;
}

  uint64_t v12 = 4294967294LL;
  if (!a4)
  {
    uint64_t v13 = 15;
    goto LABEL_14;
  }

  return v13;
}

  __break(0x5519u);
  return result;
}

uint64_t mfi4Auth_endpoint_setPrivateNvmKeyValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2000000000LL;
  char v10 = 0;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 16);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000LL;
  v6[2] = __mfi4Auth_endpoint_setPrivateNvmKeyValues_block_invoke;
  v6[3] = &unk_1001F9E60;
  v6[6] = a1;
  v6[7] = a2;
  v6[4] = a3;
  v6[5] = &v7;
  dispatch_sync(v3, v6);
  uint64_t v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t __mfi4Auth_endpoint_setPrivateNvmKeyValues_block_invoke(uint64_t a1)
{
  uint64_t result = _mfi4Auth_endpoint_setNvmKeyValues( *(void *)(a1 + 48),  *(const __CFDictionary **)(a1 + 56),  *(const void **)(a1 + 32),  0);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1LL, 0LL);
    return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  return result;
}

uint64_t mfi4Auth_endpoint_beginVendorKeyErase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0LL;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2000000000LL;
  char v14 = 0;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v4 = *(os_log_s **)(gLogObjects + 440);
    }

    else
    {
      uint64_t v4 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_endpoint_beginVendorKeyErase",  buf,  2u);
    }

    CFIndex v5 = *(dispatch_queue_s **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = __mfi4Auth_endpoint_beginVendorKeyErase_block_invoke;
    block[3] = &unk_1001F9E88;
    block[5] = &v11;
    void block[6] = a1;
    block[4] = a2;
    dispatch_sync(v5, block);
  }

  else
  {
    uint64_t v8 = (os_log_s *)logObjectForModule_3();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_endpoint_beginVendorKeyErase: !pProtocolEndpoint",  buf,  2u);
    }
  }

  uint64_t v6 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v6;
}

void __mfi4Auth_endpoint_beginVendorKeyErase_block_invoke(uint64_t a1)
{
  if (_mfi4Auth_endpoint_waitSessionClosed(*(uint64_t **)(a1 + 48)))
  {
    if (acc_endpoint_getTransportType(**(void **)(a1 + 48)) == 13) {
      acc_endpoint_setProperty( **(pthread_mutex_t ***)(a1 + 48),  kCFACCProperties_Endpoint_NFC_RequestSessionOpen,  kCFBooleanTrue);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 32LL) = 10;
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 64LL) = _Block_copy(*(const void **)(a1 + 32));
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
    uint64_t v2 = (os_log_s *)logObjectForModule_3();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      __mfi4Auth_endpoint_beginVendorKeyErase_block_invoke_cold_1();
    }
  }

  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1LL, 0LL);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

uint64_t mfi4Auth_endpoint_continueVendorKeyErase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = 0LL;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2000000000LL;
  char v19 = 0;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v9 = *(os_log_s **)(gLogObjects + 440);
    }

    else
    {
      uint64_t v9 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_endpoint_continueVendorKeyErase",  buf,  2u);
    }

    char v10 = *(dispatch_queue_s **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = __mfi4Auth_endpoint_continueVendorKeyErase_block_invoke;
    block[3] = &unk_1001F9EB0;
    block[4] = a5;
    block[5] = &v16;
    void block[6] = a1;
    void block[7] = a2;
    block[8] = a3;
    dispatch_sync(v10, block);
  }

  else
  {
    uint64_t v13 = (os_log_s *)logObjectForModule_3();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_endpoint_continueVendorKeyErase: !pProtocolEndpoint",  buf,  2u);
    }
  }

  uint64_t v11 = *((unsigned __int8 *)v17 + 24);
  _Block_object_dispose(&v16, 8);
  return v11;
}

void __mfi4Auth_endpoint_continueVendorKeyErase_block_invoke(uint64_t a1)
{
  uint64_t v2 = acc_endpoint_copyProperty(**(pthread_mutex_t ***)(a1 + 48), kCFACCProperties_Endpoint_NFC_SessionOpen);
  if (!v2)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
    CFIndex v5 = (os_log_s *)logObjectForModule_3();
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    __int16 v10 = 0;
    uint64_t v6 = "continueVendorKeyErase: !propertyValue";
    uint64_t v7 = (uint8_t *)&v10;
    goto LABEL_16;
  }

  uint64_t v3 = (const __CFBoolean *)v2;
  CFTypeID v4 = CFGetTypeID(v2);
  if (v4 != CFBooleanGetTypeID())
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
    CFIndex v5 = (os_log_s *)logObjectForModule_3();
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    __int16 v9 = 0;
    uint64_t v6 = "continueVendorKeyErase: !CFBooleanGetTypeID";
    uint64_t v7 = (uint8_t *)&v9;
    goto LABEL_16;
  }

  if (v3 == kCFBooleanTrue)
  {
    dispatch_source_set_timer( *(dispatch_source_t *)(*(void *)(a1 + 48) + 32LL),  0xFFFFFFFFFFFFFFFFLL,  0xFFFFFFFFFFFFFFFFLL,  0LL);
LABEL_6:
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 32LL) = 11;
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 64LL) = _Block_copy(*(const void **)(a1 + 32));
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = _mfi4Auth_endpoint_requestNvmErasePublicKey( *(void *)(a1 + 48),  0x5200u,  *(const __CFData **)(a1 + 56),  *(const __CFData **)(a1 + 64));
    goto LABEL_7;
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
  CFIndex v5 = (os_log_s *)logObjectForModule_3();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v8 = 0;
    uint64_t v6 = "continueVendorKeyErase: !kCFBooleanTrue";
    uint64_t v7 = (uint8_t *)&v8;
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v6, v7, 2u);
  }

uint64_t _mfi4Auth_endpoint_requestNvmErasePublicKey( uint64_t a1, unsigned int a2, const __CFData *a3, const __CFData *a4)
{
  uint64_t v4 = a1;
  uint64_t v21 = 0LL;
  if (!a1)
  {
    uint64_t v16 = (os_log_s *)logObjectForModule_3();
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
      return v4;
    }
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "!pProtocolEndpoint", v20, 2u);
    goto LABEL_16;
  }

  if (gLogObjects && gNumLogObjects >= 56)
  {
    __int16 v8 = *(os_log_s **)(gLogObjects + 440);
  }

  else
  {
    __int16 v8 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "endpoint_requestNvmErasePublicKey", buf, 2u);
  }

  uint64_t v9 = *(void *)v4;
  if (!*(void *)v4 || (__int16 v10 = *(const void **)(v9 + 16)) == 0LL)
  {
    uint64_t v12 = (os_log_s *)logObjectForModule_3();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      _mfi4Auth_endpoint_requestNvmErasePublicKey_cold_1();
    }
LABEL_16:
    __int16 v10 = 0LL;
    goto LABEL_17;
  }

  CFRetain(*(CFTypeRef *)(v9 + 16));
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v11 = *(os_log_s **)(gLogObjects + 440);
  }

  else
  {
    uint64_t v11 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "endpoint_requestNvmErasePublicKey: block",  v18,  2u);
  }

  if (mfi4Auth_protocol_requestNvmErasePublicKey(*(void *)(v4 + 8), a3, a4, a2, (uint64_t *)&v21))
  {
    uint64_t v17 = (os_log_s *)logObjectForModule_3();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      _mfi4Auth_endpoint_requestNvmErasePublicKey_cold_3();
    }
  }

  else
  {
    EndpointWithUUID = acc_manager_getEndpointWithUUID(v10);
    if (EndpointWithUUID && EndpointWithUUID[7] == 14 && *((void *)EndpointWithUUID + 7))
    {
      mfi4Auth_endpoint_sendOutgoingData(v4, (uint64_t)v21);
      uint64_t v4 = 1LL;
      goto LABEL_27;
    }

    char v15 = (os_log_s *)logObjectForModule_3();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      _mfi4Auth_endpoint_requestNvmErasePublicKey_cold_2();
    }
  }

LABEL_17:
  uint64_t v4 = 0LL;
LABEL_27:
  if (v21)
  {
    free(v21);
    uint64_t v21 = 0LL;
  }

  if (v10) {
    CFRelease(v10);
  }
  return v4;
}

  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v17 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    uint64_t v17 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    uint64_t v18 = *a1;
    char v19 = *((_DWORD *)a1 + 286);
    uint64_t v20 = *(_DWORD *)(a2 + 8);
    uint64_t v21 = acc_auth_protocol_sizeofMessage((uint64_t)a5, a6, 0LL, 0LL);
    CFTypeID v26 = 67110144;
    uint64_t v27 = v18;
    int v28 = 1024;
    uint64_t v29 = v19;
    CFTypeID v30 = 1024;
    CFTypeID v31 = v20;
    uint64_t v32 = 1024;
    int v33 = v21;
    BOOL v34 = 1024;
    int v35 = inited;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "[AccAuth][1Way] prepareMessageWithExtLenForCertificateData: sessionID %d, role %d, certificateDataLen %d, msgSize %d, errorNo %d \n",  (uint8_t *)&v26,  0x20u);
  }

  return inited;
}

          uint64_t v16 = acc_strings_placeholder_Unknown();
          char v15 = (id)objc_claimAutoreleasedReturnValue(v16);
          if (!v6) {
            goto LABEL_20;
          }
          goto LABEL_18;
        }

  if (gLogObjects && gNumLogObjects >= 60)
  {
    uint64_t v12 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    uint64_t v12 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
    _qiAuth_protocol_getCachedCertLengthFromHeader_cold_1();
  }
  return v3;
}

    -[NSMutableDictionary setObject:forKey:]( v4,  "setObject:forKey:",  self->_genre,  @"ACCMediaLibraryPlaylistItemGenre");
    if ((self->_validMask & 0x40000) == 0) {
      return v4;
    }
    goto LABEL_10;
  }

  return (id)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_persistentID));
}

  uint64_t result = iap2_identification_getIdentificationInfo((uint64_t)v3);
  if (!result) {
    return result;
  }
  uint64_t v7 = result;
  if (iap2_accAuthentication_getState(v3) != 2
    || iap2_identification_getState((uint64_t)v3) != 6)
  {
    return 0LL;
  }

  uint64_t result = *(void *)(v7 + 96);
  if (result)
  {
    uint64_t v6 = a2;
    return CFSetContainsValue((CFSetRef)result, (const void *)v6) != 0;
  }

  return result;
}

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", self->_folder));
  -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v11, @"ACCMediaLibraryUpdatePlaylistIsFolder");

  validMask = self->_validMask;
  if ((validMask & 8) == 0)
  {
LABEL_8:
    if ((validMask & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }

    __break(0x5519u);
  }

  uint64_t v7 = (unint64_t)a1[1];
  uint64_t v11 = *a1;
  uint64_t v12 = v7;
  __int16 v8 = ccder_blob_decode_tl(&v11, 24LL, &v13);
  uint64_t result = 0LL;
  if (v8)
  {
    uint64_t v6 = v13;
    if (v13 == 15) {
      goto LABEL_8;
    }
  }

  return result;
}

        __break(0x5513u);
        goto LABEL_18;
      }
    }
  }

  return result;
}

  cc_clear(8 * v12, v24);
  cc_clear(8 * v12, a6);
LABEL_18:
  *(void *)(a1 + 16) = v35;
  return v29;
}

uint64_t mfi4Auth_endpoint_cancelVendorKeyErase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0LL;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2000000000LL;
  char v14 = 0;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v4 = *(os_log_s **)(gLogObjects + 440);
    }

    else
    {
      uint64_t v4 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_endpoint_cancelVendorKeyErase",  buf,  2u);
    }

    CFIndex v5 = *(dispatch_queue_s **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = __mfi4Auth_endpoint_cancelVendorKeyErase_block_invoke;
    block[3] = &unk_1001F9ED8;
    block[5] = &v11;
    void block[6] = a1;
    block[4] = a2;
    dispatch_sync(v5, block);
  }

  else
  {
    __int16 v8 = (os_log_s *)logObjectForModule_3();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_endpoint_cancelVendorKeyErase: !pProtocolEndpoint",  buf,  2u);
    }
  }

  uint64_t v6 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v6;
}

uint64_t __mfi4Auth_endpoint_cancelVendorKeyErase_block_invoke(uint64_t a1)
{
  uint64_t v2 = acc_endpoint_copyProperty(**(pthread_mutex_t ***)(a1 + 48), kCFACCProperties_Endpoint_NFC_SessionOpen);
  if (v2)
  {
    CFBooleanRef v3 = (CFBooleanRef)v2;
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 == CFBooleanGetTypeID() && v3 == kCFBooleanTrue)
    {
      dispatch_source_set_timer( *(dispatch_source_t *)(*(void *)(a1 + 48) + 32LL),  0xFFFFFFFFFFFFFFFFLL,  0xFFFFFFFFFFFFFFFFLL,  0LL);
      acc_endpoint_setProperty( **(pthread_mutex_t ***)(a1 + 48),  kCFACCProperties_Endpoint_NFC_RequestSessionOpen,  kCFBooleanFalse);
LABEL_9:
      char v6 = 1;
      goto LABEL_10;
    }
  }

  char v6 = 0;
LABEL_10:
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v6;
  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) {
    CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1LL, 0LL);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t mfi4Auth_endpoint_beginUserKeyErase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0LL;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2000000000LL;
  char v14 = 0;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      CFTypeID v4 = *(os_log_s **)(gLogObjects + 440);
    }

    else
    {
      CFTypeID v4 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "mfi4Auth_endpoint_beginUserKeyErase", buf, 2u);
    }

    CFIndex v5 = *(dispatch_queue_s **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = __mfi4Auth_endpoint_beginUserKeyErase_block_invoke;
    block[3] = &unk_1001F9F00;
    block[5] = &v11;
    void block[6] = a1;
    block[4] = a2;
    dispatch_sync(v5, block);
  }

  else
  {
    __int16 v8 = (os_log_s *)logObjectForModule_3();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_endpoint_beginUserKeyErase: !pProtocolEndpoint",  buf,  2u);
    }
  }

  uint64_t v6 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v6;
}

void __mfi4Auth_endpoint_beginUserKeyErase_block_invoke(uint64_t a1)
{
  if (_mfi4Auth_endpoint_waitSessionClosed(*(uint64_t **)(a1 + 48)))
  {
    if (acc_endpoint_getTransportType(**(void **)(a1 + 48)) == 13) {
      acc_endpoint_setProperty( **(pthread_mutex_t ***)(a1 + 48),  kCFACCProperties_Endpoint_NFC_RequestSessionOpen,  kCFBooleanTrue);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 32LL) = 12;
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 64LL) = _Block_copy(*(const void **)(a1 + 32));
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
    uint64_t v2 = (os_log_s *)logObjectForModule_3();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      __mfi4Auth_endpoint_beginUserKeyErase_block_invoke_cold_1();
    }
  }

  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1LL, 0LL);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

uint64_t mfi4Auth_endpoint_continueUserKeyErase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = 0LL;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2000000000LL;
  char v19 = 0;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v9 = *(os_log_s **)(gLogObjects + 440);
    }

    else
    {
      uint64_t v9 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_endpoint_continueUserKeyErase",  buf,  2u);
    }

    __int16 v10 = *(dispatch_queue_s **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = __mfi4Auth_endpoint_continueUserKeyErase_block_invoke;
    block[3] = &unk_1001F9F28;
    block[4] = a5;
    block[5] = &v16;
    void block[6] = a1;
    void block[7] = a2;
    block[8] = a3;
    dispatch_sync(v10, block);
  }

  else
  {
    uint64_t v13 = (os_log_s *)logObjectForModule_3();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_endpoint_continueUserKeyErase: !pProtocolEndpoint",  buf,  2u);
    }
  }

  uint64_t v11 = *((unsigned __int8 *)v17 + 24);
  _Block_object_dispose(&v16, 8);
  return v11;
}

void __mfi4Auth_endpoint_continueUserKeyErase_block_invoke(uint64_t a1)
{
  uint64_t v2 = acc_endpoint_copyProperty(**(pthread_mutex_t ***)(a1 + 48), kCFACCProperties_Endpoint_NFC_SessionOpen);
  if (!v2)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
    CFIndex v5 = (os_log_s *)logObjectForModule_3();
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    __int16 v10 = 0;
    uint64_t v6 = "mfi4Auth_endpoint_continueUserKeyErase: !propertyValue";
    uint64_t v7 = (uint8_t *)&v10;
    goto LABEL_16;
  }

  CFBooleanRef v3 = (const __CFBoolean *)v2;
  CFTypeID v4 = CFGetTypeID(v2);
  if (v4 != CFBooleanGetTypeID())
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
    CFIndex v5 = (os_log_s *)logObjectForModule_3();
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    __int16 v9 = 0;
    uint64_t v6 = "mfi4Auth_endpoint_continueUserKeyErase: !CFBooleanGetTypeID";
    uint64_t v7 = (uint8_t *)&v9;
    goto LABEL_16;
  }

  if (v3 == kCFBooleanTrue)
  {
    dispatch_source_set_timer( *(dispatch_source_t *)(*(void *)(a1 + 48) + 32LL),  0xFFFFFFFFFFFFFFFFLL,  0xFFFFFFFFFFFFFFFFLL,  0LL);
LABEL_6:
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 32LL) = 13;
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 64LL) = _Block_copy(*(const void **)(a1 + 32));
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = _mfi4Auth_endpoint_requestNvmErasePublicKey( *(void *)(a1 + 48),  0x5300u,  *(const __CFData **)(a1 + 56),  *(const __CFData **)(a1 + 64));
    goto LABEL_7;
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
  CFIndex v5 = (os_log_s *)logObjectForModule_3();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v8 = 0;
    uint64_t v6 = "mfi4Auth_endpoint_continueUserKeyErase: !kCFBooleanTrue";
    uint64_t v7 = (uint8_t *)&v8;
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v6, v7, 2u);
  }

uint64_t mfi4Auth_endpoint_cancelUserKeyErase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0LL;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2000000000LL;
  char v14 = 0;
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 56)
    {
      CFTypeID v4 = *(os_log_s **)(gLogObjects + 440);
    }

    else
    {
      CFTypeID v4 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_endpoint_cancelUserKeyErase",  buf,  2u);
    }

    CFIndex v5 = *(dispatch_queue_s **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = __mfi4Auth_endpoint_cancelUserKeyErase_block_invoke;
    block[3] = &unk_1001F9F50;
    block[5] = &v11;
    void block[6] = a1;
    block[4] = a2;
    dispatch_sync(v5, block);
  }

  else
  {
    __int16 v8 = (os_log_s *)logObjectForModule_3();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_endpoint_cancelUserKeyErase: !pProtocolEndpoint",  buf,  2u);
    }
  }

  uint64_t v6 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v6;
}

uint64_t __mfi4Auth_endpoint_cancelUserKeyErase_block_invoke(uint64_t a1)
{
  uint64_t v2 = acc_endpoint_copyProperty(**(pthread_mutex_t ***)(a1 + 48), kCFACCProperties_Endpoint_NFC_SessionOpen);
  if (v2)
  {
    CFBooleanRef v3 = (CFBooleanRef)v2;
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 == CFBooleanGetTypeID() && v3 == kCFBooleanTrue)
    {
      dispatch_source_set_timer( *(dispatch_source_t *)(*(void *)(a1 + 48) + 32LL),  0xFFFFFFFFFFFFFFFFLL,  0xFFFFFFFFFFFFFFFFLL,  0LL);
      acc_endpoint_setProperty( **(pthread_mutex_t ***)(a1 + 48),  kCFACCProperties_Endpoint_NFC_RequestSessionOpen,  kCFBooleanFalse);
LABEL_9:
      char v6 = 1;
      goto LABEL_10;
    }
  }

  char v6 = 0;
LABEL_10:
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v6;
  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) {
    CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1LL, 0LL);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t mfi4Auth_endpoint_copyUserPrivateKey(uint64_t a1, uint64_t a2)
{
  CFErrorRef error = 0LL;
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4)
  {
    uint64_t v12 = (os_log_s *)logObjectForModule_3();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v18 = 646;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "copyUserPrivateKey: error:%d", buf, 8u);
    }

LABEL_11:
    __int16 v9 = CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1LL, 0LL);
    char v6 = 0LL;
LABEL_15:
    CFDataRef v7 = 0LL;
    uint64_t v8 = 0LL;
    CFErrorRef error = v9;
    goto LABEL_5;
  }

  CFIndex v5 = (__SecKey *)mfi4Auth_protocol_nvm_copyUserPublicKeyForSerialNumber(*(void *)(*(void *)(v4 + 712) + 80LL));
  if (!v5)
  {
    uint64_t v12 = (os_log_s *)logObjectForModule_3();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v18 = 650;
      goto LABEL_10;
    }

    goto LABEL_11;
  }

  char v6 = v5;
  CFDataRef v7 = SecKeyCopyExternalRepresentation(v5, &error);
  if (!v7)
  {
    uint64_t v13 = (os_log_s *)logObjectForModule_3();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v18 = 654;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "copyUserPrivateKey: error:%d", buf, 8u);
    }

    __int16 v9 = CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainCocoa, -1LL, 0LL);
    goto LABEL_15;
  }

  uint64_t v8 = 1LL;
  __int16 v9 = error;
LABEL_5:
  __int16 v10 = *(dispatch_queue_s **)(a1 + 16);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 0x40000000LL;
  v14[2] = __mfi4Auth_endpoint_copyUserPrivateKey_block_invoke;
  v14[3] = &unk_1001F9F78;
  char v15 = v8;
  v14[6] = v7;
  v14[7] = v9;
  v14[4] = a2;
  v14[5] = v6;
  dispatch_async(v10, v14);
  return v8;
}

  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v8 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v8 = (os_log_s *)&_os_log_default;
    __int16 v9 = &_os_log_default;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    if (a1) {
      uint64_t v11 = *(unsigned __int8 *)(a1 + 144);
    }
    else {
      uint64_t v11 = -1;
    }
    uint64_t v29 = 136316418;
    CFTypeID v30 = "_convertNVMEraseResponse";
    CFTypeID v31 = 1024;
    uint64_t v32 = 3090;
    int v33 = 1024;
    BOOL v34 = v11;
    int v35 = 1024;
    uint64_t v36 = a3;
    uint64_t v37 = 1024;
    uint64_t v38 = a2;
    int v39 = 1024;
    size_t v40 = v7;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "%s:%d negotiatedVersion %d, force %d, commandID 0x%04x -> 0x%04x",  (uint8_t *)&v29,  0x2Au);
  }

  return v7;
}

  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v8 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v8 = (os_log_s *)&_os_log_default;
    __int16 v9 = &_os_log_default;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    if (a1) {
      uint64_t v11 = *(unsigned __int8 *)(a1 + 144);
    }
    else {
      uint64_t v11 = -1;
    }
    uint64_t v29 = 136316418;
    CFTypeID v30 = "_convertNVMWriteResponse";
    CFTypeID v31 = 1024;
    uint64_t v32 = 3062;
    int v33 = 1024;
    BOOL v34 = v11;
    int v35 = 1024;
    uint64_t v36 = a3;
    uint64_t v37 = 1024;
    uint64_t v38 = a2;
    int v39 = 1024;
    size_t v40 = v7;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "%s:%d negotiatedVersion %d, force %d, commandID 0x%04x -> 0x%04x",  (uint8_t *)&v29,  0x2Au);
  }

  return v7;
}

  return v3;
}

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(-[ACCUserNotificationManager lock](self, "lock"));
  [v13 unlock];

  return v7;
}

      uint64_t v11 = acc_strings_placeholder_Unknown();
      __int16 v65 = (id)objc_claimAutoreleasedReturnValue(v11);
      if (!v6) {
        goto LABEL_14;
      }
      goto LABEL_12;
    }

  return v3;
}

  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v13 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v13 = (os_log_s *)&_os_log_default;
    char v14 = &_os_log_default;
  }

  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v19[0] = 67109120;
    v19[1] = inited;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_initIdentity: error:%d",  (uint8_t *)v19,  8u);
  }

  return inited;
}

uint64_t __mfi4Auth_endpoint_copyUserPrivateKey_block_invoke(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v2 = *(os_log_s **)(gLogObjects + 440);
  }

  else
  {
    uint64_t v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 64);
    BOOL v4 = *(void *)(a1 + 40) != 0LL;
    BOOL v5 = *(void *)(a1 + 48) != 0LL;
    BOOL v6 = *(void *)(a1 + 56) != 0LL;
    v8[0] = 67109888;
    v8[1] = v3;
    __int16 v9 = 1024;
    BOOL v10 = v4;
    __int16 v11 = 1024;
    BOOL v12 = v5;
    __int16 v13 = 1024;
    BOOL v14 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "copyUserPrivateKey: success:%d, key:%d, keyData:%d error:%d",  (uint8_t *)v8,  0x1Au);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id acc_userDefaults_BOOLForKey(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ACCUserDefaults sharedDefaults](&OBJC_CLASS___ACCUserDefaults, "sharedDefaults"));
  id v3 = [v2 BOOLForKey:a1];

  return v3;
}

id acc_userDefaults_copyIntegerForKey(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ACCUserDefaults sharedDefaults](&OBJC_CLASS___ACCUserDefaults, "sharedDefaults"));
  id v3 = [v2 integerForKey:a1];

  return v3;
}

id acc_userDefaultsIapd_copyIntegerForKey(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ACCUserDefaults sharedDefaultsIapd](&OBJC_CLASS___ACCUserDefaults, "sharedDefaultsIapd"));
  id v3 = [v2 integerForKey:a1];

  return v3;
}

id acc_userDefaultsLogging_BOOLForKey(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ACCUserDefaults sharedDefaultsLogging](&OBJC_CLASS___ACCUserDefaults, "sharedDefaultsLogging"));
  id v3 = [v2 BOOLForKey:a1];

  return v3;
}

uint64_t iAP2PacketParseBuffer( char *a1, int a2, uint64_t a3, unsigned int a4, _BYTE *a5, _DWORD *a6, _DWORD *a7, int a8)
{
  uint64_t v16 = *(void *)a3;
  unsigned int v17 = iAP2LinkCurPckHdrSize(*(void *)a3);
  BOOL ChecksumType = iAP2LinkGetChecksumType(v16);
  if (a5) {
    *a5 = 0;
  }
  if (!a1 || !a2) {
    return 0LL;
  }
  unsigned int v76 = v17;
  uint32_t v75 = a7;
  char v19 = &a1[a2];
  LODWORD(v20) = 0;
  *((void *)&v20 + 1) = 0LL;
  DWORD1(v20) = a2;
  uint64_t v21 = *(_BYTE **)(a3 + 64);
  int v77 = a8;
  while (1)
  {
    unsigned int v22 = *(unsigned __int16 *)(a3 + 61);
    if ((v22 & 0xFE) > 0x11) {
      return v20;
    }
    switch(*(_WORD *)(a3 + 61))
    {
      case 0u:
        *(_DWORD *)(a3 + 52) = 0;
        *(_WORD *)(a3 + 56) = 0;
        *(_DWORD *)(a3 + 44) = 0;
        int v23 = *a1;
        if (v23 == 85)
        {
          if (v75)
          {
            ++*v75;
            int v71 = *(_DWORD *)(a3 + 44);
          }

          else
          {
            int v71 = 0;
          }

          *uint64_t v21 = 0;
          v21[1] = *a1;
          *(_DWORD *)(a3 + 44) = v71 + 2;
          *(_BYTE *)(a3 + 61) = 13;
          goto LABEL_93;
        }

        if (v23 != 255) {
          goto LABEL_93;
        }
        *uint64_t v21 = -1;
        int v24 = 1;
        *(_BYTE *)(a3 + 61) = 1;
        goto LABEL_92;
      case 1u:
        int v25 = *a1;
        if (a8 == 1 || v25 != 90)
        {
          if (v25 == 255) {
            goto LABEL_93;
          }
          if (v25 != 85)
          {
            *(_WORD *)(a3 + 61) = v22 & 0xFF00;
            goto LABEL_93;
          }

          if (v75)
          {
            ++*v75;
            char v64 = *a1;
          }

          else
          {
            char v64 = 85;
          }

          v21[1] = v64;
          char v31 = 13;
        }

        else
        {
          if (v75)
          {
            ++*v75;
            char v26 = *a1;
          }

          else
          {
            char v26 = 90;
          }

          v21[1] = v26;
          char v31 = 2;
        }

        goto LABEL_90;
      case 2u:
        v21[2] = *a1;
        __int16 v27 = *a1++;
        *(_WORD *)(a3 + 54) = v27 << 8;
        char v28 = 3;
        goto LABEL_47;
      case 3u:
        v21[3] = *a1;
        unsigned __int16 v29 = *(_WORD *)(a3 + 54) + *a1;
        BOOL v30 = v29 <= a4 || a4 == 0;
        *(_WORD *)(a3 + 54) = v29;
        if (v30 && v76 <= v29)
        {
          char v31 = 4;
          goto LABEL_90;
        }

        __int128 v83 = v20;
        __iAP2PacketResetPacket((void *)a3);
        __int128 v20 = v83;
        goto LABEL_93;
      case 4u:
        char v32 = *a1++;
        v21[4] = v32;
        char v28 = 5;
        goto LABEL_47;
      case 5u:
        char v33 = *a1++;
        v21[5] = v33;
        char v28 = 6;
        goto LABEL_47;
      case 6u:
        char v34 = *a1++;
        v21[6] = v34;
        char v28 = 7;
        goto LABEL_47;
      case 7u:
        char v35 = *a1++;
        v21[7] = v35;
        char v28 = 8;
        goto LABEL_47;
      case 8u:
        int v37 = *a1++;
        int v36 = v37;
        __int128 v78 = v20;
        iAP2PacketSetHdrChecksum(a3, ChecksumType, v37);
        *((void *)&v20 + 1) = *((void *)&v78 + 1);
        __int16 v38 = *(unsigned __int8 *)(a3 + 62);
        *(_BYTE *)(a3 + 61) = 9;
        ++*(_DWORD *)(a3 + 44);
        *(int32x2_t *)&__int128 v20 = vadd_s32(*(int32x2_t *)&v78, (int32x2_t)0xFFFFFFFF00000001LL);
        if (ChecksumType) {
          goto LABEL_95;
        }
        __int128 v79 = v20;
        *(_WORD *)(a3 + 61) = (v38 << 8) | 0xA;
        if (iAP2PacketCalcChecksum(*(unsigned __int8 **)(a3 + 64), 8u, 0) != v36)
        {
LABEL_29:
          iAP2PacketGetChecksum( (unsigned __int16 *)(*(void *)(a3 + 64) + 8LL),  (*(unsigned __int16 *)(a3 + 61) >> 12) & 3);
          if (a6) {
            ++*a6;
          }
LABEL_51:
          uint64_t v58 = (void *)a3;
          goto LABEL_52;
        }

BOOL __iAP2PacketResetPacket(void *a1)
{
  uint64_t v2 = *a1;
  id v3 = (void (*)(void))a1[4];
  if (v3 && a1[1]) {
    v3(*a1);
  }
  *(void *)((char *)a1 + 50) = 0LL;
  *(void *)((char *)a1 + 44) = 0LL;
  *(_WORD *)((char *)a1 + 61) = *((unsigned __int8 *)a1 + 62) << 8;
  BOOL v4 = (void *)a1[8];
  unsigned int v5 = iAP2LinkCurPckHdrSize(v2);
  bzero(v4, v5);
  a1[1] = 0LL;
  a1[2] = 0LL;
  __int16 v6 = *(_WORD *)((char *)a1 + 61);
  a1[4] = 0LL;
  *(_WORD *)((char *)a1 + 61) = v6 & 0xF6FF;
  *((_BYTE *)a1 + 5_Block_object_dispose(va, 8) = 0;
  BOOL result = iAP2LinkGetChecksumType(v2);
  *(_WORD *)((char *)a1 + 61) = *(_WORD *)((_BYTE *)a1 + 61) & 0xCBFF | ((result & 3) << 12);
  return result;
}

void iAP2PacketSetHdrChecksum(uint64_t a1, int a2, char a3)
{
  uint64_t v3 = *(void *)(a1 + 64);
  if (a2 == 1)
  {
    *(_WORD *)(v3 + _Block_object_dispose(va, 8) = __rev16(a3);
    __int16 v7 = *(_WORD *)(a1 + 61);
    if ((v7 & 0x3000) == 0) {
      ++*(void *)(a1 + 72);
    }
    __int16 v6 = v7 & 0xCFFF | 0x1000;
    goto LABEL_9;
  }

  if (!a2)
  {
    *(_BYTE *)(v3 + _Block_object_dispose(va, 8) = a3;
    __int16 v5 = *(_WORD *)(a1 + 61);
    if ((v5 & 0x3000) == 0x1000) {
      --*(void *)(a1 + 72);
    }
    __int16 v6 = v5 & 0xCFFF;
LABEL_9:
    *(_WORD *)(a1 + 61) = v6;
    return;
  }

  if ((_iAP2LogEnableMask & 1) != 0)
  {
    if (gLogObjects) {
      BOOL v8 = gNumLogObjects < 20;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8)
    {
      __int16 v9 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      __int16 v9 = *(os_log_s **)(gLogObjects + 152);
    }

    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315650;
      __int16 v11 = "iAP2PacketSetHdrChecksum";
      __int16 v12 = 1024;
      int v13 = 2102;
      __int16 v14 = 1024;
      int v15 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "ERROR: %s:%d Unknown checksumType(%d)!",  (uint8_t *)&v10,  0x18u);
    }
  }

uint64_t iAP2PacketCalcChecksum(unsigned __int8 *a1, unsigned int a2, int a3)
{
  unsigned int v3 = a2;
  BOOL v4 = a1;
  if (a1 && a2)
  {
    if (!a3)
    {
      char v14 = 0;
      uint64_t v15 = a2;
      do
      {
        char v16 = *v4++;
        v14 += v16;
        --v15;
      }

      while (v15);
      LOWORD(v12) = -v14;
      return (unsigned __int16)v12;
    }

    if (a3 == 1)
    {
      LOWORD(v6) = 255;
      LOWORD(v7) = 255;
      do
      {
        if (v3 >= 0x14) {
          int v8 = 20;
        }
        else {
          int v8 = v3;
        }
        if (v8)
        {
          int v9 = v8;
          int v10 = v4;
          do
          {
            --v9;
            __int16 v11 = *v10++;
            LOWORD(v7) = v7 + v11;
            LOWORD(v6) = v7 + v6;
          }

          while ((_WORD)v9);
          v4 += (unsigned __int16)(v8 - 1) + 1;
        }

        unsigned int v7 = BYTE1(v7) + v7;
        int v6 = BYTE1(v6) + v6;
        v3 -= v8;
      }

      while (v3);
      return (unsigned __int16)-((257 * v6) & 0x3FF00 | ((v7 >> 8) + v7));
    }

    if ((_iAP2LogEnableMask & 1) != 0)
    {
      if (gLogObjects && gNumLogObjects >= 20)
      {
        unsigned int v17 = *(os_log_s **)(gLogObjects + 152);
      }

      else
      {
        unsigned int v17 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      BOOL v23 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
      LOWORD(v12) = 0;
      if (v23)
      {
        int v25 = 136315650;
        char v26 = "iAP2PacketCalcChecksum";
        __int16 v27 = 1024;
        int v28 = 2020;
        __int16 v29 = 1024;
        int v30 = a3;
        __int128 v20 = "ERROR: %s:%d Unknown checksumType(%d)!";
        uint64_t v21 = v17;
        uint32_t v22 = 24;
        goto LABEL_36;
      }

      return (unsigned __int16)v12;
    }

uint64_t iAP2PacketGetHdrChecksum(uint64_t a1)
{
  return iAP2PacketGetChecksum( (unsigned __int16 *)(*(void *)(a1 + 64) + 8LL),  (*(unsigned __int16 *)(a1 + 61) >> 12) & 3);
}

uint64_t iAP2PacketGetPayloadLen(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  int v3 = iAP2LinkCurPckHdrSize(*(void *)a1);
  int v4 = iAP2LinkCurPckChksumSize(v2);
  unsigned int v5 = *(unsigned __int16 *)(a1 + 54);
  BOOL v6 = v5 >= v4 + v3;
  unsigned int v7 = v5 - (v4 + v3);
  if (v7 == 0 || !v6) {
    LOWORD(v7) = 0;
  }
  return (unsigned __int16)v7;
}

void iAP2PacketSetPayloadChecksum(uint64_t a1, __int16 a2)
{
  int v3 = (_WORD *)(*(void *)(a1 + 72) + *(unsigned __int16 *)(a1 + 52));
  int v4 = (*(unsigned __int16 *)(a1 + 61) >> 12) & 3;
  if (v4 == 1)
  {
    _WORD *v3 = __rev16(a2);
    goto LABEL_5;
  }

  if (!v4)
  {
    *(_BYTE *)int v3 = a2;
LABEL_5:
    *(_WORD *)(a1 + 56) = a2;
    return;
  }

  if ((_iAP2LogEnableMask & 1) != 0)
  {
    if (gLogObjects) {
      BOOL v5 = gNumLogObjects < 20;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      BOOL v6 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      BOOL v6 = *(os_log_s **)(gLogObjects + 152);
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = (*(unsigned __int16 *)(a1 + 61) >> 12) & 3;
      int v8 = 136315650;
      int v9 = "iAP2PacketSetPayloadChecksum";
      __int16 v10 = 1024;
      int v11 = 2175;
      __int16 v12 = 1024;
      int v13 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "ERROR: %s:%d Unknown checksumType(%d)!",  (uint8_t *)&v8,  0x18u);
    }
  }

uint64_t iAP2PacketGetPayloadChecksum(uint64_t a1)
{
  return iAP2PacketGetChecksum( (unsigned __int16 *)(*(void *)(a1 + 72) + *(unsigned __int16 *)(a1 + 52)),  (*(unsigned __int16 *)(a1 + 61) >> 12) & 3);
}

BOOL iAP2PacketCheckDetect(uint64_t a1)
{
  uint64_t v1 = *(_BYTE **)(a1 + 64);
  uint64_t v2 = v1 + 1;
  unsigned __int8 v3 = *v1 + 1;
  if (v3 >= 2u) {
    uint64_t v2 = *(_BYTE **)(a1 + 64);
  }
  if (*v2 != 85) {
    return 0LL;
  }
  uint64_t v4 = 1LL;
  if (v3 < 2u) {
    uint64_t v4 = 2LL;
  }
  if (v1[v4] != 2) {
    return 0LL;
  }
  BOOL v5 = &v1[v3 < 2u];
  if (v5[2]) {
    return 0LL;
  }
  uint64_t v6 = 3LL;
  return v1[v6] == 238 && v5[4] == 16;
}

BOOL iAP2PacketCheckDetectNACK(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 **)(a1 + 64);
  unsigned __int8 v3 = v1 + 1;
  int v2 = *v1;
  if (v2 != 255) {
    unsigned __int8 v3 = *(_BYTE **)(a1 + 64);
  }
  if (*v3 != 85) {
    return 0LL;
  }
  uint64_t v4 = 1LL;
  if (v2 == 255) {
    uint64_t v4 = 2LL;
  }
  if (v1[v4] != 4) {
    return 0LL;
  }
  uint64_t v5 = 2LL;
  if (v2 == 255) {
    uint64_t v5 = 3LL;
  }
  if (v1[v5]) {
    return 0LL;
  }
  uint64_t v6 = 3LL;
  if (v2 == 255) {
    uint64_t v6 = 4LL;
  }
  if (v1[v6] != 2) {
    return 0LL;
  }
  uint64_t v7 = 4LL;
  if (v2 == 255) {
    uint64_t v7 = 5LL;
  }
  if (v1[v7] != 4) {
    return 0LL;
  }
  uint64_t v8 = 5LL;
  if (v2 == 255) {
    uint64_t v8 = 6LL;
  }
  if (v1[v8] != 238) {
    return 0LL;
  }
  BOOL v9 = v2 == 255;
  uint64_t v10 = 6LL;
  if (v9) {
    uint64_t v10 = 7LL;
  }
  return v1[v10] == 8;
}

BOOL iAP2PacketCheckRequestIdentify(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 **)(a1 + 64);
  unsigned __int8 v3 = v1 + 1;
  int v2 = *v1;
  if (v2 != 255) {
    unsigned __int8 v3 = *(_BYTE **)(a1 + 64);
  }
  if (*v3 != 85) {
    return 0LL;
  }
  uint64_t v4 = 1LL;
  if (v2 == 255) {
    uint64_t v4 = 2LL;
  }
  if (v1[v4] != 2) {
    return 0LL;
  }
  uint64_t v5 = 2LL;
  if (v2 == 255) {
    uint64_t v5 = 3LL;
  }
  if (v1[v5]) {
    return 0LL;
  }
  uint64_t v6 = 3LL;
  if (v2 == 255) {
    uint64_t v6 = 4LL;
  }
  if (v1[v6]) {
    return 0LL;
  }
  BOOL v8 = v2 == 255;
  uint64_t v9 = 4LL;
  if (v8) {
    uint64_t v9 = 5LL;
  }
  return v1[v9] == 254;
}

BOOL iAP2PacketIsComplete(BOOL result)
{
  if (result) {
    return (*(_WORD *)(result + 61) & 0xFEu) > 0x11;
  }
  return result;
}

BOOL iAP2PacketIsACKOnly(uint64_t a1)
{
  if ((*(_BYTE *)(*(void *)(a1 + 64) + 4LL) & 0xF0) != 0x40) {
    return 0LL;
  }
  int v1 = *(unsigned __int16 *)(a1 + 54);
  return v1 == iAP2LinkCurPckHdrSize(*(void *)a1);
}

BOOL iAP2PacketIsDataPacket(uint64_t a1)
{
  if ((*(_BYTE *)(*(void *)(a1 + 64) + 4LL) & 0xF0) != 0x40) {
    return 0LL;
  }
  unsigned int v1 = *(unsigned __int16 *)(a1 + 54);
  return v1 > iAP2LinkCurPckHdrSize(*(void *)a1);
}

uint64_t iAP2PacketIsEAK(uint64_t a1)
{
  return (*(unsigned __int8 *)(*(void *)(a1 + 64) + 4LL) >> 5) & 1;
}

_BYTE *iAP2PacketCreateEmptySendPacket(uint64_t a1, unsigned int *a2)
{
  int v2 = 0LL;
  if (a1 && a2)
  {
    unsigned int MaxPayloadSize = iAP2LinkGetMaxPayloadSize(a1, 0LL);
    unsigned int v6 = *a2;
    if (!*a2 || v6 >= MaxPayloadSize)
    {
      if (v6 > MaxPayloadSize) {
        *a2 = MaxPayloadSize;
      }
      unsigned int v6 = MaxPayloadSize;
    }

    uint64_t v7 = iAP2BuffPoolGet(*(unsigned __int8 **)(a1 + 248), v6);
    int v2 = v7;
    if (v7)
    {
      __int16 v8 = *(_WORD *)(v7 + 61);
      *(_WORD *)(v7 + 59) = 511;
      v7[63] = 0;
      *((void *)v7 + 1) = 0LL;
      *((void *)v7 + 2) = 0LL;
      *(void *)uint64_t v7 = a1;
      *(_WORD *)(v7 + 61) = v8 & 0xF5FF | 0x200;
      *((void *)v7 + 4) = 0LL;
      __iAP2PacketResetPacket(v7);
    }
  }

  return v2;
}

_BYTE *iAP2PacketCreateEmptyRecvPacket(uint64_t a1)
{
  int v2 = *(unsigned __int8 **)(a1 + 240);
  unsigned int MaxRecvPayloadSize = iAP2LinkGetMaxRecvPayloadSize(a1, 0LL);
  uint64_t v4 = iAP2BuffPoolGet(v2, MaxRecvPayloadSize);
  uint64_t v5 = v4;
  if (v4)
  {
    __int16 v6 = *(_WORD *)(v4 + 61);
    *(_WORD *)(v4 + 59) = 511;
    v4[63] = 0;
    *((void *)v4 + 1) = 0LL;
    *((void *)v4 + 2) = 0LL;
    *(void *)uint64_t v4 = a1;
    *(_WORD *)(v4 + 61) = v6 & 0xF5FF;
    *((void *)v4 + 4) = 0LL;
    __iAP2PacketResetPacket(v4);
  }

  return v5;
}

uint64_t iAP2PacketCreate(uint64_t a1, char a2, char a3, char a4, const void *a5, int a6, char a7, int a8)
{
  LODWORD(__n) = a6;
  __int16 v16 = iAP2LinkCurPckHdrSize(a1);
  if (a6)
  {
    __int16 v17 = iAP2LinkCurPckChksumSize(a1);
    if (a8)
    {
LABEL_3:
      EmptySendPacket = iAP2PacketCreateEmptySendPacket(a1, (unsigned int *)&__n);
      goto LABEL_6;
    }
  }

  else
  {
    __int16 v17 = 0;
    if (a8) {
      goto LABEL_3;
    }
  }

  EmptySendPacket = iAP2PacketCreateEmptyRecvPacket(a1);
LABEL_6:
  uint64_t v19 = (uint64_t)EmptySendPacket;
  if (EmptySendPacket)
  {
    uint64_t v20 = *((void *)EmptySendPacket + 8);
    __int16 v21 = v17 + v16 + __n;
    *((_WORD *)EmptySendPacket + 27) = v21;
    *(_WORD *)uint64_t v20 = 23295;
    *(_BYTE *)(v20 + 2) = HIBYTE(v21);
    *(_BYTE *)(v20 + 3) = v21;
    *(_BYTE *)(v20 + 4) = a2;
    *(_BYTE *)(v20 + 5) = a3;
    *(_BYTE *)(v20 + 6) = a4;
    *(_BYTE *)(v20 + 7) = a7;
    BOOL ChecksumType = iAP2LinkGetChecksumType(a1);
    iAP2PacketSetHdrChecksum(v19, ChecksumType, 0);
    if (a8) {
      __int16 v23 = 512;
    }
    else {
      __int16 v23 = 0;
    }
    *(_WORD *)(v19 + 61) = *(_WORD *)(v19 + 61) & 0xFDFF | v23;
    *(_BYTE *)(v19 + 63) = 0;
    *(_DWORD *)(v19 + 44) = *(unsigned __int16 *)(v19 + 54);
    if (a5 && (_DWORD)__n) {
      memcpy(*(void **)(v19 + 72), a5, __n);
    }
    *(_WORD *)(v19 + 52) = iAP2PacketGetPayloadLen(v19);
    *(_DWORD *)(v19 + 56) = -16777216;
    __int16 v24 = *(_WORD *)(v19 + 61) & 0xF600 | 0x12;
    *(void *)(v19 + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(v19 + 16) = 0LL;
    *(_WORD *)(v19 + 61) = v24;
  }

  return v19;
}

uint64_t iAP2PacketRetain(uint64_t result)
{
  if (result) {
    ++*(_BYTE *)(result + 60);
  }
  return result;
}

uint64_t *iAP2PacketRelease(uint64_t *a1)
{
  unsigned int v1 = a1;
  if (a1)
  {
    if (!*((_BYTE *)a1 + 60)) {
      iAP2PacketRelease_cold_1();
    }
    char v2 = *((_BYTE *)a1 + 60) - 1;
    *((_BYTE *)a1 + 60) = v2;
    if (!v2)
    {
      uint64_t v3 = a1[1];
      uint64_t v4 = (void (*)(uint64_t, uint64_t))a1[2];
      uint64_t v5 = (void (*)(uint64_t, uint64_t))a1[4];
      uint64_t v6 = *a1;
      int v7 = (v4 != 0LL) & (*(unsigned __int16 *)((char *)a1 + 61) >> 11);
      if (v7 == 1)
      {
        a1[4] = 0LL;
        a1[1] = 0LL;
      }

      __iAP2PacketResetPacket(a1);
      if (*((unsigned __int8 *)v1 + 59) != 255)
      {
        MainTimer = (unsigned int *)iAP2LinkGetMainTimer(*v1);
        iAP2TimeCancelTimer(MainTimer, *((_BYTE *)v1 + 59));
        *((_BYTE *)v1 + 59) = -1;
      }

      uint64_t v9 = 248LL;
      if ((*(_WORD *)((_BYTE *)v1 + 61) & 0x200) == 0) {
        uint64_t v9 = 240LL;
      }
      iAP2BuffPoolReturn(*(unsigned __int8 **)(v6 + v9), (void **)v1);
      if (!v7) {
        return 0LL;
      }
      v4(v6, v3);
      unsigned int v1 = 0LL;
      if (v5 && v3)
      {
        v5(v6, v3);
        return 0LL;
      }
    }
  }

  return v1;
}

uint64_t iAP2PacketSetCallbacks(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a1)
  {
    *(void *)(a1 + 16) = a2;
    *(void *)(a1 + 32) = a3;
    if (a4) {
      __int16 v4 = 2048;
    }
    else {
      __int16 v4 = 0;
    }
    *(_WORD *)(a1 + 61) = *(_WORD *)(a1 + 61) & 0xF7FF | v4;
  }

  return 0LL;
}

uint64_t iAP2PacketSetCallbackOnSentToTransport(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 24) = a2;
  }
  return result;
}

uint64_t iAP2PacketCreateACKPacket(uint64_t a1, char a2, char a3, const void *a4, int a5, char a6)
{
  return iAP2PacketCreate(a1, 64, a2, a3, a4, a5, a6, 1);
}

uint64_t iAP2PacketCreateSYNPacket(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  char v7 = v6;
  uint64_t v8 = v1;
  memset(v27, 170, sizeof(v27));
  char v9 = *(_BYTE *)(v3 + 1);
  __int16 v10 = *(_WORD *)(v3 + 4);
  __int16 v11 = *(_WORD *)(v3 + 6);
  __int16 v12 = *(_WORD *)(v3 + 8);
  __int16 v13 = *(_WORD *)(v3 + 2);
  size_t v14 = *(unsigned __int8 *)(v3 + 24);
  unsigned int v15 = *(unsigned __int8 *)(v3 + 10);
  v25[0] = *(_BYTE *)v3;
  v25[1] = v9;
  v25[2] = HIBYTE(v10);
  v25[3] = v10;
  v25[4] = HIBYTE(v11);
  v25[5] = v11;
  v25[6] = HIBYTE(v12);
  v25[7] = v12;
  __int16 v26 = v13;
  if (!v25[0])
  {
    uint64_t v16 = 0LL;
    goto LABEL_5;
  }

  if (v25[0] == 1)
  {
    uint64_t v16 = 10LL;
LABEL_5:
    unsigned __int8 v17 = 10;
    goto LABEL_10;
  }

  v27[0] = v14;
  if ((_DWORD)v14)
  {
    memcpy(&v27[1], (const void *)(v3 + 25), v14);
    unsigned __int8 v17 = v14 + 12;
  }

  else
  {
    unsigned __int8 v17 = 12;
  }

  v25[(v14 + 11)] = v15;
  uint64_t v16 = (v14 + 12);
LABEL_10:
  if (v15 >= 5) {
    uint64_t v18 = 5LL;
  }
  else {
    uint64_t v18 = v15;
  }
  if ((_DWORD)v18)
  {
    char v19 = 3 * v18;
    uint64_t v20 = (_BYTE *)(v3 + 33);
    __int16 v21 = &v25[v16 + 2];
    do
    {
      *(v21 - 2) = *(v20 - 3);
      *(v21 - 1) = *(v20 - 2) | ((*v20 != 0) << 7);
      *__int16 v21 = *(v20 - 1);
      v21 += 3;
      v20 += 4;
      --v18;
    }

    while (v18);
    v17 += v19;
  }

  if (v5)
  {
    char v22 = *v5;
    char v23 = -64;
  }

  else
  {
    char v22 = 0;
    char v23 = 0x80;
  }

  return iAP2PacketCreate(v8, v23, v7, v22, v25, v17, 0, 1);
}

uint64_t iAP2PacketCreateEAKPacket(uint64_t a1, char a2, char a3, const void *a4, int a5)
{
  return iAP2PacketCreate(a1, 96, a2, a3, a4, a5, 0, 1);
}

uint64_t iAP2PacketCreateRSTPacket(uint64_t a1, char a2)
{
  return iAP2PacketCreate(a1, 16, a2, 0, 0LL, 0, 0, 1);
}

uint64_t iAP2PacketCreateSUSPacket(uint64_t a1, char a2)
{
  return iAP2PacketCreate(a1, 8, a2, 0, 0LL, 0, 0, 1);
}

uint64_t iAP2PacketGenerateBuffer(uint64_t a1)
{
  if (a1)
  {
    unsigned int v2 = *(unsigned __int16 *)(a1 + 54);
    uint64_t v3 = *(void *)(a1 + 64);
    BOOL ChecksumType = iAP2LinkGetChecksumType(*(void *)a1);
    *(_WORD *)uint64_t v3 = 23295;
    *(_BYTE *)(v3 + 2) = BYTE1(v2);
    *(_BYTE *)(v3 + 3) = v2;
    unsigned int v5 = *(_DWORD *)(a1 + 44);
    if (v5 >= v2)
    {
      int v6 = ChecksumType;
      char v7 = *(unsigned __int8 **)(a1 + 72);
      unsigned int PayloadLen = iAP2PacketGetPayloadLen(a1);
      char v9 = iAP2PacketCalcChecksum(*(unsigned __int8 **)(a1 + 64), 8u, v6);
      iAP2PacketSetHdrChecksum(a1, v6, v9);
      if (v7)
      {
        if (PayloadLen)
        {
          __int16 v10 = iAP2PacketCalcChecksum(v7, PayloadLen, v6);
          *(_WORD *)(a1 + 52) = PayloadLen;
          iAP2PacketSetPayloadChecksum(a1, v10);
        }
      }
    }

    return *(void *)(a1 + 64);
  }

  else
  {
    if ((_iAP2LogEnableMask & 1) != 0)
    {
      if (gLogObjects) {
        BOOL v12 = gNumLogObjects < 20;
      }
      else {
        BOOL v12 = 1;
      }
      if (v12)
      {
        __int16 v13 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      else
      {
        __int16 v13 = *(os_log_s **)(gLogObjects + 152);
      }

      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 136315394;
        unsigned int v15 = "iAP2PacketGenerateBuffer";
        __int16 v16 = 1024;
        int v17 = 1678;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "ERROR: %s:%d NULL packet pointer!",  (uint8_t *)&v14,  0x12u);
      }
    }

    return 0LL;
  }

BOOL iAP2PacketParseSYNData(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  if (a2 >= 0xA)
  {
    LODWORD(v3) = *a1;
    *(_BYTE *)a3 = v3;
    *(_BYTE *)(a3 + 1) = a1[1];
    __int16 v4 = a1[2];
    *(_WORD *)(a3 + 4) = v4 << 8;
    *(_WORD *)(a3 + 4) = a1[3] | (unsigned __int16)(v4 << 8);
    __int16 v5 = a1[4];
    *(_WORD *)(a3 + 6) = v5 << 8;
    *(_WORD *)(a3 + 6) = a1[5] | (unsigned __int16)(v5 << 8);
    __int16 v6 = a1[6];
    *(_WORD *)(a3 + _Block_object_dispose(va, 8) = v6 << 8;
    *(_WORD *)(a3 + _Block_object_dispose(va, 8) = a1[7] | (unsigned __int16)(v6 << 8);
    *(_BYTE *)(a3 + 2) = a1[8];
    *(_BYTE *)(a3 + 3) = a1[9];
    if ((_DWORD)v3)
    {
      if ((_DWORD)v3 == 1)
      {
        LODWORD(v3) = (a2 - 10) / 3;
        *(_BYTE *)(a3 + 24) = 0;
        unsigned int v7 = 10;
      }

      else
      {
        if (a1[10] >= 5u) {
          uint64_t v8 = 5LL;
        }
        else {
          uint64_t v8 = a1[10];
        }
        *(_BYTE *)(a3 + 24) = v8;
        if ((_DWORD)v8)
        {
          char v9 = (char *)(a1 + 11);
          __int16 v10 = (_BYTE *)(a3 + 25);
          uint64_t v11 = v8;
          do
          {
            char v12 = *v9++;
            *v10++ = v12;
            --v11;
          }

          while (v11);
        }

        LOBYTE(v3) = a1[v8 + 11];
        unsigned int v7 = (v8 + 12);
      }
    }

    else
    {
      unsigned int v7 = 0;
    }

    else {
      unint64_t v3 = v3;
    }
    *(void *)(a3 + 37) = 0LL;
    *(void *)(a3 + 30) = 0LL;
    if ((_DWORD)v3)
    {
      LOBYTE(v13) = v7 + 3;
      if (v7 + 3 <= a2)
      {
        int v14 = (_BYTE *)(a3 + 33);
        unint64_t v15 = 1LL;
        do
        {
          __int16 v16 = &a1[v7];
          unsigned int v17 = v16[1];
          *(v14 - 3) = *v16;
          *(v14 - 1) = v16[2];
          *(v14 - 2) = v17 & 0x7F;
          *int v14 = v17 >> 7;
          if (v15 >= v3) {
            break;
          }
          unsigned int v7 = v13;
          unsigned int v13 = v13 + 3;
          v14 += 4;
          ++v15;
        }

        while (v13 <= a2);
      }
    }

    *(_BYTE *)(a3 + 10) = v3;
  }

  return a2 > 9;
}

_BYTE *iAP2PacketGetMissingSeqFromEAK(void *a1, unsigned int a2, _DWORD *a3)
{
  LODWORD(v4) = 0;
  __int16 v5 = 0LL;
  if (a1 && a3)
  {
    uint64_t v8 = *a1;
    char v9 = (void **)iAP2BuffPoolGet(*(unsigned __int8 **)(*a1 + 256LL), 2LL * a2);
    __int16 v10 = v9;
    uint64_t v11 = (char *)v9 + 2 * a2;
    int v12 = *(unsigned __int8 *)(a1[8] + 6LL);
    if (a2)
    {
      unsigned int v13 = (char *)v9;
      int v14 = *(unsigned __int8 *)(a1[8] + 6LL);
      do
      {
        *(_WORD *)unsigned int v13 = ++v14;
        v13 += 2;
      }

      while (v13 < v11);
    }

    unint64_t v15 = (_BYTE *)a1[9];
    int PayloadLen = iAP2PacketGetPayloadLen((uint64_t)a1);
    unsigned __int8 v17 = 0;
    if (PayloadLen)
    {
      unsigned int v18 = a2;
      char v19 = &v15[PayloadLen];
      do
      {
        int v20 = *v15 - v12;
        if (v20 && a2 >= v20)
        {
          unsigned int v21 = (*v15 - v12);
          if (v21 > v17) {
            unsigned __int8 v17 = *v15 - v12;
          }
          v18 -= *((__int16 *)v10 + v21 - 1) != -1;
          *((_WORD *)v10 + v21 - 1) = -1;
        }

        ++v15;
      }

      while (v15 < v19);
    }

    else
    {
      unsigned int v18 = a2;
    }

    unsigned int v22 = v18 - a2;
    uint64_t v4 = v22 + v17;
    if (v22 + v17 && (char v23 = iAP2BuffPoolGet(*(unsigned __int8 **)(v8 + 256), v22 + v17)) != 0LL)
    {
      __int16 v5 = v23;
      if (a2)
      {
        __int16 v24 = (char *)v10 + 2;
        int v25 = 1;
        __int16 v26 = v23;
        do
        {
          int v27 = *((unsigned __int16 *)v24 - 1);
          if (v27 != 0xFFFF)
          {
            unsigned int v28 = v25++;
            if (v28 <= v17) {
              *v26++ = v27;
            }
          }

          if (v24 >= v11) {
            break;
          }
          v24 += 2;
        }

        while (v26 < &v23[v4]);
      }
    }

    else
    {
      if ((_iAP2LogEnableMask & 1) != 0)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          __int16 v29 = *(os_log_s **)(gLogObjects + 152);
        }

        else
        {
          __int16 v29 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          int v31 = 136315650;
          unsigned int v32 = "/Library/Caches/com.apple.xbs/Sources/CoreAccessories/PublicShared/iAP2/iAP2LinkLayer/iAP2Link/iAP2Packet.c";
          __int16 v33 = 1024;
          int v34 = 1925;
          __int16 v35 = 1024;
          int v36 = v4;
          _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "ERROR: %s:%d Unable to get buffer for recv'd packet list! resultLen=%d\n",  (uint8_t *)&v31,  0x18u);
        }
      }

      __int16 v5 = 0LL;
      LODWORD(v4) = 0;
    }

    iAP2BuffPoolReturn(*(unsigned __int8 **)(v8 + 256), v10);
  }

  if (a3) {
    *a3 = v4;
  }
  return v5;
}

uint64_t iAP2PacketCalcSeqGap(char a1, char a2)
{
  return (a2 - a1);
}

uint64_t iAP2PacketGetChecksum(unsigned __int16 *a1, int a2)
{
  if (a2 == 1) {
    return bswap32(*a1) >> 16;
  }
  if (!a2) {
    return *(unsigned __int8 *)a1;
  }
  if ((_iAP2LogEnableMask & 1) == 0) {
    return 0LL;
  }
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 20;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    __int16 v5 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    __int16 v5 = *(os_log_s **)(gLogObjects + 152);
  }

  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0LL;
  if (v6)
  {
    int v7 = 136315650;
    uint64_t v8 = "iAP2PacketGetChecksum";
    __int16 v9 = 1024;
    int v10 = 2247;
    __int16 v11 = 1024;
    int v12 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "ERROR: %s:%d Unknown checksumType(%d)!",  (uint8_t *)&v7,  0x18u);
    return 0LL;
  }

  return result;
}

BOOL iAP2PacketIsSeqACKd(char a1, char a2, unsigned int a3)
{
  return a3 >= (a2 - a1);
}

BOOL iAP2PacketRequireACK(uint64_t *a1)
{
  uint64_t v1 = a1[8];
  int v2 = *(unsigned __int8 *)(*a1 + 190);
  int v3 = *(unsigned __int8 *)(v1 + 5);
  unsigned int v4 = *((unsigned __int16 *)a1 + 27);
  BOOL result = 0;
  if (v4 > iAP2LinkCurPckHdrSize(*a1) && (v3 != v2 || *(char *)(v1 + 4) < 0))
  {
    unsigned int v5 = *(unsigned __int8 *)(v1 + 4);
    if (v5 >= 0x40 && (v5 & 0x20) == 0) {
      return 1;
    }
  }

  return result;
}

unsigned int *iAP2PacketAssignTimer(unsigned int *result, int a2)
{
  if (result)
  {
    char v2 = a2;
    int v3 = result;
    int v4 = *((unsigned __int8 *)result + 59);
    if (v4 != 255 && v4 != a2)
    {
      MainTimer = (unsigned int *)iAP2LinkGetMainTimer(*(void *)result);
      BOOL result = iAP2TimeCancelTimer(MainTimer, *((_BYTE *)v3 + 59));
    }

    *((_BYTE *)v3 + 59) = v2;
  }

  return result;
}

unsigned int *iAP2PacketRemoveTimer(unsigned int *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*((unsigned __int8 *)result + 59) != 255)
    {
      MainTimer = (unsigned int *)iAP2LinkGetMainTimer(*(void *)result);
      BOOL result = iAP2TimeCancelTimer(MainTimer, *((_BYTE *)v1 + 59));
    }

    *((_BYTE *)v1 + 59) = -1;
  }

  return result;
}

const char *iAP2PacketName(uint64_t a1)
{
  if (*(char *)(*(void *)(a1 + 64) + 4LL) < 0)
  {
    if ((*(_BYTE *)(*(void *)(a1 + 64) + 4LL) & 0x40) != 0) {
      return "SYN-ACK";
    }
    else {
      return "SYN";
    }
  }

  else if ((*(_BYTE *)(*(void *)(a1 + 64) + 4LL) & 0x20) != 0)
  {
    return "EAK";
  }

  else if ((*(_BYTE *)(*(void *)(a1 + 64) + 4LL) & 0x10) != 0)
  {
    return "RST";
  }

  else if ((*(_BYTE *)(*(void *)(a1 + 64) + 4LL) & 8) != 0)
  {
    return "SUS";
  }

  else if ((*(_BYTE *)(*(void *)(a1 + 64) + 4LL) & 0x40) != 0)
  {
    unsigned int v2 = *(unsigned __int16 *)(a1 + 54);
    else {
      return "DATA";
    }
  }

  else
  {
    return "UNKNOWN";
  }

_DWORD *iAP2PacketCopySessionInfo(_DWORD *result, _DWORD *a2)
{
  *BOOL result = *a2;
  return result;
}

void *acc_endpoint_create(uint64_t a1, unsigned int a2, unsigned int a3, const void *a4)
{
  ptr = 0LL;
  if (a1 && a2 <= 0xF && a3 <= 0x11)
  {
    CFStringRef v8 = CFCreateUUIDString();
    if (gLogObjects && gNumLogObjects >= 15)
    {
      __int16 v9 = *(os_log_s **)(gLogObjects + 112);
    }

    else
    {
      __int16 v9 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)a1;
      if (*(_BYTE *)(a1 + 138)) {
        __int16 v11 = "YES";
      }
      else {
        __int16 v11 = "NO";
      }
      *(_DWORD *)buf = 138412802;
      *(void *)int v55 = v8;
      *(_WORD *)&v55[8] = 2112;
      *(void *)&v55[10] = v10;
      *(_WORD *)&v55[18] = 2080;
      *(void *)int v56 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Creating endpoint %@ for connection %@ - connection published = %s...",  buf,  0x20u);
    }

    ptr = calloc(1uLL, 0xC0uLL);
    if (ptr)
    {
      uint64_t v12 = gLogSignpostObjects;
      int v13 = gNumLogSignpostObjects;
      if (gLogSignpostObjects && gNumLogSignpostObjects >= 3)
      {
        int v14 = *(os_log_s **)(gLogSignpostObjects + 16);
      }

      else
      {
        int v14 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)int v55 = 2;
          *(_WORD *)&v55[4] = 2048;
          *(void *)&v55[6] = v12;
          *(_WORD *)&v55[14] = 1024;
          *(_DWORD *)&v55[16] = v13;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging_signposts() / init_logging()!\n module %d, gLogSignpostObjects: %p, gNumLogSignpostObjects: %d",  buf,  0x18u);
          uint64_t v12 = gLogSignpostObjects;
          int v13 = gNumLogSignpostObjects;
        }
      }

      if (v12 && v13 >= 3)
      {
        unint64_t v15 = *(os_log_s **)(v12 + 16);
      }

      else
      {
        unint64_t v15 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          acc_endpoint_create_cold_5();
        }
      }

      os_signpost_id_t v16 = os_signpost_id_make_with_pointer(v15, ptr);
      if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v17 = v16;
        if (os_signpost_enabled(v14))
        {
          *(_DWORD *)buf = 138413058;
          *(void *)int v55 = v8;
          *(_WORD *)&v55[8] = 1024;
          *(_DWORD *)&v55[10] = a2;
          *(_WORD *)&v55[14] = 1024;
          *(_DWORD *)&v55[16] = a3;
          *(_WORD *)int v56 = 2112;
          *(void *)&v56[2] = a4;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v14,  OS_SIGNPOST_INTERVAL_BEGIN,  v17,  "Endpoint",  "Create endpoint %@, type %{coreacc:ACCEndpoint_TransportType_t}d, protocol %{coreacc:ACCEndpoint_Protocol_t} d, identifier %@",  buf,  0x22u);
        }
      }

      unsigned int v18 = ptr;
      *((_BYTE *)ptr + 8_Block_object_dispose(va, 8) = 0;
      v18[120] = 0;
      *(void *)unsigned int v18 = a1;
      CFTypeRef v19 = *(CFTypeRef *)a1;
      if (*(void *)a1) {
        CFTypeRef v19 = CFRetain(v19);
      }
      int v20 = ptr;
      *((void *)ptr + 1) = v19;
      v20[2] = v8;
      *((_DWORD *)v20 + 6) = a2;
      *((_DWORD *)v20 + 7) = a3;
      if (a4)
      {
        CFTypeRef v21 = CFRetain(a4);
        int v20 = ptr;
      }

      else
      {
        CFTypeRef v21 = 0LL;
      }

      v20[4] = v21;
      unint64_t CurrentUnixTimeMS = systemInfo_getCurrentUnixTimeMS();
      char v23 = (pthread_mutex_t *)ptr;
      *((void *)ptr + 5) = CurrentUnixTimeMS;
      *(void *)&v23->__opaque[40] = 0LL;
      *(_DWORD *)&v23[1].__opaque[20] = -1;
      *(void *)&v23[1].__opaque[40] = 0LL;
      v23[1].__sig = 0LL;
      *(void *)v23[1].__opaque = 0LL;
      *(void *)&v23->__opaque[48] = 0LL;
      pthread_mutex_init(v23 + 2, 0LL);
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      unsigned int v32 = ptr;
      *((void *)ptr + 10) = Mutable;
      if (v32[7]) {
        acc_protocolRouter_initProtocolLayer((uint64_t)v32, v24, v25, v26, v27, v28, v29, v30);
      }
      __int16 v33 = *(const __CFDictionary **)(a1 + 40);
      if (!v33 || CFDictionaryGetValueIfPresent(v33, *((const void **)ptr + 2), 0LL))
      {
        acc_endpoint_destroy(&ptr);
      }

      else
      {
        CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 40), *((const void **)ptr + 2), ptr);
        acc_connection_mapAccessoryInfo((uint64_t *)a1);
        int v34 = ptr;
        *((_BYTE *)ptr + 121) = 0;
        BOOL isTransportSupervised = acc_policies_isTransportSupervised(v34[6], *(_DWORD *)(a1 + 8));
        BOOL isTransportRestricted = acc_endpoint_isTransportRestricted((unsigned int *)ptr);
        if (gLogObjects && gNumLogObjects >= 15)
        {
          int v37 = *(os_log_s **)(gLogObjects + 112);
        }

        else
        {
          int v37 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        BOOL v38 = os_log_type_enabled(v37, OS_LOG_TYPE_INFO);
        if (v38)
        {
          char v39 = "NO";
          if (isTransportSupervised) {
            __int128 v40 = "YES";
          }
          else {
            __int128 v40 = "NO";
          }
          uint64_t v41 = *((void *)ptr + 1);
          uint64_t v42 = *((void *)ptr + 2);
          if (isTransportRestricted) {
            char v39 = "YES";
          }
          *(_DWORD *)buf = 136315906;
          *(void *)int v55 = v40;
          *(_WORD *)&v55[8] = 2080;
          *(void *)&v55[10] = v39;
          *(_WORD *)&v55[18] = 2112;
          *(void *)int v56 = v42;
          *(_WORD *)&v56[8] = 2112;
          uint64_t v57 = v41;
          _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_INFO,  "isTransportSupervised: %s, isTransportRestricted: %s (endpointUUID: %@, connectionUUID: %@)",  buf,  0x2Au);
        }

        if (isTransportRestricted)
        {
          if (gLogObjects && gNumLogObjects >= 15)
          {
            int v43 = *(os_log_s **)(gLogObjects + 112);
          }

          else
          {
            int v43 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v44 = *((void *)ptr + 1);
            uint64_t v45 = *((void *)ptr + 2);
            *(_DWORD *)buf = 138412546;
            *(void *)int v55 = v45;
            *(_WORD *)&v55[8] = 2112;
            *(void *)&v55[10] = v44;
            _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "Created endpoint with restricted transport! (endpointUUID: %@, connectionUUID: %@)",  buf,  0x16u);
          }
        }

        else if (isTransportSupervised)
        {
          *((_BYTE *)ptr + 121) = 1;
          platform_sleepAssertion_createForApplePencil(v38);
        }

        unsigned __int16 v46 = ptr;
        *((_BYTE *)ptr + 8_Block_object_dispose(va, 8) = 1;
        CFStringRef v47 = acc_endpoint_copyDescription((uint64_t)v46);
        if (gLogObjects && gNumLogObjects >= 15)
        {
          uint64_t v48 = *(os_log_s **)(gLogObjects + 112);
        }

        else
        {
          uint64_t v48 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)int v55 = v47;
          _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "[#Events] Created endpoint %@!",  buf,  0xCu);
        }

        if (v47) {
          CFRelease(v47);
        }
        if (gLogObjects && gNumLogObjects >= 15)
        {
          unsigned int v49 = *(os_log_s **)(gLogObjects + 112);
        }

        else
        {
          unsigned int v49 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
        {
          CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 40));
          uint64_t v51 = *(void *)a1;
          *(_DWORD *)buf = 134218242;
          *(void *)int v55 = Count;
          *(_WORD *)&v55[8] = 2112;
          *(void *)&v55[10] = v51;
          _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_INFO,  "There are now %ld endpoint(s) for connection %@.",  buf,  0x16u);
        }
      }
    }
  }

  return ptr;
}

void **acc_endpoint_destroy(void **result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  uint64_t v2 = (uint64_t)*result;
  if (!*result || !*(void *)v2) {
    return 0LL;
  }
  *(_BYTE *)(v2 + 120) = 1;
  CFStringRef v3 = acc_endpoint_copyDescription(v2);
  if (gLogObjects && gNumLogObjects >= 15)
  {
    int v4 = *(os_log_s **)(gLogObjects + 112);
  }

  else
  {
    int v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v37 = 138412290;
    *(void *)BOOL v38 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[#Events] Destroying endpoint %@...",  (uint8_t *)&v37,  0xCu);
  }

  if (v3) {
    CFRelease(v3);
  }
  if (acc_endpoint_isTransportRestricted((unsigned int *)v2))
  {
    if (gLogObjects && gNumLogObjects >= 15)
    {
      uint64_t v12 = *(os_log_s **)(gLogObjects + 112);
    }

    else
    {
      uint64_t v12 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(v2 + 8);
      uint64_t v13 = *(void *)(v2 + 16);
      int v37 = 138412546;
      *(void *)BOOL v38 = v13;
      *(_WORD *)&v38[8] = 2112;
      *(void *)&v38[10] = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Destroying endpoint with restricted transport...  (endpointUUID: %@, connectionUUID: %@)",  (uint8_t *)&v37,  0x16u);
    }
  }

  if (*(_BYTE *)(v2 + 121))
  {
    BOOL isTransportSupervised = acc_policies_isTransportSupervised(*(_DWORD *)(v2 + 24), *(_DWORD *)(*(void *)v2 + 8LL));
    if (isTransportSupervised) {
      platform_sleepAssertion_createForApplePencil(isTransportSupervised);
    }
  }

  int v16 = *(_DWORD *)(v2 + 28);
  if ((v16 | 2) == 7)
  {
    platform_externalAccessory_removeEAAccessoryForPrimaryEndpoint(*(void **)(v2 + 16));
    int v16 = *(_DWORD *)(v2 + 28);
  }

  if (v16 == 1) {
    platform_externalAccessory_removeEAAccessoryForPrimaryEndpoint(*(void **)(v2 + 16));
  }
  if (*(_BYTE *)(v2 + 89))
  {
    platform_analytics_endpointWillBeDestroyed((uint64_t *)v2);
    if (*(_BYTE *)(v2 + 89)) {
      platform_connectionInfo_accessoryEndpointDetached(*(void *)(v2 + 8), *(void *)(v2 + 16));
    }
  }

  os_signpost_id_t v17 = *(const void **)(v2 + 16);
  if (v17) {
    CFTypeRef v18 = CFRetain(v17);
  }
  else {
    CFTypeRef v18 = 0LL;
  }
  uint64_t v19 = *(void *)v2;
  if (*(void *)v2)
  {
    int v20 = *(const __CFDictionary **)(v19 + 40);
    if (v20)
    {
      if (acc_connection_isPublished(v19)) {
        acc_connection_publish(v19);
      }
    }
  }

  acc_protocolRouter_destroyProtocolLayer(v2, v5, v6, v7, v8, v9, v10, v11);
  acc_protocolParser_destroy(v2 + 48);
  if (*(void *)v19) {
    CFTypeRef v21 = CFRetain(*(CFTypeRef *)(v2 + 8));
  }
  else {
    CFTypeRef v21 = 0LL;
  }
  unsigned int v22 = *(const void **)(v2 + 112);
  if (v22)
  {
    CFRelease(v22);
    *(void *)(v2 + 112) = 0LL;
  }

  char v23 = *(const void **)(v2 + 16);
  if (v23)
  {
    CFRelease(v23);
    *(void *)(v2 + 16) = 0LL;
  }

  uint64_t v24 = *(const void **)(v2 + 8);
  if (v24)
  {
    CFRelease(v24);
    *(void *)(v2 + _Block_object_dispose(va, 8) = 0LL;
  }

  uint64_t v25 = *(const void **)(v2 + 32);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(v2 + 32) = 0LL;
  }

  acc_accInfo_destroy((void **)(v2 + 64));
  uint64_t v26 = *(const void **)(v2 + 72);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(v2 + 72) = 0LL;
  }

  pthread_mutex_lock((pthread_mutex_t *)(v2 + 128));
  uint64_t v27 = *(const void **)(v2 + 80);
  if (v27)
  {
    CFRelease(v27);
    *(void *)(v2 + 80) = 0LL;
  }

  pthread_mutex_unlock((pthread_mutex_t *)(v2 + 128));
  pthread_mutex_destroy((pthread_mutex_t *)(v2 + 128));
  if (*v1)
  {
    free(*v1);
    unsigned int *v1 = 0LL;
  }

  uint64_t v28 = gLogSignpostObjects;
  int v29 = gNumLogSignpostObjects;
  if (gLogSignpostObjects && gNumLogSignpostObjects >= 3)
  {
    uint64_t v30 = *(os_log_s **)(gLogSignpostObjects + 16);
    if (!gLogSignpostObjects)
    {
LABEL_66:
      int v31 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        acc_endpoint_create_cold_5();
      }
      goto LABEL_68;
    }
  }

  else
  {
    uint64_t v30 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      int v37 = 67109632;
      *(_DWORD *)BOOL v38 = 2;
      *(_WORD *)&v38[4] = 2048;
      *(void *)&v38[6] = v28;
      *(_WORD *)&v38[14] = 1024;
      *(_DWORD *)&v38[16] = v29;
      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging_signposts() / init_logging()!\n module %d, gLogSignpostObjects: %p, gNumLogSignpostObjects: %d",  (uint8_t *)&v37,  0x18u);
      uint64_t v28 = gLogSignpostObjects;
      int v29 = gNumLogSignpostObjects;
      if (!gLogSignpostObjects) {
        goto LABEL_66;
      }
    }

    else if (!v28)
    {
      goto LABEL_66;
    }
  }

  if (v29 < 3) {
    goto LABEL_66;
  }
  int v31 = *(os_log_s **)(v28 + 16);
LABEL_68:
  os_signpost_id_t v32 = os_signpost_id_make_with_pointer(v31, (const void *)v2);
  if (v32 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v33 = v32;
    if (os_signpost_enabled(v30))
    {
      int v37 = 138412290;
      *(void *)BOOL v38 = v18;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v30,  OS_SIGNPOST_INTERVAL_END,  v33,  "Endpoint",  "Destroy endpoint %@",  (uint8_t *)&v37,  0xCu);
    }
  }

  if (gLogObjects && gNumLogObjects >= 15)
  {
    int v34 = *(os_log_s **)(gLogObjects + 112);
  }

  else
  {
    int v34 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    int v37 = 138412546;
    *(void *)BOOL v38 = v18;
    *(_WORD *)&v38[8] = 2112;
    *(void *)&v38[10] = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Destroyed endpoint %@ for connection %@!",  (uint8_t *)&v37,  0x16u);
  }

  if (*(void *)(v19 + 40))
  {
    if (gLogObjects && gNumLogObjects >= 15)
    {
      __int16 v35 = *(os_log_s **)(gLogObjects + 112);
    }

    else
    {
      __int16 v35 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
    {
      CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(v19 + 40));
      int v37 = 134218242;
      *(void *)BOOL v38 = Count;
      *(_WORD *)&v38[8] = 2112;
      *(void *)&v38[10] = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_INFO,  "There are now %ld endpoint(s) for connection %@.",  (uint8_t *)&v37,  0x16u);
    }
  }

  if (v18) {
    CFRelease(v18);
  }
  if (v21) {
    CFRelease(v21);
  }
  return (void **)1;
}

BOOL acc_endpoint_isTransportRestricted(unsigned int *a1)
{
  if (!a1) {
    return 1LL;
  }
  uint64_t v2 = *(void *)a1;
  return !v2
      || acc_connection_getSupervisedTransportsRestricted(v2)
      && acc_policies_isTransportSupervised(a1[6], *(_DWORD *)(*(void *)a1 + 8LL));
}

CFStringRef acc_endpoint_copyDescription(uint64_t a1)
{
  if (!a1 || !*(void *)a1) {
    return 0LL;
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 128));
  uint64_t v21 = *(void *)(a1 + 16);
  uint64_t v20 = *(void *)(a1 + 8);
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  CFStringRef v3 = &kACCEndpoint_TransportType_Strings[17];
  uint64_t v4 = *v3;
  if (*(_DWORD *)(a1 + 28) >= 0x12u) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = *(unsigned int *)(a1 + 28);
  }
  uint64_t v6 = kACCEndpoint_Protocol_Strings[v5];
  uint64_t v18 = *(void *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 32);
  unint64_t CurrentUnixTimeMS = systemInfo_getCurrentUnixTimeMS();
  uint64_t v8 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 56)) {
    uint64_t v9 = "YES";
  }
  else {
    uint64_t v9 = "NO";
  }
  if (*(void *)(a1 + 64)) {
    uint64_t v10 = "YES";
  }
  else {
    uint64_t v10 = "NO";
  }
  uint64_t v11 = *(const __CFDictionary **)(a1 + 72);
  if (v11) {
    CFIndex Count = CFDictionaryGetCount(v11);
  }
  else {
    CFIndex Count = 0LL;
  }
  uint64_t v13 = CurrentUnixTimeMS - v8;
  uint64_t v14 = *(const __CFDictionary **)(a1 + 80);
  if (v14) {
    uint64_t v14 = (const __CFDictionary *)CFDictionaryGetCount(v14);
  }
  if (*(_BYTE *)(a1 + 89)) {
    unint64_t v15 = "YES";
  }
  else {
    unint64_t v15 = "NO";
  }
  CFStringRef v16 = CFStringCreateWithFormat( kCFAllocatorDefault,  0LL,  @"<ACCEndpoint_t: %@; parentConnectionUUID: %@; transportType: [%s]; protocol: [%s]; identifier: %@; creationTimestampMS: %llu; durationMS: %llu; protocolEndpoint: %s; accessoryInfo: %s; numAccessoryInfoOverrides: %ld; numProperties: %ld, published: %s>",
          v21,
          v20,
          v4,
          v6,
          v19,
          v18,
          v13,
          v9,
          v10,
          Count,
          v14,
          v15);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 128));
  return v16;
}

uint64_t acc_endpoint_setAccessoryInfo(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0LL;
  }
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 15;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    uint64_t v5 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    uint64_t v5 = *(os_log_s **)(gLogObjects + 112);
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 16);
    int v18 = 138412290;
    uint64_t v19 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Setting accessory info for endpoint %@...",  (uint8_t *)&v18,  0xCu);
  }

  uint64_t v7 = *(void *)(a1 + 64);
  if (!v7)
  {
    uint64_t v9 = acc_accInfo_create();
    uint64_t v8 = 0LL;
    *(void *)(a1 + 64) = v9;
    if (v9) {
      goto LABEL_13;
    }
    return 0LL;
  }

  uint64_t v8 = acc_accInfo_copyAccessoryInfoDictionary(v7);
  uint64_t v9 = *(char **)(a1 + 64);
  if (!v9) {
    return 0LL;
  }
LABEL_13:
  int v10 = acc_accInfo_setAccessoryInfo((uint64_t)v9, a2);
  BOOL v11 = _processAccessoryInfoOverrides(a1);
  uint64_t v12 = acc_accInfo_copyAccessoryInfoDictionary(*(void *)(a1 + 64));
  if (*(_BYTE *)(a1 + 89))
  {
    platform_analytics_endpointAccessoryInfoDidChange((uint64_t *)a1, (uint64_t)v8, v12);
    acc_connection_updateAcccessoryInfoIfNeeded(*(void *)a1, *(const void **)(a1 + 16));
  }

  if (v8) {
    CFRelease(v8);
  }
  if (v12) {
    CFRelease(v12);
  }
  CFStringRef v13 = acc_accInfo_copyAccessoryInfoDescription(*(CFStringRef *)(a1 + 64));
  if (gLogObjects && gNumLogObjects >= 15)
  {
    uint64_t v14 = *(os_log_s **)(gLogObjects + 112);
  }

  else
  {
    uint64_t v14 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(void *)(a1 + 16);
    int v18 = 138412546;
    uint64_t v19 = v15;
    __int16 v20 = 2112;
    CFStringRef v21 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "[#Events] Accessory info for endpoint %@ did change: %@",  (uint8_t *)&v18,  0x16u);
  }

  uint64_t v16 = v10 & v11;
  if (v13) {
    CFRelease(v13);
  }
  acc_connection_mapAccessoryInfo(*(uint64_t **)a1);
  return v16;
}

BOOL _processAccessoryInfoOverrides(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(const __CFDictionary **)(a1 + 72);
    if (v2)
    {
      if (CFDictionaryGetCount(v2) >= 1)
      {
        CFStringRef v3 = *(char **)(a1 + 64);
        if (v3 || (CFStringRef v3 = acc_accInfo_create(), (*(void *)(a1 + 64) = v3) != 0LL)) {
          acc_accInfo_updateAccessoryInfoWithDictionary((uint64_t)v3, *(const __CFDictionary **)(a1 + 72));
        }
      }
    }

    platform_externalAccessory_updateEAAccessoryInfoForEndpointWithUUID(*(void **)(a1 + 16));
    if (*(_BYTE *)(a1 + 89) && *(void *)a1) {
      platform_connectionInfo_accessoryEndpointInfoPropertyChanged(*(void *)(a1 + 8), *(const void **)(a1 + 16));
    }
  }

  return a1 != 0;
}

BOOL acc_endpoint_setAccessoryInfoOverridesWithDictionary(uint64_t a1, const void *a2)
{
  if (!a1) {
    return 0LL;
  }
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 15;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    uint64_t v5 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    uint64_t v5 = *(os_log_s **)(gLogObjects + 112);
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(const void **)(a1 + 16);
    int v16 = 138412290;
    os_signpost_id_t v17 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Setting accessory info overrides for endpoint %@...",  (uint8_t *)&v16,  0xCu);
  }

  if (gLogObjects && gNumLogObjects >= 15)
  {
    uint64_t v7 = *(os_log_s **)(gLogObjects + 112);
  }

  else
  {
    uint64_t v7 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v16 = 138412290;
    os_signpost_id_t v17 = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "accessoryInfoOverrides: %@", (uint8_t *)&v16, 0xCu);
  }

  uint64_t v8 = acc_accInfo_copyAccessoryInfoDictionary(*(void *)(a1 + 64));
  uint64_t v9 = *(const void **)(a1 + 72);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 72) = 0LL;
  }

  if (a2) {
    *(void *)(a1 + 72) = CFRetain(a2);
  }
  BOOL v10 = _processAccessoryInfoOverrides(a1);
  BOOL v11 = acc_accInfo_copyAccessoryInfoDictionary(*(void *)(a1 + 64));
  if (*(_BYTE *)(a1 + 89)) {
    platform_analytics_endpointAccessoryInfoDidChange((uint64_t *)a1, (uint64_t)v8, v11);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v11) {
    CFRelease(v11);
  }
  CFStringRef v12 = acc_accInfo_copyAccessoryInfoDescription(*(CFStringRef *)(a1 + 64));
  if (gLogObjects && gNumLogObjects >= 15)
  {
    CFStringRef v13 = *(os_log_s **)(gLogObjects + 112);
  }

  else
  {
    CFStringRef v13 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(const void **)(a1 + 16);
    int v16 = 138412546;
    os_signpost_id_t v17 = v14;
    __int16 v18 = 2112;
    CFStringRef v19 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "[#Events] Accessory info for endpoint %@ did change: %@",  (uint8_t *)&v16,  0x16u);
  }

  if (v12) {
    CFRelease(v12);
  }
  acc_connection_mapAccessoryInfo(*(uint64_t **)a1);
  return v10;
}

uint64_t acc_endpoint_clearAccessoryInfo(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    uint64_t v2 = (uint64_t *)(a1 + 64);
    CFStringRef v3 = acc_accInfo_copyAccessoryInfoDictionary(*(void *)(a1 + 64));
    BOOL v4 = acc_accInfo_destroy((void **)(v1 + 64));
    BOOL v5 = _processAccessoryInfoOverrides(v1);
    uint64_t v6 = acc_accInfo_copyAccessoryInfoDictionary(*v2);
    if (*(_BYTE *)(v1 + 89)) {
      platform_analytics_endpointAccessoryInfoDidChange((uint64_t *)v1, (uint64_t)v3, v6);
    }
    uint64_t v1 = v4 & v5;
    if (v3) {
      CFRelease(v3);
    }
    if (v6) {
      CFRelease(v6);
    }
  }

  return v1;
}

uint64_t acc_endpoint_publish(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    int v2 = *(unsigned __int8 *)(result + 89);
    if (!*(_BYTE *)(result + 89)) {
      platform_analytics_endpointWillBePublished(result);
    }
    switch(*(_DWORD *)(v1 + 28))
    {
      case 7:
        ea_endpoint_publish(*(void **)(v1 + 56));
        goto LABEL_16;
      case 8:
        oobPairing_endpoint_publish(*(void *)(v1 + 56), *(void *)(v1 + 64));
        goto LABEL_16;
      case 0xA:
        goto LABEL_12;
      case 0xD:
        audioProductCerts_endpoint_publish(*(BOOL **)(v1 + 56), *(void *)(v1 + 64));
        goto LABEL_16;
      case 0xE:
        mfi4Auth_endpoint_publish(*(void *)(v1 + 56));
        goto LABEL_16;
      case 0xF:
LABEL_12:
        BOOL result = 0LL;
        break;
      case 0x10:
        goto LABEL_16;
      case 0x11:
        BOOL result = t56_endpoint_publish(*(void *)(v1 + 56));
        if ((_DWORD)result) {
          goto LABEL_16;
        }
        return result;
      default:
LABEL_16:
        if (v2)
        {
          *(_BYTE *)(v1 + 89) = 1;
          if (*(_DWORD *)(v1 + 28) == 1) {
            platform_externalAccessory_updateEAAccessoryInfoForEndpointWithUUID(*(void **)(v1 + 16));
          }
          if (gLogObjects && gNumLogObjects >= 15)
          {
            CFStringRef v3 = *(os_log_s **)(gLogObjects + 112);
          }

          else
          {
            CFStringRef v3 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v7 = *(const __CFString **)(v1 + 16);
            int v10 = 138412290;
            CFStringRef v11 = v7;
            _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Re-published endpoint %@!",  (uint8_t *)&v10,  0xCu);
          }
        }

        else
        {
          uint64_t v4 = *(unsigned int *)(v1 + 28);
          if (*(void *)v1)
          {
            platform_connectionInfo_accessoryEndpointAttached( *(void *)(v1 + 8),  *(const void **)(v1 + 16),  *(unsigned int *)(v1 + 24),  v4);
            LODWORD(v4) = *(_DWORD *)(v1 + 28);
          }

          *(_BYTE *)(v1 + 89) = 1;
          if ((_DWORD)v4 == 1) {
            platform_externalAccessory_addEAAccessoryForPrimaryEndpoint(*(const char **)(v1 + 16));
          }
          CFStringRef v5 = acc_endpoint_copyDescription(v1);
          if (gLogObjects && gNumLogObjects >= 15)
          {
            uint64_t v6 = *(os_log_s **)(gLogObjects + 112);
          }

          else
          {
            uint64_t v6 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
          {
            int v10 = 138412290;
            CFStringRef v11 = v5;
            _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[#Events] Published endpoint %@!",  (uint8_t *)&v10,  0xCu);
          }

          if (v5) {
            CFRelease(v5);
          }
        }

        uint64_t v8 = *(void *)(v1 + 64);
        if (v8)
        {
          uint64_t v9 = acc_accInfo_copyAccessoryInfoDictionary(v8);
          platform_analytics_endpointAccessoryInfoDidChange((uint64_t *)v1, 0LL, v9);
          if (v9) {
            CFRelease(v9);
          }
        }

        BOOL result = 1LL;
        break;
    }
  }

  return result;
}

BOOL acc_endpoint_setProperties(pthread_mutex_t *a1, const __CFDictionary *a2)
{
  if (!a1) {
    return 0LL;
  }
  BOOL v3 = 0LL;
  if (a2 && a1->__sig)
  {
    if (gLogObjects) {
      BOOL v5 = gNumLogObjects < 15;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      uint64_t v6 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      uint64_t v6 = *(os_log_s **)(gLogObjects + 112);
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)&a1->__opaque[8];
      int v22 = 138412546;
      *(void *)char v23 = v7;
      *(_WORD *)&v23[8] = 2112;
      *(void *)&v23[10] = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Setting properties for endpoint %@: %@",  (uint8_t *)&v22,  0x16u);
    }

    pthread_mutex_lock(a1 + 2);
    uint64_t v8 = acc_properties_copyProperties(*(const __CFDictionary **)&a1[1].__opaque[8]);
    uint64_t v9 = gLogSignpostObjects;
    int v10 = gNumLogSignpostObjects;
    if (gLogSignpostObjects && gNumLogSignpostObjects >= 3)
    {
      CFStringRef v11 = *(os_log_s **)(gLogSignpostObjects + 16);
      if (!gLogSignpostObjects) {
        goto LABEL_22;
      }
    }

    else
    {
      CFStringRef v11 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int v22 = 67109632;
        *(_DWORD *)char v23 = 2;
        *(_WORD *)&v23[4] = 2048;
        *(void *)&v23[6] = v9;
        *(_WORD *)&v23[14] = 1024;
        *(_DWORD *)&v23[16] = v10;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging_signposts() / init_logging()!\n module %d, gLogSignpostObjects: %p, gNumLogSignpostObjects: %d",  (uint8_t *)&v22,  0x18u);
        uint64_t v9 = gLogSignpostObjects;
        int v10 = gNumLogSignpostObjects;
        if (!gLogSignpostObjects) {
          goto LABEL_22;
        }
      }

      else if (!v9)
      {
        goto LABEL_22;
      }
    }

    if (v10 >= 3)
    {
      CFStringRef v12 = *(os_log_s **)(v9 + 16);
LABEL_24:
      os_signpost_id_t v13 = os_signpost_id_make_with_pointer(v12, a1);
      if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v14 = v13;
        if (os_signpost_enabled(v11))
        {
          uint64_t v15 = *(void *)&a1->__opaque[8];
          CFIndex Count = CFDictionaryGetCount(a2);
          if (v8) {
            CFIndex v17 = CFDictionaryGetCount(v8);
          }
          else {
            CFIndex v17 = 0LL;
          }
          int v22 = 138412802;
          *(void *)char v23 = v15;
          *(_WORD *)&v23[8] = 2048;
          *(void *)&v23[10] = Count;
          *(_WORD *)&v23[18] = 2048;
          CFIndex v24 = v17;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  OS_SIGNPOST_EVENT,  v14,  "Endpoint PROPERTY",  "Endpoint SetProperties! %@, %lu properties, previous %lu properties",  (uint8_t *)&v22,  0x20u);
        }
      }

      BOOL v3 = acc_properties_setProperties(*(void **)&a1[1].__opaque[8], a2);
      __int16 v18 = acc_properties_copyProperties(*(const __CFDictionary **)&a1[1].__opaque[8]);
      pthread_mutex_unlock(a1 + 2);
      if (gLogObjects && gNumLogObjects >= 15)
      {
        CFStringRef v19 = *(os_log_s **)(gLogObjects + 112);
      }

      else
      {
        CFStringRef v19 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        uint64_t v20 = *(void *)&a1->__opaque[8];
        int v22 = 138412546;
        *(void *)char v23 = v20;
        *(_WORD *)&v23[8] = 2112;
        *(void *)&v23[10] = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "Set properties for endpoint %@: %@",  (uint8_t *)&v22,  0x16u);
      }

      if (a1[1].__opaque[16] && !a1[1].__opaque[48]) {
        platform_notifications_propertiesDidChangeForEndpointUUID( *(void *)&a1->__opaque[8],  *(void *)a1->__opaque,  v8,  v18);
      }
      if (a1[1].__opaque[17]) {
        platform_connectionInfo_accessoryEndpointInfoPropertyChanged( *(void *)a1->__opaque,  *(const void **)&a1->__opaque[8]);
      }
      if (v8) {
        CFRelease(v8);
      }
      if (v18) {
        CFRelease(v18);
      }
      return v3;
    }

LABEL_22:
    CFStringRef v12 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      acc_endpoint_create_cold_5();
    }
    goto LABEL_24;
  }

  return v3;
}

    os_signpost_id_t v14 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      acc_endpoint_create_cold_5();
    }
    goto LABEL_24;
  }

  return v4;
}

    CFStringRef v12 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      acc_endpoint_create_cold_5();
    }
    goto LABEL_24;
  }

  return v3;
}

  pthread_rwlock_unlock(&_gAccManagerLock);
  return Value;
}

  genre = self->_genre;
  if (genre)
  {
    genre = -[NSString UTF8String](genre, "UTF8String");
    validMask = self->_validMask;
  }

  a3->var6 = (char *)genre;
  a3->var0 |= 0x10000u;
  if ((validMask & 0x40000) != 0)
  {
LABEL_25:
    composer = self->_composer;
    if (composer) {
      composer = -[NSString UTF8String](composer, "UTF8String");
    }
    a3->var7 = (char *)composer;
    a3->var0 |= 0x40000u;
  }

  return v7;
}

    __break(0x5513u);
    goto LABEL_23;
  }

      __break(0x5519u);
    }
  }

  else if (a2)
  {
    if (a3) {
      *a3 = 0;
    }
    return 1LL;
  }

  return 0LL;
}

    __int16 v18 = 4294967233LL;
    goto LABEL_21;
  }

  if (*(void *)(a1 + 64) + 16LL < a4) {
    goto LABEL_22;
  }
  cc_clear(0x30uLL, __s);
  __memcpy_chk(__s, a5, a4, 48LL);
LABEL_11:
  update(a1, (uint64_t)__s);
LABEL_12:
  v24[1] = v24;
  inc_uint(a1 + 40, 8uLL);
  ccctr_init_internal(*(void *)(a1 + 56));
  for (CFIndex i = -(int)a2 & 0xFLL; a2; a2 -= v20)
  {
    if (a2 >= 0x80) {
      uint64_t v20 = 128LL;
    }
    else {
      uint64_t v20 = a2;
    }
    ccctr_update_internal(*(void *)(a1 + 56), (uint64_t)v11, v20, (uint64_t)&zeros, a3);
    a3 += v20;
  }

  ccctr_update_internal(*(void *)(a1 + 56), (uint64_t)v11, i, (uint64_t)&zeros, (uint64_t)v25);
  cc_clear(i, v25);
  if (a4) {
    CFStringRef v21 = __s;
  }
  else {
    CFStringRef v21 = &zeros;
  }
  update_with_ctr(a1, (uint64_t)v11, (uint64_t)v21);
  int v22 = ccctr_context_size(*(void *)(a1 + 56));
  cc_clear(v22, v11);
  __int16 v18 = 0LL;
  ++*(void *)(a1 + 48);
LABEL_21:
  cc_clear(0x30uLL, __s);
  return v18;
}

uint64_t acc_endpoint_setProperty(pthread_mutex_t *a1, const void *a2, const __CFNull *a3)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v4 = 0LL;
  if (a2 && a1->__sig)
  {
    if (gLogObjects) {
      BOOL v7 = gNumLogObjects < 15;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
      uint64_t v8 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      uint64_t v8 = *(os_log_s **)(gLogObjects + 112);
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)&a1->__opaque[8];
      int v23 = 138412546;
      *(void *)CFIndex v24 = a2;
      *(_WORD *)&void v24[8] = 2112;
      *(void *)&v24[10] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Setting property %@ for endpoint %@...",  (uint8_t *)&v23,  0x16u);
    }

    pthread_mutex_lock(a1 + 2);
    int v10 = acc_properties_copyProperties(*(const __CFDictionary **)&a1[1].__opaque[8]);
    uint64_t v11 = gLogSignpostObjects;
    int v12 = gNumLogSignpostObjects;
    if (gLogSignpostObjects && gNumLogSignpostObjects >= 3)
    {
      os_signpost_id_t v13 = *(os_log_s **)(gLogSignpostObjects + 16);
      if (!gLogSignpostObjects) {
        goto LABEL_22;
      }
    }

    else
    {
      os_signpost_id_t v13 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int v23 = 67109632;
        *(_DWORD *)CFIndex v24 = 2;
        *(_WORD *)&v24[4] = 2048;
        *(void *)&v24[6] = v11;
        *(_WORD *)&v24[14] = 1024;
        *(_DWORD *)&v24[16] = v12;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging_signposts() / init_logging()!\n module %d, gLogSignpostObjects: %p, gNumLogSignpostObjects: %d",  (uint8_t *)&v23,  0x18u);
        uint64_t v11 = gLogSignpostObjects;
        int v12 = gNumLogSignpostObjects;
        if (!gLogSignpostObjects) {
          goto LABEL_22;
        }
      }

      else if (!v11)
      {
        goto LABEL_22;
      }
    }

    if (v12 >= 3)
    {
      os_signpost_id_t v14 = *(os_log_s **)(v11 + 16);
LABEL_24:
      os_signpost_id_t v15 = os_signpost_id_make_with_pointer(v14, a1);
      if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v16 = v15;
        if (os_signpost_enabled(v13))
        {
          uint64_t v17 = *(void *)&a1->__opaque[8];
          if (v10) {
            CFIndex Count = CFDictionaryGetCount(v10);
          }
          else {
            CFIndex Count = 0LL;
          }
          int v23 = 138412802;
          *(void *)CFIndex v24 = v17;
          *(_WORD *)&void v24[8] = 2112;
          *(void *)&v24[10] = a2;
          *(_WORD *)&v24[18] = 2048;
          CFIndex v25 = Count;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v13,  OS_SIGNPOST_EVENT,  v16,  "Endpoint PROPERTY",  "Endpoint SetProperty! %@, property %@, previous %lu properties",  (uint8_t *)&v23,  0x20u);
        }
      }

      uint64_t v4 = acc_properties_setProperty(*(__CFDictionary **)&a1[1].__opaque[8], a2, a3);
      CFStringRef v19 = acc_properties_copyProperties(*(const __CFDictionary **)&a1[1].__opaque[8]);
      pthread_mutex_unlock(a1 + 2);
      if (gLogObjects && gNumLogObjects >= 15)
      {
        uint64_t v20 = *(os_log_s **)(gLogObjects + 112);
      }

      else
      {
        uint64_t v20 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        uint64_t v21 = *(void *)&a1->__opaque[8];
        int v23 = 138412802;
        *(void *)CFIndex v24 = a2;
        *(_WORD *)&void v24[8] = 2112;
        *(void *)&v24[10] = v21;
        *(_WORD *)&v24[18] = 2112;
        CFIndex v25 = (CFIndex)v19;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "Set property %@ for endpoint %@: %@",  (uint8_t *)&v23,  0x20u);
      }

      if (a1[1].__opaque[16] && !a1[1].__opaque[48]) {
        platform_notifications_propertiesDidChangeForEndpointUUID( *(void *)&a1->__opaque[8],  *(void *)a1->__opaque,  v10,  v19);
      }
      if (a1[1].__opaque[17]) {
        platform_connectionInfo_accessoryEndpointInfoPropertyChanged( *(void *)a1->__opaque,  *(const void **)&a1->__opaque[8]);
      }
      if (v10) {
        CFRelease(v10);
      }
      if (v19) {
        CFRelease(v19);
      }
      return v4;
    }

BOOL acc_endpoint_removeProperty(pthread_mutex_t *a1, const void *a2)
{
  if (!a1) {
    return 0LL;
  }
  BOOL v3 = 0LL;
  if (a2 && a1->__sig)
  {
    if (gLogObjects) {
      BOOL v5 = gNumLogObjects < 15;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      uint64_t v6 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      uint64_t v6 = *(os_log_s **)(gLogObjects + 112);
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)&a1->__opaque[8];
      int v21 = 138412546;
      *(void *)int v22 = a2;
      *(_WORD *)&v22[8] = 2112;
      *(void *)&v22[10] = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Removing property %@ for endpoint %@...",  (uint8_t *)&v21,  0x16u);
    }

    pthread_mutex_lock(a1 + 2);
    uint64_t v8 = acc_properties_copyProperties(*(const __CFDictionary **)&a1[1].__opaque[8]);
    uint64_t v9 = gLogSignpostObjects;
    int v10 = gNumLogSignpostObjects;
    if (gLogSignpostObjects && gNumLogSignpostObjects >= 3)
    {
      uint64_t v11 = *(os_log_s **)(gLogSignpostObjects + 16);
      if (!gLogSignpostObjects) {
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int v21 = 67109632;
        *(_DWORD *)int v22 = 2;
        *(_WORD *)&v22[4] = 2048;
        *(void *)&v22[6] = v9;
        *(_WORD *)&v22[14] = 1024;
        *(_DWORD *)&v22[16] = v10;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging_signposts() / init_logging()!\n module %d, gLogSignpostObjects: %p, gNumLogSignpostObjects: %d",  (uint8_t *)&v21,  0x18u);
        uint64_t v9 = gLogSignpostObjects;
        int v10 = gNumLogSignpostObjects;
        if (!gLogSignpostObjects) {
          goto LABEL_22;
        }
      }

      else if (!v9)
      {
        goto LABEL_22;
      }
    }

    if (v10 >= 3)
    {
      int v12 = *(os_log_s **)(v9 + 16);
LABEL_24:
      os_signpost_id_t v13 = os_signpost_id_make_with_pointer(v12, a1);
      if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v14 = v13;
        if (os_signpost_enabled(v11))
        {
          uint64_t v15 = *(void *)&a1->__opaque[8];
          if (v8) {
            CFIndex Count = CFDictionaryGetCount(v8);
          }
          else {
            CFIndex Count = 0LL;
          }
          int v21 = 138412802;
          *(void *)int v22 = v15;
          *(_WORD *)&v22[8] = 2112;
          *(void *)&v22[10] = a2;
          *(_WORD *)&v22[18] = 2048;
          CFIndex v23 = Count;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  OS_SIGNPOST_EVENT,  v14,  "Endpoint PROPERTY",  "Endpoint RemoveProperty! %@, property %@, previous %lu properties",  (uint8_t *)&v21,  0x20u);
        }
      }

      BOOL v3 = acc_properties_removeProperty(*(CFMutableDictionaryRef *)&a1[1].__opaque[8], a2);
      uint64_t v17 = acc_properties_copyProperties(*(const __CFDictionary **)&a1[1].__opaque[8]);
      pthread_mutex_unlock(a1 + 2);
      if (gLogObjects && gNumLogObjects >= 15)
      {
        __int16 v18 = *(os_log_s **)(gLogObjects + 112);
      }

      else
      {
        __int16 v18 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        uint64_t v19 = *(void *)&a1->__opaque[8];
        int v21 = 138412802;
        *(void *)int v22 = a2;
        *(_WORD *)&v22[8] = 2112;
        *(void *)&v22[10] = v19;
        *(_WORD *)&v22[18] = 2112;
        CFIndex v23 = (CFIndex)v17;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "Removed property %@ for endpoint %@: %@",  (uint8_t *)&v21,  0x20u);
      }

      if (a1[1].__opaque[16] && !a1[1].__opaque[48]) {
        platform_notifications_propertiesDidChangeForEndpointUUID( *(void *)&a1->__opaque[8],  *(void *)a1->__opaque,  v8,  v17);
      }
      if (a1[1].__opaque[17]) {
        platform_connectionInfo_accessoryEndpointInfoPropertyChanged( *(void *)a1->__opaque,  *(const void **)&a1->__opaque[8]);
      }
      if (v8) {
        CFRelease(v8);
      }
      if (v17) {
        CFRelease(v17);
      }
      return v3;
    }

pthread_mutex_t *acc_endpoint_copyProperty(pthread_mutex_t *result, const void *a2)
{
  if (result)
  {
    BOOL v3 = result;
    uint64_t v4 = result + 2;
    pthread_mutex_lock(result + 2);
    BOOL v5 = acc_properties_copyProperty(*(const __CFDictionary **)&v3[1].__opaque[8], a2);
    pthread_mutex_unlock(v4);
    return (pthread_mutex_t *)v5;
  }

  return result;
}

pthread_mutex_t *acc_endpoint_copyProperties(pthread_mutex_t *result)
{
  if (result)
  {
    uint64_t v1 = result;
    int v2 = result + 2;
    pthread_mutex_lock(result + 2);
    BOOL v3 = acc_properties_copyProperties(*(const __CFDictionary **)&v1[1].__opaque[8]);
    pthread_mutex_unlock(v2);
    return (pthread_mutex_t *)v3;
  }

  return result;
}

uint64_t acc_endpoint_processIncomingData(uint64_t a1, CFDataRef theData)
{
  if (!a1) {
    return 0LL;
  }
  BOOL v3 = 0LL;
  if (!theData || !*(void *)a1) {
    return v3;
  }
  CFIndex Length = CFDataGetLength(theData);
  if (acc_userDefaultsLogging_BOOLForKey((uint64_t)@"TransportSignpost"))
  {
    CFHashCode v6 = CFHash(*(CFTypeRef *)(a1 + 16));
    os_signpost_id_t v7 = CFHash(theData) ^ v6;
    if (gLogSignpostObjects && gNumLogSignpostObjects >= 3)
    {
      uint64_t v8 = *(os_log_s **)(gLogSignpostObjects + 16);
    }

    else
    {
      uint64_t v8 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        acc_endpoint_create_cold_5();
      }
    }

    if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
    {
      uint64_t v9 = *(void *)(a1 + 16);
      *(_DWORD *)buf = 138412546;
      *(void *)char v64 = v9;
      *(_WORD *)&v64[8] = 2048;
      *(void *)&v64[10] = CFDataGetLength(theData);
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v8,  OS_SIGNPOST_EVENT,  v7,  "Endpoint RECV",  "Received incoming data! %@, %lu bytes",  buf,  0x16u);
    }
  }

  if (acc_endpoint_isTransportRestricted((unsigned int *)a1))
  {
    __int16 v53 = (os_log_s *)logObjectForModule_2();
    BOOL v3 = 1LL;
    if (!os_log_type_enabled(v53, OS_LOG_TYPE_INFO)) {
      return v3;
    }
    int v54 = *(_DWORD *)(a1 + 24);
    uint64_t v55 = *(void *)(a1 + 16);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)char v64 = v54;
    *(_WORD *)&v64[4] = 2048;
    *(void *)&v64[6] = Length;
    *(_WORD *)&v64[14] = 2112;
    *(void *)&v64[16] = v55;
    int v56 = "Transport %{coreacc:ACCEndpoint_TransportType_t}d is restricted, dropping %ld bytes of incoming data for endpoint %@!";
    uint64_t v57 = v53;
    uint32_t v58 = 28;
LABEL_123:
    _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_INFO, v56, buf, v58);
    return v3;
  }

  int v62 = 0;
  if (acc_manager_isLockoutActiveForTransportType(*(unsigned int *)(a1 + 24), &v62))
  {
    __int16 v59 = (os_log_s *)logObjectForModule_2();
    BOOL v3 = 1LL;
    if (!os_log_type_enabled(v59, OS_LOG_TYPE_INFO)) {
      return v3;
    }
    int v60 = *(_DWORD *)(a1 + 24);
    uint64_t v61 = *(void *)(a1 + 16);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)char v64 = v60;
    *(_WORD *)&v64[4] = 1024;
    *(_DWORD *)&v64[6] = v62;
    *(_WORD *)&v64[10] = 2048;
    *(void *)&v64[12] = Length;
    *(_WORD *)&v64[20] = 2112;
    *(void *)&v64[22] = v61;
    int v56 = "Transport %{coreacc:ACCEndpoint_TransportType_t}d is locked out for %u more second(s), dropping %ld bytes of i"
          "ncoming data for endpoint %@!";
    uint64_t v57 = v59;
    uint32_t v58 = 34;
    goto LABEL_123;
  }

  if (acc_platform_packetLogging_isLogPacketDataAsMsg() || platform_systemInfo_isInternalBuild())
  {
    if (gLogObjects && gNumLogObjects >= 15)
    {
      int v10 = *(os_log_s **)(gLogObjects + 112);
    }

    else
    {
      int v10 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = *(void *)(a1 + 16);
      int v12 = *(_DWORD *)(a1 + 24);
      BytePtr = CFDataGetBytePtr(theData);
      *(_DWORD *)buf = 134219010;
      *(void *)char v64 = Length;
      *(_WORD *)&v64[8] = 2112;
      *(void *)&v64[10] = v11;
      *(_WORD *)&v64[18] = 1024;
      *(_DWORD *)&v64[20] = v12;
      *(_WORD *)&v64[24] = 1040;
      *(_DWORD *)&v64[26] = Length;
      __int16 v65 = 2096;
      int32x2_t v66 = BytePtr;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Received %ld bytes of incoming data for endpoint %@ (type:%{coreacc:ACCEndpoint_TransportType_t}d):\n %{coreacc:bytes}.*P",  buf,  0x2Cu);
    }
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 15)
    {
      os_signpost_id_t v14 = *(os_log_s **)(gLogObjects + 112);
    }

    else
    {
      os_signpost_id_t v14 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v47 = *(void *)(a1 + 16);
      int v48 = *(_DWORD *)(a1 + 24);
      unsigned int v49 = CFDataGetBytePtr(theData);
      *(_DWORD *)buf = 134219010;
      *(void *)char v64 = Length;
      *(_WORD *)&v64[8] = 2112;
      *(void *)&v64[10] = v47;
      *(_WORD *)&v64[18] = 1024;
      *(_DWORD *)&v64[20] = v48;
      *(_WORD *)&v64[24] = 1040;
      *(_DWORD *)&v64[26] = Length;
      __int16 v65 = 2096;
      int32x2_t v66 = v49;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "Received %ld bytes of incoming data for endpoint %@ (type:%{coreacc:ACCEndpoint_TransportType_t}d):\n %{coreacc:bytes}.*P",  buf,  0x2Cu);
    }
  }

  if (Length < 1) {
    return 1LL;
  }
  int v15 = *(_DWORD *)(a1 + 92);
  if (v15 == -1)
  {
    __acc_endpoint_setupPassthroughMode(a1);
    int v15 = *(_DWORD *)(a1 + 92);
  }

  if (v15 == 1) {
    goto LABEL_126;
  }
  if (v15 == -1)
  {
    __acc_endpoint_setupPassthroughMode(a1);
    int v15 = *(_DWORD *)(a1 + 92);
  }

  if (v15 == 2)
  {
LABEL_126:
    if (acc_platform_packetLogging_isLogPacketDataAsMsg() || platform_systemInfo_isInternalBuild())
    {
      if (gLogObjects && gNumLogObjects >= 15)
      {
        os_signpost_id_t v16 = *(os_log_s **)(gLogObjects + 112);
      }

      else
      {
        os_signpost_id_t v16 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        uint64_t v18 = *(void *)(a1 + 16);
        int v19 = *(_DWORD *)(a1 + 92);
        *(_DWORD *)buf = 138412546;
        *(void *)char v64 = v18;
        *(_WORD *)&v64[8] = 1024;
        *(_DWORD *)&v64[10] = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "Endpoint %@ isPassThrough(passthroughMode=%d)",  buf,  0x12u);
      }
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 15)
      {
        uint64_t v20 = *(os_log_s **)(gLogObjects + 112);
      }

      else
      {
        uint64_t v20 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
        acc_endpoint_processIncomingData_cold_7();
      }
    }

    if ((*(_BYTE *)(a1 + 96) || (__acc_endpoint_setupPassthroughPair(a1), *(_BYTE *)(a1 + 96)))
      && *(void *)(a1 + 104))
    {
      if (acc_platform_packetLogging_isLogPacketDataAsMsg() || platform_systemInfo_isInternalBuild())
      {
        if (gLogObjects && gNumLogObjects >= 15)
        {
          CFIndex v25 = *(os_log_s **)(gLogObjects + 112);
        }

        else
        {
          CFIndex v25 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
        {
          CFIndex v27 = CFDataGetLength(theData);
          uint64_t v28 = *(void *)(a1 + 16);
          uint64_t v29 = *(void *)(a1 + 104);
          *(_DWORD *)buf = 134218498;
          *(void *)char v64 = v27;
          *(_WORD *)&v64[8] = 2112;
          *(void *)&v64[10] = v28;
          *(_WORD *)&v64[18] = 2112;
          *(void *)&v64[20] = v29;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "Passthrough %ld bytes of data for endpoint %@ to %@",  buf,  0x20u);
        }
      }

      else
      {
        if (gLogObjects && gNumLogObjects >= 15)
        {
          os_signpost_id_t v32 = *(os_log_s **)(gLogObjects + 112);
        }

        else
        {
          os_signpost_id_t v32 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
          CFIndex v50 = CFDataGetLength(theData);
          uint64_t v51 = *(void *)(a1 + 16);
          uint64_t v52 = *(void *)(a1 + 104);
          *(_DWORD *)buf = 134218498;
          *(void *)char v64 = v50;
          *(_WORD *)&v64[8] = 2112;
          *(void *)&v64[10] = v51;
          *(_WORD *)&v64[18] = 2112;
          *(void *)&v64[20] = v52;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "Passthrough %ld bytes of data for endpoint %@ to %@",  buf,  0x20u);
        }
      }

      EndpointWithUUID = acc_manager_getEndpointWithUUID(*(const void **)(a1 + 104));
    }

    else if (acc_platform_packetLogging_isLogPacketDataAsMsg() || platform_systemInfo_isInternalBuild())
    {
      if (gLogObjects && gNumLogObjects >= 15)
      {
        uint64_t v26 = *(os_log_s **)(gLogObjects + 112);
      }

      else
      {
        uint64_t v26 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        CFIndex v30 = CFDataGetLength(theData);
        uint64_t v31 = *(void *)(a1 + 16);
        *(_DWORD *)buf = 134218242;
        *(void *)char v64 = v30;
        *(_WORD *)&v64[8] = 2112;
        *(void *)&v64[10] = v31;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "No Passthrough pair, ignore %ld bytes of data for endpoint %@",  buf,  0x16u);
      }
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 15)
      {
        os_signpost_id_t v33 = *(os_log_s **)(gLogObjects + 112);
      }

      else
      {
        os_signpost_id_t v33 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
        acc_endpoint_processIncomingData_cold_2(theData, a1, v33);
      }
    }

    return 0LL;
  }

  if (*(_DWORD *)(a1 + 28)) {
    return acc_protocolRouter_routeIncomingData(a1, theData);
  }
  uint64_t v21 = acc_protocolParser_detectProtocol((uint64_t *)(a1 + 48), theData);
  if (!(_DWORD)v21) {
    return 1LL;
  }
  uint64_t v22 = v21;
  CFIndex v23 = **(const __CFData ***)(a1 + 48);
  if (gLogObjects && gNumLogObjects >= 15)
  {
    CFIndex v24 = *(os_log_s **)(gLogObjects + 112);
  }

  else
  {
    CFIndex v24 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v42 = *(void *)(a1 + 16);
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)char v64 = v22;
    *(_WORD *)&v64[4] = 2112;
    *(void *)&v64[6] = v42;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Protocol %{coreacc:ACCEndpoint_Protocol_t}d detected for endpoint %@!",  buf,  0x12u);
  }

  int v43 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = v22;
  if (v43 != (_DWORD)v22)
  {
    if (gLogObjects && gNumLogObjects >= 15)
    {
      uint64_t v44 = *(os_log_s **)(gLogObjects + 112);
    }

    else
    {
      uint64_t v44 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v46 = *(void *)(a1 + 16);
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)char v64 = v22;
      *(_WORD *)&v64[4] = 2112;
      *(void *)&v64[6] = v46;
      _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "Set protocol to %{coreacc:ACCEndpoint_Protocol_t}d for endpoint %@!",  buf,  0x12u);
    }

    if (*(void *)a1) {
      acc_connection_mapAccessoryInfo(*(uint64_t **)a1);
    }
    platform_analytics_endpointProtocolDidChange((uint64_t *)a1);
    if (*(_BYTE *)(a1 + 89) && *(void *)a1) {
      platform_connectionInfo_accessoryEndpointProtocolUpdate(*(void *)(a1 + 8), *(const void **)(a1 + 16), v22);
    }
  }

  acc_protocolRouter_initProtocolLayer(a1, v35, v36, v37, v38, v39, v40, v41);
  BOOL v3 = acc_protocolRouter_routeIncomingData(a1, v23);
  acc_protocolParser_destroy(a1 + 48);
  return v3;
}

void __acc_endpoint_setupPassthroughPair(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 15;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    BOOL v3 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    BOOL v3 = *(os_log_s **)(gLogObjects + 112);
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    __acc_endpoint_setupPassthroughPair_cold_7();
  }
  int v4 = *(_DWORD *)(a1 + 92);
  if (v4 == -1)
  {
    __acc_endpoint_setupPassthroughMode(a1);
    int v4 = *(_DWORD *)(a1 + 92);
  }

  switch(v4)
  {
    case -1:
      __acc_endpoint_setupPassthroughMode(a1);
      int v4 = *(_DWORD *)(a1 + 92);
      break;
    case 1:
      BOOL v5 = acc_manager_copyAllEndpoints();
      CFIndex Count = CFDictionaryGetCount(v5);
      if (gLogObjects && gNumLogObjects >= 15)
      {
        os_signpost_id_t v7 = *(os_log_s **)(gLogObjects + 112);
      }

      else
      {
        os_signpost_id_t v7 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      BOOL v11 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
      if (v11) {
        __acc_endpoint_setupPassthroughPair_cold_5();
      }
      int v60 = &v58;
      __chkstk_darwin(v11);
      os_signpost_id_t v13 = (const void **)((char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v61 = v5;
      if (Count)
      {
        memset((char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL), 170, v12);
        CFDictionaryGetKeysAndValues(v5, 0LL, v13);
        if (Count >= 1)
        {
          uint64_t v15 = 0LL;
          CFAllocatorRef v63 = kCFAllocatorDefault;
          *(void *)&__int128 v14 = 134218240LL;
          __int128 v58 = v14;
          *(void *)&__int128 v14 = 138413314LL;
          __int128 v59 = v14;
          *(void *)&__int128 v14 = 138412546LL;
          __int128 v62 = v14;
          do
          {
            uint64_t v16 = gLogObjects;
            int v17 = gNumLogObjects;
            if (gLogObjects) {
              BOOL v18 = gNumLogObjects < 15;
            }
            else {
              BOOL v18 = 1;
            }
            if (v18)
            {
              int v19 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = v58;
                uint64_t v65 = v16;
                __int16 v66 = 1024;
                *(_DWORD *)__int128 v67 = v17;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                int v19 = (os_log_s *)&_os_log_default;
              }
            }

            else
            {
              int v19 = *(os_log_s **)(gLogObjects + 112);
            }

            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v30 = *(void *)(a1 + 16);
              uint64_t v31 = v13[v15];
              uint64_t v32 = v31[2];
              LODWORD(v31) = *((_DWORD *)v31 + 23);
              *(_DWORD *)buf = v59;
              uint64_t v65 = v30;
              __int16 v66 = 1024;
              *(_DWORD *)__int128 v67 = v15;
              *(_WORD *)&v67[4] = 2048;
              *(void *)&v67[6] = Count;
              __int16 v68 = 2112;
              uint64_t v69 = v32;
              __int16 v70 = 1024;
              int v71 = (int)v31;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "setupPassthroughPair (Accessory) for endpoint %@, index= %d / %ld, %@ passthroughMode=%d",  buf,  0x2Cu);
            }

            uint64_t v20 = v13[v15];
            int v21 = v20[23];
            if (v21 == -1)
            {
              __acc_endpoint_setupPassthroughMode((uint64_t)v13[v15]);
              int v21 = v20[23];
            }

            if (v21 == 2)
            {
              uint64_t v22 = gLogObjects;
              int v23 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 15)
              {
                CFIndex v24 = *(os_log_s **)(gLogObjects + 112);
              }

              else
              {
                CFIndex v24 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = v58;
                  uint64_t v65 = v22;
                  __int16 v66 = 1024;
                  *(_DWORD *)__int128 v67 = v23;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                  CFIndex v24 = (os_log_s *)&_os_log_default;
                }
              }

              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v33 = *((void *)v13[v15] + 2);
                uint64_t v34 = *(void *)(a1 + 16);
                *(_DWORD *)buf = v62;
                uint64_t v65 = v33;
                __int16 v66 = 2112;
                *(void *)__int128 v67 = v34;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "Found passthroughDevice endpoint %@ for passthroughAccessory endpoint %@",  buf,  0x16u);
              }

              if (*(_BYTE *)(a1 + 96))
              {
                uint64_t v25 = gLogObjects;
                int v26 = gNumLogObjects;
                if (gLogObjects && gNumLogObjects >= 15)
                {
                  CFIndex v27 = *(os_log_s **)(gLogObjects + 112);
                }

                else
                {
                  CFIndex v27 = (os_log_s *)&_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = v58;
                    uint64_t v65 = v25;
                    __int16 v66 = 1024;
                    *(_DWORD *)__int128 v67 = v26;
                    _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                    CFIndex v27 = (os_log_s *)&_os_log_default;
                  }
                }

                if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v28 = *((void *)v13[v15] + 2);
                  uint64_t v29 = *(void *)(a1 + 16);
                  *(_DWORD *)buf = v62;
                  uint64_t v65 = v28;
                  __int16 v66 = 2112;
                  *(void *)__int128 v67 = v29;
                  _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "ERROR: Found more than one passthroughDevice endpoint (%@) for passthroughAccessory endpoint %@ !",  buf,  0x16u);
                }
              }

              *(void *)(a1 + 104) = CFStringCreateCopy(v63, *((CFStringRef *)v13[v15] + 2));
              *(_BYTE *)(a1 + 96) = 1;
            }

            ++v15;
          }

          while (Count != v15);
        }

        goto LABEL_100;
      }

LABEL_99:
      CFDictionaryGetKeysAndValues(v5, 0LL, v13);
LABEL_100:
      if (v61) {
        CFRelease(v61);
      }
      return;
    case 2:
      BOOL v5 = acc_manager_copyAllEndpoints();
      CFIndex v8 = CFDictionaryGetCount(v5);
      if (gLogObjects && gNumLogObjects >= 15)
      {
        uint64_t v9 = *(os_log_s **)(gLogObjects + 112);
      }

      else
      {
        uint64_t v9 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      BOOL v35 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
      if (v35) {
        __acc_endpoint_setupPassthroughPair_cold_1();
      }
      int v60 = &v58;
      __chkstk_darwin(v35);
      os_signpost_id_t v13 = (const void **)((char *)&v58 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v61 = v5;
      if (v8)
      {
        memset((char *)&v58 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL), 170, v36);
        CFDictionaryGetKeysAndValues(v5, 0LL, v13);
        if (v8 >= 1)
        {
          uint64_t v38 = 0LL;
          CFAllocatorRef v63 = kCFAllocatorDefault;
          *(void *)&__int128 v37 = 134218240LL;
          __int128 v58 = v37;
          *(void *)&__int128 v37 = 138413314LL;
          __int128 v59 = v37;
          *(void *)&__int128 v37 = 138412546LL;
          __int128 v62 = v37;
          do
          {
            uint64_t v39 = gLogObjects;
            int v40 = gNumLogObjects;
            if (gLogObjects) {
              BOOL v41 = gNumLogObjects < 15;
            }
            else {
              BOOL v41 = 1;
            }
            if (v41)
            {
              uint64_t v42 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = v58;
                uint64_t v65 = v39;
                __int16 v66 = 1024;
                *(_DWORD *)__int128 v67 = v40;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                uint64_t v42 = (os_log_s *)&_os_log_default;
              }
            }

            else
            {
              uint64_t v42 = *(os_log_s **)(gLogObjects + 112);
            }

            if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v53 = *(void *)(a1 + 16);
              int v54 = v13[v38];
              uint64_t v55 = v54[2];
              LODWORD(v54) = *((_DWORD *)v54 + 23);
              *(_DWORD *)buf = v59;
              uint64_t v65 = v53;
              __int16 v66 = 1024;
              *(_DWORD *)__int128 v67 = v38;
              *(_WORD *)&v67[4] = 2048;
              *(void *)&v67[6] = v8;
              __int16 v68 = 2112;
              uint64_t v69 = v55;
              __int16 v70 = 1024;
              int v71 = (int)v54;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEBUG,  "setupPassthroughPair (Device) for endpoint %@, index= %d / %ld, %@ passthroughMode=%d",  buf,  0x2Cu);
            }

            int v43 = v13[v38];
            int v44 = v43[23];
            if (v44 == -1)
            {
              __acc_endpoint_setupPassthroughMode((uint64_t)v13[v38]);
              int v44 = v43[23];
            }

            if (v44 == 1)
            {
              uint64_t v45 = gLogObjects;
              int v46 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 15)
              {
                uint64_t v47 = *(os_log_s **)(gLogObjects + 112);
              }

              else
              {
                uint64_t v47 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = v58;
                  uint64_t v65 = v45;
                  __int16 v66 = 1024;
                  *(_DWORD *)__int128 v67 = v46;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                  uint64_t v47 = (os_log_s *)&_os_log_default;
                }
              }

              if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v56 = *((void *)v13[v38] + 2);
                uint64_t v57 = *(void *)(a1 + 16);
                *(_DWORD *)buf = v62;
                uint64_t v65 = v56;
                __int16 v66 = 2112;
                *(void *)__int128 v67 = v57;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEBUG,  "Found passthroughAccessory endpoint %@ for passthroughDevice endpoint %@",  buf,  0x16u);
              }

              if (*(_BYTE *)(a1 + 96))
              {
                uint64_t v48 = gLogObjects;
                int v49 = gNumLogObjects;
                if (gLogObjects && gNumLogObjects >= 15)
                {
                  CFIndex v50 = *(os_log_s **)(gLogObjects + 112);
                }

                else
                {
                  CFIndex v50 = (os_log_s *)&_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = v58;
                    uint64_t v65 = v48;
                    __int16 v66 = 1024;
                    *(_DWORD *)__int128 v67 = v49;
                    _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                    CFIndex v50 = (os_log_s *)&_os_log_default;
                  }
                }

                if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v51 = *((void *)v13[v38] + 2);
                  uint64_t v52 = *(void *)(a1 + 16);
                  *(_DWORD *)buf = v62;
                  uint64_t v65 = v51;
                  __int16 v66 = 2112;
                  *(void *)__int128 v67 = v52;
                  _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "ERROR: Found more than one passthroughAccessory endpoint (%@) for passthroughDevice endpoint %@ !",  buf,  0x16u);
                }
              }

              *(void *)(a1 + 104) = CFStringCreateCopy(v63, *((CFStringRef *)v13[v38] + 2));
              *(_BYTE *)(a1 + 96) = 1;
            }

            ++v38;
          }

          while (v8 != v38);
        }

        goto LABEL_100;
      }

      goto LABEL_99;
  }

  if (gLogObjects && gNumLogObjects >= 15)
  {
    int v10 = *(os_log_s **)(gLogObjects + 112);
  }

  else
  {
    int v10 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
    __acc_endpoint_setupPassthroughPair_cold_3();
  }
  *(_BYTE *)(a1 + 96) = 1;
  *(void *)(a1 + 104) = 0LL;
}

uint64_t acc_endpoint_sendOutgoingData(uint64_t a1, const __CFData *a2)
{
  if (!a1)
  {
    CFIndex v27 = (os_log_s *)logObjectForModule_2();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      acc_endpoint_sendOutgoingData_cold_1(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    return 0LL;
  }

  if (!*(void *)a1)
  {
    BOOL v35 = (os_log_s *)logObjectForModule_2();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
      acc_endpoint_sendOutgoingData_cold_2(v35, v36, v37, v38, v39, v40, v41, v42);
    }
    return 0LL;
  }

  int v48 = 0;
  if (acc_manager_isLockoutActiveForTransportType(*(unsigned int *)(a1 + 24), &v48))
  {
    int v43 = (os_log_s *)logObjectForModule_2();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      int v44 = *(_DWORD *)(a1 + 24);
      int v45 = v48;
      CFIndex Length = CFDataGetLength(a2);
      uint64_t v47 = *(void *)(a1 + 16);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)CFIndex v50 = v44;
      *(_WORD *)&v50[4] = 1024;
      *(_DWORD *)&v50[6] = v45;
      *(_WORD *)uint64_t v51 = 2048;
      *(void *)&v51[2] = Length;
      *(_WORD *)uint64_t v52 = 2112;
      *(void *)&v52[2] = v47;
      _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "Transport %{coreacc:ACCEndpoint_TransportType_t}d is locked out for %u more second(s), dropping %ld bytes of out going data for endpoint %@!",  buf,  0x22u);
    }

    return 1LL;
  }

  else
  {
    CFHashCode v4 = CFHash(*(CFTypeRef *)(a1 + 16));
    os_signpost_id_t v5 = CFHash(a2) ^ v4;
    if (acc_userDefaultsLogging_BOOLForKey((uint64_t)@"TransportSignpost"))
    {
      if (gLogSignpostObjects && gNumLogSignpostObjects >= 3)
      {
        CFHashCode v6 = *(os_log_s **)(gLogSignpostObjects + 16);
      }

      else
      {
        CFHashCode v6 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          acc_endpoint_create_cold_5();
        }
      }

      if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
      {
        uint64_t v7 = *(void *)(a1 + 16);
        CFIndex v8 = CFDataGetLength(a2);
        *(_DWORD *)buf = 138412546;
        *(void *)CFIndex v50 = v7;
        *(_WORD *)&v50[8] = 2048;
        *(void *)uint64_t v51 = v8;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_INTERVAL_BEGIN,  v5,  "Endpoint SEND",  "Send outgoing data! %@, %lu bytes",  buf,  0x16u);
      }
    }

    if (acc_platform_packetLogging_isLogPacketDataAsMsg() || platform_systemInfo_isInternalBuild())
    {
      if (gLogObjects && gNumLogObjects >= 15)
      {
        uint64_t v9 = *(os_log_s **)(gLogObjects + 112);
      }

      else
      {
        uint64_t v9 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        CFIndex v10 = CFDataGetLength(a2);
        uint64_t v11 = *(void *)(a1 + 16);
        int v12 = *(_DWORD *)(a1 + 24);
        int v13 = CFDataGetLength(a2);
        BytePtr = CFDataGetBytePtr(a2);
        *(_DWORD *)buf = 134219010;
        *(void *)CFIndex v50 = v10;
        *(_WORD *)&v50[8] = 2112;
        *(void *)uint64_t v51 = v11;
        *(_WORD *)&v51[8] = 1024;
        *(_DWORD *)uint64_t v52 = v12;
        *(_WORD *)&v52[4] = 1040;
        *(_DWORD *)&v52[6] = v13;
        __int16 v53 = 2096;
        int v54 = BytePtr;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Sending %ld bytes of outgoing data for endpoint %@ (type:%{coreacc:ACCEndpoint_TransportType_t}d):\n %{coreacc:bytes}.*P",  buf,  0x2Cu);
      }
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 15)
      {
        uint64_t v15 = *(os_log_s **)(gLogObjects + 112);
      }

      else
      {
        uint64_t v15 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        CFIndex v22 = CFDataGetLength(a2);
        uint64_t v23 = *(void *)(a1 + 16);
        int v24 = *(_DWORD *)(a1 + 24);
        int v25 = CFDataGetLength(a2);
        int v26 = CFDataGetBytePtr(a2);
        *(_DWORD *)buf = 134219010;
        *(void *)CFIndex v50 = v22;
        *(_WORD *)&v50[8] = 2112;
        *(void *)uint64_t v51 = v23;
        *(_WORD *)&v51[8] = 1024;
        *(_DWORD *)uint64_t v52 = v24;
        *(_WORD *)&v52[4] = 1040;
        *(_DWORD *)&v52[6] = v25;
        __int16 v53 = 2096;
        int v54 = v26;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "Sending %ld bytes of outgoing data for endpoint %@ (type:%{coreacc:ACCEndpoint_TransportType_t}d):\n %{coreacc:bytes}.*P",  buf,  0x2Cu);
      }
    }

    uint64_t v16 = acc_connection_sendDataOut(*(uint64_t **)a1, *(void *)(a1 + 16), a2);
    if (acc_userDefaultsLogging_BOOLForKey((uint64_t)@"TransportSignpost"))
    {
      if (gLogSignpostObjects && gNumLogSignpostObjects >= 3)
      {
        int v17 = *(os_log_s **)(gLogSignpostObjects + 16);
      }

      else
      {
        int v17 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          acc_endpoint_create_cold_5();
        }
      }

      if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v17))
      {
        if ((_DWORD)v16) {
          BOOL v18 = "SUCCESS";
        }
        else {
          BOOL v18 = "ERROR";
        }
        uint64_t v19 = *(void *)(a1 + 16);
        CFIndex v20 = CFDataGetLength(a2);
        *(_DWORD *)buf = 136315650;
        *(void *)CFIndex v50 = v18;
        *(_WORD *)&v50[8] = 2112;
        *(void *)uint64_t v51 = v19;
        *(_WORD *)&v51[8] = 2048;
        *(void *)uint64_t v52 = v20;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v17,  OS_SIGNPOST_INTERVAL_END,  v5,  "Endpoint SEND",  "%s handling send outgoing data! %@, %lu bytes",  buf,  0x20u);
      }
    }
  }

  return v16;
}

BOOL acc_endpoint_processOutgoingSecureTunnelDataForClient(uint64_t a1, int a2, CFDataRef theData)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v4 = 0LL;
  if (theData && *(void *)a1)
  {
    CFIndex Length = CFDataGetLength(theData);
    if (gLogObjects && gNumLogObjects >= 15)
    {
      CFIndex v8 = *(os_log_s **)(gLogObjects + 112);
    }

    else
    {
      CFIndex v8 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(_DWORD *)(a1 + 24);
      uint64_t v10 = *(void *)(a1 + 16);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)uint64_t v36 = v9;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = a2;
      *(_WORD *)&v36[10] = 2048;
      *(void *)&v36[12] = Length;
      *(_WORD *)&v36[20] = 2112;
      *(void *)&v36[22] = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "processOutgoingSecureTunnelDataForClient: Transport %{coreacc:ACCEndpoint_TransportType_t}d, type %d, %ld bytes of incoming data for endpoint %@!",  buf,  0x22u);
    }

    if (acc_userDefaultsLogging_BOOLForKey((uint64_t)@"TransportSignpost"))
    {
      CFHashCode v11 = CFHash(*(CFTypeRef *)(a1 + 16));
      os_signpost_id_t v12 = CFHash(theData) ^ v11;
      if (gLogSignpostObjects && gNumLogSignpostObjects >= 3)
      {
        int v13 = *(os_log_s **)(gLogSignpostObjects + 16);
      }

      else
      {
        int v13 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          acc_endpoint_create_cold_5();
        }
      }

      if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
      {
        uint64_t v14 = *(void *)(a1 + 16);
        CFIndex v15 = CFDataGetLength(theData);
        *(_DWORD *)buf = 138412546;
        *(void *)uint64_t v36 = v14;
        *(_WORD *)&v36[8] = 2048;
        *(void *)&v36[10] = v15;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v13,  OS_SIGNPOST_EVENT,  v12,  "Endpoint RECV",  "Received incoming data! %@, %lu bytes",  buf,  0x16u);
      }
    }

    if (acc_endpoint_isTransportRestricted((unsigned int *)a1))
    {
      int v25 = (os_log_s *)logObjectForModule_2();
      uint64_t v4 = 1LL;
      if (!os_log_type_enabled(v25, OS_LOG_TYPE_INFO)) {
        return v4;
      }
      int v26 = *(_DWORD *)(a1 + 24);
      uint64_t v27 = *(void *)(a1 + 16);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)uint64_t v36 = v26;
      *(_WORD *)&v36[4] = 2048;
      *(void *)&v36[6] = Length;
      *(_WORD *)&v36[14] = 2112;
      *(void *)&v36[16] = v27;
      uint64_t v28 = "Transport %{coreacc:ACCEndpoint_TransportType_t}d is restricted, dropping %ld bytes of incoming data for endpoint %@!";
      uint64_t v29 = v25;
      uint32_t v30 = 28;
    }

    else
    {
      int v34 = 0;
      if (!acc_manager_isLockoutActiveForTransportType(*(unsigned int *)(a1 + 24), &v34))
      {
        if (acc_platform_packetLogging_isLogPacketDataAsMsg() || platform_systemInfo_isInternalBuild())
        {
          if (gLogObjects && gNumLogObjects >= 15)
          {
            uint64_t v16 = *(os_log_s **)(gLogObjects + 112);
          }

          else
          {
            uint64_t v16 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            uint64_t v17 = *(void *)(a1 + 16);
            int v18 = *(_DWORD *)(a1 + 24);
            BytePtr = CFDataGetBytePtr(theData);
            *(_DWORD *)buf = 134219266;
            *(void *)uint64_t v36 = Length;
            *(_WORD *)&v36[8] = 1024;
            *(_DWORD *)&v36[10] = a2;
            *(_WORD *)&v36[14] = 2112;
            *(void *)&v36[16] = v17;
            *(_WORD *)&v36[24] = 1024;
            *(_DWORD *)&v36[26] = v18;
            __int16 v37 = 1040;
            LODWORD(v38[0]) = Length;
            WORD2(v38[0]) = 2096;
            *(void *)((char *)v38 + 6) = BytePtr;
            _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "Received %ld bytes of incoming data (type %d) for endpoint %@ (type:%{coreacc:ACCEndpoint_TransportType_t} d):\n %{coreacc:bytes}.*P",  buf,  0x32u);
          }
        }

        else
        {
          if (gLogObjects && gNumLogObjects >= 15)
          {
            CFIndex v20 = *(os_log_s **)(gLogObjects + 112);
          }

          else
          {
            CFIndex v20 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v22 = *(void *)(a1 + 16);
            int v23 = *(_DWORD *)(a1 + 24);
            int v24 = CFDataGetBytePtr(theData);
            *(_DWORD *)buf = 134219010;
            *(void *)uint64_t v36 = Length;
            *(_WORD *)&v36[8] = 2112;
            *(void *)&v36[10] = v22;
            *(_WORD *)&v36[18] = 1024;
            *(_DWORD *)&v36[20] = v23;
            *(_WORD *)&v36[24] = 1040;
            *(_DWORD *)&v36[26] = Length;
            __int16 v37 = 2096;
            v38[0] = v24;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "Received %ld bytes of incoming data for endpoint %@ (type:%{coreacc:ACCEndpoint_TransportType_t}d):\n %{coreacc:bytes}.*P",  buf,  0x2Cu);
          }
        }

        return Length < 1 || acc_protocolRouter_routeOutgoingSecureTunnelDataForClient(a1, a2, theData);
      }

      uint64_t v31 = (os_log_s *)logObjectForModule_2();
      uint64_t v4 = 1LL;
      if (!os_log_type_enabled(v31, OS_LOG_TYPE_INFO)) {
        return v4;
      }
      int v32 = *(_DWORD *)(a1 + 24);
      uint64_t v33 = *(void *)(a1 + 16);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)uint64_t v36 = v32;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = v34;
      *(_WORD *)&v36[10] = 2048;
      *(void *)&v36[12] = Length;
      *(_WORD *)&v36[20] = 2112;
      *(void *)&v36[22] = v33;
      uint64_t v28 = "Transport %{coreacc:ACCEndpoint_TransportType_t}d is locked out for %u more second(s), dropping %ld bytes of"
            " incoming data for endpoint %@!";
      uint64_t v29 = v31;
      uint32_t v30 = 34;
    }

    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, v28, buf, v30);
  }

  return v4;
}

uint64_t acc_endpoint_getTransportTypeString(uint64_t a1)
{
  uint64_t result = kACCEndpoint_TransportType_Strings[17];
  if (a1)
  {
    uint64_t v3 = *(unsigned int *)(a1 + 24);
  }

  return result;
}

uint64_t acc_endpoint_getProtocolString(uint64_t a1)
{
  uint64_t result = kACCEndpoint_Protocol_Strings[0];
  if (a1)
  {
    uint64_t v3 = *(unsigned int *)(a1 + 28);
  }

  return result;
}

unint64_t acc_endpoint_getDurationMS(unint64_t result)
{
  if (result) {
    return systemInfo_getCurrentUnixTimeMS() - *(void *)(result + 40);
  }
  return result;
}

uint64_t acc_endpoint_getAccessoryInfo(uint64_t result)
{
  if (result) {
    return *(void *)(result + 64);
  }
  return result;
}

uint64_t acc_endpoint_getParentConnection(uint64_t result)
{
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t acc_endpoint_getTransportType(uint64_t a1)
{
  uint64_t result = 17LL;
  if (a1)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 24);
    if (v3 <= 0xF) {
      return v3;
    }
    else {
      return 17LL;
    }
  }

  return result;
}

uint64_t acc_endpoint_getProtocol(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = *(_DWORD *)(result + 28);
    if (v1 <= 0x11) {
      return v1;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

CFTypeRef acc_endpoint_copyIdentifier(uint64_t a1)
{
  else {
    return 0LL;
  }
}

void *acc_endpoint_isWireless(void *result)
{
  if (result)
  {
    unsigned int v1 = result;
    uint64_t result = (void *)*result;
    if (result) {
      return (void *)(acc_connection_getType((uint64_t)result) == 2 || *((_DWORD *)v1 + 6) == 4);
    }
  }

  return result;
}

BOOL acc_endpoint_isPublished(BOOL result)
{
  if (result) {
    return *(_BYTE *)(result + 89) != 0;
  }
  return result;
}

uint64_t acc_endpoint_supervisedTransportsRestrictedDidChange(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(void *)result)
    {
      uint64_t result = acc_policies_isTransportSupervised(*(_DWORD *)(result + 24), *(_DWORD *)(*(void *)result + 8LL));
      if ((_DWORD)result)
      {
        BOOL isTransportRestricted = acc_endpoint_isTransportRestricted((unsigned int *)v1);
        if (gLogObjects && gNumLogObjects >= 15)
        {
          unsigned int v3 = *(os_log_s **)(gLogObjects + 112);
        }

        else
        {
          unsigned int v3 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
        {
          uint64_t v4 = "NO";
          uint64_t v5 = *(void *)(v1 + 8);
          int v6 = *(_DWORD *)(*(void *)v1 + 8LL);
          if (isTransportRestricted) {
            uint64_t v4 = "YES";
          }
          int v7 = *(_DWORD *)(v1 + 24);
          int v8 = *(_DWORD *)(v1 + 28);
          uint64_t v9 = *(void *)(v1 + 16);
          int v10 = 136316674;
          CFHashCode v11 = "YES";
          __int16 v12 = 2080;
          int v13 = v4;
          __int16 v14 = 1024;
          int v15 = v6;
          __int16 v16 = 1024;
          int v17 = v7;
          __int16 v18 = 1024;
          int v19 = v8;
          __int16 v20 = 2112;
          uint64_t v21 = v9;
          __int16 v22 = 2112;
          uint64_t v23 = v5;
          _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Restricted mode status changed! (isTransportSupervised: %s, isTransportRestricted: %s, connectionType: %{cor eacc:ACCConnection_Type_t}d, transportType: %{coreacc:ACCEndpoint_TransportType_t}d, protocol: %{coreacc:ACC Endpoint_Protocol_t}d, endpointUUID: %@, connectionUUID: %@)",  (uint8_t *)&v10,  0x3Cu);
        }

        uint64_t result = acc_endpoint_isTransportRestricted((unsigned int *)v1);
        if ((result & 1) == 0)
        {
          if (*(_DWORD *)(*(void *)v1 + 8LL) == 1)
          {
            uint64_t result = acc_policies_shouldResetLightningBusWhenTransportIsNoLongerRestricted( *(_DWORD *)(v1 + 24),  *(_DWORD *)(v1 + 28));
            if ((_DWORD)result) {
              platform_system_resetLightningBusForEndpointWithUUID(*(void **)(v1 + 16));
            }
          }

          *(_BYTE *)(v1 + 121) = 1;
          return platform_sleepAssertion_createForApplePencil(result);
        }
      }
    }
  }

  return result;
}

void __acc_endpoint_setupPassthroughMode(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 92) == -1)
  {
    BOOL v2 = acc_endpoint_copyProperties((pthread_mutex_t *)a1);
    if (v2)
    {
      unsigned int v3 = (const __CFDictionary *)v2;
      Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v2, @"__PASSTHROUGH_ACCESSORY__");
      if (Value)
      {
        int valuePtr = -1431655766;
        CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
        if (gLogObjects && gNumLogObjects >= 15)
        {
          uint64_t v5 = *(os_log_s **)(gLogObjects + 112);
        }

        else
        {
          uint64_t v5 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v6 = *(void *)(a1 + 16);
          int v7 = *(_DWORD *)(a1 + 92);
          *(_DWORD *)buf = 138412802;
          uint64_t v14 = v6;
          __int16 v15 = 1024;
          int v16 = v7;
          __int16 v17 = 1024;
          int v18 = valuePtr != 0;
          _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Endpoint %@ passthroughMode(0=NO,1=Acc,2=Dev) %d -> %d",  buf,  0x18u);
        }

        *(_DWORD *)(a1 + 92) = valuePtr != 0;
      }

      int v8 = (const __CFNumber *)CFDictionaryGetValue(v3, @"__PASSTHROUGH_DEVICE__");
      if (v8)
      {
        int valuePtr = -1431655766;
        CFNumberGetValue(v8, kCFNumberIntType, &valuePtr);
        if (gLogObjects && gNumLogObjects >= 15)
        {
          uint64_t v9 = *(os_log_s **)(gLogObjects + 112);
        }

        else
        {
          uint64_t v9 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v10 = *(void *)(a1 + 16);
          int v11 = *(_DWORD *)(a1 + 92);
          *(_DWORD *)buf = 138412802;
          uint64_t v14 = v10;
          __int16 v15 = 1024;
          int v16 = v11;
          __int16 v17 = 1024;
          int v18 = 2 * (valuePtr != 0);
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Endpoint %@ passthroughMode(0=NO,1=Acc,2=Dev) %d -> %d",  buf,  0x18u);
        }

        *(_DWORD *)(a1 + 92) = 2 * (valuePtr != 0);
      }

      else if (*(_DWORD *)(a1 + 92) == -1)
      {
        *(_DWORD *)(a1 + 92) = 0;
      }

      CFRelease(v3);
    }

    else
    {
      *(_DWORD *)(a1 + 92) = 0;
    }
  }

BOOL acc_endpoint_setParentEndpointUUID(uint64_t a1, CFStringRef theString)
{
  if (a1)
  {
    uint64_t v4 = *(const void **)(a1 + 112);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(a1 + 112) = 0LL;
    }

    if (theString)
    {
      CFDataRef Copy = (const __CFNull *)CFStringCreateCopy(kCFAllocatorDefault, theString);
      *(void *)(a1 + 112) = Copy;
      acc_endpoint_setProperty((pthread_mutex_t *)a1, kCFACCProperties_Endpoint_ParentEndpointUUID, Copy);
    }

    else
    {
      acc_endpoint_removeProperty((pthread_mutex_t *)a1, kCFACCProperties_Endpoint_ParentEndpointUUID);
      uint64_t v6 = *(const void **)(a1 + 112);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(a1 + 112) = 0LL;
      }
    }
  }

  return a1 != 0;
}

CFStringRef acc_endpoint_copyParentEndpointUUID(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(const __CFString **)(a1 + 112)) != 0LL) {
    return CFStringCreateCopy(kCFAllocatorDefault, v1);
  }
  else {
    return 0LL;
  }
}

  ;
}

void OUTLINED_FUNCTION_4_3( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void OUTLINED_FUNCTION_5_2(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

  ;
}

void OUTLINED_FUNCTION_9(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

id acc_userNotifications_generateIdentifier(uint64_t a1, uint64_t a2)
{
  BOOL v2 = 0LL;
  if (a1 && a2) {
    BOOL v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@_%@", a1, a2));
  }
  return v2;
}

ACCUserNotification *acc_userNotifications_accessoryNotSupported()
{
  BOOL v0 = objc_alloc_init(&OBJC_CLASS___ACCUserNotification);
  uint64_t v1 = acc_strings_bundle(-[ACCUserNotification setType:](v0, "setType:", 2LL));
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue( [v2 localizedStringForKey:@"Accessory Not Supported" value:&stru_100200A40 table:0]);
  -[ACCUserNotification setTitle:](v0, "setTitle:", v3);

  uint64_t v5 = acc_strings_bundle(v4);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  int v7 = (void *)objc_claimAutoreleasedReturnValue( [v6 localizedStringForKey:@"This accessory is not supported by this device." value:&stru_100200A40 table:0]);
  -[ACCUserNotification setMessage:](v0, "setMessage:", v7);

  -[ACCUserNotification setIsModal:](v0, "setIsModal:", 0LL);
  -[ACCUserNotification setPresentViaSystemAperture:](v0, "setPresentViaSystemAperture:", 1LL);
  return v0;
}

id platform_communications_initiateCallToDestination(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[ACCCommunicationsServer sharedServer](&OBJC_CLASS___ACCCommunicationsServer, "sharedServer"));
  id v7 = [v6 initiateCallToDestination:a1 withService:a2 addressBookID:a3];

  return v7;
}

id platform_communications_initiateCallToVoicemail()
{
  BOOL v0 = (void *)objc_claimAutoreleasedReturnValue(+[ACCCommunicationsServer sharedServer](&OBJC_CLASS___ACCCommunicationsServer, "sharedServer"));
  id v1 = [v0 initiateCallToVoicemail];

  return v1;
}

id platform_communications_initiateRedial()
{
  BOOL v0 = (void *)objc_claimAutoreleasedReturnValue(+[ACCCommunicationsServer sharedServer](&OBJC_CLASS___ACCCommunicationsServer, "sharedServer"));
  id v1 = [v0 initiateRedial];

  return v1;
}

id platform_communications_acceptCall(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACCCommunicationsServer sharedServer](&OBJC_CLASS___ACCCommunicationsServer, "sharedServer"));
  id v5 = [v4 acceptCallWithAction:a1 callUUID:a2];

  return v5;
}

id platform_communications_endCall(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACCCommunicationsServer sharedServer](&OBJC_CLASS___ACCCommunicationsServer, "sharedServer"));
  id v5 = [v4 endCallWithAction:a1 callUUID:a2];

  return v5;
}

id platform_communications_endAllCalls()
{
  BOOL v0 = (void *)objc_claimAutoreleasedReturnValue(+[ACCCommunicationsServer sharedServer](&OBJC_CLASS___ACCCommunicationsServer, "sharedServer"));
  id v1 = [v0 endAllCalls];

  return v1;
}

id platform_communications_swapCalls()
{
  BOOL v0 = (void *)objc_claimAutoreleasedReturnValue(+[ACCCommunicationsServer sharedServer](&OBJC_CLASS___ACCCommunicationsServer, "sharedServer"));
  id v1 = [v0 swapCalls];

  return v1;
}

id platform_communications_mergeCalls()
{
  BOOL v0 = (void *)objc_claimAutoreleasedReturnValue(+[ACCCommunicationsServer sharedServer](&OBJC_CLASS___ACCCommunicationsServer, "sharedServer"));
  id v1 = [v0 mergeCalls];

  return v1;
}

id platform_communications_updateHoldStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACCCommunicationsServer sharedServer](&OBJC_CLASS___ACCCommunicationsServer, "sharedServer"));
  id v5 = [v4 updateHoldStatus:a1 forCallWithUUID:a2];

  return v5;
}

id platform_communications_updateMuteStatus(uint64_t a1)
{
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue(+[ACCCommunicationsServer sharedServer](&OBJC_CLASS___ACCCommunicationsServer, "sharedServer"));
  id v3 = [v2 updateMuteStatus:a1];

  return v3;
}

id platform_communications_sendDTMF(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACCCommunicationsServer sharedServer](&OBJC_CLASS___ACCCommunicationsServer, "sharedServer"));
  id v5 = [v4 sendDTMF:a1 forCallWithUUID:a2];

  return v5;
}

uint64_t platform_communications_callStateUpdate(uint64_t a1)
{
  return accFeatureHandlers_invokeHandler(0LL, 48, a1);
}

uint64_t platform_communications_communicationsUpdate(uint64_t a1)
{
  return accFeatureHandlers_invokeHandler(0LL, 49, a1);
}

uint64_t platform_communications_listUpdate(int a1, uint64_t a2, int a3)
{
  if (a1 == 1)
  {
    int v4 = 52;
    return accFeatureHandlers_invokeHandler(0LL, v4, a2);
  }

  if (!a1)
  {
    if (a3) {
      int v4 = 51;
    }
    else {
      int v4 = 50;
    }
    return accFeatureHandlers_invokeHandler(0LL, v4, a2);
  }

  return 0LL;
}

void platform_communications_triggerCallStateUpdates()
{
  id v0 = (id)objc_claimAutoreleasedReturnValue(+[ACCCommunicationsServer sharedServer](&OBJC_CLASS___ACCCommunicationsServer, "sharedServer"));
  [v0 triggerCallStateUpdates];
}

void platform_communications_triggerCommunicationsUpdate()
{
  id v0 = (id)objc_claimAutoreleasedReturnValue(+[ACCCommunicationsServer sharedServer](&OBJC_CLASS___ACCCommunicationsServer, "sharedServer"));
  [v0 triggerCommunicationsUpdate];
}

void platform_communications_triggerListUpdate(uint64_t a1, uint64_t a2)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[ACCCommunicationsServer sharedServer](&OBJC_CLASS___ACCCommunicationsServer, "sharedServer"));
  [v4 triggerUpdateForListType:a1 coalesce:a2];
}

void platform_communications_addSubscriber(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[ACCCommunicationsServer sharedServer](&OBJC_CLASS___ACCCommunicationsServer, "sharedServer"));
  [v2 addSubscriber:a1];
}

void platform_communications_removeSubscriber(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[ACCCommunicationsServer sharedServer](&OBJC_CLASS___ACCCommunicationsServer, "sharedServer"));
  [v2 removeSubscriber:a1];
}

void platform_communications_incrementUserCount()
{
  id v0 = (void *)objc_claimAutoreleasedReturnValue(+[ACCCommunicationsServer sharedServer](&OBJC_CLASS___ACCCommunicationsServer, "sharedServer"));
  [v0 incrementUserCount];

  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[ACCCommunicationsServer sharedServer](&OBJC_CLASS___ACCCommunicationsServer, "sharedServer"));
  unsigned int v2 = [v1 featureUserCount];

  if (v2 == 1)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[ACCFeaturePluginManager sharedManager](&OBJC_CLASS___ACCFeaturePluginManager, "sharedManager"));
    [v3 startPlugInsWithClasses:&off_100206A70];
  }

void platform_communications_decrementUserCount()
{
  id v0 = (id)objc_claimAutoreleasedReturnValue(+[ACCCommunicationsServer sharedServer](&OBJC_CLASS___ACCCommunicationsServer, "sharedServer"));
  [v0 decrementUserCount];
}

uint64_t platform_communications_copyDefaultCallState()
{
  id v1 = @"Status";
  unsigned int v2 = &off_100206B78;
  return objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v2,  &v1,  1LL));
}

uint64_t platform_communications_copyDefaultCommunicationsState()
{
  v1[0] = @"SignalStrength";
  v1[1] = @"RegistrationStatus";
  v2[0] = &off_100206B78;
  v2[1] = &off_100206B78;
  v1[2] = @"AirplaneModeStatus";
  v1[3] = @"TTYStatus";
  v2[2] = &__kCFBooleanFalse;
  v2[3] = &__kCFBooleanFalse;
  void v1[4] = @"CarrierName";
  v1[5] = @"CellularSupported";
  v2[4] = &stru_100200A40;
  v2[5] = &__kCFBooleanFalse;
  v1[6] = @"TelephonyEnabled";
  v1[7] = @"FaceTimeAudioEnabled";
  v2[6] = &__kCFBooleanFalse;
  v2[7] = &__kCFBooleanFalse;
  v1[8] = @"FaceTimeVideoEnabled";
  v1[9] = @"MuteStatus";
  v2[8] = &__kCFBooleanFalse;
  v2[9] = &__kCFBooleanFalse;
  v1[10] = @"CurrentCallCount";
  v1[11] = @"NewVoicemailCount";
  v2[10] = &off_100206B90;
  v2[11] = &off_100206B90;
  v1[12] = @"InitiateCallAvailable";
  v1[13] = @"EndAndAcceptAvailable";
  v2[12] = &__kCFBooleanFalse;
  v2[13] = &__kCFBooleanFalse;
  v1[14] = @"HoldAndAcceptAvailable";
  v1[15] = @"SwapAvailable";
  v2[14] = &__kCFBooleanFalse;
  v2[15] = &__kCFBooleanFalse;
  v1[16] = @"MergeAvailable";
  v1[17] = @"HoldAvailable";
  v2[16] = &__kCFBooleanFalse;
  v2[17] = &__kCFBooleanFalse;
  return objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v2,  v1,  18LL));
}

id convertNSDataToNSString(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (v3 && (uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSData), (objc_opt_isKindOfClass(v3, v5) & 1) != 0))
  {
    id v6 = v3;
    id v7 = (unsigned __int8 *)[v6 bytes];
    int v8 = objc_alloc_init(&OBJC_CLASS___NSMutableString);
    if ([v6 length])
    {
      unint64_t v9 = 0LL;
      do
        -[NSMutableString appendFormat:](v8, "appendFormat:", v4, v7[v9++]);
      while (v9 < (unint64_t)[v6 length]);
    }

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithString:](&OBJC_CLASS___NSString, "stringWithString:", v8));
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  return v10;
}

id convertNSStringToNSData(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet hexadecimalCharacterSet](&OBJC_CLASS___NSCharacterSet, "hexadecimalCharacterSet"));
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 invertedSet]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v1 componentsSeparatedByCharactersInSet:v3]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 componentsJoinedByString:&stru_100200A40]);

    id v1 = v5;
    id v6 = (const char *)[v1 UTF8String];
    size_t v7 = strlen(v6) >> 1;
    int v8 = malloc(v7);
    if (v6 && (unint64_t)[v1 length] >= 2)
    {
      unint64_t v9 = 0LL;
      int v10 = 0;
      do
      {
        uint64_t v11 = 0LL;
        __int16 v22 = -21846;
        char v12 = 1;
        do
        {
          char v13 = v12;
          int v14 = v6[v11 | (2 * v10)];
          unsigned int v15 = v14 - 48;
          unsigned int v16 = v14 - 65;
          else {
            char v17 = v14 - 87;
          }
          char v18 = v14 - 55;
          if (v16 > 5) {
            char v18 = v17;
          }
          if (v15 < 0xA) {
            char v18 = v15;
          }
          *((_BYTE *)&v22 + v11) = v18;
          uint64_t v11 = 1LL;
          char v12 = 0;
        }

        while ((v13 & 1) != 0);
        v8[v9] = HIBYTE(v22) | (16 * v22);
        unint64_t v9 = (v10 + 1);
        unint64_t v19 = (unint64_t)[v1 length];
        int v10 = v9;
      }

      while (v9 < v19 >> 1);
    }

    __int16 v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v8, v7));
    if (v8) {
      free(v8);
    }
  }

  else
  {
    __int16 v20 = 0LL;
  }

  return v20;
}

uint64_t classImplementsMethodsInProtocol(void *a1, void *a2, BOOL a3, BOOL a4, void *a5)
{
  unint64_t v9 = a2;
  int v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  outCFIndex Count = 0;
  uint64_t v11 = protocol_copyMethodDescriptionList(v9, a3, a4, &outCount);
  char v12 = v11;
  if (outCount)
  {
    unint64_t v13 = 0LL;
    p_name = &v11->name;
    do
    {
      if (([a1 instancesRespondToSelector:*p_name] & 1) == 0)
      {
        unsigned int v15 = NSStringFromSelector(*p_name);
        unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
        [v10 addObject:v16];
      }

      ++v13;
      p_name += 2;
    }

    while (v13 < outCount);
  }

  free(v12);
  if (outCount && [v10 count])
  {
    uint64_t v17 = 0LL;
    if (!a5) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }

  uint64_t v17 = 1LL;
  if (a5) {
LABEL_11:
  }
    *a5 = (id)objc_claimAutoreleasedReturnValue(+[NSSet setWithSet:](&OBJC_CLASS___NSSet, "setWithSet:", v10));
LABEL_12:

  return v17;
}

uint64_t isNSObjectNull(void *a1)
{
  if (!a1) {
    return 1LL;
  }
  id v1 = a1;
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  id v3 = [v1 isEqual:v2];

  return (uint64_t)v3;
}

id NSObjectIfNotNull(void *a1)
{
  id v1 = a1;
  if ((isNSObjectNull(v1) & 1) != 0) {
    id v2 = 0LL;
  }
  else {
    id v2 = v1;
  }

  return v2;
}

uint64_t iap2_btConnectionStatus_btComponentInfoHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 44)
  {
    id v3 = *(os_log_s **)(gLogObjects + 344);
  }

  else
  {
    id v3 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "iAP2BTConnectionStatus BTComponentInfo Handler",  buf,  2u);
  }

  uint64_t v4 = 0LL;
  if (a1 && a2)
  {
    unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0LL);
    BOOL v57 = 0;
    uint64_t v4 = 1LL;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 1LL, &kCFTypeArrayCallBacks);
    CFMutableArrayRef v7 = Mutable;
    if (!FirstParam) {
      goto LABEL_61;
    }
    theArray = Mutable;
    int v55 = 0;
    uint64_t v56 = a2;
    while (1)
    {
      int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
      if (ParamID)
      {
        int v9 = ParamID;
        uint64_t v10 = gLogObjects;
        int v11 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 44)
        {
          char v12 = *(os_log_s **)(gLogObjects + 344);
        }

        else
        {
          char v12 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)__int128 v59 = v10;
            *(_WORD *)&v59[8] = 1024;
            v60[0] = v11;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          }
        }

        a2 = v56;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          int MsgID = iAP2MsgGetMsgID(v56);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)__int128 v59 = v9;
          *(_WORD *)&v59[4] = 1024;
          *(_DWORD *)&v59[6] = MsgID;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param",  buf,  0xEu);
        }

        goto LABEL_56;
      }

      unint64_t v13 = iAP2MsgGetFirstParam(a2, FirstParam);
      if (!v13) {
        break;
      }
      NextParam = (unsigned __int16 *)v13;
      int v15 = 0;
      BOOL v16 = 0;
      int v17 = 0;
      unsigned __int16 v18 = 0;
      ++v55;
      do
      {
        int v19 = iAP2MsgGetParamID((uint64_t)NextParam);
        if (v19 == 1)
        {
          BOOL DataAsBool = iAP2MsgGetDataAsBool(NextParam, &v57);
          if (v57)
          {
            uint64_t v42 = (os_log_s *)logObjectForModule_4();
            BOOL v46 = os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
            uint64_t v4 = 0LL;
            CFMutableArrayRef v7 = theArray;
            if (!v46) {
              goto LABEL_61;
            }
            int v47 = iAP2MsgGetMsgID(a2);
            *(_DWORD *)buf = 67109632;
            *(_DWORD *)__int128 v59 = 1;
            *(_WORD *)&v59[4] = 1024;
            *(_DWORD *)&v59[6] = 0;
            LOWORD(v60[0]) = 1024;
            *(_DWORD *)((char *)v60 + 2) = v47;
            int v45 = "Subparam ID: %d parse error in Param ID: %d for Msg ID: 0x%04X - ignoring message";
            goto LABEL_68;
          }

          BOOL v16 = DataAsBool;
          int v15 = 1;
        }

        else
        {
          int v20 = v19;
          if (v19)
          {
            uint64_t v23 = gLogObjects;
            int v24 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 44)
            {
              int v25 = *(os_log_s **)(gLogObjects + 344);
            }

            else
            {
              int v25 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)__int128 v59 = v23;
                *(_WORD *)&v59[8] = 1024;
                v60[0] = v24;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              }
            }

            a2 = v56;
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
            {
              int v26 = iAP2MsgGetMsgID(v56);
              *(_DWORD *)buf = 67109632;
              *(_DWORD *)__int128 v59 = v20;
              *(_WORD *)&v59[4] = 1024;
              *(_DWORD *)&v59[6] = 0;
              LOWORD(v60[0]) = 1024;
              *(_DWORD *)((char *)v60 + 2) = v26;
              _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Unknown Subparam ID: %d in Param ID: %d for Msg ID: 0x%04X - ignoring subparam",  buf,  0x14u);
            }
          }

          else
          {
            unsigned __int16 DataAsU16 = iAP2MsgGetDataAsU16(NextParam, &v57);
            if (v57)
            {
              uint64_t v42 = (os_log_s *)logObjectForModule_4();
              BOOL v43 = os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
              uint64_t v4 = 0LL;
              CFMutableArrayRef v7 = theArray;
              if (!v43) {
                goto LABEL_61;
              }
              int v44 = iAP2MsgGetMsgID(a2);
              *(_DWORD *)buf = 67109632;
              *(_DWORD *)__int128 v59 = 0;
              *(_WORD *)&v59[4] = 1024;
              *(_DWORD *)&v59[6] = 0;
              LOWORD(v60[0]) = 1024;
              *(_DWORD *)((char *)v60 + 2) = v44;
              int v45 = "Subparam ID: %d parse error in Param ID: %d for Msg ID: 0x%04X - ignoring message";
LABEL_68:
              int v48 = v42;
              uint32_t v49 = 20;
              goto LABEL_69;
            }

            unsigned __int16 v18 = DataAsU16;
            int v17 = 1;
          }
        }

        NextParam = iAP2MsgGetNextParam(a2, FirstParam, NextParam);
      }

      while (NextParam);
      if ((v17 & v15 & 1) != 0)
      {
        ComponentForID = _findComponentForID(a1, v18);
        if (ComponentForID)
        {
          ComponentInfoDict = platform_btComponentStatus_createComponentInfoDict( *(const void **)(a1 + 8),  *((const void **)ComponentForID + 1),  *((const void **)ComponentForID + 2),  (UInt8 *)ComponentForID + 24,  v16);
          CFArrayAppendValue(theArray, ComponentInfoDict);
          if (ComponentInfoDict) {
            CFRelease(ComponentInfoDict);
          }
          goto LABEL_56;
        }

        uint64_t v37 = gLogObjects;
        int v38 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 44)
        {
          uint64_t v39 = *(os_log_s **)(gLogObjects + 344);
        }

        else
        {
          uint64_t v39 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)__int128 v59 = v37;
            *(_WORD *)&v59[8] = 1024;
            v60[0] = v38;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          }
        }

        int v55 = 0;
        a2 = v56;
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          int v40 = iAP2MsgGetMsgID(v56);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)__int128 v59 = v40;
          *(_WORD *)&v59[4] = 1024;
          *(_DWORD *)&v59[6] = v18;
          int v34 = v39;
          BOOL v35 = "Ignore message (0x%04X), Unknown componentID %d";
          uint32_t v36 = 14;
          goto LABEL_55;
        }
      }

      else
      {
        uint64_t v30 = gLogObjects;
        int v31 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 44)
        {
          int v32 = *(os_log_s **)(gLogObjects + 344);
        }

        else
        {
          int v32 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)__int128 v59 = v30;
            *(_WORD *)&v59[8] = 1024;
            v60[0] = v31;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          }
        }

        int v55 = 0;
        a2 = v56;
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          int v33 = iAP2MsgGetMsgID(v56);
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)__int128 v59 = v33;
          *(_WORD *)&v59[4] = 1024;
          *(_DWORD *)&v59[6] = v17 & 1;
          LOWORD(v60[0]) = 1024;
          *(_DWORD *)((char *)v60 + 2) = v15 & 1;
          int v34 = v32;
          BOOL v35 = "Ignore message (0x%04X), both componentID(valid=%d) and enabled(valid=%d) flag required";
          uint32_t v36 = 20;
LABEL_55:
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, v35, buf, v36);
          int v55 = 0;
        }
      }

LABEL_56:
      unint64_t FirstParam = iAP2MsgGetNextParam(a2, 0LL, FirstParam);
      if (!FirstParam)
      {
        if (v55 && acc_endpoint_getTransportType(*(void *)a1) != 2)
        {
          platform_btComponentStatus_btComponentInfo(*(void *)(a1 + 8), theArray);
          CFMutableArrayRef v7 = theArray;
          uint64_t v4 = 1LL;
        }

        else
        {
          uint64_t v4 = 1LL;
          CFMutableArrayRef v7 = theArray;
        }

        goto LABEL_61;
      }
    }

    CFIndex v50 = (os_log_s *)logObjectForModule_4();
    BOOL v51 = os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT);
    uint64_t v4 = 0LL;
    CFMutableArrayRef v7 = theArray;
    if (v51)
    {
      int v52 = iAP2MsgGetMsgID(a2);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)__int128 v59 = 0;
      *(_WORD *)&v59[4] = 1024;
      *(_DWORD *)&v59[6] = v52;
      int v45 = "Param ID: %d parse error for Msg ID: 0x%04X - ignoring message";
      int v48 = v50;
      uint32_t v49 = 14;
LABEL_69:
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, v45, buf, v49);
      CFMutableArrayRef v7 = theArray;
      uint64_t v4 = 0LL;
    }
}

    __int16 v22 = -1LL;
    goto LABEL_40;
  }

  CFMutableArrayRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  v3,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    uint64_t v39 = logObjectForModule_9();
    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      int v38 = "_replyGetNVMKey: !userPublicNVMKeyValues";
      goto LABEL_55;
    }

    goto LABEL_56;
  }

  uint64_t v5 = Mutable;
  int v40 = v2;
  if (*(int *)(a1 + 36) < 1)
  {
LABEL_21:
    if (gLogObjects && gNumLogObjects >= 56)
    {
      unsigned __int16 v18 = (os_log_s *)*(id *)(gLogObjects + 440);
      id v2 = v40;
    }

    else
    {
      id v2 = v40;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      unsigned __int16 v18 = (os_log_s *)&_os_log_default;
      int v19 = &_os_log_default;
    }

    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "_replyGetNVMKey: dictionary", buf, 2u);
    }

    v2[2](v2, v5, 0LL);
    goto LABEL_30;
  }

  id v6 = 0LL;
  CFMutableArrayRef v7 = 0LL;
  int v8 = *(void *)(a1 + 712);
  while (1)
  {
    int v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, (const void *)(*(void *)(a1 + 40) + v6));
    if (!v9) {
      break;
    }
    uint64_t v10 = v9;
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(v8 + 48), v9))
    {
      Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v8 + 48), v10);
      if (!Value)
      {
        uint64_t v23 = logObjectForModule_9();
        uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          int v24 = "_replyGetNVMKey: !valueData";
          goto LABEL_38;
        }

  if (a3 == 6 || a5 == 6)
  {
    int v26 = *(_DWORD *)(iap2_feature_getFeature(a1, 0x10u) + 36);
    if ((v26 & 0x80000000) == 0)
    {
      int v32 = v26;
      if (_checkRequiresChargingCurrentLimit((uint64_t *)a1, (unsigned __int16)v26, &v32))
      {
        if (gLogObjects && gNumLogObjects >= 37)
        {
          uint64_t v27 = *(os_log_s **)(gLogObjects + 288);
        }

        else
        {
          uint64_t v27 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          if (!a1 || (uint64_t v28 = *(void *)(a1 + 8)) == 0) {
            uint64_t v28 = 0LL;
          }
          *(_DWORD *)buf = 138412802;
          *(void *)&int v34 = v28;
          WORD4(v34) = 1024;
          *(_DWORD *)((char *)&v34 + 10) = (unsigned __int16)v26;
          HIWORD(v34) = 1024;
          *(_DWORD *)BOOL v35 = v32;
          _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "!!!! On re-check, Overriding availableCurrentForDevice(ChargingCurrentLimit) for accessory %@, %d -> %d",  buf,  0x18u);
        }

        LOWORD(v26) = v32;
      }

      platform_power_setAvailableCurrent(*(const void **)(a1 + 8), (unsigned __int16)v26, 0LL);
    }
  }

  return v22;
}

      if (Count == ++v10)
      {
        for (CFIndex i = 0LL; i != Count; ++i)
        {
          uint64_t v27 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v9 + 8), i);
          uint64_t v28 = (const __CFNumber *)CFDictionaryGetValue(v27, @"ACCMediaLibraryTypeKey");
          int valuePtr = 4;
          if (v28)
          {
            if (!CFNumberGetValue(v28, kCFNumberCharType, &valuePtr))
            {
              uint64_t v29 = gLogObjects;
              uint64_t v30 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 31)
              {
                int v31 = *(os_log_s **)(gLogObjects + 240);
              }

              else
              {
                int v31 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  __int128 v62 = v29;
                  CFAllocatorRef v63 = 1024;
                  *(_DWORD *)char v64 = v30;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                  int v31 = (os_log_s *)&_os_log_default;
                }
              }

              if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412546;
                __int128 v62 = v58;
                CFAllocatorRef v63 = 2112;
                *(void *)char v64 = v27;
                _os_log_error_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_ERROR,  "iap2_mediaLibrary_infoUpdateHandler %@, ERROR: failed to get type from typeObj! entry=%@",  buf,  0x16u);
              }

              int valuePtr = 4;
            }
          }

          else
          {
            int v32 = gLogObjects;
            int v33 = gNumLogObjects;
            if (gLogObjects) {
              int v34 = gNumLogObjects < 31;
            }
            else {
              int v34 = 1;
            }
            if (v34)
            {
              BOOL v35 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                __int128 v62 = v32;
                CFAllocatorRef v63 = 1024;
                *(_DWORD *)char v64 = v33;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                BOOL v35 = (os_log_s *)&_os_log_default;
              }
            }

            else
            {
              BOOL v35 = *(os_log_s **)(gLogObjects + 240);
            }

            if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412546;
              __int128 v62 = v58;
              CFAllocatorRef v63 = 2112;
              *(void *)char v64 = v27;
              _os_log_error_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "iap2_mediaLibrary_infoUpdateHandler %@, ERROR: no Type object in libraryDictionary! entry=%@",  buf,  0x16u);
            }
          }

          if ((valuePtr & 0xFFFFFFFB) != 0)
          {
            uint32_t v36 = gLogObjects;
            uint64_t v37 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 31)
            {
              int v38 = *(os_log_s **)(gLogObjects + 240);
            }

            else
            {
              int v38 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                __int128 v62 = v36;
                CFAllocatorRef v63 = 1024;
                *(_DWORD *)char v64 = v37;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                int v38 = (os_log_s *)&_os_log_default;
              }
            }

            if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
            {
              uint64_t v39 = CFDictionaryGetValue(v27, @"ACCMediaLibraryNameKey");
              int v40 = CFDictionaryGetValue(v27, @"ACCMediaLibraryUIDKey");
              uint64_t v41 = CFDictionaryGetValue(v27, @"ACCMediaLibraryTypeKey");
              *(_DWORD *)buf = 138413314;
              __int128 v62 = v58;
              CFAllocatorRef v63 = 2048;
              *(void *)char v64 = i;
              *(_WORD *)&v64[8] = 2112;
              *(void *)&v64[10] = v39;
              *(_WORD *)&v64[18] = 2112;
              *(void *)&v64[20] = v40;
              *(_WORD *)&v64[28] = 2112;
              uint64_t v65 = v41;
              _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_INFO,  "iap2_mediaLibrary_infoUpdateHandler %@ i=%ld addUpdateLibrary name=%@ uid=%@ type=%@",  buf,  0x34u);
            }

            iap2_mediaLibrary_addUpdateLibrary((uint64_t)v59, v27);
          }
        }

        goto LABEL_87;
      }
    }

    BOOL v16 = gLogObjects;
    int v17 = gNumLogObjects;
    if (gLogObjects) {
      unsigned __int16 v18 = gNumLogObjects < 31;
    }
    else {
      unsigned __int16 v18 = 1;
    }
    if (v18)
    {
      int v19 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        __int128 v62 = v16;
        CFAllocatorRef v63 = 1024;
        *(_DWORD *)char v64 = v17;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
      }
    }

    else
    {
      int v19 = *(os_log_s **)(gLogObjects + 240);
    }

    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      __int128 v62 = v58;
      CFAllocatorRef v63 = 2112;
      *(void *)char v64 = ValueAtIndex;
      _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "iap2_mediaLibrary_infoUpdateHandler %@, ERROR: no Type object in libraryDictionary! entry=%@",  buf,  0x16u);
    }

    if (*(void *)v9)
    {
      CFRelease(*(CFTypeRef *)v9);
      *(void *)int v9 = 0LL;
    }

    if (*v14)
    {
      CFRelease(*v14);
      *int v14 = 0LL;
    }

    __int16 v22 = *(const void **)(v9 + 16);
    if (v22)
    {
      CFRelease(v22);
      *(void *)(v9 + 16) = 0LL;
    }

  int v44 = v4[353];
  if (v44 && *((int *)v5 + 708) >= 56)
  {
    int v45 = (os_log_s *)*(id *)(v44 + 440);
    BOOL v46 = v90;
    int v47 = v91;
    int v48 = v92;
  }

  else
  {
    int v47 = v91;
    int v48 = v92;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v45 = (os_log_s *)&_os_log_default;
    uint32_t v49 = &_os_log_default;
    BOOL v46 = v90;
  }

  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "_mfi4Auth_relay_handle_AccessoryInformationUpdate: finish",  buf,  2u);
  }

  CFIndex v50 = v97;
  return v50;
}

          uint64_t v30 = (char *)v30 + 1;
        }

        while (v28 != v30);
        uint64_t v42 = [v25 countByEnumeratingWithState:&v75 objects:v89 count:16];
        uint64_t v28 = v42;
      }

      while (v42);
    }

    CFMutableArrayRef v7 = v24;
    int v9 = v74;
    uint64_t v10 = v73;
  }

  else
  {
    if (v20)
    {
      __int16 v22 = (os_log_s *)*(id *)(gLogObjects + 56);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int16 v22 = (os_log_s *)&_os_log_default;
      BOOL v43 = &_os_log_default;
    }

    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      __int128 v80 = (uint64_t)v7;
      __int128 v81 = 2112;
      *(void *)__int128 v82 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "[#Location] NOT SentenceArrayValid: %@, pFilterList %@",  buf,  0x16u);
    }

    int v44 = -1;
    do
    {
      int v45 = v44 + 1;
      if (v44 <= 2)
      {
        BOOL v46 = -[iAP2NMEAFilterParam initWithTypeParamID:andIntervalParamID:andIntervalMinMs:]( objc_alloc(&OBJC_CLASS___iAP2NMEAFilterParam),  "initWithTypeParamID:andIntervalParamID:andIntervalMinMs:",  v45,  0LL,  0LL);
        int v47 = (void *)objc_claimAutoreleasedReturnValue(-[ACCPlatformLocationManager pNMEAFilterList](self, "pNMEAFilterList"));
        [v47 addObject:v46];

        if (-[ACCPlatformLocationManager minNMEAIntervalMs](self, "minNMEAIntervalMs") >= 0xFB) {
          -[ACCPlatformLocationManager setMinNMEAIntervalMs:](self, "setMinNMEAIntervalMs:", 250LL);
        }
      }

      int v44 = v45;
    }

    while ((_DWORD)v45 != 7);
  }

  int v48 = (void *)objc_claimAutoreleasedReturnValue(-[ACCPlatformLocationManager pNMEAFilterList](self, "pNMEAFilterList", v72));
  -[ACCPlatformLocationManager setBNMEAFilterListNew:]( self,  "setBNMEAFilterListNew:",  [v48 isEqualToArray:v9] ^ 1);

  if (gLogObjects && gNumLogObjects >= 8)
  {
    uint32_t v49 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint32_t v49 = (os_log_s *)&_os_log_default;
    CFIndex v50 = &_os_log_default;
  }

  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v51 = -[ACCPlatformLocationManager bNMEAFilterListNew](self, "bNMEAFilterListNew");
    int v52 = (void *)objc_claimAutoreleasedReturnValue(-[ACCPlatformLocationManager pNMEAFilterList](self, "pNMEAFilterList"));
    __int16 v53 = -[ACCPlatformLocationManager minNMEAIntervalMs](self, "minNMEAIntervalMs");
    *(_DWORD *)buf = 138413570;
    __int128 v80 = (uint64_t)v7;
    __int128 v81 = 1024;
    *(_DWORD *)__int128 v82 = v51;
    *(_WORD *)&v82[4] = 2112;
    *(void *)&v82[6] = v52;
    __int128 v83 = 2112;
    uint64_t v84 = v9;
    uint64_t v85 = 1024;
    uint64_t v86 = v10;
    v87 = 1024;
    v88 = v53;
    _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "[#Location] setNMEAFilterList: %@, bNMEAFilterListNew %d, pNMEAFilterList %@ pNMEAFilterListOld %@, minNMEAIntervalMs %d -> %d",  buf,  0x32u);
  }

  if (!-[ACCPlatformLocationManager bNMEAFilterListNew](self, "bNMEAFilterListNew"))
  {
    if (gLogObjects && gNumLogObjects >= 8)
    {
      int v54 = (os_log_s *)*(id *)(gLogObjects + 56);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v54 = (os_log_s *)&_os_log_default;
      int v55 = &_os_log_default;
    }

    if (!os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_104;
    }
    *(_WORD *)buf = 0;
    uint64_t v56 = "[#Location] self.bNMEAFilterListNew is false, not starting location messages since filter is same.";
    goto LABEL_103;
  }

  if (!-[ACCPlatformLocationManager bLocationStarted](self, "bLocationStarted"))
  {
    if (gLogObjects && gNumLogObjects >= 8)
    {
      int v54 = (os_log_s *)*(id *)(gLogObjects + 56);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v54 = (os_log_s *)&_os_log_default;
      BOOL v57 = &_os_log_default;
    }

    if (!os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_104;
    }
    *(_WORD *)buf = 0;
    uint64_t v56 = "[#Location] waiting for start location updates - skipping start location message to acc";
LABEL_103:
    _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, v56, buf, 2u);
LABEL_104:

    goto LABEL_105;
  }

  -[ACCPlatformLocationManager startLocationUpdatesForUUID:](self, "startLocationUpdatesForUUID:", v7);
LABEL_105:
  __int128 v58 = (void *)objc_claimAutoreleasedReturnValue(-[ACCPlatformLocationManager pNMEAFilterList](self, "pNMEAFilterList"));
  __int128 v59 = [v58 count];

  int v9 = 0LL;
  int v60 = v59 != 0LL;
LABEL_106:
  if (gLogObjects && gNumLogObjects >= 8)
  {
    uint64_t v61 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v61 = (os_log_s *)&_os_log_default;
    __int128 v62 = &_os_log_default;
  }

  if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
  {
    CFAllocatorRef v63 = (void *)objc_claimAutoreleasedReturnValue(-[ACCPlatformLocationManager pNMEAFilterList](self, "pNMEAFilterList"));
    char v64 = [v63 count];
    uint64_t v65 = -[ACCPlatformLocationManager minNMEAIntervalMs](self, "minNMEAIntervalMs");
    *(_DWORD *)buf = 138413058;
    __int128 v80 = (uint64_t)v7;
    __int128 v81 = 1024;
    *(_DWORD *)__int128 v82 = v60;
    *(_WORD *)&v82[4] = 2048;
    *(void *)&v82[6] = v64;
    __int128 v83 = 1024;
    LODWORD(v84) = v65;
    _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEFAULT,  "[#Location] setNMEAFilterList: %@, result %d, pNMEAFilterList.count %lu minNMEAIntervalMs %u",  buf,  0x22u);
  }

  __int16 v66 = (void *)objc_claimAutoreleasedReturnValue(-[ACCPlatformLocationManager accessLock](self, "accessLock"));
  [v66 unlock];

  return v60;
}

  a3->var20 = self->_partOfCompilation;
  a3->var0 |= 0x80000u;
  if ((validMask & 0x2000000) == 0)
  {
LABEL_22:
    if ((validMask & 0x8000000) == 0) {
      return;
    }
    goto LABEL_23;
  }

LABEL_61:
    if (v7) {
      CFRelease(v7);
    }
  }

  return v4;
}

    uint64_t v23 = 0LL;
    id v2 = 0LL;
    if (v7)
    {
LABEL_71:
      CFRelease(v7);
      id v2 = v23;
      if (!v6) {
        return v2;
      }
      goto LABEL_63;
    }

    if (v6) {
LABEL_63:
    }
      CFRelease(v6);
  }

  return v2;
}

LABEL_35:
  CFRelease(v3);
  uint64_t v27 = v26;
LABEL_36:
  if (v5) {
    CFRelease(v5);
  }
  if (v6) {
    CFRelease(v6);
  }
LABEL_40:

  return v27;
}

void *logObjectForModule_4()
{
  if (gLogObjects && gNumLogObjects >= 44) {
    return *(void **)(gLogObjects + 344);
  }
  id v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

unsigned __int16 *_findComponentForID(uint64_t a1, int a2)
{
  uint64_t Feature = iap2_feature_getFeature(a1, 5u);
  if (gLogObjects && gNumLogObjects >= 44)
  {
    uint64_t v5 = *(os_log_s **)(gLogObjects + 344);
  }

  else
  {
    uint64_t v5 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    if (!a1 || (uint64_t v6 = *(void *)(a1 + 8)) == 0) {
      uint64_t v6 = 0LL;
    }
    int v9 = 138412546;
    uint64_t v10 = v6;
    __int16 v11 = 1024;
    int v12 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "_findComponentForID %@, componentID=%u",  (uint8_t *)&v9,  0x12u);
  }

  if (!Feature) {
    return 0LL;
  }
  uint64_t v7 = *(unsigned int *)(Feature + 8);
  for (uint64_t result = *(unsigned __int16 **)Feature; *result != a2; result += 16)
  {
    if (!--v7) {
      return 0LL;
    }
  }

  return result;
}

uint64_t iap2_btConnectionStatus_startBTConnectionUpdateHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 44)
  {
    uint64_t v4 = *(os_log_s **)(gLogObjects + 344);
  }

  else
  {
    uint64_t v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "iAP2BTConnectionStatus StartBTConnectionUpdate Handler",  buf,  2u);
  }

  uint64_t v5 = 0LL;
  if (!a1 || !a2) {
    return v5;
  }
  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0LL);
  int v33 = 0;
  CFMutableSetRef Mutable = CFSetCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeSetCallBacks);
  if (FirstParam)
  {
    *(void *)&__int128 v8 = 67109376LL;
    __int128 v31 = v8;
    *(void *)&__int128 v8 = 134218240LL;
    __int128 v30 = v8;
    do
    {
      int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
      if (ParamID)
      {
        int v10 = ParamID;
        uint64_t v11 = gLogObjects;
        int v12 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 44)
        {
          unint64_t v13 = *(os_log_s **)(gLogObjects + 344);
        }

        else
        {
          unint64_t v13 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = v30;
            *(void *)&uint8_t buf[4] = v11;
            *(_WORD *)&buf[12] = 1024;
            int v35 = v12;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            unint64_t v13 = (os_log_s *)&_os_log_default;
          }
        }

        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          int MsgID = iAP2MsgGetMsgID(a2);
          *(_DWORD *)buf = v31;
          *(_DWORD *)&uint8_t buf[4] = v10;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = MsgID;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param",  buf,  0xEu);
        }
      }

      else
      {
        __int16 valuePtr = -21846;
        __int16 valuePtr = iAP2MsgGetDataAsU16(FirstParam, &v33);
        if (v33)
        {
          uint64_t v28 = (os_log_s *)logObjectForModule_4();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            int v29 = iAP2MsgGetMsgID(a2);
            *(void *)buf = v31;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v29;
            _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param",  buf,  0xEu);
          }

LABEL_47:
          uint64_t v5 = 0LL;
          if (!Mutable) {
            return v5;
          }
LABEL_43:
          CFRelease(Mutable);
          return v5;
        }

        CFNumberRef v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
        CFSetSetValue(Mutable, v14);
        if (v14) {
          CFRelease(v14);
        }
      }

      unint64_t FirstParam = iAP2MsgGetNextParam(a2, 0LL, FirstParam);
    }

    while (FirstParam);
  }

  if (CFSetGetCount(Mutable) < 1)
  {
    if (gLogObjects && gNumLogObjects >= 44)
    {
      int v25 = *(os_log_s **)(gLogObjects + 344);
    }

    else
    {
      int v25 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      CFIndex Count = CFSetGetCount(Mutable);
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = Count;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "iAP2BTConnectionStatus StartBTConnectionUpdate: no components, componentIDSet.count=%ld, skip processing",  buf,  0xCu);
    }
  }

  else
  {
    uint64_t Feature = iap2_feature_getFeature(a1, 5u);
    if (!Feature) {
      goto LABEL_47;
    }
    *(_BYTE *)(Feature + 16) = 1;
    CFIndex v17 = CFSetGetCount(Mutable);
    uint64_t v18 = __chkstk_darwin();
    int v20 = (const void **)((char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    if (v18)
    {
      memset((char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL), 170, v19);
      CFSetGetValues(Mutable, v20);
      if (v17 >= 1)
      {
        do
        {
          uint64_t v21 = (const __CFNumber *)*v20;
          *(_WORD *)buf = -21846;
          CFNumberGetValue(v21, kCFNumberSInt16Type, buf);
          ComponentForID = _findComponentForID(a1, *(unsigned __int16 *)buf);
          if (ComponentForID)
          {
            uint64_t v23 = ComponentForID;
            CFDataRef v24 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)ComponentForID + 24, 6LL);
            platform_btConnectionStatus_accessoryStartConnectionUpdates( *(void *)(a1 + 8),  *((void **)v23 + 1),  *((void *)v23 + 2),  (uint64_t)v24);
            if (v24) {
              CFRelease(v24);
            }
          }

          ++v20;
          --v17;
        }

        while (v17);
      }
    }

    else
    {
      CFSetGetValues(Mutable, (const void **)((char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL)));
    }
  }

  uint64_t v5 = 1LL;
  if (Mutable) {
    goto LABEL_43;
  }
  return v5;
}
}
}
}

  if (gLogObjects && gNumLogObjects >= 61)
  {
    int v26 = (os_log_s *)*(id *)(gLogObjects + 480);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v26 = (os_log_s *)&_os_log_default;
    uint64_t v27 = &_os_log_default;
  }

  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316162;
    int v33 = "t56_util_callbackOnTimer";
    int v34 = 1024;
    int v35 = 246;
    uint32_t v36 = 1024;
    uint64_t v37 = v6;
    int v38 = 1024;
    *(_DWORD *)uint64_t v39 = a2;
    *(_WORD *)&v39[4] = 2048;
    *(void *)&v39[6] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "%s:%d timerID %d, timeoutMs %u, timeoutNs %lld",  buf,  0x28u);
  }

  return v6;
}

  if (gLogObjects && gNumLogObjects >= 60)
  {
    int v32 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    int v32 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
  {
    int v34 = 136316162;
    int v35 = "qiAuth_protocol_setSlotAuthState";
    uint32_t v36 = 1024;
    uint64_t v37 = 637;
    int v38 = 1024;
    uint64_t v39 = v5;
    int v40 = 1024;
    uint64_t v41 = a2;
    uint64_t v42 = 1024;
    BOOL v43 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_INFO,  "%s:%d result %d, slot %d, authState %d",  (uint8_t *)&v34,  0x24u);
  }

  return v5;
}

        int v20 = (char *)v20 + 1;
      }

      while (v20 != v55);
      int v44 = [obj countByEnumeratingWithState:&v66 objects:v80 count:16];
      int v55 = v44;
      if (!v44)
      {

        BOOL v16 = v49;
        break;
      }
    }
  }

  int v45 = (void *)objc_claimAutoreleasedReturnValue(-[ACCPluginManager pluginBundlesMutable](v52, "pluginBundlesMutable"));
  BOOL v46 = [v45 count];

  return v46 - v16;
}

  __int16 v22 = (v42 | v15) == 0;
  if (v15) {
    goto LABEL_48;
  }
  return v22;
}

  __break(0x5513u);
  return result;
}

uint64_t iap2_btConnectionStatus_stopBTConnectionUpdateHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 44)
  {
    uint64_t v4 = *(os_log_s **)(gLogObjects + 344);
  }

  else
  {
    uint64_t v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "iAP2BTConnectionStatus StopBTConnectionUpdate Handler",  v6,  2u);
  }

  uint64_t result = 0LL;
  if (a1 && a2)
  {
    uint64_t result = iap2_feature_getFeature(a1, 5u);
    if (result)
    {
      *(_BYTE *)(result + 16) = 0;
      platform_btConnectionStatus_accessoryStopAllConnectionUpdates(*(void *)(a1 + 8));
      return 1LL;
    }
  }

  return result;
}

uint64_t iap2_btConnectionStatus_connectionUpdateHandler(uint64_t result, uint64_t a2)
{
  if (result)
  {
    id v3 = (uint64_t *)result;
    uint64_t Feature = iap2_feature_getFeature(result, 5u);
    if (gLogObjects && gNumLogObjects >= 44)
    {
      uint64_t v5 = *(os_log_s **)(gLogObjects + 344);
    }

    else
    {
      uint64_t v5 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = "exists";
      uint64_t v7 = v3[1];
      if (!Feature) {
        uint64_t v6 = "missing!!";
      }
      int v39 = 138412546;
      uint64_t v40 = v7;
      __int16 v41 = 2080;
      uint64_t v42 = (void *)v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "connectionUpdateHandler %@ btConnStatus %s",  (uint8_t *)&v39,  0x16u);
    }

    uint64_t result = 0LL;
    if (a2)
    {
      if (Feature)
      {
        if (!*(_BYTE *)(Feature + 16))
        {
          uint64_t v37 = (os_log_s *)logObjectForModule_4();
          BOOL v38 = os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0LL;
          if (!v38) {
            return result;
          }
          LOWORD(v39) = 0;
          uint64_t v18 = "Received BT connection update, but BT updates are not started, ignoring...";
          CFDataRef v24 = v37;
          uint32_t v25 = 2;
          goto LABEL_48;
        }

        if (*(_DWORD *)a2) {
          return 0LL;
        }
        __int128 v8 = *(const __CFString **)(a2 + 8);
        if (v8)
        {
          uint64_t v9 = iap2_feature_getFeature((uint64_t)v3, 5u);
          if (gLogObjects && gNumLogObjects >= 44)
          {
            int v10 = *(os_log_s **)(gLogObjects + 344);
          }

          else
          {
            int v10 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            uint64_t v12 = v3[1];
            int v39 = 138412546;
            uint64_t v40 = v12;
            __int16 v41 = 2112;
            uint64_t v42 = (void *)v8;
            _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "_findComponentForUID %@, componentUID=%@",  (uint8_t *)&v39,  0x16u);
          }

          if (v9 && *(int *)(v9 + 8) >= 1)
          {
            uint64_t v13 = 0LL;
            uint64_t v14 = 0LL;
            while (CFStringCompare(*(CFStringRef *)(*(void *)v9 + v13 + 8), v8, 0LL))
            {
              ++v14;
              v13 += 32LL;
            }

            uint64_t v19 = *(void *)v9;
            if (*(void *)v9)
            {
              if (gLogObjects && gNumLogObjects >= 44)
              {
                int v20 = *(os_log_s **)(gLogObjects + 344);
              }

              else
              {
                int v20 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
              {
                uint64_t v26 = v3[1];
                int v39 = 138412290;
                uint64_t v40 = v26;
                _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "connectionUpdateHandler %@, create msg",  (uint8_t *)&v39,  0xCu);
              }

              uint64_t v27 = iAP2MsgInit((uint64_t)(v3 + 15), 19972, v3[24], 0xFFFF, 0LL, 0LL);
              uint64_t v28 = iAP2MsgAddU16Param(v27, 0LL, 0, *(unsigned __int16 *)(v19 + v13));
              int v29 = iAP2MsgAddGroupParam(v27, 1);
              if (v29)
              {
                unsigned int v30 = *(_DWORD *)(a2 + 16);
                if (v30)
                {
                  uint64_t v31 = (uint64_t)v29;
                  __int16 v32 = 0;
                  do
                  {
                    if ((v30 & 1) != 0) {
                      iAP2MsgAddVoidParam(v27, v31, v32);
                    }
                    ++v32;
                    BOOL v33 = v30 >= 2;
                    v30 >>= 1;
                  }

                  while (v33);
                }

                goto LABEL_63;
              }

              if (v28)
              {
LABEL_63:
                if (gLogObjects && gNumLogObjects >= 44)
                {
                  int v34 = *(os_log_s **)(gLogObjects + 344);
                }

                else
                {
                  int v34 = (os_log_s *)&_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }

                if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
                {
                  uint64_t v35 = v3[1];
                  int MsgID = iAP2MsgGetMsgID(v27);
                  int v39 = 138412546;
                  uint64_t v40 = v35;
                  __int16 v41 = 1024;
                  LODWORD(v42) = MsgID;
                  _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_INFO,  "connectionUpdateHandler %@ send message %xh",  (uint8_t *)&v39,  0x12u);
                }

                iap2_sessionControl_sendOutgoingMessage(v3, v27);
                platform_btConnectionStatus_deleteParams((void *)a2);
                return 1LL;
              }

              return 0LL;
            }
          }

uint64_t iap2_btConnectionStatus_isSupportedOnConnection(uint64_t a1)
{
  char v4 = 0;
  int v2 = iap2_identification_checkRequiredMsgIDs(a1, (uint64_t)&gskMsgBTConnectionStatusMainList, 3, &v4);
  return v2 | iap2_identification_checkRequiredMsgIDs(a1, (uint64_t)&gskMsgBTComponentInfoMainList, 1, &v4);
}

void *_createFeature_2(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 44)
  {
    int v2 = *(os_log_s **)(gLogObjects + 344);
  }

  else
  {
    int v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)char v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "iAP2BTConnectionStatus _createFeature", v4, 2u);
  }

  if (!a1) {
    return 0LL;
  }
  uint64_t result = calloc(1uLL, 0x18uLL);
  if (result)
  {
    *uint64_t result = 0LL;
    result[1] = 0LL;
    *((_BYTE *)result + 16) = 0;
  }

  return result;
}

uint64_t _destroyFeature_2(void **a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 44)
  {
    char v4 = *(os_log_s **)(gLogObjects + 344);
  }

  else
  {
    char v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    LOWORD(v15) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "iAP2BTConnectionStatus _destroyFeature",  (uint8_t *)&v15,  2u);
  }

  uint64_t result = 0LL;
  if (a1 && a2)
  {
    uint64_t v6 = (void **)*a1;
    if (*a1)
    {
      platform_btConnectionStatus_accessoryStopAllConnectionUpdates(*(void *)(a2 + 8));
      platform_btConnectionStatus_accessoryDetached(*(void *)(a2 + 8));
      uint64_t v7 = (int *)*a1;
      if (gLogObjects && gNumLogObjects >= 44)
      {
        __int128 v8 = *(os_log_s **)(gLogObjects + 344);
      }

      else
      {
        __int128 v8 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = *(void *)(a2 + 8);
        int v15 = 138412290;
        uint64_t v16 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "_cleanupComponentList %@",  (uint8_t *)&v15,  0xCu);
      }

      if (v7)
      {
        if (v7[2] >= 1)
        {
          uint64_t v10 = 0LL;
          uint64_t v11 = 0LL;
          uint64_t v12 = *(void *)v7;
          do
          {
            uint64_t v13 = *(const void **)(v12 + v10 + 8);
            if (v13)
            {
              CFRelease(v13);
              uint64_t v12 = *(void *)v7;
              *(void *)(*(void *)v7 + v10 + _Block_object_dispose(va, 8) = 0LL;
            }

            uint64_t v14 = *(const void **)(v12 + v10 + 16);
            if (v14)
            {
              CFRelease(v14);
              uint64_t v12 = *(void *)v7;
              *(void *)(*(void *)v7 + v10 + 16) = 0LL;
            }

            ++v11;
            v10 += 32LL;
          }

          while (v11 < v7[2]);
        }

        _DWORD v7[2] = 0;
      }

      if (*v6)
      {
        free(*v6);
        const char *v6 = 0LL;
      }

      if (*a1)
      {
        free(*a1);
        *a1 = 0LL;
      }

      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

BOOL _startFeatureFromDevice_0(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 44)
  {
    int v2 = *(os_log_s **)(gLogObjects + 344);
  }

  else
  {
    int v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "iAP2BTConnectionStatus _startFeatureFromDevice",  v6,  2u);
  }

  uint64_t Feature = iap2_feature_getFeature(a1, 5u);
  if (Feature && iap2_btConnectionStatus_isSupportedOnConnection(a1))
  {
    if (!a1 || (uint64_t v4 = *(void *)(a1 + 8)) == 0) {
      uint64_t v4 = 0LL;
    }
    platform_btConnectionStatus_accessoryAttached(v4);
    _setupComponentList(a1);
  }

  return Feature != 0;
}

uint64_t _checkIdentificationInfo_1(void *a1)
{
  __int16 v8 = 0;
  uint64_t result = iap2_identification_checkIdentificationMsgIDs( (uint64_t)a1,  (uint64_t)&gskMsgBTConnectionStatusMainList,  3u,  (_BYTE *)&v8 + 1);
  if (HIBYTE(v8)) {
    BOOL v3 = (_DWORD)result == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t result = iap2_identification_checkIdentificationMsgIDs( (uint64_t)a1,  (uint64_t)&gskMsgBTComponentInfoMainList,  1u,  &v8);
    if (!(_BYTE)v8 || !(_DWORD)result)
    {
      int v4 = HIBYTE(v8);
      if (HIBYTE(v8) && !(_DWORD)result)
      {
        if (iap2_identification_getTransportComponent(a1, 3))
        {
          uint64_t result = 0LL;
        }

        else
        {
          TransportComponent = iap2_identification_getTransportComponent(a1, 5);
          uint64_t result = 0LL;
          if (TransportComponent) {
            uint64_t v6 = 0LL;
          }
          else {
            uint64_t v6 = 12LL;
          }
          if (!TransportComponent)
          {
            for (uint64_t i = 0LL; i != 36; i += 12LL)
              iap2_identification_rejectMsgID( (uint64_t)a1,  *(unsigned __int16 *)((char *)&gskMsgBTConnectionStatusMainList + i),  *(_DWORD *)((char *)&gskMsgBTConnectionStatusMainList + i + 4),  v6);
            uint64_t result = v6;
          }
        }

        int v4 = HIBYTE(v8);
      }

      if ((v4 || (_BYTE)v8) && !(_DWORD)result)
      {
        iap2_features_createFeature((uint64_t)a1, 5u);
        iap2_identification_setIdentifiedForFeature((uint64_t)a1, 5u);
        return 0LL;
      }
    }
  }

  return result;
}

void _setupComponentList(uint64_t a1)
{
  uint64_t v53 = a1;
  id v1 = (const __CFDictionary *)iap2_identification_transportComponents(a1);
  if (v1)
  {
    int v2 = v1;
    CFIndex Count = CFDictionaryGetCount(v1);
    if (gLogObjects && gNumLogObjects >= 44)
    {
      int v4 = *(os_log_s **)(gLogObjects + 344);
    }

    else
    {
      int v4 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      _setupComponentList_cold_2(Count, v4);
      if (!Count) {
        return;
      }
    }

    else if (!Count)
    {
      return;
    }

    uint32_t v49 = &v45;
    __chkstk_darwin();
    uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    memset(v6, 170, v5);
    CFDictionaryGetKeysAndValues(v2, 0LL, (const void **)v6);
    __int16 v8 = &startLogsNotificationObservers;
    if (Count >= 1)
    {
      uint64_t v9 = 0LL;
      CFAllocatorRef v51 = kCFAllocatorDefault;
      BOOL v46 = v55;
      *(void *)&__int128 v7 = 134218240LL;
      __int128 v48 = v7;
      *(void *)&__int128 v7 = 67110146LL;
      __int128 v47 = v7;
      *(void *)&__int128 v7 = 138412802LL;
      __int128 v50 = v7;
      do
      {
        uint64_t v10 = *(unsigned __int16 **)&v6[8 * v9];
        uint64_t v11 = v8[353];
        int v12 = gNumLogObjects;
        if (v11) {
          BOOL v13 = gNumLogObjects <= 43;
        }
        else {
          BOOL v13 = 1;
        }
        int v14 = !v13;
        if (v10)
        {
          if (v14)
          {
            int v15 = *(os_log_s **)(v11 + 344);
          }

          else
          {
            int v15 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = v48;
              *(void *)__int128 v62 = v11;
              *(_WORD *)&v62[8] = 1024;
              *(_DWORD *)&v62[10] = v12;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            }
          }

          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
          {
            int v36 = *v10;
            int v37 = *((_DWORD *)v10 + 5);
            uint64_t v38 = *((void *)v10 + 1);
            *(_DWORD *)buf = v47;
            *(_DWORD *)__int128 v62 = v9;
            *(_WORD *)&v62[4] = 2048;
            *(void *)&v62[6] = Count;
            __int16 v63 = 1024;
            *(_DWORD *)char v64 = v36;
            *(_WORD *)&v64[4] = 1024;
            *(_DWORD *)&v64[6] = v37;
            __int16 v65 = 2112;
            uint64_t v66 = v38;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "_setupComponentList: found transportComponent, %d/%ld id=%d type=%d name=%@",  buf,  0x28u);
          }

          int v17 = *((_DWORD *)v10 + 5);
          if (v17 == 5 || v17 == 3)
          {
            uint64_t v19 = v6;
            CFIndex v20 = Count;
            int v59 = -1431655766;
            __int16 v60 = -21846;
            int v57 = -1431655766;
            __int16 v58 = -21846;
            __int16 v56 = -21846;
            int v21 = *v10;
            uint64_t v22 = v51;
            uint64_t v23 = CFUUIDCreate(v51);
            CFStringRef v24 = CFUUIDCreateString(v22, v23);
            CFStringRef Copy = CFStringCreateCopy(v22, *((CFStringRef *)v10 + 1));
            int v57 = *((_DWORD *)v10 + 6);
            __int16 v58 = v10[14];
            uint64_t Feature = iap2_feature_getFeature(v53, 5u);
            uint64_t v26 = v8[353];
            int v27 = gNumLogObjects;
            if (v26 && gNumLogObjects >= 44)
            {
              uint64_t v28 = *(os_log_s **)(v26 + 344);
            }

            else
            {
              uint64_t v28 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = v48;
                *(void *)__int128 v62 = v26;
                *(_WORD *)&v62[8] = 1024;
                *(_DWORD *)&v62[10] = v27;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              }
            }

            __int16 v8 = &startLogsNotificationObservers;
            if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
            {
              if (!v53 || (uint64_t v29 = *(void *)(v53 + 8)) == 0) {
                uint64_t v29 = 0LL;
              }
              *(_DWORD *)buf = v50;
              *(void *)__int128 v62 = v29;
              *(_WORD *)&v62[8] = 1024;
              *(_DWORD *)&v62[10] = v21;
              __int16 v63 = 2112;
              *(void *)char v64 = v24;
              _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_INFO,  "_addComponent %@, component=(%u, %@)",  buf,  0x1Cu);
            }

            if (Feature)
            {
              int v30 = *(_DWORD *)(Feature + 12);
              if (!v30)
              {
                int v30 = 4;
                *(_DWORD *)(Feature + 12) = 4;
                *(void *)uint64_t Feature = malloc(0x80uLL);
              }

              if (v30 <= *(_DWORD *)(Feature + 8))
              {
                int v31 = 2 * v30;
                __int16 v32 = (char *)realloc(*(void **)Feature, 64LL * v30);
                if (v32)
                {
                  *(void *)uint64_t Feature = v32;
                  *(_DWORD *)(Feature + 12) = v31;
                  bzero(&v32[32 * *(int *)(Feature + 8)], 32LL * (v31 - *(_DWORD *)(Feature + 8)));
                }

                else
                {
                  uint64_t v33 = gLogObjects;
                  int v34 = gNumLogObjects;
                  if (gLogObjects && gNumLogObjects >= 44)
                  {
                    uint64_t v35 = *(os_log_s **)(gLogObjects + 344);
                  }

                  else
                  {
                    BOOL v39 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
                    uint64_t v35 = (os_log_s *)&_os_log_default;
                    if (v39)
                    {
                      *(_DWORD *)buf = v48;
                      *(void *)__int128 v62 = v33;
                      *(_WORD *)&v62[8] = 1024;
                      *(_DWORD *)&v62[10] = v34;
                      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                      uint64_t v35 = (os_log_s *)&_os_log_default;
                    }
                  }

                  uint64_t v40 = v35;
                  __int16 v8 = &startLogsNotificationObservers;
                  if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
                  {
                    if (!v53 || (uint64_t v43 = *(void *)(v53 + 8)) == 0) {
                      uint64_t v43 = 0LL;
                    }
                    int v44 = *(_DWORD *)(Feature + 12);
                    *(_DWORD *)buf = v50;
                    *(void *)__int128 v62 = v43;
                    *(_WORD *)&v62[8] = 1024;
                    *(_DWORD *)&v62[10] = v44;
                    __int16 v63 = 1024;
                    *(_DWORD *)char v64 = v31;
                    _os_log_error_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_ERROR,  "_addComponent %@ FAILED to re-allocate buffer for componentInfoList, allocCount=%d->%d",  buf,  0x18u);
                  }
                }
              }

              uint64_t v41 = *(void *)Feature + 32LL * *(int *)(Feature + 8);
              *(_WORD *)uint64_t v41 = v21;
              *(_DWORD *)(v41 + 2) = v59;
              *(_WORD *)(v41 + 6) = v60;
              CFStringRef v42 = Copy;
              *(void *)(v41 + _Block_object_dispose(va, 8) = v24;
              *(void *)(v41 + 16) = v42;
              *(_DWORD *)(v41 + 24) = v57;
              *(_WORD *)(v41 + 2_Block_object_dispose(va, 8) = v58;
              *(_WORD *)(v41 + 30) = v56;
              ++*(_DWORD *)(Feature + 8);
            }

            if (v23) {
              CFRelease(v23);
            }
            CFIndex Count = v20;
            uint64_t v6 = v19;
          }
        }

        else
        {
          if (v14)
          {
            uint64_t v16 = *(os_log_s **)(v11 + 344);
          }

          else
          {
            uint64_t v16 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = v48;
              *(void *)__int128 v62 = v11;
              *(_WORD *)&v62[8] = 1024;
              *(_DWORD *)&v62[10] = v12;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            }
          }

          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
            _setupComponentList_cold_1(&v54, v46, v16);
          }
        }

        ++v9;
      }

      while (Count != v9);
    }
  }

BOOL acc_authInfo_init(BOOL result)
{
  if (result) {
    return acc_authInfo_cleanup(result, 1);
  }
  return result;
}

BOOL acc_authInfo_cleanup(uint64_t a1, int a2)
{
  if (a1)
  {
    if (a2)
    {
      *(void *)a1 = 0LL;
      *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
      *(_DWORD *)(a1 + 16) = 0;
    }

    *(_DWORD *)(a1 + 20) = 0;
    BOOL v3 = *(const void **)(a1 + 24);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1 + 24) = 0LL;
    }

    int v4 = *(const void **)(a1 + 32);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(a1 + 32) = 0LL;
    }

    size_t v5 = *(const void **)(a1 + 40);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 40) = 0LL;
    }

    uint64_t v6 = *(const void **)(a1 + 48);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
    }

    *(_DWORD *)(a1 + 56) = 255;
    *(_BYTE *)(a1 + 60) = 0;
  }

  return a1 != 0;
}

BOOL acc_authInfo_setCertData(uint64_t a1, const void *a2)
{
  if (a1)
  {
    acc_authInfo_cleanup(a1, 0);
    *(_DWORD *)(a1 + 56) = 255;
    if (a2) {
      CFRetain(a2);
    }
    int v4 = *(const void **)(a1 + 24);
    if (v4) {
      CFRelease(v4);
    }
    *(void *)(a1 + 24) = a2;
    if (a2)
    {
      *(_DWORD *)(a1 + 20) = 0;
      size_t v5 = (int *)(a1 + 20);
      if (gLogObjects && gNumLogObjects >= 18)
      {
        uint64_t v6 = *(os_log_s **)(gLogObjects + 136);
      }

      else
      {
        uint64_t v6 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v31) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Parsing auth cert data...",  (uint8_t *)&v31,  2u);
      }

      int v7 = platform_auth_certificateAuthVersionNumber();
      int v8 = v7;
      if (v7 == 3) {
        int v9 = 3;
      }
      else {
        int v9 = 0;
      }
      if (v7 == 2) {
        int v9 = 2;
      }
      *(_DWORD *)(a1 + 20) = v9;
      if (gLogObjects && gNumLogObjects >= 18)
      {
        uint64_t v10 = *(os_log_s **)(gLogObjects + 136);
      }

      else
      {
        uint64_t v10 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = *v5;
        int v31 = 67109376;
        *(_DWORD *)__int16 v32 = v11;
        *(_WORD *)&v32[4] = 1024;
        *(_DWORD *)&v32[6] = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "pAuthInfo->authVersion: %{coreacc:ACCAuthInfo_Version_t}d, authVersionNum: %d",  (uint8_t *)&v31,  0xEu);
      }

      int v12 = *(const void **)(a1 + 32);
      if (v12)
      {
        CFRelease(v12);
        *(void *)(a1 + 32) = 0LL;
      }

      CertificateSerialNumber = (const __CFData *)platform_auth_createCertificateSerialNumber(*(void *)(a1 + 24));
      *(void *)(a1 + 32) = CertificateSerialNumber;
      if (*(void *)(a1 + 40))
      {
        CFRelease(*(CFTypeRef *)(a1 + 40));
        *(void *)(a1 + 40) = 0LL;
        CertificateSerialNumber = *(const __CFData **)(a1 + 32);
      }

      *(void *)(a1 + 40) = CFStringCreateFromCFData(CertificateSerialNumber, @"%02X");
      CapsFromAuthCert = (const UInt8 *)platform_auth_createCapsFromAuthCert(*(void *)(a1 + 24));
      int v15 = *(const void **)(a1 + 48);
      if (v15)
      {
        CFRelease(v15);
        *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
      }

      if (CapsFromAuthCert) {
        *(void *)(a1 + 4_Block_object_dispose(va, 8) = CFDataCreate(kCFAllocatorDefault, CapsFromAuthCert, 32LL);
      }
      platform_auth_deallocAuthCertCaps(CapsFromAuthCert);
      if (gLogObjects && gNumLogObjects >= 18)
      {
        uint64_t v16 = *(os_log_s **)(gLogObjects + 136);
      }

      else
      {
        uint64_t v16 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = *(void *)(a1 + 32);
        uint64_t v17 = *(void *)(a1 + 40);
        uint64_t v19 = *(void *)(a1 + 48);
        int v31 = 138412802;
        *(void *)__int16 v32 = v17;
        *(_WORD *)&v32[8] = 2112;
        uint64_t v33 = v18;
        __int16 v34 = 2112;
        uint64_t v35 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "certSerialString: %@, certSerial: %@, certCapabilities: %@",  (uint8_t *)&v31,  0x20u);
      }

      if (*v5 != 3)
      {
        if (*v5 == 2)
        {
          CFIndex v20 = *(const __CFData **)(a1 + 32);
          if (v20 && CFDataGetLength(v20) >= 7) {
            *(_DWORD *)(a1 + 56) = CFDataGetBytePtr(*(CFDataRef *)(a1 + 32))[7];
          }
          if (gLogObjects && gNumLogObjects >= 18)
          {
            int v21 = *(os_log_s **)(gLogObjects + 136);
          }

          else
          {
            int v21 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            int v23 = *(_DWORD *)(a1 + 56);
            int v31 = 67109120;
            *(_DWORD *)__int16 v32 = v23;
            _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "certClass: %{coreacc:ACCAuthInfo_V2_Info_CertClass_t}d",  (uint8_t *)&v31,  8u);
          }
        }

        else
        {
          if (gLogObjects && gNumLogObjects >= 18)
          {
            uint64_t v22 = *(os_log_s **)(gLogObjects + 136);
          }

          else
          {
            uint64_t v22 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
            acc_authInfo_setCertData_cold_1(a1 + 20, v22, v24, v25, v26, v27, v28, v29);
          }
        }
      }
    }
  }

  return a1 != 0;
}

uint64_t acc_authInfo_setStatus(uint64_t result, uint64_t a2, int a3)
{
  if (result)
  {
    if (a2 >= 5)
    {
      int v4 = (os_log_s *)logObjectForModule_5();
      uint64_t result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        acc_authInfo_setStatus_cold_1(a2, v4, v5, v6, v7, v8, v9, v10);
        return 0LL;
      }
    }

    else
    {
      *(_DWORD *)(result + 4LL * a2) = a3;
      return 1LL;
    }
  }

  return result;
}

void *logObjectForModule_5()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 18;
  }
  else {
    BOOL v0 = 1;
  }
  if (!v0) {
    return *(void **)(gLogObjects + 136);
  }
  id v1 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v1;
}

BOOL acc_authInfo_setCTAAllowed(uint64_t a1, char a2)
{
  if (a1) {
    *(_BYTE *)(a1 + 60) = a2;
  }
  return a1 != 0;
}

uint64_t acc_authInfo_getStatus(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (a2 >= 5)
    {
      BOOL v3 = (os_log_s *)logObjectForModule_5();
      uint64_t result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        acc_authInfo_setStatus_cold_1(a2, v3, v4, v5, v6, v7, v8, v9);
        return 0LL;
      }
    }

    else
    {
      return *(unsigned int *)(result + 4LL * a2);
    }
  }

  return result;
}

BOOL acc_authInfo_isAuthenticated(BOOL result, uint64_t a2)
{
  if (result)
  {
    if ((_DWORD)a2 == 5 || a2 >= 7)
    {
      uint64_t v5 = (os_log_s *)logObjectForModule_5();
      uint64_t result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        acc_authInfo_setStatus_cold_1(a2, v5, v6, v7, v8, v9, v10, v11);
        return 0LL;
      }
    }

    else if ((_DWORD)a2 == 6)
    {
      uint64_t v3 = 0LL;
      int v4 = 0;
      do
      {
        if (*(_DWORD *)(result + v3) == 2) {
          ++v4;
        }
        v3 += 4LL;
      }

      while (v3 != 20);
      return v4 != 0;
    }

    else
    {
      return *(_DWORD *)(result + 4LL * a2) == 2;
    }
  }

  return result;
}

BOOL acc_authInfo_isCTAAllowed(BOOL result)
{
  if (result) {
    return *(_BYTE *)(result + 60) != 0;
  }
  return result;
}

void *acc_authInfo_isAppleAccessory(void *result)
{
  if (result)
  {
    uint64_t CapsFromAuthCert = platform_auth_createCapsFromAuthCert(result[3]);
    id v2 = platform_auth_isAppleAccessory(CapsFromAuthCert);
    platform_auth_deallocAuthCertCaps(CapsFromAuthCert);
    return v2;
  }

  return result;
}

CFStringRef acc_authInfo_copyCertSerialString(uint64_t a1)
{
  if (a1 && (id v1 = *(const __CFString **)(a1 + 40)) != 0LL) {
    return CFStringCreateCopy(kCFAllocatorDefault, v1);
  }
  else {
    return 0LL;
  }
}

CFDataRef acc_authInfo_copyCertCapabilities(uint64_t a1)
{
  if (a1 && (id v1 = *(const __CFData **)(a1 + 48)) != 0LL) {
    return CFDataCreateCopy(kCFAllocatorDefault, v1);
  }
  else {
    return 0LL;
  }
}

uint64_t iap2_AvailableDigitalCarKeys(uint64_t a1, uint64_t a2)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  uint64_t v5 = Mutable;
  uint64_t v6 = 0LL;
  if (!a1 || !a2 || !Mutable) {
    goto LABEL_34;
  }
  if (iAP2MsgGetMsgID(a2) != 17154)
  {
    uint64_t v6 = 0LL;
    goto LABEL_35;
  }

  if (gLogObjects && gNumLogObjects >= 52)
  {
    uint64_t v7 = *(os_log_s **)(gLogObjects + 408);
  }

  else
  {
    uint64_t v7 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v23) = 17154;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "iap2_AvailableDigitalCarKeys: Received message 0x%x",  buf,  8u);
  }

  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
  int v21 = -1431655766;
  if (!FirstParam)
  {
LABEL_26:
    if (gLogObjects && gNumLogObjects >= 52)
    {
      uint64_t v18 = *(os_log_s **)(gLogObjects + 408);
    }

    else
    {
      uint64_t v18 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v23 = (uint64_t)v5;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "iap2_AvailableDigitalCarKeys: calling platform_CarPlay_availableDigitalCarKeys with key IDs: %@",  buf,  0xCu);
    }

    platform_CarPlay_sendConnectionEvent();
    uint64_t v6 = 1LL;
LABEL_34:
    if (!v5) {
      return v6;
    }
    goto LABEL_35;
  }

  NextParam = (unsigned __int16 *)FirstParam;
  while (1)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
    if (!ParamID) {
      break;
    }
    int v11 = ParamID;
    uint64_t v12 = gLogObjects;
    int v13 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 52)
    {
      int v14 = *(os_log_s **)(gLogObjects + 408);
    }

    else
    {
      int v14 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        uint64_t v23 = v12;
        __int16 v24 = 1024;
        int v25 = v13;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
        int v14 = (os_log_s *)&_os_log_default;
      }
    }

    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v23) = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "Unrecognized AvailableDigitalCarKeys paramID:0x%04X",  buf,  8u);
    }

LABEL_25:
    NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
    if (!NextParam) {
      goto LABEL_26;
    }
  }

  DataAsString = iAP2MsgGetDataAsString(NextParam, (BOOL *)&v21);
  if (!v21)
  {
    CFStringRef v16 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)DataAsString, 0x8000100u);
    if (v16)
    {
      CFStringRef v17 = v16;
      CFArrayAppendValue(v5, v16);
      CFRelease(v17);
    }

    goto LABEL_25;
  }

  CFIndex v20 = (os_log_s *)logObjectForModule_6();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
    iap2_AvailableDigitalCarKeys_cold_2(a2, v20);
  }
  uint64_t v6 = 0LL;
  if (v5) {
LABEL_35:
  }
    CFRelease(v5);
  return v6;
}

  if (a2)
  {
    iAP2LinkHandleReadyPacket(*(void *)(v3 + 24), (uint64_t)a2);
    iAP2PacketRelease(a2);
  }

  if ((ResetEventMask & 0x1F0) == 0) {
    goto LABEL_33;
  }
  CurTimeMs = iAP2TimeGetCurTimeMs();
  if ((ResetEventMask & 0x40) != 0)
  {
    iAP2LinkHandleTimeout(*(void *)(v3 + 24), CurTimeMs, 0x1Au);
    if ((ResetEventMask & 0x10) == 0)
    {
LABEL_30:
      if ((ResetEventMask & 0x20) == 0) {
        goto LABEL_31;
      }
      goto LABEL_42;
    }
  }

  else if ((ResetEventMask & 0x10) == 0)
  {
    goto LABEL_30;
  }

  iAP2LinkHandleTimeout(*(void *)(v3 + 24), CurTimeMs, 0xCu);
  if ((ResetEventMask & 0x20) == 0)
  {
LABEL_31:
    if ((ResetEventMask & 0x80) == 0) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }

  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v14 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    int v14 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    int v15 = *a1;
    CFStringRef v16 = *((_DWORD *)a1 + 286);
    if (NewCertificateStruct) {
      CFStringRef v17 = NewCertificateStruct[2];
    }
    else {
      CFStringRef v17 = -1;
    }
    v19[0] = 67110144;
    v19[1] = v15;
    CFIndex v20 = 1024;
    int v21 = v16;
    uint64_t v22 = 1024;
    uint64_t v23 = v17;
    __int16 v24 = 1024;
    int v25 = acc_auth_protocol_sizeofMessage((uint64_t)a3, a4, 0LL, 0LL);
    uint64_t v26 = 1024;
    uint64_t v27 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "[AccAuth][1Way] handleCertificateChainInfoRequest: sessionID %d, role %d, certificateDataLen %d, msgSize %d, errorNo %d \n",  (uint8_t *)v19,  0x20u);
  }

  if (NewCertificateStruct) {
    _acc_auth_protocol_returnCertificateStruct(NewCertificateStruct);
  }
  return v10;
}

    ++v9;
    if (!--v6) {
      goto LABEL_26;
    }
  }

  CFStringRef v17 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)v10 + 24, 6LL);
  if (gLogObjects && gNumLogObjects >= 26)
  {
    uint64_t v18 = *(os_log_s **)(gLogObjects + 200);
  }

  else
  {
    uint64_t v18 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
    iap2_identification_copyMacAddressForComponentID_cold_1(v10, (uint64_t)v17, v18);
  }
LABEL_35:
  free(v8);
  return v17;
}

void *logObjectForModule_6()
{
  if (gLogObjects && gNumLogObjects >= 52) {
    return *(void **)(gLogObjects + 408);
  }
  BOOL v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

uint64_t iap2_MatchedDigitalCarKeys(uint64_t *a1, const __CFArray *a2)
{
  uint64_t result = 0LL;
  if (a1 && a2)
  {
    if (gLogObjects && gNumLogObjects >= 52)
    {
      uint64_t v5 = *(os_log_s **)(gLogObjects + 408);
    }

    else
    {
      uint64_t v5 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[1];
      int v10 = 138412546;
      uint64_t v11 = v6;
      __int16 v12 = 2112;
      int v13 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "iap2_MatchedDigitalCarKeys: %@, matchedKeys: %@",  (uint8_t *)&v10,  0x16u);
    }

    iAP2MsgInit((uint64_t)(a1 + 15), 17155, a1[24], 0xFFFF, 0LL, 0LL);
    if (CFArrayGetCount(a2) < 1)
    {
      return iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
    }

    else
    {
      CFIndex v7 = 0LL;
      while (1)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, v7);
        CFTypeID v9 = CFGetTypeID(ValueAtIndex);
        if (v9 != CFStringGetTypeID()) {
          break;
        }
        iAP2MsgAddCFStringParam((uint64_t)(a1 + 15), 0LL, 0, ValueAtIndex);
        if (++v7 >= CFArrayGetCount(a2)) {
          return iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
        }
      }

      return 0LL;
    }
  }

  return result;
}

_BYTE *_createFeature_3(_BYTE *result)
{
  if (result)
  {
    uint64_t result = calloc(1uLL, 1uLL);
    if (result) {
      *uint64_t result = 1;
    }
  }

  return result;
}

uint64_t _destroyFeature_3(void **a1)
{
  if (a1)
  {
    id v2 = *a1;
    if (v2)
    {
      free(v2);
      *a1 = 0LL;
    }
  }

  return 0LL;
}

uint64_t _checkIdentificationInfo_2(uint64_t a1)
{
  char v7 = 0;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&kMsgDigitalCarKeyMatchingList, 2u, &v7);
  if ((_DWORD)v2) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = v7 == 0;
  }
  if (!v3)
  {
    if (*(_DWORD *)(*(void *)a1 + 24LL) == 4)
    {
      iap2_features_createFeature(a1, 0x1Cu);
      iap2_identification_setIdentifiedForFeature(a1, 0x1Cu);
      if (gLogObjects && gNumLogObjects >= 52)
      {
        int v4 = *(os_log_s **)(gLogObjects + 408);
      }

      else
      {
        int v4 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
        _checkIdentificationInfo_cold_1_0(v4);
      }
      return 0LL;
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 52)
      {
        uint64_t v5 = *(os_log_s **)(gLogObjects + 408);
      }

      else
      {
        uint64_t v5 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        _checkIdentificationInfo_cold_3(v5);
      }
      uint64_t v2 = 13LL;
      iap2_identification_rejectAllMsgIDsForList(a1, (uint64_t)&kMsgDigitalCarKeyMatchingList, 2u, 0xDu);
    }
  }

  return v2;
}

BOOL iAP2MsgSendCtlDataWithSentCallback( uint64_t a1, char *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t), int a8)
{
  unsigned int SessionForService = iAP2LinkGetSessionForService(*(void *)(a1 + 24), 0);
  BOOL v17 = iAP2LinkRunLoopQueueSendDataWithSentCallback(a1, a2, a3, SessionForService, a4, a5, a6, a7, a8);
  if (!v17 && (_iAP2LogEnableMask & 1) != 0)
  {
    if (gLogObjects) {
      BOOL v18 = gNumLogObjects < 20;
    }
    else {
      BOOL v18 = 1;
    }
    if (v18)
    {
      uint64_t v19 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      uint64_t v19 = *(os_log_s **)(gLogObjects + 152);
    }

    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109632;
      unsigned int v22 = a3;
      __int16 v23 = 1024;
      int v24 = a8;
      __int16 v25 = 1024;
      unsigned int v26 = SessionForService;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "ERROR: Error sending message data !!!!!! dataLen=%u dataSentCBonACK=%d session=%u\n",  buf,  0x14u);
    }
  }

  return v17;
}

uint64_t iAP2MsgPreSendCtlProcess()
{
  return 0LL;
}

void sub_100022D90( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, id a18)
{
}

void sub_1000231A4(_Unwind_Exception *a1)
{
}

LABEL_38:
      }

      CFIndex v20 = [obj countByEnumeratingWithState:&v39 objects:v45 count:16];
    }

    while (v20);
  }
}
      }

      BOOL v17 = [v14 countByEnumeratingWithState:&v34 objects:v44 count:16];
    }

    while (v17);
  }
}
      }

      uint64_t v19 = [obj countByEnumeratingWithState:&v37 objects:v49 count:16];
    }

    while (v19);
  }
}

    if (v18) {
      CFRelease(v18);
    }
    v111.length = CFArrayGetCount((CFArrayRef)a3);
    v111.location = 0LL;
    CFArrayApplyFunction((CFArrayRef)a3, v111, (CFArrayApplierFunction)_CFArrayApplierFunction_handleCertList, a1);
    *((_DWORD *)a1 + 20) = 5;
    if (CFArrayGetCount((CFArrayRef)a1[3]))
    {
      uint64_t v28 = acc_userDefaults_BOOLForKey((uint64_t)@"DisableAMSHookUp");
      if (gLogObjects) {
        uint64_t v29 = gNumLogObjects <= 57;
      }
      else {
        uint64_t v29 = 1;
      }
      int v30 = !v29;
      if ((v28 & 1) == 0)
      {
        if (v30)
        {
          __int16 v32 = *(os_log_s **)(gLogObjects + 456);
        }

        else
        {
          __int16 v32 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          int v36 = v11[2];
          *(_DWORD *)buf = 136315650;
          v106 = "_audioProductCerts_endpoint_handleMissingCertList";
          v107 = 2112;
          v108 = v36;
          v109 = 2112;
          *(void *)v110 = cf;
          _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_INFO,  "%s: %@, %@, get accInfo from endpoint",  buf,  0x20u);
        }

        AccessoryInfo = (const __CFString *)acc_endpoint_getAccessoryInfo((uint64_t)v11);
        if (!AccessoryInfo)
        {
          if (gLogObjects && gNumLogObjects >= 58)
          {
            uint64_t v38 = *(os_log_s **)(gLogObjects + 456);
          }

          else
          {
            uint64_t v38 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
          {
            uint64_t v40 = v11[2];
            *(_DWORD *)buf = 136315650;
            v106 = "_audioProductCerts_endpoint_handleMissingCertList";
            v107 = 2112;
            v108 = v40;
            v109 = 2112;
            *(void *)v110 = cf;
            _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_INFO,  "%s: %@, %@, get accInfo from connection",  buf,  0x20u);
          }

          AccessoryInfo = (const __CFString *)acc_connection_getAccessoryInfo(*v11);
        }

        uint64_t v41 = acc_accInfo_copyAccessoryInfoDescription(AccessoryInfo);
        if (gLogObjects && gNumLogObjects >= 58)
        {
          CFStringRef v42 = *(os_log_s **)(gLogObjects + 456);
        }

        else
        {
          CFStringRef v42 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
        {
          uint64_t v43 = v11[2];
          *(_DWORD *)buf = 136315906;
          v106 = "_audioProductCerts_endpoint_handleMissingCertList";
          v107 = 2112;
          v108 = v43;
          v109 = 2112;
          *(void *)v110 = cf;
          *(_WORD *)&v110[8] = 2112;
          *(void *)&v110[10] = v41;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "%s: %@, %@, accInfo %@", buf, 0x2Au);
        }

        if (v41) {
          CFRelease(v41);
        }
        if (AccessoryInfo) {
          data = (uint64_t)AccessoryInfo->data;
        }
        else {
          data = 0LL;
        }
        acc_platform_audioProductCerts_processAudioProductCerts( v11[1],  v11[2],  data,  a1[3],  *((unsigned __int8 *)a1 + 9));
        if (gLogObjects && gNumLogObjects >= 58)
        {
          uint64_t v45 = *(os_log_s **)(gLogObjects + 456);
        }

        else
        {
          uint64_t v45 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
        {
          BOOL v46 = v11[2];
          __int128 v47 = *((_DWORD *)a1 + 10);
          *(_DWORD *)buf = 136316162;
          v106 = "_audioProductCerts_endpoint_handleMissingCertList";
          v107 = 2112;
          v108 = v46;
          v109 = 2112;
          *(void *)v110 = cf;
          *(_WORD *)&v110[8] = 1024;
          *(_DWORD *)&v110[10] = v47;
          *(_WORD *)&v110[14] = 1024;
          *(_DWORD *)&v110[16] = 6;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "%s: %@, %@, state %d -> %d", buf, 0x2Cu);
        }

        *((_DWORD *)a1 + 10) = 6;
        return 1LL;
      }

      if (v30)
      {
        int v31 = *(os_log_s **)(gLogObjects + 456);
      }

      else
      {
        int v31 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
        return 1LL;
      }
      uint64_t v35 = *(void *)(*a1 + 16);
      *(_DWORD *)buf = 136315394;
      v106 = "_audioProductCerts_endpoint_handleMissingCertList";
      v107 = 2112;
      v108 = v35;
      __int16 v34 = "%s: %@, skip notifying of audioProductCert";
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 58)
      {
        int v31 = *(os_log_s **)(gLogObjects + 456);
      }

      else
      {
        int v31 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
        return 1LL;
      }
      uint64_t v33 = *(void *)(*a1 + 16);
      *(_DWORD *)buf = 136315394;
      v106 = "_audioProductCerts_endpoint_handleMissingCertList";
      v107 = 2112;
      v108 = v33;
      __int16 v34 = "%s: %@, No Valid Certs! skip notifying of audioProductCert";
    }

    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, v34, buf, 0x16u);
    return 1LL;
  }

  v97 = (os_log_s *)logObjectForModule_8();
  uint64_t result = os_log_type_enabled(v97, OS_LOG_TYPE_ERROR);
  if (result)
  {
    _audioProductCerts_endpoint_handleMissingCertList_cold_15(v97, v98, v99, v100, v101, v102, v103, v104);
    return 0LL;
  }

  return result;
}

  if (gLogObjects && gNumLogObjects >= 6)
  {
    BOOL v18 = (os_log_s *)*(id *)(gLogObjects + 40);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v18 = (os_log_s *)&_os_log_default;
    uint64_t v19 = &_os_log_default;
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    CFIndex v20 = NSStringFromProtocol(v6);
    int v21 = objc_claimAutoreleasedReturnValue(v20);
    unsigned int v22 = (void *)v21;
    __int16 v23 = "NO";
    if (v4) {
      __int16 v23 = "YES";
    }
    __int16 v25 = 138412546;
    unsigned int v26 = v21;
    uint64_t v27 = 2080;
    uint64_t v28 = v23;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Couldn't find a platform/transport plugin conforming to protocol: %@ (fallbackToTransportPlugins: %s)",  (uint8_t *)&v25,  0x16u);
  }

  BOOL v17 = 0LL;
LABEL_49:

  return v17;
}

    CFStringRef v16 = 0;
    goto LABEL_23;
  }

  -[ACCPlatformLocationManager setEndpointUUID:](self, "setEndpointUUID:", 0LL);
  -[ACCPlatformLocationManager setSupportedNMEASentencesArray:](self, "setSupportedNMEASentencesArray:", 0LL);
  -[ACCPlatformLocationManager setSupportedNMEASentenceMask:](self, "setSupportedNMEASentenceMask:", 0LL);
  -[ACCPlatformLocationManager setBLocationStarted:](self, "setBLocationStarted:", 0LL);
  -[ACCPlatformLocationManager setPNMEAFilterList:](self, "setPNMEAFilterList:", 0LL);
  -[ACCPlatformLocationManager setSupportedNMEASentenceMask:](self, "setSupportedNMEASentenceMask:", 0LL);
  -[ACCPlatformLocationManager setMinNMEAIntervalMs:](self, "setMinNMEAIntervalMs:", 250LL);
  -[ACCPlatformLocationManager setBNMEAFilterListNew:](self, "setBNMEAFilterListNew:", 0LL);
  if (gLogObjects && gNumLogObjects >= 8)
  {
    __int16 v12 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v12 = (os_log_s *)&_os_log_default;
    int v13 = &_os_log_default;
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = -[ACCPlatformLocationManager supportedNMEASentenceMask](self, "supportedNMEASentenceMask");
    int v15 = -[ACCPlatformLocationManager bLocationStarted](self, "bLocationStarted");
    __int16 v25 = 138412802;
    unsigned int v26 = v4;
    uint64_t v27 = 1024;
    *(_DWORD *)uint64_t v28 = v14;
    *(_WORD *)&v28[4] = 1024;
    *(_DWORD *)&v28[6] = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[#Location] resetting Location state for all endpoints. resetLocationEndpointUUID:%@ supportedNMEASentencesMask: % u, self.bLocationStarted: %d",  (uint8_t *)&v25,  0x18u);
  }

  CFStringRef v16 = 1;
LABEL_23:

  if (gLogObjects && gNumLogObjects >= 8)
  {
    BOOL v17 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v17 = (os_log_s *)&_os_log_default;
    BOOL v18 = &_os_log_default;
  }

  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v25 = 138412546;
    unsigned int v26 = v4;
    uint64_t v27 = 1024;
    *(_DWORD *)uint64_t v28 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "[#Location] resetLocationEndpointUUID: %@, result %d",  (uint8_t *)&v25,  0x12u);
  }

  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(-[ACCPlatformLocationManager accessLock](self, "accessLock"));
  [v19 unlock];

  return v16;
}

        uint64_t v27 = *(void *)(v7 + 216);
        if (*(_DWORD *)(v27 + 8) > ParamID) {
          ++*(_DWORD *)(*(void *)v27 + 4LL * ParamID);
        }
        break;
      case 0xCu:
        int v10 = (CFStringRef *)(v7 + 80);
        CFTypeID v9 = *(const void **)(v7 + 80);
        if (!v9) {
          goto LABEL_6;
        }
        goto LABEL_5;
      case 0xDu:
        *(void *)buf = 0xAAAAAAAAAAAAAAAALL;
        int v36 = iap2_identification_processStringParam(v7, a3, (CFStringRef *)buf);
        if (v36)
        {
          _addRejectParam(v7, 13, 8u);
        }

        else
        {
          CFMutableArrayRef Mutable = *(const __CFSet **)(v7 + 88);
          if (!Mutable)
          {
            CFMutableArrayRef Mutable = CFSetCreateMutable(kCFAllocatorDefault, 1LL, &kCFTypeSetCallBacks);
            *(void *)(v7 + 8_Block_object_dispose(va, 8) = Mutable;
          }

          if (CFSetContainsValue(Mutable, *(const void **)buf))
          {
            _addRejectParam(v7, 13, 4u);
            int v36 = 1;
          }

          else
          {
            CFSetAddValue(*(CFMutableSetRef *)(v7 + 88), *(const void **)buf);
          }

          if (*(void *)buf) {
            CFRelease(*(CFTypeRef *)buf);
          }
        }

        goto LABEL_38;
      case 0xEu:
        uint64_t v19 = (uint64_t (*)(uint64_t, unsigned __int16 *, unsigned __int16 *, uint64_t))cbIdentificationInfoSerialTransportComponentParams;
        CFIndex v20 = a1;
        int v21 = (_BYTE *)v7;
        unsigned int v22 = a2;
        __int16 v23 = a3;
        int v24 = 0;
        goto LABEL_36;
      case 0xFu:
        uint64_t v19 = (uint64_t (*)(uint64_t, unsigned __int16 *, unsigned __int16 *, uint64_t))cbIdentificationInfoUSBDeviceTransportComponentParams;
        CFIndex v20 = a1;
        int v21 = (_BYTE *)v7;
        unsigned int v22 = a2;
        __int16 v23 = a3;
        int v24 = 1;
        goto LABEL_36;
      case 0x10u:
        uint64_t v19 = (uint64_t (*)(uint64_t, unsigned __int16 *, unsigned __int16 *, uint64_t))cbIdentificationInfoUSBHostTransportComponentParams;
        CFIndex v20 = a1;
        int v21 = (_BYTE *)v7;
        unsigned int v22 = a2;
        __int16 v23 = a3;
        int v24 = 2;
        goto LABEL_36;
      case 0x11u:
        uint64_t v19 = (uint64_t (*)(uint64_t, unsigned __int16 *, unsigned __int16 *, uint64_t))cbIdentificationInfoBluetoothTransportComponentParams;
        CFIndex v20 = a1;
        int v21 = (_BYTE *)v7;
        unsigned int v22 = a2;
        __int16 v23 = a3;
        int v24 = 3;
        goto LABEL_36;
      case 0x13u:
        __int16 v25 = v7;
        unsigned int v26 = 19;
        goto LABEL_48;
      case 0x18u:
        uint64_t v19 = (uint64_t (*)(uint64_t, unsigned __int16 *, unsigned __int16 *, uint64_t))cbIdentificationInfoWirelessCarPlayTransportComponentParams;
        CFIndex v20 = a1;
        int v21 = (_BYTE *)v7;
        unsigned int v22 = a2;
        __int16 v23 = a3;
        int v24 = 4;
        goto LABEL_36;
      case 0x1Au:
        uint64_t v19 = (uint64_t (*)(uint64_t, unsigned __int16 *, unsigned __int16 *, uint64_t))cbIdentificationInfoBluetoothLETransportComponentParams;
        CFIndex v20 = a1;
        int v21 = (_BYTE *)v7;
        unsigned int v22 = a2;
        __int16 v23 = a3;
        int v24 = 5;
LABEL_36:
        uint64_t v11 = iap2_identification_parseTransportComponent(v20, v21, v22, v23, v24, v19);
        goto LABEL_37;
      case 0x22u:
        int v10 = (CFStringRef *)(v7 + 64);
        CFTypeID v9 = *(const void **)(v7 + 64);
        if (v9)
        {
LABEL_5:
          CFRelease(v9);
          os_log_s *v10 = 0LL;
        }

  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_artistPersistentID));
  -[NSMutableDictionary setObject:forKey:]( v3,  "setObject:forKey:",  v19,  @"ACCMediaLibraryUpdateItemArtistPersistentID");

  validMask = self->_validMask;
  if ((validMask & 0x1000) == 0)
  {
LABEL_14:
    if ((validMask & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }

  a3->var10 = self->_albumDiscNumber;
  a3->var0 |= 0x200u;
  if ((validMask & 0x400) == 0)
  {
LABEL_12:
    if ((validMask & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_40;
  }

          if (iAP2LinkIsNoRetransmit(a1 + 410))
          {
            ++*(_DWORD *)(a1 + 560);
            iAP2LinkSendRST(a1);
            goto LABEL_48;
          }

          if (v11 <= *(unsigned __int8 *)(a1 + 411))
          {
            if (!iAP2PacketRequireACK((uint64_t *)a2))
            {
              IsACKOnly = iAP2PacketIsACKOnly(a2);
              goto LABEL_42;
            }

            if ((_IsReceivedPacket(a1, a2) & 1) == 0)
            {
              ++*(_DWORD *)(a1 + 560);
              _AddRecvPckItem(a1, a2);
              if (*(unsigned __int8 *)(a1 + 194) == 255)
              {
                IsACKOnly = 0;
                *(_BYTE *)(a1 + 194) = iAP2TimeCallbackAfter(*(void *)(a1 + 200), 13, *(unsigned __int16 *)(a1 + 418));
                goto LABEL_42;
              }
            }

            goto LABEL_63;
          }

          goto LABEL_70;
        }
      }
    }

    IsACKOnly = 1;
LABEL_42:
    if ((v5[4] & 0x40) != 0)
    {
      __int16 v23 = iAP2PacketCalcSeqGap(*(_BYTE *)(a1 + 189), v5[6]);
      int v24 = *(_BYTE *)(a1 + 212);
      if ((v24 & 2) == 0 || (v23 & 0x80000000) == 0)
      {
        *(_BYTE *)(a1 + 189) = v5[6];
        *(_BYTE *)(a1 + 212) = v24 | 2;
        _CleanupAckedPackets(a1);
      }
    }

    if (!IsACKOnly || (iAP2LinkProcessInOrderPacket(a1, a2) & 1) != 0) {
      goto LABEL_49;
    }
    goto LABEL_48;
  }

  if ((_iAP2LogEnableMask & 1) != 0)
  {
    if (gLogObjects && gNumLogObjects >= 20)
    {
      char v7 = *(os_log_s **)(gLogObjects + 152);
    }

    else
    {
      char v7 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      CFIndex v20 = v5[5];
      int v21 = *(unsigned __int16 *)(a2 + 54);
      *(_DWORD *)buf = 67109376;
      __int16 v34 = v20;
      uint64_t v35 = 1024;
      int v36 = v21;
      BOOL v17 = "ERROR: Packet seq:0x%x length:%d received while link state = SUSPEND !";
      BOOL v18 = v7;
      uint64_t v19 = 14;
      goto LABEL_28;
    }
  }

          __int16 v12 = uint_public_value;
          goto LABEL_36;
        }

        int v21 = &a5[((unint64_t)(cczp_bitlen((uint64_t)a2) + 7) >> 3) + 1];
        unsigned int v22 = &a6[*a2];
        __int16 v23 = cczp_bitlen((uint64_t)a2);
        __int16 v12 = ccn_read_uint_public_value(v11, v22, (unint64_t)(v23 + 7) >> 3, v21);
        if (!(_DWORD)v12)
        {
          if (a3 != 2 || (a6[*a2] & 1LL) == (*a5 & 1))
          {
LABEL_35:
            __int16 v12 = 0LL;
            goto LABEL_36;
          }

          __int16 v12 = 4294967125LL;
        }
      }

LABEL_35:
LABEL_36:
}

        uint64_t v19 = v11;
        goto LABEL_36;
      }

      *(_DWORD *)buf = -1431655766;
      unsigned int ParamValueLen = iAP2MsgGetParamValueLen(NextParam);
      int v15 = ParamValueLen;
      *(_DWORD *)buf = (ParamValueLen & 7) != 0LL;
      if ((ParamValueLen & 7) != 0)
      {
        int v31 = (os_log_s *)logObjectForModule_1(30);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
          iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_3(a2);
        }
        goto LABEL_55;
      }

      CFStringRef v16 = ParamValueLen;
      DataAsData = iAP2MsgGetDataAsData((uint64_t)NextParam, buf);
      BOOL v18 = (uint64_t *)malloc(v15);
      uint64_t v19 = v18;
      if (v16)
      {
        CFIndex v20 = 0LL;
        do
        {
          v18[v20] = bswap64(*(void *)(DataAsData + v20 * 8));
          ++v20;
        }

        while ((v20 * 8) < v16);
      }

      if (v11) {
        free(v11);
      }
      uint64_t v35 = v15 >> 3;
LABEL_36:
      NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
      uint64_t v11 = v19;
      if (!NextParam) {
        goto LABEL_39;
      }
    }

    *(_DWORD *)buf = -1431655766;
    DataAsU32 = iAP2MsgGetDataAsU32(NextParam, buf);
    if (*(_DWORD *)buf)
    {
      uint64_t v33 = (os_log_s *)logObjectForModule_1(30);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
        iap2_mediaLibrary_startMediaLibraryUpdatesHandler_cold_4(a2);
      }
      goto LABEL_55;
    }

    int v10 = DataAsU32;
    goto LABEL_35;
  }

  uint64_t v19 = 0LL;
  LODWORD(v35) = 0;
  int v10 = 0LL;
  CFTypeID v9 = 0LL;
LABEL_39:
  if (gLogObjects && gNumLogObjects >= 21)
  {
    uint64_t v27 = *(os_log_s **)(gLogObjects + 160);
  }

  else
  {
    uint64_t v27 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
  {
    uint64_t v28 = "(nil)";
    if (v9) {
      uint64_t v28 = v9;
    }
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)int v37 = v35;
    *(_WORD *)&v37[4] = 2080;
    *(void *)&v37[6] = v28;
    _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_INFO,  "PlayMediaLibraryItems: itemPersistentIDCount=%d libraryUID=%s",  buf,  0x12u);
  }

  if (!v19 || !(_DWORD)v35 || !v9)
  {
    uint64_t v11 = v19;
    goto LABEL_55;
  }

  uint64_t v29 = (__CFString *)CFStringCreateWithCString(kCFAllocatorDefault, v9, 0x8000100u);
  platform_mediaLibrary_playItems(*(void **)(v34 + 8), v29, v19, v35, v10);
  if (v29) {
    CFRelease(v29);
  }
  int v30 = 1LL;
LABEL_56:
  free(v19);
  return v30;
}

  CFStringRef v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  self->_albumTrackCount));
  -[NSMutableDictionary setObject:forKey:]( v3,  "setObject:forKey:",  v16,  @"ACCMediaLibraryUpdateItemAlbumTrackCount");

  validMask = self->_validMask;
  if ((validMask & 0x200) == 0)
  {
LABEL_11:
    if ((validMask & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }

LABEL_27:
}
}

    if (gLogObjects && gNumLogObjects >= 8)
    {
      CFStringRef v16 = (os_log_s *)*(id *)(gLogObjects + 56);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      CFStringRef v16 = (os_log_s *)&_os_log_default;
      BOOL v17 = &_os_log_default;
    }

    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136316418;
      uint64_t v40 = "platform_power_sendPowerUpdate";
      uint64_t v41 = 2112;
      *(void *)CFStringRef v42 = a1;
      *(_WORD *)&v42[8] = 1024;
      *(_DWORD *)&v42[10] = 0;
      uint64_t v43 = 1024;
      int v44 = a4;
      uint64_t v45 = 1024;
      BOOL v46 = a3;
      __int128 v47 = 1024;
      __int128 v48 = a5;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "[#Power] %s: endpoint: %@, updateType: %d -> %d, updateValue: %u -> %d",  buf,  0x2Eu);
    }

    if (gLogObjects && gNumLogObjects >= 8)
    {
      int v13 = (os_log_s *)*(id *)(gLogObjects + 56);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v13 = (os_log_s *)&_os_log_default;
      BOOL v18 = &_os_log_default;
    }

    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136316418;
      uint64_t v40 = "platform_power_sendPowerUpdate";
      uint64_t v41 = 2112;
      *(void *)CFStringRef v42 = a1;
      *(_WORD *)&v42[8] = 1024;
      *(_DWORD *)&v42[10] = a4;
      uint64_t v43 = 1024;
      int v44 = 13;
      uint64_t v45 = 1024;
      BOOL v46 = a5;
      __int128 v47 = 1024;
      __int128 v48 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "[#Power] %s: endpoint: %@, updateType2: %d -> %d, updateValue2: %u -> %d",  buf,  0x2Eu);
    }

  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(LocalCenter, 0LL, @"ACCPlatformApplicationFirstUnlockNotification", 0LL);
}

LABEL_16:
    v7[2](v7, 0LL, v8);
    goto LABEL_17;
  }

  if (*((_DWORD *)EndpointWithUUID + 7) != 14)
  {
    if (gLogObjects && gNumLogObjects >= 9)
    {
      uint64_t v11 = (os_log_s *)*(id *)(gLogObjects + 64);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v11 = (os_log_s *)&_os_log_default;
      __int16 v12 = &_os_log_default;
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_getPublicNvmKeyValues_cold_1(v10);
    }

    goto LABEL_16;
  }

  mfi4Auth_endpoint_getPublicNvmKeyValues(*((void *)EndpointWithUUID + 7), a3, (uint64_t)v7);
LABEL_17:
}

  if (iap2_identification_isIdentifiedForFeature((const __CFSet *)a3, 0x18u))
  {
    uint64_t v11 = self->_eaAccessoryCapabilities;
    if ((v11 & 0x400) != 0) {
      self->_eaAccessoryCapabilities = v11 | 0x40000;
    }
  }

  -[ACCExternalAccessory _addiAP2VehicleInfo:](self, "_addiAP2VehicleInfo:", a3);
}

  *a3 = 1;
}

          _addRejectParam(a2, a3, 2u);
          uint64_t result = 1LL;
          *(_BYTE *)(a2 + 131) = 1;
          break;
        case 26:
          return result;
        default:
          if (gLogObjects && gNumLogObjects >= 26)
          {
            uint64_t v11 = *(os_log_s **)(gLogObjects + 200);
          }

          else
          {
            uint64_t v11 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          uint64_t result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
          iap2_identification_checkRequiredTransportComponentParam_cold_1();
LABEL_32:
          uint64_t result = 0LL;
          break;
      }
    }
  }

  return result;
}

  a3->var4 = self->_geniusMix;
  a3->var0 |= 8u;
  if ((validMask & 0x10) == 0)
  {
LABEL_16:
    if ((validMask & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }

      DeviceNonceSignature = platform_auth_createDeviceNonceSignature(v32[3]);
      v28[3] = DeviceNonceSignature;
      __int16 v23 = *(dispatch_queue_s **)(v25 + 24);
      block[0] = _NSConcreteStackBlock;
      block[1] = 0x40000000LL;
      block[2] = __iap2_deviceAuthentication_RequestDeviceChallengeResponse_block_invoke;
      block[3] = &unk_1001FE948;
      block[4] = &v27;
      block[5] = &v31;
      void block[6] = v25;
      dispatch_async(v23, block);
      uint64_t v2 = 1LL;
    }

    else
    {
      uint64_t v2 = 0LL;
    }
  }

  _Block_object_dispose(&v27, 8);
  _Block_object_dispose(&v31, 8);
  return v2;
}

LABEL_29:
      }

      uint64_t v19 = [v16 countByEnumeratingWithState:&v37 objects:v41 count:16];
    }

    while (v19);
  }
}

    unint64_t FirstParam = iAP2MsgGetNextParam(a2, 0LL, FirstParam);
  }

  while (FirstParam);
  if ((_DWORD)v9 == 17) {
    goto LABEL_31;
  }
  if (v8) {
    acc_manager_enableLockoutForTransportType(v9, v8);
  }
  else {
    acc_manager_disableLockoutForTransportType(v9);
  }
  return 1LL;
}
}

  if ((_DWORD)v11) {
    platform_configStream_deleteParams((const void **)a2);
  }
  return v11;
}

      uint64_t v19 = 0LL;
      uint64_t v2 = 0LL;
      if (!v8) {
        goto LABEL_31;
      }
LABEL_30:
      CFRelease(v8);
      uint64_t v2 = v19;
    }

    else
    {
      uint64_t v2 = 0LL;
    }
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  LOBYTE(self->_type)));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v11, @"ACCMediaLibraryUpdateItemType");

  validMask = self->_validMask;
  if ((validMask & 8) == 0)
  {
LABEL_5:
    if ((validMask & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_31;
  }

  a3->var3 = self->_type;
  a3->var0 |= 4u;
  if ((validMask & 8) == 0)
  {
LABEL_5:
    if ((validMask & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_31;
  }

  a3->var6 = self->_contentStyle;
  a3->var0 |= 0x20u;
  if ((validMask & 0x40) == 0)
  {
LABEL_18:
    if ((validMask & 0x100) == 0) {
      goto LABEL_19;
    }
    goto LABEL_31;
  }

void OUTLINED_FUNCTION_7_2( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

void OUTLINED_FUNCTION_10( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void OUTLINED_FUNCTION_12( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void OUTLINED_FUNCTION_14( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

uint64_t OUTLINED_FUNCTION_15()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_16(uint64_t a1, uint64_t a2)
{
  return a2;
}

  ;
}

uint64_t OUTLINED_FUNCTION_18()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_19()
{
  return v0;
}

CFStringRef *acc_manager_newConnection(unsigned int a1, const void *a2, const void *a3)
{
  if (gLogObjects) {
    BOOL v6 = gNumLogObjects < 15;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    char v7 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    char v7 = *(os_log_s **)(gLogObjects + 112);
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v19) = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Create new connection, connectionType %{coreacc:ACCConnection_Type_t}d.",  buf,  8u);
  }

  uint64_t v8 = acc_connection_create(a1, a2, a3);
  BOOL v17 = v8;
  if (v8)
  {
    _tryWRLock((uint64_t)"_addConnection", 1509);
    if (_initSharedManager_onceToken != -1) {
      dispatch_once(&_initSharedManager_onceToken, &__block_literal_global_4);
    }
    if (_gSharedManager[0])
    {
      if (!CFDictionaryGetValueIfPresent((CFDictionaryRef)_gSharedManager[0], *v8, 0LL))
      {
        CFDictionaryAddValue((CFMutableDictionaryRef)_gSharedManager[0], *v8, v8);
        CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)_gSharedManager[0]);
        if (Count == 1 && systemInfo_getCurrentUnixTime() - qword_10021BB58 >= 0x3C)
        {
          if (gLogObjects && gNumLogObjects >= 13)
          {
            int v10 = *(os_log_s **)(gLogObjects + 96);
          }

          else
          {
            int v10 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v19) = 60;
            _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Exceeded %d seconds since last accessory connection!",  buf,  8u);
          }

          if (qword_10021BB50)
          {
            CFRelease((CFTypeRef)qword_10021BB50);
            qword_10021BB50 = 0LL;
          }

          qword_10021BB50 = (uint64_t)CFCreateUUIDString();
          if (gLogObjects && gNumLogObjects >= 13)
          {
            uint64_t v11 = *(os_log_s **)(gLogObjects + 96);
          }

          else
          {
            uint64_t v11 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            uint64_t v19 = qword_10021BB50;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Reset device UUID: %@", buf, 0xCu);
          }
        }

        pthread_rwlock_unlock(&_gAccManagerLock);
        pthread_rwlock_rdlock(&_gAccManagerLock);
        if (platform_transactions_connectionTypeRequiresTransaction(*((_DWORD *)v8 + 2))) {
          platform_transactions_accessoryConnected((void *)*v8);
        }
        if (gLogObjects && gNumLogObjects >= 13)
        {
          __int16 v12 = *(os_log_s **)(gLogObjects + 96);
        }

        else
        {
          __int16 v12 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          CFStringRef v13 = *v8;
          *(_DWORD *)buf = 138412290;
          uint64_t v19 = (uint64_t)v13;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Added accessory connection: %@",  buf,  0xCu);
        }

        if (gLogObjects && gNumLogObjects >= 13)
        {
          int v14 = *(os_log_s **)(gLogObjects + 96);
        }

        else
        {
          int v14 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          uint64_t v19 = Count;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "There are now %ld accessory connection(s).",  buf,  0xCu);
        }

        pthread_rwlock_unlock(&_gAccManagerLock);
        return v8;
      }
    }

    else
    {
      CFStringRef v16 = (os_log_s *)logObjectForModule_1(12);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "accessoryConnections = null!", buf, 2u);
      }
    }

    pthread_rwlock_unlock(&_gAccManagerLock);
    acc_connection_destroy((uint64_t)&v17);
    return v17;
  }

  return v8;
}

void *acc_manager_newEndpointForConnection(CFIndex *a1, unsigned int a2, unsigned int a3, const void *a4)
{
  if (gLogObjects) {
    BOOL v8 = gNumLogObjects < 15;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    CFTypeID v9 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    CFTypeID v9 = *(os_log_s **)(gLogObjects + 112);
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    CFIndex v10 = *a1;
    *(_DWORD *)buf = 138412802;
    CFIndex v23 = v10;
    __int16 v24 = 1024;
    unsigned int v25 = a2;
    __int16 v26 = 1024;
    int v27 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Create new endpoint for connection %@, transport %{coreacc:ACCEndpoint_TransportType_t}d, protocol %{coreacc:ACCEn dpoint_Protocol_t}d.",  buf,  0x18u);
  }

  uint64_t v11 = acc_endpoint_create((uint64_t)a1, a2, a3, a4);
  int v21 = v11;
  if (v11)
  {
    _tryWRLock((uint64_t)"_addEndpoint", 1565);
    if (_initSharedManager_onceToken != -1) {
      dispatch_once(&_initSharedManager_onceToken, &__block_literal_global_4);
    }
    if (qword_10021BB48)
    {
      if (!CFDictionaryGetValueIfPresent((CFDictionaryRef)qword_10021BB48, *((const void **)v11 + 2), 0LL))
      {
        CFDictionaryAddValue((CFMutableDictionaryRef)qword_10021BB48, *((const void **)v11 + 2), v11);
        pthread_rwlock_unlock(&_gAccManagerLock);
        if (platform_sleepAssertion_endpointProtocolAllowsAssertion(*((_DWORD *)v11 + 7))
          && platform_sleepAssertion_connectionTypeAllowsAssertion(*(_DWORD *)(*(void *)v11 + 8LL)))
        {
          platform_sleepAssertion_create(*((void *)v11 + 1));
        }

        pthread_rwlock_rdlock(&_gAccManagerLock);
        if (gLogObjects && gNumLogObjects >= 13)
        {
          __int16 v12 = *(os_log_s **)(gLogObjects + 96);
        }

        else
        {
          __int16 v12 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          CFIndex v13 = *((void *)v11 + 2);
          *(_DWORD *)buf = 138412290;
          CFIndex v23 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Added connection endpoint: %@",  buf,  0xCu);
        }

        if (gLogObjects && gNumLogObjects >= 13)
        {
          int v14 = *(os_log_s **)(gLogObjects + 96);
        }

        else
        {
          int v14 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)qword_10021BB48);
          *(_DWORD *)buf = 134217984;
          CFIndex v23 = Count;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "There are now %ld endpoint(s).", buf, 0xCu);
        }

        pthread_rwlock_unlock(&_gAccManagerLock);
        if (a3 == 1 && acc_connection_isPublished((BOOL)a1))
        {
          if (gLogObjects && gNumLogObjects >= 15)
          {
            CFStringRef v16 = *(os_log_s **)(gLogObjects + 112);
          }

          else
          {
            CFStringRef v16 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            CFIndex v17 = *a1;
            unsigned int v18 = *((_DWORD *)v11 + 7);
            *(_DWORD *)buf = 138412802;
            CFIndex v23 = v17;
            __int16 v24 = 1024;
            unsigned int v25 = v18;
            __int16 v26 = 1024;
            int v27 = 1;
            _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "Connection %@ already published, publish endpoint of protocol %{coreacc:ACCEndpoint_Protocol_t}d /  %{core acc:ACCEndpoint_Protocol_t}d.",  buf,  0x18u);
          }

          acc_endpoint_publish((uint64_t)v11);
        }

        return v11;
      }
    }

    else
    {
      CFIndex v20 = (os_log_s *)logObjectForModule_1(12);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "connectionEndpoints = null!", buf, 2u);
      }
    }

    pthread_rwlock_unlock(&_gAccManagerLock);
    acc_endpoint_destroy(&v21);
    return v21;
  }

  return v11;
}

void *acc_manager_newEndpointForConnectionWithUUID( const void *a1, unsigned int a2, unsigned int a3, const void *a4)
{
  ConnectionWithUUID = (CFIndex *)acc_manager_getConnectionWithUUID(a1);
  return acc_manager_newEndpointForConnection(ConnectionWithUUID, a2, a3, a4);
}

const void *acc_manager_getConnectionWithUUID(const void *Value)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 13;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    BOOL v3 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    BOOL v3 = *(os_log_s **)(gLogObjects + 96);
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    acc_manager_getConnectionWithUUID_cold_1();
  }
  pthread_rwlock_rdlock(&_gAccManagerLock);
  if (Value)
  {
    if (_gSharedManager) {
      Value = CFDictionaryGetValue((CFDictionaryRef)_gSharedManager, Value);
    }
    else {
      Value = 0LL;
    }
  }

  pthread_rwlock_unlock(&_gAccManagerLock);
  return Value;
}

uint64_t acc_manager_publishConnectionWithUUID(const void *a1)
{
  ConnectionWithUUID = acc_manager_getConnectionWithUUID(a1);
  return acc_connection_publish((uint64_t)ConnectionWithUUID);
}

void _tryWRLock(uint64_t a1, int a2)
{
  int v4 = pthread_rwlock_trywrlock(&_gAccManagerLock);
  if (v4 == 16)
  {
    int v5 = 0;
    do
    {
      ++v5;
      usleep(0x1388u);
      int v6 = pthread_rwlock_trywrlock(&_gAccManagerLock);
    }

    while (v6 == 16);
    int v7 = v6;
  }

  else
  {
    int v7 = v4;
    int v5 = 0;
  }

  if (v5 | v7)
  {
    if (gLogObjects) {
      BOOL v8 = gNumLogObjects <= 12;
    }
    else {
      BOOL v8 = 1;
    }
    int v9 = !v8;
    if (v7)
    {
      if (v9)
      {
        CFIndex v10 = *(os_log_s **)(gLogObjects + 96);
      }

      else
      {
        CFIndex v10 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      {
        int v12 = 136316162;
        CFIndex v13 = "_tryWRLock";
        __int16 v14 = 2080;
        uint64_t v15 = a1;
        __int16 v16 = 1024;
        int v17 = a2;
        __int16 v18 = 1024;
        int v19 = v5;
        __int16 v20 = 1024;
        int v21 = v7;
        _os_log_fault_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%s: %s:%d tryCount %d, err %d ",  (uint8_t *)&v12,  0x28u);
      }
    }

    else
    {
      if (v9)
      {
        uint64_t v11 = *(os_log_s **)(gLogObjects + 96);
      }

      else
      {
        uint64_t v11 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        int v12 = 136316162;
        CFIndex v13 = "_tryWRLock";
        __int16 v14 = 2080;
        uint64_t v15 = a1;
        __int16 v16 = 1024;
        int v17 = a2;
        __int16 v18 = 1024;
        int v19 = v5;
        __int16 v20 = 1024;
        int v21 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s: %s:%d tryCount %d, err %d ",  (uint8_t *)&v12,  0x28u);
      }
    }
  }

CFSetRef acc_manager_removeConnectionWithUUID(void *a1)
{
  if (!a1) {
    goto LABEL_48;
  }
  if (!_gSharedManager[0])
  {
    __int16 v14 = (os_log_s *)logObjectForModule_1(12);
    Value = 0LL;
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_42;
    }
    *(_WORD *)buf = 0;
    uint64_t v15 = "accessoryConnections = null!";
    __int16 v16 = v14;
    uint32_t v17 = 2;
    goto LABEL_47;
  }

  Value = (const __CFSet *)CFDictionaryGetValue((CFDictionaryRef)_gSharedManager[0], a1);
  int v19 = Value;
  if (!Value)
  {
    __int16 v18 = (os_log_s *)logObjectForModule_1(12);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_42;
    }
    *(_DWORD *)buf = 138412290;
    CFIndex v21 = (CFIndex)a1;
    uint64_t v15 = "No connection for %@!";
    __int16 v16 = v18;
    uint32_t v17 = 12;
LABEL_47:
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, buf, v17);
LABEL_48:
    Value = 0LL;
    goto LABEL_42;
  }

  if (gLogObjects && gNumLogObjects >= 13)
  {
    BOOL v3 = *(os_log_s **)(gLogObjects + 96);
  }

  else
  {
    BOOL v3 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    CFIndex v4 = *(void *)Value;
    *(_DWORD *)buf = 138412290;
    CFIndex v21 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Removing accessory connection: %@...",  buf,  0xCu);
  }

  CFDictionaryRemoveValue((CFMutableDictionaryRef)_gSharedManager[0], a1);
  if (qword_10021BB48)
  {
    CFSetRef v5 = acc_connection_copyEndpointUUIDs(Value);
    if (v5)
    {
      int v6 = v5;
      if (gLogObjects && gNumLogObjects >= 13)
      {
        int v7 = *(os_log_s **)(gLogObjects + 96);
      }

      else
      {
        int v7 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        CFIndex Count = CFSetGetCount(v6);
        *(_DWORD *)buf = 134218242;
        CFIndex v21 = Count;
        __int16 v22 = 2112;
        CFIndex v23 = a1;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Removing %ld endpoint(s) for connection %@...",  buf,  0x16u);
      }

      CFSetApplyFunction( v6,  (CFSetApplierFunction)CFSetApplierFunction_removeValueFromMutableDictionary,  (void *)qword_10021BB48);
      CFRelease(v6);
    }
  }

  int v9 = *((_DWORD *)Value + 2);
  pthread_rwlock_unlock(&_gAccManagerLock);
  if ((platform_sleepAssertion_connectionTypeRequiresAssertion(v9) & 1) != 0
    || platform_sleepAssertion_connectionTypeAllowsAssertion(v9))
  {
    platform_sleepAssertion_destroy((uint64_t)a1);
  }

  Value = (const __CFSet *)acc_connection_destroy((uint64_t)&v19);
  _tryWRLock((uint64_t)"acc_manager_removeConnectionWithUUID", 320);
  CFIndex v10 = CFDictionaryGetCount((CFDictionaryRef)_gSharedManager[0]);
  if (gLogObjects && gNumLogObjects >= 13)
  {
    uint64_t v11 = *(os_log_s **)(gLogObjects + 96);
  }

  else
  {
    uint64_t v11 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    CFIndex v21 = (CFIndex)a1;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Removed accessory connection: %@!", buf, 0xCu);
  }

  if (gLogObjects && gNumLogObjects >= 13)
  {
    int v12 = *(os_log_s **)(gLogObjects + 96);
  }

  else
  {
    int v12 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    CFIndex v21 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "There are now %ld accessory connection(s).",  buf,  0xCu);
  }

  if (v10 <= 0) {
    qword_10021BB58 = systemInfo_getCurrentUnixTime();
  }
  if (platform_transactions_connectionTypeRequiresTransaction(v9)) {
    platform_transactions_accessoryDisconnected(a1);
  }
LABEL_42:
  pthread_rwlock_unlock(&_gAccManagerLock);
  return Value;
}

const void **acc_manager_removeEndpointWithUUID(const void *a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 13;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    BOOL v3 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    BOOL v3 = *(os_log_s **)(gLogObjects + 96);
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    CFIndex v15 = (CFIndex)a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Removing connection endpoint: %@...", buf, 0xCu);
  }

  _tryWRLock((uint64_t)"acc_manager_removeEndpointWithUUID", 410);
  if (!a1) {
    goto LABEL_28;
  }
  if (!qword_10021BB48)
  {
    BOOL v8 = (os_log_s *)logObjectForModule_1(12);
    Value = 0LL;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_22;
    }
    *(_WORD *)buf = 0;
    int v9 = "connectionEndpoints = null!";
    CFIndex v10 = v8;
    uint32_t v11 = 2;
    goto LABEL_27;
  }

  Value = (const void **)CFDictionaryGetValue((CFDictionaryRef)qword_10021BB48, a1);
  CFIndex v13 = Value;
  if (!Value)
  {
    int v12 = (os_log_s *)logObjectForModule_1(12);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_22;
    }
    *(_DWORD *)buf = 138412290;
    CFIndex v15 = (CFIndex)a1;
    int v9 = "No endpoint for %@!";
    CFIndex v10 = v12;
    uint32_t v11 = 12;
LABEL_27:
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v9, buf, v11);
LABEL_28:
    Value = 0LL;
    goto LABEL_22;
  }

  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)qword_10021BB48, Value[2], 0LL)) {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10021BB48, Value[2]);
  }
  pthread_rwlock_unlock(&_gAccManagerLock);
  Value = (const void **)acc_endpoint_destroy((void **)&v13);
  pthread_rwlock_rdlock(&_gAccManagerLock);
  if (gLogObjects && gNumLogObjects >= 13)
  {
    CFSetRef v5 = *(os_log_s **)(gLogObjects + 96);
  }

  else
  {
    CFSetRef v5 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)qword_10021BB48);
    *(_DWORD *)buf = 134217984;
    CFIndex v15 = Count;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "There are now %ld endpoint(s).", buf, 0xCu);
  }

CFDictionaryRef acc_manager_copyAllEndpoints()
{
  if (_initSharedManager_onceToken != -1) {
    dispatch_once(&_initSharedManager_onceToken, &__block_literal_global_4);
  }
  if (qword_10021BB48) {
    CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, (CFDictionaryRef)qword_10021BB48);
  }
  else {
    CFDictionaryRef Copy = 0LL;
  }
  pthread_rwlock_unlock(&_gAccManagerLock);
  return Copy;
}

CFDictionaryRef acc_manager_copyAllConnections()
{
  if (_initSharedManager_onceToken != -1) {
    dispatch_once(&_initSharedManager_onceToken, &__block_literal_global_4);
  }
  if (_gSharedManager) {
    CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, (CFDictionaryRef)_gSharedManager);
  }
  else {
    CFDictionaryRef Copy = 0LL;
  }
  pthread_rwlock_unlock(&_gAccManagerLock);
  return Copy;
}

uint64_t acc_manager_iterateAllConnections( unsigned int (*a1)(void, uint64_t), uint64_t a2, int a3)
{
  if (gLogObjects) {
    BOOL v6 = gNumLogObjects < 13;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    int v7 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    int v7 = *(os_log_s **)(gLogObjects + 96);
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136316162;
    uint64_t v35 = "acc_manager_iterateAllConnections";
    __int16 v36 = 1024;
    int v37 = 522;
    __int16 v38 = 1024;
    *(_DWORD *)BOOL v39 = a1 != 0LL;
    *(_WORD *)&v39[4] = 1024;
    *(_DWORD *)&v39[6] = a2 != 0;
    LOWORD(v40) = 1024;
    *(_DWORD *)((char *)&v40 + 2) = a3;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s:%d iteratorCB %d, context %d, forWrite %d ",  buf,  0x24u);
    if (a3) {
      goto LABEL_10;
    }
  }

  else if (a3)
  {
LABEL_10:
    _tryWRLock((uint64_t)"acc_manager_iterateAllConnections", 526);
    goto LABEL_13;
  }

  pthread_rwlock_rdlock(&_gAccManagerLock);
LABEL_13:
  if (!a1) {
    goto LABEL_32;
  }
  if (!_gSharedManager[0])
  {
    __int16 v20 = (os_log_s *)logObjectForModule_1(12);
    uint64_t v19 = 0LL;
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_33;
    }
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "accessoryConnections = null!", buf, 2u);
LABEL_32:
    uint64_t v19 = 0LL;
    goto LABEL_33;
  }

  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)_gSharedManager[0]);
  if (!Count) {
    goto LABEL_32;
  }
  uint64_t v9 = Count;
  __int16 v32 = &v29;
  __chkstk_darwin();
  uint32_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  memset(v11, 170, v10);
  CFDictionaryGetKeysAndValues((CFDictionaryRef)_gSharedManager[0], 0LL, (const void **)v11);
  BOOL v33 = v9 > 0;
  if (v9 >= 1)
  {
    uint64_t v13 = 0LL;
    BOOL v31 = a2 != 0;
    *(void *)&__int128 v12 = 134218240LL;
    __int128 v29 = v12;
    *(void *)&__int128 v12 = 136316418LL;
    __int128 v30 = v12;
    do
    {
      uint64_t v14 = gLogObjects;
      int v15 = gNumLogObjects;
      if (gLogObjects) {
        BOOL v16 = gNumLogObjects < 13;
      }
      else {
        BOOL v16 = 1;
      }
      if (v16)
      {
        uint32_t v17 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = v29;
          uint64_t v35 = (const char *)v14;
          __int16 v36 = 1024;
          int v37 = v15;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          uint32_t v17 = (os_log_s *)&_os_log_default;
        }
      }

      else
      {
        uint32_t v17 = *(os_log_s **)(gLogObjects + 96);
      }

      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v18 = **(void **)&v11[8 * v13];
        *(_DWORD *)buf = v30;
        uint64_t v35 = "acc_manager_iterateAllConnections";
        __int16 v36 = 1024;
        int v37 = 547;
        __int16 v38 = 2048;
        *(void *)BOOL v39 = v13;
        *(_WORD *)&v39[8] = 2048;
        uint64_t v40 = v9;
        __int16 v41 = 2112;
        uint64_t v42 = v18;
        __int16 v43 = 1024;
        BOOL v44 = v31;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "%s:%d [%ld / %ld], call iteratorCB, %@, context %d ",  buf,  0x36u);
      }

      if (!a1(*(void *)&v11[8 * v13], a2)) {
        break;
      }
      ++v13;
    }

    while (v13 < v9);
  }

  uint64_t v19 = v33;
LABEL_33:
  pthread_rwlock_unlock(&_gAccManagerLock);
  if (gLogObjects && gNumLogObjects >= 13)
  {
    CFIndex v21 = *(os_log_s **)(gLogObjects + 96);
  }

  else
  {
    CFIndex v21 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
    acc_manager_iterateAllConnections_cold_1(v19, v21, v22, v23, v24, v25, v26, v27);
  }
  return v19;
}

uint64_t acc_manager_iterateAllEndpoints(unsigned int (*a1)(void, uint64_t), uint64_t a2, int a3)
{
  if (gLogObjects) {
    BOOL v6 = gNumLogObjects < 13;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    int v7 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    int v7 = *(os_log_s **)(gLogObjects + 96);
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136316162;
    uint64_t v35 = "acc_manager_iterateAllEndpoints";
    __int16 v36 = 1024;
    int v37 = 567;
    __int16 v38 = 1024;
    *(_DWORD *)BOOL v39 = a1 != 0LL;
    *(_WORD *)&v39[4] = 1024;
    *(_DWORD *)&v39[6] = a2 != 0;
    LOWORD(v40) = 1024;
    *(_DWORD *)((char *)&v40 + 2) = a3;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s:%d iteratorCB %d, context %d, forWrite %d ",  buf,  0x24u);
    if (a3) {
      goto LABEL_10;
    }
  }

  else if (a3)
  {
LABEL_10:
    _tryWRLock((uint64_t)"acc_manager_iterateAllEndpoints", 571);
    goto LABEL_13;
  }

  pthread_rwlock_rdlock(&_gAccManagerLock);
LABEL_13:
  if (!a1) {
    goto LABEL_32;
  }
  if (!qword_10021BB48)
  {
    __int16 v20 = (os_log_s *)logObjectForModule_1(12);
    uint64_t v19 = 0LL;
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_33;
    }
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "connectionEndpoints = null!", buf, 2u);
LABEL_32:
    uint64_t v19 = 0LL;
    goto LABEL_33;
  }

  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)qword_10021BB48);
  if (!Count) {
    goto LABEL_32;
  }
  uint64_t v9 = Count;
  __int16 v32 = &v29;
  __chkstk_darwin();
  uint32_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  memset(v11, 170, v10);
  CFDictionaryGetKeysAndValues((CFDictionaryRef)qword_10021BB48, 0LL, (const void **)v11);
  BOOL v33 = v9 > 0;
  if (v9 >= 1)
  {
    uint64_t v13 = 0LL;
    BOOL v31 = a2 != 0;
    *(void *)&__int128 v12 = 134218240LL;
    __int128 v29 = v12;
    *(void *)&__int128 v12 = 136316418LL;
    __int128 v30 = v12;
    do
    {
      uint64_t v14 = gLogObjects;
      int v15 = gNumLogObjects;
      if (gLogObjects) {
        BOOL v16 = gNumLogObjects < 13;
      }
      else {
        BOOL v16 = 1;
      }
      if (v16)
      {
        uint32_t v17 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = v29;
          uint64_t v35 = (const char *)v14;
          __int16 v36 = 1024;
          int v37 = v15;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          uint32_t v17 = (os_log_s *)&_os_log_default;
        }
      }

      else
      {
        uint32_t v17 = *(os_log_s **)(gLogObjects + 96);
      }

      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v18 = *(void *)(*(void *)&v11[8 * v13] + 16LL);
        *(_DWORD *)buf = v30;
        uint64_t v35 = "acc_manager_iterateAllEndpoints";
        __int16 v36 = 1024;
        int v37 = 592;
        __int16 v38 = 2048;
        *(void *)BOOL v39 = v13;
        *(_WORD *)&v39[8] = 2048;
        uint64_t v40 = v9;
        __int16 v41 = 2112;
        uint64_t v42 = v18;
        __int16 v43 = 1024;
        BOOL v44 = v31;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "%s:%d [%ld / %ld], call iteratorCB, %@, context %d ",  buf,  0x36u);
      }

      if (!a1(*(void *)&v11[8 * v13], a2)) {
        break;
      }
      ++v13;
    }

    while (v13 < v9);
  }

  uint64_t v19 = v33;
LABEL_33:
  pthread_rwlock_unlock(&_gAccManagerLock);
  if (gLogObjects && gNumLogObjects >= 13)
  {
    CFIndex v21 = *(os_log_s **)(gLogObjects + 96);
  }

  else
  {
    CFIndex v21 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
    acc_manager_iterateAllEndpoints_cold_1(v19, v21, v22, v23, v24, v25, v26, v27);
  }
  return v19;
}

uint64_t acc_manager_callbackForConnection( const void *a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, int a4)
{
  if (gLogObjects) {
    BOOL v8 = gNumLogObjects < 13;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    uint64_t v9 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    uint64_t v9 = *(os_log_s **)(gLogObjects + 96);
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    int v15 = 136316418;
    BOOL v16 = "acc_manager_callbackForConnection";
    __int16 v17 = 1024;
    int v18 = 679;
    __int16 v19 = 2112;
    __int16 v20 = a1;
    __int16 v21 = 1024;
    BOOL v22 = a2 != 0LL;
    __int16 v23 = 1024;
    BOOL v24 = a3 != 0;
    __int16 v25 = 1024;
    int v26 = a4;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "%s:%d connection %@, iteratorCB %d, context %d, forWrite %d ",  (uint8_t *)&v15,  0x2Eu);
    if (a4) {
      goto LABEL_10;
    }
LABEL_12:
    pthread_rwlock_rdlock(&_gAccManagerLock);
    goto LABEL_13;
  }

  if (!a4) {
    goto LABEL_12;
  }
LABEL_10:
  _tryWRLock((uint64_t)"acc_manager_callbackForConnection", 683);
LABEL_13:
  uint64_t Value = 0LL;
  if (a1 && a2)
  {
    if (_gSharedManager[0])
    {
      uint64_t Value = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)_gSharedManager[0], a1);
      if (Value)
      {
        if (gLogObjects && gNumLogObjects >= 13)
        {
          uint32_t v11 = *(os_log_s **)(gLogObjects + 96);
        }

        else
        {
          uint32_t v11 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
          acc_manager_callbackForConnection_cold_3();
        }
        a2(Value, a3);
        uint64_t Value = 1LL;
      }
    }

    else
    {
      uint64_t v14 = (os_log_s *)logObjectForModule_1(12);
      uint64_t Value = 0LL;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v15) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "accessoryConnections = null!",  (uint8_t *)&v15,  2u);
        uint64_t Value = 0LL;
      }
    }
  }

  pthread_rwlock_unlock(&_gAccManagerLock);
  if (gLogObjects && gNumLogObjects >= 13)
  {
    __int128 v12 = *(os_log_s **)(gLogObjects + 96);
  }

  else
  {
    __int128 v12 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
    acc_manager_callbackForConnection_cold_1();
  }
  return Value;
}

uint64_t acc_manager_callbackForEndpoint( const void *a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, int a4)
{
  if (gLogObjects) {
    BOOL v8 = gNumLogObjects < 13;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    uint64_t v9 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    uint64_t v9 = *(os_log_s **)(gLogObjects + 96);
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    int v15 = 136316418;
    BOOL v16 = "acc_manager_callbackForEndpoint";
    __int16 v17 = 1024;
    int v18 = 723;
    __int16 v19 = 2112;
    __int16 v20 = a1;
    __int16 v21 = 1024;
    BOOL v22 = a2 != 0LL;
    __int16 v23 = 1024;
    BOOL v24 = a3 != 0;
    __int16 v25 = 1024;
    int v26 = a4;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "%s:%d endpoint %@, iteratorCB %d, context %d, forWrite %d ",  (uint8_t *)&v15,  0x2Eu);
    if (a4) {
      goto LABEL_10;
    }
LABEL_12:
    pthread_rwlock_rdlock(&_gAccManagerLock);
    goto LABEL_13;
  }

  if (!a4) {
    goto LABEL_12;
  }
LABEL_10:
  _tryWRLock((uint64_t)"acc_manager_callbackForEndpoint", 727);
LABEL_13:
  uint64_t Value = 0LL;
  if (a1 && a2)
  {
    if (qword_10021BB48)
    {
      uint64_t Value = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)qword_10021BB48, a1);
      if (Value)
      {
        if (gLogObjects && gNumLogObjects >= 13)
        {
          uint32_t v11 = *(os_log_s **)(gLogObjects + 96);
        }

        else
        {
          uint32_t v11 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
          acc_manager_callbackForEndpoint_cold_3();
        }
        a2(Value, a3);
        uint64_t Value = 1LL;
      }
    }

    else
    {
      uint64_t v14 = (os_log_s *)logObjectForModule_1(12);
      uint64_t Value = 0LL;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v15) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "connectionEndpoints = null!",  (uint8_t *)&v15,  2u);
        uint64_t Value = 0LL;
      }
    }
  }

  pthread_rwlock_unlock(&_gAccManagerLock);
  if (gLogObjects && gNumLogObjects >= 13)
  {
    __int128 v12 = *(os_log_s **)(gLogObjects + 96);
  }

  else
  {
    __int128 v12 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
    acc_manager_callbackForEndpoint_cold_1();
  }
  return Value;
}

CFSetRef acc_manager_copyEndpointUUIDsForConnection(const void *a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 13;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    BOOL v3 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    BOOL v3 = *(os_log_s **)(gLogObjects + 96);
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    acc_manager_copyEndpointUUIDsForConnection_cold_3();
  }
  pthread_rwlock_rdlock(&_gAccManagerLock);
  ConnectionWithUUID = (const __CFSet *)acc_manager_getConnectionWithUUID(a1);
  if (ConnectionWithUUID && *((void *)ConnectionWithUUID + 5)) {
    CFSetRef v5 = acc_connection_copyEndpointUUIDs(ConnectionWithUUID);
  }
  else {
    CFSetRef v5 = 0LL;
  }
  pthread_rwlock_unlock(&_gAccManagerLock);
  if (gLogObjects && gNumLogObjects >= 13)
  {
    BOOL v6 = *(os_log_s **)(gLogObjects + 96);
  }

  else
  {
    BOOL v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    acc_manager_copyEndpointUUIDsForConnection_cold_1();
  }
  return v5;
}

const void *acc_manager_getEndpointWithUUID(const void *Value)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 13;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    BOOL v3 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    BOOL v3 = *(os_log_s **)(gLogObjects + 96);
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    acc_manager_getEndpointWithUUID_cold_1();
  }
  pthread_rwlock_rdlock(&_gAccManagerLock);
  if (Value)
  {
    if (qword_10021BB48) {
      uint64_t Value = CFDictionaryGetValue((CFDictionaryRef)qword_10021BB48, Value);
    }
    else {
      uint64_t Value = 0LL;
    }
  }

  pthread_rwlock_unlock(&_gAccManagerLock);
  return Value;
}

BOOL acc_manager_processIncomingDataForEndpointWithUUID(const void *a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  v3[1] = 0LL;
  uint64_t v4 = 0LL;
  v3[0] = a2;
  acc_manager_callbackForEndpoint( a1,  (void (*)(uint64_t, uint64_t))_acc_manager_processIncomingDataForEndpointWithUUID,  (uint64_t)v3,  0);
  return v4 != 0;
}

uint64_t _acc_manager_processIncomingDataForEndpointWithUUID(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(const __CFData **)a2;
  if (v3) {
    *(void *)(a2 + 16) = acc_endpoint_processIncomingData(a1, v3);
  }
  return 0LL;
}

uint64_t acc_manager_enableLockoutForTransportType(uint64_t a1, unsigned int a2)
{
  unsigned int v3 = a1;
  BOOL v4 = a1 >= 0x10 || a2 == 0;
  uint64_t v5 = !v4;
  if (v4)
  {
    if (gLogObjects) {
      BOOL v10 = gNumLogObjects < 13;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10)
    {
      uint32_t v11 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      uint32_t v11 = *(os_log_s **)(gLogObjects + 96);
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      acc_manager_enableLockoutForTransportType_cold_3(v3, a2, v11);
    }
  }

  else
  {
    int isLockoutActiveForTransportType = acc_manager_isLockoutActiveForTransportType(a1, 0LL);
    _tryWRLock((uint64_t)"acc_manager_enableLockoutForTransportType", 878);
    _gSharedManager[v3 + 4] = systemInfo_getCurrentUnixTime() + a2;
    pthread_rwlock_unlock(&_gAccManagerLock);
    if (gLogObjects) {
      BOOL v7 = gNumLogObjects <= 12;
    }
    else {
      BOOL v7 = 1;
    }
    int v8 = !v7;
    if (isLockoutActiveForTransportType)
    {
      if (v8)
      {
        uint64_t v9 = *(os_log_s **)(gLogObjects + 96);
      }

      else
      {
        uint64_t v9 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 67109376;
        unsigned int v15 = v3;
        __int16 v16 = 1024;
        unsigned int v17 = a2;
        __int128 v12 = "Lockout for transport type: %{coreacc:ACCEndpoint_TransportType_t}d was extended to %d seconds!";
LABEL_36:
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v14, 0xEu);
      }
    }

    else
    {
      if (v8)
      {
        uint64_t v9 = *(os_log_s **)(gLogObjects + 96);
      }

      else
      {
        uint64_t v9 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 67109376;
        unsigned int v15 = v3;
        __int16 v16 = 1024;
        unsigned int v17 = a2;
        __int128 v12 = "Enabled lockout for transport type: %{coreacc:ACCEndpoint_TransportType_t}d for %d seconds!";
        goto LABEL_36;
      }
    }
  }

  return v5;
}

uint64_t acc_manager_isLockoutActiveForTransportType(uint64_t a1, _DWORD *a2)
{
  if (a1 > 0xF)
  {
    if (gLogObjects) {
      BOOL v8 = gNumLogObjects < 13;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8)
    {
      uint64_t v9 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      uint64_t v9 = *(os_log_s **)(gLogObjects + 96);
    }

    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      acc_manager_isLockoutActiveForTransportType_cold_1(a1, v9, v10, v11, v12, v13, v14, v15);
    }
  }

  else
  {
    unint64_t v4 = _gSharedManager[a1 + 4];
    if (v4 && v4 > systemInfo_getCurrentUnixTime())
    {
      int v5 = _gSharedManager[a1 + 4];
      int v6 = v5 - systemInfo_getCurrentUnixTime();
      uint64_t v7 = 1LL;
      if (!a2) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }

  uint64_t v7 = 0LL;
  int v6 = 0;
  if (a2) {
LABEL_16:
  }
    *a2 = v6;
LABEL_17:
  pthread_rwlock_unlock(&_gAccManagerLock);
  return v7;
}

BOOL acc_manager_disableLockoutForTransportType(uint64_t a1)
{
  if (a1 > 0xF)
  {
    if (gLogObjects) {
      BOOL v3 = gNumLogObjects < 13;
    }
    else {
      BOOL v3 = 1;
    }
    if (v3)
    {
      int v5 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      int v5 = *(os_log_s **)(gLogObjects + 96);
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      acc_manager_isLockoutActiveForTransportType_cold_1(a1, v5, v6, v7, v8, v9, v10, v11);
    }
  }

  else
  {
    _gSharedManager[a1 + 4] = 0LL;
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 13;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      unint64_t v4 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      unint64_t v4 = *(os_log_s **)(gLogObjects + 96);
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v13[0] = 67109120;
      v13[1] = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Disabled lockout for transport type: %{coreacc:ACCEndpoint_TransportType_t}d!",  (uint8_t *)v13,  8u);
    }
  }

  pthread_rwlock_unlock(&_gAccManagerLock);
  return a1 < 0x10;
}

uint64_t acc_manager_disableLockoutForAllTransportTypes()
{
  xmmword_10021BBC0 = 0u;
  unk_10021BBD0 = 0u;
  xmmword_10021BBA0 = 0u;
  unk_10021BBB0 = 0u;
  xmmword_10021BB80 = 0u;
  unk_10021BB90 = 0u;
  xmmword_10021BB60 = 0u;
  *(_OWORD *)algn_10021BB70 = 0u;
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 13;
  }
  else {
    BOOL v0 = 1;
  }
  if (v0)
  {
    id v1 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    id v1 = *(os_log_s **)(gLogObjects + 96);
  }

  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v3 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "Disabled lockout for all transport types!",  v3,  2u);
  }

  return pthread_rwlock_unlock(&_gAccManagerLock);
}

CFTypeRef acc_manager_copyDeviceUUID()
{
  if (_initSharedManager_onceToken != -1) {
    dispatch_once(&_initSharedManager_onceToken, &__block_literal_global_4);
  }
  if (qword_10021BB50) {
    CFTypeRef v0 = CFRetain((CFTypeRef)qword_10021BB50);
  }
  else {
    CFTypeRef v0 = 0LL;
  }
  pthread_rwlock_unlock(&_gAccManagerLock);
  return v0;
}

void *acc_manager_copyConnectionUUIDForEndpointUUID(const void *a1)
{
  EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
  pthread_rwlock_rdlock(&_gAccManagerLock);
  if (EndpointWithUUID)
  {
    else {
      EndpointWithUUID = 0LL;
    }
  }

  pthread_rwlock_unlock(&_gAccManagerLock);
  return EndpointWithUUID;
}

void acc_manager_checkForWirelessCTA()
{
  context = 0LL;
  if ((acc_userDefaults_BOOLForKey((uint64_t)@"DisableWirelessCTA") & 1) == 0)
  {
    if (gLogObjects) {
      BOOL v0 = gNumLogObjects < 14;
    }
    else {
      BOOL v0 = 1;
    }
    if (v0)
    {
      id v1 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      id v1 = *(os_log_s **)(gLogObjects + 104);
    }

    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Check for WirelessCTA", buf, 2u);
    }

    theDict = acc_manager_copyAllConnections();
    if (theDict && CFDictionaryGetCount(theDict) >= 1)
    {
      uint64_t v45 = 0LL;
      CFDictionaryApplyFunction( theDict,  (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_findWirelessCTADonorCapableConnection,  &context);
      CFDictionaryApplyFunction( theDict,  (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_findWirelessCTAReceiverCapableConnection,  &v45);
      if (gLogObjects && gNumLogObjects >= 14)
      {
        BOOL v2 = *(os_log_s **)(gLogObjects + 104);
      }

      else
      {
        BOOL v2 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        CFIndex Count = context;
        if (context) {
          CFIndex Count = (const __CFArray *)CFArrayGetCount(context);
        }
        *(_DWORD *)buf = 134218240;
        __int128 v48 = (const char *)Count;
        __int16 v49 = 1024;
        *(_DWORD *)__int128 v50 = v45 != 0LL;
        _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Check for WirelessCTA: attempt to find... donor %ld, receiver %d",  buf,  0x12u);
      }

      if (gLogObjects && gNumLogObjects >= 14)
      {
        unint64_t v4 = *(os_log_s **)(gLogObjects + 104);
      }

      else
      {
        unint64_t v4 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        __int128 v48 = (const char *)context;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Check for WirelessCTA: donorConnectionsFound %@",  buf,  0xCu);
      }

      if (context)
      {
        CFIndex v5 = CFArrayGetCount(context);
        uint64_t v6 = (uint64_t)v45;
        if (v5 && v45)
        {
          CFIndex v7 = 0LL;
          while (1)
          {
            if (v7 >= CFArrayGetCount(context)) {
              goto LABEL_98;
            }
            ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(context, v7);
            uint64_t Value = (const char *)CFDictionaryGetValue(ValueAtIndex, kCFWirelessCTAConnectionUUID);
            uint64_t v10 = CFDictionaryGetValue(ValueAtIndex, kCFWirelessCTAOOBPairingData);
            CFTypeRef cf1 = CFDictionaryGetValue(ValueAtIndex, kCFWirelessCTAIdentifier);
            uint64_t v44 = 0LL;
            CFDictionaryApplyFunction( (CFDictionaryRef)v45[5],  (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_findOOBPairingEndpoint,  &v44);
            __int16 v41 = v10;
            uint64_t v42 = Value;
            if (v44)
            {
              uint64_t v11 = *(void *)(v44 + 56);
              uint64_t v12 = oobPairing_endpoint_copyCachedOOBPairingInfo(v11);
              CFDataRef v13 = oobPairing_endpoint_copyCachedOOBPairingData(v11);
              if (v12)
              {
                BytePtr = CFDataGetBytePtr(v12);
                CFIndex Length = CFDataGetLength(v12);
                if (BytePtr) {
                  BOOL v16 = Length == 6;
                }
                else {
                  BOOL v16 = 0;
                }
                if (v16) {
                  CFStringRef v17 = CFStringCreateWithFormat( kCFAllocatorDefault,  0LL,  @"%02x:%02x:%02x:%02x:%02x:%02x",  *BytePtr,  BytePtr[1],  BytePtr[2],  BytePtr[3],  BytePtr[4],  BytePtr[5]);
                }
                else {
                  CFStringRef v17 = 0LL;
                }
                CFRelease(v12);
              }

              else
              {
                CFStringRef v17 = 0LL;
              }

              int v22 = 0;
              BOOL v20 = v13 != 0LL;
              if (v10 && v13) {
                int v22 = CFEqual(v10, v13);
              }
              int v21 = 0;
              BOOL v19 = v22 != 0;
              BOOL v18 = v17 != 0LL;
              if (cf1 && v17)
              {
                int v21 = CFEqual(cf1, v17);
                BOOL v18 = 1;
              }
            }

            else
            {
              BOOL v18 = 0;
              BOOL v19 = 0;
              CFDataRef v13 = 0LL;
              CFStringRef v17 = 0LL;
              BOOL v20 = 0;
              int v21 = 0;
            }

            uint64_t v23 = gLogObjects;
            int v24 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 14)
            {
              __int16 v25 = *(os_log_s **)(gLogObjects + 104);
            }

            else
            {
              __int16 v25 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                __int128 v48 = (const char *)v23;
                __int16 v49 = 1024;
                *(_DWORD *)__int128 v50 = v24;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              }
            }

            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315650;
              __int128 v48 = "acc_manager_checkForWirelessCTA";
              __int16 v49 = 1024;
              *(_DWORD *)__int128 v50 = v19;
              *(_WORD *)&v50[4] = 1024;
              *(_DWORD *)&v50[6] = v21 != 0;
              _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "%s: pairingDataMatch %d, bdAddrMatch %d",  buf,  0x18u);
            }

            if (v21) {
              int v26 = 1;
            }
            else {
              int v26 = v19;
            }
            uint64_t v27 = gLogObjects;
            int v28 = gNumLogObjects;
            if (gLogObjects) {
              BOOL v29 = gNumLogObjects <= 13;
            }
            else {
              BOOL v29 = 1;
            }
            int v30 = !v29;
            if (v26 == 1)
            {
              if (v30)
              {
                BOOL v31 = *(os_log_s **)(gLogObjects + 104);
              }

              else
              {
                BOOL v31 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  __int128 v48 = (const char *)v27;
                  __int16 v49 = 1024;
                  *(_DWORD *)__int128 v50 = v28;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                }
              }

              if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
              {
                BOOL v33 = *v45;
                *(_DWORD *)buf = 138412546;
                __int128 v48 = v42;
                __int16 v49 = 2112;
                *(void *)__int128 v50 = v33;
                _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Check for WirelessCTA: Found match! donor %@, receiver %@",  buf,  0x16u);
              }

              acc_connection_setAuthStatus(v45, 2LL, 2LL);
              if (v20)
              {
LABEL_87:
                CFRelease(v13);
                if (!v18) {
                  goto LABEL_84;
                }
LABEL_83:
                CFRelease(v17);
                goto LABEL_84;
              }
            }

            else
            {
              if (v30)
              {
                __int16 v32 = *(os_log_s **)(gLogObjects + 104);
              }

              else
              {
                __int16 v32 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  __int128 v48 = (const char *)v27;
                  __int16 v49 = 1024;
                  *(_DWORD *)__int128 v50 = v28;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                }
              }

              if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
              {
                __int16 v34 = *v45;
                int AuthStatus = acc_connection_getAuthStatus((uint64_t)v45, 2LL);
                *(_DWORD *)buf = 138413826;
                __int128 v48 = v42;
                __int16 v49 = 2112;
                *(void *)__int128 v50 = v34;
                *(_WORD *)&v50[8] = 2112;
                CFAllocatorRef v51 = v41;
                __int16 v52 = 2112;
                CFTypeRef v53 = cf1;
                __int16 v54 = 2112;
                CFDataRef v55 = v13;
                __int16 v56 = 2112;
                CFStringRef v57 = v17;
                __int16 v58 = 1024;
                int v59 = AuthStatus;
                _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Check for WirelessCTA: Found donor %@, receiver %@, but data/info doesn't match or doesn't exist! dono r %@ / %@, receiver %@ / %@, Maintain auth state for receiver (authStatus %{coreacc:ACCAuthInfo_Status_t}d)",  buf,  0x44u);
                if (v20) {
                  goto LABEL_87;
                }
              }

              else if (v20)
              {
                goto LABEL_87;
              }
            }

            if (v18) {
              goto LABEL_83;
            }
LABEL_84:
            ++v7;
            if ((v26 & 1) != 0) {
              goto LABEL_98;
            }
          }
        }
      }

      else
      {
        uint64_t v6 = (uint64_t)v45;
      }

      if (v6)
      {
        if (gLogObjects && gNumLogObjects >= 14)
        {
          __int16 v36 = *(os_log_s **)(gLogObjects + 104);
        }

        else
        {
          __int16 v36 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          int v37 = *v45;
          int v38 = acc_connection_getAuthStatus((uint64_t)v45, 2LL);
          int v39 = acc_connection_getAuthStatus((uint64_t)v45, 6LL);
          *(_DWORD *)buf = 138412802;
          __int128 v48 = v37;
          __int16 v49 = 1024;
          *(_DWORD *)__int128 v50 = v38;
          *(_WORD *)&v50[4] = 1024;
          *(_DWORD *)&v50[6] = v39;
          _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "Check for WirelessCTA: No donor! Maintain auth state for receiver %@ (authStatus %{coreacc:ACCAuthInfo_Statu s_t}d / %{coreacc:ACCAuthInfo_Status_t}d)",  buf,  0x18u);
        }
      }
    }

LABEL_98:
    if (context)
    {
      CFRelease(context);
      context = 0LL;
    }

    if (theDict) {
      CFRelease(theDict);
    }
  }

          __int16 v25 = v21;
LABEL_121:
          CFRelease(v25);
        }
      }

      else
      {
        AdapterForConnection = acc_manager_findAdapterForConnection(*(CFTypeRef *)v1);
        if (AdapterForConnection)
        {
          int v21 = (const __CFArray *)AdapterForConnection;
          int v28 = (uint64_t *)acc_manager_getConnectionWithUUID(AdapterForConnection);
          if (v28)
          {
            BOOL v29 = v28;
            int v30 = v28[15];
            if (v30)
            {
              __int128 v48 = v16;
              __int16 v49 = v2;
              int v24 = (const __CFNull *)acc_accInfo_retainedProperty(v30, 11, 0LL);
              __int16 v25 = (const __CFNull *)acc_accInfo_retainedProperty(v29[15], 12, 0LL);
              if (gLogObjects && gNumLogObjects >= 14)
              {
                BOOL v31 = *(os_log_s **)(gLogObjects + 104);
              }

              else
              {
                BOOL v31 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
              {
                uint64_t v40 = *v29;
                __int16 v41 = *(const void **)v1;
                *(_DWORD *)buf = 138413058;
                *(void *)__int16 v54 = v40;
                *(_WORD *)&v54[8] = 2112;
                *(void *)CFDataRef v55 = v41;
                *(_WORD *)&v55[8] = 2112;
                *(void *)&v55[10] = v24;
                *(_WORD *)&v55[18] = 2112;
                *(void *)&_BYTE v55[20] = v25;
                _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_INFO,  "Found adapter %@ for connection %@, adapterVID %@, adapterPID %@",  buf,  0x2Au);
              }

              acc_connection_setProperty(v1, kCFACCProperties_Connection_AdapterVID, v24);
              acc_connection_setProperty(v1, kCFACCProperties_Connection_AdapterPID, v25);
              BOOL v3 = &startLogsNotificationObservers;
LABEL_118:
              CFRelease(v21);
              BOOL v2 = v49;
              BOOL v16 = v48;
              if (v24) {
                CFRelease(v24);
              }
              if (!v25) {
                goto LABEL_122;
              }
              goto LABEL_121;
            }
          }

          if (gLogObjects && gNumLogObjects >= 14)
          {
            __int16 v32 = *(os_log_s **)(gLogObjects + 104);
          }

          else
          {
            __int16 v32 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
            acc_connection_publish_cold_3((uint64_t)v21, (uint64_t *)v1, v32);
          }
          goto LABEL_98;
        }
      }
    }

void _CFDictionaryApplierFunction_findWirelessCTADonorCapableConnection( uint64_t a1, uint64_t a2, __CFArray **a3)
{
  if (a2 && a3)
  {
    CFIndex v5 = *a3;
    uint64_t Type = acc_connection_getType(a2);
    if (gLogObjects) {
      BOOL v7 = gNumLogObjects < 14;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
      uint64_t v8 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      uint64_t v8 = *(os_log_s **)(gLogObjects + 104);
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      _CFDictionaryApplierFunction_findWirelessCTADonorCapableConnection_cold_6(a2, Type, v8);
    }
    if ((_DWORD)Type == 2 && acc_connection_isAuthenticated(a2, 6LL))
    {
      uint64_t v9 = acc_connection_copyProperty((char *)a2, kCFACCProperties_Endpoint_OOBPairingData);
      uint64_t v10 = *(const __CFString **)(a2 + 16);
      if (v10 && CFStringGetLength(v10) == 17)
      {
        memset(buffer, 170, sizeof(buffer));
        CFStringGetCString(v10, buffer, 18LL, 0x600u);
        BOOL v15 = buffer[2] == 58 && buffer[5] == 58 && buffer[8] == 58 && buffer[11] == 58 && buffer[14] == 58;
      }

      else
      {
        BOOL v15 = 0;
      }

      if (gLogObjects && gNumLogObjects >= 14)
      {
        BOOL v16 = *(os_log_s **)(gLogObjects + 104);
      }

      else
      {
        BOOL v16 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
        _CFDictionaryApplierFunction_findWirelessCTADonorCapableConnection_cold_4();
      }
      if (v9) {
        int v17 = 1;
      }
      else {
        int v17 = v15;
      }
      if (v17 == 1)
      {
        if (gLogObjects && gNumLogObjects >= 14)
        {
          BOOL v18 = *(os_log_s **)(gLogObjects + 104);
        }

        else
        {
          BOOL v18 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t ParentConnection = acc_endpoint_getParentConnection(a2);
          BOOL isAuthenticated = acc_connection_isAuthenticated(a2, 6LL);
          uint64_t v21 = *(void *)(a2 + 16);
          *(_DWORD *)buffer = 138413570;
          *(void *)&buffer[4] = ParentConnection;
          *(_WORD *)&buffer[12] = 1024;
          *(_DWORD *)&buffer[14] = 2;
          __int16 v27 = 1024;
          BOOL v28 = isAuthenticated;
          __int16 v29 = 1024;
          BOOL v30 = v15;
          __int16 v31 = 2112;
          __int16 v32 = v9;
          __int16 v33 = 2112;
          uint64_t v34 = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "findWirelessCTADonorCapableConnection: %@ type %{coreacc:ACCConnection_Type_t}d, isAuthenticated %d, isBdAdd rFormatString %d, found oobPairingData %@ / identifier %@",  (uint8_t *)buffer,  0x32u);
        }

        if (v5 || (CFIndex v5 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks), (*a3 = v5) != 0LL))
        {
          CFMutableArrayRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  3LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
          if (Mutable)
          {
            uint64_t v23 = Mutable;
            CFDictionaryAddValue(Mutable, kCFWirelessCTAConnectionUUID, *(const void **)a2);
            int v24 = *(const void **)(a2 + 16);
            if (v24) {
              CFDictionaryAddValue(v23, kCFWirelessCTAIdentifier, v24);
            }
            if (v9) {
              CFDictionaryAddValue(v23, kCFWirelessCTAOOBPairingData, v9);
            }
            CFArrayAppendValue(v5, v23);
            CFRelease(v23);
          }
        }

        if (v9) {
          CFRelease(v9);
        }
      }
    }

    if (gLogObjects && gNumLogObjects >= 14)
    {
      __int16 v25 = *(os_log_s **)(gLogObjects + 104);
    }

    else
    {
      __int16 v25 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
      _CFDictionaryApplierFunction_findWirelessCTADonorCapableConnection_cold_1((uint64_t)v5, v25);
    }
  }

void _CFDictionaryApplierFunction_findWirelessCTAReceiverCapableConnection( uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a2 && a3)
  {
    uint64_t Type = acc_connection_getType(a2);
    if (gLogObjects) {
      BOOL v6 = gNumLogObjects < 14;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6)
    {
      BOOL v7 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      BOOL v7 = *(os_log_s **)(gLogObjects + 104);
    }

    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      _CFDictionaryApplierFunction_findWirelessCTAReceiverCapableConnection_cold_2(a2, Type, v7);
    }
    if ((_DWORD)Type == 8 || (_DWORD)Type == 6)
    {
      uint64_t context = 0LL;
      CFDictionaryApplyFunction( *(CFDictionaryRef *)(a2 + 40),  (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_findOOBPairingEndpoint,  &context);
      if (context)
      {
        if (gLogObjects && gNumLogObjects >= 14)
        {
          uint64_t v8 = *(os_log_s **)(gLogObjects + 104);
        }

        else
        {
          uint64_t v8 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t ParentConnection = acc_endpoint_getParentConnection(a2);
          uint64_t v10 = *(void *)(context + 16);
          *(_DWORD *)buf = 138412802;
          uint64_t v13 = ParentConnection;
          __int16 v14 = 1024;
          int v15 = Type;
          __int16 v16 = 2112;
          uint64_t v17 = v10;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "findWirelessCTAReceiverCapableConnection: %@ type %{coreacc:ACCConnection_Type_t}d, found endpoint %@",  buf,  0x1Cu);
        }

        if (!*a3) {
          *a3 = a2;
        }
      }
    }
  }

void _CFDictionaryApplierFunction_findOOBPairingEndpoint(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a2 && a3)
  {
    int Protocol = acc_endpoint_getProtocol(a2);
    if (gLogObjects) {
      BOOL v6 = gNumLogObjects < 14;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6)
    {
      BOOL v7 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      BOOL v7 = *(os_log_s **)(gLogObjects + 104);
    }

    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      _CFDictionaryApplierFunction_findOOBPairingEndpoint_cold_1();
    }
    if (Protocol == 8 && !*a3) {
      *a3 = a2;
    }
  }

void acc_manager_checkForInductiveCTA()
{
  if ((acc_userDefaults_BOOLForKey((uint64_t)@"DisableWirelessCTA") & 1) == 0)
  {
    if (!gLogObjects || gNumLogObjects < 14)
    {
      id v1 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      id v1 = *(os_log_s **)(gLogObjects + 104);
    }

    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Check for InductiveCTA", buf, 2u);
    }

    BOOL v2 = acc_manager_copyAllConnections();
    if (v2)
    {
      BOOL v3 = v2;
      if (CFDictionaryGetCount(v2) < 1)
      {
LABEL_116:
        CFRelease(v3);
        return;
      }

      __int16 v43 = 0LL;
      uint64_t context = 0LL;
      CFDictionaryApplyFunction( v3,  (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_findInductiveCTADonorCapableConnection,  &context);
      CFDictionaryApplyFunction( v3,  (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_findInductiveCTAReceiverCapableConnection,  &v43);
      if (gLogObjects && gNumLogObjects >= 14)
      {
        unint64_t v4 = *(os_log_s **)(gLogObjects + 104);
      }

      else
      {
        unint64_t v4 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)BOOL v46 = context != 0LL;
        *(_WORD *)&v46[4] = 1024;
        *(_DWORD *)&v46[6] = v43 != 0LL;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Check for InductiveCTA: attempt to find... donor %d, receiver %d",  buf,  0xEu);
      }

      if (!context || !v43)
      {
        if (v43)
        {
          if (gLogObjects && gNumLogObjects >= 14)
          {
            uint64_t v12 = *(os_log_s **)(gLogObjects + 104);
          }

          else
          {
            uint64_t v12 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            CFDictionaryRef v13 = *v43;
            int AuthStatus = acc_connection_getAuthStatus((uint64_t)v43, 4LL);
            int v15 = acc_connection_getAuthStatus((uint64_t)v43, 6LL);
            *(_DWORD *)buf = 138412802;
            *(void *)BOOL v46 = v13;
            *(_WORD *)&v46[8] = 1024;
            *(_DWORD *)__int128 v47 = AuthStatus;
            *(_WORD *)&v47[4] = 1024;
            *(_DWORD *)&v47[6] = v15;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Check for InductiveCTA: No donor! Maintain auth state for receiver %@ (authStatus %{coreacc:ACCAuthInfo_St atus_t}d / %{coreacc:ACCAuthInfo_Status_t}d)",  buf,  0x18u);
          }
        }

        goto LABEL_116;
      }

      uint64_t v42 = 0LL;
      CFDictionaryApplyFunction( v43[5],  (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_findInductiveAuthEndpoint,  &v42);
      CFIndex v5 = (const void *)kCFACCProperties_Connection_Inductive_RxID;
      BOOL v6 = acc_connection_copyProperty(context, kCFACCProperties_Connection_Inductive_RxID);
      BOOL v7 = acc_connection_copyProperty((char *)v43, v5);
      uint64_t v8 = v7;
      int v9 = 0;
      if (v6 && v7) {
        int v9 = CFEqual(v6, v7);
      }
      BOOL v10 = v9 != 0;
      if (v6 && !v9 && acc_userDefaults_BOOLForKey((uint64_t)@"InductiveAuthPretendMatchRxID"))
      {
        if (gLogObjects && gNumLogObjects >= 14)
        {
          uint64_t v11 = *(os_log_s **)(gLogObjects + 104);
        }

        else
        {
          uint64_t v11 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)BOOL v46 = "acc_manager_checkForInductiveCTA";
          *(_WORD *)&v46[8] = 1024;
          *(_DWORD *)__int128 v47 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%s: rxIDMatch %d, -> pretend matching rxID !!!",  buf,  0x12u);
        }

        BOOL v10 = 1;
      }

      if ((acc_userDefaults_BOOLForKey((uint64_t)@"PretendNFCAuthFailed") & 1) != 0
        || acc_userDefaults_BOOLForKey((uint64_t)@"PretendNFCAuthTimeout"))
      {
        if (gLogObjects && gNumLogObjects >= 56)
        {
          __int16 v16 = *(os_log_s **)(gLogObjects + 440);
        }

        else
        {
          __int16 v16 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        BOOL v17 = 0;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v18 = acc_userDefaults_BOOLForKey((uint64_t)@"PretendNFCAuthFailed");
          unsigned int v19 = acc_userDefaults_BOOLForKey((uint64_t)@"PretendNFCAuthTimeout");
          *(_DWORD *)buf = 136316162;
          *(void *)BOOL v46 = "acc_manager_checkForInductiveCTA";
          *(_WORD *)&v46[8] = 1024;
          *(_DWORD *)__int128 v47 = v18;
          *(_WORD *)&v47[4] = 1024;
          *(_DWORD *)&v47[6] = v19;
          LOWORD(v4_Block_object_dispose(va, 8) = 1024;
          *(_DWORD *)((char *)&v48 + 2) = v10;
          HIWORD(v4_Block_object_dispose(va, 8) = 1024;
          LODWORD(v49) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "%s: PretendNFCAuthFailed(%d)/PretendNFCAuthTimeout(%d) !!!, rxIDMatch %d -> %d",  buf,  0x24u);
          BOOL v17 = 0;
        }
      }

      else
      {
        BOOL v17 = v10;
      }

      if (gLogObjects && gNumLogObjects >= 14)
      {
        BOOL v20 = *(os_log_s **)(gLogObjects + 104);
      }

      else
      {
        BOOL v20 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = context;
        if (context) {
          uint64_t v21 = *(char **)context;
        }
        int v22 = v43;
        if (v43) {
          int v22 = (CFDictionaryRef *)*v43;
        }
        uint64_t v23 = v42;
        if (v42) {
          uint64_t v23 = *(void *)(v42 + 16);
        }
        *(_DWORD *)buf = 136316674;
        *(void *)BOOL v46 = "acc_manager_checkForInductiveCTA";
        *(_WORD *)&v46[8] = 2112;
        *(void *)__int128 v47 = v21;
        *(_WORD *)&v47[8] = 2112;
        __int128 v48 = v22;
        LOWORD(v49) = 1024;
        *(_DWORD *)((char *)&v49 + 2) = v17;
        WORD3(v49) = 2112;
        *((void *)&v49 + 1) = v6;
        __int16 v50 = 2112;
        CFAllocatorRef v51 = v8;
        __int16 v52 = 2112;
        uint64_t v53 = v23;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "%s: donor %@, receiver %@, rxIDMatch %d, donorRxID %@, receiverRxID %@, pAccAuthEndpointFound %@",  buf,  0x44u);
      }

      if (gLogObjects) {
        BOOL v24 = gNumLogObjects <= 13;
      }
      else {
        BOOL v24 = 1;
      }
      int v25 = !v24;
      if (v17)
      {
        if (v25)
        {
          int v26 = *(os_log_s **)(gLogObjects + 104);
        }

        else
        {
          int v26 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v28 = *(void *)context;
          CFDictionaryRef v29 = *v43;
          *(_DWORD *)buf = 138412546;
          *(void *)BOOL v46 = v28;
          *(_WORD *)&v46[8] = 2112;
          *(void *)__int128 v47 = v29;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Check for InductiveCTA: Found match! donor %@, receiver %@",  buf,  0x16u);
        }

        if (acc_connection_getAuthStatus((uint64_t)v43, 4LL) != 2)
        {
          CFDataRef v36 = oobPairing_endpoint_copyCachedOOBPairingInfo((uint64_t)(context + 48));
          if (gLogObjects && gNumLogObjects >= 14)
          {
            int v37 = *(os_log_s **)(gLogObjects + 104);
          }

          else
          {
            int v37 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v39 = *(void *)context;
            CFDictionaryRef v40 = *v43;
            *(_DWORD *)buf = 136315906;
            *(void *)BOOL v46 = "acc_manager_checkForInductiveCTA";
            *(_WORD *)&v46[8] = 2112;
            *(void *)__int128 v47 = v39;
            *(_WORD *)&v47[8] = 2112;
            __int128 v48 = v40;
            LOWORD(v49) = 2112;
            *(void *)((char *)&v49 + 2) = v36;
            _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "%s: copy certData from %@ to %@ : %@",  buf,  0x2Au);
          }

          acc_authInfo_setCertData((uint64_t)(v43 + 6), v36);
          acc_connection_setAuthStatus(v43, 4LL, 2LL);
          if (v42 && *(void *)(v42 + 56))
          {
            if (gLogObjects && gNumLogObjects >= 14)
            {
              __int16 v41 = *(os_log_s **)(gLogObjects + 104);
            }

            else
            {
              __int16 v41 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)BOOL v46 = 2;
              _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "Check for InductiveCTA: Inform authProtocol endpoint %{coreacc:ACCAuthInfo_Status_t}d",  buf,  8u);
            }

            accAuthProtocol_endpoint_notifyAuthStatus(*(void *)(v42 + 56), 2);
          }

          goto LABEL_112;
        }

        if (gLogObjects && gNumLogObjects >= 14)
        {
          BOOL v30 = *(os_log_s **)(gLogObjects + 104);
        }

        else
        {
          BOOL v30 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
LABEL_112:
          if (v6) {
            CFRelease(v6);
          }
          if (v8) {
            CFRelease(v8);
          }
          goto LABEL_116;
        }

        CFDictionaryRef v38 = *v43;
        *(_DWORD *)buf = 138412546;
        *(void *)BOOL v46 = v38;
        *(_WORD *)&v46[8] = 1024;
        *(_DWORD *)__int128 v47 = 2;
        __int16 v33 = "Check for InductiveCTA: receiver %@, already authenticated! %{coreacc:ACCAuthInfo_Status_t}d";
        uint64_t v34 = v30;
        uint32_t v35 = 18;
      }

      else
      {
        if (v25)
        {
          __int16 v27 = *(os_log_s **)(gLogObjects + 104);
        }

        else
        {
          __int16 v27 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_112;
        }
        uint64_t v31 = *(void *)context;
        CFDictionaryRef v32 = *v43;
        *(_DWORD *)buf = 138413058;
        *(void *)BOOL v46 = v31;
        *(_WORD *)&v46[8] = 2112;
        *(void *)__int128 v47 = v32;
        *(_WORD *)&v47[8] = 2112;
        __int128 v48 = v6;
        LOWORD(v49) = 2112;
        *(void *)((char *)&v49 + 2) = v8;
        __int16 v33 = "Check for InductiveCTA: Found donor %@, receiver %@, but data/info doesn't match or doesn't exist! donor %@, receiver %@";
        uint64_t v34 = v27;
        uint32_t v35 = 42;
      }

      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, v33, buf, v35);
      goto LABEL_112;
    }
  }

void _CFDictionaryApplierFunction_findInductiveCTADonorCapableConnection(uint64_t a1, char *a2, char **a3)
{
  if (a2 && a3)
  {
    uint64_t Type = acc_connection_getType((uint64_t)a2);
    if (gLogObjects) {
      BOOL v6 = gNumLogObjects < 14;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6)
    {
      BOOL v7 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      BOOL v7 = *(os_log_s **)(gLogObjects + 104);
    }

    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      _CFDictionaryApplierFunction_findInductiveCTADonorCapableConnection_cold_2((uint64_t)a2, Type, v7);
    }
    if ((_DWORD)Type == 9 && acc_connection_isAuthenticated((BOOL)a2, 6LL))
    {
      uint64_t v8 = acc_connection_copyProperty(a2, kCFACCProperties_Connection_Inductive_RxID);
      if (v8)
      {
        int v9 = v8;
        if (gLogObjects && gNumLogObjects >= 14)
        {
          BOOL v10 = *(os_log_s **)(gLogObjects + 104);
        }

        else
        {
          BOOL v10 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          int v11 = 138413058;
          uint64_t ParentConnection = acc_endpoint_getParentConnection((uint64_t)a2);
          __int16 v13 = 1024;
          int v14 = 9;
          __int16 v15 = 1024;
          BOOL isAuthenticated = acc_connection_isAuthenticated((BOOL)a2, 6LL);
          __int16 v17 = 2112;
          unsigned int v18 = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "findInductiveCTADonorCapableConnection: %@ type %{coreacc:ACCConnection_Type_t}d, isAuthenticated %d, found rxID %@",  (uint8_t *)&v11,  0x22u);
        }

        if (!*a3) {
          *a3 = a2;
        }
        CFRelease(v9);
      }
    }
  }

void _CFDictionaryApplierFunction_findInductiveCTAReceiverCapableConnection(uint64_t a1, char *a2, char **a3)
{
  if (a2 && a3)
  {
    uint64_t Type = acc_connection_getType((uint64_t)a2);
    if (gLogObjects) {
      BOOL v6 = gNumLogObjects < 14;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6)
    {
      BOOL v7 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      BOOL v7 = *(os_log_s **)(gLogObjects + 104);
    }

    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      _CFDictionaryApplierFunction_findInductiveCTAReceiverCapableConnection_cold_3((uint64_t)a2, Type, v7);
    }
    if ((_DWORD)Type == 4)
    {
      if (acc_userDefaults_BOOLForKey((uint64_t)@"InductiveAuthPretendMatchRxID"))
      {
        if (gLogObjects && gNumLogObjects >= 14)
        {
          uint64_t v8 = *(os_log_s **)(gLogObjects + 104);
        }

        else
        {
          uint64_t v8 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          int v12 = 138412802;
          uint64_t ParentConnection = acc_endpoint_getParentConnection((uint64_t)a2);
          __int16 v14 = 1024;
          int v15 = 4;
          __int16 v16 = 1024;
          BOOL isAuthenticated = acc_connection_isAuthenticated((BOOL)a2, 6LL);
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "findInductiveCTAReceiverCapableConnection: %@ type %{coreacc:ACCConnection_Type_t}d, isAuthenticated %d, pre tend found rxID !!!",  (uint8_t *)&v12,  0x18u);
        }

        if (!*a3) {
          *a3 = a2;
        }
      }

      else
      {
        int v9 = acc_connection_copyProperty(a2, kCFACCProperties_Connection_Inductive_RxID);
        if (v9)
        {
          BOOL v10 = v9;
          if (gLogObjects && gNumLogObjects >= 14)
          {
            int v11 = *(os_log_s **)(gLogObjects + 104);
          }

          else
          {
            int v11 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            int v12 = 138413058;
            uint64_t ParentConnection = acc_endpoint_getParentConnection((uint64_t)a2);
            __int16 v14 = 1024;
            int v15 = 4;
            __int16 v16 = 1024;
            BOOL isAuthenticated = acc_connection_isAuthenticated((BOOL)a2, 6LL);
            __int16 v18 = 2112;
            unsigned int v19 = v10;
            _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "findInductiveCTAReceiverCapableConnection: %@ type %{coreacc:ACCConnection_Type_t}d, isAuthenticated %d, found rxID %@",  (uint8_t *)&v12,  0x22u);
          }

          if (!*a3) {
            *a3 = a2;
          }
          CFRelease(v10);
        }
      }
    }
  }

void _CFDictionaryApplierFunction_findInductiveAuthEndpoint(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a2 && a3)
  {
    int Protocol = acc_endpoint_getProtocol(a2);
    if (gLogObjects) {
      BOOL v6 = gNumLogObjects < 14;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6)
    {
      BOOL v7 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      BOOL v7 = *(os_log_s **)(gLogObjects + 104);
    }

    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      _CFDictionaryApplierFunction_findInductiveAuthEndpoint_cold_1();
    }
    if (Protocol == 10 && !*a3) {
      *a3 = a2;
    }
  }

CFStringRef acc_manager_findAdapterForConnection(CFTypeRef cf)
{
  if (!cf)
  {
    CFStringRef Copy = 0LL;
    goto LABEL_8;
  }

  CFRetain(cf);
  CFMutableArrayRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0LL);
  v15[0] = cf;
  v15[1] = Mutable;
  acc_manager_iterateAllConnections( (unsigned int (*)(void, uint64_t))_findAdapterForConnection,  (uint64_t)v15,  0);
  if (!CFStringGetLength(Mutable))
  {
    CFStringRef Copy = 0LL;
    if (!Mutable) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, Mutable);
  if (Mutable) {
LABEL_7:
  }
    CFRelease(Mutable);
LABEL_8:
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 14;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    CFIndex v5 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    CFIndex v5 = *(os_log_s **)(gLogObjects + 104);
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315906;
    uint64_t v8 = "acc_manager_findAdapterForConnection";
    __int16 v9 = 1024;
    int v10 = 1416;
    __int16 v11 = 2112;
    CFTypeRef v12 = cf;
    __int16 v13 = 2112;
    CFStringRef v14 = Copy;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s:%d connectionUUID %@, resultAdapterConnectionUUID %@",  (uint8_t *)&v7,  0x26u);
  }

  if (cf) {
    CFRelease(cf);
  }
  return Copy;
}

BOOL _findAdapterForConnection(uint64_t a1, uint64_t a2)
{
  if (!a1 || *(_BYTE *)(a1 + 142))
  {
    BOOL v3 = 0LL;
    BOOL v4 = 0LL;
    CFIndex v5 = 0LL;
    BOOL v6 = 0LL;
    goto LABEL_16;
  }

  BOOL v3 = 0LL;
  if (!a2)
  {
    BOOL v4 = 0LL;
    CFIndex v5 = 0LL;
    BOOL v6 = 0LL;
    goto LABEL_16;
  }

  BOOL v4 = 0LL;
  CFIndex v5 = 0LL;
  BOOL v6 = 0LL;
  if (*(_DWORD *)(a1 + 8) != 6) {
    goto LABEL_16;
  }
  BOOL v3 = 0LL;
  BOOL v6 = *(const void **)a2;
  if (!*(void *)a2 || (int v7 = *(__CFString **)(a2 + 8)) == 0LL)
  {
    BOOL v4 = 0LL;
    CFIndex v5 = 0LL;
    goto LABEL_16;
  }

  ConnectionWithUUID = (__CFString *)acc_manager_getConnectionWithUUID(*(const void **)a2);
  BOOL v3 = ConnectionWithUUID;
  if (!ConnectionWithUUID)
  {
LABEL_35:
    BOOL v4 = 0LL;
    CFIndex v5 = 0LL;
    goto LABEL_16;
  }

  if (BYTE6(ConnectionWithUUID[4].info)
    || LODWORD(ConnectionWithUUID->info) != 6
    || CFStringCompare((CFStringRef)ConnectionWithUUID->isa, *(CFStringRef *)a1, 0LL) == kCFCompareEqualTo)
  {
    BOOL v3 = 0LL;
    goto LABEL_35;
  }

  __int16 v9 = (const void *)kCFACCProperties_Connection_ManagerParent;
  BOOL v4 = acc_connection_copyProperty((char *)v3, kCFACCProperties_Connection_ManagerParent);
  int v10 = acc_connection_copyProperty((char *)a1, v9);
  CFIndex v5 = v10;
  BOOL v3 = 0LL;
  if (v4 && v10)
  {
    if (CFStringCompare((CFStringRef)v4, (CFStringRef)v10, 0LL))
    {
      BOOL v3 = 0LL;
    }

    else
    {
      BOOL v3 = *(__CFString **)a1;
      CFStringReplaceAll(v7, *(CFStringRef *)a1);
    }
  }

LABEL_16:
  if (gLogObjects) {
    BOOL v11 = gNumLogObjects < 14;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    CFTypeRef v12 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    CFTypeRef v12 = *(os_log_s **)(gLogObjects + 104);
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    if (a1) {
      CFStringRef v14 = *(CFStringRef *)a1;
    }
    else {
      CFStringRef v14 = 0LL;
    }
    int v15 = 136316674;
    __int16 v16 = "_findAdapterForConnection";
    __int16 v17 = 1024;
    int v18 = 1326;
    __int16 v19 = 2112;
    CFStringRef v20 = v14;
    __int16 v21 = 2112;
    int v22 = v6;
    __int16 v23 = 2112;
    BOOL v24 = v3;
    __int16 v25 = 2112;
    int v26 = v4;
    __int16 v27 = 2112;
    uint64_t v28 = v5;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "%s:%d pPotentialAdapterConnection %@, inConnectionUUID %@, foundAdapterConnectionUUID %@, connectionManagerParent %@, adapterManagerParent %@",  (uint8_t *)&v15,  0x44u);
    if (!v4) {
      goto LABEL_26;
    }
  }

  else if (!v4)
  {
    goto LABEL_26;
  }

  CFRelease(v4);
LABEL_26:
  if (v5) {
    CFRelease(v5);
  }
  return v3 == 0LL;
}

    -[NSMutableDictionary setObject:forKey:]( v4,  "setObject:forKey:",  self->_albumArtist,  @"ACCMediaLibraryPlaylistItemAlbumArtist");
    validMask = self->_validMask;
    if ((validMask & 0x10000) == 0)
    {
LABEL_9:
      if ((validMask & 0x40000) == 0) {
        return v4;
      }
LABEL_10:
      -[NSMutableDictionary setObject:forKey:]( v4,  "setObject:forKey:",  self->_composer,  @"ACCMediaLibraryPlaylistItemComposer");
      return v4;
    }

  artist = self->_artist;
  if (artist)
  {
    artist = -[NSString UTF8String](artist, "UTF8String");
    validMask = self->_validMask;
  }

  a3->var4 = (char *)artist;
  a3->var0 |= 0x1000u;
  if ((validMask & 0x4000) == 0)
  {
LABEL_6:
    if ((validMask & 0x10000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }

    __int16 v19 = logObjectForModule_29();
    CFTypeRef v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      goto LABEL_49;
    }
LABEL_48:
    mfi4Auth_protocol_encryptOutgoingData_cold_5();
LABEL_49:
    __int16 v9 = 0LL;
LABEL_38:

    return v9;
  }

  return 1LL;
}

  if (gLogObjects && gNumLogObjects >= 56)
  {
    int v18 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v18 = (os_log_s *)&_os_log_default;
    __int16 v19 = &_os_log_default;
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    __int16 v27 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_initIdentityCerts: error:%d",  buf,  8u);
  }

  return v17;
}

        __int16 v16 = 4294967294LL;
      }
    }
  }

  int v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_parentPersistentID));
  -[NSMutableDictionary setObject:forKey:]( v4,  "setObject:forKey:",  v10,  @"ACCMediaLibraryUpdatePlaylistParentPersistentID");

  validMask = self->_validMask;
  if ((validMask & 0x10) == 0)
  {
LABEL_7:
    if ((validMask & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }

  __break(0x5513u);
  return result;
}

    __break(0x5519u);
  }

  return result;
}

CFArrayRef acc_manager_findConnectionsThroughAdapter(CFTypeRef cf)
{
  if (!cf)
  {
    CFArrayRef Copy = 0LL;
    goto LABEL_8;
  }

  CFRetain(cf);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  v15[0] = cf;
  v15[1] = Mutable;
  acc_manager_iterateAllConnections( (unsigned int (*)(void, uint64_t))_findConnectionsThroughAdapter,  (uint64_t)v15,  0);
  if (!CFArrayGetCount(Mutable))
  {
    CFArrayRef Copy = 0LL;
    if (!Mutable) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  CFArrayRef Copy = CFArrayCreateCopy(kCFAllocatorDefault, Mutable);
  if (Mutable) {
LABEL_7:
  }
    CFRelease(Mutable);
LABEL_8:
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 14;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    CFIndex v5 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    CFIndex v5 = *(os_log_s **)(gLogObjects + 104);
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315906;
    uint64_t v8 = "acc_manager_findConnectionsThroughAdapter";
    __int16 v9 = 1024;
    int v10 = 1448;
    __int16 v11 = 2112;
    CFTypeRef v12 = cf;
    __int16 v13 = 2112;
    CFArrayRef v14 = Copy;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s:%d adapterConnectionUUID %@, resultConnectionUUIDs %@",  (uint8_t *)&v7,  0x26u);
  }

  if (cf) {
    CFRelease(cf);
  }
  return Copy;
}

uint64_t _findConnectionsThroughAdapter(char *a1, uint64_t a2)
{
  if (!a1 || a1[142])
  {
    BOOL v4 = 0LL;
    CFIndex v5 = 0LL;
    BOOL v6 = 0LL;
  }

  else
  {
    BOOL v4 = 0LL;
    if (a2)
    {
      CFIndex v5 = 0LL;
      BOOL v6 = 0LL;
      if (*((_DWORD *)a1 + 2) == 6)
      {
        BOOL v4 = 0LL;
        BOOL v2 = *(const void **)a2;
        if (*(void *)a2 && (int v7 = *(__CFArray **)(a2 + 8)) != 0LL)
        {
          ConnectionWithUUID = (char *)acc_manager_getConnectionWithUUID(*(const void **)a2);
          BOOL v6 = ConnectionWithUUID;
          if (ConnectionWithUUID)
          {
            if (!ConnectionWithUUID[142]
              && *((_DWORD *)ConnectionWithUUID + 2) == 6
              && CFStringCompare(*(CFStringRef *)ConnectionWithUUID, *(CFStringRef *)a1, 0LL))
            {
              __int16 v9 = (const void *)kCFACCProperties_Connection_ManagerParent;
              BOOL v6 = acc_connection_copyProperty(v6, kCFACCProperties_Connection_ManagerParent);
              int v10 = acc_connection_copyProperty(a1, v9);
              CFIndex v5 = v10;
              BOOL v4 = 0LL;
              if (v10 && v6)
              {
                if (CFStringCompare((CFStringRef)v10, (CFStringRef)v6, 0LL))
                {
                  BOOL v4 = 0LL;
                }

                else
                {
                  BOOL v4 = *(const void **)a1;
                  CFArrayAppendValue(v7, *(const void **)a1);
                }
              }
            }

            else
            {
              BOOL v4 = 0LL;
              CFIndex v5 = 0LL;
              BOOL v6 = 0LL;
            }
          }

          else
          {
            BOOL v4 = 0LL;
            CFIndex v5 = 0LL;
          }
        }

        else
        {
          CFIndex v5 = 0LL;
          BOOL v6 = 0LL;
        }
      }
    }

    else
    {
      CFIndex v5 = 0LL;
      BOOL v6 = 0LL;
    }
  }

  if (gLogObjects) {
    BOOL v11 = gNumLogObjects < 14;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    CFTypeRef v12 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    CFTypeRef v12 = *(os_log_s **)(gLogObjects + 104);
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    if (a1) {
      CFArrayRef v14 = *(const void **)a1;
    }
    else {
      CFArrayRef v14 = 0LL;
    }
    int v15 = 136316674;
    __int16 v16 = "_findConnectionsThroughAdapter";
    __int16 v17 = 1024;
    int v18 = 1382;
    __int16 v19 = 2112;
    CFStringRef v20 = v14;
    __int16 v21 = 2112;
    int v22 = v2;
    __int16 v23 = 2112;
    BOOL v24 = v4;
    __int16 v25 = 2112;
    int v26 = v5;
    __int16 v27 = 2112;
    uint64_t v28 = v6;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "%s:%d pConnection %@, inAdapterConnectionUUID %@, foundConnectionUUID %@, connectionManagerParent %@, adapterManagerParent %@",  (uint8_t *)&v15,  0x44u);
    if (!v5) {
      goto LABEL_26;
    }
  }

  else if (!v5)
  {
    goto LABEL_26;
  }

  CFRelease(v5);
LABEL_26:
  if (v6) {
    CFRelease(v6);
  }
  return 1LL;
}

void ___initSharedManager_block_invoke(id a1)
{
  if (!_gSharedManager[0]) {
    _gSharedManager[0] = (uint64_t)CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  0LL);
  }
  if (!qword_10021BB48) {
    qword_10021BB48 = (uint64_t)CFDictionaryCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeDictionaryKeyCallBacks, 0LL);
  }
  if (!qword_10021BB50)
  {
    qword_10021BB50 = (uint64_t)CFCreateUUIDString();
    qword_10021BB58 = systemInfo_getCurrentUnixTime();
    if (gLogObjects && gNumLogObjects >= 13)
    {
      id v1 = *(os_log_s **)(gLogObjects + 96);
    }

    else
    {
      id v1 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      int v2 = 138412290;
      uint64_t v3 = qword_10021BB50;
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "Initialized device UUID: %@",  (uint8_t *)&v2,  0xCu);
    }
  }

void OUTLINED_FUNCTION_3_5(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

void OUTLINED_FUNCTION_5_4(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

  ;
}

  ;
}

  ;
}

void OUTLINED_FUNCTION_10_0(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void OUTLINED_FUNCTION_11_0( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

BOOL OUTLINED_FUNCTION_14_0()
{
  return acc_connection_isAuthenticated(v0, 6LL);
}

void OUTLINED_FUNCTION_16_0( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

CFStringRef iAP2MsgCopyDataAsCFString(unsigned __int16 *a1, BOOL *a2)
{
  DataAsString = iAP2MsgGetDataAsString(a1, a2);
  if (DataAsString && !*a2) {
    return CFStringCreateWithCString(kCFAllocatorDefault, (const char *)DataAsString, 0x8000100u);
  }
  else {
    return 0LL;
  }
}

_BYTE *iAP2MsgAddCFU64Param(uint64_t a1, uint64_t a2, __int16 a3, const __CFNumber *a4)
{
  if (!a4) {
    return 0LL;
  }
  FreeParam = (_BYTE *)iAP2MsgGetFreeParam(a1);
  if (FreeParam)
  {
    unint64_t valuePtr = 0xAAAAAAAAAAAAAAAALL;
    if (CFNumberGetValue(a4, kCFNumberSInt64Type, &valuePtr))
    {
      iAP2MsgInitParam(a1, FreeParam, a3, 0, 0xCu, a2);
      char v9 = HIBYTE(valuePtr);
      *(_BYTE *)iAP2MsgGetParamValueData((uint64_t)FreeParam) = v9;
      char v10 = BYTE6(valuePtr);
      *(_BYTE *)(iAP2MsgGetParamValueData((uint64_t)FreeParam) + 1) = v10;
      unint64_t v11 = valuePtr >> 40;
      *(_BYTE *)(iAP2MsgGetParamValueData((uint64_t)FreeParam) + 2) = v11;
      LOBYTE(v11) = BYTE4(valuePtr);
      *(_BYTE *)(iAP2MsgGetParamValueData((uint64_t)FreeParam) + 3) = v11;
      unint64_t v12 = valuePtr >> 24;
      *(_BYTE *)(iAP2MsgGetParamValueData((uint64_t)FreeParam) + 4) = v12;
      unint64_t v13 = valuePtr >> 16;
      *(_BYTE *)(iAP2MsgGetParamValueData((uint64_t)FreeParam) + 5) = v13;
      unint64_t v14 = valuePtr >> 8;
      *(_BYTE *)(iAP2MsgGetParamValueData((uint64_t)FreeParam) + 6) = v14;
      LOBYTE(v14) = valuePtr;
      *(_BYTE *)(iAP2MsgGetParamValueData((uint64_t)FreeParam) + 7) = v14;
      return FreeParam;
    }

    return 0LL;
  }

  return FreeParam;
}

uint64_t iAP2MsgAddCFU32Param(uint64_t a1, uint64_t a2, __int16 a3, CFNumberRef number)
{
  if (!number) {
    return 0LL;
  }
  unsigned int valuePtr = -1431655766;
  if (CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr)) {
    return iAP2MsgAddU32Param(a1, a2, a3, valuePtr);
  }
  else {
    return 0LL;
  }
}

uint64_t iAP2MsgAddCFU16Param(uint64_t a1, uint64_t a2, __int16 a3, CFNumberRef number)
{
  if (!number) {
    return 0LL;
  }
  unsigned __int16 valuePtr = -21846;
  if (CFNumberGetValue(number, kCFNumberSInt16Type, &valuePtr)) {
    return iAP2MsgAddU16Param(a1, a2, a3, valuePtr);
  }
  else {
    return 0LL;
  }
}

_BYTE *iAP2MsgAddCFU8Param(uint64_t a1, uint64_t a2, __int16 a3, CFNumberRef number)
{
  if (!number) {
    return 0LL;
  }
  char valuePtr = -86;
  if (CFNumberGetValue(number, kCFNumberSInt8Type, &valuePtr)) {
    return iAP2MsgAddU8Param(a1, a2, a3, valuePtr);
  }
  else {
    return 0LL;
  }
}

_BYTE *iAP2MsgAddCFBooleanParam(uint64_t a1, uint64_t a2, __int16 a3, CFBooleanRef BOOLean)
{
  if (!BOOLean) {
    return 0LL;
  }
  char v7 = CFBooleanGetValue(BOOLean) != 0;
  return iAP2MsgAddU8Param(a1, a2, a3, v7);
}

_BYTE *iAP2MsgAddCFStringParam(uint64_t a1, uint64_t a2, __int16 a3, CFStringRef theString)
{
  CFIndex bufferSize = 0LL;
  if (!theString) {
    return 0LL;
  }
  v12.length = CFStringGetLength(theString);
  v12.location = 0LL;
  CFStringGetBytes(theString, v12, 0x8000100u, 0, 0, 0LL, 0LL, &bufferSize);
  ++bufferSize;
  FreeParam = (_BYTE *)iAP2MsgGetFreeParam(a1);
  if (FreeParam
    && bufferSize <= *(void *)(a1 + 24) + (unint64_t)*(unsigned int *)(a1 + 16) - *(void *)(a1 + 32) - 4)
  {
    iAP2MsgInitParam(a1, FreeParam, a3, 8, (unsigned __int16)(bufferSize + 4), a2);
    ParamValueData = (char *)iAP2MsgGetParamValueData((uint64_t)FreeParam);
    CFStringGetCString(theString, ParamValueData, bufferSize, 0x8000100u);
  }

  return FreeParam;
}

_BYTE *iAP2MsgAddCFU16ArrayParam(uint64_t a1, uint64_t a2, __int16 a3, CFArrayRef theArray)
{
  if (!theArray) {
    return 0LL;
  }
  unsigned __int16 valuePtr = -21846;
  CFIndex Count = CFArrayGetCount(theArray);
  FreeParam = (_BYTE *)iAP2MsgGetFreeParam(a1);
  if (FreeParam)
  {
    iAP2MsgInitParam(a1, FreeParam, a3, 9, (2 * (_WORD)Count + 4) & 0xFFFE, a2);
    uint64_t ParamValueData = iAP2MsgGetParamValueData((uint64_t)FreeParam);
    if (Count >= 1)
    {
      unint64_t v11 = (_WORD *)ParamValueData;
      CFIndex v12 = 0LL;
      while (1)
      {
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, v12);
        if (!CFNumberGetValue(ValueAtIndex, kCFNumberSInt16Type, &valuePtr)) {
          break;
        }
        *v11++ = bswap32(valuePtr) >> 16;
        if (Count == ++v12) {
          return FreeParam;
        }
      }

      return 0LL;
    }
  }

  return FreeParam;
}

BOOL iap2_sessionFileTransfer_init(BOOL result)
{
  if (result)
  {
    uint64_t v1 = result;
    size_t BuffSize = iAP2ListArrayGetBuffSize(128, 24);
    uint64_t v3 = malloc(0x18uLL);
    *(void *)(v1 + 432) = v3;
    BOOL v4 = malloc(BuffSize);
    void *v3 = v4;
    LODWORD(v1) = iAP2ListArrayInit((uint64_t)v4, 128, 0x18u);
    CFIndex v5 = malloc(BuffSize);
    v3[1] = v5;
    int v6 = iAP2ListArrayInit((uint64_t)v5, 128, 0x18u);
    char v7 = malloc(BuffSize);
    void v3[2] = v7;
    return (iAP2ListArrayInit((uint64_t)v7, 128, 0x18u) | v6 | v1) == 0;
  }

  return result;
}

uint64_t iap2_sessionFileTransfer_cleanup(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    int v2 = *(unsigned __int8 ***)(result + 432);
    if (v2)
    {
      if (gLogObjects) {
        BOOL v3 = gNumLogObjects < 24;
      }
      else {
        BOOL v3 = 1;
      }
      if (v3)
      {
        BOOL v4 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      else
      {
        BOOL v4 = *(os_log_s **)(gLogObjects + 184);
      }

      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        uint64_t v5 = *(void *)(v1 + 8);
        unsigned int Count = iAP2ListArrayGetCount(*v2);
        unsigned int v7 = iAP2ListArrayGetCount(v2[1]);
        unsigned int v8 = iAP2ListArrayGetCount(v2[2]);
        int v17 = 138413058;
        uint64_t v18 = v5;
        __int16 v19 = 1024;
        unsigned int v20 = Count;
        __int16 v21 = 1024;
        unsigned int v22 = v7;
        __int16 v23 = 1024;
        unsigned int v24 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "sessionFileTransfer cleanup: %@, list counts: in %d, out %d, remove %d",  (uint8_t *)&v17,  0x1Eu);
      }

      iap2_sessionFileTransfer_cleanUpRemoveTransferList(v1);
      if (iAP2ListArrayGetCount(*v2)
        || iAP2ListArrayGetCount(v2[1])
        || iAP2ListArrayGetCount(v2[2]))
      {
        if (gLogObjects && gNumLogObjects >= 24)
        {
          char v9 = *(os_log_s **)(gLogObjects + 184);
        }

        else
        {
          char v9 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v10 = *(void *)(v1 + 8);
          unsigned int v11 = iAP2ListArrayGetCount(*v2);
          unsigned int v12 = iAP2ListArrayGetCount(v2[1]);
          unsigned int v13 = iAP2ListArrayGetCount(v2[2]);
          int v17 = 138413058;
          uint64_t v18 = v10;
          __int16 v19 = 1024;
          unsigned int v20 = v11;
          __int16 v21 = 1024;
          unsigned int v22 = v12;
          __int16 v23 = 1024;
          unsigned int v24 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "sessionFileTransfer cleanup: %@, Still entries after cleanUpRemoveTransferList! list counts: in %d, out %d, remove %d",  (uint8_t *)&v17,  0x1Eu);
        }
      }

      if (*v2)
      {
        free(*v2);
        *int v2 = 0LL;
      }

      unint64_t v14 = v2[1];
      if (v14)
      {
        free(v14);
        v2[1] = 0LL;
      }

      int v15 = v2[2];
      if (v15)
      {
        free(v15);
        v2[2] = 0LL;
      }

      __int16 v16 = *(void **)(v1 + 432);
      if (v16)
      {
        free(v16);
        *(void *)(v1 + 432) = 0LL;
      }

      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

void iap2_sessionFileTransfer_cleanUpRemoveTransferList(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 432);
    if (v1)
    {
      if (gLogObjects) {
        BOOL v2 = gNumLogObjects < 24;
      }
      else {
        BOOL v2 = 1;
      }
      if (v2)
      {
        BOOL v3 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      else
      {
        BOOL v3 = *(os_log_s **)(gLogObjects + 184);
      }

      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
        iap2_sessionFileTransfer_cleanUpRemoveTransferList_cold_3();
      }
      BOOL v4 = *(_BYTE **)(v1 + 16);
      int LastItemIndex = iAP2ListArrayGetLastItemIndex((uint64_t)v4);
      if (LastItemIndex != 255)
      {
        unsigned __int8 v6 = LastItemIndex;
        int v7 = 0;
        do
        {
          unint64_t v8 = iAP2ListArrayItemForIndex((uint64_t)v4, v6);
          iAP2FileTransferRelease(*(void *)(v8 + 8));
          char v9 = *(void **)(v8 + 16);
          if (v9)
          {
            free(v9);
            *(void *)(v8 + 16) = 0LL;
          }

          uint64_t v10 = *(void **)(v8 + 8);
          if (v10)
          {
            free(v10);
            *(void *)(v8 + _Block_object_dispose(va, 8) = 0LL;
          }

          iAP2ListArrayDeleteItem(v4, v6, 0LL);
          ++v7;
          int v11 = iAP2ListArrayGetLastItemIndex((uint64_t)v4);
          unsigned __int8 v6 = v11;
        }

        while (v11 != 255);
      }

      if (gLogObjects && gNumLogObjects >= 24)
      {
        unsigned int v12 = *(os_log_s **)(gLogObjects + 184);
      }

      else
      {
        unsigned int v12 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
        iap2_sessionFileTransfer_cleanUpRemoveTransferList_cold_1();
      }
    }
  }

uint64_t iap2_sessionFileTransfer_start(unsigned __int8 *a1)
{
  if (a1)
  {
    unsigned int Version = iap2_sessionFileTransfer_getVersion(a1);
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 24;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      BOOL v3 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      BOOL v3 = *(os_log_s **)(gLogObjects + 184);
    }

    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v5[0] = 67109120;
      v5[1] = Version;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Starting fileTransfer session (version=%d)...",  (uint8_t *)v5,  8u);
    }
  }

  return 0LL;
}

unsigned __int8 *iap2_sessionFileTransfer_getVersion(unsigned __int8 *result)
{
  if (result)
  {
    uint64_t v1 = *((void *)result + 4);
    if (v1 && (BOOL v2 = *(unsigned __int8 **)(v1 + 24)) != 0LL)
    {
      int SessionForService = iAP2LinkGetSessionForService(*(void *)(v1 + 24), 1);
      uint64_t result = iAP2LinkGetSessionInfo(v2, SessionForService);
      if (result) {
        return (unsigned __int8 *)result[2];
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

unint64_t iap2_sessionFileTransfer_handleDatagram( unint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  unint64_t result = 0LL;
  if (a1)
  {
    if (a2)
    {
      int v7 = *a2;
      unint64_t result = iap2_sessionFileTransfer_findTransferEntry(a1, v7);
      if (result)
      {
        uint64_t v8 = *(void *)(result + 8);
        if (v8)
        {
          if (gLogObjects && gNumLogObjects >= 24)
          {
            char v9 = *(os_log_s **)(gLogObjects + 184);
          }

          else
          {
            char v9 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v10 = *(void *)(a1 + 8);
            uint64_t v11 = *(void *)(v8 + 16);
            int v12 = *(unsigned __int8 *)(v8 + 109);
            int v13 = 136316674;
            unint64_t v14 = "iap2_sessionFileTransfer_handleDatagram";
            __int16 v15 = 1024;
            int v16 = 158;
            __int16 v17 = 2112;
            uint64_t v18 = v10;
            __int16 v19 = 2048;
            uint64_t v20 = v8;
            __int16 v21 = 2048;
            uint64_t v22 = v11;
            __int16 v23 = 1024;
            int v24 = v12;
            __int16 v25 = 1024;
            int v26 = v7;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "%s:%d pEndpoint %@, fileXfer %p (buffer %p, id 0x%x), bufferID 0x%x",  (uint8_t *)&v13,  0x3Cu);
          }

          iAP2FileTransferHandleRecv(v8, (uint64_t)a2, a3);
          iap2_sessionFileTransfer_cleanUpRemoveTransferList(a1);
          return 1LL;
        }

        else
        {
          return 0LL;
        }
      }
    }
  }

  return result;
}

unint64_t iap2_sessionFileTransfer_findTransferEntry(unint64_t result, int a2)
{
  if (result)
  {
    BOOL v2 = *(void **)(result + 432);
    if (v2)
    {
      if ((a2 & 0x80) != 0)
      {
        if (*v2)
        {
          if (gLogObjects && gNumLogObjects >= 24)
          {
            unsigned __int8 v6 = *(os_log_s **)(gLogObjects + 184);
          }

          else
          {
            unsigned __int8 v6 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
            iap2_sessionFileTransfer_findTransferEntry_cold_4();
          }
          goto LABEL_20;
        }
      }

      else
      {
        uint64_t v4 = v2[1];
        ++v2;
        if (v4)
        {
          if (gLogObjects && gNumLogObjects >= 24)
          {
            uint64_t v5 = *(os_log_s **)(gLogObjects + 184);
          }

          else
          {
            uint64_t v5 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
            iap2_sessionFileTransfer_findTransferEntry_cold_2();
          }
LABEL_20:
          int v7 = (_BYTE *)*v2;
          v10[0] = 0xAAAAAAAAAAAAAAAALL;
          v10[1] = 0LL;
          LOBYTE(v10[0]) = a2;
          _DWORD v10[2] = 0LL;
          unsigned int Item = iAP2ListArrayFindItem( v7,  (uint64_t)v10,  (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))_compareBufferID);
          if (Item != 255) {
            return iAP2ListArrayItemForIndex((uint64_t)v7, Item);
          }
          if (gLogObjects && gNumLogObjects >= 24)
          {
            char v9 = *(os_log_s **)(gLogObjects + 184);
          }

          else
          {
            char v9 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            int v12 = a2;
            _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Failed to find transfer for bufferID(%u)!",  buf,  8u);
          }
        }
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t iap2_sessionFileTransfer_addTransferForFeature(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 0LL;
  if (!a1 || !a3) {
    return result;
  }
  int v7 = *(unsigned __int8 ***)(a1 + 432);
  if (!v7) {
    return 0LL;
  }
  if ((*(char *)(a3 + 109) & 0x80000000) == 0)
  {
    uint64_t v10 = v7 + 1;
    if (v7[1])
    {
      if (gLogObjects && gNumLogObjects >= 24)
      {
        uint64_t v11 = *(os_log_s **)(gLogObjects + 184);
      }

      else
      {
        uint64_t v11 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v13 = *(void *)(a1 + 8);
        int v14 = *(unsigned __int8 *)(a3 + 109);
        *(_DWORD *)buf = 138413058;
        *(void *)uint32_t v35 = v13;
        *(_WORD *)&v35[8] = 1024;
        *(_DWORD *)&_BYTE v35[10] = a2;
        __int16 v36 = 1024;
        int v37 = v14;
        __int16 v38 = 1024;
        BOOL v39 = a4 != 0;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "iap2_sessionFileTransfer_addTransferForFeature: %@ type=%d bufferID=%u context(%d), use inTransferList",  buf,  0x1Eu);
      }

      goto LABEL_21;
    }

    return 0LL;
  }

  if (!*v7) {
    return 0LL;
  }
  if (gLogObjects && gNumLogObjects >= 24)
  {
    int v12 = *(os_log_s **)(gLogObjects + 184);
  }

  else
  {
    int v12 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  uint64_t v10 = v7;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v28 = *(void *)(a1 + 8);
    int v29 = *(unsigned __int8 *)(a3 + 109);
    *(_DWORD *)buf = 138413058;
    *(void *)uint32_t v35 = v28;
    *(_WORD *)&v35[8] = 1024;
    *(_DWORD *)&_BYTE v35[10] = a2;
    __int16 v36 = 1024;
    int v37 = v29;
    __int16 v38 = 1024;
    BOOL v39 = a4 != 0;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "iap2_sessionFileTransfer_addTransferForFeature: %@ type=%d bufferID=%u context(%d), use outTransferList",  buf,  0x1Eu);
    uint64_t v10 = v7;
  }

unint64_t _compareBufferIDAndFeatureType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  unint64_t result = v3 - v4;
  if (v3 == v4) {
    return *((unsigned int *)a1 + 1) - (unint64_t)*((unsigned int *)a2 + 1);
  }
  return result;
}

uint64_t iap2_sessionFileTransfer_removeTransferForFeature(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result = 0LL;
  if (!a1 || !a3) {
    return result;
  }
  unsigned __int8 v6 = *(void **)(a1 + 432);
  if (!v6) {
    return 0LL;
  }
  if ((*(char *)(a3 + 109) & 0x80000000) == 0)
  {
    uint64_t v8 = (_BYTE **)(v6 + 1);
    if (v6[1])
    {
      if (gLogObjects && gNumLogObjects >= 24)
      {
        char v9 = *(os_log_s **)(gLogObjects + 184);
      }

      else
      {
        char v9 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v11 = *(void *)(a1 + 8);
        int v12 = *(unsigned __int8 *)(a3 + 109);
        *(_DWORD *)buf = 138412802;
        *(void *)BOOL v30 = v11;
        *(_WORD *)&v30[8] = 1024;
        *(_DWORD *)&v30[10] = a2;
        __int16 v31 = 1024;
        int v32 = v12;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "iap2_sessionFileTransfer_removeTransferForFeature: %@ type=%d bufferID=%u, use inTransferList",  buf,  0x18u);
      }

      goto LABEL_21;
    }

    return 0LL;
  }

  if (!*v6) {
    return 0LL;
  }
  if (gLogObjects && gNumLogObjects >= 24)
  {
    uint64_t v10 = *(os_log_s **)(gLogObjects + 184);
  }

  else
  {
    uint64_t v10 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  uint64_t v8 = (_BYTE **)v6;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v24 = *(void *)(a1 + 8);
    int v25 = *(unsigned __int8 *)(a3 + 109);
    *(_DWORD *)buf = 138412802;
    *(void *)BOOL v30 = v24;
    *(_WORD *)&v30[8] = 1024;
    *(_DWORD *)&v30[10] = a2;
    __int16 v31 = 1024;
    int v32 = v25;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "iap2_sessionFileTransfer_removeTransferForFeature: %@ type=%d bufferID=%u, use outTransferList",  buf,  0x18u);
    uint64_t v8 = (_BYTE **)v6;
  }

unint64_t _compareBufferID(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 - (unint64_t)*a2;
}

unint64_t iap2_sessionFileTransfer_findTransferEntryForFeature( uint64_t a1, char a2, unsigned __int8 *a3, uint64_t (*a4)(unsigned __int8 *, uint64_t, uint64_t))
{
  unint64_t result = 0LL;
  if (a1 && a3 && a4)
  {
    uint64_t v8 = *(uint64_t **)(a1 + 432);
    if (v8)
    {
      if (a2 < 0)
      {
        if (*v8)
        {
          if (gLogObjects && gNumLogObjects >= 24)
          {
            uint64_t v11 = *(os_log_s **)(gLogObjects + 184);
          }

          else
          {
            uint64_t v11 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
            iap2_sessionFileTransfer_findTransferEntryForFeature_cold_5();
          }
          goto LABEL_22;
        }
      }

      else
      {
        uint64_t v9 = v8[1];
        ++v8;
        if (v9)
        {
          if (gLogObjects && gNumLogObjects >= 24)
          {
            uint64_t v10 = *(os_log_s **)(gLogObjects + 184);
          }

          else
          {
            uint64_t v10 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
            iap2_sessionFileTransfer_findTransferEntryForFeature_cold_3();
          }
LABEL_22:
          uint64_t v12 = *v8;
          unsigned int Item = iAP2ListArrayFindItem((_BYTE *)*v8, (uint64_t)a3, a4);
          if (Item != 255) {
            return iAP2ListArrayItemForIndex(v12, Item);
          }
          if (gLogObjects && gNumLogObjects >= 24)
          {
            int v14 = *(os_log_s **)(gLogObjects + 184);
          }

          else
          {
            int v14 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
            iap2_sessionFileTransfer_findTransferEntryForFeature_cold_1(a3, v14);
          }
        }
      }
    }

    return 0LL;
  }

  return result;
}

  ;
}

void OUTLINED_FUNCTION_4_5(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

void OUTLINED_FUNCTION_5_5(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

id logObjectForModule_7()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 7;
  }
  else {
    BOOL v0 = 1;
  }
  if (v0)
  {
    BOOL v1 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v1) {
      logObjectForModule_cold_1(v1, v2, v3, v4, v5, v6, v7, v8);
    }
    id v10 = &_os_log_default;
    id v9 = &_os_log_default;
  }

  else
  {
    id v10 = *(id *)(gLogObjects + 48);
  }

  return v10;
}

LABEL_9:
}
}
}

LABEL_88:
                  goto LABEL_116;
                }

                CFStringRef v57 = xpc_dictionary_get_uint64(v6, "portID");
                *(void *)buf = 0LL;
                uint64_t v61 = xpc_dictionary_get_data(v6, "certData", (size_t *)buf);
                CFAllocatorRef v51 = 0LL;
                if (v61 && *(void *)buf) {
                  CFAllocatorRef v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v61));
                }
                int v59 = (ACCClientPortShim *)objc_claimAutoreleasedReturnValue( +[PlatformIAPDBridge sharedPlatformIAPDBridge]( &OBJC_CLASS___PlatformIAPDBridge,  "sharedPlatformIAPDBridge"));
                __int16 v52 = v59;
                __int16 v60 = 0LL;
              }

              -[ACCClientPortShim _handleAuthenticationState:forPortID:certData:]( v59,  "_handleAuthenticationState:forPortID:certData:",  v60,  v57,  v51);
              goto LABEL_114;
            }

            reply = xpc_dictionary_create_reply(v6);
            CFDataRef v55 = xpc_dictionary_get_uint64(v6, "portID");
            __int16 v56 = (void *)objc_claimAutoreleasedReturnValue( +[PlatformIAPDBridge sharedPlatformIAPDBridge]( &OBJC_CLASS___PlatformIAPDBridge,  "sharedPlatformIAPDBridge"));
            LOBYTE(v55) = [v56 _getPortLockout:v55];

            xpc_dictionary_set_uint64(reply, "result", 0LL);
            uint64_t v34 = "bAuthLockout";
            uint32_t v35 = reply;
            uint64_t v33 = v55;
            goto LABEL_70;
          }

          BOOL v39 = xpc_dictionary_get_string(v6, "IAPClientPortUUIDStr");
          if (!v39) {
            goto LABEL_116;
          }
          CFDictionaryRef v40 = v39;
          if (gLogObjects && gNumLogObjects >= 7)
          {
            __int16 v41 = (os_log_s *)*(id *)(gLogObjects + 48);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            __int16 v41 = (os_log_s *)&_os_log_default;
            __int16 v54 = &_os_log_default;
          }

          if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            *(void *)&uint8_t buf[4] = v40;
            _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "[#iapd Bridge] _xpc_iaptransportd_handle_incoming_request handling kXPCIAPClientPortUnregisterStr for uuid: %s",  buf,  0xCu);
          }

          CFAllocatorRef v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v40));
          __int16 v52 = (ACCClientPortShim *)objc_claimAutoreleasedReturnValue( -[ACCClientPortShimManager findClientPortForUUID:]( self->_clienPortShimManager,  "findClientPortForUUID:",  v51));
          if (v52)
          {
            -[ACCClientPortShimManager removeClienPortForUUID:]( self->_clienPortShimManager,  "removeClienPortForUUID:",  v51);
            -[ACCClientPortShim shutdown](v52, "shutdown");
          }
        }

                  if (!--v32) {
                    break;
                  }
                  continue;
                default:
                  goto LABEL_88;
              }

              break;
            }
          }

          MsgLen = iAP2MsgGetMsgLen(v12);
          __int16 v54 = v20[353];
          CFDataRef v55 = gNumLogObjects;
          if (v54 && gNumLogObjects >= 40)
          {
            __int16 v56 = *(os_log_s **)(v54 + 312);
          }

          else
          {
            __int16 v56 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = v66;
              *(void *)__int16 v93 = v54;
              *(_WORD *)&v93[8] = 1024;
              v94[0] = v55;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            }
          }

          if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = v65;
            *(_DWORD *)__int16 v93 = MsgLen;
            *(_WORD *)&v93[4] = 1024;
            *(_DWORD *)&v93[6] = v78;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEBUG,  "messageSize: %d bytes, messageCutoffSize: %d bytes",  buf,  0xEu);
          }

          if (MsgLen > v78 || v24 == v75)
          {
            CFStringRef v57 = v20[353];
            __int16 v58 = gNumLogObjects;
            a2 = v77;
            if (v57 && gNumLogObjects >= 40)
            {
              int v59 = *(os_log_s **)(v57 + 312);
            }

            else
            {
              int v59 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = v66;
                *(void *)__int16 v93 = v57;
                *(_WORD *)&v93[8] = 1024;
                v94[0] = v58;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              }
            }

            if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
            {
              __int16 v60 = v72 + 1;
              *(_DWORD *)buf = v68;
              *(_DWORD *)__int16 v93 = (unsigned __int16)v72;
              *(_WORD *)&v93[4] = 1024;
              *(_DWORD *)&v93[6] = v24 + 1;
              LOWORD(v94[0]) = 1024;
              *(_DWORD *)((char *)v94 + 2) = v69;
              _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_INFO,  "Sending ListUpdate message (RecentsList %d, entry: %d/%d)",  buf,  0x14u);
              __int16 v72 = v60;
            }

            int v26 = v90;
            if ((_WORD)v90)
            {
              uint64_t v61 = v71;
              __int128 v62 = iap2_sessionControl_sendOutgoingMessage(v71, v12);
              v74 &= v62;
              if (v24 < v70)
              {
                iAP2MsgInit(v12, 16753, v61[24], 0xFFFF, 0LL, 0LL);
                int v26 = 0;
              }
            }

            else
            {
              int v26 = 0;
            }
          }

          else
          {
            a2 = v77;
            int v26 = v90;
          }
        }

        ++v24;
        ++v25;
      }

      while (v24 != v80);
    }

    else
    {
      int v74 = 1;
    }

    return v74 & 1;
  }

  return result;
}

LABEL_114:
        goto LABEL_115;
      }

      reply = xpc_dictionary_create_reply(v6);
      if (reply)
      {
        int v32 = (void *)objc_claimAutoreleasedReturnValue( +[PlatformIAPDBridge sharedPlatformIAPDBridge]( &OBJC_CLASS___PlatformIAPDBridge,  "sharedPlatformIAPDBridge"));
        [v32 _E75To30PinAdapterConnected];

        xpc_dictionary_set_uint64(reply, "result", 0LL);
        uint64_t v33 = gb139b164ConnectedState;
        uint64_t v34 = "bHasE75To30PinAdapter";
        uint32_t v35 = reply;
LABEL_70:
        xpc_dictionary_set_BOOL(v35, v34, v33);
        goto LABEL_71;
      }
    }

    goto LABEL_116;
  }

  uint64_t v8 = xpc_copy_description(v6);
  id v9 = xpc_copy_description(v7);
  id v10 = v9;
  if (v8 && v9)
  {
    if (gLogObjects && gNumLogObjects >= 7)
    {
      uint64_t v11 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v11 = (os_log_s *)&_os_log_default;
      int v14 = &_os_log_default;
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&_BYTE buf[14] = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[#iapd Bridge] unexpected event: %s for connection: %s\n",  buf,  0x16u);
    }
  }

  else if (!v8)
  {
    if (!v9) {
      goto LABEL_116;
    }
    goto LABEL_21;
  }

  free(v8);
  if (v10) {
LABEL_21:
  }
    free(v10);
LABEL_116:
}

void platform_iapd_bridge_accessory_connected(uint64_t a1, int a2)
{
  if (a2)
  {
    if (gLogObjects) {
      BOOL v3 = gNumLogObjects < 7;
    }
    else {
      BOOL v3 = 1;
    }
    if (v3)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v5 = (os_log_s *)&_os_log_default;
      id v4 = &_os_log_default;
    }

    else
    {
      uint64_t v5 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      platform_iapd_bridge_accessory_connected_cold_1();
    }
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[PlatformIAPDBridge sharedPlatformIAPDBridge]( &OBJC_CLASS___PlatformIAPDBridge,  "sharedPlatformIAPDBridge"));
  [v6 iapdAccessoryArrived:a1];
}

void platform_iapd_bridge_accessory_disconnected(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[PlatformIAPDBridge sharedPlatformIAPDBridge]( &OBJC_CLASS___PlatformIAPDBridge,  "sharedPlatformIAPDBridge"));
  [v2 iapdAccessoryLeft:a1];
}

uint64_t platform_iapd_bridge_accessory_processIncomingData(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if (*(_DWORD *)(result + 24) == 7)
    {
      if (gLogObjects) {
        BOOL v3 = gNumLogObjects < 7;
      }
      else {
        BOOL v3 = 1;
      }
      if (v3)
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v8 = (os_log_s *)&_os_log_default;
        id v4 = &_os_log_default;
      }

      else
      {
        uint64_t v8 = (os_log_s *)*(id *)(gLogObjects + 48);
      }

      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        int v9 = *(_DWORD *)(v2 + 24);
        v10[0] = 67109120;
        v10[1] = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "[#iapd Bridge] Dropping iAP1 bytes over %{coreacc:ACCEndpoint_TransportType_t}d!",  (uint8_t *)v10,  8u);
      }

      return 1LL;
    }

    else
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[PlatformIAPDBridge sharedPlatformIAPDBridge]( &OBJC_CLASS___PlatformIAPDBridge,  "sharedPlatformIAPDBridge"));
      id v7 = [v6 iapdAccessory:v2 dataArrivedFromAccessory:a2];

      return (uint64_t)v7;
    }
  }

  return result;
}

uint64_t iAP2TimeGetCurTimeMs()
{
  v1.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v1.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v1, 0LL);
  return (v1.tv_usec / 1000 + 1000 * LODWORD(v1.tv_sec));
}

__darwin_time_t iAP2TimeGetCurTimeMsInt64()
{
  v1.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v1.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v1, 0LL);
  return 1000 * v1.tv_sec + v1.tv_usec / 1000;
}

uint64_t iAP2TimeGetBuffSize(int a1)
{
  return (iAP2ListArrayGetBuffSize(a1, 8) + 67) & 0xFFFFFFFC;
}

uint64_t iAP2TimeCreate(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  if (!a5) {
    iAP2TimeCreate_cold_1();
  }
  if (!a2) {
    iAP2TimeCreate_cold_2();
  }
  if (a4 == 255) {
    iAP2TimeCreate_cold_3();
  }
  if (!a4) {
    iAP2TimeCreate_cold_4();
  }
  *(void *)(a5 + 16) = a1;
  *(void *)(a5 + 24) = 0LL;
  *(void *)(a5 + 32) = a2;
  *(void *)(a5 + 40) = a3;
  *(_BYTE *)(a5 + 61) = a4;
  *(_DWORD *)(a5 + 56) = -1;
  *(_BYTE *)(a5 + 60) = 0;
  *(void *)(a5 + 4_Block_object_dispose(va, 8) = a5 + 64;
  uint64_t v6 = a5 + 64 + iAP2ListArrayGetBuffSize(a4, 8);
  iAP2ListArrayInit(*(void *)(a5 + 48), *(unsigned __int8 *)(a5 + 61), 8u);
  *(void *)a5 = a5;
  *(void *)(a5 + _Block_object_dispose(va, 8) = v6;
  return a5;
}

void iAP2TimeDelete(uint64_t a1)
{
  if (a1)
  {
    *(_DWORD *)(a1 + 56) = -1;
    _iAP2TimeCancelCallback(a1);
    iAP2ListArrayCleanup(*(_BYTE **)(a1 + 48), 0LL);
    _iAP2TimeCleanupCallback(a1);
  }

uint64_t iAP2TimeGetContext(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

uint64_t iAP2TimeCallbackAfter(uint64_t a1, char a2, int a3)
{
  if (!a1) {
    return 255LL;
  }
  unint64_t __src = 0xAAAAAAAAAAAAAAAALL;
  v12.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  unsigned int v6 = *(unsigned __int8 *)(a1 + 60);
  int v7 = (v6 + 1);
  if (v7 == v6 + 1) {
    char v8 = v6 + 1;
  }
  else {
    char v8 = 1;
  }
  *(_BYTE *)(a1 + 60) = v8;
  if (v7 == v6 + 1) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = 0LL;
  }
  *(void *)&v12.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v12, 0LL);
  LODWORD(__src) = v12.tv_usec / 1000 + a3 + 1000 * LODWORD(v12.tv_sec);
  BYTE4(__src) = v9;
  BYTE5(__src) = a2;
  iAP2ListArrayAddItemInOrder( *(unsigned __int8 **)(a1 + 48),  &__src,  (uint64_t (*)(unsigned __int8 *, void *, uint64_t))_iAP2TimeCompareTimeout);
  _iAP2TimeCheckTimeouts(a1);
  return v9;
}

uint64_t _iAP2TimeCompareTimeout(_DWORD *a1, _DWORD *a2)
{
  return (*a1 - *a2);
}

unsigned int *_iAP2TimeCheckTimeouts(uint64_t a1)
{
  unsigned int FirstItemIndex = iAP2ListArrayGetFirstItemIndex(*(void *)(a1 + 48));
  unint64_t result = (unsigned int *)iAP2ListArrayItemForIndex(*(void *)(a1 + 48), FirstItemIndex);
  if (result)
  {
    id v4 = result;
    unsigned int v5 = *(_DWORD *)(a1 + 56);
    if (*result < v5 || v5 == -1)
    {
      if (v5 != -1)
      {
        *(_DWORD *)(a1 + 56) = -1;
        _iAP2TimeCancelCallback(a1);
      }

      memset(v13, 170, 16);
      gettimeofday((timeval *)v13, 0LL);
      unsigned int v7 = *(_DWORD *)&v13[8] / 1000 + 1000 * *(_DWORD *)v13;
      unsigned int v8 = *v4;
      *(_DWORD *)(a1 + 56) = *v4;
      if (v8 < v7 && (_iAP2LogEnableMask & 1) != 0)
      {
        uint64_t v9 = gLogObjects;
        int v10 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 20)
        {
          uint64_t v11 = *(os_log_s **)(gLogObjects + 152);
        }

        else
        {
          uint64_t v11 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v13 = 134218240;
            *(void *)&v13[4] = v9;
            *(_WORD *)&v13[12] = 1024;
            *(_DWORD *)&v13[14] = v10;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  v13,  0x12u);
            unsigned int v8 = *v4;
          }
        }

        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t v13 = 67109632;
          *(_DWORD *)&v13[4] = v8;
          *(_WORD *)&v13[8] = 1024;
          *(_DWORD *)&v13[10] = v7;
          *(_WORD *)&v13[14] = 1024;
          *(_DWORD *)&v13[16] = v8 - v7;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "ERROR: WARNING: timeout(%u) < curTime(%u) !!!, diff = %d, Correcting",  v13,  0x14u);
          unsigned int v8 = *v4;
        }
      }

      if (v8 >= v7) {
        unsigned int v12 = v8 - v7;
      }
      else {
        unsigned int v12 = 0;
      }
      return (unsigned int *)_iAP2TimeCallbackAfter(a1, v12, (uint64_t)_iAP2TimeHandleExpired);
    }
  }

  return result;
}

unsigned int *iAP2TimeCancelTimer(unsigned int *result, char a2)
{
  if (result)
  {
    uint64_t v2 = (uint64_t)result;
    unint64_t v3 = 0xAAAAAAAAAAAAAAAALL;
    BYTE4(v3) = a2;
    unint64_t result = (unsigned int *)iAP2ListArrayFindItem( *((_BYTE **)result + 6),  (uint64_t)&v3,  (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))_iAP2TimeCompareID);
    if ((_DWORD)result != 255)
    {
      iAP2ListArrayDeleteItem(*(_BYTE **)(v2 + 48), result, 0LL);
      return _iAP2TimeCheckTimeouts(v2);
    }
  }

  return result;
}

unint64_t _iAP2TimeCompareID(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a1 + 4) - (unint64_t)*(unsigned __int8 *)(a2 + 4);
}

uint64_t _iAP2TimeHandleExpired(uint64_t a1, uint64_t a2)
{
  unsigned int FirstItemIndex = iAP2ListArrayGetFirstItemIndex(*(void *)(a1 + 48));
  unsigned __int8 v5 = FirstItemIndex;
  unint64_t v6 = iAP2ListArrayItemForIndex(*(void *)(a1 + 48), FirstItemIndex);
  for (*(_DWORD *)(a1 + 56) = -1; v6; unint64_t v6 = iAP2ListArrayItemForIndex(*(void *)(a1 + 48), v10))
  {
    unsigned int v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
    uint64_t v8 = *(unsigned __int8 *)(v6 + 4);
    uint64_t v9 = *(unsigned __int8 *)(v6 + 5);
    iAP2ListArrayDeleteItem(*(_BYTE **)(a1 + 48), v5, 0LL);
    v7(a1, v8, v9, a2);
    unsigned int v10 = iAP2ListArrayGetFirstItemIndex(*(void *)(a1 + 48));
    unsigned __int8 v5 = v10;
  }

  return _iAP2TimeCheckTimeouts(a1);
}

void sub_1000357BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, id a18)
{
}

void init_logging_modules(uint64_t a1, char a2, uint64_t a3)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = __init_logging_modules_block_invoke;
  block[3] = &__block_descriptor_tmp_3;
  char v4 = a2;
  block[4] = a3;
  block[5] = a1;
  if (init_logging_modules_onceToken != -1) {
    dispatch_once(&init_logging_modules_onceToken, block);
  }
}

void __init_logging_modules_block_invoke(uint64_t a1)
{
  uint64_t v2 = &off_10019D000;
  if (*(_BYTE *)(a1 + 48))
  {
    uint64_t v3 = 0LL;
    unint64_t v4 = 0LL;
    int v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(a1 + 32);
      unsigned int v7 = *(const char **)(v6 + v3);
      if (!v7)
      {
        unsigned int v7 = "<Undefined>";
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v12) = v4;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Subsystem missing for logging module %d!\n(Check LoggingModuleEntry_t table)",  buf,  8u);
          uint64_t v6 = *(void *)(a1 + 32);
          unsigned int v7 = "<Undefined>";
        }
      }

      uint64_t v8 = *(const char **)(v6 + v3 + 8);
      if (!v8)
      {
        uint64_t v8 = "<Undefined>";
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          __init_logging_modules_block_invoke_cold_1(v15, v4, &v16);
          uint64_t v8 = "<Undefined>";
        }
      }

      os_log_t v9 = os_log_create(v7, v8);
      *(void *)(*(void *)(a1 + 40) + 8 * v4) = v9;
      if (v9)
      {
        ++v5;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          unsigned int v12 = v7;
          __int16 v13 = 2080;
          int v14 = v8;
          _os_log_debug_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEBUG,  "Created log object %s: %s",  buf,  0x16u);
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        unsigned int v12 = v7;
        __int16 v13 = 2080;
        int v14 = v8;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Failed to create os_log_t object %s: %s!",  buf,  0x16u);
      }

      ++v4;
      unint64_t v10 = *(unsigned __int8 *)(a1 + 48);
      v3 += 16LL;
    }

    while (v4 < v10);
    uint64_t v2 = &off_10019D000;
  }

  else
  {
    LODWORD(v10) = 0;
    int v5 = 0;
  }

  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = *((void *)v2 + 338);
    LODWORD(v12) = v5;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "Created %d log object(s)!",  buf,  8u);
    LODWORD(v10) = *(unsigned __int8 *)(a1 + 48);
  }

  gLogObjects = *(void *)(a1 + 40);
  gNumLogObjects = v10;
}

dispatch_object_t *audioProductCerts_endpoint_create(uint64_t *a1)
{
  if (!a1)
  {
    unsigned int v17 = (os_log_s *)logObjectForModule_8();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      audioProductCerts_endpoint_create_cold_1(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    return 0LL;
  }

  if (!*a1)
  {
    int v25 = (os_log_s *)logObjectForModule_8();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      audioProductCerts_endpoint_create_cold_2(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    return 0LL;
  }

  uint64_t v2 = (dispatch_object_t *)calloc(1uLL, 0x78uLL);
  if (v2)
  {
    if (gLogObjects && gNumLogObjects >= 58)
    {
      uint64_t v3 = *(os_log_s **)(gLogObjects + 456);
    }

    else
    {
      uint64_t v3 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *((_DWORD *)a1 + 6);
      *(_DWORD *)uint64_t v33 = 67109120;
      *(_DWORD *)&v33[4] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "audioProductCerts create: transportType %{coreacc:ACCEndpoint_TransportType_t}d",  v33,  8u);
    }

    dispatch_queue_t v5 = dispatch_queue_create("AudioProductCertsQ", 0LL);
    v2[6] = v5;
    if (v5)
    {
      dispatch_set_context(v5, v2);
      dispatch_set_finalizer_f(v2[6], (dispatch_function_t)_audioProductCerts_endpoint_dispatchQueueFinalizer);
      *uint64_t v2 = (dispatch_object_t)a1;
      _audioProductCerts_endpoint_initSession((uint64_t)v2);
      uint64_t v11 = *a1;
      if (*(void *)(*a1 + 16) && *(_DWORD *)(v11 + 8) == 2)
      {
        uint64_t v12 = gLogObjects;
        int v13 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 58)
        {
          int v14 = *(os_log_s **)(gLogObjects + 456);
        }

        else
        {
          int v14 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v33 = 134218240;
            *(void *)&v33[4] = v12;
            __int16 v34 = 1024;
            int v35 = v13;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  v33,  0x12u);
            uint64_t v11 = *a1;
          }
        }

        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v15 = *(void *)(v11 + 16);
          *(_DWORD *)uint64_t v33 = 138412290;
          *(void *)&v33[4] = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "audioProductCerts create: macAddress %@",  v33,  0xCu);
          uint64_t v11 = *a1;
        }

        acc_endpoint_setProperty( (pthread_mutex_t *)a1,  kCFACCProperties_Endpoint_AACP_MACAddress,  *(const __CFNull **)(v11 + 16));
      }

      acc_platform_packetLogging_logEvent( (uint64_t)*v2,  "ATTACH",  (uint64_t)"AudioProductCerts accessory attached!",  v6,  v7,  v8,  v9,  v10,  *(uint64_t *)v33);
      acc_platform_audioProductCerts_accessoryAttach(a1[1], a1[2]);
    }
  }

  return v2;
}

void *logObjectForModule_8()
{
  if (gLogObjects && gNumLogObjects >= 58) {
    return *(void **)(gLogObjects + 456);
  }
  BOOL v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

void _audioProductCerts_endpoint_dispatchQueueFinalizer(void *a1)
{
  if (gLogObjects && gNumLogObjects >= 58)
  {
    uint64_t v2 = *(os_log_s **)(gLogObjects + 456);
  }

  else
  {
    uint64_t v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "audioProductCerts dispatchQueueFinalizer: cleanupSession",  buf,  2u);
  }

  _audioProductCerts_endpoint_cleanupSession((uint64_t)a1);
  if (gLogObjects && gNumLogObjects >= 58)
  {
    uint64_t v3 = *(os_log_s **)(gLogObjects + 456);
  }

  else
  {
    uint64_t v3 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "audioProductCerts dispatchQueueFinalizer: free pProtocolEndpoint",  v4,  2u);
  }

  if (a1) {
    free(a1);
  }
}

uint64_t _audioProductCerts_endpoint_initSession(uint64_t a1)
{
  *(CFAbsoluteTime *)(a1 + 56) = CFAbsoluteTimeGetCurrent();
  if (gLogObjects && gNumLogObjects >= 58)
  {
    uint64_t v2 = *(os_log_s **)(gLogObjects + 456);
  }

  else
  {
    uint64_t v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v3 = *(_DWORD *)(*(void *)a1 + 24LL);
    uint64_t v4 = *(void *)(a1 + 56);
    v7[0] = 67109376;
    v7[1] = v3;
    __int16 v8 = 2048;
    uint64_t v9 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "audioProductCerts initSession: %{coreacc:ACCEndpoint_TransportType_t}d, attachTimestamp %f",  (uint8_t *)v7,  0x12u);
  }

  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 16) = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  *(void *)(a1 + 24) = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  *(void *)(a1 + 32) = platform_auth_createCertificateCache(@"com.apple.accessoryd");
  *(_DWORD *)(a1 + 40) = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = Mutable;
  *(_DWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 80) = 5;
  return 1LL;
}

uint64_t audioProductCerts_endpoint_publish(BOOL *a1, uint64_t a2)
{
  if (!a1) {
    goto LABEL_55;
  }
  int v3 = (void *)*a1;
  if (!*a1 || !*v3) {
    goto LABEL_55;
  }
  int Protocol = acc_endpoint_getProtocol((uint64_t)v3);
  BOOL v6 = acc_policies_allowAudioProductCertsOnTransport(*(_DWORD *)(*a1 + 24));
  if (gLogObjects && gNumLogObjects >= 58)
  {
    uint64_t v7 = *(os_log_s **)(gLogObjects + 456);
  }

  else
  {
    uint64_t v7 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(_DWORD *)(*a1 + 24);
    *(_DWORD *)buf = 67109376;
    int v43 = v8;
    __int16 v44 = 1024;
    BOOL v45 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "audioProductCerts publish: transportType %{coreacc:ACCEndpoint_TransportType_t}d, allowed %d ",  buf,  0xEu);
  }

  if (Protocol == 13)
  {
    BOOL isPublished = acc_endpoint_isPublished(*a1);
    CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 1LL, &kCFTypeArrayCallBacks);
    if (*a1) {
      uint64_t v11 = *(const void **)(*a1 + 16);
    }
    else {
      uint64_t v11 = 0LL;
    }
    CFDataRef cf = Mutable;
    CFArrayAppendValue(Mutable, v11);
    uint64_t v12 = acc_accInfo_copyAccessoryInfoDictionary(a2);
    if (v12) {
      MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, (CFDictionaryRef)v12);
    }
    else {
      MutableCFArrayRef Copy = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    }
    CFMutableDictionaryRef v14 = MutableCopy;
    if (gLogObjects && gNumLogObjects >= 58)
    {
      uint64_t v15 = *(os_log_s **)(gLogObjects + 456);
    }

    else
    {
      uint64_t v15 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109634;
      int v43 = v6;
      __int16 v44 = 1024;
      BOOL v45 = isPublished;
      __int16 v46 = 2112;
      CFMutableDictionaryRef v47 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "audioProductCerts publish: transportAllowed %d, wasPublished = %d, accInfoDict = %@ ",  buf,  0x18u);
    }

    if (v6)
    {
      int v16 = acc_endpoint_copyProperties((pthread_mutex_t *)*a1);
      if (v16)
      {
        unsigned int v17 = v16;
        CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)v16);
        uint64_t v19 = CFDictionaryCreateMutable( kCFAllocatorDefault,  Count + 2,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
        if (gLogObjects && gNumLogObjects >= 58)
        {
          uint64_t v20 = *(os_log_s **)(gLogObjects + 456);
        }

        else
        {
          uint64_t v20 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
          audioProductCerts_endpoint_publish_cold_4((uint64_t)v17, v20, v21, v22, v23, v24, v25, v26);
        }
        if (v19)
        {
          CFDictionaryAddValue( v19,  CFACCTransportPlugin_PropertiesDidChangeNotification_ConnectionUUID,  *(const void **)(*a1 + 8));
          CFDictionaryAddValue( v19,  CFACCTransportPlugin_EndpointPropertiesDidChangeNotification_EndpointUUID,  *(const void **)(*a1 + 16));
          CFDictionaryAddValue(v19, CFACCTransportPlugin_PropertiesDidChangeNotification_PropertiesNew, v17);
          if (gLogObjects && gNumLogObjects >= 58)
          {
            uint64_t v27 = *(os_log_s **)(gLogObjects + 456);
          }

          else
          {
            uint64_t v27 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG)) {
            audioProductCerts_endpoint_publish_cold_2((uint64_t)v19, v27, v28, v29, v30, v31, v32, v33);
          }
          CFNotificationCenterRef LocalCenter = CFNotificationCenterGetLocalCenter();
          _audioProductCerts_endpoint_handlePropertiesDidChange( (uint64_t)LocalCenter,  v35,  CFACCTransportPlugin_EndpointPropertiesDidChangeNotification,  v36,  v19);
          CFRelease(v19);
        }

        CFRelease(v17);
      }
    }

    if (v12) {
      CFRelease(v12);
    }
    if (v14) {
      CFRelease(v14);
    }
    if (cf) {
      CFRelease(cf);
    }
    return 1LL;
  }

  else
  {
LABEL_55:
    if (gLogObjects && gNumLogObjects >= 58)
    {
      __int16 v38 = *(os_log_s **)(gLogObjects + 456);
    }

    else
    {
      __int16 v38 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    BOOL v39 = os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0LL;
    if (v39)
    {
      if (a1 && *a1) {
        int v40 = *(_DWORD *)(*a1 + 24);
      }
      else {
        int v40 = 17;
      }
      *(_DWORD *)buf = 67109120;
      int v43 = v40;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "audioProductCerts publish: transportType %{coreacc:ACCEndpoint_TransportType_t}d, Failed to publish!!! ",  buf,  8u);
      return 0LL;
    }
  }

  return result;
}

void __audioProductCerts_endpoint_publish_block_invoke(id a1)
{
  if (gLogObjects && gNumLogObjects >= 58)
  {
    timeval v1 = *(os_log_s **)(gLogObjects + 456);
  }

  else
  {
    timeval v1 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v3 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "audioProductCerts publish: CFNotificationCenterAddObserver",  v3,  2u);
  }

  CFNotificationCenterRef LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver( LocalCenter,  0LL,  (CFNotificationCallback)_audioProductCerts_endpoint_handlePropertiesDidChange,  CFACCTransportPlugin_EndpointPropertiesDidChangeNotification,  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
}

void _audioProductCerts_endpoint_handlePropertiesDidChange( uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, const __CFDictionary *a5)
{
  if (gLogObjects && gNumLogObjects >= 58)
  {
    uint64_t v7 = *(os_log_s **)(gLogObjects + 456);
  }

  else
  {
    uint64_t v7 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    _audioProductCerts_endpoint_handlePropertiesDidChange_cold_3((uint64_t)a3);
  }
  if (CFEqual(a3, CFACCTransportPlugin_EndpointPropertiesDidChangeNotification))
  {
    if (gLogObjects && gNumLogObjects >= 58)
    {
      int v8 = *(os_log_s **)(gLogObjects + 456);
    }

    else
    {
      int v8 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      uint64_t v21 = a3;
      __int16 v22 = 2112;
      uint64_t v23 = a5;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Notification received %@, userInfo: %@",  buf,  0x16u);
    }

    uint64_t Value = CFDictionaryGetValue(a5, CFACCTransportPlugin_PropertiesDidChangeNotification_ConnectionUUID);
    uint64_t v10 = CFDictionaryGetValue(a5, CFACCTransportPlugin_EndpointPropertiesDidChangeNotification_EndpointUUID);
    if (Value)
    {
      uint64_t v11 = v10;
      CFTypeID v12 = CFGetTypeID(Value);
      if (v12 == CFStringGetTypeID())
      {
        if (v11)
        {
          CFTypeID v13 = CFGetTypeID(v11);
          if (v13 == CFStringGetTypeID())
          {
            EndpointWithUUID = acc_manager_getEndpointWithUUID(v11);
            if (EndpointWithUUID)
            {
              if (*((_DWORD *)EndpointWithUUID + 7) == 13)
              {
                uint64_t v15 = EndpointWithUUID[7];
                if (v15)
                {
                  CFDictionaryGetValue(a5, CFACCTransportPlugin_PropertiesDidChangeNotification_PropertiesOld);
                  int v16 = CFDictionaryGetValue(a5, CFACCTransportPlugin_PropertiesDidChangeNotification_PropertiesNew);
                  unsigned int v17 = (os_log_s *)logObjectForModule_8();
                  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
                  {
                    _audioProductCerts_endpoint_handlePropertiesDidChange_cold_1((uint64_t)v16);
                    if (!v16) {
                      return;
                    }
                  }

                  else if (!v16)
                  {
                    return;
                  }

                  CFRetain(v16);
                  uint64_t v18 = *(dispatch_queue_s **)(v15 + 48);
                  v19[0] = _NSConcreteStackBlock;
                  v19[1] = 0x40000000LL;
                  v19[2] = ___audioProductCerts_endpoint_handlePropertiesDidChange_block_invoke;
                  v19[3] = &__block_descriptor_tmp_21;
                  v19[4] = v15;
                  v19[5] = v16;
                  dispatch_async(v18, v19);
                }
              }
            }
          }
        }
      }
    }
  }

uint64_t audioProductCerts_endpoint_destroy(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)result;
    if (*(void *)result)
    {
      if (*(void *)v2 && **(void **)v2)
      {
        uint64_t v3 = gLogObjects;
        int v4 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 58)
        {
          dispatch_queue_t v5 = *(os_log_s **)(gLogObjects + 456);
        }

        else
        {
          dispatch_queue_t v5 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v15 = 134218240;
            *(void *)&uint8_t v15[4] = v3;
            __int16 v16 = 1024;
            int v17 = v4;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  v15,  0x12u);
            uint64_t v2 = *(void *)v1;
          }
        }

        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          int v11 = *(_DWORD *)(*(void *)v2 + 24LL);
          *(_DWORD *)uint64_t v15 = 67109120;
          *(_DWORD *)&uint8_t v15[4] = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "audioProductCerts destroy: transportType %{coreacc:ACCEndpoint_TransportType_t}d",  v15,  8u);
          uint64_t v2 = *(void *)v1;
        }

        uint64_t v12 = *(void *)v2;
        CFTypeID v13 = **(uint64_t ***)v2;
        acc_platform_packetLogging_logEvent( v12,  "DETACH",  (uint64_t)"AudioProductCerts accessory detached!",  v6,  v7,  v8,  v9,  v10,  *(uint64_t *)v15);
        acc_platform_audioProductCerts_accessoryDetach(*v13, *(void *)(v12 + 16));
        uint64_t v2 = *(void *)v1;
      }

      dispatch_sync(*(dispatch_queue_t *)(v2 + 48), &__block_literal_global_7);
      CFMutableDictionaryRef v14 = *(dispatch_object_s **)(*(void *)v1 + 48LL);
      *(void *)(*(void *)v1 + 48LL) = 0LL;
      dispatch_release(v14);
      *(void *)uint64_t v1 = 0LL;
      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t audioProductCerts_endpoint_processIncomingData(uint64_t result, CFTypeRef cf)
{
  if (result)
  {
    uint64_t v3 = (void *)result;
    uint64_t result = 0LL;
    if (cf)
    {
      if (*v3)
      {
        CFRetain(cf);
        int v4 = (dispatch_queue_s *)v3[6];
        v5[0] = _NSConcreteStackBlock;
        v5[1] = 0x40000000LL;
        _DWORD v5[2] = __audioProductCerts_endpoint_processIncomingData_block_invoke;
        v5[3] = &__block_descriptor_tmp_8_0;
        v5[4] = v3;
        v5[5] = cf;
        dispatch_async(v4, v5);
        return 1LL;
      }
    }
  }

  return result;
}

void __audioProductCerts_endpoint_processIncomingData_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t _audioProductCerts_endpoint_processIncomingData(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t *)result;
    uint64_t result = 0LL;
    if (a2)
    {
      uint64_t v4 = *v3;
      if (*v3)
      {
        if (*(_DWORD *)(v4 + 28) == 13)
        {
          if (gLogObjects && gNumLogObjects >= 58)
          {
            dispatch_queue_t v5 = *(os_log_s **)(gLogObjects + 456);
          }

          else
          {
            dispatch_queue_t v5 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
            _audioProductCerts_endpoint_processIncomingData_cold_1(v4, a2, v5);
          }
          return 1LL;
        }

        else
        {
          return 0LL;
        }
      }
    }
  }

  return result;
}

uint64_t audioProductCerts_endpoint_propertyDidChange(uint64_t *a1, const __CFString *a2, const void *a3)
{
  if (!a1 || (uint64_t v6 = (void *)*a1) == 0LL || !*v6)
  {
LABEL_72:
    uint64_t v13 = 0LL;
    uint64_t v12 = 0LL;
    goto LABEL_83;
  }

  uint64_t v7 = gLogObjects;
  int v8 = gNumLogObjects;
  if (gLogObjects && gNumLogObjects >= 58)
  {
    uint64_t v9 = *(os_log_s **)(gLogObjects + 456);
  }

  else
  {
    uint64_t v9 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      int v54 = 134218240;
      uint64_t v55 = v7;
      __int16 v56 = 1024;
      *(_DWORD *)CFStringRef v57 = v8;
      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  (uint8_t *)&v54,  0x12u);
      uint64_t v6 = (void *)*a1;
    }
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = v6[2];
    int v11 = *((_DWORD *)a1 + 10);
    int v54 = 138413058;
    uint64_t v55 = v10;
    __int16 v56 = 1024;
    *(_DWORD *)CFStringRef v57 = v11;
    *(_WORD *)&v57[4] = 2112;
    *(void *)&v57[6] = a2;
    *(_WORD *)&v57[14] = 2112;
    *(void *)&v57[16] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "PropertyDidchange: ENTER %@, state %d, %@ : %@",  (uint8_t *)&v54,  0x26u);
    uint64_t v6 = (void *)*a1;
  }

  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  if (a3 && a2 && v6[2])
  {
    CFTypeID v14 = CFGetTypeID(a2);
    if (v14 == CFStringGetTypeID())
    {
      if (CFStringCompare(a2, kCFACCProperties_Endpoint_AACP_CertificateSupported, 0LL) == kCFCompareEqualTo
        || CFStringCompare(a2, kCFACCProperties_Endpoint_AACP_FirstConnectionAfterPair, 0LL) == kCFCompareEqualTo)
      {
        CFTypeID v15 = CFGetTypeID(a3);
        if (v15 == CFBooleanGetTypeID() || (CFTypeID v16 = CFGetTypeID(a3), v16 == CFNumberGetTypeID()))
        {
          if (gLogObjects && gNumLogObjects >= 58)
          {
            int v17 = *(os_log_s **)(gLogObjects + 456);
          }

          else
          {
            int v17 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
            audioProductCerts_endpoint_propertyDidChange_cold_9((uint64_t)a2, a3, v17);
          }
          goto LABEL_41;
        }
      }

      CFTypeID v18 = CFGetTypeID(a3);
      CFTypeID TypeID = CFArrayGetTypeID();
      if (gLogObjects) {
        BOOL v20 = gNumLogObjects <= 57;
      }
      else {
        BOOL v20 = 1;
      }
      int v21 = !v20;
      if (v18 == TypeID)
      {
        if (v21)
        {
          __int16 v22 = *(os_log_s **)(gLogObjects + 456);
        }

        else
        {
          __int16 v22 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
          audioProductCerts_endpoint_propertyDidChange_cold_11();
        }
LABEL_41:
        uint64_t v12 = *a1;
        if (gLogObjects && gNumLogObjects >= 58)
        {
          uint64_t v24 = *(os_log_s **)(gLogObjects + 456);
        }

        else
        {
          uint64_t v24 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v44 = *(void *)(v12 + 16);
          int v54 = 138412802;
          uint64_t v55 = v44;
          __int16 v56 = 2112;
          *(void *)CFStringRef v57 = a2;
          *(_WORD *)&v57[8] = 2112;
          *(void *)&v57[10] = a3;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "PropertyDidchange: %@, %@ : %@",  (uint8_t *)&v54,  0x20u);
        }

        int v25 = *((_DWORD *)a1 + 10);
        if (!v25)
        {
          if (CFStringCompare(a2, kCFACCProperties_Endpoint_AACP_CertificateSerial, 0LL) == kCFCompareEqualTo)
          {
            goto LABEL_125;
          }

          int v25 = *((_DWORD *)a1 + 10);
        }

        if (v25 == 2)
        {
          if (CFStringCompare(a2, kCFACCProperties_Endpoint_AACP_CertificateList, 0LL) == kCFCompareEqualTo)
          {
            if (_audioProductCerts_endpoint_handleCertList((uint64_t)a1, a2, a3)
              && (_audioProductCerts_endpoint_handleAuthCertList((uint64_t)a1, a2, a3) & 1) != 0)
            {
              goto LABEL_82;
            }

            goto LABEL_125;
          }

          int v25 = *((_DWORD *)a1 + 10);
        }

        if (v25 == 4)
        {
          if (CFStringCompare(a2, kCFACCProperties_Endpoint_AudioProduct_AuthResponse, 0LL) == kCFCompareEqualTo)
          {
            goto LABEL_125;
          }

          int v25 = *((_DWORD *)a1 + 10);
        }

        if (v25 != 5 || CFStringCompare(a2, kCFACCProperties_Endpoint_AACP_CertificateList, 0LL))
        {
          if (gLogObjects && gNumLogObjects >= 58)
          {
            uint64_t v26 = *(os_log_s **)(gLogObjects + 456);
          }

          else
          {
            uint64_t v26 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v27 = *(void *)(*a1 + 16);
            int v28 = *((_DWORD *)a1 + 10);
            int v54 = 138412802;
            uint64_t v55 = v27;
            __int16 v56 = 2112;
            *(void *)CFStringRef v57 = a2;
            *(_WORD *)&v57[8] = 1024;
            *(_DWORD *)&v57[10] = v28;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEBUG,  "PropertyDidchange: %@, Unknown key %@, state %d",  (uint8_t *)&v54,  0x1Cu);
          }

          goto LABEL_82;
        }

        if (_audioProductCerts_endpoint_handleMissingCertList(a1, a2, a3)
          && _audioProductCerts_endpoint_handleAuthResponseWithMissingCert((CFDictionaryRef *)a1, a2, a3))
        {
LABEL_82:
          uint64_t v13 = 1LL;
          goto LABEL_83;
        }

LABEL_125:
        uint64_t v13 = 0LL;
        goto LABEL_83;
      }

      if (v21)
      {
        uint64_t v23 = *(os_log_s **)(gLogObjects + 456);
      }

      else
      {
        uint64_t v23 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
        audioProductCerts_endpoint_propertyDidChange_cold_14(v23, v29, v30, v31, v32, v33, v34, v35);
      }
    }

    else
    {
      __int16 v46 = (os_log_s *)logObjectForModule_8();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG)) {
        audioProductCerts_endpoint_propertyDidChange_cold_16(v46, v47, v48, v49, v50, v51, v52, v53);
      }
    }

    uint64_t v36 = (os_log_s *)logObjectForModule_8();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG)) {
      audioProductCerts_endpoint_propertyDidChange_cold_13(v36);
    }
    goto LABEL_72;
  }

        CFRelease(v25);
LABEL_28:

        return -1;
      }

      if (v69 == 21761)
      {
        if (v70 >= 3uLL)
        {
          __int16 v58 = logObjectForModule_9();
          uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_relay_handle_iAP2RelayRemote_cold_11();
          }
        }

        else
        {
          uint64_t v36 = *(void *)(a1 + 8LL * v70 + 168);
          int v37 = logObjectForModule_9();
          __int16 v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
          uint64_t v33 = v38;
          if (v36)
          {
            if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109378;
              *(_DWORD *)&uint8_t buf[4] = v70;
              *(_WORD *)&buf[8] = 2112;
              *(void *)&buf[10] = v25;
              _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_relay_handle_iAP2RelayRemote: type %d, data %@",  buf,  0x12u);
            }

            (*(void (**)(void))(*(void *)(a1 + 8LL * v70 + 168) + 16LL))();
            int v71 = 0;
            goto LABEL_111;
          }

          if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_relay_handle_iAP2RelayRemote_cold_10((uint64_t)&v70, v33, v63, v64, v65, v66, v67, v68);
          }
        }
      }

      else
      {
        uint64_t v51 = logObjectForModule_9();
        uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_relay_handle_iAP2RelayRemote_cold_9((uint64_t)&v69, v33, v52, v53, v54, v55, v56, v57);
        }
      }
    }

    goto LABEL_125;
  }

  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v19 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v19 = (os_log_s *)&_os_log_default;
    __int16 v46 = &_os_log_default;
  }

  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
    mfi4Auth_relay_handle_iAP2RelayRemote_cold_5();
  }

  usleep(0x3E8u);
  return (BOOL)mfi4Auth_relay_initMessage_RequestiAP2RelayRead(a1, a3);
}

LABEL_83:
  if (gLogObjects && gNumLogObjects >= 58)
  {
    int v37 = *(os_log_s **)(gLogObjects + 456);
  }

  else
  {
    int v37 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
  {
    if (v12)
    {
      uint64_t v42 = *(void *)(v12 + 16);
      if (a1) {
        goto LABEL_112;
      }
    }

    else
    {
      uint64_t v42 = 0LL;
      if (a1)
      {
LABEL_112:
        int v43 = *((_DWORD *)a1 + 10);
LABEL_119:
        int v54 = 138412802;
        uint64_t v55 = v42;
        __int16 v56 = 1024;
        *(_DWORD *)CFStringRef v57 = v43;
        *(_WORD *)&v57[4] = 1024;
        *(_DWORD *)&v57[6] = v13;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEBUG,  "PropertyDidchange: %@, state %d, success %d",  (uint8_t *)&v54,  0x18u);
        goto LABEL_89;
      }
    }

    int v43 = -1;
    goto LABEL_119;
  }

  CFRelease(v9);
  return v2;
}

  kdebug_trace(731124100LL, 0LL, 0LL, 0LL, 0LL);
  return v2;
}

LABEL_89:
  if (gLogObjects && gNumLogObjects >= 58)
  {
    __int16 v38 = *(os_log_s **)(gLogObjects + 456);
  }

  else
  {
    __int16 v38 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG)) {
    audioProductCerts_endpoint_propertyDidChange_cold_4(v12);
  }
  if (gLogObjects && gNumLogObjects >= 58)
  {
    BOOL v39 = *(os_log_s **)(gLogObjects + 456);
  }

  else
  {
    BOOL v39 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
  {
    audioProductCerts_endpoint_propertyDidChange_cold_2(v12);
    if ((v13 & 1) != 0) {
      return v13;
    }
  }

  else if ((v13 & 1) != 0)
  {
    return v13;
  }

  if (gLogObjects && gNumLogObjects >= 58)
  {
    int v40 = *(os_log_s **)(gLogObjects + 456);
  }

  else
  {
    int v40 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
  {
    if (a1)
    {
      uint64_t v45 = *a1;
      if (*a1) {
        uint64_t v45 = *(void *)(v45 + 16);
      }
    }

    else
    {
      uint64_t v45 = 0LL;
    }

    int v54 = 138412802;
    uint64_t v55 = v45;
    __int16 v56 = 2112;
    *(void *)CFStringRef v57 = a2;
    *(_WORD *)&v57[8] = 2112;
    *(void *)&v57[10] = a3;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEBUG,  "PropertyDidchange: %@, did not handle key %@, value %@",  (uint8_t *)&v54,  0x20u);
  }

  return v13;
}

uint64_t _audioProductCerts_endpoint_handleCertSerialList(uint64_t result, const void *a2, const void *a3)
{
  if (!result) {
    return result;
  }
  uint64_t v3 = (CFArrayRef *)result;
  if (!*(void *)result || !**(void **)result) {
    return 0LL;
  }
  if (gLogObjects && gNumLogObjects >= 58)
  {
    uint64_t v6 = *(os_log_s **)(gLogObjects + 456);
  }

  else
  {
    uint64_t v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = (const __CFString *)*((void *)*v3 + 2);
    int v8 = *((_DWORD *)v3 + 10);
    int v31 = 136316162;
    uint64_t v32 = "_audioProductCerts_endpoint_handleCertSerialList";
    __int16 v33 = 2112;
    CFStringRef v34 = v7;
    __int16 v35 = 1024;
    *(_DWORD *)uint64_t v36 = v8;
    *(_WORD *)&v36[4] = 2112;
    *(void *)&v36[6] = a2;
    *(_WORD *)&v36[14] = 2112;
    *(void *)&v36[16] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s: ENTER %@, state %d, %@ : %@",  (uint8_t *)&v31,  0x30u);
  }

  uint64_t result = 0LL;
  if (a2 && a3)
  {
    CFTypeID v9 = CFGetTypeID(a2);
    if (v9 == CFStringGetTypeID())
    {
      CFTypeID v10 = CFGetTypeID(a3);
      if (v10 == CFArrayGetTypeID())
      {
        CFArrayRef v11 = *v3;
        CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, *((CFStringRef *)*v3 + 2));
        if (gLogObjects && gNumLogObjects >= 58)
        {
          uint64_t v13 = *(os_log_s **)(gLogObjects + 456);
        }

        else
        {
          uint64_t v13 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG);
        if (v14)
        {
          uint64_t v30 = (const __CFString *)*((void *)v11 + 2);
          int v31 = 136315906;
          uint64_t v32 = "_audioProductCerts_endpoint_handleCertSerialList";
          __int16 v33 = 2112;
          CFStringRef v34 = v30;
          __int16 v35 = 2112;
          *(void *)uint64_t v36 = a2;
          *(_WORD *)&v36[8] = 2112;
          *(void *)&v36[10] = a3;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s: %@, %@ : %@",  (uint8_t *)&v31,  0x2Au);
        }

        PropertyDescription = _audioProductCerts_endpoint_createPropertyDescription( v14,  1,  (uint64_t)a2,  (const __CFArray *)a3);
        acc_platform_packetLogging_logParsedData( (uint64_t)*v3,  (uint64_t)a2,  (uint64_t)@"AudioProductCerts",  (uint64_t)PropertyDescription,  1);
        if (PropertyDescription) {
          CFRelease(PropertyDescription);
        }
        if (gLogObjects && gNumLogObjects >= 58)
        {
          CFTypeID v16 = *(os_log_s **)(gLogObjects + 456);
        }

        else
        {
          CFTypeID v16 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          int v17 = (const __CFString *)*((void *)v11 + 2);
          int v18 = *((_DWORD *)v3 + 10);
          int v31 = 136316162;
          uint64_t v32 = "_audioProductCerts_endpoint_handleCertSerialList";
          __int16 v33 = 2112;
          CFStringRef v34 = v17;
          __int16 v35 = 2112;
          *(void *)uint64_t v36 = a2;
          *(_WORD *)&v36[8] = 1024;
          *(_DWORD *)&v36[10] = v18;
          *(_WORD *)&v36[14] = 1024;
          *(_DWORD *)&v36[16] = 1;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "%s: %@, %@, state %d -> %d",  (uint8_t *)&v31,  0x2Cu);
        }

        *((_DWORD *)v3 + 10) = 1;
        v37.length = CFArrayGetCount((CFArrayRef)a3);
        v37.location = 0LL;
        CFArrayApplyFunction((CFArrayRef)a3, v37, (CFArrayApplierFunction)_CFArrayApplierFunction_handleSerialList, v3);
        if (CFArrayGetCount(v3[2]))
        {
          if (gLogObjects && gNumLogObjects >= 58)
          {
            uint64_t v19 = *(os_log_s **)(gLogObjects + 456);
          }

          else
          {
            uint64_t v19 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            CFArrayRef v22 = v3[2];
            int v31 = 136315650;
            uint64_t v32 = "_audioProductCerts_endpoint_handleCertSerialList";
            __int16 v33 = 2112;
            CFStringRef v34 = Copy;
            __int16 v35 = 2112;
            *(void *)uint64_t v36 = v22;
            _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "%s: %@, setProperty kCFACCProperties_Endpoint_AudioProduct_CertificateRequired: %@",  (uint8_t *)&v31,  0x20u);
          }

          uint64_t v23 = CFArrayCreateCopy(kCFAllocatorDefault, v3[2]);
          audioProductCerts_endpoint_setProperty((uint64_t *)v3, kCFACCProperties_Endpoint_AACP_CertificateRequired, v23);
          if (v23) {
            CFRelease(v23);
          }
          if (gLogObjects && gNumLogObjects >= 58)
          {
            uint64_t v24 = *(os_log_s **)(gLogObjects + 456);
          }

          else
          {
            uint64_t v24 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            int v25 = *((_DWORD *)v3 + 10);
            int v31 = 136316162;
            uint64_t v32 = "_audioProductCerts_endpoint_handleCertSerialList";
            __int16 v33 = 2112;
            CFStringRef v34 = Copy;
            __int16 v35 = 2112;
            *(void *)uint64_t v36 = a2;
            *(_WORD *)&v36[8] = 1024;
            *(_DWORD *)&v36[10] = v25;
            *(_WORD *)&v36[14] = 1024;
            *(_DWORD *)&v36[16] = 2;
            _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "%s: %@, %@, state %d -> %d",  (uint8_t *)&v31,  0x2Cu);
          }

          *((_DWORD *)v3 + 10) = 2;
        }

        else
        {
          BOOL v20 = v3[3];
          if (v20 && CFArrayGetCount(v20))
          {
            if (gLogObjects && gNumLogObjects >= 58)
            {
              int v21 = *(os_log_s **)(gLogObjects + 456);
            }

            else
            {
              int v21 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            {
              CFArrayRef v26 = v3[3];
              int v31 = 136315650;
              uint64_t v32 = "_audioProductCerts_endpoint_handleCertSerialList";
              __int16 v33 = 2112;
              CFStringRef v34 = Copy;
              __int16 v35 = 2112;
              *(void *)uint64_t v36 = v26;
              _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "%s: %@, setProperty kCFACCProperties_Endpoint_AudioProduct_CertificateList: %@",  (uint8_t *)&v31,  0x20u);
            }

            if (gLogObjects && gNumLogObjects >= 58)
            {
              uint64_t v27 = *(os_log_s **)(gLogObjects + 456);
            }

            else
            {
              uint64_t v27 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
            {
              int v28 = *((_DWORD *)v3 + 10);
              int v31 = 136316162;
              uint64_t v32 = "_audioProductCerts_endpoint_handleCertSerialList";
              __int16 v33 = 2112;
              CFStringRef v34 = Copy;
              __int16 v35 = 2112;
              *(void *)uint64_t v36 = a2;
              *(_WORD *)&v36[8] = 1024;
              *(_DWORD *)&v36[10] = v28;
              *(_WORD *)&v36[14] = 1024;
              *(_DWORD *)&v36[16] = 2;
              _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "%s: %@, %@, state %d -> %d",  (uint8_t *)&v31,  0x2Cu);
            }

            *((_DWORD *)v3 + 10) = 2;
            uint64_t v29 = CFArrayCreateCopy(kCFAllocatorDefault, v3[3]);
            audioProductCerts_endpoint_setProperty((uint64_t *)v3, kCFACCProperties_Endpoint_AACP_CertificateList, v29);
            if (v29) {
              CFRelease(v29);
            }
          }
        }

        if (Copy) {
          CFRelease(Copy);
        }
        return 1LL;
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t _audioProductCerts_endpoint_handleCertList(uint64_t result, const void *a2, const void *a3)
{
  if (result)
  {
    uint64_t v3 = (CFArrayRef *)result;
    if (!*(void *)result || !**(void **)result) {
      return 0LL;
    }
    if (gLogObjects && gNumLogObjects >= 58)
    {
      uint64_t v6 = *(os_log_s **)(gLogObjects + 456);
    }

    else
    {
      uint64_t v6 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *((void *)*v3 + 2);
      int v8 = *((_DWORD *)v3 + 10);
      int v44 = 136316162;
      uint64_t v45 = "_audioProductCerts_endpoint_handleCertList";
      __int16 v46 = 2112;
      uint64_t v47 = v7;
      __int16 v48 = 1024;
      *(_DWORD *)uint64_t v49 = v8;
      *(_WORD *)&v49[4] = 2112;
      *(void *)&v49[6] = a2;
      *(_WORD *)&v49[14] = 2112;
      *(void *)&v49[16] = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s: ENTER %@, state %d, %@ : %@",  (uint8_t *)&v44,  0x30u);
    }

    uint64_t result = 0LL;
    if (a2 && a3)
    {
      CFTypeID v9 = CFGetTypeID(a2);
      if (v9 == CFStringGetTypeID())
      {
        CFTypeID v10 = CFGetTypeID(a3);
        if (v10 == CFArrayGetTypeID())
        {
          CFArrayRef v11 = (uint64_t *)*v3;
          if (gLogObjects && gNumLogObjects >= 58)
          {
            uint64_t v12 = *(os_log_s **)(gLogObjects + 456);
          }

          else
          {
            uint64_t v12 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG);
          if (v13)
          {
            uint64_t v35 = v11[2];
            int v44 = 136315906;
            uint64_t v45 = "_audioProductCerts_endpoint_handleCertList";
            __int16 v46 = 2112;
            uint64_t v47 = v35;
            __int16 v48 = 2112;
            *(void *)uint64_t v49 = a2;
            *(_WORD *)&v49[8] = 2112;
            *(void *)&v49[10] = a3;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "%s: %@, %@ : %@",  (uint8_t *)&v44,  0x2Au);
          }

          PropertyDescription = _audioProductCerts_endpoint_createPropertyDescription( v13,  1,  (uint64_t)a2,  (const __CFArray *)a3);
          acc_platform_packetLogging_logParsedData( (uint64_t)*v3,  (uint64_t)a2,  (uint64_t)@"AudioProductCerts",  (uint64_t)PropertyDescription,  1);
          if (PropertyDescription) {
            CFRelease(PropertyDescription);
          }
          if (gLogObjects && gNumLogObjects >= 58)
          {
            CFTypeID v15 = *(os_log_s **)(gLogObjects + 456);
          }

          else
          {
            CFTypeID v15 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v16 = v11[2];
            int v17 = *((_DWORD *)v3 + 10);
            int v44 = 136316162;
            uint64_t v45 = "_audioProductCerts_endpoint_handleCertList";
            __int16 v46 = 2112;
            uint64_t v47 = v16;
            __int16 v48 = 2112;
            *(void *)uint64_t v49 = a2;
            *(_WORD *)&v49[8] = 1024;
            *(_DWORD *)&v49[10] = v17;
            *(_WORD *)&v49[14] = 1024;
            *(_DWORD *)&v49[16] = 3;
            _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "%s: %@, %@, state %d -> %d",  (uint8_t *)&v44,  0x2Cu);
          }

          *((_DWORD *)v3 + 10) = 3;
          v50.length = CFArrayGetCount((CFArrayRef)a3);
          v50.location = 0LL;
          CFArrayApplyFunction((CFArrayRef)a3, v50, (CFArrayApplierFunction)_CFArrayApplierFunction_handleCertList, v3);
          CFIndex Count = CFArrayGetCount(v3[3]);
          if (gLogObjects) {
            BOOL v19 = gNumLogObjects <= 57;
          }
          else {
            BOOL v19 = 1;
          }
          int v20 = !v19;
          if (Count)
          {
            if (v20)
            {
              int v21 = *(os_log_s **)(gLogObjects + 456);
            }

            else
            {
              int v21 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v23 = v11[2];
              CFArrayRef v24 = v3[3];
              int v44 = 136315650;
              uint64_t v45 = "_audioProductCerts_endpoint_handleCertList";
              __int16 v46 = 2112;
              uint64_t v47 = v23;
              __int16 v48 = 2112;
              *(void *)uint64_t v49 = v24;
              _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "%s: %@, got kCFACCProperties_Endpoint_AudioProduct_CertificateList: %@",  (uint8_t *)&v44,  0x20u);
            }

            unsigned __int8 v25 = acc_userDefaults_BOOLForKey((uint64_t)@"DisableAMSHookUp");
            if (gLogObjects) {
              BOOL v26 = gNumLogObjects <= 57;
            }
            else {
              BOOL v26 = 1;
            }
            int v27 = !v26;
            if ((v25 & 1) == 0)
            {
              if (v27)
              {
                int v28 = *(os_log_s **)(gLogObjects + 456);
              }

              else
              {
                int v28 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
              {
                uint64_t v32 = v11[2];
                int v44 = 136315650;
                uint64_t v45 = "_audioProductCerts_endpoint_handleCertList";
                __int16 v46 = 2112;
                uint64_t v47 = v32;
                __int16 v48 = 2112;
                *(void *)uint64_t v49 = a2;
                _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_INFO,  "%s: %@, %@, get accInfo from endpoint",  (uint8_t *)&v44,  0x20u);
              }

              AccessoryInfo = (const __CFString *)acc_endpoint_getAccessoryInfo((uint64_t)v11);
              if (!AccessoryInfo)
              {
                if (gLogObjects && gNumLogObjects >= 58)
                {
                  CFStringRef v34 = *(os_log_s **)(gLogObjects + 456);
                }

                else
                {
                  CFStringRef v34 = (os_log_s *)&_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }

                if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
                {
                  uint64_t v36 = v11[2];
                  int v44 = 136315650;
                  uint64_t v45 = "_audioProductCerts_endpoint_handleCertList";
                  __int16 v46 = 2112;
                  uint64_t v47 = v36;
                  __int16 v48 = 2112;
                  *(void *)uint64_t v49 = a2;
                  _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_INFO,  "%s: %@, %@, get accInfo from connection",  (uint8_t *)&v44,  0x20u);
                }

                AccessoryInfo = (const __CFString *)acc_connection_getAccessoryInfo(*v11);
              }

              CFStringRef v37 = acc_accInfo_copyAccessoryInfoDescription(AccessoryInfo);
              if (gLogObjects && gNumLogObjects >= 58)
              {
                __int16 v38 = *(os_log_s **)(gLogObjects + 456);
              }

              else
              {
                __int16 v38 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
              {
                uint64_t v39 = v11[2];
                int v44 = 136315906;
                uint64_t v45 = "_audioProductCerts_endpoint_handleCertList";
                __int16 v46 = 2112;
                uint64_t v47 = v39;
                __int16 v48 = 2112;
                *(void *)uint64_t v49 = a2;
                *(_WORD *)&v49[8] = 2112;
                *(void *)&v49[10] = v37;
                _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_INFO,  "%s: %@, %@, accInfo %@",  (uint8_t *)&v44,  0x2Au);
              }

              if (v37) {
                CFRelease(v37);
              }
              if (AccessoryInfo) {
                uint64_t data = (uint64_t)AccessoryInfo->data;
              }
              else {
                uint64_t data = 0LL;
              }
              acc_platform_audioProductCerts_processAudioProductCerts( v11[1],  v11[2],  data,  (uint64_t)v3[3],  *((unsigned __int8 *)v3 + 9));
              if (gLogObjects && gNumLogObjects >= 58)
              {
                __int16 v41 = *(os_log_s **)(gLogObjects + 456);
              }

              else
              {
                __int16 v41 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
              {
                uint64_t v42 = v11[2];
                int v43 = *((_DWORD *)v3 + 10);
                int v44 = 136316162;
                uint64_t v45 = "_audioProductCerts_endpoint_handleCertList";
                __int16 v46 = 2112;
                uint64_t v47 = v42;
                __int16 v48 = 2112;
                *(void *)uint64_t v49 = a2;
                *(_WORD *)&v49[8] = 1024;
                *(_DWORD *)&v49[10] = v43;
                *(_WORD *)&v49[14] = 1024;
                *(_DWORD *)&v49[16] = 6;
                _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_INFO,  "%s: %@, %@, state %d -> %d",  (uint8_t *)&v44,  0x2Cu);
              }

              *((_DWORD *)v3 + 10) = 6;
              return 1LL;
            }

            if (v27)
            {
              CFArrayRef v22 = *(os_log_s **)(gLogObjects + 456);
            }

            else
            {
              CFArrayRef v22 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
              return 1LL;
            }
            uint64_t v31 = *((void *)*v3 + 2);
            int v44 = 136315394;
            uint64_t v45 = "_audioProductCerts_endpoint_handleCertList";
            __int16 v46 = 2112;
            uint64_t v47 = v31;
            uint64_t v30 = "%s: %@, skip notifying of audioProductCert";
          }

          else
          {
            if (v20)
            {
              CFArrayRef v22 = *(os_log_s **)(gLogObjects + 456);
            }

            else
            {
              CFArrayRef v22 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
              return 1LL;
            }
            uint64_t v29 = *((void *)*v3 + 2);
            int v44 = 136315394;
            uint64_t v45 = "_audioProductCerts_endpoint_handleCertList";
            __int16 v46 = 2112;
            uint64_t v47 = v29;
            uint64_t v30 = "%s: %@, No Valid Certs! skip notifying of audioProductCert";
          }

          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v30, (uint8_t *)&v44, 0x16u);
          return 1LL;
        }
      }

      return 0LL;
    }
  }

  return result;
}

uint64_t _audioProductCerts_endpoint_handleAuthCertList(uint64_t result, const void *a2, const void *a3)
{
  if (!result) {
    return result;
  }
  uint64_t v3 = (uint64_t *)result;
  if (!*(void *)result || !**(void **)result) {
    return 0LL;
  }
  if (gLogObjects && gNumLogObjects >= 58)
  {
    uint64_t v6 = *(os_log_s **)(gLogObjects + 456);
  }

  else
  {
    uint64_t v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(*v3 + 16);
    int v8 = *((_DWORD *)v3 + 10);
    int v21 = 136316162;
    CFArrayRef v22 = "_audioProductCerts_endpoint_handleAuthCertList";
    __int16 v23 = 2112;
    uint64_t v24 = v7;
    __int16 v25 = 1024;
    *(_DWORD *)BOOL v26 = v8;
    *(_WORD *)&v26[4] = 2112;
    *(void *)&v26[6] = a2;
    *(_WORD *)&v26[14] = 2112;
    *(void *)&v26[16] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s: ENTER %@, state %d, %@ : %@",  (uint8_t *)&v21,  0x30u);
  }

  uint64_t result = 0LL;
  if (a2 && a3)
  {
    CFTypeID v9 = CFGetTypeID(a2);
    if (v9 == CFStringGetTypeID())
    {
      CFTypeID v10 = CFGetTypeID(a3);
      if (v10 == CFArrayGetTypeID())
      {
        uint64_t v11 = *v3;
        if (gLogObjects && gNumLogObjects >= 58)
        {
          uint64_t v12 = *(os_log_s **)(gLogObjects + 456);
        }

        else
        {
          uint64_t v12 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v16 = *(void *)(v11 + 16);
          int v21 = 136315906;
          CFArrayRef v22 = "_audioProductCerts_endpoint_handleAuthCertList";
          __int16 v23 = 2112;
          uint64_t v24 = v16;
          __int16 v25 = 2112;
          *(void *)BOOL v26 = a2;
          *(_WORD *)&void v26[8] = 2112;
          *(void *)&_BYTE v26[10] = a3;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "%s: %@, %@ : %@",  (uint8_t *)&v21,  0x2Au);
        }

        if (acc_userDefaults_BOOLForKey((uint64_t)@"DisableAACPAuth"))
        {
          int v17 = (os_log_s *)logObjectForModule_8();
          uint64_t result = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v18 = *(void *)(v11 + 16);
          int v21 = 136315906;
          CFArrayRef v22 = "_audioProductCerts_endpoint_handleAuthCertList";
          __int16 v23 = 2112;
          uint64_t v24 = v18;
          __int16 v25 = 2112;
          *(void *)BOOL v26 = a2;
          *(_WORD *)&void v26[8] = 2112;
          *(void *)&_BYTE v26[10] = a3;
          BOOL v19 = "%s: %@, Auth not supported! %@ : %@";
        }

        else
        {
          if ((_audioProductCerts_endpoint_generateAuthChallenge((uint64_t)v3, 1) & 1) != 0)
          {
            if (v3[12] && v3[13])
            {
              CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 1LL, &kCFTypeArrayCallBacks);
              if (Mutable)
              {
                BOOL v14 = Mutable;
                CFArrayAppendValue(Mutable, (const void *)v3[12]);
                *((_DWORD *)v3 + 10) = 4;
                audioProductCerts_endpoint_setProperty(v3, kCFACCProperties_Endpoint_AudioProduct_AuthChallenge, v14);
              }

              else
              {
                if (gLogObjects && gNumLogObjects >= 58)
                {
                  CFTypeID v15 = *(os_log_s **)(gLogObjects + 456);
                }

                else
                {
                  CFTypeID v15 = (os_log_s *)&_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }

                if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
                  _audioProductCerts_endpoint_handleAuthCertList_cold_1();
                }
              }
            }

            return 1LL;
          }

          int v17 = (os_log_s *)logObjectForModule_8();
          uint64_t result = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v20 = *(void *)(v11 + 16);
          int v21 = 136315906;
          CFArrayRef v22 = "_audioProductCerts_endpoint_handleAuthCertList";
          __int16 v23 = 2112;
          uint64_t v24 = v20;
          __int16 v25 = 2112;
          *(void *)BOOL v26 = a2;
          *(_WORD *)&void v26[8] = 2112;
          *(void *)&_BYTE v26[10] = a3;
          BOOL v19 = "%s: %@, Unable to generate auth challenge! %@ : %@";
        }

        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&v21, 0x2Au);
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t _audioProductCerts_endpoint_handleAuthResponseList(uint64_t result, const void *a2, const void *a3)
{
  if (!result) {
    return result;
  }
  uint64_t v3 = result;
  if (!*(void *)result || !**(void **)result) {
    return 0LL;
  }
  if (gLogObjects && gNumLogObjects >= 58)
  {
    uint64_t v6 = *(os_log_s **)(gLogObjects + 456);
  }

  else
  {
    uint64_t v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(*(void *)v3 + 16LL);
    int v8 = *(_DWORD *)(v3 + 40);
    int v37 = 136316162;
    __int16 v38 = "_audioProductCerts_endpoint_handleAuthResponseList";
    __int16 v39 = 2112;
    uint64_t v40 = v7;
    __int16 v41 = 1024;
    *(_DWORD *)uint64_t v42 = v8;
    *(_WORD *)&v42[4] = 2112;
    *(void *)&v42[6] = a2;
    *(_WORD *)&v42[14] = 2112;
    *(void *)&v42[16] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s: ENTER %@, state %d, %@ : %@",  (uint8_t *)&v37,  0x30u);
  }

  uint64_t result = 0LL;
  if (!a2 || !a3) {
    return result;
  }
  CFTypeID v9 = CFGetTypeID(a2);
  if (v9 != CFStringGetTypeID()) {
    return 0LL;
  }
  CFTypeID v10 = CFGetTypeID(a3);
  if (v10 != CFArrayGetTypeID()) {
    return 0LL;
  }
  uint64_t v11 = *(void *)v3;
  if (gLogObjects && gNumLogObjects >= 58)
  {
    uint64_t v12 = *(os_log_s **)(gLogObjects + 456);
  }

  else
  {
    uint64_t v12 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v24 = *(void *)(v11 + 16);
    int v37 = 136315906;
    __int16 v38 = "_audioProductCerts_endpoint_handleAuthResponseList";
    __int16 v39 = 2112;
    uint64_t v40 = v24;
    __int16 v41 = 2112;
    *(void *)uint64_t v42 = a2;
    *(_WORD *)&v42[8] = 2112;
    *(void *)&v42[10] = a3;
    _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%s: %@, %@ : %@", (uint8_t *)&v37, 0x2Au);
  }

  if (CFArrayGetCount((CFArrayRef)a3) < 1) {
    return 0LL;
  }
  if (!*(void *)(v3 + 96) || !*(void *)(v3 + 104))
  {
    __int16 v25 = (os_log_s *)logObjectForModule_8();
    uint64_t result = os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v26 = *(void *)(v11 + 16);
    int v37 = 136315906;
    __int16 v38 = "_audioProductCerts_endpoint_handleAuthResponseList";
    __int16 v39 = 2112;
    uint64_t v40 = v26;
    __int16 v41 = 2112;
    *(void *)uint64_t v42 = a2;
    *(_WORD *)&v42[8] = 2112;
    *(void *)&v42[10] = a3;
    int v27 = "%s: %@, Challenge was not initiated! %@ : %@";
    goto LABEL_52;
  }

  id v13 = acc_userDefaults_BOOLForKey((uint64_t)@"DisableAACPAuth");
  if ((_DWORD)v13)
  {
    __int16 v25 = (os_log_s *)logObjectForModule_8();
    uint64_t result = os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v28 = *(void *)(v11 + 16);
    int v37 = 136315906;
    __int16 v38 = "_audioProductCerts_endpoint_handleAuthResponseList";
    __int16 v39 = 2112;
    uint64_t v40 = v28;
    __int16 v41 = 2112;
    *(void *)uint64_t v42 = a2;
    *(_WORD *)&v42[8] = 2112;
    *(void *)&v42[10] = a3;
    int v27 = "%s: %@, Auth not supported! %@ : %@";
LABEL_52:
    _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, v27, (uint8_t *)&v37, 0x2Au);
    return 0LL;
  }

  PropertyDescription = _audioProductCerts_endpoint_createPropertyDescription( (uint64_t)v13,  1,  (uint64_t)a2,  (const __CFArray *)a3);
  acc_platform_packetLogging_logParsedData( *(void *)v3,  (uint64_t)a2,  (uint64_t)@"AudioProductCerts",  (uint64_t)PropertyDescription,  1);
  if (PropertyDescription) {
    CFRelease(PropertyDescription);
  }
  if (gLogObjects && gNumLogObjects >= 58)
  {
    CFTypeID v15 = *(os_log_s **)(gLogObjects + 456);
  }

  else
  {
    CFTypeID v15 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    uint64_t v16 = *(void *)(v11 + 16);
    int v17 = *(_DWORD *)(v3 + 40);
    int v37 = 136316162;
    __int16 v38 = "_audioProductCerts_endpoint_handleAuthResponseList";
    __int16 v39 = 2112;
    uint64_t v40 = v16;
    __int16 v41 = 2112;
    *(void *)uint64_t v42 = a2;
    *(_WORD *)&v42[8] = 1024;
    *(_DWORD *)&v42[10] = v17;
    *(_WORD *)&v42[14] = 1024;
    *(_DWORD *)&v42[16] = 6;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "%s: %@, %@, state %d -> %d",  (uint8_t *)&v37,  0x2Cu);
  }

  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)a3, 0LL);
  BOOL v19 = (const void *)kCFACCProperties_Endpoint_AACP_CertificateInfo_Type;
  uint64_t Value = (const __CFNumber *)CFDictionaryGetValue( *(CFDictionaryRef *)(v3 + 96),  kCFACCProperties_Endpoint_AACP_CertificateInfo_Type);
  int v21 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v19);
  if (CFNumberCompare(Value, v21, 0LL) && *(_DWORD *)(v3 + 80) == 5) {
    return _audioProductCerts_endpoint_handlePrimaryBudMismatch(v3, ValueAtIndex);
  }
  if ((_audioProductCerts_endpoint_validateChallenge((uint64_t *)v3, ValueAtIndex) & 1) != 0)
  {
    if ((acc_userDefaults_BOOLForKey((uint64_t)@"KeepAACPAuthData") & 1) == 0)
    {
      CFArrayRef v22 = *(const void **)(v3 + 96);
      if (v22)
      {
        CFRelease(v22);
        *(void *)(v3 + 96) = 0LL;
      }

      __int16 v23 = *(const void **)(v3 + 104);
      if (v23)
      {
        CFRelease(v23);
        *(void *)(v3 + 104) = 0LL;
      }

      audioProductCerts_endpoint_removeProperty(v3, kCFACCProperties_Endpoint_AudioProduct_AuthChallenge);
      audioProductCerts_endpoint_removeProperty(v3, kCFACCProperties_Endpoint_AudioProduct_AuthResponse);
    }

LABEL_46:
    *(_DWORD *)(v3 + 40) = 6;
    return 1LL;
  }

  uint64_t v29 = (os_log_s *)logObjectForModule_8();
  uint64_t result = os_log_type_enabled(v29, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    _audioProductCerts_endpoint_handleAuthResponseList_cold_1(v29, v30, v31, v32, v33, v34, v35, v36);
    return 0LL;
  }

  return result;
}

            BOOL v19 = @"MediaLibraryUID";
            goto LABEL_47;
          }

          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            -[ACCPluginManager loadBundlesWithPaths:andIdentifiers:orClasses:orProtocols:matchAny:].cold.1( v78,  v18,  &v79);
          }
        }

  __int16 v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  self->_partOfCompilation));
  -[NSMutableDictionary setObject:forKey:]( v3,  "setObject:forKey:",  v23,  @"ACCMediaLibraryUpdateItemIsPartOfCompilation");

  validMask = self->_validMask;
  if ((validMask & 0x2000000) != 0) {
    goto LABEL_47;
  }
LABEL_22:
  if ((validMask & 0x8000000) != 0)
  {
LABEL_23:
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_chapterCount));
    -[NSMutableDictionary setObject:forKey:]( v3,  "setObject:forKey:",  v6,  @"ACCMediaLibraryUpdateItemChapterCount");
  }

BOOL _audioProductCerts_endpoint_handleMissingCertList(uint64_t *a1, CFTypeRef cf, const void *a3)
{
  if (!a1)
  {
    uint64_t v49 = (os_log_s *)logObjectForModule_8();
    BOOL result = os_log_type_enabled(v49, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    _audioProductCerts_endpoint_handleMissingCertList_cold_1(v49, v50, v51, v52, v53, v54, v55, v56);
    return 0LL;
  }

  if (!*a1)
  {
    CFStringRef v57 = (os_log_s *)logObjectForModule_8();
    BOOL result = os_log_type_enabled(v57, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    _audioProductCerts_endpoint_handleMissingCertList_cold_2(v57, v58, v59, v60, v61, v62, v63, v64);
    return 0LL;
  }

  if (!*(void *)*a1)
  {
    __int16 v65 = (os_log_s *)logObjectForModule_8();
    BOOL result = os_log_type_enabled(v65, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    _audioProductCerts_endpoint_handleMissingCertList_cold_3(v65, v66, v67, v68, v69, v70, v71, v72);
    return 0LL;
  }

  if (!cf)
  {
    __int16 v73 = (os_log_s *)logObjectForModule_8();
    BOOL result = os_log_type_enabled(v73, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    _audioProductCerts_endpoint_handleMissingCertList_cold_4(v73, v74, v75, v76, v77, v78, v79, v80);
    return 0LL;
  }

  if (!a3)
  {
    __int128 v81 = (os_log_s *)logObjectForModule_8();
    BOOL result = os_log_type_enabled(v81, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    _audioProductCerts_endpoint_handleMissingCertList_cold_5(v81, v82, v83, v84, v85, v86, v87, v88);
    return 0LL;
  }

  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 != CFStringGetTypeID())
  {
    double v89 = (os_log_s *)logObjectForModule_8();
    BOOL result = os_log_type_enabled(v89, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    _audioProductCerts_endpoint_handleMissingCertList_cold_16(v89, v90, v91, v92, v93, v94, v95, v96);
    return 0LL;
  }

  CFTypeID v7 = CFGetTypeID(a3);
  if (v7 == CFArrayGetTypeID())
  {
    if (gLogObjects && gNumLogObjects >= 58)
    {
      int v8 = *(os_log_s **)(gLogObjects + 456);
    }

    else
    {
      int v8 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)(*a1 + 16);
      int v10 = *((_DWORD *)a1 + 10);
      *(_DWORD *)buf = 136316162;
      v106 = "_audioProductCerts_endpoint_handleMissingCertList";
      __int16 v107 = 2112;
      uint64_t v108 = v9;
      __int16 v109 = 1024;
      *(_DWORD *)v110 = v10;
      *(_WORD *)&v110[4] = 2112;
      *(void *)&v110[6] = cf;
      *(_WORD *)&v110[14] = 2112;
      *(void *)&v110[16] = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s: ENTER %@, state %d, %@ : %@", buf, 0x30u);
    }

    uint64_t v11 = (uint64_t *)*a1;
    if (gLogObjects && gNumLogObjects >= 58)
    {
      uint64_t v12 = *(os_log_s **)(gLogObjects + 456);
    }

    else
    {
      uint64_t v12 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG);
    if (v13)
    {
      uint64_t v39 = v11[2];
      *(_DWORD *)buf = 136315906;
      v106 = "_audioProductCerts_endpoint_handleMissingCertList";
      __int16 v107 = 2112;
      uint64_t v108 = v39;
      __int16 v109 = 2112;
      *(void *)v110 = cf;
      *(_WORD *)&v110[8] = 2112;
      *(void *)&v110[10] = a3;
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%s: %@, %@ : %@", buf, 0x2Au);
    }

    PropertyDescription = _audioProductCerts_endpoint_createPropertyDescription( v13,  1,  (uint64_t)cf,  (const __CFArray *)a3);
    acc_platform_packetLogging_logParsedData( *a1,  (uint64_t)cf,  (uint64_t)@"AudioProductCerts",  (uint64_t)PropertyDescription,  1);
    if (PropertyDescription) {
      CFRelease(PropertyDescription);
    }
    if (gLogObjects && gNumLogObjects >= 58)
    {
      CFTypeID v15 = *(os_log_s **)(gLogObjects + 456);
    }

    else
    {
      CFTypeID v15 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = v11[2];
      int v17 = *((_DWORD *)a1 + 10);
      *(_DWORD *)buf = 136316162;
      v106 = "_audioProductCerts_endpoint_handleMissingCertList";
      __int16 v107 = 2112;
      uint64_t v108 = v16;
      __int16 v109 = 2112;
      *(void *)v110 = cf;
      *(_WORD *)&v110[8] = 1024;
      *(_DWORD *)&v110[10] = v17;
      *(_WORD *)&v110[14] = 1024;
      *(_DWORD *)&v110[16] = 3;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%s: %@, %@, state %d -> %d", buf, 0x2Cu);
    }

    *((_DWORD *)a1 + 10) = 3;
    uint64_t v18 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, a1 + 10);
    CFIndex Count = CFArrayGetCount((CFArrayRef)a3);
    if (Count >= 1)
    {
      CFIndex v20 = Count;
      CFIndex v21 = 0LL;
      CFArrayRef v22 = (const void *)kCFACCProperties_Endpoint_AACP_CertificateInfo_Type;
      __int16 v23 = (const void *)kCFACCProperties_Endpoint_AACP_CertificateInfo_Data;
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)a3, v21);
        if (!ValueAtIndex) {
          break;
        }
        __int16 v25 = ValueAtIndex;
        uint64_t Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v22);
        if (!Value) {
          break;
        }
        if (CFNumberCompare(v18, Value, 0LL) == kCFCompareEqualTo)
        {
          int v27 = (const __CFData *)CFDictionaryGetValue(v25, v23);
          if (CFDataGetLength(v27) <= 0) {
            break;
          }
        }

        if (v20 == ++v21) {
          goto LABEL_38;
        }
      }

      *((_DWORD *)a1 + 10) = 5;
      if (v18) {
        CFRelease(v18);
      }
      return 0LL;
    }

BOOL _audioProductCerts_endpoint_handleAuthResponseWithMissingCert( CFDictionaryRef *a1, CFTypeRef cf, const void *a3)
{
  if (a1)
  {
    if (*a1)
    {
      if (*(void *)*a1)
      {
        if (cf)
        {
          if (a3)
          {
            CFTypeID v6 = CFGetTypeID(cf);
            if (v6 == CFStringGetTypeID())
            {
              CFTypeID v7 = CFGetTypeID(a3);
              if (v7 == CFArrayGetTypeID())
              {
                if (gLogObjects && gNumLogObjects >= 58)
                {
                  int v8 = *(os_log_s **)(gLogObjects + 456);
                }

                else
                {
                  int v8 = (os_log_s *)&_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }

                if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
                {
                  uint64_t v9 = *((void *)*a1 + 2);
                  int v10 = *((_DWORD *)a1 + 10);
                  *(_DWORD *)buf = 136316162;
                  uint64_t v108 = "_audioProductCerts_endpoint_handleAuthResponseWithMissingCert";
                  __int16 v109 = 2112;
                  uint64_t v110 = v9;
                  __int16 v111 = 1024;
                  *(_DWORD *)v112 = v10;
                  *(_WORD *)&v112[4] = 2112;
                  *(void *)&v112[6] = cf;
                  *(_WORD *)&v112[14] = 2112;
                  *(void *)&v112[16] = a3;
                  _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s: ENTER %@, state %d, %@ : %@",  buf,  0x30u);
                }

                CFDictionaryRef v106 = *a1;
                if (gLogObjects && gNumLogObjects >= 58)
                {
                  uint64_t v11 = *(os_log_s **)(gLogObjects + 456);
                }

                else
                {
                  uint64_t v11 = (os_log_s *)&_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }

                if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v37 = *((void *)v106 + 2);
                  *(_DWORD *)buf = 136315906;
                  uint64_t v108 = "_audioProductCerts_endpoint_handleAuthResponseWithMissingCert";
                  __int16 v109 = 2112;
                  uint64_t v110 = v37;
                  __int16 v111 = 2112;
                  *(void *)v112 = cf;
                  *(_WORD *)&v112[8] = 2112;
                  *(void *)&v112[10] = a3;
                  _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%s: %@, %@ : %@", buf, 0x2Au);
                }

                if (acc_userDefaults_BOOLForKey((uint64_t)@"DisableAACPAuth"))
                {
                  uint64_t v94 = (os_log_s *)logObjectForModule_8();
                  BOOL result = os_log_type_enabled(v94, OS_LOG_TYPE_ERROR);
                  if (result)
                  {
                    uint64_t v95 = *((void *)v106 + 2);
                    *(_DWORD *)buf = 136315906;
                    uint64_t v108 = "_audioProductCerts_endpoint_handleAuthResponseWithMissingCert";
                    __int16 v109 = 2112;
                    uint64_t v110 = v95;
                    __int16 v111 = 2112;
                    *(void *)v112 = cf;
                    *(_WORD *)&v112[8] = 2112;
                    *(void *)&v112[10] = a3;
                    uint64_t v96 = "%s: %@, Auth not supported! %@ : %@";
LABEL_74:
                    _os_log_error_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_ERROR, v96, buf, 0x2Au);
                    return 0LL;
                  }
                }

                else
                {
                  uint64_t v12 = (const void *)kCFACCProperties_Endpoint_AudioProduct_AuthResponse;
                  uint64_t Value = (const __CFArray *)CFDictionaryGetValue( *((CFDictionaryRef *)*a1 + 10),  kCFACCProperties_Endpoint_AudioProduct_AuthResponse);
                  if (CFArrayGetCount(Value) <= 0)
                  {
                    v97 = (os_log_s *)logObjectForModule_8();
                    BOOL result = os_log_type_enabled(v97, OS_LOG_TYPE_ERROR);
                    if (result)
                    {
                      _audioProductCerts_endpoint_handleAuthResponseWithMissingCert_cold_6( v97,  v98,  v99,  v100,  v101,  v102,  v103,  v104);
                      return 0LL;
                    }
                  }

                  else
                  {
                    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, 0LL);
                    uint64_t AuthChallenge = _audioProductCerts_endpoint_generateAuthChallenge((uint64_t)a1, 0);
                    if ((AuthChallenge & 1) != 0)
                    {
                      PropertyDescription = _audioProductCerts_endpoint_createPropertyDescription( AuthChallenge,  1,  (uint64_t)cf,  (const __CFArray *)a3);
                      acc_platform_packetLogging_logParsedData( (uint64_t)*a1,  (uint64_t)cf,  (uint64_t)@"AudioProductCerts",  (uint64_t)PropertyDescription,  1);
                      if (PropertyDescription) {
                        CFRelease(PropertyDescription);
                      }
                      if (gLogObjects && gNumLogObjects >= 58)
                      {
                        int v17 = *(os_log_s **)(gLogObjects + 456);
                      }

                      else
                      {
                        int v17 = (os_log_s *)&_os_log_default;
                        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                          platform_connectionInfo_configStreamCategoryListReady_cold_1();
                        }
                      }

                      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
                      {
                        uint64_t v18 = *((void *)v106 + 2);
                        int v19 = *((_DWORD *)a1 + 10);
                        *(_DWORD *)buf = 136316162;
                        uint64_t v108 = "_audioProductCerts_endpoint_handleAuthResponseWithMissingCert";
                        __int16 v109 = 2112;
                        uint64_t v110 = v18;
                        __int16 v111 = 2112;
                        *(void *)v112 = cf;
                        *(_WORD *)&v112[8] = 1024;
                        *(_DWORD *)&v112[10] = v19;
                        *(_WORD *)&v112[14] = 1024;
                        *(_DWORD *)&v112[16] = 6;
                        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "%s: %@, %@, state %d -> %d",  buf,  0x2Cu);
                      }

                      CFIndex v20 = (const void *)kCFACCProperties_Endpoint_AACP_CertificateInfo_Type;
                      CFIndex v21 = (const __CFNumber *)CFDictionaryGetValue( a1[12],  kCFACCProperties_Endpoint_AACP_CertificateInfo_Type);
                      CFArrayRef v22 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v20);
                      if (CFNumberCompare(v21, v22, 0LL))
                      {
                        if (gLogObjects && gNumLogObjects >= 58)
                        {
                          __int16 v23 = *(os_log_s **)(gLogObjects + 456);
                        }

                        else
                        {
                          __int16 v23 = (os_log_s *)&_os_log_default;
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                            platform_connectionInfo_configStreamCategoryListReady_cold_1();
                          }
                        }

                        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
                        {
                          uint64_t v33 = *((void *)v106 + 2);
                          uint64_t v34 = CFDictionaryGetValue(a1[12], kCFACCProperties_Endpoint_AACP_CertificateInfo_Data);
                          *(_DWORD *)buf = 136316162;
                          uint64_t v108 = "_audioProductCerts_endpoint_handleAuthResponseWithMissingCert";
                          __int16 v109 = 2112;
                          uint64_t v110 = v33;
                          __int16 v111 = 2112;
                          *(void *)v112 = cf;
                          *(_WORD *)&v112[8] = 2112;
                          *(void *)&v112[10] = a3;
                          *(_WORD *)&v112[18] = 2112;
                          *(void *)&v112[20] = v34;
                          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "%s: %@, %@ : %@, cert %@",  buf,  0x34u);
                        }

                        goto LABEL_46;
                      }

                      if ((_audioProductCerts_endpoint_validateChallenge((uint64_t *)a1, ValueAtIndex) & 1) != 0)
                      {
LABEL_46:
                        if ((acc_userDefaults_BOOLForKey((uint64_t)@"KeepAACPAuthData") & 1) == 0)
                        {
                          CFDictionaryRef v35 = a1[12];
                          if (v35)
                          {
                            CFRelease(v35);
                            a1[12] = 0LL;
                          }

                          CFDictionaryRef v36 = a1[13];
                          if (v36)
                          {
                            CFRelease(v36);
                            a1[13] = 0LL;
                          }

                          audioProductCerts_endpoint_removeProperty( (BOOL)a1,  kCFACCProperties_Endpoint_AudioProduct_AuthChallenge);
                          audioProductCerts_endpoint_removeProperty((BOOL)a1, v12);
                        }

LABEL_52:
                        *((_DWORD *)a1 + 10) = 6;
                        return 1LL;
                      }

                      uint64_t v24 = (os_log_s *)logObjectForModule_8();
                      BOOL result = os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
                      if (!result) {
                        return result;
                      }
                      _audioProductCerts_endpoint_handleAuthResponseWithMissingCert_cold_7( v24,  v26,  v27,  v28,  v29,  v30,  v31,  v32);
                      return 0LL;
                    }

                    uint64_t v94 = (os_log_s *)logObjectForModule_8();
                    BOOL result = os_log_type_enabled(v94, OS_LOG_TYPE_ERROR);
                    if (result)
                    {
                      uint64_t v105 = *((void *)v106 + 2);
                      *(_DWORD *)buf = 136315906;
                      uint64_t v108 = "_audioProductCerts_endpoint_handleAuthResponseWithMissingCert";
                      __int16 v109 = 2112;
                      uint64_t v110 = v105;
                      __int16 v111 = 2112;
                      *(void *)v112 = cf;
                      *(_WORD *)&v112[8] = 2112;
                      *(void *)&v112[10] = a3;
                      uint64_t v96 = "%s: %@, Unable to generate auth challenge! %@ : %@";
                      goto LABEL_74;
                    }
                  }
                }
              }

              else
              {
                uint64_t v86 = (os_log_s *)logObjectForModule_8();
                BOOL result = os_log_type_enabled(v86, OS_LOG_TYPE_ERROR);
                if (result)
                {
                  _audioProductCerts_endpoint_handleAuthResponseWithMissingCert_cold_12( v86,  v87,  v88,  v89,  v90,  v91,  v92,  v93);
                  return 0LL;
                }
              }
            }

            else
            {
              uint64_t v78 = (os_log_s *)logObjectForModule_8();
              BOOL result = os_log_type_enabled(v78, OS_LOG_TYPE_ERROR);
              if (result)
              {
                _audioProductCerts_endpoint_handleAuthResponseWithMissingCert_cold_13( v78,  v79,  v80,  v81,  v82,  v83,  v84,  v85);
                return 0LL;
              }
            }
          }

          else
          {
            uint64_t v70 = (os_log_s *)logObjectForModule_8();
            BOOL result = os_log_type_enabled(v70, OS_LOG_TYPE_ERROR);
            if (result)
            {
              _audioProductCerts_endpoint_handleAuthResponseWithMissingCert_cold_5( v70,  v71,  v72,  v73,  v74,  v75,  v76,  v77);
              return 0LL;
            }
          }
        }

        else
        {
          uint64_t v62 = (os_log_s *)logObjectForModule_8();
          BOOL result = os_log_type_enabled(v62, OS_LOG_TYPE_ERROR);
          if (result)
          {
            _audioProductCerts_endpoint_handleAuthResponseWithMissingCert_cold_4(v62, v63, v64, v65, v66, v67, v68, v69);
            return 0LL;
          }
        }
      }

      else
      {
        uint64_t v54 = (os_log_s *)logObjectForModule_8();
        BOOL result = os_log_type_enabled(v54, OS_LOG_TYPE_ERROR);
        if (result)
        {
          _audioProductCerts_endpoint_handleAuthResponseWithMissingCert_cold_3(v54, v55, v56, v57, v58, v59, v60, v61);
          return 0LL;
        }
      }
    }

    else
    {
      uint64_t v46 = (os_log_s *)logObjectForModule_8();
      BOOL result = os_log_type_enabled(v46, OS_LOG_TYPE_ERROR);
      if (result)
      {
        _audioProductCerts_endpoint_handleAuthResponseWithMissingCert_cold_2(v46, v47, v48, v49, v50, v51, v52, v53);
        return 0LL;
      }
    }
  }

  else
  {
    __int16 v38 = (os_log_s *)logObjectForModule_8();
    BOOL result = os_log_type_enabled(v38, OS_LOG_TYPE_ERROR);
    if (result)
    {
      _audioProductCerts_endpoint_handleAuthResponseWithMissingCert_cold_1(v38, v39, v40, v41, v42, v43, v44, v45);
      return 0LL;
    }
  }

  return result;
}

  CFRelease(v7);
  return v12;
}
}

              break;
          }
        }

        [(id)_gSubscriberListLock unlock];

        uint64_t v4 = (v4 + 1);
      }

      while (v4 <= v31);
    }
  }

  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_25);
  }
  if (_logPacketToFile)
  {
    LogWriter = getLogWriter();
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(LogWriter);
    [v34 log:v20];
  }

LABEL_57:
  objc_autoreleasePoolPop(v8);
}

              CFRelease(v5);
LABEL_35:
              uint64_t v24 = v19;
LABEL_36:
              CFRelease(v24);
              return;
            }

            mfi4Auth_protocol_supportsRelay(a1);
          }

          int v19 = 0LL;
          if (!v17) {
            goto LABEL_34;
          }
          goto LABEL_33;
      }

      acc_platform_packetLogging_logEvent((uint64_t)EndpointWithUUID, v13, (uint64_t)v14, v7, v8, v9, v10, v11, v33);
      goto LABEL_22;
    }
  }

  a3->var18 = self->_composerPersistentID;
  a3->var0 |= 0x20000u;
  validMask = self->_validMask;
  if ((validMask & 0x40000) == 0)
  {
LABEL_20:
    if ((validMask & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_56;
  }

uint64_t audioProductCerts_endpoint_propertiesDidChange(unsigned __int8 *a1, CFTypeRef cf)
{
  if (cf) {
    BOOL v2 = *(void *)a1 == 0LL;
  }
  else {
    BOOL v2 = 1;
  }
  uint64_t v3 = !v2;
  if (!v2)
  {
    CFRetain(cf);
    CFTypeID v6 = &startLogsNotificationObservers;
    if (gLogObjects && gNumLogObjects >= 58)
    {
      CFTypeID v7 = *(os_log_s **)(gLogObjects + 456);
    }

    else
    {
      CFTypeID v7 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      audioProductCerts_endpoint_propertiesDidChange_cold_3();
    }
    unsigned int valuePtr = 0;
    uint64_t v8 = kCFACCProperties_Endpoint_AACP_CertificateSupported;
    uint64_t Value = (const __CFNumber *)CFDictionaryGetValue( (CFDictionaryRef)cf,  kCFACCProperties_Endpoint_AACP_CertificateSupported);
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
      if (acc_userDefaults_BOOLForKey((uint64_t)@"DisableCertSupport"))
      {
        if (gLogObjects && gNumLogObjects >= 58)
        {
          int v10 = *(os_log_s **)(gLogObjects + 456);
        }

        else
        {
          int v10 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v11 = *(void *)(*(void *)a1 + 16LL);
          *(_DWORD *)buf = 138412802;
          uint64_t v47 = v11;
          __int16 v48 = 1024;
          int v49 = valuePtr;
          __int16 v50 = 1024;
          BOOL v51 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "PropertiesDidchange: %@, Override certificateRetrievalSupported %d -> %d",  buf,  0x18u);
        }

        unsigned int valuePtr = 0;
      }
    }

    uint64_t v12 = valuePtr;
    if (a1[8] != (valuePtr != 0))
    {
      uint64_t v13 = gLogObjects;
      int v14 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 58)
      {
        CFTypeID v15 = *(os_log_s **)(gLogObjects + 456);
      }

      else
      {
        CFTypeID v15 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          uint64_t v47 = v13;
          __int16 v48 = 1024;
          int v49 = v14;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          uint64_t v12 = valuePtr;
        }
      }

      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *(void *)(*(void *)a1 + 16LL);
        int v17 = a1[8];
        *(_DWORD *)buf = 138412802;
        uint64_t v47 = v16;
        __int16 v48 = 1024;
        int v49 = v17;
        __int16 v50 = 1024;
        BOOL v51 = v12 != 0;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "PropertiesDidchange: %@, certificateRetrievalSupported %d -> %d",  buf,  0x18u);
        uint64_t v12 = valuePtr;
      }

      CFStringRef v18 = CFStringCreateWithFormat(kCFAllocatorDefault, 0LL, @"certRetrievalSupported: %d", v12);
      acc_platform_packetLogging_logParsedData(*(void *)a1, v8, (uint64_t)@"AudioProductCerts", (uint64_t)v18, 1);
      if (v18) {
        CFRelease(v18);
      }
    }

    a1[8] = valuePtr != 0;
    uint64_t v19 = kCFACCProperties_Endpoint_AACP_FirstConnectionAfterPair;
    CFIndex v20 = (const __CFBoolean *)CFDictionaryGetValue( (CFDictionaryRef)cf,  kCFACCProperties_Endpoint_AACP_FirstConnectionAfterPair);
    if (v20) {
      uint64_t v21 = CFBooleanGetValue(v20);
    }
    else {
      uint64_t v21 = 0LL;
    }
    if ((_DWORD)v21 != a1[9])
    {
      if (gLogObjects && gNumLogObjects >= 58)
      {
        CFArrayRef v22 = *(os_log_s **)(gLogObjects + 456);
      }

      else
      {
        CFArrayRef v22 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v23 = *(void *)(*(void *)a1 + 16LL);
        int v24 = a1[9];
        *(_DWORD *)buf = 138412802;
        uint64_t v47 = v23;
        __int16 v48 = 1024;
        int v49 = v24;
        __int16 v50 = 1024;
        BOOL v51 = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "PropertiesDidchange: %@, firstConnectionAfterPair %d -> %d",  buf,  0x18u);
      }

      CFStringRef v25 = CFStringCreateWithFormat(kCFAllocatorDefault, 0LL, @"firstConnectionAfterPair: %d", v21);
      acc_platform_packetLogging_logParsedData(*(void *)a1, v19, (uint64_t)@"AudioProductCerts", (uint64_t)v25, 1);
      if (v25) {
        CFRelease(v25);
      }
    }

    a1[9] = (_DWORD)v21 != 0;
    uint64_t v26 = kCFACCProperties_Endpoint_AudioProduct_AuthSupported;
    uint64_t v27 = (const __CFArray *)CFDictionaryGetValue( (CFDictionaryRef)cf,  kCFACCProperties_Endpoint_AudioProduct_AuthSupported);
    if (v27)
    {
      uint64_t v28 = v27;
      if (CFArrayGetCount(v27) >= 1)
      {
        uint64_t v29 = (const void *)*((void *)a1 + 8);
        if (v29)
        {
          CFRelease(v29);
          *((void *)a1 + _Block_object_dispose(va, 8) = 0LL;
        }

        uint64_t v30 = kCFAllocatorDefault;
        *((void *)a1 + _Block_object_dispose(va, 8) = CFArrayCreateCopy(kCFAllocatorDefault, v28);
        if (CFArrayGetCount(v28) >= 1)
        {
          CFIndex v31 = 0LL;
          char v32 = 0;
          do
          {
            while (1)
            {
              ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v28, v31);
              int v44 = 0;
              CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &v44);
              int v34 = v44;
              if (a1[v44 + 72]) {
                break;
              }
              CFAllocatorRef alloc = v30;
              uint64_t v35 = v3;
              uint64_t v36 = v6[353];
              int v37 = gNumLogObjects;
              if (v36 && gNumLogObjects >= 58)
              {
                __int16 v38 = *(os_log_s **)(v36 + 456);
              }

              else
              {
                __int16 v38 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  uint64_t v47 = v36;
                  __int16 v48 = 1024;
                  int v49 = v37;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                  int v34 = v44;
                }
              }

              if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v39 = *(void *)(*(void *)a1 + 16LL);
                int v40 = a1[v34 + 72];
                *(_DWORD *)buf = 138413058;
                uint64_t v47 = v39;
                __int16 v48 = 1024;
                int v49 = v34;
                __int16 v50 = 1024;
                BOOL v51 = v40;
                __int16 v52 = 1024;
                int v53 = 1;
                _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "PropertiesDidchange: %@, authSupported[%d] = %d -> %d ",  buf,  0x1Eu);
                int v34 = v44;
              }

              uint64_t v3 = v35;
              CFTypeID v6 = &startLogsNotificationObservers;
              char v32 = 1;
              a1[v34 + 72] = 1;
              ++v31;
              uint64_t v30 = alloc;
              if (v31 >= CFArrayGetCount(v28)) {
                goto LABEL_67;
              }
            }

            ++v31;
          }

          while (v31 < CFArrayGetCount(v28));
          if ((v32 & 1) == 0) {
            goto LABEL_69;
          }
LABEL_67:
          CFStringRef v41 = CFStringCreateWithFormat(v30, 0LL, @"authSupported: %@", v28);
          acc_platform_packetLogging_logParsedData( *(void *)a1,  v26,  (uint64_t)@"AudioProductCerts",  (uint64_t)v41,  1);
          if (v41) {
            CFRelease(v41);
          }
        }
      }
    }

LABEL_69:
    CFDictionaryApplyFunction( (CFDictionaryRef)cf,  (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_handlePropertiesChange,  a1);
    CFRelease(cf);
  }

  return v3;
}

            if (!iAP2MsgIsDataVoid(v28))
            {
              uint64_t v89 = (os_log_s *)logObjectForModule_23();
              uint64_t v63 = theArray;
              if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR)) {
                _startNowPlayingUpdatesHandler_cold_18(v29, a2);
              }
              goto LABEL_221;
            }

            goto LABEL_70;
          }

          if (!iAP2MsgIsDataVoid(v28))
          {
            uint64_t v87 = (os_log_s *)logObjectForModule_23();
            uint64_t v63 = theArray;
            if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR)) {
              iap2_CarPlayStartSession_cold_4(a2);
            }
            goto LABEL_221;
          }

          LOBYTE(v93) = 1;
        }

                inited = 0LL;
                *(_WORD *)(a1 + 1904) = v35;
                uint64_t v55 = *(_OWORD *)v31;
                *(_WORD *)(a1 + 1922) = *(_WORD *)(v31 + 16);
                *(_OWORD *)(a1 + 1906) = v55;
                goto LABEL_72;
              }

              uint64_t v46 = v30;
              uint64_t v47 = a1 + 8LL * v30;
              qiAuth_util_logCertData( (const void **)a1,  (uint64_t)"DIGEST: --CertDigest--",  *(void *)(v47 + 256),  0x20u,  1);
              if (*(void *)(v47 + 336))
              {
LABEL_65:
                qiAuth_util_generateNonce(a1, (void *)(a1 + 135), 0x10u);
                *(_BYTE *)(a1 + 215) = 0;
                __int16 v52 = (os_log_s *)logObjectForModule_19();
                if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
                {
                  int v53 = *(unsigned __int8 *)(a1 + 48);
                  *(_DWORD *)buf = 136315650;
                  uint64_t v78 = "_qiAuth_protocol_handleResponse_DIGESTS";
                  uint64_t v79 = 1024;
                  uint64_t v80 = 2014;
                  uint64_t v81 = 1024;
                  uint64_t v82 = v53;
                  _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "%s:%d CHALLENGE, currentSlot %d, Cert already available",  buf,  0x18u);
                }

                qiAuth_util_logCertData((const void **)a1, (uint64_t)"DIGEST: --nonce--", a1 + 135, 0x10u, 1);
                inited = qiAuth_protocol_initMsg_CHALLENGE( v54,  *(unsigned __int8 *)(a1 + 12),  *(unsigned __int8 *)(a1 + 48),  (_OWORD *)(a1 + 135),  0x10u,  v31,  v12,  a6);
                CFTypeID v7 = &startLogsNotificationObservers;
                if ((_DWORD)inited || (uint64_t v35 = *a6, v35 != 18))
                {
                  uint64_t v36 = (os_log_s *)logObjectForModule_19();
                  if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v63 = *(unsigned __int8 *)(a1 + 48);
                    uint64_t v64 = *a6;
                    *(_DWORD *)buf = 136316162;
                    uint64_t v78 = "_qiAuth_protocol_handleResponse_DIGESTS";
                    uint64_t v79 = 1024;
                    uint64_t v80 = 2029;
                    uint64_t v81 = 1024;
                    uint64_t v82 = v63;
                    uint64_t v83 = 1024;
                    uint64_t v84 = inited;
                    uint64_t v85 = 1024;
                    *(_DWORD *)uint64_t v86 = v64;
                    uint64_t v39 = "%s:%d CHALLENGE, currentSlot %d, result %d, dataOutLen %d, skip saving challengeMsg!";
                    goto LABEL_88;
                  }

          uint64_t v8 = &startLogsNotificationObservers;
          if (gLogObjects && gNumLogObjects >= 60)
          {
            uint64_t v39 = *(os_log_s **)(gLogObjects + 472);
          }

          else
          {
            uint64_t v39 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            uint64_t v47 = "_qiAuth_protocol_handleResponse_CHALLENGE_AUTH";
            __int16 v48 = 1024;
            int v49 = 2334;
            __int16 v50 = 1024;
            BOOL v51 = v16;
            _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "%s:%d No cert for slot %d !!! need GET_CERTIFICATE",  buf,  0x18u);
          }

          int v40 = qiAuth_util_policy_preferredSlot();
          *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = v40;
          *(_DWORD *)(a1 + 244) = 8323072;
          inited = qiAuth_protocol_initMsg_GET_CERTIFICATE( v40,  *(unsigned __int8 *)(a1 + 12),  v16,  0,  0x7Fu,  a4,  a5,  a6);
          goto LABEL_53;
        }
      }

      else
      {
        uint64_t v8 = &startLogsNotificationObservers;
      }
    }
  }

  else
  {
    int v14 = 0;
    CFTypeID v15 = 4294967294LL;
    LODWORD(v16) = 4;
  }

CFStringRef _CFDictionaryApplierFunction_handlePropertiesChange( const __CFString *result, const void *a2, uint64_t *a3)
{
  if (result && a3)
  {
    if (*a3) {
      return (const __CFString *)audioProductCerts_endpoint_propertyDidChange(a3, result, a2);
    }
  }

  return result;
}

BOOL audioProductCerts_endpoint_setProperty(uint64_t *a1, const void *a2, const __CFArray *a3)
{
  uint64_t v12 = 0LL;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000LL;
  char v15 = 0;
  if (a1 && *a1 && *(void *)(*a1 + 16))
  {
    PropertyDescription = _audioProductCerts_endpoint_createPropertyDescription((uint64_t)a1, 1, (uint64_t)a2, a3);
    acc_platform_packetLogging_logParsedData( *a1,  (uint64_t)a2,  (uint64_t)@"AudioProductCerts",  (uint64_t)PropertyDescription,  0);
    if (PropertyDescription) {
      CFRelease(PropertyDescription);
    }
    CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, *(CFStringRef *)(*a1 + 16));
    if (a2) {
      CFRetain(a2);
    }
    if (a3) {
      CFRetain(a3);
    }
    uint64_t v8 = (dispatch_queue_s *)a1[6];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 0x40000000LL;
    _DWORD v11[2] = __audioProductCerts_endpoint_setProperty_block_invoke;
    v11[3] = &unk_1001FA6E8;
    v11[4] = &v12;
    v11[5] = Copy;
    v11[6] = a2;
    v11[7] = a3;
    dispatch_async(v8, v11);
    BOOL v9 = *((_BYTE *)v13 + 24) != 0;
  }

  else
  {
    BOOL v9 = 0LL;
  }

  _Block_object_dispose(&v12, 8);
  return v9;
}

__CFString *_audioProductCerts_endpoint_createPropertyDescription( uint64_t a1, int a2, uint64_t a3, const __CFArray *a4)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0LL);
  uint64_t v8 = Mutable;
  BOOL v9 = "DELETE";
  if (a2) {
    BOOL v9 = "ADD";
  }
  CFStringAppendFormat(Mutable, 0LL, @"(%s) { %@ : \n", v9, a3);
  if (a4 && (CFTypeID v10 = CFGetTypeID(a4), v10 == CFArrayGetTypeID()))
  {
    if (CFArrayGetCount(a4))
    {
      v12.length = CFArrayGetCount(a4);
      v12.location = 0LL;
      CFArrayApplyFunction(a4, v12, (CFArrayApplierFunction)_CFArrayApplierFunction_parseEntries, v8);
    }

    else
    {
      CFStringAppendFormat(v8, 0LL, @"no entries ");
    }
  }

  else
  {
    CFStringAppendFormat(v8, 0LL, @"(no valid entries) ");
  }

  CFStringAppendFormat(v8, 0LL, @"}");
  return v8;
}

void __audioProductCerts_endpoint_setProperty_block_invoke(uint64_t a1)
{
  EndpointWithUUID = (pthread_mutex_t *)acc_manager_getEndpointWithUUID(*(const void **)(a1 + 40));
  if (EndpointWithUUID)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = acc_endpoint_setProperty( EndpointWithUUID,  *(const void **)(a1 + 48),  *(const __CFNull **)(a1 + 56));
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 58)
    {
      uint64_t v3 = *(os_log_s **)(gLogObjects + 456);
    }

    else
    {
      uint64_t v3 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      int v7 = 136315394;
      uint64_t v8 = "audioProductCerts_endpoint_setProperty_block_invoke";
      __int16 v9 = 2112;
      uint64_t v10 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s: unable to find endpoint for %@",  (uint8_t *)&v7,  0x16u);
    }
  }

  CFRelease(*(CFTypeRef *)(a1 + 40));
  dispatch_queue_t v5 = *(const void **)(a1 + 48);
  if (v5) {
    CFRelease(v5);
  }
  CFTypeID v6 = *(const void **)(a1 + 56);
  if (v6) {
    CFRelease(v6);
  }
}

BOOL audioProductCerts_endpoint_removeProperty(BOOL result, const void *a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t *)result;
    PropertyDescription = _audioProductCerts_endpoint_createPropertyDescription(result, 0, (uint64_t)a2, 0LL);
    acc_platform_packetLogging_logParsedData( *v3,  (uint64_t)a2,  (uint64_t)@"AudioProductCerts",  (uint64_t)PropertyDescription,  0);
    if (PropertyDescription) {
      CFRelease(PropertyDescription);
    }
    return acc_endpoint_removeProperty((pthread_mutex_t *)*v3, a2);
  }

  return result;
}

void _audioProductCerts_endpoint_cleanupSession(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 58)
  {
    BOOL v2 = *(os_log_s **)(gLogObjects + 456);
  }

  else
  {
    BOOL v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 56);
    int v10 = 134217984;
    uint64_t v11 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "audioProductCerts cleanupSession: attachTimestamp %f",  (uint8_t *)&v10,  0xCu);
  }

  platform_auth_deallocCertificateCache(*(void *)(a1 + 32));
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 80) = 5;
  uint64_t v4 = *(const void **)(a1 + 16);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 16) = 0LL;
  }

  dispatch_queue_t v5 = *(const void **)(a1 + 24);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 24) = 0LL;
  }

  CFTypeID v6 = *(const void **)(a1 + 88);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  }

  int v7 = *(const void **)(a1 + 96);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 96) = 0LL;
  }

  uint64_t v8 = *(const void **)(a1 + 104);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 104) = 0LL;
  }

  __int16 v9 = *(const void **)(a1 + 64);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 64) = 0LL;
  }

void _audioProductCerts_endpoint_addCertEntryToList( unsigned __int8 *a1, const void *a2, const void *a3, const void *a4)
{
  unsigned int v8 = acc_userDefaults_BOOLForKey((uint64_t)@"DisableSNOnly");
  if (a1 && a2 && a3)
  {
    unsigned int v9 = v8;
    if (gLogObjects && gNumLogObjects >= 58)
    {
      int v10 = *(os_log_s **)(gLogObjects + 456);
    }

    else
    {
      int v10 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v21 = *(void *)(*(void *)a1 + 16LL);
      int v22 = a1[8];
      int v23 = 138413314;
      *(void *)int v24 = v21;
      *(_WORD *)&void v24[8] = 1024;
      *(_DWORD *)CFStringRef v25 = v22;
      *(_WORD *)&v25[4] = 2112;
      *(void *)&v25[6] = a2;
      __int16 v26 = 2112;
      uint64_t v27 = a3;
      __int16 v28 = 2112;
      uint64_t v29 = a4;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "_audioProductCerts_endpoint_addCertEntryToList: %@, certificateRetrievalSupported %d, type %@, serial %@, certData %@",  (uint8_t *)&v23,  0x30u);
    }

    CFMutableArrayRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  3LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    CFDictionaryAddValue(Mutable, kCFACCProperties_Endpoint_AACP_CertificateInfo_Type, a2);
    CFDictionaryAddValue(Mutable, kCFACCProperties_Endpoint_AACP_CertificateInfo_Serial, a3);
    if (a4) {
      CFDictionaryAddValue(Mutable, kCFACCProperties_Endpoint_AACP_CertificateInfo_Data, a4);
    }
    if (gLogObjects && gNumLogObjects >= 58)
    {
      CFRange v12 = *(os_log_s **)(gLogObjects + 456);
    }

    else
    {
      CFRange v12 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      int v13 = a1[8];
      if (a4) {
        CFIndex Length = CFDataGetLength((CFDataRef)a4);
      }
      else {
        CFIndex Length = -1LL;
      }
      int v23 = 67109632;
      *(_DWORD *)int v24 = v9;
      *(_WORD *)&v24[4] = 1024;
      *(_DWORD *)&v24[6] = v13;
      *(_WORD *)CFStringRef v25 = 2048;
      *(void *)&v25[2] = Length;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "_audioProductCerts_endpoint_addCertEntryToList: disableSNOnly %d, certificateRetrievalSupported %d, certData %ld bytes",  (uint8_t *)&v23,  0x18u);
    }

    if (v9)
    {
      uint64_t v15 = gLogObjects;
      int v16 = gNumLogObjects;
    }

    else
    {
      uint64_t v15 = gLogObjects;
      int v16 = gNumLogObjects;
      if (a4 || !a1[8])
      {
        if (gLogObjects && gNumLogObjects >= 58)
        {
          uint64_t v19 = *(os_log_s **)(gLogObjects + 456);
        }

        else
        {
          uint64_t v19 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          CFIndex v20 = "valid certificate";
          if (!a4) {
            CFIndex v20 = "serial numbers";
          }
          int v23 = 136315394;
          *(void *)int v24 = v20;
          *(_WORD *)&void v24[8] = 2112;
          *(void *)CFStringRef v25 = Mutable;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "_audioProductCerts_endpoint_addCertEntryToList: add %s to certificateList, entry %@",  (uint8_t *)&v23,  0x16u);
        }

        CFStringRef v18 = (CFMutableArrayRef *)(a1 + 24);
        goto LABEL_45;
      }
    }

    if (v15 && v16 >= 58)
    {
      int v17 = *(os_log_s **)(v15 + 456);
    }

    else
    {
      int v17 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      int v23 = 138412290;
      *(void *)int v24 = Mutable;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "_audioProductCerts_endpoint_addCertEntryToList: add serial numbers to certificateRequiredList, entry %@",  (uint8_t *)&v23,  0xCu);
    }

    CFStringRef v18 = (CFMutableArrayRef *)(a1 + 16);
LABEL_45:
    CFArrayAppendValue(*v18, Mutable);
    if (Mutable) {
      CFRelease(Mutable);
    }
  }

void ___audioProductCerts_endpoint_handlePropertiesDidChange_block_invoke(uint64_t a1)
{
}

void _CFArrayApplierFunction_parseEntries(const void *a1, __CFString *a2)
{
  uint64_t v2 = 0LL;
  if (a1 && a2)
  {
    CFTypeID v5 = CFGetTypeID(a1);
    if (v5 != CFDictionaryGetTypeID() || (CFTypeID v6 = CFGetTypeID(a2), v6 != CFStringGetTypeID()))
    {
      uint64_t v2 = 0LL;
      goto LABEL_18;
    }

    uint64_t Value = CFDictionaryGetValue((CFDictionaryRef)a1, kCFACCProperties_Endpoint_AACP_CertificateInfo_Type);
    unsigned int v8 = CFDictionaryGetValue((CFDictionaryRef)a1, kCFACCProperties_Endpoint_AACP_CertificateInfo_Serial);
    unsigned int v9 = CFDictionaryGetValue((CFDictionaryRef)a1, kCFACCProperties_Endpoint_AACP_CertificateInfo_Data);
    int v10 = CFDictionaryGetValue((CFDictionaryRef)a1, kCFACCProperties_Endpoint_AudioProduct_AuthData);
    if (gLogObjects && gNumLogObjects >= 58)
    {
      uint64_t v11 = *(os_log_s **)(gLogObjects + 456);
    }

    else
    {
      uint64_t v11 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138413058;
      CFIndex v20 = Value;
      __int16 v21 = 2112;
      int v22 = v8;
      __int16 v23 = 2112;
      int v24 = v9;
      __int16 v25 = 2112;
      __int16 v26 = v10;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "_CFArrayApplierFunction_parseEntries: type %@, serial %@, data %@, authData %@",  buf,  0x2Au);
      if (v9) {
        goto LABEL_12;
      }
    }

    else if (v9)
    {
LABEL_12:
      CFStringAppendFormat(a2, 0LL, @"\t{type=%@, serial=%@, data=%@} \n", Value, v8, v9);
LABEL_17:
      uint64_t v2 = (uint64_t)a2;
      goto LABEL_18;
    }

    if (v10) {
      CFStringAppendFormat(a2, 0LL, @"\t{type=%@, serial=%@, authData=%@} \n", Value, v8, v10);
    }
    else {
      CFStringAppendFormat(a2, 0LL, @"\t{type=%@, serial=%@, no data} \n", Value, v8);
    }
    goto LABEL_17;
  }

LABEL_18:
  if (gLogObjects && gNumLogObjects >= 58)
  {
    CFRange v12 = *(os_log_s **)(gLogObjects + 456);
  }

  else
  {
    CFRange v12 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
    _CFArrayApplierFunction_parseEntries_cold_1(v2, v12, v13, v14, v15, v16, v17, v18);
  }
}

  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v16 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v16 = (os_log_s *)&_os_log_default;
    uint64_t v17 = &_os_log_default;
  }

  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    if (a1) {
      uint64_t v19 = *(unsigned __int8 *)(a1 + 144);
    }
    else {
      uint64_t v19 = -1;
    }
    uint64_t v36 = 136316418;
    int v37 = "_convertNVMReadResponse";
    __int16 v38 = 1024;
    uint64_t v39 = 3034;
    int v40 = 1024;
    CFStringRef v41 = v19;
    uint64_t v42 = 1024;
    uint64_t v43 = a3;
    int v44 = 1024;
    uint64_t v45 = a2;
    uint64_t v46 = 1024;
    uint64_t v47 = v7;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "%s:%d negotiatedVersion %d, force %d, commandID 0x%04x -> 0x%04x",  (uint8_t *)&v36,  0x2Au);
  }

  return v7;
}

    LOWORD(v14) = 0;
    uint64_t v15 = 1LL;
    goto LABEL_19;
  }

  if (a1) {
    goto LABEL_18;
  }
  if (gLogObjects && gNumLogObjects >= 55)
  {
    __int16 v23 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    __int16 v23 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  uint64_t v15 = 1LL;
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109888;
    __int16 v28 = a2;
    uint64_t v29 = 1024;
    uint64_t v30 = a5;
    CFIndex v31 = 1024;
    char v32 = a6;
    uint64_t v33 = 1024;
    int v34 = 1;
    uint64_t v19 = "[AccAuth] setupSegmentedTransfer: authSession: no authSession, send %d, dataLen %d, segmentSize %d, errorNo %d \n";
    CFIndex v20 = v23;
    __int16 v21 = 26;
    goto LABEL_26;
  }

  return v15;
}

  return v17;
}
}

      uint64_t v11 = objc_claimAutoreleasedReturnValue([v9 objectAtIndexedSubscript:0]);
LABEL_20:
      int v7 = v11;
      goto LABEL_21;
    }

    CFTypeID v6 = v3;
    int v7 = SecCertificateCreateWithBytes(kCFAllocatorDefault, [v6 bytes], objc_msgSend(v6, "length"));
    if (!v7)
    {
      unsigned int v8 = (void *)SecCMSCertificatesOnlyMessageCopyCertificates(v6);
      unsigned int v9 = v8;
      if (!v8 || ![v8 count])
      {
        int v7 = 0LL;
LABEL_21:

        goto LABEL_22;
      }

      goto LABEL_18;
    }
  }

  else
  {
    int v7 = 0LL;
  }

  CFRange v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  self->_geniusMix));
  -[NSMutableDictionary setObject:forKey:]( v4,  "setObject:forKey:",  v12,  @"ACCMediaLibraryUpdatePlaylistIsGeniusMix");

  validMask = self->_validMask;
  if ((validMask & 0x20) == 0)
  {
LABEL_9:
    if ((validMask & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }

    __break(0x5513u);
    return result;
  }

  uint64_t v2 = &MFi4AccessoryCAName;
  BOOL result = compare_octet_string_partial((uint64_t)&MFi4AccessoryCAName, (uint64_t)&v7);
  if ((_DWORD)result)
  {
    uint64_t v2 = &MFi4AttestationCAName;
    BOOL result = compare_octet_string_partial((uint64_t)&MFi4AttestationCAName, (uint64_t)&v7);
    if ((_DWORD)result) {
      return 0LL;
    }
  }

  uint64_t v3 = v2[1];
  uint64_t v4 = v7;
  if (__CFADD__(v7, v3)) {
    goto LABEL_18;
  }
  CFTypeID v5 = v8;
  BOOL result = (unint64_t)&v3[v7];
  if (!&v3[v7]) {
    return result;
  }
LABEL_11:
  CFTypeID v6 = __CFADD__(v4, v5);
  if (result > 0xFFFFFFFFFFFFFFF7LL || v6) {
    goto LABEL_18;
  }
  if (v4 + v5 < result + 8) {
    return 0LL;
  }
  return result;
}

          __break(0x5519u);
          return result;
        }

CFIndex _audioProductCerts_endpoint_getSerialEntryIndexInCertList(const __CFArray *a1, const __CFString *a2)
{
  CFIndex v2 = -1LL;
  if (a1 && a2 && CFArrayGetCount(a1) >= 1)
  {
    CFIndex v2 = 0LL;
    CFTypeID v5 = (const void *)kCFACCProperties_Endpoint_AACP_CertificateInfo_Serial;
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v2);
      uint64_t Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, v5);
      uint64_t v8 = gLogObjects;
      int v9 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 58)
      {
        int v10 = *(os_log_s **)(gLogObjects + 456);
      }

      else
      {
        int v10 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          uint64_t v16 = v8;
          __int16 v17 = 1024;
          LODWORD(v1_Block_object_dispose(va, 8) = v9;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          int v10 = (os_log_s *)&_os_log_default;
        }
      }

      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        CFIndex Count = CFArrayGetCount(a1);
        *(_DWORD *)buf = 134218754;
        uint64_t v16 = v2;
        __int16 v17 = 2048;
        CFIndex v18 = Count;
        __int16 v19 = 2112;
        CFIndex v20 = Value;
        __int16 v21 = 2112;
        int v22 = a2;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "_CFArrayApplierFunction_parseEntries: [%ld / %ld] serial %@ =?= %@",  buf,  0x2Au);
        if (Value)
        {
LABEL_12:
          if (CFStringCompare(Value, a2, 0LL) == kCFCompareEqualTo) {
            break;
          }
        }
      }

      else if (Value)
      {
        goto LABEL_12;
      }

      if (++v2 >= CFArrayGetCount(a1))
      {
        CFIndex v2 = -1LL;
        break;
      }
    }
  }

  if (gLogObjects && gNumLogObjects >= 58)
  {
    CFRange v12 = *(os_log_s **)(gLogObjects + 456);
  }

  else
  {
    CFRange v12 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
    _audioProductCerts_endpoint_getSerialEntryIndexInCertList_cold_1(v2, v12, v13);
  }
  return v2;
}

void _CFArrayApplierFunction_handleSerialList(CFTypeRef cf, uint64_t *a2)
{
  uint64_t v3 = 0LL;
  if (cf && a2)
  {
    CFTypeID v5 = CFGetTypeID(cf);
    if (v5 == CFDictionaryGetTypeID())
    {
      uint64_t v3 = *a2;
      if (*a2 && *(void *)(v3 + 16))
      {
        uint64_t Value = CFDictionaryGetValue((CFDictionaryRef)cf, kCFACCProperties_Endpoint_AACP_CertificateInfo_Type);
        int v7 = CFDictionaryGetValue((CFDictionaryRef)cf, kCFACCProperties_Endpoint_AACP_CertificateInfo_Serial);
        if (gLogObjects && gNumLogObjects >= 58)
        {
          uint64_t v8 = *(os_log_s **)(gLogObjects + 456);
        }

        else
        {
          uint64_t v8 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          *(void *)__int16 v38 = Value;
          *(_WORD *)&v38[8] = 2112;
          *(void *)uint64_t v39 = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "_CFArrayApplierFunction_handleSerialList: type %@, serial %@",  buf,  0x16u);
        }

        if (Value) {
          BOOL v9 = v7 == 0LL;
        }
        else {
          BOOL v9 = 1;
        }
        int v10 = !v9;
        if (!v9)
        {
          int v36 = v10;
          if (*((_BYTE *)a2 + 9) && (platform_auth_removeCertDataEntryFromCache(a2[4], v7) & 1) == 0)
          {
            if (gLogObjects && gNumLogObjects >= 58)
            {
              uint64_t v11 = *(os_log_s **)(gLogObjects + 456);
            }

            else
            {
              uint64_t v11 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "_CFArrayApplierFunction_handleCertList: failed to remove certificate from cache!",  buf,  2u);
            }
          }

          uint64_t CertDataFromSerialNumber = platform_auth_createCertDataFromSerialNumber(a2[4], v7);
          if (CertDataFromSerialNumber)
          {
            uint64_t v13 = (const void *)CertDataFromSerialNumber;
            uint64_t v35 = v3;
            unsigned int v14 = acc_userDefaults_BOOLForKey((uint64_t)@"DisableCertVerification");
            int v15 = platform_auth_verifyPublicCertificate(v13);
            if (gLogObjects && gNumLogObjects >= 58)
            {
              uint64_t v16 = *(os_log_s **)(gLogObjects + 456);
            }

            else
            {
              uint64_t v16 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)__int16 v38 = v15;
              _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "_CFArrayApplierFunction_handleSerialList: initial verify, valid %d",  buf,  8u);
            }

            if ((v15 & 1) != 0)
            {
              BOOL v18 = 1;
            }

            else
            {
              BOOL v18 = platform_auth_verifyCertificateChain(v13, 0LL, 4u);
              if (gLogObjects && gNumLogObjects >= 58)
              {
                __int16 v19 = *(os_log_s **)(gLogObjects + 456);
              }

              else
              {
                __int16 v19 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)__int16 v38 = v18;
                _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "_CFArrayApplierFunction_handleSerialList: second verify, valid %d",  buf,  8u);
              }
            }

            if (gLogObjects && gNumLogObjects >= 58)
            {
              CFIndex v20 = *(os_log_s **)(gLogObjects + 456);
            }

            else
            {
              CFIndex v20 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)__int16 v38 = v14;
              *(_WORD *)&v38[4] = 1024;
              *(_DWORD *)&v38[6] = v18;
              _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "_CFArrayApplierFunction_handleSerialList: cached certData, skip %d, valid %d",  buf,  0xEu);
            }

            if ((v14 | v18) == 1)
            {
              __int16 v21 = (unsigned __int8 *)a2;
              int v22 = Value;
              __int16 v23 = v7;
              int v24 = v13;
            }

            else
            {
              if (gLogObjects && gNumLogObjects >= 58)
              {
                __int16 v25 = *(os_log_s **)(gLogObjects + 456);
              }

              else
              {
                __int16 v25 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412290;
                *(void *)__int16 v38 = v7;
                _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "_CFArrayApplierFunction_handleSerialList: invalid cached certData, remove cert from cache! %@",  buf,  0xCu);
              }

              if ((platform_auth_removeCertDataEntryFromCache(a2[4], v7) & 1) == 0)
              {
                if (gLogObjects && gNumLogObjects >= 58)
                {
                  __int16 v26 = *(os_log_s **)(gLogObjects + 456);
                }

                else
                {
                  __int16 v26 = (os_log_s *)&_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }

                if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "_CFArrayApplierFunction_handleSerialList: failed to remove certificate from cache!",  buf,  2u);
                }
              }

              if (gLogObjects && gNumLogObjects >= 58)
              {
                uint64_t v27 = *(os_log_s **)(gLogObjects + 456);
              }

              else
              {
                uint64_t v27 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412546;
                *(void *)__int16 v38 = Value;
                *(_WORD *)&v38[8] = 2112;
                *(void *)uint64_t v39 = v7;
                _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_INFO,  "_CFArrayApplierFunction_handleSerialList: call _addCertEntryToList, typeObj %@, serialObj %@",  buf,  0x16u);
              }

              __int16 v21 = (unsigned __int8 *)a2;
              int v22 = Value;
              __int16 v23 = v7;
              int v24 = 0LL;
            }

            _audioProductCerts_endpoint_addCertEntryToList(v21, v22, v23, v24);
            uint64_t v3 = v35;
            int v10 = v36;
            CFRelease(v13);
          }

          else
          {
            if (gLogObjects && gNumLogObjects >= 58)
            {
              __int16 v17 = *(os_log_s **)(gLogObjects + 456);
            }

            else
            {
              __int16 v17 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412546;
              *(void *)__int16 v38 = Value;
              *(_WORD *)&v38[8] = 2112;
              *(void *)uint64_t v39 = v7;
              _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "_CFArrayApplierFunction_handleSerialList: missing cached certData, call _addCertEntryToList, typeObj %@, serialObj %@",  buf,  0x16u);
            }

            _audioProductCerts_endpoint_addCertEntryToList((unsigned __int8 *)a2, Value, v7, 0LL);
          }
        }

        if (gLogObjects && gNumLogObjects >= 58)
        {
          __int16 v28 = *(os_log_s **)(gLogObjects + 456);
        }

        else
        {
          __int16 v28 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          uint64_t v29 = *(void *)(v3 + 16);
          int v30 = *((_DWORD *)a2 + 10);
          *(_DWORD *)buf = 138412802;
          *(void *)__int16 v38 = v29;
          *(_WORD *)&v38[8] = 1024;
          *(_DWORD *)uint64_t v39 = v30;
          *(_WORD *)&v39[4] = 1024;
          *(_DWORD *)&v39[6] = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_INFO,  "_CFArrayApplierFunction_handleSerialList: %@, state %d, success %d",  buf,  0x18u);
        }

        if (gLogObjects && gNumLogObjects >= 58)
        {
          CFIndex v31 = *(os_log_s **)(gLogObjects + 456);
        }

        else
        {
          CFIndex v31 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v34 = *(void *)(v3 + 16);
          *(_DWORD *)buf = 138412546;
          *(void *)__int16 v38 = v34;
          *(_WORD *)&v38[8] = 2112;
          *(void *)uint64_t v39 = cf;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEBUG,  "_CFArrayApplierFunction_handleSerialList: %@, value %@",  buf,  0x16u);
          if ((v10 & 1) != 0) {
            return;
          }
        }

        else if ((v10 & 1) != 0)
        {
          return;
        }
      }
    }

    else
    {
      uint64_t v3 = 0LL;
    }
  }

  if (gLogObjects && gNumLogObjects >= 58)
  {
    char v32 = *(os_log_s **)(gLogObjects + 456);
  }

  else
  {
    char v32 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    if (v3) {
      uint64_t v33 = *(void *)(v3 + 16);
    }
    else {
      uint64_t v33 = 0LL;
    }
    *(_DWORD *)buf = 138412546;
    *(void *)__int16 v38 = v33;
    *(_WORD *)&v38[8] = 2112;
    *(void *)uint64_t v39 = cf;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "_CFArrayApplierFunction_handleSerialList: %@, Failed to handle serialList entry %@",  buf,  0x16u);
  }

void _CFArrayApplierFunction_handleCertList(CFTypeRef cf, uint64_t a2)
{
  uint64_t v3 = 0LL;
  uint64_t v4 = &startLogsNotificationObservers;
  if (!cf || !a2) {
    goto LABEL_149;
  }
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 != CFDictionaryGetTypeID())
  {
    uint64_t v3 = 0LL;
    goto LABEL_149;
  }

  uint64_t v3 = *(void *)a2;
  if (!*(void *)a2) {
    goto LABEL_149;
  }
  key = (void *)kCFACCProperties_Endpoint_AACP_CertificateInfo_Type;
  uint64_t Value = CFDictionaryGetValue((CFDictionaryRef)cf, kCFACCProperties_Endpoint_AACP_CertificateInfo_Type);
  __int16 v50 = (void *)kCFACCProperties_Endpoint_AACP_CertificateInfo_Serial;
  uint64_t v8 = (const __CFString *)CFDictionaryGetValue( (CFDictionaryRef)cf,  kCFACCProperties_Endpoint_AACP_CertificateInfo_Serial);
  int v49 = (void *)kCFACCProperties_Endpoint_AACP_CertificateInfo_Data;
  BOOL v9 = (void *)CFDictionaryGetValue((CFDictionaryRef)cf, kCFACCProperties_Endpoint_AACP_CertificateInfo_Data);
  if (gLogObjects && gNumLogObjects >= 58)
  {
    int v10 = *(os_log_s **)(gLogObjects + 456);
  }

  else
  {
    int v10 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412802;
    *(void *)uint64_t v55 = Value;
    *(_WORD *)&v55[8] = 2112;
    *(void *)&v55[10] = v8;
    *(_WORD *)&v55[18] = 2112;
    uint64_t v56 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "_CFArrayApplierFunction_handleCertList: type %@, serial %@, data %@",  buf,  0x20u);
  }

  int v11 = 0;
  if (Value && v8 && v9)
  {
    if (CFDataGetLength((CFDataRef)v9) >= 1 && (CFIndex Length = CFDataGetLength((CFDataRef)v9)) != 0)
    {
      CFIndex v47 = Length;
      if ((acc_userDefaults_BOOLForKey((uint64_t)@"DisableCertVerification") & 1) != 0)
      {
        BOOL v13 = 0;
        int v52 = 1;
        int v48 = 1;
      }

      else
      {
        int v21 = platform_auth_verifyPublicCertificate(v9);
        if (gLogObjects && gNumLogObjects >= 58)
        {
          int v22 = *(os_log_s **)(gLogObjects + 456);
        }

        else
        {
          int v22 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)uint64_t v55 = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "_CFArrayApplierFunction_handleCertList: initial verify, valid %d",  buf,  8u);
        }

        uint64_t v4 = &startLogsNotificationObservers;
        if ((v21 & 1) != 0)
        {
          int v52 = 0;
          int v48 = 1;
          BOOL v13 = 1;
        }

        else
        {
          BOOL v13 = platform_auth_verifyCertificateChain(v9, 0LL, 4u);
          if (gLogObjects && gNumLogObjects >= 58)
          {
            __int16 v25 = *(os_log_s **)(gLogObjects + 456);
          }

          else
          {
            __int16 v25 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)uint64_t v55 = v13;
            _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "_CFArrayApplierFunction_handleCertList: second verify, valid %d",  buf,  8u);
          }

          int v52 = 0;
          int v48 = 1;
          uint64_t v4 = &startLogsNotificationObservers;
        }
      }
    }

    else
    {
      CFIndex v47 = 0LL;
      int v48 = 0;
      BOOL v13 = 0;
      int v52 = 1;
    }

    int v14 = *((_DWORD *)v4 + 708);
    if (gLogObjects && v14 >= 58)
    {
      int v15 = *(os_log_s **)(gLogObjects + 456);
    }

    else
    {
      int v15 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)uint64_t v55 = v52;
      *(_WORD *)&v55[4] = 1024;
      *(_DWORD *)&v55[6] = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "_CFArrayApplierFunction_handleCertList: skip %d, valid %d",  buf,  0xEu);
    }

    if (v13) {
      CFStringRef v16 = CFStringCreateWithFormat( kCFAllocatorDefault,  0LL,  @"CertificateVerify: serial %@, type %@, valid certData",  v8,  Value);
    }
    else {
      CFStringRef v16 = CFStringCreateWithFormat( kCFAllocatorDefault,  0LL,  @"CertificateVerify: serial %@, type %@, NOT valid certData",  v8,  Value);
    }
    CFStringRef v17 = v16;
    acc_platform_packetLogging_logData(v3, (uint64_t)v16, (uint64_t)@"AudioProductCerts", v9, -1);
    if (v17) {
      CFRelease(v17);
    }
    if ((v52 | v13) == 1)
    {
      if (v48)
      {
        if ((platform_auth_addCertDataEntryToCacheForSerialNumber(*(void *)(a2 + 32), v9, v8) & 1) == 0)
        {
          if (gLogObjects && gNumLogObjects >= 58)
          {
            BOOL v18 = *(os_log_s **)(gLogObjects + 456);
          }

          else
          {
            BOOL v18 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "_CFArrayApplierFunction_handleCertList: failed to save certificate to cache!",  buf,  2u);
          }
        }

        if (gLogObjects) {
          BOOL v26 = gNumLogObjects <= 57;
        }
        else {
          BOOL v26 = 1;
        }
        int v27 = !v26;
        if (v52)
        {
          if (v27)
          {
            __int16 v28 = *(os_log_s **)(gLogObjects + 456);
          }

          else
          {
            __int16 v28 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)uint64_t v55 = cf;
            __int16 v23 = "_CFArrayApplierFunction_handleCertList: got certificate for certificateList, entry %@";
LABEL_87:
            int v24 = v28;
            goto LABEL_88;
          }
        }

        else
        {
          if (v27)
          {
            __int16 v28 = *(os_log_s **)(gLogObjects + 456);
          }

          else
          {
            __int16 v28 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)uint64_t v55 = cf;
            __int16 v23 = "_CFArrayApplierFunction_handleCertList: got valid certificate for certificateList, entry %@";
            goto LABEL_87;
          }
        }
      }

      else
      {
        if (gLogObjects && gNumLogObjects >= 58)
        {
          CFIndex v20 = *(os_log_s **)(gLogObjects + 456);
        }

        else
        {
          CFIndex v20 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)uint64_t v55 = cf;
          __int16 v23 = "_CFArrayApplierFunction_handleCertList: got empty certificate data for certificateList, entry %@";
          int v24 = v20;
LABEL_88:
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, v23, buf, 0xCu);
        }
      }

      CFIndex SerialEntryIndexInCertList = _audioProductCerts_endpoint_getSerialEntryIndexInCertList( *(const __CFArray **)(a2 + 24),  v8);
      if ((SerialEntryIndexInCertList & 0x8000000000000000LL) == 0)
      {
        CFIndex v30 = SerialEntryIndexInCertList;
        if (gLogObjects && gNumLogObjects >= 58)
        {
          CFIndex v31 = *(os_log_s **)(gLogObjects + 456);
        }

        else
        {
          CFIndex v31 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          *(void *)uint64_t v55 = v8;
          *(_WORD *)&v55[8] = 2048;
          *(void *)&v55[10] = v30;
          _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_INFO,  "_CFArrayApplierFunction_handleCertList: certificate already in certificateList for %@ at index %ld",  buf,  0x16u);
        }

        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a2 + 24), v30);
      }

      CFMutableArrayRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  3LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      CFDictionaryAddValue(Mutable, key, Value);
      CFDictionaryAddValue(Mutable, v50, v8);
      if (v48) {
        CFDictionaryAddValue(Mutable, v49, v9);
      }
      if (gLogObjects) {
        BOOL v33 = gNumLogObjects <= 57;
      }
      else {
        BOOL v33 = 1;
      }
      int v34 = !v33;
      if (v52)
      {
        if (v34)
        {
          uint64_t v35 = *(os_log_s **)(gLogObjects + 456);
        }

        else
        {
          uint64_t v35 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (!os_log_type_enabled(v35, OS_LOG_TYPE_INFO)) {
          goto LABEL_120;
        }
        *(_DWORD *)buf = 138412290;
        *(void *)uint64_t v55 = cf;
        int v36 = "_CFArrayApplierFunction_handleCertList: add certificate to certificateList, entry %@";
      }

      else
      {
        if (v34)
        {
          uint64_t v35 = *(os_log_s **)(gLogObjects + 456);
        }

        else
        {
          uint64_t v35 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (!os_log_type_enabled(v35, OS_LOG_TYPE_INFO)) {
          goto LABEL_120;
        }
        *(_DWORD *)buf = 138412290;
        *(void *)uint64_t v55 = cf;
        int v36 = "_CFArrayApplierFunction_handleCertList: add valid certificate to certificateList, entry %@";
      }

      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, v36, buf, 0xCu);
LABEL_120:
      CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 24), Mutable);
      int valuePtr = 0;
      CFNumberGetValue((CFNumberRef)Value, kCFNumberIntType, &valuePtr);
      if ((v48 & (acc_userDefaults_BOOLForKey((uint64_t)@"DisableAACPAuth") ^ 1)) == 1
        && *(_BYTE *)(a2 + valuePtr + 72)
        || (v48 & (acc_userDefaults_BOOLForKey((uint64_t)@"DisableAACPAuth") ^ 1)) == 1
        && *(_DWORD *)(a2 + 80) == valuePtr)
      {
        CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 88), Mutable);
      }

      else
      {
        if (gLogObjects && gNumLogObjects >= 58)
        {
          int v37 = *(os_log_s **)(gLogObjects + 456);
        }

        else
        {
          int v37 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v38 = acc_userDefaults_BOOLForKey((uint64_t)@"DisableAACPAuth");
          int v39 = *(unsigned __int8 *)(a2 + valuePtr + 72);
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)uint64_t v55 = v38 ^ 1;
          *(_WORD *)&v55[4] = 2048;
          *(void *)&v55[6] = v47;
          *(_WORD *)&v55[14] = 1024;
          *(_DWORD *)&v55[16] = v39;
          _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "_CFArrayApplierFunction_handleCertList: skip adding to pendingList, enable %d, len %zu, supported %d",  buf,  0x18u);
        }
      }

      if (Mutable) {
        CFRelease(Mutable);
      }
      int v11 = 1;
      goto LABEL_135;
    }

    if (gLogObjects && gNumLogObjects >= 58)
    {
      __int16 v19 = *(os_log_s **)(gLogObjects + 456);
    }

    else
    {
      __int16 v19 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    int v11 = 0;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "_CFArrayApplierFunction_handleCertList: certificate failed verify!",  buf,  2u);
      int v11 = 0;
    }
  }

LABEL_135:
  if (gLogObjects && gNumLogObjects >= 58)
  {
    int v40 = *(os_log_s **)(gLogObjects + 456);
  }

  else
  {
    int v40 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
  {
    uint64_t v41 = *(void *)(v3 + 16);
    int v42 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)buf = 138412802;
    *(void *)uint64_t v55 = v41;
    *(_WORD *)&v55[8] = 1024;
    *(_DWORD *)&v55[10] = v42;
    *(_WORD *)&v55[14] = 1024;
    *(_DWORD *)&v55[16] = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_INFO,  "_CFArrayApplierFunction_handleCertList: %@, state %d, success %d",  buf,  0x18u);
  }

  if (gLogObjects && gNumLogObjects >= 58)
  {
    uint64_t v43 = *(os_log_s **)(gLogObjects + 456);
  }

  else
  {
    uint64_t v43 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v46 = *(void *)(v3 + 16);
    *(_DWORD *)buf = 138412546;
    *(void *)uint64_t v55 = v46;
    *(_WORD *)&v55[8] = 2112;
    *(void *)&v55[10] = cf;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEBUG,  "_CFArrayApplierFunction_handleCertList: %@, value %@",  buf,  0x16u);
    if ((v11 & 1) != 0) {
      return;
    }
  }

  else if ((v11 & 1) != 0)
  {
    return;
  }

LABEL_149:
  if (gLogObjects && gNumLogObjects >= 58)
  {
    int v44 = *(os_log_s **)(gLogObjects + 456);
  }

  else
  {
    int v44 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
  {
    if (v3) {
      uint64_t v45 = *(void *)(v3 + 16);
    }
    else {
      uint64_t v45 = 0LL;
    }
    *(_DWORD *)buf = 138412546;
    *(void *)uint64_t v55 = v45;
    *(_WORD *)&v55[8] = 2112;
    *(void *)&v55[10] = cf;
    _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "_CFArrayApplierFunction_handleCertList: %@, Failed to handle certList entry %@",  buf,  0x16u);
  }

uint64_t _audioProductCerts_endpoint_generateAuthChallenge(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if (!*(void *)result || !**(void **)result) {
      return 0LL;
    }
    uint64_t v4 = (CFArrayRef *)(v2 + 88);
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v2 + 88));
    if (gLogObjects) {
      BOOL v6 = gNumLogObjects <= 57;
    }
    else {
      BOOL v6 = 1;
    }
    int v7 = !v6;
    if (Count < 1)
    {
      if (v7)
      {
        BOOL v9 = *(os_log_s **)(gLogObjects + 456);
      }

      else
      {
        BOOL v9 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = *(void *)(*(void *)v2 + 16LL);
        *(_DWORD *)BOOL v18 = 136315394;
        *(void *)&v18[4] = "_audioProductCerts_endpoint_generateAuthChallenge";
        *(_WORD *)&v18[12] = 2112;
        *(void *)&v18[14] = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s: %@, No pending auth certificates",  v18,  0x16u);
      }

      return 1LL;
    }

    if (v7)
    {
      uint64_t v8 = *(os_log_s **)(gLogObjects + 456);
    }

    else
    {
      uint64_t v8 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      _audioProductCerts_endpoint_generateAuthChallenge_cold_7();
    }
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*v4, 0LL);
    if (ValueAtIndex) {
      MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, ValueAtIndex);
    }
    else {
      MutableCFStringRef Copy = 0LL;
    }
    if (gLogObjects && gNumLogObjects >= 58)
    {
      CFRange v12 = *(os_log_s **)(gLogObjects + 456);
    }

    else
    {
      CFRange v12 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      _audioProductCerts_endpoint_generateAuthChallenge_cold_5();
      if (!MutableCopy) {
        goto LABEL_33;
      }
    }

    else if (!MutableCopy)
    {
      goto LABEL_33;
    }

    *(void *)(v2 + 96) = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, MutableCopy);
    if (a2)
    {
      *(void *)&__int128 v13 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)BOOL v18 = v13;
      *(_OWORD *)&uint8_t v18[16] = v13;
      arc4random_buf(v18, 0x20uLL);
      *(void *)(v2 + 104) = CFDataCreate(kCFAllocatorDefault, v18, 32LL);
    }

    CFDictionaryRemoveValue(MutableCopy, kCFACCProperties_Endpoint_AACP_CertificateInfo_Data);
    int v14 = (const void *)kCFACCProperties_Endpoint_AudioProduct_AuthData;
    CFDictionarySetValue(MutableCopy, kCFACCProperties_Endpoint_AudioProduct_AuthData, *(const void **)(v2 + 104));
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v2 + 96), v14, *(const void **)(v2 + 104));
LABEL_33:
    CFArrayRemoveValueAtIndex(*v4, 0LL);
    if (gLogObjects && gNumLogObjects >= 58)
    {
      int v15 = *(os_log_s **)(gLogObjects + 456);
    }

    else
    {
      int v15 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
      _audioProductCerts_endpoint_generateAuthChallenge_cold_3();
    }
    if (gLogObjects && gNumLogObjects >= 58)
    {
      CFStringRef v16 = *(os_log_s **)(gLogObjects + 456);
    }

    else
    {
      CFStringRef v16 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      _audioProductCerts_endpoint_generateAuthChallenge_cold_1();
      if (!MutableCopy) {
        return 1LL;
      }
    }

    else if (!MutableCopy)
    {
      return 1LL;
    }

    CFRelease(MutableCopy);
    return 1LL;
  }

  return result;
}

BOOL _audioProductCerts_endpoint_handlePrimaryBudMismatch(uint64_t a1, CFDictionaryRef theDict)
{
  *(void *)(a1 + 96) = 0LL;
  uint64_t v4 = (const void *)kCFACCProperties_Endpoint_AACP_CertificateInfo_Type;
  uint64_t Value = (const __CFNumber *)CFDictionaryGetValue(theDict, kCFACCProperties_Endpoint_AACP_CertificateInfo_Type);
  BOOL v6 = (const void *)kCFACCProperties_Endpoint_AACP_CertificateInfo_Serial;
  int v7 = CFDictionaryGetValue(theDict, kCFACCProperties_Endpoint_AACP_CertificateInfo_Serial);
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 24)) < 1 || v7 != 0LL)
  {
    BOOL v9 = 0LL;
LABEL_13:
    uint64_t CertDataFromSerialNumber = (const __CFArray *)platform_auth_createCertDataFromSerialNumber(*(void *)(a1 + 32), v7);
    if (CertDataFromSerialNumber)
    {
      int v14 = CertDataFromSerialNumber;
      CFDictionaryAddValue(v9, kCFACCProperties_Endpoint_AACP_CertificateInfo_Data, CertDataFromSerialNumber);
      int v15 = v14;
    }

    else
    {
      if (CFArrayGetCount(*(CFArrayRef *)(a1 + 16)))
      {
        if (gLogObjects && gNumLogObjects >= 58)
        {
          CFStringRef v16 = *(os_log_s **)(gLogObjects + 456);
        }

        else
        {
          CFStringRef v16 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v19 = *(void *)(*(void *)a1 + 16LL);
          uint64_t v20 = *(void *)(a1 + 16);
          unsigned int v44 = 136315650;
          uint64_t v45 = "_audioProductCerts_endpoint_handlePrimaryBudMismatch";
          __int16 v46 = 2112;
          uint64_t v47 = v19;
          __int16 v48 = 2112;
          uint64_t v49 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "%s: %@, setProperty kCFACCProperties_Endpoint_AudioProduct_CertificateRequired: %@",  (uint8_t *)&v44,  0x20u);
        }

        unsigned int v44 = -1431655766;
        if (CFNumberGetValue(Value, kCFNumberIntType, &v44)) {
          *(_BYTE *)(a1 + v44 + 72) = 1;
        }
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), 0LL);
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 16), 0LL);
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), ValueAtIndex);
        CFStringRef Copy = CFArrayCreateCopy(kCFAllocatorDefault, *(CFArrayRef *)(a1 + 16));
        audioProductCerts_endpoint_setProperty((uint64_t *)a1, kCFACCProperties_Endpoint_AACP_CertificateRequired, Copy);
        if (Copy) {
          CFRelease(Copy);
        }
        int v23 = v44;
        if (v44 >= 5) {
          int v23 = 5;
        }
        *(_DWORD *)(a1 + 80) = v23;
        *(_DWORD *)(a1 + 40) = 5;
        return 1LL;
      }

      uint64_t v17 = *(const __CFArray **)(a1 + 24);
      if (!v17 || !CFArrayGetCount(v17)) {
        return 1LL;
      }
      if (gLogObjects && gNumLogObjects >= 58)
      {
        BOOL v18 = *(os_log_s **)(gLogObjects + 456);
      }

      else
      {
        BOOL v18 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v25 = *(void *)(*(void *)a1 + 16LL);
        uint64_t v26 = *(void *)(a1 + 24);
        unsigned int v44 = 136315650;
        uint64_t v45 = "_audioProductCerts_endpoint_handlePrimaryBudMismatch";
        __int16 v46 = 2112;
        uint64_t v47 = v25;
        __int16 v48 = 2112;
        uint64_t v49 = v26;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%s: %@, setProperty kCFACCProperties_Endpoint_AudioProduct_CertificateList: %@",  (uint8_t *)&v44,  0x20u);
      }

      *(_DWORD *)(a1 + 40) = 5;
      int v27 = CFArrayCreateCopy(kCFAllocatorDefault, *(CFArrayRef *)(a1 + 24));
      audioProductCerts_endpoint_setProperty((uint64_t *)a1, kCFACCProperties_Endpoint_AACP_CertificateList, v27);
      if (!v27) {
        return 1LL;
      }
      int v15 = v27;
    }

    CFRelease(v15);
    return 1LL;
  }

  CFIndex v10 = 1LL;
  while (1)
  {
    int v11 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v10 - 1);
    if (!v11)
    {
      *(_DWORD *)(a1 + 40) = 5;
      __int16 v28 = (os_log_s *)logObjectForModule_8();
      BOOL result = os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      _audioProductCerts_endpoint_handlePrimaryBudMismatch_cold_3(v28, v29, v30, v31, v32, v33, v34, v35);
      return 0LL;
    }

    BOOL v9 = v11;
    CFRange v12 = (const __CFNumber *)CFDictionaryGetValue(v11, v4);
    if (!v12) {
      break;
    }
    int v7 = 0LL;
    if (CFNumberCompare(Value, v12, 0LL) == kCFCompareEqualTo) {
      int v7 = CFDictionaryGetValue(v9, v6);
    }
    if (v10 < CFArrayGetCount(*(CFArrayRef *)(a1 + 24)))
    {
      ++v10;
      if (!v7) {
        continue;
      }
    }

    goto LABEL_13;
  }

  *(_DWORD *)(a1 + 40) = 5;
  int v36 = (os_log_s *)logObjectForModule_8();
  BOOL result = os_log_type_enabled(v36, OS_LOG_TYPE_ERROR);
  if (!result) {
    return result;
  }
  _audioProductCerts_endpoint_handlePrimaryBudMismatch_cold_4(v36, v37, v38, v39, v40, v41, v42, v43);
  return 0LL;
}

uint64_t *_audioProductCerts_endpoint_validateChallenge(uint64_t *result, const __CFDictionary *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *result;
    if (!*result) {
      return 0LL;
    }
    BOOL result = 0LL;
    if (a2)
    {
      if (*(void *)v3)
      {
        BOOL valuePtr = 0;
        CFTypeID v5 = (const void *)kCFACCProperties_Endpoint_AACP_CertificateInfo_Data;
        theDict = (const __CFDictionary *)v2[12];
        uint64_t Value = (const __CFData *)CFDictionaryGetValue(theDict, kCFACCProperties_Endpoint_AACP_CertificateInfo_Data);
        uint64_t v95 = (const __CFData *)v2[13];
        theData = Value;
        else {
          int v7 = (const void *)kCFACCProperties_Endpoint_AudioProduct_AuthData;
        }
        uint64_t v8 = (const __CFData *)CFDictionaryGetValue(a2, v7);
        BOOL v9 = v8;
        if (v8)
        {
          CFRetain(v8);
          if (CFDataGetLength(v9))
          {
            BytePtr = CFDataGetBytePtr(v9);
            if (BytePtr)
            {
              int v11 = BytePtr;
              if (CFDataGetLength(v9) == 72 && *v11 == 48)
              {
                switch(v11[1])
                {
                  case 'B':
                    if (v11[68] || v11[69] || v11[70] || v11[71]) {
                      goto LABEL_27;
                    }
                    CFIndex v12 = 68LL;
                    goto LABEL_169;
                  case 'C':
                    if (v11[69] || v11[70] || v11[71]) {
                      goto LABEL_27;
                    }
                    CFIndex v12 = 69LL;
                    goto LABEL_169;
                  case 'D':
                    if (v11[70] || v11[71]) {
                      goto LABEL_27;
                    }
                    CFIndex v12 = 70LL;
                    goto LABEL_169;
                  case 'E':
                    if (v11[71]) {
                      goto LABEL_27;
                    }
                    CFIndex v12 = 71LL;
LABEL_169:
                    uint64_t v82 = CFDataGetBytePtr(v9);
                    CFStringRef Copy = CFDataCreate(kCFAllocatorDefault, v82, v12);
                    if (gLogObjects && gNumLogObjects >= 58)
                    {
                      uint64_t v83 = *(os_log_s **)(gLogObjects + 456);
                    }

                    else
                    {
                      uint64_t v83 = (os_log_s *)&_os_log_default;
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        platform_connectionInfo_configStreamCategoryListReady_cold_1();
                      }
                    }

                    if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 136315650;
                      uint64_t v99 = "_audioProductCerts_createTruncatedSignature";
                      __int16 v100 = 2048;
                      CFIndex Length = CFDataGetLength(v9);
                      __int16 v102 = 2048;
                      *(void *)uint64_t v103 = CFDataGetLength(Copy);
                      _os_log_impl( (void *)&_mh_execute_header,  v83,  OS_LOG_TYPE_DEFAULT,  "%s: signature needs truncation! %ld -> %ld",  buf,  0x20u);
                    }

                    break;
                  default:
LABEL_27:
                    CFStringRef Copy = CFDataCreateCopy(kCFAllocatorDefault, v9);
                    break;
                }

                if (Copy) {
                  goto LABEL_37;
                }
              }
            }
          }
        }

        if (gLogObjects && gNumLogObjects >= 58)
        {
          int v14 = *(os_log_s **)(gLogObjects + 456);
        }

        else
        {
          int v14 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          _audioProductCerts_endpoint_validateChallenge_cold_17();
        }
        CFStringRef Copy = 0LL;
        int v15 = 0LL;
        if (v9)
        {
LABEL_37:
          CFRelease(v9);
          int v15 = Copy;
        }

        if (gLogObjects && gNumLogObjects >= 58)
        {
          CFStringRef v16 = *(os_log_s **)(gLogObjects + 456);
        }

        else
        {
          CFStringRef v16 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          CFIndex v17 = *(void *)(v3 + 16);
          uint64_t v18 = v2[13];
          *(_DWORD *)buf = 136315906;
          uint64_t v99 = "_audioProductCerts_endpoint_validateChallenge";
          __int16 v100 = 2112;
          CFIndex Length = v17;
          __int16 v102 = 2112;
          *(void *)uint64_t v103 = v18;
          *(_WORD *)&v103[8] = 2112;
          *(void *)uint64_t v104 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "%s: %@, verify challenge %@ vs signature %@",  buf,  0x2Au);
        }

        uint64_t v94 = v15;
        uint64_t v19 = v95;
        if (CFDataGetLength(theData) < 1 || CFDataGetLength(v15) < 1 || CFDataGetLength(v95) < 1) {
          goto LABEL_113;
        }
        if (v95 && CFDataGetLength(v95) == 32)
        {
          uint64_t v20 = (const __CFData *)platform_systemInfo_copyBluetoothMACAddressData();
          int v21 = v20;
          if (v20)
          {
            if (CFDataGetLength(v20) == 6)
            {
              CFIndex v22 = CFDataGetLength(v95);
              CFMutableArrayRef Mutable = CFDataCreateMutable(kCFAllocatorDefault, v22 + 24);
              if (Mutable)
              {
                int v24 = Mutable;
                CFDataAppendBytes(Mutable, (const UInt8 *)"auth pairing state", 18LL);
                uint64_t v25 = CFDataGetBytePtr(v95);
                CFIndex v26 = CFDataGetLength(v95);
                CFDataAppendBytes(v24, v25, v26);
                int v27 = CFDataGetBytePtr(v21);
                CFIndex v28 = CFDataGetLength(v21);
                CFDataAppendBytes(v24, v27, v28);
                CFRelease(v21);
                if (!acc_platform_packetLogging_isLogPacketDataAsMsg())
                {
                  uint64_t v91 = v2;
                  int v29 = CFDataGetLength(theData);
                  uint64_t v30 = CFDataGetBytePtr(theData);
                  int v87 = CFDataGetLength(v95);
                  uint64_t v92 = v24;
                  int v88 = CFDataGetLength(v24);
                  int v89 = CFDataGetLength(v9);
                  int v90 = CFDataGetLength(v15);
                  if (v29 >= 1)
                  {
                    int v31 = 0;
                    int v32 = 500;
                    uint64_t v86 = 134218240LL;
                    do
                    {
                      if (v32 >= v29 - v31) {
                        int v32 = v29 - v31;
                      }
                      uint64_t v33 = gLogObjects;
                      int v34 = gNumLogObjects;
                      if (gLogObjects && gNumLogObjects >= 58)
                      {
                        uint64_t v35 = *(os_log_s **)(gLogObjects + 456);
                      }

                      else
                      {
                        uint64_t v35 = (os_log_s *)&_os_log_default;
                        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = 134218240;
                          uint64_t v99 = (const char *)v33;
                          __int16 v100 = 1024;
                          LODWORD(Length) = v34;
                          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                          uint64_t v35 = (os_log_s *)&_os_log_default;
                        }
                      }

                      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
                      {
                        CFIndex v36 = *(void *)(v3 + 16);
                        *(_DWORD *)buf = 136316674;
                        uint64_t v99 = "_audioProductCerts_endpoint_validateChallenge";
                        __int16 v100 = 2112;
                        CFIndex Length = v36;
                        __int16 v102 = 1024;
                        *(_DWORD *)uint64_t v103 = v31;
                        *(_WORD *)&v103[4] = 1024;
                        *(_DWORD *)&v103[6] = v29;
                        *(_WORD *)uint64_t v104 = 1024;
                        *(_DWORD *)&v104[2] = v32;
                        *(_WORD *)&v104[6] = 1040;
                        *(_DWORD *)&v104[8] = v32;
                        __int16 v105 = 2096;
                        CFDictionaryRef v106 = v30;
                        _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "%s: %@, certificate (%d of %d, show %d bytes):\n%{coreacc:bytes}.*P",  buf,  0x38u);
                      }

                      v31 += v32;
                      v30 += v32;
                    }

                    while (v31 < v29);
                  }

                  if (gLogObjects && gNumLogObjects >= 58)
                  {
                    uint64_t v37 = *(os_log_s **)(gLogObjects + 456);
                    uint64_t v2 = v91;
                  }

                  else
                  {
                    uint64_t v37 = (os_log_s *)&_os_log_default;
                    uint64_t v2 = v91;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                      platform_connectionInfo_configStreamCategoryListReady_cold_1();
                    }
                  }

                  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
                  {
                    CFIndex v38 = *(void *)(v3 + 16);
                    uint64_t v39 = CFDataGetBytePtr(v95);
                    *(_DWORD *)buf = 136316162;
                    uint64_t v99 = "_audioProductCerts_endpoint_validateChallenge";
                    __int16 v100 = 2112;
                    CFIndex Length = v38;
                    __int16 v102 = 1024;
                    *(_DWORD *)uint64_t v103 = v87;
                    *(_WORD *)&v103[4] = 1040;
                    *(_DWORD *)&v103[6] = v87;
                    *(_WORD *)uint64_t v104 = 2096;
                    *(void *)&v104[2] = v39;
                    _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "%s: %@, nonce (%d bytes):\n%{coreacc:bytes}.*P",  buf,  0x2Cu);
                  }

                  if (gLogObjects && gNumLogObjects >= 58)
                  {
                    uint64_t v40 = *(os_log_s **)(gLogObjects + 456);
                  }

                  else
                  {
                    uint64_t v40 = (os_log_s *)&_os_log_default;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                      platform_connectionInfo_configStreamCategoryListReady_cold_1();
                    }
                  }

                  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
                  {
                    CFIndex v41 = *(void *)(v3 + 16);
                    uint64_t v42 = CFDataGetBytePtr(v92);
                    *(_DWORD *)buf = 136316162;
                    uint64_t v99 = "_audioProductCerts_endpoint_validateChallenge";
                    __int16 v100 = 2112;
                    CFIndex Length = v41;
                    __int16 v102 = 1024;
                    *(_DWORD *)uint64_t v103 = v88;
                    *(_WORD *)&v103[4] = 1040;
                    *(_DWORD *)&v103[6] = v88;
                    *(_WORD *)uint64_t v104 = 2096;
                    *(void *)&v104[2] = v42;
                    _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "%s: %@, challenge (%d bytes):\n%{coreacc:bytes}.*P",  buf,  0x2Cu);
                  }

                  if (gLogObjects && gNumLogObjects >= 58)
                  {
                    uint64_t v43 = *(os_log_s **)(gLogObjects + 456);
                    int v24 = v92;
                  }

                  else
                  {
                    uint64_t v43 = (os_log_s *)&_os_log_default;
                    int v24 = v92;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                      platform_connectionInfo_configStreamCategoryListReady_cold_1();
                    }
                  }

                  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
                  {
                    CFIndex v44 = *(void *)(v3 + 16);
                    uint64_t v45 = CFDataGetBytePtr(v9);
                    *(_DWORD *)buf = 136316162;
                    uint64_t v99 = "_audioProductCerts_endpoint_validateChallenge";
                    __int16 v100 = 2112;
                    CFIndex Length = v44;
                    int v24 = v92;
                    __int16 v102 = 1024;
                    *(_DWORD *)uint64_t v103 = v89;
                    *(_WORD *)&v103[4] = 1040;
                    *(_DWORD *)&v103[6] = v89;
                    *(_WORD *)uint64_t v104 = 2096;
                    *(void *)&v104[2] = v45;
                    _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "%s: %@, origSig (%d bytes):\n%{coreacc:bytes}.*P",  buf,  0x2Cu);
                  }

                  if (gLogObjects && gNumLogObjects >= 58)
                  {
                    __int16 v46 = *(os_log_s **)(gLogObjects + 456);
                    int v15 = v94;
                  }

                  else
                  {
                    __int16 v46 = (os_log_s *)&_os_log_default;
                    int v15 = v94;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                      platform_connectionInfo_configStreamCategoryListReady_cold_1();
                    }
                  }

                  uint64_t v19 = v95;
                  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
                  {
                    CFIndex v47 = *(void *)(v3 + 16);
                    __int16 v48 = CFDataGetBytePtr(v15);
                    *(_DWORD *)buf = 136316162;
                    uint64_t v99 = "_audioProductCerts_endpoint_validateChallenge";
                    __int16 v100 = 2112;
                    CFIndex Length = v47;
                    int v24 = v92;
                    __int16 v102 = 1024;
                    *(_DWORD *)uint64_t v103 = v90;
                    *(_WORD *)&v103[4] = 1040;
                    *(_DWORD *)&v103[6] = v90;
                    *(_WORD *)uint64_t v104 = 2096;
                    *(void *)&v104[2] = v48;
                    _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "%s: %@, signature (%d bytes):\n%{coreacc:bytes}.*P",  buf,  0x2Cu);
                  }
                }

                acc_platform_packetLogging_logData( v3,  (uint64_t)@"ChallengeVerify: nonce",  (uint64_t)@"AudioProductCerts",  v19,  -1);
                acc_platform_packetLogging_logData( v3,  (uint64_t)@"ChallengeVerify: verify nonce",  (uint64_t)@"AudioProductCerts",  v24,  -1);
                acc_platform_packetLogging_logData( v3,  (uint64_t)@"ChallengeVerify: orig signature",  (uint64_t)@"AudioProductCerts",  v9,  -1);
                acc_platform_packetLogging_logData( v3,  (uint64_t)@"ChallengeVerify: signature",  (uint64_t)@"AudioProductCerts",  v15,  -1);
                unsigned int v49 = platform_auth_verifyNonceSignature((uint64_t)theData, (uint64_t)v24, (uint64_t)v15);
                if (gLogObjects && gNumLogObjects >= 58)
                {
                  __int16 v50 = *(os_log_s **)(gLogObjects + 456);
                }

                else
                {
                  __int16 v50 = (os_log_s *)&_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }

                if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
                {
                  CFIndex v51 = *(void *)(v3 + 16);
                  *(_DWORD *)buf = 136315650;
                  uint64_t v99 = "_audioProductCerts_endpoint_validateChallenge";
                  __int16 v100 = 2112;
                  CFIndex Length = v51;
                  __int16 v102 = 1024;
                  *(_DWORD *)uint64_t v103 = v49;
                  _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "%s: %@, initial verify signature, passed %d",  buf,  0x1Cu);
                }

                if (v49)
                {
                  CFRelease(v24);
LABEL_103:
                  int v52 = 2;
                  goto LABEL_114;
                }

                unsigned int v53 = platform_auth_verifyNonceSignatureForType( (uint64_t)theData,  (uint64_t)v24,  (uint64_t)v15,  4u);
                if (gLogObjects && gNumLogObjects >= 58)
                {
                  uint64_t v54 = *(os_log_s **)(gLogObjects + 456);
                }

                else
                {
                  uint64_t v54 = (os_log_s *)&_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }

                if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
                {
                  CFIndex v55 = *(void *)(v3 + 16);
                  *(_DWORD *)buf = 136315906;
                  uint64_t v99 = "_audioProductCerts_endpoint_validateChallenge";
                  __int16 v100 = 2112;
                  CFIndex Length = v55;
                  __int16 v102 = 1024;
                  *(_DWORD *)uint64_t v103 = 4;
                  *(_WORD *)&v103[4] = 1024;
                  *(_DWORD *)&v103[6] = v53;
                  _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "%s: %@, second verify signature, for type %d, passed %d",  buf,  0x22u);
                  CFRelease(v24);
                  if ((v53 & 1) != 0) {
                    goto LABEL_103;
                  }
                }

                else
                {
                  CFRelease(v24);
                  if (v53) {
                    goto LABEL_103;
                  }
                }

LABEL_113:
                int v52 = 1;
LABEL_114:
                *((_DWORD *)v2 + 2_Block_object_dispose(va, 8) = v52;
                if ((acc_userDefaults_BOOLForKey((uint64_t)@"IgnoreAACPAuthStatus") & 1) != 0)
                {
                  if (gLogObjects && gNumLogObjects >= 58)
                  {
                    uint64_t v56 = *(os_log_s **)(gLogObjects + 456);
                  }

                  else
                  {
                    uint64_t v56 = (os_log_s *)&_os_log_default;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                      platform_connectionInfo_configStreamCategoryListReady_cold_1();
                    }
                  }

                  if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
                  {
                    CFIndex v57 = *(void *)(v3 + 16);
                    int v58 = *((_DWORD *)v2 + 28);
                    *(_DWORD *)buf = 136315906;
                    uint64_t v99 = "_audioProductCerts_endpoint_validateChallenge";
                    __int16 v100 = 2112;
                    CFIndex Length = v57;
                    __int16 v102 = 1024;
                    *(_DWORD *)uint64_t v103 = v58;
                    *(_WORD *)&v103[4] = 1024;
                    *(_DWORD *)&v103[6] = valuePtr;
                    _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_INFO,  "%s: %@, Skip setting auth state: authState %{coreacc:ACCAuthInfo_Status_t}d) -> %d) ",  buf,  0x22u);
                  }
                }

                else
                {
                  acc_connection_setAuthStatus(*(void *)v3, 1LL, *((_DWORD *)v2 + 28));
                }

                int v59 = *((_DWORD *)v2 + 28);
                BOOL valuePtr = v59 == 2;
                uint64_t v60 = gLogObjects;
                int v61 = gNumLogObjects;
                if (gLogObjects && gNumLogObjects >= 58)
                {
                  uint64_t v62 = *(os_log_s **)(gLogObjects + 456);
                  int v63 = v59;
                }

                else
                {
                  uint64_t v62 = (os_log_s *)&_os_log_default;
                  int v63 = v59;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 134218240;
                    uint64_t v99 = (const char *)v60;
                    __int16 v100 = 1024;
                    LODWORD(Length) = v61;
                    _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                    int v63 = *((_DWORD *)v2 + 28);
                  }
                }

                if (os_log_type_enabled(v62, OS_LOG_TYPE_INFO))
                {
                  CFIndex v69 = *(void *)(v3 + 16);
                  *(_DWORD *)buf = 136315906;
                  uint64_t v99 = "_audioProductCerts_endpoint_validateChallenge";
                  __int16 v100 = 2112;
                  CFIndex Length = v69;
                  __int16 v102 = 1024;
                  *(_DWORD *)uint64_t v103 = v63;
                  *(_WORD *)&v103[4] = 1024;
                  *(_DWORD *)&v103[6] = v59 == 2;
                  _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_INFO,  "%s: %@, authState to value %{coreacc:ACCAuthInfo_Status_t}d) -> %d) ",  buf,  0x22u);
                  int v63 = *((_DWORD *)v2 + 28);
                }

                if (v63 == 3)
                {
                  uint64_t v70 = "AUTH TIMEOUT";
                  uint64_t v71 = "ACCAuthProtocol accessory authentication Timed Out!";
                }

                else
                {
                  if (v63 != 2)
                  {
                    acc_platform_packetLogging_logEvent( v3,  "AUTH FAILED",  (uint64_t)"ACCAuthProtocol accessory authentication Failed!",  v64,  v65,  v66,  v67,  v68,  v86);
                    uint64_t v73 = CFDictionaryGetValue(theDict, kCFACCProperties_Endpoint_AudioProduct_AuthSerial);
                    uint64_t v72 = v94;
                    if ((platform_auth_removeCertDataEntryFromCache(v2[4], v73) & 1) == 0)
                    {
                      if (gLogObjects && gNumLogObjects >= 58)
                      {
                        uint64_t v74 = *(os_log_s **)(gLogObjects + 456);
                      }

                      else
                      {
                        uint64_t v74 = (os_log_s *)&_os_log_default;
                        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                          platform_connectionInfo_configStreamCategoryListReady_cold_1();
                        }
                      }

                      if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEFAULT,  "_CFArrayApplierFunction_handleSerialList: failed to remove certificate from cache!",  buf,  2u);
                      }
                    }

                    goto LABEL_145;
                  }

                  uint64_t v70 = "AUTH PASSED";
                  uint64_t v71 = "ACCAuthProtocol accessory authentication Passed!";
                }

                acc_platform_packetLogging_logEvent(v3, v70, (uint64_t)v71, v64, v65, v66, v67, v68, v86);
                uint64_t v72 = v94;
LABEL_145:
                CFNumberRef v75 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
                if (v75)
                {
                  uint64_t v76 = v75;
                  if ((acc_userDefaults_BOOLForKey((uint64_t)@"IgnoreAACPAuthStatus") & 1) != 0)
                  {
                    if (gLogObjects && gNumLogObjects >= 58)
                    {
                      uint64_t v77 = *(os_log_s **)(gLogObjects + 456);
                    }

                    else
                    {
                      uint64_t v77 = (os_log_s *)&_os_log_default;
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        platform_connectionInfo_configStreamCategoryListReady_cold_1();
                      }
                    }

                    if (os_log_type_enabled(v77, OS_LOG_TYPE_INFO))
                    {
                      CFIndex v80 = *(void *)(v3 + 16);
                      int v81 = *((_DWORD *)v2 + 28);
                      *(_DWORD *)buf = 136315906;
                      uint64_t v99 = "_audioProductCerts_endpoint_validateChallenge";
                      __int16 v100 = 2112;
                      CFIndex Length = v80;
                      __int16 v102 = 1024;
                      *(_DWORD *)uint64_t v103 = v81;
                      *(_WORD *)&v103[4] = 1024;
                      *(_DWORD *)&v103[6] = valuePtr;
                      _os_log_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_INFO,  "%s: %@, Skip setting auth state property: authState %{coreacc:ACCAuthInfo_Status_t}d) -> %d) ",  buf,  0x22u);
                    }

                    uint64_t v79 = @"__Ignored_AuthState";
                  }

                  else
                  {
                    uint64_t v79 = (const __CFString *)kCFACCProperties_Endpoint_AudioProduct_AuthState;
                  }

                  acc_endpoint_setProperty((pthread_mutex_t *)v3, v79, v76);
                  CFRelease(v76);
                }

                else
                {
                  if (gLogObjects && gNumLogObjects >= 58)
                  {
                    uint64_t v78 = *(os_log_s **)(gLogObjects + 456);
                  }

                  else
                  {
                    uint64_t v78 = (os_log_s *)&_os_log_default;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                      platform_connectionInfo_configStreamCategoryListReady_cold_1();
                    }
                  }

                  if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR)) {
                    _audioProductCerts_endpoint_validateChallenge_cold_1();
                  }
                }

                if (v72) {
                  CFRelease(v72);
                }
                return (uint64_t *)1;
              }
            }
          }
        }

        else
        {
          int v21 = 0LL;
        }

        if (gLogObjects && gNumLogObjects >= 58)
        {
          uint64_t v84 = *(os_log_s **)(gLogObjects + 456);
        }

        else
        {
          uint64_t v84 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
        {
          _audioProductCerts_endpoint_validateChallenge_cold_8();
          if (!v21)
          {
LABEL_186:
            if (gLogObjects && gNumLogObjects >= 58)
            {
              uint64_t v85 = *(os_log_s **)(gLogObjects + 456);
            }

            else
            {
              uint64_t v85 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR)) {
              _audioProductCerts_endpoint_validateChallenge_cold_6();
            }
            goto LABEL_113;
          }
        }

        else if (!v21)
        {
          goto LABEL_186;
        }

        CFRelease(v21);
        goto LABEL_186;
      }
    }
  }

  return result;
}

  ;
}

void OUTLINED_FUNCTION_8_2( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

void OUTLINED_FUNCTION_11_1(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

void OUTLINED_FUNCTION_12_1(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

uint64_t oobPairing_control_sendPairingInfo(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = (void *)result;
    BOOL result = 0LL;
    if (a2)
    {
      if (*v3)
      {
        if (*(_DWORD *)a2 == 3)
        {
          if (gLogObjects && gNumLogObjects >= 11)
          {
            uint64_t v4 = *(os_log_s **)(gLogObjects + 80);
          }

          else
          {
            uint64_t v4 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v5 = v3[1];
            uint64_t v6 = *(void *)(*v3 + 16LL);
            int v10 = 138412546;
            uint64_t v11 = v6;
            __int16 v12 = 2112;
            uint64_t v13 = v5;
            _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Send OOBPairing Info for endpoint: %@ bleUUID: %@",  (uint8_t *)&v10,  0x16u);
          }

          int v7 = oobPairing_bleToOobPairingType(*(_DWORD *)(a2 + 16));
          BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a2 + 24));
          unsigned __int16 Length = CFDataGetLength(*(CFDataRef *)(a2 + 24));
          oobPairing_endpoint_sendOutgoingData((uint64_t)v3, 2u, v7, BytePtr, Length);
          platform_blePairing_deleteParams((void *)a2);
          return 1LL;
        }

        else
        {
          return 0LL;
        }
      }
    }
  }

  return result;
}

uint64_t oobPairing_control_sendPairingData(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = (void *)result;
    BOOL result = 0LL;
    if (a2)
    {
      if (*v3)
      {
        if (*(_DWORD *)a2 == 2)
        {
          if (gLogObjects && gNumLogObjects >= 11)
          {
            uint64_t v4 = *(os_log_s **)(gLogObjects + 80);
          }

          else
          {
            uint64_t v4 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v5 = v3[1];
            uint64_t v6 = *(void *)(*v3 + 16LL);
            int v10 = 138412546;
            uint64_t v11 = v6;
            __int16 v12 = 2112;
            uint64_t v13 = v5;
            _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Send OOBPairing Data for endpoint: %@ bleUUID: %@",  (uint8_t *)&v10,  0x16u);
          }

          int v7 = oobPairing_bleToOobPairingType(*(_DWORD *)(a2 + 16));
          BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a2 + 24));
          unsigned __int16 Length = CFDataGetLength(*(CFDataRef *)(a2 + 24));
          oobPairing_endpoint_sendOutgoingData((uint64_t)v3, 3u, v7, BytePtr, Length);
          platform_blePairing_deleteParams((void *)a2);
          return 1LL;
        }

        else
        {
          return 0LL;
        }
      }
    }
  }

  return result;
}

uint64_t oobPairing_control_start(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v3 = (void *)result;
    BOOL result = 0LL;
    if (a2)
    {
      if (*v3)
      {
        if (*(_DWORD *)a2)
        {
          return 0LL;
        }

        else
        {
          if (gLogObjects && gNumLogObjects >= 11)
          {
            uint64_t v4 = *(os_log_s **)(gLogObjects + 80);
          }

          else
          {
            uint64_t v4 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v5 = v3[1];
            uint64_t v6 = *(void *)(*v3 + 16LL);
            int v7 = 138412546;
            uint64_t v8 = v6;
            __int16 v9 = 2112;
            uint64_t v10 = v5;
            _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "OOBPairing start for endpoint: %@ bleUUID: %@",  (uint8_t *)&v7,  0x16u);
          }

          oobPairing_endpoint_sendOutgoingData((uint64_t)v3, 0, 2, 0LL, 0);
          platform_blePairing_deleteParams(a2);
          return 1LL;
        }
      }
    }
  }

  return result;
}

uint64_t oobPairing_control_stop(void *a1, void *a2)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v3 = 0LL;
  if (!a2 || !*a1) {
    return v3;
  }
  if (*(_DWORD *)a2 != 4) {
    return 0LL;
  }
  if (gLogObjects && gNumLogObjects >= 11)
  {
    uint64_t v5 = *(os_log_s **)(gLogObjects + 80);
  }

  else
  {
    uint64_t v5 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = a1[1];
    uint64_t v7 = *(void *)(*a1 + 16LL);
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    uint64_t v12 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "OOBPairing stop for endpoint: %@ bleUUID: %@",  (uint8_t *)&v9,  0x16u);
  }

  uint64_t v3 = 1LL;
  oobPairing_endpoint_sendOutgoingData((uint64_t)a1, 1u, 2, 0LL, 0);
  platform_blePairing_deleteParams(a2);
  return v3;
}

uint64_t oobPairing_control_deviceStateUpdate(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v2 = (void *)result;
    if (*(void *)result)
    {
      if (gLogObjects) {
        BOOL v4 = gNumLogObjects < 11;
      }
      else {
        BOOL v4 = 1;
      }
      if (v4)
      {
        uint64_t v5 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      else
      {
        uint64_t v5 = *(os_log_s **)(gLogObjects + 80);
      }

      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = v2[1];
        uint64_t v7 = *(void *)(*v2 + 16LL);
        int v8 = 138412546;
        uint64_t v9 = v7;
        __int16 v10 = 2112;
        uint64_t v11 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "OOBPairing deviceStateUpdate for endpoint: %@ bleUUID: %@",  (uint8_t *)&v8,  0x16u);
      }

      platform_blePairing_deleteParams(a2);
      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t loggingProtocol_getCurrentTimeInNanoseconds()
{
  v1.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v1.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  clock_gettime(_CLOCK_REALTIME, &v1);
  return v1.tv_nsec + 1000000000 * v1.tv_sec;
}

unint64_t systemInfo_getCurrentUnixTime()
{
  BOOL v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v0 timeIntervalSince1970];
  double v2 = v1;

  unint64_t v3 = vcvtad_u64_f64(v2);
  if (v2 <= 0.0) {
    return 0LL;
  }
  else {
    return v3;
  }
}

unint64_t systemInfo_getCurrentUnixTimeMS()
{
  BOOL v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v0 timeIntervalSince1970];
  double v2 = v1;

  unint64_t v3 = vcvtad_u64_f64(v2 * 1000.0);
  if (v2 <= 0.0) {
    return 0LL;
  }
  else {
    return v3;
  }
}

uint64_t systemInfo_isInternalBuild()
{
  if (systemInfo_isInternalBuild_onceToken != -1) {
    dispatch_once(&systemInfo_isInternalBuild_onceToken, &__block_literal_global_8);
  }
  return systemInfo_isInternalBuild_internalBuild;
}

void __systemInfo_isInternalBuild_block_invoke(id a1)
{
  systemInfo_isInternalBuild_internalBuild = MGGetBoolAnswer(@"InternalBuild");
}

uint64_t systemInfo_copyDeviceClass()
{
  return MGCopyAnswer(@"DeviceClass", 0LL);
}

uint64_t systemInfo_copyProductType()
{
  return 0LL;
}

void platform_navigation_accessoryAttached(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    BOOL v4 = (os_log_s *)*(id *)(gLogObjects + 368);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = (os_log_s *)&_os_log_default;
    id v5 = &_os_log_default;
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412546;
    uint64_t v8 = a1;
    __int16 v9 = 2112;
    uint64_t v10 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "navigation accessoryAttached: %@, componentList=%@",  (uint8_t *)&v7,  0x16u);
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[ACCNavigationServer sharedServer](&OBJC_CLASS___ACCNavigationServer, "sharedServer"));
  [v6 accessoryNavigationAttached:a1 componentList:a2];
}

void platform_navigation_accessoryDetached(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    double v2 = (os_log_s *)*(id *)(gLogObjects + 368);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    double v2 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    uint64_t v6 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "navigation accessoryDetached: %@",  (uint8_t *)&v5,  0xCu);
  }

  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACCNavigationServer sharedServer](&OBJC_CLASS___ACCNavigationServer, "sharedServer"));
  [v4 accessoryNavigationDetached:a1];
}

void platform_navigation_startRouteGuidance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    uint64_t v6 = (os_log_s *)*(id *)(gLogObjects + 368);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v6 = (os_log_s *)&_os_log_default;
    id v7 = &_os_log_default;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412802;
    uint64_t v10 = a1;
    __int16 v11 = 2112;
    uint64_t v12 = a2;
    __int16 v13 = 2048;
    uint64_t v14 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "navigation startRouteGuidance: %@, componentIdList=%@, options=%llxh",  (uint8_t *)&v9,  0x20u);
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[ACCNavigationServer sharedServer](&OBJC_CLASS___ACCNavigationServer, "sharedServer"));
  [v8 accessoryNavigationStartRouteGuidance:a1 componentIdList:a2 options:a3];
}

void platform_navigation_stopRouteGuidance(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    BOOL v4 = (os_log_s *)*(id *)(gLogObjects + 368);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = (os_log_s *)&_os_log_default;
    id v5 = &_os_log_default;
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412546;
    uint64_t v8 = a1;
    __int16 v9 = 2112;
    uint64_t v10 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "navigation stopRouteGuidance: %@, componentIdList=%@",  (uint8_t *)&v7,  0x16u);
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[ACCNavigationServer sharedServer](&OBJC_CLASS___ACCNavigationServer, "sharedServer"));
  [v6 accessoryNavigationStopRouteGuidance:a1 componentIdList:a2];
}

void platform_navigation_objectDetectionUpdateInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    uint64_t v6 = (os_log_s *)*(id *)(gLogObjects + 368);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v6 = (os_log_s *)&_os_log_default;
    id v7 = &_os_log_default;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v9 = 138412802;
    uint64_t v10 = a1;
    __int16 v11 = 2112;
    uint64_t v12 = a2;
    __int16 v13 = 2112;
    uint64_t v14 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "navigation objectDetectionUpdateInfo: %@, componentIdList=%@, updateInfo=%@",  (uint8_t *)&v9,  0x20u);
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[ACCNavigationServer sharedServer](&OBJC_CLASS___ACCNavigationServer, "sharedServer"));
  [v8 accessoryNavigationObjectDetectionUpdateInfo:a1 componentIdList:a2 updateInfo:a3];
}

void platform_navigation_routeGuidanceUpdateHandler(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (gLogObjects && gNumLogObjects >= 47)
  {
    uint64_t v8 = (os_log_s *)*(id *)(gLogObjects + 368);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v8 = (os_log_s *)&_os_log_default;
    id v9 = &_os_log_default;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    int v12 = 138412802;
    id v13 = v5;
    __int16 v14 = 2112;
    id v15 = v6;
    __int16 v16 = 2112;
    id v17 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "navigation routeGuidanceUpdateHandler: %@, componentIdList=%@, updateInfo=%@",  (uint8_t *)&v12,  0x20u);
  }

  uint64_t v10 = calloc(1uLL, 0x18uLL);
  *(_DWORD *)uint64_t v10 = 0;
  if (v6) {
    id v11 = v6;
  }
  v10[1] = v6;
  _DWORD v10[2] = v7;
}

void platform_navigation_deleteParams(void *a1)
{
  if (a1)
  {
    switch(*(_DWORD *)a1)
    {
      case 0:
      case 1:
      case 2:
      case 3:
        double v2 = (const void *)a1[2];
        if (v2) {
          CFRelease(v2);
        }
        goto LABEL_5;
      case 4:
LABEL_5:
        id v3 = (const void *)a1[1];
        if (v3) {
          CFRelease(v3);
        }
        break;
      default:
        break;
    }

    free(a1);
  }

void platform_navigation_routeGuidanceManeuverUpdateHandler(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (gLogObjects && gNumLogObjects >= 47)
  {
    uint64_t v8 = (os_log_s *)*(id *)(gLogObjects + 368);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v8 = (os_log_s *)&_os_log_default;
    id v9 = &_os_log_default;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    int v12 = 138412802;
    id v13 = v5;
    __int16 v14 = 2112;
    id v15 = v6;
    __int16 v16 = 2112;
    id v17 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "navigation routeGuidanceManeuverUpdateHandler: %@, componentIdList=%@, updateInfo=%@",  (uint8_t *)&v12,  0x20u);
  }

  uint64_t v10 = calloc(1uLL, 0x18uLL);
  *(_DWORD *)uint64_t v10 = 1;
  if (v6) {
    id v11 = v6;
  }
  v10[1] = v6;
  _DWORD v10[2] = v7;
}

void platform_navigation_laneGuidanceInfoUpdateHandler(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (gLogObjects && gNumLogObjects >= 47)
  {
    uint64_t v8 = (os_log_s *)*(id *)(gLogObjects + 368);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v8 = (os_log_s *)&_os_log_default;
    id v9 = &_os_log_default;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    int v12 = 138412802;
    id v13 = v5;
    __int16 v14 = 2112;
    id v15 = v6;
    __int16 v16 = 2112;
    id v17 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "navigation laneGuidanceInfoUpdateHandler: %@, componentIdList=%@, updateInfo=%@",  (uint8_t *)&v12,  0x20u);
  }

  uint64_t v10 = calloc(1uLL, 0x18uLL);
  *(_DWORD *)uint64_t v10 = 2;
  if (v6) {
    id v11 = v6;
  }
  v10[1] = v6;
  _DWORD v10[2] = v7;
}

void platform_navigation_startObjectDetectionHandler(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (gLogObjects && gNumLogObjects >= 47)
  {
    uint64_t v8 = (os_log_s *)*(id *)(gLogObjects + 368);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v8 = (os_log_s *)&_os_log_default;
    id v9 = &_os_log_default;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    int v13 = 138412802;
    id v14 = v5;
    __int16 v15 = 2112;
    id v16 = v6;
    __int16 v17 = 2112;
    id v18 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "navigation startObjectDetectionHandler: %@, componentIdList=%@, objectTypeList=%@",  (uint8_t *)&v13,  0x20u);
  }

  uint64_t v10 = calloc(1uLL, 0x18uLL);
  *(_DWORD *)uint64_t v10 = 3;
  if (v6) {
    id v11 = v6;
  }
  v10[1] = v6;
  if (v7) {
    id v12 = v7;
  }
  _DWORD v10[2] = v7;
}

void platform_navigation_stopObjectDetectionHandler(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (gLogObjects && gNumLogObjects >= 47)
  {
    id v5 = (os_log_s *)*(id *)(gLogObjects + 368);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v5 = (os_log_s *)&_os_log_default;
    id v6 = &_os_log_default;
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    int v9 = 138412546;
    id v10 = v3;
    __int16 v11 = 2112;
    id v12 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "navigation stopObjectDetectionHandler: %@, componentIdList=%@",  (uint8_t *)&v9,  0x16u);
  }

  id v7 = calloc(1uLL, 0x18uLL);
  *(_DWORD *)id v7 = 4;
  if (v4) {
    id v8 = v4;
  }
  v7[1] = v4;
}

id platform_navigation_routeGuidanceInfoKeyForType(uint64_t a1)
{
  return +[ACCNavigationRouteGuidanceUpdateInfo keyForType:]( &OBJC_CLASS___ACCNavigationRouteGuidanceUpdateInfo,  "keyForType:",  a1);
}

id platform_navigation_maneuverInfoKeyForType(uint64_t a1)
{
  return +[ACCNavigationManeuverUpdateInfo keyForType:]( &OBJC_CLASS___ACCNavigationManeuverUpdateInfo,  "keyForType:",  a1);
}

id platform_navigation_laneGuidanceInfoKeyForType(uint64_t a1)
{
  return +[ACCNavigationLaneGuidanceInfo keyForType:](&OBJC_CLASS___ACCNavigationLaneGuidanceInfo, "keyForType:", a1);
}

id platform_navigation_laneInfoKeyForType(uint64_t a1)
{
  return +[ACCNavigationLaneGuidanceLaneInfo keyForType:]( &OBJC_CLASS___ACCNavigationLaneGuidanceLaneInfo,  "keyForType:",  a1);
}

__CFDictionary *platform_navigation_createDisplayComponentDict(uint64_t a1, __int16 a2, const void *a3)
{
  __int16 valuePtr = a2;
  if (!a1) {
    return 0LL;
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
    CFDictionarySetValue(Mutable, ACCNav_DispComp_ComponentID, v5);
    CFDictionarySetValue(Mutable, ACCNav_DispComp_Name, a3);
    CFRelease(v5);
  }

  return Mutable;
}

void platform_navigation_displayComponentAddMaxCurrentRoadNameLength(__CFDictionary *a1, __int16 a2)
{
  __int16 valuePtr = a2;
  if (a1)
  {
    CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
    CFDictionarySetValue(a1, ACCNav_DispComp_MaxCurRoadNameLength, v3);
    CFRelease(v3);
  }

void platform_navigation_displayComponentAddMaxDestinationNameLength(__CFDictionary *a1, __int16 a2)
{
  __int16 valuePtr = a2;
  if (a1)
  {
    CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
    CFDictionarySetValue(a1, ACCNav_DispComp_MaxDestinationNameLength, v3);
    CFRelease(v3);
  }

void platform_navigation_displayComponentAddMaxAfterManeuverRoadNameLength(__CFDictionary *a1, __int16 a2)
{
  __int16 valuePtr = a2;
  if (a1)
  {
    CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
    CFDictionarySetValue(a1, ACCNav_DispComp_MaxAfterManeuverRoadNameLength, v3);
    CFRelease(v3);
  }

void platform_navigation_displayComponentAddManeuverDescriptionLength(__CFDictionary *a1, __int16 a2)
{
  __int16 valuePtr = a2;
  if (a1)
  {
    CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
    CFDictionarySetValue(a1, ACCNav_DispComp_MaxManeuverDescriptionLength, v3);
    CFRelease(v3);
  }

void platform_navigation_displayComponentAddGuidanceManeuverCapacity(__CFDictionary *a1, __int16 a2)
{
  __int16 valuePtr = a2;
  if (a1)
  {
    CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
    CFDictionarySetValue(a1, ACCNav_DispComp_MaxMGuidanceManeuverCapacity, v3);
    CFRelease(v3);
  }

void platform_navigation_displayComponentAddLaneGuidanceDescriptionLength(__CFDictionary *a1, __int16 a2)
{
  __int16 valuePtr = a2;
  if (a1)
  {
    CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
    CFDictionarySetValue(a1, ACCNav_DispComp_MaxLaneGuidanceDescriptionLength, v3);
    CFRelease(v3);
  }

void platform_navigation_displayComponentAddLaneGuidanceCapacity(__CFDictionary *a1, __int16 a2)
{
  __int16 valuePtr = a2;
  if (a1)
  {
    CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
    CFDictionarySetValue(a1, ACCNav_DispComp_MaxLaneGuidanceStorageCapacity, v3);
    CFRelease(v3);
  }

CFDictionaryRef platform_navigation_objectDetectionComponentGetSupportedTypes( const __CFDictionary *result)
{
  if (result) {
    return (const __CFDictionary *)CFDictionaryGetValue(result, ACCNav_RODComp_SupportedTypes);
  }
  return result;
}

CFMutableDictionaryRef platform_navigation_createObjectDetectionInfoDict()
{
  return CFDictionaryCreateMutable( kCFAllocatorDefault,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
}

const void *platform_navigation_objectDetectionInfoGetItem(const __CFDictionary *a1, uint64_t a2)
{
  id v3 = +[ACCNavigationRoadObjectDetectionInfo keyForType:]( &OBJC_CLASS___ACCNavigationRoadObjectDetectionInfo,  "keyForType:",  a2);
  if (a1 && v3) {
    return CFDictionaryGetValue(a1, v3);
  }
  else {
    return 0LL;
  }
}

void platform_navigation_objectDetectionInfoAddComponentID(const __CFDictionary *a1, __int16 a2)
{
  if (a1)
  {
    __int16 valuePtr = a2;
    CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
    _addDictionaryArrayEntryValue(a1, ACCNav_RODUpdate_ID, v3);
    CFRelease(v3);
  }

void platform_navigation_objectDetectionInfoSetTimestamp(__CFDictionary *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t valuePtr = a2;
    CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, &valuePtr);
    _replaceDictionaryNumberValue(a1, ACCNav_RODUpdate_Timestamp, v3);
    CFRelease(v3);
  }

void _replaceDictionaryNumberValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  if (key)
  {
    if (value) {
      CFDictionarySetValue(theDict, key, value);
    }
    else {
      CFDictionaryRemoveValue(theDict, key);
    }
  }

void platform_navigation_objectDetectionInfoSetEgoSpeed(__CFDictionary *a1, int a2)
{
  if (a1)
  {
    int valuePtr = a2;
    CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
    _replaceDictionaryNumberValue(a1, ACCNav_RODUpdate_EgoSpeed, v3);
    CFRelease(v3);
  }

void platform_navigation_objectDetectionInfoSetEgoYawRate(__CFDictionary *a1, float a2)
{
  if (a1)
  {
    float valuePtr = a2;
    CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloatType, &valuePtr);
    _replaceDictionaryNumberValue(a1, ACCNav_RODUpdate_EgoYawRate, v3);
    CFRelease(v3);
  }

void platform_navigation_objectDetectionInfoAddRoadSign(const __CFDictionary *a1, const void *a2)
{
  if (a1)
  {
    if (a2) {
      _addDictionaryArrayEntryValue(a1, ACCNav_RODUpdate_RoadSign, a2);
    }
  }

void platform_navigation_objectDetectionInfoAddRoadLane(const __CFDictionary *a1, const void *a2)
{
  if (a1)
  {
    if (a2) {
      _addDictionaryArrayEntryValue(a1, ACCNav_RODUpdate_RoadLane, a2);
    }
  }

void platform_navigation_objectDetectionInfoAddRoadObject(const __CFDictionary *a1, const void *a2)
{
  if (a1)
  {
    if (a2) {
      _addDictionaryArrayEntryValue(a1, ACCNav_RODUpdate_RoadObject, a2);
    }
  }

CFMutableDictionaryRef platform_navigation_createObjectDetectionRoadSignDict(CFMutableDictionaryRef result)
{
  if (result) {
    return CFDictionaryCreateMutable( kCFAllocatorDefault,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  }
  return result;
}

void platform_navigation_objectDetectionRoadSignSetInfo(__CFDictionary *a1, uint64_t a2, const void *a3)
{
  if (a1)
  {
    id v5 = +[ACCNavigationRoadObjectRoadSignInfo keyForType:]( &OBJC_CLASS___ACCNavigationRoadObjectRoadSignInfo,  "keyForType:",  a2);
    if (a3) {
      CFDictionarySetValue(a1, v5, a3);
    }
    else {
      CFDictionaryRemoveValue(a1, v5);
    }
  }

void platform_navigation_objectDetectionRoadLaneSetInfo(__CFDictionary *a1, uint64_t a2, const void *a3)
{
  if (a1)
  {
    id v5 = +[ACCNavigationRoadObjectRoadLaneInfo keyForType:]( &OBJC_CLASS___ACCNavigationRoadObjectRoadLaneInfo,  "keyForType:",  a2);
    if (a3) {
      CFDictionarySetValue(a1, v5, a3);
    }
    else {
      CFDictionaryRemoveValue(a1, v5);
    }
  }

void platform_navigation_objectDetectionRoadObjectSetInfo(__CFDictionary *a1, uint64_t a2, const void *a3)
{
  if (a1)
  {
    id v5 = +[ACCNavigationRoadObjectRoadObjectInfo keyForType:]( &OBJC_CLASS___ACCNavigationRoadObjectRoadObjectInfo,  "keyForType:",  a2);
    if (a3) {
      CFDictionarySetValue(a1, v5, a3);
    }
    else {
      CFDictionaryRemoveValue(a1, v5);
    }
  }

void platform_navigation_incrementUserCount()
{
  BOOL v0 = (void *)objc_claimAutoreleasedReturnValue(+[ACCNavigationServer sharedServer](&OBJC_CLASS___ACCNavigationServer, "sharedServer"));
  [v0 incrementUserCount];

  double v1 = (void *)objc_claimAutoreleasedReturnValue(+[ACCNavigationServer sharedServer](&OBJC_CLASS___ACCNavigationServer, "sharedServer"));
  unsigned int v2 = [v1 featureUserCount];

  if (v2 == 1)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[ACCFeaturePluginManager sharedManager](&OBJC_CLASS___ACCFeaturePluginManager, "sharedManager"));
    [v3 startPlugInsWithClasses:&off_100206A88];
  }

void platform_navigation_decrementUserCount()
{
  id v0 = (id)objc_claimAutoreleasedReturnValue(+[ACCNavigationServer sharedServer](&OBJC_CLASS___ACCNavigationServer, "sharedServer"));
  [v0 decrementUserCount];
}

void _addDictionaryArrayEntryValue(const __CFDictionary *a1, const void *a2, const void *a3)
{
  if (a2 && a3)
  {
    uint64_t Value = (__CFArray *)CFDictionaryGetValue(a1, a2);
    if (Value
      || (CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks),
          CFDictionarySetValue(a1, a2, Mutable),
          CFRelease(Mutable),
          (uint64_t Value = (__CFArray *)CFDictionaryGetValue(a1, a2)) != 0LL))
    {
      CFArrayAppendValue(Value, a3);
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 47)
      {
        id v8 = (os_log_s *)*(id *)(gLogObjects + 368);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v8 = (os_log_s *)&_os_log_default;
        id v9 = &_os_log_default;
      }

      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = 138412290;
        __int16 v11 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "navigation _addDictionaryArrayEntryValue: failed to add array entry! key %@",  (uint8_t *)&v10,  0xCu);
      }
    }
  }

void _setInfoFromDictionary(void *a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a1 objectForKey:v5]);
  if (v6) {
    [v7 setObject:v6 forKey:v5];
  }
}

BOOL iAP2LinkProcessInOrderPacketCMD(uint64_t a1, uint64_t a2)
{
  int v4 = **(unsigned __int8 **)(a2 + 72);
  if ((_iAP2LogEnableMask & 2) != 0)
  {
    if (gLogObjects) {
      BOOL v5 = gNumLogObjects < 20;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      id v6 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      id v6 = *(os_log_s **)(gLogObjects + 152);
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v7 = *(unsigned __int8 *)(a1 + 213);
      int v15 = 136316162;
      id v16 = "iAP2LinkProcessInOrderPacketCMD";
      __int16 v17 = 1024;
      int v18 = 95;
      __int16 v19 = 1024;
      int v20 = v7;
      __int16 v21 = 1024;
      int v22 = v4;
      __int16 v23 = 1024;
      int v24 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s:%d linkVer=%d cmdID=%xh(%d)",  (uint8_t *)&v15,  0x24u);
    }
  }

  id v8 = (unsigned __int8 *)(a1 + 213);
  if (*(_BYTE *)(a1 + 213) != 1)
  {
    *(_BYTE *)(a1 + 18_Block_object_dispose(va, 8) = *(_BYTE *)(*(void *)(a2 + 64) + 5LL);
    *(_BYTE *)(a1 + 212) |= 1u;
    if (v4 == 85)
    {
      int v10 = *(uint64_t **)(a1 + 8);
      unsigned int v11 = 10;
    }

    else
    {
      if (v4 != 84)
      {
        if ((_iAP2LogEnableMask & 4) != 0)
        {
          if (gLogObjects && gNumLogObjects >= 20)
          {
            id v14 = *(os_log_s **)(gLogObjects + 152);
          }

          else
          {
            id v14 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          BOOL result = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
          if (result)
          {
            iAP2LinkProcessInOrderPacketCMD_cold_3(v4, v14);
            return 0LL;
          }

          return result;
        }

        return 0LL;
      }

      int v10 = *(uint64_t **)(a1 + 8);
      unsigned int v11 = 9;
    }

    iAP2FSMHandleEvent(v10, v11);
    return 1LL;
  }

  if ((_iAP2LogEnableMask & 4) == 0) {
    return 0LL;
  }
  if (gLogObjects) {
    BOOL v9 = gNumLogObjects < 20;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    int v13 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    int v13 = *(os_log_s **)(gLogObjects + 152);
  }

  BOOL result = os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    iAP2LinkProcessInOrderPacketCMD_cold_1(v8, v4, v13);
    return 0LL;
  }

  return result;
}

BOOL iAP2LinkCommandIsFeatureSetValid(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 24);
  if (*(_BYTE *)(a1 + 24))
  {
    int v2 = 0;
    id v3 = (unsigned __int8 *)(a1 + 25);
    do
    {
      int v5 = *v3++;
      int v4 = v5;
      if (v5 == 85) {
        unsigned int v6 = 2;
      }
      else {
        unsigned int v6 = 0x80000000;
      }
      if (v4 == 84) {
        int v7 = 1;
      }
      else {
        int v7 = v6;
      }
      v2 |= v7;
      --v1;
    }

    while (v1);
    if (v2 < 0) {
      return 0LL;
    }
  }

  else
  {
    LOBYTE(v2) = 0;
  }

  int v9 = v2 & 3;
  return v9 == 3 || v9 == 0;
}

uint64_t iAP2LinkCommandValidateFeatureSets(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 24);
  if (*(_BYTE *)(a2 + 24))
  {
    int v3 = 0;
    int v4 = (unsigned __int8 *)(a2 + 25);
    do
    {
      int v6 = *v4++;
      int v5 = v6;
      if (v6 == 85) {
        unsigned int v7 = 2;
      }
      else {
        unsigned int v7 = 0x80000000;
      }
      if (v5 == 84) {
        int v8 = 1;
      }
      else {
        int v8 = v7;
      }
      v3 |= v8;
      --v2;
    }

    while (v2);
    if ((v3 & 3) != 0)
    {
      *(_WORD *)(a2 + 25) = 21844;
      v3 |= 3u;
      LOBYTE(v2) = 2;
    }

    else
    {
      LOBYTE(v2) = 0;
    }
  }

  else
  {
    int v3 = 0;
  }

  *(_BYTE *)(a2 + 24) = v2;
  *(_DWORD *)(result + 272) = v3;
  return result;
}

void sub_1000454B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, id a18)
{
}

void sub_100046098( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location)
{
}

void OUTLINED_FUNCTION_5_6(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void platform_blePairing_accessoryAttached(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (gLogObjects && gNumLogObjects >= 42)
  {
    int v8 = (os_log_s *)*(id *)(gLogObjects + 328);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v8 = (os_log_s *)&_os_log_default;
    id v9 = &_os_log_default;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 138413058;
    uint64_t v12 = a1;
    __int16 v13 = 2112;
    uint64_t v14 = a2;
    __int16 v15 = 2112;
    uint64_t v16 = a3;
    __int16 v17 = 2112;
    uint64_t v18 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "blePairing accessoryAttached: %@, blePairingUUID %@ accInfoDict=%@ supportedPairTypes=%@",  (uint8_t *)&v11,  0x2Au);
  }

  int v10 = (void *)objc_claimAutoreleasedReturnValue(+[ACCBLEPairingServer sharedServer](&OBJC_CLASS___ACCBLEPairingServer, "sharedServer"));
  [v10 accessoryBLEPairingAttached:a1 blePairingUUID:a2 accInfoDict:a3 supportedPairTypes:a4];
}

void platform_blePairing_accessoryDetached(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 42)
  {
    int v4 = (os_log_s *)*(id *)(gLogObjects + 328);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v4 = (os_log_s *)&_os_log_default;
    id v5 = &_os_log_default;
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412290;
    uint64_t v8 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "blePairing accessoryDetached: %@",  (uint8_t *)&v7,  0xCu);
  }

  int v6 = (void *)objc_claimAutoreleasedReturnValue(+[ACCBLEPairingServer sharedServer](&OBJC_CLASS___ACCBLEPairingServer, "sharedServer"));
  [v6 accessoryBLEPairingDetached:a1 blePairingUUID:a2];
}

void platform_blePairing_accessoryStateUpdate( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (gLogObjects && gNumLogObjects >= 42)
  {
    uint64_t v12 = (os_log_s *)*(id *)(gLogObjects + 328);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v12 = (os_log_s *)&_os_log_default;
    id v13 = &_os_log_default;
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 138413570;
    uint64_t v16 = a1;
    __int16 v17 = 2112;
    uint64_t v18 = a2;
    __int16 v19 = 1024;
    int v20 = a3;
    __int16 v21 = 1024;
    int v22 = a4;
    __int16 v23 = 1024;
    int v24 = a5;
    __int16 v25 = 1024;
    int v26 = a6;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "blePairing accessoryStateUpdate: %@, blePairingUUID %@, validMask=%xh btRadioOn=%d pairingState=%d pairingModeOn=%d",  (uint8_t *)&v15,  0x2Eu);
  }

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[ACCBLEPairingServer sharedServer](&OBJC_CLASS___ACCBLEPairingServer, "sharedServer"));
  [v14 accessoryBLEPairingStateUpdate:a1 blePairingUUID:a2 validMask:a3 btRadioOn:a4 pairingState:a5 pairingModeOn:a6];
}

void platform_blePairing_accessoryPairingInfo(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (gLogObjects && gNumLogObjects >= 42)
  {
    uint64_t v8 = (os_log_s *)*(id *)(gLogObjects + 328);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v8 = (os_log_s *)&_os_log_default;
    id v9 = &_os_log_default;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 138413058;
    uint64_t v12 = a1;
    __int16 v13 = 2112;
    uint64_t v14 = a2;
    __int16 v15 = 1024;
    int v16 = a3;
    __int16 v17 = 2112;
    uint64_t v18 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "blePairing accessoryPairingInfo: %@, blePairingUUID %@, pairType=%d pairInfoList=%@",  (uint8_t *)&v11,  0x26u);
  }

  int v10 = (void *)objc_claimAutoreleasedReturnValue(+[ACCBLEPairingServer sharedServer](&OBJC_CLASS___ACCBLEPairingServer, "sharedServer"));
  [v10 accessoryBLEPairingInfoUpdate:a1 blePairingUUID:a2 pairType:a3 pairInfoList:a4];
}

void platform_blePairing_accessoryPairingData(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5)
{
  id v8 = (id)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", a4, a5));
  platform_blePairing_accessoryPairingCFData(a1, a2, a3, (uint64_t)v8);
}

void platform_blePairing_accessoryPairingCFData(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (gLogObjects && gNumLogObjects >= 42)
  {
    id v8 = (os_log_s *)*(id *)(gLogObjects + 328);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v8 = (os_log_s *)&_os_log_default;
    id v9 = &_os_log_default;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 138413058;
    uint64_t v12 = a1;
    __int16 v13 = 2112;
    uint64_t v14 = a2;
    __int16 v15 = 1024;
    int v16 = a3;
    __int16 v17 = 2112;
    uint64_t v18 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "blePairing accessoryPairingInfo: %@, blePairingUUID %@, pairType=%d pairData=%@",  (uint8_t *)&v11,  0x26u);
  }

  int v10 = (void *)objc_claimAutoreleasedReturnValue(+[ACCBLEPairingServer sharedServer](&OBJC_CLASS___ACCBLEPairingServer, "sharedServer"));
  [v10 accessoryBLEPairingDataUpdate:a1 blePairingUUID:a2 pairType:a3 pairData:a4];
}

void platform_blePairing_finishedNegotiation(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 42)
  {
    int v4 = (os_log_s *)*(id *)(gLogObjects + 328);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v4 = (os_log_s *)&_os_log_default;
    id v5 = &_os_log_default;
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412546;
    uint64_t v8 = a1;
    __int16 v9 = 2112;
    uint64_t v10 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "blePairing finishedNegotiation: %@, blePairingUUID %@",  (uint8_t *)&v7,  0x16u);
  }

  int v6 = (void *)objc_claimAutoreleasedReturnValue(+[ACCBLEPairingServer sharedServer](&OBJC_CLASS___ACCBLEPairingServer, "sharedServer"));
  [v6 accessoryBLEPairingFinished:a1 blePairingUUID:a2];
}

void platform_blePairing_startBLEUpdatesHandler(void *a1, void *a2, int a3, int a4, int a5)
{
  id v9 = a1;
  id v10 = a2;
  if (gLogObjects && gNumLogObjects >= 42)
  {
    int v11 = (os_log_s *)*(id *)(gLogObjects + 328);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v11 = (os_log_s *)&_os_log_default;
    id v12 = &_os_log_default;
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 138413314;
    id v15 = v9;
    __int16 v16 = 2112;
    id v17 = v10;
    __int16 v18 = 1024;
    int v19 = a3;
    __int16 v20 = 1024;
    int v21 = a4;
    __int16 v22 = 1024;
    int v23 = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "blePairing startBLEUpdates: %@, blePairingUUID=%@, pairType=%d bRadioUpdatesOn=%d bPairInfoUpdatesOn=%d",  (uint8_t *)&v14,  0x28u);
  }

  __int16 v13 = malloc(0x20uLL);
  *(_DWORD *)__int16 v13 = 0;
  v13[1] = v10;
  *((_DWORD *)v13 + 4) = a3;
  *((_BYTE *)v13 + 20) = a4;
  *((_BYTE *)v13 + 21) = a5;
}

void platform_blePairing_deleteParams(void *a1)
{
  if (a1)
  {
    if (*(_DWORD *)a1 == 3 || *(_DWORD *)a1 == 2)
    {
      uint64_t v2 = (const void *)a1[3];
      if (v2) {
        CFRelease(v2);
      }
    }

    int v3 = (const void *)a1[1];
    if (v3) {
      CFRelease(v3);
    }
    free(a1);
  }

void platform_blePairing_deviceStateUpdateHandler(void *a1, void *a2, int a3, int a4, int a5)
{
  id v9 = a1;
  id v10 = a2;
  if (gLogObjects && gNumLogObjects >= 42)
  {
    int v11 = (os_log_s *)*(id *)(gLogObjects + 328);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v11 = (os_log_s *)&_os_log_default;
    id v12 = &_os_log_default;
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 138413314;
    id v15 = v9;
    __int16 v16 = 2112;
    id v17 = v10;
    __int16 v18 = 1024;
    int v19 = a3;
    __int16 v20 = 1024;
    int v21 = a4;
    __int16 v22 = 1024;
    int v23 = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "blePairing deviceStateUpdate: %@, blePairingUUID=%@, bRadioOn=%d pairState=%d bPairModeOn=%d",  (uint8_t *)&v14,  0x28u);
  }

  __int16 v13 = malloc(0x20uLL);
  *(_DWORD *)__int16 v13 = 1;
  v13[1] = v10;
  *((_BYTE *)v13 + 16) = a3;
  *((_DWORD *)v13 + 5) = a4;
  *((_BYTE *)v13 + 24) = a5;
}

void platform_blePairing_devicePairingDataHandler(void *a1, void *a2, int a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a4;
  if (gLogObjects && gNumLogObjects >= 42)
  {
    id v10 = (os_log_s *)*(id *)(gLogObjects + 328);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v10 = (os_log_s *)&_os_log_default;
    id v11 = &_os_log_default;
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 138413058;
    id v14 = v7;
    __int16 v15 = 2112;
    id v16 = v8;
    __int16 v17 = 1024;
    int v18 = a3;
    __int16 v19 = 2112;
    id v20 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "blePairing devicePairingData: %@, blePairingUUID=%@, pairType=%d pairData=%@",  (uint8_t *)&v13,  0x26u);
  }

  id v12 = malloc(0x20uLL);
  *(_DWORD *)id v12 = 2;
  v12[1] = v8;
  *((_DWORD *)v12 + 4) = a3;
  v12[3] = v9;
}

void platform_blePairing_deviceUpdatePairingInfoHandler(void *a1, void *a2, int a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a4;
  if (gLogObjects && gNumLogObjects >= 42)
  {
    id v10 = (os_log_s *)*(id *)(gLogObjects + 328);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v10 = (os_log_s *)&_os_log_default;
    id v11 = &_os_log_default;
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 138413058;
    id v14 = v7;
    __int16 v15 = 2112;
    id v16 = v8;
    __int16 v17 = 1024;
    int v18 = a3;
    __int16 v19 = 2112;
    id v20 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "blePairing deviceUpdatePairingInfo: %@, blePairingUUID=%@, pairType=%d pairInfo=%@",  (uint8_t *)&v13,  0x26u);
  }

  id v12 = malloc(0x20uLL);
  *(_DWORD *)id v12 = 3;
  v12[1] = v8;
  *((_DWORD *)v12 + 4) = a3;
  v12[3] = v9;
}

void platform_blePairing_stopBLEUpdatesHandler(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (gLogObjects && gNumLogObjects >= 42)
  {
    id v5 = (os_log_s *)*(id *)(gLogObjects + 328);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v5 = (os_log_s *)&_os_log_default;
    id v6 = &_os_log_default;
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412546;
    id v9 = v3;
    __int16 v10 = 2112;
    id v11 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "blePairing stopBLEUpdates: %@ blePairingUUID=%@",  (uint8_t *)&v8,  0x16u);
  }

  id v7 = malloc(0x20uLL);
  *(_DWORD *)id v7 = 4;
  v7[1] = v4;
}

__CFDictionary *platform_blePairing_createAccInfoMutableDict( const void *a1, const void *a2, const void *a3, const void *a4, const void *a5, const void *a6)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeDictionaryKeyCallBacks, 0LL);
  int v13 = Mutable;
  if (a2 && a1 && Mutable)
  {
    CFDictionaryAddValue(Mutable, @"IAPAppBTPairingAccManufacturer", a2);
    CFDictionaryAddValue(v13, @"IAPAppBTPairingAccModel", a1);
    CFDictionaryAddValue(v13, @"IAPAppBTPairingAccName", a3);
    CFDictionaryAddValue(v13, @"IAPAppBTPairingAccSerialNum", a4);
    CFDictionaryAddValue(v13, @"IAPAppBTPairingAccFwVer", a5);
    CFDictionaryAddValue(v13, @"IAPAppBTPairingAccHwVer", a6);
  }

  return v13;
}

void platform_blePairing_incrementUserCount()
{
  id v0 = (void *)objc_claimAutoreleasedReturnValue(+[ACCBLEPairingServer sharedServer](&OBJC_CLASS___ACCBLEPairingServer, "sharedServer"));
  [v0 incrementUserCount];

  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[ACCBLEPairingServer sharedServer](&OBJC_CLASS___ACCBLEPairingServer, "sharedServer"));
  unsigned int v2 = [v1 featureUserCount];

  if (v2 == 1)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[ACCFeaturePluginManager sharedManager](&OBJC_CLASS___ACCFeaturePluginManager, "sharedManager"));
    [v3 startPlugInsWithClasses:&off_100206AA0];
  }

void platform_blePairing_decrementUserCount()
{
  id v0 = (id)objc_claimAutoreleasedReturnValue(+[ACCBLEPairingServer sharedServer](&OBJC_CLASS___ACCBLEPairingServer, "sharedServer"));
  [v0 decrementUserCount];
}

void mfi4Auth_protocol_cleanupNVMContext(uint64_t a1)
{
  if (a1)
  {
    unsigned int v2 = *(void **)a1;
    if (v2)
    {
      free(v2);
      *(void *)a1 = 0LL;
    }

    id v3 = *(const void **)(a1 + 48);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
    }

    id v4 = *(const void **)(a1 + 56);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(a1 + 56) = 0LL;
    }

    id v5 = *(const void **)(a1 + 64);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 64) = 0LL;
    }

    id v6 = *(const void **)(a1 + 72);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 72) = 0LL;
    }

    id v7 = *(const void **)(a1 + 80);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 80) = 0LL;
    }

    int v8 = *(const void **)(a1 + 88);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
    }

    id v9 = *(const void **)(a1 + 96);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(a1 + 96) = 0LL;
    }

    __int16 v10 = *(const void **)(a1 + 104);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(a1 + 104) = 0LL;
    }

    id v11 = *(const void **)(a1 + 112);
    if (v11)
    {
      CFRelease(v11);
      *(void *)(a1 + 112) = 0LL;
    }

    id v12 = *(void **)(a1 + 120);
    if (v12)
    {
      free(v12);
      *(void *)(a1 + 120) = 0LL;
    }
  }

uint64_t mfi4Auth_protocol_initMessage_RequestUserNVMRead( uint64_t a1, uint64_t *a2, unsigned __int16 *a3, int a4, uint64_t a5, uint64_t a6)
{
  if (!a2) {
    return 1LL;
  }
  LODWORD(v_Block_object_dispose(va, 8) = a4;
  __int16 v12 = *(_WORD *)(a1 + 200);
  int v13 = malloc(0x48uLL);
  *a2 = (uint64_t)v13;
  if (!v13) {
    return 0xFFFFFFFFLL;
  }
  iAP2MsgInitWithSom((uint64_t)v13, v12, 20784, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0LL, 0LL);
  if (*(_BYTE *)(a1 + 144) == 2)
  {
    if (a5) {
      iAP2MsgAddArrayU8Param(*a2, 0LL, 0, a5, 0x40u);
    }
    if (a6) {
      iAP2MsgAddArrayU8Param(*a2, 0LL, 1, a6, 0x10u);
    }
  }

  __int16 v14 = _convertUserVendorNVMRead(a1, 2LL);
  if ((_DWORD)v8)
  {
    __int16 v15 = v14;
    uint64_t v8 = v8;
    do
    {
      unsigned int v16 = *a3++;
      iAP2MsgAddU16Param(*a2, 0LL, v15, v16);
      --v8;
    }

    while (v8);
  }

  uint64_t result = 0LL;
  *(_WORD *)(a1 + 2_Block_object_dispose(va, 8) = 20784;
  return result;
}

uint64_t _convertUserVendorNVMRead(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!a1)
  {
    id v4 = logObjectForModule_9();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      _convertUserVendorNVMRead_cold_1(v5, v6, v7, v8, v9, v10, v11, v12);
    }
    goto LABEL_11;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v13 = logObjectForModule_9();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      _convertUserVendorNVMRead_cold_2(v5, v14, v15, v16, v17, v18, v19, v20);
    }
LABEL_11:

    return v2;
  }

  return v2;
}

uint64_t mfi4Auth_protocol_handle_NVMEraseResponse(uint64_t a1, uint64_t a2)
{
  unsigned int v78 = 1;
  if (!a1)
  {
    id v60 = logObjectForModule_9();
    uint64_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMEraseResponse_cold_1(v54, v61, v62, v63, v64, v65, v66, v67);
    }
    goto LABEL_116;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v68 = logObjectForModule_9();
    uint64_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v68);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMEraseResponse_cold_8(v54, v69, v70, v71, v72, v73, v74, v75);
    }
    goto LABEL_116;
  }

  if (!a2)
  {
    id v76 = logObjectForModule_9();
    uint64_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v76);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMEraseResponse_cold_2();
    }
    goto LABEL_116;
  }

  char v77 = 0;
  __dst[0] = 0xAAAAAAAAAAAAAAAALL;
  __dst[1] = 0xAAAAAAAAAAAAAAAALL;
  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0LL);
  int v5 = 0;
  while (1)
  {
    if (!FirstParam)
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v18 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v18 = (os_log_s *)&_os_log_default;
        id v19 = &_os_log_default;
      }

      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v81) = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "handle_NVMEraseResponse: paramMask:0x%x",  buf,  8u);
      }

      if (((v5 >> _convertNVMEraseResponse(a1, 1LL, 0)) & 1) != 0)
      {
        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v20 = (os_log_s *)*(id *)(gLogObjects + 440);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v20 = (os_log_s *)&_os_log_default;
          id v22 = &_os_log_default;
        }

        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "handle_NVMEraseResponse: KeyErased",  buf,  2u);
        }

        if (*(void *)(*(void *)(a1 + 712) + 80LL))
        {
          int v23 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"com.apple.accessoryd.mfi4.userPublicKey.%@",  *(void *)(*(void *)(a1 + 712) + 80LL)));
          if (gLogObjects && gNumLogObjects >= 56)
          {
            int v24 = (os_log_s *)*(id *)(gLogObjects + 440);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            int v24 = (os_log_s *)&_os_log_default;
            id v25 = &_os_log_default;
          }

          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            uint64_t v81 = (uint64_t)v23;
            _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "handle_NVMEraseResponse: featureTag: %@",  buf,  0xCu);
          }

          uint64_t v26 = MFi4AuthFeatureGroup();
          DeleteSynchronizableKeyForAuthFeature(0LL, v23, v26);
          DeleteKeyForAuthFeature(0LL, v23);
        }

        else
        {
          if (gLogObjects && gNumLogObjects >= 56)
          {
            int v23 = (os_log_s *)*(id *)(gLogObjects + 440);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            int v23 = (os_log_s *)&_os_log_default;
            id v27 = &_os_log_default;
          }

          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "handle_NVMEraseResponse: !serialNumberString",  buf,  2u);
          }
        }

        CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, *(CFStringRef *)a1);
        CFStringRef v29 = Copy;
        if (Copy)
        {
          EndpointWithUUID = (uint64_t *)acc_manager_getEndpointWithUUID(Copy);
        }

        int v31 = *(_DWORD *)(a1 + 32);
        if (v31 == 5)
        {
          int v32 = *(void **)(a1 + 64);
          if (!v32) {
            goto LABEL_87;
          }
          uint64_t v33 = objc_retainBlock(v32);
          v33[2](v33, 0LL);
          *(void *)(a1 + 64) = 0LL;
          *(_DWORD *)(a1 + 32) = 0;

          int v31 = *(_DWORD *)(a1 + 32);
        }

        if (v31 != 11)
        {
LABEL_84:
          if (v31 == 13)
          {
            CFIndex v36 = *(void **)(a1 + 64);
            if (v36)
            {
              uint64_t v37 = objc_retainBlock(v36);
              v37[2](v37, 0LL);
              *(void *)(a1 + 64) = 0LL;
              *(_DWORD *)(a1 + 32) = 0;
            }
          }

          goto LABEL_87;
        }

        int v34 = *(void **)(a1 + 64);
        if (v34)
        {
          uint64_t v35 = objc_retainBlock(v34);
          v35[2](v35, 0LL);
          *(void *)(a1 + 64) = 0LL;
          *(_DWORD *)(a1 + 32) = 0;

          int v31 = *(_DWORD *)(a1 + 32);
          goto LABEL_84;
        }

LABEL_87:
        if (v29) {
          CFRelease(v29);
        }
        return 0;
      }

      if (1 << _convertNVMEraseResponse(a1, 2LL, 0) == v5)
      {
        if (gLogObjects && gNumLogObjects >= 56)
        {
          int v21 = (os_log_s *)*(id *)(gLogObjects + 440);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          int v21 = (os_log_s *)&_os_log_default;
          id v39 = &_os_log_default;
        }

        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "handle_NVMEraseResponse: KeyNotErased",  buf,  2u);
        }

        int v40 = *(_DWORD *)(a1 + 32);
        if (v40 == 5)
        {
          CFIndex v41 = *(void **)(a1 + 64);
          if (!v41) {
            return 0;
          }
          uint64_t v42 = objc_retainBlock(v41);
          id v43 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSCocoaErrorDomain,  -1LL,  0LL));
          v42[2](v42, v43);
          *(void *)(a1 + 64) = 0LL;
          *(_DWORD *)(a1 + 32) = 0;

          int v40 = *(_DWORD *)(a1 + 32);
        }

        if (v40 != 11)
        {
LABEL_102:
          if (v40 == 13)
          {
            CFIndex v47 = *(void **)(a1 + 64);
            if (v47)
            {
              __int16 v48 = objc_retainBlock(v47);
              id v49 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSCocoaErrorDomain,  -1LL,  0LL));
              v48[2](v48, v49);
              *(void *)(a1 + 64) = 0LL;
              *(_DWORD *)(a1 + 32) = 0;
            }
          }

          return 0;
        }

        CFIndex v44 = *(void **)(a1 + 64);
        if (v44)
        {
          uint64_t v45 = objc_retainBlock(v44);
          id v46 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSCocoaErrorDomain,  -1LL,  0LL));
          v45[2](v45, v46);
          *(void *)(a1 + 64) = 0LL;
          *(_DWORD *)(a1 + 32) = 0;

          int v40 = *(_DWORD *)(a1 + 32);
          goto LABEL_102;
        }
      }

      return 0;
    }

    uint64_t ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
    uint64_t v7 = gLogObjects;
    int v8 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v9 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        uint64_t v81 = v7;
        __int16 v82 = 1024;
        int v83 = v8;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
      }

      id v10 = &_os_log_default;
      uint64_t v9 = (os_log_s *)&_os_log_default;
    }

    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v81) = ParamID;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "handle_NVMEraseResponse: paramID: %d",  buf,  8u);
    }

    if (*(_BYTE *)(a1 + 144) == 3)
    {
      int v11 = ParamID;
      if (!(_DWORD)ParamID) {
        goto LABEL_22;
      }
    }

    else
    {
      int v11 = _convertNVMEraseResponse(a1, ParamID, 1);
      if (!v11)
      {
LABEL_22:
        iAP2MsgGetDataAsU16(FirstParam, &v78);
        if (v78)
        {
          id v53 = logObjectForModule_9();
          uint64_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
          if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            int v52 = "handle_NVMEraseResponse: KeyErased: errorNo";
            goto LABEL_115;
          }

          goto LABEL_116;
        }

  uint64_t v42 = iAP2MsgInit((uint64_t)(v59 + 15), 19457, v59[24], 0xFFFF, 0LL, 0LL);
  if (gLogObjects && gNumLogObjects >= 31)
  {
    id v43 = *(os_log_s **)(gLogObjects + 240);
    CFIndex v44 = v57;
  }

  else
  {
    id v43 = (os_log_s *)&_os_log_default;
    CFIndex v44 = v57;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
  {
    uint64_t v45 = *(_DWORD *)(v44 + 48);
    *(_DWORD *)buf = 138412546;
    uint64_t v62 = v58;
    uint64_t v63 = 1024;
    *(_DWORD *)uint64_t v64 = v45;
    _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_INFO,  "iap2_mediaLibrary_infoUpdateHandler %@ mediaLibraryInfoCount=%d",  buf,  0x12u);
  }

  if (*(int *)(v44 + 48) >= 1)
  {
    id v46 = 0LL;
    do
    {
      CFIndex v47 = *(char **)(*(void *)(v44 + 40) + 8 * v46);
      __int16 v48 = iAP2MsgAddGroupParam(v42, 0);
      id v49 = gLogObjects;
      id v50 = gNumLogObjects;
      if (gLogObjects) {
        CFIndex v51 = gNumLogObjects < 31;
      }
      else {
        CFIndex v51 = 1;
      }
      if (v51)
      {
        int v52 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          uint64_t v62 = v49;
          uint64_t v63 = 1024;
          *(_DWORD *)uint64_t v64 = v50;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          int v52 = (os_log_s *)&_os_log_default;
        }
      }

      else
      {
        int v52 = *(os_log_s **)(gLogObjects + 240);
      }

      if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
      {
        id v53 = *((_DWORD *)v47 + 33);
        *(_DWORD *)buf = 138413314;
        uint64_t v62 = v58;
        uint64_t v63 = 1024;
        *(_DWORD *)uint64_t v64 = v46;
        *(_WORD *)&v64[4] = 2080;
        *(void *)&v64[6] = v47 + 1;
        *(_WORD *)&v64[14] = 2080;
        *(void *)&v64[16] = v47 + 65;
        *(_WORD *)&v64[24] = 1024;
        *(_DWORD *)&v64[26] = v53;
        _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_INFO,  "iap2_mediaLibrary_infoUpdateHandler %@ index=%d name=%s uid=%s type=%d",  buf,  0x2Cu);
      }

      iAP2MsgAddStringParam(v42, (uint64_t)v48, 0, v47 + 1);
      iAP2MsgAddStringParam(v42, (uint64_t)v48, 1, v47 + 65);
      iAP2MsgAddU8Param(v42, (uint64_t)v48, 2, v47[132]);
      ++v46;
      CFIndex v44 = v57;
    }

    while (v46 < *(int *)(v57 + 48));
  }

  if (gLogObjects && gNumLogObjects >= 31)
  {
    uint64_t v54 = *(os_log_s **)(gLogObjects + 240);
  }

  else
  {
    uint64_t v54 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
  {
    int MsgID = iAP2MsgGetMsgID(v42);
    *(_DWORD *)buf = 138412546;
    uint64_t v62 = v58;
    uint64_t v63 = 1024;
    *(_DWORD *)uint64_t v64 = MsgID;
    _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_INFO,  "iap2_mediaLibrary_infoUpdateHandler %@ send message %xh",  buf,  0x12u);
  }

  iap2_sessionControl_sendOutgoingMessage(v59, v42);
  platform_mediaLibrary_deleteParams(v56);
  return 1LL;
}

  if (gLogObjects && gNumLogObjects >= 60)
  {
    uint64_t v64 = (os_log_s *)*(id *)(gLogObjects + 472);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v64 = (os_log_s *)&_os_log_default;
    uint64_t v65 = &_os_log_default;
  }

  if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316930;
    int v83 = "qiAuth_util_verifyChallengeSignature";
    uint64_t v84 = 1024;
    uint64_t v85 = 337;
    uint64_t v86 = 1024;
    *(_DWORD *)int v87 = v19;
    *(_WORD *)&v87[4] = 1024;
    *(_DWORD *)&void v87[6] = a2;
    int v88 = 1024;
    int v89 = a4;
    int v90 = 1024;
    uint64_t v91 = a6;
    uint64_t v92 = 1024;
    uint64_t v93 = a8;
    uint64_t v94 = 1024;
    uint64_t v95 = a10;
    _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "%s:%d result %d, slot %d, certChainRootHashLength %d, certChainLength %d, challengeLen %d, signatureSize %d",  buf,  0x36u);
  }

  return v19;
}

LABEL_33:
        v5 |= 1 << ParamID;
        goto LABEL_34;
      }
    }

    if (v11 == 1)
    {
      iAP2MsgGetDataAsU16(FirstParam, &v78);
      if (v78)
      {
        id v56 = logObjectForModule_9();
        uint64_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          int v52 = "handle_NVMEraseResponse: KeyNotErased: errorNo";
          goto LABEL_115;
        }

        goto LABEL_116;
      }

      goto LABEL_33;
    }

    if (v11 == 2) {
      break;
    }
LABEL_34:
    unint64_t FirstParam = iAP2MsgGetNextParamWithError(a2, 0LL, FirstParam, &v77);
    if (v77)
    {
      id v50 = logObjectForModule_9();
      uint64_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        int v52 = "handle_NVMEraseResponse: iAP2MsgGetNextParamWithError: error";
        goto LABEL_115;
      }

      goto LABEL_116;
    }
  }

  uint64_t v12 = gLogObjects;
  int v13 = gNumLogObjects;
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v14 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      uint64_t v81 = v12;
      __int16 v82 = 1024;
      int v83 = v13;
      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
    }

    id v15 = &_os_log_default;
    uint64_t v14 = (os_log_s *)&_os_log_default;
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    int ParamValueLen = iAP2MsgGetParamValueLen(FirstParam);
    *(_DWORD *)buf = 67109120;
    LODWORD(v81) = ParamValueLen;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "handle_NVMEraseResponse: AuthNonce length: %d",  buf,  8u);
  }

  unsigned int v78 = 0;
  int DataAsArrayU8 = iAP2MsgGetDataAsArrayU8(FirstParam, &v78, __dst, 16);
  if (!v78)
  {
    if (DataAsArrayU8 != 16)
    {
      id v59 = logObjectForModule_9();
      uint64_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        int v52 = "handle_NVMEraseResponse: AuthNonce: count";
LABEL_115:
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, v52, buf, 2u);
      }

      goto LABEL_116;
    }

    goto LABEL_33;
  }

  id v58 = logObjectForModule_9();
  uint64_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
  if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    int v52 = "handle_NVMEraseResponse: AuthNonce: errorNo";
    goto LABEL_115;
  }

    CFStringRef v29 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    goto LABEL_35;
  }

      id v15 = platform_communications_endCall(0LL, (uint64_t)v6);
LABEL_34:
      uint64_t v2 = v15;
      if (v6) {
LABEL_35:
      }
        CFRelease(v6);
    }
  }

  return v2;
}

                CFRelease(v17);
                goto LABEL_34;
              }

  -[NSMutableDictionary setObject:forKey:]( v3,  "setObject:forKey:",  self->_albumTitle,  @"ACCMediaLibraryUpdateItemAlbumTitle");
  validMask = self->_validMask;
  if ((validMask & 0x80) == 0)
  {
LABEL_9:
    if ((validMask & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }

  albumTitle = self->_albumTitle;
  if (albumTitle)
  {
    albumTitle = -[NSString UTF8String](albumTitle, "UTF8String");
    validMask = self->_validMask;
  }

  a3->var7 = (char *)albumTitle;
  a3->var0 |= 0x40u;
  if ((validMask & 0x80) == 0)
  {
LABEL_9:
    if ((validMask & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_37;
  }

    if (v23 == 2) {
      uint64_t v26 = 22;
    }
    else {
      uint64_t v26 = 20;
    }
    __int16 v48 = -21846;
    *(void *)&id v27 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v46[16] = v27;
    CFIndex v47 = v27;
    *(_OWORD *)id v46 = v27;
    CFIndex v28 = *(unsigned __int8 **)(a2 + 72);
    int PayloadLen = iAP2PacketGetPayloadLen(a2);
    if (iAP2PacketParseSYNData(v28, PayloadLen, (uint64_t)v46))
    {
      if (iAP2LinkIsValidSynParam( v46,  *(unsigned __int8 *)(a1 + 215),  *(void *)(a1 + 352) + 14LL,  *(void *)(a1 + 352) + 19LL))
      {
        if ((*(_BYTE *)(v4 + 4) & 0x40) == 0)
        {
          int v21 = *(uint64_t **)(a1 + 8);
          id v22 = v19;
LABEL_82:
          iAP2FSMHandleEvent(v21, v22);
          return 1LL;
        }

        if (v46[0] == *(unsigned __int8 *)(a1 + 360)
          && __PAIR64__(*(unsigned __int16 *)&v46[8], *(unsigned __int16 *)&v46[6]) == __PAIR64__( *(unsigned __int16 *)(a1 + 368),  *(unsigned __int16 *)(a1 + 366))
          && __PAIR64__(v46[3], v46[2]) == __PAIR64__(*(unsigned __int8 *)(a1 + 363), *(unsigned __int8 *)(a1 + 362))
          && v46[10] == *(unsigned __int8 *)(a1 + 370))
        {
          int v21 = *(uint64_t **)(a1 + 8);
          else {
            id v22 = 5;
          }
          goto LABEL_82;
        }
      }

      if (iAP2LinkIsNoRetransmit(a1 + 360) && !iAP2LinkIsNoRetransmit((uint64_t)v46))
      {
        int v21 = *(uint64_t **)(a1 + 8);
        id v22 = 7;
        goto LABEL_82;
      }
    }

    else
    {
      iAP2LinkIsNoRetransmit(a1 + 360);
    }

    int v21 = *(uint64_t **)(a1 + 8);
    id v22 = 6;
    goto LABEL_82;
  }

  if ((v5 & 0x20) != 0)
  {
    if (*(_BYTE *)(a1 + 213) == 2) {
      uint64_t v20 = 12;
    }
    else {
      uint64_t v20 = 10;
    }
    ++*(_DWORD *)(a1 + 564);
    int v21 = *(uint64_t **)(a1 + 8);
    id v22 = 17;
    goto LABEL_82;
  }

  if ((v5 & 4) != 0)
  {
    if (!iAP2LinkProcessInOrderPacketCMD(a1, a2)) {
      goto LABEL_42;
    }
    return 1LL;
  }

  if ((v5 & 0x40) != 0)
  {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 213);
    uint64_t v7 = *(unsigned __int16 *)(a2 + 54);
    if (v6 == 2) {
      int v8 = 12;
    }
    else {
      int v8 = 10;
    }
    if (v7 > v8)
    {
      *(_BYTE *)(a1 + 18_Block_object_dispose(va, 8) = *(_BYTE *)(v4 + 5);
      *(_BYTE *)(a1 + 212) |= 1u;
      ++*(_DWORD *)(a1 + 576);
      iAP2FSMHandleEvent(*(uint64_t **)(a1 + 8), 0xFu);
      uint64_t v9 = iAP2PacketCalcSeqGap(*(_BYTE *)(a1 + 191), *(_BYTE *)(a1 + 188));
      id v10 = v9;
      int v11 = *(unsigned __int8 *)(a1 + 420);
      if (!*(_BYTE *)(a1 + 420)) {
        goto LABEL_60;
      }
      uint64_t v12 = 0LL;
      int v13 = (unsigned __int8 *)(a1 + 440);
      uint64_t v14 = (unsigned __int8 *)(a1 + 440);
      do
      {
        id v15 = *v14;
        v14 += 4;
        int v13 = v14;
        --v11;
      }

      while (v11);
      if (v12 && v12[3]) {
        uint64_t v16 = 1;
      }
      else {
LABEL_60:
      }
        uint64_t v16 = 0;
      if (*(unsigned __int8 *)(*(void *)(a1 + 8) + 10LL) >= 5u)
      {
        id v43 = v9 ? 0 : v16;
        if (((char)v9 > 0 || v43) && !iAP2LinkIsNoRetransmit(a1 + 410))
        {
          else {
            CFIndex v44 = v16;
          }
          if ((v44 & 1) == 0)
          {
            ACKPacket = (uint64_t *)iAP2PacketCreateACKPacket(a1, *(_BYTE *)(a1 + 190), *(_BYTE *)(a1 + 188), 0LL, 0, 0);
            ++*(_DWORD *)(a1 + 588);
            _iAP2LinkSendPacketCommon(a1, (uint64_t)ACKPacket, 0, 0);
            iAP2PacketRelease(ACKPacket);
          }
        }
      }

      goto LABEL_89;
    }

    id v39 = v6 == 2 ? 10 : 9;
    if (v7 == v39)
    {
      ++*(_DWORD *)(a1 + 572);
      __int16 v48 = *(_WORD *)(a1 + 408);
      int v40 = *(_OWORD *)(a1 + 392);
      *(_OWORD *)&v46[16] = *(_OWORD *)(a1 + 376);
      CFIndex v47 = v40;
      *(_OWORD *)id v46 = *(_OWORD *)(a1 + 360);
      v46[1] = v46[11];
      *(_WORD *)&v46[4] = *(_WORD *)&v46[12];
      CFIndex v41 = *(void *)(a1 + 8);
      if (*(unsigned __int8 *)(v41 + 10) <= 4u)
      {
        if (!iAP2LinkIsValidSynParam( v46,  *(unsigned __int8 *)(a1 + 215),  *(void *)(a1 + 352) + 14LL,  *(void *)(a1 + 352) + 19LL)
          || *(unsigned __int16 *)&v46[4] > *(unsigned __int16 *)(*(void *)(a1 + 352) + 12LL))
        {
          CFIndex v41 = *(void *)(a1 + 8);
          uint64_t v42 = 22;
LABEL_88:
          iAP2FSMHandleEvent((uint64_t *)v41, v42);
LABEL_89:
          iAP2LinkSignalSendBuffCB(a1);
          return 1LL;
        }

        CFIndex v41 = *(void *)(a1 + 8);
      }

      uint64_t v42 = 21;
      goto LABEL_88;
    }
  }

LABEL_116:
  return v78;
}

        *(_BYTE *)(v5 + 18) += *a3;
        goto LABEL_117;
      case 4:
        if (gLogObjects) {
          int v13 = gNumLogObjects < 16;
        }
        else {
          int v13 = 1;
        }
        if (v13)
        {
          int v31 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        else
        {
          int v31 = *(os_log_s **)(gLogObjects + 120);
        }

        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP1_run_cold_13();
        }
        if (*a3 == 4) {
          uint64_t v9 = 5;
        }
        else {
          uint64_t v9 = 6;
        }
        *(void *)(v5 + _Block_object_dispose(va, 8) = a3;
        *(_BYTE *)(v5 + 18) += *a3;
        *(_BYTE *)(v5 + 4) = *a3;
        goto LABEL_132;
      case 5:
        if (gLogObjects) {
          uint64_t v14 = gNumLogObjects < 16;
        }
        else {
          uint64_t v14 = 1;
        }
        if (v14)
        {
          int v32 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        else
        {
          int v32 = *(os_log_s **)(gLogObjects + 120);
        }

        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP1_run_cold_15();
        }
        *(_BYTE *)(v5 + 18) += *a3;
        uint64_t v9 = 6;
        goto LABEL_132;
      case 6:
        if (gLogObjects) {
          id v15 = gNumLogObjects < 16;
        }
        else {
          id v15 = 1;
        }
        if (v15)
        {
          uint64_t v33 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        else
        {
          uint64_t v33 = *(os_log_s **)(gLogObjects + 120);
        }

        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP1_run_cold_17();
        }
        else {
          uint64_t v9 = 8;
        }
        *(_BYTE *)(v5 + 18) += *a3;
        *(_BYTE *)(v5 + 5) = *a3;
        goto LABEL_132;
      case 7:
        if (gLogObjects) {
          uint64_t v16 = gNumLogObjects < 16;
        }
        else {
          uint64_t v16 = 1;
        }
        if (v16)
        {
          int v34 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        else
        {
          int v34 = *(os_log_s **)(gLogObjects + 120);
        }

        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP1_run_cold_19();
        }
        else {
          uint64_t v9 = 7;
        }
        *(_BYTE *)(v5 + 18) += *a3;
        goto LABEL_132;
      case 8:
        if (gLogObjects) {
          uint64_t v17 = gNumLogObjects < 16;
        }
        else {
          uint64_t v17 = 1;
        }
        if (v17)
        {
          uint64_t v35 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        else
        {
          uint64_t v35 = *(os_log_s **)(gLogObjects + 120);
        }

        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP1_run_cold_22();
        }
        if (*(unsigned __int8 *)(v5 + 18) == -*a3)
        {
          if (gLogObjects && gNumLogObjects >= 16)
          {
            CFIndex v36 = *(os_log_s **)(gLogObjects + 120);
          }

          else
          {
            CFIndex v36 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "iAP1 checksum validated!", buf, 2u);
          }

          if (*(_BYTE *)(v5 + 4) || *(unsigned __int8 *)(v5 + 5) != 238)
          {
            if (acc_policies_allowACCAuthProtocolOnAllTransport()
              && !*(_BYTE *)(v5 + 4)
              && *(unsigned __int8 *)(v5 + 5) == 170)
            {
              *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = 10;
              CFIndex v41 = (os_log_s *)logObjectForModule_10();
              if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)CFIndex v44 = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_INFO,  "AccAuth detected! (detect packet)",  v44,  2u);
              }

              uint64_t v9 = 11;
            }

            else
            {
              *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = *(_DWORD *)a2;
              uint64_t v42 = (os_log_s *)logObjectForModule_10();
              if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)id v43 = 0;
                _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "iAP1 detected!", v43, 2u);
              }

              uint64_t v9 = 9;
            }
          }

          else
          {
            *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = 4;
            int v40 = (os_log_s *)logObjectForModule_10();
            if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)uint64_t v45 = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_INFO,  "iAP2 detected! (detect packet)",  v45,  2u);
            }

            uint64_t v9 = 10;
          }
        }

        else
        {
          uint64_t v9 = 12;
LABEL_117:
          if (v6 != 12 && v9 == 12)
          {
            ++*(_BYTE *)(a1 + 24);
            if (gLogObjects) {
              CFIndex v38 = gNumLogObjects < 16;
            }
            else {
              CFIndex v38 = 1;
            }
            if (v38)
            {
              id v39 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            else
            {
              id v39 = *(os_log_s **)(gLogObjects + 120);
            }

            if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG)) {
              acc_protocolParser_iAP1_run_cold_1();
            }
            uint64_t v9 = 12;
          }
        }

id logObjectForModule_9()
{
  if (gLogObjects && gNumLogObjects >= 56)
  {
    id v0 = *(id *)(gLogObjects + 440);
  }

  else
  {
    BOOL v1 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v1) {
      logObjectForModule_cold_1(v1, v2, v3, v4, v5, v6, v7, v8);
    }
    id v0 = &_os_log_default;
    id v9 = &_os_log_default;
  }

  return v0;
}

uint64_t _convertNVMEraseResponse(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1)
  {
    id v12 = logObjectForModule_9();
    int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      _convertNVMEraseResponse_cold_2(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    goto LABEL_27;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v21 = logObjectForModule_9();
    int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      _convertNVMEraseResponse_cold_3(v13, v22, v23, v24, v25, v26, v27, v28);
    }
LABEL_27:

    uint64_t v7 = a2;
    goto LABEL_11;
  }

  BOOL v6 = *(_BYTE *)(a1 + 144) != 3 && a3 == 0;
  uint64_t v7 = a2;
  if (!v6)
  {
    if ((_DWORD)a2 == 2)
    {
      uint64_t v7 = 1LL;
    }

    else
    {
      uint64_t v7 = a2;
      if ((_DWORD)a2 == 1) {
        uint64_t v7 = 0LL;
      }
    }
  }

uint64_t mfi4Auth_protocol_handle_NVMReadResponse(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v173 = 1;
  char v172 = 0;
  *(void *)&__int128 __dst = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&__dst + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v174[6] = v3;
  v174[7] = v3;
  v174[4] = v3;
  v174[5] = v3;
  v174[2] = v3;
  v174[3] = v3;
  v174[0] = v3;
  v174[1] = v3;
  if (!a1)
  {
    id v132 = logObjectForModule_9();
    v133 = (os_log_s *)objc_claimAutoreleasedReturnValue(v132);
    if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMReadResponse_cold_1(v133, v134, v135, v136, v137, v138, v139, v140);
    }
    goto LABEL_288;
  }

  uint64_t v4 = a1;
  if (*(_BYTE *)(a1 + 30))
  {
    id v141 = logObjectForModule_9();
    v133 = (os_log_s *)objc_claimAutoreleasedReturnValue(v141);
    if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMReadResponse_cold_13(v133, v142, v143, v144, v145, v146, v147, v148);
    }
    goto LABEL_288;
  }

  uint64_t v5 = a2;
  if (!a2)
  {
    id v149 = logObjectForModule_9();
    v133 = (os_log_s *)objc_claimAutoreleasedReturnValue(v149);
    if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMReadResponse_cold_2(v133, v150, v151, v152, v153, v154, v155, v156);
    }
LABEL_288:

    v119 = 0LL;
    goto LABEL_268;
  }

  uint64_t v159 = *(void *)(a1 + 712);
  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0LL);
  int v167 = 0;
  char v168 = 0;
  char v169 = 0;
  char v165 = 0;
  char v166 = 0;
  char v161 = 0;
  v160 = 0LL;
  unint64_t v7 = 0LL;
  int v8 = 0;
  uint64_t v162 = v4;
  while (2)
  {
    if (!FirstParam)
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        id v58 = (os_log_s *)*(id *)(gLogObjects + 440);
        char v59 = v166;
        unsigned __int8 v60 = v167;
        char v62 = v168;
        char v61 = v169;
      }

      else
      {
        char v59 = v166;
        unsigned __int8 v60 = v167;
        char v62 = v168;
        char v61 = v169;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v58 = (os_log_s *)&_os_log_default;
        id v63 = &_os_log_default;
      }

      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_handle_NVMReadResponse: paramMask:0x%x",  buf,  8u);
      }

      if ((v62 & 1) != 0)
      {
        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v64 = (os_log_s *)*(id *)(gLogObjects + 440);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v64 = (os_log_s *)&_os_log_default;
          id v65 = &_os_log_default;
        }

        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "_handleNvmReadAccessoryInfo: Vendor",  buf,  2u);
        }

        _handleNvmReadAccessoryInfo(v4, 1);
      }

      if ((v61 & 1) != 0)
      {
        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v66 = (os_log_s *)*(id *)(gLogObjects + 440);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v66 = (os_log_s *)&_os_log_default;
          id v67 = &_os_log_default;
        }

        if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "_handleNvmReadAccessoryInfo: User",  buf,  2u);
        }

        _handleNvmReadAccessoryInfo(v4, 0);
      }

      if (v60 && *(_BYTE *)(v4 + 144) == 2)
      {
        if (gLogObjects && gNumLogObjects >= 56)
        {
          id v68 = (os_log_s *)*(id *)(gLogObjects + 440);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          id v68 = (os_log_s *)&_os_log_default;
          id v69 = &_os_log_default;
        }

        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "_handleNvmReadUserPublicKey", buf, 2u);
        }

        _handleNvmReadUserPublicKey(v4, v8 & 1 | v60);
      }

      if ((v59 & 1) != 0)
      {
        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v70 = (os_log_s *)*(id *)(gLogObjects + 440);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v70 = (os_log_s *)&_os_log_default;
          id v71 = &_os_log_default;
        }

        if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_DEFAULT,  "_handleNvmReadManufacturerPublicKey",  buf,  2u);
        }
      }

      if (((v8 >> _convertNVMReadResponse(v4, 1LL, 0)) & 1) != 0)
      {
        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v72 = (os_log_s *)*(id *)(gLogObjects + 440);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v72 = (os_log_s *)&_os_log_default;
          id v74 = &_os_log_default;
        }

        if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_handle_NVMReadResponse: KeyRead",  buf,  2u);
        }

        CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, *(CFStringRef *)v4);
        CFStringRef v76 = Copy;
        if (Copy)
        {
          EndpointWithUUID = (uint64_t *)acc_manager_getEndpointWithUUID(Copy);
          if (EndpointWithUUID)
          {
            unsigned int v78 = (pthread_mutex_t *)EndpointWithUUID;
            uint64_t v79 = *EndpointWithUUID;
            if (v79)
            {
              int PairingStatus = acc_connection_getPairingStatus(v79);
              uint64_t v81 = acc_endpoint_copyProperty(v78, kCFACCProperties_Endpoint_NFC_TagId);
              if (v81)
              {
                __int16 v82 = (const __CFData *)v81;
                int v83 = CFDataGetLength((CFDataRef)v81) ? *CFDataGetBytePtr(v82) : 0;
                CFRelease(v82);
                if (!PairingStatus && (v83 - 87) <= 1)
                {
                  __int16 v109 = (unsigned __int16 *)malloc(1uLL);
                  if (v109)
                  {
                    uint64_t v110 = v109;
                    *__int16 v109 = 21248;
                    unsigned int inited = mfi4Auth_protocol_initMessage_RequestUserNVMRead(v4, a3, v109, 1, 0LL, 0LL);
                    unsigned int v173 = inited;
                    free(v110);
                    if (inited) {
                      goto LABEL_267;
                    }
                    goto LABEL_265;
                  }

LABEL_269:
                  unsigned int v173 = -1;
                  goto LABEL_267;
                }
              }
            }
          }
        }

        if ((v165 & 1) != 0 && *(_DWORD *)(v4 + 32) == 7 && *(void *)(v4 + 64))
        {
          _replyGetNVMKey(v4);
          *(void *)(v4 + 64) = 0LL;
          *(_DWORD *)(v4 + 32) = 0;
        }

        if ((v161 & 1) != 0 && *(_DWORD *)(v4 + 32) == 7 && *(void *)(v4 + 64))
        {
          _replyGetNVMKey(v4);
          *(void *)(v4 + 64) = 0LL;
          *(_DWORD *)(v4 + 32) = 0;
        }

        if (*(void *)(v159 + 88))
        {
          if (*(_DWORD *)(v4 + 32) == 9)
          {
            v112 = *(void **)(v4 + 64);
            if (v112)
            {
              id v113 = objc_retainBlock(v112);
              if (gLogObjects && gNumLogObjects >= 56)
              {
                v114 = (os_log_s *)*(id *)(gLogObjects + 440);
              }

              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
                v114 = (os_log_s *)&_os_log_default;
                id v115 = &_os_log_default;
              }

              if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v116 = *(void *)(v159 + 88);
                *(_DWORD *)buf = 138412290;
                *(void *)&uint8_t buf[4] = v116;
                _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_DEFAULT, "NVMReadResponse: %@", buf, 0xCu);
              }

              CFRetain(*(CFTypeRef *)(v159 + 88));
              (*((void (**)(id, void, void))v113 + 2))(v113, *(void *)(v159 + 88), 0LL);
              *(void *)(v4 + 64) = 0LL;
              *(_DWORD *)(v4 + 32) = 0;
            }
          }
        }

        if (*(_DWORD *)(v4 + 32) == 5)
        {
          if (gLogObjects && gNumLogObjects >= 56)
          {
            v117 = (os_log_s *)*(id *)(gLogObjects + 440);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            v117 = (os_log_s *)&_os_log_default;
            id v118 = &_os_log_default;
          }

          if (os_log_type_enabled(v117, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v117,  OS_LOG_TYPE_DEFAULT,  "NVMReadResponse: RequestNVMAuthStart",  buf,  2u);
          }

          unsigned int v173 = mfi4Auth_protocol_initMessage_RequestNVMAuthStart(v4, a3, 0x5300u);
        }
      }

      else
      {
        if (*(_BYTE *)(v4 + 144) == 2 && v8 == 5)
        {
          if (gLogObjects && gNumLogObjects >= 56)
          {
            uint64_t v73 = (os_log_s *)*(id *)(gLogObjects + 440);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            uint64_t v73 = (os_log_s *)&_os_log_default;
            id v85 = &_os_log_default;
          }

          if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_handle_NVMReadResponse: Nonce",  buf,  2u);
          }

          memset(buf, 170, 16);
          arc4random_buf(buf, 0x10uLL);
          uint64_t v86 = *(void *)(v159 + 80);
          if (!v86)
          {
            unsigned int v173 = -1;
            id v157 = logObjectForModule_9();
            v123 = (os_log_s *)objc_claimAutoreleasedReturnValue(v157);
            if (!os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_275;
            }
            valuePtr[0] = 0;
            v125 = "mfi4Auth_protocol_handle_NVMReadResponse: !serialNumberString";
            v126 = (uint8_t *)valuePtr;
            goto LABEL_273;
          }

          UserPublicKeyForSerialNumber = (__SecKey *)_copyOrCreateUserPublicKeyForSerialNumber(v86);
          if (!UserPublicKeyForSerialNumber) {
            goto LABEL_269;
          }
          int v88 = _generateUserSignature(UserPublicKeyForSerialNumber, &__dst, (__int128 *)buf);
          if (!v88) {
            goto LABEL_269;
          }
          BytePtr = CFDataGetBytePtr(v88);
          mfi4Auth_protocol_initMessage_RequestUserNVMRead( v4,  a3,  (unsigned __int16 *)v174,  v7,  (uint64_t)BytePtr,  (uint64_t)buf);
LABEL_266:
          unsigned int v173 = 0;
          goto LABEL_267;
        }

        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v84 = (os_log_s *)*(id *)(gLogObjects + 440);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v84 = (os_log_s *)&_os_log_default;
          id v90 = &_os_log_default;
        }

        if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_handle_NVMReadResponse: KeyNotRead",  buf,  2u);
        }

        if (*(_DWORD *)(v4 + 32) == 7 && *(void *)(v4 + 64))
        {
          _replyGetNVMKey(v4);
          *(void *)(v4 + 64) = 0LL;
          *(_DWORD *)(v4 + 32) = 0;
        }

        if (v7)
        {
          unint64_t v91 = v7;
          uint64_t v92 = (unsigned __int16 *)v174;
          do
          {
            int v93 = *v92++;
            if (v93 == 21248)
            {
              uint64_t v94 = gLogObjects;
              int v95 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 56)
              {
                uint64_t v96 = (os_log_s *)*(id *)(gLogObjects + 440);
              }

              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  *(void *)&uint8_t buf[4] = v94;
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&_BYTE buf[14] = v95;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                }

                id v97 = &_os_log_default;
                uint64_t v96 = (os_log_s *)&_os_log_default;
              }

              if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v96,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_handle_NVMReadResponse: UserPublicKey_NotProgrammed",  buf,  2u);
              }

              *(_DWORD *)(v159 + _Block_object_dispose(va, 8) = 1;
            }

            --v91;
          }

          while (v91);
        }

        CFStringRef v98 = CFStringCreateCopy(kCFAllocatorDefault, *(CFStringRef *)v162);
        CFStringRef v76 = v98;
        if (!v98
          || (uint64_t v99 = (uint64_t *)acc_manager_getEndpointWithUUID(v98)) == 0LL
          || (uint64_t v100 = *v99) == 0
          || !acc_connection_getPairingStatus(v100))
        {
          uint64_t v101 = (unsigned __int16 *)malloc(1uLL);
          if (!v101) {
            goto LABEL_269;
          }
          __int16 v102 = v101;
          *uint64_t v101 = 21248;
          unsigned int v103 = mfi4Auth_protocol_initMessage_RequestUserNVMRead(v162, a3, v101, 1, 0LL, 0LL);
          unsigned int v173 = v103;
          free(v102);
          if (v103) {
            goto LABEL_267;
          }
        }

        if (*(_DWORD *)(v162 + 32) == 9)
        {
          uint64_t v104 = *(void **)(v162 + 64);
          if (v104)
          {
            __int16 v105 = objc_retainBlock(v104);
            id v106 = logObjectForModule_9();
            __int16 v107 = (os_log_s *)objc_claimAutoreleasedReturnValue(v106);
            if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v107,  OS_LOG_TYPE_DEFAULT,  "NVMReadResponse: !userNameString",  buf,  2u);
            }

            id v108 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSCocoaErrorDomain,  -1LL,  0LL));
            v105[2](v105, 0LL, v108);
            *(void *)(v162 + 64) = 0LL;
            *(_DWORD *)(v162 + 32) = 0;
          }
        }
      }

      if (v76)
      {
LABEL_265:
        CFRelease(v76);
        goto LABEL_266;
      }

      goto LABEL_266;
    }

    unsigned int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
    uint64_t v9 = gLogObjects;
    int v10 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v11 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      int v11 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = v9;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = v10;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
      }

      id v12 = &_os_log_default;
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = ParamID;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_handle_NVMReadResponse: paramID: %d",  buf,  8u);
    }

    int v13 = ParamID;
    if (*(_BYTE *)(v4 + 144) != 3) {
      int v13 = _convertNVMReadResponse(v4, ParamID, 1);
    }
    switch(v13)
    {
      case 0:
        int v163 = v8;
        unint64_t v164 = v7;
        valuePtr[0] = -21846;
        NextParamWithError = (unsigned __int16 *)iAP2MsgGetFirstParam(v5, FirstParam);
        uint64_t v15 = 0LL;
        unsigned int ParamValueLen = 0;
        int v17 = 0;
        do
        {
          if (!NextParamWithError)
          {
            if (v17 == 3)
            {
              CFNumberRef v35 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, valuePtr);
              int v36 = CFDataCreate(kCFAllocatorDefault, v15, ParamValueLen);
              __int16 v37 = _dumpSimpleHex(v36);

              uint64_t v38 = gLogObjects;
              int v39 = gNumLogObjects;
              int v8 = v163;
              if (gLogObjects && gNumLogObjects >= 56)
              {
                int v40 = (os_log_s *)*(id *)(gLogObjects + 440);
              }

              else
              {
                int v40 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  *(void *)&uint8_t buf[4] = v38;
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&_BYTE buf[14] = v39;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                }

                id v53 = &_os_log_default;
              }

              if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                *(void *)&uint8_t buf[4] = v37;
                _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "handleNVMReadResponse: keyValue:%@",  buf,  0xCu);
              }

              CFDictionaryAddValue(*(CFMutableDictionaryRef *)(*(void *)(v162 + 712) + 48LL), v35, v36);
              uint64_t v54 = gLogObjects;
              int v55 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 56)
              {
                id v56 = (os_log_s *)*(id *)(gLogObjects + 440);
              }

              else
              {
                id v56 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  *(void *)&uint8_t buf[4] = v54;
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&_BYTE buf[14] = v55;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                }

                id v57 = &_os_log_default;
              }

              uint64_t v4 = v162;
              if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEFAULT,  "handleNVMReadResponse: CFDictionaryAddValue",  buf,  2u);
              }

              if (v36) {
                CFRelease(v36);
              }
              v160 = v37;
            }

            else
            {
              uint64_t v4 = v162;
              int v8 = v163;
            }

            unint64_t v7 = v164;
            if (v15) {
              free(v15);
            }
            int v49 = 1 << ParamID;
            goto LABEL_111;
          }

          uint64_t v18 = v5;
          int v19 = iAP2MsgGetParamID((uint64_t)NextParamWithError);
          uint64_t v20 = gLogObjects;
          int v21 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 56)
          {
            uint64_t v22 = (os_log_s *)*(id *)(gLogObjects + 440);
          }

          else
          {
            uint64_t v22 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)&uint8_t buf[4] = v20;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = v21;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            }

            id v23 = &_os_log_default;
          }

          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = ParamID;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v19;
            _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_handle_NVMReadResponse: paramID: %d, subparam: %d",  buf,  0xEu);
          }

          if (v19 == 1)
          {
            unsigned int ParamValueLen = iAP2MsgGetParamValueLen(NextParamWithError);
            uint64_t v15 = (UInt8 *)calloc(1uLL, ParamValueLen);
            int DataAsArrayU8 = iAP2MsgGetDataAsArrayU8(NextParamWithError, &v173, v15, ParamValueLen);
            if (v173) {
              goto LABEL_267;
            }
            if (DataAsArrayU8 != ParamValueLen) {
              goto LABEL_269;
            }
            uint64_t v5 = v18;
            v17 |= 2u;
          }

          else
          {
            uint64_t v5 = v18;
            if (!v19)
            {
              valuePtr[0] = iAP2MsgGetDataAsU16(NextParamWithError, &v173);
              if (v173) {
                goto LABEL_267;
              }
              uint64_t v24 = gLogObjects;
              int v25 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 56)
              {
                uint64_t v26 = (os_log_s *)*(id *)(gLogObjects + 440);
              }

              else
              {
                uint64_t v26 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  *(void *)&uint8_t buf[4] = v24;
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&_BYTE buf[14] = v25;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                }

                id v28 = &_os_log_default;
              }

              if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = valuePtr[0];
                _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "handleNVMReadResponse: key: 0x%x",  buf,  8u);
              }

              if (valuePtr[0] == 21248)
              {
                v167 |= 1 << ParamID;
              }

              else if (valuePtr[0] - 21249 >= 0x4F)
              {
                else {
                  char v161 = 1;
                }
              }

              else
              {
                char v165 = 1;
              }

              v168 |= valuePtr[0] - 20994 < 9;
              v169 |= valuePtr[0] - 21250 < 9;
              v17 |= 1u;
            }
          }

          NextParamWithError = iAP2MsgGetNextParamWithError(v5, FirstParam, NextParamWithError, &v172);
        }

        while (!v172);
        goto LABEL_267;
      case 1:
        if (v7 >= 0x40)
        {
          uint64_t v29 = gLogObjects;
          int v30 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 56)
          {
            __int16 v31 = (os_log_s *)*(id *)(gLogObjects + 440);
          }

          else
          {
            __int16 v31 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)&uint8_t buf[4] = v29;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = v30;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            }

            id v50 = &_os_log_default;
          }

          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = 64;
            _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "handleNVMReadResponse: reached limit of %d keyNotRead parameters",  buf,  8u);
          }

          goto LABEL_112;
        }

        int v41 = v8;
        int DataAsU16 = iAP2MsgGetDataAsU16(FirstParam, &v173);
        *((_WORD *)v174 + v7) = DataAsU16;
        uint64_t v43 = gLogObjects;
        int v44 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v45 = (os_log_s *)*(id *)(gLogObjects + 440);
        }

        else
        {
          uint64_t v45 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)&uint8_t buf[4] = v43;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&_BYTE buf[14] = v44;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          }

          id v51 = &_os_log_default;
        }

        int v8 = v41;
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = DataAsU16;
          _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "handleNVMReadResponse: KeyNotRead:0x%x",  buf,  8u);
        }

        if (!v173)
        {
          int v49 = 1 << ParamID;
          if (DataAsU16 == 21248) {
            int v52 = 1 << ParamID;
          }
          else {
            int v52 = 0;
          }
          v167 |= v52;
          ++v7;
          goto LABEL_111;
        }

        id v131 = logObjectForModule_9();
        v123 = (os_log_s *)objc_claimAutoreleasedReturnValue(v131);
        if (!os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_275;
        }
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v173;
        v125 = "errorNo:%d";
        v126 = buf;
        v127 = v123;
        uint32_t v128 = 8;
        goto LABEL_274;
      case 2:
      case 3:
        iAP2MsgGetDataAsU16(FirstParam, &v173);
        if (v173) {
          goto LABEL_267;
        }
        goto LABEL_74;
      case 7:
        uint64_t v32 = gLogObjects;
        int v33 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 56)
        {
          int v34 = (os_log_s *)*(id *)(gLogObjects + 440);
        }

        else
        {
          int v34 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)&uint8_t buf[4] = v32;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&_BYTE buf[14] = v33;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          }

          id v46 = &_os_log_default;
        }

        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          int v47 = iAP2MsgGetParamValueLen(FirstParam);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v47;
          _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "handleNVMReadResponse: AuthNonce length: %d",  buf,  8u);
        }

        unsigned int v173 = 0;
        int v48 = iAP2MsgGetDataAsArrayU8(FirstParam, &v173, &__dst, 16);
        if (v173)
        {
          id v129 = logObjectForModule_9();
          v123 = (os_log_s *)objc_claimAutoreleasedReturnValue(v129);
          if (!os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_275;
          }
          *(_WORD *)buf = 0;
          v125 = "handleNVMReadResponse: AuthNonce: errorNo";
LABEL_272:
          v126 = buf;
LABEL_273:
          v127 = v123;
          uint32_t v128 = 2;
LABEL_274:
          _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_DEFAULT, v125, v126, v128);
          goto LABEL_275;
        }

        if (v48 != 16)
        {
          id v130 = logObjectForModule_9();
          v123 = (os_log_s *)objc_claimAutoreleasedReturnValue(v130);
          if (!os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_275;
          }
          *(_WORD *)buf = 0;
          v125 = "handleNVMReadResponse: AuthNonce: count";
          goto LABEL_272;
        }

LABEL_74:
        int v49 = 1 << ParamID;
LABEL_111:
        v8 |= v49;
LABEL_112:
        unint64_t FirstParam = iAP2MsgGetNextParamWithError(v5, 0LL, FirstParam, &v172);
        if (!v172) {
          continue;
        }
        id v122 = logObjectForModule_9();
        v123 = (os_log_s *)objc_claimAutoreleasedReturnValue(v122);
        if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          v125 = "handleNVMReadResponse: iAP2MsgGetNextParamWithError: error";
          goto LABEL_272;
        }

          if (++v37 == 28)
          {
            uint64_t v2 = v118;
            uint64_t v5 = &startLogsNotificationObservers;
            uint64_t v15 = v116;
            if (v38)
            {
              LODWORD(v113) = v113 + 1;
              HIDWORD(v113) += v38;
              goto LABEL_86;
            }

  pthread_mutex_unlock(&__giAP2ExternalAccessoryLock);
  return v9;
}

  uint64_t v4 = 0LL;
LABEL_75:
  if ((*(_BYTE *)v8 & 1) != 0)
  {
    if (gLogObjects && gNumLogObjects >= 20)
    {
      __int16 v31 = *(os_log_s **)(gLogObjects + 152);
    }

    else
    {
      __int16 v31 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "ERROR: Invalid SYN Params detected:",  buf,  2u);
    }
  }

  if ((*(_BYTE *)v8 & 1) != 0)
  {
    if (gLogObjects && gNumLogObjects >= 20)
    {
      uint64_t v32 = *(os_log_s **)(gLogObjects + 152);
    }

    else
    {
      uint64_t v32 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      int v33 = *v5;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "ERROR:     version=%d", buf, 8u);
    }
  }

  if ((*(_BYTE *)v8 & 1) != 0)
  {
    if (gLogObjects && gNumLogObjects >= 20)
    {
      int v34 = *(os_log_s **)(gLogObjects + 152);
    }

    else
    {
      int v34 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      CFNumberRef v35 = v5[1];
      int v36 = *((unsigned __int16 *)v5 + 2);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v35;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v36;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "ERROR:     maxOutstanding=%d maxPacketSize=%d",  buf,  0xEu);
    }
  }

  if ((*(_BYTE *)v8 & 1) != 0)
  {
    if (gLogObjects && gNumLogObjects >= 20)
    {
      __int16 v37 = *(os_log_s **)(gLogObjects + 152);
    }

    else
    {
      __int16 v37 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v38 = *((unsigned __int16 *)v5 + 3);
      int v39 = *((unsigned __int16 *)v5 + 4);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v38;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v39;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "ERROR:     retransmitTimeout=%d cumAckTimeout=%d",  buf,  0xEu);
    }
  }

  if ((*(_BYTE *)v8 & 1) != 0)
  {
    if (gLogObjects && gNumLogObjects >= 20)
    {
      int v40 = *(os_log_s **)(gLogObjects + 152);
    }

    else
    {
      int v40 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      int v41 = v5[2];
      uint64_t v42 = v5[3];
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v41;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v42;
      _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "ERROR:     maxRetransmissions=%d maxCumAck=%d",  buf,  0xEu);
    }
  }

  if ((*(_BYTE *)v8 & 1) != 0)
  {
    if (gLogObjects && gNumLogObjects >= 20)
    {
      uint64_t v43 = *(os_log_s **)(gLogObjects + 152);
    }

    else
    {
      uint64_t v43 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      int v44 = v5[10];
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v44;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "ERROR:     numSessionInfo=%u", buf, 8u);
    }
  }

  if (v5[10])
  {
    unsigned __int8 v60 = v4;
    uint64_t v45 = 0LL;
    id v46 = v5 + 33;
    do
    {
      if ((*(_BYTE *)v8 & 1) != 0)
      {
        int v47 = v5;
        int v48 = v8;
        int v49 = gLogObjects;
        id v50 = gNumLogObjects;
        if (gLogObjects) {
          id v51 = gNumLogObjects < 20;
        }
        else {
          id v51 = 1;
        }
        if (v51)
        {
          int v52 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)&uint8_t buf[4] = v49;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&_BYTE buf[14] = v50;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            int v52 = (os_log_s *)&_os_log_default;
          }
        }

        else
        {
          int v52 = *(os_log_s **)(gLogObjects + 152);
        }

        int v8 = v48;
        uint64_t v5 = v47;
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
        {
          id v53 = *(v46 - 2);
          uint64_t v54 = a4;
          if (a4) {
            uint64_t v54 = *(unsigned __int8 *)(a4 + v53);
          }
          int v55 = a3;
          if (a3) {
            int v55 = *(unsigned __int8 *)(a3 + *(v46 - 2));
          }
          id v56 = *(v46 - 3);
          id v57 = *(v46 - 1);
          id v58 = *v46;
          *(_DWORD *)buf = 67110656;
          *(_DWORD *)&uint8_t buf[4] = v45;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v56;
          *(_WORD *)&_BYTE buf[14] = 1024;
          *(_DWORD *)&uint8_t buf[16] = v53;
          *(_WORD *)&buf[20] = 1024;
          *(_DWORD *)&buf[22] = v57;
          *(_WORD *)&buf[26] = 1024;
          *(_DWORD *)&buf[28] = v58;
          LOWORD(v64) = 1024;
          *(_DWORD *)((char *)&v64 + 2) = v54;
          WORD3(v64) = 1024;
          DWORD2(v64) = v55;
          _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "ERROR:     session %u [id=%u type=%u ver=%u unrel=%d (min=%u max=%u)]",  buf,  0x2Cu);
        }
      }

      ++v45;
      v46 += 4;
    }

    while (v45 < v5[10]);
    return v60;
  }

  return v4;
}

LABEL_275:
LABEL_267:
        v119 = v160;
LABEL_268:
        uint64_t v120 = v173;

        return v120;
      default:
        goto LABEL_112;
    }
  }

uint64_t _convertNVMReadResponse(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1)
  {
    id v20 = logObjectForModule_9();
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      _convertNVMReadResponse_cold_2(v8, v21, v22, v23, v24, v25, v26, v27);
    }
    goto LABEL_17;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v28 = logObjectForModule_9();
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      _convertNVMReadResponse_cold_5(v8, v29, v30, v31, v32, v33, v34, v35);
    }
    goto LABEL_17;
  }

  BOOL v6 = *(_BYTE *)(a1 + 144) != 3 && a3 == 0;
  uint64_t v7 = a2;
  if (!v6)
  {
    if (a2 < 8)
    {
      uint64_t v7 = word_10019E070[(__int16)a2];
      goto LABEL_18;
    }

    if (gLogObjects && gNumLogObjects >= 56)
    {
      int v8 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v8 = (os_log_s *)&_os_log_default;
      id v9 = &_os_log_default;
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      _convertNVMReadResponse_cold_3(a2, v8, v10, v11, v12, v13, v14, v15);
    }
LABEL_17:

    uint64_t v7 = a2;
  }

void _handleNvmReadAccessoryInfo(uint64_t a1, int a2)
{
  uint64_t v4 = &startLogsNotificationObservers;
  uint64_t v5 = &startLogsNotificationObservers;
  if (gLogObjects && gNumLogObjects >= 56)
  {
    BOOL v6 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v6 = (os_log_s *)&_os_log_default;
    id v7 = &_os_log_default;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "_handleNvmReadAccessoryInfo", buf, 2u);
  }

  unint64_t v174 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v172 = v8;
  __int128 v173 = v8;
  *(_OWORD *)buf = v8;
  __int128 v171 = v8;
  if (!a1)
  {
    id v132 = logObjectForModule_9();
    v133 = (os_log_s *)objc_claimAutoreleasedReturnValue(v132);
    if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR)) {
      _handleNvmReadAccessoryInfo_cold_1(v133, v134, v135, v136, v137, v138, v139, v140);
    }
    goto LABEL_259;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v141 = logObjectForModule_9();
    v133 = (os_log_s *)objc_claimAutoreleasedReturnValue(v141);
    if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR)) {
      _handleNvmReadAccessoryInfo_cold_15(v133, v142, v143, v144, v145, v146, v147, v148);
    }
LABEL_259:

    uint64_t v27 = 0LL;
    id v28 = 0LL;
    char v161 = 0LL;
    CFDataRef cf = 0LL;
    v158 = 0LL;
    uint64_t v159 = 0LL;
    int v163 = 0LL;

    goto LABEL_248;
  }

  MutableCFStringRef Copy = 0LL;
  int v10 = 0;
  __int128 v190 = 0u;
  __int128 v191 = 0u;
  __int128 v188 = 0u;
  __int128 v189 = 0u;
  __int128 v186 = 0u;
  __int128 v187 = 0u;
  __int128 v184 = 0u;
  __int128 v185 = 0u;
  __int128 v182 = 0u;
  __int128 v183 = 0u;
  __int128 v181 = 0u;
  uint64_t v11 = *(void *)(a1 + 712);
  int v156 = a2;
  if (a2) {
    __int16 v12 = 20994;
  }
  else {
    __int16 v12 = 21250;
  }
  uint64_t v13 = kCFAllocatorDefault;
  do
  {
    *(_WORD *)float valuePtr = v12 + v10;
    CFNumberRef v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, valuePtr);
    uint64_t Value = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(v11 + 48), v14);
    if (!Value) {
      break;
    }
    uint64_t v16 = Value;
    if (MutableCopy)
    {
      BytePtr = CFDataGetBytePtr(Value);
      CFIndex Length = CFDataGetLength(v16);
      CFDataAppendBytes(MutableCopy, BytePtr, Length);
    }

    else
    {
      MutableCFStringRef Copy = CFDataCreateMutableCopy(kCFAllocatorDefault, 2160LL, Value);
    }

    ++v10;
  }

  while (v10 != 9);
  if (!MutableCopy) {
    goto LABEL_26;
  }
  iAP2MsgInitWithSom((uint64_t)buf, 0, 0, 0LL, 0, 0LL, 0LL);
  int v19 = (unsigned __int16 *)iAP2MsgParserInit(0xFFFF, *(void *)(a1 + 8), 0LL, 0);
  id v20 = CFDataGetBytePtr(MutableCopy);
  CFIndex v21 = CFDataGetLength(MutableCopy);
  if (!v21)
  {
LABEL_25:
    CFRelease(MutableCopy);
LABEL_26:
    uint64_t v27 = 0LL;
    id v28 = 0LL;
    char v161 = 0LL;
    CFDataRef cf = 0LL;
    v158 = 0LL;
    uint64_t v159 = 0LL;
    int v163 = 0LL;
    v160 = 0LL;
    unint64_t v157 = 0LL;
    goto LABEL_27;
  }

  unint64_t v22 = v21;
  uint64_t v23 = 0LL;
  unsigned int v24 = 1;
  while (1)
  {
    uint64_t v25 = iAP2MsgParserConsumeByte(v19, v20[v23], (uint64_t)buf);
    if (v25) {
      break;
    }
    uint64_t v23 = v24;
    if (v22 <= v24++) {
      goto LABEL_25;
    }
  }

  uint64_t v36 = v25;
  CFRelease(MutableCopy);
  if (gLogObjects && gNumLogObjects >= 56)
  {
    __int16 v37 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v37 = (os_log_s *)&_os_log_default;
    id v54 = &_os_log_default;
  }

  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)float valuePtr = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "_handleNvmReadAccessoryInfo: pMessage",  valuePtr,  2u);
  }

  int v169 = 1;
  char v168 = 0;
  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(v36, 0LL);
  uint64_t v152 = 0LL;
  uint64_t v154 = 0LL;
  char v161 = 0LL;
  CFDataRef cf = 0LL;
  v158 = 0LL;
  uint64_t v159 = 0LL;
  int v163 = 0LL;
  v160 = 0LL;
  unint64_t v157 = 0LL;
  *(void *)&__int128 v56 = 134218240LL;
  __int128 v150 = v56;
  uint64_t v151 = a1;
  while (FirstParam)
  {
    unsigned int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
    uint64_t v58 = v4[353];
    int v59 = *((_DWORD *)v5 + 708);
    if (v58 && v59 >= 56)
    {
      unsigned __int8 v60 = (os_log_s *)*(id *)(v58 + 440);
    }

    else
    {
      unsigned __int8 v60 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)float valuePtr = v150;
        *(void *)&valuePtr[4] = v58;
        *(_WORD *)&valuePtr[12] = 1024;
        *(_DWORD *)&valuePtr[14] = v59;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  valuePtr,  0x12u);
      }

      id v61 = &_os_log_default;
    }

    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)float valuePtr = 67109120;
      *(_DWORD *)&valuePtr[4] = ParamID;
      _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "_handleNvmReadAccessoryInfo: paramID: %d",  valuePtr,  8u);
    }

    if (ParamID > 0x25) {
      goto LABEL_138;
    }
    if (((1LL << ParamID) & 0x80000000FLL) == 0)
    {
      if (((1LL << ParamID) & 0x3000000000LL) != 0)
      {
        *(_OWORD *)float valuePtr = xmmword_10019E038;
        *(_OWORD *)&valuePtr[16] = unk_10019E048;
        unint64_t v67 = iAP2MsgGetFirstParam(v36, FirstParam);
        if (v67)
        {
          NextParam = (unsigned __int16 *)v67;
          int v69 = 0;
          do
          {
            unsigned int v70 = iAP2MsgGetParamID((uint64_t)NextParam);
            if (v70 <= 3)
            {
              unsigned int v71 = v70;
              unsigned int DataAsU16 = iAP2MsgGetDataAsU16(NextParam, &v169);
              if (v169 || (unsigned int v73 = DataAsU16, DataAsU16 > 0x3E8))
              {
                a1 = v151;
                uint64_t v5 = &startLogsNotificationObservers;
                goto LABEL_164;
              }

              id v74 = v4;
              uint64_t v75 = v4[353];
              int v76 = gNumLogObjects;
              if (v75 && gNumLogObjects >= 56)
              {
                char v77 = (os_log_s *)*(id *)(v75 + 440);
              }

              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)v192 = v150;
                  *(void *)v193 = v75;
                  *(_WORD *)&v193[8] = 1024;
                  int v194 = v76;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  v192,  0x12u);
                }

                id v78 = &_os_log_default;
                char v77 = (os_log_s *)&_os_log_default;
              }

              uint64_t v4 = v74;
              if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v192 = 67109376;
                *(_DWORD *)v193 = v71;
                *(_WORD *)&v193[4] = 1024;
                *(_DWORD *)&v193[6] = v73;
                _os_log_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_DEFAULT,  "_handleNvmReadAccessoryInfo: subParamID:%d, 0x%x",  v192,  0xEu);
              }

              switch(v71)
              {
                case 0u:
                  *(double *)float valuePtr = (double)v73 / 1000.0;
                  break;
                case 1u:
                  *(double *)&valuePtr[8] = (double)v73 / 1000.0;
                  break;
                case 2u:
                  *(double *)&valuePtr[16] = (double)v73 / 1000.0;
                  break;
                case 3u:
                  *(double *)&valuePtr[24] = (double)v73 / 1000.0;
                  break;
                default:
                  break;
              }

              v69 |= (1 << v71);
              uint64_t v13 = kCFAllocatorDefault;
            }

            NextParam = iAP2MsgGetNextParam(v36, FirstParam, NextParam);
          }

          while (NextParam);
          if ((~v69 & 3) == 0)
          {
            uint64_t v83 = objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", valuePtr, 32LL));
            uint64_t v84 = v163;
            id v85 = v160;
            if (ParamID == 36) {
              uint64_t v86 = v163;
            }
            else {
              uint64_t v86 = v160;
            }
            if (ParamID == 36) {
              uint64_t v84 = (void *)v83;
            }
            int v163 = v84;
            if (ParamID != 36) {
              id v85 = (void *)v83;
            }
            v160 = v85;
          }

          a1 = v151;
          uint64_t v5 = &startLogsNotificationObservers;
        }

        goto LABEL_160;
      }

LABEL_138:
      if (ParamID == 242)
      {
        unint64_t DataAsU64 = iAP2MsgGetDataAsU64(FirstParam, &v169);
        unint64_t v80 = v157;
        if (!v169) {
          unint64_t v80 = DataAsU64;
        }
        unint64_t v157 = v80;
      }

      goto LABEL_160;
    }

    int ParamValueLen = iAP2MsgGetParamValueLen(FirstParam);
    id v63 = calloc(1uLL, (ParamValueLen + 1));
    if (v63)
    {
      uint64_t v64 = v63;
      unsigned __int16 DataAsArrayU8 = iAP2MsgGetDataAsArrayU8(FirstParam, &v169, v63, ParamValueLen);
      if (!v169 && ParamValueLen == DataAsArrayU8)
      {
        uint64_t v13 = kCFAllocatorDefault;
        switch(ParamID)
        {
          case 0u:
            uint64_t v66 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v64));

            uint64_t v154 = (void *)v66;
            break;
          case 1u:
            uint64_t v87 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v64));

            uint64_t v152 = (void *)v87;
            break;
          case 2u:
            uint64_t v88 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v64));

            CFDataRef cf = (void *)v88;
            break;
          case 3u:
            uint64_t v89 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v64));

            char v161 = (void *)v89;
            break;
          default:
            if (ParamID == 35)
            {
              uint64_t v81 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v64));

              __int16 v82 = v159;
              if (!v159) {
                __int16 v82 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( &OBJC_CLASS___NSMutableArray,  "arrayWithCapacity:",  1LL));
              }
              uint64_t v159 = v82;
              objc_msgSend(v82, "addObject:", v81, v150);
              v158 = (void *)v81;
            }

            break;
        }

        free(v64);
        goto LABEL_160;
      }

      free(v64);
    }

      id v45 = 0LL;
LABEL_167:
      v44 |= v51;
      if (++v43 >= (unint64_t)*(unsigned __int8 *)(v2 + 10))
      {
        id v42 = BYTE10(v110);
        if ((v44 & 1) != 0) {
          goto LABEL_186;
        }
        goto LABEL_175;
      }
    }

    if (!*v53)
    {
      uint64_t v108 = v45;
      iAP2PacketCopySessionInfo(&v111[4 * BYTE10(v110) + 14], v48);
      unsigned int v70 = v2 + 4 * v43;
      uint64_t v72 = *(unsigned __int8 *)(v70 + 32);
      unsigned int v71 = (unsigned __int8 *)(v70 + 32);
      unsigned int v73 = *(void *)(v23 + 352) + *v50;
      id v74 = *(unsigned __int8 *)(v73 + 14);
      if (v72 <= v74) {
        LOBYTE(v74) = *(_BYTE *)(v73 + 19);
      }
      uint64_t v75 = BYTE10(v110);
      v111[4 * BYTE10(v110) + 16] = v74;
      id v45 = v108;
      if ((_iAP2LogEnableMask & 1) != 0)
      {
        int v76 = gLogObjects;
        char v77 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 20)
        {
          id v78 = *(os_log_s **)(gLogObjects + 152);
        }

        else
        {
          uint64_t v87 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
          id v78 = (os_log_s *)&_os_log_default;
          if (v87)
          {
            *(_DWORD *)buf = 134218240;
            *(void *)id v113 = v76;
            *(_WORD *)&v113[8] = 1024;
            *(_DWORD *)uint64_t v114 = v77;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            uint64_t v75 = BYTE10(v110);
            id v78 = (os_log_s *)&_os_log_default;
          }
        }

        uint64_t v88 = v78;
        if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v89 = *(unsigned __int8 *)v48;
          uint64_t v90 = *v50;
          unint64_t v91 = *v71;
          id v92 = v111[4 * v75 + 16];
          CFStringRef v93 = *v53;
          *(_DWORD *)buf = 67110400;
          *(_DWORD *)id v113 = v43;
          *(_WORD *)&v113[4] = 1024;
          *(_DWORD *)&v113[6] = v89;
          *(_WORD *)uint64_t v114 = 1024;
          *(_DWORD *)&v114[2] = v90;
          id v115 = 1024;
          id v116 = v91;
          id v117 = 1024;
          id v118 = v92;
          id v119 = 1024;
          BOOL v120 = v93;
          _os_log_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_DEFAULT,  "ERROR: Invalid SYN Params session version detected: session %u [id=%u type=%u ver=%u->%u unrel=%d]",  buf,  0x26u);
          LOBYTE(v75) = BYTE10(v110);
        }

        id v45 = v108;
      }

      BYTE10(v110) = v75 + 1;
      uint64_t v23 = a1;
      uint64_t v2 = (uint64_t)a2;
      goto LABEL_167;
    }

LABEL_164:
    uint64_t v13 = kCFAllocatorDefault;
LABEL_160:
    unint64_t FirstParam = iAP2MsgGetNextParamWithError(v36, 0LL, FirstParam, &v168);
    if (v168)
    {
      id v28 = v152;
      uint64_t v27 = v154;
      goto LABEL_247;
    }
  }

  uint64_t v90 = v4[353];
  if (v90 && *((int *)v5 + 708) >= 56)
  {
    unint64_t v91 = (os_log_s *)*(id *)(v90 + 440);
    id v28 = v152;
    uint64_t v27 = v154;
  }

  else
  {
    id v28 = v152;
    uint64_t v27 = v154;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    unint64_t v91 = (os_log_s *)&_os_log_default;
    id v131 = &_os_log_default;
  }

  if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)float valuePtr = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v91,  OS_LOG_TYPE_DEFAULT,  "_handleNvmReadAccessoryInfo: finish",  valuePtr,  2u);
  }

LABEL_27:
  if (!v156)
  {
    uint64_t v32 = v28;
    if (v27)
    {
      uint64_t v33 = *(void *)(a1 + 712);
      uint64_t v34 = v4[353];
      if (v34 && *((int *)v5 + 708) >= 56)
      {
        uint64_t v35 = (os_log_s *)*(id *)(v34 + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v35 = (os_log_s *)&_os_log_default;
        id v41 = &_os_log_default;
      }

      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)float valuePtr = 138412290;
        *(void *)&valuePtr[4] = v27;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "user nameString %@", valuePtr, 0xCu);
      }

      *(void *)(v33 + 8_Block_object_dispose(va, 8) = v27;
    }

    goto LABEL_238;
  }

  uint64_t v29 = *(void **)(a1 + 712);
  if (v27)
  {
    uint64_t v30 = v4[353];
    if (v30 && *((int *)v5 + 708) >= 56)
    {
      uint64_t v31 = (os_log_s *)*(id *)(v30 + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v31 = (os_log_s *)&_os_log_default;
      id v38 = &_os_log_default;
    }

    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)float valuePtr = 138412290;
      *(void *)&valuePtr[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "vendor nameString %@", valuePtr, 0xCu);
    }

    v29[7] = v27;
    CFRetain(v27);
    *(void *)&__int128 v181 = v29[7];
  }

  if (v28)
  {
    uint64_t v39 = v4[353];
    if (v39 && *((int *)v5 + 708) >= 56)
    {
      __int16 v40 = (os_log_s *)*(id *)(v39 + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int16 v40 = (os_log_s *)&_os_log_default;
      id v42 = &_os_log_default;
    }

    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)float valuePtr = 138412290;
      *(void *)&valuePtr[4] = v28;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "modelIdentifierString %@", valuePtr, 0xCu);
    }

    v29[8] = v28;
    CFRetain(v28);
    *(void *)&__int128 v182 = v29[8];
  }

  if (cf)
  {
    uint64_t v43 = v4[353];
    if (v43 && *((int *)v5 + 708) >= 56)
    {
      __int16 v44 = (os_log_s *)*(id *)(v43 + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int16 v44 = (os_log_s *)&_os_log_default;
      id v45 = &_os_log_default;
    }

    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)float valuePtr = 138412290;
      *(void *)&valuePtr[4] = cf;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "manufacturerString %@", valuePtr, 0xCu);
    }

    v29[9] = cf;
    CFRetain(cf);
    *((void *)&v181 + 1) = v29[9];
  }

  if (v161)
  {
    uint64_t v46 = v4[353];
    if (v46 && *((int *)v5 + 708) >= 56)
    {
      int v47 = (os_log_s *)*(id *)(v46 + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v47 = (os_log_s *)&_os_log_default;
      id v48 = &_os_log_default;
    }

    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)float valuePtr = 138412290;
      *(void *)&valuePtr[4] = v161;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "serialNumberString %@", valuePtr, 0xCu);
    }

    v29[10] = v161;
    CFRetain(v161);
    *((void *)&v182 + 1) = v29[10];
  }

  if (v163)
  {
    uint64_t v49 = v4[353];
    if (v49 && *((int *)v5 + 708) >= 56)
    {
      id v50 = (os_log_s *)*(id *)(v49 + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v50 = (os_log_s *)&_os_log_default;
      id v51 = &_os_log_default;
    }

    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)float valuePtr = 138412290;
      *(void *)&valuePtr[4] = v163;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "primaryColorData %@", valuePtr, 0xCu);
    }

    v29[13] = v163;
    CFRetain(v163);
    if (v160)
    {
      uint64_t v52 = v4[353];
      if (v52 && *((int *)v5 + 708) >= 56)
      {
        id v53 = (os_log_s *)*(id *)(v52 + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v53 = (os_log_s *)&_os_log_default;
        id v92 = &_os_log_default;
      }

      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)float valuePtr = 138412290;
        *(void *)&valuePtr[4] = v160;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "secondaryColorData %@", valuePtr, 0xCu);
      }

      v29[14] = v160;
      CFRetain(v160);
    }
  }

  if (!v27 && !v28 && !cf && !v161 && !v158 || !*(void *)a1)
  {
LABEL_183:
    if (v163 && *(void *)a1)
    {
      CFStringRef Copy = CFStringCreateCopy(v13, *(CFStringRef *)a1);
      if (!Copy) {
        goto LABEL_247;
      }
      CFStringRef v97 = Copy;
      EndpointWithUUID = (pthread_mutex_t *)acc_manager_getEndpointWithUUID(Copy);
      if (!EndpointWithUUID)
      {
        CFStringRef v149 = v97;
        goto LABEL_262;
      }

      uint64_t v99 = EndpointWithUUID;
      uint64_t v153 = v28;
      uint64_t v100 = acc_endpoint_copyProperty(EndpointWithUUID, kCFACCProperties_Endpoint_NFC_DisplayP3Rgb);
      uint64_t v101 = v100;
      if (!v100 || CFEqual(v100, kCFNull))
      {
        __int16 v102 = v27;
        uint64_t v103 = v4[353];
        if (v103 && *((int *)v5 + 708) >= 56)
        {
          uint64_t v104 = (os_log_s *)*(id *)(v103 + 440);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v104 = (os_log_s *)&_os_log_default;
          id v105 = &_os_log_default;
        }

        if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)float valuePtr = 67109120;
          *(_DWORD *)&valuePtr[4] = v160 != 0LL;
          _os_log_impl( (void *)&_mh_execute_header,  v104,  OS_LOG_TYPE_DEFAULT,  "acc_endpoint_setProperties: primaryColorData:1, secondaryColorData:%d",  valuePtr,  8u);
        }

        if (v160)
        {
          v178[0] = kACCProperties_Endpoint_NFC_DisplayP3Rgb;
          v178[1] = kACCProperties_Endpoint_NFC_DisplayP3RgbSecondary;
          v179[0] = v163;
          v179[1] = v160;
          id v106 = (void **)v179;
          __int16 v107 = v178;
          uint64_t v108 = 2LL;
        }

        else
        {
          uint64_t v176 = kACCProperties_Endpoint_NFC_DisplayP3Rgb;
          v177 = v163;
          id v106 = &v177;
          __int16 v107 = &v176;
          uint64_t v108 = 1LL;
        }

        __int16 v109 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v106,  v107,  v108,  v150));
        uint64_t v27 = v102;
        acc_endpoint_setProperties(v99, v109);

        if (v101) {
          CFRelease(v101);
        }
      }

      CFRelease(v97);
      id v28 = v153;
    }

    uint64_t v32 = v28;
    if (!v159) {
      goto LABEL_238;
    }
    uint64_t v110 = v4[353];
    if (v110 && *((int *)v5 + 708) >= 56)
    {
      __int16 v111 = (os_log_s *)*(id *)(v110 + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int16 v111 = (os_log_s *)&_os_log_default;
      id v112 = &_os_log_default;
    }

    if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)float valuePtr = 138412290;
      *(void *)&valuePtr[4] = v159;
      _os_log_impl( (void *)&_mh_execute_header,  v111,  OS_LOG_TYPE_DEFAULT,  "deviceCompatibilityArray %@",  valuePtr,  0xCu);
    }

    v29[12] = v159;
    CFRetain(v159);
    *(void *)&__int128 v186 = v29[12];
    id v113 = (const __CFString *)systemInfo_copyProductType();
    uint64_t v114 = v4[353];
    if (v114 && *((int *)v5 + 708) >= 56)
    {
      id v115 = (os_log_s *)*(id *)(v114 + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v115 = (os_log_s *)&_os_log_default;
      id v116 = &_os_log_default;
    }

    uint64_t v155 = v27;
    if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)float valuePtr = 138412290;
      *(void *)&valuePtr[4] = v113;
      _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_DEFAULT, "productType %@", valuePtr, 0xCu);
    }

    __int128 v166 = 0u;
    __int128 v167 = 0u;
    __int128 v164 = 0u;
    __int128 v165 = 0u;
    id v117 = v159;
    id v118 = [v117 countByEnumeratingWithState:&v164 objects:v175 count:16];
    if (v118)
    {
      id v119 = v118;
      LOBYTE(v120) = 0;
      uint64_t v121 = *(void *)v165;
      do
      {
        for (uint64_t i = 0LL; i != v119; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v165 != v121) {
            objc_enumerationMutation(v117);
          }
          BOOL v120 = v120
              || CFStringCompare(v113, *(CFStringRef *)(*((void *)&v164 + 1) + 8LL * (void)i), 0LL) == kCFCompareEqualTo;
        }

        id v119 = [v117 countByEnumeratingWithState:&v164 objects:v175 count:16];
      }

      while (v119);

      if (*(void *)a1) {
        BOOL v123 = v120;
      }
      else {
        BOOL v123 = 0;
      }
      uint64_t v27 = v155;
      if (!v123) {
        goto LABEL_238;
      }
      CFStringRef v124 = CFStringCreateCopy(kCFAllocatorDefault, *(CFStringRef *)a1);
      if (v124)
      {
        CFStringRef v125 = v124;
        v126 = (pthread_mutex_t *)acc_manager_getEndpointWithUUID(v124);
        if (v126)
        {
          acc_endpoint_setProperty(v126, kCFACCProperties_Endpoint_NFC_DisplayUI, kCFBooleanTrue);
          CFRelease(v125);
          goto LABEL_238;
        }

        CFRelease(v125);
      }

      uint64_t v159 = v117;
      id v28 = v32;
      goto LABEL_247;
    }

LABEL_238:
    uint64_t v127 = v4[353];
    if (v127 && *((int *)v5 + 708) >= 56)
    {
      uint32_t v128 = (os_log_s *)*(id *)(v127 + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint32_t v128 = (os_log_s *)&_os_log_default;
      id v129 = &_os_log_default;
    }

    id v28 = v32;
    if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v130 = *(void *)(a1 + 72);
      *(_DWORD *)float valuePtr = 134218240;
      *(void *)&valuePtr[4] = v130;
      *(_WORD *)&valuePtr[12] = 2048;
      *(void *)&valuePtr[14] = v157;
      _os_log_impl( (void *)&_mh_execute_header,  v128,  OS_LOG_TYPE_DEFAULT,  "supportedSecureTunnelCapabilitiesMask: 0x%llx -> 0x%llx",  valuePtr,  0x16u);
    }

    *(void *)(a1 + 72) = v157;
    *(_DWORD *)(a1 + 32) = 0;
    goto LABEL_247;
  }

  CFStringRef v93 = CFStringCreateCopy(v13, *(CFStringRef *)a1);
  if (v93)
  {
    CFStringRef v94 = v93;
    int v95 = acc_manager_getEndpointWithUUID(v93);
    if (v95)
    {
      acc_endpoint_setAccessoryInfo((uint64_t)v95, (uint64_t)&v181);
      CFRelease(v94);
      goto LABEL_183;
    }

    CFStringRef v149 = v94;
LABEL_262:
    CFRelease(v149);
  }

LABEL_247:
LABEL_248:
}

void _handleNvmReadUserPublicKey(uint64_t a1, int a2)
{
  if (a1)
  {
    if (!*(_BYTE *)(a1 + 30))
    {
      if (!*(void *)a1) {
        goto LABEL_64;
      }
      CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, *(CFStringRef *)a1);
      if (!Copy) {
        goto LABEL_64;
      }
      CFStringRef v5 = Copy;
      EndpointWithUUID = (pthread_mutex_t *)acc_manager_getEndpointWithUUID(Copy);
      id v7 = EndpointWithUUID;
      if (1 << _convertNVMReadResponse(a1, 1LL, 0) != a2)
      {
        if (1 << _convertNVMReadResponse(a1, 2LL, 0) != a2) {
          goto LABEL_54;
        }
        if (gLogObjects && gNumLogObjects >= 56)
        {
          id v17 = (os_log_s *)*(id *)(gLogObjects + 440);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          id v17 = (os_log_s *)&_os_log_default;
          id v18 = &_os_log_default;
        }

        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "NotPaired", buf, 2u);
        }

        uint64_t sig = v7->__sig;
        int v20 = 1;
LABEL_53:
        acc_connection_setPairingStatus(sig, v20);
LABEL_54:
        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v27 = (os_log_s *)*(id *)(gLogObjects + 440);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v27 = (os_log_s *)&_os_log_default;
          id v28 = &_os_log_default;
        }

        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)id v48 = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "setProperty: NFC_InfoAvailable", v48, 2u);
        }

        acc_endpoint_setProperty(v7, kCFACCProperties_Endpoint_NFC_InfoAvailable, kCFBooleanTrue);
LABEL_63:
        CFRelease(v5);
        goto LABEL_64;
      }

      uint64_t v8 = *(void *)(*(void *)(a1 + 712) + 80LL);
      if (!v8)
      {
        id v46 = logObjectForModule_9();
        int v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)id v53 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "_handleNvmReadUserPublicKey: !serialNumberString",  v53,  2u);
        }

        goto LABEL_54;
      }

      id v9 = (__SecKey *)mfi4Auth_protocol_nvm_copyUserPublicKeyForSerialNumber(v8);
      if (v9)
      {
        PublicKey = _extractPublicKey(v9);
        if (!PublicKey) {
          goto LABEL_54;
        }
        uint64_t v11 = PublicKey;
        CachedUserPublicKey = _getCachedUserPublicKey(a1);
        if (!CachedUserPublicKey) {
          goto LABEL_54;
        }
        int v13 = memcmp(v11, CachedUserPublicKey, 0x40uLL);
        if (gLogObjects) {
          BOOL v14 = gNumLogObjects <= 55;
        }
        else {
          BOOL v14 = 1;
        }
        int v15 = !v14;
        if (!v13)
        {
          if (v15)
          {
            CFIndex v21 = (os_log_s *)*(id *)(gLogObjects + 440);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            CFIndex v21 = (os_log_s *)&_os_log_default;
            id v26 = &_os_log_default;
          }

          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)id v50 = 0;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "PairedToCurrentUser", v50, 2u);
          }

          uint64_t sig = v7->__sig;
          int v20 = 2;
          goto LABEL_53;
        }

        if (v15)
        {
          uint64_t v16 = (os_log_s *)*(id *)(gLogObjects + 440);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v16 = (os_log_s *)&_os_log_default;
          id v22 = &_os_log_default;
        }

        if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_46;
        }
        __int16 v51 = 0;
        uint64_t v23 = "PairedToAnotherUser";
        unsigned int v24 = (uint8_t *)&v51;
      }

      else
      {
        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v16 = (os_log_s *)*(id *)(gLogObjects + 440);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v16 = (os_log_s *)&_os_log_default;
          id v25 = &_os_log_default;
        }

        if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_46;
        }
        *(_WORD *)uint64_t v52 = 0;
        uint64_t v23 = "PairedToAnotherUser (!keyRef)";
        unsigned int v24 = v52;
      }

      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v23, v24, 2u);
LABEL_46:

      uint64_t sig = v7->__sig;
      int v20 = 3;
      goto LABEL_53;
    }

    id v38 = logObjectForModule_9();
    uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      _handleNvmReadUserPublicKey_cold_7(v30, v39, v40, v41, v42, v43, v44, v45);
    }
  }

  else
  {
    id v29 = logObjectForModule_9();
    uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      _handleNvmReadUserPublicKey_cold_1(v30, v31, v32, v33, v34, v35, v36, v37);
    }
  }

LABEL_64:
  if (!*(_BYTE *)(a1 + 89))
  {
    notify_post("com.apple.accessories.connection.passedMFi4Auth");
    *(_BYTE *)(a1 + 89) = 1;
  }

void _replyGetNVMKey(uint64_t a1)
{
  uint64_t v2 = (void (**)(id, __CFDictionary *, void))objc_retainBlock(*(id *)(a1 + 64));
  if (*(_BYTE *)(a1 + 30))
  {
    CFIndex v22 = -1431655766LL;
    id v29 = logObjectForModule_9();
    CFIndex v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      _replyGetNVMKey_cold_3(v21, v30, v31, v32, v33, v34, v35, v36);
    }
    goto LABEL_40;
  }

  CFIndex v3 = *(int *)(a1 + 36);
  if (!(_DWORD)v3)
  {
    id v37 = logObjectForModule_9();
    CFIndex v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      id v38 = "_replyGetNVMKey: !actionKeyCount";
LABEL_55:
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, v38, buf, 2u);
    }

LABEL_39:
        CFIndex v22 = -1LL;
        uint64_t v2 = v40;
        goto LABEL_40;
      }

      __int16 v12 = Value;
      CFStringRef v13 = CFStringCreateWithFormat( kCFAllocatorDefault,  0LL,  @"%d",  *(unsigned __int16 *)(*(void *)(a1 + 40) + v6));
      if (!v13)
      {
        id v25 = logObjectForModule_9();
        CFIndex v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          unsigned int v24 = "_replyGetNVMKey: !keyStringRef";
LABEL_38:
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, v24, buf, 2u);
        }

        goto LABEL_39;
      }

      CFDictionaryAddValue(v5, v13, v12);
    }

    else
    {
      uint64_t v14 = gLogObjects;
      int v15 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v16 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          uint64_t v42 = v14;
          __int16 v43 = 1024;
          int v44 = v15;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
        }

        id v17 = &_os_log_default;
        uint64_t v16 = (os_log_s *)&_os_log_default;
      }

      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "_replyGetNVMKey: !contains", buf, 2u);
      }
    }

    ++v7;
    v6 += 2LL;
  }

  id v20 = logObjectForModule_9();
  CFIndex v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
  uint64_t v2 = v40;
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "_replyGetNVMKey: !keyRef", buf, 2u);
  }

  CFIndex v22 = -1LL;
LABEL_40:

  if (gLogObjects && gNumLogObjects >= 56)
  {
    id v26 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v26 = (os_log_s *)&_os_log_default;
    id v27 = &_os_log_default;
  }

  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "_replyGetNVMKey: error", buf, 2u);
  }

  CFErrorRef v28 = CFErrorCreate(kCFAllocatorDefault, kCFErrorDomainPOSIX, v22, 0LL);
  ((void (**)(id, __CFDictionary *, CFErrorRef))v2)[2](v2, 0LL, v28);
LABEL_30:
}

  if (v2) {
    CFRelease(v2);
  }
}

      CFRelease(v11);
      goto LABEL_40;
    }

    if (gLogObjects && gNumLogObjects >= 26)
    {
      uint64_t v16 = *(os_log_s **)(gLogObjects + 200);
    }

    else
    {
      uint64_t v16 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      iap2_identification_cbIdentificationInfoParams_cold_6();
    }
    return 1LL;
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 26)
    {
      int v15 = *(os_log_s **)(gLogObjects + 200);
    }

    else
    {
      int v15 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int MsgID = iAP2MsgGetMsgID(a1);
      CFErrorRef v28 = 67109376;
      id v29 = (int)ParamID;
      uint64_t v30 = 1024;
      uint64_t v31 = MsgID;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Unknown Param ID: %d for Msg ID: 0x%04X",  (uint8_t *)&v28,  0xEu);
    }

    id v18 = iap2_identification_getIdentificationInfo(a4);
    uint64_t v4 = 1LL;
    _addRejectParam(v18, (int)ParamID, 1u);
  }

  return v4;
}

  -[NSMutableDictionary setObject:forKey:]( v3,  "setObject:forKey:",  self->_artist,  @"ACCMediaLibraryUpdateItemArtist");
  validMask = self->_validMask;
  if ((validMask & 0x2000) == 0)
  {
LABEL_15:
    if ((validMask & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }

  a3->var11 = self->_albumDiscCount;
  a3->var0 |= 0x400u;
  if ((validMask & 0x800) == 0)
  {
LABEL_13:
    if ((validMask & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_41;
  }

uint64_t mfi4Auth_protocol_initMessage_RequestNVMAuthStart(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  if (!a1)
  {
    id v11 = logObjectForModule_9();
    __int16 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMAuthStart_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    goto LABEL_18;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v20 = logObjectForModule_9();
    __int16 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMAuthStart_cold_3(v12, v21, v22, v23, v24, v25, v26, v27);
    }
LABEL_18:

    return 1LL;
  }

  __int16 v6 = *(_WORD *)(a1 + 200);
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v7 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v7 = (os_log_s *)&_os_log_default;
    id v8 = &_os_log_default;
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CFErrorRef v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "initMessage_RequestNVMAuthStart", v28, 2u);
  }

  if (!a2) {
    return 1LL;
  }
  CFNumberRef v9 = malloc(0x48uLL);
  *a2 = (uint64_t)v9;
  if (!v9) {
    return 0xFFFFFFFFLL;
  }
  iAP2MsgInitWithSom((uint64_t)v9, v6, 20797, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0LL, 0LL);
  iAP2MsgAddU16Param(*a2, 0LL, 0, a3);
  uint64_t result = 0LL;
  *(_WORD *)(a1 + 2_Block_object_dispose(va, 8) = 20797;
  return result;
}

uint64_t _copyOrCreateUserPublicKeyForSerialNumber(uint64_t a1)
{
  BOOL v1 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"com.apple.accessoryd.mfi4.userPublicKey.%@",  a1));
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v2 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v2 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v11 = v1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "_copyOrCreateUserPublicKeyForSerialNumber: featureTag: %@",  buf,  0xCu);
  }

  uint64_t v4 = MFi4AuthFeatureGroup();
  SynchronizableKeyForAuthuint64_t Feature = CopySynchronizableKeyForAuthFeature(0LL, v1, v4);
  if (!SynchronizableKeyForAuthFeature)
  {
    uint64_t v6 = MFi4AuthFeatureGroup();
    SynchronizableKeyForAuthuint64_t Feature = CreateSynchronizableKeyForAuthFeature(0LL, v1, v6);
    if (!SynchronizableKeyForAuthFeature)
    {
      id v8 = logObjectForModule_9();
      CFNumberRef v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "_copyOrCreateUserPublicKeyForSerialNumber: failed",  buf,  2u);
      }

      SynchronizableKeyForAuthuint64_t Feature = 0LL;
    }
  }

  return SynchronizableKeyForAuthFeature;
}

CFDataRef _generateUserSignature(__SecKey *a1, __int128 *a2, __int128 *a3)
{
  CFErrorRef error = 0LL;
  char data = 2;
  __int128 v10 = *a2;
  __int128 v11 = *a3;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)md = v4;
  __int128 v8 = v4;
  CC_SHA256(&data, 0x21u, md);
  if (!a1) {
    return 0LL;
  }
  uint64_t result = CFDataCreate(kCFAllocatorDefault, md, 32LL);
  if (result) {
    return SecKeyCreateSignature(a1, kSecKeyAlgorithmECDSASignatureRFC4754, result, &error);
  }
  return result;
}

uint64_t mfi4Auth_protocol_handle_NVMWriteResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v112 = 1;
  if (!a1)
  {
    id v80 = logObjectForModule_9();
    uint64_t v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
    if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMWriteResponse_cold_2(v81, v82, v83, v84, v85, v86, v87, v88);
    }
    goto LABEL_161;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v89 = logObjectForModule_9();
    uint64_t v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);
    if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMWriteResponse_cold_7(v81, v90, v91, v92, v93, v94, v95, v96);
    }
    goto LABEL_161;
  }

  if (!a3)
  {
    id v97 = logObjectForModule_9();
    uint64_t v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v97);
    if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMWriteResponse_cold_3(v81, v98, v99, v100, v101, v102, v103, v104);
    }
    goto LABEL_161;
  }

  char v111 = 0;
  *(void *)&__int128 __dst = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&__dst + 1) = 0xAAAAAAAAAAAAAAAALL;
  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a3, 0LL);
  int v7 = 0;
  unsigned int v8 = 0;
  unsigned int v9 = 0;
  uint64_t v109 = 0LL;
  while (FirstParam)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
    uint64_t v11 = gLogObjects;
    int v12 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v13 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = v11;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = v12;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
      }

      id v14 = &_os_log_default;
      uint64_t v13 = (os_log_s *)&_os_log_default;
    }

    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = ParamID;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_handle_NVMWriteResponse: paramID: %d",  buf,  8u);
    }

    if (*(_BYTE *)(a1 + 144) == 2)
    {
      switch(ParamID)
      {
        case 2:
          if (v9 >= 0x40)
          {
            uint64_t v22 = gLogObjects;
            int v23 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 56)
            {
              uint64_t v19 = (os_log_s *)*(id *)(gLogObjects + 440);
            }

            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)&uint8_t buf[4] = v22;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&_BYTE buf[14] = v23;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              }

              id v48 = &_os_log_default;
              uint64_t v19 = (os_log_s *)&_os_log_default;
            }

            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_60;
            }
LABEL_87:

            break;
          }

          int DataAsU16 = iAP2MsgGetDataAsU16(FirstParam, &v112);
          uint64_t v35 = gLogObjects;
          int v36 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 56)
          {
            id v37 = (os_log_s *)*(id *)(gLogObjects + 440);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)&uint8_t buf[4] = v35;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = v36;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            }

            id v50 = &_os_log_default;
            id v37 = (os_log_s *)&_os_log_default;
          }

          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = DataAsU16;
            _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "NVMWriteResponse: keyNotWritten: 0x%x",  buf,  8u);
          }

          if (v112) {
            goto LABEL_164;
          }
          ++v9;
          v7 |= 4u;
          break;
        case 1:
          if (v8 < 0x40)
          {
            int v38 = iAP2MsgGetDataAsU16(FirstParam, &v112);
            uint64_t v39 = gLogObjects;
            int v40 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 56)
            {
              uint64_t v41 = (os_log_s *)*(id *)(gLogObjects + 440);
            }

            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)&uint8_t buf[4] = v39;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&_BYTE buf[14] = v40;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              }

              id v51 = &_os_log_default;
              uint64_t v41 = (os_log_s *)&_os_log_default;
            }

            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v38;
              _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "NVMWriteResponse: keyWritten: 0x%x",  buf,  8u);
            }

            if (v112) {
              goto LABEL_164;
            }
            ++v8;
            LODWORD(v109) = v109 | (v38 == 21248);
            HIDWORD(v109) |= (v38 - 21249) < 0xFF;
LABEL_102:
            v7 |= 2u;
            break;
          }

          uint64_t v24 = gLogObjects;
          int v25 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 56)
          {
            uint64_t v19 = (os_log_s *)*(id *)(gLogObjects + 440);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)&uint8_t buf[4] = v24;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = v25;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            }

            id v49 = &_os_log_default;
            uint64_t v19 = (os_log_s *)&_os_log_default;
          }

          if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_87;
          }
          goto LABEL_85;
        case 0:
          int DataAsArrayU8 = iAP2MsgGetDataAsArrayU8(FirstParam, &v112, &__dst, 16);
          unsigned int v16 = v112;
          if (v112 || DataAsArrayU8 != 16) {
            goto LABEL_163;
          }
LABEL_68:
          v7 |= 1u;
          break;
      }
    }

    else
    {
      if (ParamID == 1)
      {
        if (v9 < 0x40)
        {
          int v30 = iAP2MsgGetDataAsU16(FirstParam, &v112);
          uint64_t v31 = gLogObjects;
          int v32 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 56)
          {
            uint64_t v33 = (os_log_s *)*(id *)(gLogObjects + 440);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)&uint8_t buf[4] = v31;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = v32;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            }

            id v47 = &_os_log_default;
            uint64_t v33 = (os_log_s *)&_os_log_default;
          }

          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v30;
            _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "NVMWriteResponse: keyNotWritten: 0x%x",  buf,  8u);
          }

          if (v112) {
            goto LABEL_164;
          }
          ++v9;
          goto LABEL_102;
        }

        uint64_t v20 = gLogObjects;
        int v21 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v19 = (os_log_s *)*(id *)(gLogObjects + 440);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)&uint8_t buf[4] = v20;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&_BYTE buf[14] = v21;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          }

          id v43 = &_os_log_default;
          uint64_t v19 = (os_log_s *)&_os_log_default;
        }

        if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_87;
        }
LABEL_60:
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = 64;
        int v44 = v19;
        uint64_t v45 = "NVMWriteResponse: reached limit of %d keyNotWritten parameters";
        goto LABEL_86;
      }

      if (!ParamID)
      {
        if (v8 >= 0x40)
        {
          uint64_t v17 = gLogObjects;
          int v18 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 56)
          {
            uint64_t v19 = (os_log_s *)*(id *)(gLogObjects + 440);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)&uint8_t buf[4] = v17;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = v18;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            }

            id v42 = &_os_log_default;
            uint64_t v19 = (os_log_s *)&_os_log_default;
          }

          if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_87;
          }
LABEL_85:
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = 64;
          int v44 = v19;
          uint64_t v45 = "NVMWriteResponse: reached limit of %d keyWritten parameters";
LABEL_86:
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, v45, buf, 8u);
          goto LABEL_87;
        }

        int v26 = iAP2MsgGetDataAsU16(FirstParam, &v112);
        uint64_t v27 = gLogObjects;
        int v28 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 56)
        {
          id v29 = (os_log_s *)*(id *)(gLogObjects + 440);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)&uint8_t buf[4] = v27;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&_BYTE buf[14] = v28;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          }

          id v46 = &_os_log_default;
          id v29 = (os_log_s *)&_os_log_default;
        }

        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v26;
          _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "NVMWriteResponse: keyWritten: 0x%x",  buf,  8u);
        }

        if (v112) {
          goto LABEL_164;
        }
        ++v8;
        LODWORD(v109) = v109 | (v26 == 21248);
        HIDWORD(v109) |= (v26 - 21249) < 0xFF;
        goto LABEL_68;
      }
    }

    unint64_t FirstParam = iAP2MsgGetNextParamWithError(a3, 0LL, FirstParam, &v111);
    if (v111) {
      goto LABEL_162;
    }
  }

  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v52 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v52 = (os_log_s *)&_os_log_default;
    id v53 = &_os_log_default;
  }

  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_handle_NVMWriteResponse: paramMask: 0x%x",  buf,  8u);
  }

  if (1 << _convertNVMWriteResponse(a1, 1LL, 0) == v7)
  {
    if ((v109 & 1) != 0)
    {
      CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, *(CFStringRef *)a1);
      if (Copy)
      {
        CFStringRef v55 = Copy;
        EndpointWithUUID = (uint64_t *)acc_manager_getEndpointWithUUID(Copy);
        CFRelease(v55);
      }

      if (*(_DWORD *)(a1 + 32) == 4)
      {
        id v57 = (void (**)(id, void))objc_retainBlock(*(id *)(a1 + 64));
        if (v57)
        {
          id v58 = logObjectForModule_9();
          int v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
          if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_handle_NVMWriteResponse: reply",  buf,  2u);
          }

          v57[2](v57, 0LL);
        }

        *(void *)(a1 + 64) = 0LL;
        *(_DWORD *)(a1 + 32) = 0;
      }
    }

    if ((v109 & 0x100000000LL) != 0)
    {
      int v60 = *(_DWORD *)(a1 + 32);
      if (v60 == 6)
      {
        id v61 = (void (**)(id, void))objc_retainBlock(*(id *)(a1 + 64));
        v61[2](v61, 0LL);
        *(void *)(a1 + 64) = 0LL;
        *(_DWORD *)(a1 + 32) = 0;

        int v60 = *(_DWORD *)(a1 + 32);
      }

      if (v60 == 8)
      {
        char v62 = (void (**)(id, void))objc_retainBlock(*(id *)(a1 + 64));
        v62[2](v62, 0LL);
        *(void *)(a1 + 64) = 0LL;
        *(_DWORD *)(a1 + 32) = 0;
      }
    }

    return 0LL;
  }

  if (*(_BYTE *)(a1 + 144) != 2 || v7 != 5)
  {
    char v64 = _convertNVMWriteResponse(a1, 2LL, 0);
    uint64_t result = 0LL;
    if (1 << v64 != v7) {
      return result;
    }
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v66 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v66 = (os_log_s *)&_os_log_default;
      id v79 = &_os_log_default;
    }

    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_handle_NVMWriteResponse: unknown combination of params",  buf,  2u);
    }

    return 0LL;
  }

  if (gLogObjects && gNumLogObjects >= 56)
  {
    id v63 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v63 = (os_log_s *)&_os_log_default;
    id v67 = &_os_log_default;
  }

  if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_handle_NVMWriteResponse: received Nonce",  buf,  2u);
  }

  memset(buf, 170, 16);
  arc4random_buf(buf, 0x10uLL);
  uint64_t v68 = *(void *)(*(void *)(a1 + 712) + 80LL);
  if (!v68)
  {
    unsigned int v112 = -1;
    id v107 = logObjectForModule_9();
    uint64_t v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v107);
    if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v110 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_DEFAULT,  "NVMWriteResponse: !serialNumberString",  v110,  2u);
    }

LABEL_161:
LABEL_162:
    unsigned int v16 = v112;
LABEL_163:
    if (v16) {
      goto LABEL_164;
    }
    return 0LL;
  }

  UserPublicKeyForSerialNumber = (__SecKey *)_copyOrCreateUserPublicKeyForSerialNumber(v68);
  if (!UserPublicKeyForSerialNumber)
  {
    unsigned int v112 = -1;
    goto LABEL_162;
  }

  unsigned int v70 = UserPublicKeyForSerialNumber;
  unsigned int v71 = _generateUserSignature(UserPublicKeyForSerialNumber, &__dst, (__int128 *)buf);
  if (v71)
  {
    uint64_t v72 = v71;
    if (_extractPublicKey(v70))
    {
      __int16 v73 = *(_WORD *)(a1 + 200);
      id v74 = *(unsigned __int16 **)(a1 + 40);
      uint64_t v75 = *(uint64_t **)(a1 + 48);
      int v76 = *(_DWORD **)(a1 + 56);
      unsigned int v77 = *(unsigned __int8 *)(a1 + 36);
      BytePtr = CFDataGetBytePtr(v72);
      mfi4Auth_protocol_initMessage_RequestUserNVMWrite(a1, v73, a4, v74, v75, v76, v77, (uint64_t)BytePtr, (uint64_t)buf);
      return 0LL;
    }
  }

  unsigned int v112 = -1;
LABEL_164:
  if (gLogObjects && gNumLogObjects >= 56)
  {
    id v105 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v105 = (os_log_s *)&_os_log_default;
    id v106 = &_os_log_default;
  }

  if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v105,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_handle_NVMWriteResponse: error",  buf,  2u);
  }

  return v112;
}

uint64_t _convertNVMWriteResponse(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1)
  {
    id v12 = logObjectForModule_9();
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      _convertNVMWriteResponse_cold_2(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    goto LABEL_27;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v21 = logObjectForModule_9();
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      _convertNVMWriteResponse_cold_3(v13, v22, v23, v24, v25, v26, v27, v28);
    }
LABEL_27:

    uint64_t v7 = a2;
    goto LABEL_11;
  }

  BOOL v6 = *(_BYTE *)(a1 + 144) != 3 && a3 == 0;
  uint64_t v7 = a2;
  if (!v6)
  {
    if ((_DWORD)a2 == 2)
    {
      uint64_t v7 = 1LL;
    }

    else
    {
      uint64_t v7 = a2;
      if ((_DWORD)a2 == 1) {
        uint64_t v7 = 0LL;
      }
    }
  }

UInt8 *_extractPublicKey(__SecKey *a1)
{
  CFErrorRef error = 0LL;
  if (!a1) {
    return 0LL;
  }
  SecKeyRef v1 = SecKeyCopyPublicKey(a1);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  if (gLogObjects && gNumLogObjects >= 56)
  {
    id v3 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v3 = (os_log_s *)&_os_log_default;
    id v4 = &_os_log_default;
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "_extractPublicKey: SecKeyCopyExternalRepresentation",  buf,  2u);
  }

  CFDataRef v5 = SecKeyCopyExternalRepresentation(v2, &error);
  if (error)
  {
    id v13 = logObjectForModule_9();
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      CFIndex Code = CFErrorGetCode(error);
      *(_DWORD *)buf = 134217984;
      CFIndex v19 = Code;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "cfError: 0x%ld", buf, 0xCu);
    }

    return 0LL;
  }

  BOOL v6 = v5;
  if (!v5) {
    return 0LL;
  }
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v7 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v7 = (os_log_s *)&_os_log_default;
    id v8 = &_os_log_default;
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "_extractPublicKey: CFDataGetLength", buf, 2u);
  }

  CFIndex Length = CFDataGetLength(v6);
  if (gLogObjects && gNumLogObjects >= 56)
  {
    __int128 v10 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int128 v10 = (os_log_s *)&_os_log_default;
    id v11 = &_os_log_default;
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    CFIndex v19 = Length;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "_extractPublicKey: keyDataLength:%ld",  buf,  0xCu);
  }

  if (Length != 65) {
    return 0LL;
  }
  id v12 = (UInt8 *)calloc(0x40uLL, 1uLL);
  v20.location = 1LL;
  v20.length = 64LL;
  CFDataGetBytes(v6, v20, v12);
  return v12;
}

uint64_t mfi4Auth_protocol_initMessage_RequestUserNVMWrite( uint64_t a1, __int16 a2, uint64_t *a3, unsigned __int16 *a4, uint64_t *a5, _DWORD *a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
  {
    id v26 = logObjectForModule_9();
    uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestUserNVMWrite_cold_1(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    goto LABEL_27;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v35 = logObjectForModule_9();
    uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestUserNVMWrite_cold_5(v27, v36, v37, v38, v39, v40, v41, v42);
    }
    goto LABEL_27;
  }

  __int128 v10 = a4;
  if (!a4)
  {
    id v43 = logObjectForModule_9();
    uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestUserNVMWrite_cold_2(v27, v44, v45, v46, v47, v48, v49, v50);
    }
    goto LABEL_27;
  }

  id v11 = a5;
  if (!a5)
  {
    id v51 = logObjectForModule_9();
    uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestUserNVMWrite_cold_3(v27, v52, v53, v54, v55, v56, v57, v58);
    }
    goto LABEL_27;
  }

  id v12 = a6;
  if (!a6)
  {
    id v59 = logObjectForModule_9();
    uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestUserNVMWrite_cold_4(v27, v60, v61, v62, v63, v64, v65, v66);
    }
LABEL_27:

    return 1LL;
  }

  if (!a3) {
    return 1LL;
  }
  uint64_t v17 = malloc(0x48uLL);
  *a3 = (uint64_t)v17;
  if (!v17) {
    return 0xFFFFFFFFLL;
  }
  iAP2MsgInitWithSom((uint64_t)v17, a2, 20787, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0LL, 0LL);
  if (*(_BYTE *)(a1 + 144) == 2)
  {
    if (a8) {
      iAP2MsgAddArrayU8Param(*a3, 0LL, 0, a8, 0x40u);
    }
    if (a9) {
      iAP2MsgAddArrayU8Param(*a3, 0LL, 1, a9, 0x10u);
    }
  }

  __int16 v18 = _convertUserNVMWrite(a1, 2LL);
  if (a7)
  {
    __int16 v19 = v18;
    uint64_t v20 = a7;
    do
    {
      id v21 = iAP2MsgAddGroupParam(*a3, v19);
      unsigned int v22 = *v10++;
      iAP2MsgAddU16Param(*a3, (uint64_t)v21, 0, v22);
      uint64_t v24 = *v11++;
      uint64_t v23 = v24;
      LODWORD(v24) = *v12++;
      iAP2MsgAddArrayU8Param(*a3, (uint64_t)v21, 1, v23, v24);
      --v20;
    }

    while (v20);
  }

  uint64_t result = 0LL;
  *(_WORD *)(a1 + 2_Block_object_dispose(va, 8) = 20787;
  return result;
}

uint64_t mfi4Auth_protocol_handle_NVMPublicKeyChallenge( uint64_t a1, __int16 a2, uint64_t a3, uint64_t *a4, _BYTE *a5)
{
  int v124 = 1;
  if (!a1)
  {
    id v65 = logObjectForModule_9();
    uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMPublicKeyChallenge_cold_3(v45, v66, v67, v68, v69, v70, v71, v72);
    }
    goto LABEL_155;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v73 = logObjectForModule_9();
    uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMPublicKeyChallenge_cold_16(v45, v74, v75, v76, v77, v78, v79, v80);
    }
    goto LABEL_155;
  }

  if (!a3)
  {
    id v81 = logObjectForModule_9();
    uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v81);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMPublicKeyChallenge_cold_4(v45, v82, v83, v84, v85, v86, v87, v88);
    }
    goto LABEL_155;
  }

  if (!a5)
  {
    id v89 = logObjectForModule_9();
    uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMPublicKeyChallenge_cold_5(v45, v90, v91, v92, v93, v94, v95, v96);
    }
LABEL_155:

LABEL_156:
    BOOL v21 = v124;
LABEL_157:
    if (!v21) {
      return 0LL;
    }
LABEL_158:
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v114 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v114 = (os_log_s *)&_os_log_default;
      id v115 = &_os_log_default;
    }

    if (os_log_type_enabled(v114, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMPublicKeyChallenge_cold_1();
    }

    return v124;
  }

  char v123 = 0;
  __int128 bytes = 0uLL;
  uint64_t v120 = *(void *)(a1 + 712);
  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a3, 0LL);
  int v7 = 0;
  LOBYTE(v_Block_object_dispose(va, 8) = 0;
  int v9 = 0;
  while (FirstParam)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
    uint64_t v11 = gLogObjects;
    int v12 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 56)
    {
      id v13 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = v11;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = v12;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
      }

      id v14 = &_os_log_default;
      id v13 = (os_log_s *)&_os_log_default;
    }

    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = ParamID;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "handle_NVMPublicKeyChallenge: paramID: %d",  buf,  8u);
    }

    switch(ParamID)
    {
      case 2:
        BOOL DataAsBool = iAP2MsgGetDataAsBool(FirstParam, (BOOL *)&v124);
        if (v124) {
          goto LABEL_158;
        }
        BOOL v8 = DataAsBool;
        uint64_t v17 = gLogObjects;
        int v18 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 56)
        {
          __int16 v19 = (os_log_s *)*(id *)(gLogObjects + 440);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)&uint8_t buf[4] = v17;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&_BYTE buf[14] = v18;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          }

          id v22 = &_os_log_default;
          __int16 v19 = (os_log_s *)&_os_log_default;
        }

        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "handle_NVMPublicKeyChallenge: isProgrammed: %d",  buf,  8u);
        }

        if (v8 && *(_DWORD *)(a1 + 32) == 4)
        {
          uint64_t v23 = *(void **)(a1 + 64);
          if (v23)
          {
            uint64_t v24 = objc_retainBlock(v23);
            uint64_t v25 = gLogObjects;
            int v26 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 56)
            {
              uint64_t v27 = (os_log_s *)*(id *)(gLogObjects + 440);
            }

            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)&uint8_t buf[4] = v25;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&_BYTE buf[14] = v26;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              }

              id v28 = &_os_log_default;
              uint64_t v27 = (os_log_s *)&_os_log_default;
            }

            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "handle_NVMPublicKeyChallenge: reply",  buf,  2u);
            }

            id v29 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSCocoaErrorDomain,  -1LL,  0LL));
            v24[2](v24, v29);
            *(_DWORD *)(a1 + 32) = 0;
            *(void *)(a1 + 64) = 0LL;
          }
        }

        v7 |= 4u;
        break;
      case 1:
        int DataAsArrayU8 = iAP2MsgGetDataAsArrayU8(FirstParam, &v124, &bytes, 16);
        BOOL v21 = v124;
        if (v124 || DataAsArrayU8 != 16) {
          goto LABEL_157;
        }
        v7 |= 2u;
        break;
      case 0:
        int DataAsU16 = iAP2MsgGetDataAsU16(FirstParam, &v124);
        if (v124) {
          goto LABEL_158;
        }
        int v9 = DataAsU16;
        v7 |= 1u;
        break;
    }

    unint64_t FirstParam = iAP2MsgGetNextParamWithError(a3, 0LL, FirstParam, &v123);
    if (v123) {
      goto LABEL_156;
    }
  }

  if (v7 != 7) {
    goto LABEL_156;
  }
  uint64_t result = 0LL;
  switch(*(_DWORD *)(a1 + 32))
  {
    case 4:
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v31 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v31 = (os_log_s *)&_os_log_default;
        id v35 = &_os_log_default;
      }

      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "handle_NVMPublicKeyChallenge: kMfi4Auth_Action_WriteUserKey",  buf,  2u);
      }

      if (v9 != 21248)
      {
        id v97 = logObjectForModule_9();
        uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v97);
        if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_155;
        }
        *(_WORD *)buf = 0;
        uint64_t v46 = "handle_NVMPublicKeyChallenge: !kMFi4_Area51_NVM_User_PublicKey";
        goto LABEL_140;
      }

      if (v8)
      {
        id v98 = logObjectForModule_9();
        uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v98);
        if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_155;
        }
        *(_WORD *)buf = 0;
        uint64_t v46 = "handle_NVMPublicKeyChallenge: isProgrammed";
        goto LABEL_140;
      }

      memset(buf, 170, 16);
      arc4random_buf(buf, 0x10uLL);
      uint64_t v36 = *(void *)(v120 + 80);
      if (!v36)
      {
        int v124 = -1;
        id v99 = logObjectForModule_9();
        uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v99);
        if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_155;
        }
        *(_WORD *)id v122 = 0;
        uint64_t v46 = "NVMPublicKeyChallenge: WriteUserKey: !serialNumberString";
        goto LABEL_153;
      }

      UserPublicKeyForSerialNumber = (__SecKey *)_copyOrCreateUserPublicKeyForSerialNumber(v36);
      if (!UserPublicKeyForSerialNumber
        || (uint64_t v38 = UserPublicKeyForSerialNumber,
            (uint64_t v39 = _generateUserSignature(UserPublicKeyForSerialNumber, &bytes, (__int128 *)buf)) == 0LL))
      {
        int v124 = -1;
        goto LABEL_156;
      }

      uint64_t v40 = v39;
      PublicKey = _extractPublicKey(v38);
      if (!PublicKey)
      {
        int v124 = -1;
        id v110 = logObjectForModule_9();
        uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v110);
        if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_155;
        }
        *(_WORD *)id v122 = 0;
        uint64_t v46 = "NVMPublicKeyChallenge: WriteUserKey: !userPublicKey";
        goto LABEL_153;
      }

      uint64_t v42 = (uint64_t)PublicKey;
      BytePtr = CFDataGetBytePtr(v40);
      uint64_t result = mfi4Auth_protocol_initMessage_RequestNVMWritePublicKey( a1,  a4,  0x5300u,  v42,  0x40u,  (uint64_t)buf,  (uint64_t)BytePtr);
      int v124 = result;
      if ((_DWORD)result)
      {
        id v44 = logObjectForModule_9();
        uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
        if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_155;
        }
        *(_WORD *)id v122 = 0;
        uint64_t v46 = "NVMPublicKeyChallenge: WriteUserKey: initMessage_RequestNVMWritePublicKey error";
        goto LABEL_153;
      }

      return result;
    case 5:
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v32 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v32 = (os_log_s *)&_os_log_default;
        id v47 = &_os_log_default;
      }

      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "handle_NVMPublicKeyChallenge: kMfi4Auth_Action_EraseUserKey",  buf,  2u);
      }

      memset(buf, 170, 16);
      arc4random_buf(buf, 0x10uLL);
      if (v9 != 21248)
      {
        id v100 = logObjectForModule_9();
        uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v100);
        if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_155;
        }
        *(_WORD *)id v122 = 0;
        uint64_t v46 = "handle_NVMPublicKeyChallenge: !kMFi4_Area51_NVM_User_PublicKey";
        goto LABEL_153;
      }

      if (!v8)
      {
        id v101 = logObjectForModule_9();
        uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v101);
        if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_155;
        }
        *(_WORD *)id v122 = 0;
        uint64_t v46 = "handle_NVMPublicKeyChallenge: !isProgrammed";
        goto LABEL_153;
      }

      uint64_t v48 = *(void *)(v120 + 80);
      if (!v48)
      {
        int v124 = -1;
        id v102 = logObjectForModule_9();
        uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v102);
        if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_155;
        }
        *(_WORD *)id v122 = 0;
        uint64_t v46 = "handle_NVMPublicKeyChallenge: EraseUserKey: !serialNumberString";
        goto LABEL_153;
      }

      uint64_t v49 = (__SecKey *)_copyOrCreateUserPublicKeyForSerialNumber(v48);
      if (!v49)
      {
        int v124 = -1;
        id v111 = logObjectForModule_9();
        uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v111);
        if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_155;
        }
        *(_WORD *)id v122 = 0;
        uint64_t v46 = "handle_NVMPublicKeyChallenge: EraseUserKey: _copyOrCreateUserPublicKeyForSerialNumber failed";
        goto LABEL_153;
      }

      uint64_t v50 = v49;
      id v51 = _generateUserSignature(v49, &bytes, (__int128 *)buf);
      if (!v51)
      {
        int v124 = -1;
        id v112 = logObjectForModule_9();
        uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v112);
        if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_155;
        }
        *(_WORD *)id v122 = 0;
        uint64_t v46 = "handle_NVMPublicKeyChallenge: EraseUserKey: _generateUserSignature failed";
        goto LABEL_153;
      }

      uint64_t v52 = v51;
      if (!_extractPublicKey(v50))
      {
        int v124 = -1;
        id v113 = logObjectForModule_9();
        uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v113);
        if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_155;
        }
        *(_WORD *)id v122 = 0;
        uint64_t v46 = "handle_NVMPublicKeyChallenge: EraseUserKey: !userPublicKey";
        goto LABEL_153;
      }

      uint64_t v53 = CFDataGetBytePtr(v52);
      uint64_t result = mfi4Auth_protocol_initMessage_RequestNVMErasePublicKey( a1,  a2,  a4,  0x5300u,  0x5300u,  (uint64_t)buf,  (uint64_t)v53);
      int v124 = result;
      if ((_DWORD)result)
      {
        id v54 = logObjectForModule_9();
        uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
        if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_155;
        }
        *(_WORD *)id v122 = 0;
        uint64_t v46 = "handle_NVMPublicKeyChallenge: EraseUserKey: initMessage_RequestNVMErasePublicKey error";
LABEL_153:
        id v107 = v122;
        goto LABEL_154;
      }

      break;
    case 0xA:
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v33 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v33 = (os_log_s *)&_os_log_default;
        id v55 = &_os_log_default;
      }

      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "handle_NVMPublicKeyChallenge: kMfi4Auth_Action_BeginVendorKeyErase",  buf,  2u);
      }

      uint64_t v56 = *(void **)(a1 + 64);
      if (v56)
      {
        id v57 = objc_retainBlock(v56);
        uint64_t v58 = (void (**)(void, void, void))v57;
        if (v9 == 20992)
        {
          if (v8)
          {
            CFDataRef v59 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)&bytes, 16LL);
            if (v59) {
              goto LABEL_109;
            }
            v58[2](v58, 0LL, 0LL);
            id v60 = logObjectForModule_9();
            uint64_t v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
            if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR)) {
              mfi4Auth_protocol_handle_NVMPublicKeyChallenge_cold_8();
            }
          }

          else
          {
            (*((void (**)(id, void, void))v57 + 2))(v57, 0LL, 0LL);
            id v105 = logObjectForModule_9();
            uint64_t v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v105);
            if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR)) {
              mfi4Auth_protocol_handle_NVMPublicKeyChallenge_cold_9();
            }
          }
        }

        else
        {
          (*((void (**)(id, void, void))v57 + 2))(v57, 0LL, 0LL);
          id v104 = logObjectForModule_9();
          uint64_t v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v104);
          if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_NVMPublicKeyChallenge_cold_10();
          }
        }

        goto LABEL_170;
      }

      id v103 = logObjectForModule_9();
      uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v103);
      if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_155;
      }
      *(_WORD *)buf = 0;
      uint64_t v46 = "handle_NVMPublicKeyChallenge: BeginVendorKeyErase: !actionReply";
      goto LABEL_140;
    case 0xC:
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v34 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v34 = (os_log_s *)&_os_log_default;
        id v62 = &_os_log_default;
      }

      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "handle_NVMPublicKeyChallenge: kMfi4Auth_Action_BeginUserKeyErase",  buf,  2u);
      }

      uint64_t v63 = *(void **)(a1 + 64);
      if (!v63)
      {
        id v106 = logObjectForModule_9();
        uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v106);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          uint64_t v46 = "handle_NVMPublicKeyChallenge: BeginUserKeyErase: !actionReply";
LABEL_140:
          id v107 = buf;
LABEL_154:
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, v46, v107, 2u);
        }

        goto LABEL_155;
      }

      id v64 = objc_retainBlock(v63);
      uint64_t v58 = (void (**)(void, void, void))v64;
      if (v9 == 21248)
      {
        if (v8)
        {
          CFDataRef v59 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)&bytes, 16LL);
          if (v59)
          {
LABEL_109:
            *a5 = 1;
            ((void (**)(void, CFDataRef, void))v58)[2](v58, v59, 0LL);
            *(void *)(a1 + 64) = 0LL;
            *(_DWORD *)(a1 + 32) = 0;

            return 0LL;
          }

          v58[2](v58, 0LL, 0LL);
          id v116 = logObjectForModule_9();
          uint64_t v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v116);
          if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_NVMPublicKeyChallenge_cold_12();
          }
        }

        else
        {
          (*((void (**)(id, void, void))v64 + 2))(v64, 0LL, 0LL);
          id v109 = logObjectForModule_9();
          uint64_t v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v109);
          if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_NVMPublicKeyChallenge_cold_13();
          }
        }
      }

      else
      {
        (*((void (**)(id, void, void))v64 + 2))(v64, 0LL, 0LL);
        id v108 = logObjectForModule_9();
        uint64_t v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v108);
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_protocol_handle_NVMPublicKeyChallenge_cold_14();
        }
      }

LABEL_170:
      goto LABEL_156;
    default:
      return result;
  }

  return result;
}

uint64_t mfi4Auth_protocol_initMessage_RequestNVMWritePublicKey( uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  if (!a1)
  {
    id v18 = logObjectForModule_9();
    __int16 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMWritePublicKey_cold_1(v19, v20, v21, v22, v23, v24, v25, v26);
    }
    goto LABEL_19;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v27 = logObjectForModule_9();
    __int16 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMWritePublicKey_cold_5(v19, v28, v29, v30, v31, v32, v33, v34);
    }
    goto LABEL_19;
  }

  if (!a4)
  {
    id v35 = logObjectForModule_9();
    __int16 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMWritePublicKey_cold_2(v19, v36, v37, v38, v39, v40, v41, v42);
    }
    goto LABEL_19;
  }

  if (!a6)
  {
    id v43 = logObjectForModule_9();
    __int16 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMWritePublicKey_cold_3(v19, v44, v45, v46, v47, v48, v49, v50);
    }
    goto LABEL_19;
  }

  if (!a7)
  {
    id v51 = logObjectForModule_9();
    __int16 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMWritePublicKey_cold_4(v19, v52, v53, v54, v55, v56, v57, v58);
    }
LABEL_19:

    return 1LL;
  }

  if (!a2) {
    return 1LL;
  }
  __int16 v14 = *(_WORD *)(a1 + 200);
  uint64_t v15 = malloc(0x48uLL);
  *a2 = (uint64_t)v15;
  if (!v15) {
    return 0xFFFFFFFFLL;
  }
  iAP2MsgInitWithSom((uint64_t)v15, v14, 20795, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0LL, 0LL);
  iAP2MsgAddU16Param(*a2, 0LL, 0, a3);
  iAP2MsgAddArrayU8Param(*a2, 0LL, 1, a7, 0x40u);
  iAP2MsgAddArrayU8Param(*a2, 0LL, 2, a6, 0x10u);
  uint64_t v16 = iAP2MsgAddGroupParam(*a2, 3);
  iAP2MsgAddU16Param(*a2, (uint64_t)v16, 0, a3);
  iAP2MsgAddArrayU8Param(*a2, (uint64_t)v16, 1, a4, a5);
  uint64_t result = 0LL;
  *(_WORD *)(a1 + 2_Block_object_dispose(va, 8) = 20795;
  return result;
}

uint64_t mfi4Auth_protocol_initMessage_RequestNVMErasePublicKey( uint64_t a1, __int16 a2, uint64_t *a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  if (!a1)
  {
    id v16 = logObjectForModule_9();
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMErasePublicKey_cold_1(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    goto LABEL_16;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v25 = logObjectForModule_9();
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMErasePublicKey_cold_4(v17, v26, v27, v28, v29, v30, v31, v32);
    }
    goto LABEL_16;
  }

  if (!a6)
  {
    id v33 = logObjectForModule_9();
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMErasePublicKey_cold_2(v17, v34, v35, v36, v37, v38, v39, v40);
    }
    goto LABEL_16;
  }

  if (!a7)
  {
    id v41 = logObjectForModule_9();
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMErasePublicKey_cold_3(v17, v42, v43, v44, v45, v46, v47, v48);
    }
LABEL_16:

    return 1LL;
  }

  if (!a3) {
    return 1LL;
  }
  __int16 v14 = malloc(0x48uLL);
  *a3 = (uint64_t)v14;
  if (!v14) {
    return 0xFFFFFFFFLL;
  }
  iAP2MsgInitWithSom((uint64_t)v14, a2, 20796, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0LL, 0LL);
  iAP2MsgAddU16Param(*a3, 0LL, 0, a4);
  iAP2MsgAddArrayU8Param(*a3, 0LL, 1, a7, 0x40u);
  iAP2MsgAddArrayU8Param(*a3, 0LL, 2, a6, 0x10u);
  iAP2MsgAddU16Param(*a3, 0LL, 3, a5);
  uint64_t result = 0LL;
  *(_WORD *)(a1 + 2_Block_object_dispose(va, 8) = 20796;
  return result;
}

uint64_t mfi4Auth_protocol_handle_NVMAuthStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int inited = 1;
  char v53 = 0;
  char v57 = 0;
  __int128 __dst = 0u;
  __int128 v56 = 0u;
  if (!a1)
  {
    id v20 = logObjectForModule_9();
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMAuthStart_cold_1(v17, v21, v22, v23, v24, v25, v26, v27);
    }
    goto LABEL_36;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v28 = logObjectForModule_9();
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMAuthStart_cold_6(v17, v29, v30, v31, v32, v33, v34, v35);
    }
    goto LABEL_36;
  }

  if (!a2)
  {
    id v36 = logObjectForModule_9();
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMAuthStart_cold_2(v17, v37, v38, v39, v40, v41, v42, v43);
    }
    goto LABEL_36;
  }

  if (!a4)
  {
    id v44 = logObjectForModule_9();
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMAuthStart_cold_3(v17, v45, v46, v47, v48, v49, v50, v51);
    }
    goto LABEL_36;
  }

  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0LL);
  int v6 = 0;
  __int16 v7 = 0;
  while (FirstParam)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
    uint64_t v9 = gLogObjects;
    int v10 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v11 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        uint64_t v59 = v9;
        __int16 v60 = 1024;
        int v61 = v10;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
      }

      id v12 = &_os_log_default;
      uint64_t v11 = (os_log_s *)&_os_log_default;
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v59) = ParamID;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "handle_NVMAuthStart: paramID: %d", buf, 8u);
    }

    switch(ParamID)
    {
      case 2:
        int DataAsArrayU8 = iAP2MsgGetDataAsArrayU8(FirstParam, &inited, &__dst, 33);
        if (inited || DataAsArrayU8 != 33) {
          return inited;
        }
        v6 |= 4u;
        break;
      case 1:
        __int16 DataAsU16 = iAP2MsgGetDataAsU16(FirstParam, &inited);
        if (inited) {
          return inited;
        }
        __int16 v7 = DataAsU16;
        v6 |= 2u;
        break;
      case 0:
        iAP2MsgGetDataAsU16(FirstParam, &inited);
        if (inited) {
          return inited;
        }
        v6 |= 1u;
        break;
    }

    unint64_t FirstParam = iAP2MsgGetNextParamWithError(a2, 0LL, FirstParam, &v53);
    if (v53) {
      return inited;
    }
  }

  if (v6 == 7)
  {
    uint64_t v15 = *(void *)(a1 + 712);
    *(_WORD *)(v15 + 136) = v7;
    __int128 v16 = v56;
    *(_OWORD *)(v15 + 13_Block_object_dispose(va, 8) = __dst;
    *(_OWORD *)(v15 + 154) = v16;
    *(_BYTE *)(v15 + 170) = v57;
    unsigned int inited = mfi4Auth_protocol_initSigmaContextNvm(a1);
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v17 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v17 = (os_log_s *)&_os_log_default;
      id v18 = &_os_log_default;
    }

    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMAuthStart_cold_4();
    }
LABEL_36:
  }

  return inited;
}

uint64_t mfi4Auth_protocol_initSigmaContextNvm(uint64_t a1)
{
  if (a1)
  {
    if (!*(_BYTE *)(a1 + 30))
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v2 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v2 = (os_log_s *)&_os_log_default;
        id v3 = &_os_log_default;
      }

      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v28 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_initSigmaContextNvm",  v28,  2u);
      }

      id v4 = *(void **)(a1 + 712);
      CFDataRef v5 = malloc(0x2F0uLL);
      void *v4 = v5;
      if (v5)
      {
        if (*(void *)(a1 + 104))
        {
          if (gLogObjects && gNumLogObjects >= 56)
          {
            int v6 = (os_log_s *)*(id *)(gLogObjects + 440);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            int v6 = (os_log_s *)&_os_log_default;
            id v7 = &_os_log_default;
          }

          uint64_t v8 = 2863311530LL;
          if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_initSigmaContextNvm_cold_4();
          }
          goto LABEL_21;
        }

        id v27 = logObjectForModule_9();
        int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_protocol_initSigmaContextNvm_cold_3();
        }
      }

      else
      {
        id v26 = logObjectForModule_9();
        int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_protocol_initSigmaContextNvm_cold_2();
        }
      }

      uint64_t v8 = 0xFFFFFFFFLL;
      goto LABEL_21;
    }

    uint64_t v8 = 2863311530LL;
    id v18 = logObjectForModule_9();
    int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initSigmaContextNvm_cold_7(v6, v19, v20, v21, v22, v23, v24, v25);
    }
  }

  else
  {
    uint64_t v8 = 2863311530LL;
    id v10 = logObjectForModule_9();
    int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initSigmaContextNvm_cold_1(v6, v11, v12, v13, v14, v15, v16, v17);
    }
  }

uint64_t mfi4Auth_protocol_handle_NVMAuthFinish(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unsigned int inited = 1;
  char v105 = 0;
  memset(__dst, 0, sizeof(__dst));
  __int128 v111 = 0u;
  __int128 v112 = 0u;
  *(_OWORD *)__int128 bytes = 0u;
  __int128 v110 = 0u;
  char v108 = 69;
  v107[0] = xmmword_10019DFF2;
  v107[1] = unk_10019E002;
  v107[2] = xmmword_10019E012;
  v107[3] = unk_10019E022;
  if (!a1)
  {
    id v55 = logObjectForModule_9();
    __int128 v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMAuthFinish_cold_2(v56, v57, v58, v59, v60, v61, v62, v63);
    }
    goto LABEL_149;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v64 = logObjectForModule_9();
    __int128 v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMAuthFinish_cold_26(v56, v65, v66, v67, v68, v69, v70, v71);
    }
    goto LABEL_149;
  }

  if (!a2)
  {
    id v72 = logObjectForModule_9();
    __int128 v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v72);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMAuthFinish_cold_3(v56, v73, v74, v75, v76, v77, v78, v79);
    }
    goto LABEL_149;
  }

  if (!a4)
  {
    id v80 = logObjectForModule_9();
    __int128 v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMAuthFinish_cold_4(v56, v81, v82, v83, v84, v85, v86, v87);
    }
LABEL_149:

    uint64_t v17 = 0LL;
    goto LABEL_156;
  }

  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0LL);
  LOWORD(ParamValueLen) = 0;
  id v7 = 0LL;
  int v8 = 0;
  while (FirstParam)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
    uint64_t v10 = gLogObjects;
    int v11 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v12 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = v10;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = v11;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
      }

      id v13 = &_os_log_default;
      uint64_t v12 = (os_log_s *)&_os_log_default;
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = ParamID;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "handle_NVMAuthFinish: paramID: %d", buf, 8u);
    }

    if (ParamID == 2)
    {
      unsigned int ParamValueLen = iAP2MsgGetParamValueLen(FirstParam);
      uint64_t v14 = calloc(ParamValueLen, 1uLL);
      int DataAsArrayU8 = iAP2MsgGetDataAsArrayU8(FirstParam, &inited, v14, ParamValueLen);
      if (inited || DataAsArrayU8 != ParamValueLen) {
        goto LABEL_155;
      }
      uint64_t v16 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)v14, ParamValueLen);
      uint64_t v17 = _dumpSimpleHex(v16);

      uint64_t v18 = gLogObjects;
      int v19 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v20 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)&uint8_t buf[4] = v18;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = v19;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
        }

        id v22 = &_os_log_default;
        uint64_t v20 = (os_log_s *)&_os_log_default;
      }

      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = ParamValueLen;
        *(_WORD *)&buf[8] = 2112;
        *(void *)&buf[10] = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "handle_NVMAuthFinish: A_c1[%d]: %@",  buf,  0x12u);
      }

      v8 |= 4u;
    }

    else
    {
      if (ParamID == 1)
      {
        int v21 = iAP2MsgGetDataAsArrayU8(FirstParam, &inited, __dst, 80);
        if (inited || v21 != 80) {
          goto LABEL_155;
        }
        v8 |= 2u;
      }

      else if (!ParamID)
      {
        iAP2MsgGetDataAsU16(FirstParam, &inited);
        if (inited) {
          goto LABEL_155;
        }
        v8 |= 1u;
      }

      uint64_t v17 = v7;
    }

    unint64_t FirstParam = iAP2MsgGetNextParamWithError(a2, 0LL, FirstParam, &v105);
    id v7 = v17;
    if (v105) {
      goto LABEL_156;
    }
  }

  if (v8 == 7)
  {
    uint64_t v23 = *(void *)(a1 + 712);
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v24 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v24 = (os_log_s *)&_os_log_default;
      id v25 = &_os_log_default;
    }

    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "handle_NVMAuthFinish: ccsigma_open", buf, 2u);
    }

    if (inited)
    {
      id v88 = logObjectForModule_9();
      id v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v88);
      if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_handle_NVMAuthFinish_cold_17();
      }
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        id v26 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v26 = (os_log_s *)&_os_log_default;
        id v27 = &_os_log_default;
      }

      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "handle_NVMAuthFinish: ccsigma_import_peer_verification_key",  buf,  2u);
      }

      unsigned int inited = ccsigma_import_peer_verification_key(*(void *)v23, 65LL, (unsigned __int8 *)v107);
      if (!inited)
      {
        id v28 = *(uint64_t **)(a1 + 712);
        printSessionKeys(*v28, 1);
        uint64_t v29 = CFDataCreate(kCFAllocatorDefault, bytes, 64LL);
        uint64_t v17 = _dumpSimpleHex(v29);

        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v30 = (os_log_s *)*(id *)(gLogObjects + 440);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v30 = (os_log_s *)&_os_log_default;
          id v31 = &_os_log_default;
        }

        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "handle_NVMAuthFinish: A_sig: %@",  buf,  0xCu);
        }

        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v32 = (os_log_s *)*(id *)(gLogObjects + 440);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v32 = (os_log_s *)&_os_log_default;
          id v33 = &_os_log_default;
        }

        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "handle_NVMAuthFinish: ccsigma_verify",  buf,  2u);
        }

        unsigned int inited = ccsigma_verify((_DWORD *)*v28, (uint64_t)bytes, 64LL, (uint64_t)v107 + 1);
        if (inited)
        {
          id v95 = logObjectForModule_9();
          char v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v95);
          if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_NVMAuthFinish_cold_19();
          }
          goto LABEL_179;
        }

        calloc((unsigned __int16)ParamValueLen - 22LL, 1uLL);
        if (gLogObjects && gNumLogObjects >= 56)
        {
          uint64_t v34 = (os_log_s *)*(id *)(gLogObjects + 440);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v34 = (os_log_s *)&_os_log_default;
          id v35 = &_os_log_default;
        }

        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "handle_NVMAuthFinish: ccsigma_open A_c1",  buf,  2u);
        }

        if (inited)
        {
          id v96 = logObjectForModule_9();
          char v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v96);
          if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
            mfi4Auth_protocol_handle_NVMAuthFinish_cold_17();
          }
          goto LABEL_179;
        }

        int v36 = *(_DWORD *)(a1 + 32);
        if (v36 == 8)
        {
          if (gLogObjects && gNumLogObjects >= 56)
          {
            uint64_t v38 = (os_log_s *)*(id *)(gLogObjects + 440);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            uint64_t v38 = (os_log_s *)&_os_log_default;
            id v41 = &_os_log_default;
          }

          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "handle_NVMAuthFinish: Action_WriteUserName",  buf,  2u);
          }

          *(void *)buf = 0LL;
          unsigned int inited = mfi4Auth_protocol_initMessage_RequestUserNVMWrite( a1,  *(_WORD *)(v23 + 136),  (uint64_t *)buf,  *(unsigned __int16 **)(a1 + 40),  *(uint64_t **)(a1 + 48),  *(_DWORD **)(a1 + 56),  *(unsigned __int8 *)(a1 + 36),  0LL,  0LL);
          if (!inited)
          {
            if (gLogObjects && gNumLogObjects >= 56)
            {
              uint64_t v42 = (os_log_s *)*(id *)(gLogObjects + 440);
            }

            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
              uint64_t v42 = (os_log_s *)&_os_log_default;
              id v47 = &_os_log_default;
            }

            if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)id v104 = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "handle_NVMAuthFinish: encryptPayload",  v104,  2u);
            }

            if (!inited)
            {
              size_t MsgLen = iAP2MsgGetMsgLen(*(uint64_t *)buf);
              uint64_t v49 = calloc(MsgLen, 1uLL);
              memcpy(v49, *(const void **)(*(void *)buf + 24LL), MsgLen);
              if (gLogObjects && gNumLogObjects >= 56)
              {
                uint64_t v50 = (os_log_s *)*(id *)(gLogObjects + 440);
              }

              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
                uint64_t v50 = (os_log_s *)&_os_log_default;
                id v54 = &_os_log_default;
              }

              if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)id v104 = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "handle_NVMAuthFinish: initMessage_RequestNVMOperation",  v104,  2u);
              }

              unsigned int inited = mfi4Auth_protocol_initMessage_RequestNVMOperation(a1, a3, (uint64_t)v49, MsgLen);
              if (inited)
              {
                id v101 = logObjectForModule_9();
                char v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v101);
                if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
LABEL_178:
                }
                  mfi4Auth_protocol_handle_NVMAuthFinish_cold_5();
LABEL_179:

                goto LABEL_156;
              }

LABEL_140:
              unsigned int inited = 0;
              goto LABEL_156;
            }

            id v100 = logObjectForModule_9();
            char v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v100);
            if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
              goto LABEL_179;
            }
LABEL_174:
            mfi4Auth_protocol_handle_NVMAuthFinish_cold_7();
            goto LABEL_179;
          }

          id v98 = logObjectForModule_9();
          char v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v98);
          if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
            goto LABEL_179;
          }
        }

        else
        {
          if (v36 != 5) {
            goto LABEL_140;
          }
          if (gLogObjects && gNumLogObjects >= 56)
          {
            uint64_t v37 = (os_log_s *)*(id *)(gLogObjects + 440);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            uint64_t v37 = (os_log_s *)&_os_log_default;
            id v39 = &_os_log_default;
          }

          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "handle_NVMAuthFinish: Action_EraseUserKey",  buf,  2u);
          }

          *(void *)buf = 0LL;
          unsigned int inited = mfi4Auth_protocol_initMessage_RequestNVMPublicKeyChallenge( a1,  *(_WORD *)(v23 + 136),  (uint64_t *)buf,  0x5300u);
          if (!inited)
          {
            if (gLogObjects && gNumLogObjects >= 56)
            {
              uint64_t v40 = (os_log_s *)*(id *)(gLogObjects + 440);
            }

            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
              uint64_t v40 = (os_log_s *)&_os_log_default;
              id v43 = &_os_log_default;
            }

            if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)id v104 = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "handle_NVMAuthFinish: encryptPayload",  v104,  2u);
            }

            if (!inited)
            {
              size_t v44 = iAP2MsgGetMsgLen(*(uint64_t *)buf);
              uint64_t v45 = calloc(v44, 1uLL);
              memcpy(v45, *(const void **)(*(void *)buf + 24LL), v44);
              if (gLogObjects && gNumLogObjects >= 56)
              {
                uint64_t v46 = (os_log_s *)*(id *)(gLogObjects + 440);
              }

              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
                uint64_t v46 = (os_log_s *)&_os_log_default;
                id v51 = &_os_log_default;
              }

              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)id v104 = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "handle_NVMAuthFinish: initMessage_RequestNVMOperation",  v104,  2u);
              }

              unsigned int inited = mfi4Auth_protocol_initMessage_RequestNVMOperation(a1, a3, (uint64_t)v45, v44);
              if (inited)
              {
                id v52 = logObjectForModule_9();
                char v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
                if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_178;
                }
                goto LABEL_179;
              }

              goto LABEL_140;
            }

            id v99 = logObjectForModule_9();
            char v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v99);
            if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
              goto LABEL_179;
            }
            goto LABEL_174;
          }

          id v97 = logObjectForModule_9();
          char v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v97);
          if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
            goto LABEL_179;
          }
        }

        mfi4Auth_protocol_handle_NVMAuthFinish_cold_9();
        goto LABEL_179;
      }

      id v90 = logObjectForModule_9();
      id v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v90);
      if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_handle_NVMAuthFinish_cold_22();
      }
    }
  }

LABEL_155:
  uint64_t v17 = v7;
LABEL_156:
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v91 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v91 = (os_log_s *)&_os_log_default;
    id v92 = &_os_log_default;
  }

  if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEFAULT, "handle_NVMAuthFinish: completed", buf, 2u);
  }

  uint64_t v93 = inited;
  return v93;
}
    }

    uint64_t v63 = v61;
    id v64 = iAP2MsgAddGroupParam((uint64_t)buf, 2);
    uint64_t v65 = 0LL;
    while (1)
    {
      if (((v62 >> v65) & 1) != 0)
      {
        if ((int)v65 > 11)
        {
          switch((int)v65)
          {
            case 12:
              uint64_t v66 = (const __CFString *)CFDictionaryGetValue(v63, @"Artist");
              if (v66)
              {
                uint64_t v67 = v66;
                uint64_t v68 = (uint64_t)v64;
                uint64_t v69 = 12;
                goto LABEL_153;
              }

              break;
            case 14:
              uint64_t v71 = (const __CFString *)CFDictionaryGetValue(v63, @"AlbumArtist");
              if (v71)
              {
                uint64_t v67 = v71;
                uint64_t v68 = (uint64_t)v64;
                uint64_t v69 = 14;
                goto LABEL_153;
              }

              break;
            case 16:
              id v72 = (const __CFString *)CFDictionaryGetValue(v63, @"Genre");
              if (v72)
              {
                uint64_t v67 = v72;
                uint64_t v68 = (uint64_t)v64;
                uint64_t v69 = 16;
                goto LABEL_153;
              }

              break;
            case 18:
              uint64_t v73 = (const __CFString *)CFDictionaryGetValue(v63, @"Composer");
              if (v73)
              {
                uint64_t v67 = v73;
                uint64_t v68 = (uint64_t)v64;
                uint64_t v69 = 18;
                goto LABEL_153;
              }

              break;
            default:
              goto LABEL_154;
          }

          goto LABEL_154;
        }

        if (!(_DWORD)v65)
        {
          uint64_t v74 = (const __CFNumber *)CFDictionaryGetValue(v63, @"PersistentID");
          id v132 = 0LL;
          if (v74 && CFNumberGetValue(v74, kCFNumberSInt64Type, &v132)) {
            iAP2MsgAddU64Param((uint64_t)buf, (uint64_t)v64, 0, v132);
          }
          goto LABEL_154;
        }

        if ((_DWORD)v65 != 1)
        {
          if ((_DWORD)v65 != 6) {
            goto LABEL_154;
          }
          uint64_t v70 = (const __CFString *)CFDictionaryGetValue(v63, @"AlbumTitle");
          if (!v70) {
            goto LABEL_154;
          }
          uint64_t v67 = v70;
          uint64_t v68 = (uint64_t)v64;
          uint64_t v69 = 6;
          goto LABEL_153;
        }

        uint64_t v75 = (const __CFString *)CFDictionaryGetValue(v63, @"Title");
        if (v75)
        {
          uint64_t v67 = v75;
          uint64_t v68 = (uint64_t)v64;
          uint64_t v69 = 1;
LABEL_153:
          iAP2MsgAddCFStringParam((uint64_t)buf, v68, v69, v67);
        }
      }

void printSessionKeys(uint64_t a1, int a2)
{
  uint64_t v2 = 0LL;
  id v3 = 0LL;
  id v4 = (char *)&unk_1001FAAB8;
  if (a2)
  {
    id v4 = (char *)&unk_1001FAA18;
    uint64_t v5 = 10LL;
  }

  else
  {
    uint64_t v5 = 14LL;
  }

  int v6 = (uint64_t *)(v4 + 8);
  do
  {
    uint64_t v7 = gLogObjects;
    int v8 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v9 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        uint64_t v24 = v7;
        __int16 v25 = 1024;
        int v26 = v8;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
      }

      id v10 = &_os_log_default;
      uint64_t v9 = (os_log_s *)&_os_log_default;
    }

    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *v6;
      *(_DWORD *)buf = 136315138;
      uint64_t v24 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "mfi4 %s = ", buf, 0xCu);
    }

    uint64_t v12 = *(v6 - 1);
    id v13 = _dumpSimpleHex((const __CFData *)+[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  a1 + v2 + 544,  v12));

    uint64_t v14 = gLogObjects;
    int v15 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v16 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        uint64_t v24 = v14;
        __int16 v25 = 1024;
        int v26 = v15;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
      }

      id v17 = &_os_log_default;
      uint64_t v16 = (os_log_s *)&_os_log_default;
    }

    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v24 = (uint64_t)v13;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "mfi4 %@", buf, 0xCu);
    }

    uint64_t v18 = gLogObjects;
    int v19 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v20 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        uint64_t v24 = v18;
        __int16 v25 = 1024;
        int v26 = v19;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
      }

      id v21 = &_os_log_default;
      uint64_t v20 = (os_log_s *)&_os_log_default;
    }

    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "\n", buf, 2u);
    }

    v2 += v12;

    v6 += 2;
    id v3 = v13;
    --v5;
  }

  while (v5);
}

uint64_t mfi4Auth_protocol_initMessage_RequestNVMPublicKeyChallenge( uint64_t a1, __int16 a2, uint64_t *a3, unsigned int a4)
{
  if (!a1)
  {
    id v10 = logObjectForModule_9();
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMPublicKeyChallenge_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    goto LABEL_10;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v19 = logObjectForModule_9();
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMPublicKeyChallenge_cold_2(v11, v20, v21, v22, v23, v24, v25, v26);
    }
LABEL_10:

    return 1LL;
  }

  if (!a3) {
    return 1LL;
  }
  int v8 = malloc(0x48uLL);
  *a3 = (uint64_t)v8;
  if (!v8) {
    return 0xFFFFFFFFLL;
  }
  iAP2MsgInitWithSom((uint64_t)v8, a2, 20793, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0LL, 0LL);
  iAP2MsgAddU16Param(*a3, 0LL, 0, a4);
  uint64_t result = 0LL;
  *(_WORD *)(a1 + 2_Block_object_dispose(va, 8) = 20793;
  return result;
}

uint64_t mfi4Auth_protocol_initMessage_RequestNVMOperation( uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  if (!a1)
  {
    id v11 = logObjectForModule_9();
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMOperation_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    goto LABEL_13;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v20 = logObjectForModule_9();
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMOperation_cold_3(v12, v21, v22, v23, v24, v25, v26, v27);
    }
    goto LABEL_13;
  }

  if (!a3)
  {
    id v28 = logObjectForModule_9();
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestNVMOperation_cold_2(v12, v29, v30, v31, v32, v33, v34, v35);
    }
LABEL_13:

    return 1LL;
  }

  if (!a2) {
    return 1LL;
  }
  __int16 v8 = *(_WORD *)(a1 + 200);
  uint64_t v9 = malloc(0x48uLL);
  *a2 = (uint64_t)v9;
  if (!v9) {
    return 0xFFFFFFFFLL;
  }
  iAP2MsgInitWithSom((uint64_t)v9, v8, 20809, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0LL, 0LL);
  iAP2MsgAddArrayU8Param(*a2, 0LL, 0, a3, a4);
  uint64_t result = 0LL;
  *(_WORD *)(a1 + 2_Block_object_dispose(va, 8) = 20809;
  return result;
}

uint64_t mfi4Auth_protocol_handle_NVMOperationResponse(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unsigned int inited = 1;
  if (!a1)
  {
    id v27 = logObjectForModule_9();
    id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMOperationResponse_cold_1(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    goto LABEL_58;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v36 = logObjectForModule_9();
    id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMOperationResponse_cold_9(v28, v37, v38, v39, v40, v41, v42, v43);
    }
    goto LABEL_58;
  }

  if (!a2)
  {
    id v44 = logObjectForModule_9();
    id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMOperationResponse_cold_2(v28, v45, v46, v47, v48, v49, v50, v51);
    }
    goto LABEL_58;
  }

  if (!a4)
  {
    id v52 = logObjectForModule_9();
    id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_handle_NVMOperationResponse_cold_3(v28, v53, v54, v55, v56, v57, v58, v59);
    }
    goto LABEL_58;
  }

  char v69 = 0;
  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0LL);
  int v6 = 0;
  uint64_t v7 = 0LL;
  LOWORD(ParamValueLen) = -21846;
  while (FirstParam)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
    uint64_t v10 = gLogObjects;
    int v11 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 56)
    {
      uint64_t v12 = (os_log_s *)*(id *)(gLogObjects + 440);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = v10;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = v11;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
      }

      id v13 = &_os_log_default;
      uint64_t v12 = (os_log_s *)&_os_log_default;
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = ParamID;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "handle_NVMOperationResponse: paramID: %d",  buf,  8u);
    }

    if (ParamID
      || (unsigned int ParamValueLen = iAP2MsgGetParamValueLen(FirstParam),
          int v6 = 1,
          uint64_t v7 = calloc(ParamValueLen, 1uLL),
          int DataAsArrayU8 = iAP2MsgGetDataAsArrayU8(FirstParam, &inited, v7, ParamValueLen),
          !inited)
      && DataAsArrayU8 == ParamValueLen)
    {
      unint64_t FirstParam = iAP2MsgGetNextParamWithError(a2, 0LL, FirstParam, &v69);
      if (!v69) {
        continue;
      }
    }

    return inited;
  }

  if (v6 == 1)
  {
    uint64_t v15 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)v7, (unsigned __int16)ParamValueLen);
    unint64_t v76 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v16 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __int128 v74 = v16;
    __int128 v75 = v16;
    *(_OWORD *)buf = v16;
    *(_OWORD *)&uint8_t buf[16] = v16;
    uint64_t v68 = 0LL;
    uint64_t v17 = *(void *)(a1 + 712);
    uint64_t v18 = *(unsigned __int16 *)(v17 + 136);
    uint64_t v19 = mfi4Auth_protocol_parse(a1, (uint64_t)buf, v15, *(_WORD *)(v17 + 136));
    if (v19)
    {
      uint64_t v20 = v19;
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 56)
      {
        uint64_t v21 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v21 = (os_log_s *)&_os_log_default;
        id v22 = &_os_log_default;
      }

      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v71 = 67109120;
        int v72 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "handle_NVMOperationResponse: Found no message starting with: %x",  v71,  8u);
      }

      uint64_t v23 = mfi4Auth_protocol_parse(a1, (uint64_t)buf, v15, 0);
      if (!v23)
      {
        unsigned int inited = -1;
        id v60 = logObjectForModule_9();
        id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t v71 = 67109120;
          int v72 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "handle_NVMOperationResponse: Found no message starting with: %x",  v71,  8u);
        }

        goto LABEL_58;
      }

      uint64_t v20 = v23;
      uint64_t v18 = 0LL;
    }

    if (inited)
    {
      id v61 = logObjectForModule_9();
      id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_handle_NVMOperationResponse_cold_7();
      }
    }

    else if ((mfi4Auth_protocol_processIncomingMessageExtra(a1, v18, v20, &v68, a4) & 1) != 0)
    {
      if (!v68) {
        return 0;
      }
      if (inited)
      {
        id v63 = logObjectForModule_9();
        id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_protocol_handle_NVMOperationResponse_cold_5();
        }
      }

      else
      {
        size_t MsgLen = iAP2MsgGetMsgLen(v68);
        uint64_t v25 = calloc(MsgLen, 1uLL);
        memcpy(v25, *(const void **)(v68 + 24), MsgLen);
        unsigned int inited = mfi4Auth_protocol_initMessage_RequestNVMOperation(a1, a3, (uint64_t)v25, MsgLen);
        if (!inited) {
          return 0;
        }
        id v64 = logObjectForModule_9();
        id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
          mfi4Auth_protocol_handle_NVMOperationResponse_cold_4();
        }
      }
    }

    else
    {
      id v62 = logObjectForModule_9();
      id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_handle_NVMOperationResponse_cold_6();
      }
    }

uint64_t mfi4Auth_protocol_parse(uint64_t a1, uint64_t a2, CFDataRef theData, __int16 a4)
{
  if (!a1)
  {
    id v15 = logObjectForModule_9();
    __int128 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_parse_cold_1(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    goto LABEL_19;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v24 = logObjectForModule_9();
    __int128 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_parse_cold_4(v16, v25, v26, v27, v28, v29, v30, v31);
    }
    goto LABEL_19;
  }

  if (!a2)
  {
    id v32 = logObjectForModule_9();
    __int128 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_parse_cold_2(v16, v33, v34, v35, v36, v37, v38, v39);
    }
    goto LABEL_19;
  }

  if (!theData)
  {
    id v40 = logObjectForModule_9();
    __int128 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_parse_cold_3(v16, v41, v42, v43, v44, v45, v46, v47);
    }
LABEL_19:

    return 0LL;
  }

  unsigned int Length = CFDataGetLength(theData);
  BytePtr = (char *)CFDataGetBytePtr(theData);
  iAP2MsgInitWithSom(a2, a4, 0, 0LL, 0, 0LL, 0LL);
  uint64_t v10 = iAP2MsgParserInit(0xFFFF, *(void *)(a1 + 8), 0LL, a4);
  uint64_t v11 = Length;
  if (!Length) {
    return 0LL;
  }
  uint64_t v12 = (unsigned __int16 *)v10;
  while (1)
  {
    char v13 = *BytePtr++;
    uint64_t result = iAP2MsgParserConsumeByte(v12, v13, a2);
    if (result) {
      break;
    }
    if (!--v11) {
      return 0LL;
    }
  }

  return result;
}

uint64_t mfi4Auth_protocol_initMessage_RequestVendorNVMRead( uint64_t a1, uint64_t *a2, unsigned __int16 *a3, int a4)
{
  if (!a1)
  {
    id v14 = logObjectForModule_9();
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestVendorNVMRead_cold_1(v15, v16, v17, v18, v19, v20, v21, v22);
    }
    goto LABEL_16;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v23 = logObjectForModule_9();
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestVendorNVMRead_cold_3(v15, v24, v25, v26, v27, v28, v29, v30);
    }
    goto LABEL_16;
  }

  uint64_t v5 = a3;
  if (!a3)
  {
    id v31 = logObjectForModule_9();
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestVendorNVMRead_cold_2(v15, v32, v33, v34, v35, v36, v37, v38);
    }
LABEL_16:

    return 1LL;
  }

  if (!a2) {
    return 1LL;
  }
  LODWORD(v7) = a4;
  __int16 v8 = *(_WORD *)(a1 + 200);
  uint64_t v9 = malloc(0x48uLL);
  *a2 = (uint64_t)v9;
  if (!v9) {
    return 0xFFFFFFFFLL;
  }
  iAP2MsgInitWithSom((uint64_t)v9, v8, 20785, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0LL, 0LL);
  __int16 v10 = _convertUserVendorNVMRead(a1, 2LL);
  if ((_DWORD)v7)
  {
    __int16 v11 = v10;
    uint64_t v7 = v7;
    do
    {
      unsigned int v12 = *v5++;
      iAP2MsgAddU16Param(*a2, 0LL, v11, v12);
      --v7;
    }

    while (v7);
  }

  uint64_t result = 0LL;
  *(_WORD *)(a1 + 2_Block_object_dispose(va, 8) = 20785;
  return result;
}

uint64_t mfi4Auth_protocol_initMessage_RequestManufacturerNVMRead( uint64_t a1, uint64_t *a2, unsigned __int16 *a3, int a4)
{
  if (!a1)
  {
    id v14 = logObjectForModule_9();
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestManufacturerNVMRead_cold_1(v15, v16, v17, v18, v19, v20, v21, v22);
    }
    goto LABEL_16;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v23 = logObjectForModule_9();
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestManufacturerNVMRead_cold_3(v15, v24, v25, v26, v27, v28, v29, v30);
    }
    goto LABEL_16;
  }

  uint64_t v5 = a3;
  if (!a3)
  {
    id v31 = logObjectForModule_9();
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_initMessage_RequestManufacturerNVMRead_cold_2(v15, v32, v33, v34, v35, v36, v37, v38);
    }
LABEL_16:

    return 1LL;
  }

  if (!a2) {
    return 1LL;
  }
  LODWORD(v7) = a4;
  __int16 v8 = *(_WORD *)(a1 + 200);
  uint64_t v9 = malloc(0x48uLL);
  *a2 = (uint64_t)v9;
  if (!v9) {
    return 0xFFFFFFFFLL;
  }
  iAP2MsgInitWithSom((uint64_t)v9, v8, 20802, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0LL, 0LL);
  __int16 v10 = _convertUserVendorNVMRead(a1, 2LL);
  if ((_DWORD)v7)
  {
    __int16 v11 = v10;
    uint64_t v7 = v7;
    do
    {
      unsigned int v12 = *v5++;
      iAP2MsgAddU16Param(*a2, 0LL, v11, v12);
      --v7;
    }

    while (v7);
  }

  uint64_t result = 0LL;
  *(_WORD *)(a1 + 2_Block_object_dispose(va, 8) = 20802;
  return result;
}

uint64_t _convertUserNVMWrite(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!a1)
  {
    id v5 = logObjectForModule_9();
    int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      _convertUserNVMWrite_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    goto LABEL_14;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v14 = logObjectForModule_9();
    int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      _convertUserNVMWrite_cold_2(v6, v15, v16, v17, v18, v19, v20, v21);
    }
LABEL_14:

    return v2;
  }

  if (*(_BYTE *)(a1 + 144) == 3 && (_DWORD)a2 == 2) {
    return 0LL;
  }
  else {
    return a2;
  }
}

uint64_t mfi4Auth_protocol_requestNvmErasePublicKey( uint64_t a1, CFDataRef theData, const __CFData *a3, unsigned int a4, uint64_t *a5)
{
  if (!a1)
  {
    id v11 = logObjectForModule_9();
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_requestNvmErasePublicKey_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    goto LABEL_14;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v20 = logObjectForModule_9();
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_requestNvmErasePublicKey_cold_2(v12, v21, v22, v23, v24, v25, v26, v27);
    }
LABEL_14:

    return 1LL;
  }

  *(void *)buffer = 0LL;
  uint64_t v30 = 0LL;
  memset(v28, 0, sizeof(v28));
  if (!a5) {
    return 1LL;
  }
  uint64_t result = 1LL;
  if (theData && a3)
  {
    if (CFDataGetLength(theData) == 16 && CFDataGetLength(a3) == 64)
    {
      v31.location = 0LL;
      v31.length = 16LL;
      CFDataGetBytes(theData, v31, buffer);
      v32.location = 0LL;
      v32.length = 64LL;
      CFDataGetBytes(a3, v32, (UInt8 *)v28);
      return mfi4Auth_protocol_initMessage_RequestNVMErasePublicKey( a1,  *(_WORD *)(a1 + 200),  a5,  a4,  0x5300u,  (uint64_t)buffer,  (uint64_t)v28);
    }

    return 1LL;
  }

  return result;
}

uint64_t mfi4Auth_protocol_nvm_copyUserPublicKeyForSerialNumber(uint64_t a1)
{
  SecKeyRef v1 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"com.apple.accessoryd.mfi4.userPublicKey.%@",  a1));
  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v2 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v2 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v10 = v1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "copyUserPublicKeyForSerialNumber: featureTag: %@",  buf,  0xCu);
  }

  uint64_t v4 = MFi4AuthFeatureGroup();
  uint64_t v5 = CopySynchronizableKeyForAuthFeature(0LL, v1, v4);
  if (!v5)
  {
    id v7 = logObjectForModule_9();
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_nvm_copyUserPublicKeyForSerialNumber_cold_1();
    }
  }

  return v5;
}

_OWORD *_getCachedUserPublicKey(uint64_t a1)
{
  __int16 valuePtr = 21248;
  CFNumberRef v2 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
  if (!a1)
  {
    id v10 = logObjectForModule_9();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      _getCachedUserPublicKey_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    goto LABEL_9;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v19 = logObjectForModule_9();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      _getCachedUserPublicKey_cold_2(v11, v20, v21, v22, v23, v24, v25, v26);
    }
LABEL_9:

    return 0LL;
  }

  uint64_t Value = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(a1 + 712) + 48LL), v2);
  uint64_t v4 = calloc(1uLL, 0x40uLL);
  BytePtr = CFDataGetBytePtr(Value);
  __int128 v6 = *((_OWORD *)BytePtr + 3);
  __int128 v8 = *(_OWORD *)BytePtr;
  __int128 v7 = *((_OWORD *)BytePtr + 1);
  _DWORD v4[2] = *((_OWORD *)BytePtr + 2);
  v4[3] = v6;
  _OWORD *v4 = v8;
  v4[1] = v7;
  return v4;
}

uint64_t mfi4Auth_protocol_convertUserAccessoryInfoToAction(uint64_t a1, CFStringRef theString)
{
  uint64_t v41 = 0LL;
  CFIndex Length = CFStringGetLength(theString);
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  CFIndex usedBufLen = 0LL;
  __int128 v6 = (UInt8 *)calloc(MaximumSizeForEncoding + 1, 1uLL);
  v44.location = 0LL;
  v44.length = Length;
  CFStringGetBytes(theString, v44, 0x8000100u, 0, 0, v6, MaximumSizeForEncoding, &usedBufLen);
  if (gLogObjects && gNumLogObjects >= 56)
  {
    __int128 v7 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int128 v7 = (os_log_s *)&_os_log_default;
    id v8 = &_os_log_default;
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v43 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "convert: accessoryUserName: %s", buf, 0xCu);
  }

  if (!a1)
  {
    id v23 = logObjectForModule_9();
    uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_convertUserAccessoryInfoToAction_cold_1(v24, v25, v26, v27, v28, v29, v30, v31);
    }
    goto LABEL_35;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v32 = logObjectForModule_9();
    uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_convertUserAccessoryInfoToAction_cold_3(v24, v33, v34, v35, v36, v37, v38, v39);
    }
LABEL_35:

    id v10 = 0LL;
    goto LABEL_36;
  }

  _generateUserAccessoryInfoPayload(a1, (uint64_t)v6, usedBufLen + 1, (uint64_t *)&v41);
  uint64_t v9 = +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  *(void *)(a1 + 16),  iAP2MsgGetMsgLen((uint64_t)v41));
  id v10 = _dumpSimpleHex((const __CFData *)v9);
  if (gLogObjects && gNumLogObjects >= 56)
  {
    id v11 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v11 = (os_log_s *)&_os_log_default;
    id v12 = &_os_log_default;
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v43 = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "payload: %@", buf, 0xCu);
  }

  unsigned int MsgLen = iAP2MsgGetMsgLen((uint64_t)v41);
  if (MsgLen)
  {
    unsigned int v14 = MsgLen;
    uint64_t v15 = (MsgLen - 1) / 0xF0 + 1;
    *(_DWORD *)(a1 + 36) = v15;
    uint64_t v16 = malloc(2 * v15);
    *(void *)(a1 + 40) = v16;
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = malloc(8LL * v15);
    uint64_t v17 = malloc(4LL * v15);
    uint64_t v18 = 0LL;
    *(void *)(a1 + 56) = v17;
    do
    {
      v16[v18] = v18 + 21250;
      ++v18;
    }

    while (v15 != v18);
    uint64_t v19 = 0LL;
    if (v14 >= 0xF0) {
      size_t v20 = 240LL;
    }
    else {
      size_t v20 = v14;
    }
    do
    {
      **(_DWORD **)(a1 + 56) = v20;
      **(void **)(a1 + 4_Block_object_dispose(va, 8) = calloc(1uLL, v20);
      memcpy(**(void ***)(a1 + 48), (const void *)(*(void *)(a1 + 16) + v19), v20);
      v19 += v20;
    }

    while (v14 != (_DWORD)v19);
    uint64_t v21 = 0LL;
    if (v6) {
      goto LABEL_27;
    }
    goto LABEL_28;
  }

LABEL_36:
  uint64_t v21 = 0xFFFFFFFFLL;
  if (v6) {
LABEL_27:
  }
    free(v6);
LABEL_28:
  if (v41)
  {
    free(v41);
    uint64_t v41 = 0LL;
  }

  return v21;
}

        if (gLogObjects && gNumLogObjects >= 17)
        {
          id v8 = *(os_log_s **)(gLogObjects + 128);
        }

        else
        {
          id v8 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        uint64_t result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
        if (result)
        {
          acc_protocolRouter_routeIncomingData_cold_1();
          uint64_t result = 0LL;
        }

        break;
    }
  }

  return result;
}

              report_response = 0LL;
              uint64_t result = 0LL;
              if (v6)
              {
LABEL_37:
                CFRelease(v6);
                uint64_t result = report_response;
              }

              break;
            case 2:
              uint64_t v15 = iAP2MsgGetDataAsU8(NextParam, &v27);
              if (v27)
              {
                uint64_t v22 = (os_log_s *)logObjectForModule_30();
                if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
                  iap2_mediaLibrary_playMediaLibraryItemsHandler_cold_4(a2);
                }
                goto LABEL_36;
              }

              LOBYTE(v24) = v15;
              HIDWORD(v25) = 1;
              goto LABEL_24;
            case 3:
              unsigned int ParamValueLen = iAP2MsgGetParamValueLen(NextParam);
              DataAsData = iAP2MsgGetDataAsData((uint64_t)NextParam, &v27);
              if (v27)
              {
                id v23 = (os_log_s *)logObjectForModule_30();
                if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
                  iap2_mediaLibrary_playMediaLibraryCollectionHandler_cold_5(a2);
                }
                goto LABEL_36;
              }

              uint64_t v18 = (const UInt8 *)DataAsData;
              if (v6) {
                CFRelease(v6);
              }
              __int128 v6 = CFDataCreate(kCFAllocatorDefault, v18, ParamValueLen);
              goto LABEL_24;
            default:
              id v11 = gLogObjects;
              id v12 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 33)
              {
                uint64_t v13 = *(os_log_s **)(gLogObjects + 256);
              }

              else
              {
                uint64_t v13 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  uint64_t v29 = v11;
                  uint64_t v30 = 1024;
                  uint64_t v31 = v12;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                }
              }

              if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 67109120;
                LODWORD(v29) = ParamID;
                _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Unrecognized paramID:0x%04X", buf, 8u);
              }

              goto LABEL_24;
          }

          break;
        }
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  self->_albumDiscNumber));
  -[NSMutableDictionary setObject:forKey:]( v3,  "setObject:forKey:",  v17,  @"ACCMediaLibraryUpdateItemAlbumDiscNumber");

  validMask = self->_validMask;
  if ((validMask & 0x400) == 0)
  {
LABEL_12:
    if ((validMask & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }

  a3->var8 = self->_albumTrackNumber;
  a3->var0 |= 0x80u;
  if ((validMask & 0x100) == 0)
  {
LABEL_10:
    if ((validMask & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_38;
  }

      *(void *)(a1 + 16) = v14;
      return v12;
    case 2:
      uint64_t v13 = *a5 - 8;
      id v12 = 4294967125LL;
      goto LABEL_19;
  }

  if (a3 != 3) {
    return 4294967289LL;
  }
  uint64_t v13 = *a5 - 4;
  id v12 = 4294967135LL;
LABEL_19:
  if (v13 >= 0xFFFFFFFE) {
    goto LABEL_20;
  }
  return v12;
}

void _generateUserAccessoryInfoPayload(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  if (!a1)
  {
    id v9 = logObjectForModule_9();
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      _generateUserAccessoryInfoPayload_cold_1(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    goto LABEL_12;
  }

  if (*(_BYTE *)(a1 + 30))
  {
    id v18 = logObjectForModule_9();
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      _generateUserAccessoryInfoPayload_cold_3(v10, v19, v20, v21, v22, v23, v24, v25);
    }
    goto LABEL_12;
  }

  if (!a4)
  {
    id v26 = logObjectForModule_9();
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      _generateUserAccessoryInfoPayload_cold_2(v10, v27, v28, v29, v30, v31, v32, v33);
    }
LABEL_12:

    return;
  }

  id v8 = malloc(0x48uLL);
  *a4 = (uint64_t)v8;
  if (v8)
  {
    iAP2MsgInitWithSom((uint64_t)v8, 0, 0, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0LL, 0LL);
    iAP2MsgAddArrayU8Param(*a4, 0LL, 0, a2, a3);
  }

void acc_platform_audioProductCerts_accessoryAttach(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 58)
  {
    uint64_t v4 = (os_log_s *)*(id *)(gLogObjects + 456);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v4 = (os_log_s *)&_os_log_default;
    id v5 = &_os_log_default;
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412546;
    uint64_t v7 = a1;
    __int16 v8 = 2112;
    uint64_t v9 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "processAudioProductCerts accessoryAttach %@-%@",  (uint8_t *)&v6,  0x16u);
  }
}

void acc_platform_audioProductCerts_accessoryDetach(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 58)
  {
    uint64_t v4 = (os_log_s *)*(id *)(gLogObjects + 456);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v4 = (os_log_s *)&_os_log_default;
    id v5 = &_os_log_default;
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412546;
    uint64_t v7 = a1;
    __int16 v8 = 2112;
    uint64_t v9 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "processAudioProductCerts accessoryDetach %@-%@",  (uint8_t *)&v6,  0x16u);
  }
}

void acc_platform_audioProductCerts_processAudioProductCerts( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (gLogObjects && gNumLogObjects >= 58)
  {
    id v10 = (os_log_s *)*(id *)(gLogObjects + 456);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v10 = (os_log_s *)&_os_log_default;
    id v11 = &_os_log_default;
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 138413314;
    uint64_t v13 = a1;
    __int16 v14 = 2112;
    uint64_t v15 = a2;
    __int16 v16 = 2112;
    uint64_t v17 = a3;
    __int16 v18 = 2112;
    uint64_t v19 = a4;
    __int16 v20 = 1024;
    int v21 = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "processAudioProductCerts: connection %@, endpoint %@, model %@, certs %@, firstConnectionAfterPair %d",  (uint8_t *)&v12,  0x30u);
  }
}

_BYTE *_createFeature_4(_BYTE *result)
{
  if (result)
  {
    uint64_t result = calloc(1uLL, 1uLL);
    if (result) {
      *uint64_t result = 0;
    }
  }

  return result;
}

uint64_t _destroyFeature_4(_BYTE **a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      id v3 = *a1;
      if (v3)
      {
        if (!*v3 || (platform_digitalAudio_accessoryDetached(*(void *)(a2 + 8)), (id v3 = *a1) != 0LL))
        {
          free(v3);
          *a1 = 0LL;
        }
      }
    }
  }

  return 0LL;
}

uint64_t _startFeatureFromDevice_1(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = iap2_feature_getFeature(result, 9u);
    if (result)
    {
      uint64_t v2 = *(void *)(v1 + 8);
      EndpointSampleRates = _getEndpointSampleRates(v1);
      platform_digitalAudio_accessoryAttached(v2, (uint64_t)EndpointSampleRates);
      return 1LL;
    }
  }

  return result;
}

uint64_t _checkIdentificationInfo_3(uint64_t a1)
{
  char v10 = 0;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs( a1,  (uint64_t)&_checkIdentificationInfo__kMsgDigitalAudioList,  3u,  &v10);
  uint64_t v3 = v2;
  if (v10) {
    BOOL v4 = (_DWORD)v2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(*(void *)a1 + 24LL);
    BOOL v6 = v5 > 8;
    int v7 = (1 << v5) & 0x141;
    if (v6 || v7 == 0)
    {
      uint64_t v3 = 13LL;
    }

    else
    {
      if (_checkRequiredSampleRates(a1))
      {
        iap2_features_createFeature(a1, 9u);
        iap2_identification_setIdentifiedForFeature(a1, 9u);
        return 0LL;
      }

      uint64_t v3 = 2LL;
    }

    iap2_identification_rejectAllMsgIDsForList(a1, (uint64_t)&_checkIdentificationInfo__kMsgDigitalAudioList, 3u, v3);
  }

  return v3;
}

uint64_t iap2_digitalAudio_start(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0LL;
  if (a1 && a2)
  {
    uint64_t Feature = (_BYTE *)iap2_feature_getFeature(a1, 9u);
    if (Feature)
    {
      *uint64_t Feature = 1;
      uint64_t v2 = platform_digitalAudio_start();
      if (gLogObjects && gNumLogObjects >= 38)
      {
        unsigned int v5 = *(os_log_s **)(gLogObjects + 296);
      }

      else
      {
        unsigned int v5 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = *(void *)(a1 + 8);
        int v8 = 138412290;
        uint64_t v9 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Digital Audio started for EndpointUUID: %@",  (uint8_t *)&v8,  0xCu);
      }
    }

    else
    {
      return 0LL;
    }
  }

  return v2;
}

uint64_t iap2_digitalAudio_stop(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0LL;
  if (a1 && a2)
  {
    uint64_t Feature = (_BYTE *)iap2_feature_getFeature(a1, 9u);
    if (Feature)
    {
      *uint64_t Feature = 0;
      uint64_t v2 = platform_digitalAudio_stop();
      if (gLogObjects && gNumLogObjects >= 38)
      {
        unsigned int v5 = *(os_log_s **)(gLogObjects + 296);
      }

      else
      {
        unsigned int v5 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = *(void *)(a1 + 8);
        int v8 = 138412290;
        uint64_t v9 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Digital Audio stopped for EndpointUUID: %@",  (uint8_t *)&v8,  0xCu);
      }
    }

    else
    {
      return 0LL;
    }
  }

  return v2;
}

uint64_t iap2_digitalAudio_sendInformationUpdate(uint64_t *a1, const __CFDictionary *a2)
{
  if (gLogObjects && gNumLogObjects >= 38)
  {
    BOOL v4 = *(os_log_s **)(gLogObjects + 296);
  }

  else
  {
    BOOL v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v12 = 138412290;
    v13[0] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "attributes: %@", (uint8_t *)&v12, 0xCu);
  }

  uint64_t result = 0LL;
  if (a1 && a2)
  {
    uint64_t Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"SampleRate");
    int v7 = (const __CFNumber *)CFDictionaryGetValue(a2, @"VolumeLevel");
    int v8 = (const __CFNumber *)CFDictionaryGetValue(a2, @"SoundCheck");
    iAP2MsgInit((uint64_t)(a1 + 15), 55809, a1[24], 0xFFFF, 0LL, 0LL);
    if (Value)
    {
      LOBYTE(v12) = 0;
      CFNumberGetValue(Value, kCFNumberCharType, &v12);
      LODWORD(Value) = iAP2MsgAddU8Param((uint64_t)(a1 + 15), 0LL, 0, v12) != 0LL;
    }

    if (v7)
    {
      unsigned int v12 = 0;
      CFNumberGetValue(v7, kCFNumberIntType, &v12);
      iAP2MsgAddU32Param((uint64_t)(a1 + 15), 0LL, 1, v12);
    }

    if (v8)
    {
      unsigned int v12 = 0;
      CFNumberGetValue(v8, kCFNumberIntType, &v12);
      iAP2MsgAddU32Param((uint64_t)(a1 + 15), 0LL, 2, v12);
    }

    if ((_DWORD)Value)
    {
      if (gLogObjects && gNumLogObjects >= 38)
      {
        uint64_t v9 = *(os_log_s **)(gLogObjects + 296);
      }

      else
      {
        uint64_t v9 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        int MsgID = iAP2MsgGetMsgID((uint64_t)(a1 + 15));
        uint64_t v11 = a1[1];
        unsigned int v12 = 67109378;
        LODWORD(v13[0]) = MsgID;
        WORD2(v13[0]) = 2112;
        *(void *)((char *)v13 + 6) = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Digital Audio sending msg: %xh for endpoint: %@",  (uint8_t *)&v12,  0x12u);
      }

      return iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

CFDictionaryRef _getEndpointSampleRates(uint64_t a1)
{
  uint64_t v1 = (const __CFDictionary *)iap2_identification_transportComponents(a1);
  uint64_t v2 = v1;
  if (v1)
  {
    CFIndex Count = CFDictionaryGetCount(v1);
    if (Count)
    {
      uint64_t v4 = Count;
      __chkstk_darwin();
      uint64_t v6 = (uint64_t *)((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      memset(v6, 170, v5);
      CFDictionaryGetKeysAndValues(v2, 0LL, (const void **)v6);
      if (v4 < 1)
      {
        return 0LL;
      }

      else
      {
        uint64_t v2 = 0LL;
        __int16 v14 = v16;
        *(void *)&__int128 v7 = 134218240LL;
        __int128 v13 = v7;
        do
        {
          uint64_t v8 = *v6;
          if (*v6)
          {
            if (*(_DWORD *)(v8 + 20) == 1) {
              uint64_t v2 = (const __CFDictionary *)*(unsigned int *)(v8 + 48);
            }
          }

          else
          {
            uint64_t v9 = gLogObjects;
            int v10 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 38)
            {
              uint64_t v11 = *(os_log_s **)(gLogObjects + 296);
            }

            else
            {
              uint64_t v11 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = v13;
                uint64_t v18 = v9;
                __int16 v19 = 1024;
                int v20 = v10;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                uint64_t v11 = (os_log_s *)&_os_log_default;
              }
            }

            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
              _getEndpointSampleRates_cold_1(&v15, v14, v11);
            }
          }

          ++v6;
          --v4;
        }

        while (v4);
      }
    }

    else
    {
      return 0LL;
    }
  }

  return v2;
}

CFDictionaryRef _checkRequiredSampleRates(uint64_t a1)
{
  uint64_t result = (const __CFDictionary *)iap2_identification_transportComponents(a1);
  if (result)
  {
    uint64_t v3 = result;
    CFIndex Count = CFDictionaryGetCount(result);
    if (Count)
    {
      uint64_t v5 = Count;
      __chkstk_darwin();
      __int128 v7 = (uint64_t *)((char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      memset(v7, 170, v6);
      CFDictionaryGetKeysAndValues(v3, 0LL, (const void **)v7);
      if (v5 < 1)
      {
        int v15 = 0;
      }

      else
      {
        uint64_t v17 = v20;
        uint64_t v18 = &v16;
        *(void *)&__int128 v8 = 134218240LL;
        __int128 v16 = v8;
        do
        {
          uint64_t v9 = *v7;
          if (*v7)
          {
            if (*(_DWORD *)(v9 + 20) == 1)
            {
              int v10 = *(_DWORD *)(*(void *)a1 + 24LL);
              BOOL v11 = !v10 || v10 == 8;
              if ((v11 || v10 == 6 && !*(_BYTE *)(v9 + 16)) && (~*(_DWORD *)(v9 + 48) & 0x1C0) == 0)
              {
                int v15 = 1;
                return v15 != 0;
              }
            }
          }

          else
          {
            uint64_t v12 = gLogObjects;
            int v13 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 38)
            {
              __int16 v14 = *(os_log_s **)(gLogObjects + 296);
            }

            else
            {
              __int16 v14 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = v16;
                uint64_t v22 = v12;
                __int16 v23 = 1024;
                int v24 = v13;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                __int16 v14 = (os_log_s *)&_os_log_default;
              }
            }

            if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
              _getEndpointSampleRates_cold_1(&v19, v17, v14);
            }
          }

          ++v7;
          --v5;
        }

        while (v5);
        int v15 = 0;
      }
    }

    else
    {
      int v15 = 0;
    }

    return v15 != 0;
  }

  return result;
}

void OUTLINED_FUNCTION_2_2(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
}

uint64_t obfuscatedPointer(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = obfuscatedPointer_salt;
    if (!obfuscatedPointer_salt)
    {
      uint64_t v2 = random();
      obfuscatedPointer_salt = v2;
    }

    return v1 + v2;
  }

  return result;
}

BOOL getMemoryUse(void *a1, void *a2, void *a3)
{
  kern_return_t v7;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[4];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  uint64_t v33 = -1431655766;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v31 = v6;
  uint64_t v32 = v6;
  uint64_t v29 = v6;
  uint64_t v30 = v6;
  uint64_t v27 = v6;
  uint64_t v28 = v6;
  uint64_t v25 = v6;
  id v26 = v6;
  __int16 v23 = v6;
  int v24 = v6;
  int v21 = v6;
  uint64_t v22 = v6;
  uint8_t v19 = v6;
  int v20 = v6;
  uint64_t v18 = v6;
  __int128 v16 = v6;
  uint64_t v17 = v6;
  __int16 v14 = v6;
  int v15 = v6;
  uint64_t v12 = v6;
  int v13 = v6;
  *(_OWORD *)task_info_out = v6;
  BOOL v11 = v6;
  task_info_outCnt = 93;
  __int128 v7 = task_info(mach_task_self_, 0x16u, task_info_out, &task_info_outCnt);
  if (!v7)
  {
    if (a1) {
      *a1 = v11;
    }
    if (a2) {
      *a2 = *(void *)task_info_out;
    }
    if (a3) {
      *a3 = v19;
    }
  }

  return v7 == 0;
}

void _replaceKeyInDictIfExist(void *a1, void *a2, void *a3)
{
  id v8 = a1;
  id v5 = a2;
  id v6 = a3;
  __int128 v7 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:v5]);
  if (v7)
  {
    [v8 setObject:v7 forKey:v6];
    [v8 removeObjectForKey:v5];
  }
}

id _convertAccInfoToBLEAccInfo(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if (a1)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  a1));
    _replaceKeyInDictIfExist(v8, kACCInfo_Name, @"IAPAppBTPairingAccName");
    _replaceKeyInDictIfExist(v8, kACCInfo_Manufacturer, @"IAPAppBTPairingAccManufacturer");
    _replaceKeyInDictIfExist(v8, kACCInfo_Model, @"IAPAppBTPairingAccModel");
    _replaceKeyInDictIfExist(v8, kACCInfo_SerialNumber, @"IAPAppBTPairingAccSerialNum");
    _replaceKeyInDictIfExist(v8, kACCInfo_HardwareVersion, @"IAPAppBTPairingAccHwVer");
    _replaceKeyInDictIfExist(v8, kACCInfo_FirmwareVersionActive, @"IAPAppBTPairingAccFwVer");
    _replaceKeyInDictIfExist(v8, kACCInfo_FirmwareVersionPending, @"IAPAppBTPairingAccFwPendingVer");
    _replaceKeyInDictIfExist(v8, kACCInfo_AccessoryDeviceUID, @"IAPAppBTPairingAccDeviceUID");
    _replaceKeyInDictIfExist(v8, @"Supports2Way", @"IAPAppBTPairingSupports2WayKey");
    _replaceKeyInDictIfExist(v8, kACCInfo_VendorID, @"IAPAppBTPairingAccVendorID");
    _replaceKeyInDictIfExist(v8, kACCInfo_ProductID, @"IAPAppBTPairingAccProductID");
    _replaceKeyInDictIfExist(v8, kACCInfo_AccessoryPlatformID, @"IAPAppBTPairingAccPlatformID");
    if (v7) {
      [v8 setObject:v7 forKey:@"IAPAppBTPairingTypesSupportedKey"];
    }
    if (v6) {
      [v8 setObject:v6 forKey:@"IAPAppBTPairingUUIDKey"];
    }
    id v9 = [v8 copy];
  }

  else
  {
    id v9 = 0LL;
  }

  return v9;
}

void sub_100059418( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, id location, id a24)
{
}

void sub_100059790(_Unwind_Exception *a1)
{
}

id __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  id result = objc_retainBlock(*(id *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

uint64_t t56_util_init(uint64_t a1)
{
  if (!a1) {
    return 4294967294LL;
  }
  uint64_t v2 = calloc(1uLL, 8uLL);
  uint64_t result = 0LL;
  *(void *)(a1 + 16) = v2;
  return result;
}

uint64_t t56_util_cleanup(uint64_t a1)
{
  if (!a1) {
    return 4294967294LL;
  }
  uint64_t v1 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = 0LL;
  free(v1);
  return 0LL;
}

void t56_util_notifyRxID(const void **a1, unsigned int a2)
{
  unsigned int valuePtr = a2;
  if (a1)
  {
    T56Endpoint = t56_util_ios_getT56Endpoint(a1);
    if (T56Endpoint)
    {
      uint64_t v3 = (uint64_t *)T56Endpoint;
      if (*T56Endpoint)
      {
        uint64_t v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
        CFStringRef v5 = CFStringCreateWithFormat(kCFAllocatorDefault, 0LL, @"RxID: %@ / 0x%X", v4, valuePtr);
        acc_platform_packetLogging_logParsedData( *v3,  (uint64_t)@"DATA-RxID",  (uint64_t)@"T56",  (uint64_t)v5,  1);
        if (v5) {
          CFRelease(v5);
        }
        acc_endpoint_setProperty((pthread_mutex_t *)*v3, kCFACCProperties_Endpoint_Inductive_RxID, v4);
        uint64_t v6 = *(void *)*v3;
        if (v6)
        {
          if ((acc_connection_setProperty(v6, kCFACCProperties_Connection_Inductive_RxID, v4),
                (CFStringRef v7 = acc_endpoint_copyParentEndpointUUID(*v3)) != 0LL)
            && (CFStringRef v8 = v7,
                EndpointWithUUID = (pthread_mutex_t *)acc_manager_getEndpointWithUUID(v7),
                CFRelease(v8),
                EndpointWithUUID)
            && *(_DWORD *)&EndpointWithUUID->__opaque[16] == 13
            || (EndpointWithUUID = (pthread_mutex_t *)*v3, *(_DWORD *)(*v3 + 24) == 13))
          {
            acc_endpoint_setProperty( EndpointWithUUID,  kCFACCProperties_Endpoint_NFC_RequestSessionOpen,  kCFBooleanFalse);
          }
        }

        if (v4) {
          CFRelease(v4);
        }
      }
    }
  }

const void **t56_util_ios_getT56Endpoint(const void **result)
{
  if (result)
  {
    uint64_t v1 = *result;
    if (v1)
    {
      EndpointWithUUID = acc_manager_getEndpointWithUUID(v1);
      if (gLogObjects && gNumLogObjects >= 61)
      {
        uint64_t v3 = (os_log_s *)*(id *)(gLogObjects + 480);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v3 = (os_log_s *)&_os_log_default;
        id v5 = &_os_log_default;
      }

      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        t56_util_ios_getT56Endpoint_cold_3();
      }
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 61)
      {
        uint64_t v3 = (os_log_s *)*(id *)(gLogObjects + 480);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v3 = (os_log_s *)&_os_log_default;
        id v4 = &_os_log_default;
      }

      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        t56_util_ios_getT56Endpoint_cold_1();
      }
    }

    return 0LL;
  }

  return result;
}

const void **t56_util_sendData(const void **result, const UInt8 *a2, unsigned int a3)
{
  if (result && a2 && a3)
  {
    uint64_t result = t56_util_ios_getT56Endpoint(result);
    if (result) {
      return (const void **)t56_endpoint_sendOutgoingData((uint64_t *)result, a2, a3);
    }
  }

  return result;
}

uint64_t t56_util_callbackOnTimer(const void **a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = 1000000LL * a2;
  uint64_t v6 = 0xFFFFFFFFLL;
  if (a1 && a2 && a3)
  {
    T56Endpoint = t56_util_ios_getT56Endpoint(a1);
    if (T56Endpoint)
    {
      int v10 = T56Endpoint;
      uint64_t v30 = a4;
      int64_t v31 = v5;
      uint64_t v6 = 0LL;
      BOOL v11 = T56Endpoint + 26;
      uint64_t v12 = (uint64_t *)(T56Endpoint + 18);
      while (1)
      {
        uint64_t v13 = gLogObjects;
        int v14 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 61)
        {
          int v15 = (os_log_s *)*(id *)(gLogObjects + 480);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            uint64_t v33 = (const char *)v13;
            __int16 v34 = 1024;
            int v35 = v14;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          }

          id v16 = &_os_log_default;
          int v15 = (os_log_s *)&_os_log_default;
        }

        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v17 = *v12;
          int v18 = *((unsigned __int8 *)v11 + v6);
          *(_DWORD *)buf = 136316162;
          uint64_t v33 = "t56_util_callbackOnTimer";
          __int16 v34 = 1024;
          int v35 = 222;
          __int16 v36 = 1024;
          int v37 = v6;
          __int16 v38 = 2048;
          *(void *)uint64_t v39 = v17;
          *(_WORD *)&v39[8] = 1024;
          *(_DWORD *)&_BYTE v39[10] = v18;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "%s:%d [%d] timer %p, running %d",  buf,  0x28u);
        }

        if (!*v12)
        {
          if (gLogObjects && gNumLogObjects >= 61)
          {
            uint8_t v19 = (os_log_s *)*(id *)(gLogObjects + 480);
            uint64_t v5 = v31;
          }

          else
          {
            uint64_t v5 = v31;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            uint8_t v19 = (os_log_s *)&_os_log_default;
            id v24 = &_os_log_default;
          }

          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
            t56_util_callbackOnTimer_cold_2();
          }
          goto LABEL_45;
        }

        if (!*((_BYTE *)v11 + v6)) {
          break;
        }
        ++v6;
        ++v12;
        if (v6 == 4)
        {
          uint64_t v6 = 0xFFFFFFFFLL;
          goto LABEL_22;
        }
      }

      v12[4] = a3;
      v12[9] = v30;
      *((_BYTE *)v10 + v6 + 20_Block_object_dispose(va, 8) = 1;
LABEL_22:
      uint64_t v5 = v31;
      if (gLogObjects && gNumLogObjects >= 61)
      {
        int v20 = (os_log_s *)*(id *)(gLogObjects + 480);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        int v20 = (os_log_s *)&_os_log_default;
        id v21 = &_os_log_default;
      }

      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v29 = v10[(int)v6 + 18];
        *(_DWORD *)buf = 136316418;
        uint64_t v33 = "t56_util_callbackOnTimer";
        __int16 v34 = 1024;
        int v35 = 238;
        __int16 v36 = 1024;
        int v37 = v6;
        __int16 v38 = 2048;
        *(void *)uint64_t v39 = v29;
        *(_WORD *)&v39[8] = 1024;
        *(_DWORD *)&_BYTE v39[10] = a2;
        __int16 v40 = 2048;
        int64_t v41 = v31;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "%s:%d timerID %d, timer %p, timeoutMs %u, timeoutNs %lld",  buf,  0x32u);
      }

      if ((v6 & 0x80000000) == 0)
      {
        uint64_t v22 = (dispatch_source_s *)v10[v6 + 18];
        dispatch_time_t v23 = dispatch_time(0LL, v31);
        dispatch_source_set_timer(v22, v23, 0xFFFFFFFFFFFFFFFFLL, 0LL);
        goto LABEL_47;
      }

      if (gLogObjects && gNumLogObjects >= 61)
      {
        uint8_t v19 = (os_log_s *)*(id *)(gLogObjects + 480);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint8_t v19 = (os_log_s *)&_os_log_default;
        id v25 = &_os_log_default;
      }

      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        t56_util_callbackOnTimer_cold_4();
      }
LABEL_45:
    }

    uint64_t v6 = 0xFFFFFFFFLL;
  }

void t56_util_cancelTimer(const void **a1, unsigned int a2)
{
  if (a1)
  {
    if ((a2 & 0x80000000) == 0)
    {
      T56Endpoint = t56_util_ios_getT56Endpoint(a1);
      if (T56Endpoint)
      {
        id v4 = T56Endpoint;
        uint64_t v5 = (char *)T56Endpoint + a2;
        int v8 = v5[208];
        CFStringRef v7 = v5 + 208;
        int v6 = v8;
        if (gLogObjects) {
          BOOL v9 = gNumLogObjects <= 60;
        }
        else {
          BOOL v9 = 1;
        }
        int v10 = !v9;
        if (v6)
        {
          if (v10)
          {
            BOOL v11 = (os_log_s *)*(id *)(gLogObjects + 480);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            BOOL v11 = (os_log_s *)&_os_log_default;
            id v13 = &_os_log_default;
          }

          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            int v16 = 136315650;
            uint64_t v17 = "t56_util_cancelTimer";
            __int16 v18 = 1024;
            int v19 = 263;
            __int16 v20 = 1024;
            unsigned int v21 = a2;
            _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%s:%d Cancel timerID %d",  (uint8_t *)&v16,  0x18u);
          }

          _BYTE *v7 = 0;
          int v14 = &v4[a2];
          v14[22] = 0LL;
          v14[27] = 0LL;
          dispatch_source_set_timer((dispatch_source_t)v14[18], 0xFFFFFFFFFFFFFFFFLL, 0LL, 0LL);
        }

        else
        {
          if (v10)
          {
            uint64_t v12 = (os_log_s *)*(id *)(gLogObjects + 480);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            uint64_t v12 = (os_log_s *)&_os_log_default;
            id v15 = &_os_log_default;
          }

          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
            t56_util_cancelTimer_cold_1();
          }
        }
      }
    }
  }

LABEL_2:
      if (!self->fIsSeeded || (BOOL v11 = a3 - self->fLastInternalTime, v11 > self->fTimeout))
      {
        -[iAP2KalmanFilter reseedWithInternalTime:RawOffset:FilteredOffset:OffsetUncertainty:]( self,  "reseedWithInternalTime:RawOffset:FilteredOffset:OffsetUncertainty:",  a5,  a6,  a3,  a4);
        return 0;
      }

      p_fFilterOffsetEstimate = &self->fFilterOffsetEstimate;
      fFilterOffsetEstimate = self->fFilterOffsetEstimate;
      self->fLastInternalTime = a3;
      int v16 = self->fMeasurementVar;
      f_P = self->f_P;
      if (v16 + f_P <= 0.0)
      {
        -[iAP2KalmanFilter resetWithInternalTimeSecs:RawOffset:FilteredOffset:OffsetUncertainty:]( self,  "resetWithInternalTimeSecs:RawOffset:FilteredOffset:OffsetUncertainty:",  a5,  a6,  a3,  a4);
        if ((_iAP2LogEnableMask & 4) != 0)
        {
          if (gLogObjects && gNumLogObjects >= 20)
          {
            unsigned int v21 = (os_log_s *)*(id *)(gLogObjects + 152);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            unsigned int v21 = (os_log_s *)&_os_log_default;
            uint64_t v30 = &_os_log_default;
          }

          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
            -[iAP2KalmanFilter iAP2KalmanFilterUpdateDeviceTime:Offset:FilteredOffset:OffsetUncertainty:].cold.7(v21);
          }
        }

        return 0;
      }

      __int16 v18 = a4 - fFilterOffsetEstimate;
      int v19 = v18 * v18 / (v16 + f_P);
      if (v19 <= 20.25)
      {
        __int16 v20 = v11 * 0.00005625;
        if (v19 > 9.0) {
          int v16 = v16 + v16;
        }
      }

      else if (v18 <= 7200.0)
      {
        __int16 v20 = v18 * v18;
      }

      else
      {
        __int16 v20 = 51840000.0;
      }

      uint64_t v22 = f_P + v20;
      self->f_P = v22;
      dispatch_time_t v23 = v22 / (v16 + v22);
      if ((_iAP2LogEnableMask & 4) != 0)
      {
        if (gLogObjects && gNumLogObjects >= 20)
        {
          id v24 = (os_log_s *)*(id *)(gLogObjects + 152);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          id v24 = (os_log_s *)&_os_log_default;
          int64_t v31 = &_os_log_default;
        }

        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v50 = 134218496;
          uint64_t v51 = fFilterOffsetEstimate;
          id v52 = 2048;
          uint64_t v53 = v23;
          uint64_t v54 = 2048;
          uint64_t v55 = a4 - fFilterOffsetEstimate;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "fFilterOffsetPrior = %.3lf K = %.3lf v = %.3lf",  (uint8_t *)&v50,  0x20u);
        }

        uint64_t v32 = _iAP2LogEnableMask;
        *p_fFilterOffsetEstimate = fFilterOffsetEstimate + v23 * v18;
        if ((v32 & 4) != 0)
        {
          if (gLogObjects && gNumLogObjects >= 20)
          {
            __int16 v36 = (os_log_s *)*(id *)(gLogObjects + 152);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            __int16 v36 = (os_log_s *)&_os_log_default;
            uint64_t v39 = &_os_log_default;
          }

          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG)) {
            -[iAP2KalmanFilter iAP2KalmanFilterUpdateDeviceTime:Offset:FilteredOffset:OffsetUncertainty:].cold.4();
          }

          __int16 v40 = _iAP2LogEnableMask;
          int64_t v41 = (1.0 - v23) * self->f_P;
          self->f_P = v41;
          uint64_t v42 = sqrt(v41);
          if (v41 >= 0.00000225) {
            uint64_t v43 = v42;
          }
          else {
            uint64_t v43 = 0.00000225;
          }
          *a6 = v43;
          *a5 = self->fFilterOffsetEstimate;
          if ((v40 & 4) != 0)
          {
            if (gLogObjects && gNumLogObjects >= 20)
            {
              CFRange v44 = (os_log_s *)*(id *)(gLogObjects + 152);
            }

            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
              CFRange v44 = (os_log_s *)&_os_log_default;
              uint64_t v45 = &_os_log_default;
            }

            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG)) {
              -[iAP2KalmanFilter iAP2KalmanFilterUpdateDeviceTime:Offset:FilteredOffset:OffsetUncertainty:].cold.2();
            }

            if ((_iAP2LogEnableMask & 4) != 0)
            {
              if (gLogObjects && gNumLogObjects >= 20)
              {
                uint64_t v46 = (os_log_s *)*(id *)(gLogObjects + 152);
              }

              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
                uint64_t v46 = (os_log_s *)&_os_log_default;
                uint64_t v47 = &_os_log_default;
              }

              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v48 = *a5;
                uint64_t v49 = *(void *)a6;
                uint64_t v50 = 134219776;
                uint64_t v51 = a3;
                id v52 = 2048;
                uint64_t v53 = a4;
                uint64_t v54 = 2048;
                uint64_t v55 = v48;
                uint64_t v56 = 2048;
                uint64_t v57 = v49;
                uint64_t v58 = 2048;
                uint64_t v59 = v16;
                id v60 = 2048;
                id v61 = v20;
                id v62 = 2048;
                id v63 = a4 - fFilterOffsetEstimate;
                id v64 = 2048;
                uint64_t v65 = v19;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEBUG,  "internalTimeSecs,%.6lf,rawOffset,%.6lf,filteredOffsetSecs,%.6lf,offsetUncertaintySecs,%.6lf,R,%.6lf,Q, %.6lf,v,%.6lf,vtest2,%.6lf\n",  (uint8_t *)&v50,  0x52u);
              }
            }
          }

          return 1;
        }
      }

      else
      {
        *p_fFilterOffsetEstimate = fFilterOffsetEstimate + v23 * v18;
      }

      uint64_t v33 = (1.0 - v23) * self->f_P;
      self->f_P = v33;
      __int16 v34 = sqrt(v33);
      if (v33 >= 0.00000225) {
        int v35 = v34;
      }
      else {
        int v35 = 0.00000225;
      }
      *a6 = v35;
      *a5 = self->fFilterOffsetEstimate;
      return 1;
    }

    if ((_iAP2LogEnableMask & 4) != 0)
    {
      if (gLogObjects && gNumLogObjects >= 20)
      {
        uint64_t v28 = (os_log_s *)*(id *)(gLogObjects + 152);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v28 = (os_log_s *)&_os_log_default;
        int v37 = &_os_log_default;
      }

      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
        -[iAP2KalmanFilter iAP2KalmanFilterUpdateDeviceTime:Offset:FilteredOffset:OffsetUncertainty:].cold.11();
      }
    }

    self->fIsMeasurementNoiseTrained = 0;
  }

  uint64_t result = 0;
  *a5 = a4;
  *a6 = 7200.0;
  self->fLastInternalTime = a3;
  return result;
}

  int v6 = 12LL;
  CFStringRef v7 = 15LL;
  int v8 = 23LL;
  BOOL v9 = 2LL;
  if (!a2)
  {
LABEL_19:
    int v10 = 0LL;
    if (a3) {
      *a3 = v7;
    }
    return v10;
  }

void OUTLINED_FUNCTION_5_7(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

void sub_10005E144( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10005E3EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10005E6AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10005EA50( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10005ECF8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10005EFA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void sub_10005F344( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10005F5A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10005F824( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10005FAB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10005FD3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10005FFC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100060234( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100060490( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10006070C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100060990( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100060C14( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100060E98( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void OUTLINED_FUNCTION_4_7(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

void OUTLINED_FUNCTION_6_3(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

  ;
}

void OUTLINED_FUNCTION_8_4(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

void OUTLINED_FUNCTION_10_2(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

void OUTLINED_FUNCTION_11_2( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

CFStringRef *acc_connection_create(unsigned int a1, const void *a2, const void *a3)
{
  if (a1 > 9) {
    return 0LL;
  }
  int v6 = (char *)calloc(1uLL, 0x110uLL);
  CFStringRef v7 = (CFStringRef *)v6;
  if (v6)
  {
    v6[137] = 0;
    v6[142] = 0;
    pthread_mutex_init((pthread_mutex_t *)(v6 + 208), 0LL);
    CFStringRef *v7 = CFCreateUUIDString();
    uint64_t v8 = gLogSignpostObjects;
    int v9 = gNumLogSignpostObjects;
    if (gLogSignpostObjects && gNumLogSignpostObjects >= 2)
    {
      int v10 = *(os_log_s **)(gLogSignpostObjects + 8);
      if (!gLogSignpostObjects) {
        goto LABEL_12;
      }
    }

    else
    {
      int v10 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int v21 = 67109632;
        *(_DWORD *)uint64_t v22 = 1;
        *(_WORD *)&v22[4] = 2048;
        *(void *)&v22[6] = v8;
        __int16 v23 = 1024;
        LODWORD(v24) = v9;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging_signposts() / init_logging()!\n module %d, gLogSignpostObjects: %p, gNumLogSignpostObjects: %d",  (uint8_t *)&v21,  0x18u);
        uint64_t v8 = gLogSignpostObjects;
        int v9 = gNumLogSignpostObjects;
        if (!gLogSignpostObjects) {
          goto LABEL_12;
        }
      }

      else if (!v8)
      {
        goto LABEL_12;
      }
    }

    if (v9 >= 2)
    {
      BOOL v11 = *(os_log_s **)(v8 + 8);
LABEL_14:
      os_signpost_id_t v12 = os_signpost_id_make_with_pointer(v11, v7);
      if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v13 = v12;
        if (os_signpost_enabled(v10))
        {
          CFStringRef v14 = *v7;
          int v21 = 138412802;
          *(void *)uint64_t v22 = v14;
          *(_WORD *)&v22[8] = 1024;
          *(_DWORD *)&v22[10] = a1;
          __int16 v23 = 2112;
          id v24 = a2;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v10,  OS_SIGNPOST_INTERVAL_BEGIN,  v13,  "Connection",  "Create connection %@, type %{coreacc:ACCConnection_Type_t}d, identifier %@",  (uint8_t *)&v21,  0x1Cu);
        }
      }

      *((_DWORD *)v7 + 2) = a1;
      if (a1 == 2) {
        kdebug_trace(731119656LL, 0LL, 0LL, 0LL, 0LL);
      }
      if (a2) {
        id v15 = (const __CFString *)CFRetain(a2);
      }
      else {
        id v15 = 0LL;
      }
      _DWORD v7[2] = v15;
      pthread_rwlock_wrlock(&_gAccConnectionLock);
      if (a3) {
        int v16 = (const __CFString *)_Block_copy(a3);
      }
      else {
        int v16 = 0LL;
      }
      v7[3] = v16;
      v7[4] = (CFStringRef)systemInfo_getCurrentUnixTimeMS();
      v7[5] = (CFStringRef)CFDictionaryCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeDictionaryKeyCallBacks, 0LL);
      pthread_rwlock_unlock(&_gAccConnectionLock);
      acc_authInfo_init((BOOL)(v7 + 6));
      acc_nvmInfo_init((_DWORD *)v7 + 28);
      v7[15] = 0LL;
      pthread_mutex_init((pthread_mutex_t *)(v7 + 18), 0LL);
      v7[16] = (CFStringRef)CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      uint64_t v17 = (const __CFNull *)v7[2];
      if (v17 && *((_DWORD *)v7 + 2) == 2) {
        acc_connection_setProperty((uint64_t)v7, kCFACCExternalAccessoryMacAddressKey, v17);
      }
      *((_BYTE *)v7 + 136) = 0;
      *((_BYTE *)v7 + 13_Block_object_dispose(va, 8) = 0;
      *((_WORD *)v7 + 70) = 0;
      CFStringRef v18 = acc_connection_copyDescription((CFStringRef)v7);
      if (gLogObjects && gNumLogObjects >= 14)
      {
        int v19 = *(os_log_s **)(gLogObjects + 104);
      }

      else
      {
        int v19 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        int v21 = 138412290;
        *(void *)uint64_t v22 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "[#Events] Created connection %@!",  (uint8_t *)&v21,  0xCu);
      }

      if (v18) {
        CFRelease(v18);
      }
      *((_BYTE *)v7 + 137) = 1;
      return v7;
    }

uint64_t acc_connection_setProperty(uint64_t a1, const void *a2, const __CFNull *a3)
{
  uint64_t v3 = 0LL;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v7 = gNumLogObjects < 14;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
      uint64_t v8 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      uint64_t v8 = *(os_log_s **)(gLogObjects + 104);
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)a1;
      int v17 = 138412546;
      CFStringRef v18 = a2;
      __int16 v19 = 2112;
      uint64_t v20 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Setting property %@ for connection %@...",  (uint8_t *)&v17,  0x16u);
    }

    pthread_mutex_lock((pthread_mutex_t *)(a1 + 144));
    int v10 = acc_properties_copyProperties(*(const __CFDictionary **)(a1 + 128));
    uint64_t v3 = acc_properties_setProperty(*(__CFDictionary **)(a1 + 128), a2, a3);
    BOOL v11 = acc_properties_copyProperties(*(const __CFDictionary **)(a1 + 128));
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 144));
    if (gLogObjects && gNumLogObjects >= 14)
    {
      os_signpost_id_t v12 = *(os_log_s **)(gLogObjects + 104);
    }

    else
    {
      os_signpost_id_t v12 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = *(void *)a1;
      int v17 = 138412802;
      CFStringRef v18 = a2;
      __int16 v19 = 2112;
      uint64_t v20 = v13;
      __int16 v21 = 2112;
      uint64_t v22 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Set property %@ for connection %@: %@",  (uint8_t *)&v17,  0x20u);
    }

    if (*(_BYTE *)(a1 + 137) && !*(_BYTE *)(a1 + 142))
    {
      if (gLogObjects && gNumLogObjects >= 14)
      {
        CFStringRef v14 = *(os_log_s **)(gLogObjects + 104);
      }

      else
      {
        CFStringRef v14 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
        acc_connection_setProperty_cold_3();
      }
      acc_manager_checkForWirelessCTA();
      if (gLogObjects && gNumLogObjects >= 14)
      {
        id v15 = *(os_log_s **)(gLogObjects + 104);
      }

      else
      {
        id v15 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
        acc_connection_setProperty_cold_1();
      }
      acc_manager_checkForInductiveCTA();
      platform_notifications_propertiesDidChangeForConnectionUUID(*(void *)a1, v10, v11);
    }

    if (v10) {
      CFRelease(v10);
    }
    if (v11) {
      CFRelease(v11);
    }
    if (*(_BYTE *)(a1 + 138)) {
      platform_connectionInfo_accessoryConnectionInfoPropertyChanged(*(const void **)a1);
    }
  }

  return v3;
}

CFStringRef acc_connection_copyDescription(CFStringRef result)
{
  if (result)
  {
    uint64_t v1 = (__CFString *)result;
    p_char data = (pthread_mutex_t *)&result[4].data;
    pthread_mutex_lock((pthread_mutex_t *)&result[4].data);
    uint64_t isa = (uint64_t)v1->isa;
    uint64_t info_low = LODWORD(v1->info);
    else {
      id v4 = &kACCConnection_Type_Strings[info_low];
    }
    uint64_t v20 = *v4;
    uint64_t v5 = v1[1].isa;
    if (v1->length) {
      int v6 = "YES";
    }
    else {
      int v6 = "NO";
    }
    CFStringRef v18 = v6;
    char data = v1->data;
    unint64_t CurrentUnixTimeMS = systemInfo_getCurrentUnixTimeMS();
    uint64_t v9 = v1[1].isa;
    info = (const __CFDictionary *)v1[1].info;
    if (info) {
      CFIndex Count = CFDictionaryGetCount(info);
    }
    else {
      CFIndex Count = 0LL;
    }
    if (acc_authInfo_isAuthenticated((BOOL)&v1[1].data, 6LL)) {
      BOOL v11 = "YES";
    }
    else {
      BOOL v11 = "NO";
    }
    uint64_t length = v1[3].length;
    if (!length)
    {
      if (BYTE1(v1[4].info))
      {
        acc_connection_mapAccessoryInfo((uint64_t *)v1);
        uint64_t length = v1[3].length;
      }

      else
      {
        uint64_t length = 0LL;
      }
    }

    uint64_t v13 = CurrentUnixTimeMS - (void)v9;
    if (length) {
      CFStringRef v14 = "YES";
    }
    else {
      CFStringRef v14 = "NO";
    }
    id v15 = (const __CFDictionary *)v1[4].isa;
    if (v15) {
      id v15 = (const __CFDictionary *)CFDictionaryGetCount(v15);
    }
    if (BYTE2(v1[4].info)) {
      int v16 = "YES";
    }
    else {
      int v16 = "NO";
    }
    CFStringRef v17 = CFStringCreateWithFormat( kCFAllocatorDefault,  0LL,  @"<ACCConnection_t: %@; connectionType: [%s]; identifier: %@; dataOutHandler: %s; creationTimestampMS: %llu; durationMS: %llu; numEndpoints: %ld; authenticated: %s; accessoryInfo: %s; numProperties: %ld; published: %s>",
            isa,
            v20,
            data,
            v18,
            v5,
            v13,
            Count,
            v11,
            v14,
            v15,
            v16);
    pthread_mutex_unlock(p_data);
    return v17;
  }

  return result;
}

uint64_t acc_connection_publish(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  if (!*(void *)(result + 40) || *(_BYTE *)(result + 142)) {
    return 0LL;
  }
  int v2 = *(unsigned __int8 *)(result + 138);
  if (!*(_BYTE *)(result + 138))
  {
    platform_analytics_connectionWillBePublished((uint64_t *)result);
    platform_connectionInfo_accessoryConnectionAttached(*(const void **)v1, *(unsigned int *)(v1 + 8));
  }

  uint64_t v3 = &startLogsNotificationObservers;
  if (gLogObjects && gNumLogObjects >= 14)
  {
    id v4 = *(os_log_s **)(gLogObjects + 104);
  }

  else
  {
    id v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(const void **)v1;
    *(_DWORD *)buf = 138412290;
    *(void *)uint64_t v54 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Publishing all endpoints for connection %@...",  buf,  0xCu);
  }

  CFDictionaryApplyFunction( *(CFDictionaryRef *)(v1 + 40),  (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_publishEndpoint,  0LL);
  uint64_t context = 0LL;
  CFArrayRef theArray = 0LL;
  CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(v1 + 40));
  CFArrayRef theArray = CFArrayCreateMutable(kCFAllocatorDefault, Count, &kCFTypeArrayCallBacks);
  CFDictionaryApplyFunction( *(CFDictionaryRef *)(v1 + 40),  (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_countEAServiceEndpoints,  &context);
  if ((unsigned __int16)context == WORD1(context) && (unsigned __int16)context == *(unsigned __int16 *)(v1 + 140))
  {
    if (gLogObjects && gNumLogObjects >= 14)
    {
      BOOL v7 = *(os_log_s **)(gLogObjects + 104);
    }

    else
    {
      BOOL v7 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v33 = *(unsigned __int16 *)(v1 + 140);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)uint64_t v54 = (unsigned __int16)context;
      *(_WORD *)&v54[4] = 1024;
      *(_DWORD *)&v54[6] = WORD1(context);
      *(_WORD *)uint64_t v55 = 1024;
      *(_DWORD *)&v55[2] = v33;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Not re-publishing EAService endpoint count %d.  number already published %d, connection's advertised count %d",  buf,  0x14u);
    }
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 14)
    {
      uint64_t v8 = *(os_log_s **)(gLogObjects + 104);
    }

    else
    {
      uint64_t v8 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Removing all EAService or EA endpoints from ExternalAccessory...",  buf,  2u);
    }

    platform_externalAccessory_removeEAAccessoryForPrimaryEndpoints(theArray);
    if (gLogObjects && gNumLogObjects >= 14)
    {
      uint64_t v9 = *(os_log_s **)(gLogObjects + 104);
    }

    else
    {
      uint64_t v9 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      CFIndex v10 = CFArrayGetCount(theArray);
      *(_DWORD *)buf = 134217984;
      *(void *)uint64_t v54 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Adding %ld EAService or EA endpoints to ExternalAccessory...",  buf,  0xCu);
    }

    if (gLogObjects && gNumLogObjects >= 14)
    {
      BOOL v11 = *(os_log_s **)(gLogObjects + 104);
    }

    else
    {
      BOOL v11 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)uint64_t v54 = theArray;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "EA or EAServiceEndpointUUIDs: %@", buf, 0xCu);
    }

    pthread_mutex_lock((pthread_mutex_t *)(v1 + 144));
    os_signpost_id_t v12 = (const void *)kCFACCProperties_Connection_EndpointUUIDForAccessoryInfo;
    if (acc_properties_containsProperty( *(CFDictionaryRef *)(v1 + 128),  kCFACCProperties_Connection_EndpointUUIDForAccessoryInfo))
    {
      uint64_t v13 = acc_properties_copyProperty(*(const __CFDictionary **)(v1 + 128), v12);
    }

    else
    {
      uint64_t v13 = 0LL;
    }

    pthread_mutex_unlock((pthread_mutex_t *)(v1 + 144));
    platform_externalAccessory_addEAAccessoryForEAEndpoints(theArray, (uint64_t)v13);
    if (v13) {
      CFRelease(v13);
    }
    if (theArray)
    {
      *(_WORD *)(v1 + 140) = CFArrayGetCount(theArray);
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 14)
      {
        CFStringRef v14 = *(os_log_s **)(gLogObjects + 104);
      }

      else
      {
        CFStringRef v14 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        acc_connection_publish_cold_11();
      }
    }

    if (gLogObjects && gNumLogObjects >= 14)
    {
      id v15 = *(os_log_s **)(gLogObjects + 104);
    }

    else
    {
      id v15 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
      acc_connection_publish_cold_9((uint64_t *)v1, v15);
    }
  }

  if (theArray)
  {
    CFRelease(theArray);
    CFArrayRef theArray = 0LL;
  }

  if (!*(_BYTE *)(v1 + 142) && *(void *)v1 && *(_DWORD *)(v1 + 8) == 6)
  {
    pthread_mutex_lock((pthread_mutex_t *)(v1 + 144));
    int v16 = acc_properties_copyProperty(*(const __CFDictionary **)(v1 + 128), kCFACCProperties_Connection_ManagerParent);
    CFStringRef v17 = (const __CFNumber *)acc_properties_copyProperty( *(const __CFDictionary **)(v1 + 128),  kCFACCProperties_Connection_IsAdapter);
    pthread_mutex_unlock((pthread_mutex_t *)(v1 + 144));
    if (gLogObjects && gNumLogObjects >= 14)
    {
      CFStringRef v18 = *(os_log_s **)(gLogObjects + 104);
    }

    else
    {
      CFStringRef v18 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      __int16 v19 = *(const void **)v1;
      *(_DWORD *)buf = 136316162;
      *(void *)uint64_t v54 = "_checkForAdapterInfo";
      *(_WORD *)&v54[8] = 1024;
      *(_DWORD *)uint64_t v55 = 1444;
      *(_WORD *)&v55[4] = 2112;
      *(void *)&v55[6] = v19;
      *(_WORD *)&v55[14] = 2112;
      *(void *)&v55[16] = v16;
      *(_WORD *)&v55[24] = 2112;
      *(void *)&v55[26] = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "%s:%d connection %@, managerParent %@, isAdapter %@",  buf,  0x30u);
    }

    if (!v16) {
      goto LABEL_123;
    }
    if (*(void *)(v1 + 120))
    {
      int valuePtr = 0;
      if (v17 && (CFNumberGetValue(v17, kCFNumberIntType, &valuePtr), valuePtr))
      {
        ConnectionsThroughAdapter = acc_manager_findConnectionsThroughAdapter(*(CFTypeRef *)v1);
        if (ConnectionsThroughAdapter)
        {
          __int16 v21 = ConnectionsThroughAdapter;
          size_t v22 = CFArrayGetCount(ConnectionsThroughAdapter);
          if (v22)
          {
            CFIndex v23 = v22;
            int v49 = v2;
            values = (void **)calloc(v22, 8uLL);
            id v24 = (const __CFNull *)acc_accInfo_retainedProperty(*(void *)(v1 + 120), 11, 0LL);
            id v25 = (const __CFNull *)acc_accInfo_retainedProperty(*(void *)(v1 + 120), 12, 0LL);
            if (gLogObjects && gNumLogObjects >= 14)
            {
              id v26 = *(os_log_s **)(gLogObjects + 104);
            }

            else
            {
              id v26 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
            {
              __int16 v34 = *(const void **)v1;
              *(_DWORD *)buf = 138413314;
              *(void *)uint64_t v54 = v34;
              *(_WORD *)&v54[8] = 2048;
              *(void *)uint64_t v55 = v23;
              *(_WORD *)&v55[8] = 2112;
              *(void *)&v55[10] = v24;
              *(_WORD *)&v55[18] = 2112;
              *(void *)&_BYTE v55[20] = v25;
              *(_WORD *)&v55[28] = 2112;
              *(void *)&v55[30] = v21;
              _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "%@ isAdapter: Found connectionsThroughAdapter count %ld, adapterVID %@, adapterPID %@, connectionUUIDs %@",  buf,  0x34u);
            }

            uint64_t v48 = v16;
            if (v24 && v25 && values)
            {
              v56.location = 0LL;
              v56.uint64_t length = v23;
              CFArrayGetValues(v21, v56, (const void **)values);
              if (v23 >= 1)
              {
                int v35 = (const void *)kCFACCProperties_Connection_AdapterVID;
                __int16 v36 = (const void *)kCFACCProperties_Connection_AdapterPID;
                int v37 = (const void **)values;
                do
                {
                  __int16 v38 = *v37++;
                  ConnectionWithUUID = acc_manager_getConnectionWithUUID(v38);
                  acc_connection_setProperty((uint64_t)ConnectionWithUUID, v35, v24);
                  acc_connection_setProperty((uint64_t)ConnectionWithUUID, v36, v25);
                  --v23;
                }

                while (v23);
              }
            }

            else if (!values)
            {
LABEL_112:
              uint64_t v3 = &startLogsNotificationObservers;
              goto LABEL_118;
            }

            free(values);
            goto LABEL_112;
          }

LABEL_122:
    CFRelease(v16);
LABEL_123:
    if (v17) {
      CFRelease(v17);
    }
  }

  *(_BYTE *)(v1 + 13_Block_object_dispose(va, 8) = 1;
  if (v2)
  {
    if (gLogObjects && *((int *)v3 + 708) >= 14)
    {
      uint64_t v42 = *(os_log_s **)(gLogObjects + 104);
    }

    else
    {
      uint64_t v42 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v45 = *(const void **)v1;
      uint64_t v46 = *(const __CFDictionary **)(v1 + 40);
      if (v46) {
        uint64_t v46 = (const __CFDictionary *)CFDictionaryGetCount(v46);
      }
      *(_DWORD *)buf = 138412546;
      *(void *)uint64_t v54 = v45;
      *(_WORD *)&v54[8] = 2048;
      *(void *)uint64_t v55 = v46;
      _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "Re-published connection %@! (numEndpoints: %ld)",  buf,  0x16u);
    }
  }

  else
  {
    CFStringRef v43 = acc_connection_copyDescription((CFStringRef)v1);
    if (gLogObjects && *((int *)v3 + 708) >= 14)
    {
      CFRange v44 = *(os_log_s **)(gLogObjects + 104);
    }

    else
    {
      CFRange v44 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)uint64_t v54 = v43;
      _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "[#Events] Published connection %@!",  buf,  0xCu);
    }

    if (v43) {
      CFRelease(v43);
    }
  }

  return 1LL;
}

              uint64_t v94 = (void *)v78;
              goto LABEL_142;
            }

            uint64_t v138 = (os_log_s *)logObjectForModule_15();
            if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR)) {
              loggingProtocol_handleMessage_cold_14();
            }
          }
        }

        uint64_t v3 = 0LL;
        uint64_t v78 = 0LL;
        goto LABEL_122;
      case 0x10u:
        if (a2 < bswap32(a1[1]) >> 16)
        {
          uint64_t v147 = (os_log_s *)logObjectForModule_15();
          if (os_log_type_enabled(v147, OS_LOG_TYPE_ERROR)) {
            loggingProtocol_handleMessage_cold_17();
          }
          LODWORD(v83) = 0;
        }

        else
        {
          uint64_t v83 = bswap32(*((_DWORD *)a1 + 1));
          if ((_DWORD)v83 == *(_DWORD *)(a3 + 120))
          {
            if (*(_BYTE *)(a3 + 112))
            {
              uint64_t v84 = bswap32(*((_DWORD *)a1 + 3));
              if ((_DWORD)v84)
              {
                uint64_t v85 = *(_DWORD *)(a3 + 124);
                uint64_t v86 = *(_DWORD *)(a3 + 116);
                uint64_t v87 = v85 >= v86;
                id v88 = v85 - v86;
                if (v88 != 0 && v87 && v84 <= v88)
                {
                  *(_DWORD *)(a3 + 116) = v86 + v84;
                  id v89 = malloc(v84);
                  if (v89)
                  {
                    id v90 = (uint64_t)v89;
                    memcpy(v89, a1 + 8, v84);
                    if (gLogObjects && gNumLogObjects >= 53)
                    {
                      uint64_t v91 = *(os_log_s **)(gLogObjects + 416);
                    }

                    else
                    {
                      uint64_t v91 = (os_log_s *)&_os_log_default;
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        platform_connectionInfo_configStreamCategoryListReady_cold_1();
                      }
                    }

                    if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG)) {
                      loggingProtocol_handleMessage_cold_23(v90, v83, v91);
                    }
                    writeMessage_binaryBlock(v90, (unsigned __int16)v84);
                    id v95 = *(_DWORD *)(a3 + 116);
                    if (v95 == *(_DWORD *)(a3 + 124))
                    {
                      if (gLogObjects && gNumLogObjects >= 53)
                      {
                        id v96 = *(os_log_s **)(gLogObjects + 416);
                      }

                      else
                      {
                        id v96 = (os_log_s *)&_os_log_default;
                        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                          platform_connectionInfo_configStreamCategoryListReady_cold_1();
                        }
                      }

                      if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG)) {
                        loggingProtocol_handleMessage_cold_21(v96);
                      }
                      sendMessage_stopBinaryLogFile(a3, v83, 0);
                    }

                    else
                    {
                      sendMessage_requestBinaryLogSegment(a3, v83, v95);
                    }

                    return 1LL;
                  }

                  uint64_t v151 = (os_log_s *)logObjectForModule_15();
                  if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR)) {
                    loggingProtocol_handleMessage_cold_20(v151, v152, v153, v154, v155, v156, v157, v158);
                  }
                  __int128 v150 = 2;
LABEL_201:
                  sendMessage_stopBinaryLogFile(a3, v83, v150);
                  return 0LL;
                }
              }

              id v100 = (os_log_s *)logObjectForModule_15();
              if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR)) {
                loggingProtocol_handleMessage_cold_19();
              }
            }

            else
            {
              CFStringRef v149 = (os_log_s *)logObjectForModule_15();
              if (os_log_type_enabled(v149, OS_LOG_TYPE_ERROR)) {
                loggingProtocol_handleMessage_cold_18();
              }
            }
          }

          else
          {
            uint64_t v148 = (os_log_s *)logObjectForModule_15();
            if (os_log_type_enabled(v148, OS_LOG_TYPE_ERROR)) {
              loggingProtocol_handleMessage_cold_25();
            }
          }
        }

        __int128 v150 = 1;
        goto LABEL_201;
      default:
        return v3;
    }
  }

  return v3;
}

uint64_t _CFDictionaryApplierFunction_publishEndpoint(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return acc_endpoint_publish(a2);
  }
  return result;
}

void _CFDictionaryApplierFunction_countEAServiceEndpoints(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 && a3 && (acc_endpoint_getProtocol(a2) == 5 || acc_endpoint_getProtocol(a2) == 7))
  {
    ++*(_WORD *)a3;
    uint64_t v5 = *(__CFArray **)(a3 + 8);
    if (v5) {
      CFArrayAppendValue(v5, *(const void **)(a2 + 16));
    }
  }

uint64_t acc_connection_destroy(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t *)result;
    int v2 = *(uint64_t **)result;
    if (*(void *)result)
    {
      uint64_t v3 = gLogSignpostObjects;
      int v4 = gNumLogSignpostObjects;
      if (gLogSignpostObjects) {
        BOOL v5 = gNumLogSignpostObjects < 2;
      }
      else {
        BOOL v5 = 1;
      }
      if (v5)
      {
        int v6 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          int v24 = 67109632;
          *(_DWORD *)id v25 = 1;
          *(_WORD *)&v25[4] = 2048;
          *(void *)&v25[6] = v3;
          *(_WORD *)&_BYTE v25[14] = 1024;
          *(_DWORD *)&v25[16] = v4;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging_signposts() / init_logging()!\n module %d, gLogSignpostObjects: %p, gNumLogSignpostObjects: %d",  (uint8_t *)&v24,  0x18u);
          uint64_t v3 = gLogSignpostObjects;
          int v4 = gNumLogSignpostObjects;
        }
      }

      else
      {
        int v6 = *(os_log_s **)(gLogSignpostObjects + 8);
      }

      if (v3 && v4 >= 2)
      {
        BOOL v7 = *(os_log_s **)(v3 + 8);
      }

      else
      {
        BOOL v7 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          acc_connection_create_cold_2();
        }
      }

      os_signpost_id_t v8 = os_signpost_id_make_with_pointer(v7, v2);
      if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v9 = v8;
        if (os_signpost_enabled(v6))
        {
          uint64_t v10 = *v2;
          int v24 = 138412290;
          *(void *)id v25 = v10;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_INTERVAL_BEGIN,  v9,  "Connection",  "Create connection %@",  (uint8_t *)&v24,  0xCu);
        }
      }

      CFStringRef v11 = acc_connection_copyDescription((CFStringRef)v2);
      if (gLogObjects && gNumLogObjects >= 14)
      {
        os_signpost_id_t v12 = *(os_log_s **)(gLogObjects + 104);
      }

      else
      {
        os_signpost_id_t v12 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int v24 = 138412290;
        *(void *)id v25 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[#Events] Destroying connection %@...",  (uint8_t *)&v24,  0xCu);
      }

      if (v11) {
        CFRelease(v11);
      }
      *((_BYTE *)v2 + 142) = 1;
      acc_connection_setDataOutHandler(*v1, 0LL);
      if (*((_DWORD *)v2 + 2) == 2) {
        kdebug_trace(731119660LL, 0LL, 0LL, 0LL, 0LL);
      }
      unint64_t CurrentUnixTimeMS = systemInfo_getCurrentUnixTimeMS();
      uint64_t v14 = v2[4];
      if (gLogObjects && gNumLogObjects >= 14)
      {
        id v15 = *(os_log_s **)(gLogObjects + 104);
      }

      else
      {
        id v15 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        uint64_t v16 = *v2;
        int v24 = 138412290;
        *(void *)id v25 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "Dismissing any user notifications for connection %@...",  (uint8_t *)&v24,  0xCu);
      }

      ACCUNManagerDismissNotificationsWithGroupIdentifier(*v2);
      acc_connection_removeAllEndpoints((uint64_t)v2);
      if (*((_BYTE *)v2 + 138))
      {
        platform_analytics_connectionWillBeDestroyed((unint64_t)v2);
        platform_connectionInfo_accessoryConnectionDetached(*v2);
      }

      if (*v2) {
        CFTypeRef v17 = CFRetain((CFTypeRef)*v2);
      }
      else {
        CFTypeRef v17 = 0LL;
      }
      pthread_mutex_lock((pthread_mutex_t *)(v2 + 26));
      if (*v2)
      {
        CFRelease((CFTypeRef)*v2);
        *int v2 = 0LL;
      }

      pthread_mutex_unlock((pthread_mutex_t *)(v2 + 26));
      pthread_mutex_destroy((pthread_mutex_t *)(v2 + 26));
      CFStringRef v18 = (const void *)v2[2];
      if (v18)
      {
        CFRelease(v18);
        v2[2] = 0LL;
      }

      __int16 v19 = (const void *)v2[5];
      if (v19)
      {
        CFRelease(v19);
        v2[5] = 0LL;
      }

      pthread_mutex_lock((pthread_mutex_t *)(v2 + 18));
      uint64_t v20 = (const void *)v2[16];
      if (v20)
      {
        CFRelease(v20);
        v2[16] = 0LL;
      }

      pthread_mutex_unlock((pthread_mutex_t *)(v2 + 18));
      pthread_mutex_destroy((pthread_mutex_t *)(v2 + 18));
      acc_nvmInfo_init((_DWORD *)v2 + 28);
      acc_authInfo_cleanup((uint64_t)(v2 + 6), 1);
      acc_accInfo_destroy((void **)v2 + 15);
      if (*v1)
      {
        free((void *)*v1);
        uint64_t *v1 = 0LL;
      }

      if (gLogObjects && gNumLogObjects >= 14)
      {
        __int16 v21 = *(os_log_s **)(gLogObjects + 104);
      }

      else
      {
        __int16 v21 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        int v24 = 138412546;
        *(void *)id v25 = v17;
        *(_WORD *)&_BYTE v25[8] = 2048;
        *(double *)&v25[10] = (double)(CurrentUnixTimeMS - v14) / 1000.0;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Destroyed connection %@! (duration: %.2fs)",  (uint8_t *)&v24,  0x16u);
      }

      if (v17) {
        CFRelease(v17);
      }
      if (gLogObjects && gNumLogObjects >= 14)
      {
        size_t v22 = *(os_log_s **)(gLogObjects + 104);
      }

      else
      {
        size_t v22 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
        acc_connection_destroy_cold_3();
      }
      acc_manager_checkForWirelessCTA();
      if (gLogObjects && gNumLogObjects >= 14)
      {
        CFIndex v23 = *(os_log_s **)(gLogObjects + 104);
      }

      else
      {
        CFIndex v23 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
        acc_connection_destroy_cold_1();
      }
      acc_manager_checkForInductiveCTA();
      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

BOOL acc_connection_setDataOutHandler(uint64_t a1, const void *a2)
{
  if (a1)
  {
    pthread_rwlock_wrlock(&_gAccConnectionLock);
    int v4 = *(const void **)(a1 + 24);
    if (v4) {
      _Block_release(v4);
    }
    if (a2) {
      BOOL v5 = _Block_copy(a2);
    }
    else {
      BOOL v5 = 0LL;
    }
    *(void *)(a1 + 24) = v5;
    pthread_rwlock_unlock(&_gAccConnectionLock);
  }

  return a1 != 0;
}

unint64_t acc_connection_getDurationMS(unint64_t result)
{
  if (result) {
    return systemInfo_getCurrentUnixTimeMS() - *(void *)(result + 32);
  }
  return result;
}

void acc_connection_removeAllEndpoints(uint64_t a1)
{
  if (a1 && *(void *)(a1 + 40))
  {
    pthread_rwlock_wrlock(&_gAccConnectionLock);
    CFStringRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, *(CFDictionaryRef *)(a1 + 40));
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 40));
    pthread_rwlock_unlock(&_gAccConnectionLock);
    CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_destroyEndpoint, 0LL);
    if (Copy) {
      CFRelease(Copy);
    }
  }

uint64_t acc_connection_getEndpoints(uint64_t result)
{
  if (result) {
    return *(void *)(result + 40);
  }
  return result;
}

CFSetRef acc_connection_copyEndpointUUIDs(CFSetRef result)
{
  if (result)
  {
    CFSetRef v1 = result;
    uint64_t result = (CFSetRef)*((void *)result + 5);
    if (result)
    {
      CFIndex Count = CFDictionaryGetCount(result);
      if (Count < 1)
      {
        return CFSetCreate(kCFAllocatorDefault, 0LL, 0LL, &kCFTypeSetCallBacks);
      }

      else
      {
        CFIndex v3 = Count;
        __chkstk_darwin();
        BOOL v5 = (char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        memset(v5, 170, v4);
        CFDictionaryGetKeysAndValues(*((CFDictionaryRef *)v1 + 5), (const void **)v5, 0LL);
        return CFSetCreate(kCFAllocatorDefault, (const void **)v5, v3, &kCFTypeSetCallBacks);
      }
    }
  }

  return result;
}

void **_CFDictionaryApplierFunction_destroyEndpoint(uint64_t a1, void *a2)
{
  CFIndex v3 = a2;
  if (a2) {
    return acc_endpoint_destroy(&v3);
  }
  return result;
}

BOOL acc_connection_setAuthCertData(BOOL result, const void *a2)
{
  if (result)
  {
    CFIndex v3 = (uint64_t *)result;
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 14;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      BOOL v5 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      BOOL v5 = *(os_log_s **)(gLogObjects + 104);
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *v3;
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Setting auth cert data for connection %@...",  (uint8_t *)&v7,  0xCu);
    }

    return acc_authInfo_setCertData((uint64_t)(v3 + 6), a2);
  }

  return result;
}

uint64_t acc_connection_setAuthStatus(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v6 = acc_connection_copyUUID(a1);
  if (!v6) {
    return 0LL;
  }
  int v7 = v6;
  if (gLogObjects) {
    BOOL v8 = gNumLogObjects < 14;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    os_signpost_id_t v9 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    os_signpost_id_t v9 = *(os_log_s **)(gLogObjects + 104);
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412802;
    *(void *)&uint8_t buf[4] = v7;
    __int16 v27 = 1024;
    int v28 = a2;
    __int16 v29 = 1024;
    int v30 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "acc_connection_setAuthStatus: %@, authType %{coreacc:ACCAuthInfo_Type_t}d, authStatus %{coreacc:ACCAuthInfo_Status_t}d",  buf,  0x18u);
  }

  uint64_t Status = acc_authInfo_getStatus(a1 + 48, a2);
  BOOL isAuthenticated = acc_authInfo_isAuthenticated(a1 + 48, 6LL);
  uint64_t v12 = acc_authInfo_setStatus(a1 + 48, a2, a3);
  if ((_DWORD)v12)
  {
    uint64_t v13 = acc_authInfo_getStatus(a1 + 48, a2);
    BOOL v14 = acc_authInfo_isAuthenticated(a1 + 48, 6LL);
    if ((_DWORD)v13 != (_DWORD)Status)
    {
      uint64_t v15 = v14;
      if (gLogObjects && gNumLogObjects >= 14)
      {
        uint64_t v16 = *(os_log_s **)(gLogObjects + 104);
      }

      else
      {
        uint64_t v16 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        CFTypeRef v17 = "NO";
        *(_DWORD *)buf = 138413570;
        *(void *)&uint8_t buf[4] = v7;
        if (isAuthenticated) {
          CFStringRef v18 = "YES";
        }
        else {
          CFStringRef v18 = "NO";
        }
        if ((_DWORD)v15) {
          CFTypeRef v17 = "YES";
        }
        __int16 v27 = 1024;
        int v28 = Status;
        __int16 v29 = 1024;
        int v30 = v13;
        __int16 v31 = 1024;
        int v32 = a2;
        __int16 v33 = 2080;
        __int16 v34 = v18;
        __int16 v35 = 2080;
        __int16 v36 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Authentication status changed for connection %@! oldAuthStatus: %{coreacc:ACCAuthInfo_Status_t}d, newAuthStatu s: %{coreacc:ACCAuthInfo_Status_t}d, authType: %{coreacc:ACCAuthInfo_Type_t}d, wasAuthenticated: %s, isAuthenticated: %s",  buf,  0x32u);
      }

      platform_notifications_authenticationStatusDidChangeForConnectionUUID(v7, Status, v13, a2, v15, isAuthenticated);
      *(void *)buf = 0LL;
      CFDictionaryApplyFunction( *(CFDictionaryRef *)(a1 + 40),  (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_findiAP2Endpoint,  buf);
      uint64_t v12 = v12;
      if ((v13 & 0xFFFFFFFD) == 1)
      {
        platform_analytics_connectionAuthUnsuccessful((CFStringRef *)a1, v13);
        __int16 v19 = &startLogsNotificationObservers;
      }

      else
      {
        __int16 v19 = &startLogsNotificationObservers;
        if ((_DWORD)v13 == 2 && !*(void *)buf)
        {
          platform_analytics_connectionPassedAuth((CFStringRef *)a1);
          goto LABEL_32;
        }
      }

      if ((_DWORD)v13 != 2)
      {
LABEL_50:
        if (*(_BYTE *)(a1 + 138)) {
          platform_connectionInfo_accessoryConnectionInfoPropertyChanged(v7);
        }
        goto LABEL_52;
      }

void *acc_connection_copyUUID(uint64_t a1)
{
  CFSetRef v1 = (void *)a1;
  if (a1)
  {
    int v2 = (pthread_mutex_t *)(a1 + 208);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 208));
    CFSetRef v1 = (void *)*v1;
    if (v1) {
      CFRetain(v1);
    }
    pthread_mutex_unlock(v2);
  }

  return v1;
}

void _CFDictionaryApplierFunction_findiAP2Endpoint(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

BOOL acc_connection_setAuthCTAAAllowed(BOOL result, char a2)
{
  if (result) {
    return acc_authInfo_setCTAAllowed(result + 48, a2);
  }
  return result;
}

uint64_t acc_connection_getAuthStatus(uint64_t result, uint64_t a2)
{
  if (result) {
    return acc_authInfo_getStatus(result + 48, a2);
  }
  return result;
}

BOOL acc_connection_isAuthenticated(BOOL result, uint64_t a2)
{
  if (result) {
    return acc_authInfo_isAuthenticated(result + 48, a2);
  }
  return result;
}

uint64_t acc_connection_getTypeString(uint64_t a1)
{
  uint64_t result = kACCConnection_Type_Strings[11];
  if (a1)
  {
    uint64_t v3 = *(unsigned int *)(a1 + 8);
  }

  return result;
}

uint64_t acc_connection_getAccessoryInfo(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = *(void *)(result + 120);
    if (!result)
    {
      if (*(_BYTE *)(v1 + 137))
      {
        acc_connection_mapAccessoryInfo((uint64_t *)v1);
        return *(void *)(v1 + 120);
      }

      else
      {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t acc_connection_getType(uint64_t a1)
{
  uint64_t result = 11LL;
  if (a1)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 8);
    if (v3 <= 9) {
      return v3;
    }
    else {
      return 11LL;
    }
  }

  return result;
}

CFTypeRef acc_connection_copyIdentifier(uint64_t a1)
{
  else {
    return 0LL;
  }
}

uint64_t acc_connection_getAuthInfo(uint64_t a1)
{
  if (a1) {
    return a1 + 48;
  }
  else {
    return 0LL;
  }
}

void acc_connection_mapAccessoryInfo(uint64_t *a1)
{
  if (!a1) {
    return;
  }
  if (!gLogObjects || gNumLogObjects < 14)
  {
    unsigned int v3 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    unsigned int v3 = *(os_log_s **)(gLogObjects + 104);
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *a1;
    *(_DWORD *)buf = 138412290;
    uint64_t v40 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Mapping accessory info for connection %@...",  buf,  0xCu);
  }

  BOOL v5 = (const __CFDictionary *)a1[5];
  if (!v5 || CFDictionaryGetCount(v5) < 1) {
    return;
  }
  if (*((_BYTE *)a1 + 142))
  {
    __int16 v36 = (os_log_s *)logObjectForModule_1(13);
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_WORD *)buf = 0;
    __int16 v29 = "Skipped mapping accessory info since connection is being destroyed.";
    int v30 = v36;
    os_log_type_t v31 = OS_LOG_TYPE_INFO;
    goto LABEL_89;
  }

  uint64_t context = 0LL;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 18));
  uint64_t v6 = (const void *)kCFACCProperties_Connection_EndpointUUIDForAccessoryInfo;
  if (acc_properties_containsProperty( (CFDictionaryRef)a1[16],  kCFACCProperties_Connection_EndpointUUIDForAccessoryInfo))
  {
    int v7 = acc_properties_copyProperty((const __CFDictionary *)a1[16], v6);
    EndpointWithUUID = acc_manager_getEndpointWithUUID(v7);
    uint64_t context = EndpointWithUUID;
    if (v7)
    {
      CFRelease(v7);
      EndpointWithUUID = context;
    }

    if (gLogObjects) {
      BOOL v9 = gNumLogObjects <= 13;
    }
    else {
      BOOL v9 = 1;
    }
    int v10 = !v9;
    if (EndpointWithUUID)
    {
      if (v10)
      {
        CFStringRef v11 = *(os_log_s **)(gLogObjects + 104);
      }

      else
      {
        CFStringRef v11 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        BOOL v14 = "Endpoint for accessory info was specified!";
        uint64_t v15 = v11;
        os_log_type_t v16 = OS_LOG_TYPE_DEFAULT;
LABEL_40:
        _os_log_impl((void *)&_mh_execute_header, v15, v16, v14, buf, 2u);
      }
    }

    else
    {
      if (v10)
      {
        uint64_t v13 = *(os_log_s **)(gLogObjects + 104);
      }

      else
      {
        uint64_t v13 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        acc_connection_mapAccessoryInfo_cold_6();
      }
    }
  }

  else
  {
    CFDictionaryApplyFunction( (CFDictionaryRef)a1[5],  (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_findiAPEndpoint,  &context);
    if (context)
    {
      if (gLogObjects && gNumLogObjects >= 14)
      {
        uint64_t v12 = *(os_log_s **)(gLogObjects + 104);
      }

      else
      {
        uint64_t v12 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        BOOL v14 = "Found iAP endpoint, mapping accessory info to first iAP endpoint...";
        uint64_t v15 = v12;
        os_log_type_t v16 = OS_LOG_TYPE_INFO;
        goto LABEL_40;
      }
    }
  }

  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 18));
  CFTypeRef v17 = context;
  if (context) {
    goto LABEL_71;
  }
  CFDictionaryApplyFunction( (CFDictionaryRef)a1[5],  (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_findEAServiceEndpoint,  &context);
  if (context)
  {
    if (gLogObjects && gNumLogObjects >= 14)
    {
      CFStringRef v18 = *(os_log_s **)(gLogObjects + 104);
    }

    else
    {
      CFStringRef v18 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      size_t v22 = "Found EAService endpoint, mapping accessory info to first EAService endpoint...";
      uint64_t v23 = v18;
LABEL_69:
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, v22, buf, 2u);
    }
  }

  else
  {
    CFDictionaryApplyFunction( (CFDictionaryRef)a1[5],  (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_findInternalInfoEndpoint,  &context);
    if (gLogObjects) {
      BOOL v19 = gNumLogObjects <= 13;
    }
    else {
      BOOL v19 = 1;
    }
    int v20 = !v19;
    if (context)
    {
      if (v20)
      {
        uint64_t v21 = *(os_log_s **)(gLogObjects + 104);
      }

      else
      {
        uint64_t v21 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        size_t v22 = "Found InternalInfo endpoint, mapping accessory info to first InternalInfo endpoint...";
        uint64_t v23 = v21;
        goto LABEL_69;
      }
    }

    else
    {
      if (v20)
      {
        int v24 = *(os_log_s **)(gLogObjects + 104);
      }

      else
      {
        int v24 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "Couldn't find known endpoint types, mapping accessory info to first endpoint...",  buf,  2u);
      }

      if (CFDictionaryGetCount((CFDictionaryRef)a1[5]) >= 1)
      {
        __chkstk_darwin();
        __int16 v35 = (uint64_t *)((char *)&v37 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL));
        memset(v35, 170, v34);
        CFDictionaryGetKeysAndValues((CFDictionaryRef)a1[5], 0LL, (const void **)v35);
        uint64_t context = (void *)*v35;
      }
    }
  }

  CFTypeRef v17 = context;
  if (!context)
  {
    if (gLogObjects && gNumLogObjects >= 14)
    {
      __int16 v33 = *(os_log_s **)(gLogObjects + 104);
    }

    else
    {
      __int16 v33 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)buf = 0;
    __int16 v29 = "Couldn't find an endpoint to map accessory info to!";
    int v30 = v33;
    os_log_type_t v31 = OS_LOG_TYPE_DEFAULT;
LABEL_89:
    uint32_t v32 = 2;
    goto LABEL_80;
  }

LABEL_71:
  id v25 = (char *)a1[15];
  if (!v25)
  {
    id v25 = acc_accInfo_create();
    a1[15] = (uint64_t)v25;
    CFTypeRef v17 = context;
  }

  acc_accInfo_setAccessoryInfo((uint64_t)v25, v17[8]);
  if (gLogObjects && gNumLogObjects >= 14)
  {
    id v26 = *(os_log_s **)(gLogObjects + 104);
  }

  else
  {
    id v26 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v27 = *a1;
    uint64_t v28 = context[2];
    *(_DWORD *)buf = 138412546;
    uint64_t v40 = v27;
    __int16 v41 = 2112;
    uint64_t v42 = v28;
    __int16 v29 = "Mapped accessory info for connection %@ to endpoint %@";
    int v30 = v26;
    os_log_type_t v31 = OS_LOG_TYPE_DEFAULT;
    uint32_t v32 = 22;
LABEL_80:
    _os_log_impl((void *)&_mh_execute_header, v30, v31, v29, buf, v32);
  }

                  BOOL v8 = &startLogsNotificationObservers;
                  goto LABEL_72;
                }

                goto LABEL_69;
              }

              uint64_t v48 = (unsigned __int8 **)(v47 + 256);
              int v49 = (uint64_t *)(v47 + 336);
              if (!qiAuth_util_certificateExistsCache(a1, v46, *(unsigned __int8 **)(v47 + 256), 0x20u))
              {
                uint64_t v51 = (os_log_s *)logObjectForModule_19();
                os_log_type_t v31 = (uint64_t)v75;
                if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 136315650;
                  uint64_t v78 = "_qiAuth_protocol_handleResponse_DIGESTS";
                  uint64_t v79 = 1024;
                  id v80 = 2004;
                  uint64_t v81 = 1024;
                  uint64_t v82 = v46;
                  _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "%s:%d Cert NOT EXIST in cache! slot %d",  buf,  0x18u);
                }

                BOOL v9 = &startLogsNotificationObservers;
                goto LABEL_72;
              }

              unsigned int inited = 0LL;
            }
          }
        }
      }
    }
  }

  else
  {
    uint64_t v15 = 0;
    unsigned int inited = 4294967294LL;
  }

  __break(0x5519u);
  return result;
}

BOOL acc_connection_setProperties(uint64_t a1, const __CFDictionary *a2)
{
  BOOL v2 = 0LL;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v5 = gNumLogObjects < 14;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      uint64_t v6 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      uint64_t v6 = *(os_log_s **)(gLogObjects + 104);
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)a1;
      int v15 = 138412546;
      uint64_t v16 = v7;
      __int16 v17 = 2112;
      CFStringRef v18 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Setting properties for connection %@: %@",  (uint8_t *)&v15,  0x16u);
    }

    pthread_mutex_lock((pthread_mutex_t *)(a1 + 144));
    BOOL v8 = acc_properties_copyProperties(*(const __CFDictionary **)(a1 + 128));
    BOOL v2 = acc_properties_setProperties(*(void **)(a1 + 128), a2);
    BOOL v9 = acc_properties_copyProperties(*(const __CFDictionary **)(a1 + 128));
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 144));
    if (gLogObjects && gNumLogObjects >= 14)
    {
      int v10 = *(os_log_s **)(gLogObjects + 104);
    }

    else
    {
      int v10 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = *(void *)a1;
      int v15 = 138412546;
      uint64_t v16 = v11;
      __int16 v17 = 2112;
      CFStringRef v18 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Set properties for connection %@: %@",  (uint8_t *)&v15,  0x16u);
    }

    if (*(_BYTE *)(a1 + 137) && !*(_BYTE *)(a1 + 142))
    {
      if (gLogObjects && gNumLogObjects >= 14)
      {
        uint64_t v12 = *(os_log_s **)(gLogObjects + 104);
      }

      else
      {
        uint64_t v12 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
        acc_connection_setProperties_cold_3();
      }
      acc_manager_checkForWirelessCTA();
      if (gLogObjects && gNumLogObjects >= 14)
      {
        uint64_t v13 = *(os_log_s **)(gLogObjects + 104);
      }

      else
      {
        uint64_t v13 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
        acc_connection_setProperties_cold_1();
      }
      acc_manager_checkForInductiveCTA();
      platform_notifications_propertiesDidChangeForConnectionUUID(*(void *)a1, v8, v9);
    }

    if (v8) {
      CFRelease(v8);
    }
    if (v9) {
      CFRelease(v9);
    }
    if (*(_BYTE *)(a1 + 138)) {
      platform_connectionInfo_accessoryConnectionInfoPropertyChanged(*(const void **)a1);
    }
  }

  return v2;
}

BOOL acc_connection_removeProperty(uint64_t a1, const void *a2)
{
  BOOL v2 = 0LL;
  if (a1 && a2)
  {
    if (gLogObjects) {
      BOOL v5 = gNumLogObjects < 14;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      uint64_t v6 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      uint64_t v6 = *(os_log_s **)(gLogObjects + 104);
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)a1;
      int v13 = 138412546;
      BOOL v14 = a2;
      __int16 v15 = 2112;
      uint64_t v16 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Removing property %@ for connection %@...",  (uint8_t *)&v13,  0x16u);
    }

    pthread_mutex_lock((pthread_mutex_t *)(a1 + 144));
    BOOL v8 = acc_properties_copyProperties(*(const __CFDictionary **)(a1 + 128));
    BOOL v2 = acc_properties_removeProperty(*(CFMutableDictionaryRef *)(a1 + 128), a2);
    BOOL v9 = acc_properties_copyProperties(*(const __CFDictionary **)(a1 + 128));
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 144));
    if (gLogObjects && gNumLogObjects >= 14)
    {
      int v10 = *(os_log_s **)(gLogObjects + 104);
    }

    else
    {
      int v10 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = *(void *)a1;
      int v13 = 138412802;
      BOOL v14 = a2;
      __int16 v15 = 2112;
      uint64_t v16 = v11;
      __int16 v17 = 2112;
      CFStringRef v18 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Removed property %@ for connection %@: %@",  (uint8_t *)&v13,  0x20u);
    }

    if (*(_BYTE *)(a1 + 137) && !*(_BYTE *)(a1 + 142)) {
      platform_notifications_propertiesDidChangeForConnectionUUID(*(void *)a1, v8, v9);
    }
    if (v8) {
      CFRelease(v8);
    }
    if (v9) {
      CFRelease(v9);
    }
    if (*(_BYTE *)(a1 + 138)) {
      platform_connectionInfo_accessoryConnectionInfoPropertyChanged(*(const void **)a1);
    }
  }

  return v2;
}

char *acc_connection_copyProperty(char *result, const void *a2)
{
  if (result)
  {
    unsigned int v3 = (const __CFDictionary **)result;
    uint64_t v4 = (pthread_mutex_t *)(result + 144);
    pthread_mutex_lock((pthread_mutex_t *)(result + 144));
    BOOL v5 = acc_properties_copyProperty(v3[16], a2);
    pthread_mutex_unlock(v4);
    return (char *)v5;
  }

  return result;
}

CFDictionaryRef acc_connection_copyProperties(const __CFDictionary *result)
{
  if (result)
  {
    uint64_t v1 = result;
    BOOL v2 = (pthread_mutex_t *)((char *)result + 144);
    pthread_mutex_lock((pthread_mutex_t *)((char *)result + 144));
    unsigned int v3 = acc_properties_copyProperties(*((const __CFDictionary **)v1 + 16));
    pthread_mutex_unlock(v2);
    return v3;
  }

  return result;
}

BOOL acc_connection_getSupervisedTransportsRestricted(BOOL result)
{
  if (result) {
    return *(_BYTE *)(result + 136) != 0;
  }
  return result;
}

BOOL acc_connection_setSupervisedTransportsRestricted(uint64_t *a1, int a2)
{
  if (a1 && *((unsigned __int8 *)a1 + 136) != a2)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 14;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      BOOL v5 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      BOOL v5 = *(os_log_s **)(gLogObjects + 104);
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = "NO";
      uint64_t v7 = *a1;
      if (a2) {
        uint64_t v6 = "YES";
      }
      int v9 = 136315394;
      int v10 = v6;
      __int16 v11 = 2112;
      uint64_t v12 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Setting supervisedTransportsRestricted... (supervisedTransportsRestricted: %s, connectionUUID: %@)",  (uint8_t *)&v9,  0x16u);
    }

    *((_BYTE *)a1 + 136) = a2;
    CFDictionaryApplyFunction( (CFDictionaryRef)a1[5],  (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_supervisedTransportsRestrictedDidChange,  0LL);
  }

  return a1 != 0LL;
}

uint64_t _CFDictionaryApplierFunction_supervisedTransportsRestrictedDidChange(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return acc_endpoint_supervisedTransportsRestrictedDidChange(a2);
  }
  return result;
}

BOOL acc_connection_isPublished(BOOL result)
{
  if (result) {
    return *(_BYTE *)(result + 138) != 0;
  }
  return result;
}

void _CFDictionaryApplierFunction_findiAPEndpoint(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void _CFDictionaryApplierFunction_findEAServiceEndpoint(uint64_t a1, void *a2, void *a3)
{
  if (a2 && a3)
  {
    int Protocol = acc_endpoint_getProtocol((uint64_t)a2);
    int v6 = Protocol;
    int v7 = 11;
    if (*a2)
    {
      if (*(_DWORD *)(*a2 + 8LL) <= 9u) {
        int v7 = *(_DWORD *)(*a2 + 8LL);
      }
      else {
        int v7 = 11;
      }
    }

    if (Protocol != 5 || v7 == 6)
    {
      if (gLogObjects && gNumLogObjects >= 14)
      {
        BOOL v8 = *(os_log_s **)(gLogObjects + 104);
      }

      else
      {
        BOOL v8 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v9 = a2[2];
        int v10 = 136315906;
        __int16 v11 = "_CFDictionaryApplierFunction_findEAServiceEndpoint";
        __int16 v12 = 2112;
        uint64_t v13 = v9;
        __int16 v14 = 1024;
        int v15 = v6;
        __int16 v16 = 1024;
        int v17 = v7;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "%s: Skip endpoint %@ with protocol %{coreacc:ACCEndpoint_Protocol_t}d, connectionType %{coreacc:ACCConnection_Type_t}d",  (uint8_t *)&v10,  0x22u);
      }
    }

    else if (!*a3)
    {
      *a3 = a2;
    }
  }

void _CFDictionaryApplierFunction_findInternalInfoEndpoint(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void acc_connection_updateAcccessoryInfoIfNeeded(uint64_t a1, const void *a2)
{
  if (!a1 || !a2) {
    return;
  }
  BOOL v4 = (const void *)kCFACCProperties_Connection_EndpointUUIDForAccessoryInfo;
  if (!acc_properties_containsProperty( *(CFDictionaryRef *)(a1 + 128),  kCFACCProperties_Connection_EndpointUUIDForAccessoryInfo)) {
    goto LABEL_13;
  }
  BOOL v5 = acc_properties_copyProperty(*(const __CFDictionary **)(a1 + 128), v4);
  if (CFEqual(v5, a2))
  {
    EndpointWithUUID = 0LL;
    if (!v5) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  EndpointWithUUID = acc_manager_getEndpointWithUUID(a2);
  if (v5) {
LABEL_6:
  }
    CFRelease(v5);
LABEL_7:
  if (EndpointWithUUID)
  {
    int v7 = *(char **)(a1 + 120);
    if (!v7)
    {
      int v7 = acc_accInfo_create();
      *(void *)(a1 + 120) = v7;
    }

    acc_accInfo_setAccessoryInfo((uint64_t)v7, EndpointWithUUID[8]);
    if (gLogObjects && gNumLogObjects >= 14)
    {
      BOOL v8 = *(os_log_s **)(gLogObjects + 104);
    }

    else
    {
      BOOL v8 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)a1;
      uint64_t v11 = EndpointWithUUID[2];
      int v12 = 138412546;
      uint64_t v13 = v10;
      __int16 v14 = 2112;
      uint64_t v15 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Update accessory info for connection %@ with endpoint %@",  (uint8_t *)&v12,  0x16u);
    }

    return;
  }

LABEL_13:
  if (gLogObjects && gNumLogObjects >= 14)
  {
    uint64_t v9 = *(os_log_s **)(gLogObjects + 104);
  }

  else
  {
    uint64_t v9 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v12) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Couldn't find an endpoint to update accessory info with! Try mapAccessoryInfo",  (uint8_t *)&v12,  2u);
  }

  acc_connection_mapAccessoryInfo((uint64_t *)a1);
}

  iAP2LinkHandleSuspend(*(void *)(v3 + 24));
  if ((ResetEventMask & 8) == 0)
  {
LABEL_9:
    if ((ResetEventMask & 0x1000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_15;
  }

  __int16 v16 = acc_strings_placeholder_Unknown();
  uint64_t v15 = (id)objc_claimAutoreleasedReturnValue(v16);
  if (!v6) {
    goto LABEL_16;
  }
LABEL_14:
  int v17 = v6[4];
  if (!v17)
  {
LABEL_16:
    BOOL v19 = acc_strings_placeholder_Unknown();
    CFStringRef v18 = (id)objc_claimAutoreleasedReturnValue(v19);
    if (!v6) {
      goto LABEL_19;
    }
    goto LABEL_17;
  }

  CFStringRef v18 = v17;
LABEL_17:
  int v20 = v6[5];
  if (v20)
  {
    uint64_t v21 = v20;
LABEL_20:
    uint64_t v23 = v6[6];
    int v24 = v6[7];
    id v25 = v6[9];
    goto LABEL_21;
  }

  uint64_t v13 = *a4 & 0xF;
LABEL_14:
  if (gLogObjects && gNumLogObjects >= 60)
  {
    __int16 v14 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    __int16 v14 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    __int16 v16 = v13 - 1LL;
    if (v16 > 0xA)
    {
      int v17 = "UNKNOWN";
      if (a6) {
        goto LABEL_24;
      }
    }

    else
    {
      int v17 = off_1001FD120[v16];
      if (a6)
      {
LABEL_24:
        CFStringRef v18 = (unsigned __int16)*a6;
LABEL_27:
        BOOL v19 = 136316674;
        int v20 = "qiAuth_protocol_initMsg_GET_DIGESTS";
        uint64_t v21 = 1024;
        size_t v22 = 2650;
        uint64_t v23 = 1024;
        int v24 = v12;
        id v25 = 1024;
        id v26 = a2;
        uint64_t v27 = 1024;
        uint64_t v28 = v13;
        __int16 v29 = 2080;
        int v30 = v17;
        os_log_type_t v31 = 1024;
        uint32_t v32 = v18;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "%s:%d result %d, version %u, msgType %d(%s), msgDataOutLen %d",  (uint8_t *)&v19,  0x34u);
        return v12;
      }
    }

    CFStringRef v18 = -1;
    goto LABEL_27;
  }

  return v12;
}

  if (gLogObjects && gNumLogObjects >= 60)
  {
    uint64_t v11 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    uint64_t v11 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    else {
      int v12 = off_1001FD120[v6 - 1];
    }
    *(_DWORD *)buf = 136316930;
    uint64_t v23 = "qiAuth_protocol_checkValidMessageHeaderAndSize";
    int v24 = 1024;
    id v25 = 578;
    id v26 = 1024;
    uint64_t v27 = v9;
    uint64_t v28 = 1024;
    __int16 v29 = v5;
    int v30 = 1024;
    *(_DWORD *)os_log_type_t v31 = v6;
    *(_WORD *)&v31[4] = 2080;
    *(void *)&v31[6] = v12;
    *(_WORD *)&v31[14] = 1024;
    *(_DWORD *)&v31[16] = a2;
    uint32_t v32 = 1024;
    __int16 v33 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s:%d result %d, ver %d, msgType %d(%s), msgHeader 0x%02X, msgDataLen %d",  buf,  0x3Au);
  }

  return v9 == 0;
}
  }

  else
  {
    LODWORD(v6) = 0;
  }

  return (int)v6;
}

  albumTitle = self->_albumTitle;
  if (albumTitle)
  {
    albumTitle = -[NSString UTF8String](albumTitle, "UTF8String");
    validMask = self->_validMask;
  }

  a3->var3 = (char *)albumTitle;
  a3->var0 |= 0x40u;
  if ((validMask & 0x1000) == 0)
  {
LABEL_5:
    if ((validMask & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }

  __break(0x5513u);
  return result;
}

uint64_t acc_connection_sendDataOut(uint64_t *a1, uint64_t a2, const __CFData *a3)
{
  if (!a1) {
    return 0LL;
  }
  pthread_rwlock_rdlock(&_gAccConnectionLock);
  if (gLogObjects) {
    BOOL v6 = gNumLogObjects < 14;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    int v7 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    int v7 = *(os_log_s **)(gLogObjects + 104);
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    acc_connection_sendDataOut_cold_2(a1, v7);
  }
  uint64_t v8 = a1[3];
  if (v8)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const __CFData *))(v8 + 16))(v8, *a1, a2, a3);
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 14)
    {
      uint64_t v10 = *(os_log_s **)(gLogObjects + 104);
    }

    else
    {
      uint64_t v10 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      CFIndex Length = CFDataGetLength(a3);
      uint64_t v13 = *a1;
      int v14 = 134218498;
      CFIndex v15 = Length;
      __int16 v16 = 2112;
      uint64_t v17 = v13;
      __int16 v18 = 2112;
      uint64_t v19 = a2;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "No DataOutHandler!!! - Unable to send %ld bytes of outgoing data for connectionUUID %@ endpointUUID %@",  (uint8_t *)&v14,  0x20u);
    }

    uint64_t v9 = 0LL;
  }

  pthread_rwlock_unlock(&_gAccConnectionLock);
  return v9;
}

uint64_t acc_connection_setPairingStatus(uint64_t a1, int a2)
{
  BOOL v4 = (_DWORD *)(a1 + 112);
  if (gLogObjects) {
    BOOL v5 = gNumLogObjects < 9;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    BOOL v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    BOOL v6 = *(os_log_s **)(gLogObjects + 64);
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "acc_connection_setPairingStatus", v8, 2u);
  }

  acc_nvmInfo_setPairingStatus(v4, a2);
  if (*(_BYTE *)(a1 + 138)) {
    platform_connectionInfo_accessoryConnectionInfoPropertyChanged(*(const void **)a1);
  }
  return 1LL;
}

uint64_t acc_connection_getPairingStatus(uint64_t a1)
{
  uint64_t v1 = (unsigned int *)(a1 + 112);
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 9;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    unsigned int v3 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    unsigned int v3 = *(os_log_s **)(gLogObjects + 64);
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "acc_connection_getPairingStatus",  (uint8_t *)v7,  2u);
  }

  uint64_t PairingStatus = acc_nvmInfo_getPairingStatus(v1);
  if (gLogObjects && gNumLogObjects >= 9)
  {
    BOOL v5 = *(os_log_s **)(gLogObjects + 64);
  }

  else
  {
    BOOL v5 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = PairingStatus;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "acc_connection_getPairingStatus: %d",  (uint8_t *)v7,  8u);
  }

  return PairingStatus;
}

BOOL acc_connection_isConnectedThroughAdapter(BOOL result)
{
  if (result)
  {
    uint64_t v1 = result;
    BOOL v2 = (pthread_mutex_t *)(result + 144);
    pthread_mutex_lock((pthread_mutex_t *)(result + 144));
    uint64_t Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v1 + 128), kCFACCProperties_Connection_AdapterVID);
    BOOL v4 = CFDictionaryGetValue(*(CFDictionaryRef *)(v1 + 128), kCFACCProperties_Connection_AdapterPID);
    pthread_mutex_unlock(v2);
    if (Value) {
      BOOL v5 = v4 == 0LL;
    }
    else {
      BOOL v5 = 1;
    }
    return !v5;
  }

  return result;
}

uint64_t acc_connection_getAdapterVID(uint64_t result)
{
  unsigned __int16 valuePtr = 0;
  if (result)
  {
    uint64_t v1 = result;
    BOOL v2 = (pthread_mutex_t *)(result + 144);
    pthread_mutex_lock((pthread_mutex_t *)(result + 144));
    uint64_t Value = (const __CFNumber *)CFDictionaryGetValue( *(CFDictionaryRef *)(v1 + 128),  kCFACCProperties_Connection_AdapterVID);
    pthread_mutex_unlock(v2);
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberSInt16Type, &valuePtr);
      return valuePtr;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t acc_connection_getAdapterPID(uint64_t result)
{
  unsigned __int16 valuePtr = 0;
  if (result)
  {
    uint64_t v1 = result;
    BOOL v2 = (pthread_mutex_t *)(result + 144);
    pthread_mutex_lock((pthread_mutex_t *)(result + 144));
    uint64_t Value = (const __CFNumber *)CFDictionaryGetValue( *(CFDictionaryRef *)(v1 + 128),  kCFACCProperties_Connection_AdapterPID);
    pthread_mutex_unlock(v2);
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberSInt16Type, &valuePtr);
      return valuePtr;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

  ;
}

void platform_analytics_connectionWillBePublished(uint64_t *a1)
{
  if (a1 && *a1)
  {
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 7;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      BOOL v4 = (os_log_s *)&_os_log_default;
      id v3 = &_os_log_default;
    }

    else
    {
      BOOL v4 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *a1;
      *(_DWORD *)buf = 138412290;
      __int16 v38 = (const __CFString *)v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[#EventLogger] Connection will be published: %@",  buf,  0xCu);
    }

    v41[0] = @"connectionUUID";
    BOOL v6 = (void *)*a1;
    if (*a1) {
      BOOL v6 = (void *)CFRetain(v6);
    }
    __int16 v36 = v6;
    id v7 = NSObjectIfNotNull(v6);
    uint64_t v8 = objc_claimAutoreleasedReturnValue(v7);
    uint64_t v9 = (void *)v8;
    if (v8) {
      uint64_t v10 = (const __CFString *)v8;
    }
    else {
      uint64_t v10 = &stru_100200A40;
    }
    v42[0] = v10;
    v41[1] = @"connectionType";
    uint64_t v11 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  acc_connection_getTypeString((uint64_t)a1));
    __int16 v35 = (void *)objc_claimAutoreleasedReturnValue(v11);
    id v12 = NSObjectIfNotNull(v35);
    uint64_t v13 = objc_claimAutoreleasedReturnValue(v12);
    int v14 = (void *)v13;
    if (v13) {
      CFIndex v15 = (const __CFString *)v13;
    }
    else {
      CFIndex v15 = &stru_100200A40;
    }
    v42[1] = v15;
    v41[2] = @"unlockedSinceBoot";
    __int16 v16 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", platform_system_unlockedSinceBoot());
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    v42[2] = v17;
    v41[3] = @"deviceIsPowered";
    __int16 v18 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  platform_power_getCurrentLimit(*a1) != 0);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    v42[3] = v19;
    v41[4] = @"ConnectedThroughAdapter";
    int v20 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  acc_connection_isConnectedThroughAdapter((BOOL)a1));
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    v42[4] = v21;
    v41[5] = @"AdapterVID";
    size_t v22 = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  acc_connection_getAdapterVID((uint64_t)a1));
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    v42[5] = v23;
    v41[6] = @"AdapterPID";
    int v24 = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  acc_connection_getAdapterPID((uint64_t)a1));
    id v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    v42[6] = v25;
    id v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v42,  v41,  7LL));
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v26));

    uint64_t v28 = acc_connection_copyProperty((char *)a1, kCFACCProperties_Connection_DigitalID);
    id v29 = convertNSDataToNSString(v28, @"%02X");
    int v30 = (void *)objc_claimAutoreleasedReturnValue(v29);

    if (v30) {
      [v27 setObject:v30 forKey:@"lightningDigitalID"];
    }
    os_log_type_t v31 = acc_connection_copyProperty((char *)a1, kCFACCProperties_Connection_PrimaryPortNumber);
    uint64_t v32 = objc_opt_class(&OBJC_CLASS___NSNumber);
    if ((objc_opt_isKindOfClass(v31, v32) & 1) != 0) {
      [v27 setObject:v31 forKey:@"lightningPrimaryPortNumber"];
    }
    if (gLogObjects && gNumLogObjects >= 7)
    {
      __int16 v33 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int16 v33 = (os_log_s *)&_os_log_default;
      id v34 = &_os_log_default;
    }

    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      __int16 v38 = @"com.apple.accessories.connection.added";
      __int16 v39 = 2112;
      uint64_t v40 = v27;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "[#EventLogger] CoreAnalytics event: %@\neventDict: %@",  buf,  0x16u);
    }

    AnalyticsSendEvent(@"com.apple.accessories.connection.added", v27);
  }

void platform_analytics_endpointWillBePublished(uint64_t a1)
{
  if (!a1 || !*(void *)a1 || !*(void *)(a1 + 8)) {
    return;
  }
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 7;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  else
  {
    BOOL v4 = (os_log_s *)*(id *)(gLogObjects + 48);
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v6 = *(void **)(a1 + 8);
    uint64_t v5 = *(const __CFString **)(a1 + 16);
    *(_DWORD *)buf = 138412546;
    uint64_t v93 = v5;
    __int16 v94 = 2112;
    id v95 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[#EventLogger] Endpoint will be published: %@ (connection %@)",  buf,  0x16u);
  }

  v90[0] = @"endpointUUID";
  id v7 = *(void **)(a1 + 16);
  if (v7) {
    id v7 = (void *)CFRetain(v7);
  }
  uint64_t v87 = v7;
  id v8 = NSObjectIfNotNull(v7);
  uint64_t v9 = objc_claimAutoreleasedReturnValue(v8);
  uint64_t v85 = (void *)v9;
  if (v9) {
    uint64_t v10 = (const __CFString *)v9;
  }
  else {
    uint64_t v10 = &stru_100200A40;
  }
  v91[0] = v10;
  v90[1] = @"connectionUUID";
  uint64_t v11 = *(void **)(a1 + 8);
  if (v11) {
    uint64_t v11 = (void *)CFRetain(v11);
  }
  uint64_t v84 = v11;
  id v12 = NSObjectIfNotNull(v11);
  uint64_t v13 = objc_claimAutoreleasedReturnValue(v12);
  uint64_t v81 = (void *)v13;
  if (v13) {
    int v14 = (const __CFString *)v13;
  }
  else {
    int v14 = &stru_100200A40;
  }
  v91[1] = v14;
  v90[2] = @"connectionType";
  CFIndex v15 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  acc_connection_getTypeString(*(void *)a1));
  uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue(v15);
  id v16 = NSObjectIfNotNull(v79);
  uint64_t v17 = objc_claimAutoreleasedReturnValue(v16);
  uint64_t v78 = (void *)v17;
  if (v17) {
    __int16 v18 = (const __CFString *)v17;
  }
  else {
    __int16 v18 = &stru_100200A40;
  }
  v91[2] = v18;
  v90[3] = @"transportType";
  uint64_t v19 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  acc_endpoint_getTransportTypeString(a1));
  uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue(v19);
  id v20 = NSObjectIfNotNull(v77);
  uint64_t v21 = objc_claimAutoreleasedReturnValue(v20);
  unint64_t v76 = (void *)v21;
  if (v21) {
    size_t v22 = (const __CFString *)v21;
  }
  else {
    size_t v22 = &stru_100200A40;
  }
  v91[3] = v22;
  v90[4] = @"protocol";
  uint64_t v23 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  acc_endpoint_getProtocolString(a1));
  __int128 v75 = (void *)objc_claimAutoreleasedReturnValue(v23);
  id v24 = NSObjectIfNotNull(v75);
  uint64_t v25 = objc_claimAutoreleasedReturnValue(v24);
  id v26 = (void *)v25;
  if (v25) {
    uint64_t v27 = (const __CFString *)v25;
  }
  else {
    uint64_t v27 = &stru_100200A40;
  }
  v91[4] = v27;
  v90[5] = @"unlockedSinceBoot";
  uint64_t v28 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", platform_system_unlockedSinceBoot());
  id v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
  v91[5] = v29;
  v90[6] = @"deviceIsPowered";
  int v30 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  platform_power_getCurrentLimit(*(void *)(a1 + 8)) != 0);
  os_log_type_t v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
  v91[6] = v31;
  v90[7] = @"ConnectedThroughAdapter";
  uint64_t v32 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  acc_connection_isConnectedThroughAdapter(*(void *)a1));
  __int16 v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
  v91[7] = v33;
  v90[8] = @"AdapterVID";
  id v34 = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  acc_connection_getAdapterVID(*(void *)a1));
  __int16 v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
  v91[8] = v35;
  v90[9] = @"AdapterPID";
  __int16 v36 = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  acc_connection_getAdapterPID(*(void *)a1));
  uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
  v91[9] = v37;
  __int16 v38 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v91,  v90,  10LL));
  __int16 v39 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v38));

  uint64_t v40 = acc_connection_copyProperty(*(char **)a1, kCFACCProperties_Connection_PrimaryPortNumber);
  uint64_t v41 = objc_opt_class(&OBJC_CLASS___NSNumber);
  if ((objc_opt_isKindOfClass(v40, v41) & 1) != 0) {
    [v39 setObject:v40 forKey:@"lightningPrimaryPortNumber"];
  }
  if (acc_endpoint_getTransportType(a1) == 13)
  {
    id v42 = v39;
    CFStringRef v43 = (void *)acc_endpoint_copyIdentifier(a1);
    if (!v43)
    {
      uint64_t v48 = 0LL;
      uint64_t v47 = 0LL;
      uint64_t v46 = 0LL;
      goto LABEL_79;
    }

    [v42 setValue:v43 forKey:@"nfcTagId"];
    CFRange v44 = (const void *)kCFACCProperties_Endpoint_NFC_Type;
    uint64_t v45 = acc_endpoint_copyProperty((pthread_mutex_t *)a1, kCFACCProperties_Endpoint_NFC_Type);
    uint64_t v46 = v45;
    if (!v45)
    {
      uint64_t v48 = 0LL;
      uint64_t v47 = 0LL;
      goto LABEL_79;
    }

    uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"0x%02x",  (int)-[pthread_mutex_t charValue](v45, "charValue")));
    if (!v47)
    {
      uint64_t v48 = 0LL;
      goto LABEL_79;
    }

    [v42 setValue:v47 forKey:@"nfcAccessoryType"];
    uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithObject:](&OBJC_CLASS___NSMutableArray, "arrayWithObject:", v47));
    if (!v48) {
      goto LABEL_79;
    }
    int v49 = acc_manager_copyAllEndpoints();
    if (!v49) {
      goto LABEL_79;
    }
    uint64_t v50 = v49;
    uint64_t v86 = v47;
    CFIndex Count = CFDictionaryGetCount(v49);
    if (!Count || (uint64_t v52 = Count, (v53 = (const void **)malloc(8 * Count)) == 0LL))
    {
LABEL_78:
      CFRelease(v50);
      uint64_t v47 = v86;
LABEL_79:

      goto LABEL_80;
    }

    id v80 = v46;
    uint64_t v82 = v43;
    uint64_t v83 = v40;
    id v88 = (uint64_t *)v53;
    CFDictionaryGetKeysAndValues(v50, 0LL, v53);
    if (v52 >= 1)
    {
      uint64_t v54 = v88;
      do
      {
        uint64_t v55 = *v54;
        if (*v54)
        {
          if (acc_endpoint_getTransportType(*v54) == 13
            && !CFEqual(*(CFTypeRef *)(a1 + 16), *(CFTypeRef *)(v55 + 16)))
          {
            CFRange v56 = acc_endpoint_copyProperty((pthread_mutex_t *)v55, v44);
            if (v56)
            {
              uint64_t v57 = v56;
              uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"0x%02x",  (int)-[pthread_mutex_t charValue](v56, "charValue")));
              [v48 addObject:v58];
            }
          }
        }

        ++v54;
        --v52;
      }

      while (v52);
    }

    if ((unint64_t)[v48 count] > 1)
    {
      [v48 sortUsingSelector:"compare:"];
      uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([v48 componentsJoinedByString:@","]);
      [v42 setValue:v59 forKey:@"nfcStackedType"];
    }

    memset(v89, 170, sizeof(v89));
    id v60 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( NSNumber,  "numberWithUnsignedLong:",  [v48 count]));
    [v42 setValue:v60 forKey:@"nfcAttachedCount"];

    id v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    _getWeekAndMonth(v61, &v89[3], &v89[2]);

    id v62 = (void *)objc_claimAutoreleasedReturnValue(+[ACCUserDefaults sharedDefaults](&OBJC_CLASS___ACCUserDefaults, "sharedDefaults"));
    id v63 = (void *)objc_claimAutoreleasedReturnValue([v62 objectForKey:@"NFCAnalyticsDate"]);

    _getWeekAndMonth(v63, &v89[1], v89);
    if (v89[3] == v89[1])
    {
      if (v89[2] == v89[0])
      {
LABEL_59:
        CFStringRef v43 = v82;
        uint64_t v40 = v83;
        uint64_t v46 = v80;
        if (gLogObjects && gNumLogObjects >= 7)
        {
          char v69 = (os_log_s *)*(id *)(gLogObjects + 48);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          char v69 = (os_log_s *)&_os_log_default;
          id v70 = &_os_log_default;
        }

        if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          uint64_t v93 = @"com.apple.accessories.nfc.endpoint.added";
          __int16 v94 = 2112;
          id v95 = v42;
          _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_DEFAULT,  "[#EventLogger] CoreAnalytics event: %@\neventDict: %@",  buf,  0x16u);
        }

        AnalyticsSendEvent(@"com.apple.accessories.nfc.endpoint.added", v42);
        if ((unint64_t)[v48 count] >= 2)
        {
          if (gLogObjects && gNumLogObjects >= 7)
          {
            uint64_t v71 = (os_log_s *)*(id *)(gLogObjects + 48);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            uint64_t v71 = (os_log_s *)&_os_log_default;
            id v72 = &_os_log_default;
          }

          if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412546;
            uint64_t v93 = @"com.apple.accessories.nfc.stack";
            __int16 v94 = 2112;
            id v95 = v42;
            _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_DEFAULT,  "[#EventLogger] CoreAnalytics event: %@\neventDict: %@",  buf,  0x16u);
          }

          AnalyticsSendEvent(@"com.apple.accessories.nfc.stack", v42);
        }

        free(v88);
        goto LABEL_78;
      }
    }

    else
    {
      id v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
      [v42 setValue:v64 forKey:@"nfcAttachedThisWeek"];

      if (v89[2] == v89[0])
      {
LABEL_58:
        uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue(+[ACCUserDefaults sharedDefaults](&OBJC_CLASS___ACCUserDefaults, "sharedDefaults"));
        uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v66 setObject:v67 forKey:@"NFCAnalyticsDate"];

        uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue(+[ACCUserDefaults sharedDefaults](&OBJC_CLASS___ACCUserDefaults, "sharedDefaults"));
        [v68 synchronize];

        goto LABEL_59;
      }
    }

    uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
    [v42 setValue:v65 forKey:@"nfcAttachedThisMonth"];

    goto LABEL_58;
  }

LABEL_80:
  if (gLogObjects && gNumLogObjects >= 7)
  {
    uint64_t v73 = (os_log_s *)*(id *)(gLogObjects + 48);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v73 = (os_log_s *)&_os_log_default;
    id v74 = &_os_log_default;
  }

  if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    uint64_t v93 = @"com.apple.accessories.endpoint.added";
    __int16 v94 = 2112;
    id v95 = v39;
    _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_DEFAULT,  "[#EventLogger] CoreAnalytics event: %@\neventDict: %@",  buf,  0x16u);
  }

  AnalyticsSendEvent(@"com.apple.accessories.endpoint.added", v39);
}

void platform_analytics_endpointProtocolDidChange(uint64_t *a1)
{
  if (a1 && *a1 && a1[1])
  {
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 7;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      BOOL v4 = (os_log_s *)&_os_log_default;
      id v3 = &_os_log_default;
    }

    else
    {
      BOOL v4 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[1];
      uint64_t v5 = (const __CFString *)a1[2];
      *(_DWORD *)buf = 138412546;
      CFRange v56 = v5;
      __int16 v57 = 2112;
      uint64_t v58 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[#EventLogger] Protocol changed for endpoint: %@ (connection %@)",  buf,  0x16u);
    }

    v53[0] = @"endpointUUID";
    id v7 = (void *)a1[2];
    if (v7) {
      id v7 = (void *)CFRetain(v7);
    }
    uint64_t v52 = v7;
    id v8 = NSObjectIfNotNull(v7);
    uint64_t v9 = objc_claimAutoreleasedReturnValue(v8);
    uint64_t v51 = (void *)v9;
    if (v9) {
      uint64_t v10 = (const __CFString *)v9;
    }
    else {
      uint64_t v10 = &stru_100200A40;
    }
    v54[0] = v10;
    v53[1] = @"connectionUUID";
    uint64_t v11 = (void *)a1[1];
    if (v11) {
      uint64_t v11 = (void *)CFRetain(v11);
    }
    uint64_t v50 = v11;
    id v12 = NSObjectIfNotNull(v11);
    uint64_t v13 = objc_claimAutoreleasedReturnValue(v12);
    int v49 = (void *)v13;
    if (v13) {
      int v14 = (const __CFString *)v13;
    }
    else {
      int v14 = &stru_100200A40;
    }
    v54[1] = v14;
    v53[2] = @"connectionType";
    CFIndex v15 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  acc_connection_getTypeString(*a1));
    uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(v15);
    id v16 = NSObjectIfNotNull(v48);
    uint64_t v17 = objc_claimAutoreleasedReturnValue(v16);
    uint64_t v47 = (void *)v17;
    if (v17) {
      __int16 v18 = (const __CFString *)v17;
    }
    else {
      __int16 v18 = &stru_100200A40;
    }
    v54[2] = v18;
    v53[3] = @"transportType";
    uint64_t v19 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  acc_endpoint_getTransportTypeString((uint64_t)a1));
    uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(v19);
    id v20 = NSObjectIfNotNull(v46);
    uint64_t v21 = objc_claimAutoreleasedReturnValue(v20);
    size_t v22 = (void *)v21;
    if (v21) {
      uint64_t v23 = (const __CFString *)v21;
    }
    else {
      uint64_t v23 = &stru_100200A40;
    }
    v54[3] = v23;
    v53[4] = @"protocol";
    id v24 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  acc_endpoint_getProtocolString((uint64_t)a1));
    uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(v24);
    id v25 = NSObjectIfNotNull(v45);
    uint64_t v26 = objc_claimAutoreleasedReturnValue(v25);
    uint64_t v27 = (void *)v26;
    if (v26) {
      uint64_t v28 = (const __CFString *)v26;
    }
    else {
      uint64_t v28 = &stru_100200A40;
    }
    v54[4] = v28;
    v53[5] = @"unlockedSinceBoot";
    id v29 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", platform_system_unlockedSinceBoot());
    int v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
    v54[5] = v30;
    v53[6] = @"deviceIsPowered";
    os_log_type_t v31 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  platform_power_getCurrentLimit(a1[1]) != 0);
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
    v54[6] = v32;
    v53[7] = @"ConnectedThroughAdapter";
    __int16 v33 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  acc_connection_isConnectedThroughAdapter(*a1));
    id v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
    v54[7] = v34;
    v53[8] = @"AdapterVID";
    __int16 v35 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", acc_connection_getAdapterVID(*a1));
    __int16 v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
    v54[8] = v36;
    v53[9] = @"AdapterPID";
    uint64_t v37 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", acc_connection_getAdapterPID(*a1));
    __int16 v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
    v54[9] = v38;
    __int16 v39 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v54,  v53,  10LL));
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v39));

    uint64_t v41 = acc_connection_copyProperty((char *)*a1, kCFACCProperties_Connection_PrimaryPortNumber);
    uint64_t v42 = objc_opt_class(&OBJC_CLASS___NSNumber);
    if ((objc_opt_isKindOfClass(v41, v42) & 1) != 0) {
      [v40 setObject:v41 forKey:@"lightningPrimaryPortNumber"];
    }
    if (gLogObjects && gNumLogObjects >= 7)
    {
      CFStringRef v43 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      CFStringRef v43 = (os_log_s *)&_os_log_default;
      id v44 = &_os_log_default;
    }

    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      CFRange v56 = @"com.apple.accessories.endpoint.protocolChanged";
      __int16 v57 = 2112;
      uint64_t v58 = (uint64_t)v40;
      _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "[#EventLogger] CoreAnalytics event: %@\neventDict: %@",  buf,  0x16u);
    }

    AnalyticsSendEvent(@"com.apple.accessories.endpoint.protocolChanged", v40);
  }

void platform_analytics_endpointAccessoryInfoDidChange(uint64_t *a1, uint64_t a2, void *a3)
{
  if (a1 && *a1 && a1[1])
  {
    if (gLogObjects) {
      BOOL v6 = gNumLogObjects < 7;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v8 = (os_log_s *)&_os_log_default;
      id v7 = &_os_log_default;
    }

    else
    {
      id v8 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = a1[1];
      uint64_t v9 = (const __CFString *)a1[2];
      *(_DWORD *)buf = 138412546;
      uint64_t v114 = v9;
      __int16 v115 = 2112;
      uint64_t v116 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[#EventLogger] Accessory info changed for endpoint: %@ (connection %@)",  buf,  0x16u);
    }

    if (gLogObjects && gNumLogObjects >= 7)
    {
      uint64_t v11 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v11 = (os_log_s *)&_os_log_default;
      id v12 = &_os_log_default;
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
      platform_analytics_endpointAccessoryInfoDidChange_cold_4(a2, (uint64_t)a3, v11);
    }

    unsigned __int8 v13 = [a3 isEqualToDictionary:a2];
    else {
      char v14 = v13;
    }
    if (gLogObjects && gNumLogObjects >= 7)
    {
      CFIndex v15 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      CFIndex v15 = (os_log_s *)&_os_log_default;
      id v16 = &_os_log_default;
    }

    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
      platform_analytics_endpointAccessoryInfoDidChange_cold_2(v14, v15);
    }

    if ((v14 & 1) == 0)
    {
      uint64_t AccessoryInfo = acc_endpoint_getAccessoryInfo((uint64_t)a1);
      __int16 v18 = acc_accInfo_copyAccessoryInfoDictionary(AccessoryInfo);
      if (v18)
      {
        v111[0] = @"endpointUUID";
        uint64_t v19 = (const void *)a1[2];
        if (v19) {
          id v20 = (void *)CFRetain(v19);
        }
        else {
          id v20 = 0LL;
        }
        id v21 = NSObjectIfNotNull(v20);
        uint64_t v22 = objc_claimAutoreleasedReturnValue(v21);
        uint64_t v23 = (void *)v22;
        if (v22) {
          id v24 = (const __CFString *)v22;
        }
        else {
          id v24 = &stru_100200A40;
        }
        v112[0] = v24;
        v111[1] = @"connectionUUID";
        id v25 = (void *)a1[1];
        id v109 = v23;
        __int128 v110 = v20;
        if (v25) {
          id v25 = (void *)CFRetain(v25);
        }
        char v108 = v25;
        id v26 = NSObjectIfNotNull(v25);
        uint64_t v27 = objc_claimAutoreleasedReturnValue(v26);
        id v107 = (void *)v27;
        if (v27) {
          uint64_t v28 = (const __CFString *)v27;
        }
        else {
          uint64_t v28 = &stru_100200A40;
        }
        v112[1] = v28;
        v111[2] = @"connectionType";
        id v29 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  acc_connection_getTypeString(*a1));
        id v106 = (void *)objc_claimAutoreleasedReturnValue(v29);
        id v30 = NSObjectIfNotNull(v106);
        uint64_t v31 = objc_claimAutoreleasedReturnValue(v30);
        char v105 = (void *)v31;
        if (v31) {
          uint64_t v32 = (const __CFString *)v31;
        }
        else {
          uint64_t v32 = &stru_100200A40;
        }
        v112[2] = v32;
        v111[3] = @"transportType";
        __int16 v33 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  acc_endpoint_getTransportTypeString((uint64_t)a1));
        id v104 = (void *)objc_claimAutoreleasedReturnValue(v33);
        id v34 = NSObjectIfNotNull(v104);
        uint64_t v35 = objc_claimAutoreleasedReturnValue(v34);
        id v103 = (void *)v35;
        if (v35) {
          __int16 v36 = (const __CFString *)v35;
        }
        else {
          __int16 v36 = &stru_100200A40;
        }
        v112[3] = v36;
        v111[4] = @"protocol";
        uint64_t v37 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  acc_endpoint_getProtocolString((uint64_t)a1));
        id v102 = (void *)objc_claimAutoreleasedReturnValue(v37);
        id v38 = NSObjectIfNotNull(v102);
        uint64_t v39 = objc_claimAutoreleasedReturnValue(v38);
        id v101 = (void *)v39;
        if (v39) {
          uint64_t v40 = (const __CFString *)v39;
        }
        else {
          uint64_t v40 = &stru_100200A40;
        }
        v112[4] = v40;
        v111[5] = @"accessoryName";
        id v100 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v18, "objectForKeyedSubscript:", kACCInfo_Name));
        id v41 = NSObjectIfNotNull(v100);
        uint64_t v42 = objc_claimAutoreleasedReturnValue(v41);
        id v99 = (void *)v42;
        if (v42) {
          CFStringRef v43 = (const __CFString *)v42;
        }
        else {
          CFStringRef v43 = &stru_100200A40;
        }
        v112[5] = v43;
        v111[6] = @"accessoryManufacturer";
        id v98 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v18, "objectForKeyedSubscript:", kACCInfo_Manufacturer));
        id v44 = NSObjectIfNotNull(v98);
        uint64_t v45 = objc_claimAutoreleasedReturnValue(v44);
        id v97 = (void *)v45;
        if (v45) {
          uint64_t v46 = (const __CFString *)v45;
        }
        else {
          uint64_t v46 = &stru_100200A40;
        }
        v112[6] = v46;
        v111[7] = @"accessoryModel";
        id v96 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v18, "objectForKeyedSubscript:", kACCInfo_Model));
        id v47 = NSObjectIfNotNull(v96);
        uint64_t v48 = objc_claimAutoreleasedReturnValue(v47);
        id v95 = (void *)v48;
        if (v48) {
          int v49 = (const __CFString *)v48;
        }
        else {
          int v49 = &stru_100200A40;
        }
        v112[7] = v49;
        v111[8] = @"accessoryHardwareVersion";
        __int16 v94 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v18, "objectForKeyedSubscript:", kACCInfo_HardwareVersion));
        id v50 = NSObjectIfNotNull(v94);
        uint64_t v51 = objc_claimAutoreleasedReturnValue(v50);
        uint64_t v93 = (void *)v51;
        if (v51) {
          uint64_t v52 = (const __CFString *)v51;
        }
        else {
          uint64_t v52 = &stru_100200A40;
        }
        v112[8] = v52;
        v111[9] = @"accessoryFirmwareVersionActive";
        uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue( -[int64x2_t objectForKeyedSubscript:]( v18,  "objectForKeyedSubscript:",  kACCInfo_FirmwareVersionActive));
        id v53 = NSObjectIfNotNull(v91);
        uint64_t v54 = objc_claimAutoreleasedReturnValue(v53);
        id v90 = (void *)v54;
        if (v54) {
          uint64_t v55 = (const __CFString *)v54;
        }
        else {
          uint64_t v55 = &stru_100200A40;
        }
        v112[9] = v55;
        v111[10] = @"accessoryFirmwareVersionPending";
        id v89 = (void *)objc_claimAutoreleasedReturnValue( -[int64x2_t objectForKeyedSubscript:]( v18,  "objectForKeyedSubscript:",  kACCInfo_FirmwareVersionPending));
        id v56 = NSObjectIfNotNull(v89);
        uint64_t v57 = objc_claimAutoreleasedReturnValue(v56);
        id v88 = (void *)v57;
        if (v57) {
          uint64_t v58 = (const __CFString *)v57;
        }
        else {
          uint64_t v58 = &stru_100200A40;
        }
        v112[10] = v58;
        v111[11] = @"accessoryVID";
        uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v18, "objectForKeyedSubscript:", kACCInfo_VendorID));
        id v59 = NSObjectIfNotNull(v87);
        uint64_t v60 = objc_claimAutoreleasedReturnValue(v59);
        uint64_t v86 = (void *)v60;
        if (v60) {
          id v61 = (_UNKNOWN **)v60;
        }
        else {
          id v61 = &off_100206BA8;
        }
        v112[11] = v61;
        v111[12] = @"accessoryPID";
        id v92 = v18;
        uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v18, "objectForKeyedSubscript:", kACCInfo_ProductID));
        id v62 = NSObjectIfNotNull(v85);
        uint64_t v63 = objc_claimAutoreleasedReturnValue(v62);
        id v64 = (void *)v63;
        if (v63) {
          uint64_t v65 = (_UNKNOWN **)v63;
        }
        else {
          uint64_t v65 = &off_100206BA8;
        }
        v112[12] = v65;
        v111[13] = @"unlockedSinceBoot";
        uint64_t v66 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  platform_system_unlockedSinceBoot());
        uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue(v66);
        v112[13] = v84;
        v111[14] = @"deviceIsPowered";
        uint64_t v67 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  platform_power_getCurrentLimit(a1[1]) != 0);
        uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue(v67);
        v112[14] = v68;
        v111[15] = @"authState";
        char v69 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  acc_authInfo_isAuthenticated(*a1 + 48, 6LL));
        id v70 = (void *)objc_claimAutoreleasedReturnValue(v69);
        v112[15] = v70;
        v111[16] = @"authVersion";
        uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(*a1 + 68)));
        v112[16] = v71;
        v111[17] = @"ConnectedThroughAdapter";
        id v72 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  acc_connection_isConnectedThroughAdapter(*a1));
        uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue(v72);
        v112[17] = v73;
        v111[18] = @"AdapterVID";
        id v74 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", acc_connection_getAdapterVID(*a1));
        __int128 v75 = (void *)objc_claimAutoreleasedReturnValue(v74);
        v112[18] = v75;
        v111[19] = @"AdapterPID";
        unint64_t v76 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", acc_connection_getAdapterPID(*a1));
        uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue(v76);
        v112[19] = v77;
        uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v112,  v111,  20LL));
        uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v78));

        id v80 = acc_connection_copyProperty((char *)*a1, kCFACCProperties_Connection_PrimaryPortNumber);
        uint64_t v81 = objc_opt_class(&OBJC_CLASS___NSNumber);
        if ((objc_opt_isKindOfClass(v80, v81) & 1) != 0) {
          [v79 setObject:v80 forKey:@"lightningPrimaryPortNumber"];
        }
        __int16 v18 = v92;
        if (gLogObjects && gNumLogObjects >= 7)
        {
          uint64_t v82 = (os_log_s *)*(id *)(gLogObjects + 48);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v82 = (os_log_s *)&_os_log_default;
          id v83 = &_os_log_default;
        }

        if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          uint64_t v114 = @"com.apple.accessories.endpoint.accessoryInfoChanged";
          __int16 v115 = 2112;
          uint64_t v116 = (uint64_t)v79;
          _os_log_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_DEFAULT,  "[#EventLogger] CoreAnalytics event: %@\neventDict: %@",  buf,  0x16u);
        }

        AnalyticsSendEvent(@"com.apple.accessories.endpoint.accessoryInfoChanged", v79);
      }
    }
  }

void platform_analytics_endpointWillBeDestroyed(uint64_t *a1)
{
  if (a1 && *a1 && a1[2] && a1[1])
  {
    if (gLogObjects && gNumLogObjects >= 7)
    {
      BOOL v2 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      BOOL v2 = (os_log_s *)&_os_log_default;
      id v3 = &_os_log_default;
    }

    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = a1[1];
      BOOL v4 = (const __CFString *)a1[2];
      *(_DWORD *)buf = 138412546;
      id v103 = v4;
      __int16 v104 = 2112;
      uint64_t v105 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[#EventLogger] Endpoint will be destroyed: %@ (connection %@)",  buf,  0x16u);
    }

    uint64_t AccessoryInfo = acc_endpoint_getAccessoryInfo((uint64_t)a1);
    id v7 = acc_accInfo_copyAccessoryInfoDictionary(AccessoryInfo);
    v100[0] = @"endpointUUID";
    id v8 = (void *)a1[2];
    if (v8) {
      id v8 = (void *)CFRetain(v8);
    }
    id v98 = v8;
    id v9 = NSObjectIfNotNull(v8);
    uint64_t v10 = objc_claimAutoreleasedReturnValue(v9);
    id v97 = (void *)v10;
    if (v10) {
      uint64_t v11 = (const __CFString *)v10;
    }
    else {
      uint64_t v11 = &stru_100200A40;
    }
    v101[0] = v11;
    v100[1] = @"connectionUUID";
    id v12 = (void *)a1[1];
    if (v12) {
      id v12 = (void *)CFRetain(v12);
    }
    id v96 = v12;
    id v13 = NSObjectIfNotNull(v12);
    uint64_t v14 = objc_claimAutoreleasedReturnValue(v13);
    id v95 = (void *)v14;
    if (v14) {
      CFIndex v15 = (const __CFString *)v14;
    }
    else {
      CFIndex v15 = &stru_100200A40;
    }
    v101[1] = v15;
    v100[2] = @"connectionType";
    id v16 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  acc_connection_getTypeString(*a1));
    __int16 v94 = (void *)objc_claimAutoreleasedReturnValue(v16);
    id v17 = NSObjectIfNotNull(v94);
    uint64_t v18 = objc_claimAutoreleasedReturnValue(v17);
    uint64_t v93 = (void *)v18;
    if (v18) {
      uint64_t v19 = (const __CFString *)v18;
    }
    else {
      uint64_t v19 = &stru_100200A40;
    }
    v101[2] = v19;
    v100[3] = @"transportType";
    id v20 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  acc_endpoint_getTransportTypeString((uint64_t)a1));
    id v92 = (void *)objc_claimAutoreleasedReturnValue(v20);
    id v21 = NSObjectIfNotNull(v92);
    uint64_t v22 = objc_claimAutoreleasedReturnValue(v21);
    uint64_t v91 = (void *)v22;
    if (v22) {
      uint64_t v23 = (const __CFString *)v22;
    }
    else {
      uint64_t v23 = &stru_100200A40;
    }
    v101[3] = v23;
    v100[4] = @"protocol";
    id v24 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  acc_endpoint_getProtocolString((uint64_t)a1));
    id v90 = (void *)objc_claimAutoreleasedReturnValue(v24);
    id v25 = NSObjectIfNotNull(v90);
    uint64_t v26 = objc_claimAutoreleasedReturnValue(v25);
    id v89 = (void *)v26;
    if (v26) {
      uint64_t v27 = (const __CFString *)v26;
    }
    else {
      uint64_t v27 = &stru_100200A40;
    }
    v101[4] = v27;
    v100[5] = @"accessoryName";
    id v88 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v7, "objectForKeyedSubscript:", kACCInfo_Name));
    id v28 = NSObjectIfNotNull(v88);
    uint64_t v29 = objc_claimAutoreleasedReturnValue(v28);
    uint64_t v87 = (void *)v29;
    if (v29) {
      id v30 = (const __CFString *)v29;
    }
    else {
      id v30 = &stru_100200A40;
    }
    v101[5] = v30;
    v100[6] = @"accessoryManufacturer";
    uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v7, "objectForKeyedSubscript:", kACCInfo_Manufacturer));
    id v31 = NSObjectIfNotNull(v86);
    uint64_t v32 = objc_claimAutoreleasedReturnValue(v31);
    uint64_t v85 = (void *)v32;
    if (v32) {
      __int16 v33 = (const __CFString *)v32;
    }
    else {
      __int16 v33 = &stru_100200A40;
    }
    v101[6] = v33;
    v100[7] = @"accessoryModel";
    uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v7, "objectForKeyedSubscript:", kACCInfo_Model));
    id v34 = NSObjectIfNotNull(v84);
    uint64_t v35 = objc_claimAutoreleasedReturnValue(v34);
    id v83 = (void *)v35;
    if (v35) {
      __int16 v36 = (const __CFString *)v35;
    }
    else {
      __int16 v36 = &stru_100200A40;
    }
    v101[7] = v36;
    v100[8] = @"accessoryHardwareVersion";
    uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v7, "objectForKeyedSubscript:", kACCInfo_HardwareVersion));
    id v37 = NSObjectIfNotNull(v82);
    uint64_t v38 = objc_claimAutoreleasedReturnValue(v37);
    uint64_t v81 = (void *)v38;
    if (v38) {
      uint64_t v39 = (const __CFString *)v38;
    }
    else {
      uint64_t v39 = &stru_100200A40;
    }
    v101[8] = v39;
    v100[9] = @"accessoryFirmwareVersionActive";
    id v80 = (void *)objc_claimAutoreleasedReturnValue( -[int64x2_t objectForKeyedSubscript:]( v7,  "objectForKeyedSubscript:",  kACCInfo_FirmwareVersionActive));
    id v40 = NSObjectIfNotNull(v80);
    uint64_t v41 = objc_claimAutoreleasedReturnValue(v40);
    uint64_t v79 = (void *)v41;
    if (v41) {
      uint64_t v42 = (const __CFString *)v41;
    }
    else {
      uint64_t v42 = &stru_100200A40;
    }
    v101[9] = v42;
    v100[10] = @"accessoryFirmwareVersionPending";
    uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue( -[int64x2_t objectForKeyedSubscript:]( v7,  "objectForKeyedSubscript:",  kACCInfo_FirmwareVersionPending));
    id v43 = NSObjectIfNotNull(v78);
    uint64_t v44 = objc_claimAutoreleasedReturnValue(v43);
    uint64_t v77 = (void *)v44;
    if (v44) {
      uint64_t v45 = (const __CFString *)v44;
    }
    else {
      uint64_t v45 = &stru_100200A40;
    }
    v101[10] = v45;
    v100[11] = @"accessoryVID";
    unint64_t v76 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v7, "objectForKeyedSubscript:", kACCInfo_VendorID));
    id v46 = NSObjectIfNotNull(v76);
    uint64_t v47 = objc_claimAutoreleasedReturnValue(v46);
    __int128 v75 = (void *)v47;
    if (v47) {
      uint64_t v48 = (_UNKNOWN **)v47;
    }
    else {
      uint64_t v48 = &off_100206BA8;
    }
    v101[11] = v48;
    v100[12] = @"accessoryPID";
    id v99 = v7;
    id v74 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v7, "objectForKeyedSubscript:", kACCInfo_ProductID));
    id v49 = NSObjectIfNotNull(v74);
    uint64_t v50 = objc_claimAutoreleasedReturnValue(v49);
    uint64_t v51 = (void *)v50;
    if (v50) {
      uint64_t v52 = (_UNKNOWN **)v50;
    }
    else {
      uint64_t v52 = &off_100206BA8;
    }
    v101[12] = v52;
    v100[13] = @"unlockedSinceBoot";
    id v53 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", platform_system_unlockedSinceBoot());
    uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue(v53);
    v101[13] = v73;
    v100[14] = @"deviceIsPowered";
    uint64_t v54 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  platform_power_getCurrentLimit(a1[1]) != 0);
    id v72 = (void *)objc_claimAutoreleasedReturnValue(v54);
    v101[14] = v72;
    v100[15] = @"duration";
    uint64_t v55 = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  ((int)acc_endpoint_getDurationMS((unint64_t)a1) / 1000));
    id v56 = (void *)objc_claimAutoreleasedReturnValue(v55);
    v101[15] = v56;
    v100[16] = @"authState";
    uint64_t v57 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  acc_authInfo_isAuthenticated(*a1 + 48, 6LL));
    uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue(v57);
    v101[16] = v58;
    v100[17] = @"authVersion";
    id v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(*a1 + 68)));
    v101[17] = v59;
    v100[18] = @"ConnectedThroughAdapter";
    uint64_t v60 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  acc_connection_isConnectedThroughAdapter(*a1));
    id v61 = (void *)objc_claimAutoreleasedReturnValue(v60);
    v101[18] = v61;
    v100[19] = @"AdapterVID";
    id v62 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", acc_connection_getAdapterVID(*a1));
    uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue(v62);
    v101[19] = v63;
    v100[20] = @"AdapterPID";
    id v64 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", acc_connection_getAdapterPID(*a1));
    uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue(v64);
    v101[20] = v65;
    uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v101,  v100,  21LL));
    uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v66));

    uint64_t v68 = acc_connection_copyProperty((char *)*a1, kCFACCProperties_Connection_PrimaryPortNumber);
    uint64_t v69 = objc_opt_class(&OBJC_CLASS___NSNumber);
    if ((objc_opt_isKindOfClass(v68, v69) & 1) != 0) {
      [v67 setObject:v68 forKey:@"lightningPrimaryPortNumber"];
    }
    if (gLogObjects && gNumLogObjects >= 7)
    {
      id v70 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v70 = (os_log_s *)&_os_log_default;
      id v71 = &_os_log_default;
    }

    if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      id v103 = @"com.apple.accessories.endpoint.removed";
      __int16 v104 = 2112;
      uint64_t v105 = (uint64_t)v67;
      _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_DEFAULT,  "[#EventLogger] CoreAnalytics event: %@\neventDict: %@",  buf,  0x16u);
    }

    AnalyticsSendEvent(@"com.apple.accessories.endpoint.removed", v67);
  }

void platform_analytics_connectionWillBeDestroyed(unint64_t a1)
{
  if (a1 && *(void *)a1)
  {
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 7;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      BOOL v4 = (os_log_s *)&_os_log_default;
      id v3 = &_os_log_default;
    }

    else
    {
      BOOL v4 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)a1;
      *(_DWORD *)buf = 138412290;
      uint64_t v85 = (const __CFString *)v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[#EventLogger] Connection will be destroyed: %@",  buf,  0xCu);
    }

    BOOL v6 = acc_accInfo_copyAccessoryInfoDictionary(*(void *)(a1 + 120));
    v88[0] = @"connectionUUID";
    id v7 = *(void **)a1;
    if (*(void *)a1) {
      id v7 = (void *)CFRetain(v7);
    }
    uint64_t v82 = v7;
    id v8 = NSObjectIfNotNull(v7);
    uint64_t v9 = objc_claimAutoreleasedReturnValue(v8);
    uint64_t v81 = (void *)v9;
    if (v9) {
      uint64_t v10 = (const __CFString *)v9;
    }
    else {
      uint64_t v10 = &stru_100200A40;
    }
    v89[0] = v10;
    v88[1] = @"connectionType";
    uint64_t v11 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  acc_connection_getTypeString(a1));
    id v80 = (void *)objc_claimAutoreleasedReturnValue(v11);
    id v12 = NSObjectIfNotNull(v80);
    uint64_t v13 = objc_claimAutoreleasedReturnValue(v12);
    uint64_t v79 = (void *)v13;
    if (v13) {
      uint64_t v14 = (const __CFString *)v13;
    }
    else {
      uint64_t v14 = &stru_100200A40;
    }
    v89[1] = v14;
    v88[2] = @"accessoryName";
    uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", kACCInfo_Name));
    id v15 = NSObjectIfNotNull(v78);
    uint64_t v16 = objc_claimAutoreleasedReturnValue(v15);
    uint64_t v77 = (void *)v16;
    if (v16) {
      id v17 = (const __CFString *)v16;
    }
    else {
      id v17 = &stru_100200A40;
    }
    v89[2] = v17;
    v88[3] = @"accessoryManufacturer";
    unint64_t v76 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", kACCInfo_Manufacturer));
    id v18 = NSObjectIfNotNull(v76);
    uint64_t v19 = objc_claimAutoreleasedReturnValue(v18);
    __int128 v75 = (void *)v19;
    if (v19) {
      id v20 = (const __CFString *)v19;
    }
    else {
      id v20 = &stru_100200A40;
    }
    v89[3] = v20;
    v88[4] = @"accessoryModel";
    uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", kACCInfo_Model));
    id v21 = NSObjectIfNotNull(v73);
    uint64_t v22 = objc_claimAutoreleasedReturnValue(v21);
    id v72 = (void *)v22;
    if (v22) {
      uint64_t v23 = (const __CFString *)v22;
    }
    else {
      uint64_t v23 = &stru_100200A40;
    }
    void v89[4] = v23;
    v88[5] = @"accessoryHardwareVersion";
    id v71 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", kACCInfo_HardwareVersion));
    id v24 = NSObjectIfNotNull(v71);
    uint64_t v25 = objc_claimAutoreleasedReturnValue(v24);
    id v70 = (void *)v25;
    if (v25) {
      uint64_t v26 = (const __CFString *)v25;
    }
    else {
      uint64_t v26 = &stru_100200A40;
    }
    v89[5] = v26;
    v88[6] = @"accessoryFirmwareVersionActive";
    uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue( -[int64x2_t objectForKeyedSubscript:]( v6,  "objectForKeyedSubscript:",  kACCInfo_FirmwareVersionActive));
    id v27 = NSObjectIfNotNull(v69);
    uint64_t v28 = objc_claimAutoreleasedReturnValue(v27);
    uint64_t v68 = (void *)v28;
    if (v28) {
      uint64_t v29 = (const __CFString *)v28;
    }
    else {
      uint64_t v29 = &stru_100200A40;
    }
    v89[6] = v29;
    v88[7] = @"accessoryFirmwareVersionPending";
    uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue( -[int64x2_t objectForKeyedSubscript:]( v6,  "objectForKeyedSubscript:",  kACCInfo_FirmwareVersionPending));
    id v30 = NSObjectIfNotNull(v67);
    uint64_t v31 = objc_claimAutoreleasedReturnValue(v30);
    uint64_t v66 = (void *)v31;
    if (v31) {
      uint64_t v32 = (const __CFString *)v31;
    }
    else {
      uint64_t v32 = &stru_100200A40;
    }
    v89[7] = v32;
    v88[8] = @"accessoryVID";
    uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", kACCInfo_VendorID));
    id v33 = NSObjectIfNotNull(v65);
    uint64_t v34 = objc_claimAutoreleasedReturnValue(v33);
    id v64 = (void *)v34;
    if (v34) {
      uint64_t v35 = (_UNKNOWN **)v34;
    }
    else {
      uint64_t v35 = &off_100206BA8;
    }
    v89[8] = v35;
    v88[9] = @"accessoryPID";
    id v83 = v6;
    uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", kACCInfo_ProductID));
    id v36 = NSObjectIfNotNull(v63);
    uint64_t v37 = objc_claimAutoreleasedReturnValue(v36);
    uint64_t v38 = (void *)v37;
    if (v37) {
      uint64_t v39 = (_UNKNOWN **)v37;
    }
    else {
      uint64_t v39 = &off_100206BA8;
    }
    v89[9] = v39;
    v88[10] = @"unlockedSinceBoot";
    id v40 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", platform_system_unlockedSinceBoot());
    id v62 = (void *)objc_claimAutoreleasedReturnValue(v40);
    v89[10] = v62;
    v88[11] = @"deviceIsPowered";
    uint64_t v41 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  platform_power_getCurrentLimit(*(void *)a1) != 0);
    uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
    v89[11] = v42;
    v88[12] = @"duration";
    id v43 = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  ((int)acc_connection_getDurationMS(a1) / 1000));
    uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
    v89[12] = v44;
    v88[13] = @"authState";
    uint64_t v45 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  acc_authInfo_isAuthenticated(a1 + 48, 6LL));
    id v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
    v89[13] = v46;
    v88[14] = @"authVersion";
    uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 68)));
    v89[14] = v47;
    v88[15] = @"ConnectedThroughAdapter";
    uint64_t v48 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  acc_connection_isConnectedThroughAdapter(a1));
    id v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
    v89[15] = v49;
    v88[16] = @"AdapterVID";
    uint64_t v50 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", acc_connection_getAdapterVID(a1));
    uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
    v89[16] = v51;
    v88[17] = @"AdapterPID";
    uint64_t v52 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", acc_connection_getAdapterPID(a1));
    id v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
    v89[17] = v53;
    uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v89,  v88,  18LL));
    id v74 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v54));

    uint64_t v55 = acc_connection_copyProperty((char *)a1, kCFACCProperties_Connection_DigitalID);
    id v56 = convertNSDataToNSString(v55, @"%02X");
    uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue(v56);

    if (v57) {
      [v74 setObject:v57 forKey:@"lightningDigitalID"];
    }
    uint64_t v58 = acc_connection_copyProperty((char *)a1, kCFACCProperties_Connection_PrimaryPortNumber);
    uint64_t v59 = objc_opt_class(&OBJC_CLASS___NSNumber);
    if ((objc_opt_isKindOfClass(v58, v59) & 1) != 0) {
      [v74 setObject:v58 forKey:@"lightningPrimaryPortNumber"];
    }
    if (gLogObjects && gNumLogObjects >= 7)
    {
      uint64_t v60 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v60 = (os_log_s *)&_os_log_default;
      id v61 = &_os_log_default;
    }

    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      uint64_t v85 = @"com.apple.accessories.connection.removed";
      __int16 v86 = 2112;
      uint64_t v87 = v74;
      _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "[#EventLogger] CoreAnalytics event: %@\neventDict: %@",  buf,  0x16u);
    }

    AnalyticsSendEvent(@"com.apple.accessories.connection.removed", v74);
  }

void platform_analytics_availableCurrentNegotiated(uint64_t *a1, uint64_t a2)
{
  if (a1 && *a1 && a1[1])
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 7;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      BOOL v6 = (os_log_s *)&_os_log_default;
      id v5 = &_os_log_default;
    }

    else
    {
      BOOL v6 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = a1[1];
      uint64_t v7 = a1[2];
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)id v102 = a2;
      *(_WORD *)&v102[4] = 2112;
      *(void *)&v102[6] = v7;
      *(_WORD *)&v102[14] = 2112;
      *(void *)&v102[16] = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[#EventLogger] Available current set at: %d for endpoint: %@ (connection %@)",  buf,  0x1Cu);
    }

    uint64_t AccessoryInfo = acc_endpoint_getAccessoryInfo((uint64_t)a1);
    uint64_t v10 = acc_accInfo_copyAccessoryInfoDictionary(AccessoryInfo);
    v99[0] = @"endpointUUID";
    uint64_t v11 = (void *)a1[2];
    if (v11) {
      uint64_t v11 = (void *)CFRetain(v11);
    }
    id v97 = v11;
    id v12 = NSObjectIfNotNull(v11);
    uint64_t v13 = objc_claimAutoreleasedReturnValue(v12);
    id v96 = (void *)v13;
    if (v13) {
      uint64_t v14 = (const __CFString *)v13;
    }
    else {
      uint64_t v14 = &stru_100200A40;
    }
    v100[0] = v14;
    v99[1] = @"connectionUUID";
    id v15 = (void *)a1[1];
    if (v15) {
      id v15 = (void *)CFRetain(v15);
    }
    id v95 = v15;
    id v16 = NSObjectIfNotNull(v15);
    uint64_t v17 = objc_claimAutoreleasedReturnValue(v16);
    __int16 v94 = (void *)v17;
    if (v17) {
      id v18 = (const __CFString *)v17;
    }
    else {
      id v18 = &stru_100200A40;
    }
    v100[1] = v18;
    v99[2] = @"connectionType";
    uint64_t v19 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  acc_connection_getTypeString(*a1));
    uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue(v19);
    id v20 = NSObjectIfNotNull(v93);
    uint64_t v21 = objc_claimAutoreleasedReturnValue(v20);
    id v92 = (void *)v21;
    if (v21) {
      uint64_t v22 = (const __CFString *)v21;
    }
    else {
      uint64_t v22 = &stru_100200A40;
    }
    v100[2] = v22;
    v99[3] = @"transportType";
    uint64_t v23 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  acc_endpoint_getTransportTypeString((uint64_t)a1));
    uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue(v23);
    id v24 = NSObjectIfNotNull(v91);
    uint64_t v25 = objc_claimAutoreleasedReturnValue(v24);
    id v90 = (void *)v25;
    if (v25) {
      uint64_t v26 = (const __CFString *)v25;
    }
    else {
      uint64_t v26 = &stru_100200A40;
    }
    v100[3] = v26;
    v99[4] = @"protocol";
    id v27 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  acc_endpoint_getProtocolString((uint64_t)a1));
    id v89 = (void *)objc_claimAutoreleasedReturnValue(v27);
    id v28 = NSObjectIfNotNull(v89);
    uint64_t v29 = objc_claimAutoreleasedReturnValue(v28);
    id v88 = (void *)v29;
    if (v29) {
      id v30 = (const __CFString *)v29;
    }
    else {
      id v30 = &stru_100200A40;
    }
    v100[4] = v30;
    v99[5] = @"accessoryName";
    uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v10, "objectForKeyedSubscript:", kACCInfo_Name));
    id v31 = NSObjectIfNotNull(v87);
    uint64_t v32 = objc_claimAutoreleasedReturnValue(v31);
    __int16 v86 = (void *)v32;
    if (v32) {
      id v33 = (const __CFString *)v32;
    }
    else {
      id v33 = &stru_100200A40;
    }
    v100[5] = v33;
    v99[6] = @"accessoryManufacturer";
    uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v10, "objectForKeyedSubscript:", kACCInfo_Manufacturer));
    id v34 = NSObjectIfNotNull(v85);
    uint64_t v35 = objc_claimAutoreleasedReturnValue(v34);
    uint64_t v84 = (void *)v35;
    if (v35) {
      id v36 = (const __CFString *)v35;
    }
    else {
      id v36 = &stru_100200A40;
    }
    v100[6] = v36;
    v99[7] = @"accessoryModel";
    id v83 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v10, "objectForKeyedSubscript:", kACCInfo_Model));
    id v37 = NSObjectIfNotNull(v83);
    uint64_t v38 = objc_claimAutoreleasedReturnValue(v37);
    uint64_t v82 = (void *)v38;
    if (v38) {
      uint64_t v39 = (const __CFString *)v38;
    }
    else {
      uint64_t v39 = &stru_100200A40;
    }
    v100[7] = v39;
    v99[8] = @"accessoryHardwareVersion";
    uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v10, "objectForKeyedSubscript:", kACCInfo_HardwareVersion));
    id v40 = NSObjectIfNotNull(v81);
    uint64_t v41 = objc_claimAutoreleasedReturnValue(v40);
    id v80 = (void *)v41;
    if (v41) {
      uint64_t v42 = (const __CFString *)v41;
    }
    else {
      uint64_t v42 = &stru_100200A40;
    }
    v100[8] = v42;
    v99[9] = @"accessoryFirmwareVersionActive";
    uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue( -[int64x2_t objectForKeyedSubscript:]( v10,  "objectForKeyedSubscript:",  kACCInfo_FirmwareVersionActive));
    id v43 = NSObjectIfNotNull(v79);
    uint64_t v44 = objc_claimAutoreleasedReturnValue(v43);
    uint64_t v78 = (void *)v44;
    if (v44) {
      uint64_t v45 = (const __CFString *)v44;
    }
    else {
      uint64_t v45 = &stru_100200A40;
    }
    v100[9] = v45;
    _BYTE v99[10] = @"accessoryFirmwareVersionPending";
    uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue( -[int64x2_t objectForKeyedSubscript:]( v10,  "objectForKeyedSubscript:",  kACCInfo_FirmwareVersionPending));
    id v46 = NSObjectIfNotNull(v77);
    uint64_t v47 = objc_claimAutoreleasedReturnValue(v46);
    unint64_t v76 = (void *)v47;
    if (v47) {
      uint64_t v48 = (const __CFString *)v47;
    }
    else {
      uint64_t v48 = &stru_100200A40;
    }
    v100[10] = v48;
    v99[11] = @"accessoryVID";
    __int128 v75 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v10, "objectForKeyedSubscript:", kACCInfo_VendorID));
    id v49 = NSObjectIfNotNull(v75);
    uint64_t v50 = objc_claimAutoreleasedReturnValue(v49);
    uint64_t v51 = (void *)v50;
    if (v50) {
      uint64_t v52 = (_UNKNOWN **)v50;
    }
    else {
      uint64_t v52 = &off_100206BA8;
    }
    v100[11] = v52;
    v99[12] = @"accessoryPID";
    id v98 = v10;
    id v74 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v10, "objectForKeyedSubscript:", kACCInfo_ProductID));
    id v53 = NSObjectIfNotNull(v74);
    uint64_t v54 = objc_claimAutoreleasedReturnValue(v53);
    uint64_t v55 = (void *)v54;
    if (v54) {
      id v56 = (_UNKNOWN **)v54;
    }
    else {
      id v56 = &off_100206BA8;
    }
    v100[12] = v56;
    v99[13] = @"unlockedSinceBoot";
    uint64_t v57 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", platform_system_unlockedSinceBoot());
    uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue(v57);
    v100[13] = v73;
    v99[14] = @"deviceIsPowered";
    uint64_t v58 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  platform_power_getCurrentLimit(a1[1]) != 0);
    uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue(v58);
    v100[14] = v59;
    v99[15] = @"availableCurrent";
    uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", a2));
    v100[15] = v60;
    v99[16] = @"ConnectedThroughAdapter";
    id v61 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  acc_connection_isConnectedThroughAdapter(*a1));
    id v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
    v100[16] = v62;
    v99[17] = @"AdapterVID";
    uint64_t v63 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", acc_connection_getAdapterVID(*a1));
    id v64 = (void *)objc_claimAutoreleasedReturnValue(v63);
    v100[17] = v64;
    v99[18] = @"AdapterPID";
    uint64_t v65 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", acc_connection_getAdapterPID(*a1));
    uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue(v65);
    v100[18] = v66;
    uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v100,  v99,  19LL));
    uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v67));

    uint64_t v69 = acc_connection_copyProperty((char *)*a1, kCFACCProperties_Connection_PrimaryPortNumber);
    uint64_t v70 = objc_opt_class(&OBJC_CLASS___NSNumber);
    if ((objc_opt_isKindOfClass(v69, v70) & 1) != 0) {
      [v68 setObject:v69 forKey:@"lightningPrimaryPortNumber"];
    }
    if (gLogObjects && gNumLogObjects >= 7)
    {
      id v71 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v71 = (os_log_s *)&_os_log_default;
      id v72 = &_os_log_default;
    }

    if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      *(void *)id v102 = @"com.apple.accessories.endpoint.setAvailableCurrent";
      *(_WORD *)&v102[8] = 2112;
      *(void *)&v102[10] = v68;
      _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_DEFAULT,  "[#EventLogger] CoreAnalytics event: %@\neventDict: %@",  buf,  0x16u);
    }

    AnalyticsSendEvent(@"com.apple.accessories.endpoint.setAvailableCurrent", v68);
  }

void platform_analytics_connectionPassedAuth(CFStringRef *a1)
{
  i64 = a1;
  uint64_t v8 = 0LL;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000LL;
  uint64_t v11 = 0LL;
  if (!a1) {
    goto LABEL_10;
  }
  if (!*a1)
  {
LABEL_9:
    i64 = 0LL;
    goto LABEL_10;
  }

  CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, *a1);
  v9[3] = (uint64_t)Copy;
  uint64_t v7 = 0LL;
  _getEndpointAndAccInfoForAuthPassedEvent(i64, &v7);
  id v3 = v7;
  if (!v3)
  {
    dispatch_time_t v5 = dispatch_time(0LL, 5000000000LL);
    if (_analyticsQueue_onceToken != -1) {
      dispatch_once(&_analyticsQueue_onceToken, &__block_literal_global_11);
    }
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = __platform_analytics_connectionPassedAuth_block_invoke;
    v6[3] = &unk_1001FAF00;
    v6[4] = &v8;
    dispatch_after(v5, (dispatch_queue_t)_analyticsQueue_analyticsQueue, v6);
    goto LABEL_9;
  }

  i64 = v3->i64;
  _logAuthPassedEvent((const void *)v9[3]);
  BOOL v4 = (const void *)v9[3];
  if (v4)
  {
    CFRelease(v4);
    v9[3] = 0LL;
  }

LABEL_10:
  _Block_object_dispose(&v8, 8);
}

  uint64_t v10 = 393226LL;
  uint64_t v11 = a2[1];
  if (v11 - *a2 < v7) {
    return 393220LL;
  }
  if (!v11) {
    goto LABEL_22;
  }
  a2[1] = v11 - 1;
  *(_BYTE *)(v11 - 1) = 90;
  if (__CFADD__(result, v9)) {
    goto LABEL_22;
  }
  id v12 = (const void *)(result + v9);
  if (result + v9 <= result + 14 && (unint64_t)v12 >= result && v6 <= 14 - v9)
  {
    goto LABEL_19;
  }

  *(void *)(a1 + 16) = v13;
  return result;
}

void sub_1000683A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

CFDictionaryRef _getEndpointAndAccInfoForAuthPassedEvent(void *a1, int64x2_t **a2)
{
  *a2 = 0LL;
  if (!a1 || !*a1) {
    return 0LL;
  }
  Endpoints = (const __CFDictionary *)acc_connection_getEndpoints((uint64_t)a1);
  BOOL v4 = Endpoints;
  CFIndex Count = CFDictionaryGetCount(Endpoints);
  if (Count < 1) {
    return 0LL;
  }
  uint64_t v6 = Count;
  __chkstk_darwin();
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  memset(v8, 170, v7);
  CFDictionaryGetKeysAndValues(v4, (const void **)v8, 0LL);
  uint64_t v9 = 0LL;
  unsigned int v10 = 1;
  while (1)
  {
    id v11 = *(id *)&v8[8 * v9];
    EndpointWithUUID = (const __CFDictionary *)acc_manager_getEndpointWithUUID(v11);
    BOOL v4 = EndpointWithUUID;
    if (EndpointWithUUID)
    {
    }

    uint64_t v9 = v10;
    BOOL v13 = v6 <= v10++;
    if (v13) {
      goto LABEL_13;
    }
  }

  uint64_t AccessoryInfo = acc_endpoint_getAccessoryInfo((uint64_t)EndpointWithUUID);
  *a2 = acc_accInfo_copyAccessoryInfoDictionary(AccessoryInfo);

LABEL_13:
  id v15 = *a2;
  if (!*a2)
  {
    unsigned int v16 = 1;
    while (1)
    {
      id v17 = *(id *)&v8[8 * (void)v15];
      id v18 = (const __CFDictionary *)acc_manager_getEndpointWithUUID(v17);
      BOOL v4 = v18;
      if (v18)
      {
        if ((*((_DWORD *)v18 + 7) | 2) == 7) {
          break;
        }
      }

      id v15 = (int64x2_t *)v16;
      BOOL v13 = v6 <= v16++;
      if (v13) {
        goto LABEL_21;
      }
    }

    uint64_t v19 = acc_endpoint_getAccessoryInfo((uint64_t)v18);
    *a2 = acc_accInfo_copyAccessoryInfoDictionary(v19);

LABEL_21:
    id v20 = *a2;
    if (!*a2)
    {
      unsigned int v21 = 1;
      while (1)
      {
        id v22 = *(id *)&v8[8 * (void)v20];
        uint64_t v23 = (const __CFDictionary *)acc_manager_getEndpointWithUUID(v22);
        BOOL v4 = v23;
        if (v23)
        {
          if (*((_DWORD *)v23 + 7) == 2) {
            break;
          }
        }

        id v20 = (int64x2_t *)v21;
        BOOL v13 = v6 <= v21++;
        if (v13) {
          goto LABEL_29;
        }
      }

      uint64_t v24 = acc_endpoint_getAccessoryInfo((uint64_t)v23);
      *a2 = acc_accInfo_copyAccessoryInfoDictionary(v24);

LABEL_29:
      uint64_t v25 = *a2;
      if (!*a2)
      {
        unsigned int v26 = 1;
        while (1)
        {
          id v27 = *(id *)&v8[8 * (void)v25];
          id v28 = (const __CFDictionary *)acc_manager_getEndpointWithUUID(v27);
          BOOL v4 = v28;
          if (v28)
          {
            uint64_t v29 = acc_endpoint_getAccessoryInfo((uint64_t)v28);
            id v30 = acc_accInfo_copyAccessoryInfoDictionary(v29);
            *a2 = v30;
            if (v30) {
              break;
            }
          }

          uint64_t v25 = (int64x2_t *)v26;
          BOOL v13 = v6 <= v26++;
          if (v13) {
            return v4;
          }
        }
      }
    }
  }

  return v4;
}

void _logAuthPassedEvent(const void *a1)
{
  if (a1)
  {
    ConnectionWithUUID = acc_manager_getConnectionWithUUID(a1);
    if (ConnectionWithUUID)
    {
      uint64_t v2 = (uint64_t)ConnectionWithUUID;
      uint64_t v91 = 0LL;
      EndpointAndAccInfoForAuthPassedEvent = _getEndpointAndAccInfoForAuthPassedEvent(ConnectionWithUUID, &v91);
      BOOL v4 = v91;
      if (v4)
      {
        dispatch_time_t v5 = v4;
        if (gLogObjects && gNumLogObjects >= 7)
        {
          uint64_t v6 = (os_log_s *)*(id *)(gLogObjects + 48);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v6 = (os_log_s *)&_os_log_default;
          id v7 = &_os_log_default;
        }

        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = *(void *)v2;
          *(_DWORD *)buf = 138412290;
          uint64_t v93 = (const __CFString *)v8;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[#EventLogger] Connection: %@ passed authentication",  buf,  0xCu);
        }

        v96[0] = @"connectionUUID";
        uint64_t v9 = *(void **)v2;
        if (*(void *)v2) {
          uint64_t v9 = (void *)CFRetain(v9);
        }
        id v89 = v9;
        id v10 = NSObjectIfNotNull(v9);
        uint64_t v11 = objc_claimAutoreleasedReturnValue(v10);
        id v88 = (void *)v11;
        if (v11) {
          id v12 = (const __CFString *)v11;
        }
        else {
          id v12 = &stru_100200A40;
        }
        v97[0] = v12;
        v96[1] = @"connectionType";
        BOOL v13 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  acc_connection_getTypeString(v2));
        uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue(v13);
        id v14 = NSObjectIfNotNull(v87);
        uint64_t v15 = objc_claimAutoreleasedReturnValue(v14);
        __int16 v86 = (void *)v15;
        if (v15) {
          unsigned int v16 = (const __CFString *)v15;
        }
        else {
          unsigned int v16 = &stru_100200A40;
        }
        v97[1] = v16;
        v96[2] = @"transportType";
        id v17 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  acc_endpoint_getTransportTypeString((uint64_t)EndpointAndAccInfoForAuthPassedEvent));
        uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue(v17);
        id v18 = NSObjectIfNotNull(v85);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(v18);
        uint64_t v84 = (void *)v19;
        if (v19) {
          id v20 = (const __CFString *)v19;
        }
        else {
          id v20 = &stru_100200A40;
        }
        v97[2] = v20;
        v96[3] = @"protocol";
        unsigned int v21 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  acc_endpoint_getProtocolString((uint64_t)EndpointAndAccInfoForAuthPassedEvent));
        id v83 = (void *)objc_claimAutoreleasedReturnValue(v21);
        id v22 = NSObjectIfNotNull(v83);
        uint64_t v23 = objc_claimAutoreleasedReturnValue(v22);
        uint64_t v82 = (void *)v23;
        if (v23) {
          uint64_t v24 = (const __CFString *)v23;
        }
        else {
          uint64_t v24 = &stru_100200A40;
        }
        v97[3] = v24;
        v96[4] = @"accessoryName";
        uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", kACCInfo_Name));
        id v25 = NSObjectIfNotNull(v81);
        uint64_t v26 = objc_claimAutoreleasedReturnValue(v25);
        id v80 = (void *)v26;
        if (v26) {
          id v27 = (const __CFString *)v26;
        }
        else {
          id v27 = &stru_100200A40;
        }
        v97[4] = v27;
        v96[5] = @"accessoryManufacturer";
        uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", kACCInfo_Manufacturer));
        id v28 = NSObjectIfNotNull(v79);
        uint64_t v29 = objc_claimAutoreleasedReturnValue(v28);
        uint64_t v78 = (void *)v29;
        if (v29) {
          id v30 = (const __CFString *)v29;
        }
        else {
          id v30 = &stru_100200A40;
        }
        v97[5] = v30;
        v96[6] = @"accessoryModel";
        uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", kACCInfo_Model));
        id v31 = NSObjectIfNotNull(v77);
        uint64_t v32 = objc_claimAutoreleasedReturnValue(v31);
        unint64_t v76 = (void *)v32;
        if (v32) {
          id v33 = (const __CFString *)v32;
        }
        else {
          id v33 = &stru_100200A40;
        }
        v97[6] = v33;
        v96[7] = @"accessoryHardwareVersion";
        __int128 v75 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", kACCInfo_HardwareVersion));
        id v34 = NSObjectIfNotNull(v75);
        uint64_t v35 = objc_claimAutoreleasedReturnValue(v34);
        id v74 = (void *)v35;
        if (v35) {
          id v36 = (const __CFString *)v35;
        }
        else {
          id v36 = &stru_100200A40;
        }
        v97[7] = v36;
        v96[8] = @"accessoryFirmwareVersionActive";
        uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue( -[int64x2_t objectForKeyedSubscript:]( v5,  "objectForKeyedSubscript:",  kACCInfo_FirmwareVersionActive));
        id v37 = NSObjectIfNotNull(v73);
        uint64_t v38 = objc_claimAutoreleasedReturnValue(v37);
        id v72 = (void *)v38;
        if (v38) {
          uint64_t v39 = (const __CFString *)v38;
        }
        else {
          uint64_t v39 = &stru_100200A40;
        }
        v97[8] = v39;
        v96[9] = @"accessoryFirmwareVersionPending";
        id v71 = (void *)objc_claimAutoreleasedReturnValue( -[int64x2_t objectForKeyedSubscript:]( v5,  "objectForKeyedSubscript:",  kACCInfo_FirmwareVersionPending));
        id v40 = NSObjectIfNotNull(v71);
        uint64_t v41 = objc_claimAutoreleasedReturnValue(v40);
        uint64_t v70 = (void *)v41;
        if (v41) {
          uint64_t v42 = (const __CFString *)v41;
        }
        else {
          uint64_t v42 = &stru_100200A40;
        }
        v97[9] = v42;
        v96[10] = @"accessoryVID";
        uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", kACCInfo_VendorID));
        id v43 = NSObjectIfNotNull(v69);
        uint64_t v44 = objc_claimAutoreleasedReturnValue(v43);
        uint64_t v45 = (void *)v44;
        if (v44) {
          id v46 = (_UNKNOWN **)v44;
        }
        else {
          id v46 = &off_100206BA8;
        }
        v97[10] = v46;
        v96[11] = @"accessoryPID";
        id v90 = v5;
        uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", kACCInfo_ProductID));
        id v47 = NSObjectIfNotNull(v68);
        uint64_t v48 = objc_claimAutoreleasedReturnValue(v47);
        id v49 = (void *)v48;
        if (v48) {
          uint64_t v50 = (_UNKNOWN **)v48;
        }
        else {
          uint64_t v50 = &off_100206BA8;
        }
        v97[11] = v50;
        v96[12] = @"unlockedSinceBoot";
        uint64_t v51 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  platform_system_unlockedSinceBoot());
        uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue(v51);
        v97[12] = v67;
        v96[13] = @"deviceIsPowered";
        uint64_t v52 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  platform_power_getCurrentLimit(*(void *)v2) != 0);
        id v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
        v97[13] = v53;
        v96[14] = @"authVersion";
        uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 68)));
        v97[14] = v54;
        v96[15] = @"ConnectedThroughAdapter";
        uint64_t v55 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  acc_connection_isConnectedThroughAdapter(v2));
        id v56 = (void *)objc_claimAutoreleasedReturnValue(v55);
        v97[15] = v56;
        v96[16] = @"AdapterVID";
        uint64_t v57 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", acc_connection_getAdapterVID(v2));
        uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue(v57);
        v97[16] = v58;
        v96[17] = @"AdapterPID";
        uint64_t v59 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", acc_connection_getAdapterPID(v2));
        uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue(v59);
        v97[17] = v60;
        id v61 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v97,  v96,  18LL));
        id v62 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v61));

        uint64_t v63 = acc_connection_copyProperty((char *)v2, kCFACCProperties_Connection_PrimaryPortNumber);
        uint64_t v64 = objc_opt_class(&OBJC_CLASS___NSNumber);
        if ((objc_opt_isKindOfClass(v63, v64) & 1) != 0) {
          [v62 setObject:v63 forKey:@"lightningPrimaryPortNumber"];
        }
        if (gLogObjects && gNumLogObjects >= 7)
        {
          uint64_t v65 = (os_log_s *)*(id *)(gLogObjects + 48);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v65 = (os_log_s *)&_os_log_default;
          id v66 = &_os_log_default;
        }

        if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          uint64_t v93 = @"com.apple.accessories.connection.passedAuth";
          __int16 v94 = 2112;
          id v95 = v62;
          _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEFAULT,  "[#EventLogger] CoreAnalytics event: %@\neventDict: %@",  buf,  0x16u);
        }

        AnalyticsSendEvent(@"com.apple.accessories.connection.passedAuth", v62);
      }
    }
  }

void __platform_analytics_connectionPassedAuth_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0LL;
  }

void platform_analytics_connectionAuthUnsuccessful(CFStringRef *a1, uint64_t a2)
{
  if (a1)
  {
    if (*a1)
    {
      CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, *a1);
      if (Copy)
      {
        CFStringRef v4 = Copy;
        if ((_DWORD)a2 == 2)
        {
          if (gLogObjects && gNumLogObjects >= 7)
          {
            uint64_t v8 = (os_log_s *)*(id *)(gLogObjects + 48);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            uint64_t v8 = (os_log_s *)&_os_log_default;
            id v96 = &_os_log_default;
          }

          if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_75;
          }
          *(_DWORD *)buf = 136315394;
          id v99 = "_logAuthUnsuccessfulEvent";
          __int16 v100 = 1024;
          LODWORD(v101) = 2;
          uint64_t v93 = "[#EventLogger] Called %s but authStatus successful: %d";
          __int16 v94 = v8;
          uint32_t v95 = 18;
        }

        else
        {
          ConnectionWithUUID = acc_manager_getConnectionWithUUID(Copy);
          if (ConnectionWithUUID)
          {
            uint64_t v6 = (uint64_t)ConnectionWithUUID;
            id v97 = 0LL;
            EndpointAndAccInfoForAuthPassedEvent = _getEndpointAndAccInfoForAuthPassedEvent(ConnectionWithUUID, &v97);
            uint64_t v8 = v97;
            uint64_t v9 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
            if (v8)
            {
              if (gLogObjects && gNumLogObjects >= 7)
              {
                id v10 = (os_log_s *)*(id *)(gLogObjects + 48);
              }

              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
                id v10 = (os_log_s *)&_os_log_default;
                id v11 = &_os_log_default;
              }

              if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
              {
                id v12 = *(const char **)v6;
                *(_DWORD *)buf = 138412290;
                id v99 = v12;
                _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[#EventLogger] Connection: %@ passed authentication",  buf,  0xCu);
              }

              BOOL v13 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s objectForKeyedSubscript:](v8, "objectForKeyedSubscript:", kACCInfo_Name));
              id v14 = NSObjectIfNotNull(v13);
              uint64_t v15 = objc_claimAutoreleasedReturnValue(v14);
              unsigned int v16 = (void *)v15;
              if (v15) {
                id v17 = (const __CFString *)v15;
              }
              else {
                id v17 = &stru_100200A40;
              }
              -[NSMutableDictionary setObject:forKey:](v9, "setObject:forKey:", v17, @"accessoryName");

              id v18 = (void *)objc_claimAutoreleasedReturnValue( -[os_log_s objectForKeyedSubscript:]( v8,  "objectForKeyedSubscript:",  kACCInfo_Manufacturer));
              id v19 = NSObjectIfNotNull(v18);
              uint64_t v20 = objc_claimAutoreleasedReturnValue(v19);
              unsigned int v21 = (void *)v20;
              if (v20) {
                id v22 = (const __CFString *)v20;
              }
              else {
                id v22 = &stru_100200A40;
              }
              -[NSMutableDictionary setObject:forKey:](v9, "setObject:forKey:", v22, @"accessoryManufacturer");

              uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s objectForKeyedSubscript:](v8, "objectForKeyedSubscript:", kACCInfo_Model));
              id v24 = NSObjectIfNotNull(v23);
              uint64_t v25 = objc_claimAutoreleasedReturnValue(v24);
              uint64_t v26 = (void *)v25;
              if (v25) {
                id v27 = (const __CFString *)v25;
              }
              else {
                id v27 = &stru_100200A40;
              }
              -[NSMutableDictionary setObject:forKey:](v9, "setObject:forKey:", v27, @"accessoryModel");

              id v28 = (void *)objc_claimAutoreleasedReturnValue( -[os_log_s objectForKeyedSubscript:]( v8,  "objectForKeyedSubscript:",  kACCInfo_HardwareVersion));
              id v29 = NSObjectIfNotNull(v28);
              uint64_t v30 = objc_claimAutoreleasedReturnValue(v29);
              id v31 = (void *)v30;
              if (v30) {
                uint64_t v32 = (const __CFString *)v30;
              }
              else {
                uint64_t v32 = &stru_100200A40;
              }
              -[NSMutableDictionary setObject:forKey:](v9, "setObject:forKey:", v32, @"accessoryHardwareVersion");

              id v33 = (void *)objc_claimAutoreleasedReturnValue( -[os_log_s objectForKeyedSubscript:]( v8,  "objectForKeyedSubscript:",  kACCInfo_FirmwareVersionActive));
              id v34 = NSObjectIfNotNull(v33);
              uint64_t v35 = objc_claimAutoreleasedReturnValue(v34);
              id v36 = (void *)v35;
              if (v35) {
                id v37 = (const __CFString *)v35;
              }
              else {
                id v37 = &stru_100200A40;
              }
              -[NSMutableDictionary setObject:forKey:]( v9,  "setObject:forKey:",  v37,  @"accessoryFirmwareVersionActive");

              uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue( -[os_log_s objectForKeyedSubscript:]( v8,  "objectForKeyedSubscript:",  kACCInfo_FirmwareVersionPending));
              id v39 = NSObjectIfNotNull(v38);
              uint64_t v40 = objc_claimAutoreleasedReturnValue(v39);
              uint64_t v41 = (void *)v40;
              if (v40) {
                uint64_t v42 = (const __CFString *)v40;
              }
              else {
                uint64_t v42 = &stru_100200A40;
              }
              -[NSMutableDictionary setObject:forKey:]( v9,  "setObject:forKey:",  v42,  @"accessoryFirmwareVersionPending");

              id v43 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s objectForKeyedSubscript:](v8, "objectForKeyedSubscript:", kACCInfo_VendorID));
              id v44 = NSObjectIfNotNull(v43);
              uint64_t v45 = objc_claimAutoreleasedReturnValue(v44);
              id v46 = (void *)v45;
              if (v45) {
                id v47 = (_UNKNOWN **)v45;
              }
              else {
                id v47 = &off_100206BA8;
              }
              -[NSMutableDictionary setObject:forKey:](v9, "setObject:forKey:", v47, @"accessoryVID");

              uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s objectForKeyedSubscript:](v8, "objectForKeyedSubscript:", kACCInfo_ProductID));
              id v49 = NSObjectIfNotNull(v48);
              uint64_t v50 = objc_claimAutoreleasedReturnValue(v49);
              uint64_t v51 = (void *)v50;
              if (v50) {
                uint64_t v52 = (_UNKNOWN **)v50;
              }
              else {
                uint64_t v52 = &off_100206BA8;
              }
              -[NSMutableDictionary setObject:forKey:](v9, "setObject:forKey:", v52, @"accessoryPID");
            }

            if (*(void *)v6) {
              id v53 = (void *)CFRetain(*(CFTypeRef *)v6);
            }
            else {
              id v53 = 0LL;
            }
            id v54 = NSObjectIfNotNull(v53);
            uint64_t v55 = objc_claimAutoreleasedReturnValue(v54);
            id v56 = (void *)v55;
            if (v55) {
              uint64_t v57 = (const __CFString *)v55;
            }
            else {
              uint64_t v57 = &stru_100200A40;
            }
            -[NSMutableDictionary setObject:forKey:](v9, "setObject:forKey:", v57, @"connectionUUID");

            uint64_t v58 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  acc_connection_getTypeString(v6));
            uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue(v58);
            id v60 = NSObjectIfNotNull(v59);
            uint64_t v61 = objc_claimAutoreleasedReturnValue(v60);
            id v62 = (void *)v61;
            if (v61) {
              uint64_t v63 = (const __CFString *)v61;
            }
            else {
              uint64_t v63 = &stru_100200A40;
            }
            -[NSMutableDictionary setObject:forKey:](v9, "setObject:forKey:", v63, @"connectionType");

            uint64_t v64 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  acc_endpoint_getTransportTypeString((uint64_t)EndpointAndAccInfoForAuthPassedEvent));
            uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue(v64);
            id v66 = NSObjectIfNotNull(v65);
            uint64_t v67 = objc_claimAutoreleasedReturnValue(v66);
            uint64_t v68 = (void *)v67;
            if (v67) {
              uint64_t v69 = (const __CFString *)v67;
            }
            else {
              uint64_t v69 = &stru_100200A40;
            }
            -[NSMutableDictionary setObject:forKey:](v9, "setObject:forKey:", v69, @"transportType");

            uint64_t v70 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  acc_endpoint_getProtocolString((uint64_t)EndpointAndAccInfoForAuthPassedEvent));
            id v71 = (void *)objc_claimAutoreleasedReturnValue(v70);
            id v72 = NSObjectIfNotNull(v71);
            uint64_t v73 = objc_claimAutoreleasedReturnValue(v72);
            id v74 = (void *)v73;
            if (v73) {
              __int128 v75 = (const __CFString *)v73;
            }
            else {
              __int128 v75 = &stru_100200A40;
            }
            -[NSMutableDictionary setObject:forKey:](v9, "setObject:forKey:", v75, @"protocol");

            unint64_t v76 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  platform_system_unlockedSinceBoot());
            uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue(v76);
            -[NSMutableDictionary setObject:forKey:](v9, "setObject:forKey:", v77, @"unlockedSinceBoot");

            uint64_t v78 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  platform_power_getCurrentLimit(*(void *)v6) != 0);
            uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue(v78);
            -[NSMutableDictionary setObject:forKey:](v9, "setObject:forKey:", v79, @"deviceIsPowered");

            id v80 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(v6 + 68)));
            -[NSMutableDictionary setObject:forKey:](v9, "setObject:forKey:", v80, @"authVersion");

            uint64_t v81 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  acc_connection_isConnectedThroughAdapter(v6));
            uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue(v81);
            -[NSMutableDictionary setObject:forKey:](v9, "setObject:forKey:", v82, @"ConnectedThroughAdapter");

            id v83 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", acc_connection_getAdapterVID(v6));
            uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue(v83);
            -[NSMutableDictionary setObject:forKey:](v9, "setObject:forKey:", v84, @"AdapterVID");

            uint64_t v85 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", acc_connection_getAdapterPID(v6));
            __int16 v86 = (void *)objc_claimAutoreleasedReturnValue(v85);
            -[NSMutableDictionary setObject:forKey:](v9, "setObject:forKey:", v86, @"AdapterPID");

            uint64_t v87 = acc_connection_copyProperty((char *)v6, kCFACCProperties_Connection_PrimaryPortNumber);
            uint64_t v88 = objc_opt_class(&OBJC_CLASS___NSNumber);
            if ((objc_opt_isKindOfClass(v87, v88) & 1) != 0) {
              -[NSMutableDictionary setObject:forKey:]( v9,  "setObject:forKey:",  v87,  @"lightningPrimaryPortNumber");
            }
            id v89 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a2));
            -[NSMutableDictionary setObject:forKey:](v9, "setObject:forKey:", v89, @"authStatusCode");

            if (gLogObjects && gNumLogObjects >= 7)
            {
              id v90 = (os_log_s *)*(id *)(gLogObjects + 48);
            }

            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
              id v90 = (os_log_s *)&_os_log_default;
              id v91 = &_os_log_default;
            }

            if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412546;
              id v99 = @"com.apple.accessories.connection.authUnsuccessful";
              __int16 v100 = 2112;
              id v101 = v9;
              _os_log_impl( (void *)&_mh_execute_header,  v90,  OS_LOG_TYPE_DEFAULT,  "[#EventLogger] CoreAnalytics event: %@\neventDict: %@",  buf,  0x16u);
            }

            AnalyticsSendEvent(@"com.apple.accessories.connection.authUnsuccessful", v9);
            goto LABEL_75;
          }

          if (gLogObjects && gNumLogObjects >= 7)
          {
            uint64_t v8 = (os_log_s *)*(id *)(gLogObjects + 48);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
            uint64_t v8 = (os_log_s *)&_os_log_default;
            id v92 = &_os_log_default;
          }

          if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_75;
          }
          *(_DWORD *)buf = 138412290;
          id v99 = @"com.apple.accessories.connection.authUnsuccessful";
          uint64_t v93 = "[#EventLogger] Unable to create %@ analytic. No connection found";
          __int16 v94 = v8;
          uint32_t v95 = 12;
        }

        _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, v93, buf, v95);
LABEL_75:

        CFRelease(v4);
      }
    }
  }

void platform_analytics_iap1_lingoesSupportedDidChange(uint64_t *a1, uint64_t a2)
{
  if (a1 && *a1 && *(void *)*a1)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 7;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v6 = (os_log_s *)&_os_log_default;
      id v5 = &_os_log_default;
    }

    else
    {
      uint64_t v6 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = (const __CFString *)a1[2];
      uint64_t v8 = *(void **)*a1;
      *(_DWORD *)buf = 138412546;
      id v53 = v7;
      __int16 v54 = 2112;
      uint64_t v55 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[#EventLogger] iAP1 lingoes reported for endpoint: %@ (connection %@)",  buf,  0x16u);
    }

    v50[0] = @"endpointUUID";
    uint64_t v9 = (void *)a1[2];
    if (v9) {
      uint64_t v9 = (void *)CFRetain(v9);
    }
    id v49 = v9;
    id v10 = NSObjectIfNotNull(v9);
    uint64_t v11 = objc_claimAutoreleasedReturnValue(v10);
    uint64_t v48 = (void *)v11;
    if (v11) {
      id v12 = (const __CFString *)v11;
    }
    else {
      id v12 = &stru_100200A40;
    }
    v51[0] = v12;
    v50[1] = @"connectionUUID";
    BOOL v13 = *(void **)*a1;
    if (v13) {
      BOOL v13 = (void *)CFRetain(v13);
    }
    id v47 = v13;
    id v14 = NSObjectIfNotNull(v13);
    uint64_t v15 = objc_claimAutoreleasedReturnValue(v14);
    id v46 = (void *)v15;
    if (v15) {
      unsigned int v16 = (const __CFString *)v15;
    }
    else {
      unsigned int v16 = &stru_100200A40;
    }
    v51[1] = v16;
    v50[2] = @"connectionType";
    id v17 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  acc_connection_getTypeString(*a1));
    uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(v17);
    id v18 = NSObjectIfNotNull(v45);
    uint64_t v19 = objc_claimAutoreleasedReturnValue(v18);
    uint64_t v20 = (void *)v19;
    if (v19) {
      unsigned int v21 = (const __CFString *)v19;
    }
    else {
      unsigned int v21 = &stru_100200A40;
    }
    v51[2] = v21;
    v50[3] = @"transportType";
    id v22 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  acc_endpoint_getTransportTypeString((uint64_t)a1));
    id v44 = (void *)objc_claimAutoreleasedReturnValue(v22);
    id v23 = NSObjectIfNotNull(v44);
    uint64_t v24 = objc_claimAutoreleasedReturnValue(v23);
    uint64_t v25 = (void *)v24;
    if (v24) {
      uint64_t v26 = (const __CFString *)v24;
    }
    else {
      uint64_t v26 = &stru_100200A40;
    }
    v51[3] = v26;
    v50[4] = @"protocol";
    id v27 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  acc_endpoint_getProtocolString((uint64_t)a1));
    id v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
    id v29 = NSObjectIfNotNull(v28);
    uint64_t v30 = objc_claimAutoreleasedReturnValue(v29);
    id v31 = (void *)v30;
    if (v30) {
      uint64_t v32 = (const __CFString *)v30;
    }
    else {
      uint64_t v32 = &stru_100200A40;
    }
    _OWORD v51[4] = v32;
    v50[5] = @"lingoesBitmask";
    id v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a2));
    v51[5] = v33;
    v50[6] = @"ConnectedThroughAdapter";
    id v34 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  acc_connection_isConnectedThroughAdapter(*a1));
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
    v51[6] = v35;
    v50[7] = @"AdapterVID";
    id v36 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", acc_connection_getAdapterVID(*a1));
    id v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
    v51[7] = v37;
    v50[8] = @"AdapterPID";
    uint64_t v38 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", acc_connection_getAdapterPID(*a1));
    id v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
    v51[8] = v39;
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v51,  v50,  9LL));
    uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v40));

    if (gLogObjects && gNumLogObjects >= 7)
    {
      uint64_t v42 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v42 = (os_log_s *)&_os_log_default;
      id v43 = &_os_log_default;
    }

    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      id v53 = @"com.apple.accessories.endpoint.iap1.lingoesSupported";
      __int16 v54 = 2112;
      uint64_t v55 = v41;
      _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "[#EventLogger] CoreAnalytics event: %@\neventDict: %@",  buf,  0x16u);
    }

    AnalyticsSendEvent(@"com.apple.accessories.endpoint.iap1.lingoesSupported", v41);
  }

void platform_analytics_iap2_featuresSupportedDidChange(const __CFSet *a1)
{
  if (a1)
  {
    uint64_t v2 = *(void **)a1;
    if (*(void *)a1)
    {
      if (*v2 && v2[1])
      {
        if (gLogObjects && gNumLogObjects >= 7)
        {
          id v3 = (os_log_s *)*(id *)(gLogObjects + 48);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          id v3 = (os_log_s *)&_os_log_default;
          id v4 = &_os_log_default;
        }

        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          id v5 = (const __CFString *)*((void *)a1 + 1);
          uint64_t v6 = *(void **)(*(void *)a1 + 8LL);
          *(_DWORD *)buf = 138412546;
          __int128 v110 = v5;
          __int16 v111 = 2112;
          __int128 v112 = v6;
          _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[#EventLogger] iAP2 messages reported for endpoint: %@ (connection %@)",  buf,  0x16u);
        }

        unsigned int v7 = 0;
        int v8 = 0;
        do
        {
          unsigned int v9 = iap2_identification_isIdentifiedForFeature(a1, v7);
          int v10 = 1 << v7;
          if (!v9) {
            int v10 = 0;
          }
          v8 |= v10;
          ++v7;
        }

        while (v7 != 29);
        if (gLogObjects) {
          BOOL v11 = gNumLogObjects < 7;
        }
        else {
          BOOL v11 = 1;
        }
        if (v11)
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          BOOL v13 = (os_log_s *)&_os_log_default;
          id v12 = &_os_log_default;
        }

        else
        {
          BOOL v13 = (os_log_s *)*(id *)(gLogObjects + 48);
        }

        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v110) = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "[#EventLogger] True FeaturesMask: 0x%08x",  buf,  8u);
        }

        if (gLogObjects && gNumLogObjects >= 7)
        {
          id v14 = (os_log_s *)*(id *)(gLogObjects + 48);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          id v14 = (os_log_s *)&_os_log_default;
          id v15 = &_os_log_default;
        }

        uint64_t v16 = v8 & 0x136FC80;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v110) = v8 & 0x136FC80;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "[#EventLogger] Filtered FeaturesMask: 0x%08x",  buf,  8u);
        }

        uint64_t AccessoryInfo = acc_endpoint_getAccessoryInfo(*(void *)a1);
        id v18 = acc_accInfo_copyAccessoryInfoDictionary(AccessoryInfo);
        v107[0] = @"endpointUUID";
        uint64_t v19 = (void *)*((void *)a1 + 1);
        if (v19) {
          uint64_t v19 = (void *)CFRetain(v19);
        }
        uint64_t v105 = v19;
        id v20 = NSObjectIfNotNull(v19);
        uint64_t v21 = objc_claimAutoreleasedReturnValue(v20);
        __int16 v104 = (void *)v21;
        if (v21) {
          id v22 = (const __CFString *)v21;
        }
        else {
          id v22 = &stru_100200A40;
        }
        v108[0] = v22;
        v107[1] = @"connectionUUID";
        id v23 = *(void **)(*(void *)a1 + 8LL);
        if (v23) {
          id v23 = (void *)CFRetain(v23);
        }
        id v103 = v23;
        id v24 = NSObjectIfNotNull(v23);
        uint64_t v25 = objc_claimAutoreleasedReturnValue(v24);
        id v102 = (void *)v25;
        if (v25) {
          uint64_t v26 = (const __CFString *)v25;
        }
        else {
          uint64_t v26 = &stru_100200A40;
        }
        v108[1] = v26;
        v107[2] = @"connectionType";
        id v27 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  acc_connection_getTypeString(**(void **)a1));
        id v101 = (void *)objc_claimAutoreleasedReturnValue(v27);
        id v28 = NSObjectIfNotNull(v101);
        uint64_t v29 = objc_claimAutoreleasedReturnValue(v28);
        __int16 v100 = (void *)v29;
        if (v29) {
          uint64_t v30 = (const __CFString *)v29;
        }
        else {
          uint64_t v30 = &stru_100200A40;
        }
        v108[2] = v30;
        v107[3] = @"transportType";
        id v31 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  acc_endpoint_getTransportTypeString(*(void *)a1));
        id v99 = (void *)objc_claimAutoreleasedReturnValue(v31);
        id v32 = NSObjectIfNotNull(v99);
        uint64_t v33 = objc_claimAutoreleasedReturnValue(v32);
        id v98 = (void *)v33;
        if (v33) {
          id v34 = (const __CFString *)v33;
        }
        else {
          id v34 = &stru_100200A40;
        }
        v108[3] = v34;
        _OWORD v107[4] = @"protocol";
        uint64_t v35 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  acc_endpoint_getProtocolString(*(void *)a1));
        id v97 = (void *)objc_claimAutoreleasedReturnValue(v35);
        id v36 = NSObjectIfNotNull(v97);
        uint64_t v37 = objc_claimAutoreleasedReturnValue(v36);
        id v96 = (void *)v37;
        if (v37) {
          uint64_t v38 = (const __CFString *)v37;
        }
        else {
          uint64_t v38 = &stru_100200A40;
        }
        v108[4] = v38;
        v107[5] = @"accessoryName";
        uint32_t v95 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v18, "objectForKeyedSubscript:", kACCInfo_Name));
        id v39 = NSObjectIfNotNull(v95);
        uint64_t v40 = objc_claimAutoreleasedReturnValue(v39);
        __int16 v94 = (void *)v40;
        if (v40) {
          uint64_t v41 = (const __CFString *)v40;
        }
        else {
          uint64_t v41 = &stru_100200A40;
        }
        v108[5] = v41;
        v107[6] = @"accessoryManufacturer";
        uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v18, "objectForKeyedSubscript:", kACCInfo_Manufacturer));
        id v42 = NSObjectIfNotNull(v93);
        uint64_t v43 = objc_claimAutoreleasedReturnValue(v42);
        id v92 = (void *)v43;
        if (v43) {
          id v44 = (const __CFString *)v43;
        }
        else {
          id v44 = &stru_100200A40;
        }
        v108[6] = v44;
        v107[7] = @"accessoryModel";
        id v91 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v18, "objectForKeyedSubscript:", kACCInfo_Model));
        id v45 = NSObjectIfNotNull(v91);
        uint64_t v46 = objc_claimAutoreleasedReturnValue(v45);
        id v90 = (void *)v46;
        if (v46) {
          id v47 = (const __CFString *)v46;
        }
        else {
          id v47 = &stru_100200A40;
        }
        v108[7] = v47;
        v107[8] = @"accessoryHardwareVersion";
        id v89 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v18, "objectForKeyedSubscript:", kACCInfo_HardwareVersion));
        id v48 = NSObjectIfNotNull(v89);
        uint64_t v49 = objc_claimAutoreleasedReturnValue(v48);
        uint64_t v88 = (void *)v49;
        if (v49) {
          uint64_t v50 = (const __CFString *)v49;
        }
        else {
          uint64_t v50 = &stru_100200A40;
        }
        v108[8] = v50;
        v107[9] = @"accessoryFirmwareVersionActive";
        uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue( -[int64x2_t objectForKeyedSubscript:]( v18,  "objectForKeyedSubscript:",  kACCInfo_FirmwareVersionActive));
        id v51 = NSObjectIfNotNull(v87);
        uint64_t v52 = objc_claimAutoreleasedReturnValue(v51);
        __int16 v86 = (void *)v52;
        if (v52) {
          id v53 = (const __CFString *)v52;
        }
        else {
          id v53 = &stru_100200A40;
        }
        v108[9] = v53;
        v107[10] = @"accessoryFirmwareVersionPending";
        uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue( -[int64x2_t objectForKeyedSubscript:]( v18,  "objectForKeyedSubscript:",  kACCInfo_FirmwareVersionPending));
        id v54 = NSObjectIfNotNull(v85);
        uint64_t v55 = objc_claimAutoreleasedReturnValue(v54);
        uint64_t v84 = (void *)v55;
        if (v55) {
          id v56 = (const __CFString *)v55;
        }
        else {
          id v56 = &stru_100200A40;
        }
        v108[10] = v56;
        v107[11] = @"accessoryVID";
        id v83 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v18, "objectForKeyedSubscript:", kACCInfo_VendorID));
        id v57 = NSObjectIfNotNull(v83);
        uint64_t v58 = objc_claimAutoreleasedReturnValue(v57);
        uint64_t v59 = (void *)v58;
        if (v58) {
          id v60 = (_UNKNOWN **)v58;
        }
        else {
          id v60 = &off_100206BA8;
        }
        v108[11] = v60;
        v107[12] = @"accessoryPID";
        id v106 = v18;
        uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue(-[int64x2_t objectForKeyedSubscript:](v18, "objectForKeyedSubscript:", kACCInfo_ProductID));
        id v61 = NSObjectIfNotNull(v82);
        uint64_t v62 = objc_claimAutoreleasedReturnValue(v61);
        uint64_t v63 = (void *)v62;
        if (v62) {
          uint64_t v64 = (_UNKNOWN **)v62;
        }
        else {
          uint64_t v64 = &off_100206BA8;
        }
        v108[12] = v64;
        v107[13] = @"unlockedSinceBoot";
        uint64_t v65 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  platform_system_unlockedSinceBoot());
        uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue(v65);
        v108[13] = v81;
        v107[14] = @"featuresBitmask";
        id v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v16));
        v108[14] = v66;
        v107[15] = @"carPlayCapable";
        uint64_t v67 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  iap2_identification_isIdentifiedForCarPlay((uint64_t)a1));
        uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue(v67);
        v108[15] = v68;
        v107[16] = @"ConnectedThroughAdapter";
        uint64_t v69 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  acc_connection_isConnectedThroughAdapter(**(void **)a1));
        uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue(v69);
        v108[16] = v70;
        v107[17] = @"AdapterVID";
        id v71 = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  acc_connection_getAdapterVID(**(void **)a1));
        id v72 = (void *)objc_claimAutoreleasedReturnValue(v71);
        v108[17] = v72;
        v107[18] = @"AdapterPID";
        uint64_t v73 = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  acc_connection_getAdapterPID(**(void **)a1));
        id v74 = (void *)objc_claimAutoreleasedReturnValue(v73);
        v108[18] = v74;
        __int128 v75 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v108,  v107,  19LL));
        unint64_t v76 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v75));

        uint64_t v77 = acc_connection_copyProperty(**(char ***)a1, kCFACCProperties_Connection_PrimaryPortNumber);
        uint64_t v78 = objc_opt_class(&OBJC_CLASS___NSNumber);
        if ((objc_opt_isKindOfClass(v77, v78) & 1) != 0) {
          [v76 setObject:v77 forKey:@"lightningPrimaryPortNumber"];
        }
        if (gLogObjects && gNumLogObjects >= 7)
        {
          uint64_t v79 = (os_log_s *)*(id *)(gLogObjects + 48);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v79 = (os_log_s *)&_os_log_default;
          id v80 = &_os_log_default;
        }

        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          __int128 v110 = @"com.apple.accessories.endpoint.iap2.featuresSupported";
          __int16 v111 = 2112;
          __int128 v112 = v76;
          _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEFAULT,  "[#EventLogger] CoreAnalytics event: %@\neventDict: %@",  buf,  0x16u);
        }

        AnalyticsSendEvent(@"com.apple.accessories.endpoint.iap2.featuresSupported", v76);
      }
    }
  }

void _getWeekAndMonth(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v7 = (id)objc_claimAutoreleasedReturnValue( +[NSCalendar calendarWithIdentifier:]( &OBJC_CLASS___NSCalendar,  "calendarWithIdentifier:",  NSCalendarIdentifierGregorian));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v7 components:8200 fromDate:v5]);

  *a2 = [v6 weekOfYear];
  *a3 = [v6 month];
}

void ___analyticsQueue_block_invoke(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.accessorydMatchingPlugin.eventLoggerQueue", 0LL);
  uint64_t v2 = (void *)_analyticsQueue_analyticsQueue;
  _analyticsQueue_analyticsQueue = (uint64_t)v1;
}

uint64_t acc_protocolParser_iAP2_create(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  if (*a1) {
    return 0LL;
  }
  uint64_t v2 = calloc(1uLL, 0x18uLL);
  *a1 = v2;
  if (!v2) {
    return 0LL;
  }
  *(_DWORD *)uint64_t v2 = 0;
  v2[2] = 0;
  *((_BYTE *)v2 + 6) = 0;
  *((void *)v2 + 1) = 0LL;
  v2[8] = 0;
  uint64_t v3 = 1LL;
  *((_BYTE *)v2 + 1_Block_object_dispose(va, 8) = 0;
  return v3;
}

BOOL acc_protocolParser_iAP2_reset(uint64_t a1)
{
  if (a1)
  {
    *(_DWORD *)a1 = 0;
    *(_WORD *)(a1 + 4) = 0;
    *(_BYTE *)(a1 + 6) = 0;
    *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
    *(_WORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 1_Block_object_dispose(va, 8) = 0;
  }

  return a1 != 0;
}

BOOL acc_protocolParser_iAP2_destroy(void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (*a1)
    {
      free(v2);
      *a1 = 0LL;
    }
  }

  return a1 != 0LL;
}

void acc_protocolParser_iAP2_run(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  if (*(_DWORD *)a2 == 4)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    int v6 = *(_DWORD *)v5;
    switch(*(_DWORD *)v5)
    {
      case 0:
        if (gLogObjects) {
          BOOL v8 = gNumLogObjects < 16;
        }
        else {
          BOOL v8 = 1;
        }
        if (v8)
        {
          id v20 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        else
        {
          id v20 = *(os_log_s **)(gLogObjects + 120);
        }

        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP2_run_cold_3();
        }
        int v21 = *a3;
        int v9 = v21 == 255;
        *(_BYTE *)(v5 + 6) += v21;
        goto LABEL_182;
      case 1:
        if (gLogObjects) {
          BOOL v10 = gNumLogObjects < 16;
        }
        else {
          BOOL v10 = 1;
        }
        if (v10)
        {
          id v22 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        else
        {
          id v22 = *(os_log_s **)(gLogObjects + 120);
        }

        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP2_run_cold_5();
        }
        int v23 = *a3;
        if (v23 == 90) {
          int v9 = 2;
        }
        else {
          int v9 = 12;
        }
        *(_BYTE *)(v5 + 6) += v23;
        goto LABEL_134;
      case 2:
        if (gLogObjects) {
          BOOL v11 = gNumLogObjects < 16;
        }
        else {
          BOOL v11 = 1;
        }
        if (v11)
        {
          id v24 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        else
        {
          id v24 = *(os_log_s **)(gLogObjects + 120);
        }

        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP2_run_cold_7();
        }
        *(_WORD *)(v5 + 4) = *a3 << 8;
        *(_BYTE *)(v5 + 6) += *a3;
        int v9 = 3;
        goto LABEL_182;
      case 3:
        if (gLogObjects) {
          BOOL v12 = gNumLogObjects < 16;
        }
        else {
          BOOL v12 = 1;
        }
        if (v12)
        {
          uint64_t v25 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        else
        {
          uint64_t v25 = *(os_log_s **)(gLogObjects + 120);
        }

        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP2_run_cold_13();
        }
        unsigned __int16 v26 = *(_WORD *)(v5 + 4) | *a3;
        *(_WORD *)(v5 + 4) = v26;
        if (v26 < 9u) {
          goto LABEL_133;
        }
        *(_WORD *)(v5 + 16) = v26 - 9;
        if (gLogObjects && gNumLogObjects >= 16)
        {
          id v27 = *(os_log_s **)(gLogObjects + 120);
        }

        else
        {
          id v27 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP2_run_cold_11(v5 + 4, v27, v44, v45, v46, v47, v48, v49);
        }
        if (gLogObjects && gNumLogObjects >= 16)
        {
          uint64_t v50 = *(os_log_s **)(gLogObjects + 120);
        }

        else
        {
          uint64_t v50 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP2_run_cold_9(v5 + 16, v50, v53, v54, v55, v56, v57, v58);
        }
        *(_BYTE *)(v5 + 6) += *a3;
        int v9 = 4;
        goto LABEL_182;
      case 4:
        if (gLogObjects) {
          BOOL v13 = gNumLogObjects < 16;
        }
        else {
          BOOL v13 = 1;
        }
        if (v13)
        {
          id v28 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        else
        {
          id v28 = *(os_log_s **)(gLogObjects + 120);
        }

        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP2_run_cold_15();
        }
        *(_BYTE *)(v5 + 6) += *a3;
        int v9 = 5;
        goto LABEL_182;
      case 5:
        if (gLogObjects) {
          BOOL v14 = gNumLogObjects < 16;
        }
        else {
          BOOL v14 = 1;
        }
        if (v14)
        {
          uint64_t v29 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        else
        {
          uint64_t v29 = *(os_log_s **)(gLogObjects + 120);
        }

        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP2_run_cold_17();
        }
        *(_BYTE *)(v5 + 6) += *a3;
        int v9 = 6;
        goto LABEL_182;
      case 6:
        if (gLogObjects) {
          BOOL v15 = gNumLogObjects < 16;
        }
        else {
          BOOL v15 = 1;
        }
        if (v15)
        {
          uint64_t v30 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        else
        {
          uint64_t v30 = *(os_log_s **)(gLogObjects + 120);
        }

        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP2_run_cold_19();
        }
        *(_BYTE *)(v5 + 6) += *a3;
        int v9 = 7;
        goto LABEL_182;
      case 7:
        if (gLogObjects) {
          BOOL v16 = gNumLogObjects < 16;
        }
        else {
          BOOL v16 = 1;
        }
        if (v16)
        {
          id v31 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        else
        {
          id v31 = *(os_log_s **)(gLogObjects + 120);
        }

        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP2_run_cold_21();
        }
        *(_BYTE *)(v5 + 6) += *a3;
        int v9 = 8;
        goto LABEL_182;
      case 8:
        if (gLogObjects) {
          BOOL v17 = gNumLogObjects < 16;
        }
        else {
          BOOL v17 = 1;
        }
        if (v17)
        {
          id v32 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        else
        {
          id v32 = *(os_log_s **)(gLogObjects + 120);
        }

        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP2_run_cold_24();
        }
        if (gLogObjects && gNumLogObjects >= 16)
        {
          uint64_t v33 = *(os_log_s **)(gLogObjects + 120);
        }

        else
        {
          uint64_t v33 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "iAP2 header checksum validated!", buf, 2u);
        }

        if (*(_WORD *)(v5 + 16) == 1)
        {
          int v9 = 10;
          goto LABEL_182;
        }

        if (*(_WORD *)(v5 + 16))
        {
          int v9 = 9;
          goto LABEL_182;
        }

        *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = *(_DWORD *)a2;
        id v51 = (os_log_s *)logObjectForModule_10();
        if (!os_log_type_enabled(v51, OS_LOG_TYPE_INFO)) {
          goto LABEL_181;
        }
        __int16 v61 = 0;
        uint64_t v52 = (uint8_t *)&v61;
        goto LABEL_180;
      case 9:
        if (gLogObjects) {
          BOOL v18 = gNumLogObjects < 16;
        }
        else {
          BOOL v18 = 1;
        }
        if (v18)
        {
          id v34 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        else
        {
          id v34 = *(os_log_s **)(gLogObjects + 120);
        }

        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP2_run_cold_26();
        }
        uint64_t v35 = *(void *)(v5 + 8);
        if (!v35)
        {
          *(void *)(v5 + _Block_object_dispose(va, 8) = a3;
          LOWORD(v35) = (_WORD)a3;
        }

        unsigned int v36 = *(unsigned __int16 *)(v5 + 16);
        BOOL v37 = v36 >= 2;
        unsigned int v38 = v36 - 2;
        if (!v37) {
          goto LABEL_133;
        }
        else {
          int v9 = 9;
        }
        *(_BYTE *)(v5 + 18) += *a3;
        goto LABEL_182;
      case 0xA:
        if (gLogObjects) {
          BOOL v19 = gNumLogObjects < 16;
        }
        else {
          BOOL v19 = 1;
        }
        if (v19)
        {
          id v39 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        else
        {
          id v39 = *(os_log_s **)(gLogObjects + 120);
        }

        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP2_run_cold_30();
        }
        if (*(unsigned __int8 *)(v5 + 18) == -*a3)
        {
          if (gLogObjects && gNumLogObjects >= 16)
          {
            uint64_t v40 = *(os_log_s **)(gLogObjects + 120);
          }

          else
          {
            uint64_t v40 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)id v60 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_INFO,  "iAP2 payload checksum validated!",  v60,  2u);
          }

          *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = *(_DWORD *)a2;
          if (gLogObjects && gNumLogObjects >= 16)
          {
            id v51 = *(os_log_s **)(gLogObjects + 120);
          }

          else
          {
            id v51 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
          {
            __int16 v59 = 0;
            uint64_t v52 = (uint8_t *)&v59;
LABEL_180:
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_INFO, "iAP2 detected!", v52, 2u);
          }

LABEL_181:
          int v9 = 11;
        }

        else
        {
LABEL_133:
          int v9 = 12;
LABEL_134:
          if (v6 != 12 && v9 == 12)
          {
            ++*(_BYTE *)(a1 + 24);
            if (gLogObjects) {
              BOOL v42 = gNumLogObjects < 16;
            }
            else {
              BOOL v42 = 1;
            }
            if (v42)
            {
              uint64_t v43 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            else
            {
              uint64_t v43 = *(os_log_s **)(gLogObjects + 120);
            }

            if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG)) {
              acc_protocolParser_iAP2_run_cold_1();
            }
            int v9 = 12;
          }
        }

LABEL_182:
        *(_DWORD *)uint64_t v5 = v9;
        break;
      default:
        int v9 = *(_DWORD *)v5;
        goto LABEL_134;
    }
  }

void *logObjectForModule_10()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 16;
  }
  else {
    BOOL v0 = 1;
  }
  if (!v0) {
    return *(void **)(gLogObjects + 120);
  }
  dispatch_queue_t v1 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v1;
}

uint64_t iap2_wifisharing_RequestWiFiInformation(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0LL;
  if (a1 && a2)
  {
    if (iAP2MsgGetMsgID(a2) == 22272)
    {
      uint64_t v11 = a1;
      kdebug_trace(731155616LL, 0LL, 0LL, 0LL, 0LL);
      unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
      if (FirstParam)
      {
        NextParam = (unsigned __int16 *)FirstParam;
        do
        {
          int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
          uint64_t v8 = gLogObjects;
          int v9 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 39)
          {
            BOOL v10 = *(os_log_s **)(gLogObjects + 304);
          }

          else
          {
            BOOL v10 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              uint64_t v13 = v8;
              __int16 v14 = 1024;
              int v15 = v9;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              BOOL v10 = (os_log_s *)&_os_log_default;
            }
          }

          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v13) = ParamID;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Unrecognized paramID:0x%04X", buf, 8u);
          }

          NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
        }

        while (NextParam);
      }

      return platform_wifisharing_request_device_wifi_information(*(const void **)(v11 + 8));
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

void *logObjectForModule_11()
{
  if (gLogObjects && gNumLogObjects >= 39) {
    return *(void **)(gLogObjects + 304);
  }
  BOOL v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

id iap2_wifisharing_AccessoryWiFiConfigurationInformation(uint64_t a1, uint64_t a2)
{
  id v2 = 0LL;
  BOOL v43 = 0;
  if (!a1 || !a2) {
    return v2;
  }
  uint64_t v39 = a1;
  kdebug_trace(731155628LL, 0LL, 0LL, 0LL, 0LL);
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
  if (!FirstParam)
  {
    CFDataRef v11 = 0LL;
    CFStringRef v10 = 0LL;
    CFStringRef v9 = 0LL;
    CFNumberRef v8 = 0LL;
    CFNumberRef v7 = 0LL;
LABEL_38:
    int isIdentifiedForWirelessCarPlay = iap2_identification_isIdentifiedForWirelessCarPlay(v39);
    id v2 = platform_wifisharing_accessory_wifi_configuration_information( *(NSMutableDictionary **)(v39 + 8),  (uint64_t)v11,  (uint64_t)v10,  (uint64_t)v9,  (uint64_t)v8,  (uint64_t)v7,  isIdentifiedForWirelessCarPlay);
    kdebug_trace(731155632LL, 0LL, 0LL, 0LL, 0LL);
    if (!v11) {
      goto LABEL_40;
    }
LABEL_39:
    CFRelease(v11);
    goto LABEL_40;
  }

  NextParam = (unsigned __int16 *)FirstParam;
  CFNumberRef v7 = 0LL;
  CFNumberRef v8 = 0LL;
  CFStringRef v9 = 0LL;
  CFStringRef v10 = 0LL;
  CFDataRef v11 = 0LL;
  BOOL v12 = kCFAllocatorDefault;
  while (2)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
    switch(ParamID)
    {
      case 0:
        unsigned int ParamValueLen = iAP2MsgGetParamValueLen(NextParam);
        uint64_t DataAsData = iAP2MsgGetDataAsData((uint64_t)NextParam, &v43);
        if (!v43)
        {
          BOOL v16 = (const UInt8 *)DataAsData;
          if (v11) {
            CFRelease(v11);
          }
          CFDataRef v11 = CFDataCreate(v12, v16, ParamValueLen);
          goto LABEL_35;
        }

        id v34 = (os_log_s *)logObjectForModule_11();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
          iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_1(a2);
        }
        goto LABEL_59;
      case 1:
        DataAsString = iAP2MsgGetDataAsString(NextParam, &v43);
        if (v43)
        {
          uint64_t v35 = (os_log_s *)logObjectForModule_11();
          if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
            iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_2(a2);
          }
          goto LABEL_59;
        }

        uint64_t v25 = (const char *)DataAsString;
        if (v10) {
          CFRelease(v10);
        }
        CFStringRef v10 = CFStringCreateWithCString(v12, v25, 0x8000100u);
        goto LABEL_35;
      case 2:
        unsigned __int16 v26 = iAP2MsgGetDataAsString(NextParam, &v43);
        if (v43)
        {
          unsigned int v36 = (os_log_s *)logObjectForModule_11();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
            iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_3(a2);
          }
          goto LABEL_59;
        }

        id v27 = (const char *)v26;
        if (v9) {
          CFRelease(v9);
        }
        CFStringRef v9 = CFStringCreateWithCString(v12, v27, 0x8000100u);
        goto LABEL_35;
      case 3:
        int DataAsU8 = iAP2MsgGetDataAsU8(NextParam, &v43);
        if (v43)
        {
          BOOL v37 = (os_log_s *)logObjectForModule_11();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
            iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_4(a2);
          }
          goto LABEL_59;
        }

        int v29 = DataAsU8;
        if (v8) {
          CFRelease(v8);
        }
        int valuePtr = v29;
        CFNumberRef v8 = CFNumberCreate(v12, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_35;
      case 4:
        int v30 = iAP2MsgGetDataAsU8(NextParam, &v43);
        if (!v43)
        {
          int v31 = v30;
          if (v7) {
            CFRelease(v7);
          }
          int v41 = v31;
          CFNumberRef v7 = CFNumberCreate(v12, kCFNumberSInt32Type, &v41);
LABEL_35:
          NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
          if (!NextParam) {
            goto LABEL_38;
          }
          continue;
        }

        unsigned int v38 = (os_log_s *)logObjectForModule_11();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
          iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_5(a2);
        }
LABEL_59:
        id v2 = 0LL;
        if (v11) {
          goto LABEL_39;
        }
LABEL_40:
        if (v10) {
          CFRelease(v10);
        }
        if (v9) {
          CFRelease(v9);
        }
        if (v8) {
          CFRelease(v8);
        }
        if (v7) {
          CFRelease(v7);
        }
        return v2;
      case 5:
      case 6:
        goto LABEL_35;
      default:
        BOOL v17 = v11;
        uint64_t v40 = v10;
        BOOL v18 = v9;
        BOOL v19 = v8;
        id v20 = v7;
        uint64_t v21 = gLogObjects;
        int v22 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 39)
        {
          int v23 = *(os_log_s **)(gLogObjects + 304);
        }

        else
        {
          int v23 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            uint64_t v45 = v21;
            __int16 v46 = 1024;
            int v47 = v22;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          }
        }

        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v45) = ParamID;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Unrecognized paramID:0x%04X", buf, 8u);
        }

        CFNumberRef v7 = v20;
        CFNumberRef v8 = v19;
        CFStringRef v9 = v18;
        CFDataRef v11 = v17;
        BOOL v12 = kCFAllocatorDefault;
        CFStringRef v10 = v40;
        goto LABEL_35;
    }
  }

CFNumberRef iap2_wifisharing_DeviceWiFiInformation(uint64_t *a1, CFDictionaryRef theDict)
{
  uint64_t Value = 0LL;
  if (a1)
  {
    if (theDict)
    {
      uint64_t Value = (const __CFNumber *)CFDictionaryGetValue(theDict, kCFWiFiSharing_WiFiNetworkInformationStatus);
      uint64_t v5 = (const __CFNumber *)CFDictionaryGetValue(theDict, kCFWiFiSharing_WiFiNetworkInformationSecurityType);
      int v6 = (const __CFString *)CFDictionaryGetValue(theDict, kCFWiFiSharing_WiFiNetworkInformationWifiSSID);
      CFNumberRef v7 = (const __CFString *)CFDictionaryGetValue(theDict, kCFWiFiSharing_WiFiNetworkInformationWifiPassphrase);
      iAP2MsgInit((uint64_t)(a1 + 15), 22273, a1[24], 0xFFFF, 0LL, 0LL);
      if (Value)
      {
        unsigned __int16 valuePtr = 0;
        CFNumberGetValue(Value, kCFNumberShortType, &valuePtr);
        uint64_t Value = (const __CFNumber *)iAP2MsgAddU8Param((uint64_t)(a1 + 15), 0LL, 0, valuePtr);
        int v8 = valuePtr;
        if (v5) {
          BOOL v9 = valuePtr == 0;
        }
        else {
          BOOL v9 = 0;
        }
        if (v9)
        {
          __int16 v18 = 0;
          CFNumberGetValue(v5, kCFNumberShortType, &v18);
          if (!iAP2MsgAddU8Param((uint64_t)(a1 + 15), 0LL, 1, v18))
          {
            if (gLogObjects && gNumLogObjects >= 39)
            {
              CFStringRef v10 = *(os_log_s **)(gLogObjects + 304);
            }

            else
            {
              CFStringRef v10 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Failed to add security type to message",  buf,  2u);
            }
          }
        }

        if (v6) {
          BOOL v11 = v8 == 0;
        }
        else {
          BOOL v11 = 0;
        }
        if (v11 && !iAP2MsgAddCFStringParam((uint64_t)(a1 + 15), 0LL, 2, v6))
        {
          if (gLogObjects && gNumLogObjects >= 39)
          {
            BOOL v12 = *(os_log_s **)(gLogObjects + 304);
          }

          else
          {
            BOOL v12 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)BOOL v16 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Failed to add SSID to message",  v16,  2u);
          }
        }

        if (v7 && !v8 && !iAP2MsgAddCFStringParam((uint64_t)(a1 + 15), 0LL, 3, v7))
        {
          if (gLogObjects && gNumLogObjects >= 39)
          {
            uint64_t v13 = *(os_log_s **)(gLogObjects + 304);
          }

          else
          {
            uint64_t v13 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int v15 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Failed to add passphrase to message",  v15,  2u);
          }
        }

        if (Value)
        {
          uint64_t Value = (const __CFNumber *)iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
          kdebug_trace(731155620LL, 0LL, 0LL, 0LL, 0LL);
        }
      }
    }
  }

  return Value;
}

uint64_t iap2_wifisharing_RequestAccessoryWiFiConfigurationInformation(uint64_t *a1)
{
  if (!a1) {
    return 0LL;
  }
  char v4 = 0;
  uint64_t v2 = 0LL;
  if (iap2_identification_checkRequiredMsgIDs( (uint64_t)a1,  (uint64_t)&_kMsgAccessoryWiFiCredentialsSharingList,  2,  &v4))
  {
    iAP2MsgInit((uint64_t)(a1 + 15), 22274, a1[24], 0xFFFF, 0LL, 0LL);
    uint64_t v2 = iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
    kdebug_trace(731155624LL, 0LL, 0LL, 0LL, 0LL);
  }

  return v2;
}

_WORD *_createFeature_5(_WORD *result)
{
  if (result)
  {
    uint64_t result = calloc(1uLL, 2uLL);
    if (result) {
      *uint64_t result = 0;
    }
  }

  return result;
}

uint64_t _destroyFeature_5(void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2)
    {
      free(v2);
      *a1 = 0LL;
    }
  }

  return 0LL;
}

uint64_t _startFeatureFromDevice_2(uint64_t result)
{
  if (result)
  {
    dispatch_queue_t v1 = (uint64_t *)result;
    if (gLogObjects && gNumLogObjects >= 39)
    {
      uint64_t v2 = *(os_log_s **)(gLogObjects + 304);
    }

    else
    {
      uint64_t v2 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "iAP2_WiFiSharing _startFeatureFromDevice",  v3,  2u);
    }

    uint64_t result = iap2_feature_getFeature((uint64_t)v1, 0x16u);
    if (result)
    {
      iap2_wifisharing_RequestAccessoryWiFiConfigurationInformation(v1);
      return 1LL;
    }
  }

  return result;
}

uint64_t _checkIdentificationInfo_4(uint64_t a1)
{
  unsigned __int8 v28 = -86;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&_kMsgDeviceWiFiCredentialsSharingList, 2u, &v28);
  if ((_DWORD)v2) {
    return v2;
  }
  int v3 = v28;
  uint64_t v4 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&_kMsgAccessoryWiFiCredentialsSharingList, 2u, &v28);
  uint64_t v5 = v4;
  int v6 = v28;
  if (v28 | v3) {
    BOOL v7 = (_DWORD)v4 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    iap2_features_createFeature(a1, 0x16u);
    iap2_identification_setIdentifiedForFeature(a1, 0x16u);
    BOOL v8 = v3 != 0;
    BOOL v9 = v6 != 0;
  }

  else
  {
    BOOL v8 = 0;
    BOOL v9 = 0;
  }

  uint64_t Feature = (_BYTE *)iap2_feature_getFeature(a1, 0x16u);
  if (Feature)
  {
    *uint64_t Feature = v8;
    Feature[1] = v9;
  }

  if (!v8) {
    goto LABEL_17;
  }
  if (gLogObjects && gNumLogObjects >= 39)
  {
    BOOL v11 = *(os_log_s **)(gLogObjects + 304);
  }

  else
  {
    BOOL v11 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    _checkIdentificationInfo_cold_3_0(v11, v12, v13, v14, v15, v16, v17, v18);
    if (!v9) {
      return v5;
    }
  }

  else
  {
LABEL_17:
    if (!v9) {
      return v5;
    }
  }

  if (gLogObjects && gNumLogObjects >= 39)
  {
    BOOL v19 = *(os_log_s **)(gLogObjects + 304);
  }

  else
  {
    BOOL v19 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
    _checkIdentificationInfo_cold_1_1(v19, v20, v21, v22, v23, v24, v25, v26);
  }
  return v5;
}

void OUTLINED_FUNCTION_2_3( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

uint64_t OUTLINED_FUNCTION_6_5(uint64_t result)
{
  return iAP2MsgGetMsgID(result);
}

const void *platform_systemInfo_copySystemName()
{
  BOOL v0 = (const void *)MGGetStringAnswer(@"UserAssignedDeviceName");
  CFRetain(v0);
  return v0;
}

const void *platform_systemInfo_copyBluetoothMACAddress()
{
  BOOL v0 = (const void *)MGGetStringAnswer(@"BluetoothAddress");
  CFRetain(v0);
  return v0;
}

uint64_t platform_systemInfo_copyBluetoothMACAddressData()
{
  return MGCopyAnswer(@"BluetoothAddressData", 0LL);
}

uint64_t platform_systemInfo_copyUniqueDeviceID()
{
  BOOL v0 = IOServiceMatching("IOUSBDeviceController");
  if (!v0) {
    return 0LL;
  }
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v0);
  if (!MatchingService) {
    return 0LL;
  }
  io_object_t v2 = MatchingService;
  CFProperty = (void *)IORegistryEntryCreateCFProperty( MatchingService,  @"DeviceDescription",  kCFAllocatorDefault,  0);
  uint64_t v4 = CFProperty;
  if (CFProperty) {
    uint64_t v5 = objc_claimAutoreleasedReturnValue([CFProperty objectForKeyedSubscript:@"serialNumber"]);
  }
  else {
    uint64_t v5 = 0LL;
  }
  IOObjectRelease(v2);

  return v5;
}

id platform_systemInfo_isIPad()
{
  return _isDeviceClass(@"iPad");
}

id _isDeviceClass(void *a1)
{
  id v1 = a1;
  io_object_t v2 = (void *)systemInfo_copyDeviceClass();
  id v3 = [v2 isEqualToString:v1];

  return v3;
}

id platform_systemInfo_isIPod()
{
  return _isDeviceClass(@"iPod");
}

id platform_systemInfo_isIPhone()
{
  return _isDeviceClass(@"iPhone");
}

id platform_systemInfo_isATV()
{
  return _isDeviceClass(@"AppleTV");
}

id platform_systemInfo_isWatch()
{
  return _isDeviceClass(@"Watch");
}

uint64_t platform_systemInfo_isApplePencilSupported()
{
  return MGGetBoolAnswer(@"yhHcB0iH0d1XzPO/CFd3ow");
}

BOOL platform_systemInfo_isApplePencilGen1Supported()
{
  BOOL result = 0;
  if (MGGetBoolAnswer(@"yhHcB0iH0d1XzPO/CFd3ow"))
  {
    BOOL v0 = (const __CFString *)MGCopyAnswer(@"ProductType", 0LL);
    if ((MGGetBoolAnswer(@"DeviceSupports9Pin") & 1) != 0
      || CFStringCompare(v0, @"iPad13,18", 0LL) == kCFCompareEqualTo
      || CFStringCompare(v0, @"iPad13,19", 0LL) == kCFCompareEqualTo)
    {
      return 1;
    }
  }

  return result;
}

uint64_t platform_systemInfo_deviceType()
{
  return 0LL;
}

uint64_t acc_protocolRouter_initProtocolLayer( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    uint64_t v8 = result;
    if (!*(void *)(result + 56)
      || (BOOL result = acc_protocolRouter_destroyProtocolLayer(result, a2, a3, a4, a5, a6, a7, a8), (_DWORD)result))
    {
      switch(*(_DWORD *)(v8 + 28))
      {
        case 3:
          if (*(void *)v8) {
            BOOL isAuthenticated = acc_connection_isAuthenticated(*(void *)v8, 0LL);
          }
          else {
            BOOL isAuthenticated = 0;
          }
          platform_iapd_bridge_accessory_connected(v8, isAuthenticated);
          return 1LL;
        case 4:
          BOOL v9 = iap2_endpoint_create((void *)v8);
          goto LABEL_25;
        case 5:
        case 6:
        case 7:
          BOOL v9 = ea_endpoint_create((pthread_mutex_t *)v8);
          goto LABEL_25;
        case 8:
          BOOL v9 = oobPairing_endpoint_create(v8);
          goto LABEL_25;
        case 0xA:
          BOOL v9 = accAuthProtocol_endpoint_create(v8);
          goto LABEL_25;
        case 0xB:
          BOOL v9 = configStream_endpoint_create(v8);
          goto LABEL_25;
        case 0xD:
          BOOL v9 = audioProductCerts_endpoint_create((uint64_t *)v8);
          goto LABEL_25;
        case 0xE:
          BOOL v9 = mfi4Auth_endpoint_create(v8);
          goto LABEL_25;
        case 0xF:
          BOOL v9 = accSNTPTimeSync_endpoint_create(v8);
          goto LABEL_25;
        case 0x10:
          BOOL result = iAP2MsgPreSendCtlProcess();
          if (!(_DWORD)result) {
            return result;
          }
          BOOL v9 = qiAuth_endpoint_create(v8);
LABEL_25:
          *(void *)(v8 + 56) = v9;
          BOOL result = v9 != 0LL;
          break;
        case 0x11:
          BOOL v9 = t56_endpoint_create(v8);
          goto LABEL_25;
        default:
          if (gLogObjects) {
            BOOL v11 = gNumLogObjects < 17;
          }
          else {
            BOOL v11 = 1;
          }
          if (v11)
          {
            uint64_t v12 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          else
          {
            uint64_t v12 = *(os_log_s **)(gLogObjects + 128);
          }

          BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
          BOOL result = 0LL;
          if (v13)
          {
            int v14 = *(_DWORD *)(v8 + 28);
            v15[0] = 67109120;
            v15[1] = v14;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Unable to initialize protocol: %{coreacc:ACCEndpoint_Protocol_t}d!",  (uint8_t *)v15,  8u);
            return 0LL;
          }

          return result;
      }
    }
  }

  return result;
}

uint64_t acc_protocolRouter_destroyProtocolLayer( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    uint64_t v8 = result;
    switch(*(_DWORD *)(result + 28))
    {
      case 3:
        platform_iapd_bridge_accessory_disconnected(*(void *)(result + 16));
        goto LABEL_6;
      case 4:
        if (!*(void *)(result + 56)) {
          goto LABEL_6;
        }
        BOOL result = iap2_endpoint_destroy((void ***)(result + 56));
        break;
      case 5:
      case 6:
      case 7:
        if (!*(void *)(result + 56)) {
          goto LABEL_6;
        }
        BOOL result = ea_endpoint_destroy(result + 56);
        break;
      case 8:
        if (!*(void *)(result + 56)) {
          goto LABEL_6;
        }
        BOOL result = oobPairing_endpoint_destroy((uint64_t *)(result + 56));
        break;
      case 0xA:
        if (!*(void *)(result + 56)) {
          goto LABEL_6;
        }
        BOOL result = (uint64_t)accAuthProtocol_endpoint_destroy((uint64_t **)(result + 56), a2, a3, a4, a5, a6, a7, a8);
        break;
      case 0xB:
        if (!*(void *)(result + 56)) {
          goto LABEL_6;
        }
        BOOL result = configStream_endpoint_destroy(result + 56);
        break;
      case 0xD:
        if (!*(void *)(result + 56)) {
          goto LABEL_6;
        }
        BOOL result = audioProductCerts_endpoint_destroy(result + 56);
        break;
      case 0xE:
        if (!*(void *)(result + 56)) {
          goto LABEL_6;
        }
        BOOL result = mfi4Auth_endpoint_destroy((uint64_t **)(result + 56));
        break;
      case 0xF:
        if (!*(void *)(result + 56)) {
          goto LABEL_6;
        }
        BOOL result = accSNTPTimeSync_endpoint_destroy(result + 56);
        break;
      case 0x10:
        BOOL result = iAP2MsgPreSendCtlProcess();
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v18 = *(void *)(v8 + 56);
        uint64_t v17 = (uint64_t *)(v8 + 56);
        if (v18) {
          BOOL result = qiAuth_endpoint_destroy(v17, v10, v11, v12, v13, v14, v15, v16);
        }
        else {
LABEL_6:
        }
          BOOL result = 1LL;
        break;
      case 0x11:
        if (!*(void *)(result + 56)) {
          goto LABEL_6;
        }
        BOOL result = t56_endpoint_destroy((uint64_t *)(result + 56), a2, a3, a4, a5, a6, a7, a8);
        break;
      default:
        if (gLogObjects) {
          BOOL v9 = gNumLogObjects < 17;
        }
        else {
          BOOL v9 = 1;
        }
        if (v9)
        {
          BOOL v19 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        else
        {
          BOOL v19 = *(os_log_s **)(gLogObjects + 128);
        }

        BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
        BOOL result = 0LL;
        if (v20)
        {
          int v21 = *(_DWORD *)(v8 + 28);
          v22[0] = 67109120;
          v22[1] = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Unable to destroy protocol: %{coreacc:ACCEndpoint_Protocol_t}d!",  (uint8_t *)v22,  8u);
          return 0LL;
        }

        return result;
    }
  }

  return result;
}

BOOL acc_protocolRouter_routeIncomingData(uint64_t a1, CFDataRef theData)
{
  BOOL result = 0LL;
  if (a1 && theData)
  {
    switch(*(_DWORD *)(a1 + 28))
    {
      case 3:
        goto LABEL_36;
      case 4:
        kdebug_trace(731119624LL, 0LL, 0LL, 0LL, 0LL);
        goto LABEL_33;
      case 5:
      case 7:
        if ((platform_externalAccessory_handleIncomingEADataFromAccessoryForEndpointUUID( *(const void **)(a1 + 16),  theData) & 1) == 0) {
          goto LABEL_36;
        }
        goto LABEL_33;
      case 8:
        goto LABEL_33;
      case 0xA:
        goto LABEL_33;
      case 0xB:
        goto LABEL_33;
      case 0xD:
        goto LABEL_33;
      case 0xE:
        goto LABEL_33;
      case 0xF:
        goto LABEL_33;
      case 0x10:
        if (!iAP2MsgPreSendCtlProcess()
          || !qiAuth_endpoint_processIncomingData(*(void *)(a1 + 56), theData))
        {
          goto LABEL_36;
        }

        goto LABEL_33;
      case 0x11:
LABEL_33:
        BOOL result = 1LL;
        break;
      default:
        if (gLogObjects) {
          BOOL v5 = gNumLogObjects < 17;
        }
        else {
          BOOL v5 = 1;
        }
        if (v5)
        {
          int v6 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        else
        {
          int v6 = *(os_log_s **)(gLogObjects + 128);
        }

        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          int v7 = *(_DWORD *)(a1 + 28);
          v9[0] = 67109120;
          v9[1] = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Unable to route data for protocol: %{coreacc:ACCEndpoint_Protocol_t}d, discarding data...",  (uint8_t *)v9,  8u);
        }

BOOL acc_protocolRouter_routeOutgoingSecureTunnelDataForClient(uint64_t a1, int a2, const __CFData *a3)
{
  BOOL result = 0LL;
  if (a1 && a3)
  {
    if (*(_DWORD *)(a1 + 28) == 14)
    {
    }

    else
    {
      if (gLogObjects) {
        BOOL v5 = gNumLogObjects < 17;
      }
      else {
        BOOL v5 = 1;
      }
      if (v5)
      {
        int v6 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      else
      {
        int v6 = *(os_log_s **)(gLogObjects + 128);
      }

      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = *(_DWORD *)(a1 + 28);
        v9[0] = 67109120;
        v9[1] = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Unable to route secure tunnel data for protocol: %{coreacc:ACCEndpoint_Protocol_t}d, discarding data...",  (uint8_t *)v9,  8u);
      }
    }

    if (gLogObjects && gNumLogObjects >= 17)
    {
      uint64_t v8 = *(os_log_s **)(gLogObjects + 128);
    }

    else
    {
      uint64_t v8 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (result)
    {
      acc_protocolRouter_routeOutgoingSecureTunnelDataForClient_cold_1();
      return 0LL;
    }
  }

  return result;
}

uint64_t acc_protocolRouter_setSecureTunnelDataTypeHandler(uint64_t result, uint64_t a2, void *a3)
{
  if (result)
  {
    id v3 = (int *)(result + 28);
    if (*(_DWORD *)(result + 28) == 14)
    {
    }

    else
    {
      if (gLogObjects) {
        BOOL v4 = gNumLogObjects < 17;
      }
      else {
        BOOL v4 = 1;
      }
      if (v4)
      {
        BOOL v5 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      else
      {
        BOOL v5 = *(os_log_s **)(gLogObjects + 128);
      }

      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = *v3;
        v8[0] = 67109120;
        v8[1] = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Unable to route handler for protocol: %{coreacc:ACCEndpoint_Protocol_t}d, discarding handler...",  (uint8_t *)v8,  8u);
      }
    }

    if (gLogObjects && gNumLogObjects >= 17)
    {
      int v7 = *(os_log_s **)(gLogObjects + 128);
    }

    else
    {
      int v7 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    BOOL result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      acc_protocolRouter_setSecureTunnelDataTypeHandler_cold_1();
      return 0LL;
    }
  }

  return result;
}

void OUTLINED_FUNCTION_2_4(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void OUTLINED_FUNCTION_5_8(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

void iAP2LinkSignalSendBuffCB(uint64_t a1)
{
}

uint64_t iAP2LinkRunLoopGetBuffSize(unsigned int a1)
{
  return iAP2LinkGetBuffSize(a1) + 96;
}

uint64_t iAP2LinkRunLoopCreateDevice( __int128 *a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5, __int16 a6, uint64_t a7)
{
  return iAP2LinkRunLoopCreate(1, a2, a3, a1, a4, a5, a6, a7);
}

uint64_t iAP2LinkRunLoopCreate( int a1, uint64_t a2, unsigned int a3, __int128 *a4, int a5, unsigned int a6, __int16 a7, uint64_t a8)
{
  if (!a8) {
    iAP2LinkRunLoopCreate_cold_1();
  }
  *(_OWORD *)a8 = 0u;
  *(_OWORD *)(a8 + 16) = 0u;
  *(_OWORD *)(a8 + 64) = 0u;
  *(_OWORD *)(a8 + 80) = 0u;
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)(a8 + 4_Block_object_dispose(va, 8) = 0u;
  *(void *)a8 = a8;
  uint64_t v10 = a8 + 96;
  *(void *)(a8 + 16) = a2;
  *(void *)(a8 + 24) = iAP2LinkCreate(a1, a8, a3, a4, a5, a6, a7, (char *)(a8 + 96));
  unsigned int BuffSize = iAP2LinkGetBuffSize(a6);
  uint64_t v12 = *(void *)(a8 + 24);
  if (!v12) {
    iAP2LinkRunLoopCreate_cold_2();
  }
  *(void *)(a8 + _Block_object_dispose(va, 8) = v10 + BuffSize;
  iAP2LinkSetUseiAP2LinkRunLoop(v12);
  iAP2LinkStart(*(void *)(a8 + 24));
  platform_sleepAssertion_createForApplePencil(a8);
  return a8;
}

void iAP2LinkRunLoopShuttingDown(uint64_t a1)
{
  if (a1)
  {
    *(_BYTE *)(a1 + 44) = 1;
    iAP2LinkShuttingDown(*(void *)(a1 + 24));
  }

void iAP2LinkRunLoopDelete(uint64_t a1)
{
  if ((_iAP2LogEnableMask & 2) != 0)
  {
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects < 20;
    }
    else {
      BOOL v2 = 1;
    }
    if (v2)
    {
      id v3 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      id v3 = *(os_log_s **)(gLogObjects + 152);
    }

    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      int v6 = 136315394;
      int v7 = "iAP2LinkRunLoopDelete";
      __int16 v8 = 1024;
      int v9 = 293;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "entering %s:%d", (uint8_t *)&v6, 0x12u);
    }
  }

  if (a1)
  {
    *(_BYTE *)(a1 + 44) = 1;
    platform_sleepAssertion_createForApplePencil(a1);
    iAP2LinkDelete(*(void *)(a1 + 24));
    *(void *)(a1 + 24) = 0LL;
  }

  else if ((_iAP2LogEnableMask & 1) != 0)
  {
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 20;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      BOOL v5 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      BOOL v5 = *(os_log_s **)(gLogObjects + 152);
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315394;
      int v7 = "iAP2LinkRunLoopDelete";
      __int16 v8 = 1024;
      int v9 = 303;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "ERROR: %s:%d NULL linkRunLoop!",  (uint8_t *)&v6,  0x12u);
    }
  }

uint64_t iAP2LinkRunLoopRunOnce(uint64_t result, uint64_t *a2, _BYTE *a3)
{
  if (!result) {
    return result;
  }
  uint64_t v3 = result;
  if (*(_BYTE *)(result + 44)) {
    return 0LL;
  }
  __int16 ResetEventMask = iAP2LinkRunLoopGetResetEventMask(result);
  uint64_t v7 = *(void *)(v3 + 24);
  if (!v7) {
    iAP2LinkRunLoopRunOnce_cold_1();
  }
  if ((ResetEventMask & 1) != 0)
  {
    iAP2LinkAttached(v7);
    if ((ResetEventMask & 2) == 0)
    {
LABEL_7:
      if ((ResetEventMask & 4) == 0) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
  }

  else if ((ResetEventMask & 2) == 0)
  {
    goto LABEL_7;
  }

  iAP2LinkDetached(*(void *)(v3 + 24));
  if ((ResetEventMask & 4) == 0)
  {
LABEL_8:
    if ((ResetEventMask & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_14;
  }

void iAP2LinkRunLoopTimeout(uint64_t a1, uint64_t a2, int a3)
{
  if (a1 && !*(_BYTE *)(a1 + 44))
  {
    if (a3 > 12)
    {
      if (a3 == 13)
      {
        int v4 = 32;
      }

      else
      {
        if (a3 != 26) {
          return;
        }
        int v4 = 64;
      }
    }

    else if (a3 == 11)
    {
      int v4 = 128;
    }

    else
    {
      if (a3 != 12) {
        return;
      }
      int v4 = 16;
    }

    iAP2LinkRunLoopSetEventMaskBit(a1, v4);
    iAP2LinkRunLoopSignal(a1, 0LL, 0LL);
  }

void iAP2LinkRunLoopAttached(uint64_t a1)
{
  if (a1)
  {
    iAP2LinkRunLoopSetEventMaskBit(a1, 1);
    iAP2LinkRunLoopSignal(a1, 0LL, 0LL);
  }

void iAP2LinkRunLoopDetached(uint64_t a1)
{
  if (a1)
  {
    iAP2LinkRunLoopSetEventMaskBit(a1, 2);
    iAP2LinkRunLoopSignal(a1, 0LL, 0LL);
  }

uint64_t iAP2LinkRunLoopHandleSuspend(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    iAP2LinkRunLoopSetEventMaskBit(result, 4);
    return iAP2LinkRunLoopRunOnce(v1, 0LL, 0LL);
  }

  return result;
}

uint64_t iAP2LinkRunLoopHandleResume(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    iAP2LinkRunLoopSetEventMaskBit(result, 8);
    return iAP2LinkRunLoopRunOnce(v1, 0LL, 0LL);
  }

  return result;
}

void iAP2LinkRunLoopHandleReadyPacket(uint64_t a1, uint64_t *a2)
{
  if (a1)
  {
    if (!*(_BYTE *)(a1 + 44))
    {
      iAP2PacketRetain((uint64_t)a2);
      iAP2LinkRunLoopSignal(a1, a2, 0LL);
    }
  }

BOOL iAP2LinkRunLoopQueueSendDataWithSentCallback( uint64_t a1, char *a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t), unsigned __int8 a9)
{
  if (a1 && !*(_BYTE *)(a1 + 44)) {
    return iAP2LinkQueueSendDataWithSentCallback(*(void *)(a1 + 24), a2, a3, a4, a5, a6, a7, a8, a9);
  }
  if ((_iAP2LogEnableMask & 1) != 0)
  {
    if (gLogObjects) {
      BOOL v9 = gNumLogObjects < 20;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      unsigned int v11 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      unsigned int v11 = *(os_log_s **)(gLogObjects + 152);
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 136315394;
      BOOL v13 = "iAP2LinkRunLoopQueueSendDataWithSentCallback";
      __int16 v14 = 1024;
      int v15 = 809;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "ERROR: %s:%d NULL linkRunLoop!",  (uint8_t *)&v12,  0x12u);
    }
  }

  return 0LL;
}

BOOL _iAP2TimeCallbackAfter(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v6 = *(void *)(*(void *)(iAP2TimeGetContext(a1) + 176) + 16LL);
    uint64_t v7 = (dispatch_source_s *)*(id *)(a1 + 24);
    unsigned int v8 = v7;
    if (!v7)
    {
      if (gLogObjects) {
        BOOL v9 = gNumLogObjects < 20;
      }
      else {
        BOOL v9 = 1;
      }
      if (v9)
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        unsigned int v11 = (os_log_s *)&_os_log_default;
        id v10 = &_os_log_default;
      }

      else
      {
        unsigned int v11 = (os_log_s *)*(id *)(gLogObjects + 152);
      }

      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "iAP2 Link Timer doesn't exist, creating a new one...",  buf,  2u);
      }

      unsigned int v8 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  *(dispatch_queue_t *)(v6 + 24));
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472LL;
      handler[2] = ___iAP2TimeCallbackAfter_block_invoke;
      handler[3] = &__block_descriptor_56_e5_v8__0l;
      handler[4] = v6;
      handler[5] = a3;
      handler[6] = a1;
      dispatch_source_set_event_handler(v8, handler);
    }

    if (gLogObjects) {
      BOOL v12 = gNumLogObjects < 20;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int16 v14 = (os_log_s *)&_os_log_default;
      id v13 = &_os_log_default;
    }

    else
    {
      __int16 v14 = (os_log_s *)*(id *)(gLogObjects + 152);
    }

    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      unsigned int v20 = a2;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Setting iAP2 Link Timer for %ums...", buf, 8u);
    }

    dispatch_time_t v15 = dispatch_time(0LL, 1000000LL * a2);
    dispatch_source_set_timer(v8, v15, 0xFFFFFFFFFFFFFFFFLL, 0LL);
    if (!v7)
    {
      uint64_t v16 = v8;
      *(void *)(a1 + 24) = v16;
      dispatch_resume(v16);
    }
  }

  return a1 != 0;
}

uint64_t ___iAP2TimeCallbackAfter_block_invoke(void *a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 20;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v4 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  else
  {
    int v4 = (os_log_s *)*(id *)(gLogObjects + 152);
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = a1[4];
    int v10 = 134217984;
    uint64_t v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "iAP2 Link Timer event handler fired! pEndpoint %p",  (uint8_t *)&v10,  0xCu);
  }

  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))a1[5];
  uint64_t v6 = a1[6];
  uint64_t CurTimeMs = iAP2TimeGetCurTimeMs();
  return v7(v6, CurTimeMs);
}

void _iAP2TimeCancelCallback(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(dispatch_source_s **)(a1 + 24);
    if (v1) {
      dispatch_source_set_timer(v1, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
    }
  }

void _iAP2TimeCleanupCallback(uint64_t a1)
{
  if (a1)
  {
    BOOL v2 = *(dispatch_source_s **)(a1 + 24);
    if (v2)
    {
      id v3 = v2;
      dispatch_source_cancel(v2);
      BOOL v2 = v3;
      *(void *)(a1 + 24) = 0LL;
    }
  }

uint64_t iap2_navigation_startRouteGuidanceHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    id v3 = *(os_log_s **)(gLogObjects + 368);
  }

  else
  {
    id v3 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v4 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v4 = 0LL;
    }
    *(_DWORD *)buf = 138412290;
    *(void *)uint64_t v50 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "iAP2Navigation StartRouteGuidance Handler %@",  buf,  0xCu);
  }

  uint64_t v5 = 0LL;
  if (a1 && a2)
  {
    unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0LL);
    int v48 = 0;
    CFArrayRef theArray = CFArrayCreateMutable(kCFAllocatorDefault, 1LL, &kCFTypeArrayCallBacks);
    if (FirstParam)
    {
      int v47 = 0;
      uint64_t v46 = 0LL;
      char v7 = 0;
      char v8 = 0;
      char v9 = 0;
      while (1)
      {
        int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
        switch(ParamID)
        {
          case 0:
            *(_WORD *)buf = -21846;
            *(_WORD *)buf = iAP2MsgGetDataAsU16(FirstParam, &v48);
            if (!v48)
            {
              CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, buf);
              CFArrayAppendValue(theArray, v11);
              if (v11) {
                CFRelease(v11);
              }
              ++v47;
              goto LABEL_42;
            }

            uint64_t v33 = (os_log_s *)logObjectForModule_12();
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
              iap2_navigation_startRouteGuidanceHandler_cold_4(a2);
            }
            goto LABEL_100;
          case 1:
            if (!iAP2MsgIsDataVoid(FirstParam))
            {
              id v34 = (os_log_s *)logObjectForModule_12();
              if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
                iap2_navigation_startRouteGuidanceHandler_cold_6(a2);
              }
              goto LABEL_100;
            }

            if ((v9 & 1) != 0)
            {
              uint64_t v39 = (os_log_s *)logObjectForModule_12();
              if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG)) {
                iap2_navigation_startRouteGuidanceHandler_cold_5(a2);
              }
              goto LABEL_100;
            }

            char v9 = 1;
            goto LABEL_42;
          case 2:
            if (!iAP2MsgIsDataVoid(FirstParam))
            {
              uint64_t v35 = (os_log_s *)logObjectForModule_12();
              if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG)) {
                iap2_navigation_startRouteGuidanceHandler_cold_8(a2);
              }
              goto LABEL_100;
            }

            if ((v8 & 1) != 0)
            {
              uint64_t v40 = (os_log_s *)logObjectForModule_12();
              if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG)) {
                iap2_navigation_startRouteGuidanceHandler_cold_7(a2);
              }
              goto LABEL_100;
            }

            char v8 = 1;
            goto LABEL_42;
          case 3:
            if (!iAP2MsgIsDataVoid(FirstParam))
            {
              unsigned int v36 = (os_log_s *)logObjectForModule_12();
              if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG)) {
                iap2_navigation_startRouteGuidanceHandler_cold_10(a2);
              }
              goto LABEL_100;
            }

            if ((v7 & 1) != 0)
            {
              int v41 = (os_log_s *)logObjectForModule_12();
              if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG)) {
                iap2_navigation_startRouteGuidanceHandler_cold_9(a2);
              }
              goto LABEL_100;
            }

            char v7 = 1;
            goto LABEL_42;
          case 4:
            if (!iAP2MsgIsDataVoid(FirstParam))
            {
              BOOL v37 = (os_log_s *)logObjectForModule_12();
              if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG)) {
                iap2_navigation_startRouteGuidanceHandler_cold_12(a2);
              }
              goto LABEL_100;
            }

            if ((v46 & 1) != 0)
            {
              BOOL v42 = (os_log_s *)logObjectForModule_12();
              if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG)) {
                iap2_navigation_startRouteGuidanceHandler_cold_11(a2);
              }
              goto LABEL_100;
            }

            LOBYTE(v46) = 1;
            goto LABEL_42;
          case 5:
            if (!iAP2MsgIsDataVoid(FirstParam))
            {
              unsigned int v38 = (os_log_s *)logObjectForModule_12();
              if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG)) {
                iap2_navigation_startRouteGuidanceHandler_cold_14(a2);
              }
              goto LABEL_100;
            }

            if ((v46 & 0x100000000LL) != 0)
            {
              BOOL v43 = (os_log_s *)logObjectForModule_12();
              if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG)) {
                iap2_navigation_startRouteGuidanceHandler_cold_13(a2);
              }
              goto LABEL_100;
            }

            BYTE4(v46) = 1;
LABEL_35:
            uint64_t v12 = gLogObjects;
            int v13 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 47)
            {
              __int16 v14 = *(os_log_s **)(gLogObjects + 368);
            }

            else
            {
              __int16 v14 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)uint64_t v50 = v12;
                *(_WORD *)&v50[8] = 1024;
                int v51 = v13;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              }
            }

            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
            {
              int MsgID = iAP2MsgGetMsgID(a2);
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)uint64_t v50 = ParamID;
              *(_WORD *)&v50[4] = 1024;
              *(_DWORD *)&v50[6] = MsgID;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param",  buf,  0xEu);
            }

void *logObjectForModule_12()
{
  if (gLogObjects && gNumLogObjects >= 47) {
    return *(void **)(gLogObjects + 368);
  }
  BOOL v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

uint64_t iap2_navigation_stopRouteGuidanceHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    uint64_t v4 = *(os_log_s **)(gLogObjects + 368);
  }

  else
  {
    uint64_t v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v5 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v5 = 0LL;
    }
    *(_DWORD *)buf = 138412290;
    *(void *)id v32 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "iAP2Navigation StopRouteGuidance Handler %@",  buf,  0xCu);
  }

  uint64_t v6 = 0LL;
  if (!a1 || !a2) {
    return v6;
  }
  uint64_t v29 = a1;
  unint64_t FirstParam = (unsigned __int16 *)iAP2MsgGetFirstParam(a2, 0LL);
  int v30 = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 1LL, &kCFTypeArrayCallBacks);
  for (i = 0; FirstParam; unint64_t FirstParam = iAP2MsgGetNextParam(a2, 0LL, FirstParam))
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
    if (ParamID)
    {
      int v11 = ParamID;
      uint64_t v12 = gLogObjects;
      int v13 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 47)
      {
        __int16 v14 = *(os_log_s **)(gLogObjects + 368);
      }

      else
      {
        __int16 v14 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)id v32 = v12;
          *(_WORD *)&v32[8] = 1024;
          int v33 = v13;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          __int16 v14 = (os_log_s *)&_os_log_default;
        }
      }

      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        int MsgID = iAP2MsgGetMsgID(a2);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)id v32 = v11;
        *(_WORD *)&v32[4] = 1024;
        *(_DWORD *)&v32[6] = MsgID;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param",  buf,  0xEu);
      }
    }

    else
    {
      *(_WORD *)buf = -21846;
      *(_WORD *)buf = iAP2MsgGetDataAsU16(FirstParam, &v30);
      if (v30)
      {
        uint64_t v28 = (os_log_s *)logObjectForModule_12();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
          iap2_navigation_startRouteGuidanceHandler_cold_4(a2);
        }
LABEL_51:
        uint64_t v6 = 0LL;
        if (!Mutable) {
          return v6;
        }
LABEL_47:
        CFRelease(Mutable);
        return v6;
      }

      CFNumberRef v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, buf);
      CFArrayAppendValue(Mutable, v15);
      if (v15) {
        CFRelease(v15);
      }
      ++i;
    }
  }

  if (gLogObjects && gNumLogObjects >= 47)
  {
    uint64_t v17 = *(os_log_s **)(gLogObjects + 368);
  }

  else
  {
    uint64_t v17 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    uint64_t v18 = *(void *)(v29 + 8);
    *(_DWORD *)buf = 138412290;
    *(void *)id v32 = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "iAP2Navigation StopRouteGuidance: %@", buf, 0xCu);
  }

  if (!iap2_feature_getFeature(v29, 0x11u)) {
    goto LABEL_51;
  }
  buf[0] = 0;
  if (gLogObjects && gNumLogObjects >= 47)
  {
    BOOL v19 = *(os_log_s **)(gLogObjects + 368);
  }

  else
  {
    BOOL v19 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
    iap2_navigation_stopRouteGuidanceHandler_cold_1((uint64_t)Mutable, v19, v20, v21, v22, v23, v24, v25);
  }
  if (i <= 0) {
    uint64_t v26 = 0LL;
  }
  else {
    uint64_t v26 = (uint64_t)Mutable;
  }
  platform_navigation_stopRouteGuidance(*(void *)(v29 + 8), v26);
  uint64_t v6 = 1LL;
  if (Mutable) {
    goto LABEL_47;
  }
  return v6;
}

uint64_t iap2_navigation_roadObjectDetectionUpdateHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    uint64_t v4 = *(os_log_s **)(gLogObjects + 368);
  }

  else
  {
    uint64_t v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v5 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v5 = 0LL;
    }
    *(_DWORD *)buf = 138412290;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "iAP2Navigation RoadObjectDetectionUpdate Handler %@",  buf,  0xCu);
  }

  uint64_t v6 = 0LL;
  char v7 = &off_10019D000;
  if (!a1 || !a2) {
    goto LABEL_85;
  }
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
  int v55 = 0;
  if (!FirstParam)
  {
    ObjectDetectionInfoDict = 0LL;
LABEL_66:
    if (gLogObjects && gNumLogObjects >= 47)
    {
      int v33 = *(os_log_s **)(gLogObjects + 368);
      char v7 = &off_10019D000;
    }

    else
    {
      int v33 = (os_log_s *)&_os_log_default;
      char v7 = &off_10019D000;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
      iap2_navigation_roadObjectDetectionUpdateHandler_cold_3(a1, v33, v34, v35, v36, v37, v38, v39);
    }
    if (!iap2_feature_getFeature(a1, 0x11u)) {
      goto LABEL_113;
    }
    buf[0] = 0;
    if (!iap2_identification_checkRequiredMsgIDs(a1, (uint64_t)&gskMsgNavigationMainList, 5, buf)
      || !ObjectDetectionInfoDict)
    {
      goto LABEL_113;
    }

    unsigned int Item = platform_navigation_objectDetectionInfoGetItem(ObjectDetectionInfoDict, 0LL);
    if (gLogObjects && gNumLogObjects >= 47)
    {
      int v41 = *(os_log_s **)(gLogObjects + 368);
    }

    else
    {
      int v41 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
    {
      uint64_t v42 = *(void *)(a1 + 8);
      *(_DWORD *)buf = 138412802;
      *(void *)&uint8_t buf[4] = v42;
      *(_WORD *)&uint8_t buf[12] = 2112;
      uint64_t v57 = Item;
      __int16 v58 = 2112;
      __int16 v59 = ObjectDetectionInfoDict;
      _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_INFO,  "iAP2Navigation RoadObjectDetectionUpdate: %@ componentIdList: %@ updateInfo: %@",  buf,  0x20u);
    }

    platform_navigation_objectDetectionUpdateInfo(*(void *)(a1 + 8), 0LL, (uint64_t)ObjectDetectionInfoDict);
    uint64_t v43 = 1LL;
    goto LABEL_84;
  }

  NextParam = (unsigned __int16 *)FirstParam;
  ObjectDetectionInfoDict = 0LL;
  while (2)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
    uint64_t v12 = gLogObjects;
    int v13 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 47)
    {
      __int16 v14 = *(os_log_s **)(gLogObjects + 368);
    }

    else
    {
      __int16 v14 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = v12;
        *(_WORD *)&uint8_t buf[12] = 1024;
        LODWORD(v57) = v13;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
        __int16 v14 = (os_log_s *)&_os_log_default;
      }
    }

    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v31 = *(void *)(a1 + 8);
      *(_DWORD *)buf = 138412546;
      *(void *)&uint8_t buf[4] = v31;
      *(_WORD *)&uint8_t buf[12] = 1024;
      LODWORD(v57) = ParamID;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "iAP2Navigation RoadObjectDetectionUpdate Handler %@, process paramID=%d",  buf,  0x12u);
    }

    switch(ParamID)
    {
      case 0:
        __int16 DataAsU16 = iAP2MsgGetDataAsU16(NextParam, &v55);
        if (!v55)
        {
          __int16 v16 = DataAsU16;
          if (!ObjectDetectionInfoDict) {
            ObjectDetectionInfoDict = platform_navigation_createObjectDetectionInfoDict();
          }
          platform_navigation_objectDetectionInfoAddComponentID(ObjectDetectionInfoDict, v16);
          goto LABEL_63;
        }

        int v47 = (os_log_s *)logObjectForModule_12();
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG)) {
          iap2_navigation_startRouteGuidanceHandler_cold_4(a2);
        }
        goto LABEL_112;
      case 1:
        unint64_t DataAsU64 = iAP2MsgGetDataAsU64(NextParam, &v55);
        if (v55)
        {
          int v48 = (os_log_s *)logObjectForModule_12();
          char v7 = &off_10019D000;
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG)) {
            iap2_navigation_startRouteGuidanceHandler_cold_6(a2);
          }
          goto LABEL_113;
        }

        uint64_t v21 = DataAsU64;
        if (platform_navigation_objectDetectionInfoGetItem(ObjectDetectionInfoDict, 1LL)) {
          goto LABEL_112;
        }
        if (!ObjectDetectionInfoDict) {
          ObjectDetectionInfoDict = platform_navigation_createObjectDetectionInfoDict();
        }
        platform_navigation_objectDetectionInfoSetTimestamp(ObjectDetectionInfoDict, v21);
        goto LABEL_63;
      case 2:
        int DataAsU32 = iAP2MsgGetDataAsU32(NextParam, &v55);
        if (v55)
        {
          uint64_t v49 = (os_log_s *)logObjectForModule_12();
          char v7 = &off_10019D000;
          if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG)) {
            iap2_navigation_startRouteGuidanceHandler_cold_8(a2);
          }
          goto LABEL_113;
        }

        int v23 = DataAsU32;
        if (platform_navigation_objectDetectionInfoGetItem(ObjectDetectionInfoDict, 2LL)) {
          goto LABEL_112;
        }
        if (!ObjectDetectionInfoDict) {
          ObjectDetectionInfoDict = platform_navigation_createObjectDetectionInfoDict();
        }
        platform_navigation_objectDetectionInfoSetEgoSpeed(ObjectDetectionInfoDict, v23);
        goto LABEL_63;
      case 3:
        *(void *)buf = 0xAAAAAAAAAAAAAAAALL;
        int DataAsArrayI32 = iAP2MsgGetDataAsArrayI32(NextParam, &v55, buf, 2);
        if (v55)
        {
          uint64_t v50 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_112;
          }
        }

        else
        {
          if (DataAsArrayI32 == 2)
          {
            if (platform_navigation_objectDetectionInfoGetItem(ObjectDetectionInfoDict, 3LL)) {
              goto LABEL_112;
            }
            int v25 = *(_DWORD *)buf;
            int v26 = *(_DWORD *)&buf[4];
            if (!ObjectDetectionInfoDict) {
              ObjectDetectionInfoDict = platform_navigation_createObjectDetectionInfoDict();
            }
            platform_navigation_objectDetectionInfoSetEgoYawRate(ObjectDetectionInfoDict, (float)v25 / (float)v26);
            goto LABEL_63;
          }

          uint64_t v54 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_112;
          }
        }

        iap2_navigation_startRouteGuidanceHandler_cold_10(a2);
        goto LABEL_112;
      case 4:
        uint64_t v27 = _parseRoadSignParameter(a1, a2, NextParam, &v55);
        uint64_t v28 = v27;
        if (v55)
        {
          CFRelease(v27);
          int v51 = (os_log_s *)logObjectForModule_12();
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG)) {
            iap2_navigation_startRouteGuidanceHandler_cold_12(a2);
          }
          goto LABEL_112;
        }

        if (!ObjectDetectionInfoDict) {
          ObjectDetectionInfoDict = platform_navigation_createObjectDetectionInfoDict();
        }
        platform_navigation_objectDetectionInfoAddRoadSign(ObjectDetectionInfoDict, v28);
        goto LABEL_58;
      case 5:
        uint64_t v29 = _parseRoadLaneParameter(a1, a2, NextParam, &v55);
        uint64_t v28 = v29;
        if (v55)
        {
          CFRelease(v29);
          uint64_t v52 = (os_log_s *)logObjectForModule_12();
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG)) {
            iap2_navigation_startRouteGuidanceHandler_cold_14(a2);
          }
          goto LABEL_112;
        }

        if (!ObjectDetectionInfoDict) {
          ObjectDetectionInfoDict = platform_navigation_createObjectDetectionInfoDict();
        }
        platform_navigation_objectDetectionInfoAddRoadLane(ObjectDetectionInfoDict, v28);
        goto LABEL_58;
      case 6:
        int v30 = _parseRoadObjectParameter(a1, a2, NextParam, &v55);
        uint64_t v28 = v30;
        if (!v55)
        {
          if (!ObjectDetectionInfoDict) {
            ObjectDetectionInfoDict = platform_navigation_createObjectDetectionInfoDict();
          }
          platform_navigation_objectDetectionInfoAddRoadObject(ObjectDetectionInfoDict, v28);
LABEL_58:
          CFRelease(v28);
LABEL_63:
          NextParam = iAP2MsgGetNextParam(a2, 0LL, NextParam);
          if (!NextParam) {
            goto LABEL_66;
          }
          continue;
        }

        CFRelease(v30);
        uint64_t v53 = (os_log_s *)logObjectForModule_12();
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG)) {
          iap2_navigation_roadObjectDetectionUpdateHandler_cold_12(a2);
        }
LABEL_112:
        char v7 = &off_10019D000;
LABEL_113:
        uint64_t v43 = 0LL;
        uint64_t v6 = 0LL;
        if (ObjectDetectionInfoDict)
        {
LABEL_84:
          CFRelease(ObjectDetectionInfoDict);
          uint64_t v6 = v43;
        }

LABEL_85:
        if (gLogObjects && gNumLogObjects >= 47)
        {
          uint64_t v44 = *(os_log_s **)(gLogObjects + 368);
        }

        else
        {
          uint64_t v44 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
        {
          if (a1) {
            uint64_t v45 = *(void *)(a1 + 8);
          }
          else {
            uint64_t v45 = 0LL;
          }
          *(_DWORD *)buf = *((void *)v7 + 327);
          *(void *)&uint8_t buf[4] = v45;
          *(_WORD *)&uint8_t buf[12] = 1024;
          LODWORD(v57) = v6;
          _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_INFO,  "iAP2Navigation RoadObjectDetectionUpdate Handler %@, EXIT result=%d",  buf,  0x12u);
        }

        return v6;
      default:
        uint64_t v17 = gLogObjects;
        int v18 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 47)
        {
          BOOL v19 = *(os_log_s **)(gLogObjects + 368);
        }

        else
        {
          BOOL v19 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)&uint8_t buf[4] = v17;
            *(_WORD *)&uint8_t buf[12] = 1024;
            LODWORD(v57) = v18;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            BOOL v19 = (os_log_s *)&_os_log_default;
          }
        }

        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          int MsgID = iAP2MsgGetMsgID(a2);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = ParamID;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = MsgID;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param",  buf,  0xEu);
        }

        goto LABEL_63;
    }
  }

        int ParamID = 0;
        goto LABEL_86;
      }
    }

    else
    {
      uint64_t v24 = 0LL;
      if (a2) {
        goto LABEL_81;
      }
    }

    int MsgID = 0;
    if (a3) {
      goto LABEL_82;
    }
    goto LABEL_85;
  }

unsigned __int16 *_parseRoadSignParameter(uint64_t a1, uint64_t a2, unsigned __int16 *a3, int *a4)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    char v8 = *(os_log_s **)(gLogObjects + 368);
  }

  else
  {
    char v8 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    if (a1)
    {
      uint64_t v22 = *(void *)(a1 + 8);
      if (a2)
      {
LABEL_58:
        int MsgID = iAP2MsgGetMsgID(a2);
        if (a3)
        {
LABEL_59:
          int ParamID = iAP2MsgGetParamID((uint64_t)a3);
LABEL_63:
          int valuePtr = 138412802;
          uint64_t v46 = v22;
          __int16 v47 = 1024;
          int v48 = MsgID;
          __int16 v49 = 1024;
          int v50 = ParamID;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "_parseRoadSignParameter: %@, message 0x%04X, param 0x%04X",  (uint8_t *)&valuePtr,  0x18u);
          goto LABEL_7;
        }

LABEL_62:
        int ParamID = 0;
        goto LABEL_63;
      }
    }

    else
    {
      uint64_t v22 = 0LL;
      if (a2) {
        goto LABEL_58;
      }
    }

    int MsgID = 0;
    if (a3) {
      goto LABEL_59;
    }
    goto LABEL_62;
  }

    if (gLogObjects && gNumLogObjects >= 32)
    {
      int v23 = *(os_log_s **)(gLogObjects + 248);
    }

    else
    {
      int v23 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = iAP2MsgGetMsgID(a1);
      int v25 = iAP2MsgGetMsgLen(a1);
      label = dispatch_queue_get_label(0LL);
      CFNumberRef v38 = 67109634;
      *(_DWORD *)uint64_t v39 = v24;
      *(_WORD *)&v39[4] = 1024;
      *(_DWORD *)&v39[6] = v25;
      *(_WORD *)CFNumberRef v40 = 2080;
      *(void *)&v40[2] = label;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "iAP2 MediaLibrary Msg Cleanup callback deleting msg! needDelete=True msgID=%xh msgLen=%d currentDispatchQueue: %s",  (uint8_t *)&v38,  0x18u);
    }

    uint64_t v27 = *(void **)(a1 + 48);
    if (v27)
    {
      free(v27);
      *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
    }

    uint64_t v28 = *(void **)(a1 + 24);
    if (v28) {
      free(v28);
    }
    free((void *)a1);
  }

      platform_mediaLibrary_decrementUserCount();
      CFNumberRef v40 = (void *)v8[5];
      if (v40)
      {
        free(v40);
        v8[5] = 0LL;
      }

      if (*v41)
      {
        free(*v41);
        *CFStringRef v41 = 0LL;
      }

      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

                      int v124 = -1;
                      id v3 = v120;
                      goto LABEL_63;
                    }

                    int v124 = -1;
                    __int16 v111 = logObjectForModule_29();
                    __int128 v110 = (os_log_s *)objc_claimAutoreleasedReturnValue(v111);
                    if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR)) {
                      mfi4Auth_protocol_handle_AuthCert_cold_5();
                    }
                  }

                  else
                  {
                    int v124 = -1;
                    id v109 = logObjectForModule_29();
                    __int128 v110 = (os_log_s *)objc_claimAutoreleasedReturnValue(v109);
                    if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR)) {
                      mfi4Auth_protocol_handle_AuthCert_cold_8();
                    }
                  }

                  uint64_t v29 = 0LL;
                  goto LABEL_180;
                }

                int v124 = -1;
                char v108 = logObjectForModule_29();
                id v107 = (os_log_s *)objc_claimAutoreleasedReturnValue(v108);
                if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR)) {
                  mfi4Auth_protocol_handle_AuthCert_cold_5();
                }
              }

              else
              {
                int v124 = -1;
                id v106 = logObjectForModule_29();
                id v107 = (os_log_s *)objc_claimAutoreleasedReturnValue(v106);
                if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR)) {
                  mfi4Auth_protocol_handle_AuthCert_cold_6();
                }
              }

              goto LABEL_179;
            default:
              if (DataAsU8) {
                goto LABEL_118;
              }
              int v20 = 0LL;
              uint64_t v29 = 0LL;
              int v30 = 0LL;
              goto LABEL_132;
          }
        }

        __size = v7;
        int v25 = (UInt8 *)malloc(v7);
        int v20 = v25;
        if (v25)
        {
          memcpy(v25, DataAsData, v7);
          uint64_t v22 = *(const void **)v120;
          uint64_t v21 = "MFi30Accessory-Certificate";
          uint64_t v24 = v20;
          int v23 = v7;
          goto LABEL_38;
        }
      }

      uint64_t v29 = 0LL;
      int v30 = 0LL;
      goto LABEL_62;
    }

    int ParamID = iAP2MsgGetParamID((uint64_t)FirstParam);
    if (ParamID != 2) {
      break;
    }
    int DataAsArrayU8 = iAP2MsgGetDataAsArrayU8(FirstParam, &v124, v9, 16);
    if (v124)
    {
      id v96 = logObjectForModule_29();
      id v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(v96);
      if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR)) {
        goto LABEL_172;
      }
      goto LABEL_177;
    }

    if (DataAsArrayU8 != 16)
    {
      int v124 = -1;
      id v99 = logObjectForModule_29();
      id v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(v99);
      if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_handle_AuthCert_cold_18();
      }
      goto LABEL_177;
    }

    v8 |= 4u;
LABEL_25:
    unint64_t FirstParam = iAP2MsgGetNextParamWithError(a2, 0LL, FirstParam, &v123);
    if (v123)
    {
LABEL_170:
      int v30 = 0LL;
      uint64_t v29 = 0LL;
      int v20 = 0LL;
      int v124 = -1;
      goto LABEL_180;
    }
  }

  if (ParamID != 1)
  {
    if (!ParamID)
    {
      int DataAsU8 = iAP2MsgGetDataAsU8(FirstParam, &v124);
      uint64_t v12 = gLogObjects;
      int v13 = gNumLogObjects;
      if (gLogObjects && gNumLogObjects >= 56)
      {
        __int16 v14 = (os_log_s *)*(id *)(gLogObjects + 440);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)&uint8_t buf[4] = v12;
          *(_WORD *)&uint8_t buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = v13;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
        }

        uint64_t v17 = &_os_log_default;
        __int16 v14 = (os_log_s *)&_os_log_default;
      }

      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = DataAsU8;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "mfi4Auth_protocol_handle_AuthCert: certType:%d",  buf,  8u);
      }

      if (v124) {
        goto LABEL_178;
      }
      if (DataAsU8 >= 0xD) {
        goto LABEL_170;
      }
      v8 |= 1u;
    }

    goto LABEL_25;
  }

  uint64_t DataAsData = (const void *)iAP2MsgGetDataAsData((uint64_t)FirstParam, &v124);
  unsigned int ParamValueLen = iAP2MsgGetParamValueLen(FirstParam);
  if (!v124)
  {
    char v7 = ParamValueLen;
    v8 |= 2u;
    goto LABEL_25;
  }

  id v98 = logObjectForModule_29();
  id v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(v98);
  if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR)) {
LABEL_172:
  }
    mfi4Auth_protocol_handle_AuthCert_cold_17();
LABEL_177:

LABEL_178:
  int v30 = 0LL;
LABEL_179:
  uint64_t v29 = 0LL;
  int v20 = 0LL;
LABEL_180:
  id v3 = v120;
LABEL_181:
  unsigned int inited = v124;
LABEL_182:
  if (inited) {
LABEL_63:
  }
    mfi4Auth_protocol_handle_AuthState(v3, 1);
LABEL_160:
  if (v20) {
    CFRelease(v20);
  }
  if (v29) {
    CFRelease(v29);
  }
  if (v30) {
    CFRelease(v30);
  }
  return v124;
}

  int v18 = (v43 | v16) == 0;
  if (v16) {
    goto LABEL_63;
  }
  return v18;
}

    __break(0x5513u);
  }

LABEL_55:
        *a4 = v10;
        return FirstParam;
      default:
        goto LABEL_38;
    }
  }

unsigned __int16 *_parseRoadLaneParameter(uint64_t a1, uint64_t a2, unsigned __int16 *a3, int *a4)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    char v8 = *(os_log_s **)(gLogObjects + 368);
  }

  else
  {
    char v8 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    if (a1)
    {
      uint64_t v24 = *(void *)(a1 + 8);
      if (a2)
      {
LABEL_81:
        int MsgID = iAP2MsgGetMsgID(a2);
        if (a3)
        {
LABEL_82:
          int ParamID = iAP2MsgGetParamID((uint64_t)a3);
LABEL_86:
          *(_DWORD *)int valuePtr = 138412802;
          *(void *)&valuePtr[4] = v24;
          __int16 v65 = 1024;
          int v66 = MsgID;
          __int16 v67 = 1024;
          int v68 = ParamID;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "_parseRoadLaneParameter: %@, message 0x%04X, param 0x%04X",  valuePtr,  0x18u);
          goto LABEL_7;
        }

LABEL_78:
        *a4 = v10;
        return FirstParam;
      case 9:
        *(void *)int valuePtr = 0xAAAAAAAAAAAAAAAALL;
        int v15 = iAP2MsgGetDataAsArrayI32(FirstParam, &v63, valuePtr, 2);
        if (v63)
        {
          uint64_t v29 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_133;
          }
        }

        else if (v15 == 2)
        {
          if (!v55)
          {
            float v62 = (float)*(int *)valuePtr / (float)*(int *)&valuePtr[4];
            CFNumberRef v55 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloatType, &v62);
            goto LABEL_53;
          }

          __int16 v49 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
          {
LABEL_133:
            a4 = v50;
            CFNumberRef v19 = v52;
            int v21 = 0;
            ObjectDetectionRoadSignDict = 0LL;
            int v22 = 0;
            unint64_t FirstParam = 0LL;
            if (v52)
            {
LABEL_56:
              CFRelease(v19);
              int v22 = v21;
              unint64_t FirstParam = (unsigned __int16 *)ObjectDetectionRoadSignDict;
            }

            goto LABEL_57;
          }
        }

        else
        {
          uint64_t v45 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_133;
          }
        }

        _parseRoadLaneParameter_cold_21();
        goto LABEL_133;
      default:
        goto LABEL_53;
    }
  }

unsigned __int16 *_parseRoadObjectParameter(uint64_t a1, uint64_t a2, unsigned __int16 *a3, int *a4)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    char v8 = *(os_log_s **)(gLogObjects + 368);
  }

  else
  {
    char v8 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    if (a1)
    {
      uint64_t v21 = *(void *)(a1 + 8);
      if (a2)
      {
LABEL_78:
        int MsgID = iAP2MsgGetMsgID(a2);
        if (a3)
        {
LABEL_79:
          int ParamID = iAP2MsgGetParamID((uint64_t)a3);
LABEL_83:
          int valuePtr = 138412802;
          uint64_t v58 = v21;
          __int16 v59 = 1024;
          int v60 = MsgID;
          __int16 v61 = 1024;
          int v62 = ParamID;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "_parseRoadObjectParameter: %@, message 0x%04X, param 0x%04X",  (uint8_t *)&valuePtr,  0x18u);
          goto LABEL_7;
        }

LABEL_82:
        int ParamID = 0;
        goto LABEL_83;
      }
    }

    else
    {
      uint64_t v21 = 0LL;
      if (a2) {
        goto LABEL_78;
      }
    }

    int MsgID = 0;
    if (a3) {
      goto LABEL_79;
    }
    goto LABEL_82;
  }

LABEL_75:
        *a4 = v10;
        return FirstParam;
      case 9:
        int valuePtr = -1431655766;
        int valuePtr = iAP2MsgGetDataAsU32(FirstParam, &v56);
        if (v56)
        {
          int v30 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_124;
          }
        }

        else
        {
          if (!v55)
          {
            CFNumberRef v55 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
            goto LABEL_50;
          }

          CFStringRef v41 = (os_log_s *)logObjectForModule_12();
          if (!os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
          {
LABEL_124:
            a4 = v44;
            CFNumberRef v16 = v46;
            int v18 = 0;
            ObjectDetectionRoadSignDict = 0LL;
            int v19 = 0;
            unint64_t FirstParam = 0LL;
            if (v46)
            {
LABEL_53:
              CFRelease(v16);
              int v19 = v18;
              unint64_t FirstParam = (unsigned __int16 *)ObjectDetectionRoadSignDict;
            }

            goto LABEL_54;
          }
        }

        _parseRoadLaneParameter_cold_21();
        goto LABEL_124;
      default:
        goto LABEL_50;
    }
  }
        }

        -[__objc2_prop_list unlock](p_inst_props[414], "unlock");
        uint64_t v45 = gLogObjects;
        CFNumberRef v46 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 8)
        {
          __int16 v47 = (os_log_s *)*(id *)(gLogObjects + 56);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)CFNumberRef v54 = v45;
            *(_WORD *)&v54[8] = 1024;
            *(_DWORD *)&void v54[10] = v46;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          }

          CFNumberRef v48 = &_os_log_default;
          __int16 v47 = (os_log_s *)&_os_log_default;
        }

        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = v49.n128_u32[0];
          *(_DWORD *)CFNumberRef v54 = v5;
          *(_WORD *)&v54[4] = 2112;
          *(void *)&v54[6] = a2;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEBUG,  "[#Device Notifications] Sending initial update for notification type: %{coreacc:ACCDeviceNotification_t}d to endpoint %@...",  buf,  0x12u);
        }

        _sendUpdateForUUID(v13, v5);
        uint64_t v5 = (v5 + 1);
      }

      while (v5 <= v51);
    }
  }

uint64_t iap2_navigation_routeGuidanceUpdateHandler(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = &startLogsNotificationObservers;
  uint64_t v5 = &startLogsNotificationObservers;
  if (gLogObjects && gNumLogObjects >= 47)
  {
    uint64_t v6 = *(os_log_s **)(gLogObjects + 368);
  }

  else
  {
    uint64_t v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      char v7 = (const char *)a1[1];
    }
    else {
      char v7 = 0LL;
    }
    *(_DWORD *)buf = 138412290;
    unint64_t v157 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "iAP2Navigation RouteGuidanceUpdate Handler %@",  buf,  0xCu);
  }

  if (!a1) {
    return 0LL;
  }
  uint64_t Feature = (_BYTE *)iap2_feature_getFeature((uint64_t)a1, 0x11u);
  if (gLogObjects && gNumLogObjects >= 47)
  {
    char v9 = *(os_log_s **)(gLogObjects + 368);
  }

  else
  {
    char v9 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    int v10 = "exists";
    int v11 = (const char *)a1[1];
    if (!Feature) {
      int v10 = "missing!!";
    }
    *(_DWORD *)buf = 138412546;
    unint64_t v157 = v11;
    __int16 v158 = 2080;
    *(void *)uint64_t v159 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "iAP2Navigation RouteGuidanceUpdate %@ navigation %s",  buf,  0x16u);
  }

  uint64_t result = 0LL;
  if (a2 && Feature)
  {
    if (*(_DWORD *)a2) {
      return 0LL;
    }
    if (gLogObjects) {
      BOOL v13 = gNumLogObjects <= 46;
    }
    else {
      BOOL v13 = 1;
    }
    int v14 = !v13;
    if (*(void *)(a2 + 16))
    {
      if (v14)
      {
        uint64_t v15 = *(os_log_s **)(gLogObjects + 368);
      }

      else
      {
        uint64_t v15 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = (const char *)a1[1];
        uint64_t v18 = *(void *)(a2 + 8);
        uint64_t v19 = *(void *)(a2 + 16);
        *(_DWORD *)buf = 138412802;
        unint64_t v157 = v17;
        __int16 v158 = 2112;
        *(void *)uint64_t v159 = v18;
        *(_WORD *)&v159[8] = 2112;
        *(void *)&v159[10] = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "iAP2Navigation RouteGuidanceUpdate %@, create msg, componentIDs=%@ updateInfo=%@",  buf,  0x20u);
      }

      uint64_t v20 = iAP2MsgInit((uint64_t)(a1 + 15), 20993, a1[24], 0xFFFF, 0LL, 0LL);
      uint64_t v21 = *(const __CFArray **)(a2 + 8);
      if (v21 && (CFIndex Count = CFArrayGetCount(v21), Count >= 1))
      {
        CFIndex v23 = Count;
        CFIndex v24 = 0LL;
        int v25 = 0;
        do
        {
          ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 8), v24);
          v25 += __addU16NumberParameterToMsg(v20, 0LL, 0, ValueAtIndex);
          ++v24;
        }

        while (v23 != v24);
      }

      else
      {
        int v25 = 0;
      }

      uint64_t v27 = *(const __CFDictionary **)(a2 + 16);
      id v28 = platform_navigation_routeGuidanceInfoKeyForType(1LL);
      uint64_t Value = (const __CFNumber *)CFDictionaryGetValue(v27, v28);
      LODWORD(v27) = __addEnumNumberParameterToMsg( v20,  0LL,  1,  Value,  (uint64_t (*)(void))_convertRouteGuidanceStateTypeForFunc);
      int v30 = *(const __CFDictionary **)(a2 + 16);
      id v31 = platform_navigation_routeGuidanceInfoKeyForType(2LL);
      id v32 = (const __CFNumber *)CFDictionaryGetValue(v30, v31);
      int v33 = v25
          + (_DWORD)v27
          + __addEnumNumberParameterToMsg( v20,  0LL,  2,  v32,  (uint64_t (*)(void))_convertManeuverStateTypeForFunc);
      uint64_t v34 = *(const __CFDictionary **)(a2 + 16);
      id v35 = platform_navigation_routeGuidanceInfoKeyForType(3LL);
      uint64_t v36 = (const __CFString *)CFDictionaryGetValue(v34, v35);
      BOOL v37 = v36 && iAP2MsgAddCFStringParam(v20, 0LL, 3, v36);
      int v38 = v33 + v37;
      uint64_t v39 = *(const __CFDictionary **)(a2 + 16);
      id v40 = platform_navigation_routeGuidanceInfoKeyForType(4LL);
      CFStringRef v41 = (const __CFString *)CFDictionaryGetValue(v39, v40);
      BOOL v42 = v41 && iAP2MsgAddCFStringParam(v20, 0LL, 4, v41);
      CFNumberRef v43 = *(const __CFDictionary **)(a2 + 16);
      id v44 = platform_navigation_routeGuidanceInfoKeyForType(5LL);
      uint64_t v45 = (const __CFNumber *)CFDictionaryGetValue(v43, v44);
      int v46 = v42 + __addU64NumberParameterToMsg(v20, 5, v45);
      __int16 v47 = *(const __CFDictionary **)(a2 + 16);
      id v48 = platform_navigation_routeGuidanceInfoKeyForType(6LL);
      CFNumberRef v49 = (const __CFNumber *)CFDictionaryGetValue(v47, v48);
      int v50 = v46 + __addU64NumberParameterToMsg(v20, 6, v49);
      CFNumberRef v51 = *(const __CFDictionary **)(a2 + 16);
      id v52 = platform_navigation_routeGuidanceInfoKeyForType(7LL);
      CFNumberRef v53 = (const __CFNumber *)CFDictionaryGetValue(v51, v52);
      int v54 = v38 + v50 + __addU32NumberParameterToMsg(v20, 0LL, 7, v53);
      CFNumberRef v55 = *(const __CFDictionary **)(a2 + 16);
      id v56 = platform_navigation_routeGuidanceInfoKeyForType(8LL);
      CFNumberRef v57 = (const __CFString *)CFDictionaryGetValue(v55, v56);
      BOOL v58 = v57 && iAP2MsgAddCFStringParam(v20, 0LL, 8, v57);
      __int16 v59 = *(const __CFDictionary **)(a2 + 16);
      id v60 = platform_navigation_routeGuidanceInfoKeyForType(9LL);
      __int16 v61 = (const __CFNumber *)CFDictionaryGetValue(v59, v60);
      int v62 = v58
          + __addEnumNumberParameterToMsg( v20,  0LL,  9,  v61,  (uint64_t (*)(void))_convertDistaceUnitTypeForFunc);
      int v63 = *(const __CFDictionary **)(a2 + 16);
      id v64 = platform_navigation_routeGuidanceInfoKeyForType(10LL);
      __int16 v65 = (const __CFNumber *)CFDictionaryGetValue(v63, v64);
      int v66 = v54 + v62 + __addU32NumberParameterToMsg(v20, 0LL, 10, v65);
      __int16 v67 = *(const __CFDictionary **)(a2 + 16);
      id v68 = platform_navigation_routeGuidanceInfoKeyForType(11LL);
      uint64_t v69 = (const __CFString *)CFDictionaryGetValue(v67, v68);
      BOOL v70 = v69 && iAP2MsgAddCFStringParam(v20, 0LL, 11, v69);
      id v71 = *(const __CFDictionary **)(a2 + 16);
      id v72 = platform_navigation_routeGuidanceInfoKeyForType(12LL);
      uint64_t v73 = (const __CFNumber *)CFDictionaryGetValue(v71, v72);
      int v74 = v66
          + v70
          + __addEnumNumberParameterToMsg( v20,  0LL,  12,  v73,  (uint64_t (*)(void))_convertDistaceUnitTypeForFunc);
      __int128 v75 = *(const __CFDictionary **)(a2 + 16);
      id v76 = platform_navigation_routeGuidanceInfoKeyForType(13LL);
      uint64_t v77 = (const __CFArray *)CFDictionaryGetValue(v75, v76);
      BOOL v78 = v77 && iAP2MsgAddCFU16ArrayParam(v20, 0LL, 13, v77);
      uint64_t v79 = *(const __CFDictionary **)(a2 + 16);
      id v80 = platform_navigation_routeGuidanceInfoKeyForType(14LL);
      uint64_t v81 = (const __CFNumber *)CFDictionaryGetValue(v79, v80);
      int v82 = v78 + __addU16NumberParameterToMsg(v20, 0LL, 14, v81);
      id v83 = *(const __CFDictionary **)(a2 + 16);
      id v84 = platform_navigation_routeGuidanceInfoKeyForType(15LL);
      uint64_t v85 = (const __CFNumber *)CFDictionaryGetValue(v83, v84);
      int v86 = v82 + __addU8NumberParameterToMsg(v20, 0LL, 15, v85);
      uint64_t v87 = *(const __CFDictionary **)(a2 + 16);
      id v88 = platform_navigation_routeGuidanceInfoKeyForType(16LL);
      id v89 = (const __CFNumber *)CFDictionaryGetValue(v87, v88);
      int v90 = v86 + __addU16NumberParameterToMsg(v20, 0LL, 16, v89);
      id v91 = *(const __CFDictionary **)(a2 + 16);
      id v92 = platform_navigation_routeGuidanceInfoKeyForType(17LL);
      uint64_t v93 = (const __CFNumber *)CFDictionaryGetValue(v91, v92);
      int v94 = v90 + __addU16NumberParameterToMsg(v20, 0LL, 17, v93);
      uint32_t v95 = *(const __CFDictionary **)(a2 + 16);
      id v96 = platform_navigation_routeGuidanceInfoKeyForType(18LL);
      id v97 = (const __CFNumber *)CFDictionaryGetValue(v95, v96);
      int v98 = v74 + v94 + __addU8NumberParameterToMsg(v20, 0LL, 18, v97);
      if (Feature[16])
      {
        id v99 = *(const __CFDictionary **)(a2 + 16);
        id v100 = platform_navigation_routeGuidanceInfoKeyForType(19LL);
        id v101 = (const __CFString *)CFDictionaryGetValue(v99, v100);
        int v102 = v101 && iAP2MsgAddCFStringParam(v20, 0LL, 19, v101);
        v98 += v102;
      }

      if (Feature[17])
      {
        id v103 = *(const __CFDictionary **)(a2 + 16);
        id v104 = platform_navigation_routeGuidanceInfoKeyForType(20LL);
        uint64_t v105 = (const __CFNumber *)CFDictionaryGetValue(v103, v104);
        v98 += __addU8NumberParameterToMsg(v20, 0LL, 20, v105);
      }

      if (Feature[20])
      {
        id v106 = *(const __CFDictionary **)(a2 + 16);
        id v107 = platform_navigation_routeGuidanceInfoKeyForType(21LL);
        char v108 = (const __CFNumber *)CFDictionaryGetValue(v106, v107);
        v98 += __addU16NumberParameterToMsg(v20, 0LL, 21, v108);
      }

      if (Feature[21])
      {
        id v109 = *(const __CFDictionary **)(a2 + 16);
        id v110 = platform_navigation_routeGuidanceInfoKeyForType(22LL);
        __int16 v111 = (const __CFNumber *)CFDictionaryGetValue(v109, v110);
        int v112 = v98 + __addU8NumberParameterToMsg(v20, 0LL, 22, v111);
        id v113 = *(const __CFDictionary **)(a2 + 16);
        id v114 = platform_navigation_routeGuidanceInfoKeyForType(23LL);
        __int16 v115 = (const __CFArray *)CFDictionaryGetValue(v113, v114);
        uint64_t v152 = a1;
        if (v115)
        {
          uint64_t v116 = v115;
          if (CFArrayGetCount(v115) >= 1)
          {
            CFIndex v154 = CFArrayGetCount(v116);
            if (v154 >= 1)
            {
              CFIndex v117 = 0LL;
              uint64_t v153 = v116;
              do
              {
                unsigned int valuePtr = -1431655766;
                id v118 = (const __CFDictionary *)CFArrayGetValueAtIndex(v116, v117);
                uint64_t v119 = v4[353];
                int v120 = *((_DWORD *)v5 + 708);
                if (v119 && v120 >= 47)
                {
                  uint64_t v121 = *(os_log_s **)(v119 + 368);
                }

                else
                {
                  uint64_t v121 = (os_log_s *)&_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 134218240;
                    unint64_t v157 = (const char *)v119;
                    __int16 v158 = 1024;
                    *(_DWORD *)uint64_t v159 = v120;
                    _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                  }
                }

                id v122 = v5;
                if (os_log_type_enabled(v121, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v123 = v152[1];
                  *(_DWORD *)buf = 136316162;
                  unint64_t v157 = "iap2_navigation_routeGuidanceUpdateHandler";
                  __int16 v158 = 1024;
                  *(_DWORD *)uint64_t v159 = 800;
                  *(_WORD *)&v159[4] = 2112;
                  *(void *)&v159[6] = v123;
                  *(_WORD *)&v159[14] = 2048;
                  *(void *)&v159[16] = v117;
                  __int16 v160 = 2112;
                  char v161 = v118;
                  _os_log_impl( (void *)&_mh_execute_header,  v121,  OS_LOG_TYPE_DEFAULT,  "%s:%d %@, index %ld, dict = %@",  buf,  0x30u);
                }

                int v124 = iAP2MsgAddGroupParam(v20, 23);
                unsigned int valuePtr = 0;
                CFNumberRef v125 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
                v126 = (const __CFNumber *)CFDictionaryGetValue(v118, v125);
                if (v125) {
                  CFRelease(v125);
                }
                __int16 v127 = valuePtr;
                if (valuePtr >= 3) {
                  __int16 v127 = -1;
                }
                BOOL v128 = __addU8NumberParameterToMsg(v20, (uint64_t)v124, v127, v126);
                unsigned int valuePtr = 1;
                CFNumberRef v129 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
                uint64_t v130 = (const __CFNumber *)CFDictionaryGetValue(v118, v129);
                if (v129) {
                  CFRelease(v129);
                }
                __int16 v131 = valuePtr;
                if (valuePtr >= 3) {
                  __int16 v131 = -1;
                }
                BOOL v132 = __addU16NumberParameterToMsg(v20, (uint64_t)v124, v131, v130);
                unsigned int valuePtr = 2;
                CFNumberRef v133 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
                uint64_t v134 = (const __CFNumber *)CFDictionaryGetValue(v118, v133);
                if (v133) {
                  CFRelease(v133);
                }
                int v135 = v112 + v128 + v132;
                __int16 v136 = valuePtr;
                if (valuePtr >= 3) {
                  __int16 v136 = -1;
                }
                int v112 = v135 + __addU32NumberParameterToMsg(v20, (uint64_t)v124, v136, v134);
                ++v117;
                uint64_t v116 = v153;
                uint64_t v4 = &startLogsNotificationObservers;
                uint64_t v5 = v122;
              }

              while (v154 != v117);
            }
          }
        }

        uint64_t v137 = *(const __CFDictionary **)(a2 + 16);
        id v138 = platform_navigation_routeGuidanceInfoKeyForType(24LL);
        uint64_t v139 = (const __CFNumber *)CFDictionaryGetValue(v137, v138);
        LODWORD(v137) = __addU32NumberParameterToMsg(v20, 0LL, 24, v139);
        uint64_t v140 = *(const __CFDictionary **)(a2 + 16);
        id v141 = platform_navigation_routeGuidanceInfoKeyForType(25LL);
        uint64_t v142 = (const __CFNumber *)CFDictionaryGetValue(v140, v141);
        LODWORD(v140) = (_DWORD)v137 + __addU32NumberParameterToMsg(v20, 0LL, 25, v142);
        uint64_t v143 = *(const __CFDictionary **)(a2 + 16);
        id v144 = platform_navigation_routeGuidanceInfoKeyForType(26LL);
        uint64_t v145 = (const __CFNumber *)CFDictionaryGetValue(v143, v144);
        int v98 = v112 + (_DWORD)v140 + __addU32NumberParameterToMsg(v20, 0LL, 26, v145);
        a1 = v152;
      }

      uint64_t v146 = v4[353];
      if (v146 && *((int *)v5 + 708) >= 47)
      {
        uint64_t v147 = *(os_log_s **)(v146 + 368);
      }

      else
      {
        uint64_t v147 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v147, OS_LOG_TYPE_INFO))
      {
        uint64_t v148 = (const char *)a1[1];
        int MsgID = iAP2MsgGetMsgID(v20);
        *(_DWORD *)buf = 138412802;
        unint64_t v157 = v148;
        __int16 v158 = 1024;
        *(_DWORD *)uint64_t v159 = MsgID;
        *(_WORD *)&v159[4] = 1024;
        *(_DWORD *)&v159[6] = v98;
        _os_log_impl( (void *)&_mh_execute_header,  v147,  OS_LOG_TYPE_INFO,  "iAP2Navigation RouteGuidanceUpdate %@ send message %xh, paramCount=%d",  buf,  0x18u);
      }

      if (v98)
      {
        iap2_sessionControl_sendOutgoingMessage(a1, v20);
        platform_navigation_deleteParams((void *)a2);
        return 1LL;
      }

      return 0LL;
    }

    if (v14)
    {
      CFNumberRef v16 = *(os_log_s **)(gLogObjects + 368);
    }

    else
    {
      CFNumberRef v16 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    BOOL v150 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0LL;
    if (v150)
    {
      uint64_t v151 = (const char *)a1[1];
      *(_DWORD *)buf = 138412290;
      unint64_t v157 = v151;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "iAP2Navigation RouteGuidanceManeuverUpdate %@, no userInfo, message not sent!",  buf,  0xCu);
      return 0LL;
    }
  }

  return result;
}

BOOL __addU16NumberParameterToMsg(uint64_t a1, uint64_t a2, __int16 a3, CFNumberRef number)
{
  if (!number) {
    return 0LL;
  }
  unsigned __int16 valuePtr = -21846;
  return CFNumberGetValue(number, kCFNumberSInt16Type, &valuePtr) && iAP2MsgAddU16Param(a1, a2, a3, valuePtr);
}

BOOL __addEnumNumberParameterToMsg( uint64_t a1, uint64_t a2, __int16 a3, CFNumberRef number, uint64_t (*a5)(void))
{
  if (!number) {
    return 0LL;
  }
  unsigned __int8 valuePtr = -86;
  BOOL result = 0;
  if (CFNumberGetValue(number, kCFNumberSInt8Type, &valuePtr))
  {
    char v9 = a5(valuePtr);
    if (iAP2MsgAddU8Param(a1, a2, a3, v9)) {
      return 1;
    }
  }

  return result;
}

uint64_t _convertRouteGuidanceStateTypeForFunc(unsigned int a1)
{
  unsigned __int8 v1 = a1;
  if (a1 >= 7)
  {
    if (gLogObjects && gNumLogObjects >= 47)
    {
      BOOL v2 = *(os_log_s **)(gLogObjects + 368);
    }

    else
    {
      BOOL v2 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      _convertRouteGuidanceStateTypeForFunc_cold_1();
    }
    return -1;
  }

  return v1;
}

uint64_t _convertManeuverStateTypeForFunc(unsigned int a1)
{
  unsigned __int8 v1 = a1;
  if (a1 >= 4)
  {
    if (gLogObjects && gNumLogObjects >= 47)
    {
      BOOL v2 = *(os_log_s **)(gLogObjects + 368);
    }

    else
    {
      BOOL v2 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      _convertManeuverStateTypeForFunc_cold_1();
    }
    return -1;
  }

  return v1;
}

BOOL __addU64NumberParameterToMsg(uint64_t a1, __int16 a2, CFNumberRef number)
{
  if (!number) {
    return 0LL;
  }
  unint64_t valuePtr = 0xAAAAAAAAAAAAAAAALL;
  return CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr) && iAP2MsgAddU64Param(a1, 0LL, a2, valuePtr);
}

BOOL __addU32NumberParameterToMsg(uint64_t a1, uint64_t a2, __int16 a3, CFNumberRef number)
{
  if (!number) {
    return 0LL;
  }
  unsigned int valuePtr = -1431655766;
  return CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr) && iAP2MsgAddU32Param(a1, a2, a3, valuePtr);
}

uint64_t _convertDistaceUnitTypeForFunc(unsigned int a1)
{
  unsigned __int8 v1 = a1;
  if (a1 >= 5)
  {
    if (gLogObjects && gNumLogObjects >= 47)
    {
      BOOL v2 = *(os_log_s **)(gLogObjects + 368);
    }

    else
    {
      BOOL v2 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      _convertDistaceUnitTypeForFunc_cold_1();
    }
    return -1;
  }

  return v1;
}

BOOL __addU8NumberParameterToMsg(uint64_t a1, uint64_t a2, __int16 a3, CFNumberRef number)
{
  if (!number) {
    return 0LL;
  }
  char valuePtr = -86;
  return CFNumberGetValue(number, kCFNumberSInt8Type, &valuePtr) && iAP2MsgAddU8Param(a1, a2, a3, valuePtr);
}

uint64_t iap2_navigation_routeGuidanceManeuverUpdateHandler(uint64_t *a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    uint64_t v4 = *(os_log_s **)(gLogObjects + 368);
  }

  else
  {
    uint64_t v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v5 = a1[1];
    }
    else {
      uint64_t v5 = 0LL;
    }
    int v85 = 138412290;
    uint64_t v86 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "iAP2Navigation RouteGuidanceManeuverUpdate Handler %@",  (uint8_t *)&v85,  0xCu);
  }

  if (!a1) {
    return 0LL;
  }
  uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0x11u);
  if (gLogObjects && gNumLogObjects >= 47)
  {
    char v7 = *(os_log_s **)(gLogObjects + 368);
  }

  else
  {
    char v7 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    char v8 = "exists";
    uint64_t v9 = a1[1];
    if (!Feature) {
      char v8 = "missing!!";
    }
    int v85 = 138412546;
    uint64_t v86 = v9;
    __int16 v87 = 2080;
    *(void *)id v88 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "iAP2Navigation RouteGuidanceManeuverUpdate %@ navigation %s",  (uint8_t *)&v85,  0x16u);
  }

  uint64_t result = 0LL;
  if (a2 && Feature)
  {
    if (*(_DWORD *)a2 != 1) {
      return 0LL;
    }
    if (gLogObjects) {
      BOOL v11 = gNumLogObjects <= 46;
    }
    else {
      BOOL v11 = 1;
    }
    int v12 = !v11;
    if (*(void *)(a2 + 16))
    {
      if (v12)
      {
        BOOL v13 = *(os_log_s **)(gLogObjects + 368);
      }

      else
      {
        BOOL v13 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v15 = a1[1];
        uint64_t v16 = *(void *)(a2 + 8);
        uint64_t v17 = *(void *)(a2 + 16);
        int v85 = 138412802;
        uint64_t v86 = v15;
        __int16 v87 = 2112;
        *(void *)id v88 = v16;
        *(_WORD *)&v88[8] = 2112;
        uint64_t v89 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "iAP2Navigation RouteGuidanceManeuverUpdate %@, create msg, componentIDs=%@ updateInfo=%@",  (uint8_t *)&v85,  0x20u);
      }

      uint64_t v18 = iAP2MsgInit((uint64_t)(a1 + 15), 20994, a1[24], 0xFFFF, 0LL, 0LL);
      uint64_t v19 = *(const __CFArray **)(a2 + 8);
      if (v19 && (CFIndex Count = CFArrayGetCount(v19), Count >= 1))
      {
        CFIndex v21 = Count;
        CFIndex v22 = 0LL;
        int v23 = 0;
        do
        {
          ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 8), v22);
          v23 += __addU16NumberParameterToMsg(v18, 0LL, 0, ValueAtIndex);
          ++v22;
        }

        while (v21 != v22);
      }

      else
      {
        int v23 = 0;
      }

      int v25 = *(const __CFDictionary **)(a2 + 16);
      id v26 = platform_navigation_maneuverInfoKeyForType(1LL);
      uint64_t Value = (const __CFNumber *)CFDictionaryGetValue(v25, v26);
      int v28 = v23 + __addU16NumberParameterToMsg(v18, 0LL, 1, Value);
      uint64_t v29 = *(const __CFDictionary **)(a2 + 16);
      id v30 = platform_navigation_maneuverInfoKeyForType(2LL);
      id v31 = (const __CFString *)CFDictionaryGetValue(v29, v30);
      BOOL v32 = v31 && iAP2MsgAddCFStringParam(v18, 0LL, 2, v31);
      int v33 = *(const __CFDictionary **)(a2 + 16);
      id v34 = platform_navigation_maneuverInfoKeyForType(3LL);
      id v35 = (const __CFNumber *)CFDictionaryGetValue(v33, v34);
      int v36 = v28
          + v32
          + __addEnumNumberParameterToMsg(v18, 0LL, 3, v35, (uint64_t (*)(void))_convertManeuverTypeForFunc);
      BOOL v37 = *(const __CFDictionary **)(a2 + 16);
      id v38 = platform_navigation_maneuverInfoKeyForType(4LL);
      uint64_t v39 = (const __CFString *)CFDictionaryGetValue(v37, v38);
      BOOL v40 = v39 && iAP2MsgAddCFStringParam(v18, 0LL, 4, v39);
      CFStringRef v41 = *(const __CFDictionary **)(a2 + 16);
      id v42 = platform_navigation_maneuverInfoKeyForType(5LL);
      CFNumberRef v43 = (const __CFNumber *)CFDictionaryGetValue(v41, v42);
      int v44 = v36 + v40 + __addU32NumberParameterToMsg(v18, 0LL, 5, v43);
      uint64_t v45 = *(const __CFDictionary **)(a2 + 16);
      id v46 = platform_navigation_maneuverInfoKeyForType(6LL);
      __int16 v47 = (const __CFString *)CFDictionaryGetValue(v45, v46);
      BOOL v48 = v47 && iAP2MsgAddCFStringParam(v18, 0LL, 6, v47);
      CFNumberRef v49 = *(const __CFDictionary **)(a2 + 16);
      id v50 = platform_navigation_maneuverInfoKeyForType(7LL);
      CFNumberRef v51 = (const __CFNumber *)CFDictionaryGetValue(v49, v50);
      int v52 = v48
          + __addEnumNumberParameterToMsg( v18,  0LL,  7,  v51,  (uint64_t (*)(void))_convertDistaceUnitTypeForFunc);
      CFNumberRef v53 = *(const __CFDictionary **)(a2 + 16);
      id v54 = platform_navigation_maneuverInfoKeyForType(8LL);
      CFNumberRef v55 = (const __CFNumber *)CFDictionaryGetValue(v53, v54);
      int v56 = v52 + __addEnumNumberParameterToMsg(v18, 0LL, 8, v55, _convertDrivingSideTypeForFunc);
      CFNumberRef v57 = *(const __CFDictionary **)(a2 + 16);
      id v58 = platform_navigation_maneuverInfoKeyForType(9LL);
      __int16 v59 = (const __CFNumber *)CFDictionaryGetValue(v57, v58);
      int v60 = v44 + v56 + __addEnumNumberParameterToMsg(v18, 0LL, 9, v59, _convertJunctionTypeForFunc);
      __int16 v61 = *(const __CFDictionary **)(a2 + 16);
      id v62 = platform_navigation_maneuverInfoKeyForType(10LL);
      int v63 = (const __CFArray *)CFDictionaryGetValue(v61, v62);
      if (v63)
      {
        id v64 = v63;
        CFIndex v65 = CFArrayGetCount(v63);
        if (v65 >= 1)
        {
          CFIndex v66 = v65;
          for (CFIndex i = 0LL; i != v66; ++i)
          {
            id v68 = (const __CFNumber *)CFArrayGetValueAtIndex(v64, i);
            v60 += __addU16NumberParameterToMsg(v18, 0LL, 10, v68);
          }
        }
      }

      uint64_t v69 = *(const __CFDictionary **)(a2 + 16);
      id v70 = platform_navigation_maneuverInfoKeyForType(11LL);
      id v71 = (const __CFNumber *)CFDictionaryGetValue(v69, v70);
      int v72 = v60 + __addU16NumberParameterToMsg(v18, 0LL, 11, v71);
      if (*(_BYTE *)(Feature + 18))
      {
        uint64_t v73 = *(const __CFDictionary **)(a2 + 16);
        id v74 = platform_navigation_maneuverInfoKeyForType(13LL);
        __int128 v75 = (const __CFString *)CFDictionaryGetValue(v73, v74);
        int v76 = v75 && iAP2MsgAddCFStringParam(v18, 0LL, 13, v75);
        v72 += v76;
      }

      if (iap2_identification_isIdentifiedForOutgoingMessageID((uint64_t)a1, 0x5204u))
      {
        uint64_t v77 = *(const __CFDictionary **)(a2 + 16);
        id v78 = platform_navigation_maneuverInfoKeyForType(12LL);
        uint64_t v79 = (const __CFNumber *)CFDictionaryGetValue(v77, v78);
        if (v79) {
          v72 += __addU16NumberParameterToMsg(v18, 0LL, 12, v79);
        }
      }

      if (v72)
      {
        if (gLogObjects && gNumLogObjects >= 47)
        {
          id v80 = *(os_log_s **)(gLogObjects + 368);
        }

        else
        {
          id v80 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
        {
          uint64_t v81 = a1[1];
          int MsgID = iAP2MsgGetMsgID(v18);
          int v85 = 138412802;
          uint64_t v86 = v81;
          __int16 v87 = 1024;
          *(_DWORD *)id v88 = MsgID;
          *(_WORD *)&v88[4] = 1024;
          *(_DWORD *)&v88[6] = v72;
          _os_log_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_INFO,  "iAP2Navigation RouteGuidanceManeuverUpdate %@ send message %xh, paramCount=%d",  (uint8_t *)&v85,  0x18u);
        }

        iap2_sessionControl_sendOutgoingMessage(a1, v18);
      }

      platform_navigation_deleteParams((void *)a2);
      return 1LL;
    }

    if (v12)
    {
      int v14 = *(os_log_s **)(gLogObjects + 368);
    }

    else
    {
      int v14 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    BOOL v83 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0LL;
    if (v83)
    {
      uint64_t v84 = a1[1];
      int v85 = 138412290;
      uint64_t v86 = v84;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "iAP2Navigation RouteGuidanceManeuverUpdate %@, no userInfo, message not sent!",  (uint8_t *)&v85,  0xCu);
      return 0LL;
    }
  }

  return result;
}

uint64_t _convertManeuverTypeForFunc(unsigned int a1)
{
  unsigned __int8 v1 = a1;
  if (a1 >= 0x36)
  {
    if (gLogObjects && gNumLogObjects >= 47)
    {
      BOOL v2 = *(os_log_s **)(gLogObjects + 368);
    }

    else
    {
      BOOL v2 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      _convertManeuverTypeForFunc_cold_1();
    }
    return -1;
  }

  return v1;
}

uint64_t _convertDrivingSideTypeForFunc(uint64_t result)
{
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 1)
    {
      return 1LL;
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 47)
      {
        unsigned __int8 v1 = *(os_log_s **)(gLogObjects + 368);
      }

      else
      {
        unsigned __int8 v1 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
        _convertDrivingSideTypeForFunc_cold_1();
      }
      return 255LL;
    }
  }

  return result;
}

uint64_t _convertJunctionTypeForFunc(uint64_t result)
{
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 1)
    {
      return 1LL;
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 47)
      {
        unsigned __int8 v1 = *(os_log_s **)(gLogObjects + 368);
      }

      else
      {
        unsigned __int8 v1 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
        _convertJunctionTypeForFunc_cold_1();
      }
      return 255LL;
    }
  }

  return result;
}

uint64_t iap2_navigation_laneGuidanceInfoUpdateHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    uint64_t v4 = *(os_log_s **)(gLogObjects + 368);
  }

  else
  {
    uint64_t v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v5 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v5 = 0LL;
    }
    *(_DWORD *)buf = 138412290;
    uint64_t v75 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "iAP2Navigation LaneGuidanceInfoUpdate Handler %@",  buf,  0xCu);
  }

  if (!a1) {
    return 0LL;
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 0x11u);
  if (gLogObjects && gNumLogObjects >= 47)
  {
    char v7 = *(os_log_s **)(gLogObjects + 368);
  }

  else
  {
    char v7 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    char v8 = "exists";
    uint64_t v9 = *(void *)(a1 + 8);
    if (!Feature) {
      char v8 = "missing!!";
    }
    *(_DWORD *)buf = 138412546;
    uint64_t v75 = v9;
    __int16 v76 = 2080;
    *(void *)uint64_t v77 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "iAP2Navigation LaneGuidanceInfoUpdate %@ navigation %s",  buf,  0x16u);
  }

  uint64_t result = 0LL;
  if (a2 && Feature)
  {
    if (*(_DWORD *)a2 != 2) {
      return 0LL;
    }
    if (gLogObjects) {
      BOOL v11 = gNumLogObjects <= 46;
    }
    else {
      BOOL v11 = 1;
    }
    int v12 = !v11;
    if (*(void *)(a2 + 16))
    {
      if (v12)
      {
        BOOL v13 = *(os_log_s **)(gLogObjects + 368);
      }

      else
      {
        BOOL v13 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v15 = *(void *)(a1 + 8);
        uint64_t v16 = *(void *)(a2 + 8);
        uint64_t v17 = *(void **)(a2 + 16);
        *(_DWORD *)buf = 138412802;
        uint64_t v75 = v15;
        __int16 v76 = 2112;
        *(void *)uint64_t v77 = v16;
        *(_WORD *)&v77[8] = 2112;
        id v78 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "iAP2Navigation LaneGuidanceInfoUpdate %@, create msg, componentIDs=%@ updateInfo=%@",  buf,  0x20u);
      }

      uint64_t v18 = iAP2MsgInit(a1 + 120, 20996, *(void *)(a1 + 192), 0xFFFF, 0LL, 0LL);
      uint64_t v19 = *(const __CFArray **)(a2 + 8);
      int v72 = (uint64_t *)a1;
      if (v19 && (CFIndex Count = CFArrayGetCount(v19), Count >= 1))
      {
        CFIndex v21 = Count;
        CFIndex v22 = 0LL;
        int v23 = 0;
        do
        {
          ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 8), v22);
          v23 += __addU16NumberParameterToMsg(v18, 0LL, 0, ValueAtIndex);
          ++v22;
        }

        while (v21 != v22);
      }

      else
      {
        int v23 = 0;
      }

      int v25 = *(const __CFDictionary **)(a2 + 16);
      id v26 = platform_navigation_laneGuidanceInfoKeyForType(1LL);
      uint64_t Value = (const __CFNumber *)CFDictionaryGetValue(v25, v26);
      BOOL v28 = __addU16NumberParameterToMsg(v18, 0LL, 1, Value);
      uint64_t v29 = *(const __CFDictionary **)(a2 + 16);
      id v30 = platform_navigation_laneGuidanceInfoKeyForType(3LL);
      id v31 = (const __CFString *)CFDictionaryGetValue(v29, v30);
      BOOL v32 = v31 && iAP2MsgAddCFStringParam(v18, 0LL, 3, v31);
      uint64_t v73 = (void *)a2;
      if (gLogObjects && gNumLogObjects >= 47)
      {
        int v33 = *(os_log_s **)(gLogObjects + 368);
      }

      else
      {
        int v33 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v68 = v72[1];
        *(_DWORD *)buf = 138412802;
        uint64_t v75 = v68;
        __int16 v76 = 2112;
        *(void *)uint64_t v77 = Value;
        *(_WORD *)&v77[8] = 2112;
        id v78 = (void *)v31;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "iAP2Navigation LaneGuidanceInfoUpdate %@, index=%@ instructionText strObj=%@",  buf,  0x20u);
      }

      int v34 = v23 + v28;
      id v35 = (const __CFDictionary *)v73[2];
      id v36 = platform_navigation_laneGuidanceInfoKeyForType(2LL);
      BOOL v37 = (const __CFArray *)CFDictionaryGetValue(v35, v36);
      if (gLogObjects && gNumLogObjects >= 47)
      {
        id v38 = *(os_log_s **)(gLogObjects + 368);
      }

      else
      {
        id v38 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      int v39 = v34 + v32;
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
      {
        iap2_navigation_laneGuidanceInfoUpdateHandler_cold_3((uint64_t)v72, (uint64_t)v37, v38);
        if (v37)
        {
LABEL_63:
          CFIndex v40 = CFArrayGetCount(v37);
          if (v40 >= 1)
          {
            CFIndex v41 = v40;
            for (CFIndex i = 0LL; i != v41; ++i)
            {
              CFNumberRef v43 = (const __CFDictionary *)CFArrayGetValueAtIndex(v37, i);
              uint64_t v44 = gLogObjects;
              int v45 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 47)
              {
                id v46 = *(os_log_s **)(gLogObjects + 368);
              }

              else
              {
                id v46 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  uint64_t v75 = v44;
                  __int16 v76 = 1024;
                  *(_DWORD *)uint64_t v77 = v45;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                }
              }

              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v65 = v72[1];
                *(_DWORD *)buf = 138412802;
                uint64_t v75 = v65;
                __int16 v76 = 2048;
                *(void *)uint64_t v77 = i;
                *(_WORD *)&v77[8] = 2112;
                id v78 = v43;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEBUG,  "iAP2Navigation LaneGuidanceInfoUpdate %@, laneInfo i=%ld dictObj=%@",  buf,  0x20u);
              }

              __int16 v47 = iAP2MsgAddGroupParam(v18, 2);
              id v48 = platform_navigation_laneInfoKeyForType(0LL);
              CFNumberRef v49 = (const __CFNumber *)CFDictionaryGetValue(v43, v48);
              BOOL v50 = __addU16NumberParameterToMsg(v18, (uint64_t)v47, 0, v49);
              id v51 = platform_navigation_laneInfoKeyForType(1LL);
              int v52 = (const __CFNumber *)CFDictionaryGetValue(v43, v51);
              if (!v52) {
                goto LABEL_78;
              }
              buf[0] = -86;
              if (!CFNumberGetValue(v52, kCFNumberSInt8Type, buf)) {
                goto LABEL_78;
              }
              char v53 = buf[0];
              if (buf[0] >= 3u) {
                char v53 = -1;
              }
              else {
LABEL_78:
              }
                int v54 = 0;
              int v55 = v39 + v50 + v54;
              id v56 = platform_navigation_laneInfoKeyForType(2LL);
              CFNumberRef v57 = (const __CFArray *)CFDictionaryGetValue(v43, v56);
              if (v57)
              {
                id v58 = v57;
                CFIndex v59 = CFArrayGetCount(v57);
                if (v59 >= 1)
                {
                  CFIndex v60 = v59;
                  for (CFIndex j = 0LL; j != v60; ++j)
                  {
                    id v62 = (const __CFNumber *)CFArrayGetValueAtIndex(v58, j);
                    v55 += __addU16NumberParameterToMsg(v18, (uint64_t)v47, 2, v62);
                  }
                }
              }

              id v63 = platform_navigation_laneInfoKeyForType(3LL);
              id v64 = (const __CFNumber *)CFDictionaryGetValue(v43, v63);
              int v39 = v55 + __addU16NumberParameterToMsg(v18, (uint64_t)v47, 3, v64);
            }
          }
        }
      }

      else if (v37)
      {
        goto LABEL_63;
      }

      if (v39)
      {
        if (gLogObjects && gNumLogObjects >= 47)
        {
          uint64_t v69 = *(os_log_s **)(gLogObjects + 368);
        }

        else
        {
          uint64_t v69 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
        {
          uint64_t v70 = v72[1];
          int MsgID = iAP2MsgGetMsgID(v18);
          *(_DWORD *)buf = 138412802;
          uint64_t v75 = v70;
          __int16 v76 = 1024;
          *(_DWORD *)uint64_t v77 = MsgID;
          *(_WORD *)&v77[4] = 1024;
          *(_DWORD *)&v77[6] = v39;
          _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_INFO,  "iAP2Navigation LaneGuidanceInfoUpdate %@ send message %xh, paramCount=%d",  buf,  0x18u);
        }

        iap2_sessionControl_sendOutgoingMessage(v72, v18);
      }

      platform_navigation_deleteParams(v73);
      return 1LL;
    }

    if (v12)
    {
      int v14 = *(os_log_s **)(gLogObjects + 368);
    }

    else
    {
      int v14 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    BOOL v66 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0LL;
    if (v66)
    {
      uint64_t v67 = *(void *)(a1 + 8);
      *(_DWORD *)buf = 138412290;
      uint64_t v75 = v67;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "iAP2Navigation LaneGuidanceInfoUpdate %@, no userInfo, message not sent!",  buf,  0xCu);
      return 0LL;
    }
  }

  return result;
}

uint64_t iap2_navigation_startRoadObjectDetectionHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    uint64_t v4 = *(os_log_s **)(gLogObjects + 368);
  }

  else
  {
    uint64_t v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v5 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v5 = 0LL;
    }
    *(_DWORD *)buf = 138412290;
    uint64_t v45 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "iAP2Navigation startRoadObjectDetection Handler %@",  buf,  0xCu);
  }

  if (!a1) {
    return 0LL;
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 0x11u);
  if (gLogObjects && gNumLogObjects >= 47)
  {
    char v7 = *(os_log_s **)(gLogObjects + 368);
  }

  else
  {
    char v7 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    char v8 = "exists";
    uint64_t v9 = *(void *)(a1 + 8);
    if (!Feature) {
      char v8 = "missing!!";
    }
    *(_DWORD *)buf = 138412546;
    uint64_t v45 = v9;
    __int16 v46 = 2080;
    *(void *)__int16 v47 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "iAP2Navigation startRoadObjectDetection %@ navigation %s",  buf,  0x16u);
  }

  uint64_t result = 0LL;
  if (a2 && Feature)
  {
    if (*(_DWORD *)a2 != 3) {
      return 0LL;
    }
    CFMutableArrayRef Mutable = *(const __CFArray **)(a2 + 16);
    if (Mutable)
    {
      CFRetain(*(CFTypeRef *)(a2 + 16));
LABEL_26:
      if (CFArrayGetCount(Mutable) >= 1)
      {
        if (gLogObjects && gNumLogObjects >= 47)
        {
          int v12 = *(os_log_s **)(gLogObjects + 368);
        }

        else
        {
          int v12 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          uint64_t v20 = *(void *)(a1 + 8);
          uint64_t v21 = *(void *)(a2 + 8);
          *(_DWORD *)buf = 138412802;
          uint64_t v45 = v20;
          __int16 v46 = 2112;
          *(void *)__int16 v47 = v21;
          *(_WORD *)&v47[8] = 2112;
          id v48 = Mutable;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "iAP2Navigation startRoadObjectDetection %@, create msg, componentIDs=%@ objectTypes=%@",  buf,  0x20u);
        }

        uint64_t v22 = iAP2MsgInit(a1 + 120, 3328, *(void *)(a1 + 192), 0xFFFF, 0LL, 0LL);
        int v23 = *(const __CFArray **)(a2 + 8);
        CFNumberRef v43 = (uint64_t *)a1;
        if (v23 && (CFIndex Count = CFArrayGetCount(v23), Count >= 1))
        {
          CFIndex v25 = Count;
          CFIndex v26 = 0LL;
          int v27 = 0;
          do
          {
            ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 8), v26);
            v27 += __addU16NumberParameterToMsg(v22, 0LL, 0, ValueAtIndex);
            ++v26;
          }

          while (v25 != v26);
        }

        else
        {
          int v27 = 0;
        }

        CFIndex v29 = CFArrayGetCount(Mutable);
        if (v29 >= 1)
        {
          CFIndex v30 = v29;
          for (CFIndex i = 0LL; i != v30; ++i)
          {
            BOOL v32 = (const __CFNumber *)CFArrayGetValueAtIndex(Mutable, i);
            uint64_t v33 = gLogObjects;
            int v34 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 47)
            {
              id v35 = *(os_log_s **)(gLogObjects + 368);
            }

            else
            {
              id v35 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                uint64_t v45 = v33;
                __int16 v46 = 1024;
                *(_DWORD *)__int16 v47 = v34;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                id v35 = (os_log_s *)&_os_log_default;
              }
            }

            if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v36 = v43[1];
              *(_DWORD *)buf = 138412802;
              uint64_t v45 = v36;
              __int16 v46 = 2048;
              *(void *)__int16 v47 = i;
              *(_WORD *)&v47[8] = 2112;
              id v48 = v32;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEBUG,  "iAP2Navigation startRoadObjectDetection %@, laneInfo i=%ld numObj=%@",  buf,  0x20u);
            }

            buf[0] = -86;
            CFNumberGetValue(v32, kCFNumberSInt8Type, buf);
          }
        }

        if (v27)
        {
          if (gLogObjects && gNumLogObjects >= 47)
          {
            BOOL v37 = *(os_log_s **)(gLogObjects + 368);
          }

          else
          {
            BOOL v37 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
          {
            uint64_t v39 = v43[1];
            int MsgID = iAP2MsgGetMsgID(v22);
            *(_DWORD *)buf = 138412802;
            uint64_t v45 = v39;
            __int16 v46 = 1024;
            *(_DWORD *)__int16 v47 = MsgID;
            *(_WORD *)&v47[4] = 1024;
            *(_DWORD *)&v47[6] = v27;
            _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_INFO,  "iAP2Navigation startRoadObjectDetection %@ send message %xh, paramCount=%d",  buf,  0x18u);
          }

          iap2_sessionControl_sendOutgoingMessage(v43, v22);
          char v38 = 1;
        }

        else
        {
          char v38 = 1;
        }

LABEL_81:
        CFRelease(Mutable);
        if ((v38 & 1) != 0)
        {
          platform_navigation_deleteParams((void *)a2);
          return 1LL;
        }

        return 0LL;
      }

    id v35 = 0LL;
    BOOL v2 = 0LL;
    if (v7)
    {
LABEL_82:
      CFRelease(v7);
      BOOL v2 = v35;
    }
  }

LABEL_73:
      if (gLogObjects && gNumLogObjects >= 47)
      {
        CFIndex v41 = *(os_log_s **)(gLogObjects + 368);
      }

      else
      {
        CFIndex v41 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v42 = *(void *)(a1 + 8);
        *(_DWORD *)buf = 138412290;
        uint64_t v45 = v42;
        _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "iAP2Navigation startRoadObjectDetection %@, no objectTypes, message not sent!",  buf,  0xCu);
      }

      char v38 = 0;
      if (!Mutable) {
        return 0LL;
      }
      goto LABEL_81;
    }

    uint64_t v13 = iap2_feature_getFeature(a1, 0x11u);
    if (!v13)
    {
      CFMutableArrayRef Mutable = 0LL;
      goto LABEL_73;
    }

    uint64_t v14 = v13;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
    int64_t v15 = CFDictionaryGetCount(*(CFDictionaryRef *)(v14 + 8));
    uint64_t v16 = (const void **)calloc(v15, 8uLL);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v14 + 8), 0LL, v16);
    if (v15 < 1)
    {
      if (!v16) {
        goto LABEL_72;
      }
    }

    else
    {
      uint64_t v17 = (const __CFDictionary **)v16;
      do
      {
        uint64_t v18 = *v17++;
        SupportedTypes = platform_navigation_objectDetectionComponentGetSupportedTypes(v18);
        v49.uint64_t length = CFArrayGetCount(SupportedTypes);
        v49.location = 0LL;
        CFArrayAppendArray(Mutable, SupportedTypes, v49);
        --v15;
      }

      while (v15);
    }

    free(v16);
LABEL_72:
    if (!Mutable) {
      goto LABEL_73;
    }
    goto LABEL_26;
  }

  return result;
}

    iap2_identification_addRejectParam(v30, v31, 0xAu);
    return v32 == 0;
  }

  if (gLogObjects && gNumLogObjects >= 37)
  {
    int v10 = *(os_log_s **)(gLogObjects + 288);
  }

  else
  {
    int v10 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  uint64_t result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  if (result)
  {
    _parseIdentificationParamsPower_cold_1();
    return 0LL;
  }

  return result;
}

    goto LABEL_74;
  }

  if (gLogObjects && gNumLogObjects >= 56)
  {
    uint64_t v14 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v14 = (os_log_s *)&_os_log_default;
    uint64_t v17 = &_os_log_default;
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
    mfi4Auth_relay_StartRelayForType_cold_14();
  }
LABEL_39:

LABEL_74:
  uint64_t result = 0LL;
LABEL_75:
  if (a4) {
    *a4 = result;
  }
  return result;
}

  int v54 = v8[353];
  if (v54 && *((int *)v9 + 708) >= 60)
  {
    int v55 = *(os_log_s **)(v54 + 472);
  }

  else
  {
    int v55 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
  {
    if ((v15 - 1) > 0xA)
    {
      id v56 = "UNKNOWN";
      if (a6) {
        goto LABEL_81;
      }
    }

    else
    {
      id v56 = off_1001FD120[v15 - 1];
      if (a6)
      {
LABEL_81:
        CFNumberRef v57 = *a6;
LABEL_84:
        *(_DWORD *)buf = 136316674;
        uint64_t v70 = "_qiAuth_protocol_handleResponse_CERTIFICATE";
        id v71 = 1024;
        int v72 = 2222;
        uint64_t v73 = 1024;
        id v74 = inited;
        uint64_t v75 = 1024;
        __int16 v76 = v15;
        uint64_t v77 = 2080;
        *(void *)&id v78 = v56;
        WORD4(v7_Block_object_dispose(va, 8) = 1024;
        *(_DWORD *)((char *)&v78 + 10) = a3;
        HIWORD(v7_Block_object_dispose(va, 8) = 1024;
        v79[0] = v57;
        _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "%s:%d result %d, msgType %d(%s), dataInLen %u, dataOutLen %u",  buf,  0x34u);
        return inited;
      }
    }

    CFNumberRef v57 = -1;
    goto LABEL_84;
  }

  return inited;
}

uint64_t iap2_navigation_stopRoadObjectDetectionHandler(uint64_t *a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    uint64_t v4 = *(os_log_s **)(gLogObjects + 368);
  }

  else
  {
    uint64_t v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if (a1) {
      uint64_t v5 = a1[1];
    }
    else {
      uint64_t v5 = 0LL;
    }
    int v24 = 138412290;
    uint64_t v25 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "iAP2Navigation stopRoadObjectDetection Handler %@",  (uint8_t *)&v24,  0xCu);
  }

  if (!a1) {
    return 0LL;
  }
  uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0x11u);
  if (gLogObjects && gNumLogObjects >= 47)
  {
    char v7 = *(os_log_s **)(gLogObjects + 368);
  }

  else
  {
    char v7 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = a1[1];
    if (Feature) {
      uint64_t v9 = "exists";
    }
    else {
      uint64_t v9 = "missing!!";
    }
    uint64_t v10 = obfuscatedPointer(a2);
    int v24 = 138412802;
    uint64_t v25 = v8;
    __int16 v26 = 2080;
    int v27 = v9;
    __int16 v28 = 2048;
    uint64_t v29 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "iAP2Navigation stopRoadObjectDetection %@ navigation %s, param=%p",  (uint8_t *)&v24,  0x20u);
  }

  uint64_t result = 0LL;
  if (a2 && Feature)
  {
    if (*(_DWORD *)a2 == 4)
    {
      if (gLogObjects && gNumLogObjects >= 47)
      {
        int v12 = *(os_log_s **)(gLogObjects + 368);
      }

      else
      {
        int v12 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        uint64_t v13 = a1[1];
        uint64_t v14 = *(const char **)(a2 + 8);
        int v24 = 138412546;
        uint64_t v25 = v13;
        __int16 v26 = 2112;
        int v27 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "iAP2Navigation stopRoadObjectDetection %@, create msg, componentIDs=%@",  (uint8_t *)&v24,  0x16u);
      }

      uint64_t v15 = iAP2MsgInit((uint64_t)(a1 + 15), 3330, a1[24], 0xFFFF, 0LL, 0LL);
      uint64_t v16 = *(const __CFArray **)(a2 + 8);
      if (v16)
      {
        CFIndex Count = CFArrayGetCount(v16);
        if (Count >= 1)
        {
          CFIndex v18 = Count;
          for (CFIndex i = 0LL; i != v18; ++i)
          {
            ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 8), i);
            __addU16NumberParameterToMsg(v15, 0LL, 0, ValueAtIndex);
          }
        }
      }

      if (gLogObjects && gNumLogObjects >= 47)
      {
        uint64_t v21 = *(os_log_s **)(gLogObjects + 368);
      }

      else
      {
        uint64_t v21 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        uint64_t v22 = a1[1];
        int MsgID = iAP2MsgGetMsgID(v15);
        int v24 = 138412546;
        uint64_t v25 = v22;
        __int16 v26 = 1024;
        LODWORD(v27) = MsgID;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "iAP2Navigation stopRoadObjectDetection %@ send message %xh",  (uint8_t *)&v24,  0x12u);
      }

      iap2_sessionControl_sendOutgoingMessage(a1, v15);
      platform_navigation_deleteParams((void *)a2);
      return 1LL;
    }

    return 0LL;
  }

  return result;
}

void *_createFeature_6(void *a1)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    BOOL v2 = *(os_log_s **)(gLogObjects + 368);
  }

  else
  {
    BOOL v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "iAP2Navigation _createFeature", v4, 2u);
  }

  if (a1)
  {
    a1 = calloc(1uLL, 0x18uLL);
    if (a1)
    {
      *a1 = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      a1[1] = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    }
  }

  return a1;
}

uint64_t _destroyFeature_6(void **a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    uint64_t v4 = *(os_log_s **)(gLogObjects + 368);
  }

  else
  {
    uint64_t v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v8[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "iAP2Navigation _destroyFeature", (uint8_t *)v8, 2u);
  }

  uint64_t result = 0LL;
  if (a1 && a2)
  {
    uint64_t v6 = (CFTypeRef *)*a1;
    if (*a1)
    {
      platform_navigation_accessoryDetached(*(void *)(a2 + 8));
      platform_navigation_decrementUserCount();
      if (*v6)
      {
        CFRelease(*v6);
        CFTypeRef *v6 = 0LL;
      }

      CFTypeRef v7 = v6[1];
      if (v7)
      {
        CFRelease(v7);
        v6[1] = 0LL;
      }

      if (*a1)
      {
        free(*a1);
        *a1 = 0LL;
      }

      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

BOOL _startFeatureFromDevice_3(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 47)
  {
    BOOL v2 = *(os_log_s **)(gLogObjects + 368);
  }

  else
  {
    BOOL v2 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "iAP2Navigation _startFeatureFromDevice", buf, 2u);
  }

  uint64_t Feature = (CFDictionaryRef *)iap2_feature_getFeature(a1, 0x11u);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  if (Feature)
  {
    char v20 = 0;
    if (gLogObjects && gNumLogObjects >= 47)
    {
      uint64_t v5 = *(os_log_s **)(gLogObjects + 368);
    }

    else
    {
      uint64_t v5 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)CFIndex v18 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "iAP2Navigation _startFeatureFromDevice: routeGuidance supported, notify accessory attached",  v18,  2u);
    }

    int64_t Count = CFDictionaryGetCount(*Feature);
    CFTypeRef v7 = (const void **)calloc(Count, 8uLL);
    CFDictionaryGetKeysAndValues(*Feature, 0LL, v7);
    if (Count < 1)
    {
      if (!v7) {
        goto LABEL_23;
      }
    }

    else
    {
      uint64_t v8 = v7;
      do
      {
        uint64_t v9 = *v8++;
        CFArrayAppendValue(Mutable, v9);
        --Count;
      }

      while (Count);
    }

    free(v7);
LABEL_23:
    char v21 = 0;
    if (!iap2_identification_checkRequiredMsgIDs( a1,  (uint64_t)&gskMsgRoadObjectDetectionMainList,  3,  &v21)) {
      goto LABEL_37;
    }
    if (gLogObjects && gNumLogObjects >= 47)
    {
      uint64_t v10 = *(os_log_s **)(gLogObjects + 368);
    }

    else
    {
      uint64_t v10 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "iAP2Navigation _startFeatureFromDevice: roadObjectDetection supported, notify accessory attached",  v17,  2u);
    }

    int64_t v11 = CFDictionaryGetCount(Feature[1]);
    int v12 = (const void **)calloc(v11, 8uLL);
    CFDictionaryGetKeysAndValues(Feature[1], 0LL, v12);
    if (v11 < 1)
    {
      if (!v12) {
        goto LABEL_37;
      }
    }

    else
    {
      uint64_t v13 = v12;
      do
      {
        uint64_t v14 = *v13++;
        CFArrayAppendValue(Mutable, v14);
        --v11;
      }

      while (v11);
    }

    free(v12);
LABEL_37:
    platform_navigation_incrementUserCount();
    if (!a1 || (uint64_t v15 = *(void *)(a1 + 8)) == 0) {
      uint64_t v15 = 0LL;
    }
    platform_navigation_accessoryAttached(v15, (uint64_t)Mutable);
  }

  if (Mutable) {
    CFRelease(Mutable);
  }
  return Feature != 0LL;
}

uint64_t _checkIdentificationInfo_5(uint64_t a1)
{
  char v8 = 0;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&gskMsgNavigationMainList, 5u, &v8);
  uint64_t v3 = v2;
  if (v8) {
    BOOL v4 = (_DWORD)v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    char v7 = 0;
    uint64_t v5 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&gskMsgRoadObjectDetectionMainList, 3u, &v7);
    if (v7)
    {
      uint64_t v3 = 1LL;
      iap2_identification_rejectMsgID(a1, 3328LL, 1, 1u);
      iap2_identification_rejectMsgID(a1, 3329LL, 0, 1u);
      iap2_identification_rejectMsgID(a1, 3330LL, 1, 1u);
    }

    else
    {
      uint64_t v3 = v5;
      if (v8 && !(_DWORD)v5)
      {
        iap2_features_createFeature(a1, 0x11u);
        iap2_identification_setIdentifiedForFeature(a1, 0x11u);
      }
    }
  }

  return v3;
}

void _handleIdentificationRejection(uint64_t a1)
{
  uint64_t Feature = (const void **)iap2_feature_getFeature(a1, 0x11u);
  if (Feature)
  {
    uint64_t v2 = Feature;
    uint64_t v3 = *Feature;
    if (v3)
    {
      CFRelease(v3);
      *uint64_t v2 = 0LL;
    }

    BOOL v4 = v2[1];
    if (v4)
    {
      CFRelease(v4);
      v2[1] = 0LL;
    }
  }

BOOL _parseIdentificationParams_0(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  if (a1)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)a3);
    if (gLogObjects && gNumLogObjects >= 47)
    {
      char v7 = *(os_log_s **)(gLogObjects + 368);
    }

    else
    {
      char v7 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v59) = ParamID;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "parsing identification paramID 0x%X", buf, 8u);
    }

    if (ParamID == 33)
    {
      uint64_t v19 = a1;
      int v20 = 33;
      unsigned int v21 = 1;
LABEL_107:
      iap2_identification_addRejectParam(v19, v20, v21);
      return 0LL;
    }

    if (ParamID != 30) {
      return 0LL;
    }
    int v57 = -1;
    if (iAP2MsgGetParamID((uint64_t)a3) == 30)
    {
      unint64_t FirstParam = iAP2MsgGetFirstParam(a2, a3);
      if (FirstParam)
      {
        NextParam = (unsigned __int16 *)FirstParam;
        CFNumberRef v55 = 0LL;
        CFNumberRef v56 = 0LL;
        CFNumberRef v50 = 0LL;
        CFNumberRef cf = 0LL;
        CFNumberRef v53 = 0LL;
        CFNumberRef v54 = 0LL;
        CFNumberRef v52 = 0LL;
        CFStringRef v10 = 0LL;
        CFNumberRef v11 = 0LL;
        do
        {
          switch(iAP2MsgGetParamID((uint64_t)NextParam))
          {
            case 0u:
              *(_WORD *)buf = -21846;
              *(_WORD *)buf = iAP2MsgGetDataAsU16(NextParam, &v57);
              if (!v57)
              {
                if (v11) {
                  CFRelease(v11);
                }
                CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, buf);
              }

              break;
            case 1u:
              DataAsString = iAP2MsgGetDataAsString(NextParam, (BOOL *)&v57);
              if (!v57)
              {
                uint64_t v13 = (const char *)DataAsString;
                if (v10) {
                  CFRelease(v10);
                }
                CFStringRef v10 = CFStringCreateWithCString(kCFAllocatorDefault, v13, 0x8000100u);
              }

              break;
            case 2u:
              *(_WORD *)buf = -21846;
              *(_WORD *)buf = iAP2MsgGetDataAsU16(NextParam, &v57);
              if (!v57)
              {
                if (cf) {
                  CFRelease(cf);
                }
                CFNumberRef cf = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, buf);
              }

              break;
            case 3u:
              *(_WORD *)buf = -21846;
              *(_WORD *)buf = iAP2MsgGetDataAsU16(NextParam, &v57);
              if (!v57)
              {
                if (v52) {
                  CFRelease(v52);
                }
                CFNumberRef v52 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, buf);
              }

              break;
            case 4u:
              *(_WORD *)buf = -21846;
              *(_WORD *)buf = iAP2MsgGetDataAsU16(NextParam, &v57);
              if (!v57)
              {
                if (v53) {
                  CFRelease(v53);
                }
                CFNumberRef v53 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, buf);
              }

              break;
            case 5u:
              *(_WORD *)buf = -21846;
              *(_WORD *)buf = iAP2MsgGetDataAsU16(NextParam, &v57);
              if (!v57)
              {
                if (v54) {
                  CFRelease(v54);
                }
                CFNumberRef v54 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, buf);
              }

              break;
            case 6u:
              *(_WORD *)buf = -21846;
              *(_WORD *)buf = iAP2MsgGetDataAsU16(NextParam, &v57);
              if (!v57)
              {
                if (v55) {
                  CFRelease(v55);
                }
                CFNumberRef v55 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, buf);
              }

              break;
            case 7u:
              *(_WORD *)buf = -21846;
              *(_WORD *)buf = iAP2MsgGetDataAsU16(NextParam, &v57);
              if (!v57)
              {
                if (v50) {
                  CFRelease(v50);
                }
                CFNumberRef v50 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, buf);
              }

              break;
            case 8u:
              *(_WORD *)buf = -21846;
              *(_WORD *)buf = iAP2MsgGetDataAsU16(NextParam, &v57);
              if (!v57)
              {
                if (v56) {
                  CFRelease(v56);
                }
                CFNumberRef v56 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, buf);
              }

              break;
            default:
              break;
          }

          NextParam = iAP2MsgGetNextParam(a2, a3, NextParam);
        }

        while (NextParam);
        int v14 = 2;
        CFNumberRef v15 = v11;
        if (!v11)
        {
          CFNumberRef v17 = cf;
          CFNumberRef v16 = v52;
          if (!cf) {
            goto LABEL_91;
          }
          goto LABEL_90;
        }

        CFNumberRef v17 = cf;
        CFNumberRef v16 = v52;
        if (v10)
        {
          if (gLogObjects && gNumLogObjects >= 47)
          {
            CFIndex v18 = *(os_log_s **)(gLogObjects + 368);
          }

          else
          {
            CFIndex v18 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138414338;
            CFNumberRef v59 = v15;
            __int16 v60 = 2112;
            CFStringRef v61 = v10;
            __int16 v62 = 2112;
            CFNumberRef v63 = cf;
            __int16 v64 = 2112;
            CFNumberRef v65 = v52;
            __int16 v66 = 2112;
            CFNumberRef v67 = v53;
            __int16 v68 = 2112;
            CFNumberRef v69 = v54;
            __int16 v70 = 2112;
            CFNumberRef v71 = v55;
            __int16 v72 = 2112;
            CFNumberRef v73 = v50;
            __int16 v74 = 2112;
            CFNumberRef v75 = v56;
            _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "Adding Navigation Display Component %@: '%@' maxCurRoadNameLen=%@ maxDestinationRoadNameLen=%@ maxPostMane uverRoadNameLen=%@ maxManeuverDescriptionLen=%@ maxGuidanceManeuverCapacity=%@ maxLaneGuidanceDescriptionL en=%@ maxLaneGuidanceCapacityObj=%@",  buf,  0x5Cu);
          }

          if (!iap2_feature_getFeature(a1, 0x11u)) {
            iap2_features_createFeature(a1, 0x11u);
          }
          uint64_t Feature = (CFMutableDictionaryRef *)iap2_feature_getFeature(a1, 0x11u);
          if (!*Feature)
          {
            CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
            *uint64_t Feature = Mutable;
            if (!Mutable)
            {
              if (gLogObjects && gNumLogObjects >= 47)
              {
                __int16 v26 = *(os_log_s **)(gLogObjects + 368);
              }

              else
              {
                __int16 v26 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
                _parseIdentificationParams_cold_2_0(v26, v27, v28, v29, v30, v31, v32, v33);
              }
              int v14 = 10;
              if (!cf)
              {
LABEL_91:
                if (v16) {
                  CFRelease(v16);
                }
                if (v53) {
                  CFRelease(v53);
                }
                if (v54) {
                  CFRelease(v54);
                }
                if (v55) {
                  CFRelease(v55);
                }
                if (v56) {
                  CFRelease(v56);
                }
                if (v15) {
                  CFRelease(v15);
                }
                if (v10) {
                  CFRelease(v10);
                }
                if (!v14) {
                  return 1LL;
                }
                goto LABEL_106;
              }

LABEL_90:
              CFRelease(v17);
              goto LABEL_91;
            }
          }

          *(_WORD *)buf = -21846;
          CFNumberGetValue(v15, kCFNumberSInt16Type, buf);
          if (CFDictionaryContainsKey(*Feature, v15))
          {
            CFDictionaryRemoveAllValues(*Feature);
            int v14 = 3;
            if (!cf) {
              goto LABEL_91;
            }
            goto LABEL_90;
          }

          DisplayComponentDict = platform_navigation_createDisplayComponentDict( *(void *)(a1 + 8),  *(__int16 *)buf,  v10);
          if (cf)
          {
            CFNumberGetValue(cf, kCFNumberSInt16Type, buf);
            platform_navigation_displayComponentAddMaxCurrentRoadNameLength(DisplayComponentDict, *(__int16 *)buf);
          }

          if (v52)
          {
            CFNumberGetValue(v52, kCFNumberSInt16Type, buf);
            platform_navigation_displayComponentAddMaxDestinationNameLength(DisplayComponentDict, *(__int16 *)buf);
          }

          if (v53)
          {
            CFNumberGetValue(v53, kCFNumberSInt16Type, buf);
            platform_navigation_displayComponentAddMaxAfterManeuverRoadNameLength(DisplayComponentDict, *(__int16 *)buf);
          }

          if (v54)
          {
            CFNumberGetValue(v54, kCFNumberSInt16Type, buf);
            platform_navigation_displayComponentAddManeuverDescriptionLength(DisplayComponentDict, *(__int16 *)buf);
          }

          if (v55)
          {
            CFNumberGetValue(v55, kCFNumberSInt16Type, buf);
            platform_navigation_displayComponentAddGuidanceManeuverCapacity(DisplayComponentDict, *(__int16 *)buf);
          }

          if (v50)
          {
            CFNumberGetValue(v50, kCFNumberSInt16Type, buf);
            platform_navigation_displayComponentAddLaneGuidanceDescriptionLength(DisplayComponentDict, *(__int16 *)buf);
          }

          if (v56)
          {
            CFNumberGetValue(v56, kCFNumberSInt16Type, buf);
            platform_navigation_displayComponentAddLaneGuidanceCapacity(DisplayComponentDict, *(__int16 *)buf);
          }

          CFDictionaryAddValue(*Feature, v15, DisplayComponentDict);
          if (DisplayComponentDict) {
            CFRelease(DisplayComponentDict);
          }
          int v14 = 0;
        }

        if (!cf) {
          goto LABEL_91;
        }
        goto LABEL_90;
      }

      int v14 = 2;
    }

    else
    {
      uint64_t v42 = (os_log_s *)logObjectForModule_12();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
        _parseIdentificationParams_cold_5(v42, v43, v44, v45, v46, v47, v48, v49);
      }
      int v14 = 10;
    }

              __int16 v70 = (os_log_s *)logObjectForModule_19();
              if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315650;
                id v78 = "_qiAuth_protocol_handleResponse_DIGESTS";
                uint64_t v79 = 1024;
                id v80 = 1989;
                uint64_t v81 = 1024;
                int v82 = v46;
                _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_DEFAULT,  "%s:%d Failed to read cert from cache! slot %d",  buf,  0x18u);
              }

              *uint64_t v49 = 0LL;
              *(_WORD *)(a1 + 2LL * v46 + 324) = 0;
              *(_BYTE *)(a1 + 322) = v74;
LABEL_93:
              CFNumberRef v71 = (os_log_s *)logObjectForModule_19();
              __int16 v72 = os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT);
              if (v72)
              {
                CFNumberRef v73 = *(unsigned __int8 *)(a1 + 48);
                *(_DWORD *)buf = 136315650;
                id v78 = "_qiAuth_protocol_handleResponse_DIGESTS";
                uint64_t v79 = 1024;
                id v80 = 2034;
                uint64_t v81 = 1024;
                int v82 = v73;
                _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_DEFAULT,  "%s:%d GET_CERTIFICATE, currentSlot %d",  buf,  0x18u);
              }

              *(_DWORD *)(a1 + 244) = 8323072;
              unsigned int inited = qiAuth_protocol_initMsg_GET_CERTIFICATE( v72,  *(unsigned __int8 *)(a1 + 12),  *(unsigned __int8 *)(a1 + 48),  0,  0x7Fu,  (_BYTE *)v31,  v12,  a6);
              goto LABEL_51;
            }

            uint64_t v43 = v28 & ~v27;
            *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = 4;
            uint64_t v44 = (os_log_s *)logObjectForModule_19();
            uint64_t v45 = os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT);
            if (v45)
            {
              *(_DWORD *)buf = 136315650;
              id v78 = "_qiAuth_protocol_handleResponse_DIGESTS";
              uint64_t v79 = 1024;
              id v80 = 1925;
              uint64_t v81 = 1024;
              int v82 = v43;
              _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "%s:%d Need more digests, GET_DIGESTS, slotRequestMask 0x%x",  buf,  0x18u);
            }

            unsigned int inited = qiAuth_protocol_initMsg_GET_DIGESTS(v45, *(unsigned __int8 *)(a1 + 12), v43, v75, v12, a6);
          }
        }
      }
    }
  }

  else
  {
    int v14 = 0;
    unsigned int inited = 4294967294LL;
  }

LABEL_106:
    uint64_t v19 = a1;
    int v20 = 30;
    unsigned int v21 = v14;
    goto LABEL_107;
  }

  int v34 = (os_log_s *)logObjectForModule_12();
  BOOL result = os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
  if (result)
  {
    _parseIdentificationParams_cold_1_0(v34, v35, v36, v37, v38, v39, v40, v41);
    return 0LL;
  }

  return result;
}

  ;
}

void OUTLINED_FUNCTION_1_0( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_6_6()
{
  return iAP2MsgGetMsgID(v0);
}

uint64_t OUTLINED_FUNCTION_9_4(uint64_t a1)
{
  return iAP2MsgGetParamID(a1);
}

  ;
}

  ;
}

  ;
}

uint64_t acc_auth_protocol_sizeofSessionData()
{
  return _acc_auth_protocol_sizeofSessionImplementationData() + 1360;
}

uint64_t acc_auth_protocol_sizeofMessageData(int a1, int a2, uint64_t a3)
{
  uint64_t v6 = 7LL;
  switch(a1)
  {
    case 160:
      int v15 = -1431655766;
      uint64_t v6 = _acc_auth_protocol_supportedAuthTypes(1, &v15, 4u) + 6;
      break;
    case 161:
      break;
    case 162:
    case 163:
      uint64_t v6 = 69LL;
      break;
    case 164:
    case 165:
      LODWORD(v7) = 0;
      switch(a2)
      {
        case 0:
        case 4:
        case 7:
          LODWORD(v7) = 36;
          break;
        case 1:
          break;
        case 2:
        case 5:
          LODWORD(v7) = 1030;
          break;
        case 3:
          LODWORD(v7) = 7;
          break;
        case 6:
          goto LABEL_22;
        case 8:
          LODWORD(v7) = 132;
          break;
        default:
          if (a2 == 128)
          {
            if (a3 < 7 && ((0x77u >> a3) & 1) != 0)
            {
              uint64_t v7 = dword_10019E238[(int)a3];
            }

            else
            {
              if (gLogObjects && gNumLogObjects >= 55)
              {
                uint64_t v9 = *(os_log_s **)(gLogObjects + 432);
              }

              else
              {
                uint64_t v9 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
              {
                int v15 = 67109120;
                int v16 = a3;
                _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "[AccAuth] sizeofMessageData: unknown or unsupported encryptedInfoType(%#04x) \n",  (uint8_t *)&v15,  8u);
              }

              uint64_t v7 = 0LL;
            }

            if (gLogObjects && gNumLogObjects >= 55)
            {
              CFNumberRef v11 = *(os_log_s **)(gLogObjects + 432);
            }

            else
            {
              CFNumberRef v11 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
              acc_auth_protocol_sizeofMessageData_cold_5(a3, v7, v11);
            }
          }

          else
          {
LABEL_22:
            if (gLogObjects && gNumLogObjects >= 55)
            {
              CFStringRef v10 = *(os_log_s **)(gLogObjects + 432);
            }

            else
            {
              CFStringRef v10 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
            {
              int v15 = 67109120;
              int v16 = a2;
              _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "[AccAuth] sizeofMessageData: unknown or unsupported infoType(%#04x) \n",  (uint8_t *)&v15,  8u);
            }

            LODWORD(v7) = 0;
          }

          break;
      }

      if (gLogObjects && gNumLogObjects >= 55)
      {
        int v12 = *(os_log_s **)(gLogObjects + 432);
      }

      else
      {
        int v12 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        int v15 = 67109632;
        int v16 = a2;
        __int16 v17 = 1024;
        int v18 = a3;
        __int16 v19 = 1024;
        int v20 = v7;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "[AccAuth] sizeofAuthInfoData: infoType %d, encryptedInfoType %d, dataLen %d \n",  (uint8_t *)&v15,  0x14u);
      }

      uint64_t v6 = (v7 + 2);
      break;
    case 166:
    case 167:
      uint64_t v6 = 1LL;
      break;
    default:
      if (gLogObjects && gNumLogObjects >= 55)
      {
        char v8 = *(os_log_s **)(gLogObjects + 432);
      }

      else
      {
        char v8 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        int v15 = 67109120;
        int v16 = a1;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "[AccAuth] sizeofMessageData: unknown or unsupported message(%#04x) \n",  (uint8_t *)&v15,  8u);
      }

      uint64_t v6 = 0LL;
      break;
  }

  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v13 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    uint64_t v13 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    int v15 = 67109888;
    int v16 = a1;
    __int16 v17 = 1024;
    int v18 = a2;
    __int16 v19 = 1024;
    int v20 = a3;
    __int16 v21 = 1024;
    int v22 = v6;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "[AccAuth] sizeofMessageData: msgID %#04x, infoType %d, encryptedInfoType %d, messageDataLen %d \n",  (uint8_t *)&v15,  0x1Au);
  }

  return v6;
}

void *logObjectForModule_13()
{
  if (gLogObjects && gNumLogObjects >= 55) {
    return *(void **)(gLogObjects + 432);
  }
  uint64_t v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

uint64_t acc_auth_protocol_maxPayloadSize(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = *(_DWORD *)(result + 1336);
    BOOL v2 = v1 >= 4;
    unsigned int v3 = v1 - 4;
    if (v2) {
      return v3;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t acc_auth_protocol_maxSegmentSize(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = *(_DWORD *)(result + 1336);
    if (v1 <= 4) {
      return 0LL;
    }
    else {
      return v1 - 10;
    }
  }

  return result;
}

uint64_t acc_auth_protocol_maxSizeofMessageData()
{
  return acc_auth_protocol_sizeofMessageData(164, 2, 255LL);
}

BOOL acc_auth_protocol_validMessageID(int a1)
{
  return (a1 & 0xFFFFFFF8) == 160;
}

uint64_t acc_auth_protocol_isRespMessage(_BYTE *a1)
{
  if (!a1) {
    return 0LL;
  }
  if ((*a1 & 0xF8) == 0xA0)
  {
    uint64_t v2 = *a1 & 1;
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 55)
    {
      unsigned int v3 = *(os_log_s **)(gLogObjects + 432);
    }

    else
    {
      unsigned int v3 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    uint64_t v2 = 0LL;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *a1;
      v7[0] = 67109120;
      v7[1] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[AccAuth] isRespMessage: invalid incoming messageID(%#04x) ! \n",  (uint8_t *)v7,  8u);
      uint64_t v2 = 0LL;
    }
  }

  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v5 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    uint64_t v5 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    acc_auth_protocol_isRespMessage_cold_1();
  }
  return v2;
}

uint64_t acc_auth_protocol_sizeofMessage(uint64_t a1, unsigned int a2, int *a3, int *a4)
{
  uint64_t result = 0LL;
  if (!a1 || a2 < 4) {
    return result;
  }
  int v6 = *(char *)(a1 + 3);
  if (v6 < 0)
  {
    uint64_t v9 = *(_BYTE *)(a1 + 3) & 0x7F;
    if ((v6 & 0x7Fu) <= 3)
    {
      int v8 = v9 + 4;
      if ((int)v9 + 4 <= a2)
      {
        int v7 = 0;
        if ((*(_BYTE *)(a1 + 3) & 0x7F) != 0)
        {
          CFStringRef v10 = (unsigned __int8 *)(a1 + 4);
          do
          {
            int v11 = *v10++;
            int v7 = v11 | (v7 << 8);
            --v9;
          }

          while (v9);
        }

        uint64_t result = (v7 + v8);
      }
    }

    return 0LL;
  }

  int v7 = *(unsigned __int8 *)(a1 + 3);
  uint64_t result = (v7 + 4);
  int v8 = 4;
LABEL_6:
  if (a3) {
    *a3 = v8;
  }
  if (a4) {
    *a4 = v7;
  }
  return result;
}

uint64_t acc_auth_protocol_messagePayload( uint64_t result, unsigned int a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v12 = 0LL;
  if (result)
  {
    uint64_t v8 = result;
    int v9 = acc_auth_protocol_sizeofMessage(result, a2, (int *)&v12 + 1, (int *)&v12);
    uint64_t result = 0LL;
    if (v9)
    {
      int v10 = v12;
      if ((_DWORD)v12)
      {
        uint64_t v11 = HIDWORD(v12);
        if (a3) {
          *a3 = v9;
        }
        uint64_t result = v8 + v11;
        if (a4) {
          *a4 = v11;
        }
        if (a5) {
          *a5 = v10;
        }
      }
    }
  }

  return result;
}

BOOL acc_auth_protocol_initMessage(unsigned __int8 *a1, int a2, unsigned __int8 *a3, unsigned int a4)
{
  BOOL result = 1LL;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (a4 >= 4)
        {
          int v7 = *((_DWORD *)a1 + 286);
          if (v7)
          {
            if (v7 == 1)
            {
              unsigned __int8 v9 = a1[69];
              unsigned __int8 v8 = v9 & 0xF;
              a1[70] = v9 & 0xF;
              a1[69] = v9 + 1;
            }

            else if (v7 == 2)
            {
              unsigned __int8 v8 = a1[71];
              a1[70] = v8;
            }

            else
            {
              unsigned __int8 v8 = a1[70];
            }

            *a3 = a2;
            a3[1] = 16 * a1[1];
            a3[2] = *a1 & 0xF | (16 * v8);
            a3[3] = 0;
            if (gLogObjects && gNumLogObjects >= 55)
            {
              int v10 = *(os_log_s **)(gLogObjects + 432);
            }

            else
            {
              int v10 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            BOOL result = os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG);
            if (result)
            {
              int v11 = *a1;
              int v12 = *a3;
              int v13 = a3[1];
              int v14 = a3[2];
              int v15 = a3[3];
              v16[0] = 67110400;
              v16[1] = v11;
              __int16 v17 = 1024;
              int v18 = v12;
              __int16 v19 = 1024;
              int v20 = v13;
              __int16 v21 = 1024;
              int v22 = v14;
              __int16 v23 = 1024;
              int v24 = v15;
              __int16 v25 = 1024;
              int v26 = 0;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "[AccAuth] initMessage: sessionID %d, msgID %#04x, ctl0 %#04x, ctl1 %#04x, len %d, errorNo %d \n",  (uint8_t *)v16,  0x26u);
              return 0LL;
            }
          }
        }
      }
    }
  }

  return result;
}

BOOL acc_auth_protocol_initSetupMessage(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3)
{
  BOOL result = 1LL;
  if (a1)
  {
    if (a2)
    {
      if (a3 >= 4)
      {
        int v7 = *((_DWORD *)a1 + 286);
        if (v7)
        {
          if (v7 == 1)
          {
            acc_auth_protocol_initMessage(a1, 160, a2, a3);
            int v7 = *((_DWORD *)a1 + 286);
          }

          if (v7 == 2) {
            acc_auth_protocol_initMessage(a1, 161, a2, a3);
          }
          a2[4] = 0;
          a2[5] = a1[1327];
          a2[6] = *((_WORD *)a1 + 663);
          a2[7] = BYTE1(*((_DWORD *)a1 + 331));
          a2[8] = *((_DWORD *)a1 + 331);
          a2[3] += 5;
          a2[9] = 1;
          int v8 = *((_DWORD *)a1 + 286);
          uint64_t v9 = gLogObjects;
          if (v8 == 1)
          {
            if (gLogObjects && gNumLogObjects >= 55)
            {
              int v10 = *(os_log_s **)(gLogObjects + 432);
            }

            else
            {
              int v10 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
              acc_auth_protocol_initSetupMessage_cold_4();
            }
            memcpy(a2 + 11, a1 + 1328, *((unsigned int *)a1 + 333));
            unsigned __int8 v11 = a1[1332];
            a2[10] = v11;
            a2[3] += v11 + 2;
            int v8 = *((_DWORD *)a1 + 286);
            uint64_t v9 = gLogObjects;
          }

          if (v8 == 2)
          {
            if (v9 && gNumLogObjects >= 55)
            {
              int v12 = *(os_log_s **)(v9 + 432);
            }

            else
            {
              int v12 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
              acc_auth_protocol_initSetupMessage_cold_2((uint64_t)a2, v12);
            }
            a2[11] = *((_DWORD *)a1 + 289);
            a2[10] = 1;
            a2[3] += 3;
            uint64_t v9 = gLogObjects;
          }

          if (v9 && gNumLogObjects >= 55)
          {
            int v13 = *(os_log_s **)(v9 + 432);
          }

          else
          {
            int v13 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          BOOL result = os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG);
          if (result)
          {
            int v14 = *a1;
            int v15 = *a2;
            int v16 = a2[1];
            int v17 = a2[2];
            int v18 = a2[3];
            if ((char)a2[3] < 0)
            {
              int v19 = a2[4];
              int v20 = a2[5];
            }

            else
            {
              int v19 = 0;
              int v20 = 0;
            }

            int v21 = a2[10];
            unsigned int v22 = _byteswap_ulong(*(_DWORD *)(a2 + 5));
            v23[0] = 67111424;
            v23[1] = v14;
            __int16 v24 = 1024;
            int v25 = v15;
            __int16 v26 = 1024;
            int v27 = v16;
            __int16 v28 = 1024;
            int v29 = v17;
            __int16 v30 = 1024;
            int v31 = v18;
            __int16 v32 = 1024;
            int v33 = v19;
            __int16 v34 = 1024;
            int v35 = v20;
            __int16 v36 = 1024;
            unsigned int v37 = v22;
            __int16 v38 = 1024;
            int v39 = v21;
            __int16 v40 = 1024;
            int v41 = 0;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "[AccAuth] initSetupMessage: sessionID %d, msgID %#04x, ctl0 %#04x, ctl1 %#04x, len %02x (%02x %02x), chara cteristics %#10x, authTypesLen %d, errorNo %d \n",  (uint8_t *)v23,  0x3Eu);
            return 0LL;
          }
        }
      }
    }
  }

  return result;
}

uint64_t acc_auth_protocol_initStartMessage(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3)
{
  BOOL v3 = 1LL;
  if (a1)
  {
    if (a2)
    {
      if (a3 >= 4)
      {
        int v7 = *((_DWORD *)a1 + 286);
        if (v7)
        {
          if (v7 == 1)
          {
            LODWORD(v3) = acc_auth_protocol_initMessage(a1, 162, a2, a3);
            int v7 = *((_DWORD *)a1 + 286);
          }

          if (v7 == 2) {
            LODWORD(v3) = acc_auth_protocol_initMessage(a1, 163, a2, a3);
          }
          if (v3)
          {
            return 1LL;
          }

          else
          {
            BOOL v3 = *((_DWORD *)a1 + 289) == 1 && acc_auth_protocol_initStartMessage1Way(a1, a2, a3);
            if (gLogObjects && gNumLogObjects >= 55)
            {
              int v8 = *(os_log_s **)(gLogObjects + 432);
            }

            else
            {
              int v8 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
            {
              int v10 = *a1;
              int v11 = *((_DWORD *)a1 + 289);
              int v12 = *a2;
              int v13 = a2[1];
              int v14 = a2[2];
              int v17 = 0;
              acc_auth_protocol_sizeofMessage((uint64_t)a2, a3, (int *)buf, &v17);
              int v15 = a2[5];
              int v16 = a2[39];
              *(_DWORD *)buf = 67111168;
              int v19 = v10;
              __int16 v20 = 1024;
              int v21 = v11;
              __int16 v22 = 1024;
              int v23 = v12;
              __int16 v24 = 1024;
              int v25 = v13;
              __int16 v26 = 1024;
              int v27 = v14;
              __int16 v28 = 1024;
              int v29 = v17;
              __int16 v30 = 1024;
              int v31 = v15;
              __int16 v32 = 1024;
              int v33 = v16;
              __int16 v34 = 1024;
              BOOL v35 = v3;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "[AccAuth] initStartMessage: sessionID %d, negotiatedAuthType %d, msgID %#04x, ctl0 %#04x, ctl1 %#04x, le n %d, sessionNonceLen %dx, dhPublicKeyLen %d, errorNo %d \n",  buf,  0x38u);
            }
          }
        }
      }
    }
  }

  return v3;
}

BOOL acc_auth_protocol_initInfoCommonMessage( unsigned __int8 *a1, unsigned __int8 a2, unsigned __int8 *a3, unsigned int a4)
{
  BOOL result = 1LL;
  if (a1 && a3 && a4 >= 4)
  {
    int v9 = *((_DWORD *)a1 + 286);
    if (v9 == 1)
    {
      LODWORD(result) = acc_auth_protocol_initMessage(a1, 164, a3, a4);
      int v9 = *((_DWORD *)a1 + 286);
    }

    if (v9 == 2) {
      LODWORD(result) = acc_auth_protocol_initMessage(a1, 165, a3, a4);
    }
    if (result)
    {
      return 1LL;
    }

    else
    {
      a3[4] = 0;
      a3[5] = a2;
      a3[3] += 2;
      if (gLogObjects && gNumLogObjects >= 55)
      {
        int v10 = *(os_log_s **)(gLogObjects + 432);
      }

      else
      {
        int v10 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      BOOL result = os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG);
      if (result)
      {
        int v11 = *a1;
        int v12 = *a3;
        int v13 = a3[1];
        int v14 = a3[2];
        int v15 = a3[3];
        int v16 = a3[5];
        if ((char)a3[3] < 0)
        {
          int v17 = a3[4];
          int v18 = a3[5];
        }

        else
        {
          int v17 = 0;
          int v18 = 0;
        }

        v19[0] = 67111168;
        v19[1] = v11;
        __int16 v20 = 1024;
        int v21 = v12;
        __int16 v22 = 1024;
        int v23 = v13;
        __int16 v24 = 1024;
        int v25 = v14;
        __int16 v26 = 1024;
        int v27 = v15;
        __int16 v28 = 1024;
        int v29 = v17;
        __int16 v30 = 1024;
        int v31 = v18;
        __int16 v32 = 1024;
        int v33 = v16;
        __int16 v34 = 1024;
        int v35 = 0;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "[AccAuth] initInfoCommonMessage: sessionID %d, msgID %#04x, ctl0 %#04x, ctl1 %#04x, len %02x (%02x %02x), info Type %d, errorNo %d \n",  (uint8_t *)v19,  0x38u);
        return 0LL;
      }
    }
  }

  return result;
}

BOOL acc_auth_protocol_initInfoCommonMessageExtendedLength( unsigned __int8 *a1, unsigned __int8 a2, unsigned __int8 *a3, unsigned int a4, __int16 a5)
{
  if (!a1 || !a3 || a4 < 4) {
    return 1LL;
  }
  BOOL result = acc_auth_protocol_initInfoCommonMessage(a1, a2, a3, a4);
  a3[3] = -126;
  a3[4] = HIBYTE(a5);
  a3[5] = a5;
  a3[6] = 0;
  a3[7] = a2;
  return result;
}

BOOL acc_auth_protocol_initFinishMessage(unsigned __int8 *a1, int a2, unsigned __int8 *a3, unsigned int a4)
{
  BOOL inited = 1LL;
  if (a1 && a3 && a4 >= 4)
  {
    int v9 = *((_DWORD *)a1 + 286);
    if (v9 == 1)
    {
      BOOL inited = acc_auth_protocol_initMessage(a1, 166, a3, a4);
      int v9 = *((_DWORD *)a1 + 286);
    }

    if (v9 == 2) {
      BOOL inited = acc_auth_protocol_initMessage(a1, 167, a3, a4);
    }
    if (a2)
    {
      a3[4] = 1;
      a3[5] = HIBYTE(a2);
      a3[6] = BYTE2(a2);
      a3[7] = BYTE1(a2);
      char v10 = 5;
      a3[8] = a2;
    }

    else
    {
      a3[4] = 0;
      char v10 = 1;
    }

    a3[3] += v10;
    if (gLogObjects && gNumLogObjects >= 55)
    {
      int v11 = *(os_log_s **)(gLogObjects + 432);
    }

    else
    {
      int v11 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      int v13 = *a1;
      int v14 = *a3;
      int v15 = a3[1];
      int v16 = a3[2];
      int v18 = 0;
      acc_auth_protocol_sizeofMessage((uint64_t)a3, a4, (int *)buf, &v18);
      int v17 = a3[4];
      *(_DWORD *)buf = 67110656;
      int v20 = v13;
      __int16 v21 = 1024;
      int v22 = v14;
      __int16 v23 = 1024;
      int v24 = v15;
      __int16 v25 = 1024;
      int v26 = v16;
      __int16 v27 = 1024;
      int v28 = v18;
      __int16 v29 = 1024;
      int v30 = v17;
      __int16 v31 = 1024;
      BOOL v32 = inited;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "[AccAuth] initFinishMessage: sessionID %d, msgID %#04x, ctl0 %#04x, ctl1 %#04x, len %d, paramID0 %d, errorNo %d \n",  buf,  0x2Cu);
    }
  }

  return inited;
}

uint64_t acc_auth_protocol_initInfoChallengeMessage( unsigned __int8 *a1, const void *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5)
{
  uint64_t v5 = 1LL;
  if (a1 && a4 && a5 >= 4)
  {
    if (a2 && (a3 - 1) <= 0x1Fu && !acc_auth_protocol_initInfoCommonMessage(a1, 7u, a4, a5))
    {
      a4[6] = 10;
      a4[7] = a3;
      memcpy(a4 + 8, a2, a3);
      uint64_t v5 = 0LL;
      a4[3] += a3 + 2;
    }

    if (gLogObjects && gNumLogObjects >= 55)
    {
      int v11 = *(os_log_s **)(gLogObjects + 432);
    }

    else
    {
      int v11 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      int v13 = *((_DWORD *)a1 + 286);
      int v14 = *a1;
      int v15 = *a4;
      int v16 = a4[1];
      int v17 = a4[2];
      int v21 = 0;
      acc_auth_protocol_sizeofMessage((uint64_t)a4, a5, (int *)buf, &v21);
      int v18 = a4[5];
      int v19 = a4[6];
      int v20 = a4[7];
      *(_DWORD *)buf = 67111424;
      int v23 = v13;
      __int16 v24 = 1024;
      int v25 = v14;
      __int16 v26 = 1024;
      int v27 = v15;
      __int16 v28 = 1024;
      int v29 = v16;
      __int16 v30 = 1024;
      int v31 = v17;
      __int16 v32 = 1024;
      int v33 = v21;
      __int16 v34 = 1024;
      int v35 = v18;
      __int16 v36 = 1024;
      int v37 = v19;
      __int16 v38 = 1024;
      int v39 = v20;
      __int16 v40 = 1024;
      int v41 = v5;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "[AccAuth] initInfoChallengeMessage: role %d, sessionID %d, msgID %#04x, ctl0 %#04x, ctl1 %#04x, len %d, infoType %d, paramID1 %d, challengeLen %d, errorNo %d \n",  buf,  0x3Eu);
    }
  }

  return v5;
}

uint64_t acc_auth_protocol_determineAuthType( int a1, unsigned __int8 *a2, unsigned int a3, int a4, unsigned __int8 *a5, unsigned int a6, int a7, _BYTE *a8, int *a9)
{
  uint64_t v9 = 1LL;
  if (a1 && a2 && a3 && a5 && a6 && a8 && a9)
  {
    unint64_t v15 = 0LL;
    do
    {
      unint64_t v16 = 0LL;
      do
      {
        if (a5[v16] == a2[v15]) {
          int v17 = a2[v15];
        }
        else {
          int v17 = 4;
        }
        ++v16;
      }

      while (v16 < a6 && v17 == 4);
      ++v15;
    }

    while (v15 < a3 && v17 == 4);
    if (v17 == 4)
    {
      uint64_t v9 = 1LL;
    }

    else
    {
      uint64_t v9 = 0LL;
      *a8 = v17;
      *a9 = a7 & a4;
    }

    if (gLogObjects && gNumLogObjects >= 55)
    {
      int v18 = *(os_log_s **)(gLogObjects + 432);
    }

    else
    {
      int v18 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = *a9;
      int v20 = *a2;
      int v21 = a2[1];
      int v22 = a2[2];
      int v23 = a2[3];
      int v24 = *a5;
      int v25 = a5[1];
      int v26 = a5[2];
      int v27 = a5[3];
      int v28 = *a8;
      *(_DWORD *)buf = 67112960;
      int v34 = a1;
      __int16 v35 = 1024;
      int v36 = a4;
      __int16 v37 = 1024;
      int v38 = a7;
      __int16 v39 = 1024;
      int v40 = v19;
      __int16 v41 = 1024;
      unsigned int v42 = a3;
      __int16 v43 = 1024;
      int v44 = v20;
      __int16 v45 = 1024;
      int v46 = v21;
      __int16 v47 = 1024;
      int v48 = v22;
      __int16 v49 = 1024;
      int v50 = v23;
      __int16 v51 = 1024;
      unsigned int v52 = a6;
      __int16 v53 = 1024;
      int v54 = v24;
      __int16 v55 = 1024;
      int v56 = v25;
      __int16 v57 = 1024;
      int v58 = v26;
      __int16 v59 = 1024;
      int v60 = v27;
      __int16 v61 = 1024;
      int v62 = v28;
      __int16 v63 = 1024;
      int v64 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "[AccAuth] determineAuthType: role %d, characteristics %#10x / %#10x -> %#10x, authType (%d)[%d %d %d %d] / (%d)[ %d %d %d %d] -> [%d], errorNo %d \n",  buf,  0x62u);
    }
  }

  return v9;
}

uint64_t acc_auth_protocol_createSessionWithContext(int a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  if (!a2 || !a3)
  {
    uint64_t SessionImplementation = 1LL;
    if (!a3) {
      return SessionImplementation;
    }
    goto LABEL_34;
  }

  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v8 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    int v8 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = *(_DWORD *)a2;
    int v11 = *(_DWORD *)(a2 + 8);
    int v12 = *(unsigned __int8 *)(a2 + 4);
    int v13 = *(unsigned __int8 *)(a2 + 5);
    int v14 = *(unsigned __int8 *)(a2 + 6);
    int v15 = *(unsigned __int8 *)(a2 + 7);
    int v29 = 67110656;
    int v30 = a1;
    __int16 v31 = 1024;
    int v32 = v10;
    __int16 v33 = 1024;
    int v34 = v11;
    __int16 v35 = 1024;
    int v36 = v12;
    __int16 v37 = 1024;
    int v38 = v13;
    __int16 v39 = 1024;
    int v40 = v14;
    __int16 v41 = 1024;
    int v42 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[AccAuth] createSession: setupInfo: role %d, characteristics %#10x, authTypes(%d)[%d %d %d %d] \n",  (uint8_t *)&v29,  0x2Cu);
  }

  bzero(a3, 0x550uLL);
  *((void *)a3 + 16_Block_object_dispose(va, 8) = a4;
  a3[1] = 1;
  *((_DWORD *)a3 + 286) = a1;
  *((_DWORD *)a3 + 289) = 4;
  *((_DWORD *)a3 + 287) = 9;
  a3[69] = _acc_auth_protocol_generateRandomUniform(0x10u);
  *((_WORD *)a3 + 35) = 4112;
  if (gLogObjects && gNumLogObjects >= 55)
  {
    unint64_t v16 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    unint64_t v16 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  int v17 = a3 + 1144;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
    acc_auth_protocol_createSessionWithContext_cold_4();
  }
  if (*v17 == 2) {
    goto LABEL_22;
  }
  if (*v17 == 1)
  {
    uint64_t v18 = _acc_auth_protocol_reserveFreeSessionID(a3);
    if (*((_DWORD *)a3 + 286) == 2)
    {
LABEL_22:
      *a3 = -1;
      goto LABEL_23;
    }

    uint64_t SessionImplementation = v18;
    if (!(_DWORD)v18)
    {
LABEL_23:
      *(_OWORD *)(a3 + 1324) = *(_OWORD *)a2;
      if (gLogObjects && gNumLogObjects >= 55)
      {
        int v19 = *(os_log_s **)(gLogObjects + 432);
      }

      else
      {
        int v19 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
        acc_auth_protocol_createSessionWithContext_cold_2();
      }
      uint64_t SessionImplementation = _acc_auth_protocol_createSessionImplementation(a2, a3);
      if (!(_DWORD)SessionImplementation) {
        kdebug_trace(731159616LL, *a3, 0LL, 0LL, 0LL);
      }
    }
  }

  else
  {
    uint64_t SessionImplementation = 1LL;
  }

unsigned __int8 *acc_auth_protocol_endSession(unsigned __int8 *result)
{
  if (result)
  {
    unsigned int v1 = result;
    uint64_t v2 = *result;
    if (gLogObjects && gNumLogObjects >= 55)
    {
      BOOL v3 = *(os_log_s **)(gLogObjects + 432);
    }

    else
    {
      BOOL v3 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4[0] = 67109120;
      v4[1] = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[AccAuth] endSession: sessionID %d \n",  (uint8_t *)v4,  8u);
    }

    __acc_auth_protocol_cleanupSegmentedTransfer(v1, 1);
    __acc_auth_protocol_cleanupSegmentedTransfer(v1, 0);
    _acc_auth_protocol_endSessionImplementation(v1);
    bzero(v1, 0x550uLL);
    *((_DWORD *)v1 + 289) = 4;
    _acc_auth_protocol_returnSessionID(v2);
    return (unsigned __int8 *)kdebug_trace(731159620LL, v2, 0LL, 0LL, 0LL);
  }

  return result;
}

BOOL acc_auth_protocol_authSetupStart(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3)
{
  BOOL inited = 1LL;
  if (a1 && a2 && *((_DWORD *)a1 + 286) == 1 && _acc_auth_protocol_supportsAuthRole(1))
  {
    if (gLogObjects && gNumLogObjects >= 55)
    {
      int v7 = *(os_log_s **)(gLogObjects + 432);
    }

    else
    {
      int v7 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *((_DWORD *)a1 + 286);
      int v9 = *a1;
      v11[0] = 67109376;
      v11[1] = v8;
      __int16 v12 = 1024;
      int v13 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[AccAuth] authSetupStart: authSession: role %d, sessionID %d \n",  (uint8_t *)v11,  0xEu);
    }

    BOOL inited = acc_auth_protocol_initSetupMessage(a1, a2, a3);
    kdebug_trace(731159632LL, a2[2] & 0xF, (unint64_t)a2[2] >> 4, *a2, 0LL);
  }

  return inited;
}

uint64_t acc_auth_protocol_setupSegmentedSend( unsigned __int8 *a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5)
{
  return __acc_auth_protocol_setupSegmentedTransfer(a1, 1, a2, a3, a4, a5);
}

uint64_t __acc_auth_protocol_setupSegmentedTransfer( unsigned __int8 *a1, int a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v11 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    int v11 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109376;
    int v28 = a5;
    __int16 v29 = 1024;
    int v30 = a6;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "[AccAuth] setupSegmentedTransfer: dataLen = %d, segmentSize = %d \n",  buf,  0xEu);
  }

  if (a1 && a5 && a6)
  {
    unsigned int v12 = *((_DWORD *)a1 + 334);
    if (v12 <= 4) {
      unsigned int v13 = 0;
    }
    else {
      unsigned int v13 = v12 - 10;
    }
    if (v13 >= a6)
    {
      unsigned int v14 = (a5 + a6 - 1) / a6;
      if ((v14 & 0xFF00) != 0)
      {
        uint64_t v15 = 34LL;
      }

      else
      {
        uint64_t v15 = 0LL;
        uint64_t v24 = 96LL;
        if (a2) {
          uint64_t v24 = 72LL;
        }
        *(void *)&a1[v24] = a3;
        int v25 = a1 + 72;
        if (!a2) {
          int v25 = a1 + 96;
        }
        *((void *)v25 + 1) = a4;
        *((_WORD *)v25 + _Block_object_dispose(va, 8) = a5;
        *((_WORD *)v25 + 9) = 0;
        v25[22] = a6;
        v25[21] = v14;
        _BYTE v25[20] = 0;
      }

LABEL_19:
      if (gLogObjects && gNumLogObjects >= 55)
      {
        unint64_t v16 = *(os_log_s **)(gLogObjects + 432);
      }

      else
      {
        unint64_t v16 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        int v17 = *((_DWORD *)a1 + 286);
        int v18 = *a1;
        *(_DWORD *)buf = 67110656;
        int v28 = v17;
        __int16 v29 = 1024;
        int v30 = v18;
        __int16 v31 = 1024;
        unsigned int v32 = a2;
        __int16 v33 = 1024;
        int v34 = a5;
        __int16 v35 = 1024;
        unsigned int v36 = a6;
        __int16 v37 = 1024;
        int v38 = (unsigned __int16)v14;
        __int16 v39 = 1024;
        int v40 = v15;
        int v19 = "[AccAuth] setupSegmentedTransfer: authSession: role %d, sessionID %d, send %d, dataLen %d, segmentSize %d,"
              " totalSegments %d, errorNo %d \n";
        int v20 = v16;
        uint32_t v21 = 44;
LABEL_26:
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, v19, buf, v21);
        return v15;
      }

      return v15;
    }

  *((_DWORD *)v4 + 3) = 1;
  if (!v7) {
LABEL_20:
  }
    *((_DWORD *)v4 + 4) = 1;
  return v4;
}

  return v6;
}

  int v22 = acc_strings_placeholder_Unknown();
  uint32_t v21 = (id)objc_claimAutoreleasedReturnValue(v22);
  if (v6) {
    goto LABEL_20;
  }
  uint64_t v24 = 0LL;
  int v23 = 0LL;
  int v25 = 0LL;
LABEL_21:
  int v26 = v25;
  int v27 = (NSString *)[v47 copy];
  EAName = self->_EAName;
  self->_EAName = v27;

  __int16 v29 = (NSString *)[v9 copy];
  EAManufacturer = self->_EAManufacturer;
  self->_EAManufacturer = v29;

  __int16 v31 = (NSString *)[v12 copy];
  EAModelNumber = self->_EAModelNumber;
  self->_EAModelNumber = v31;

  __int16 v33 = (NSString *)[v15 copy];
  EASerialNumber = self->_EASerialNumber;
  self->_EASerialNumber = v33;

  __int16 v35 = (NSString *)[v18 copy];
  EAHardwareRevision = self->_EAHardwareRevision;
  self->_EAHardwareRevision = v35;

  __int16 v37 = (NSString *)[v21 copy];
  EAFirmwareRevisionActive = self->_EAFirmwareRevisionActive;
  self->_EAFirmwareRevisionActive = v37;

  if (v23)
  {
    __int16 v39 = (NSString *)[v23 copy];
    EAFirmwareRevisionPending = self->_EAFirmwareRevisionPending;
    self->_EAFirmwareRevisionPending = v39;
  }

  else
  {
    EAFirmwareRevisionPending = self->_EAFirmwareRevisionPending;
    self->_EAFirmwareRevisionPending = 0LL;
  }

  if (v24)
  {
    __int16 v41 = (NSString *)[v24 copy];
    EAPPID = self->_EAPPID;
    self->_EAPPID = v41;
  }

  else
  {
    EAPPID = self->_EAPPID;
    self->_EAPPID = 0LL;
  }

  if (v26)
  {
    __int16 v43 = (NSString *)[v26 copy];
    EARegionCFIndex Code = self->_EARegionCode;
    self->_EARegionCFIndex Code = v43;
  }

  else
  {
    EARegionCFIndex Code = self->_EARegionCode;
    self->_EARegionCFIndex Code = 0LL;
  }

  EADockuint64_t Type = self->_EADockType;
  self->_EADockuint64_t Type = (NSString *)&stru_100200A40;

  self->_eaAccessoryCapabilities |= 1uLL;
  if (a3->var0) {
    int v46 = acc_connection_copyProperty((char *)a3->var0, kCFACCProperties_Connection_HideFromUI);
  }
  else {
    int v46 = 0LL;
  }
  if ((acc_policies_shouldHideAccessoryWithModelNumber((uint64_t)self->_EAModelNumber) & 1) != 0 || v46)
  {
    self->_eaAccessoryCapabilities |= 0x100uLL;
    if (v46) {
      CFRelease(v46);
    }
  }
}

  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v17 = (os_log_s *)*(id *)(gLogObjects + 432);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v17 = (os_log_s *)&_os_log_default;
    int v18 = &_os_log_default;
  }

  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    if (a4)
    {
      int v19 = *(_DWORD *)(a4 + 8);
      int v20 = *(unsigned __int8 *)(a4 + 24);
    }

    else
    {
      int v19 = -1;
      int v20 = -1;
    }

    v22[0] = 67109888;
    v22[1] = a3;
    int v23 = 1024;
    uint64_t v24 = v19;
    int v25 = 1024;
    int v26 = v20;
    int v27 = 1024;
    int v28 = CertificateDataWithHash;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "[AccAuth] _certificateCacheGetCert: inCertificateHashLen %d, certificateDataLen %d, certificateHashLen %d, errorNo %d \n",  (uint8_t *)v22,  0x1Au);
  }

  return CertificateDataWithHash;
}

  int v26 = PayloadLen;
  if (acc_platform_packetLogging_isLogPacketDataAsMsg())
  {
    if (gLogObjects && gNumLogObjects >= 22)
    {
      int v27 = (os_log_s *)*(id *)(gLogObjects + 168);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v27 = (os_log_s *)&_os_log_default;
      __int16 v31 = &_os_log_default;
    }

    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v32 = *(void *)(v47 + 72);
      *(_DWORD *)buf = 138544130;
      __int16 v49 = v22;
      int v50 = 1040;
      __int16 v51 = v25;
      unsigned int v52 = 2098;
      __int16 v53 = v32;
      int v54 = 2080;
      __int16 v55 = v24;
      __int16 v33 = "%{public}@<%{public,coreacc:bytes}.*P> %s";
      int v34 = v27;
      __int16 v35 = OS_LOG_TYPE_DEFAULT;
LABEL_44:
      _os_log_impl((void *)&_mh_execute_header, v34, v35, v33, buf, 0x26u);
    }
  }

  else
  {
    isInternalBuild = platform_systemInfo_isInternalBuild();
    if (gLogObjects) {
      __int16 v29 = gNumLogObjects <= 21;
    }
    else {
      __int16 v29 = 1;
    }
    int v30 = !v29;
    if (isInternalBuild)
    {
      if (v30)
      {
        int v27 = (os_log_s *)*(id *)(gLogObjects + 168);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        int v27 = (os_log_s *)&_os_log_default;
        unsigned int v36 = &_os_log_default;
      }

      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        __int16 v37 = *(void *)(v47 + 72);
        *(_DWORD *)buf = 138413058;
        __int16 v49 = v22;
        int v50 = 1040;
        __int16 v51 = v25;
        unsigned int v52 = 2096;
        __int16 v53 = v37;
        int v54 = 2080;
        __int16 v55 = v24;
        __int16 v33 = "%@<%{coreacc:bytes}.*P> %s";
        int v34 = v27;
        __int16 v35 = OS_LOG_TYPE_INFO;
        goto LABEL_44;
      }
    }

    else
    {
      if (v30)
      {
        int v27 = (os_log_s *)*(id *)(gLogObjects + 168);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        int v27 = (os_log_s *)&_os_log_default;
        int v38 = &_os_log_default;
      }

      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        __int16 v43 = *(void *)(v47 + 72);
        *(_DWORD *)buf = 138413058;
        __int16 v49 = v22;
        int v50 = 1040;
        __int16 v51 = v25;
        unsigned int v52 = 2096;
        __int16 v53 = v43;
        int v54 = 2080;
        __int16 v55 = v24;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEBUG,  "%@<%{coreacc:bytes}.*P> %s",  buf,  0x26u);
      }
    }
  }

  if (__registerForLoggingPrefsNotification_onceToken != -1) {
    dispatch_once(&__registerForLoggingPrefsNotification_onceToken, &__block_literal_global_25);
  }
  if (_logPacketToFile)
  {
    LogWriter = getLogWriter();
    int v40 = (void *)objc_claimAutoreleasedReturnValue(LogWriter);
    __int16 v41 = v40;
    if (v23)
    {
      int v42 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  *(void *)(v47 + 72),  v26));
      [v41 log:v22 data:v42 limit:v25];
    }

    else
    {
      [v40 log:v22 data:0 limit:v25];
    }
  }

  objc_autoreleasePoolPop(v45);
}

  albumArtist = self->_albumArtist;
  if (albumArtist)
  {
    albumArtist = -[NSString UTF8String](albumArtist, "UTF8String");
    validMask = self->_validMask;
  }

  a3->var5 = (char *)albumArtist;
  a3->var0 |= 0x4000u;
  if ((validMask & 0x10000) == 0)
  {
LABEL_7:
    if ((validMask & 0x40000) == 0) {
      return;
    }
    goto LABEL_25;
  }

  unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  LOBYTE(self->_contentStyle)));
  -[NSMutableDictionary setObject:forKey:]( v4,  "setObject:forKey:",  v13,  @"ACCMediaLibraryUpdatePlaylistContentStyle");

  validMask = self->_validMask;
  if ((validMask & 0x40) == 0)
  {
LABEL_10:
    if ((validMask & 0x100) == 0) {
      goto LABEL_11;
    }
LABEL_21:
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  self->_smartPlaylist));
    -[NSMutableDictionary setObject:forKey:]( v4,  "setObject:forKey:",  v15,  @"ACCMediaLibraryUpdatePlaylistIsSmartPlaylist");

    if ((self->_validMask & 0x200) == 0) {
      return v4;
    }
    goto LABEL_12;
  }

    __break(0x5519u);
LABEL_20:
    __break(0x5513u);
  }

  return v9 == &v10[v11];
}

void __acc_auth_protocol_cleanupSegmentedTransfer(unsigned __int8 *a1, int a2)
{
  if (a1)
  {
    if (gLogObjects && gNumLogObjects >= 55)
    {
      int v4 = *(os_log_s **)(gLogObjects + 432);
    }

    else
    {
      int v4 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v5 = *a1;
      v8[0] = 67109376;
      v8[1] = v5;
      __int16 v9 = 1024;
      int v10 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[AccAuth] cleanupSegmentedTransfer: sessionID %d, send %d \n",  (uint8_t *)v8,  0xEu);
    }

    uint64_t v6 = 96LL;
    if (a2) {
      uint64_t v6 = 72LL;
    }
    int v7 = &a1[v6];
    *(void *)int v7 = 0LL;
    *((void *)v7 + 1) = 0LL;
    *(void *)(v7 + 15) = 0LL;
  }

uint64_t acc_auth_protocol_setupSegmentedRecv( unsigned __int8 *a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5)
{
  return __acc_auth_protocol_setupSegmentedTransfer(a1, 0, a2, a3, a4, a5);
}

uint64_t acc_auth_protocol_initSegmentedSendMessage( unsigned __int8 *a1, unsigned int a2, int a3, unsigned __int8 *a4, unsigned int a5)
{
  if (gLogObjects) {
    BOOL v7 = gNumLogObjects <= 54;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = !v7;
  if (a1)
  {
    if (v8)
    {
      unsigned int v12 = *(os_log_s **)(gLogObjects + 432);
    }

    else
    {
      unsigned int v12 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      unsigned int v14 = *((_DWORD *)a1 + 286);
      int v15 = *a1;
      int v16 = *((unsigned __int16 *)a1 + 45);
      int v17 = a1[92];
      int v18 = a1[93];
      *(_DWORD *)buf = 67110656;
      unsigned int v38 = v14;
      __int16 v39 = 1024;
      int v40 = v15;
      __int16 v41 = 1024;
      int v42 = a2;
      __int16 v43 = 1024;
      int v44 = a3;
      __int16 v45 = 1024;
      int v46 = v16;
      __int16 v47 = 1024;
      int v48 = v17;
      __int16 v49 = 1024;
      int v50 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "[AccAuth] initSegmentedSendMessage: ENTER authSession: role %d, sessionID %d, infoType %d, paramID %#04x, dataSe nd:[already %d, segment last %d / total %d] \n",  buf,  0x2Cu);
    }

    if (*((void *)a1 + 10) && !acc_auth_protocol_initInfoCommonMessage(a1, a2, a4, a5))
    {
      uint64_t v23 = *((unsigned __int16 *)a1 + 45);
      unsigned __int16 v24 = *((_WORD *)a1 + 44) - v23;
      unsigned __int8 v35 = a1[93];
      unsigned __int8 v36 = a1[92];
      else {
        unsigned __int8 v25 = a1[94];
      }
      uint64_t v26 = *((void *)a1 + 10);
      int v27 = (_BYTE *)acc_auth_protocol_messagePayload((uint64_t)a4, a5, 0LL, 0LL, 0LL);
      if (a2 <= 8 && ((1 << a2) & 0x124) != 0)
      {
        v27[2] = a3;
        v27[3] = v36;
        v27[4] = v35 - 1;
        v27[5] = v25;
        a4[3] += 4;
        memcpy(v27 + 6, (const void *)(v26 + v23), v25);
      }

      uint64_t v19 = 0LL;
      a4[3] += v25;
      *((_WORD *)a1 + 45) += v25;
      ++a1[92];
    }

    else
    {
      uint64_t v19 = 1LL;
    }

    if (gLogObjects && gNumLogObjects >= 55)
    {
      int v28 = *(os_log_s **)(gLogObjects + 432);
    }

    else
    {
      int v28 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      unsigned int v29 = *((_DWORD *)a1 + 286);
      int v30 = *a1;
      int v31 = *((unsigned __int16 *)a1 + 45);
      int v32 = a1[92];
      int v33 = a1[93];
      *(_DWORD *)buf = 67110912;
      unsigned int v38 = v29;
      __int16 v39 = 1024;
      int v40 = v30;
      __int16 v41 = 1024;
      int v42 = a2;
      __int16 v43 = 1024;
      int v44 = a3;
      __int16 v45 = 1024;
      int v46 = v31;
      __int16 v47 = 1024;
      int v48 = v32;
      __int16 v49 = 1024;
      int v50 = v33;
      __int16 v51 = 1024;
      int v52 = v19;
      int v20 = "[AccAuth] initSegmentedSendMessage: EXIT authSession: role %d, sessionID %d, infoType %d, paramID %#04x, dat"
            "aSend:[already %d, segment last %d / total %d], errorNo %d \n";
      uint32_t v21 = v28;
      uint32_t v22 = 50;
      goto LABEL_37;
    }
  }

  else
  {
    if (v8)
    {
      unsigned int v13 = *(os_log_s **)(gLogObjects + 432);
    }

    else
    {
      unsigned int v13 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    uint64_t v19 = 1LL;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109632;
      unsigned int v38 = a2;
      __int16 v39 = 1024;
      int v40 = a3;
      __int16 v41 = 1024;
      int v42 = 1;
      int v20 = "[AccAuth] initSegmentedSendMessage: EXIT authSession: no authSession, infoType %d, paramID %#04x, errorNo %d \n";
      uint32_t v21 = v13;
      uint32_t v22 = 20;
LABEL_37:
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, v20, buf, v22);
    }
  }

  return v19;
}

uint64_t acc_auth_protocol_updateSegmentReceive( unsigned __int8 *a1, const void *a2, unsigned int a3, int a4, int a5, int a6, unsigned __int8 *a7, unsigned int a8, BOOL *a9)
{
  if (gLogObjects) {
    BOOL v10 = gNumLogObjects <= 54;
  }
  else {
    BOOL v10 = 1;
  }
  int v11 = !v10;
  if (a1)
  {
    if (v11)
    {
      int v17 = *(os_log_s **)(gLogObjects + 432);
    }

    else
    {
      int v17 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      int v19 = *((_DWORD *)a1 + 286);
      int v20 = *a1;
      int v21 = *((unsigned __int16 *)a1 + 57);
      int v22 = a1[116];
      int v23 = a1[117];
      *(_DWORD *)buf = 67110912;
      int v48 = v19;
      __int16 v49 = 1024;
      int v50 = v20;
      __int16 v51 = 1024;
      int v52 = a4;
      __int16 v53 = 1024;
      int v54 = a5;
      __int16 v55 = 1024;
      int v56 = a6;
      __int16 v57 = 1024;
      int v58 = v21;
      __int16 v59 = 1024;
      int v60 = v22;
      __int16 v61 = 1024;
      int v62 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "[AccAuth] updateSegmentReceive: authSession: role %d, sessionID %d, infoType %d, paramID %#04x, segmentNum %d, d ataRecv:[already %d, segment last %d / total %d] \n",  buf,  0x32u);
    }

    unsigned __int8 v24 = a6 + 1;
    uint64_t v25 = *((void *)a1 + 13);
    if (v25 && ((unsigned int v26 = *((_DWORD *)a1 + 334), v26 <= 4) ? (v27 = 0) : (v27 = v26 - 10), v27 >= a3 && a1[116] == a6))
    {
      int v28 = 0;
      uint64_t v29 = *((unsigned __int16 *)a1 + 57);
      uint64_t v30 = 1LL;
      if (v29 + a3 <= *((unsigned __int16 *)a1 + 56) && v29 + a3 <= 0x400)
      {
        memcpy((void *)(v25 + v29), a2, a3);
        __int16 v31 = *((_WORD *)a1 + 57) + a3;
        *((_WORD *)a1 + 57) = v31;
        a1[116] = v24;
        int v32 = a1[117];
        if (a9) {
          *a9 = v32 == v24;
        }
        if (v32 == v24)
        {
          uint64_t v30 = 0LL;
          *((_WORD *)a1 + 56) = v31;
          int v28 = 1;
        }

        else if (acc_auth_protocol_initInfoCommonMessage(a1, 3u, a7, a8))
        {
          int v28 = 0;
        }

        else
        {
          __int16 v43 = (_BYTE *)acc_auth_protocol_messagePayload((uint64_t)a7, a8, 0LL, 0LL, 0LL);
          if (v43)
          {
            uint64_t v30 = 0LL;
            int v28 = 0;
            v43[2] = 6;
            v43[3] = a4;
            v43[4] = a5;
            v43[5] = 7;
            v43[6] = v24;
            a7[3] += 5;
          }

          else
          {
            int v28 = 0;
            uint64_t v30 = 45LL;
          }
        }
      }
    }

    else
    {
      int v28 = 0;
      uint64_t v30 = 1LL;
    }

    if (gLogObjects && gNumLogObjects >= 55)
    {
      int v33 = *(os_log_s **)(gLogObjects + 432);
    }

    else
    {
      int v33 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      int v34 = *((_DWORD *)a1 + 286);
      int v35 = *a1;
      int v36 = *((unsigned __int16 *)a1 + 57);
      int v37 = a1[116];
      int v38 = a1[117];
      *(_DWORD *)buf = 67111424;
      int v48 = v34;
      __int16 v49 = 1024;
      int v50 = v35;
      __int16 v51 = 1024;
      int v52 = a4;
      __int16 v53 = 1024;
      int v54 = a5;
      __int16 v55 = 1024;
      int v56 = v24;
      __int16 v57 = 1024;
      int v58 = v36;
      __int16 v59 = 1024;
      int v60 = v37;
      __int16 v61 = 1024;
      int v62 = v38;
      __int16 v63 = 1024;
      int v64 = v28;
      __int16 v65 = 1024;
      int v66 = v30;
      __int16 v39 = "[AccAuth] updateSegmentReceive: authSession: role %d, sessionID %d, infoType %d, paramID %#04x, nextSegment "
            "%d, dataRecv:[already %d, segment last %d / total %d], transferFinished %d, errorNo %d \n";
      int v40 = v33;
      uint32_t v41 = 62;
LABEL_40:
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, v39, buf, v41);
    }
  }

  else
  {
    if (v11)
    {
      int v18 = *(os_log_s **)(gLogObjects + 432);
    }

    else
    {
      int v18 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    uint64_t v30 = 1LL;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109632;
      int v48 = a4;
      __int16 v49 = 1024;
      int v50 = a5;
      __int16 v51 = 1024;
      int v52 = 1;
      __int16 v39 = "[AccAuth] updateSegmentReceive: authSession: no authSession, infoType %d, paramID %#04x, errorNo %d \n";
      int v40 = v18;
      uint32_t v41 = 20;
      goto LABEL_40;
    }
  }

  return v30;
}

uint64_t acc_auth_protocol_handleMessage( unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5)
{
  uint64_t v6 = a4;
  BOOL v7 = a1;
  uint64_t v8 = 1LL;
  __int16 v9 = &startLogsNotificationObservers;
  BOOL v10 = &startLogsNotificationObservers;
  if (!a1 || !a2 || !a4) {
    goto LABEL_93;
  }
  int isRespMessage = acc_auth_protocol_isRespMessage(a2);
  int v12 = a2[2] >> 4;
  if (gLogObjects && gNumLogObjects >= 55)
  {
    unsigned int v13 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    unsigned int v13 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = *((_DWORD *)v7 + 286);
    int v15 = *v7;
    int v16 = *a2;
    unsigned int v17 = a5;
    int v18 = a2[1];
    __int16 v76 = v7;
    int v19 = v12;
    unsigned int v20 = a2[2];
    int v80 = 0;
    acc_auth_protocol_sizeofMessage((uint64_t)a2, a3, (int *)buf, &v80);
    *(_DWORD *)buf = 67110912;
    *(_DWORD *)&uint8_t buf[4] = v14;
    __int16 v9 = &startLogsNotificationObservers;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v15;
    *(_WORD *)&uint8_t buf[14] = 1024;
    *(_DWORD *)&uint8_t buf[16] = v16;
    __int16 v82 = 1024;
    int v83 = v18;
    a5 = v17;
    BOOL v10 = &startLogsNotificationObservers;
    __int16 v84 = 1024;
    unsigned int v85 = v20;
    int v12 = v19;
    BOOL v7 = v76;
    __int16 v86 = 1024;
    int v87 = v80;
    __int16 v88 = 1024;
    int v21 = isRespMessage;
    int v89 = isRespMessage;
    __int16 v90 = 1024;
    int v91 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "[AccAuth] handleMessage: authSession: role %d, sessionID %d; inMessage %#04x, ctl0 %02x, ctl1 %02x, len %d, inMess"
      "ageIsResp %d, inMsgSeqNum %d \n",
      buf,
      0x32u);
    if (!isRespMessage) {
      goto LABEL_14;
    }
  }

  else
  {
    int v21 = isRespMessage;
    if (!isRespMessage) {
      goto LABEL_14;
    }
  }

  if (v7[70] != v12)
  {
    int v25 = v12;
    unsigned int v26 = v10;
    uint64_t v27 = v9[353];
    int v28 = v26;
    if (v27 && *((int *)v26 + 708) >= 55)
    {
      uint64_t v29 = *(os_log_s **)(v27 + 432);
    }

    else
    {
      uint64_t v29 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    uint64_t v8 = 1LL;
    BOOL v10 = v28;
    __int16 v9 = &startLogsNotificationObservers;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_55;
    }
    goto LABEL_93;
  }

LABEL_93:
  uint64_t v63 = v9[353];
  int v64 = *((_DWORD *)v10 + 708);
  if (v63 && v64 >= 55)
  {
    __int16 v65 = *(os_log_s **)(v63 + 432);
  }

  else
  {
    __int16 v65 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
  {
    int v66 = *((_DWORD *)v7 + 286);
    int v67 = *v7;
    int v68 = *v6;
    int v69 = v6[1];
    unsigned int v70 = v6[2];
    int v80 = 0;
    acc_auth_protocol_sizeofMessage((uint64_t)v6, a5, (int *)buf, &v80);
    *(_DWORD *)buf = 67110656;
    *(_DWORD *)&uint8_t buf[4] = v66;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v67;
    *(_WORD *)&uint8_t buf[14] = 1024;
    *(_DWORD *)&uint8_t buf[16] = v68;
    __int16 v82 = 1024;
    int v83 = v69;
    __int16 v84 = 1024;
    unsigned int v85 = v70;
    __int16 v86 = 1024;
    int v87 = v80;
    __int16 v88 = 1024;
    int v89 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEFAULT,  "[AccAuth] handleMessage: authSession: role %d, sessionID %d, outMessage %#04x, ctl0 %02x, ctl1 %02x, len %d, errorNo %d \n",  buf,  0x2Cu);
  }

  return v8;
}

      if (++v38 == 19) {
        goto LABEL_94;
      }
    }
  }

  int v34 = 22;
  int v28 = 6;
  if (v124 && !(_BYTE)v130) {
    goto LABEL_165;
  }
LABEL_103:
  lengtha = v34;
  int v46 = (UInt8 *)malloc(v34);
  if (gLogObjects && gNumLogObjects >= 32)
  {
    unsigned int v47 = *(os_log_s **)(gLogObjects + 248);
  }

  else
  {
    unsigned int v47 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
  {
    int v48 = obfuscatedPointer((uint64_t)v46);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = lengtha;
    *(_WORD *)&buf[8] = 2048;
    *(void *)&buf[10] = v48;
    _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_INFO,  "#PlaybackQueueList allocated %d bytes, ftBuff=%p",  buf,  0x12u);
  }

  if (!v23)
  {
    id v118 = v28;
    __int16 v136 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&uint64_t v59 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v59 + 1) = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v134 = v59;
    int v135 = v59;
    *(_OWORD *)buf = v59;
    *(_OWORD *)&uint8_t buf[16] = v59;
    __int128 bytes = v46;
    iAP2MsgInit((uint64_t)buf, 0, (uint64_t)v46, lengtha, 0LL, 0LL);
    iAP2MsgAddU32Param((uint64_t)buf, 0LL, 0, valuePtr);
    iAP2MsgAddU32Param((uint64_t)buf, 0LL, 1, HIDWORD(valuePtr));
    if ((int)valuePtr < 1)
    {
LABEL_156:
      int v77 = 1;
      int v5 = &startLogsNotificationObservers;
      int v4 = &startLogsNotificationObservers;
      unsigned int v33 = v129;
LABEL_166:
      int v45 = v124;
      int v28 = v118;
      int v46 = bytes;
      goto LABEL_167;
    }

    int v60 = 0LL;
    while (1)
    {
      int v61 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v60);
      if (v61)
      {
        int v62 = *((unsigned int *)v129 + 23);
        if ((_DWORD)v62)
        {
          if (*v129) {
            break;
          }
        }
      }

BOOL __acc_auth_protocol_handleAuthSetup( unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    BOOL v10 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    BOOL v10 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v39 = a5;
    int v40 = *a1;
    int v51 = a4;
    unsigned int v41 = a2[1];
    unsigned int v46 = a1[1];
    int v47 = *a2;
    int v49 = a2[2];
    int v53 = 0;
    acc_auth_protocol_sizeofMessage((uint64_t)a2, a3, (int *)buf, &v53);
    unsigned int v42 = bswap32(*(_DWORD *)(a2 + 5));
    int v43 = a2[10];
    *(_DWORD *)buf = 67111168;
    int v55 = v40;
    a5 = v39;
    __int16 v56 = 1024;
    unsigned int v57 = v41 >> 4;
    __int16 v58 = 1024;
    unsigned int v59 = v46;
    __int16 v60 = 1024;
    int v61 = v47;
    __int16 v62 = 1024;
    unsigned int v63 = v41;
    a4 = v51;
    __int16 v64 = 1024;
    int v65 = v49;
    __int16 v66 = 1024;
    int v67 = v53;
    __int16 v68 = 1024;
    unsigned int v69 = v42;
    __int16 v70 = 1024;
    int v71 = v43;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "[AccAuth] handleAuthSetup: sessionID %d, version %d / %d, inMessage %#04x, ctl0 %02x, ctl1 %02x, len %d, character istics %#10x, authTypesLen %d \n",  buf,  0x38u);
  }

  unsigned int v11 = *((_DWORD *)a1 + 333);
  if (!v11)
  {
    if (gLogObjects && gNumLogObjects >= 55)
    {
      int v16 = *(os_log_s **)(gLogObjects + 432);
    }

    else
    {
      int v16 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      __acc_auth_protocol_handleAuthSetup_cold_1(v16, v18, v19, v20, v21, v22, v23, v24);
    }
    return 1LL;
  }

  if (v11 >= 0x100)
  {
    if (gLogObjects && gNumLogObjects >= 55)
    {
      unsigned int v17 = *(os_log_s **)(gLogObjects + 432);
    }

    else
    {
      unsigned int v17 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      __acc_auth_protocol_handleAuthSetup_cold_6(v17, v25, v26, v27, v28, v29, v30, v31);
    }
    return 1LL;
  }

  if (!a2[10]) {
    return 1LL;
  }
  int v50 = a4;
  unsigned int v12 = a5;
  unsigned int v13 = a2[1];
  int v14 = v13 >> 4;
  unsigned int v48 = a2[2];
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v15 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    int v15 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109632;
    int v55 = v48 & 0xF;
    __int16 v56 = 1024;
    unsigned int v57 = v13 >> 4;
    __int16 v58 = 1024;
    unsigned int v59 = v48 >> 4;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "[AccAuth] handleAuthSetup: sessionID %d, version %d, sequence %d \n",  buf,  0x14u);
  }

  int v34 = a1[1];
  if ((v13 & 0xF0) != 0x10 || v34 == v14)
  {
    unsigned int v35 = v12;
    if (v34 != v14)
    {
      if (gLogObjects && gNumLogObjects >= 55)
      {
        uint64_t v44 = *(os_log_s **)(gLogObjects + 432);
      }

      else
      {
        uint64_t v44 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v45 = a1[1];
        *(_DWORD *)buf = 67109376;
        int v55 = v14;
        __int16 v56 = 1024;
        unsigned int v57 = v45;
        _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "[AccAuth] handleAuthSetup: Version mismatch! %d != %d, send back version! \n",  buf,  0xEu);
      }

      return acc_auth_protocol_initMessage(a1, 161, v50, v12);
    }
  }

  else
  {
    a1[1] = v14;
    unsigned int v35 = v12;
  }

  int v53 = bswap32(*(_DWORD *)(a2 + 5));
  unsigned __int8 v52 = 4;
  int v36 = acc_auth_protocol_determineAuthType( *((_DWORD *)a1 + 286),  a1 + 1328,  a1[1332],  *((_DWORD *)a1 + 331),  a2 + 11,  a2[10],  v53,  &v52,  &v53);
  if (gLogObjects && gNumLogObjects >= 55)
  {
    unsigned int v37 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    unsigned int v37 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    int v55 = v36;
    __int16 v56 = 1024;
    unsigned int v57 = v52;
    _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "[AccAuth] handleAuthSetup: determineAuthType: errorNo %d, authType %d \n",  buf,  0xEu);
  }

  if (!v36 && v52 != 4)
  {
    *((_DWORD *)a1 + 289) = v52;
    *((_DWORD *)a1 + 28_Block_object_dispose(va, 8) = v53;
    return acc_auth_protocol_initSetupMessage(a1, v50, v35);
  }

  BOOL inited = acc_auth_protocol_initFinishMessage(a1, 22, v50, v35);
  _acc_auth_protocol_handleSessionAuthenticationState(a1, 0);
  return inited;
}

BOOL __acc_auth_protocol_handleAuthStart( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 *a4, unsigned int a5)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    BOOL v10 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    BOOL v10 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    int v13 = *a1;
    int v14 = *a2;
    int v15 = a2[1];
    int v16 = a2[2];
    int v17 = 0;
    acc_auth_protocol_sizeofMessage((uint64_t)a2, a3, (int *)buf, &v17);
    *(_DWORD *)buf = 67110144;
    int v19 = v13;
    __int16 v20 = 1024;
    int v21 = v14;
    __int16 v22 = 1024;
    int v23 = v15;
    __int16 v24 = 1024;
    int v25 = v16;
    __int16 v26 = 1024;
    int v27 = v17;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "[AccAuth] handleAuthStart: sessionID %d, inMessage %#04x, ctl0 %02x, ctl1 %02x, len %d \n",  buf,  0x20u);
  }

  BOOL inited = acc_auth_protocol_initFinishMessage(a1, 81, a4, a5);
  _acc_auth_protocol_handleSessionAuthenticationState(a1, 0);
  return inited;
}

uint64_t __acc_auth_protocol_handleAuthInfo( unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    BOOL v10 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    BOOL v10 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    int v15 = *a1;
    int v16 = *a2;
    int v23 = a2[1];
    int v24 = a2[2];
    HIDWORD(v26) = 0;
    acc_auth_protocol_sizeofMessage((uint64_t)a2, a3, (int *)buf, (int *)&v26 + 1);
    *(_DWORD *)buf = 67110144;
    int v28 = v15;
    __int16 v29 = 1024;
    int v30 = v16;
    __int16 v31 = 1024;
    int v32 = v23;
    __int16 v33 = 1024;
    int v34 = v24;
    __int16 v35 = 1024;
    int v36 = HIDWORD(v26);
    _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "[AccAuth] handleAuthInfo: sessionID %d, inMessage %#04x, ctl0 %02x, ctl1 %02x, len %d \n",  buf,  0x20u);
  }

  if (*((_DWORD *)a1 + 289) == 1) {
    uint64_t inited = acc_auth_protocol_handleAuthInfo1Way(a1, a2, a3, a4, a5);
  }
  else {
    uint64_t inited = 1LL;
  }
  uint64_t v26 = 0LL;
  int v25 = 0;
  uint64_t v12 = acc_auth_protocol_messagePayload((uint64_t)a2, a3, (_DWORD *)&v26 + 1, &v26, &v25);
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v13 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    int v13 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (!(_DWORD)inited) {
      return inited;
    }
    goto LABEL_18;
  }

  int v17 = *((_DWORD *)a1 + 286);
  int v18 = *a1;
  int v19 = *a2;
  int v20 = a2[1];
  int v21 = a2[2];
  if (v12) {
    int v22 = *(unsigned __int8 *)(v12 + 1);
  }
  else {
    int v22 = 255;
  }
  *(_DWORD *)buf = 67110912;
  int v28 = v17;
  __int16 v29 = 1024;
  int v30 = v18;
  __int16 v31 = 1024;
  int v32 = v19;
  __int16 v33 = 1024;
  int v34 = v20;
  __int16 v35 = 1024;
  int v36 = v21;
  __int16 v37 = 1024;
  int v38 = HIDWORD(v26);
  __int16 v39 = 1024;
  int v40 = v22;
  __int16 v41 = 1024;
  int v42 = inited;
  _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "[AccAuth] handleAuthInfo: role %d, sessionID %d; inMessage %#04x, ctl0 %02x, ctl1 %02x, len %d, infoType %d, errorNo %d \n",
    buf,
    0x32u);
  if ((_DWORD)inited)
  {
LABEL_18:
    if ((_DWORD)inited != 36)
    {
      uint64_t inited = acc_auth_protocol_initFinishMessage(a1, 81, a4, a5);
      _acc_auth_protocol_handleSessionAuthenticationState(a1, 0);
    }
  }

  return inited;
}

BOOL __acc_auth_protocol_handleAuthFinish( unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    BOOL v10 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    BOOL v10 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    int v14 = *a1;
    int v15 = *a2;
    int v16 = a2[1];
    int v17 = a2[2];
    int v18 = 0;
    acc_auth_protocol_sizeofMessage((uint64_t)a2, a3, (int *)buf, &v18);
    *(_DWORD *)buf = 67110144;
    int v20 = v14;
    __int16 v21 = 1024;
    int v22 = v15;
    __int16 v23 = 1024;
    int v24 = v16;
    __int16 v25 = 1024;
    int v26 = v17;
    __int16 v27 = 1024;
    int v28 = v18;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "[AccAuth] handleAuthFinish: sessionID %d, inMessage %#04x, ctl0 %02x, ctl1 %02x, len %d \n",  buf,  0x20u);
  }

  if (a2[4] == 1) {
    int v11 = bswap32(*(_DWORD *)(a2 + 5));
  }
  else {
    int v11 = 0;
  }
  BOOL inited = acc_auth_protocol_initFinishMessage(a1, v11, a4, a5);
  _acc_auth_protocol_handleSessionAuthenticationState(a1, v11 == 0);
  return inited;
}

uint64_t __acc_auth_protocol_handleAuthSetupResp( unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5)
{
  unsigned int v8 = a2[1];
  unsigned int v9 = v8 >> 4;
  if (gLogObjects && gNumLogObjects >= 55)
  {
    BOOL v10 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    BOOL v10 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    int v26 = *a1;
    unsigned int v27 = *a2;
    unsigned int v36 = a2[1];
    int v38 = a2[2];
    int v43 = 0;
    acc_auth_protocol_sizeofMessage((uint64_t)a2, a3, (int *)buf, &v43);
    int v28 = a1[1];
    *(_DWORD *)buf = 67110656;
    int v45 = v26;
    __int16 v46 = 1024;
    unsigned int v47 = v27;
    __int16 v48 = 1024;
    unsigned int v49 = v36;
    __int16 v50 = 1024;
    int v51 = v38;
    __int16 v52 = 1024;
    int v53 = v43;
    __int16 v54 = 1024;
    unsigned int v55 = v8 >> 4;
    __int16 v56 = 1024;
    int v57 = v28;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "[AccAuth] handleAuthSetupResp: sessionID %d, inMessage %#04x, ctl0 %02x, ctl1 %02x, len %d, msgVersion %d : %d \n",  buf,  0x2Cu);
  }

  if (!*((_DWORD *)a1 + 333)) {
    return 1LL;
  }
  if (a2[3])
  {
    BOOL inited = 1LL;
    goto LABEL_11;
  }

  if (a1[1] == v9) {
    return 22LL;
  }
  if ((v8 & 0xF0) != 0x10) {
    return 1LL;
  }
  a1[1] = v9;
  BOOL inited = acc_auth_protocol_initSetupMessage(a1, a4, a5);
  if (!a2[3]) {
    return inited;
  }
LABEL_11:
  if (gLogObjects) {
    BOOL v12 = gNumLogObjects <= 54;
  }
  else {
    BOOL v12 = 1;
  }
  int v13 = !v12;
  if (a2[10] == 1)
  {
    if (v13)
    {
      int v14 = *(os_log_s **)(gLogObjects + 432);
    }

    else
    {
      int v14 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      int v32 = *a1;
      unsigned int v33 = *a2;
      unsigned int v37 = a2[1];
      int v39 = a2[2];
      int v43 = 0;
      acc_auth_protocol_sizeofMessage((uint64_t)a2, a3, (int *)buf, &v43);
      unsigned int v34 = bswap32(*(_DWORD *)(a2 + 5));
      int v35 = a2[10];
      *(_DWORD *)buf = 67110656;
      int v45 = v32;
      __int16 v46 = 1024;
      unsigned int v47 = v33;
      __int16 v48 = 1024;
      unsigned int v49 = v37;
      __int16 v50 = 1024;
      int v51 = v39;
      __int16 v52 = 1024;
      int v53 = v43;
      __int16 v54 = 1024;
      unsigned int v55 = v34;
      __int16 v56 = 1024;
      int v57 = v35;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "[AccAuth] handleAuthSetupResp: sessionID %d, inMessage %#04x, ctl0 %02x, ctl1 %02x, len %d, characteristics %#10 x, authTypesLen %d \n",  buf,  0x2Cu);
    }

    unsigned int v16 = a2[2];
    if (gLogObjects && gNumLogObjects >= 55)
    {
      int v17 = *(os_log_s **)(gLogObjects + 432);
    }

    else
    {
      int v17 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109632;
      int v45 = v16 & 0xF;
      __int16 v46 = 1024;
      unsigned int v47 = v8 >> 4;
      __int16 v48 = 1024;
      unsigned int v49 = v16 >> 4;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "[AccAuth] handleAuthSetupResp: sessionID %d, version %d, sequence %d \n",  buf,  0x14u);
    }

    unsigned int v19 = a1[1];
    if (v8 < 0x10 || v19 <= v9)
    {
      if (v19 != v9)
      {
        if (gLogObjects && gNumLogObjects >= 55)
        {
          __int16 v29 = *(os_log_s **)(gLogObjects + 432);
        }

        else
        {
          __int16 v29 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v30 = a1[1];
          *(_DWORD *)buf = 67109376;
          int v45 = v8 >> 4;
          __int16 v46 = 1024;
          unsigned int v47 = v30;
          _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "[AccAuth] handleAuthSetupResp: Version mismatch! %d != %d \n",  buf,  0xEu);
        }

        int v24 = a1;
        int v25 = 43;
        goto LABEL_69;
      }
    }

    else
    {
      a1[1] = v9;
    }

    int v43 = bswap32(*(_DWORD *)(a2 + 5));
    unsigned __int8 v42 = 4;
    int v20 = acc_auth_protocol_determineAuthType( *((_DWORD *)a1 + 286),  a1 + 1328,  a1[1332],  *((_DWORD *)a1 + 331),  a2 + 11,  a2[10],  v43,  &v42,  &v43);
    if (gLogObjects && gNumLogObjects >= 55)
    {
      __int16 v21 = *(os_log_s **)(gLogObjects + 432);
    }

    else
    {
      __int16 v21 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      int v45 = v20;
      __int16 v46 = 1024;
      unsigned int v47 = v42;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "[AccAuth] handleAuthSetupResp: determineAuthType: errorNo %d, authType %d \n",  buf,  0xEu);
    }

    if (!v20)
    {
      int v22 = v42;
      if (v42 != 4)
      {
        *((_DWORD *)a1 + 289) = v42;
        *((_DWORD *)a1 + 28_Block_object_dispose(va, 8) = v43;
        if (v22 == 1) {
          return acc_auth_protocol_initInfoCommonMessage(a1, 9u, a4, a5);
        }
        else {
          return acc_auth_protocol_initStartMessage(a1, a4, a5);
        }
      }
    }

    int v24 = a1;
    int v25 = 22;
LABEL_69:
    BOOL inited = acc_auth_protocol_initFinishMessage(v24, v25, a4, a5);
    _acc_auth_protocol_handleSessionAuthenticationState(a1, 0);
    return inited;
  }

  if (v13)
  {
    int v15 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    int v15 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    int v18 = a2[10];
    *(_DWORD *)buf = 67109120;
    int v45 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "[AccAuth] handleAuthSetupResp: invalid # of authTypes(%d) ! \n",  buf,  8u);
  }

  return inited;
}

BOOL __acc_auth_protocol_handleAuthStartResp( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 *a4, unsigned int a5)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    BOOL v10 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    BOOL v10 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    int v13 = *a1;
    int v14 = *a2;
    int v15 = a2[1];
    int v16 = a2[2];
    int v17 = 0;
    acc_auth_protocol_sizeofMessage((uint64_t)a2, a3, (int *)buf, &v17);
    *(_DWORD *)buf = 67110144;
    int v19 = v13;
    __int16 v20 = 1024;
    int v21 = v14;
    __int16 v22 = 1024;
    int v23 = v15;
    __int16 v24 = 1024;
    int v25 = v16;
    __int16 v26 = 1024;
    int v27 = v17;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "[AccAuth] handleAuthStartResp: sessionID %d, inMessage %#04x, ctl0 %02x, ctl1 %02x, len %d \n",  buf,  0x20u);
  }

  if (*((_DWORD *)a1 + 289) == 1 && !acc_auth_protocol_handleAuthStartResp1Way(a1, a2, a3, a4, a5)) {
    return 0LL;
  }
  BOOL inited = acc_auth_protocol_initFinishMessage(a1, 81, a4, a5);
  _acc_auth_protocol_handleSessionAuthenticationState(a1, 0);
  return inited;
}

BOOL __acc_auth_protocol_handleAuthInfoResp( unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    BOOL v10 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    BOOL v10 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    int v15 = *a1;
    int v16 = *a2;
    int v24 = a2[1];
    int v25 = a2[2];
    HIDWORD(v27) = 0;
    acc_auth_protocol_sizeofMessage((uint64_t)a2, a3, (int *)buf, (int *)&v27 + 1);
    *(_DWORD *)buf = 67110144;
    int v29 = v15;
    __int16 v30 = 1024;
    int v31 = v16;
    __int16 v32 = 1024;
    int v33 = v24;
    __int16 v34 = 1024;
    int v35 = v25;
    __int16 v36 = 1024;
    int v37 = HIDWORD(v27);
    _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "[AccAuth] handleAuthInfoResp: sessionID %d, inMessage %#04x, ctl0 %02x, ctl1 %02x, len %d \n",  buf,  0x20u);
  }

  if (*((_DWORD *)a1 + 289) == 1) {
    int v11 = acc_auth_protocol_handleAuthInfoResp1Way(a1, a2, a3, a4, a5);
  }
  else {
    int v11 = 1;
  }
  uint64_t v27 = 0LL;
  int v26 = 0;
  uint64_t v12 = acc_auth_protocol_messagePayload((uint64_t)a2, a3, (_DWORD *)&v27 + 1, &v27, &v26);
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v13 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    int v13 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    int v17 = *((_DWORD *)a1 + 286);
    int v18 = *a1;
    int v19 = *a2;
    int v20 = a2[1];
    int v21 = a2[2];
    if (v12) {
      int v22 = *(unsigned __int8 *)(v12 + 1);
    }
    else {
      int v22 = 255;
    }
    *(_DWORD *)buf = 67110912;
    int v29 = v17;
    __int16 v30 = 1024;
    int v31 = v18;
    __int16 v32 = 1024;
    int v33 = v19;
    __int16 v34 = 1024;
    int v35 = v20;
    __int16 v36 = 1024;
    int v37 = v21;
    __int16 v38 = 1024;
    int v39 = HIDWORD(v27);
    __int16 v40 = 1024;
    int v41 = v22;
    __int16 v42 = 1024;
    int v43 = v11;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "[AccAuth] handleAuthInfoResp: role %d, sessionID %d; inMessage %#04x, ctl0 %02x, ctl1 %02x, len %d, infoType %d, errorNo %d \n",
      buf,
      0x32u);
    if (v11) {
      goto LABEL_18;
    }
    return 0LL;
  }

  if (!v11) {
    return 0LL;
  }
LABEL_18:
  BOOL inited = acc_auth_protocol_initFinishMessage(a1, 81, a4, a5);
  _acc_auth_protocol_handleSessionAuthenticationState(a1, 0);
  return inited;
}

void __acc_auth_protocol_handleAuthFinishResp(void *a1, unsigned __int8 *a2, unsigned int a3)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v6 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    uint64_t v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(unsigned __int8 *)a1;
    int v8 = *a2;
    int v9 = a2[1];
    int v10 = a2[2];
    int v11 = 0;
    acc_auth_protocol_sizeofMessage((uint64_t)a2, a3, (int *)buf, &v11);
    *(_DWORD *)buf = 67110144;
    int v13 = v7;
    __int16 v14 = 1024;
    int v15 = v8;
    __int16 v16 = 1024;
    int v17 = v9;
    __int16 v18 = 1024;
    int v19 = v10;
    __int16 v20 = 1024;
    int v21 = v11;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "[AccAuth] handleAuthFinishResp: sessionID %d, inMessage %#04x, ctl0 %02x, ctl1 %02x, len %d \n",  buf,  0x20u);
  }

  if (a2[4] == 1)
  {
    if (bswap32(*(_DWORD *)(a2 + 5))) {
      _acc_auth_protocol_handleSessionAuthenticationState(a1, 0);
    }
  }

uint64_t acc_auth_protocol_checkMessage(unsigned __int8 *a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  unsigned int v6 = 0;
  if (a1 && a2 && a3)
  {
    uint64_t v7 = 0LL;
    if (a4)
    {
      uint64_t v8 = 0LL;
      unsigned int v6 = a3;
      uint64_t v9 = a2 + a3;
      while ((*(_BYTE *)(a2 + v8) & 0xF8) != 0xA0)
      {
        if (a3 == (_DWORD)++v8) {
          goto LABEL_10;
        }
      }

      uint64_t v9 = a2 + v8;
      unsigned int v6 = v8;
LABEL_10:
      if (a3 - v6 < 4) {
        uint64_t v7 = 0LL;
      }
      else {
        uint64_t v7 = acc_auth_protocol_sizeofMessage(v9, a3 - v6, 0LL, 0LL);
      }
    }
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v10 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    int v10 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    int v12 = *((_DWORD *)a1 + 286);
    int v13 = *a1;
    v14[0] = 67109888;
    v14[1] = v12;
    __int16 v15 = 1024;
    int v16 = v13;
    __int16 v17 = 1024;
    unsigned int v18 = v6;
    __int16 v19 = 1024;
    int v20 = v7;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "[AccAuth] handleMessage: authSession: role %d, sessionID %d, skipBytes %d, messageLen %d \n",  (uint8_t *)v14,  0x1Au);
    if (!a4) {
      return v7;
    }
    goto LABEL_21;
  }

  if (a4) {
LABEL_21:
  }
    *a4 = v6;
  return v7;
}

void OUTLINED_FUNCTION_3_7(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

BOOL _parseIdentificationParams_1(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  BOOL v63 = 0;
  if (!a1)
  {
    __int16 v48 = (os_log_s *)logObjectForModule_14();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
      _parseIdentificationParams_cold_1_1(v48, v49, v50, v51, v52, v53, v54, v55);
    }
    return 0LL;
  }

  uint64_t v5 = a1;
  if (iAP2MsgGetParamID((uint64_t)a3) != 22)
  {
    BOOL v24 = 0LL;
    LODWORD(v12) = 10;
LABEL_51:
    iap2_identification_addRejectParam(v5, 22, v12);
    return v24;
  }

  uint64_t v56 = v5;
  unsigned int v6 = kCFAllocatorDefault;
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, a3);
  uint64_t v9 = &startLogsNotificationObservers;
  int v10 = &startLogsNotificationObservers;
  unsigned int v59 = Mutable;
  if (FirstParam)
  {
    NextParam = (unsigned __int16 *)FirstParam;
    DataAsString = 0LL;
    unsigned __int16 DataAsU16 = 0;
    int v60 = 0;
    uint64_t v61 = 0LL;
    uint64_t v12 = 10LL;
    while (1)
    {
      __int16 valuePtr = -21846;
      int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
      __int16 valuePtr = ParamID;
      if ((ParamID - 17) >= 7)
      {
        if (ParamID == 1)
        {
          if ((v61 & 0x100000000LL) != 0)
          {
            uint64_t v12 = 5LL;
            BOOL v16 = 1;
          }

          else
          {
            DataAsString = iAP2MsgGetDataAsString(NextParam, &v63);
            BOOL v16 = !v63;
          }

          HIDWORD(v61) = v16;
        }

        else if (ParamID)
        {
          __int16 v17 = v6;
          uint64_t v18 = v12;
          __int16 v19 = v9;
          uint64_t v20 = v9[353];
          int v21 = v10;
          int v22 = *((_DWORD *)v10 + 708);
          if (v20 && v22 >= 43)
          {
            int v23 = *(os_log_s **)(v20 + 336);
          }

          else
          {
            int v23 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)&__int128 v65 = v20;
              WORD4(v65) = 1024;
              *(_DWORD *)((char *)&v65 + 10) = v22;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            }
          }

          if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v65) = 22;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "unhandled sub-paramID:%04X\n", buf, 8u);
          }

          int v10 = v21;
          uint64_t v12 = v18;
          uint64_t v9 = v19;
          CFMutableDictionaryRef Mutable = v59;
          unsigned int v6 = v17;
        }

        else
        {
          if ((v61 & 1) != 0)
          {
            uint64_t v12 = 5LL;
            BOOL v15 = 1;
          }

          else
          {
            unsigned __int16 DataAsU16 = iAP2MsgGetDataAsU16(NextParam, &v63);
            BOOL v15 = !v63;
          }

          LODWORD(v61) = v15;
        }

        goto LABEL_30;
      }

      if (iAP2MsgIsDataVoid(NextParam))
      {
        CFNumberRef v14 = CFNumberCreate(v6, kCFNumberShortType, &valuePtr);
        v79.uint64_t length = CFArrayGetCount(Mutable);
        v79.location = 0LL;
        if (CFArrayContainsValue(Mutable, v79, v14))
        {
          uint64_t v12 = 5LL;
          if (!v14) {
            goto LABEL_30;
          }
LABEL_15:
          CFRelease(v14);
          goto LABEL_30;
        }

        CFArrayAppendValue(Mutable, v14);
        int v60 = 1;
        if (v14) {
          goto LABEL_15;
        }
      }

LABEL_30:
      NextParam = iAP2MsgGetNextParam(a2, a3, NextParam);
      if (!NextParam) {
        goto LABEL_34;
      }
    }
  }

  uint64_t v61 = 0LL;
  int v60 = 0;
  unsigned __int16 DataAsU16 = 0;
  DataAsString = 0LL;
  LODWORD(v12) = 10;
LABEL_34:
  uint64_t v25 = v9[353];
  if (v25 && *((int *)v10 + 708) >= 43)
  {
    int v26 = *(os_log_s **)(v25 + 336);
    int v27 = v60;
    int v28 = HIDWORD(v61);
  }

  else
  {
    int v26 = (os_log_s *)&_os_log_default;
    int v27 = v60;
    int v28 = HIDWORD(v61);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109632;
    LODWORD(v65) = v61 & 1;
    WORD2(v65) = 1024;
    *(_DWORD *)((char *)&v65 + 6) = v28 & 1;
    WORD5(v65) = 1024;
    HIDWORD(v65) = v27 & 1;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "componentIDReceived: %d, componentNameReceived: %d, componentGPRSDataReceived: %d",  buf,  0x14u);
  }

  if ((v61 & v28 & v27 & 1) == 0 || (_DWORD)v12 == 5)
  {
    int v32 = 0;
    if ((_DWORD)v12 == 10) {
      LODWORD(v12) = 2;
    }
    uint64_t v5 = v56;
    if (Mutable) {
      goto LABEL_49;
    }
    goto LABEL_50;
  }

  unsigned __int8 v29 = acc_userDefaults_BOOLForKey((uint64_t)@"RejectionOfMultipleLocation");
  uint64_t v30 = v9[353];
  if (v30 && *((int *)v10 + 708) >= 43)
  {
    int v31 = *(os_log_s **)(v30 + 336);
  }

  else
  {
    int v31 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109634;
    LODWORD(v65) = DataAsU16;
    WORD2(v65) = 2080;
    *(void *)((char *)&v65 + 6) = DataAsString;
    HIWORD(v65) = 2112;
    __int16 v66 = Mutable;
    _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_INFO,  "All are Valid: componentID: %d, componentName: %s, supportedNMEASentencesArray: %@",  buf,  0x1Cu);
  }

  uint64_t v5 = v56;
  if (!iap2_feature_getFeature(v56, 0xCu))
  {
    iap2_features_createFeature(v56, 0xCu);
    iap2_identification_setIdentifiedForFeature(v56, 0xCu);
  }

  if ((platform_location_setSupportedNMEASentencesForEndpoint(*(void *)(v56 + 8), (uint64_t)Mutable) & 1) != 0)
  {
    LODWORD(v12) = 0;
    int v32 = 1;
    if (!Mutable) {
      goto LABEL_50;
    }
LABEL_49:
    CFRelease(Mutable);
    goto LABEL_50;
  }

  __int16 v34 = v9;
  uint64_t v35 = v9[353];
  if (v35 && *((int *)v10 + 708) >= 43)
  {
    __int16 v36 = *(os_log_s **)(v35 + 336);
  }

  else
  {
    __int16 v36 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (!os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
  {
    if ((v29 & 1) != 0) {
      goto LABEL_69;
    }
LABEL_72:
    uint64_t v44 = v34[353];
    if (v44 && *((int *)v10 + 708) >= 43)
    {
      int v45 = *(os_log_s **)(v44 + 336);
    }

    else
    {
      int v45 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    int v32 = 1;
    CFMutableDictionaryRef Mutable = v59;
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v47 = *(void *)(v56 + 8);
      __int16 v46 = *(const __CFArray **)(v56 + 16);
      *(_DWORD *)buf = 136317186;
      *(void *)&__int128 v65 = "_parseIdentificationParams";
      WORD4(v65) = 1024;
      *(_DWORD *)((char *)&v65 + 10) = 359;
      HIWORD(v65) = 2112;
      __int16 v66 = v46;
      __int16 v67 = 2112;
      uint64_t v68 = v47;
      __int16 v69 = 1024;
      int v70 = 0;
      __int16 v71 = 1024;
      int v72 = 0;
      __int16 v73 = 1024;
      int v74 = 1;
      __int16 v75 = 1024;
      int v76 = v12;
      __int16 v77 = 1024;
      int v78 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "%s:%d %@ - %@, setSupportedNMEASentencesForEndpoint failed, but don't reject!! rejectionOfMultipleLocation %d, r esult %d -> %d, rejectReason %d -> %d",  buf,  0x44u);
    }

    LODWORD(v12) = 0;
    if (v59) {
      goto LABEL_49;
    }
    goto LABEL_50;
  }

  _parseIdentificationParams_cold_3(v36, v37, v38, v39, v40, v41, v42, v43);
  if ((v29 & 1) == 0) {
    goto LABEL_72;
  }
LABEL_69:
  int v32 = 0;
  CFMutableDictionaryRef Mutable = v59;
  if (v59) {
    goto LABEL_49;
  }
LABEL_50:
  BOOL v24 = v32 != 0;
  if ((_DWORD)v12) {
    goto LABEL_51;
  }
  return v24;
}

  if (gLogObjects) {
    BOOL v15 = gNumLogObjects < 30;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    BOOL v16 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    BOOL v16 = *(os_log_s **)(gLogObjects + 232);
  }

  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    uint64_t v20 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Failed to identify for iAP2 EA, rejectReason = %d",  buf,  8u);
  }

  return v5;
}

  uint64_t v18 = v7[353];
  if (v18 && gNumLogObjects >= 60)
  {
    __int16 v19 = *(os_log_s **)(v18 + 472);
  }

  else
  {
    __int16 v19 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = v5 - 1LL;
    else {
      int v21 = off_1001FD120[v20];
    }
    int v22 = *(_DWORD *)(a1 + 8);
    else {
      int v23 = off_1001FD120[v9 - 1];
    }
    *(_DWORD *)buf = 136317698;
    uint64_t v37 = "qiAuth_protocol_processIncomingData";
    uint64_t v38 = 1024;
    uint64_t v39 = 433;
    uint64_t v40 = 1024;
    uint64_t v41 = v6;
    uint64_t v42 = 1024;
    uint64_t v43 = v22;
    uint64_t v44 = 1024;
    *(_DWORD *)int v45 = v10;
    *(_WORD *)&v45[4] = 1024;
    *(_DWORD *)&v45[6] = v5;
    *(_WORD *)&v45[10] = 2080;
    *(void *)&v45[12] = v21;
    __int16 v46 = 1024;
    uint64_t v47 = a3;
    __int16 v48 = 1024;
    uint64_t v49 = v9;
    uint64_t v50 = 2080;
    uint64_t v51 = v23;
    uint64_t v52 = 1024;
    uint64_t v53 = v35;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "%s:%d result %d, role %d, ver %d, msgType %d(%s), dataInLen %d, outMsgType %d(%s), dataOutLen %d",  buf,  0x50u);
  }

  return v6;
}

    NextParam = iAP2MsgGetNextParam(a2, a3, NextParam);
  }

  while (NextParam);
  if (!v13 || !v12 || !v11 || v14 == 5)
  {
    if (v14 != 10) {
      goto LABEL_54;
    }
LABEL_43:
    int v23 = 0LL;
    CFNumberRef v14 = 2;
    goto LABEL_55;
  }

  uint64_t v18 = CFNumberCreate(kCFAllocatorDefault, kCFNumberShortType, &valuePtr);
  if (v18)
  {
    __int16 v19 = v18;
    CFMutableDictionaryRef Mutable = *(const __CFDictionary **)(Feature + 8);
    if (!Mutable)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 1LL, &kCFTypeDictionaryKeyCallBacks, 0LL);
      *(void *)(Feature + _Block_object_dispose(va, 8) = Mutable;
    }

    if (CFDictionaryContainsKey(Mutable, v19))
    {
      int v21 = *(const __CFDictionary **)(Feature + 8);
      if (v21)
      {
        CFDictionaryApplyFunction( v21,  (CFDictionaryApplierFunction)_CFDictionaryApplierFunction_releaseHIDComponents,  0LL);
        int v22 = *(const void **)(Feature + 8);
        if (v22)
        {
          CFRelease(v22);
          *(void *)(Feature + _Block_object_dispose(va, 8) = 0LL;
        }
      }

      CFNumberRef v14 = 3;
    }

    else
    {
      BOOL v24 = calloc(1uLL, 0x18uLL);
      uint64_t v25 = v24;
      if (v24)
      {
        unsigned __int8 *v24 = 0;
        *((_WORD *)v24 + 2) = valuePtr;
        *((void *)v24 + 1) = CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
        v25[4] = v15;
        if (gLogObjects && gNumLogObjects >= 33)
        {
          int v26 = *(os_log_s **)(gLogObjects + 256);
        }

        else
        {
          int v26 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          int v27 = *v25;
          int v28 = *((unsigned __int16 *)v25 + 2);
          unsigned __int8 v29 = *((void *)v25 + 1);
          uint64_t v30 = v25[4];
          *(_DWORD *)buf = 67109890;
          uint64_t v38 = v27;
          uint64_t v39 = 1024;
          uint64_t v40 = v28;
          uint64_t v41 = 2112;
          uint64_t v42 = v29;
          uint64_t v43 = 1024;
          uint64_t v44 = v30;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "Adding iAP HID componentType: %d componentID: %d: '%@' %{coreacc:iAP2ParamID_IdentificationInfo_HIDComponent_Function_t}d",  buf,  0x1Eu);
        }
      }

      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(Feature + 8), v19, v25);
      CFNumberRef v14 = 0;
      *(_BYTE *)uint64_t Feature = 1;
    }

    CFRelease(v19);
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  LOBYTE(self->_rating)));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v12, @"ACCMediaLibraryUpdateItemRating");

  validMask = self->_validMask;
  if ((validMask & 0x10) == 0)
  {
LABEL_6:
    if ((validMask & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }

  a3->var4 = self->_rating;
  a3->var0 |= 8u;
  if ((validMask & 0x10) == 0)
  {
LABEL_6:
    if ((validMask & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }

  a3->var7 = self->_radioStation;
  a3->var0 |= 0x40u;
  if ((validMask & 0x100) == 0)
  {
LABEL_19:
    if ((validMask & 0x200) == 0) {
      return;
    }
    goto LABEL_20;
  }

void *logObjectForModule_14()
{
  if (gLogObjects && gNumLogObjects >= 43) {
    return *(void **)(gLogObjects + 336);
  }
  uint64_t v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

uint64_t iap2_location_update(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0LL;
  BOOL v34 = 0;
  uint64_t v33 = a1;
  if (!a1) {
    return result;
  }
  uint64_t v4 = a2;
  if (!a2) {
    return result;
  }
  uint64_t result = iap2_feature_getFeature(a1, 0xCu);
  if (!result) {
    return result;
  }
  if (!*(_BYTE *)result)
  {
    if (gLogObjects && gNumLogObjects >= 43)
    {
      uint64_t v30 = *(os_log_s **)(gLogObjects + 336);
    }

    else
    {
      uint64_t v30 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    uint64_t result = os_log_type_enabled(v30, OS_LOG_TYPE_INFO);
    if ((_DWORD)result)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_INFO,  "Update received when location not started!\n",  buf,  2u);
      return 0LL;
    }

    return result;
  }

  unint64_t FirstParam = iAP2MsgGetFirstParam(v4, 0LL);
  if (!FirstParam)
  {
    unsigned __int8 v7 = 0;
    return v7 & 1;
  }

  NextParam = (unsigned __int16 *)FirstParam;
  unsigned __int8 v7 = 0;
  uint64_t v32 = v4;
  while (1)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)NextParam);
    if (!ParamID) {
      break;
    }
    int v9 = ParamID;
    uint64_t v10 = gLogObjects;
    int v11 = gNumLogObjects;
    if (gLogObjects && gNumLogObjects >= 43)
    {
      uint64_t v12 = *(os_log_s **)(gLogObjects + 336);
    }

    else
    {
      uint64_t v12 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218240;
        CFStringRef v38 = (CFStringRef)v10;
        __int16 v39 = 1024;
        LODWORD(v40) = v11;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
      }
    }

    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v3_Block_object_dispose(va, 8) = v9;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Unrecognized paramID: 0x%04X", buf, 8u);
    }

LABEL_51:
    uint64_t v4 = v32;
    NextParam = iAP2MsgGetNextParam(v32, 0LL, NextParam);
    if (!NextParam) {
      return v7 & 1;
    }
  }

  DataAsString = iAP2MsgGetDataAsString(NextParam, &v34);
  if (!v34)
  {
    CFNumberRef v14 = (const char *)DataAsString;
    if (!DataAsString) {
      return v7 & 1;
    }
    int ParamValueLen = iAP2MsgGetParamValueLen(NextParam);
    if (ParamValueLen && !v14[ParamValueLen - 1])
    {
      BOOL v16 = &v14[ParamValueLen];
      do
      {
        size_t v17 = strlen(v14) + 1;
        if (v17 <= 0x800)
        {
          CFStringRef v18 = CFStringCreateWithCString(kCFAllocatorDefault, v14, 0x8000100u);
          uint64_t v19 = gLogObjects;
          int v20 = gNumLogObjects;
          if (gLogObjects) {
            BOOL v21 = gNumLogObjects <= 42;
          }
          else {
            BOOL v21 = 1;
          }
          int v22 = !v21;
          if (v18)
          {
            CFStringRef v23 = v18;
            if (v22)
            {
              BOOL v24 = *(os_log_s **)(gLogObjects + 336);
            }

            else
            {
              BOOL v24 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                CFStringRef v38 = (CFStringRef)v19;
                __int16 v39 = 1024;
                LODWORD(v40) = v20;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              }
            }

            if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              CFStringRef v38 = v23;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "nmeaSentenceRef: %@", buf, 0xCu);
            }

            unsigned __int8 v7 = platform_location_update(*(void *)(v33 + 8), (uint64_t)v23);
            if ((v7 & 1) == 0)
            {
              uint64_t v26 = gLogObjects;
              int v27 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 43)
              {
                int v28 = *(os_log_s **)(gLogObjects + 336);
              }

              else
              {
                int v28 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  CFStringRef v38 = (CFStringRef)v26;
                  __int16 v39 = 1024;
                  LODWORD(v40) = v27;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                }
              }

              if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
              {
                uint64_t v29 = *(void *)(v33 + 8);
                *(_DWORD *)buf = 138412546;
                CFStringRef v38 = v23;
                __int16 v39 = 2112;
                uint64_t v40 = v29;
                _os_log_error_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "platform_location_update failed to forward nmeaSentenceRef: %@ on endpoint: %@",  buf,  0x16u);
              }
            }

            CFRelease(v23);
          }

          else
          {
            if (v22)
            {
              uint64_t v25 = *(os_log_s **)(gLogObjects + 336);
            }

            else
            {
              uint64_t v25 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                CFStringRef v38 = (CFStringRef)v19;
                __int16 v39 = 1024;
                LODWORD(v40) = v20;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              }
            }

            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
              iap2_location_update_cold_2(v35, v36, v25);
            }
          }
        }

        v14 += v17;
      }

      while (v14 < v16);
    }

    goto LABEL_51;
  }

  int MsgID = iAP2MsgGetMsgID(v4);
  printf("Param ID: %d parse error for Msg ID: 0x%04X - ignoring message", 0, MsgID);
  return v7 & 1;
}

  if (gLogObjects && gNumLogObjects >= 10)
  {
    __int16 v39 = (os_log_s *)*(id *)(gLogObjects + 72);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v39 = (os_log_s *)&_os_log_default;
    uint64_t v40 = &_os_log_default;
  }

  if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "accessory doesn't support public iAP", buf, 2u);
  }

LABEL_66:
  objc_storeStrong((id *)&self->_EAProtocols, obj);
  if ([v10 count]) {
    objc_storeStrong((id *)&self->_EAProtocolsAppMatching, v10);
  }
}

uint64_t iap2_location_start(uint64_t result, const __CFDictionary *a2)
{
  if (result)
  {
    BOOL v3 = (uint64_t *)result;
    if (gLogObjects && gNumLogObjects >= 43)
    {
      uint64_t v4 = *(os_log_s **)(gLogObjects + 336);
    }

    else
    {
      uint64_t v4 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = v3[1];
      *(_DWORD *)buf = 136315650;
      size_t v17 = "iap2_location_start";
      __int16 v18 = 2112;
      uint64_t v19 = v5;
      __int16 v20 = 2112;
      BOOL v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s %@, attributes %@", buf, 0x20u);
    }

    if (!a2) {
      return 0LL;
    }
    iAP2MsgInit((uint64_t)(v3 + 15), 65530, v3[24], 0xFFFF, 0LL, 0LL);
    unsigned int v6 = 0;
    *(_DWORD *)buf = 0;
    while (1)
    {
      int valuePtr = v6 | 0x8000;
      CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, buf);
      CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
      if (!v7) {
        goto LABEL_16;
      }
      uint64_t Value = (const __CFNumber *)CFDictionaryGetValue(a2, v7);
      if (!Value) {
        goto LABEL_16;
      }
      unsigned int v14 = 0;
      if (!CFNumberGetValue(Value, kCFNumberIntType, &v14)) {
        goto LABEL_16;
      }
      uint64_t v10 = (uint64_t)(v3 + 15);
      if (v14 == 1) {
        break;
      }
      iAP2MsgAddU32Param(v10, 0LL, *(__int16 *)buf, v14);
      if (v8)
      {
LABEL_17:
        int v11 = (const __CFNumber *)CFDictionaryGetValue(a2, v8);
        if (v11)
        {
          unsigned int v14 = 0;
          if (CFNumberGetValue(v11, kCFNumberIntType, &v14))
          {
            uint64_t v12 = (uint64_t)(v3 + 15);
            if (v14 == 1) {
              iAP2MsgAddVoidParam(v12, 0LL, valuePtr);
            }
            else {
              iAP2MsgAddU32Param(v12, 0LL, valuePtr, v14);
            }
          }
        }
      }

LABEL_24:
      if (v7) {
        CFRelease(v7);
      }
      if (v8) {
        CFRelease(v8);
      }
      unsigned int v6 = *(_DWORD *)buf + 1;
      *(_DWORD *)buf = v6;
      if (v6 >= 8)
      {
        if ((iap2_sessionControl_sendOutgoingMessage(v3, (uint64_t)(v3 + 15)) & 1) != 0)
        {
          uint64_t Feature = (_BYTE *)iap2_feature_getFeature((uint64_t)v3, 0xCu);
          uint64_t result = 1LL;
          if (Feature) {
            *uint64_t Feature = 1;
          }
          return result;
        }

        return 0LL;
      }
    }

    iAP2MsgAddVoidParam(v10, 0LL, *(__int16 *)buf);
LABEL_16:
    if (v8) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }

  return result;
}
}

      BOOL v21 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformUSBManager sharedManager](&OBJC_CLASS___ACCPlatformUSBManager, "sharedManager"));
      int v22 = (void *)objc_claimAutoreleasedReturnValue([v21 usbModeSubscribers]);
      [v22 removeObject:v10];

      CFStringRef v23 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformUSBManager sharedManager](&OBJC_CLASS___ACCPlatformUSBManager, "sharedManager"));
      BOOL v24 = (void *)objc_claimAutoreleasedReturnValue([v23 subscriberList]);
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformUSBManager sharedManager](&OBJC_CLASS___ACCPlatformUSBManager, "sharedManager"));
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 usbModeSubscribers]);
      int v27 = @"USBModeSubscribers";
      goto LABEL_27;
    }

    if (v6 == @"USBFaultSubscribers")
    {
      uint64_t v32 = 0u;
      uint64_t v33 = 0u;
      uint64_t v30 = 0u;
      int v31 = 0u;
      CFNumberRef v8 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformUSBManager sharedManager](&OBJC_CLASS___ACCPlatformUSBManager, "sharedManager", 0LL));
      int v9 = (void *)objc_claimAutoreleasedReturnValue([v8 usbFaultSubscribers]);

      uint64_t v10 = [v9 countByEnumeratingWithState:&v30 objects:v38 count:16];
      if (v10)
      {
        int v11 = *(void *)v31;
        while (2)
        {
          for (CFIndex j = 0LL; j != v10; CFIndex j = (char *)j + 1)
          {
            if (*(void *)v31 != v11) {
              objc_enumerationMutation(v9);
            }
            int v13 = *(void **)(*((void *)&v30 + 1) + 8LL * (void)j);
            unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKey:v5]);

            if (v14)
            {
              uint64_t v10 = v13;
              goto LABEL_26;
            }
          }

          uint64_t v10 = [v9 countByEnumeratingWithState:&v30 objects:v38 count:16];
          if (v10) {
            continue;
          }
          break;
        }
      }

  CFNumberRef v7 = gLogObjects;
  CFNumberRef v8 = gNumLogObjects;
  if (gLogObjects && gNumLogObjects >= 1)
  {
    int v9 = (os_log_s *)*(id *)gLogObjects;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      acc_nvmInfo_getPairingStatus_cold_1(v7, v8);
    }
    int v9 = (os_log_s *)&_os_log_default;
    uint64_t v25 = &_os_log_default;
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
    -[ACCMediaLibraryUpdateItem copyDict].cold.1(p_validMask, (uint64_t)v3, v9);
  }

  return v3;
}

uint64_t iap2_location_stop(uint64_t result, uint64_t a2)
{
  if (result)
  {
    BOOL v3 = (uint64_t *)result;
    if (gLogObjects && gNumLogObjects >= 43)
    {
      uint64_t v4 = *(os_log_s **)(gLogObjects + 336);
    }

    else
    {
      uint64_t v4 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = v3[1];
      int v8 = 136315650;
      int v9 = "iap2_location_stop";
      __int16 v10 = 2112;
      uint64_t v11 = v5;
      __int16 v12 = 2112;
      uint64_t v13 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s %@, attributes %@", (uint8_t *)&v8, 0x20u);
    }

    uint64_t result = iap2_feature_getFeature((uint64_t)v3, 0xCu);
    if (result)
    {
      unsigned int v6 = (_BYTE *)result;
      if (*(_BYTE *)result)
      {
        iAP2MsgInit((uint64_t)(v3 + 15), 65532, v3[24], 0xFFFF, 0LL, 0LL);
        uint64_t result = iap2_sessionControl_sendOutgoingMessage(v3, (uint64_t)(v3 + 15));
        if ((_DWORD)result)
        {
          _BYTE *v6 = 0;
          return 1LL;
        }
      }

      else
      {
        if (gLogObjects && gNumLogObjects >= 43)
        {
          CFNumberRef v7 = *(os_log_s **)(gLogObjects + 336);
        }

        else
        {
          CFNumberRef v7 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        uint64_t result = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
        if ((_DWORD)result)
        {
          LOWORD(v_Block_object_dispose(va, 8) = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "feature not started", (uint8_t *)&v8, 2u);
          return 0LL;
        }
      }
    }
  }

  return result;
}

uint64_t iap2_location_send_gprmc_data_values(uint64_t result, const __CFDictionary *a2)
{
  if (!result) {
    return result;
  }
  BOOL v3 = (uint64_t *)result;
  if (gLogObjects && gNumLogObjects >= 43)
  {
    uint64_t v4 = *(os_log_s **)(gLogObjects + 336);
  }

  else
  {
    uint64_t v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = v3[1];
    unsigned int v14 = 136315650;
    BOOL v15 = "iap2_location_send_gprmc_data_values";
    __int16 v16 = 2112;
    uint64_t v17 = v5;
    __int16 v18 = 2112;
    uint64_t v19 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s %@, attributes %@", (uint8_t *)&v14, 0x20u);
  }

  if ((iap2_identification_isIdentifiedForOutgoingMessageID((uint64_t)v3, 0xFFF0u) & 1) == 0)
  {
    uint64_t v11 = (os_log_s *)logObjectForModule_14();
    uint64_t result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result) {
      return result;
    }
    iap2_location_send_gprmc_data_values_cold_2(v11, v12, v13);
    return 0LL;
  }

  uint64_t result = iap2_feature_getFeature((uint64_t)v3, 0xCu);
  if (!result) {
    return result;
  }
  if (*(_BYTE *)result)
  {
    iAP2MsgInit((uint64_t)(v3 + 15), 65520, v3[24], 0xFFFF, 0LL, 0LL);
    uint64_t Value = (const __CFArray *)CFDictionaryGetValue(a2, @"GPRMCDataStatus");
    if (Value)
    {
      CFNumberRef v7 = Value;
      if (CFArrayGetCount(Value) >= 1)
      {
        CFIndex v8 = 0LL;
        do
        {
          ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v7, v8);
          if (ValueAtIndex)
          {
            unsigned int v14 = 3;
            if (CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &v14))
            {
              if (v14 <= 2) {
                iAP2MsgAddVoidParam((uint64_t)(v3 + 15), 0LL, v14);
              }
            }
          }

          ++v8;
        }

        while (CFArrayGetCount(v7) > v8);
      }
    }

    return iap2_sessionControl_sendOutgoingMessage(v3, (uint64_t)(v3 + 15));
  }

  if (gLogObjects && gNumLogObjects >= 43)
  {
    __int16 v10 = *(os_log_s **)(gLogObjects + 336);
  }

  else
  {
    __int16 v10 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  uint64_t result = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
  if ((_DWORD)result)
  {
    LOWORD(v14) = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "feature not started", (uint8_t *)&v14, 2u);
    return 0LL;
  }

  return result;
}

_BYTE *_createFeature_7(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v2 = calloc(1uLL, 1uLL);
  BOOL v3 = v2;
  if (v2)
  {
    *uint64_t v2 = 0;
    platform_location_setSupportedNMEASentencesForEndpoint(*(void *)(a1 + 8), 0LL);
  }

  return v3;
}

id _destroyFeature_7(void **a1, uint64_t a2)
{
  id v2 = 0LL;
  if (a1 && a2)
  {
    if (*a1)
    {
      id v2 = platform_location_resetSupportedNMEASentencesForEndpoint(*(void *)(a2 + 8));
      if (*a1)
      {
        free(*a1);
        *a1 = 0LL;
      }
    }

    else
    {
      return 0LL;
    }
  }

  return v2;
}

BOOL _startFeatureFromDevice_4(BOOL result)
{
  if (result) {
    return iap2_feature_getFeature(result, 0xCu) != 0;
  }
  return result;
}

uint64_t _checkIdentificationInfo_6(uint64_t a1)
{
  char v6 = 0;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&_checkIdentificationInfo__kMsgLocationList, 4u, &v6);
  uint64_t v3 = v2;
  if (v6) {
    BOOL v4 = (_DWORD)v2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    iap2_features_createFeature(a1, 0xCu);
    iap2_identification_setIdentifiedForFeature(a1, 0xCu);
  }

  return v3;
}

void _handleIdentificationRejection_0(uint64_t a1)
{
  if (!a1 || (uint64_t v2 = *(void *)(a1 + 8)) == 0) {
    uint64_t v2 = 0LL;
  }
  if ((platform_location_resetSupportedNMEASentencesForEndpoint(v2) & 1) == 0)
  {
    if (gLogObjects && gNumLogObjects >= 43)
    {
      uint64_t v3 = *(os_log_s **)(gLogObjects + 336);
    }

    else
    {
      uint64_t v3 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      _handleIdentificationRejection_cold_1(a1 == 0, a1, v3);
    }
  }

void OUTLINED_FUNCTION_5_9(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t platform_bluetooth_copyNameForMacAddress(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformPluginManager sharedManager](&OBJC_CLASS___ACCPlatformPluginManager, "sharedManager"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( [v2 pluginInstanceWithProtocol:&OBJC_PROTOCOL___ACCPlatformBluetoothAccessoryInformationPluginProtocol fallbackToTransportPlugins:1]);

  if (!v3)
  {
    if (gLogObjects) {
      BOOL v5 = gNumLogObjects < 7;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        _parseIdentificationParams_cold_2();
      }
      CFIndex v8 = (os_log_s *)&_os_log_default;
      id v6 = &_os_log_default;
    }

    else
    {
      CFIndex v8 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      platform_bluetooth_copyNameForMacAddress_cold_1(v8);
    }

    goto LABEL_24;
  }

  if ((objc_opt_respondsToSelector(v3, "nameForMacAddress:") & 1) == 0)
  {
    if (gLogObjects && gNumLogObjects >= 7)
    {
      CFNumberRef v7 = (os_log_s *)*(id *)(gLogObjects + 48);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        _parseIdentificationParams_cold_2();
      }
      CFNumberRef v7 = (os_log_s *)&_os_log_default;
      id v9 = &_os_log_default;
    }

    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v10 = NSStringFromSelector("nameForMacAddress:");
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      int v13 = 138412290;
      unsigned int v14 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[#Bluetooth] Platform plugin does not implement selector %@!",  (uint8_t *)&v13,  0xCu);
    }

LABEL_24:
    uint64_t v4 = 0LL;
    goto LABEL_25;
  }

  uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 nameForMacAddress:a1]);
LABEL_25:

  return v4;
}

void ACCUNManagerPresentNotification(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = a1;
    id v4 = a2;
    id v5 = (id)objc_claimAutoreleasedReturnValue(+[ACCUserNotificationManager sharedManager](&OBJC_CLASS___ACCUserNotificationManager, "sharedManager"));
    [v5 presentNotification:v3 completionHandler:v4];
  }

void ACCUNManagerDismissNotificationsWithGroupIdentifier(uint64_t a1)
{
  if (a1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue(+[ACCUserNotificationManager sharedManager](&OBJC_CLASS___ACCUserNotificationManager, "sharedManager"));
    [v2 dismissNotificationsWithGroupIdentifier:a1];
  }

void sub_10007C9C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id location, id a22)
{
}

uint64_t _maximumCurrentAvailableFromDevice(uint64_t **a1)
{
  else {
    return 100LL;
  }
}

BOOL _parseIdentificationParamsPower(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  int v32 = 0;
  if (!iap2_feature_getFeature(a1, 0x10u)) {
    iap2_features_createFeature(a1, 0x10u);
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 0x10u);
  if (Feature)
  {
    id v6 = (_DWORD *)Feature;
    int ParamID = iAP2MsgGetParamID((uint64_t)a3);
    if (ParamID <= 24)
    {
      if (ParamID != 8)
      {
        if (ParamID != 9) {
          return v32 == 0;
        }
        unsigned int DataAsU16 = iAP2MsgGetDataAsU16(a3, &v32);
        if (v32) {
          return v32 == 0;
        }
        unsigned int v12 = DataAsU16;
        if (DataAsU16 <= _maximumCurrentAvailableFromDevice((uint64_t **)a1))
        {
          v6[3] = v12;
          return v32 == 0;
        }

        int v13 = 6;
        uint64_t v14 = a1;
        int v15 = 9;
LABEL_35:
        unsigned int v23 = 6;
LABEL_53:
        iap2_identification_addRejectParam(v14, v15, v23);
        int v32 = v13;
        return v32 == 0;
      }

      int DataAsU8 = iAP2MsgGetDataAsU8(a3, &v32);
      if (!v32)
      {
        if (DataAsU8 != 1 || (*(_DWORD *)(*(void *)a1 + 24LL) | 8) != 8)
        {
          v6[1] = DataAsU8;
          return v32 == 0;
        }

        int v13 = 13;
        uint64_t v14 = a1;
        int v15 = 8;
        unsigned int v23 = 13;
        goto LABEL_53;
      }

      if (gLogObjects && gNumLogObjects >= 37)
      {
        uint64_t v25 = *(os_log_s **)(gLogObjects + 288);
      }

      else
      {
        uint64_t v25 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
        _parseIdentificationParamsPower_cold_3();
      }
      uint64_t v30 = a1;
      int v31 = 8;
    }

    else
    {
      if (ParamID != 25)
      {
        if (ParamID != 240)
        {
          if (ParamID == 241)
          {
            unsigned int v8 = iAP2MsgGetDataAsU8(a3, &v32);
            if (gLogObjects && gNumLogObjects >= 37)
            {
              id v9 = *(os_log_s **)(gLogObjects + 288);
            }

            else
            {
              id v9 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 67109376;
              unsigned int v34 = v8;
              __int16 v35 = 1024;
              int v36 = v32;
              _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "powerDuringSleepType during identification = %d, status = %d",  buf,  0xEu);
            }

            if (!v32)
            {
              v6[2] = v8;
              if (v8 <= 1)
              {
                uint64_t v29 = (os_log_s *)logObjectForModule_1(36);
                if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_INFO,  "identified for power during sleep over iAP2",  buf,  2u);
                }

                iap2_identification_setIdentifiedForFeature(a1, 0x10u);
              }

              return v32 == 0;
            }

            if (gLogObjects && gNumLogObjects >= 37)
            {
              uint64_t v26 = *(os_log_s **)(gLogObjects + 288);
            }

            else
            {
              uint64_t v26 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
              _parseIdentificationParamsPower_cold_5();
            }
            uint64_t v30 = a1;
            int v31 = 241;
            goto LABEL_73;
          }

          return v32 == 0;
        }

        unsigned int v21 = iAP2MsgGetDataAsU16(a3, &v32);
        if (v32) {
          return v32 == 0;
        }
        unsigned int v22 = v21;
        if (v21 <= platform_power_getUltraHighPowerModeCurrentLimit(*(const void **)(a1 + 8)))
        {
          v6[4] = v22;
          return v32 == 0;
        }

        int v13 = 6;
        uint64_t v14 = a1;
        int v15 = 240;
        goto LABEL_35;
      }

      unsigned int v17 = iAP2MsgGetDataAsU16(a3, &v32);
      if (gLogObjects) {
        BOOL v18 = gNumLogObjects <= 36;
      }
      else {
        BOOL v18 = 1;
      }
      int v19 = !v18;
      if (!v32)
      {
        unsigned int v27 = v17;
        if (v19)
        {
          int v28 = *(os_log_s **)(gLogObjects + 288);
        }

        else
        {
          int v28 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          unsigned int v34 = v27;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "maximumSiphoningCurrent: %d!!", buf, 8u);
        }

        return v32 == 0;
      }

      if (v19)
      {
        __int16 v20 = *(os_log_s **)(gLogObjects + 288);
      }

      else
      {
        __int16 v20 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        _parseIdentificationParamsPower_cold_9();
      }
      uint64_t v30 = a1;
      int v31 = 25;
    }

uint64_t iap2_power_checkIdentificationInfo(void **a1, uint64_t a2)
{
  char v13 = 0;
  uint64_t v4 = iap2_identification_checkIdentificationMsgIDs( (uint64_t)a1,  (uint64_t)&iap2_power_checkIdentificationInfo_skMsgPowerList,  6u,  &v13);
  uint64_t v5 = v4;
  if (v13) {
    BOOL v6 = (_DWORD)v4 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0x10u);
    if (Feature && (!*(_DWORD *)(Feature + 4) || acc_endpoint_isWireless(*a1)))
    {
      if (CFSetContainsValue(*(CFSetRef *)(a2 + 96), (const void *)0xAE03))
      {
        else {
          uint64_t v5 = 14LL;
        }
        uint64_t v8 = (uint64_t)a1;
        uint64_t v9 = 44547LL;
        unsigned int v10 = v5;
        goto LABEL_16;
      }

      if (CFSetContainsValue(*(CFSetRef *)(a2 + 96), (const void *)0xAE06))
      {
        uint64_t v5 = 11LL;
        uint64_t v8 = (uint64_t)a1;
        uint64_t v9 = 44550LL;
        unsigned int v10 = 11;
LABEL_16:
        iap2_identification_rejectMsgID(v8, v9, 0, v10);
        return v5;
      }
    }

    uint64_t v5 = 0LL;
  }

  if (v13) {
    BOOL v11 = (_DWORD)v5 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    iap2_identification_setIdentifiedForFeature((uint64_t)a1, 0x10u);
    return 0LL;
  }

  return v5;
}

uint64_t _processPowerSourceUpdate(uint64_t *a1, uint64_t a2)
{
  uint64_t Feature = iap2_feature_getFeature((uint64_t)a1, 0x10u);
  int v5 = *(_DWORD *)(Feature + 36);
  if (gLogObjects && gNumLogObjects >= 37)
  {
    BOOL v6 = *(os_log_s **)(gLogObjects + 288);
  }

  else
  {
    BOOL v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    _processPowerSourceUpdate_cold_6((uint64_t)a1, (unsigned __int16 *)a2, v6);
  }
  if (*(_BYTE *)(a2 + 2))
  {
    unsigned __int16 v21 = *(_WORD *)a2;
    uint64_t v7 = v21;
    *(_DWORD *)(Feature + 36) = v21;
    if (_checkRequiresChargingCurrentLimit(a1, v7, &v21))
    {
      if (gLogObjects && gNumLogObjects >= 37)
      {
        uint64_t v8 = *(os_log_s **)(gLogObjects + 288);
      }

      else
      {
        uint64_t v8 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        if (!a1 || (uint64_t v9 = a1[1]) == 0) {
          uint64_t v9 = 0LL;
        }
        *(_DWORD *)buf = 138412802;
        uint64_t v23 = v9;
        __int16 v24 = 1024;
        int v25 = v7;
        __int16 v26 = 1024;
        int v27 = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "!!!! Overriding availableCurrentForDevice(ChargingCurrentLimit) for accessory %@, %d -> %d",  buf,  0x18u);
      }

      uint64_t v7 = v21;
    }

    uint64_t v10 = *(void *)(Feature + 24);
    if ((v10 & 0x40) == 0) {
      platform_power_startPowerUpdates(a1[1], v10 | 0x40, v10);
    }
    platform_power_setAvailableCurrent((const void *)a1[1], v7, (_DWORD)v7 != (unsigned __int16)v5);
  }

  else
  {
    LOWORD(v7) = v5;
  }

  if (*(_BYTE *)(a2 + 4)) {
    platform_power_setShouldChargeDeviceBattery( (const void *)a1[1],  *(unsigned __int8 *)(a2 + 3),  (unsigned __int16)v7 != (unsigned __int16)v5);
  }
  if (*(_BYTE *)(a2 + 5))
  {
    if (gLogObjects && gNumLogObjects >= 37)
    {
      BOOL v11 = *(os_log_s **)(gLogObjects + 288);
    }

    else
    {
      BOOL v11 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = *(unsigned __int16 *)(a2 + 6);
      *(_DWORD *)buf = 67109120;
      LODWORD(v23) = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "siphoningCurrent=%d", buf, 8u);
    }
  }

  if (*(_BYTE *)(a2 + 8))
  {
    if (!*(_WORD *)(a2 + 10) && platform_power_isOvercurrentState(a1[1]))
    {
      if (gLogObjects && gNumLogObjects >= 37)
      {
        char v13 = *(os_log_s **)(gLogObjects + 288);
      }

      else
      {
        char v13 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = *(unsigned __int16 *)(a2 + 10);
        *(_DWORD *)buf = 67109120;
        LODWORD(v23) = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "ResetOvercurrentSiphoning(), reserveCurrent=%d",  buf,  8u);
      }

      platform_power_resetOvercurrentSiphoning(a1[1]);
    }

    if (gLogObjects && gNumLogObjects >= 37)
    {
      int v15 = *(os_log_s **)(gLogObjects + 288);
    }

    else
    {
      int v15 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    int v17 = *(unsigned __int16 *)(a2 + 10);
    if (v16)
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v23) = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "PowerSetReserveCurrent(), reserveCurrent=%d",  buf,  8u);
      int v17 = *(unsigned __int16 *)(a2 + 10);
    }

    platform_power_setReserveCurrent((const void *)a1[1], v17);
  }

  if (*(_BYTE *)(a2 + 13))
  {
    if (gLogObjects && gNumLogObjects >= 37)
    {
      BOOL v18 = *(os_log_s **)(gLogObjects + 288);
    }

    else
    {
      BOOL v18 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = *(unsigned __int8 *)(a2 + 13);
      *(_DWORD *)buf = 67109120;
      LODWORD(v23) = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "SetOvercurrentSiphoning(), maxNonSiphoningCurrentExceeded=%d",  buf,  8u);
    }

    platform_power_setOvercurrentSiphoning(a1[1]);
  }

  return 0LL;
}

BOOL _checkRequiresChargingCurrentLimit(uint64_t *a1, unsigned int a2, _WORD *a3)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v4 = (uint64_t *)*a1;
  if (!*a1) {
    return 0LL;
  }
  uint64_t v5 = *v4;
  if (!*v4) {
    return 0LL;
  }
  int v8 = platform_systemInfo_deviceType();
  int v9 = acc_authInfo_isAppleAccessory((void *)(v5 + 48));
  unsigned int v10 = platform_power_batteryLevelPercent();
  return acc_policies_endpointRequiresChargingCurrentLimit(*a1, v9, v8, a2, v10, a3);
}

uint64_t _cbPowerSourceUpdateParams(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  int v16 = 0;
  switch(iAP2MsgGetParamID((uint64_t)a3))
  {
    case 0u:
      __int16 DataAsU16 = iAP2MsgGetDataAsU16(a3, &v16);
      if (!v16)
      {
        __int16 v7 = DataAsU16;
        if (acc_userDefaults_BOOLForKey((uint64_t)@"IgnorePowerSourceUpdateForAvailableCurrent"))
        {
          if (gLogObjects && gNumLogObjects >= 37)
          {
            int v8 = *(os_log_s **)(gLogObjects + 288);
          }

          else
          {
            int v8 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            BOOL v18 = "_cbPowerSourceUpdateParams";
            __int16 v19 = 1024;
            int v20 = 491;
            __int16 v21 = 1024;
            int v22 = 0;
            goto LABEL_36;
          }
        }

        else
        {
          *(_WORD *)a4 = v7;
          *(_BYTE *)(a4 + 2) = 1;
        }
      }

      break;
    case 1u:
      BOOL DataAsBool = iAP2MsgGetDataAsBool(a3, (BOOL *)&v16);
      if (!v16)
      {
        BOOL v10 = DataAsBool;
        if (acc_userDefaults_BOOLForKey((uint64_t)@"IgnorePowerSourceUpdateForAvailableCurrent"))
        {
          if (gLogObjects && gNumLogObjects >= 37)
          {
            int v8 = *(os_log_s **)(gLogObjects + 288);
          }

          else
          {
            int v8 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            BOOL v18 = "_cbPowerSourceUpdateParams";
            __int16 v19 = 1024;
            int v20 = 507;
            __int16 v21 = 1024;
            int v22 = 1;
LABEL_36:
            _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s:%d iAP2MsgPowerSourceUpdate ignore paramID:%04X\n",  buf,  0x18u);
          }
        }

        else
        {
          *(_BYTE *)(a4 + 3) = v10;
          *(_BYTE *)(a4 + 4) = 1;
        }
      }

      break;
    case 3u:
      __int16 v12 = iAP2MsgGetDataAsU16(a3, &v16);
      if (!v16)
      {
        *(_WORD *)(a4 + 6) = v12;
        *(_BYTE *)(a4 + 5) = 1;
      }

      break;
    case 4u:
      __int16 v13 = iAP2MsgGetDataAsU16(a3, &v16);
      if (!v16)
      {
        *(_WORD *)(a4 + 10) = v13;
        *(_BYTE *)(a4 + _Block_object_dispose(va, 8) = 1;
      }

      break;
    case 5u:
      BOOL IsDataVoid = iAP2MsgIsDataVoid(a3);
      int v16 = !IsDataVoid << 31 >> 31;
      if (IsDataVoid) {
        *(_WORD *)(a4 + 12) = 257;
      }
      break;
    default:
      if (gLogObjects && gNumLogObjects >= 37)
      {
        BOOL v11 = *(os_log_s **)(gLogObjects + 288);
      }

      else
      {
        BOOL v11 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        _cbPowerSourceUpdateParams_cold_1();
      }
      break;
  }

  return v16;
}

id iap2_power_accessoryResetBaseCurrentHandler(uint64_t a1)
{
  unsigned int v1 = acc_manager_copyConnectionUUIDForEndpointUUID(*(const void **)(a1 + 8));
  id v2 = platform_power_resetBaseCurrent((uint64_t)v1);
  if (v1) {
    CFRelease(v1);
  }
  return v2;
}

BOOL iap2_power_powerSourceUpdateHandler(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = calloc(1uLL, 0xEuLL);
  int v5 = iAP2MsgForEachParamDo( a2,  0LL,  (uint64_t (*)(uint64_t, unsigned __int16 *, unsigned __int16 *, uint64_t))_cbPowerSourceUpdateParams,  (uint64_t)v4);
  if (v5)
  {
    if (gLogObjects && gNumLogObjects >= 37)
    {
      BOOL v6 = *(os_log_s **)(gLogObjects + 288);
    }

    else
    {
      BOOL v6 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      iap2_power_powerSourceUpdateHandler_cold_2();
    }
  }

  else
  {
    unint64_t v7 = (unint64_t)acc_userDefaults_copyIntegerForKey((uint64_t)@"PowerSourceUpdateBehavior");
    if ((v7 & 0xFFFFFFFFFFFFFFFDLL) != 0)
    {
      unint64_t v8 = v7;
      if (gLogObjects && gNumLogObjects >= 37)
      {
        int v9 = *(os_log_s **)(gLogObjects + 288);
      }

      else
      {
        int v9 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = 134217984;
        unint64_t v12 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "PowerSourceUpdate message ignored due to behavior(%ld)!\n",  (uint8_t *)&v11,  0xCu);
      }
    }

    else
    {
      _processPowerSourceUpdate(a1, (uint64_t)v4);
    }
  }

  if (v4) {
    free(v4);
  }
  return v5 == 0;
}

uint64_t _cbAccessoryPowerUpdateParams(uint64_t a1, uint64_t a2, unsigned __int16 *a3, _WORD *a4)
{
  unsigned int v10 = 0;
  if (iAP2MsgGetParamID((uint64_t)a3))
  {
    if (gLogObjects && gNumLogObjects >= 37)
    {
      BOOL v6 = *(os_log_s **)(gLogObjects + 288);
    }

    else
    {
      BOOL v6 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    uint64_t result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      _cbAccessoryPowerUpdateParams_cold_2();
      return 0LL;
    }
  }

  else
  {
    __int16 DataAsU16 = iAP2MsgGetDataAsU16(a3, &v10);
    if (gLogObjects && gNumLogObjects >= 37)
    {
      unint64_t v8 = *(os_log_s **)(gLogObjects + 288);
    }

    else
    {
      unint64_t v8 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      int v12 = DataAsU16;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "AccessoryPowerUpdate accessoryChargeCurrent:%04X\n",  buf,  8u);
    }

    uint64_t result = v10;
    if (!v10) {
      *a4 = DataAsU16;
    }
  }

  return result;
}

BOOL iap2_power_accessoryPowerUpdateHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (unsigned __int16 *)calloc(1uLL, 2uLL);
  int v5 = iAP2MsgForEachParamDo( a2,  0LL,  (uint64_t (*)(uint64_t, unsigned __int16 *, unsigned __int16 *, uint64_t))_cbAccessoryPowerUpdateParams,  (uint64_t)v4);
  if (!v5)
  {
    platform_power_updateAccessoryChargeCurrent(*(void *)(a1 + 8), *v4);
    goto LABEL_10;
  }

  if (gLogObjects && gNumLogObjects >= 37)
  {
    BOOL v6 = *(os_log_s **)(gLogObjects + 288);
  }

  else
  {
    BOOL v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    iap2_power_accessoryPowerUpdateHandler_cold_1();
    if (!v4) {
      return v5 == 0;
    }
    goto LABEL_10;
  }

  if (v4) {
LABEL_10:
  }
    free(v4);
  return v5 == 0;
}

uint64_t _cbStartPowerUpdatesParams(uint64_t a1, uint64_t a2, unsigned __int16 *a3, void *a4)
{
  unsigned int ParamID = iAP2MsgGetParamID((uint64_t)a3);
  if (ParamID <= 0xC)
  {
    BOOL IsDataVoid = iAP2MsgIsDataVoid(a3);
    uint64_t result = 1LL;
    if (!IsDataVoid) {
      return result;
    }
    *a4 |= 1 << ParamID;
    return 0LL;
  }

  if (gLogObjects && gNumLogObjects >= 37)
  {
    int v9 = *(os_log_s **)(gLogObjects + 288);
  }

  else
  {
    int v9 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0LL;
  if (v10)
  {
    v11[0] = 67109120;
    v11[1] = ParamID;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "StartPowerUpdates unhandled paramID:%04X\n",  (uint8_t *)v11,  8u);
    return 0LL;
  }

  return result;
}

uint64_t _setupPowerUpdateParam(uint64_t a1, int a2, unsigned int a3)
{
  switch(a2)
  {
    case 0:
      __int16 v5 = 0;
      goto LABEL_19;
    case 1:
      char v7 = a3;
      __int16 v8 = 1;
      goto LABEL_11;
    case 2:
      char v7 = a3;
      __int16 v8 = 2;
      goto LABEL_11;
    case 3:
      __int16 v5 = 3;
      goto LABEL_19;
    case 4:
      char v7 = a3;
      __int16 v8 = 4;
      goto LABEL_11;
    case 5:
      char v7 = a3;
      __int16 v8 = 5;
LABEL_11:
      iAP2MsgAddU8Param(a1, 0LL, v8, v7);
      goto LABEL_20;
    case 6:
      __int16 v5 = 6;
      goto LABEL_19;
    case 7:
      __int16 v5 = 7;
      goto LABEL_19;
    case 8:
      __int16 v5 = 8;
      goto LABEL_19;
    case 9:
      __int16 v5 = 9;
      goto LABEL_19;
    case 10:
      __int16 v5 = 10;
      goto LABEL_19;
    case 11:
      __int16 v5 = 11;
      goto LABEL_19;
    case 12:
      __int16 v5 = 12;
LABEL_19:
      iAP2MsgAddU16Param(a1, 0LL, v5, a3);
LABEL_20:
      uint64_t v9 = 0LL;
      break;
    default:
      if (gLogObjects && gNumLogObjects >= 37)
      {
        BOOL v6 = *(os_log_s **)(gLogObjects + 288);
      }

      else
      {
        BOOL v6 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      uint64_t v9 = 1LL;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v11[0] = 67109376;
        v11[1] = 1;
        __int16 v12 = 1024;
        int v13 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "PowerUpdate message processing error: %d. powerUpdateType: %d\n",  (uint8_t *)v11,  0xEu);
      }

      break;
  }

  return v9;
}

BOOL iap2_power_startPowerUpdatesHandler(uint64_t a1, uint64_t a2)
{
  __int16 v5 = (uint64_t *)(iap2_feature_getFeature(a1, 0x10u) + 24);
  uint64_t v4 = *v5;
  *__int16 v5 = 0LL;
  int v6 = iAP2MsgForEachParamDo( a2,  0LL,  (uint64_t (*)(uint64_t, unsigned __int16 *, unsigned __int16 *, uint64_t))_cbStartPowerUpdatesParams,  (uint64_t)v5);
  int v7 = v6;
  if (gLogObjects) {
    BOOL v8 = gNumLogObjects <= 36;
  }
  else {
    BOOL v8 = 1;
  }
  int v9 = !v8;
  if (v6)
  {
    if (v9)
    {
      BOOL v10 = *(os_log_s **)(gLogObjects + 288);
    }

    else
    {
      BOOL v10 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 67109120;
      LODWORD(v15) = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "StartPowerUpdate message processing error: %d\n",  (uint8_t *)&v14,  8u);
    }
  }

  else
  {
    if (v9)
    {
      int v11 = *(os_log_s **)(gLogObjects + 288);
    }

    else
    {
      int v11 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *v5;
      int v14 = 134217984;
      uint64_t v15 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "startPowerUpdates: 0x%llx",  (uint8_t *)&v14,  0xCu);
    }

    platform_power_startPowerUpdates(*(void *)(a1 + 8), *v5 | 0x40, v4);
  }

  return v7 == 0;
}

uint64_t iap2_power_stopPowerUpdatesHandler(uint64_t a1)
{
  *(void *)(iap2_feature_getFeature(a1, 0x10u) + 24) = 0LL;
  platform_power_stopPowerUpdates(*(void *)(a1 + 8));
  return 1LL;
}

uint64_t iap2_power_sendPowerUpdate( uint64_t a1, void *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  if (gLogObjects && gNumLogObjects >= 37)
  {
    int v11 = *(os_log_s **)(gLogObjects + 288);
  }

  else
  {
    int v11 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109888;
    LODWORD(v34) = a3;
    WORD2(v34) = 1024;
    *(_DWORD *)((char *)&v34 + 6) = a4;
    WORD5(v34) = 1024;
    HIDWORD(v34) = a5;
    *(_WORD *)__int16 v35 = 1024;
    *(_DWORD *)&v35[2] = a6;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "SendPowerUpdate: %d, %d, %d, %d\n",  buf,  0x1Au);
    if (!a2) {
      goto LABEL_55;
    }
  }

  else if (!a2)
  {
    goto LABEL_55;
  }

  if ((*a2 & (1 << a3)) == 0LL) {
    goto LABEL_55;
  }
  unsigned int v30 = a6;
  uint64_t v12 = malloc(0x48uLL);
  int v13 = malloc(0xFFFFuLL);
  if (gLogObjects && gNumLogObjects >= 31)
  {
    int v14 = *(os_log_s **)(gLogObjects + 240);
  }

  else
  {
    int v14 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    if (a1) {
      uint64_t v15 = *(const __CFString **)(a1 + 8);
    }
    else {
      uint64_t v15 = @"Null";
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&__int128 v34 = "iap2_power_sendPowerUpdate";
    WORD4(v34) = 1024;
    *(_DWORD *)((char *)&v34 + 10) = 865;
    HIWORD(v34) = 2112;
    *(void *)__int16 v35 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%s:%d - iAP2MsgInit with cleanupCB - _iap2_power_msgCleanupCB endpointUUID: %@",  buf,  0x1Cu);
  }

  uint64_t v16 = iAP2MsgInit((uint64_t)v12, 44545, (uint64_t)v13, 0xFFFF, (uint64_t)_iap2_power_msgCleanupCB, 0LL);
  if (gLogObjects && gNumLogObjects >= 37)
  {
    int v17 = *(os_log_s **)(gLogObjects + 288);
  }

  else
  {
    int v17 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    if (v16) {
      goto LABEL_26;
    }
LABEL_55:
    uint64_t v22 = 0LL;
    goto LABEL_56;
  }

  uint64_t v23 = iap2_power_sendPowerUpdate_powerUpdateTypeStr[a3];
  if (a5 >= 0xD) {
    int v24 = -1;
  }
  else {
    int v24 = a5;
  }
  if (a5 > 0xC) {
    int v25 = "";
  }
  else {
    int v25 = iap2_power_sendPowerUpdate_powerUpdateTypeStr[a5];
  }
  *(_DWORD *)buf = 67110402;
  LODWORD(v34) = a3;
  WORD2(v34) = 2080;
  *(void *)((char *)&v34 + 6) = v23;
  HIWORD(v34) = 1024;
  *(_DWORD *)__int16 v35 = a4;
  *(_WORD *)&uint8_t v35[4] = 1024;
  *(_DWORD *)&v35[6] = v24;
  __int16 v36 = 2080;
  uint64_t v37 = v25;
  __int16 v38 = 1024;
  unsigned int v39 = a6;
  _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "powerUpdateType=%d(%s) value=%u  powerUpdateType2=%d(%s) value2=%u",  buf,  0x2Eu);
  if (!v16) {
    goto LABEL_55;
  }
LABEL_26:
  if (a3 <= 0xC && (*a2 & (1 << a3)) != 0LL)
  {
    if (_setupPowerUpdateParam(v16, a3, a4))
    {
LABEL_38:
      iAP2MsgCleanup(v16);
      goto LABEL_39;
    }

    int v18 = 1;
  }

  else
  {
    int v18 = 0;
  }

  BOOL v19 = 1;
  if (a5 <= 0xC && (*a2 & (1 << a5)) != 0LL)
  {
    int updated = _setupPowerUpdateParam(v16, a5, v30);
    BOOL v19 = updated == 0;
    v18 += updated ^ 1;
  }

  if (!v19 || !v18) {
    goto LABEL_38;
  }
LABEL_39:
  if (gLogObjects && gNumLogObjects >= 37)
  {
    __int16 v21 = *(os_log_s **)(gLogObjects + 288);
  }

  else
  {
    __int16 v21 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  uint64_t v22 = 1LL;
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v34) = 1;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "PowerUpdate processing error : %d\n", buf, 8u);
  }

void _iap2_power_msgCleanupCB(void *a1, int a2)
{
  if (a2)
  {
    if (gLogObjects && gNumLogObjects >= 37)
    {
      id v3 = *(os_log_s **)(gLogObjects + 288);
    }

    else
    {
      id v3 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      if (a1)
      {
        int MsgID = iAP2MsgGetMsgID((uint64_t)a1);
        int MsgLen = iAP2MsgGetMsgLen((uint64_t)a1);
      }

      else
      {
        int MsgID = 0;
        int MsgLen = 0;
      }

      int v7 = 136316418;
      BOOL v8 = "_iap2_power_msgCleanupCB";
      __int16 v9 = 1024;
      int v10 = 833;
      __int16 v11 = 1024;
      int v12 = 1;
      __int16 v13 = 1024;
      int v14 = MsgID;
      __int16 v15 = 1024;
      int v16 = MsgLen;
      __int16 v17 = 2080;
      label = dispatch_queue_get_label(0LL);
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s:%d iAP2 Power MSG Cleanup callback deleting msg! needDelete=%d msgID=%xh msgLen=%d currentDispatchQueue: %s",  (uint8_t *)&v7,  0x2Eu);
    }

    if (a1)
    {
      int v6 = (void *)a1[3];
      if (v6) {
        free(v6);
      }
      free(a1);
    }
  }

BOOL iap2_power_updateHandler(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 37)
  {
    uint64_t v4 = *(os_log_s **)(gLogObjects + 288);
  }

  else
  {
    uint64_t v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = *(_DWORD *)a2;
    int v6 = *(unsigned __int16 *)(a2 + 4);
    int v7 = *(_DWORD *)(a2 + 8);
    int v8 = *(unsigned __int16 *)(a2 + 12);
    v13[0] = 67109888;
    v13[1] = v5;
    __int16 v14 = 1024;
    int v15 = v6;
    __int16 v16 = 1024;
    int v17 = v7;
    __int16 v18 = 1024;
    int v19 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Sending Power Update: %d, %d, %d, %d\n",  (uint8_t *)v13,  0x1Au);
  }

  uint64_t Feature = iap2_feature_getFeature(a1, 0x10u);
  uint64_t v10 = Feature;
  if (Feature)
  {
    iap2_power_sendPowerUpdate( a1,  (void *)(Feature + 24),  *(_DWORD *)a2,  *(unsigned __int16 *)(a2 + 4),  *(_DWORD *)(a2 + 8),  *(unsigned __int16 *)(a2 + 12));
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 37)
    {
      __int16 v11 = *(os_log_s **)(gLogObjects + 288);
    }

    else
    {
      __int16 v11 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      iap2_power_updateHandler_cold_1();
    }
  }

  return v10 != 0;
}

void iap2_power_registerForSleepNotification(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)a1) {
      platform_power_registerForSleepWakeUpdate(*(void **)(a1 + 8));
    }
  }

void iap2_power_unregisterForSleepNotification(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)a1) {
      platform_power_unregisterForSleepWakeUpdate(*(void **)(a1 + 8));
    }
  }

uint64_t iap2_power_sleepUpdateHandler(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 32);
    if (v1)
    {
      iAP2LinkRunLoopHandleSuspend(v1);
      usleep(0x186A0u);
    }
  }

  return 1LL;
}

uint64_t iap2_power_wakeUpdateHandler(uint64_t a1)
{
  uint64_t Feature = iap2_feature_getFeature(a1, 0x10u);
  if (a1)
  {
    uint64_t v3 = Feature;
    if (Feature)
    {
      if (*(void *)(a1 + 8))
      {
        if (*(_DWORD *)(Feature + 8) == 1)
        {
          if (gLogObjects && gNumLogObjects >= 37)
          {
            uint64_t v4 = *(os_log_s **)(gLogObjects + 288);
          }

          else
          {
            uint64_t v4 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
          {
            int v5 = *(_DWORD *)(v3 + 8);
            v8[0] = 67109120;
            v8[1] = v5;
            _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "powerDuringSleepuint64_t Type = %d, toggling acc_pwr on wake",  (uint8_t *)v8,  8u);
          }

          platform_system_resetLightningBusForEndpointWithUUID(*(void **)(a1 + 8));
        }

        uint64_t v6 = *(void *)(a1 + 32);
        if (v6) {
          iAP2LinkRunLoopHandleResume(v6);
        }
      }
    }
  }

  return 1LL;
}

double _createFeature_8(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = (char *)calloc(1uLL, 0x28uLL);
    if (v1)
    {
      char *v1 = 0;
      *(void *)&double result = 0x200000003LL;
      *(_OWORD *)(v1 + 4) = xmmword_10019E2E0;
      *((void *)v1 + 3) = 0LL;
    }
  }

  return result;
}

uint64_t _destroyFeature_8(_DWORD **a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = *a1;
    if (v3)
    {
      if (!a2) {
        goto LABEL_7;
      }
      if (v3[2] != 2) {
        platform_power_setPowerDuringSleep(*(const void **)(a2 + 8), 0LL);
      }
      platform_power_stopPowerUpdates(*(void *)(a2 + 8));
      uint64_t v3 = *a1;
      if (*a1)
      {
LABEL_7:
        free(v3);
        *a1 = 0LL;
      }
    }
  }

  return 1LL;
}

uint64_t _startFeatureFromDevice_5(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    uint64_t Feature = iap2_feature_getFeature(a1, 0x10u);
    if (Feature)
    {
      uint64_t v3 = Feature;
      *(_DWORD *)(Feature + 36) = -1;
      if (*(_DWORD *)(v3 + 8) == 2) {
        return 1LL;
      }
      unsigned int v4 = platform_power_powerDuringSleepSupported(*(const void **)(v1 + 8));
      if (gLogObjects && gNumLogObjects >= 37)
      {
        int v5 = *(os_log_s **)(gLogObjects + 288);
      }

      else
      {
        int v5 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = *(_DWORD *)(v3 + 8);
        v10[0] = 67109376;
        v10[1] = v7;
        __int16 v11 = 1024;
        unsigned int v12 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "powerDuringSleepuint64_t Type = %d, powerDuringSleepSupported = %d",  (uint8_t *)v10,  0xEu);
      }

      if (!v4)
      {
        return 1LL;
      }

      else
      {
        int v8 = *(const void **)(v1 + 8);
        uint64_t v1 = 1LL;
        platform_power_setPowerDuringSleep(v8, 1LL);
      }
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 37)
      {
        uint64_t v6 = *(os_log_s **)(gLogObjects + 288);
      }

      else
      {
        uint64_t v6 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        _parseIdentificationParamsPower_cold_1();
      }
      return 0LL;
    }
  }

  return v1;
}

uint64_t iap2_deviceNotifications_deviceInfoUpdateHandler(uint64_t *a1, const __CFString *a2)
{
  if (a1
    && a2
    && iap2_feature_getFeature((uint64_t)a1, 8u)
    && (iAP2MsgInit((uint64_t)(a1 + 15), 19977, a1[24], 0xFFFF, 0LL, 0LL),
        iAP2MsgAddCFStringParam((uint64_t)(a1 + 15), 0LL, 0, a2)))
  {
    return iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
  }

  else
  {
    return 0LL;
  }

uint64_t iap2_deviceNotifications_deviceLanguageUpdateHandler(uint64_t *a1, const __CFString *a2)
{
  if (a1
    && a2
    && iap2_feature_getFeature((uint64_t)a1, 8u)
    && (iAP2MsgInit((uint64_t)(a1 + 15), 19978, a1[24], 0xFFFF, 0LL, 0LL),
        iAP2MsgAddCFStringParam((uint64_t)(a1 + 15), 0LL, 0, a2)))
  {
    return iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
  }

  else
  {
    return 0LL;
  }

uint64_t iap2_deviceNotifications_deviceTimeUpdateHandler(uint64_t *a1, const __CFDictionary *a2)
{
  if (a1 && a2 && iap2_feature_getFeature((uint64_t)a1, 8u))
  {
    iAP2MsgInit((uint64_t)(a1 + 15), 19979, a1[24], 0xFFFF, 0LL, 0LL);
    unint64_t valuePtr = 0xAAAAAAAAAAAAAAAALL;
    uint64_t Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"kCFACCDeviceNotifications_DeviceTimeUpdate_UnixTime");
    int v5 = Value
      && CFNumberGetValue(Value, kCFNumberLongLongType, &valuePtr)
      && iAP2MsgAddU64Param((uint64_t)(a1 + 15), 0LL, 0, valuePtr) != 0;
    __int16 v10 = -21846;
    uint64_t v6 = (const __CFNumber *)CFDictionaryGetValue( a2,  @"kCFACCDeviceNotifications_DeviceTimeUpdate_TimeZoneOffsetMinutes");
    char v9 = -86;
    int v7 = (const __CFNumber *)CFDictionaryGetValue( a2,  @"kCFACCDeviceNotifications_DeviceTimeUpdate_DaylightSavingsOffsetMinutes");
  }

  return 0LL;
}

uint64_t iap2_deviceNotifications_wirelessCarPlayAvailabilityDidChangeHandler(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (!*(void *)result) {
      return 0LL;
    }
    double result = iap2_feature_getFeature(result, 8u);
    if (result)
    {
      id v2 = (_BYTE *)result;
      CFTypeRef v3 = iap2_accAuthentication_copyCertificateSerial(v1);
      int isWirelessCarPlayAllowedForCertSerial = platform_CarPlay_isWirelessCarPlayAllowedForCertSerial();
      int v5 = platform_CarPlay_isWirelessCarPlayAllowedForCertSerial();
      if (v3) {
        CFRelease(v3);
      }
      if (gLogObjects && gNumLogObjects >= 28)
      {
        uint64_t v6 = *(os_log_s **)(gLogObjects + 216);
      }

      else
      {
        uint64_t v6 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        int v7 = v2[4];
        int v8 = v2[2];
        int v9 = v2[1];
        uint64_t v10 = *(void *)(v1 + 8);
        v13[0] = 67110402;
        v13[1] = isWirelessCarPlayAllowedForCertSerial;
        __int16 v14 = 1024;
        int v15 = v5;
        __int16 v16 = 1024;
        int v17 = v7;
        __int16 v18 = 1024;
        int v19 = v8;
        __int16 v20 = 1024;
        int v21 = v9;
        __int16 v22 = 2112;
        uint64_t v23 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "wirelessCarPlayAvailabilityDidChangeHandler: wirelessCarPlayAvailable: %d, carPlayPaired: %d, pfeature->wirele ssCarPlayAvailable: %d, pFeature->firstWirelessCarPlayAvailabilityNotificationSeen: %d, requestedDeviceTranspo rtIdentifierNotification: %d, endpoint: %@",  (uint8_t *)v13,  0x2Au);
      }

      if (*v2)
      {
        if (v2[4] == isWirelessCarPlayAllowedForCertSerial && v2[2])
        {
          if (gLogObjects && gNumLogObjects >= 28)
          {
            __int16 v11 = *(os_log_s **)(gLogObjects + 216);
          }

          else
          {
            __int16 v11 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          int v12 = 1;
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            LOWORD(v13[0]) = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "Wireless CarPlay availability didn't change for this accessory - ignoring notification",  (uint8_t *)v13,  2u);
          }
        }

        else
        {
          iAP2MsgInit(v1 + 120, 19981, *(void *)(v1 + 192), 0xFFFF, 0LL, 0LL);
          iAP2MsgAddU8Param(v1 + 120, 0LL, 0, isWirelessCarPlayAllowedForCertSerial);
          int v12 = iap2_sessionControl_sendOutgoingMessage((uint64_t *)v1, v1 + 120);
        }
      }

      else
      {
        int v12 = 1;
      }

      if (!v2[1] || v2[3] || !isWirelessCarPlayAllowedForCertSerial || ((v5 ^ 1) & 1) != 0)
      {
        if (v12)
        {
LABEL_33:
          double result = 1LL;
          v2[2] = 1;
LABEL_35:
          v2[4] = isWirelessCarPlayAllowedForCertSerial;
          return result;
        }
      }

      else if ((v12 & _sendTransportIdentifiers(v1)) == 1)
      {
        v2[3] = 1;
        if (!*v2) {
          platform_deviceNotifications_removeSubscriber(3, *(void **)(v1 + 8));
        }
        goto LABEL_33;
      }

      double result = 0LL;
      goto LABEL_35;
    }
  }

  return result;
}

uint64_t _sendTransportIdentifiers(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t *)result;
    uint64_t v2 = result + 120;
    iAP2MsgInit(result + 120, 19982, *(void *)(result + 192), 0xFFFF, 0LL, 0LL);
    CFTypeRef v3 = (const __CFString *)platform_systemInfo_copyBluetoothMACAddress();
    unsigned int v4 = (const __CFString *)platform_systemInfo_copyUniqueDeviceID();
    if (gLogObjects) {
      BOOL v5 = gNumLogObjects < 28;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      uint64_t v6 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      uint64_t v6 = *(os_log_s **)(gLogObjects + 216);
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 138478083;
      uint64_t v10 = v3;
      __int16 v11 = 2113;
      int v12 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Sending Device Transport Identifiers (btMAC: %{private}@, udid: %{private}@)",  (uint8_t *)&v9,  0x16u);
    }

    unint64_t v7 = (unint64_t)iAP2MsgAddCFStringParam(v2, 0LL, 0, v3);
    BOOL v8 = ((unint64_t)iAP2MsgAddCFStringParam(v2, 0LL, 1, v4) | v7) != 0;
    if (v3) {
      CFRelease(v3);
    }
    if (v4) {
      CFRelease(v4);
    }
    if (v8)
    {
      iap2_sessionControl_sendOutgoingMessage(v1, v2);
      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

_BYTE *_createFeature_9(_BYTE *result)
{
  if (result)
  {
    double result = calloc(1uLL, 5uLL);
    if (result)
    {
      result[4] = 0;
      *(_DWORD *)double result = 0;
    }
  }

  return result;
}

uint64_t _destroyFeature_9(void **a1, uint64_t a2)
{
  if (a1) {
    BOOL v2 = a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  uint64_t v3 = !v2;
  if (!v2)
  {
    BOOL v5 = *(void **)(a2 + 8);
    if (v5) {
      platform_deviceNotifications_removeSubscriber(5, v5);
    }
    if (*a1)
    {
      free(*a1);
      *a1 = 0LL;
    }
  }

  return v3;
}

uint64_t _startFeatureFromDevice_6(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 28;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    uint64_t v3 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    uint64_t v3 = *(os_log_s **)(gLogObjects + 216);
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v21[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Starting Device Notifications...",  (uint8_t *)v21,  2u);
  }

  if (!a1) {
    return 0LL;
  }
  if (!*(void *)a1) {
    return 0LL;
  }
  if (!**(void **)a1) {
    return 0LL;
  }
  uint64_t Feature = iap2_feature_getFeature(a1, 8u);
  if (!Feature) {
    return 0LL;
  }
  BOOL v5 = (_BYTE *)Feature;
  iAP2MsgInit(a1 + 120, 19980, *(void *)(a1 + 192), 0xFFFF, 0LL, 0LL);
  uint64_t v6 = (const __CFString *)acc_manager_copyDeviceUUID();
  unint64_t v7 = iAP2MsgAddCFStringParam(a1 + 120, 0LL, 0, v6);
  if (v6) {
    CFRelease(v6);
  }
  if (v7)
  {
    iap2_sessionControl_sendOutgoingMessage((uint64_t *)a1, a1 + 120);
LABEL_19:
    uint64_t v8 = 1LL;
    goto LABEL_20;
  }

  uint64_t v8 = 0LL;
LABEL_20:
  if (iap2_identification_isIdentifiedForOutgoingMessageID(a1, 0x4E0Du))
  {
    platform_deviceNotifications_addSubscriber(3u, *(void **)(a1 + 8), v12);
    *BOOL v5 = 1;
  }

  if (iap2_identification_isIdentifiedForOutgoingMessageID(a1, 0x4E0Eu))
  {
    v5[1] = 1;
    if (gLogObjects && gNumLogObjects >= 28)
    {
      __int16 v13 = *(os_log_s **)(gLogObjects + 216);
    }

    else
    {
      __int16 v13 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      int isIdentifiedForCarPlay = iap2_identification_isIdentifiedForCarPlay(a1);
      int isIdentifiedForUSBCarPlay = iap2_identification_isIdentifiedForUSBCarPlay(a1);
      int isIdentifiedForWirelessCarPlay = iap2_identification_isIdentifiedForWirelessCarPlay(a1);
      v21[0] = 67109632;
      v21[1] = isIdentifiedForCarPlay;
      __int16 v22 = 1024;
      int v23 = isIdentifiedForUSBCarPlay;
      __int16 v24 = 1024;
      int v25 = isIdentifiedForWirelessCarPlay;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "identifiedForCarPlay: %d, identifiedForUSBCarPlay: %d, identifiedForWirelessCarPlay: %d",  (uint8_t *)v21,  0x14u);
    }

    int Type = acc_connection_getType(**(void **)a1);
    if (iap2_identification_isIdentifiedForUSBCarPlay(a1) && (Type == 6 || Type == 1))
    {
      if ((v8 & _sendTransportIdentifiers(a1)) == 1)
      {
        uint64_t v8 = 1LL;
        v5[3] = 1;
        return v8;
      }

      return 0LL;
    }

    if (iap2_identification_isIdentifiedForWirelessCarPlay(a1))
    {
      platform_deviceNotifications_addSubscriber(3u, *(void **)(a1 + 8), v18);
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 28)
      {
        int v19 = *(os_log_s **)(gLogObjects + 216);
      }

      else
      {
        int v19 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v21[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Non-CarPlay accessory requested Device Transport Identifiers, ignoring...",  (uint8_t *)v21,  2u);
      }
    }
  }

  return v8;
}

uint64_t _checkIdentificationInfo_7(uint64_t a1)
{
  char v6 = 0;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs( a1,  (uint64_t)&_checkIdentificationInfo_kMsgDeviceNotificationsList,  6u,  &v6);
  uint64_t v3 = v2;
  if (v6) {
    BOOL v4 = (_DWORD)v2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    iap2_identification_setIdentifiedForFeature(a1, 8u);
  }
  return v3;
}

id _getUSBBillboardDevicePluginInstance()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformPluginManager sharedManager](&OBJC_CLASS___ACCPlatformPluginManager, "sharedManager"));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( [v0 pluginInstanceWithProtocol:&OBJC_PROTOCOL___ACCPlatformUSBBillboardDevicePluginProtocol fallbackToTransportPlugins:1]);

  return v1;
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t context = objc_autoreleasePoolPush();
  init_logging();
  BOOL v4 = &_dispatch_main_q;
  uint64_t v107 = 0LL;
  char v108 = &v107;
  uint64_t v109 = 0x3032000000LL;
  id v110 = __Block_byref_object_copy__1;
  __int16 v111 = __Block_byref_object_dispose__1;
  dispatch_source_t v112 = (dispatch_source_t)0xAAAAAAAAAAAAAAAALL;
  dispatch_source_t v112 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 0xFuLL, 0LL, &_dispatch_main_q);
  dispatch_source_set_event_handler((dispatch_source_t)v108[5], &__block_literal_global_13);
  BOOL v5 = (dispatch_source_s *)v108[5];
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = __main_block_invoke_56;
  handler[3] = &unk_1001FAF00;
  handler[4] = &v107;
  dispatch_source_set_cancel_handler(v5, handler);
  dispatch_resume((dispatch_object_t)v108[5]);
  kdebug_trace(731119696LL, 2LL, 0LL, 0LL, 0LL);
  for (uint64_t i = 0LL; i != 6; ++i)
  {
    unint64_t v7 = (&off_1001FB3D8)[i];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    __n128 v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v7));
    [v8 removeItemAtPath:v9 error:0];
  }

  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  __n128 v11 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  xpc_set_event_stream_handler("com.apple.accessoryd.digitalIDMatching", v11, &__block_literal_global_59);

  xpc_set_event_stream_handler("com.apple.accessoryd.cableTypeMatching", v11, &__block_literal_global_62);
  xpc_set_event_stream_handler("com.apple.accessoryd.btServiceMatching", v11, &__block_literal_global_65);

  xpc_set_event_stream_handler("com.apple.iokit.matching", v11, &__block_literal_global_68);
  if (gLogObjects && gNumLogObjects >= 1)
  {
    __n128 v12 = (os_log_s *)*(id *)gLogObjects;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __n128 v12 = (os_log_s *)&_os_log_default;
    id v13 = &_os_log_default;
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = platform_system_unlockedSinceBoot();
    *(_DWORD *)buf = 136315650;
    uint64_t v116 = "main";
    __int16 v117 = 1024;
    int v118 = 193;
    __int16 v119 = 1024;
    int v120 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%s:%d unlockedSinceBoot %d", buf, 0x18u);
  }

  kdebug_trace(731119696LL, 3LL, 0LL, 0LL, 0LL);
  if (gLogObjects && gNumLogObjects >= 1)
  {
    int v15 = (os_log_s *)*(id *)gLogObjects;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v15 = (os_log_s *)&_os_log_default;
    id v16 = &_os_log_default;
  }

  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Starting daemon...", buf, 2u);
  }

  __resetiAP2ShimServerState();
  kdebug_trace(731119696LL, 4LL, 0LL, 0LL, 0LL);
  if (gLogObjects && gNumLogObjects >= 1)
  {
    int v17 = (os_log_s *)*(id *)gLogObjects;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v17 = (os_log_s *)&_os_log_default;
    id v18 = &_os_log_default;
  }

  BOOL v19 = os_log_type_enabled(v17, OS_LOG_TYPE_INFO);

  if (v19)
  {
    __int16 v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
    int v21 = (void *)objc_claimAutoreleasedReturnValue([v20 infoDictionary]);
    __int16 v22 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKeyedSubscript:@"GitCommitHash"]);

    int v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
    __int16 v24 = (void *)objc_claimAutoreleasedReturnValue([v23 infoDictionary]);
    int v25 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:@"GitStatus"]);

    if (v22 && ([v25 isEqualToString:@"Clean"] & 1) == 0) {
      uint64_t v26 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ (%@)",  v22,  v25,  context));
    }
    else {
      uint64_t v26 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@", v22));
    }
    int v27 = (char *)v26;
    if (gLogObjects && gNumLogObjects >= 1)
    {
      uint64_t v28 = (os_log_s *)*(id *)gLogObjects;
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v28 = (os_log_s *)&_os_log_default;
      id v29 = &_os_log_default;
    }

    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v116 = v27;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "Commit Hash: %@", buf, 0xCu);
    }

    unsigned int v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithCString:encoding:]( &OBJC_CLASS___NSString,  "stringWithCString:encoding:",  *argv,  4LL));
    int v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    unsigned __int16 v32 = (void *)objc_claimAutoreleasedReturnValue([v31 attributesOfItemAtPath:v30 error:0]);

    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v32 objectForKey:NSFileCreationDate]);
    __int128 v34 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
    __int16 v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimeZone localTimeZone](&OBJC_CLASS___NSTimeZone, "localTimeZone"));
    -[NSDateFormatter setTimeZone:](v34, "setTimeZone:", v35);

    -[NSDateFormatter setDateStyle:](v34, "setDateStyle:", 1LL);
    -[NSDateFormatter setTimeStyle:](v34, "setTimeStyle:", 3LL);
    if (gLogObjects && gNumLogObjects >= 1)
    {
      __int16 v36 = (os_log_s *)*(id *)gLogObjects;
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int16 v36 = (os_log_s *)&_os_log_default;
      id v37 = &_os_log_default;
    }

    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      __int16 v38 = (char *)(id)objc_claimAutoreleasedReturnValue(-[NSDateFormatter stringFromDate:](v34, "stringFromDate:", v33));
      *(_DWORD *)buf = 138412290;
      uint64_t v116 = v38;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "Binary date: %@", buf, 0xCu);
    }

    if (gLogObjects && gNumLogObjects >= 1)
    {
      unsigned int v39 = (os_log_s *)*(id *)gLogObjects;
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      unsigned int v39 = (os_log_s *)&_os_log_default;
      id v40 = &_os_log_default;
    }

    if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
    {
      int isInternalBuild = platform_systemInfo_isInternalBuild();
      uint64_t v42 = "NO";
      if (isInternalBuild) {
        uint64_t v42 = "YES";
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v116 = v42;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "Internal Build: %s", buf, 0xCu);
    }
  }

  if (gLogObjects && gNumLogObjects >= 1)
  {
    uint64_t v43 = (os_log_s *)*(id *)gLogObjects;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v43 = (os_log_s *)&_os_log_default;
    id v44 = &_os_log_default;
  }

  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
  {
    int v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
    main_cold_24(v45);
  }

  if (gLogObjects && gNumLogObjects >= 1)
  {
    __int16 v46 = (os_log_s *)*(id *)gLogObjects;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v46 = (os_log_s *)&_os_log_default;
    id v47 = &_os_log_default;
  }

  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
  {
    id v48 = objc_msgSend( (id)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle")),  "bundlePath");
    uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
    main_cold_22(v49);
  }

  if (gLogObjects && gNumLogObjects >= 1)
  {
    uint64_t v50 = (os_log_s *)*(id *)gLogObjects;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v50 = (os_log_s *)&_os_log_default;
    id v51 = &_os_log_default;
  }

  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
  {
    id v52 = objc_msgSend( (id)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle")),  "bundleIdentifier");
    uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
    main_cold_20(v53);
  }

  if (gLogObjects && gNumLogObjects >= 1)
  {
    uint64_t v54 = (os_log_s *)*(id *)gLogObjects;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v54 = (os_log_s *)&_os_log_default;
    id v55 = &_os_log_default;
  }

  if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
  {
    id v56 = objc_msgSend( (id)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle")),  "builtInPlugInsPath");
    int v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
    main_cold_18(v57);
  }

  if (gLogObjects && gNumLogObjects >= 1)
  {
    __int16 v58 = (os_log_s *)*(id *)gLogObjects;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v58 = (os_log_s *)&_os_log_default;
    id v59 = &_os_log_default;
  }

  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
  {
    int v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
    uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue([v60 localizations]);
    main_cold_16(v61, (uint64_t)v114, v58, v60);
  }

  if (gLogObjects && gNumLogObjects >= 1)
  {
    __int16 v62 = (os_log_s *)*(id *)gLogObjects;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v62 = (os_log_s *)&_os_log_default;
    id v63 = &_os_log_default;
  }

  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
  {
    __int16 v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
    __int128 v65 = (void *)objc_claimAutoreleasedReturnValue([v64 preferredLocalizations]);
    main_cold_14(v65, (uint64_t)v113, v62, v64);
  }

  if (gLogObjects && gNumLogObjects >= 1)
  {
    __int16 v66 = (os_log_s *)*(id *)gLogObjects;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v66 = (os_log_s *)&_os_log_default;
    id v67 = &_os_log_default;
  }

  BOOL v68 = os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG);
  if (v68)
  {
    uint64_t v69 = acc_strings_bundle(v68);
    int v70 = (void *)objc_claimAutoreleasedReturnValue(v69);
    main_cold_12(v70);
  }

  if (gLogObjects && gNumLogObjects >= 1)
  {
    __int16 v71 = (os_log_s *)*(id *)gLogObjects;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v71 = (os_log_s *)&_os_log_default;
    id v72 = &_os_log_default;
  }

  if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v116 = "main";
    _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "%s: initIdentityCertStates ... ", buf, 0xCu);
  }

  int inited = mfi4Auth_protocol_initIdentityCertStates();
  if (gLogObjects && gNumLogObjects >= 1)
  {
    int v74 = (os_log_s *)*(id *)gLogObjects;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v74 = (os_log_s *)&_os_log_default;
    id v75 = &_os_log_default;
  }

  if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v116 = "main";
    __int16 v117 = 1024;
    int v118 = inited;
    _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEFAULT,  "%s: initIdentityCertStates ... errNo %d",  buf,  0x12u);
  }

  kdebug_trace(731119696LL, 5LL, 0LL, 0LL, 0LL);
  if (gLogObjects && gNumLogObjects >= 1)
  {
    int v76 = (os_log_s *)*(id *)gLogObjects;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v76 = (os_log_s *)&_os_log_default;
    id v77 = &_os_log_default;
  }

  if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "Loading platform plugins...", buf, 2u);
  }

  int v78 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformPluginManager sharedManager](&OBJC_CLASS___ACCPlatformPluginManager, "sharedManager"));
  [v78 loadAllBundles];

  kdebug_trace(731119696LL, 6LL, 0LL, 0LL, 0LL);
  if (gLogObjects && gNumLogObjects >= 1)
  {
    CFRange v79 = (os_log_s *)*(id *)gLogObjects;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    CFRange v79 = (os_log_s *)&_os_log_default;
    id v80 = &_os_log_default;
  }

  if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "Initializing platform plugins...", buf, 2u);
  }

  uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformPluginManager sharedManager](&OBJC_CLASS___ACCPlatformPluginManager, "sharedManager"));
  [v81 initAllPlugIns];

  kdebug_trace(731119696LL, 7LL, 0LL, 0LL, 0LL);
  if (gLogObjects && gNumLogObjects >= 1)
  {
    __int16 v82 = (os_log_s *)*(id *)gLogObjects;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v82 = (os_log_s *)&_os_log_default;
    id v83 = &_os_log_default;
  }

  if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "Starting EA XPC server...", buf, 2u);
  }

  __int16 v84 = (void *)objc_claimAutoreleasedReturnValue(+[ACCExternalAccessoryServer sharedServer](&OBJC_CLASS___ACCExternalAccessoryServer, "sharedServer"));
  [v84 startServer];

  if (gLogObjects && gNumLogObjects >= 1)
  {
    unsigned int v85 = (os_log_s *)*(id *)gLogObjects;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    unsigned int v85 = (os_log_s *)&_os_log_default;
    id v86 = &_os_log_default;
  }

  if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEFAULT,  "Starting accessory transport server...",  buf,  2u);
  }

  int v87 = (void *)objc_claimAutoreleasedReturnValue(+[ACCTransportServer sharedServer](&OBJC_CLASS___ACCTransportServer, "sharedServer"));
  [v87 startServer];

  kdebug_trace(731119696LL, 8LL, 0LL, 0LL, 0LL);
  if (gLogObjects && gNumLogObjects >= 1)
  {
    __int16 v88 = (os_log_s *)*(id *)gLogObjects;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v88 = (os_log_s *)&_os_log_default;
    id v89 = &_os_log_default;
  }

  if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEFAULT, "Loading transport plugins...", buf, 2u);
  }

  __int16 v90 = (void *)objc_claimAutoreleasedReturnValue(+[ACCTransportPluginManager sharedManager](&OBJC_CLASS___ACCTransportPluginManager, "sharedManager"));
  [v90 loadAllBundles];

  kdebug_trace(731119696LL, 9LL, 0LL, 0LL, 0LL);
  if (gLogObjects && gNumLogObjects >= 1)
  {
    int v91 = (os_log_s *)*(id *)gLogObjects;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v91 = (os_log_s *)&_os_log_default;
    id v92 = &_os_log_default;
  }

  if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEFAULT, "Initializing transport plugins...", buf, 2u);
  }

  uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue(+[ACCTransportPluginManager sharedManager](&OBJC_CLASS___ACCTransportPluginManager, "sharedManager"));
  [v93 initAllPlugIns];

  kdebug_trace(731119696LL, 10LL, 0LL, 0LL, 0LL);
  if (gLogObjects && gNumLogObjects >= 1)
  {
    int v94 = (os_log_s *)*(id *)gLogObjects;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v94 = (os_log_s *)&_os_log_default;
    id v95 = &_os_log_default;
  }

  if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "Starting transport plugins...", buf, 2u);
  }

  id v96 = (void *)objc_claimAutoreleasedReturnValue(+[ACCTransportPluginManager sharedManager](&OBJC_CLASS___ACCTransportPluginManager, "sharedManager"));
  [v96 startAllPlugIns];

  kdebug_trace(731119696LL, 11LL, 0LL, 0LL, 0LL);
  if (gLogObjects && gNumLogObjects >= 1)
  {
    id v97 = (os_log_s *)*(id *)gLogObjects;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v97 = (os_log_s *)&_os_log_default;
    id v98 = &_os_log_default;
  }

  if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEFAULT, "Loading feature plugins...", buf, 2u);
  }

  id v99 = (void *)objc_claimAutoreleasedReturnValue(+[ACCFeaturePluginManager sharedManager](&OBJC_CLASS___ACCFeaturePluginManager, "sharedManager"));
  [v99 loadAllBundles];

  kdebug_trace(731119696LL, 12LL, 0LL, 0LL, 0LL);
  if (gLogObjects && gNumLogObjects >= 1)
  {
    id v100 = (os_log_s *)*(id *)gLogObjects;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v100 = (os_log_s *)&_os_log_default;
    id v101 = &_os_log_default;
  }

  if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEFAULT, "Initializing feature plugins...", buf, 2u);
  }

  int v102 = (void *)objc_claimAutoreleasedReturnValue(+[ACCFeaturePluginManager sharedManager](&OBJC_CLASS___ACCFeaturePluginManager, "sharedManager"));
  [v102 initAllPlugIns];

  kdebug_trace(731119696LL, 13LL, 0LL, 0LL, 0LL);
  kdebug_trace(731119696LL, 14LL, 0LL, 0LL, 0LL);
  kdebug_trace(731119696LL, 100LL, 0LL, 0LL, 0LL);
  _Block_object_dispose(&v107, 8);

  objc_autoreleasePoolPop(context);
  id v103 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop currentRunLoop](&OBJC_CLASS___NSRunLoop, "currentRunLoop"));
  [v103 run];

  __resetiAP2ShimServerState();
  return 0;
}

void sub_100082C08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void __main_block_invoke(id a1)
{
  uint64_t v1 = gLogObjects;
  int v2 = gNumLogObjects;
  if (gLogObjects) {
    BOOL v3 = gNumLogObjects < 1;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      int v6 = 134218240;
      uint64_t v7 = v1;
      __int16 v8 = 1024;
      int v9 = v2;
      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  (uint8_t *)&v6,  0x12u);
    }

    BOOL v5 = (os_log_s *)&_os_log_default;
    id v4 = &_os_log_default;
  }

  else
  {
    BOOL v5 = (os_log_s *)*(id *)gLogObjects;
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v6) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "SIGTERM received, shutting down.",  (uint8_t *)&v6,  2u);
  }

  __resetiAP2ShimServerState();
  exit(0);
}

void __resetiAP2ShimServerState()
{
  int out_token = -1;
  if (notify_register_check(name, &out_token))
  {
    if (gLogObjects) {
      BOOL v0 = gNumLogObjects < 1;
    }
    else {
      BOOL v0 = 1;
    }
    if (v0)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      BOOL v5 = (os_log_s *)&_os_log_default;
      id v1 = &_os_log_default;
    }

    else
    {
      BOOL v5 = (os_log_s *)*(id *)gLogObjects;
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "__resetiAP2ShimServerState: failed register check!!!",  buf,  2u);
    }
  }

  else
  {
    uint64_t v13 = 0LL;
    notify_get_state(out_token, &v13);
    if (gLogObjects) {
      BOOL v2 = gNumLogObjects <= 0;
    }
    else {
      BOOL v2 = 1;
    }
    int v3 = !v2;
    if (v13 == 1)
    {
      if (v3)
      {
        id v4 = (os_log_s *)*(id *)gLogObjects;
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v4 = (os_log_s *)&_os_log_default;
        id v7 = &_os_log_default;
      }

      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v16) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "__resetiAP2ShimServerState: set kIAP2AvailableNotification state: %d",  buf,  8u);
      }

      notify_set_state(out_token, 0LL);
      if (gLogObjects && gNumLogObjects >= 1)
      {
        __int16 v8 = (os_log_s *)*(id *)gLogObjects;
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        __int16 v8 = (os_log_s *)&_os_log_default;
        id v10 = &_os_log_default;
      }

      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "__resetiAP2ShimServerState: post kIAP2AvailableNotification notification: ",  buf,  2u);
      }

      notify_post(name);
    }

    else
    {
      if (v3)
      {
        int v6 = (os_log_s *)*(id *)gLogObjects;
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        int v6 = (os_log_s *)&_os_log_default;
        id v9 = &_os_log_default;
      }

      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        uint64_t v16 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "__resetiAP2ShimServerState: kIAP2AvailableNotification state %llu, skip post",  buf,  0xCu);
      }
    }

    if (gLogObjects && gNumLogObjects >= 1)
    {
      __n128 v11 = (os_log_s *)*(id *)gLogObjects;
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __n128 v11 = (os_log_s *)&_os_log_default;
      id v12 = &_os_log_default;
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "__resetiAP2ShimServerState: cancel notify token",  buf,  2u);
    }

    notify_cancel(out_token);
  }

void __main_block_invoke_56(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8LL);
  BOOL v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = 0LL;
}

void __main_block_invoke_2(id a1, OS_xpc_object *a2)
{
  string = xpc_dictionary_get_string(a2, _xpc_event_key_name);
  if (string)
  {
    int v3 = string;
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 1;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v6 = (os_log_s *)&_os_log_default;
      id v5 = &_os_log_default;
    }

    else
    {
      int v6 = (os_log_s *)*(id *)gLogObjects;
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315138;
      __int16 v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received %s", (uint8_t *)&v7, 0xCu);
    }
  }

void __main_block_invoke_61(id a1, OS_xpc_object *a2)
{
  string = xpc_dictionary_get_string(a2, _xpc_event_key_name);
  if (string)
  {
    int v3 = string;
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 1;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v6 = (os_log_s *)&_os_log_default;
      id v5 = &_os_log_default;
    }

    else
    {
      int v6 = (os_log_s *)*(id *)gLogObjects;
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315138;
      __int16 v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received %s", (uint8_t *)&v7, 0xCu);
    }
  }

void __main_block_invoke_64(id a1, OS_xpc_object *a2)
{
  string = xpc_dictionary_get_string(a2, _xpc_event_key_name);
  if (string)
  {
    int v3 = string;
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 1;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v6 = (os_log_s *)&_os_log_default;
      id v5 = &_os_log_default;
    }

    else
    {
      int v6 = (os_log_s *)*(id *)gLogObjects;
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315138;
      __int16 v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received %s", (uint8_t *)&v7, 0xCu);
    }
  }

void __main_block_invoke_67(id a1, OS_xpc_object *a2)
{
  string = xpc_dictionary_get_string(a2, _xpc_event_key_name);
  if (string)
  {
    int v3 = string;
    if (gLogObjects) {
      BOOL v4 = gNumLogObjects < 1;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v6 = (os_log_s *)&_os_log_default;
      id v5 = &_os_log_default;
    }

    else
    {
      int v6 = (os_log_s *)*(id *)gLogObjects;
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 136315138;
      id v18 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received %s", (uint8_t *)&v17, 0xCu);
    }

    int v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithCString:encoding:]( &OBJC_CLASS___NSString,  "stringWithCString:encoding:",  v3,  4LL));
    if ([v7 isEqualToString:@"com.apple.accessoryd.matching.A2868.billboard"])
    {
      id USBBillboardDevicePluginInstance = _getUSBBillboardDevicePluginInstance();
      id v9 = (void *)objc_claimAutoreleasedReturnValue(USBBillboardDevicePluginInstance);

      if (!v9)
      {
LABEL_19:

        return;
      }

      id v10 = _getUSBBillboardDevicePluginInstance();
      __n128 v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      id v12 = v11;
      uint64_t v13 = 5904LL;
    }

    else
    {
      id v14 = _getUSBBillboardDevicePluginInstance();
      int v15 = (void *)objc_claimAutoreleasedReturnValue(v14);

      if (!v15) {
        goto LABEL_19;
      }
      id v16 = _getUSBBillboardDevicePluginInstance();
      __n128 v11 = (void *)objc_claimAutoreleasedReturnValue(v16);
      id v12 = v11;
      uint64_t v13 = 5905LL;
    }

    [v11 startDetectUSBBillboardDeviceWithVID:1452 PID:v13];

    goto LABEL_19;
  }

void OUTLINED_FUNCTION_4_11(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

id OUTLINED_FUNCTION_5_10(id a1)
{
  return a1;
}

void OUTLINED_FUNCTION_6_7(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

id OUTLINED_FUNCTION_7_6(id a1)
{
  return a1;
}

void platform_voiceOver_accessoryAttached(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 36)
  {
    BOOL v2 = (os_log_s *)*(id *)(gLogObjects + 280);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v2 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v6 = 138412290;
    uint64_t v7 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "voiceOver accessoryAttached: %@",  (uint8_t *)&v6,  0xCu);
  }

  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACCVoiceOverServer sharedServer](&OBJC_CLASS___ACCVoiceOverServer, "sharedServer"));
  [v4 incrementUserCount];

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[ACCVoiceOverServer sharedServer](&OBJC_CLASS___ACCVoiceOverServer, "sharedServer"));
  [v5 accessoryVoiceOverAttached:a1];
}

void platform_voiceOver_accessoryDetached(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 36)
  {
    BOOL v2 = (os_log_s *)*(id *)(gLogObjects + 280);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v2 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v6 = 138412290;
    uint64_t v7 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "voiceOver accessoryDetached: %@",  (uint8_t *)&v6,  0xCu);
  }

  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACCVoiceOverServer sharedServer](&OBJC_CLASS___ACCVoiceOverServer, "sharedServer"));
  [v4 accessoryVoiceOverDetached:a1];

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[ACCVoiceOverServer sharedServer](&OBJC_CLASS___ACCVoiceOverServer, "sharedServer"));
  [v5 decrementUserCount];
}

void platform_VoiceOver_setEnabled(uint64_t a1, uint64_t a2)
{
  if (gLogObjects && gNumLogObjects >= 36)
  {
    BOOL v4 = (os_log_s *)*(id *)(gLogObjects + 280);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = (os_log_s *)&_os_log_default;
    id v5 = &_os_log_default;
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v7 = 138412546;
    uint64_t v8 = a1;
    __int16 v9 = 1024;
    int v10 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "voiceOver setState: %@ enabled: %d",  (uint8_t *)&v7,  0x12u);
  }

  int v6 = (void *)objc_claimAutoreleasedReturnValue(+[ACCVoiceOverServer sharedServer](&OBJC_CLASS___ACCVoiceOverServer, "sharedServer"));
  [v6 accessoryVoiceOver:a1 setEnabled:a2];
}

void platform_voiceOver_performAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (gLogObjects && gNumLogObjects >= 36)
  {
    int v6 = (os_log_s *)*(id *)(gLogObjects + 280);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v6 = (os_log_s *)&_os_log_default;
    id v7 = &_os_log_default;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412546;
    uint64_t v19 = a1;
    __int16 v20 = 1024;
    int v21 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "voiceOver performAction: %@, action=%d",  buf,  0x12u);
  }

  __int16 v9 = 0LL;
  switch((int)a2)
  {
    case 10:
    case 18:
      goto LABEL_14;
    case 11:
    case 23:
      if (!a3 || *(_DWORD *)a3 != (_DWORD)a2) {
        return;
      }
      int v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  *(void *)(a3 + 8)));
      __n128 v11 = &ACCVoiceOverActionParameterTextKey;
      goto LABEL_23;
    case 12:
    case 13:
    case 14:
    case 15:
    case 19:
    case 20:
    case 21:
    case 22:
      goto LABEL_26;
    case 16:
      if (!a3 || *(_DWORD *)a3 != 16) {
        goto LABEL_25;
      }
      LODWORD(v_Block_object_dispose(va, 8) = *(_DWORD *)(a3 + 8);
      int v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v8));
      LODWORD(v14) = *(_DWORD *)(a3 + 12);
      int v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v14));
      id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a3 + 16)));
      __int16 v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v10,  @"ACCVoiceOverActionParameterPointXKey",  v15,  @"ACCVoiceOverActionParameterPointYKey",  v16,  @"ACCVoiceOverActionParameterTouchTypeKey",  0LL));

      goto LABEL_24;
    case 17:
      if (a3 && *(_DWORD *)a3 == 17)
      {
        LODWORD(v_Block_object_dispose(va, 8) = *(_DWORD *)(a3 + 8);
        int v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v8));
        __n128 v11 = &ACCVoiceOverActionParameterScaleKey;
LABEL_23:
        __int16 v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v10,  *v11,  0LL));
LABEL_24:
      }

      else
      {
LABEL_25:
        __int16 v9 = 0LL;
      }

void platform_voiceOver_setConfiguration(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (gLogObjects && gNumLogObjects >= 36)
  {
    int v6 = (os_log_s *)*(id *)(gLogObjects + 280);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v6 = (os_log_s *)&_os_log_default;
    id v7 = &_os_log_default;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v13 = 138412546;
    uint64_t v14 = a1;
    __int16 v15 = 1024;
    int v16 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "voiceOver setConfiguration: %@ type: %d",  (uint8_t *)&v13,  0x12u);
  }

  if (a2 <= 1)
  {
    if (a3)
    {
      LODWORD(v_Block_object_dispose(va, 8) = *a3;
      uint64_t v9 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v8));
      if (!v9) {
        return;
      }
      int v10 = (os_log_s *)v9;
      __n128 v11 = (void *)objc_claimAutoreleasedReturnValue(+[ACCVoiceOverServer sharedServer](&OBJC_CLASS___ACCVoiceOverServer, "sharedServer"));
      [v11 accessoryVoiceOver:a1 requestConfiguration:a2 param:v10];
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 36)
      {
        int v10 = (os_log_s *)*(id *)(gLogObjects + 280);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        int v10 = (os_log_s *)&_os_log_default;
        id v12 = &_os_log_default;
      }

      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 138412546;
        uint64_t v14 = a1;
        __int16 v15 = 1024;
        int v16 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "voiceOver setConfiguration: %@ type: %d, NO REQUIRED VALUE!!!",  (uint8_t *)&v13,  0x12u);
      }
    }
  }

void platform_voiceOver_startInformationUpdate(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 36)
  {
    BOOL v2 = (os_log_s *)*(id *)(gLogObjects + 280);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v2 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v5 = 138412290;
    uint64_t v6 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "voiceOver startInformationUpdate: %@",  (uint8_t *)&v5,  0xCu);
  }

  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACCVoiceOverServer sharedServer](&OBJC_CLASS___ACCVoiceOverServer, "sharedServer"));
  [v4 accessoryVoiceOverStartInformationUpdate:a1];
}

void platform_voiceOver_stopInformationUpdate(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 36)
  {
    BOOL v2 = (os_log_s *)*(id *)(gLogObjects + 280);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v2 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v5 = 138412290;
    uint64_t v6 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "voiceOver stopInformationUpdate: %@",  (uint8_t *)&v5,  0xCu);
  }

  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACCVoiceOverServer sharedServer](&OBJC_CLASS___ACCVoiceOverServer, "sharedServer"));
  [v4 accessoryVoiceOverStopInformationUpdate:a1];
}

void platform_voiceOver_startCursorInformationUpdate(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 36)
  {
    BOOL v2 = (os_log_s *)*(id *)(gLogObjects + 280);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v2 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v5 = 138412290;
    uint64_t v6 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "voiceOver startCursorInformationUpdate: %@",  (uint8_t *)&v5,  0xCu);
  }

  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACCVoiceOverServer sharedServer](&OBJC_CLASS___ACCVoiceOverServer, "sharedServer"));
  [v4 accessoryVoiceOverStartCursorInformationUpdate:a1];
}

void platform_voiceOver_stopCursorInformationUpdate(uint64_t a1)
{
  if (gLogObjects && gNumLogObjects >= 36)
  {
    BOOL v2 = (os_log_s *)*(id *)(gLogObjects + 280);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v2 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v5 = 138412290;
    uint64_t v6 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "voiceOver stopCursorInformationUpdate: %@",  (uint8_t *)&v5,  0xCu);
  }

  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACCVoiceOverServer sharedServer](&OBJC_CLASS___ACCVoiceOverServer, "sharedServer"));
  [v4 accessoryVoiceOverStopCursorInformationUpdate:a1];
}

void platform_voiceOver_informationUpdateHandler(int a1, int a2, float a3, float a4)
{
  if (gLogObjects && gNumLogObjects >= 36)
  {
    double v8 = (os_log_s *)*(id *)(gLogObjects + 280);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    double v8 = (os_log_s *)&_os_log_default;
    id v9 = &_os_log_default;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v11[0] = 67109888;
    v11[1] = a1;
    __int16 v12 = 2048;
    double v13 = a3;
    __int16 v14 = 2048;
    double v15 = a4;
    __int16 v16 = 1024;
    int v17 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "voiceOver informationUpdateHandler: validMask=%xh volume=%f rate=%f enabled=%d",  (uint8_t *)v11,  0x22u);
  }

  if (a1)
  {
    int v10 = (float *)malloc(0x30uLL);
    float *v10 = 0.0;
    *((_DWORD *)v10 + 2) = a1;
    void v10[3] = a3;
    v10[4] = a4;
    *((_BYTE *)v10 + 20) = a2;
  }

void platform_voiceOver_deleteParams(void *a1)
{
  if (a1)
  {
    if (*(_DWORD *)a1 == 1)
    {
      BOOL v2 = (const void *)a1[2];
      if (v2) {
        CFRelease(v2);
      }
      id v3 = (const void *)a1[3];
      if (v3) {
        CFRelease(v3);
      }
      BOOL v4 = (const void *)a1[4];
      if (v4) {
        CFRelease(v4);
      }
    }

    free(a1);
  }

void platform_voiceOver_cursorInformationUpdateHandler(int a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  if (gLogObjects && gNumLogObjects >= 36)
  {
    __int16 v12 = (os_log_s *)*(id *)(gLogObjects + 280);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v12 = (os_log_s *)&_os_log_default;
    id v13 = &_os_log_default;
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    v15[0] = 67110146;
    v15[1] = a1;
    __int16 v16 = 2112;
    id v17 = v9;
    __int16 v18 = 2112;
    id v19 = v10;
    __int16 v20 = 2112;
    id v21 = v11;
    __int16 v22 = 2048;
    uint64_t v23 = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "voiceOver cursorInformationUpdateHandler: validMask=%xh label=%@ value=%@ hint=%@ traitsMask=%llx",  (uint8_t *)v15,  0x30u);
  }

  if (a1)
  {
    __int16 v14 = malloc(0x30uLL);
    *__int16 v14 = 1;
    _DWORD v14[2] = a1;
    *((void *)v14 + 2) = v9;
    *((void *)v14 + 3) = v10;
    *((void *)v14 + 4) = v11;
    *((void *)v14 + 5) = a5;
  }
}

void platform_externalAccessory_addEAAccessoryForPrimaryEndpoint(const char *a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 10;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  else
  {
    BOOL v4 = (os_log_s *)*(id *)(gLogObjects + 72);
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v17 = 138412290;
    __int16 v18 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "platform_externalAccessory_addEAAccessoryForPrimaryEndpoint endpointUUID: %@",  (uint8_t *)&v17,  0xCu);
  }

  int v5 = acc_manager_copyConnectionUUIDForEndpointUUID(a1);
  if (v5)
  {
    uint64_t v6 = v5;
    ConnectionWithUUID = (char *)acc_manager_getConnectionWithUUID(v5);
    if (!ConnectionWithUUID)
    {
      CFRelease(v6);
LABEL_28:
      id v13 = -[ACCExternalAccessory initWithEndpointUUIDs:primaryEndpointUUID:]( objc_alloc(&OBJC_CLASS___ACCExternalAccessory),  "initWithEndpointUUIDs:primaryEndpointUUID:",  0LL,  a1);
      if (v13)
      {
        __int16 v14 = v13;
        [(id)gConnectedExternalAccessories addObject:v13];
        _postFindAppAlert(v14);
        platform_digitalAudio_eaAccessoryAttached();
        double v15 = (void *)objc_claimAutoreleasedReturnValue( +[ACCExternalAccessoryServer sharedServer]( &OBJC_CLASS___ACCExternalAccessoryServer,  "sharedServer"));
        [v15 externalAccessoryArrived:v14];
      }

      else
      {
        if (gLogObjects && gNumLogObjects >= 10)
        {
          __int16 v14 = (ACCExternalAccessory *)*(id *)(gLogObjects + 72);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          __int16 v14 = (ACCExternalAccessory *)&_os_log_default;
          id v16 = &_os_log_default;
        }

        if (os_log_type_enabled((os_log_t)v14, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v17) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v14,  OS_LOG_TYPE_DEFAULT,  "Could not create ACCExternalAccessory object for EA endpoints",  (uint8_t *)&v17,  2u);
        }
      }

      return;
    }

    double v8 = acc_connection_copyProperty(ConnectionWithUUID, kCFACCProperties_Connection_HideFromEA);
    id v9 = v8;
    if (v8) {
      CFRelease(v8);
    }
    if (gLogObjects && gNumLogObjects >= 10)
    {
      id v10 = (os_log_s *)*(id *)(gLogObjects + 72);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v10 = (os_log_s *)&_os_log_default;
      id v11 = &_os_log_default;
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v12 = "no";
      if (!v9) {
        __int16 v12 = "yes";
      }
      int v17 = 136315138;
      __int16 v18 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "connectionSupportsEA = %s",  (uint8_t *)&v17,  0xCu);
    }

    CFRelease(v6);
    if (!v9) {
      goto LABEL_28;
    }
  }

void __platform_externalAccessory_addEAAccessoryForPrimaryEndpoint_block_invoke(id a1)
{
  if (!gConnectedExternalAccessories)
  {
    uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    BOOL v2 = (void *)gConnectedExternalAccessories;
    gConnectedExternalAccessories = (uint64_t)v1;
  }

void platform_externalAccessory_addEAAccessoryForEAEndpoints(void *a1, uint64_t a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 10;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v6 = (os_log_s *)&_os_log_default;
    id v5 = &_os_log_default;
  }

  else
  {
    uint64_t v6 = (os_log_s *)*(id *)(gLogObjects + 72);
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    platform_externalAccessory_addEAAccessoryForEAEndpoints_cold_2((uint64_t)a1, a2, v6);
  }

  id v7 = a1;
  if ([v7 count])
  {
    double v8 = -[ACCExternalAccessory initWithEndpointUUIDs:primaryEndpointUUID:]( objc_alloc(&OBJC_CLASS___ACCExternalAccessory),  "initWithEndpointUUIDs:primaryEndpointUUID:",  v7,  a2);
    if (v8)
    {
      [(id)gConnectedExternalAccessories addObject:v8];
      _postFindAppAlert(v8);
      platform_digitalAudio_eaAccessoryAttached();
      id v9 = (id)objc_claimAutoreleasedReturnValue(+[ACCExternalAccessoryServer sharedServer](&OBJC_CLASS___ACCExternalAccessoryServer, "sharedServer"));
      [v9 externalAccessoryArrived:v8];
    }

    else
    {
      if (gLogObjects && gNumLogObjects >= 10)
      {
        id v9 = *(id *)(gLogObjects + 72);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v9 = &_os_log_default;
        id v10 = &_os_log_default;
      }

      if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v11 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v9,  OS_LOG_TYPE_DEFAULT,  "Could not create ACCExternalAccessory object for EA endpoints",  v11,  2u);
      }
    }
  }
}

void __platform_externalAccessory_addEAAccessoryForEAEndpoints_block_invoke(id a1)
{
  if (!gConnectedExternalAccessories)
  {
    uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    BOOL v2 = (void *)gConnectedExternalAccessories;
    gConnectedExternalAccessories = (uint64_t)v1;
  }

void _postFindAppAlert(void *a1)
{
  id v1 = a1;
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  id v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = ___postFindAppAlert_block_invoke;
  block[3] = &unk_1001F96F8;
  id v6 = v1;
  id v4 = v1;
  dispatch_async(v3, block);
}

CFDictionaryRef _findiAP2EndpointForConnection(uint64_t a1)
{
  Endpoints = (const __CFDictionary *)acc_connection_getEndpoints(a1);
  BOOL v2 = Endpoints;
  if (Endpoints)
  {
    CFIndex Count = CFDictionaryGetCount(Endpoints);
    if (Count < 1) {
      goto LABEL_10;
    }
    uint64_t v4 = Count;
    __chkstk_darwin(Count);
    id v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    memset(v6, 170, v5);
    CFDictionaryGetKeysAndValues(v2, (const void **)v6, 0LL);
    uint64_t v7 = 0LL;
    BOOL v2 = 0LL;
    unsigned int v8 = 1;
    do
    {
      EndpointWithUUID = (const __CFDictionary *)acc_manager_getEndpointWithUUID(*(const void **)&v6[8 * v7]);
      uint64_t v7 = v8;
      BOOL v10 = v4 <= v8++;
    }

    while (!v10);
    if (!v2)
    {
LABEL_10:
      if (gLogObjects) {
        BOOL v10 = gNumLogObjects < 10;
      }
      else {
        BOOL v10 = 1;
      }
      if (v10)
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        __int16 v12 = (os_log_s *)&_os_log_default;
        id v11 = &_os_log_default;
      }

      else
      {
        __int16 v12 = (os_log_s *)*(id *)(gLogObjects + 72);
      }

      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        _findiAP2EndpointForConnection_cold_1(v12);
      }

      return 0LL;
    }
  }

  return v2;
}

void _sendEAPowerSourceUpdate(uint64_t a1, int a2)
{
  if (!a1)
  {
    unsigned int v8 = 0LL;
    goto LABEL_44;
  }

  uint64_t v4 = (void *)gWiredConnectionSessionCountDict;
  if (!gWiredConnectionSessionCountDict)
  {
    uint64_t v5 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    id v6 = (void *)gWiredConnectionSessionCountDict;
    gWiredConnectionSessionCountDict = v5;

    uint64_t v4 = (void *)gWiredConnectionSessionCountDict;
  }

  uint64_t v7 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue([v4 objectForKey:*(void *)(a1 + 8)]);
  unsigned int v8 = v7;
  if (a2 == 2)
  {
    if (!v7)
    {
      unsigned int v8 = &off_100206BC0;
      goto LABEL_14;
    }

    int v9 = 1;
    goto LABEL_10;
  }

  if (a2 == 1 && v7)
  {
    int v9 = -1;
LABEL_10:
    uint64_t v10 = objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v7 unsignedIntValue] + v9));

    unsigned int v8 = (_UNKNOWN **)v10;
  }

  if (!v8)
  {
    char v11 = 0;
    goto LABEL_19;
  }

LABEL_44:
}

  int v17 = 1;
LABEL_45:
  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v26 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    uint64_t v26 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  __int16 v22 = v53;
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v28 = *v53;
    id v29 = *((_DWORD *)v53 + 286);
    unsigned int v30 = a2[2];
    *(_DWORD *)buf = 67110144;
    id v56 = v28;
    int v57 = 1024;
    __int16 v58 = v29;
    id v59 = 1024;
    int v60 = v30;
    uint64_t v61 = 1024;
    __int16 v62 = v18;
    id v63 = 1024;
    __int16 v64 = updated;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEBUG,  "[AccAuth][1Way] handleResponse: sessionID %d, role %d, paramID1 %02x, responseLen %d, errorNo %d \n",  buf,  0x20u);
    if ((_DWORD)updated) {
      goto LABEL_65;
    }
  }

  else if ((_DWORD)updated)
  {
    goto LABEL_65;
  }

  if (v17)
  {
    int inited = _acc_auth_protocol_verifyChallengeResponse((uint64_t)v53, v53 + 1160, v53[1192], v16, v18);
    if (!(_DWORD)inited) {
      int inited = acc_auth_protocol_initFinishMessage(v53, 0, a3, a4);
    }
    int updated = inited;
    int v17 = 1;
  }

  else
  {
    int updated = 0LL;
  }

  __int16 v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_composerPersistentID));
  -[NSMutableDictionary setObject:forKey:]( v3,  "setObject:forKey:",  v22,  @"ACCMediaLibraryUpdateItemComposerPersistentID");

  validMask = self->_validMask;
  if ((validMask & 0x40000) == 0)
  {
LABEL_20:
    if ((validMask & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }

  a3->var14 = self->_albumArtistPersistentID;
  a3->var0 |= 0x2000u;
  validMask = self->_validMask;
  if ((validMask & 0x4000) == 0)
  {
LABEL_16:
    if ((validMask & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_48;
  }

void platform_externalAccessory_removeEAAccessoryForPrimaryEndpoint(void *a1)
{
  id v1 = a1;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id v2 = (id)gConnectedExternalAccessories;
  id v3 = [v2 countByEnumeratingWithState:&v18 objects:v24 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v19;
LABEL_3:
    uint64_t v6 = 0LL;
    while (1)
    {
      if (*(void *)v19 != v5) {
        objc_enumerationMutation(v2);
      }
      uint64_t v7 = *(void **)(*((void *)&v18 + 1) + 8 * v6);
      unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "primaryEndpointUUID", (void)v18));
      unsigned __int8 v9 = [v8 isEqualToString:v1];

      if ((v9 & 1) != 0) {
        break;
      }
      if (v4 == (id)++v6)
      {
        id v4 = [v2 countByEnumeratingWithState:&v18 objects:v24 count:16];
        if (v4) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }

    id v10 = v7;

    if (!v10) {
      goto LABEL_14;
    }
    if (gLogObjects && gNumLogObjects >= 10)
    {
      char v11 = (os_log_s *)*(id *)(gLogObjects + 72);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      char v11 = (os_log_s *)&_os_log_default;
      id v14 = &_os_log_default;
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
      platform_externalAccessory_removeEAAccessoryForPrimaryEndpoint_cold_3(v10, v11);
    }

    platform_digitalAudio_eaAccessoryDetached();
    [(id)gConnectedExternalAccessories removeObject:v10];
    id v12 = (id)objc_claimAutoreleasedReturnValue(+[ACCExternalAccessoryServer sharedServer](&OBJC_CLASS___ACCExternalAccessoryServer, "sharedServer"));
    [v12 externalAccessoryLeft:v10];
  }

  else
  {
LABEL_9:

LABEL_14:
    if (gLogObjects && gNumLogObjects >= 10)
    {
      id v12 = *(id *)(gLogObjects + 72);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v12 = &_os_log_default;
      id v13 = &_os_log_default;
    }

    if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v23 = (uint64_t)v1;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v12,  OS_LOG_TYPE_DEFAULT,  "Couldn't find EA accessory to remove with primary endpointUUID %@",  buf,  0xCu);
    }

    id v10 = 0LL;
  }

  EndpointWithUUID = acc_manager_getEndpointWithUUID(v1);
  if (EndpointWithUUID && *EndpointWithUUID && EndpointWithUUID[1])
  {
    objc_msgSend((id)gWiredConnectionSessionCountDict, "removeObjectForKey:");
    if (gLogObjects && gNumLogObjects >= 10)
    {
      id v16 = (os_log_s *)*(id *)(gLogObjects + 72);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v16 = (os_log_s *)&_os_log_default;
      id v17 = &_os_log_default;
    }

    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v23 = gWiredConnectionSessionCountDict;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "gWiredConnectionSessionCountDict: %@",  buf,  0xCu);
    }
  }
}

void platform_externalAccessory_removeEAASessionCountForConnection(uint64_t a1)
{
  if (a1)
  {
    [(id)gWiredConnectionSessionCountDict removeObjectForKey:a1];
    if (gLogObjects) {
      BOOL v1 = gNumLogObjects < 10;
    }
    else {
      BOOL v1 = 1;
    }
    if (v1)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v3 = (os_log_s *)&_os_log_default;
      id v2 = &_os_log_default;
    }

    else
    {
      id v3 = (os_log_s *)*(id *)(gLogObjects + 72);
    }

    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      int v4 = 138412290;
      uint64_t v5 = gWiredConnectionSessionCountDict;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "gWiredConnectionSessionCountDict: %@",  (uint8_t *)&v4,  0xCu);
    }
  }

void platform_externalAccessory_removeEAAccessoryForPrimaryEndpoints(void *a1)
{
  id v1 = a1;
  __int128 v6 = 0u;
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      uint64_t v5 = 0LL;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        platform_externalAccessory_removeEAAccessoryForPrimaryEndpoint(*(void **)(*((void *)&v6 + 1) + 8LL * (void)v5));
        uint64_t v5 = (char *)v5 + 1;
      }

      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }

    while (v3);
  }
}

void platform_externalAccessory_updateEAAccessoryInfoForEndpointWithUUID(void *a1)
{
  id v1 = a1;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v2 = (id)gConnectedExternalAccessories;
  id v3 = [v2 countByEnumeratingWithState:&v16 objects:v22 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v17;
LABEL_3:
    uint64_t v6 = 0LL;
    while (1)
    {
      if (*(void *)v17 != v5) {
        objc_enumerationMutation(v2);
      }
      __int128 v7 = *(void **)(*((void *)&v16 + 1) + 8 * v6);
      __int128 v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "primaryEndpointUUID", (void)v16));
      unsigned __int8 v9 = [v8 isEqualToString:v1];

      if ((v9 & 1) != 0) {
        break;
      }
      if (v4 == (id)++v6)
      {
        id v4 = [v2 countByEnumeratingWithState:&v16 objects:v22 count:16];
        if (v4) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }

    id v10 = v7;

    if (!v10) {
      goto LABEL_14;
    }
    if (gLogObjects && gNumLogObjects >= 10)
    {
      char v11 = (os_log_s *)*(id *)(gLogObjects + 72);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      char v11 = (os_log_s *)&_os_log_default;
      id v13 = &_os_log_default;
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v10 primaryEndpointUUID]);
      *(_DWORD *)buf = 138412290;
      id v21 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "Updating accessory primaryEndpointUUID %@",  buf,  0xCu);
    }

    [v10 updateAccessoryInfo];
    double v15 = (void *)objc_claimAutoreleasedReturnValue(+[ACCExternalAccessoryServer sharedServer](&OBJC_CLASS___ACCExternalAccessoryServer, "sharedServer"));
    [v15 updateExternalAccessoryInfo:v10];
  }

  else
  {
LABEL_9:

LABEL_14:
    if (gLogObjects && gNumLogObjects >= 10)
    {
      id v10 = *(id *)(gLogObjects + 72);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v10 = &_os_log_default;
      id v12 = &_os_log_default;
    }

    if (os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v21 = v1;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v10,  OS_LOG_TYPE_INFO,  "Couldn't find EA accessory to update with primary endpointUUID %@",  buf,  0xCu);
    }
  }
}

uint64_t platform_externalAccessory_verifyPrimaryEndpointConnected(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0LL;
  }
  id v27 = [a2 unsignedLongLongValue];
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  id v3 = (id)gConnectedExternalAccessories;
  id v4 = [v3 countByEnumeratingWithState:&v28 objects:v36 count:16];
  if (v4)
  {
    id v6 = v4;
    uint64_t v7 = *(void *)v29;
    *(void *)&__int128 v5 = 134218240LL;
    __int128 v26 = v5;
    while (2)
    {
      for (uint64_t i = 0LL; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v29 != v7) {
          objc_enumerationMutation(v3);
        }
        unsigned __int8 v9 = *(void **)(*((void *)&v28 + 1) + 8LL * (void)i);
        id v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "primaryEndpointUUID", v26));
        unsigned int v11 = [v10 isEqualToString:a1];

        if (v11)
        {
          id v12 = (void *)objc_claimAutoreleasedReturnValue([v9 EAConnectionID]);
          id v13 = [v12 unsignedLongLongValue];

          uint64_t v14 = gLogObjects;
          int v15 = gNumLogObjects;
          if (gLogObjects) {
            BOOL v16 = gNumLogObjects <= 9;
          }
          else {
            BOOL v16 = 1;
          }
          int v17 = !v16;
          if (v27 == v13)
          {
            if (v17)
            {
              __int16 v22 = (os_log_s *)*(id *)(gLogObjects + 72);
            }

            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
              __int16 v22 = (os_log_s *)&_os_log_default;
              id v23 = &_os_log_default;
            }

            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
            {
              __int16 v24 = (void *)objc_claimAutoreleasedReturnValue([v9 primaryEndpointUUID]);
              *(_DWORD *)buf = 138412546;
              uint64_t v33 = (uint64_t)v24;
              __int16 v34 = 2048;
              id v35 = v27;
              _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "%@ primaryEndpointUUID, legacy EAConnectionID %llu is currently connected",  buf,  0x16u);
            }

            uint64_t v21 = 1LL;
            goto LABEL_34;
          }

          if (v17)
          {
            __int128 v18 = (os_log_s *)*(id *)(gLogObjects + 72);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = v26;
              uint64_t v33 = v14;
              __int16 v34 = 1024;
              LODWORD(v35) = v15;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            }

            id v19 = &_os_log_default;
            __int128 v18 = (os_log_s *)&_os_log_default;
          }

          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v9 primaryEndpointUUID]);
            *(_DWORD *)buf = 138412546;
            uint64_t v33 = (uint64_t)v20;
            __int16 v34 = 2048;
            id v35 = v13;
            _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "found %@ primaryEndpointUUID, but legacy EAConnectionID that is currently connected is %llu",  buf,  0x16u);
          }
        }
      }

      id v6 = [v3 countByEnumeratingWithState:&v28 objects:v36 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }

  uint64_t v21 = 0LL;
LABEL_34:

  return v21;
}

id platform_externalAccesory_legacyConnectionUUIDForPrimaryEndpointUUID(void *a1)
{
  id v1 = a1;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v2 = (id)gConnectedExternalAccessories;
  id v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v12;
    while (2)
    {
      for (uint64_t i = 0LL; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v4) {
          objc_enumerationMutation(v2);
        }
        id v6 = *(void **)(*((void *)&v11 + 1) + 8LL * (void)i);
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "primaryEndpointUUID", (void)v11));
        unsigned int v8 = [v7 isEqualToString:v1];

        if (v8)
        {
          unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue([v6 EAConnectionID]);
          id v3 = [v9 unsignedIntValue];

          goto LABEL_11;
        }
      }

      id v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }

id platform_externalAccessory_copyVehicleInformationForEndpointUUID(uint64_t a1)
{
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v2 = (id)gConnectedExternalAccessories;
  id v3 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v15;
    while (2)
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v14 + 1) + 8LL * (void)i);
        unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "primaryEndpointUUID", (void)v14));
        unsigned int v9 = [v8 isEqualToString:a1];

        if (v9)
        {
          __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v7 EAAccessoryDictionary]);
          __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKey:kACCVehicleInfoLegacyInitialDataKey]);
          id v10 = [v12 copy];

          goto LABEL_11;
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

  id v10 = 0LL;
LABEL_11:

  return v10;
}

id platform_externalAccessory_copyEAProtocolsForEndpointUUID(uint64_t a1)
{
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v2 = (id)gConnectedExternalAccessories;
  id v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v13;
    while (2)
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v12 + 1) + 8LL * (void)i);
        unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "primaryEndpointUUID", (void)v12));
        unsigned int v9 = [v8 isEqualToString:a1];

        if (v9)
        {
          id v10 = [v7 copyExternalAccessoryProtocols];
          goto LABEL_11;
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

  id v10 = 0LL;
LABEL_11:

  return v10;
}

id platform_externalAccessory_retrieveMutableEADataFromAppForSessionUUID(uint64_t a1, uint64_t a2)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[ACCExternalAccessorySessionManager sharedManager]( &OBJC_CLASS___ACCExternalAccessorySessionManager,  "sharedManager"));
  id v5 = [v4 returnAppToAccessoryDataForSession:a1 maxBufferSize:a2];

  return v5;
}

void platform_externalAccessory_stopIncomingDataNotificationsForEASessionUUID(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[ACCExternalAccessorySessionManager sharedManager]( &OBJC_CLASS___ACCExternalAccessorySessionManager,  "sharedManager"));
  [v2 stopIncomingDataNotificationsForEASessionUUID:a1];
}

void platform_externalAccessory_startIncomingDataNotificationsForEASessionUUID(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[ACCExternalAccessorySessionManager sharedManager]( &OBJC_CLASS___ACCExternalAccessorySessionManager,  "sharedManager"));
  [v2 startIncomingDataNotificationsForEASessionUUID:a1];
}

id platform_externalAccessory_handleIncomingEADataFromAccessoryForSessionID(uint64_t a1, uint64_t a2)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[ACCExternalAccessorySessionManager sharedManager]( &OBJC_CLASS___ACCExternalAccessorySessionManager,  "sharedManager"));
  id v5 = [v4 handleIncomingExternalAccessoryData:a2 forSessionID:a1];

  return v5;
}

id platform_externalAccessory_handleIncomingEADataFromAccessoryForEndpointUUID(const void *a1, void *a2)
{
  EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[ACCExternalAccessorySessionManager sharedManager]( &OBJC_CLASS___ACCExternalAccessorySessionManager,  "sharedManager"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 eaSessionUUIDForEndpointUUID:a1]);

  acc_platform_packetLogging_logEAData((uint64_t)EndpointWithUUID, (uint64_t)v6, a2, 1);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[ACCExternalAccessorySessionManager sharedManager]( &OBJC_CLASS___ACCExternalAccessorySessionManager,  "sharedManager"));
  id v8 = [v7 handleIncomingExternalAccessoryData:a2 forEndpointUUID:a1];

  return v8;
}

id platform_externalAccessory_copyEndpointUUIDForEASessionID(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[ACCExternalAccessorySessionManager sharedManager]( &OBJC_CLASS___ACCExternalAccessorySessionManager,  "sharedManager"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 eaSessionUUIDForSessionID:a1]);
  id v4 = [v3 copy];

  if ((_DWORD)a1) {
    id v5 = v4;
  }
  else {
    id v5 = 0LL;
  }

  return v5;
}

id platform_externalAccessory_accessoryCloseExternalAccessorySession(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[ACCExternalAccessorySessionManager sharedManager]( &OBJC_CLASS___ACCExternalAccessorySessionManager,  "sharedManager"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 eaSessionUUIDForSessionID:a1]);

  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[ACCExternalAccessorySessionManager sharedManager]( &OBJC_CLASS___ACCExternalAccessorySessionManager,  "sharedManager"));
  id v5 = [v4 accessoryCloseSessionforEASessionID:a1];

  if ((_DWORD)v5) {
    _platform_externalAccessory_EASessionClosed(v3);
  }

  return v5;
}

void _platform_externalAccessory_EASessionClosed(void *a1)
{
  id v1 = a1;
  if (v1 && gWiredEASessionUUIDs && [(id)gWiredEASessionUUIDs containsObject:v1])
  {
    [(id)gWiredEASessionUUIDs removeObject:v1];
    if (gLogObjects && gNumLogObjects >= 10)
    {
      id v2 = (os_log_s *)*(id *)(gLogObjects + 72);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v2 = (os_log_s *)&_os_log_default;
      id v3 = &_os_log_default;
    }

    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      int v6 = 134217984;
      id v7 = [(id)gWiredEASessionUUIDs count];
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "after close EA session, gWiredEASessionUUIDs count = %lu",  (uint8_t *)&v6,  0xCu);
    }

    if (![(id)gWiredEASessionUUIDs count])
    {
      if (gLogObjects && gNumLogObjects >= 10)
      {
        id v4 = (os_log_s *)*(id *)(gLogObjects + 72);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v4 = (os_log_s *)&_os_log_default;
        id v5 = &_os_log_default;
      }

      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v6) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Have no more EA sessions requiring sleep assertion",  (uint8_t *)&v6,  2u);
      }

      platform_sleepAssertion_destroyEA();
    }
  }
}

id platform_externalAccessory_clientHasOpenEASession(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[ACCExternalAccessorySessionManager sharedManager]( &OBJC_CLASS___ACCExternalAccessorySessionManager,  "sharedManager"));
  id v3 = [v2 eaClientHasOpenEASession:a1];

  return v3;
}

void platform_externalAccessory_openExternalAccessorySession(__CFString *a1, void *a2)
{
  EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
  CFStringRef Copy = (__CFString *)CFStringCreateCopy(kCFAllocatorDefault, a1);
  acc_manager_protectedEndpointCall(a1, 0, 0LL, &__block_literal_global_12);
  uint64_t v6 = kACCExternalAccessorySessionUUIDKey;
  id v7 = a2;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  _DWORD v16[2] = __platform_externalAccessory_openExternalAccessorySession_block_invoke_2;
  v16[3] = &unk_1001FB490;
  id v8 = (id)objc_claimAutoreleasedReturnValue([v7 objectForKey:v6]);
  id v17 = v8;
  acc_manager_protectedEndpointCall(a1, 0, 0LL, v16);
  if (gLogObjects && gNumLogObjects >= 10)
  {
    unsigned int v9 = (os_log_s *)*(id *)(gLogObjects + 72);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    unsigned int v9 = (os_log_s *)&_os_log_default;
    id v10 = &_os_log_default;
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v19 = Copy;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Opening EA session for endpoint %@...",  buf,  0xCu);
  }

  acc_platform_packetLogging_logEvent( (uint64_t)EndpointWithUUID,  "OPEN_EA_SESSION",  (uint64_t)"Open EA sessionUUID %@",  v11,  v12,  v13,  v14,  v15,  (uint64_t)v8);
  accFeatureHandlers_invokeHandler(a1, 26, (uint64_t)v7);
}

BOOL __platform_externalAccessory_openExternalAccessorySession_block_invoke(id a1, ACCEndpoint_s *a2, void *a3)
{
  return 1;
}

void _handleEAPowerSourceChange(uint64_t *a1, int a2)
{
  if (a1)
  {
    id v3 = a1;
    if ((acc_endpoint_isWireless(a1) & 1) == 0)
    {
      int Protocol = acc_endpoint_getProtocol((uint64_t)v3);
    }
  }

uint64_t __platform_externalAccessory_openExternalAccessorySession_block_invoke_2(uint64_t a1, int *a2)
{
  id v3 = *(id *)(a1 + 32);
  if (_platform_externalAccessory_EASessionOpened_onceToken != -1) {
    dispatch_once(&_platform_externalAccessory_EASessionOpened_onceToken, &__block_literal_global_53);
  }
  if (platform_sleepAssertion_connectionTypeRequiresAssertion(*(_DWORD *)(*(void *)a2 + 8LL))
    && platform_sleepAssertion_endpointProtocolAllowsAssertion(a2[7]))
  {
    [(id)gWiredEASessionUUIDs addObject:v3];
    if (gLogObjects && gNumLogObjects >= 10)
    {
      id v4 = (os_log_s *)*(id *)(gLogObjects + 72);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v4 = (os_log_s *)&_os_log_default;
      id v5 = &_os_log_default;
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v9 = 134217984;
      id v10 = [(id)gWiredEASessionUUIDs count];
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "after open EA session, gWiredEASessionUUIDs count = %lu",  (uint8_t *)&v9,  0xCu);
    }

    if ([(id)gWiredEASessionUUIDs count] == (id)1)
    {
      if (gLogObjects && gNumLogObjects >= 10)
      {
        uint64_t v6 = (os_log_s *)*(id *)(gLogObjects + 72);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v6 = (os_log_s *)&_os_log_default;
        id v7 = &_os_log_default;
      }

      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v9) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Have first EA session requiring sleep assertion",  (uint8_t *)&v9,  2u);
      }

      platform_sleepAssertion_createEA();
    }
  }

  return 1LL;
}

void platform_externalAccessory_notifyClientsOOBBTPairingCompletionStatus( void *a1, uint64_t a2, unsigned int a3)
{
  if (gLogObjects) {
    BOOL v6 = gNumLogObjects < 10;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v8 = (os_log_s *)&_os_log_default;
    id v7 = &_os_log_default;
  }

  else
  {
    id v8 = (os_log_s *)*(id *)(gLogObjects + 72);
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315906;
    id v40 = "platform_externalAccessory_notifyClientsOOBBTPairingCompletionStatus";
    __int16 v41 = 2112;
    *(void *)uint64_t v42 = a1;
    *(_WORD *)&v42[8] = 2112;
    *(void *)&v42[10] = a2;
    __int16 v43 = 1024;
    LODWORD(v44) = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s protocolEndpointUUID %@ macAddr %@ result %u",  buf,  0x26u);
  }

  uint64_t v34 = a2;
  unsigned int v33 = a3;

  id v9 = a1;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  id v10 = (id)gConnectedExternalAccessories;
  id v11 = [v10 countByEnumeratingWithState:&v35 objects:v45 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v36;
LABEL_13:
    uint64_t v14 = 0LL;
    while (1)
    {
      if (*(void *)v36 != v13) {
        objc_enumerationMutation(v10);
      }
      uint64_t v15 = *(void **)(*((void *)&v35 + 1) + 8 * v14);
      __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v15 primaryEndpointUUID]);
      unsigned int v17 = [v16 isEqualToString:v9];

      if (v17) {
        break;
      }
      if (v12 == (id)++v14)
      {
        id v12 = [v10 countByEnumeratingWithState:&v35 objects:v45 count:16];
        if (v12) {
          goto LABEL_13;
        }
        goto LABEL_19;
      }
    }

    if (gLogObjects && gNumLogObjects >= 10)
    {
      __int128 v18 = (os_log_s *)*(id *)(gLogObjects + 72);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int128 v18 = (os_log_s *)&_os_log_default;
      id v19 = &_os_log_default;
    }

    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v20 = (char *)objc_claimAutoreleasedReturnValue([v15 primaryEndpointUUID]);
      *(_DWORD *)buf = 138412546;
      id v40 = v20;
      __int16 v41 = 2112;
      *(void *)uint64_t v42 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "eaAccessory.primaryEndpointUUID %@ matches protocolEndpointUUID %@",  buf,  0x16u);
    }

    id v21 = v15;
    if (v21)
    {
      unsigned int v22 = platform_externalAccesory_legacyConnectionUUIDForPrimaryEndpointUUID(v9);
      if (gLogObjects && gNumLogObjects >= 46)
      {
        id v23 = (os_log_s *)*(id *)(gLogObjects + 360);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        id v23 = (os_log_s *)&_os_log_default;
        id v26 = &_os_log_default;
      }

      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        id v40 = "platform_externalAccessory_notifyClientsOOBBTPairingCompletionStatus";
        __int16 v41 = 1024;
        *(_DWORD *)uint64_t v42 = v22;
        *(_WORD *)&v42[4] = 2112;
        *(void *)&v42[6] = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "%s connectionID %u for protocolEndpointUUID %@",  buf,  0x1Cu);
      }

      if (v34)
      {
        id v24 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
        id v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v33));
        [v24 setObject:v27 forKey:@"IAPAppAccessoryOOBBTPairingCompletionStatusKey"];

        __int128 v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v22));
        [v24 setObject:v28 forKey:@"IAPAppAccessoryOOBBTPairingConnectionIDKey"];

        [v24 setObject:v34 forKey:@"IAPAppAccessoryOOBBTPairingCompletionMACAddressKey"];
        if (gLogObjects && gNumLogObjects >= 10)
        {
          __int128 v29 = (os_log_s *)*(id *)(gLogObjects + 72);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          __int128 v29 = (os_log_s *)&_os_log_default;
          id v30 = &_os_log_default;
        }

        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315906;
          id v40 = "platform_externalAccessory_notifyClientsOOBBTPairingCompletionStatus";
          __int16 v41 = 2112;
          *(void *)uint64_t v42 = @"IAPAppAccessoryOOBBTPairingCompletionNotification";
          *(_WORD *)&v42[8] = 2112;
          *(void *)&v42[10] = v24;
          __int16 v43 = 2112;
          id v44 = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "%s sending to clients notification %@ with payload %@ about accessory on %@",  buf,  0x2Au);
        }

        __int128 v31 = (void *)objc_claimAutoreleasedReturnValue( +[ACCExternalAccessoryServer sharedServer]( &OBJC_CLASS___ACCExternalAccessoryServer,  "sharedServer"));
        [v31 sendToClientsNotification:@"IAPAppAccessoryOOBBTPairingCompletionNotification" withPayload:v24 aboutAccessory:v21];
      }

      else
      {
        if (gLogObjects && gNumLogObjects >= 10)
        {
          id v24 = *(id *)(gLogObjects + 72);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          id v24 = &_os_log_default;
          id v32 = &_os_log_default;
        }

        if (os_log_type_enabled((os_log_t)v24, OS_LOG_TYPE_ERROR)) {
          platform_externalAccessory_notifyClientsOOBBTPairingCompletionStatus_cold_3(v33, v22, (os_log_t)v24);
        }
      }

      goto LABEL_64;
    }
  }

  else
  {
LABEL_19:
  }

  if (gLogObjects && gNumLogObjects >= 10)
  {
    id v24 = *(id *)(gLogObjects + 72);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v24 = &_os_log_default;
    id v25 = &_os_log_default;
  }

  if (os_log_type_enabled((os_log_t)v24, OS_LOG_TYPE_ERROR)) {
    platform_externalAccessory_notifyClientsOOBBTPairingCompletionStatus_cold_1((uint64_t)v9, (os_log_s *)v24);
  }
  id v21 = 0LL;
LABEL_64:
}

void platform_externalAccessory_closeExternalAccessorySession(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:kACCExternalAccessorySessionUUIDKey]);
  _platform_externalAccessory_EASessionClosed(v4);
  uint64_t v15 = 0LL;
  __int128 v16 = &v15;
  uint64_t v17 = 0x2020000000LL;
  char v18 = 0;
  uint64_t v11 = 0LL;
  id v12 = &v11;
  uint64_t v13 = 0x2020000000LL;
  char v14 = 0;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = __platform_externalAccessory_closeExternalAccessorySession_block_invoke;
  v6[3] = &unk_1001FB4B8;
  id v8 = &v11;
  id v5 = v4;
  id v9 = &v15;
  id v10 = a1;
  id v7 = v5;
  acc_manager_protectedEndpointCall(a1, 0, 0LL, v6);
  if (*((_BYTE *)v16 + 24)) {
    accFeatureHandlers_invokeHandler(a1, 27, (uint64_t)v3);
  }
  if (*((_BYTE *)v12 + 24)) {
    acc_manager_protectedEndpointCall(a1, 0, 0LL, &__block_literal_global_18);
  }

  _Block_object_dispose(&v11, 8);
  _Block_object_dispose(&v15, 8);
}

void sub_1000871D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t __platform_externalAccessory_closeExternalAccessorySession_block_invoke( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_BYTE *)(*(void *)(a1[5] + 8) + 24LL) = 1;
  acc_platform_packetLogging_logEvent( a2,  "CLOSE_EA_SESSION",  (uint64_t)"Close EA sessionUUID %@",  a4,  a5,  a6,  a7,  a8,  a1[4]);
  int Protocol = acc_endpoint_getProtocol(a2);
  uint64_t v11 = *(void *)(a2 + 56);
  if (Protocol == 4)
  {
    if (v11)
    {
      BOOL isInitialized = iap2_endpoint_isInitialized(v11);
      if (gLogObjects) {
        BOOL v13 = gNumLogObjects <= 9;
      }
      else {
        BOOL v13 = 1;
      }
      int v14 = !v13;
      if (isInitialized)
      {
        if (v14)
        {
          uint64_t v15 = (os_log_s *)*(id *)(gLogObjects + 72);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          uint64_t v15 = (os_log_s *)&_os_log_default;
          id v21 = &_os_log_default;
        }

        if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_31;
        }
        uint64_t v22 = a1[7];
        *(_DWORD *)buf = 138412290;
        uint64_t v26 = v22;
        __int128 v20 = "Closing EA session for iAP2 endpoint %@...";
LABEL_30:
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v20, buf, 0xCu);
LABEL_31:

        *(_BYTE *)(*(void *)(a1[6] + 8) + 24LL) = 1;
        return 1LL;
      }

      if (v14)
      {
        char v18 = (os_log_s *)*(id *)(gLogObjects + 72);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        char v18 = (os_log_s *)&_os_log_default;
        id v23 = &_os_log_default;
      }

      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "Trying to close EA session for uninitialized iAP2 endpoint",  buf,  2u);
      }
    }
  }

  else if (v11)
  {
    if (gLogObjects) {
      BOOL v16 = gNumLogObjects < 10;
    }
    else {
      BOOL v16 = 1;
    }
    if (v16)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v15 = (os_log_s *)&_os_log_default;
      id v17 = &_os_log_default;
    }

    else
    {
      uint64_t v15 = (os_log_s *)*(id *)(gLogObjects + 72);
    }

    if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_31;
    }
    uint64_t v19 = a1[7];
    *(_DWORD *)buf = 138412290;
    uint64_t v26 = v19;
    __int128 v20 = "Closing EA session for endpoint %@...";
    goto LABEL_30;
  }

  return 1LL;
}

BOOL __platform_externalAccessory_closeExternalAccessorySession_block_invoke_17( id a1, ACCEndpoint_s *a2, void *a3)
{
  return 1;
}

BOOL platform_externalAccessory_openSocketFromAccessoryToApp(const void *a1, void *a2)
{
  EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
  int Protocol = acc_endpoint_getProtocol((uint64_t)EndpointWithUUID);
  if (Protocol == 6)
  {
    uint64_t v5 = kACCExternalAccessoryProtocolEndpointUUIDKey;
    id v6 = a2;
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:v5]);
    if (gLogObjects) {
      BOOL v8 = gNumLogObjects < 10;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v10 = (os_log_s *)&_os_log_default;
      id v9 = &_os_log_default;
    }

    else
    {
      id v10 = (os_log_s *)*(id *)(gLogObjects + 72);
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v21 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Opening socket from Accessory to App for EA Native USB protocol endpointUUID %@",  buf,  0xCu);
    }

    v19[0] = v7;
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v6,  "objectForKey:",  kACCExternalAccessoryProtocolNameKey,  ACCTransportEANative_EndpointUUID,  ACCTransportEANative_ProtocolName));
    v19[1] = v11;
    _DWORD v18[2] = ACCTransportEANative_ProtocolNumber;
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:kACCExternalAccessoryProtocolIndexKey]);
    _DWORD v19[2] = v12;
    v18[3] = ACCTransportEANative_LegacyConnectionID;
    BOOL v13 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:kACCExternalAccessoryLegacyConnectionIDKey]);
    v19[3] = v13;
    v18[4] = ACCTransportEANative_EASessionUUID;
    int v14 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:kACCExternalAccessorySessionUUIDKey]);

    v19[4] = v14;
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v19,  v18,  5LL));

    BOOL v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v16 postNotificationName:ACCTransportEANative_OpenSocketFromAccessoryToAppNotification object:0 userInfo:v15];
  }

  return Protocol == 6;
}

BOOL platform_externalAccessory_openSocketFromAppToAccessory(const void *a1, void *a2)
{
  EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
  int Protocol = acc_endpoint_getProtocol((uint64_t)EndpointWithUUID);
  if (Protocol == 6)
  {
    uint64_t v5 = kACCExternalAccessoryProtocolEndpointUUIDKey;
    id v6 = a2;
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:v5]);
    if (gLogObjects) {
      BOOL v8 = gNumLogObjects < 10;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v10 = (os_log_s *)&_os_log_default;
      id v9 = &_os_log_default;
    }

    else
    {
      id v10 = (os_log_s *)*(id *)(gLogObjects + 72);
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v21 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Opening socket from App to Accessory for EA Native USB protocol endpointUUID %@",  buf,  0xCu);
    }

    v19[0] = v7;
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v6,  "objectForKey:",  kACCExternalAccessoryProtocolNameKey,  ACCTransportEANative_EndpointUUID,  ACCTransportEANative_ProtocolName));
    v19[1] = v11;
    _DWORD v18[2] = ACCTransportEANative_ProtocolNumber;
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:kACCExternalAccessoryProtocolIndexKey]);
    _DWORD v19[2] = v12;
    v18[3] = ACCTransportEANative_LegacyConnectionID;
    BOOL v13 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:kACCExternalAccessoryLegacyConnectionIDKey]);
    v19[3] = v13;
    v18[4] = ACCTransportEANative_EASessionUUID;
    int v14 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:kACCExternalAccessorySessionUUIDKey]);

    v19[4] = v14;
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v19,  v18,  5LL));

    BOOL v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v16 postNotificationName:ACCTransportEANative_OpenSocketFromAppToAccessoryNotification object:0 userInfo:v15];
  }

  return Protocol == 6;
}

uint64_t platform_externalAccessory_sendOutgoingEADataFromClient(const __CFString *a1, void *a2)
{
  EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
  uint64_t v5 = (uint64_t)EndpointWithUUID;
  if (EndpointWithUUID)
  {
    if (acc_endpoint_getProtocol((uint64_t)EndpointWithUUID) == 4)
    {
      uint64_t v6 = *(void *)(v5 + 56);
      if (v6)
      {
      }
    }

    if (acc_endpoint_getProtocol(v5) == 5 || acc_endpoint_getProtocol(v5) == 7)
    {
      id v8 = a2;
      CFStringRef Copy = (__CFString *)CFStringCreateCopy(kCFAllocatorDefault, a1);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:kACCExternalAccessorySessionUUIDKey]);
      if (gLogObjects && gNumLogObjects >= 10)
      {
        uint64_t v11 = (os_log_s *)*(id *)(gLogObjects + 72);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v11 = (os_log_s *)&_os_log_default;
        id v12 = &_os_log_default;
      }

      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 138412290;
        uint64_t v15 = Copy;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Sending outgoing EA data to endpointUUID %@",  (uint8_t *)&v14,  0xCu);
      }

      BOOL v13 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:kACCExternalAccessorySessionDataKey]);
      acc_platform_packetLogging_logEAData(v5, (uint64_t)v10, v13, 0);
      uint64_t v5 = acc_endpoint_sendOutgoingData(v5, (const __CFData *)v13);
    }

    else
    {
      return 0LL;
    }
  }

  return v5;
}

uint64_t platform_externalAccessory_outgoingEADataFromClientAvailable(const void *a1, uint64_t a2)
{
  if (a1)
  {
    EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
    if (EndpointWithUUID)
    {
      uint64_t v5 = EndpointWithUUID;
      if (!EndpointWithUUID[120] && acc_endpoint_getProtocol((uint64_t)EndpointWithUUID) == 4)
      {
        uint64_t v6 = *((void *)v5 + 7);
        if (gLogObjects && gNumLogObjects >= 10)
        {
          id v8 = (os_log_s *)*(id *)(gLogObjects + 72);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
          id v8 = (os_log_s *)&_os_log_default;
          id v9 = &_os_log_default;
        }

        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          int v10 = 138412546;
          uint64_t v11 = a1;
          __int16 v12 = 2080;
          BOOL v13 = "NO";
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Skip sending outgoingEADataFromClientAvailable to endpointUUID %@, iAP2_Initialized=%s",  (uint8_t *)&v10,  0x16u);
        }
      }
    }
  }

  return 0LL;
}

BOOL _isEAProtocolContainedInAllowList(void *a1)
{
  uint64_t v5 = 0LL;
  id v1 = a1;
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSRegularExpression regularExpressionWithPattern:options:error:]( &OBJC_CLASS___NSRegularExpression,  "regularExpressionWithPattern:options:error:",  @"com.apple.accessory.updater.*",  1LL,  &v5));
  id v3 = objc_msgSend(v2, "numberOfMatchesInString:options:range:", v1, 0, 0, objc_msgSend(v1, "length"));

  return v3 != 0LL;
}

void ___postFindAppAlert_block_invoke(uint64_t a1)
{
  if (!platform_system_isApplicationVisible((uint64_t)@"com.apple.AppStore")
    || (platform_systemInfo_isATV() & 1) != 0)
  {
    return;
  }

  id v2 = (void *)CFPreferencesCopyAppValue(@"OptionalSDKProtocolsShownKey", @"com.apple.iapd");
  id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) EAProtocolsAppMatching]);
  __int128 v60 = 0u;
  __int128 v61 = 0u;
  __int128 v62 = 0u;
  __int128 v63 = 0u;
  id v5 = [v4 countByEnumeratingWithState:&v60 objects:v65 count:16];
  if (!v5) {
    goto LABEL_39;
  }
  id v6 = v5;
  uint64_t v49 = a1;
  id v7 = v3;
  char v8 = 0;
  char v51 = 0;
  uint64_t v9 = *(void *)v61;
  do
  {
    for (uint64_t i = 0LL; i != v6; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v61 != v9) {
        objc_enumerationMutation(v4);
      }
      uint64_t v11 = *(void **)(*((void *)&v60 + 1) + 8LL * (void)i);
      if (!_isEAProtocolContainedInAllowList(v11))
      {
        __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 lowercaseString]);
        if (v2 && (CFTypeID v13 = CFGetTypeID(v2), v13 != CFArrayGetTypeID()))
        {
LABEL_14:
          int v14 = (void *)platform_system_copyInstalledApplicationsForExternalAccessoryProtocol((uint64_t)v11);
          uint64_t v15 = v14;
          if (!v14 || ![v14 count]) {
            char v51 = 1;
          }
        }

        else if (([v2 containsObject:v12] & 1) == 0 {
               && (-[NSMutableArray containsObject:](v7, "containsObject:", v12) & 1) == 0)
        }
        {
          -[NSMutableArray addObject:](v7, "addObject:", v12);
          char v8 = 1;
          goto LABEL_14;
        }

        continue;
      }
    }

    id v6 = [v4 countByEnumeratingWithState:&v60 objects:v65 count:16];
  }

  while (v6);
  if ((v8 & 1) != 0)
  {
    id v16 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](&OBJC_CLASS___NSMutableArray, "arrayWithArray:", v2));
    __int128 v56 = 0u;
    __int128 v57 = 0u;
    __int128 v58 = 0u;
    __int128 v59 = 0u;
    id v17 = v7;
    id v18 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v17,  "countByEnumeratingWithState:objects:count:",  &v56,  v64,  16LL);
    if (v18)
    {
      id v19 = v18;
      uint64_t v20 = *(void *)v57;
      do
      {
        for (CFIndex j = 0LL; j != v19; CFIndex j = (char *)j + 1)
        {
          if (*(void *)v57 != v20) {
            objc_enumerationMutation(v17);
          }
          [v16 addObject:*(void *)(*((void *)&v56 + 1) + 8 * (void)j)];
        }

        id v19 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v17,  "countByEnumeratingWithState:objects:count:",  &v56,  v64,  16LL);
      }

      while (v19);
    }

    uint64_t v22 = v49;
    if ((v51 & 1) != 0)
    {
      id v3 = v7;
      goto LABEL_33;
    }

    _updatePlistForSeenEAProtocols(v16);
    id v3 = v7;
LABEL_38:
  }

  else
  {
    id v3 = v7;
    uint64_t v22 = v49;
    if ((v51 & 1) != 0)
    {
      id v16 = 0LL;
LABEL_33:
      id v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v22 + 32) EAName]);
      id v24 = v23;
      if (v23)
      {
        id v52 = v23;
      }

      else
      {
        uint64_t v25 = ((uint64_t (*)(void))acc_strings_bundle)();
        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
        id v52 = (id)objc_claimAutoreleasedReturnValue([v26 localizedStringForKey:@"Unknown" value:&stru_100200A40 table:0]);
      }

      id v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v22 + 32) primaryEndpointUUID]);
      uint64_t v50 = acc_manager_copyConnectionUUIDForEndpointUUID(v27);

      __int128 v28 = objc_alloc_init(&OBJC_CLASS___ACCUserNotification);
      uint64_t v29 = acc_strings_bundle(-[ACCUserNotification setType:](v28, "setType:", 1LL));
      id v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
      __int128 v31 = (void *)objc_claimAutoreleasedReturnValue( [v30 localizedStringForKey:@"App Not Installed" value:&stru_100200A40 table:0]);
      -[ACCUserNotification setTitle:](v28, "setTitle:", v31);

      uint64_t v33 = acc_strings_bundle(v32);
      uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
      __int128 v35 = (void *)objc_claimAutoreleasedReturnValue( [v34 localizedStringForKey:@"The accessory “%@” uses an app you do not have installed. Would you like to get it from the App Store?" value:&stru_100200A40 table:0]);
      __int128 v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v35, v52));
      -[ACCUserNotification setMessage:](v28, "setMessage:", v36);

      uint64_t v38 = acc_strings_bundle(v37);
      unsigned int v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
      id v40 = (void *)objc_claimAutoreleasedReturnValue([v39 localizedStringForKey:@"Ignore" value:&stru_100200A40 table:0]);
      -[ACCUserNotification setDefaultButtonName:](v28, "setDefaultButtonName:", v40);

      uint64_t v42 = acc_strings_bundle(v41);
      __int16 v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
      id v44 = (void *)objc_claimAutoreleasedReturnValue([v43 localizedStringForKey:@"App Store" value:&stru_100200A40 table:0]);
      -[ACCUserNotification setOtherButtonName:](v28, "setOtherButtonName:", v44);

      -[ACCUserNotification setIsModal:](v28, "setIsModal:", 0LL);
      int v45 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v22 + 32) primaryEndpointUUID]);
      id Identifier = acc_userNotifications_generateIdentifier((uint64_t)@"ea-app-launch", (uint64_t)v45);
      id v47 = (void *)objc_claimAutoreleasedReturnValue(Identifier);
      -[ACCUserNotification setIdentifier:](v28, "setIdentifier:", v47);

      -[ACCUserNotification setGroupIdentifier:](v28, "setGroupIdentifier:", v50);
      id v48 = (void *)objc_claimAutoreleasedReturnValue( +[ACCUserNotificationManager sharedManager]( &OBJC_CLASS___ACCUserNotificationManager,  "sharedManager"));
      v53[0] = _NSConcreteStackBlock;
      v53[1] = 3221225472LL;
      v53[2] = ___postFindAppAlert_block_invoke_2;
      v53[3] = &unk_1001FB500;
      id v54 = v16;
      id v55 = *(id *)(v22 + 32);
      id v16 = v16;
      [v48 presentNotification:v28 completionHandler:v53];

      goto LABEL_38;
    }
  }

const void *_updatePlistForSeenEAProtocols(const void *value)
{
  if (value)
  {
    CFPreferencesSetAppValue(@"OptionalSDKProtocolsShownKey", value, @"com.apple.iapd");
    return (const void *)CFPreferencesSynchronize( @"com.apple.iapd",  kCFPreferencesCurrentUser,  kCFPreferencesAnyHost);
  }

  return value;
}

void ___postFindAppAlert_block_invoke_2(uint64_t a1, int a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects <= 9;
  }
  else {
    BOOL v4 = 1;
  }
  int v5 = !v4;
  if (a2)
  {
    if (v5)
    {
      id v6 = (os_log_s *)*(id *)(gLogObjects + 72);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v6 = (os_log_s *)&_os_log_default;
      id v8 = &_os_log_default;
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) EAName]);
      *(_DWORD *)buf = 138412290;
      __int128 v63 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "User wants to find app for accessory %@",  buf,  0xCu);
    }

    id v50 = *(id *)(a1 + 40);
    __int128 v54 = 0u;
    __int128 v55 = 0u;
    __int128 v56 = 0u;
    __int128 v57 = 0u;
    id obj = [v50 copyExternalAccessoryProtocols];
    id v10 = [obj countByEnumeratingWithState:&v54 objects:buf count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v55;
      CFTypeID v13 = &stru_100200A40;
      uint64_t v14 = 1LL;
      do
      {
        uint64_t v15 = 0LL;
        id v16 = v13;
        do
        {
          if (*(void *)v55 != v12) {
            objc_enumerationMutation(obj);
          }
          id v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"&id%d=%@",  (char *)v15 + v14,  *(void *)(*((void *)&v54 + 1) + 8LL * (void)v15)));
          id v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet URLPathAllowedCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "URLPathAllowedCharacterSet"));
          id v19 = (void *)objc_claimAutoreleasedReturnValue([v17 stringByAddingPercentEncodingWithAllowedCharacters:v18]);

          CFTypeID v13 = (__CFString *)objc_claimAutoreleasedReturnValue(-[__CFString stringByAppendingString:](v16, "stringByAppendingString:", v19));
          uint64_t v15 = (char *)v15 + 1;
          id v16 = v13;
        }

        while (v11 != v15);
        id v11 = [obj countByEnumeratingWithState:&v54 objects:buf count:16];
        uint64_t v14 = (v14 + (_DWORD)v15);
      }

      while (v11);
    }

    else
    {
      CFTypeID v13 = &stru_100200A40;
    }

    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v50 EAFirmwareRevisionActive]);
    uint64_t v21 = objc_claimAutoreleasedReturnValue([v50 EAFirmwareRevisionPending]);
    if (v21)
    {
      uint64_t v22 = (void *)v21;
      id v23 = (void *)objc_claimAutoreleasedReturnValue([v50 EAFirmwareRevisionPending]);
      id v24 = [v23 length];

      if (v24)
      {
        uint64_t v25 = objc_claimAutoreleasedReturnValue([v50 EAFirmwareRevisionPending]);

        uint64_t v20 = (void *)v25;
      }
    }

    uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v50 EAPreferredApp]);
    id v48 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet URLPathAllowedCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "URLPathAllowedCharacterSet"));
    id v52 = (void *)objc_claimAutoreleasedReturnValue([v49 stringByAddingPercentEncodingWithAllowedCharacters:v48]);
    id v47 = (void *)objc_claimAutoreleasedReturnValue([v50 EAName]);
    __int16 v46 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet URLPathAllowedCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "URLPathAllowedCharacterSet"));
    uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v47 stringByAddingPercentEncodingWithAllowedCharacters:v46]);
    int v45 = (void *)objc_claimAutoreleasedReturnValue([v50 EAManufacturer]);
    id v44 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet URLPathAllowedCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "URLPathAllowedCharacterSet"));
    char v51 = (void *)objc_claimAutoreleasedReturnValue([v45 stringByAddingPercentEncodingWithAllowedCharacters:v44]);
    __int16 v43 = (void *)objc_claimAutoreleasedReturnValue([v50 EAModelNumber]);
    uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet URLPathAllowedCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "URLPathAllowedCharacterSet"));
    unsigned int v39 = (void *)objc_claimAutoreleasedReturnValue([v43 stringByAddingPercentEncodingWithAllowedCharacters:v42]);
    id v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet URLPathAllowedCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "URLPathAllowedCharacterSet"));
    uint64_t v38 = v20;
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v20 stringByAddingPercentEncodingWithAllowedCharacters:v40]);
    id v27 = (void *)objc_claimAutoreleasedReturnValue([v50 EAHardwareRevision]);
    __int128 v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet URLPathAllowedCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "URLPathAllowedCharacterSet"));
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v27 stringByAddingPercentEncodingWithAllowedCharacters:v28]);
    id v30 = (void *)objc_claimAutoreleasedReturnValue([v50 EASerialNumber]);
    __int128 v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet URLPathAllowedCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "URLPathAllowedCharacterSet"));
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v30 stringByAddingPercentEncodingWithAllowedCharacters:v31]);
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"itms-apps://?action=accessory-lookup%@&bid=%@&accessoryName=%@&manufacturer=%@&modelNumber=%@&firmwareVersion=%@&hardwareVersion=%@&serialNumber=%@",  v13,  v52,  v41,  v51,  v39,  v26,  v29,  v32));

    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v33));
    if (gLogObjects && gNumLogObjects >= 10)
    {
      __int128 v35 = (os_log_s *)*(id *)(gLogObjects + 72);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int128 v35 = (os_log_s *)&_os_log_default;
      id v36 = &_os_log_default;
    }

    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 v58 = 138412546;
      __int128 v59 = v34;
      __int16 v60 = 2112;
      __int128 v61 = v33;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "opening app store URL = %@ (%@)", v58, 0x16u);
    }

    platform_system_launchURL((uint64_t)v33);
  }

  else
  {
    if (v5)
    {
      id v7 = (os_log_s *)*(id *)(gLogObjects + 72);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v7 = (os_log_s *)&_os_log_default;
      id v37 = &_os_log_default;
    }

    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "User did not approve Find App for Accessory - ignoring",  buf,  2u);
    }
  }

BOOL platform_auth_verifyBAACertificateChain(const void *a1, const void *a2)
{
  return platform_auth_verifyCertificateChain(a1, a2, 0);
}

BOOL platform_auth_verifyCertificateChain(const void *a1, const void *a2, unsigned int a3)
{
  if (a3 >= 5) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = a3;
  }
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  if (!Mutable) {
    return 0LL;
  }
  id v7 = Mutable;
  CFArrayAppendValue(Mutable, a1);
  if (a2) {
    CFArrayAppendValue(v7, a2);
  }
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[MFAACertificateManager sharedManager](&OBJC_CLASS___MFAACertificateManager, "sharedManager"));
  unsigned int v9 = [v8 validateCertificateChain:v7 type:v5 realtime:1 error:0];

  BOOL v10 = v9 == 1;
  CFRelease(v7);
  return v10;
}

id platform_auth_verifyNonceSignature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return platform_auth_verifyNonceSignatureForType(a1, a2, a3, 0xFFFFFFFF);
}

id platform_auth_verifyNonceSignatureForType(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (a4 >= 5) {
    uint64_t v9 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v9 = a4;
  }
  BOOL v10 = (void *)objc_claimAutoreleasedReturnValue(+[MFAACertificateManager sharedManager](&OBJC_CLASS___MFAACertificateManager, "sharedManager"));
  id v11 = [v10 copyParsedCertificateChainInfo:a1 assumeType:v9];
  if (v11)
  {
    id v8 = [v10 verifyNonceSignature:v11 nonce:a2 signature:a3];
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_auth_verifyNonceSignatureForType_cold_1();
    }
    id v8 = 0LL;
  }

  return v8;
}

uint64_t platform_auth_certificateAuthVersionNumber()
{
  return MFAACertificateAuthVersionNumber();
}

id platform_auth_isAppleAccessory(uint64_t a1)
{
  id result = acc_userDefaultsIapd_copyIntegerForKey((uint64_t)@"PretendAccessoryType");
  if (result != (id)1)
  {
    if (result == (id)2) {
      return 0LL;
    }
    else {
      return (id)MFAAIsAppleAccessory(a1);
    }
  }

  return result;
}

uint64_t platform_deviceNotifications_deviceTimeUpdate(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v13[0] = @"kCFACCDeviceNotifications_DeviceTimeUpdate_UnixTime";
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a2));
  v14[0] = v7;
  v13[1] = @"kCFACCDeviceNotifications_DeviceTimeUpdate_TimeZoneOffsetMinutes";
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](&OBJC_CLASS___NSNumber, "numberWithShort:", a3));
  v14[1] = v8;
  _DWORD v13[2] = @"kCFACCDeviceNotifications_DeviceTimeUpdate_DaylightSavingsOffsetMinutes";
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithChar:](&OBJC_CLASS___NSNumber, "numberWithChar:", a4));
  _DWORD v14[2] = v9;
  BOOL v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v14,  v13,  3LL));

  uint64_t v11 = accFeatureHandlers_invokeHandler(a1, 2, (uint64_t)v10);
  return v11;
}

void platform_deviceNotifications_addSubscriber(unsigned int a1, void *a2, __n128 a3)
{
  if (platform_deviceNotifications_addSubscriber_onceToken != -1) {
    dispatch_once(&platform_deviceNotifications_addSubscriber_onceToken, &__block_literal_global_15);
  }
  if (a2)
  {
    BOOL v4 = !_gSubscriberList || a1 > 5;
    if (!v4 && ((0x2Fu >> a1) & 1) != 0)
    {
      uint64_t v5 = dword_10019E35C[a1];
      unsigned int v51 = dword_10019E374[a1];
      p_inst_props = &OBJC_PROTOCOL___ACCVoiceOverXPCClientProtocol.inst_props;
      name = (const __CFString *)kLockdownNotificationDeviceNameChanged;
      a3.n128_u64[0] = 67109378LL;
      __n128 v49 = a3;
      do
      {
        uint64_t v7 = gLogObjects;
        int v8 = gNumLogObjects;
        if (gLogObjects) {
          BOOL v9 = gNumLogObjects < 8;
        }
        else {
          BOOL v9 = 1;
        }
        if (v9)
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)__int128 v54 = v7;
            *(_WORD *)&v54[8] = 1024;
            *(_DWORD *)&void v54[10] = v8;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          }

          id v10 = &_os_log_default;
          uint64_t v11 = (os_log_s *)&_os_log_default;
        }

        else
        {
          uint64_t v11 = (os_log_s *)*(id *)(gLogObjects + 56);
        }

        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          *(void *)__int128 v54 = a2;
          *(_WORD *)&v54[8] = 1024;
          *(_DWORD *)&void v54[10] = v5;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "[#Device Notifications] Adding subscriber %@ for notification type: %{coreacc:ACCDeviceNotification_t}d",  buf,  0x12u);
        }

        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v5));
        id v13 = a2;
        -[__objc2_prop_list lock](p_inst_props[414], "lock");
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([(id)_gSubscriberList objectForKey:v12]);
        if ((v14
           || (uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set")),
               [(id)_gSubscriberList setObject:v14 forKey:v12],
               v14))
          && !objc_msgSend(v14, "count", *(_OWORD *)&v49))
        {
          uint64_t v16 = gLogObjects;
          int v17 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 8)
          {
            id v18 = (os_log_s *)*(id *)(gLogObjects + 56);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)__int128 v54 = v16;
              *(_WORD *)&v54[8] = 1024;
              *(_DWORD *)&void v54[10] = v17;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            }

            id v19 = &_os_log_default;
            id v18 = (os_log_s *)&_os_log_default;
          }

          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)__int128 v54 = v5;
            _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "[#Device Notifications] First endpoint added for %{coreacc:ACCDeviceNotification_t}d, addObservers",  buf,  8u);
          }

          int v15 = 1;
        }

        else
        {
          int v15 = 0;
        }

        objc_msgSend(v14, "addObject:", v13, *(_OWORD *)&v49);
        uint64_t v20 = gLogObjects;
        int v21 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 8)
        {
          uint64_t v22 = (os_log_s *)*(id *)(gLogObjects + 56);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)__int128 v54 = v20;
            *(_WORD *)&v54[8] = 1024;
            *(_DWORD *)&void v54[10] = v21;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          }

          id v23 = &_os_log_default;
          uint64_t v22 = (os_log_s *)&_os_log_default;
        }

        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          id v24 = [v14 count];
          *(_DWORD *)buf = 134218240;
          *(void *)__int128 v54 = v24;
          *(_WORD *)&v54[8] = 1024;
          *(_DWORD *)&void v54[10] = v5;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "[#Device Notifications] There are now %lu subscribers for notification type: %{coreacc:ACCDeviceNotification_t}d",  buf,  0x12u);
        }

        uint64_t v25 = gLogObjects;
        int v26 = gNumLogObjects;
        if (gLogObjects) {
          BOOL v27 = gNumLogObjects <= 7;
        }
        else {
          BOOL v27 = 1;
        }
        int v28 = !v27;
        if (v15)
        {
          if (v28)
          {
            uint64_t v29 = (os_log_s *)*(id *)(gLogObjects + 56);
            p_inst_props = (__objc2_prop_list **)(&OBJC_PROTOCOL___ACCVoiceOverXPCClientProtocol + 56);
          }

          else
          {
            p_inst_props = &OBJC_PROTOCOL___ACCVoiceOverXPCClientProtocol.inst_props;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)__int128 v54 = v25;
              *(_WORD *)&v54[8] = 1024;
              *(_DWORD *)&void v54[10] = v26;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            }

            id v31 = &_os_log_default;
            uint64_t v29 = (os_log_s *)&_os_log_default;
          }

          if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)__int128 v54 = v5;
            _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_INFO,  "[#Device Notifications] Adding observers for notification type: %{coreacc:ACCDeviceNotification_t}d...",  buf,  8u);
          }

          switch((int)v5)
          {
            case 0:
              DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
              CFNotificationCenterAddObserver( DarwinNotifyCenter,  0LL,  (CFNotificationCallback)_deviceNameChanged,  name,  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
              break;
            case 1:
              id v30 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
              uint64_t v36 = objc_claimAutoreleasedReturnValue( [v30 addObserverForName:NSCurrentLocaleDidChangeNotification object:0 queue:0 usingBlock:&__block_literal_global_11]);
              id v37 = (void *)_gLocaleDidChangeObserver;
              _gLocaleDidChangeObserver = v36;

              goto LABEL_75;
            case 2:
              uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
              uint64_t v39 = objc_claimAutoreleasedReturnValue( [v38 addObserverForName:NSSystemClockDidChangeNotification object:0 queue:0 usingBlock:&__block_literal_global_13]);
              id v40 = (void *)_gSystemClockDidChangeObserver;
              _gSystemClockDidChangeObserver = v39;

              uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
              uint64_t v42 = objc_claimAutoreleasedReturnValue( [v41 addObserverForName:NSSystemTimeZoneDidChangeNotification object:0 queue:0 usingBlock:&__block_literal_global_15]);
              __int16 v43 = (void *)_gTimeZoneDidChangeObserver;
              _gTimeZoneDidChangeObserver = v42;

              _setDaylightSavingsTimer();
              break;
            case 3:
              break;
            default:
              uint64_t v34 = gLogObjects;
              int v35 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 8)
              {
                id v30 = *(id *)(gLogObjects + 56);
              }

              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  *(void *)__int128 v54 = v34;
                  *(_WORD *)&v54[8] = 1024;
                  *(_DWORD *)&void v54[10] = v35;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                }

                id v44 = &_os_log_default;
                id v30 = &_os_log_default;
              }

              if (os_log_type_enabled((os_log_t)v30, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)__int128 v54 = v5;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v30,  OS_LOG_TYPE_ERROR,  "[#Device Notifications] Add observers for unknown notification type: %{coreacc:ACCDeviceNotification_t}d!",  buf,  8u);
              }

              goto LABEL_75;
          }
        }

        else
        {
          if (v28)
          {
            id v30 = *(id *)(gLogObjects + 56);
            p_inst_props = (__objc2_prop_list **)(&OBJC_PROTOCOL___ACCVoiceOverXPCClientProtocol + 56);
          }

          else
          {
            p_inst_props = (__objc2_prop_list **)(&OBJC_PROTOCOL___ACCVoiceOverXPCClientProtocol + 56);
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)__int128 v54 = v25;
              *(_WORD *)&v54[8] = 1024;
              *(_DWORD *)&void v54[10] = v26;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            }

            id v33 = &_os_log_default;
            id v30 = &_os_log_default;
          }

          if (os_log_type_enabled((os_log_t)v30, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)__int128 v54 = v5;
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v30,  OS_LOG_TYPE_DEFAULT,  "[#Device Notifications] There is already an observer registered for %{coreacc:ACCDeviceNotification_t}d, s kip adding observers for notification",  buf,  8u);
          }

void __platform_deviceNotifications_addSubscriber_block_invoke(id a1)
{
  id v1 = [&__NSDictionary0__struct mutableCopy];
  id v2 = (void *)_gSubscriberList;
  _gSubscriberList = (uint64_t)v1;

  id v3 = objc_alloc_init(&OBJC_CLASS___NSLock);
  BOOL v4 = (void *)_gSubscriberListLock;
  _gSubscriberListLock = (uint64_t)v3;
}

void _sendUpdateForUUID(const void *a1, int a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 8;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v6 = (os_log_s *)&_os_log_default;
    id v5 = &_os_log_default;
  }

  else
  {
    id v6 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    _sendUpdateForUUID_cold_1((uint64_t)a1, a2, v6);
  }

  if (a1)
  {
    CFRetain(a1);
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    int v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    _DWORD v9[2] = ___sendUpdateForUUID_block_invoke;
    v9[3] = &__block_descriptor_44_e5_v8__0l;
    int v10 = a2;
    v9[4] = a1;
    dispatch_async(v8, v9);
  }

void platform_deviceNotifications_removeSubscriber(signed int a1, void *a2)
{
  if (a2)
  {
    BOOL v2 = !_gSubscriberList || a1 > 5;
    if (!v2 && ((0x2Fu >> a1) & 1) != 0)
    {
      uint64_t v4 = dword_10019E35C[a1];
      unsigned int v31 = dword_10019E374[a1];
      name = (const __CFString *)kLockdownNotificationDeviceNameChanged;
      do
      {
        uint64_t v5 = gLogObjects;
        int v6 = gNumLogObjects;
        if (gLogObjects) {
          BOOL v7 = gNumLogObjects < 8;
        }
        else {
          BOOL v7 = 1;
        }
        if (v7)
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            uint64_t v33 = v5;
            __int16 v34 = 1024;
            int v35 = v6;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          }

          id v8 = &_os_log_default;
          BOOL v9 = (os_log_s *)&_os_log_default;
        }

        else
        {
          BOOL v9 = (os_log_s *)*(id *)(gLogObjects + 56);
        }

        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          uint64_t v33 = (uint64_t)a2;
          __int16 v34 = 1024;
          int v35 = v4;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "[#Device Notifications] Removing subscriber %@ for notification type: %{coreacc:ACCDeviceNotification_t}d",  buf,  0x12u);
        }

        int v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v4));
        id v11 = a2;
        [(id)_gSubscriberListLock lock];
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([(id)_gSubscriberList objectForKey:v10]);
        [v12 removeObject:v11];
        uint64_t v13 = gLogObjects;
        int v14 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 8)
        {
          int v15 = (os_log_s *)*(id *)(gLogObjects + 56);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            uint64_t v33 = v13;
            __int16 v34 = 1024;
            int v35 = v14;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
          }

          id v16 = &_os_log_default;
          int v15 = (os_log_s *)&_os_log_default;
        }

        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          id v17 = [v12 count];
          *(_DWORD *)buf = 134218240;
          uint64_t v33 = (uint64_t)v17;
          __int16 v34 = 1024;
          int v35 = v4;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "[#Device Notifications] There are now %lu subscribers for notification type: %{coreacc:ACCDeviceNotification_t}d",  buf,  0x12u);
        }

        if (v12 && ![v12 count])
        {
          [(id)_gSubscriberList removeObjectForKey:v10];
          uint64_t v18 = gLogObjects;
          int v19 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 8)
          {
            uint64_t v20 = (os_log_s *)*(id *)(gLogObjects + 56);
          }

          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              uint64_t v33 = v18;
              __int16 v34 = 1024;
              int v35 = v19;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            }

            id v21 = &_os_log_default;
            uint64_t v20 = (os_log_s *)&_os_log_default;
          }

          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v33) = v4;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "[#Device Notifications] Removing observers for notification type: %{coreacc:ACCDeviceNotification_t}d...",  buf,  8u);
          }

          switch((int)v4)
          {
            case 0:
              DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
              CFNotificationCenterRemoveObserver(DarwinNotifyCenter, 0LL, name, 0LL);
              break;
            case 1:
              id v23 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
              [v23 removeObserver:_gLocaleDidChangeObserver];
              goto LABEL_52;
            case 2:
              id v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
              [v24 removeObserver:_gSystemClockDidChangeObserver];

              uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
              [v25 removeObserver:_gTimeZoneDidChangeObserver];

              if (_gDaylightSavingsTimerSource)
              {
                dispatch_source_cancel((dispatch_source_t)_gDaylightSavingsTimerSource);
                int v26 = (void *)_gDaylightSavingsTimerSource;
                _gDaylightSavingsTimerSource = 0LL;
              }

              break;
            case 3:
              break;
            default:
              uint64_t v27 = gLogObjects;
              int v28 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 8)
              {
                id v23 = *(id *)(gLogObjects + 56);
              }

              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  uint64_t v33 = v27;
                  __int16 v34 = 1024;
                  int v35 = v28;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                }

                id v29 = &_os_log_default;
                id v23 = &_os_log_default;
              }

              if (os_log_type_enabled((os_log_t)v23, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 67109120;
                LODWORD(v33) = v4;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v23,  OS_LOG_TYPE_ERROR,  "[#Device Notifications] Remove observers for unknown notification type: %{coreacc:ACCDeviceNotification_t}d!",  buf,  8u);
              }

void _deviceNameChanged()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 8;
  }
  else {
    BOOL v0 = 1;
  }
  if (v0)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v2 = (os_log_s *)&_os_log_default;
    id v1 = &_os_log_default;
  }

  else
  {
    BOOL v2 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[#Device Notifications] Device name changed! Sending updates...",  v3,  2u);
  }

  _sendUpdateForNotification(0LL);
}

void ___addObserversForNotification_block_invoke(id a1, NSNotification *a2)
{
  BOOL v2 = a2;
  if (gLogObjects) {
    BOOL v3 = gNumLogObjects < 8;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v5 = (os_log_s *)&_os_log_default;
    id v4 = &_os_log_default;
  }

  else
  {
    uint64_t v5 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v14 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[#Device Notifications] System locale changed! Sending updates...",  v14,  2u);
  }

  if (gLogObjects && gNumLogObjects >= 8)
  {
    int v6 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v6 = (os_log_s *)&_os_log_default;
    id v7 = &_os_log_default;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    ___addObserversForNotification_block_invoke_cold_1((uint64_t)v2, v6, v8, v9, v10, v11, v12, v13);
  }

  _sendUpdateForNotification(1LL);
}

void _sendUpdateForNotification(uint64_t a1)
{
  if (_gSubscriberList)
  {
    [(id)_gSubscriberListLock lock];
    BOOL v2 = (void *)_gSubscriberList;
    BOOL v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a1));
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:v3]);
    id v5 = [v4 copy];

    [(id)_gSubscriberListLock unlock];
    if (v5)
    {
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      __int128 v11 = 0u;
      __int128 v12 = 0u;
      id v6 = v5;
      id v7 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v7)
      {
        id v8 = v7;
        uint64_t v9 = *(void *)v12;
        do
        {
          uint64_t v10 = 0LL;
          do
          {
            if (*(void *)v12 != v9) {
              objc_enumerationMutation(v6);
            }
            _sendUpdateForUUID(*(const void **)(*((void *)&v11 + 1) + 8LL * (void)v10), a1);
            uint64_t v10 = (char *)v10 + 1;
          }

          while (v8 != v10);
          id v8 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
        }

        while (v8);
      }
    }
  }

void ___addObserversForNotification_block_invoke_12(id a1, NSNotification *a2)
{
  BOOL v2 = a2;
  if (gLogObjects) {
    BOOL v3 = gNumLogObjects < 8;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v5 = (os_log_s *)&_os_log_default;
    id v4 = &_os_log_default;
  }

  else
  {
    id v5 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 v14 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[#Device Notifications] System clock changed! Sending updates...",  v14,  2u);
  }

  if (gLogObjects && gNumLogObjects >= 8)
  {
    id v6 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v6 = (os_log_s *)&_os_log_default;
    id v7 = &_os_log_default;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    ___addObserversForNotification_block_invoke_cold_1((uint64_t)v2, v6, v8, v9, v10, v11, v12, v13);
  }

  _sendUpdateForNotification(2LL);
  _setDaylightSavingsTimer();
}

void _setDaylightSavingsTimer()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 28;
  }
  else {
    BOOL v0 = 1;
  }
  if (v0)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v2 = (os_log_s *)&_os_log_default;
    id v1 = &_os_log_default;
  }

  else
  {
    BOOL v2 = (os_log_s *)*(id *)(gLogObjects + 216);
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimeZone localTimeZone](&OBJC_CLASS___NSTimeZone, "localTimeZone"));
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 name]);
    int v21 = 138412290;
    uint64_t v22 = (uint64_t)v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[#Device Notifications] Updating DST timer for timezone: %@",  (uint8_t *)&v21,  0xCu);
  }

  if (_gDaylightSavingsTimerSource) {
    dispatch_source_set_timer( (dispatch_source_t)_gDaylightSavingsTimerSource,  0xFFFFFFFFFFFFFFFFLL,  0xFFFFFFFFFFFFFFFFLL,  0x3B9ACA00uLL);
  }
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimeZone localTimeZone](&OBJC_CLASS___NSTimeZone, "localTimeZone"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 nextDaylightSavingTimeTransition]);

  if (v6)
  {
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v6 timeIntervalSinceDate:v7];
    uint64_t v9 = (uint64_t)v8;
    if (gLogObjects && gNumLogObjects >= 8)
    {
      uint64_t v10 = (os_log_s *)*(id *)(gLogObjects + 56);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      uint64_t v10 = (os_log_s *)&_os_log_default;
      id v11 = &_os_log_default;
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      int v21 = 134217984;
      uint64_t v22 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "[#Device Notifications] Setting timer for next daylight savings time event in %ld seconds...",  (uint8_t *)&v21,  0xCu);
    }

    if (v9 < 1)
    {
      if (gLogObjects && gNumLogObjects >= 8)
      {
        __int128 v14 = (os_log_s *)*(id *)(gLogObjects + 56);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        __int128 v14 = (os_log_s *)&_os_log_default;
        id v20 = &_os_log_default;
      }

      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        int v21 = 134218498;
        uint64_t v22 = v9;
        __int16 v23 = 2112;
        id v24 = v6;
        __int16 v25 = 2112;
        int v26 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "[#Device Notifications] WARNING: secondsUntilNextDSTTransition was %ld second(s)! nextDSTTransition: %@, currentDate: %@",  (uint8_t *)&v21,  0x20u);
      }
    }

    else
    {
      uint64_t v12 = (dispatch_source_s *)_gDaylightSavingsTimerSource;
      if (_gDaylightSavingsTimerSource)
      {
        dispatch_time_t v13 = dispatch_time(0LL, 1000000000 * v9);
        dispatch_source_set_timer(v12, v13, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
      }

      else
      {
        dispatch_source_t v16 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, &_dispatch_main_q);
        id v17 = (void *)_gDaylightSavingsTimerSource;
        _gDaylightSavingsTimerSource = (uint64_t)v16;

        dispatch_source_set_event_handler((dispatch_source_t)_gDaylightSavingsTimerSource, &__block_literal_global_18_0);
        uint64_t v18 = (dispatch_source_s *)_gDaylightSavingsTimerSource;
        dispatch_time_t v19 = dispatch_time(0LL, 1000000000 * v9);
        dispatch_source_set_timer(v18, v19, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
        dispatch_resume((dispatch_object_t)_gDaylightSavingsTimerSource);
      }
    }
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 28)
    {
      id v7 = (os_log_s *)*(id *)(gLogObjects + 216);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v7 = (os_log_s *)&_os_log_default;
      id v15 = &_os_log_default;
    }

    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v21) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[#Device Notifications] Device does not observe daylight savings time, not setting DST timer.",  (uint8_t *)&v21,  2u);
    }
  }
}

void ___addObserversForNotification_block_invoke_14(id a1, NSNotification *a2)
{
  BOOL v2 = a2;
  if (gLogObjects) {
    BOOL v3 = gNumLogObjects < 8;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v5 = (os_log_s *)&_os_log_default;
    id v4 = &_os_log_default;
  }

  else
  {
    id v5 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 v14 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[#Device Notifications] System time zone changed! Sending updates...",  v14,  2u);
  }

  if (gLogObjects && gNumLogObjects >= 8)
  {
    id v6 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v6 = (os_log_s *)&_os_log_default;
    id v7 = &_os_log_default;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    ___addObserversForNotification_block_invoke_cold_1((uint64_t)v2, v6, v8, v9, v10, v11, v12, v13);
  }

  _sendUpdateForNotification(2LL);
  _setDaylightSavingsTimer();
}

void ___setDaylightSavingsTimer_block_invoke(id a1)
{
  if (gLogObjects) {
    BOOL v1 = gNumLogObjects < 8;
  }
  else {
    BOOL v1 = 1;
  }
  if (v1)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v3 = (os_log_s *)&_os_log_default;
    id v2 = &_os_log_default;
  }

  else
  {
    BOOL v3 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[#Device Notifications] Daylight savings time changed! Sending time update...",  v4,  2u);
  }

  _sendUpdateForNotification(2LL);
  _setDaylightSavingsTimer();
}

void ___sendUpdateForUUID_block_invoke(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      id v2 = platform_systemInfo_copySystemName();
      accFeatureHandlers_invokeHandler(*(const void **)(a1 + 32), 0, (uint64_t)v2);
      if (v2) {
        CFRelease(v2);
      }
      break;
    case 1:
      BOOL v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale preferredLanguages](&OBJC_CLASS___NSLocale, "preferredLanguages"));
      id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectAtIndex:0]);
      id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale localeWithLocaleIdentifier:](&OBJC_CLASS___NSLocale, "localeWithLocaleIdentifier:", v4));
      id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 languageCode]);

      accFeatureHandlers_invokeHandler(*(const void **)(a1 + 32), 1, (uint64_t)v6);
      break;
    case 2:
      id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v7 timeIntervalSince1970];
      uint64_t v9 = (unint64_t)v8;

      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimeZone localTimeZone](&OBJC_CLASS___NSTimeZone, "localTimeZone"));
      uint64_t v11 = (uint64_t)[v10 secondsFromGMT];
      unint64_t v12 = ((unsigned __int128)(v11 * (__int128)(uint64_t)0x8888888888888889LL) >> 64) + v11;
      int v13 = (v12 >> 63) + (v12 >> 5);

      __int128 v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimeZone localTimeZone](&OBJC_CLASS___NSTimeZone, "localTimeZone"));
      [v14 daylightSavingTimeOffset];
      unint64_t v16 = ((unsigned __int128)((uint64_t)v15 * (__int128)(uint64_t)0x8888888888888889LL) >> 64) + (uint64_t)v15;
      int v17 = (v16 >> 63) + (v16 >> 5);

      platform_deviceNotifications_deviceTimeUpdate( *(const void **)(a1 + 32),  v9,  (__int16)v13,  (char)v17);
      break;
    case 3:
      accFeatureHandlers_invokeHandler(*(const void **)(a1 + 32), 3, 0LL);
      break;
    default:
      break;
  }

  uint64_t v18 = *(const void **)(a1 + 32);
  if (v18) {
    CFRelease(v18);
  }
}

uint64_t acc_protocolParser_iAP1_create(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  if (*a1) {
    return 0LL;
  }
  id v2 = calloc(1uLL, 0x18uLL);
  *a1 = v2;
  if (!v2) {
    return 0LL;
  }
  *(_DWORD *)id v2 = 0;
  v2[2] = 0;
  *((void *)v2 + 1) = 0LL;
  v2[8] = 0;
  uint64_t v3 = 1LL;
  *((_BYTE *)v2 + 1_Block_object_dispose((const void *)(v9 - 64), 8) = 0;
  return v3;
}

BOOL acc_protocolParser_iAP1_reset(uint64_t a1)
{
  if (a1)
  {
    *(_DWORD *)a1 = 0;
    *(_WORD *)(a1 + 4) = 0;
    *(void *)(a1 + _Block_object_dispose((const void *)(v9 - 64), 8) = 0LL;
    *(_WORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 1_Block_object_dispose((const void *)(v9 - 64), 8) = 0;
  }

  return a1 != 0;
}

void acc_protocolParser_iAP1_run(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  if (*(_DWORD *)a2 == 3)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    int v6 = *(_DWORD *)v5;
    switch(*(_DWORD *)v5)
    {
      case 0:
        if (gLogObjects) {
          BOOL v8 = gNumLogObjects < 16;
        }
        else {
          BOOL v8 = 1;
        }
        if (v8)
        {
          uint64_t v18 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        else
        {
          uint64_t v18 = *(os_log_s **)(gLogObjects + 120);
        }

        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP1_run_cold_3();
        }
        int v9 = *a3 == 85;
        goto LABEL_132;
      case 1:
        if (gLogObjects) {
          BOOL v10 = gNumLogObjects < 16;
        }
        else {
          BOOL v10 = 1;
        }
        if (v10)
        {
          dispatch_time_t v19 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        else
        {
          dispatch_time_t v19 = *(os_log_s **)(gLogObjects + 120);
        }

        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP1_run_cold_6();
        }
        unsigned int v20 = *a3;
        if (!*a3)
        {
          int v9 = 2;
          goto LABEL_116;
        }

        if (v20 == 1 || v20 > 0xFC) {
          goto LABEL_83;
        }
        *(_WORD *)(v5 + 16) = v20;
        int v21 = (os_log_s *)logObjectForModule_10();
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_113;
        }
        goto LABEL_112;
      case 2:
        if (gLogObjects) {
          BOOL v11 = gNumLogObjects < 16;
        }
        else {
          BOOL v11 = 1;
        }
        if (v11)
        {
          int v28 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        else
        {
          int v28 = *(os_log_s **)(gLogObjects + 120);
        }

        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP1_run_cold_8();
        }
        *(_WORD *)(v5 + 16) = *a3 << 8;
        *(_BYTE *)(v5 + 18) += *a3;
        int v9 = 3;
        goto LABEL_132;
      case 3:
        if (gLogObjects) {
          BOOL v12 = gNumLogObjects < 16;
        }
        else {
          BOOL v12 = 1;
        }
        if (v12)
        {
          id v29 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        else
        {
          id v29 = *(os_log_s **)(gLogObjects + 120);
        }

        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
          acc_protocolParser_iAP1_run_cold_11();
        }
        __int16 v30 = *(_WORD *)(v5 + 16) | *a3;
        *(_WORD *)(v5 + 16) = v30;
        if ((unsigned __int16)(v30 + 6) >= 8u)
        {
          int v21 = (os_log_s *)logObjectForModule_10();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
LABEL_112:
          }
            acc_protocolParser_iAP1_run_cold_5(v5 + 16, v21, v22, v23, v24, v25, v26, v27);
LABEL_113:
          int v9 = 4;
        }

        else
        {
LABEL_83:
          int v9 = 12;
        }

LABEL_132:
        *(_DWORD *)uint64_t v5 = v9;
        break;
      default:
        int v9 = *(_DWORD *)v5;
        goto LABEL_117;
    }
  }

id __receivedNotification(uint64_t a1, void *a2)
{
  return [a2 update];
}

void sub_10008B95C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10008B9E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

BOOL mfi4Auth_protocol_supportsRelay(uint64_t a1)
{
  return *(void *)(a1 + 72) != 0LL;
}

uint64_t loggingProtocol_handleMessage(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = 0LL;
  if (a1 && a3)
  {
    int v7 = *(_DWORD *)(a3 + 8);
    if (v7 != 2)
    {
      if (v7 == 1) {
        return 1LL;
      }
      if (!v7 && a2 >= 2 && __rev16(*a1) == 2)
      {
        if (a2 >= 5)
        {
          if (*((_BYTE *)a1 + 4) == 1)
          {
            uint64_t CurrentTimeInNanoseconds = loggingProtocol_getCurrentTimeInNanoseconds();
            if (a2 >= 0x1E)
            {
              int v9 = 0LL;
              uint64_t v10 = *((unsigned __int8 *)a1 + 29);
              if (!*((_BYTE *)a1 + 29))
              {
                BOOL v11 = 0LL;
                BOOL v12 = 0LL;
                goto LABEL_156;
              }

              BOOL v11 = 0LL;
              BOOL v12 = 0LL;
              if ((int)v10 + 30 > a2)
              {
LABEL_156:
                free(v9);
                free(v11);
                free(v12);
                return 0LL;
              }

              uint64_t v13 = CurrentTimeInNanoseconds;
              unint64_t v14 = *(void *)((char *)a1 + 5);
              __int128 v160 = *(_OWORD *)((char *)a1 + 13);
              int v9 = strndup((const char *)a1 + 30, v10 - 1);
              uint64_t v15 = v10 + 30;
              if ((int)v10 + 30 < a2)
              {
                BOOL v11 = 0LL;
                uint64_t v16 = *((unsigned __int8 *)a1 + v15);
                if (!*((_BYTE *)a1 + v15) || (unsigned int v17 = v10 + 31, v16 + v17 > a2))
                {
                  BOOL v12 = 0LL;
                  goto LABEL_156;
                }

                BOOL v11 = strndup((const char *)a1 + v17, v16 - 1);
                unsigned int v18 = v17 + v16;
                if (v17 + v16 < a2)
                {
                  BOOL v12 = 0LL;
                  uint64_t v19 = *((unsigned __int8 *)a1 + v18);
                  if (*((_BYTE *)a1 + v18))
                  {
                    unsigned int v20 = v18 + 1;
                    if (v19 + v18 + 1 <= a2)
                    {
                      int v21 = strndup((const char *)a1 + v20, v19 - 1);
                      BOOL v12 = v21;
                      if (v20 + (_DWORD)v19 == a2 && v9 && v11 && v21)
                      {
                        *(void *)(a3 + 40) = v13;
                        *(void *)(a3 + 4_Block_object_dispose((const void *)(v9 - 64), 8) = bswap64(v14);
                        *(_BYTE *)(a3 + 56) = 1;
                        *(_OWORD *)(a3 + 57) = v160;
                        free(*(void **)(a3 + 80));
                        *(void *)(a3 + 80) = v9;
                        free(*(void **)(a3 + 96));
                        *(void *)(a3 + 96) = v11;
                        free(*(void **)(a3 + 88));
                        *(void *)(a3 + 8_Block_object_dispose((const void *)(v9 - 64), 8) = v12;
                        char v163 = 1;
                        if (!gLogObjects) {
                          goto LABEL_41;
                        }
                        if (gNumLogObjects >= 53)
                        {
                          uint64_t v22 = *(os_log_s **)(gLogObjects + 416);
                        }

                        else
                        {
LABEL_41:
                          uint64_t v22 = (os_log_s *)&_os_log_default;
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                            platform_connectionInfo_configStreamCategoryListReady_cold_1();
                          }
                        }

                        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
                          loggingProtocol_handleMessage_cold_1();
                        }
                        uint64_t v37 = *(void *)(a3 + 32);
                        if (v37)
                        {
                          if (*(void *)v37)
                          {
                            EndpointWithUUID = acc_manager_getEndpointWithUUID(*(const void **)v37);
                            if (EndpointWithUUID)
                            {
                              uint64_t v39 = EndpointWithUUID[7];
                              if (v39)
                              {
                                id v40 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  *(dispatch_queue_t *)(v39 + 24));
                                *(void *)(v37 + 72) = v40;
                                *(void *)&__int128 handler = _NSConcreteStackBlock;
                                *((void *)&handler + 1) = 0x40000000LL;
                                *(void *)__int128 v165 = __handleMessage_sessionSync_block_invoke;
                                *(void *)&v165[8] = &__block_descriptor_tmp_5;
                                *(void *)&v165[16] = a3;
                                dispatch_source_set_event_handler(v40, &handler);
                                uint64_t v41 = *(dispatch_source_s **)(v37 + 72);
                                dispatch_time_t v42 = dispatch_time(0LL, 5000000000LL);
                                dispatch_source_set_timer(v41, v42, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
                                dispatch_activate(*(dispatch_object_t *)(v37 + 72));
                                iap2_sessionLog_writeSessionSyncToFile(a3);
                                return 1LL;
                              }
                            }
                          }
                        }
                      }
                    }
                  }

                  goto LABEL_156;
                }

                goto LABEL_155;
              }

LABEL_154:
              BOOL v11 = 0LL;
LABEL_155:
              BOOL v12 = 0LL;
              goto LABEL_156;
            }
          }

          else
          {
            LOBYTE(v166[0]) = 1;
            loggingProtocol_sendMessage(3, (uint64_t)v166, a3);
          }
        }

        int v9 = 0LL;
        goto LABEL_154;
      }

      return 0LL;
    }

    if (a2 < 2) {
      return 0LL;
    }
    uint64_t v3 = 0LL;
    switch(__rev16(*a1))
    {
      case 0u:
        *(void *)&v165[32] = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&__int128 v23 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)__int128 v165 = v23;
        *(_OWORD *)&v165[16] = v23;
        __int128 handler = v23;
        unsigned int v24 = bswap32(*((_DWORD *)a1 + 1));
        uint64_t v25 = *(void *)(a3 + 32);
        int v27 = *(_DWORD *)(v25 + 16);
        int v26 = *(_DWORD *)(v25 + 20);
        if (v27 == v26 || v24 - v27 > v26 + ~v27)
        {
          id v29 = 0LL;
          __int16 v30 = 0LL;
          unsigned int v31 = 0LL;
          goto LABEL_136;
        }

        if (a2 <= 0x10) {
          goto LABEL_160;
        }
        uint64_t v3 = 0LL;
        id v29 = 0LL;
        if (a2 < 0x12)
        {
          __int16 v30 = 0LL;
          unsigned int v31 = 0LL;
        }

        else
        {
          __int16 v30 = 0LL;
          unsigned int v31 = 0LL;
          uint64_t v32 = *((unsigned __int8 *)a1 + 17);
          if ((int)v32 + 18 > a2)
          {
LABEL_160:
            id v29 = 0LL;
          }

          else
          {
            int v159 = *((unsigned __int8 *)a1 + 16);
            unsigned int v161 = v24;
            unint64_t v33 = *((void *)a1 + 1);
            id v29 = strndup((const char *)a1 + 18, v32 - 1);
            uint64_t v34 = v32 + 19;
            if ((int)v32 + 19 <= a2)
            {
              uint64_t v35 = *((unsigned __int8 *)a1 + v32 + 18);
              unsigned int v36 = v34 + v35;
              if ((int)v34 + (int)v35 <= a2)
              {
                __int16 v30 = strndup((const char *)a1 + v34, v35 - 1);
                if (v36 >= a2) {
                  unsigned int v31 = 0LL;
                }
                else {
                  unsigned int v31 = strndup((const char *)a1 + v36, (unsigned __int16)(a2 - v36) - 1LL);
                }
                uint64_t v3 = 0LL;
                if (v29 && v30)
                {
                  unint64_t v97 = *(void *)(a3 + 40) + bswap64(v33) - *(void *)(a3 + 48);
                  LODWORD(handler) = v161;
                  *((void *)&handler + 1) = v97;
                  *(_DWORD *)__int128 v165 = v159;
                  v165[4] = v32;
                  *(void *)&v165[8] = v29;
                  v165[16] = v35;
                  *(void *)&v165[24] = v30;
                  *(void *)&v165[32] = v31;
                  iap2_sessionLog_writeLogEntryToFile(&handler, a3);
LABEL_136:
                  uint64_t v3 = 1LL;
                  goto LABEL_137;
                }

                goto LABEL_137;
              }
            }
          }

          __int16 v30 = 0LL;
          unsigned int v31 = 0LL;
          uint64_t v3 = 0LL;
        }

      if (++v65 == 19) {
        goto LABEL_155;
      }
    }
  }

  unint64_t v33 = v129;
  if ((int)valuePtr >= 1)
  {
    uint64_t v118 = v28;
    __int16 v119 = v2;
    unsigned int v49 = 0LL;
    __int128 bytes = v46;
    do
    {
      uint64_t v50 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v49);
      unint64_t v51 = (const __CFNumber *)CFDictionaryGetValue(v50, @"PersistentID");
      uint64_t v132 = 0LL;
      if (v51 && CFNumberGetValue(v51, kCFNumberSInt64Type, &v132))
      {
        *(void *)int v46 = bswap64(v132);
      }

      else
      {
        unsigned int v52 = gLogObjects;
        uint64_t v53 = v5;
        uint64_t v54 = *((_DWORD *)v5 + 708);
        if (gLogObjects && v54 >= 32)
        {
          unsigned __int16 v55 = *(os_log_s **)(gLogObjects + 248);
        }

        else
        {
          unsigned __int16 v55 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)&uint8_t buf[4] = v52;
            *(_WORD *)&uint8_t buf[12] = 1024;
            *(_DWORD *)&uint8_t buf[14] = v54;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            unsigned __int16 v55 = (os_log_s *)&_os_log_default;
          }
        }

        if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
        {
          unsigned int v56 = valuePtr;
          unsigned int v57 = obfuscatedPointer((uint64_t)v46);
          unsigned int v58 = *((_DWORD *)v129 + 23);
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&uint8_t buf[4] = v49;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v56;
          *(_WORD *)&uint8_t buf[14] = 2048;
          *(void *)&uint8_t buf[16] = v57;
          *(_WORD *)&uint8_t buf[24] = 1024;
          *(_DWORD *)&buf[26] = v58;
          *(_WORD *)&buf[30] = 2112;
          *(void *)&uint64_t v134 = v50;
          _os_log_error_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_ERROR,  "#PlaybackQueueList fill in pid list, failed to retrieve pid from item: i=%d / %d, p=%p infoMask=0x%x item=%@",  buf,  0x28u);
        }

        *(void *)int v46 = 0LL;
        uint64_t v5 = v53;
        unint64_t v33 = v129;
      }

      ++v49;
      v46 += 8;
    }

    while (v49 < (int)valuePtr);
    id v77 = 1;
    id v2 = v119;
    id v4 = &startLogsNotificationObservers;
    goto LABEL_166;
  }

  id v77 = 1;
  uint64_t v45 = v124;
LABEL_167:
  if (v33[120])
  {
    TransferEntry = iap2_sessionFileTransfer_findTransferEntry((unint64_t)v2, v33[121]);
    if (TransferEntry)
    {
      int v79 = (unsigned __int8 *)TransferEntry;
      unint64_t v80 = *(void *)(TransferEntry + 8);
      if (v80)
      {
        BOOL v128 = v77;
        unint64_t v81 = v28;
        __int16 v82 = v4[353];
        uint64_t v83 = *((_DWORD *)v5 + 708);
        if (v82 && v83 >= 32)
        {
          size_t v84 = *(os_log_s **)(v82 + 248);
        }

        else
        {
          size_t v84 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)&uint8_t buf[4] = v82;
            *(_WORD *)&uint8_t buf[12] = 1024;
            *(_DWORD *)&uint8_t buf[14] = v83;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            unint64_t v80 = *((void *)v79 + 1);
          }
        }

        if (os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
        {
          unsigned int v85 = *v79;
          unsigned int v86 = *(unsigned __int8 *)(v80 + 109);
          BOOL v87 = *((_DWORD *)v79 + 1);
          unsigned int v88 = *(unsigned __int16 *)(v80 + 112);
          id v89 = *(_DWORD *)(v80 + 104);
          *(_DWORD *)buf = 67110144;
          *(_DWORD *)&uint8_t buf[4] = v85;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v86;
          *(_WORD *)&uint8_t buf[14] = 1024;
          *(_DWORD *)&uint8_t buf[16] = v87;
          *(_WORD *)&_BYTE buf[20] = 1024;
          *(_DWORD *)&buf[22] = v88;
          *(_WORD *)&buf[26] = 1024;
          *(_DWORD *)&buf[28] = v89;
          _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_INFO,  "#PlaybackQueueList cancel previous transfer: id=%d(%d) type=%d(%d) state=%d",  buf,  0x20u);
          unint64_t v80 = *((void *)v79 + 1);
        }

        uint64_t v45 = v124;
        int v28 = v81;
        id v77 = v128;
        _cancelPendingTransfer_0(v80);
      }
    }

    unint64_t v33 = v129;
    *((_WORD *)v129 + 60) = 0;
  }

  if (iAP2FileTransferAllocateBufferID(*(void *)(v2[4] + 24), SessionForService, v33 + 121))
  {
    bytesa = v46;
    v33[120] = 1;
    uint64_t v90 = malloc(0x130uLL);
    if (v90)
    {
      int v91 = (uint64_t)v90;
      iAP2FileTransferCreate( *(unsigned __int8 **)(v2[4] + 24),  SessionForService,  v33[121],  0LL,  0LL,  0,  (uint64_t)v90);
      iAP2FileTransferTypeData(v91, v28, 0LL);
      int v92 = iap2_sessionFileTransfer_addTransferForFeature((uint64_t)v2, 14, v91, 0LL);
      uint64_t v93 = v4[353];
      if (v93) {
        int v94 = *((_DWORD *)v5 + 708) <= 31;
      }
      else {
        int v94 = 1;
      }
      int v95 = !v94;
      if (v92)
      {
        if (v95)
        {
          id v96 = *(os_log_s **)(v93 + 248);
        }

        else
        {
          id v96 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v96, OS_LOG_TYPE_INFO))
        {
          id v100 = *(unsigned __int8 *)(v91 + 109);
          id v101 = *(unsigned __int16 *)(v91 + 112);
          uint64_t v102 = *(_DWORD *)(v91 + 104);
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)&uint8_t buf[4] = v100;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v101;
          *(_WORD *)&uint8_t buf[14] = 1024;
          *(_DWORD *)&uint8_t buf[16] = v102;
          _os_log_impl( (void *)&_mh_execute_header,  v96,  OS_LOG_TYPE_INFO,  "#PlaybackQueueList added transfer for feature and set type: id=%d type=%d state=%d",  buf,  0x14u);
        }

        uint64_t v103 = (const void *)*((void *)v129 + 16);
        if (v103)
        {
          CFRelease(v103);
          *((void *)v129 + 16) = 0LL;
        }

        uint64_t v104 = v77 ^ 1;
        if (!bytesa) {
          uint64_t v104 = 1;
        }
        if ((v104 & 1) != 0) {
          uint64_t v105 = 0LL;
        }
        else {
          uint64_t v105 = CFDataCreateWithBytesNoCopy(kCFAllocatorDefault, bytesa, lengtha, kCFAllocatorDefault);
        }
        *((void *)v129 + 16) = v105;
        v129[122] = v28;
        if ((_sendPBQTransferTypeAndAvailability(v2, v28, length_4, v45 != 0, (_BYTE)v130 != 0) & 1) == 0)
        {
          uint64_t v106 = v4[353];
          if (v106 && *((int *)v5 + 708) >= 32)
          {
            uint64_t v107 = *(os_log_s **)(v106 + 248);
          }

          else
          {
            uint64_t v107 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR)) {
            iap2_nowPlaying_playbackQueueListInfoResponseHandler_cold_7();
          }
          iAP2FileTransferCancel(v91);
        }

        return 1LL;
      }

      if (v95)
      {
        id v99 = *(os_log_s **)(v93 + 248);
      }

      else
      {
        id v99 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR)) {
        iap2_nowPlaying_playbackQueueListInfoResponseHandler_cold_10();
      }
      free((void *)v91);
      uint64_t v76 = 1LL;
    }

    else
    {
      uint64_t v76 = 0LL;
    }

    int v46 = bytesa;
    if (!bytesa) {
      return v76;
    }
LABEL_217:
    free(v46);
    return v76;
  }

  unint64_t v97 = v4[353];
  if (v97 && *((int *)v5 + 708) >= 32)
  {
    unint64_t v98 = *(os_log_s **)(v97 + 248);
  }

  else
  {
    unint64_t v98 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR)) {
    iap2_nowPlaying_playbackQueueListInfoResponseHandler_cold_12();
  }
  uint64_t v76 = 1LL;
  if (v46) {
    goto LABEL_217;
  }
  return v76;
}

LABEL_137:
        free(v29);
        free(v30);
        int v94 = v31;
LABEL_142:
        free(v94);
        return v3;
      case 1u:
        v166[0] = 0LL;
        v166[1] = 0LL;
        *(void *)&v165[16] = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&__int128 v43 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v43 + 1) = 0xAAAAAAAAAAAAAAAALL;
        __int128 handler = v43;
        *(_OWORD *)__int128 v165 = v43;
        if (*(_OWORD *)(a3 + 57) == 0LL)
        {
          id v44 = 0LL;
          goto LABEL_140;
        }

        id v44 = 0LL;
        uint64_t v45 = *(void *)(a3 + 32);
        int v46 = *(_DWORD *)(v45 + 16);
        int v47 = *(_DWORD *)(v45 + 20);
        uint64_t v3 = 1LL;
        if (v46 == v47) {
          goto LABEL_141;
        }
        unsigned int v48 = bswap32(*((_DWORD *)a1 + 1));
        if (v48 - v46 > v47 + ~v46) {
          goto LABEL_141;
        }
        if (a2 <= 0x10) {
          goto LABEL_150;
        }
        uint64_t v3 = 0LL;
        id v44 = 0LL;
        if (a2 < 0x15) {
          goto LABEL_141;
        }
        unsigned int v49 = *((unsigned __int8 *)a1 + 16);
        if (v49 > 1) {
          goto LABEL_141;
        }
        if (a2 == 21 || (uint64_t v50 = *((unsigned __int8 *)a1 + 21), 8 * (_DWORD)v50 + 22 != a2))
        {
LABEL_150:
          id v44 = 0LL;
        }

        else
        {
          unint64_t v51 = *((void *)a1 + 1);
          unsigned int v52 = *(_DWORD *)((char *)a1 + 17);
          if (!*((_BYTE *)a1 + 21))
          {
            id v44 = 0LL;
LABEL_139:
            unint64_t v98 = *(void *)(a3 + 40) + bswap64(v51) - *(void *)(a3 + 48);
            LODWORD(handler) = v48;
            *((void *)&handler + 1) = v98;
            *(_DWORD *)__int128 v165 = v49;
            *(_DWORD *)&v165[4] = bswap32(v52);
            v165[8] = v50;
            *(void *)&v165[16] = v44;
            iap2_sessionLog_writeIndexBasedLogEntryToFile(&handler, a3);
LABEL_140:
            uint64_t v3 = 1LL;
            goto LABEL_141;
          }

          uint64_t v53 = (char *)malloc(8 * v50);
          id v44 = v53;
          if (v53)
          {
            uint64_t v54 = 0LL;
            unsigned __int16 v55 = 11;
            do
            {
              *(void *)&v53[v54] = bswap64(*(void *)&a1[v55]);
              v55 += 4;
              v54 += 8LL;
            }

            while (8 * v50 != v54);
            goto LABEL_139;
          }
        }

        uint64_t v3 = 0LL;
LABEL_141:
        int v94 = v44;
        goto LABEL_142;
      case 6u:
        if (a2 != 12) {
          return 0LL;
        }
        unsigned int v56 = bswap32(*((_DWORD *)a1 + 1));
        unsigned int v57 = bswap32(*((_DWORD *)a1 + 2));
        unsigned int v58 = v57 + 1;
        uint64_t v59 = *(void *)(a3 + 32);
        int v60 = *(_DWORD *)(v59 + 36);
        if (v57 + 1 != *(_DWORD *)(v59 + 40)
          || ((v61 = v57 - v60, v56 != v60) ? (BOOL v62 = v56 - v60 > v61) : (BOOL v62 = 1), v62))
        {
          *(_BYTE *)(v59 + 9) = 1;
        }

        *(_DWORD *)(v59 + 32) = v60;
        *(_DWORD *)(v59 + 36) = v56;
        *(_DWORD *)(v59 + 40) = v58;
        logFetcher_processAvailabilityUpdate(a3);
        return 1LL;
      case 8u:
        logFetcher_performFetch(a3);
        return 1LL;
      case 9u:
        if (*(_BYTE *)(a3 + 112))
        {
          id v101 = (os_log_s *)logObjectForModule_15();
          if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR)) {
            loggingProtocol_handleMessage_cold_7(v101, v102, v103, v104, v105, v106, v107, v108);
          }
          return 0LL;
        }

        if (a2 < bswap32(a1[1]) >> 16)
        {
          uint64_t v109 = (os_log_s *)logObjectForModule_15();
          if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR)) {
            loggingProtocol_handleMessage_cold_3();
          }
          return 0LL;
        }

        unsigned int v63 = bswap32(*((_DWORD *)a1 + 2));
        if (v63 - 524289 <= 0xFFF7FFFF)
        {
          id v110 = (os_log_s *)logObjectForModule_15();
          if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR)) {
            loggingProtocol_handleMessage_cold_4();
          }
          return 0LL;
        }

        int v64 = *((unsigned __int8 *)a1 + 28);
        if (*((_BYTE *)a1 + 28))
        {
          __int16 v111 = (os_log_s *)logObjectForModule_15();
          if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR)) {
            loggingProtocol_handleMessage_cold_6(v111, v112, v113, v114, v115, v116, v117, v118);
          }
          return 0LL;
        }

        unsigned int v65 = *((_DWORD *)a1 + 1);
        unint64_t v66 = *(void *)(a1 + 6);
        unint64_t v67 = *(void *)(a1 + 10);
        if (gLogObjects && gNumLogObjects >= 53)
        {
          BOOL v68 = *(os_log_s **)(gLogObjects + 416);
        }

        else
        {
          BOOL v68 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        int v92 = bswap32(v65);
        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(handler) = 67110144;
          DWORD1(handler) = v92;
          WORD4(handler) = 1024;
          *(_DWORD *)((char *)&handler + 10) = v63;
          HIWORD(handler) = 2048;
          *(void *)__int128 v165 = bswap64(v66);
          *(_WORD *)&v165[8] = 2048;
          *(void *)&v165[10] = bswap64(v67);
          *(_WORD *)&v165[18] = 1024;
          *(_DWORD *)&v165[20] = v64;
          uint64_t v93 = "BinaryLogNotification received. LogFileID: %u, FileLen: %u, TimeStampStart: %llu, TimeStampEnd: %llu, FilePriority: %u";
          goto LABEL_149;
        }

        goto LABEL_115;
      case 0xBu:
        if (!*(_BYTE *)(a3 + 104))
        {
          __int16 v119 = (os_log_s *)logObjectForModule_15();
          if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR)) {
            loggingProtocol_handleMessage_cold_8(v119, v120, v121, v122, v123, v124, v125, v126);
          }
          return 0LL;
        }

        if (a2 < bswap32(a1[1]) >> 16)
        {
          __int16 v127 = (os_log_s *)logObjectForModule_15();
          if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR)) {
            loggingProtocol_handleMessage_cold_9();
          }
          return 0LL;
        }

        unsigned int v69 = bswap32(*((_DWORD *)a1 + 2));
        if (v69 - 524289 <= 0xFFF7FFFF)
        {
          BOOL v128 = (os_log_s *)logObjectForModule_15();
          if (os_log_type_enabled(v128, OS_LOG_TYPE_ERROR)) {
            loggingProtocol_handleMessage_cold_10();
          }
          return 0LL;
        }

        int v64 = *((unsigned __int8 *)a1 + 28);
        if (*(_DWORD *)(a3 + 108) != v64)
        {
          CFNumberRef v129 = (os_log_s *)logObjectForModule_15();
          if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR)) {
            loggingProtocol_handleMessage_cold_12(v129, v130, v131, v132, v133, v134, v135, v136);
          }
          return 0LL;
        }

        unsigned int v70 = *((_DWORD *)a1 + 1);
        unint64_t v71 = *(void *)(a1 + 6);
        unint64_t v72 = *(void *)(a1 + 10);
        if (gLogObjects && gNumLogObjects >= 53)
        {
          BOOL v68 = *(os_log_s **)(gLogObjects + 416);
        }

        else
        {
          BOOL v68 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        int v92 = bswap32(v70);
        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(handler) = 67110144;
          DWORD1(handler) = v92;
          WORD4(handler) = 1024;
          *(_DWORD *)((char *)&handler + 10) = v69;
          HIWORD(handler) = 2048;
          *(void *)__int128 v165 = bswap64(v71);
          *(_WORD *)&v165[8] = 2048;
          *(void *)&v165[10] = bswap64(v72);
          *(_WORD *)&v165[18] = 1024;
          *(_DWORD *)&v165[20] = v64;
          uint64_t v93 = "BinaryLogAvailable message received. LogFileID: %u, FileLen: %u, TimeStampStart: %llu, TimeStampEnd: %ll"
                "u, FilePriority: %u";
LABEL_149:
          _os_log_debug_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, v93, (uint8_t *)&handler, 0x28u);
        }

LABEL_115:
        sendMessage_requestBinaryLogFileInfo(a3, v92, v64);
        return 1LL;
      case 0xDu:
        if (a2 < bswap32(a1[1]) >> 16)
        {
          uint64_t v137 = (os_log_s *)logObjectForModule_15();
          if (os_log_type_enabled(v137, OS_LOG_TYPE_ERROR)) {
            loggingProtocol_handleMessage_cold_13();
          }
        }

        else
        {
          int v162 = bswap32(*((_DWORD *)a1 + 1));
          if (*(_BYTE *)(a3 + 112))
          {
            sendMessage_stopBinaryLogFile(a3, v162, 2);
          }

          else
          {
            unsigned int v73 = bswap32(*((_DWORD *)a1 + 2));
            if (v73 - 524289 > 0xFFF7FFFF)
            {
              unint64_t v74 = *(void *)(a1 + 6);
              unint64_t v75 = *(void *)(a1 + 10);
              uint64_t v76 = *((unsigned __int8 *)a1 + 29);
              id v77 = strndup((const char *)a1 + 30, v76 - 1);
              uint64_t v78 = (uint64_t)v77;
              int v79 = *((unsigned __int8 *)a1 + v76 + 30);
              if (*((_BYTE *)a1 + v76 + 30))
              {
                uint64_t v139 = (os_log_s *)logObjectForModule_15();
                if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR)) {
                  loggingProtocol_handleMessage_cold_16(v139, v140, v141, v142, v143, v144, v145, v146);
                }
                uint64_t v3 = 0LL;
              }

              else
              {
                unint64_t v80 = bswap64(v74);
                unint64_t v81 = bswap64(v75);
                *(void *)(a3 + 12_Block_object_dispose((const void *)(v9 - 64), 8) = v80;
                *(void *)(a3 + 136) = v81;
                *(_WORD *)(a3 + 144) = v76;
                *(void *)(a3 + 152) = v77;
                *(_DWORD *)(a3 + 160) = v79;
                *(_DWORD *)(a3 + 120) = v162;
                *(_DWORD *)(a3 + 124) = v73;
                *(_DWORD *)(a3 + 116) = 0;
                *(_BYTE *)(a3 + 112) = 1;
                if (gLogObjects && gNumLogObjects >= 53)
                {
                  __int16 v82 = *(os_log_s **)(gLogObjects + 416);
                }

                else
                {
                  __int16 v82 = (os_log_s *)&_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    platform_connectionInfo_configStreamCategoryListReady_cold_1();
                  }
                }

                if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
                {
                  LODWORD(handler) = 67110402;
                  DWORD1(handler) = v162;
                  WORD4(handler) = 1024;
                  *(_DWORD *)((char *)&handler + 10) = v73;
                  HIWORD(handler) = 2048;
                  *(void *)__int128 v165 = v80;
                  *(_WORD *)&v165[8] = 2048;
                  *(void *)&v165[10] = v81;
                  *(_WORD *)&v165[18] = 1024;
                  *(_DWORD *)&v165[20] = v79;
                  *(_WORD *)&v165[24] = 2080;
                  *(void *)&v165[26] = v78;
                  _os_log_debug_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_DEBUG,  "BinaryLogFileInfo message received. LogFileID: %u, FileLen: %u, TimeStampStart: %llu, TimeStampEnd: %llu, FilePriority: %u, \n tag: %s \n",  (uint8_t *)&handler,  0x32u);
                }

                writeMessage_binaryBlock(v78, (unsigned __int16)(v76 - 1));
                sendMessage_requestBinaryLogSegment(a3, v162, 0);
                uint64_t v78 = 0LL;
                uint64_t v3 = 1LL;
              }

BOOL loggingProtocol_sendMessageData(char *a1, unsigned int a2, uint64_t a3)
{
  return iap2_sessionLog_sendOutgoingMessage(a3, a1, a2);
}

uint64_t loggingProtocol_requestAccessoryLogs(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    int v3 = result;
    *(_BYTE *)(a2 + 104) = 1;
    *(_DWORD *)(a2 + 10_Block_object_dispose((const void *)(v9 - 64), 8) = result;
    __int128 v5 = xmmword_10019E3C0;
    LODWORD(v5) = result;
    uint64_t v6 = -1LL;
    if (gLogObjects && gNumLogObjects >= 53)
    {
      id v4 = *(os_log_s **)(gLogObjects + 416);
    }

    else
    {
      id v4 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      loggingProtocol_requestAccessoryLogs_cold_1(v3, v4);
    }
    return loggingProtocol_sendMessage(10, (uint64_t)&v5, a2);
  }

  return result;
}

uint64_t loggingProtocol_stopAccessoryLogTransfer(unsigned int a1, uint64_t a2)
{
  if (a1 > 2) {
    int v2 = 1;
  }
  else {
    int v2 = a1;
  }
  return sendMessage_stopBinaryLogFile(a2, *(_DWORD *)(a2 + 120), v2);
}

uint64_t sendMessage_stopBinaryLogFile(uint64_t result, int a2, int a3)
{
  if (result)
  {
    uint64_t v3 = result;
    *(_BYTE *)(result + 112) = 0;
    *(_BYTE *)(result + 104) = 0;
    *(_DWORD *)(result + 116) = 0;
    v5[0] = a2;
    v5[1] = a3;
    if (gLogObjects && gNumLogObjects >= 53)
    {
      id v4 = *(os_log_s **)(gLogObjects + 416);
    }

    else
    {
      id v4 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      sendMessage_stopBinaryLogFile_cold_1();
    }
    return loggingProtocol_sendMessage(14, (uint64_t)v5, v3);
  }

  return result;
}

void *logObjectForModule_15()
{
  if (gLogObjects && gNumLogObjects >= 53) {
    return *(void **)(gLogObjects + 416);
  }
  BOOL v0 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    platform_connectionInfo_configStreamCategoryListReady_cold_1();
  }
  return v0;
}

void __handleMessage_sessionSync_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(_DWORD *)(v2 + _Block_object_dispose((const void *)(v9 - 64), 8) = 2;
  uint64_t v3 = gLogObjects;
  int v4 = gNumLogObjects;
  if (gLogObjects && gNumLogObjects >= 53)
  {
    __int128 v5 = *(os_log_s **)(gLogObjects + 416);
  }

  else
  {
    __int128 v5 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      int v7 = 134218240;
      uint64_t v8 = v3;
      __int16 v9 = 1024;
      int v10 = v4;
      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  (uint8_t *)&v7,  0x12u);
      uint64_t v2 = *(void *)(a1 + 32);
    }
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    int v6 = *(_DWORD *)(v2 + 8);
    int v7 = 67109120;
    LODWORD(v_Block_object_dispose((const void *)(v9 - 64), 8) = v6;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "Logging Protocol Session Established. endpointState: %u",  (uint8_t *)&v7,  8u);
    uint64_t v2 = *(void *)(a1 + 32);
  }

  iap2_sessionLog_registerForNotifications(v2);
}

void logFetcher_processAvailabilityUpdate(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 8) && *(_BYTE *)(v1 + 9))
  {
    int v2 = *(_DWORD *)(v1 + 40);
    int v3 = *(_DWORD *)(v1 + 28);
    unsigned int v4 = v2 - v3;
    if (v2 != v3)
    {
      int v7 = *(_DWORD *)(v1 + 36);
      unsigned int v8 = (v3 ^ 0x7FFFFFFF) + v7 + 1;
      unsigned int v9 = *(_DWORD *)(v1 + 32) + (v3 ^ 0x7FFFFFFF);
      unsigned int v10 = v3 - v2;
      if (v10 < v4 && v7 - v2 > v10) {
        int v3 = *(_DWORD *)(v1 + 36);
      }
      if (v8 <= v9) {
        int v3 = *(_DWORD *)(v1 + 36);
      }
      *(_DWORD *)(v1 + 24) = v3;
      *(_DWORD *)(v1 + 2_Block_object_dispose((const void *)(v9 - 64), 8) = v2;
      goto LABEL_18;
    }

    int v5 = *(_DWORD *)(v1 + 36);
    int v6 = *(_DWORD *)(v1 + 24);
    if (v5 == v6)
    {
LABEL_18:
      *(_DWORD *)(v1 + 12) = v2;
      *(_WORD *)(v1 + _Block_object_dispose((const void *)(v9 - 64), 8) = 1;
      logFetcher_performFetch(a1);
      return;
    }

    if (v5 - v6 > (v2 + ~v6))
    {
      *(_DWORD *)(v1 + 24) = v5;
      goto LABEL_18;
    }
  }

void logFetcher_performFetch(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(void *)(v2 + 56) || !*(void *)(v2 + 48))
  {
    int v3 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  *(dispatch_queue_t *)(v2 + 64));
    *(void *)(v2 + 56) = v3;
    dispatch_source_set_timer(v3, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
    unsigned int v4 = *(dispatch_source_s **)(v2 + 56);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 0x40000000LL;
    handler[2] = __logFetcher_initTimers_block_invoke;
    handler[3] = &__block_descriptor_tmp_1_0;
    handler[4] = a1;
    dispatch_source_set_event_handler(v4, handler);
    dispatch_resume(*(dispatch_object_t *)(v2 + 56));
    int v5 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  *(dispatch_queue_t *)(v2 + 64));
    *(void *)(v2 + 4_Block_object_dispose((const void *)(v9 - 64), 8) = v5;
    dispatch_source_set_timer(v5, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
    int v6 = *(dispatch_source_s **)(v2 + 48);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 0x40000000LL;
    _DWORD v14[2] = __logFetcher_initTimers_block_invoke_2;
    void v14[3] = &__block_descriptor_tmp_2_1;
    v14[4] = v2 + 8;
    v14[5] = a1;
    dispatch_source_set_event_handler(v6, v14);
    dispatch_resume(*(dispatch_object_t *)(v2 + 48));
    uint64_t v2 = *(void *)(a1 + 32);
  }

  int v7 = *(_DWORD *)(v2 + 12);
  int v8 = *(_DWORD *)(v2 + 24);
  unsigned int v9 = v7 - v8;
  if (v7 == v8)
  {
    *(_BYTE *)(v2 + _Block_object_dispose((const void *)(v9 - 64), 8) = 0;
    logFetcher_processAvailabilityUpdate(a1);
  }

  else
  {
    unsigned int v10 = rand() / 0x151D07Fu + 32;
    if (v9 < v10) {
      unsigned int v10 = v9;
    }
    int v11 = *(_DWORD *)(v2 + 12);
    *(_DWORD *)(v2 + 16) = v11 - v10;
    *(_DWORD *)(v2 + 20) = v11;
    BOOL v12 = *(dispatch_source_s **)(v2 + 48);
    dispatch_time_t v13 = dispatch_time(0LL, 1000000000LL);
    dispatch_source_set_timer(v12, v13, 0xFFFFFFFFFFFFFFFFLL, 0LL);
  }

uint64_t __logFetcher_initTimers_block_invoke(uint64_t a1)
{
  return logFetcher_performFetch(*(void *)(a1 + 32));
}

void __logFetcher_initTimers_block_invoke_2(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  int v4 = *(_DWORD *)(v3 + 8);
  LODWORD(v3) = *(_DWORD *)(v3 + 12) - 1;
  v9[0] = v4;
  v9[1] = v3;
  int v5 = loggingProtocol_sendMessage(7, (uint64_t)v9, v2);
  uint64_t v6 = *(void *)(a1 + 32);
  if (v5)
  {
    *(_DWORD *)(v6 + 4) += *(_DWORD *)(v6 + 8) - *(_DWORD *)(v6 + 12);
  }

  else
  {
    int v7 = *(dispatch_source_s **)(v6 + 48);
    dispatch_time_t v8 = dispatch_time(0LL, 3000000000LL);
    dispatch_source_set_timer(v7, v8, 0xFFFFFFFFFFFFFFFFLL, 0LL);
  }

uint64_t sendMessage_requestBinaryLogFileInfo(uint64_t a1, int a2, int a3)
{
  v6[0] = a2;
  v6[1] = a3;
  if (gLogObjects && gNumLogObjects >= 53)
  {
    int v4 = *(os_log_s **)(gLogObjects + 416);
  }

  else
  {
    int v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    sendMessage_requestBinaryLogFileInfo_cold_1();
  }
  return loggingProtocol_sendMessage(12, (uint64_t)v6, a1);
}

void writeMessage_binaryBlock(uint64_t a1, int a2)
{
  if (a1)
  {
    if (a2)
    {
      iap2_sessionLog_writeBinaryBlockToFile();
    }

    else
    {
      unsigned int v10 = (os_log_s *)logObjectForModule_15();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        writeMessage_binaryBlock_cold_2(v10, v11, v12, v13, v14, v15, v16, v17);
      }
    }
  }

  else
  {
    uint64_t v2 = (os_log_s *)logObjectForModule_15();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      writeMessage_binaryBlock_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
    }
  }

uint64_t sendMessage_requestBinaryLogSegment(uint64_t a1, int a2, int a3)
{
  v9[0] = a2;
  v9[1] = a3;
  else {
    int v6 = *(_DWORD *)(a1 + 124) - *(_DWORD *)(a1 + 116);
  }
  _DWORD v9[2] = v6;
  if (gLogObjects && gNumLogObjects >= 53)
  {
    uint64_t v7 = *(os_log_s **)(gLogObjects + 416);
  }

  else
  {
    uint64_t v7 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109632;
    int v11 = a2;
    __int16 v12 = 1024;
    int v13 = a3;
    __int16 v14 = 1024;
    int v15 = v6;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "Sending RequestBinaryLogSegment. LogFileID: %u, SegmentOffset: %u, SegmentLength: %u",  buf,  0x14u);
  }

  return loggingProtocol_sendMessage(15, (uint64_t)v9, a1);
}

  ;
}

  ;
}

BOOL acc_auth_protocol_initStartMessage1Way(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3)
{
  BOOL result = 1LL;
  if (a1 && a2 && a3 >= 4)
  {
    if (gLogObjects && gNumLogObjects >= 55)
    {
      uint64_t v7 = *(os_log_s **)(gLogObjects + 432);
    }

    else
    {
      uint64_t v7 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v8 = *a1;
      int v9 = *((_DWORD *)a1 + 286);
      int v10 = *((_DWORD *)a1 + 289);
      v12[0] = 67109632;
      v12[1] = v8;
      __int16 v13 = 1024;
      int v14 = v9;
      __int16 v15 = 1024;
      int v16 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "[AccAuth][1Way] initStartMessage1Way: sessionID %d, role %d, negotiatedAuthType %d \n",  (uint8_t *)v12,  0x14u);
    }

    int v11 = *((_DWORD *)a1 + 286);
    if (v11 && *((_DWORD *)a1 + 289) == 1)
    {
      if (v11 == 1)
      {
        BOOL result = acc_auth_protocol_initMessage(a1, 162, a2, a3);
        int v11 = *((_DWORD *)a1 + 286);
      }

      else
      {
        BOOL result = 1LL;
      }

      if (v11 == 2) {
        return acc_auth_protocol_initMessage(a1, 163, a2, a3);
      }
    }

    else
    {
      return 1LL;
    }
  }

  return result;
}

uint64_t acc_auth_protocol_handleAuthStart1Way( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 *a4, unsigned int a5)
{
  uint64_t result = 1LL;
  if (a1 && a2 && a4 && a5 >= 4)
  {
    if (gLogObjects && gNumLogObjects >= 55)
    {
      int v10 = *(os_log_s **)(gLogObjects + 432);
    }

    else
    {
      int v10 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      int v11 = *a1;
      int v12 = *((_DWORD *)a1 + 286);
      int v13 = *((_DWORD *)a1 + 289);
      int v14 = *a2;
      int v15 = a2[1];
      int v16 = a2[2];
      int v17 = a2[3];
      v18[0] = 67110656;
      v18[1] = v11;
      __int16 v19 = 1024;
      int v20 = v12;
      __int16 v21 = 1024;
      int v22 = v13;
      __int16 v23 = 1024;
      int v24 = v14;
      __int16 v25 = 1024;
      int v26 = v15;
      __int16 v27 = 1024;
      int v28 = v16;
      __int16 v29 = 1024;
      int v30 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "[AccAuth][1Way] handleAuthStart1Way: sessionID %d, role %d, negotiatedAuthType %d, msgID %#04x, ctl0 %#04x, ctl1 %#04x, len %d \n",  (uint8_t *)v18,  0x2Cu);
    }

    if (*a2 == 162 && *((_DWORD *)a1 + 289) == 1 && *((_DWORD *)a1 + 286) == 2)
    {
      LODWORD(result) = acc_auth_protocol_initStartMessage(a1, a4, a5);
      if (*((_DWORD *)a1 + 289)) {
        return result;
      }
      else {
        return 45LL;
      }
    }

    else
    {
      return 1LL;
    }
  }

  return result;
}

BOOL acc_auth_protocol_handleAuthStartResp1Way( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 *a4, unsigned int a5)
{
  BOOL result = 1LL;
  if (a1 && a2 && a4)
  {
    if (gLogObjects && gNumLogObjects >= 55)
    {
      int v10 = *(os_log_s **)(gLogObjects + 432);
    }

    else
    {
      int v10 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      int v11 = *a1;
      int v12 = *((_DWORD *)a1 + 286);
      int v13 = *((_DWORD *)a1 + 289);
      int v14 = *a2;
      int v15 = a2[1];
      int v16 = a2[2];
      int v17 = a2[3];
      v18[0] = 67110656;
      v18[1] = v11;
      __int16 v19 = 1024;
      int v20 = v12;
      __int16 v21 = 1024;
      int v22 = v13;
      __int16 v23 = 1024;
      int v24 = v14;
      __int16 v25 = 1024;
      int v26 = v15;
      __int16 v27 = 1024;
      int v28 = v16;
      __int16 v29 = 1024;
      int v30 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "[AccAuth][1Way] handleAuthStartResp1Way: sessionID %d, role %d, negotiatedAuthType %d, msgID %#04x, ctl0 %#04x, ctl1 %#04x, len %d \n",  (uint8_t *)v18,  0x2Cu);
    }

    return *a2 != 163
        || *((_DWORD *)a1 + 289) != 1
        || *((_DWORD *)a1 + 286) != 1
        || acc_auth_protocol_initInfoCommonMessage(a1, 9u, a4, a5);
  }

  return result;
}

uint64_t acc_auth_protocol_handleAuthInfo1Way( unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5)
{
  uint64_t result = 1LL;
  if (!a1 || !a2 || !a4) {
    return result;
  }
  uint64_t v23 = 0LL;
  int v10 = (_BYTE *)acc_auth_protocol_messagePayload((uint64_t)a2, a3, (_DWORD *)&v23 + 1, 0LL, &v23);
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v11 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    int v11 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    int v17 = *a1;
    int v18 = *((_DWORD *)a1 + 286);
    int v19 = *((_DWORD *)a1 + 289);
    int v20 = *a2;
    int v21 = a2[1];
    int v22 = a2[2];
    *(_DWORD *)buf = 67110656;
    int v25 = v17;
    __int16 v26 = 1024;
    int v27 = v18;
    __int16 v28 = 1024;
    int v29 = v19;
    __int16 v30 = 1024;
    int v31 = v20;
    __int16 v32 = 1024;
    int v33 = v21;
    __int16 v34 = 1024;
    int v35 = v22;
    __int16 v36 = 1024;
    int v37 = HIDWORD(v23);
    _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "[AccAuth][1Way] handleAuthInfo1Way: sessionID %d, role %d, negotiatedAuthType %d, msgID %#04x, ctl0 %#04x, ctl1 %#04x, len %d \n",  buf,  0x2Cu);
    if (v10) {
      goto LABEL_11;
    }
    return 1LL;
  }

  if (!v10) {
    return 1LL;
  }
LABEL_11:
  if (*a2 != 164 || *((_DWORD *)a1 + 289) != 1 || *((_DWORD *)a1 + 286) != 2 || *v10) {
    return 1LL;
  }
  int v12 = v10[1];
  int v13 = (os_log_s *)logObjectForModule_13();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    int v14 = *a1;
    int v15 = *((_DWORD *)a1 + 286);
    int v16 = *((_DWORD *)a1 + 289);
    *(_DWORD *)buf = 67109888;
    int v25 = v14;
    __int16 v26 = 1024;
    int v27 = v15;
    __int16 v28 = 1024;
    int v29 = v16;
    __int16 v30 = 1024;
    int v31 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "[AccAuth][1Way] handleAuthInfo1Way: sessionID %d, role %d, negotiatedAuthType %d, infoType %d \n",  buf,  0x1Au);
  }

  uint64_t result = 1LL;
  switch(v12)
  {
    case 1:
      uint64_t result = __acc_auth_protocol_handleNotInCache(a1, a4, a5);
      break;
    case 3:
      uint64_t result = __acc_auth_protocol_handlContinueWithSegment(a1, (uint64_t)v10, a4, a5);
      break;
    case 4:
      uint64_t result = __acc_auth_protocol_handleCertificateChainInfoRequest(a1, (uint64_t)v10, a4, a5);
      break;
    case 7:
      uint64_t result = __acc_auth_protocol_handleChallenge(a1, v10, a4, a5);
      break;
    case 9:
      uint64_t result = __acc_auth_protocol_handleNotGoingFirst(a1, a4, a5);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t __acc_auth_protocol_handleNotGoingFirst(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3)
{
  int v17 = 0;
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v6 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    int v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v7 = *a1;
    int v8 = *((_DWORD *)a1 + 286);
    *(_DWORD *)buf = 67109376;
    int v19 = v7;
    __int16 v20 = 1024;
    int v21 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "[AccAuth][1Way] handleNotGoingFirst: sessionID %d, role %d \n",  buf,  0xEu);
  }

  BOOL inited = acc_auth_protocol_initInfoCommonMessage(a1, 0, a2, a3);
  if (inited)
  {
    uint64_t CertificateChainHashList = inited;
    int v11 = 0;
  }

  else
  {
    int v12 = (_BYTE *)acc_auth_protocol_messagePayload((uint64_t)a2, a3, 0LL, 0LL, 0LL);
    _DWORD v12[2] = 1;
    int v17 = 0;
    int v11 = 32;
    uint64_t CertificateChainHashList = _acc_auth_protocol_getCertificateChainHashList((uint64_t)a1, v12 + 4, 0x20u, 1, &v17);
    v12[3] = 32;
    a2[3] += 34;
  }

  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v13 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    int v13 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    int v14 = *a1;
    int v15 = *((_DWORD *)a1 + 286);
    *(_DWORD *)buf = 67110144;
    int v19 = v14;
    __int16 v20 = 1024;
    int v21 = v15;
    __int16 v22 = 1024;
    int v23 = v11;
    __int16 v24 = 1024;
    int v25 = v17;
    __int16 v26 = 1024;
    int v27 = CertificateChainHashList;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "[AccAuth][1Way] handleNotGoingFirst: sessionID %d, role %d, certificateHashSize %d, certificateHashCount %d, errorNo %d \n",  buf,  0x20u);
  }

  return CertificateChainHashList;
}

uint64_t __acc_auth_protocol_handleNotInCache(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v6 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    int v6 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    __acc_auth_protocol_handleNotInCache_cold_3();
  }
  NewCertificateStruct = _acc_auth_protocol_getNewCertificateStruct();
  if (!NewCertificateStruct)
  {
    uint64_t v9 = 12LL;
    goto LABEL_28;
  }

  uint64_t Certificate = _acc_auth_protocol_getCertificate((uint64_t)a1, 0LL, 0, (uint64_t)NewCertificateStruct);
  if ((_DWORD)Certificate)
  {
    uint64_t v9 = Certificate;
    goto LABEL_28;
  }

  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v10 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    int v10 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    int v11 = NewCertificateStruct[2];
    int v20 = 67109632;
    int v21 = v11;
    __int16 v22 = 1024;
    int v23 = acc_auth_protocol_maxPayloadSize((uint64_t)a1);
    __int16 v24 = 1024;
    int v25 = acc_auth_protocol_maxSegmentSize((uint64_t)a1);
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "[AccAuth][1Way] handleAuthInfo1Way: certificateDataLen %d, maxPayladSize %d, maxSegmentSize %d \n",  (uint8_t *)&v20,  0x14u);
  }

  unsigned int v12 = NewCertificateStruct[2];
  if (v12 <= acc_auth_protocol_maxPayloadSize((uint64_t)a1) - 6)
  {
    uint64_t v9 = __acc_auth_protocol_prepareMessageWithExtLenForCertificateData( a1,  (uint64_t)NewCertificateStruct,  2,  2u,  a2,  a3);
    goto LABEL_26;
  }

  unsigned int v13 = acc_auth_protocol_maxSegmentSize((uint64_t)a1);
  if (v13 > 0xFF || HIWORD(NewCertificateStruct[2]))
  {
    uint64_t v9 = 22LL;
    goto LABEL_28;
  }

  uint64_t v9 = acc_auth_protocol_setupSegmentedSend( a1,  (uint64_t)NewCertificateStruct,  *(void *)NewCertificateStruct,  (unsigned __int16)NewCertificateStruct[2],  v13);
  if (!(_DWORD)v9)
  {
    if (acc_auth_protocol_initSegmentedSendMessage(a1, 2u, 130, a2, a3) || !*((void *)a1 + 9))
    {
      uint64_t v9 = 1LL;
      goto LABEL_28;
    }

    uint64_t v9 = 0LL;
LABEL_26:
    NewCertificateStruct = 0LL;
  }

LABEL_28:
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v14 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    int v14 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    int v15 = *a1;
    int v16 = *((_DWORD *)a1 + 286);
    if (NewCertificateStruct) {
      int v17 = NewCertificateStruct[2];
    }
    else {
      int v17 = -1;
    }
    int v18 = acc_auth_protocol_sizeofMessage((uint64_t)a2, a3, 0LL, 0LL);
    int v20 = 67110144;
    int v21 = v15;
    __int16 v22 = 1024;
    int v23 = v16;
    __int16 v24 = 1024;
    int v25 = v17;
    __int16 v26 = 1024;
    int v27 = v18;
    __int16 v28 = 1024;
    int v29 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "[AccAuth][1Way] handleNotInCache: sessionID %d, role %d, certificateDataLen %d, msgSize %d, errorNo %d \n",  (uint8_t *)&v20,  0x20u);
  }

  if (NewCertificateStruct) {
    _acc_auth_protocol_returnCertificateStruct(NewCertificateStruct);
  }
  return v9;
}

  if (Count < 1)
  {
    return 0;
  }

  else
  {
    uint64_t v4 = 0;
    unsigned int v48 = @"ChapterCount";
    int v47 = @"IsBanned";
    int v46 = @"IsLiked";
    uint64_t v45 = @"IsBanSupported";
    id v44 = @"IsLikeSupported";
    __int128 v43 = @"Composer";
    dispatch_time_t v42 = @"Genre";
    uint64_t v41 = @"Artist";
    id v40 = @"AlbumDiscCount";
    uint64_t v39 = @"AlbumDiscNum";
    BOOL v38 = @"AlbumTrackCount";
    int v37 = @"AlbumTrackNum";
    __int16 v36 = @"AlbumTitle";
    do
    {
      int v18 = *(unsigned __int16 *)v13++;
      switch(v18)
      {
        case 0:
          uint64_t Value = (const __CFNumber *)CFDictionaryGetValue(a4, @"PersistentID");
          int v20 = (uint64_t)iAP2MsgAddCFU64Param(a1, a2, 0, Value);
          goto LABEL_50;
        case 1:
          int v21 = (const __CFString *)CFDictionaryGetValue(a4, @"Title");
          __int16 v22 = a1;
          int v23 = a2;
          __int16 v24 = 1;
          goto LABEL_42;
        case 4:
          int v25 = (const __CFNumber *)CFDictionaryGetValue(a4, @"PlaybackDurationMS");
          int v20 = iAP2MsgAddCFU32Param(a1, a2, 4, v25);
          goto LABEL_50;
        case 6:
          int v21 = (const __CFString *)CFDictionaryGetValue(a4, v36);
          __int16 v22 = a1;
          int v23 = a2;
          __int16 v24 = 6;
          goto LABEL_42;
        case 7:
          __int16 v26 = (const __CFNumber *)CFDictionaryGetValue(a4, v37);
          int v27 = a1;
          __int16 v28 = a2;
          int v29 = 7;
          goto LABEL_49;
        case 8:
          __int16 v26 = (const __CFNumber *)CFDictionaryGetValue(a4, v38);
          int v27 = a1;
          __int16 v28 = a2;
          int v29 = 8;
          goto LABEL_49;
        case 9:
          __int16 v26 = (const __CFNumber *)CFDictionaryGetValue(a4, v39);
          int v27 = a1;
          __int16 v28 = a2;
          int v29 = 9;
          goto LABEL_49;
        case 10:
          __int16 v26 = (const __CFNumber *)CFDictionaryGetValue(a4, v40);
          int v27 = a1;
          __int16 v28 = a2;
          int v29 = 10;
          goto LABEL_49;
        case 12:
          int v21 = (const __CFString *)CFDictionaryGetValue(a4, v41);
          __int16 v22 = a1;
          int v23 = a2;
          __int16 v24 = 12;
          goto LABEL_42;
        case 16:
          int v21 = (const __CFString *)CFDictionaryGetValue(a4, v42);
          __int16 v22 = a1;
          int v23 = a2;
          __int16 v24 = 16;
          goto LABEL_42;
        case 18:
          int v21 = (const __CFString *)CFDictionaryGetValue(a4, v43);
          __int16 v22 = a1;
          int v23 = a2;
          __int16 v24 = 18;
LABEL_42:
          int v20 = (uint64_t)iAP2MsgAddCFStringParam(v22, v23, v24, v21);
          goto LABEL_50;
        case 21:
          __int16 v30 = (const __CFBoolean *)CFDictionaryGetValue(a4, v44);
          int v31 = a1;
          __int16 v32 = a2;
          int v33 = 21;
          goto LABEL_47;
        case 22:
          __int16 v30 = (const __CFBoolean *)CFDictionaryGetValue(a4, v45);
          int v31 = a1;
          __int16 v32 = a2;
          int v33 = 22;
          goto LABEL_47;
        case 23:
          __int16 v30 = (const __CFBoolean *)CFDictionaryGetValue(a4, v46);
          int v31 = a1;
          __int16 v32 = a2;
          int v33 = 23;
          goto LABEL_47;
        case 24:
          __int16 v30 = (const __CFBoolean *)CFDictionaryGetValue(a4, v47);
          int v31 = a1;
          __int16 v32 = a2;
          int v33 = 24;
LABEL_47:
          int v20 = (uint64_t)iAP2MsgAddCFBooleanParam(v31, v32, v33, v30);
          goto LABEL_50;
        case 27:
          __int16 v26 = (const __CFNumber *)CFDictionaryGetValue(a4, v48);
          int v27 = a1;
          __int16 v28 = a2;
          int v29 = 27;
LABEL_49:
          int v20 = iAP2MsgAddCFU16Param(v27, v28, v29, v26);
LABEL_50:
          if (v20) {
            ++v4;
          }
          break;
        default:
          break;
      }

      --Count;
    }

    while (Count);
  }

  return v4;
}

  if (gLogObjects && gNumLogObjects >= 60)
  {
    int v16 = *(os_log_s **)(gLogObjects + 472);
  }

  else
  {
    int v16 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    __n_4 = 136316674;
    __int16 v32 = "qiAuth_protocol_saveCertNextSegment";
    int v33 = 1024;
    __int16 v34 = 1085;
    int v35 = 1024;
    __int16 v36 = v12;
    int v37 = 1024;
    BOOL v38 = a2;
    uint64_t v39 = 1024;
    id v40 = a3;
    uint64_t v41 = 1024;
    dispatch_time_t v42 = a5;
    __int128 v43 = 1024;
    id v44 = __n;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "%s:%d Result %d, role %d, slot %d, offset %d, length %d",  (uint8_t *)&__n_4,  0x30u);
  }

  return v12;
}

  a3->var5 = self->_folder;
  a3->var0 |= 0x10u;
  if ((validMask & 0x20) == 0)
  {
LABEL_17:
    if ((validMask & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_30;
  }

          __break(0x5519u);
        }

        int v11 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
        unsigned int v12 = 0xAAAAAAAAAAAAAAAALL;
        if (v8 > v9 || v9 > v14) {
          goto LABEL_28;
        }
        int v11 = v9;
        unsigned int v12 = (unint64_t)v14;
        uint64_t result = ccder_blob_decode_tl(&v11, 5LL, &v15);
        if (!(_DWORD)result) {
          return result;
        }
        if (v11 != v14) {
          return 0LL;
        }
        if (!__CFADD__(v11, v15))
        {
          int v10 = &v11[v15];
          if (&v11[v15] <= a1[1] && *a1 <= v10)
          {
            *a1 = v10;
            return 1LL;
          }

          goto LABEL_28;
        }
      }
    }

    __break(0x5513u);
  }

  return result;
}

  int v29 = updated;
  int v23 = v33;
LABEL_27:
  cc_clear(**(void **)(a1 + 8), v23);
  cc_clear(*(void *)(*(void *)(a1 + 8) + 8LL), v12);
  return v29;
}

uint64_t __acc_auth_protocol_handlContinueWithSegment( unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v8 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    int v8 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
    __acc_auth_protocol_handlContinueWithSegment_cold_2();
  }
  uint64_t v9 = (_DWORD *)*((void *)a1 + 9);
  int v10 = *(unsigned __int8 *)(a2 + 3);
  if (v9)
  {
    uint64_t inited = acc_auth_protocol_initSegmentedSendMessage( a1,  *(unsigned __int8 *)(a2 + 3),  *(unsigned __int8 *)(a2 + 4),  a3,  a4);
    if ((_DWORD)inited) {
      unsigned int v12 = v9;
    }
    else {
      unsigned int v12 = 0LL;
    }
  }

  else
  {
    unsigned int v12 = 0LL;
    uint64_t inited = 2LL;
  }

  BOOL v14 = v10 == 2 || v10 == 5;
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v15 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    int v15 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    int v16 = *a1;
    int v17 = *((_DWORD *)a1 + 286);
    if (v12 && (v10 == 5 || v10 == 2)) {
      int v18 = v12[2];
    }
    else {
      int v18 = -1;
    }
    int v19 = a1[1321];
    v21[0] = 67110656;
    v21[1] = v16;
    __int16 v22 = 1024;
    int v23 = v17;
    __int16 v24 = 1024;
    BOOL v25 = v14;
    __int16 v26 = 1024;
    BOOL v27 = v10 == 8;
    __int16 v28 = 1024;
    int v29 = v18;
    __int16 v30 = 1024;
    int v31 = v19;
    __int16 v32 = 1024;
    int v33 = inited;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "[AccAuth][1Way] handlContinueWithSegment: sessionID %d, role %d, certType %d, respType %d, certificateDataLen %d, authResponseDataLen %d, errorNo %d \n",  (uint8_t *)v21,  0x2Cu);
  }

  if (v12)
  {
    if (v10 == 5 || v10 == 2)
    {
      _acc_auth_protocol_returnCertificateStruct(v12);
    }

    else if (v10 == 8)
    {
      *(_OWORD *)(a1 + 1289) = 0u;
      *(_OWORD *)(a1 + 1305) = 0u;
      *(_OWORD *)(a1 + 1257) = 0u;
      *(_OWORD *)(a1 + 1273) = 0u;
      *(_OWORD *)(a1 + 1225) = 0u;
      *(_OWORD *)(a1 + 1241) = 0u;
      *(_OWORD *)(a1 + 1193) = 0u;
      *(_OWORD *)(a1 + 1209) = 0u;
      a1[1321] = 0;
    }
  }

  return inited;
}

uint64_t __acc_auth_protocol_handleCertificateChainInfoRequest( unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4)
{
  if (*(_BYTE *)(a2 + 2) != 4)
  {
    NewCertificateStruct = 0LL;
LABEL_6:
    uint64_t v10 = 1LL;
    goto LABEL_25;
  }

  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v8 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    int v8 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
    __acc_auth_protocol_handleCertificateChainInfoRequest_cold_2();
  }
  NewCertificateStruct = _acc_auth_protocol_getNewCertificateStruct();
  if (!NewCertificateStruct)
  {
    uint64_t v10 = 12LL;
    goto LABEL_25;
  }

  uint64_t Certificate = _acc_auth_protocol_getCertificate( (uint64_t)a1,  (const void *)(a2 + 4),  0x20u,  (uint64_t)NewCertificateStruct);
  if ((_DWORD)Certificate)
  {
    uint64_t v10 = Certificate;
    goto LABEL_25;
  }

  unsigned int v12 = NewCertificateStruct[2];
  if (v12 <= acc_auth_protocol_maxPayloadSize((uint64_t)a1) - 6)
  {
    uint64_t v10 = __acc_auth_protocol_prepareMessageWithExtLenForCertificateData( a1,  (uint64_t)NewCertificateStruct,  5,  5u,  a3,  a4);
    goto LABEL_23;
  }

  unsigned int v13 = acc_auth_protocol_maxSegmentSize((uint64_t)a1);
  if (v13 > 0xFF || HIWORD(NewCertificateStruct[2]))
  {
    uint64_t v10 = 22LL;
    goto LABEL_25;
  }

  uint64_t v10 = acc_auth_protocol_setupSegmentedSend( a1,  (uint64_t)NewCertificateStruct,  *(void *)NewCertificateStruct,  (unsigned __int16)NewCertificateStruct[2],  v13);
  if (!(_DWORD)v10)
  {
    if (!acc_auth_protocol_initSegmentedSendMessage(a1, 5u, 133, a3, a4) && *((void *)a1 + 9))
    {
      uint64_t v10 = 0LL;
LABEL_23:
      NewCertificateStruct = 0LL;
      goto LABEL_25;
    }

    goto LABEL_6;
  }

uint64_t __acc_auth_protocol_handleChallenge( unsigned __int8 *a1, _BYTE *a2, unsigned __int8 *a3, unsigned int a4)
{
  uint64_t v23 = 0LL;
  memset(__n_1, 0, sizeof(__n_1));
  size_t v8 = a2[3];
  unsigned __int8 __n = 0;
  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v9 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    uint64_t v9 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    __acc_auth_protocol_handleChallenge_cold_2();
    if (!(_DWORD)v8) {
      goto LABEL_20;
    }
  }

  else if (!(_DWORD)v8)
  {
    goto LABEL_20;
  }

  if (a2[2] != 10) {
    goto LABEL_20;
  }
  uint64_t Certificate = _acc_auth_protocol_getCertificate((uint64_t)a1, 0LL, 0, (uint64_t)__n_1);
  if ((_DWORD)Certificate) {
    goto LABEL_21;
  }
  if (a4 < 0x88) {
    goto LABEL_20;
  }
  unsigned __int8 __n = 0x80;
  a1[1321] = 0;
  a3[6] = 11;
  uint64_t Certificate = _acc_auth_protocol_generateChallengeResponse( (uint64_t)a1,  (uint64_t)__n_1,  a2 + 4,  v8,  a1 + 1193,  128,  &__n);
  if ((_DWORD)Certificate) {
    goto LABEL_21;
  }
  unsigned int v11 = __n;
  a1[1321] = __n;
  if (acc_auth_protocol_maxPayloadSize((uint64_t)a1) - 4 >= v11)
  {
    unsigned __int8 v17 = __n;
    if (__n > 0x7Bu)
    {
      uint64_t Certificate = acc_auth_protocol_initInfoCommonMessageExtendedLength(a1, 8u, a3, a4, __n + 6);
      if ((_DWORD)Certificate) {
        goto LABEL_21;
      }
      uint64_t v20 = acc_auth_protocol_messagePayload((uint64_t)a3, a4, 0LL, 0LL, 0LL);
      *(_WORD *)(v20 + 2) = -32245;
      *(_BYTE *)(v20 + 4) = 0;
      unsigned int v19 = __n;
      *(_BYTE *)(v20 + 5) = __n;
      int v18 = (void *)(v20 + 6);
    }

    else
    {
      uint64_t Certificate = acc_auth_protocol_initInfoCommonMessage(a1, 8u, a3, a4);
      if ((_DWORD)Certificate) {
        goto LABEL_21;
      }
      int v18 = a3 + 8;
      a3[3] += v17 + 4;
      a3[6] = 11;
      unsigned int v19 = __n;
      a3[7] = __n;
    }

    memcpy(v18, a1 + 1193, v19);
    uint64_t Certificate = 0LL;
    *(_OWORD *)(a1 + 1193) = 0u;
    *(_OWORD *)(a1 + 1209) = 0u;
    *(_OWORD *)(a1 + 1225) = 0u;
    *(_OWORD *)(a1 + 1241) = 0u;
    *(_OWORD *)(a1 + 1257) = 0u;
    *(_OWORD *)(a1 + 1273) = 0u;
    *(_OWORD *)(a1 + 1289) = 0u;
    *(_OWORD *)(a1 + 1305) = 0u;
    a1[1321] = 0;
    goto LABEL_21;
  }

  unsigned int v12 = acc_auth_protocol_maxSegmentSize((uint64_t)a1);
  if (v12 > 0xFF)
  {
LABEL_20:
    uint64_t Certificate = 22LL;
    goto LABEL_21;
  }

  uint64_t Certificate = acc_auth_protocol_setupSegmentedSend( a1,  (uint64_t)(a1 + 1193),  (uint64_t)(a1 + 1193),  __n,  v12);
  if (!(_DWORD)Certificate)
  {
    uint64_t Certificate = acc_auth_protocol_initSegmentedSendMessage(a1, 8u, 139, a3, a4);
    if (!(_DWORD)Certificate)
    {
      if (*((void *)a1 + 9)) {
        uint64_t Certificate = 0LL;
      }
      else {
        uint64_t Certificate = 45LL;
      }
    }
  }

uint64_t acc_auth_protocol_handleAuthInfoResp1Way( unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5)
{
  uint64_t result = 1LL;
  if (a1 && a2 && a4)
  {
    uint64_t v18 = 0LL;
    uint64_t v10 = (unsigned __int8 *)acc_auth_protocol_messagePayload((uint64_t)a2, a3, (_DWORD *)&v18 + 1, 0LL, &v18);
    if (gLogObjects && gNumLogObjects >= 55)
    {
      unsigned int v11 = *(os_log_s **)(gLogObjects + 432);
    }

    else
    {
      unsigned int v11 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      int v12 = *a1;
      int v13 = *((_DWORD *)a1 + 286);
      int v14 = *((_DWORD *)a1 + 289);
      int v15 = *a2;
      int v16 = a2[1];
      int v17 = a2[2];
      *(_DWORD *)buf = 67110656;
      int v20 = v12;
      __int16 v21 = 1024;
      int v22 = v13;
      __int16 v23 = 1024;
      int v24 = v14;
      __int16 v25 = 1024;
      int v26 = v15;
      __int16 v27 = 1024;
      int v28 = v16;
      __int16 v29 = 1024;
      int v30 = v17;
      __int16 v31 = 1024;
      int v32 = HIDWORD(v18);
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "[AccAuth][1Way] handleAuthInfoResp1Way: sessionID %d, role %d, negotiatedAuthType %d, msgID %#04x, ctl0 %#04x, c tl1 %#04x, len %d \n",  buf,  0x2Cu);
    }

    if (*a2 == 165 && *((_DWORD *)a1 + 289) == 1 && *((_DWORD *)a1 + 286) == 1 && !*v10)
    {
      uint64_t result = 1LL;
      switch(v10[1])
      {
        case 0u:
          uint64_t result = __acc_auth_protocol_handleCertificateHash(a1, (uint64_t)v10, a4, a5);
          break;
        case 2u:
          uint64_t result = __acc_auth_protocol_handleCertificate(a1, v10, a4, a5);
          break;
        case 5u:
          uint64_t result = __acc_auth_protocol_handleCertificateChainCert(a1, v10, a4, a5);
          break;
        case 8u:
          uint64_t result = __acc_auth_protocol_handleResponse(a1, v10, a4, a5);
          break;
        default:
          return result;
      }
    }

    else
    {
      return 1LL;
    }
  }

  return result;
}

uint64_t __acc_auth_protocol_handleCertificateHash( unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4)
{
  uint64_t v21 = 0LL;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  int v8 = *(unsigned __int8 *)(a2 + 3);
  if (gLogObjects && gNumLogObjects >= 55)
  {
    uint64_t v9 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    uint64_t v9 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
    __acc_auth_protocol_handleCertificateHash_cold_2();
  }
  if (v8 == 32)
  {
    uint64_t v10 = (const void *)(a2 + 4);
    if (_acc_auth_protocol_certificateCacheGetCert( (uint64_t)a1,  (const void *)(a2 + 4),  0x20u,  (uint64_t)&v19))
    {
      uint64_t inited = acc_auth_protocol_initInfoCommonMessage(a1, 1u, a3, a4);
    }

    else
    {
      _acc_auth_protocol_setPeerLeafCertificateData(a1, (uint64_t)&v19);
      *(void *)&__int128 v16 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)buf = v16;
      __int128 v23 = v16;
      unsigned __int8 v18 = 0;
      uint64_t inited = _acc_auth_protocol_getSigningCertificateHash((uint64_t)a1, (uint64_t)&v19, buf, 0x20u, &v18);
      if ((inited & 0xFFFFFFFD) == 0)
      {
        if (!v18
          || _acc_auth_protocol_certificateCacheGetCert((uint64_t)a1, v10, 0x20u, (uint64_t)&v19)
          || (_acc_auth_protocol_cleanupCertificateData((uint64_t)&v19),
              _acc_auth_protocol_certificateCacheGetCert((uint64_t)a1, buf, v18, (uint64_t)&v19)))
        {
          uint64_t inited = _acc_auth_protocol_validatePeerCertificateChain((uint64_t)a1);
          if ((_DWORD)inited) {
            goto LABEL_12;
          }
          int v17 = 0;
        }

        else
        {
          int v17 = 1;
        }

        uint64_t inited = __acc_auth_protocol_sendCertChainRequestOrChallenge(a1, (uint64_t)&v19, v17, buf, v18, a3, a4);
        __int128 v19 = 0u;
        __int128 v20 = 0u;
        uint64_t v21 = 0LL;
      }
    }
  }

  else
  {
    uint64_t inited = 22LL;
  }

uint64_t __acc_auth_protocol_handleCertificate( unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned int a4)
{
  unsigned __int8 v33 = 0;
  uint64_t v32 = 0LL;
  memset(v31, 0, sizeof(v31));
  int v6 = a2[3];
  unsigned __int8 v7 = a2[4] + 1;
  unsigned int v8 = a2[5];
  unsigned int v9 = v7 * v8;
  unsigned int v10 = (v8 + 1023) / v8;
  if (gLogObjects && gNumLogObjects >= 55)
  {
    unsigned int v11 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    unsigned int v11 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    int v22 = *a1;
    int v23 = *((_DWORD *)a1 + 286);
    unsigned int v12 = (unsigned __int16)(v10 * v8);
    *(_DWORD *)buf = 67110144;
    *(_DWORD *)&uint8_t buf[4] = v22;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v23;
    *(_WORD *)&uint8_t buf[14] = 1024;
    LODWORD(v35) = v7 * v8;
    WORD2(v35) = 1024;
    *(_DWORD *)((char *)&v35 + 6) = (v8 + 1023) / v8;
    WORD5(v35) = 1024;
    HIDWORD(v35) = v12;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "[AccAuth][1Way] handleCertificate: sessionID %d, role %d, maxDataLen %d, maxCertSegments %d, maxCertSegmentedLen %d. \n",  buf,  0x20u);
  }

  else
  {
    unsigned int v12 = (unsigned __int16)(v10 * v8);
  }

  if (v12 >= v9)
  {
    if (v6)
    {
      if (v8 > a1[118])
      {
        uint64_t v14 = 1LL;
        int v13 = 1;
        goto LABEL_13;
      }

      int v15 = &startLogsNotificationObservers;
      if (a1[117] != v7)
      {
        uint64_t v14 = 1LL;
LABEL_26:
        int v13 = 1;
        goto LABEL_27;
      }
    }

    else
    {
      int v15 = &startLogsNotificationObservers;
      if (gLogObjects && gNumLogObjects >= 55)
      {
        __int128 v16 = *(os_log_s **)(gLogObjects + 432);
      }

      else
      {
        __int128 v16 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
        __acc_auth_protocol_handleCertificate_cold_2();
      }
      uint64_t CertificateData = acc_auth_protocol_setupSegmentedRecv(a1, 0LL, (uint64_t)(a1 + 120), v9, v8);
      if ((_DWORD)CertificateData)
      {
LABEL_25:
        uint64_t v14 = CertificateData;
        goto LABEL_26;
      }
    }

    uint64_t CertificateData = __acc_auth_protocol_processCertificateSegment(a1, a2, a3, a4, (char *)&v33);
    if (!(_DWORD)CertificateData)
    {
      if (!v33)
      {
        uint64_t v14 = 0LL;
        goto LABEL_26;
      }

      uint64_t CertificateData = _acc_auth_protocol_createCertificateData( *((const void **)a1 + 13),  *((unsigned __int16 *)a1 + 56),  (uint64_t)v31);
      if (!(_DWORD)CertificateData)
      {
        uint64_t CertificateData = _acc_auth_protocol_setPeerLeafCertificateData(a1, (uint64_t)v31);
        if (!(_DWORD)CertificateData)
        {
          *(void *)&__int128 v24 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v37[0] = v24;
          v37[1] = v24;
          unsigned __int8 v30 = 0;
          uint64_t SigningCertificateHash = _acc_auth_protocol_getSigningCertificateHash( (uint64_t)a1,  (uint64_t)v31,  v37,  0x20u,  &v30);
          if ((SigningCertificateHash & 0xFFFFFFFD) == 0)
          {
            if (v30
              && (uint64_t v36 = 0LL,
                  *(_OWORD *)buf = 0u,
                  __int128 v35 = 0u,
                  int Cert = _acc_auth_protocol_certificateCacheGetCert((uint64_t)a1, v37, v30, (uint64_t)buf),
                  _acc_auth_protocol_cleanupCertificateData((uint64_t)buf),
                  Cert))
            {
              int v27 = 1;
            }

            else
            {
              uint64_t v14 = _acc_auth_protocol_validatePeerCertificateChain((uint64_t)a1);
              int v27 = 0;
              int v13 = 0;
              if ((_DWORD)v14) {
                goto LABEL_27;
              }
            }

            uint64_t SigningCertificateHash = __acc_auth_protocol_sendCertChainRequestOrChallenge( a1,  (uint64_t)v31,  v27,  v37,  v30,  a3,  a4);
          }

          uint64_t v14 = SigningCertificateHash;
          int v13 = 0;
          goto LABEL_27;
        }
      }
    }

    goto LABEL_25;
  }

  int v13 = 1;
  uint64_t v14 = 12LL;
LABEL_13:
  int v15 = &startLogsNotificationObservers;
LABEL_27:
  if (gLogObjects && *((int *)v15 + 708) >= 55)
  {
    unsigned __int8 v18 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    unsigned __int8 v18 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    int v19 = *a1;
    int v20 = *((_DWORD *)a1 + 286);
    *(_DWORD *)buf = 67110400;
    *(_DWORD *)&uint8_t buf[4] = v19;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v20;
    *(_WORD *)&uint8_t buf[14] = 1024;
    LODWORD(v35) = v13;
    WORD2(v35) = 1024;
    *(_DWORD *)((char *)&v35 + 6) = DWORD2(v31[0]);
    WORD5(v35) = 1024;
    HIDWORD(v35) = v33;
    LOWORD(v36) = 1024;
    *(_DWORD *)((char *)&v36 + 2) = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "[AccAuth][1Way] handleCertificate: sessionID %d, role %d, cleanupCertData %d, certificateDataLen %d, transferFinis hed %d, errorNo %d \n",  buf,  0x26u);
  }

  if (v13) {
    _acc_auth_protocol_cleanupCertificateData((uint64_t)v31);
  }
  return v14;
}

uint64_t __acc_auth_protocol_handleCertificateChainCert( unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned int a4)
{
  unsigned __int8 v31 = 0;
  uint64_t v30 = 0LL;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  int v6 = a2[3];
  unsigned __int8 v7 = a2[4] + 1;
  unsigned int v8 = a2[5];
  unsigned int v9 = v7 * v8;
  unsigned int v10 = (v8 + 1023) / v8;
  if (gLogObjects && gNumLogObjects >= 55)
  {
    unsigned int v11 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    unsigned int v11 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    int v23 = *a1;
    int v24 = *((_DWORD *)a1 + 286);
    unsigned int v12 = (unsigned __int16)(v10 * v8);
    *(_DWORD *)buf = 67110144;
    *(_DWORD *)&uint8_t buf[4] = v23;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v24;
    *(_WORD *)&uint8_t buf[14] = 1024;
    LODWORD(v33) = v7 * v8;
    WORD2(v33) = 1024;
    *(_DWORD *)((char *)&v33 + 6) = (v8 + 1023) / v8;
    WORD5(v33) = 1024;
    HIDWORD(v33) = v12;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "[AccAuth][1Way] handleCertificateChainCert: sessionID %d, role %d, maxDataLen %d, maxCertSegments %d, maxCertSegmentedLen %d. \n",  buf,  0x20u);
  }

  else
  {
    unsigned int v12 = (unsigned __int16)(v10 * v8);
  }

  if (v12 < v9)
  {
    uint64_t CertificateData = 12LL;
LABEL_13:
    uint64_t v14 = &startLogsNotificationObservers;
    goto LABEL_14;
  }

  if (v6)
  {
    if (v8 > a1[118])
    {
      uint64_t CertificateData = 1LL;
      goto LABEL_13;
    }

    uint64_t v14 = &startLogsNotificationObservers;
    if (a1[117] != v7)
    {
      uint64_t CertificateData = 1LL;
      goto LABEL_14;
    }
  }

  else
  {
    uint64_t v14 = &startLogsNotificationObservers;
    if (gLogObjects && gNumLogObjects >= 55)
    {
      int v19 = *(os_log_s **)(gLogObjects + 432);
    }

    else
    {
      int v19 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
      __acc_auth_protocol_handleCertificateChainCert_cold_2();
    }
    uint64_t CertificateData = acc_auth_protocol_setupSegmentedRecv(a1, 0LL, (uint64_t)(a1 + 120), v9, v8);
    if ((_DWORD)CertificateData) {
      goto LABEL_14;
    }
  }

  uint64_t CertificateData = __acc_auth_protocol_processCertificateSegment(a1, a2, a3, a4, (char *)&v31);
  if (!(_DWORD)CertificateData)
  {
    if (v31)
    {
      uint64_t CertificateData = _acc_auth_protocol_createCertificateData( *((const void **)a1 + 13),  *((unsigned __int16 *)a1 + 56),  (uint64_t)&v28);
      if (!(_DWORD)CertificateData)
      {
        uint64_t CertificateData = _acc_auth_protocol_addPeerIntermediateCertificateData(a1, (uint64_t)&v28);
        if (!(_DWORD)CertificateData)
        {
          *(void *)&__int128 v20 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v35[0] = v20;
          v35[1] = v20;
          unsigned __int8 v27 = 0;
          uint64_t CertificateData = _acc_auth_protocol_getSigningCertificateHash((uint64_t)a1, (uint64_t)&v28, v35, 0x20u, &v27);
          if ((CertificateData & 0xFFFFFFFD) == 0)
          {
            if (v27
              && (uint64_t v34 = 0LL,
                  *(_OWORD *)buf = 0u,
                  __int128 v33 = 0u,
                  int Cert = _acc_auth_protocol_certificateCacheGetCert((uint64_t)a1, v35, v27, (uint64_t)buf),
                  _acc_auth_protocol_cleanupCertificateData((uint64_t)buf),
                  Cert))
            {
              int v22 = 1;
            }

            else
            {
              uint64_t CertificateData = _acc_auth_protocol_validatePeerCertificateChain((uint64_t)a1);
              if ((_DWORD)CertificateData) {
                goto LABEL_14;
              }
              int v22 = 0;
            }

            uint64_t CertificateData = __acc_auth_protocol_sendCertChainRequestOrChallenge( a1,  (uint64_t)&v28,  v22,  v35,  v27,  a3,  a4);
            __int128 v28 = 0u;
            __int128 v29 = 0u;
            uint64_t v30 = 0LL;
          }
        }
      }
    }

    else
    {
      uint64_t CertificateData = 0LL;
    }
  }

uint64_t __acc_auth_protocol_handleResponse( unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned int a4)
{
  int v6 = &startLogsNotificationObservers;
  if (gLogObjects && gNumLogObjects >= 55)
  {
    unsigned __int8 v7 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    unsigned __int8 v7 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    __acc_auth_protocol_handleResponse_cold_10();
  }
  int v8 = a2[2];
  uint64_t v53 = a1;
  if (v8 == 139)
  {
    unsigned int v10 = a2 + 4;
    int v11 = a2[3];
    unsigned __int8 v12 = a2[4] + 1;
    unsigned int v13 = a2[5];
    unsigned int v14 = v13 * v12;
    if (gLogObjects && gNumLogObjects >= 55)
    {
      int v15 = *(os_log_s **)(gLogObjects + 432);
    }

    else
    {
      int v15 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      int v22 = v53;
      int v41 = *v53;
      int v42 = *((_DWORD *)v53 + 286);
      unsigned int v21 = (unsigned __int16)((v13 + 127) / v13 * v13);
      *(_DWORD *)buf = 67110656;
      int v56 = v41;
      __int16 v57 = 1024;
      int v58 = v42;
      __int16 v59 = 1024;
      int v60 = v11;
      __int16 v61 = 1024;
      int v62 = v12;
      __int16 v63 = 1024;
      int v64 = v13;
      __int16 v65 = 1024;
      int v66 = v13 * v12;
      __int16 v67 = 1024;
      int v68 = v21;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "[AccAuth][1Way] handleResponse: sessionID %d, role %d, process responseDataSegment, seg (%d / %d), segLen %d, ma xDataLen %d, maxResponseDataLen %d \n",  buf,  0x2Cu);
    }

    else
    {
      unsigned int v21 = (unsigned __int16)((v13 + 127) / v13 * v13);
      int v22 = v53;
    }

    if (v21 < v14)
    {
      int v17 = 0;
      LOBYTE(v1_Block_object_dispose((const void *)(v9 - 64), 8) = 0;
      uint64_t updated = 12LL;
LABEL_32:
      int v6 = &startLogsNotificationObservers;
      goto LABEL_65;
    }

    if (v11)
    {
      if (v13 > v22[118])
      {
        int v17 = 0;
        LOBYTE(v1_Block_object_dispose((const void *)(v9 - 64), 8) = 0;
        uint64_t updated = 1LL;
        goto LABEL_32;
      }

      int v6 = &startLogsNotificationObservers;
      if (v22[117] != v12)
      {
        int v17 = 0;
        LOBYTE(v1_Block_object_dispose((const void *)(v9 - 64), 8) = 0;
        uint64_t updated = 1LL;
        goto LABEL_65;
      }
    }

    else
    {
      int v6 = &startLogsNotificationObservers;
      if (gLogObjects && gNumLogObjects >= 55)
      {
        __int16 v25 = *(os_log_s **)(gLogObjects + 432);
      }

      else
      {
        __int16 v25 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      int v22 = v53;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
        __acc_auth_protocol_handleResponse_cold_7();
      }
      uint64_t v31 = acc_auth_protocol_setupSegmentedRecv(v53, 0LL, (uint64_t)(v53 + 120), v14, v13);
      if ((_DWORD)v31)
      {
        uint64_t updated = v31;
        int v17 = 0;
        LOBYTE(v1_Block_object_dispose((const void *)(v9 - 64), 8) = 0;
        goto LABEL_65;
      }
    }

    char v54 = 0;
    int v37 = a2[3];
    int v50 = a2[2];
    if (v50 == 139)
    {
      unsigned int v38 = a2[5];
      uint64_t updated = acc_auth_protocol_updateSegmentReceive(v22, a2 + 6, v38, a2[1], 139, v37, a3, a4, (BOOL *)&v54);
    }

    else
    {
      if ((v37 & 0x80) != 0)
      {
        uint64_t v39 = v37 & 0x7F;
        if ((v37 & 0x7F) != 0)
        {
          int v37 = 0;
          do
          {
            int v40 = *v10++;
            int v37 = v40 | (v37 << 8);
            --v39;
          }

          while (v39);
        }

        else
        {
          int v37 = 0;
        }
      }

      uint64_t updated = 0LL;
      char v54 = 1;
      unsigned int v38 = v37;
      int v37 = 0;
    }

    if (gLogObjects && gNumLogObjects >= 55)
    {
      __int128 v43 = *(os_log_s **)(gLogObjects + 432);
    }

    else
    {
      __int128 v43 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    BOOL v44 = os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG);
    int v17 = v54;
    if (v44)
    {
      int v48 = *v53;
      int v49 = *((_DWORD *)v53 + 286);
      *(_DWORD *)buf = 67110400;
      int v56 = v48;
      __int16 v57 = 1024;
      int v58 = v49;
      __int16 v59 = 1024;
      int v60 = v50 == 139;
      __int16 v61 = 1024;
      int v62 = v37;
      __int16 v63 = 1024;
      int v64 = v38;
      __int16 v65 = 1024;
      int v66 = v54;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEBUG,  "[AccAuth][1Way] processResponseSegment: sessionID %d, role %d, segmented %d, segment %d, inSegmentLen %d, transf erFinished %d \n",  buf,  0x26u);
      int v17 = v54;
    }

    if (gLogObjects && gNumLogObjects >= 55)
    {
      uint64_t v45 = *(os_log_s **)(gLogObjects + 432);
    }

    else
    {
      uint64_t v45 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
    {
      int v46 = *v53;
      int v47 = *((_DWORD *)v53 + 286);
      *(_DWORD *)buf = 67110656;
      int v56 = v46;
      __int16 v57 = 1024;
      int v58 = v47;
      __int16 v59 = 1024;
      int v60 = v50 == 139;
      __int16 v61 = 1024;
      int v62 = v37;
      __int16 v63 = 1024;
      int v64 = v38;
      __int16 v65 = 1024;
      int v66 = v54;
      __int16 v67 = 1024;
      int v68 = updated;
      _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_INFO,  "[AccAuth][1Way] processResponseSegment: sessionID %d, role %d, segmented %d, segment %d, inSegmentLen %d, transf erFinished %d, errorNo %d \n",  buf,  0x2Cu);
    }

    LOBYTE(v1_Block_object_dispose((const void *)(v9 - 64), 8) = 0;
    int v16 = 0LL;
    if ((_DWORD)updated || !v17) {
      goto LABEL_45;
    }
    uint64_t updated = 0LL;
    int v16 = (const UInt8 *)*((void *)v53 + 13);
    LOBYTE(v1_Block_object_dispose((const void *)(v9 - 64), 8) = v53[112];
    goto LABEL_44;
  }

  if (v8 != 11)
  {
    int v16 = 0LL;
    int v17 = 0;
    LOBYTE(v1_Block_object_dispose((const void *)(v9 - 64), 8) = 0;
    uint64_t updated = 22LL;
    goto LABEL_45;
  }

  if (gLogObjects && gNumLogObjects >= 55)
  {
    unsigned int v9 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    unsigned int v9 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
    __acc_auth_protocol_handleResponse_cold_3();
  }
  __int128 v20 = a2 + 3;
  int v18 = (char)a2[3];
  int v16 = a2 + 4;
  if (v18 < 0)
  {
    uint64_t v23 = v18 & 0x7F;
    if ((v18 & 0x7F) != 0)
    {
      uint64_t v24 = v18 & 0x7F;
      do
      {
        ++v20;
        --v24;
      }

      while (v24);
      LOBYTE(v1_Block_object_dispose((const void *)(v9 - 64), 8) = *v20;
    }

    else
    {
      uint64_t v23 = 0LL;
      LOBYTE(v1_Block_object_dispose((const void *)(v9 - 64), 8) = 0;
    }

    uint64_t updated = 0LL;
    v16 += v23;
  }

  else
  {
    uint64_t updated = 0LL;
  }

LABEL_65:
  uint64_t v32 = v6[353];
  if (v32 && gNumLogObjects >= 55)
  {
    __int128 v33 = *(os_log_s **)(v32 + 432);
  }

  else
  {
    __int128 v33 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
  {
    int v34 = *v22;
    int v35 = *((_DWORD *)v22 + 286);
    *(_DWORD *)buf = 67110144;
    int v56 = v34;
    __int16 v57 = 1024;
    int v58 = v35;
    __int16 v59 = 1024;
    int v60 = v18;
    __int16 v61 = 1024;
    int v62 = v17;
    __int16 v63 = 1024;
    int v64 = updated;
    _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_INFO,  "[AccAuth][1Way] handleResponse: sessionID %d, role %d, responseLen %d, transferFinished %d, errorNo %d \n",  buf,  0x20u);
  }

  if (v17)
  {
    _acc_auth_protocol_handleSessionAuthenticationState(v22, (_DWORD)updated == 0);
    *(_OWORD *)(v22 + 1289) = 0u;
    *(_OWORD *)(v22 + 1305) = 0u;
    *(_OWORD *)(v22 + 1257) = 0u;
    *(_OWORD *)(v22 + 1273) = 0u;
    *(_OWORD *)(v22 + 1225) = 0u;
    *(_OWORD *)(v22 + 1241) = 0u;
    *(_OWORD *)(v22 + 1193) = 0u;
    *(_OWORD *)(v22 + 1209) = 0u;
  }

  return updated;
}

uint64_t __acc_auth_protocol_prepareMessageWithExtLenForCertificateData( unsigned __int8 *a1, uint64_t a2, int a3, unsigned __int8 a4, unsigned __int8 *a5, unsigned int a6)
{
  unsigned int v10 = *(_DWORD *)(a2 + 8) + 6;
  if (HIWORD(v10))
  {
    uint64_t inited = 22LL;
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 55)
    {
      unsigned int v13 = *(os_log_s **)(gLogObjects + 432);
    }

    else
    {
      unsigned int v13 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      int v23 = *a1;
      int v24 = *((_DWORD *)a1 + 286);
      int v25 = *(_DWORD *)(a2 + 8);
      int v26 = 67109888;
      int v27 = v23;
      __int16 v28 = 1024;
      int v29 = v24;
      __int16 v30 = 1024;
      int v31 = v25;
      __int16 v32 = 1024;
      unsigned int v33 = v10;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "[AccAuth][1Way] prepareMessageWithExtLenForCertificateData: sessionID %d, role %d, certLen %d, payloadLen %d \n",  (uint8_t *)&v26,  0x1Au);
    }

    uint64_t inited = acc_auth_protocol_initInfoCommonMessageExtendedLength(a1, a4, a5, a6, v10);
    if (!(_DWORD)inited)
    {
      int v15 = (_BYTE *)acc_auth_protocol_messagePayload((uint64_t)a5, a6, 0LL, 0LL, 0LL);
      if (a3 == 2)
      {
        char v16 = 2;
      }

      else
      {
        if (a3 != 5)
        {
LABEL_16:
          uint64_t inited = 0LL;
          goto LABEL_17;
        }

        char v16 = 5;
      }

      _DWORD v15[2] = v16;
      v15[3] = -126;
      uint8_t v15[4] = BYTE1(*(_DWORD *)(a2 + 8));
      v15[5] = *(_DWORD *)(a2 + 8);
      memcpy(v15 + 6, *(const void **)a2, *(unsigned int *)(a2 + 8));
      goto LABEL_16;
    }
  }

uint64_t __acc_auth_protocol_sendCertChainRequestOrChallenge( unsigned __int8 *a1, uint64_t a2, int a3, const void *a4, unsigned int a5, unsigned __int8 *a6, unsigned int a7)
{
  if (gLogObjects && gNumLogObjects >= 55)
  {
    unsigned int v14 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    unsigned int v14 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    __acc_auth_protocol_sendCertChainRequestOrChallenge_cold_2();
    if (a3) {
      goto LABEL_8;
    }
  }

  else if (a3)
  {
LABEL_8:
    uint64_t inited = acc_auth_protocol_initInfoCommonMessage(a1, 4u, a6, a7);
    char v16 = (_BYTE *)acc_auth_protocol_messagePayload((uint64_t)a6, a7, 0LL, 0LL, 0LL);
    _DWORD v16[2] = 4;
    v16[3] = a5;
    memcpy(v16 + 4, a4, a5);
    a6[3] += 34;
    goto LABEL_14;
  }

  if (a2)
  {
    size_t v17 = _acc_auth_protocol_challengeSizeForCertificate((uint64_t)a1, a2);
    a1[1192] = v17;
    uint64_t inited = _acc_auth_protocol_generateChallenge((uint64_t)a1, a2, a1 + 1160, v17);
    if (!(_DWORD)inited) {
      uint64_t inited = acc_auth_protocol_initInfoChallengeMessage(a1, a1 + 1160, a1[1192], a6, a7);
    }
  }

  else
  {
    uint64_t inited = 1LL;
  }

uint64_t __acc_auth_protocol_processCertificateSegment( unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned int a4, char *a5)
{
  char v25 = 0;
  int v7 = a2[3];
  int v8 = a2[2];
  BOOL v9 = v8 == 130;
  if (v8 == 133) {
    BOOL v9 = 1;
  }
  BOOL v24 = v9;
  if (v8 == 133 || v8 == 130)
  {
    unsigned int v10 = a2[5];
    uint64_t updated = acc_auth_protocol_updateSegmentReceive(a1, a2 + 6, v10, a2[1], v8, v7, a3, a4, (BOOL *)&v25);
  }

  else
  {
    unsigned __int8 v12 = a2 + 4;
    if ((v7 & 0x80) != 0)
    {
      uint64_t v13 = v7 & 0x7F;
      if ((v7 & 0x7F) != 0)
      {
        int v7 = 0;
        unsigned int v14 = a2 + 4;
        uint64_t v15 = v13;
        do
        {
          int v16 = *v14++;
          int v7 = v16 | (v7 << 8);
          --v15;
        }

        while (v15);
      }

      else
      {
        uint64_t v13 = 0LL;
        int v7 = 0;
      }

      v12 += v13;
    }

    uint64_t updated = 0LL;
    *((void *)a1 + 13) = v12;
    *((_WORD *)a1 + 56) = v7;
    char v25 = 1;
    unsigned int v10 = v7;
    int v7 = 0;
  }

  if (gLogObjects && gNumLogObjects >= 55)
  {
    size_t v17 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    size_t v17 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    int v22 = *a1;
    int v23 = *((_DWORD *)a1 + 286);
    *(_DWORD *)buf = 67110400;
    int v27 = v22;
    __int16 v28 = 1024;
    int v29 = v23;
    __int16 v30 = 1024;
    BOOL v31 = v24;
    __int16 v32 = 1024;
    int v33 = v7;
    __int16 v34 = 1024;
    unsigned int v35 = v10;
    __int16 v36 = 1024;
    int v37 = v25;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "[AccAuth][1Way] processCertificateSegment: sessionID %d, role %d, segmented %d, segment %d, inCertDataLen %d, tran sferFinished %d \n",  buf,  0x26u);
    if (!a5) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }

  if (a5) {
LABEL_21:
  }
    *a5 = v25;
LABEL_22:
  if (gLogObjects && gNumLogObjects >= 55)
  {
    int v18 = *(os_log_s **)(gLogObjects + 432);
  }

  else
  {
    int v18 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    int v19 = *a1;
    int v20 = *((_DWORD *)a1 + 286);
    *(_DWORD *)buf = 67110656;
    int v27 = v19;
    __int16 v28 = 1024;
    int v29 = v20;
    __int16 v30 = 1024;
    BOOL v31 = v24;
    __int16 v32 = 1024;
    int v33 = v7;
    __int16 v34 = 1024;
    unsigned int v35 = v10;
    __int16 v36 = 1024;
    int v37 = v25;
    __int16 v38 = 1024;
    int v39 = updated;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "[AccAuth][1Way] processCertificateSegment: sessionID %d, role %d, segmented %d, segment %d, inCertDataLen %d, tran sferFinished %d, errorNo %d \n",  buf,  0x2Cu);
  }

  return updated;
}

  ;
}

void OUTLINED_FUNCTION_4_12(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose((const void *)(v9 - 64), 8) = a1;
}

void OUTLINED_FUNCTION_5_11(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

void OUTLINED_FUNCTION_7_7(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void OUTLINED_FUNCTION_8_6( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void OUTLINED_FUNCTION_10_4(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose((const void *)(v9 - 64), 8) = a1;
}

void requestAuthorizationForCertSerial(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _DWORD v8[2] = __requestAuthorizationForCertSerial_block_invoke;
  v8[3] = &unk_1001FBA40;
  id v9 = a4;
  id v7 = v9;
  +[ACCAuthorizationManager requestAuthorizationForCertSerial:withName:providesPower:completionHandler:]( &OBJC_CLASS___ACCAuthorizationManager,  "requestAuthorizationForCertSerial:withName:providesPower:completionHandler:",  a1,  a2,  a3,  v8);
}

uint64_t __requestAuthorizationForCertSerial_block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t platform_hid_register_descriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (void *)objc_claimAutoreleasedReturnValue(+[ACCHIDServer sharedServer](&OBJC_CLASS___ACCHIDServer, "sharedServer"));
  [v6 registerHIDDescriptor:a1 componentID:a2 dictionary:a3];

  return 1LL;
}

uint64_t platform_hid_unregister_descriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACCHIDServer sharedServer](&OBJC_CLASS___ACCHIDServer, "sharedServer"));
  [v4 unregisterHIDDescriptor:a1 componentID:a2];

  return 1LL;
}

uint64_t platform_hid_unregister_all_descriptors(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ACCHIDServer sharedServer](&OBJC_CLASS___ACCHIDServer, "sharedServer"));
  [v2 unregisterAllDescriptors:a1];

  return 1LL;
}

uint64_t platform_hid_in_report(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (void *)objc_claimAutoreleasedReturnValue(+[ACCHIDServer sharedServer](&OBJC_CLASS___ACCHIDServer, "sharedServer"));
  [v6 inReport:a1 componentID:a2 report:a3];

  return 1LL;
}

uint64_t platform_hid_get_report_response(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue(+[ACCHIDServer sharedServer](&OBJC_CLASS___ACCHIDServer, "sharedServer"));
  [v10 getReportResponse:a1 componentID:a2 reportType:a3 reportID:a4 report:a5];

  return 1LL;
}

uint64_t platform_hid_send_out_report(const void *a1, const void *a2, const void *a3)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryAddValue(Mutable, @"ComponentID", a2);
  CFDictionaryAddValue(Mutable, @"Report", a3);
  uint64_t v7 = accFeatureHandlers_invokeHandler(a1, 9, (uint64_t)Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v7;
}

uint64_t platform_hid_send_get_report(const void *a1, const void *a2, const void *a3, const void *a4)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryAddValue(Mutable, @"ComponentID", a2);
  CFDictionaryAddValue(Mutable, @"ReportType", a3);
  CFDictionaryAddValue(Mutable, @"ReportID", a4);
  uint64_t v9 = accFeatureHandlers_invokeHandler(a1, 10, (uint64_t)Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v9;
}

uint64_t platform_hid_send_component_update(const void *a1, const void *a2, char a3)
{
  char valuePtr = a3;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCharType, &valuePtr);
  CFDictionaryAddValue(Mutable, @"ComponentID", a2);
  CFDictionaryAddValue(Mutable, @"Enabled", v6);
  uint64_t v7 = accFeatureHandlers_invokeHandler(a1, 11, (uint64_t)Mutable);
  if (v6) {
    CFRelease(v6);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v7;
}

void platform_hid_incrementUserCount()
{
  BOOL v0 = (void *)objc_claimAutoreleasedReturnValue(+[ACCHIDServer sharedServer](&OBJC_CLASS___ACCHIDServer, "sharedServer"));
  [v0 incrementUserCount];

  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[ACCHIDServer sharedServer](&OBJC_CLASS___ACCHIDServer, "sharedServer"));
  unsigned int v2 = [v1 featureUserCount];

  if (v2 == 1)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[ACCFeaturePluginManager sharedManager](&OBJC_CLASS___ACCFeaturePluginManager, "sharedManager"));
    [v3 startPlugInsWithClasses:&off_100206AB8];
  }

void platform_hid_decrementUserCount()
{
  id v0 = (id)objc_claimAutoreleasedReturnValue(+[ACCHIDServer sharedServer](&OBJC_CLASS___ACCHIDServer, "sharedServer"));
  [v0 decrementUserCount];
}

pthread_mutex_t **ea_control_openSessionHandler(pthread_mutex_t **result, CFDictionaryRef theDict)
{
  if (result)
  {
    unsigned int v2 = result;
    uint64_t result = 0LL;
    if (theDict)
    {
      if (*v2)
      {
        uint64_t result = (pthread_mutex_t **)CFDictionaryGetValue(theDict, kCFACCExternalAccessorySessionUUIDKey);
        if (result)
        {
          id v3 = (const __CFNull *)result;
          if (gLogObjects && gNumLogObjects >= 54)
          {
            uint64_t v4 = *(os_log_s **)(gLogObjects + 424);
          }

          else
          {
            uint64_t v4 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              _parseIdentificationParams_cold_2();
            }
          }

          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v5 = *(void *)&(*v2)->__opaque[8];
            int v7 = 138412546;
            uint64_t v8 = v5;
            __int16 v9 = 2112;
            unsigned int v10 = v3;
            _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Opening EA session for endpoint: %@ (sessionUUID: %@)",  (uint8_t *)&v7,  0x16u);
          }

          int v6 = acc_endpoint_setProperty(*v2, kCFACCProperties_Endpoint_EA_SessionUUID, v3);
          return (pthread_mutex_t **)(v6 & acc_endpoint_setProperty( *v2,  kCFACCProperties_Endpoint_EA_SessionOpen,  kCFBooleanTrue));
        }
      }
    }
  }

  return result;
}

pthread_mutex_t **ea_control_closeSessionHandler(pthread_mutex_t **result, CFDictionaryRef theDict)
{
  if (result)
  {
    unsigned int v2 = result;
    if (*result)
    {
      uint64_t result = (pthread_mutex_t **)CFDictionaryGetValue(theDict, kCFACCExternalAccessorySessionUUIDKey);
      if (result)
      {
        id v3 = result;
        if (gLogObjects && gNumLogObjects >= 54)
        {
          uint64_t v4 = *(os_log_s **)(gLogObjects + 424);
        }

        else
        {
          uint64_t v4 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            _parseIdentificationParams_cold_2();
          }
        }

        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v5 = *(void *)&(*v2)->__opaque[8];
          int v6 = 138412546;
          uint64_t v7 = v5;
          __int16 v8 = 2112;
          __int16 v9 = v3;
          _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Closing EA session for endpoint: %@ (sessionUUID: %@)",  (uint8_t *)&v6,  0x16u);
        }

        return (pthread_mutex_t **)acc_endpoint_setProperty( *v2,  kCFACCProperties_Endpoint_EA_SessionOpen,  kCFBooleanFalse);
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t iap2_CarPlayStartSession(uint64_t a1, uint64_t a2)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  uint64_t v5 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  CFStringRef v6 = 0LL;
  uint64_t v7 = 0LL;
  CFStringRef v67 = 0LL;
  if (!a1)
  {
    CFStringRef cf = 0LL;
    CFNumberRef v68 = 0LL;
    CFStringRef v63 = 0LL;
    CFStringRef v64 = 0LL;
    goto LABEL_82;
  }

  CFStringRef cf = 0LL;
  CFNumberRef v68 = 0LL;
  CFStringRef v63 = 0LL;
  CFStringRef v64 = 0LL;
  if (!a2) {
    goto LABEL_82;
  }
  if (iAP2MsgGetMsgID(a2) != 17153)
  {
    uint64_t v7 = 0LL;
    CFStringRef cf = 0LL;
    CFStringRef v67 = 0LL;
    CFNumberRef v68 = 0LL;
    CFStringRef v63 = 0LL;
    CFStringRef v64 = 0LL;
    CFStringRef v6 = 0LL;
    goto LABEL_82;
  }

  CFArrayRef theArray = Mutable;
  kdebug_trace(731147620LL, 0LL, 0LL, 0LL, 0LL);
  if (gLogObjects && gNumLogObjects >= 52)
  {
    __int16 v8 = *(os_log_s **)(gLogObjects + 408);
  }

  else
  {
    __int16 v8 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = 17153;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "iap2_CarPlayStartSession: Received message 0x%x",  buf,  8u);
  }

  uint64_t v59 = a1;
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
  int v70 = -1431655766;
  if (!FirstParam)
  {
    CFStringRef cf = 0LL;
    CFStringRef v67 = 0LL;
    CFNumberRef v68 = 0LL;
    CFNumberRef v65 = 0LL;
    CFNumberRef v62 = 0LL;
    CFStringRef v63 = 0LL;
    CFStringRef v64 = 0LL;
    CFStringRef v60 = 0LL;
    CFBooleanRef v61 = 0LL;
LABEL_74:
    platform_externalAccesory_legacyConnectionUUIDForPrimaryEndpointUUID(*(void **)(v59 + 8));
    if (gLogObjects && gNumLogObjects >= 52)
    {
      int v41 = *(os_log_s **)(gLogObjects + 408);
      CFNumberRef v42 = v68;
      CFMutableArrayRef Mutable = theArray;
      CFStringRef v44 = v63;
      CFStringRef v43 = v64;
      CFStringRef v46 = cf;
      CFStringRef v45 = v67;
    }

    else
    {
      int v41 = (os_log_s *)&_os_log_default;
      CFNumberRef v42 = v68;
      CFMutableArrayRef Mutable = theArray;
      CFStringRef v44 = v63;
      CFStringRef v43 = v64;
      CFStringRef v46 = cf;
      CFStringRef v45 = v67;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    CFStringRef v6 = v60;
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138414850;
      *(void *)&uint8_t buf[4] = Mutable;
      __int16 v72 = 2112;
      unsigned int v73 = v5;
      __int16 v74 = 2112;
      CFStringRef v75 = v45;
      __int16 v76 = 2112;
      CFStringRef v77 = v46;
      __int16 v78 = 2112;
      CFNumberRef v79 = v42;
      __int16 v80 = 2112;
      CFNumberRef v81 = v65;
      __int16 v82 = 2112;
      CFNumberRef v83 = v62;
      __int16 v84 = 2112;
      CFStringRef v85 = v44;
      __int16 v86 = 2112;
      CFStringRef v87 = v43;
      __int16 v88 = 2112;
      CFStringRef v89 = v60;
      __int16 v90 = 2112;
      CFBooleanRef v91 = v61;
      _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "iap2_CarPlayStartSession: call platform_CarPlay_startSession, usbIP %@, wifiIP %@, ssid %@, pass %@, securityTyp e %@, channel %@, port %@, deviceID %@, pubKey %@, srcVer %@, mutualAuth %@",  buf,  0x70u);
    }

    platform_CarPlay_sendConnectionEvent();
    uint64_t v7 = 1LL;
    goto LABEL_82;
  }

  unsigned int v10 = (unsigned __int16 *)FirstParam;
  CFStringRef v60 = 0LL;
  CFBooleanRef v61 = 0LL;
  CFStringRef v63 = 0LL;
  CFStringRef v64 = 0LL;
  CFNumberRef v62 = 0LL;
  CFNumberRef v65 = 0LL;
  CFStringRef cf = 0LL;
  CFStringRef v67 = 0LL;
  CFNumberRef v68 = 0LL;
  while (2)
  {
    int ParamID = iAP2MsgGetParamID((uint64_t)v10);
    switch(ParamID)
    {
      case 0:
        unint64_t v12 = iAP2MsgGetFirstParam(a2, v10);
        if (!v12) {
          goto LABEL_71;
        }
        NextParam = (unsigned __int16 *)v12;
        while (2)
        {
          int v14 = iAP2MsgGetParamID((uint64_t)NextParam);
          if (v14)
          {
            int v15 = v14;
            uint64_t v16 = gLogObjects;
            int v17 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 52)
            {
              int v18 = *(os_log_s **)(gLogObjects + 408);
            }

            else
            {
              int v18 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)&uint8_t buf[4] = v16;
                __int16 v72 = 1024;
                LODWORD(v73) = v17;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                int v18 = (os_log_s *)&_os_log_default;
              }
            }

            if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v15;
              _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "Unrecognized USB group paramID:0x%04X",  buf,  8u);
            }
          }

          else
          {
            DataAsString = iAP2MsgGetDataAsString(NextParam, (BOOL *)&v70);
            if (v70)
            {
              int v48 = (os_log_s *)logObjectForModule_6();
              if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
                iap2_CarPlayStartSession_cold_2(a2);
              }
              goto LABEL_121;
            }

            CFStringRef v20 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)DataAsString, 0x8000100u);
            if (v20)
            {
              CFStringRef v21 = v20;
              CFArrayAppendValue(theArray, v20);
              CFRelease(v21);
            }
          }

          NextParam = iAP2MsgGetNextParam(a2, v10, NextParam);
          if (!NextParam) {
            goto LABEL_71;
          }
          continue;
        }

      case 1:
        unint64_t v22 = iAP2MsgGetFirstParam(a2, v10);
        if (!v22) {
          goto LABEL_71;
        }
        int v23 = (unsigned __int16 *)v22;
        while (2)
        {
          int v24 = iAP2MsgGetParamID((uint64_t)v23);
          switch(v24)
          {
            case 0:
              char v25 = iAP2MsgGetDataAsString(v23, (BOOL *)&v70);
              if (!v70)
              {
                CFStringRef v67 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v25, 0x8000100u);
                goto LABEL_50;
              }

              int v49 = (os_log_s *)logObjectForModule_6();
              if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR)) {
                iap2_CarPlayStartSession_cold_3(a2);
              }
              goto LABEL_121;
            case 1:
              int v29 = iAP2MsgGetDataAsString(v23, (BOOL *)&v70);
              if (v70)
              {
                unsigned int v52 = (os_log_s *)logObjectForModule_6();
                if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
                  iap2_CarPlayStartSession_cold_4(a2);
                }
                goto LABEL_121;
              }

              CFStringRef cf = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v29, 0x8000100u);
              goto LABEL_50;
            case 2:
              *(void *)buf = 0xAAAAAAAAAAAAAAAALL;
              *(void *)buf = iAP2MsgGetDataAsU8(v23, &v70);
              if (v70)
              {
                int v50 = (os_log_s *)logObjectForModule_6();
                if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
                  iap2_CarPlayStartSession_cold_5(a2);
                }
                goto LABEL_121;
              }

              CFNumberRef v65 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, buf);
              goto LABEL_50;
            case 3:
              __int16 v30 = iAP2MsgGetDataAsString(v23, (BOOL *)&v70);
              if (v70)
              {
                uint64_t v53 = (os_log_s *)logObjectForModule_6();
                if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
                  iap2_CarPlayStartSession_cold_6(a2);
                }
                goto LABEL_121;
              }

              CFStringRef v31 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v30, 0x8000100u);
              if (v31)
              {
                CFStringRef v32 = v31;
                CFArrayAppendValue(v5, v31);
                CFRelease(v32);
              }

              goto LABEL_50;
            case 4:
              buf[0] = -86;
              buf[0] = iAP2MsgGetDataAsU8(v23, &v70);
              if (!v70)
              {
                CFNumberRef v68 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, buf);
LABEL_50:
                int v23 = iAP2MsgGetNextParam(a2, v10, v23);
                if (!v23) {
                  goto LABEL_71;
                }
                continue;
              }

              unint64_t v51 = (os_log_s *)logObjectForModule_6();
              if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
                iap2_CarPlayStartSession_cold_7(a2);
              }
              break;
            default:
              uint64_t v26 = gLogObjects;
              int v27 = gNumLogObjects;
              if (gLogObjects && gNumLogObjects >= 52)
              {
                __int16 v28 = *(os_log_s **)(gLogObjects + 408);
              }

              else
              {
                __int16 v28 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134218240;
                  *(void *)&uint8_t buf[4] = v26;
                  __int16 v72 = 1024;
                  LODWORD(v73) = v27;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                  __int16 v28 = (os_log_s *)&_os_log_default;
                }
              }

              if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v24;
                _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_INFO,  "Unrecognized Wireless group paramID:0x%04X",  buf,  8u);
              }

              goto LABEL_50;
          }

          goto LABEL_121;
        }

      case 2:
        *(void *)buf = 0xAAAAAAAAAAAAAAAALL;
        *(void *)buf = iAP2MsgGetDataAsU32(v10, &v70);
        if (v70)
        {
          char v54 = (os_log_s *)logObjectForModule_6();
          if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
            iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_3(a2);
          }
          goto LABEL_121;
        }

        CFNumberRef v62 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, buf);
        goto LABEL_71;
      case 3:
        int v33 = iAP2MsgGetDataAsString(v10, (BOOL *)&v70);
        if (v70)
        {
          unsigned __int16 v55 = (os_log_s *)logObjectForModule_6();
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
            iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_4(a2);
          }
          goto LABEL_121;
        }

        CFStringRef v63 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v33, 0x8000100u);
        goto LABEL_71;
      case 4:
        __int16 v34 = iAP2MsgGetDataAsString(v10, (BOOL *)&v70);
        if (v70)
        {
          int v56 = (os_log_s *)logObjectForModule_6();
          if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
            iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_5(a2);
          }
          goto LABEL_121;
        }

        CFStringRef v64 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v34, 0x8000100u);
        goto LABEL_71;
      case 5:
        unsigned int v35 = iAP2MsgGetDataAsString(v10, (BOOL *)&v70);
        if (v70)
        {
          __int16 v57 = (os_log_s *)logObjectForModule_6();
          if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR)) {
            iap2_CarPlayStartSession_cold_11(a2);
          }
          goto LABEL_121;
        }

        CFStringRef v60 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v35, 0x8000100u);
        goto LABEL_71;
      case 8:
        BOOL DataAsBool = iAP2MsgGetDataAsBool(v10, (BOOL *)&v70);
        if (!v70)
        {
          CFBooleanRef v40 = kCFBooleanTrue;
          if (!DataAsBool) {
            CFBooleanRef v40 = kCFBooleanFalse;
          }
          CFBooleanRef v61 = v40;
LABEL_71:
          unsigned int v10 = iAP2MsgGetNextParam(a2, 0LL, v10);
          if (!v10) {
            goto LABEL_74;
          }
          continue;
        }

        int v58 = (os_log_s *)logObjectForModule_6();
        if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
          iap2_CarPlayStartSession_cold_12(a2);
        }
LABEL_121:
        uint64_t v7 = 0LL;
        CFMutableArrayRef Mutable = theArray;
        CFStringRef v6 = v60;
LABEL_82:
        if (Mutable) {
          CFRelease(Mutable);
        }
        if (v5) {
          CFRelease(v5);
        }
        if (v67) {
          CFRelease(v67);
        }
        if (cf) {
          CFRelease(cf);
        }
        if (v68) {
          CFRelease(v68);
        }
        if (v63) {
          CFRelease(v63);
        }
        if (v64) {
          CFRelease(v64);
        }
        if (v6) {
          CFRelease(v6);
        }
        return v7;
      default:
        uint64_t v36 = gLogObjects;
        int v37 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 52)
        {
          __int16 v38 = *(os_log_s **)(gLogObjects + 408);
        }

        else
        {
          __int16 v38 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)&uint8_t buf[4] = v36;
            __int16 v72 = 1024;
            LODWORD(v73) = v37;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            __int16 v38 = (os_log_s *)&_os_log_default;
          }
        }

        if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = ParamID;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "Unrecognized paramID:0x%04X", buf, 8u);
        }

        goto LABEL_71;
    }
  }

uint64_t iap2_CarPlayAvailability(uint64_t *a1, const __CFDictionary *a2)
{
  uint64_t v2 = 0LL;
  if (a1 && a2)
  {
    if (gLogObjects && gNumLogObjects >= 52)
    {
      uint64_t v5 = *(os_log_s **)(gLogObjects + 408);
    }

    else
    {
      uint64_t v5 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[1];
      int v16 = 138412546;
      uint64_t v17 = v6;
      __int16 v18 = 2112;
      int v19 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "iap2_CarPlayAvailability: %@, parameters %@",  (uint8_t *)&v16,  0x16u);
    }

    uint64_t Value = (const __CFBoolean *)CFDictionaryGetValue(a2, @"wiredAvailable");
    __int16 v8 = (const __CFString *)CFDictionaryGetValue(a2, @"usbIdentifier");
    __int16 v9 = (const __CFBoolean *)CFDictionaryGetValue(a2, @"wirelessAvailable");
    unsigned int v10 = (const __CFString *)CFDictionaryGetValue(a2, @"bluetoothIdentifier");
    if (gLogObjects && gNumLogObjects >= 52)
    {
      int v11 = *(os_log_s **)(gLogObjects + 408);
    }

    else
    {
      int v11 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = a1[1];
      int v16 = 138413314;
      uint64_t v17 = v12;
      __int16 v18 = 2112;
      int v19 = Value;
      __int16 v20 = 2112;
      CFStringRef v21 = v8;
      __int16 v22 = 2112;
      int v23 = v9;
      __int16 v24 = 2112;
      char v25 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "iap2_CarPlayAvailability: %@, wiredAvailable %@, usbIdentifier %@, wirelessAvailable %@, bluetoothIdentifier %@",  (uint8_t *)&v16,  0x34u);
    }

    if ((unint64_t)Value | (unint64_t)v9)
    {
      iAP2MsgInit((uint64_t)(a1 + 15), 17152, a1[24], 0xFFFF, 0LL, 0LL);
      if (Value)
      {
        uint64_t v13 = iAP2MsgAddGroupParam((uint64_t)(a1 + 15), 0);
        iAP2MsgAddCFBooleanParam((uint64_t)(a1 + 15), (uint64_t)v13, 0, Value);
        if (v8) {
          iAP2MsgAddCFStringParam((uint64_t)(a1 + 15), (uint64_t)v13, 1, v8);
        }
      }

      if (v9)
      {
        int v14 = iAP2MsgAddGroupParam((uint64_t)(a1 + 15), 1);
        iAP2MsgAddCFBooleanParam((uint64_t)(a1 + 15), (uint64_t)v14, 0, v9);
        if (v10) {
          iAP2MsgAddCFStringParam((uint64_t)(a1 + 15), (uint64_t)v14, 1, v10);
        }
      }

      uint64_t v2 = iap2_sessionControl_sendOutgoingMessage(a1, (uint64_t)(a1 + 15));
      kdebug_trace(731147616LL, 0LL, 0LL, 0LL, 0LL);
    }

    else
    {
      return 0LL;
    }
  }

  return v2;
}

uint64_t iAP2_carPlayConnectionType(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(int *)(*(void *)result + 24LL);
    else {
      return dword_10019E420[v1];
    }
  }

  return result;
}

void iAP2_carPlaySendAllConnectionEvents(uint64_t a1)
{
  uint64_t Feature = iap2_feature_getFeature(a1, 0);
  iAP2_carPlayConnectionType(a1);
  if (gLogObjects && gNumLogObjects >= 52)
  {
    id v3 = *(os_log_s **)(gLogObjects + 408);
  }

  else
  {
    id v3 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 456);
    uint64_t v5 = *(void *)(Feature + 80);
    uint64_t v6 = *(void *)(Feature + 88);
    int v7 = 134218496;
    uint64_t v8 = v4;
    __int16 v9 = 2048;
    uint64_t v10 = v5;
    __int16 v11 = 2048;
    uint64_t v12 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Accessory identification accepted and identified for CarPlay. Sending iAP connection times: %f, %f, %f",  (uint8_t *)&v7,  0x20u);
  }

  platform_CarPlay_sendConnectionEvent();
  platform_CarPlay_sendConnectionEvent();
  platform_CarPlay_sendConnectionEvent();
}

_BYTE *_createFeature_10(_BYTE *result)
{
  if (result)
  {
    uint64_t result = calloc(1uLL, 2uLL);
    if (result) {
      result[1] = 0;
    }
  }

  return result;
}

uint64_t _destroyFeature_10(void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2)
    {
      free(v2);
      *a1 = 0LL;
    }
  }

  return 0LL;
}

uint64_t _checkIdentificationInfo_8(uint64_t a1)
{
  char v6 = 0;
  uint64_t v2 = iap2_identification_checkIdentificationMsgIDs(a1, (uint64_t)&kMsgCarPlayConnectionRequestList, 2u, &v6);
  if ((_DWORD)v2) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = v6 == 0;
  }
  if (!v3)
  {
    iap2_features_createFeature(a1, 0x1Au);
    iap2_identification_setIdentifiedForFeature(a1, 0x1Au);
    if (gLogObjects && gNumLogObjects >= 52)
    {
      uint64_t v4 = *(os_log_s **)(gLogObjects + 408);
    }

    else
    {
      uint64_t v4 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      _checkIdentificationInfo_cold_1_2(v4);
    }
  }

  return v2;
}

void OUTLINED_FUNCTION_1_1( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

id _getPowerPluginInstance()
{
  id v0 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformPluginManager sharedManager](&OBJC_CLASS___ACCPlatformPluginManager, "sharedManager"));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( [v0 pluginInstanceWithProtocol:&OBJC_PROTOCOL___ACCPlatformPowerPluginProtocol fallbackToTransportPlugins:1]);

  return v1;
}

id _getIOKitPowerPluginInstance()
{
  id v0 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformPluginManager sharedManager](&OBJC_CLASS___ACCPlatformPluginManager, "sharedManager"));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( [v0 pluginInstanceWithProtocol:&OBJC_PROTOCOL___ACCPlatformIOKitPowerPluginProtocol fallbackToTransportPlugins:1]);

  return v1;
}

BOOL _isModelNumberConnected(const void *a1, void *a2)
{
  BOOL v3 = a2;
  EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
  BOOL v9 = EndpointWithUUID
    && *EndpointWithUUID
    && (uint64_t v5 = (const void *)EndpointWithUUID[1]) != 0LL
    && (ConnectionWithUUID = acc_manager_getConnectionWithUUID(v5)) != 0LL
    && (uint64_t AccessoryInfo = acc_connection_getAccessoryInfo((uint64_t)ConnectionWithUUID)) != 0
    && (uint64_t v8 = *(const __CFString **)(AccessoryInfo + 16)) != 0LL
    && CFStringCompare(v8, v3, 0LL) == kCFCompareEqualTo;

  return v9;
}

void _isPowerDuringSleepForApplePencil(const void *a1)
{
  EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
  if (EndpointWithUUID
    && (BOOL v3 = (const void *)EndpointWithUUID[2]) != 0LL
    && _isModelNumberConnected(v3, @"A1603")
    && platform_systemInfo_isApplePencilSupported())
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformPowerManager sharedManager](&OBJC_CLASS___ACCPlatformPowerManager, "sharedManager"));
    [v4 addAccessoryForEndpointUID:a1 andBitmask:0 andOldBitmask:0];

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformPowerManager sharedManager](&OBJC_CLASS___ACCPlatformPowerManager, "sharedManager"));
    char v6 = (void *)objc_claimAutoreleasedReturnValue([v5 powerAccessories]);
    int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:a1]);

    if (!v7)
    {
      id v25 = logObjectForModule_16();
      __int16 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        _isPowerDuringSleepForApplePencil_cold_1(v22);
      }
      int v7 = 0LL;
      goto LABEL_26;
    }

    id PowerPluginInstance = _getPowerPluginInstance();
    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue(PowerPluginInstance);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v7 connectionUID]);
    unsigned int v11 = [v9 sleepPowerCurrentLimitInmA:v10];

    IOKitid PowerPluginInstance = _getIOKitPowerPluginInstance();
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(IOKitPowerPluginInstance);
    unsigned int v14 = [v13 getBatteryChargeLevel];

    if (gLogObjects && gNumLogObjects >= 8)
    {
      int v15 = (os_log_s *)*(id *)(gLogObjects + 56);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      int v15 = (os_log_s *)&_os_log_default;
      id v16 = &_os_log_default;
    }

    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      int v26 = 67109376;
      LODWORD(v27[0]) = v11;
      WORD2(v27[0]) = 1024;
      *(_DWORD *)((char *)v27 + 6) = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "[#Power] sleepPowerCurrentLimitInmA: %d, current iOS battery level percentage: %d",  (uint8_t *)&v26,  0xEu);
    }

    if (v11 == 100 && v14 >= 0xB)
    {
      platform_sleepAssertion_createForApplePencil(v17);
      [v7 setHoldingApplePencilSleepAssertion:1];
      __int16 v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
      [v18 addObserver:v7 selector:"powerInfoChangeNotificationHandler:" name:ACCPlatformIOKitPowerPlugin_BatteryChargeLevel object:0];

      id v19 = _getIOKitPowerPluginInstance();
      __int16 v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      CFStringRef v21 = (void *)objc_claimAutoreleasedReturnValue([v20 createBatteryNotificationClient]);
      [v7 setApplePencilBatteryNotificationClientUUID:v21];

      if (gLogObjects && gNumLogObjects >= 8)
      {
        __int16 v22 = (os_log_s *)*(id *)(gLogObjects + 56);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        __int16 v22 = (os_log_s *)&_os_log_default;
        id v23 = &_os_log_default;
      }

      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        __int16 v24 = (void *)objc_claimAutoreleasedReturnValue([v7 applePencilBatteryNotificationClientUUID]);
        int v26 = 138412290;
        v27[0] = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "[#Power] Created applePencilBatteryNotificationClientUUID: %@",  (uint8_t *)&v26,  0xCu);
      }

id logObjectForModule_16()
{
  if (gLogObjects) {
    BOOL v0 = gNumLogObjects < 8;
  }
  else {
    BOOL v0 = 1;
  }
  if (v0)
  {
    BOOL v1 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v1) {
      logObjectForModule_cold_1(v1, v2, v3, v4, v5, v6, v7, v8);
    }
    id v10 = &_os_log_default;
    id v9 = &_os_log_default;
  }

  else
  {
    id v10 = *(id *)(gLogObjects + 56);
  }

  return v10;
}

void _isDisablingPowerDuringSleepForApplePencil(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformPowerManager sharedManager](&OBJC_CLASS___ACCPlatformPowerManager, "sharedManager"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 powerAccessories]);
  id v9 = (id)objc_claimAutoreleasedReturnValue([v3 objectForKey:a1]);

  id v4 = [v9 holdingApplePencilSleepAssertion];
  if ((_DWORD)v4)
  {
    platform_sleepAssertion_createForApplePencil(v4);
    [v9 setHoldingApplePencilSleepAssertion:0];
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v9 applePencilBatteryNotificationClientUUID]);

  if (v5)
  {
    IOKitid PowerPluginInstance = _getIOKitPowerPluginInstance();
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(IOKitPowerPluginInstance);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v9 applePencilBatteryNotificationClientUUID]);
    [v7 destroyBatteryNotificationsForClient:v8];

    [v9 setApplePencilBatteryNotificationClientUUID:0];
  }
}

uint64_t platform_power_sendPowerUpdate(const void *a1, int a2, int a3, int a4, int a5)
{
  uint64_t v35 = 0LL;
  uint64_t v36 = &v35;
  uint64_t v37 = 0x2020000000LL;
  char v38 = 1;
  if (gLogObjects) {
    BOOL v10 = gNumLogObjects < 8;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v12 = (os_log_s *)&_os_log_default;
    id v11 = &_os_log_default;
  }

  else
  {
    uint64_t v12 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136316674;
    CFBooleanRef v40 = "platform_power_sendPowerUpdate";
    __int16 v41 = 1024;
    *(_DWORD *)CFNumberRef v42 = 286;
    *(_WORD *)&v42[4] = 2112;
    *(void *)&v42[6] = a1;
    __int16 v43 = 1024;
    int v44 = a2;
    __int16 v45 = 1024;
    int v46 = a3;
    __int16 v47 = 1024;
    int v48 = a4;
    __int16 v49 = 1024;
    int v50 = a5;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "[#Power] %s:%d endpointUID %@, powerUpdateType %d: %d, powerUpdateType2 %d: %d",  buf,  0x34u);
  }

  if (!acc_userDefaults_BOOLForKey((uint64_t)@"DisablePowerUpdateForCurrentDraw"))
  {
LABEL_54:
    int v21 = a4;
    int v22 = a5;
    a5 = a3;
    a4 = a2;
    if (!a1) {
      goto LABEL_72;
    }
    goto LABEL_70;
  }

  if (a4)
  {
    if (a2)
    {
      if (a4 != 1) {
        goto LABEL_50;
      }
      if (gLogObjects && gNumLogObjects >= 8)
      {
        uint64_t v13 = (os_log_s *)*(id *)(gLogObjects + 56);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
        uint64_t v13 = (os_log_s *)&_os_log_default;
        id v19 = &_os_log_default;
      }

      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136316418;
        CFBooleanRef v40 = "platform_power_sendPowerUpdate";
        __int16 v41 = 2112;
        *(void *)CFNumberRef v42 = a1;
        *(_WORD *)&v42[8] = 1024;
        *(_DWORD *)&v42[10] = 1;
        __int16 v43 = 1024;
        int v44 = 13;
        __int16 v45 = 1024;
        int v46 = a5;
        __int16 v47 = 1024;
        int v48 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "[#Power] %s: endpoint: %@, updateType2: %d -> %d, updateValue2: %u -> %d",  buf,  0x2Eu);
      }

      a4 = a2;
      a5 = a3;
      goto LABEL_49;
    }

LABEL_49:
    a2 = a4;
    a3 = a5;
    a4 = 13;
    a5 = 0;
    goto LABEL_50;
  }

  if (gLogObjects && gNumLogObjects >= 8)
  {
    unsigned int v14 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    unsigned int v14 = (os_log_s *)&_os_log_default;
    id v15 = &_os_log_default;
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316418;
    CFBooleanRef v40 = "platform_power_sendPowerUpdate";
    __int16 v41 = 2112;
    *(void *)CFNumberRef v42 = a1;
    *(_WORD *)&v42[8] = 1024;
    *(_DWORD *)&v42[10] = 0;
    __int16 v43 = 1024;
    int v44 = 13;
    __int16 v45 = 1024;
    int v46 = a5;
    __int16 v47 = 1024;
    int v48 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "[#Power] %s: endpoint: %@, updateType2: %d -> %d, updateValue2: %u -> %d",  buf,  0x2Eu);
  }

  a5 = 0;
  a4 = 13;
  if (!a2) {
    goto LABEL_27;
  }
LABEL_50:
  if (a2 != 1) {
    goto LABEL_54;
  }
  if (gLogObjects && gNumLogObjects >= 8)
  {
    __int16 v20 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v20 = (os_log_s *)&_os_log_default;
    id v23 = &_os_log_default;
  }

  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316418;
    CFBooleanRef v40 = "platform_power_sendPowerUpdate";
    __int16 v41 = 2112;
    *(void *)CFNumberRef v42 = a1;
    *(_WORD *)&v42[8] = 1024;
    *(_DWORD *)&v42[10] = 1;
    __int16 v43 = 1024;
    int v44 = a4;
    __int16 v45 = 1024;
    int v46 = a3;
    __int16 v47 = 1024;
    int v48 = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "[#Power] %s: endpoint: %@, updateType: %d -> %d, updateValue: %u -> %d",  buf,  0x2Eu);
  }

  if (gLogObjects && gNumLogObjects >= 8)
  {
    __int16 v24 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v24 = (os_log_s *)&_os_log_default;
    id v25 = &_os_log_default;
  }

  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316418;
    CFBooleanRef v40 = "platform_power_sendPowerUpdate";
    __int16 v41 = 2112;
    *(void *)CFNumberRef v42 = a1;
    *(_WORD *)&v42[8] = 1024;
    *(_DWORD *)&v42[10] = a4;
    __int16 v43 = 1024;
    int v44 = 13;
    __int16 v45 = 1024;
    int v46 = a5;
    __int16 v47 = 1024;
    int v48 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "[#Power] %s: endpoint: %@, updateType2: %d -> %d, updateValue2: %u -> %d",  buf,  0x2Eu);
  }

  int v22 = 0;
  int v21 = 13;
  if (a1)
  {
LABEL_70:
    if (a4 != 13)
    {
      CFRetain(a1);
      dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
      int v27 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472LL;
      v30[2] = __platform_power_sendPowerUpdate_block_invoke;
      v30[3] = &unk_1001FBAC8;
      int v31 = a4;
      int v32 = a5;
      int v33 = v21;
      int v34 = v22;
      v30[4] = &v35;
      v30[5] = a1;
      dispatch_async(v27, v30);
    }
  }

LABEL_38:
    v5[2](v5, v6);
    goto LABEL_39;
  }

  if (gLogObjects) {
    uint64_t v12 = gNumLogObjects <= 8;
  }
  else {
    uint64_t v12 = 1;
  }
  uint64_t v13 = !v12;
  if (*((_DWORD *)EndpointWithUUID + 7) != 14)
  {
    if (v13)
    {
      id v15 = (os_log_s *)*(id *)(gLogObjects + 64);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v15 = (os_log_s *)&_os_log_default;
      id v17 = &_os_log_default;
    }

    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_resetPairing_cold_2(v11);
    }

    goto LABEL_38;
  }

  if (v13)
  {
    unsigned int v14 = (os_log_s *)*(id *)(gLogObjects + 64);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    unsigned int v14 = (os_log_s *)&_os_log_default;
    id v16 = &_os_log_default;
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    v25[0] = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "platform_connectionInfo_resetPairing: mfi4Auth_endpoint_erasePairing",  (uint8_t *)v25,  2u);
  }

  mfi4Auth_endpoint_erasePairing(*(void *)(v11 + 56), (uint64_t)v5);
LABEL_39:
}

  genre = self->_genre;
  if (genre)
  {
    genre = -[NSString UTF8String](genre, "UTF8String");
    validMask = self->_validMask;
  }

  a3->var17 = (char *)genre;
  a3->var0 |= 0x10000u;
  if ((validMask & 0x20000) == 0)
  {
LABEL_19:
    if ((validMask & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_53;
  }

  if (v2 != v4) {
    return 720904LL;
  }
  if (a2[1] && *a2) {
    return 0LL;
  }
  *a2 = 0LL;
  a2[1] = 0LL;
  return 720905LL;
}

LABEL_72:
  uint64_t v28 = *((unsigned __int8 *)v36 + 24);
  _Block_object_dispose(&v35, 8);
  return v28;
}

  int v56 = v7[353];
  __int16 v57 = *((_DWORD *)v8 + 708);
  if (v56 && v57 >= 60)
  {
    int v58 = *(os_log_s **)(v56 + 472);
  }

  else
  {
    int v58 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
  {
    if ((v14 - 1) > 0xA)
    {
      uint64_t v59 = "UNKNOWN";
      if (a6) {
        goto LABEL_80;
      }
    }

    else
    {
      uint64_t v59 = off_1001FD120[v14 - 1];
      if (a6)
      {
LABEL_80:
        CFStringRef v60 = *a6;
LABEL_83:
        *(_DWORD *)buf = 136316674;
        __int16 v78 = "_qiAuth_protocol_handleResponse_DIGESTS";
        CFNumberRef v79 = 1024;
        __int16 v80 = 2080;
        CFNumberRef v81 = 1024;
        __int16 v82 = inited;
        CFNumberRef v83 = 1024;
        __int16 v84 = v14;
        CFStringRef v85 = 2080;
        *(void *)__int16 v86 = v59;
        *(_WORD *)&v86[8] = 1024;
        *(_DWORD *)&v86[10] = a3;
        CFStringRef v87 = 1024;
        __int16 v88 = v60;
        _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEFAULT,  "%s:%d result %d, msgType %d(%s), dataInLen %u, dataOutLen %u",  buf,  0x34u);
        return inited;
      }
    }

    CFStringRef v60 = -1;
    goto LABEL_83;
  }

  return inited;
}

    BOOL v10 = 0LL;
    int v27 = 0xFFFFFFFFLL;
    goto LABEL_40;
  }

  CertificateRefWithBytes = (__SecCertificate *)__createCertificateRefWithBytes( *(void *)(a1 + 440),  *(void *)(a1 + 448),  *(_DWORD *)(a1 + 400));
  if (!CertificateRefWithBytes)
  {
    int v32 = logObjectForModule_29();
    __int16 v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_validateSignature_cold_8();
    }
    goto LABEL_72;
  }

  uint64_t v3 = CertificateRefWithBytes;
  id v4 = SecCertificateCopyKey(CertificateRefWithBytes);
  if (!v4)
  {
    int v33 = logObjectForModule_29();
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_validateSignature_cold_9();
    }
    BOOL v10 = 0LL;
    uint64_t v6 = 0LL;
    uint64_t v5 = 0LL;
    goto LABEL_60;
  }

  uint64_t v5 = v4;
  uint64_t v6 = SecKeyCopyExternalRepresentation(v4, &error);
  if (error)
  {
    uint64_t v7 = CFErrorCopyDescription(error);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    id v9 = v8;
    if (error)
    {
      uint64_t v37 = logObjectForModule_29();
      char v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
        mfi4Auth_protocol_validateSignature_cold_14();
      }

      BOOL v10 = 0LL;
      goto LABEL_60;
    }
  }

  if (!v6)
  {
    int v34 = logObjectForModule_29();
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_validateSignature_cold_10();
    }
    BOOL v10 = 0LL;
    uint64_t v6 = 0LL;
LABEL_60:
    int v26 = 0xFFFFFFFFLL;
    goto LABEL_61;
  }

  BOOL v10 = _dumpSimpleHex(v6);
  if (gLogObjects && gNumLogObjects >= 56)
  {
    id v11 = (os_log_s *)*(id *)(gLogObjects + 440);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v11 = (os_log_s *)&_os_log_default;
    id v18 = &_os_log_default;
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)char data = 138412290;
    *(void *)&data[4] = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "validateSignature: keyRepresentation: %@\n",  data,  0xCu);
  }

  id v19 = *(_DWORD **)(a1 + 96);
  CFIndex Length = CFDataGetLength(v6);
  BytePtr = (unsigned __int8 *)CFDataGetBytePtr(v6);
  int v22 = ccsigma_import_peer_verification_key((uint64_t)v19, Length, BytePtr);
  if ((_DWORD)v22)
  {
    int v26 = v22;
    uint64_t v35 = logObjectForModule_29();
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_validateSignature_cold_12();
    }
  }

  else
  {
    id v23 = ccsigma_verify(v19, a1 + 488, 32LL, a1 + 404);
    if (!(_DWORD)v23) {
      goto LABEL_26;
    }
    int v26 = v23;
    uint64_t v36 = logObjectForModule_29();
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      mfi4Auth_protocol_validateSignature_cold_11();
    }
  }

void sub_100093014( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void __platform_power_sendPowerUpdate_block_invoke(uint64_t a1)
{
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  int v2 = *(_DWORD *)(a1 + 52);
  int v12 = *(_DWORD *)(a1 + 48);
  LOWORD(v13) = v2;
  int v3 = *(_DWORD *)(a1 + 60);
  HIDWORD(v13) = *(_DWORD *)(a1 + 56);
  __int16 v15 = -21846;
  __int16 v14 = v3;
  if (gLogObjects && gNumLogObjects >= 8)
  {
    id v4 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v4 = (os_log_s *)&_os_log_default;
    id v5 = &_os_log_default;
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 48);
    int v8 = *(_DWORD *)(a1 + 52);
    int v9 = *(_DWORD *)(a1 + 56);
    int v10 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)buf = 138413314;
    uint64_t v17 = v6;
    __int16 v18 = 1024;
    int v19 = v7;
    __int16 v20 = 1024;
    int v21 = v8;
    __int16 v22 = 1024;
    int v23 = v9;
    __int16 v24 = 1024;
    int v25 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[#Power] PowerUpdate: endpoint: %@, updateType: %d, updateValue: %u, updateType2: %d, updateValue2: %u",  buf,  0x24u);
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = accFeatureHandlers_invokeHandler( *(const void **)(a1 + 40),  18,  (uint64_t)&v12);
  id v11 = *(const void **)(a1 + 40);
  if (v11) {
    CFRelease(v11);
  }
}

uint64_t platform_power_sendEAPowerUpdate(const void *a1, int a2, int a3, int a4, int a5)
{
  if (!a1) {
    return 1LL;
  }
  EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
  id v11 = EndpointWithUUID;
  if (acc_endpoint_getProtocol((uint64_t)EndpointWithUUID) == 4 && !iap2_endpoint_isInitialized(v11[7]))
  {
    if (gLogObjects && gNumLogObjects >= 8)
    {
      __int16 v15 = (os_log_s *)*(id *)(gLogObjects + 56);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      __int16 v15 = (os_log_s *)&_os_log_default;
      id v16 = &_os_log_default;
    }

    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      __int16 v24 = "NO";
      __int16 v25 = 1024;
      int v26 = 4;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "[#Power] Not sending EA Power Update: iap2initialized = %s, protocol = %{coreacc:ACCEndpoint_Protocol_t}d",  buf,  0x12u);
    }

    return 1LL;
  }

  __int16 v19 = -21846;
  int v17 = a2;
  __int16 v18 = a3;
  int v20 = a4;
  __int16 v22 = -21846;
  __int16 v21 = a5;
  if (gLogObjects && gNumLogObjects >= 8)
  {
    int v12 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v12 = (os_log_s *)&_os_log_default;
    id v13 = &_os_log_default;
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138413314;
    __int16 v24 = (const char *)a1;
    __int16 v25 = 1024;
    int v26 = a2;
    __int16 v27 = 1024;
    int v28 = a3;
    __int16 v29 = 1024;
    int v30 = a4;
    __int16 v31 = 1024;
    int v32 = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "[#Power] EAPowerUpdate: endpoint: %@, updateType: %d, updateValue: %u, updateType2: %d, updateValue2: %u",  buf,  0x24u);
  }

  return accFeatureHandlers_invokeHandler(a1, 18, (uint64_t)&v17);
}

BOOL platform_power_sendSleepUpdate(const void *a1)
{
  uint64_t v7 = 0LL;
  int v8 = &v7;
  uint64_t v9 = 0x2020000000LL;
  BOOL v1 = 1LL;
  char v10 = 1;
  if (a1)
  {
    CFRetain(a1);
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    _DWORD v6[2] = __platform_power_sendSleepUpdate_block_invoke;
    v6[3] = &unk_1001FBAF0;
    void v6[4] = &v7;
    void v6[5] = a1;
    dispatch_async(v4, v6);

    BOOL v1 = *((_BYTE *)v8 + 24) != 0;
  }

  _Block_object_dispose(&v7, 8);
  return v1;
}

void sub_1000934B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void __platform_power_sendSleepUpdate_block_invoke(uint64_t a1)
{
  char v2 = accFeatureHandlers_invokeHandler(*(const void **)(a1 + 40), 19, 0LL);
  int v3 = *(const void **)(a1 + 40);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v2;
  if (v3) {
    CFRelease(v3);
  }
}

BOOL platform_power_sendWakeUpdate(const void *a1)
{
  uint64_t v7 = 0LL;
  int v8 = &v7;
  uint64_t v9 = 0x2020000000LL;
  BOOL v1 = 1LL;
  char v10 = 1;
  if (a1)
  {
    CFRetain(a1);
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    _DWORD v6[2] = __platform_power_sendWakeUpdate_block_invoke;
    v6[3] = &unk_1001FBAF0;
    void v6[4] = &v7;
    void v6[5] = a1;
    dispatch_async(v4, v6);

    BOOL v1 = *((_BYTE *)v8 + 24) != 0;
  }

  _Block_object_dispose(&v7, 8);
  return v1;
}

void sub_1000935D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void __platform_power_sendWakeUpdate_block_invoke(uint64_t a1)
{
  char v2 = accFeatureHandlers_invokeHandler(*(const void **)(a1 + 40), 20, 0LL);
  int v3 = *(const void **)(a1 + 40);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v2;
  if (v3) {
    CFRelease(v3);
  }
}

id platform_power_powerDuringSleepSupported(const void *a1)
{
  if (!a1) {
    return 0LL;
  }
  EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
  char v2 = EndpointWithUUID;
  id PowerPluginInstance = _getPowerPluginInstance();
  id v4 = (void *)objc_claimAutoreleasedReturnValue(PowerPluginInstance);
  id v5 = [v4 isPowerDuringSleepSupported:v2[1]];

  if (gLogObjects && gNumLogObjects >= 8)
  {
    uint64_t v6 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v6 = (os_log_s *)&_os_log_default;
    id v7 = &_os_log_default;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = v2[1];
    v10[0] = 67109378;
    v10[1] = (_DWORD)v5;
    __int16 v11 = 2112;
    uint64_t v12 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "[#Power] bPowerDuringSleepSupported = %d for connectionUUID %@",  (uint8_t *)v10,  0x12u);
  }

  return v5;
}

id platform_power_setPowerDuringSleep(const void *a1, uint64_t a2)
{
  if (!a1) {
    return 0LL;
  }
  if ((_DWORD)a2) {
    _isPowerDuringSleepForApplePencil(a1);
  }
  else {
    _isDisablingPowerDuringSleepForApplePencil((uint64_t)a1);
  }
  EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
  id v5 = EndpointWithUUID;
  id PowerPluginInstance = _getPowerPluginInstance();
  id v7 = (void *)objc_claimAutoreleasedReturnValue(PowerPluginInstance);
  id v8 = [v7 setPowerDuringSleepEnabled:a2 forConnectionUUID:v5[1]];

  if (gLogObjects && gNumLogObjects >= 8)
  {
    uint64_t v9 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v9 = (os_log_s *)&_os_log_default;
    id v10 = &_os_log_default;
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = v5[1];
    v13[0] = 67109378;
    v13[1] = (_DWORD)v8;
    __int16 v14 = 2112;
    uint64_t v15 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "[#Power] platform_power_setPowerDuringSleep success = %d, connectionUUID %@",  (uint8_t *)v13,  0x12u);
  }

  return v8;
}

id platform_power_powerDuringSleepEnabled(const void *a1)
{
  if (!a1) {
    return 0LL;
  }
  EndpointWithUUID = acc_manager_getEndpointWithUUID(a1);
  char v2 = EndpointWithUUID;
  id PowerPluginInstance = _getPowerPluginInstance();
  id v4 = (void *)objc_claimAutoreleasedReturnValue(PowerPluginInstance);
  id v5 = [v4 isPowerDuringSleepEnabled:v2[1]];

  if (gLogObjects && gNumLogObjects >= 8)
  {
    uint64_t v6 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v6 = (os_log_s *)&_os_log_default;
    id v7 = &_os_log_default;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = v2[1];
    v10[0] = 67109378;
    v10[1] = (_DWORD)v5;
    __int16 v11 = 2112;
    uint64_t v12 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "[#Power] bPowerDuringSleepEnabled = %d, connectionUUID %@",  (uint8_t *)v10,  0x12u);
  }

  return v5;
}

uint64_t platform_power_setAccessoryPowerMode(const void *a1, uint64_t a2, uint64_t a3)
{
  int v5 = -1431655766;
  else {
    return 1LL;
  }
}

BOOL _platformPowerUpdateAvailable(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformPowerManager sharedManager](&OBJC_CLASS___ACCPlatformPowerManager, "sharedManager"));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 powerAccessories]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:a1]);

  if (a4)
  {
    BOOL v11 = v10 != 0LL;
    if (!v10)
    {
      [v8 addAccessoryForEndpointUID:a1 andBitmask:0 andOldBitmask:0];
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v8 powerAccessories]);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:a1]);
    }

    id v13 = (void *)objc_claimAutoreleasedReturnValue([v10 accessoryPowerManager]);
    __int16 v14 = v13;
    else {
      unsigned int v15 = [v13 connectionPowerModeChangedForFeaturePowerModeUpdate:a2 withObject:a3];
    }
    if ((_DWORD)a2 == 3 || v15)
    {
      else {
        int v16 = 1;
      }
      *a4 = v16;
    }

    else
    {
      BOOL v11 = 0LL;
    }
  }

  else
  {
    BOOL v11 = 0LL;
    __int16 v14 = 0LL;
  }

  return v11;
}

uint64_t platform_power_setExternalAccessoryPowerMode(const void *a1, uint64_t a2, uint64_t a3)
{
  int v5 = -1431655766;
  else {
    return 1LL;
  }
}

id platform_power_resetBaseCurrent(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  id PowerPluginInstance = _getPowerPluginInstance();
  int v3 = (void *)objc_claimAutoreleasedReturnValue(PowerPluginInstance);
  id v4 = [v3 resetAccessoryBaseCurrent:a1];

  if (gLogObjects) {
    BOOL v5 = gNumLogObjects < 8;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v7 = (os_log_s *)&_os_log_default;
    id v6 = &_os_log_default;
  }

  else
  {
    id v7 = (os_log_s *)*(id *)(gLogObjects + 56);
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = @"no";
    if ((_DWORD)v4) {
      uint64_t v8 = @"yes";
    }
    int v10 = 138412546;
    BOOL v11 = v8;
    __int16 v12 = 2112;
    uint64_t v13 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "[#Power] successfully reset base current = %@ for connectionUUID %@",  (uint8_t *)&v10,  0x16u);
  }

  return v4;
}

id platform_power_batteryLevelPercent()
{
  IOKitid PowerPluginInstance = _getIOKitPowerPluginInstance();
  BOOL v1 = (void *)objc_claimAutoreleasedReturnValue(IOKitPowerPluginInstance);
  id v2 = [v1 getBatteryChargeLevel];

  return v2;
}

void platform_power_registerForSleepWakeUpdate(void *a1)
{
  id v6 = a1;
  BOOL v1 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformPowerManager sharedManager](&OBJC_CLASS___ACCPlatformPowerManager, "sharedManager"));
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 powerAccessories]);
  int v3 = (ACCPlatformPowerInfo *)objc_claimAutoreleasedReturnValue([v2 objectForKey:v6]);

  if (!v3)
  {
    int v3 = -[ACCPlatformPowerInfo initWithEndpointUID:andBitmask:andOldBitmask:]( objc_alloc(&OBJC_CLASS___ACCPlatformPowerInfo),  "initWithEndpointUID:andBitmask:andOldBitmask:",  v6,  0LL,  0LL);
    -[ACCPlatformPowerInfo setRequestSleepUpdate:](v3, "setRequestSleepUpdate:", 1LL);
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformPowerManager sharedManager](&OBJC_CLASS___ACCPlatformPowerManager, "sharedManager"));
    BOOL v5 = (void *)objc_claimAutoreleasedReturnValue([v4 powerAccessories]);
    [v5 setObject:v3 forKey:v6];

    goto LABEL_5;
  }

  if (!-[ACCPlatformPowerInfo requestSleepUpdate](v3, "requestSleepUpdate"))
  {
    -[ACCPlatformPowerInfo stopPowerUpdates](v3, "stopPowerUpdates");
    -[ACCPlatformPowerInfo setRequestSleepUpdate:](v3, "setRequestSleepUpdate:", 1LL);
LABEL_5:
    -[ACCPlatformPowerInfo startPowerUpdates](v3, "startPowerUpdates");
  }
}

void platform_power_unregisterForSleepWakeUpdate(void *a1)
{
  id v5 = a1;
  BOOL v1 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformPowerManager sharedManager](&OBJC_CLASS___ACCPlatformPowerManager, "sharedManager"));
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 powerAccessories]);
  int v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:v5]);

  if (v3)
  {
    if ([v3 requestSleepUpdate])
    {
      [v3 stopPowerUpdates];
      [v3 setRequestSleepUpdate:0];
      [v3 startPowerUpdates];
    }

    if (![v3 updateTypesBitmask])
    {
      id v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformPowerManager sharedManager](&OBJC_CLASS___ACCPlatformPowerManager, "sharedManager"));
      [v4 removeAccessoryForEndpointUID:v5];
    }
  }
}

LABEL_123:
    goto LABEL_119;
  }

  if (self->_systemAsleep)
  {
    unint64_t v51 = logObjectForModule_16();
    unsigned int v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
    if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
    {
      LOWORD(v79) = 0;
      uint64_t v53 = "[#Power] ignoring PowerDidChangeNotification because we're asleep";
      char v54 = v52;
      unsigned __int16 v55 = OS_LOG_TYPE_INFO;
      int v56 = 2;
LABEL_122:
      _os_log_impl((void *)&_mh_execute_header, v54, v55, v53, (uint8_t *)&v79, v56);
      goto LABEL_123;
    }

    goto LABEL_123;
  }

  accessoryChargingCurrent = self->_accessoryChargingCurrent;
  int v70 = _getPowerPluginInstance();
  unint64_t v71 = (void *)objc_claimAutoreleasedReturnValue(v70);
  self->_accessoryChargingCurrent = (unsigned __int16)[v71 accessoryChargingCurrentInmA:v7];

  if (accessoryChargingCurrent != self->_accessoryChargingCurrent || !self->_isFirstSent_AccessoryChargingCurrent)
  {
    self->_isFirstSent_AccessoryChargingCurrent = 1;
    __int16 v76 = logObjectForModule_16();
    CFStringRef v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(v76);
    if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v78 = self->_accessoryChargingCurrent;
      CFNumberRef v79 = 67109632;
      *(_DWORD *)__int16 v80 = 7;
      *(_WORD *)&v80[4] = 1024;
      *(_DWORD *)&v80[6] = accessoryChargingCurrent;
      *(_WORD *)CFNumberRef v81 = 1024;
      *(_DWORD *)&v81[2] = v78;
      _os_log_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_DEFAULT,  "[#Power] Sending Power Update: %d: %d->%d\n",  (uint8_t *)&v79,  0x14u);
    }

    int v34 = -[ACCPlatformPowerInfo endpointUID](self, "endpointUID");
    uint64_t v35 = self->_accessoryChargingCurrent;
    uint64_t v36 = 7;
    goto LABEL_106;
  }

  __int16 v72 = logObjectForModule_16();
  unsigned int v73 = (os_log_s *)objc_claimAutoreleasedReturnValue(v72);
  if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v74 = self->_accessoryChargingCurrent;
    isFirstSent_AccessoryChargingCurrent = self->_isFirstSent_AccessoryChargingCurrent;
    CFNumberRef v79 = 67109888;
    *(_DWORD *)__int16 v80 = 7;
    *(_WORD *)&v80[4] = 1024;
    *(_DWORD *)&v80[6] = accessoryChargingCurrent;
    *(_WORD *)CFNumberRef v81 = 1024;
    *(_DWORD *)&v81[2] = v74;
    *(_WORD *)&v81[6] = 1024;
    *(_DWORD *)&v81[8] = isFirstSent_AccessoryChargingCurrent;
    _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_DEFAULT,  "[#Power] Skip Sending Power Update: %d: %d = %d, isFirst=%d",  (uint8_t *)&v79,  0x1Au);
  }

LABEL_119:
}

                        if (v38) {
                          ++v23;
                        }
LABEL_125:
                        if (--Count) {
                          continue;
                        }
                        if ((_WORD)v23) {
                          iap2_sessionControl_sendOutgoingMessage(v61, v8);
                        }
                        unsigned int v52 = 0;
                        break;
                      case 6:
                        if (!v20 || CFStringGetLength(v20) < 1) {
                          goto LABEL_125;
                        }
                        int v26 = (const __CFString *)CFDictionaryGetValue(v2, v57);
                        __int16 v27 = v8;
                        int v28 = 6;
                        goto LABEL_80;
                      case 7:
                        if (!v20 || CFStringGetLength(v20) < 1) {
                          goto LABEL_125;
                        }
                        int v26 = (const __CFString *)CFDictionaryGetValue(v2, v58);
                        __int16 v27 = v8;
                        int v28 = 7;
                        goto LABEL_80;
                      case 8:
                        if (!v20 || CFStringGetLength(v20) < 1) {
                          goto LABEL_125;
                        }
                        int v39 = (const __CFNumber *)CFDictionaryGetValue(v2, v59);
                        CFBooleanRef v40 = v8;
                        __int16 v41 = 8;
                        goto LABEL_97;
                      case 9:
                        if (!v20 || CFStringGetLength(v20) < 1) {
                          goto LABEL_125;
                        }
                        CFNumberRef v42 = v8;
                        __int16 v43 = 9;
                        LOBYTE(v39) = v67;
                        goto LABEL_122;
                      case 10:
                        if (!v20) {
                          goto LABEL_125;
                        }
                        CFIndex Length = CFStringGetLength(v20);
                        __int16 v45 = v67;
                        if (Length <= 0) {
                          __int16 v45 = 0;
                        }
                        if (!v45) {
                          goto LABEL_125;
                        }
                        int v39 = (const __CFNumber *)CFDictionaryGetValue(v2, v55);
                        if (v39)
                        {
                          CFBooleanRef v40 = v8;
                          __int16 v41 = 10;
LABEL_97:
                          char v38 = (uint64_t)iAP2MsgAddCFU8Param(v40, 0LL, v41, v39);
                        }

                        else
                        {
                          CFNumberRef v42 = v8;
                          __int16 v43 = 10;
LABEL_122:
                          char v38 = (uint64_t)iAP2MsgAddU8Param(v42, 0LL, v43, (char)v39);
                        }

                        goto LABEL_123;
                      case 11:
                        if (!v20 || CFStringGetLength(v20) < 1 || valuePtr) {
                          goto LABEL_125;
                        }
                        int v39 = (const __CFNumber *)CFDictionaryGetValue(v2, v56);
                        CFBooleanRef v40 = v8;
                        __int16 v41 = 11;
                        goto LABEL_97;
                      case 12:
                        if (!v20) {
                          goto LABEL_125;
                        }
                        if (CFStringGetLength(v20) < 1) {
                          goto LABEL_125;
                        }
                        int v46 = (const __CFNumber *)CFDictionaryGetValue(v2, v60);
                        if (!v46) {
                          goto LABEL_125;
                        }
                        *(void *)buf = 0LL;
                        if (!CFNumberGetValue(v46, kCFNumberLongLongType, buf) || !*(void *)buf) {
                          goto LABEL_125;
                        }
                        char v38 = iAP2MsgAddU64Param(v8, 0LL, 12, *(unint64_t *)buf);
                        goto LABEL_123;
                      default:
                        goto LABEL_125;
                    }

                    break;
                  }
                }
              }

              else
              {
                unsigned int v52 = 4;
              }
            }

            else
            {
              unsigned int v52 = 4;
            }

            return v52 == 0;
          }

          else
          {
            return 0LL;
          }
        }
      }
    }
  }

  return result;
}

void platform_power_startPowerUpdates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[ACCPlatformPowerManager sharedManager](&OBJC_CLASS___ACCPlatformPowerManager, "sharedManager"));
  [v6 addAccessoryForEndpointUID:a1 andBitmask:a2 andOldBitmask:a3];
}

void platform_power_stopPowerUpdates(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[ACCPlatformPowerManager sharedManager](&OBJC_CLASS___ACCPlatformPowerManager, "sharedManager"));
  [v2 removeAccessoryForEndpointUID:a1];
}

void platform_power_setAvailableCurrent(const void *a1, uint64_t a2, uint64_t a3)
{
  id PowerPluginInstance = _getPowerPluginInstance();
  id v7 = (void *)objc_claimAutoreleasedReturnValue(PowerPluginInstance);
  uint64_t v8 = acc_manager_copyConnectionUUIDForEndpointUUID(a1);
  LODWORD(a3) = [v7 setUSBCurrentLimitBase:a2 forConnectionUUID:v8 forceResponse:a3];

  if ((_DWORD)a3)
  {
    EndpointWithUUID = (uint64_t *)acc_manager_getEndpointWithUUID(a1);
    platform_analytics_availableCurrentNegotiated(EndpointWithUUID, a2);
  }

id platform_power_getCurrentLimit(uint64_t a1)
{
  id PowerPluginInstance = _getPowerPluginInstance();
  int v3 = (void *)objc_claimAutoreleasedReturnValue(PowerPluginInstance);
  id v4 = [v3 USBCurrentLimitInmA:a1];

  return v4;
}

void platform_power_setShouldChargeDeviceBattery(const void *a1, int a2, uint64_t a3)
{
  id PowerPluginInstance = _getPowerPluginInstance();
  id v8 = (id)objc_claimAutoreleasedReturnValue(PowerPluginInstance);
  id v7 = acc_manager_copyConnectionUUIDForEndpointUUID(a1);
  [v8 setBatteryPackMode:a2 ^ 1u forConnectionUUID:v7 forceResponse:a3];
}

uint64_t platform_power_getUltraHighPowerModeCurrentLimit(const void *a1)
{
  id PowerPluginInstance = _getPowerPluginInstance();
  int v3 = (void *)objc_claimAutoreleasedReturnValue(PowerPluginInstance);
  id v4 = acc_manager_copyConnectionUUIDForEndpointUUID(a1);
  unsigned __int16 v5 = (unsigned __int16)[v3 accessoryPowerModeCurrentLimitInmA:4 forConnectionUUID:v4];

  return v5;
}

void platform_power_setReserveCurrent(const void *a1, int a2)
{
  id PowerPluginInstance = _getPowerPluginInstance();
  id v6 = (id)objc_claimAutoreleasedReturnValue(PowerPluginInstance);
  unsigned __int16 v5 = acc_manager_copyConnectionUUIDForEndpointUUID(a1);
  [v6 setUSBCurrentOffset:-a2 forConnectionUUID:v5];
}

id platform_power_isOvercurrentState(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[ACCPlatformPowerManager sharedManager](&OBJC_CLASS___ACCPlatformPowerManager, "sharedManager"));
  int v3 = (void *)objc_claimAutoreleasedReturnValue([v2 powerAccessories]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:a1]);

  id v5 = (id)objc_claimAutoreleasedReturnValue([v4 siphoningControl]);
  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 siphoningControl]);
    id v5 = [v6 getOverCurrentState];
  }

  return v5;
}

void platform_power_resetOvercurrentSiphoning(uint64_t a1)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[ACCPlatformPowerManager sharedManager](&OBJC_CLASS___ACCPlatformPowerManager, "sharedManager"));
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v6 powerAccessories]);
  int v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:a1]);

  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 siphoningControl]);
  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 siphoningControl]);
    [v5 resetOverCurrentSiphoning];
  }
}

void platform_power_setOvercurrentSiphoning(uint64_t a1)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[ACCPlatformPowerManager sharedManager](&OBJC_CLASS___ACCPlatformPowerManager, "sharedManager"));
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v6 powerAccessories]);
  int v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:a1]);

  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 siphoningControl]);
  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 siphoningControl]);
    [v5 setOverCurrentSiphoning];
  }
}

void platform_power_updateAccessoryChargeCurrent(uint64_t a1, unsigned int a2)
{
  id v13 = (id)objc_claimAutoreleasedReturnValue(+[ACCPlatformPowerManager sharedManager](&OBJC_CLASS___ACCPlatformPowerManager, "sharedManager"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v13 powerAccessories]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:a1]);

  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 endpointUID]);
    BOOL isModelNumberConnected = _isModelNumberConnected(v6, @"A1603");

    if (isModelNumberConnected)
    {
      if (platform_systemInfo_isApplePencilSupported())
      {
        id v8 = [v5 holdingApplePencilSleepAssertion];
        if (a2 <= 9)
        {
          if ((_DWORD)v8)
          {
            platform_sleepAssertion_createForApplePencil(v8);
            [v5 setHoldingApplePencilSleepAssertion:0];
          }
        }
      }

      if ([v5 powerUpdateSentDueToSleep])
      {
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 sleepNotificationClientUUID]);

        if (v9)
        {
          IOKitid PowerPluginInstance = _getIOKitPowerPluginInstance();
          BOOL v11 = (void *)objc_claimAutoreleasedReturnValue(IOKitPowerPluginInstance);
          __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v5 sleepNotificationClientUUID]);
          [v11 clientHandledSleepNotification:v12];

          [v5 setPowerUpdateSentDueToSleep:0];
        }
      }
    }
  }
}

  ;
}

CFSetRef iap2_sessionControl_init(const __CFSet *result)
{
  if (result)
  {
    BOOL v1 = result;
    id v2 = (void *)*((void *)result + 24);
    if (!v2)
    {
      id v2 = malloc(0xFFFFuLL);
      *((void *)v1 + 24) = v2;
    }

    int v3 = iap2_features_registerMessageHandlers();
    int v4 = iap2_features_registerIdentificationParamHandlers();
    unsigned int v5 = v3 & v4 & iap2_features_createFeatures(v1, 1);
    if (v2) {
      return (const __CFSet *)v5;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t iap2_sessionControl_cleanup(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  id v2 = *(void **)a1;
  if (!v2 || !*v2) {
    return 0LL;
  }
  iap2_endpoint_setInitialized(a1, 0);
  platform_externalAccessory_removeEAAccessoryForPrimaryEndpoint(*(void **)(a1 + 8));
  int v3 = iap2_features_destroyFeatures(a1, 0);
  uint64_t v4 = v3 & iap2_features_destroyFeatures(a1, 1);
  unsigned int v5 = *(void **)(a1 + 192);
  if (v5)
  {
    free(v5);
    *(void *)(a1 + 192) = 0LL;
  }

  return v4;
}

uint64_t iap2_sessionControl_start(unsigned __int8 *a1)
{
  if (a1)
  {
    unsigned int Version = iap2_sessionControl_getVersion(a1);
    if (gLogObjects) {
      BOOL v3 = gNumLogObjects < 23;
    }
    else {
      BOOL v3 = 1;
    }
    if (v3)
    {
      uint64_t v4 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    else
    {
      uint64_t v4 = *(os_log_s **)(gLogObjects + 176);
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v12[0] = 67109120;
      v12[1] = Version;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Starting control session (version = %d)...",  (uint8_t *)v12,  8u);
    }

    if (gLogObjects) {
      BOOL v5 = gNumLogObjects <= 22;
    }
    else {
      BOOL v5 = 1;
    }
    int v6 = !v5;
    if (Version == 2)
    {
      if (v6)
      {
        id v7 = *(os_log_s **)(gLogObjects + 176);
      }

      else
      {
        id v7 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v12[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Control session version = 2, starting Identification...",  (uint8_t *)v12,  2u);
      }

      unsigned int v9 = 1;
    }

    else
    {
      if (v6)
      {
        id v8 = *(os_log_s **)(gLogObjects + 176);
      }

      else
      {
        id v8 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      BOOL v10 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      unsigned int v9 = 0;
      if (v10)
      {
        LOWORD(v12[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Control session version != 2, starting Authentication...",  (uint8_t *)v12,  2u);
        unsigned int v9 = 0;
      }
    }

    iap2_features_startFeatureFromDevice((const __CFSet *)a1, v9);
  }

  return 0LL;
}

unsigned __int8 *iap2_sessionControl_getVersion(unsigned __int8 *result)
{
  if (result)
  {
    uint64_t v1 = *((void *)result + 4);
    if (v1 && (id v2 = *(unsigned __int8 **)(v1 + 24)) != 0LL)
    {
      int SessionForService = iAP2LinkGetSessionForService(*(void *)(v1 + 24), 0);
      uint64_t result = iAP2LinkGetSessionInfo(v2, SessionForService);
      if (result) {
        return (unsigned __int8 *)result[2];
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t iap2_sessionControl_parseIncomingMessage(uint64_t a1, char *a2, unsigned int a3)
{
  char v3 = 0;
  if (a1)
  {
    uint64_t v4 = a2;
    if (a2)
    {
      unint64_t v35 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v34[2] = v7;
      v34[3] = v7;
      v34[0] = v7;
      v34[1] = v7;
      iAP2MsgInit((uint64_t)v34, 0, 0LL, 0, 0LL, 0LL);
      char v3 = 0;
      if (a3)
      {
        uint64_t v8 = a3;
        while (1)
        {
          char v9 = *v4++;
          uint64_t v10 = iAP2MsgParserConsumeByte(*(unsigned __int16 **)(a1 + 112), v9, (uint64_t)v34);
          if (v10) {
            break;
          }
LABEL_19:
          if (!--v8) {
            return v3 & 1;
          }
        }

        uint64_t v11 = v10;
        if (!*(void *)a1) {
          goto LABEL_41;
        }
        int MsgID = (void *)iAP2MsgGetMsgID(v10);
        int MsgLen = iAP2MsgGetMsgLen(v11);
        uint64_t v14 = gLogObjects;
        int v15 = gNumLogObjects;
        if (gLogObjects && gNumLogObjects >= 21)
        {
          int v16 = *(os_log_s **)(gLogObjects + 160);
        }

        else
        {
          int v16 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)uint64_t v37 = v14;
            *(_WORD *)&v37[8] = 1024;
            *(_DWORD *)&v37[10] = v15;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            int v16 = (os_log_s *)&_os_log_default;
          }
        }

        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          uint64_t v17 = *(void *)(a1 + 8);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)uint64_t v37 = (_DWORD)MsgID;
          *(_WORD *)&v37[4] = 1024;
          *(_DWORD *)&v37[6] = MsgLen;
          *(_WORD *)&v37[10] = 2112;
          *(void *)&v37[12] = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "Incoming Message ID: 0x%04X (%d bytes) for endpoint %@",  buf,  0x18u);
        }

        if ((iap2_identification_isIdentifiedForIncomingMessageID(a1, (int)MsgID) & 1) != 0)
        {
          Handler = (uint64_t (*)(uint64_t, uint64_t))iap2_messageHandlers_getHandler(MsgID);
          if (!Handler)
          {
            uint64_t v22 = gLogObjects;
            int v23 = gNumLogObjects;
            if (gLogObjects && gNumLogObjects >= 23)
            {
              __int16 v24 = *(os_log_s **)(gLogObjects + 176);
            }

            else
            {
              __int16 v24 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)uint64_t v37 = v22;
                *(_WORD *)&v37[8] = 1024;
                *(_DWORD *)&v37[10] = v23;
                _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
                __int16 v24 = (os_log_s *)&_os_log_default;
              }
            }

            if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
              goto LABEL_41;
            }
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)uint64_t v37 = (_DWORD)MsgID;
            __int16 v29 = v24;
            int v30 = "No message handler found for incoming message ID: 0x%04X!";
            uint32_t v31 = 8;
            goto LABEL_44;
          }

          if ((Handler(a1, v11) & 1) != 0)
          {
            char v3 = 1;
LABEL_18:
            iAP2MsgCleanup(v11);
            goto LABEL_19;
          }

          uint64_t v25 = gLogObjects;
          int v26 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 23)
          {
            __int16 v27 = *(os_log_s **)(gLogObjects + 176);
          }

          else
          {
            __int16 v27 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)uint64_t v37 = v25;
              *(_WORD *)&v37[8] = 1024;
              *(_DWORD *)&v37[10] = v26;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              __int16 v27 = (os_log_s *)&_os_log_default;
            }
          }

          if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
LABEL_41:
            char v3 = 0;
            goto LABEL_18;
          }

          uint64_t v32 = *(void *)(a1 + 8);
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)uint64_t v37 = (_DWORD)MsgID;
          *(_WORD *)&v37[4] = 2112;
          *(void *)&v37[6] = v32;
          __int16 v29 = v27;
          int v30 = "Message handler returned false! (0x%04X for endpoint %@)";
        }

        else
        {
          uint64_t v19 = gLogObjects;
          int v20 = gNumLogObjects;
          if (gLogObjects && gNumLogObjects >= 23)
          {
            __int16 v21 = *(os_log_s **)(gLogObjects + 176);
          }

          else
          {
            __int16 v21 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)uint64_t v37 = v19;
              *(_WORD *)&v37[8] = 1024;
              *(_DWORD *)&v37[10] = v20;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
              __int16 v21 = (os_log_s *)&_os_log_default;
            }
          }

          if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
            goto LABEL_41;
          }
          uint64_t v28 = *(void *)(a1 + 8);
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)uint64_t v37 = (_DWORD)MsgID;
          *(_WORD *)&v37[4] = 2112;
          *(void *)&v37[6] = v28;
          __int16 v29 = v21;
          int v30 = "Not identified for incoming message ID: 0x%04X! (endpoint %@)";
        }

        uint32_t v31 = 18;
LABEL_44:
        _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, v30, buf, v31);
        goto LABEL_41;
      }
    }
  }

  return v3 & 1;
}

uint64_t iap2_sessionControl_sendOutgoingMessageAndCallbackOnACK(uint64_t *a1, uint64_t a2)
{
  return _sendOutgoingMessage(a1, a2, 1);
}

uint64_t _sendOutgoingMessage(uint64_t *a1, uint64_t a2, int a3)
{
  if (a1 && a2 && *a1)
  {
    unsigned int MsgID = iAP2MsgGetMsgID(a2);
    int MsgLen = iAP2MsgGetMsgLen(a2);
    if ((iap2_identification_isIdentifiedForOutgoingMessageID((uint64_t)a1, MsgID) & 1) != 0)
    {
      uint64_t v8 = a1[4];
      if (a3) {
        iAP2MsgSendControlAndCallbackOnAck(v8, a2);
      }
      else {
        iAP2MsgSendControl(v8, a2);
      }
      if (gLogObjects && gNumLogObjects >= 21)
      {
        char v9 = *(os_log_s **)(gLogObjects + 160);
      }

      else
      {
        char v9 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      uint64_t v10 = 1LL;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = a1[1];
        int v19 = 67109634;
        unsigned int v20 = MsgID;
        __int16 v21 = 1024;
        int v22 = MsgLen;
        __int16 v23 = 2112;
        uint64_t v24 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Outgoing Message ID: 0x%04X (%d bytes) for endpoint %@",  (uint8_t *)&v19,  0x18u);
      }

      return v10;
    }

    id v13 = (os_log_s *)logObjectForModule_1(22);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      _sendOutgoingMessage_cold_3(MsgID, (uint64_t)a1, v13);
    }
  }

  if (gLogObjects) {
    BOOL v14 = gNumLogObjects < 21;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14)
  {
    int v15 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    int v15 = *(os_log_s **)(gLogObjects + 160);
  }

  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    unsigned int v16 = iAP2MsgGetMsgID(a2);
    int v17 = iAP2MsgGetMsgLen(a2);
    if (a1)
    {
      uint64_t v18 = *a1;
      if (*a1) {
        uint64_t v18 = a1[1];
      }
    }

    else
    {
      uint64_t v18 = 0LL;
    }

    int v19 = 67109634;
    unsigned int v20 = v16;
    __int16 v21 = 1024;
    int v22 = v17;
    __int16 v23 = 2112;
    uint64_t v24 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "Failed to send, Outgoing Message ID: 0x%04X (%d bytes) for endpoint %@",  (uint8_t *)&v19,  0x18u);
  }

  return 0LL;
}

uint64_t iap2_sessionControl_sendOutgoingMessage(uint64_t *a1, uint64_t a2)
{
  return _sendOutgoingMessage(a1, a2, 0);
}

void iap2_sessionControl_accAuthenticationStateChanged(const __CFSet *a1, int a2)
{
  if (a1 && a2 == 2 && *(void *)a1)
  {
    if (iap2_identification_getState((uint64_t)a1))
    {
      if (iap2_identification_getState((uint64_t)a1) == 6)
      {
        if (gLogObjects && gNumLogObjects >= 23)
        {
          char v3 = *(os_log_s **)(gLogObjects + 176);
        }

        else
        {
          char v3 = (os_log_s *)&_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            platform_connectionInfo_configStreamCategoryListReady_cold_1();
          }
        }

        if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
        {
          uint64_t v4 = *((void *)a1 + 1);
          int v5 = 138412290;
          uint64_t v6 = v4;
          _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "ID & Auth passed for endpoint %@!",  (uint8_t *)&v5,  0xCu);
        }

        _authAndIDComplete((uint64_t)a1);
      }
    }

    else
    {
      iap2_features_startFeatureFromDevice(a1, 1u);
    }
  }

void _authAndIDComplete(uint64_t a1)
{
  if (a1 && *(void *)a1)
  {
    iap2_endpoint_setInitialized(a1, 1);
    platform_analytics_connectionPassedAuth(**(CFStringRef ***)a1);
    iap2_features_createFeatures((const __CFSet *)a1, 0);
    iap2_features_startFeaturesFromDevice((const __CFSet *)a1, 0);
    platform_analytics_iap2_featuresSupportedDidChange((const __CFSet *)a1);
    uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 24LL);
    if ((~*(_DWORD *)(v2 + 272) & 3) == 0) {
      iAP2TimeSyncStart(v2);
    }
    platform_externalAccessory_addEAAccessoryForPrimaryEndpoint(*(const char **)(a1 + 8));
  }

void iap2_sessionControl_identificationStateChanged(uint64_t a1, int a2)
{
  if (a1)
  {
    char v3 = *(BOOL **)a1;
    if (v3)
    {
      Transportint Type = acc_endpoint_getTransportType((uint64_t)v3);
      if (a2 == 6)
      {
        if (**(void **)a1)
        {
          if (TransportType
            && (TransportType == 8
             || acc_connection_getType(**(void **)a1) == 6 && *(void *)a1 && **(void **)a1))
          {
            if (gLogObjects && gNumLogObjects >= 23)
            {
              uint64_t v6 = *(os_log_s **)(gLogObjects + 176);
            }

            else
            {
              uint64_t v6 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(v15) = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Configuring and unlocking USB Host interfaces...",  (uint8_t *)&v15,  2u);
            }

            acc_connection_isAuthenticated(**(void **)a1, 6LL);
            if (gLogObjects && gNumLogObjects >= 23)
            {
              __int128 v7 = *(os_log_s **)(gLogObjects + 176);
            }

            else
            {
              __int128 v7 = (os_log_s *)&_os_log_default;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                platform_connectionInfo_configStreamCategoryListReady_cold_1();
              }
            }

            if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
            {
              int v8 = *(_DWORD *)(*(void *)a1 + 24LL);
              int v15 = 67109120;
              LODWORD(v16) = v8;
              _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Transport type is %{coreacc:ACCEndpoint_TransportType_t}d, looking for USBHost identification component...",  (uint8_t *)&v15,  8u);
            }

            TransportComponent = iap2_identification_getTransportComponent((void *)a1, 2);
            if (TransportComponent)
            {
              uint64_t v10 = TransportComponent;
              if (gLogObjects && gNumLogObjects >= 23)
              {
                uint64_t v11 = *(os_log_s **)(gLogObjects + 176);
              }

              else
              {
                uint64_t v11 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
              {
                LOWORD(v15) = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "Found USB Host identification component!",  (uint8_t *)&v15,  2u);
              }

              if (v10[53])
              {
                if (!v10[55])
                {
                  if (gLogObjects && gNumLogObjects >= 23)
                  {
                    __int16 v12 = *(os_log_s **)(gLogObjects + 176);
                  }

                  else
                  {
                    __int16 v12 = (os_log_s *)&_os_log_default;
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                      platform_connectionInfo_configStreamCategoryListReady_cold_1();
                    }
                  }

                  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
                  {
                    LOWORD(v15) = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "isCarPlay is not set, but treating it as such anyways",  (uint8_t *)&v15,  2u);
                  }
                }

                if (iap2_identification_isIdentifiedForCarPlay(a1))
                {
                  iAP2_carPlayConnectionType(a1);
                  CFAbsoluteTimeGetCurrent();
                  platform_CarPlay_sendConnectionEvent();
                }

                platform_usb_configureUSBHostNCMInterface(*(void *)(a1 + 16), v10[54], 1LL);
              }
            }

            platform_usb_unlockUSBHostInterfaces(*(void *)(a1 + 16));
          }

          if (iap2_accAuthentication_getState((unsigned int *)a1))
          {
            if (iap2_accAuthentication_getState((unsigned int *)a1) == 2)
            {
              if (gLogObjects && gNumLogObjects >= 23)
              {
                id v13 = *(os_log_s **)(gLogObjects + 176);
              }

              else
              {
                id v13 = (os_log_s *)&_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  platform_connectionInfo_configStreamCategoryListReady_cold_1();
                }
              }

              if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
              {
                uint64_t v14 = *(void *)(a1 + 8);
                int v15 = 138412290;
                uint64_t v16 = v14;
                _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "Auth & ID passed for endpoint %@!",  (uint8_t *)&v15,  0xCu);
              }

              _authAndIDComplete(a1);
            }
          }

          else
          {
            iap2_features_startFeatureFromDevice((const __CFSet *)a1, 0);
          }
        }
      }
    }
  }

void iap2_sessionControl_authorizationHook_authentication(unsigned int *a1, uint64_t a2)
{
  if (!a1 || !*(void *)a1 || !**(void **)a1) {
    return;
  }
  int State = iap2_identification_getState((uint64_t)a1);
  if (gLogObjects && gNumLogObjects >= 23)
  {
    int v5 = *(os_log_s **)(gLogObjects + 176);
  }

  else
  {
    int v5 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = "YES";
    if (!State) {
      uint64_t v6 = "NO";
    }
    int v12 = 136315138;
    id v13 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "authorizationHook from Authentication triggered... (startedIdentification: %s)",  (uint8_t *)&v12,  0xCu);
  }

  if (gLogObjects && gNumLogObjects >= 23)
  {
    __int128 v7 = *(os_log_s **)(gLogObjects + 176);
  }

  else
  {
    __int128 v7 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    iap2_sessionControl_authorizationHook_authentication_cold_1(a1);
    if (State) {
      goto LABEL_20;
    }
LABEL_25:
    (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a2, 1LL);
    return;
  }

  if (!State) {
    goto LABEL_25;
  }
LABEL_20:
  CFTypeRef v8 = iap2_accAuthentication_copyCertificateSerialString((uint64_t)a1);
  uint64_t AccessoryInfo = acc_endpoint_getAccessoryInfo(*(void *)a1);
  uint64_t v10 = (const void *)acc_strings_copyPlaceholder_Unknown();
  CFTypeRef v11 = acc_accInfo_retainedProperty(AccessoryInfo, 0, v10);
  _requestAuthorization((uint64_t)a1, v8, v11, a2);
  if (v8) {
    CFRelease(v8);
  }
  if (v11) {
    CFRelease(v11);
  }
}

void _requestAuthorization(uint64_t a1, CFTypeRef a2, CFTypeRef a3, uint64_t a4)
{
  if (a1)
  {
    int v5 = *(void **)a1;
    if (v5)
    {
      if (*v5)
      {
        if (acc_policies_endpointRequiresUserAuthorization(v5))
        {
          CFTypeRef v9 = CFRetain(*(CFTypeRef *)(a1 + 8));
          if (a2) {
            a2 = CFRetain(a2);
          }
          if (a3) {
            a3 = CFRetain(a3);
          }
          unsigned int v10 = acc_endpoint_isWireless(*(void **)a1);
          if ((v10 & 1) != 0)
          {
            BOOL v11 = 0;
            unsigned int CurrentLimit = 0;
          }

          else
          {
            unsigned int CurrentLimit = platform_power_getCurrentLimit(*(void *)(a1 + 16));
            BOOL v11 = CurrentLimit != 0;
          }

          if (gLogObjects && gNumLogObjects >= 23)
          {
            id v13 = *(os_log_s **)(gLogObjects + 176);
          }

          else
          {
            id v13 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              platform_connectionInfo_configStreamCategoryListReady_cold_1();
            }
          }

          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            int v15 = "NO";
            if (v11) {
              uint64_t v16 = "YES";
            }
            else {
              uint64_t v16 = "NO";
            }
            *(_DWORD *)buf = 136315650;
            unsigned int v20 = v16;
            if (v10) {
              int v15 = "YES";
            }
            __int16 v21 = 2080;
            int v22 = v15;
            __int16 v23 = 1024;
            unsigned int v24 = CurrentLimit;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "providesPower: %s, isWireless: %s, currentLimit: %uma",  buf,  0x1Cu);
          }

          dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
          block[0] = _NSConcreteStackBlock;
          block[1] = 0x40000000LL;
          block[2] = ___requestAuthorization_block_invoke;
          block[3] = &unk_1001FBB40;
          BOOL v18 = v11;
          void block[6] = a3;
          void block[7] = v9;
          void block[4] = a4;
          block[5] = a2;
          dispatch_async(global_queue, block);
        }

        else
        {
          (*(void (**)(uint64_t, uint64_t))(a4 + 16))(a4, 1LL);
        }
      }
    }
  }

void iap2_sessionControl_authorizationHook_identification(unsigned int *a1, const void *a2, uint64_t a3)
{
  if (a1 && *(void *)a1 && **(void **)a1)
  {
    unsigned int State = iap2_accAuthentication_getState(a1);
    if (gLogObjects && gNumLogObjects >= 23)
    {
      __int128 v7 = *(os_log_s **)(gLogObjects + 176);
    }

    else
    {
      __int128 v7 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      CFTypeRef v8 = "YES";
      if (!State) {
        CFTypeRef v8 = "NO";
      }
      int v11 = 136315138;
      int v12 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "authorizationHook from Identification triggered... (startedAuthentication: %s)",  (uint8_t *)&v11,  0xCu);
    }

    if (gLogObjects && gNumLogObjects >= 23)
    {
      CFTypeRef v9 = *(os_log_s **)(gLogObjects + 176);
    }

    else
    {
      CFTypeRef v9 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      iap2_sessionControl_authorizationHook_authentication_cold_1(a1);
      if (State)
      {
LABEL_20:
        CFTypeRef v10 = iap2_accAuthentication_copyCertificateSerialString((uint64_t)a1);
        _requestAuthorization((uint64_t)a1, v10, a2, a3);
        if (v10) {
          CFRelease(v10);
        }
        return;
      }
    }

    else if (State)
    {
      goto LABEL_20;
    }

    (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, 1LL);
  }

void ___requestAuthorization_block_invoke(uint64_t a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 23;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    char v3 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  else
  {
    char v3 = *(os_log_s **)(gLogObjects + 176);
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Checking accessory authorization...", buf, 2u);
  }

  if (gLogObjects && gNumLogObjects >= 23)
  {
    uint64_t v4 = *(os_log_s **)(gLogObjects + 176);
  }

  else
  {
    uint64_t v4 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    ___requestAuthorization_block_invoke_cold_1(a1, v4);
  }
  unint64_t CurrentUnixTimeMS = systemInfo_getCurrentUnixTimeMS();
  uint64_t v6 = *(unsigned __int8 *)(a1 + 64);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 0x40000000LL;
  _DWORD v12[2] = ___requestAuthorization_block_invoke_2;
  v12[3] = &unk_1001FBB18;
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  v12[5] = CurrentUnixTimeMS;
  v12[6] = v8;
  uint64_t v9 = *(void *)(a1 + 40);
  v12[4] = *(void *)(a1 + 32);
  requestAuthorizationForCertSerial(v9, v7, v6, v12);
  CFTypeRef v10 = *(const void **)(a1 + 40);
  if (v10) {
    CFRelease(v10);
  }
  int v11 = *(const void **)(a1 + 48);
  if (v11) {
    CFRelease(v11);
  }
}

void ___requestAuthorization_block_invoke_2(uint64_t a1, int a2)
{
  if (gLogObjects) {
    BOOL v3 = gNumLogObjects <= 22;
  }
  else {
    BOOL v3 = 1;
  }
  int v4 = !v3;
  if (a2)
  {
    if (v4)
    {
      int v5 = *(os_log_s **)(gLogObjects + 176);
    }

    else
    {
      int v5 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Accessory is authorized!", v12, 2u);
    }

    unint64_t CurrentUnixTimeMS = systemInfo_getCurrentUnixTimeMS();
    uint64_t v8 = *(void *)(a1 + 40);
    if (gLogObjects && gNumLogObjects >= 23)
    {
      uint64_t v9 = *(os_log_s **)(gLogObjects + 176);
    }

    else
    {
      uint64_t v9 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    unint64_t v10 = CurrentUnixTimeMS - v8;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int v12 = 134217984;
      *(void *)&v12[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Authorization response time: %llums", v12, 0xCu);
    }

    if (v10 >= 0x2EF) {
      platform_system_resetLightningBusForEndpointWithUUID(*(void **)(a1 + 48));
    }
    *(void *)int v12 = *(void *)(a1 + 32);
    acc_manager_callbackForEndpoint( *(const void **)(a1 + 48),  (void (*)(uint64_t, uint64_t))_iap2_session_control_endpointCallback,  (uint64_t)v12,  0);
  }

  else
  {
    if (v4)
    {
      uint64_t v6 = *(os_log_s **)(gLogObjects + 176);
    }

    else
    {
      uint64_t v6 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Accessory is not authorized!", v12, 2u);
    }
  }

  int v11 = *(const void **)(a1 + 48);
  if (v11) {
    CFRelease(v11);
  }
}

uint64_t _iap2_session_control_endpointCallback(uint64_t a1, uint64_t *a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 56);
    if (v2)
    {
      if (*(_DWORD *)(a1 + 28) == 4)
      {
        uint64_t v3 = *a2;
        int v4 = *(dispatch_queue_s **)(v2 + 24);
        block[0] = _NSConcreteStackBlock;
        block[1] = 0x40000000LL;
        block[2] = ___iap2_session_control_endpointCallback_block_invoke;
        block[3] = &unk_1001FBB68;
        void block[4] = v3;
        dispatch_async(v4, block);
      }
    }
  }

  return 0LL;
}

uint64_t ___iap2_session_control_endpointCallback_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

  ;
}

uint64_t OUTLINED_FUNCTION_6_8()
{
  return iap2_identification_getState(v0);
}

id platform_destinationSharing_startDestinationInformation(uint64_t a1, uint64_t a2)
{
  int v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACCExternalAccessoryServer sharedServer](&OBJC_CLASS___ACCExternalAccessoryServer, "sharedServer"));
  int v5 = v4;
  if (v4) {
    id v6 = [v4 startDestinationSharing:a1 options:a2];
  }
  else {
    id v6 = 0LL;
  }

  return v6;
}

id platform_destinationSharing_stopDestinationInformation(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ACCExternalAccessoryServer sharedServer](&OBJC_CLASS___ACCExternalAccessoryServer, "sharedServer"));
  uint64_t v3 = v2;
  if (v2) {
    id v4 = [v2 stopDestinationSharing:a1];
  }
  else {
    id v4 = 0LL;
  }

  return v4;
}

id platform_destinationSharing_destinationInformationStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[ACCExternalAccessoryServer sharedServer](&OBJC_CLASS___ACCExternalAccessoryServer, "sharedServer"));
  uint64_t v9 = v8;
  if (v8) {
    id v10 = [v8 destinationSharingStatus:a2 success:a3 successfulParams:a4 forAccessoryUUID:a1];
  }
  else {
    id v10 = 0LL;
  }

  return v10;
}

uint64_t platform_destinationSharing_destinationInformation(const void *a1, uint64_t a2)
{
  return accFeatureHandlers_invokeHandler(a1, 39, a2);
}

void platform_mediaLibrary_accessoryAttached(void *a1, uint64_t a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 31;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v6 = (os_log_s *)&_os_log_default;
    id v5 = &_os_log_default;
  }

  else
  {
    id v6 = (os_log_s *)*(id *)(gLogObjects + 240);
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v10 = 138412546;
    int v11 = a1;
    __int16 v12 = 1024;
    int v13 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "accessoryAttached: UID=%@ windowPerLibrary=%d",  (uint8_t *)&v10,  0x12u);
  }

  if (a1)
  {
    id v7 = a1;
    id v8 = (id)objc_claimAutoreleasedReturnValue(+[ACCMediaLibraryServer sharedServer](&OBJC_CLASS___ACCMediaLibraryServer, "sharedServer"));
    [v8 accessoryMediaLibraryAttached:v7 windowPerLibrary:a2];
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 31)
    {
      id v8 = *(id *)(gLogObjects + 240);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v8 = &_os_log_default;
      id v9 = &_os_log_default;
    }

    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v10) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v8,  OS_LOG_TYPE_DEFAULT,  "ERROR: Invalid NULL accessoryUID",  (uint8_t *)&v10,  2u);
    }
  }
}

void platform_mediaLibrary_accessoryDetached(void *a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 31;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  else
  {
    BOOL v4 = (os_log_s *)*(id *)(gLogObjects + 240);
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v8 = 138412290;
    id v9 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "accessoryDetached: UID=%@", (uint8_t *)&v8, 0xCu);
  }

  if (a1)
  {
    id v5 = a1;
    id v6 = (id)objc_claimAutoreleasedReturnValue(+[ACCMediaLibraryServer sharedServer](&OBJC_CLASS___ACCMediaLibraryServer, "sharedServer"));
    [v6 accessoryMediaLibraryDetached:v5];
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 31)
    {
      id v6 = *(id *)(gLogObjects + 240);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v6 = &_os_log_default;
      id v7 = &_os_log_default;
    }

    if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v_Block_object_dispose(va, 8) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v6,  OS_LOG_TYPE_DEFAULT,  "ERROR: Invalid NULL accessoryUID",  (uint8_t *)&v8,  2u);
    }
  }
}

void platform_mediaLibrary_accessoryUpdate(void *a1, uint64_t a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 31;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v6 = (os_log_s *)&_os_log_default;
    id v5 = &_os_log_default;
  }

  else
  {
    id v6 = (os_log_s *)*(id *)(gLogObjects + 240);
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v10 = 138412546;
    int v11 = a1;
    __int16 v12 = 1024;
    int v13 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "accessoryUpdate: UID=%@ windowPerLibrary=%d",  (uint8_t *)&v10,  0x12u);
  }

  if (a1)
  {
    id v7 = a1;
    id v8 = (id)objc_claimAutoreleasedReturnValue(+[ACCMediaLibraryServer sharedServer](&OBJC_CLASS___ACCMediaLibraryServer, "sharedServer"));
    [v8 accessoryMediaLibraryUpdate:v7 windowPerLibrary:a2];
  }

  else
  {
    if (gLogObjects && gNumLogObjects >= 31)
    {
      id v8 = *(id *)(gLogObjects + 240);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
      id v8 = &_os_log_default;
      id v9 = &_os_log_default;
    }

    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v10) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v8,  OS_LOG_TYPE_DEFAULT,  "ERROR: Invalid NULL accessoryUID",  (uint8_t *)&v10,  2u);
    }
  }
}

void platform_mediaLibrary_requestLibraryInfoUpdate(void *a1)
{
  if (gLogObjects) {
    BOOL v2 = gNumLogObjects < 31;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v4 = (os_log_s *)&_os_log_default;
    id v3 = &_os_log_default;
  }

  else
  {
    BOOL v4 = (os_log_s *)*(id *)(gLogObjects + 240);
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v7 = 138412290;
    id v8 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "requestLibraryInfoUpdate: UID=%@",  (uint8_t *)&v7,  0xCu);
  }

  id v5 = a1;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[ACCMediaLibraryServer sharedServer](&OBJC_CLASS___ACCMediaLibraryServer, "sharedServer"));
  [v6 requestMediaLibraryUpdate:v5];
}

void platform_mediaLibrary_confirmLibraryUpdate(void *a1, void *a2, void *a3, uint64_t a4)
{
  if (gLogObjects) {
    BOOL v8 = gNumLogObjects < 31;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v10 = (os_log_s *)&_os_log_default;
    id v9 = &_os_log_default;
  }

  else
  {
    int v10 = (os_log_s *)*(id *)(gLogObjects + 240);
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    int v15 = 138413058;
    uint64_t v16 = a1;
    __int16 v17 = 2112;
    BOOL v18 = a2;
    __int16 v19 = 2112;
    unsigned int v20 = a3;
    __int16 v21 = 1024;
    int v22 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "confirmLibraryUpdate: accessoryUID=%@ libraryUID=%@ lastRevision=%@ updateCount=%d",  (uint8_t *)&v15,  0x26u);
  }

  if (a1 && a2)
  {
    if ((_DWORD)a4)
    {
      id v11 = a3;
      id v12 = a2;
      id v13 = a1;
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[ACCMediaLibraryServer sharedServer](&OBJC_CLASS___ACCMediaLibraryServer, "sharedServer"));
      [v14 confirmUpdate:v13 library:v12 lastRevision:v11 updateCount:a4];
    }
  }

void platform_mediaLibrary_confirmLibraryPlaylistContentUpdate(void *a1, void *a2, void *a3)
{
  if (gLogObjects) {
    BOOL v6 = gNumLogObjects < 31;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v8 = (os_log_s *)&_os_log_default;
    id v7 = &_os_log_default;
  }

  else
  {
    BOOL v8 = (os_log_s *)*(id *)(gLogObjects + 240);
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    int v13 = 138412802;
    uint64_t v14 = a1;
    __int16 v15 = 2112;
    uint64_t v16 = a2;
    __int16 v17 = 2112;
    BOOL v18 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "confirmLibraryPlaylistContentUpdate: accessoryUID=%@ libraryUID=%@ lastRevision=%@",  (uint8_t *)&v13,  0x20u);
  }

  if (a1)
  {
    if (a2)
    {
      id v9 = a3;
      id v10 = a2;
      id v11 = a1;
      id v12 = (void *)objc_claimAutoreleasedReturnValue(+[ACCMediaLibraryServer sharedServer](&OBJC_CLASS___ACCMediaLibraryServer, "sharedServer"));
      [v12 confirmPlaylistContentUpdate:v11 library:v10 lastRevision:v9];
    }
  }

uint64_t platform_mediaLibrary_startMediaLibraryUpdate( void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, int a8, unsigned int a9, uint64_t a10)
{
  if (a8) {
    int v16 = 2;
  }
  else {
    int v16 = 0;
  }
  if (gLogObjects) {
    BOOL v17 = gNumLogObjects < 31;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    __int16 v19 = (os_log_s *)&_os_log_default;
    id v18 = &_os_log_default;
  }

  else
  {
    __int16 v19 = (os_log_s *)*(id *)(gLogObjects + 240);
  }

  uint64_t v20 = v16 | a7;
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138414082;
    __int16 v27 = a1;
    __int16 v28 = 2112;
    __int16 v29 = a2;
    __int16 v30 = 2112;
    uint32_t v31 = a3;
    __int16 v32 = 2048;
    uint64_t v33 = a4;
    __int16 v34 = 2048;
    uint64_t v35 = a5;
    __int16 v36 = 2048;
    uint64_t v37 = a10;
    __int16 v38 = 1024;
    unsigned int v39 = a9;
    __int16 v40 = 1024;
    int v41 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "startMediaLibraryUpdate: accessoryUID=%@ libraryUID=%@ lastRevision=%@ itemProp=%llxh playlistProp=%llxh playlistC ontentProp=%llxh contentStyle=%d reqOptions=%xh",  buf,  0x4Au);
  }

  id v21 = a3;
  id v22 = a2;
  id v23 = a1;
  unsigned int v24 = (void *)objc_claimAutoreleasedReturnValue(+[ACCMediaLibraryServer sharedServer](&OBJC_CLASS___ACCMediaLibraryServer, "sharedServer"));
  [v24 startMediaLibraryUpdate:v23 library:v22 lastRevision:v21 mediaItemProperties:a4 playlistProperties:a5 playlistContentStyle:a9 playlistCon tentProperties:a10 reqOptions:v20];

  return 1LL;
}

uint64_t platform_mediaLibrary_stopMediaLibraryUpdate(void *a1, void *a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 31;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v6 = (os_log_s *)&_os_log_default;
    id v5 = &_os_log_default;
  }

  else
  {
    BOOL v6 = (os_log_s *)*(id *)(gLogObjects + 240);
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v11 = 138412546;
    id v12 = a1;
    __int16 v13 = 2112;
    uint64_t v14 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "stopMediaLibraryUpdate: accessoryUID=%@ libraryUID=%@",  (uint8_t *)&v11,  0x16u);
  }

  id v7 = a2;
  id v8 = a1;
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[ACCMediaLibraryServer sharedServer](&OBJC_CLASS___ACCMediaLibraryServer, "sharedServer"));
  [v9 stopMediaLibraryUpdate:v8 library:v7];

  return 1LL;
}

uint64_t platform_mediaLibrary_playCurrentSelection(void *a1, void *a2)
{
  if (gLogObjects) {
    BOOL v4 = gNumLogObjects < 31;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v6 = (os_log_s *)&_os_log_default;
    id v5 = &_os_log_default;
  }

  else
  {
    BOOL v6 = (os_log_s *)*(id *)(gLogObjects + 240);
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v11 = 138412546;
    id v12 = a1;
    __int16 v13 = 2112;
    uint64_t v14 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "playCurrentSelection: accessoryUID=%@ libraryUID=%@",  (uint8_t *)&v11,  0x16u);
  }

  id v7 = a2;
  id v8 = a1;
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[ACCMediaLibraryServer sharedServer](&OBJC_CLASS___ACCMediaLibraryServer, "sharedServer"));
  [v9 playCurrentSelection:v8 library:v7];

  return 1LL;
}

uint64_t platform_mediaLibrary_playItems(void *a1, void *a2, uint64_t *a3, unsigned int a4, uint64_t a5)
{
  if (gLogObjects) {
    BOOL v10 = gNumLogObjects < 31;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v12 = (os_log_s *)&_os_log_default;
    id v11 = &_os_log_default;
  }

  else
  {
    id v12 = (os_log_s *)*(id *)(gLogObjects + 240);
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    int v21 = 138413058;
    id v22 = a1;
    __int16 v23 = 2112;
    unsigned int v24 = a2;
    __int16 v25 = 1024;
    unsigned int v26 = a4;
    __int16 v27 = 1024;
    int v28 = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "playItems: accessoryUID=%@ libraryUID=%@ itemPersistentIDCount=%u startingIndex=%u",  (uint8_t *)&v21,  0x22u);
  }

  uint64_t v13 = a4;
  uint64_t v14 = -[NSMutableArray initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableArray), "initWithCapacity:", a4);
  if (a4)
  {
    do
    {
      uint64_t v15 = *a3++;
      int v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v15));
      -[NSMutableArray addObject:](v14, "addObject:", v16);

      --v13;
    }

    while (v13);
  }

  id v17 = a2;
  id v18 = a1;
  __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(+[ACCMediaLibraryServer sharedServer](&OBJC_CLASS___ACCMediaLibraryServer, "sharedServer"));
  [v19 playItems:v18 library:v17 itemList:v14 startIndex:a5];

  return 1LL;
}

uint64_t platform_mediaLibrary_playCollection( void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (gLogObjects) {
    BOOL v12 = gNumLogObjects < 31;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v14 = (os_log_s *)&_os_log_default;
    id v13 = &_os_log_default;
  }

  else
  {
    uint64_t v14 = (os_log_s *)*(id *)(gLogObjects + 240);
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    int v20 = 138413570;
    int v21 = a1;
    __int16 v22 = 2112;
    __int16 v23 = a2;
    __int16 v24 = 2048;
    uint64_t v25 = a3;
    __int16 v26 = 1024;
    int v27 = a4;
    __int16 v28 = 1024;
    int v29 = a5;
    __int16 v30 = 2048;
    uint64_t v31 = a6;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "playCollection: accessoryUID=%@ libraryUID=%@ collectionPersistentID=%llu collectionType=%d startingIndex=%u start ingItemPersistentID=%llu",  (uint8_t *)&v20,  0x36u);
  }

  id v15 = a2;
  id v16 = a1;
  id v17 = (void *)objc_claimAutoreleasedReturnValue(+[ACCMediaLibraryServer sharedServer](&OBJC_CLASS___ACCMediaLibraryServer, "sharedServer"));
  id v18 = v17;
  if (a6) {
    [v17 playCollection:v16 library:v15 collection:a3 type:a4 startItem:a6];
  }
  else {
    [v17 playCollection:v16 library:v15 collection:a3 type:a4 startIndex:a5];
  }

  return 1LL;
}

uint64_t platform_mediaLibrary_playAllSongs(void *a1, void *a2, uint64_t a3)
{
  if (gLogObjects) {
    BOOL v6 = gNumLogObjects < 31;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v8 = (os_log_s *)&_os_log_default;
    id v7 = &_os_log_default;
  }

  else
  {
    id v8 = (os_log_s *)*(id *)(gLogObjects + 240);
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    int v13 = 138412802;
    uint64_t v14 = a1;
    __int16 v15 = 2112;
    id v16 = a2;
    __int16 v17 = 2048;
    uint64_t v18 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "playAllSongs: accessoryUID=%@ libraryUID=%@ startingItemPersistentID=%llu",  (uint8_t *)&v13,  0x20u);
  }

  id v9 = a2;
  id v10 = a1;
  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[ACCMediaLibraryServer sharedServer](&OBJC_CLASS___ACCMediaLibraryServer, "sharedServer"));
  [v11 playAllSongs:v10 library:v9 startItem:a3];

  return 1LL;
}

uint64_t platform_mediaLibrary_infoUpdateHandler(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (gLogObjects) {
    BOOL v5 = gNumLogObjects < 31;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    id v7 = (os_log_s *)&_os_log_default;
    id v6 = &_os_log_default;
  }

  else
  {
    id v7 = (os_log_s *)*(id *)(gLogObjects + 240);
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    if (v4) {
      id v8 = @".";
    }
    else {
      id v8 = @"nil ";
    }
    if (v4) {
      id v9 = [v4 count];
    }
    else {
      id v9 = 0LL;
    }
    int v13 = 138412802;
    id v14 = v3;
    __int16 v15 = 2112;
    id v16 = v8;
    __int16 v17 = 2048;
    id v18 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "infoUpdateHandler %@ libraryInfoList(%@count=%lu)",  (uint8_t *)&v13,  0x20u);
  }

  id v10 = malloc(0x38uLL);
  *(_DWORD *)id v10 = 0;
  v10[6] = 0LL;
  v10[1] = v4;
  uint64_t v11 = accFeatureHandlers_invokeHandler(v3, 13, (uint64_t)v10);
  if ((v11 & 1) == 0) {
    platform_mediaLibrary_deleteParams(v10);
  }

  return v11;
}

void platform_mediaLibrary_deleteParams(void *a1)
{
  if (a1)
  {
    switch(*(_DWORD *)a1)
    {
      case 0:
      case 1:
        id v3 = (char *)(a1 + 1);
        BOOL v2 = (const void *)a1[1];
        if (v2) {
          goto LABEL_4;
        }
        break;
      case 2:
        BOOL v5 = (const void *)a1[1];
        if (v5)
        {
          CFRelease(v5);
          a1[1] = 0LL;
        }

        id v3 = (char *)(a1 + 3);
        BOOL v2 = (const void *)a1[3];
        if (v2) {
          goto LABEL_4;
        }
        break;
      case 3:
        id v6 = (const void *)a1[1];
        if (v6)
        {
          CFRelease(v6);
          a1[1] = 0LL;
        }

        id v7 = (const void *)a1[2];
        if (v7)
        {
          CFRelease(v7);
          a1[2] = 0LL;
        }

        id v3 = (char *)(a1 + 5);
        BOOL v2 = (const void *)a1[5];
        if (v2)
        {
LABEL_4:
          CFRelease(v2);
          *(void *)id v3 = 0LL;
        }

        break;
      default:
        break;
    }

    id v4 = (void *)a1[6];
    if (v4)
    {
      a1[6] = 0LL;
    }

    free(a1);
  }

uint64_t platform_mediaLibrary_libraryStateUpdateHandler(void *a1, void *a2, int a3, int a4)
{
  id v7 = a1;
  id v8 = a2;
  if (gLogObjects) {
    BOOL v9 = gNumLogObjects < 31;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    uint64_t v11 = (os_log_s *)&_os_log_default;
    id v10 = &_os_log_default;
  }

  else
  {
    uint64_t v11 = (os_log_s *)*(id *)(gLogObjects + 240);
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    int v15 = 138413058;
    id v16 = v7;
    __int16 v17 = 2112;
    id v18 = v8;
    __int16 v19 = 1024;
    int v20 = a3;
    __int16 v21 = 1024;
    int v22 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "libraryStateUpdateHandler %@ library:%@ statetype=%d enabled=%d",  (uint8_t *)&v15,  0x22u);
  }

  BOOL v12 = malloc(0x38uLL);
  *(_DWORD *)BOOL v12 = 1;
  v12[6] = 0LL;
  v12[1] = v8;
  *((_DWORD *)v12 + 4) = a3;
  *((_BYTE *)v12 + 20) = a4;
  uint64_t v13 = accFeatureHandlers_invokeHandler(v7, 14, (uint64_t)v12);
  if ((v13 & 1) == 0) {
    platform_mediaLibrary_deleteParams(v12);
  }

  return v13;
}

uint64_t platform_mediaLibrary_updateHandler(void *a1, void *a2, int a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a4;
  if (gLogObjects) {
    BOOL v10 = gNumLogObjects < 31;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    BOOL v12 = (os_log_s *)&_os_log_default;
    id v11 = &_os_log_default;
  }

  else
  {
    BOOL v12 = (os_log_s *)*(id *)(gLogObjects + 240);
  }

  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    if (v9) {
      uint64_t v13 = @".";
    }
    else {
      uint64_t v13 = @"nil ";
    }
    int v17 = 138413314;
    id v18 = v7;
    __int16 v19 = 2112;
    id v20 = v8;
    __int16 v21 = 1024;
    int v22 = a3;
    __int16 v23 = 2112;
    __int16 v24 = v13;
    __int16 v25 = 2048;
    id v26 = [v9 count];
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "updateHandler %@ library:%@ startFull=%d data:(%@count=%lu)",  (uint8_t *)&v17,  0x30u);
  }

  id v14 = malloc(0x38uLL);
  *(_DWORD *)id v14 = 2;
  void v14[6] = 0LL;
  v14[1] = v8;
  *((_BYTE *)v14 + 16) = a3;
  void v14[3] = v9;
  uint64_t v15 = accFeatureHandlers_invokeHandler(v7, 15, (uint64_t)v14);
  if ((v15 & 1) == 0) {
    platform_mediaLibrary_deleteParams(v14);
  }

  return v15;
}

uint64_t platform_mediaLibrary_updatePlaylistContentHandler( void *a1, void *a2, void *a3, uint64_t a4, int a5, void *a6)
{
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a6;
  if (gLogObjects) {
    BOOL v15 = gNumLogObjects < 31;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
    int v17 = (os_log_s *)&_os_log_default;
    id v16 = &_os_log_default;
  }

  else
  {
    int v17 = (os_log_s *)*(id *)(gLogObjects + 240);
  }

  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    if (v14) {
      id v18 = @".";
    }
    else {
      id v18 = @"nil ";
    }
    int v22 = 138413826;
    id v23 = v11;
    __int16 v24 = 2112;
    id v25 = v12;
    __int16 v26 = 2112;
    id v27 = v13;
    __int16 v28 = 2048;
    uint64_t v29 = a4;
    __int16 v30 = 1024;
    int v31 = a5;
    __int16 v32 = 2112;
    uint64_t v33 = v18;
    __int16 v34 = 2048;
    id v35 = [v14 count];
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "updatePlaylistContentHandler %@ library:%@ revision:%@ persistentID=%llu style=%d data:(%@count=%lu)",  (uint8_t *)&v22,  0x44u);
  }

  __int16 v19 = malloc(0x38uLL);
  *(_DWORD *)__int16 v19 = 3;
  v19[1] = v12;
  _DWORD v19[2] = v13;
  v19[3] = a4;
  *((_DWORD *)v19 + _Block_object_dispose(va, 8) = a5;
  void v19[5] = v14;
  void v19[6] = 0LL;
  uint64_t v20 = accFeatureHandlers_invokeHandler(v11, 16, (uint64_t)v19);
  if ((v20 & 1) == 0) {
    platform_mediaLibrary_deleteParams(v19);
  }

  return v20;
}

uint64_t platform_mediaLibrary_getStructUpdateItem(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v4 = result;
    uint64_t result = 0LL;
    if (a3)
    {
      if (a2 && *(_DWORD *)v4 == 2)
      {
        id v6 = *(void **)(v4 + 48);
        if (v6)
        {
          *(void *)(v4 + 4_Block_object_dispose(va, 8) = 0LL;
        }

        id v7 = -[ACCMediaLibraryUpdateItem initWithMediaLibrary:dict:]( objc_alloc(&OBJC_CLASS___ACCMediaLibraryUpdateItem),  "initWithMediaLibrary:dict:",  *(void *)(v4 + 8),  a2);
        -[ACCMediaLibraryUpdateItem fillStruct:](v7, "fillStruct:", a3);
        *(void *)(v4 + 4_Block_object_dispose(va, 8) = v7;
        return 1LL;
      }
    }
  }

  return result;
}

uint64_t platform_mediaLibrary_getStructUpdatePlaylist(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v4 = result;
    uint64_t result = 0LL;
    if (a3)
    {
      if (a2 && *(_DWORD *)v4 == 2)
      {
        id v6 = *(void **)(v4 + 48);
        if (v6)
        {
          *(void *)(v4 + 4_Block_object_dispose(va, 8) = 0LL;
        }

        id v7 = -[ACCMediaLibraryUpdatePlaylist initWithMediaLibrary:dict:]( objc_alloc(&OBJC_CLASS___ACCMediaLibraryUpdatePlaylist),  "initWithMediaLibrary:dict:",  *(void *)(v4 + 8),  a2);
        -[ACCMediaLibraryUpdatePlaylist fillStruct:](v7, "fillStruct:", a3);
        *(void *)(v4 + 4_Block_object_dispose(va, 8) = v7;
        return 1LL;
      }
    }
  }

  return result;
}

uint64_t platform_mediaLibrary_getStructPlaylistContentItem(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v4 = result;
    uint64_t result = 0LL;
    if (a3)
    {
      if (a2 && *(_DWORD *)v4 == 3)
      {
        id v6 = *(void **)(v4 + 48);
        if (v6)
        {
          *(void *)(v4 + 4_Block_object_dispose(va, 8) = 0LL;
        }

        id v7 = -[ACCMediaLibraryUpdatePlaylistContentItem initWithMediaLibrary:playlistPersistentID:dict:]( objc_alloc(&OBJC_CLASS___ACCMediaLibraryUpdatePlaylistContentItem),  "initWithMediaLibrary:playlistPersistentID:dict:",  *(void *)(v4 + 8),  *(void *)(v4 + 24),  a2);
        -[ACCMediaLibraryUpdatePlaylistContentItem fillStruct:](v7, "fillStruct:", a3);
        *(void *)(v4 + 4_Block_object_dispose(va, 8) = v7;
        return 1LL;
      }
    }
  }

  return result;
}

void platform_mediaLibrary_incrementUserCount()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[ACCMediaLibraryServer sharedServer](&OBJC_CLASS___ACCMediaLibraryServer, "sharedServer"));
  [v0 incrementUserCount];

  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[ACCMediaLibraryServer sharedServer](&OBJC_CLASS___ACCMediaLibraryServer, "sharedServer"));
  unsigned int v2 = [v1 featureUserCount];

  if (v2 == 1)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[ACCFeaturePluginManager sharedManager](&OBJC_CLASS___ACCFeaturePluginManager, "sharedManager"));
    [v3 startPlugInsWithClasses:&off_100206AD0];
  }

void platform_mediaLibrary_decrementUserCount()
{
  id v0 = (id)objc_claimAutoreleasedReturnValue(+[ACCMediaLibraryServer sharedServer](&OBJC_CLASS___ACCMediaLibraryServer, "sharedServer"));
  [v0 decrementUserCount];
}

id _statusUpdateHandler(uint64_t a1, uint64_t a2)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  34LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  id v5 = 0LL;
  if (!a1 || !a2) {
    goto LABEL_118;
  }
  id v6 = &startLogsNotificationObservers;
  if (gLogObjects && gNumLogObjects >= 41)
  {
    id v7 = *(os_log_s **)(gLogObjects + 320);
  }

  else
  {
    id v7 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)uint64_t v112 = iAP2MsgGetMsgID(a2);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Received Vehicle Status Update message (0x%04X)!",  buf,  8u);
  }

  uint64_t Feature = iap2_feature_getFeature(a1, 0x14u);
  if (!Feature)
  {
LABEL_183:
    id v5 = 0LL;
    if (!Mutable) {
      return v5;
    }
    goto LABEL_119;
  }

  if (!*(_BYTE *)(Feature + 137) || !*(_BYTE *)(Feature + 138))
  {
    __int16 v49 = (os_log_s *)logObjectForModule_17();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR)) {
      _statusUpdateHandler_cold_1();
    }
    goto LABEL_183;
  }

  uint64_t v107 = a1;
  unint64_t FirstParam = iAP2MsgGetFirstParam(a2, 0LL);
  if (FirstParam)
  {
    BOOL v10 = (unsigned __int16 *)FirstParam;
    uint64_t v106 = (const void *)kCFACCVehicleInfoMaxRangeCNGKey;
    uint64_t v104 = (const void *)kCFACCVehicleInfoMaxRangeGasolineKey;
    uint64_t v105 = (const void *)kCFACCVehicleInfoMaxRangeDieselKey;
    uint64_t v102 = (const void *)kCFACCVehicleInfoActiveConnectorKey;
    uint64_t v103 = (const void *)kCFACCVehicleInfoMaxRangeElectricKey;
    id v100 = (const void *)kCFACCVehicleInfoChargingParameterKey;
    id v101 = (const void *)kCFACCVehicleInfoConsumptionParameterKey;
    unint64_t v98 = (const void *)kCFACCVehicleInfoDisplayedBatteryPercentageKey;
    id v99 = (const void *)kCFACCVehicleInfoIsChargingKey;
    id v96 = (const void *)kCFACCVehicleInfoCurrentBatteryChargeKey;
    unint64_t v97 = (const void *)kCFACCVehicleInfoMaxBatteryChargeKey;
    int v94 = (const void *)kCFACCVehicleInfoPassengerSeatStatus;
    int v95 = (const void *)kCFACCVehicleInfoMinBatteryChargeKey;
    int v92 = (const void *)kCFACCVehicleInfoBarometricPressure;
    uint64_t v93 = (void *)kCFACCVehicleInfoAlerts;
    __int16 v78 = (void *)kCFACCVehicleInfoWiperStatusWipeDurationMs;
    key = (void *)kCFACCVehicleInfoWiperStatusWasherOn;
    CFStringRef v77 = (void *)kCFACCVehicleInfoWiperStatusWaitDurationMs;
    __int16 v80 = (void *)kCFACCVehicleInfoWiperStatus;
    __int16 v90 = (const void *)kCFACCVehicleInfoHasLowDistanceRangeElectricKey;
    CFBooleanRef v91 = (const void *)kCFACCVehicleInfoHasLowDistanceRangeCNGKey;
    __int16 v88 = (const void *)kCFACCVehicleInfoHasLowDistanceRangeGasolineKey;
    CFStringRef v89 = (const void *)kCFACCVehicleInfoHasLowDistanceRangeDieselKey;
    __int16 v86 = (const void *)kCFACCVehicleInfoRangeElectricKey;
    CFStringRef v87 = (const void *)kCFACCVehicleInfoRangeCNGKey;
    __int16 v84 = (const void *)kCFACCVehicleInfoRangeGasolineKey;
    CFStringRef v85 = (const void *)kCFACCVehicleInfoRangeDieselKey;
    CFNumberRef v83 = (const void *)kCFACCVehicleInfoHasLowDistanceRangeKey;
    __int16 v82 = (const void *)kCFACCVehicleInfoOutsideTemperatureKey;
    CFNumberRef v81 = (const void *)kCFACCVehicleInfoRangeKey;
    while (1)
    {
      int ParamID = iAP2MsgGetParamID((uint64_t)v10);
      uint64_t v12 = v6[353];
      int v13 = gNumLogObjects;
      if (v12 && gNumLogObjects >= 41)
      {
        id v14 = *(os_log_s **)(v12 + 320);
      }

      else
      {
        id v14 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)uint64_t v112 = v12;
          *(_WORD *)&v112[8] = 1024;
          int v113 = v13;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
        }
      }

      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)uint64_t v112 = ParamID;
        _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "msgParamID: %d", buf, 8u);
      }

      switch(ParamID)
      {
        case 3:
          *(_DWORD *)buf = -1431655766;
          LOWORD(valuePtr) = -21846;
          LOWORD(valuePtr) = iAP2MsgGetDataAsU16(v10, buf);
          if (!*(_DWORD *)buf)
          {
            BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
            id v16 = Mutable;
            int v17 = v81;
            goto LABEL_106;
          }

          int v50 = (os_log_s *)logObjectForModule_17();
          if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
            iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_4(a2);
          }
          goto LABEL_183;
        case 4:
          *(_DWORD *)buf = -1431655766;
          LOWORD(valuePtr) = -21846;
          LOWORD(valuePtr) = iAP2MsgGetDataAsI16(v10, buf);
          if (*(_DWORD *)buf)
          {
            unint64_t v51 = (os_log_s *)logObjectForModule_17();
            if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
              iap2_wifisharing_AccessoryWiFiConfigurationInformation_cold_5(a2);
            }
            goto LABEL_183;
          }

          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v82;
          goto LABEL_106;
        case 6:
          *(_DWORD *)buf = -1431655766;
          LOBYTE(valuePtr) = -86;
          LOBYTE(valuePtr) = iAP2MsgGetDataAsBool(v10, (BOOL *)buf);
          if (*(_DWORD *)buf)
          {
            unsigned int v52 = (os_log_s *)logObjectForModule_17();
            if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_4(a2);
            }
            goto LABEL_183;
          }

          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v83;
          goto LABEL_106;
        case 9:
          *(_DWORD *)buf = -1431655766;
          LOWORD(valuePtr) = -21846;
          LOWORD(valuePtr) = iAP2MsgGetDataAsU16(v10, buf);
          if (*(_DWORD *)buf)
          {
            uint64_t v53 = (os_log_s *)logObjectForModule_17();
            if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_5(a2);
            }
            goto LABEL_183;
          }

          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v84;
          goto LABEL_106;
        case 10:
          *(_DWORD *)buf = -1431655766;
          LOWORD(valuePtr) = -21846;
          LOWORD(valuePtr) = iAP2MsgGetDataAsU16(v10, buf);
          if (*(_DWORD *)buf)
          {
            char v54 = (os_log_s *)logObjectForModule_17();
            if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_6(a2);
            }
            goto LABEL_183;
          }

          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v85;
          goto LABEL_106;
        case 11:
          *(_DWORD *)buf = -1431655766;
          LOWORD(valuePtr) = -21846;
          LOWORD(valuePtr) = iAP2MsgGetDataAsU16(v10, buf);
          if (*(_DWORD *)buf)
          {
            unsigned __int16 v55 = (os_log_s *)logObjectForModule_17();
            if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_7(a2);
            }
            goto LABEL_183;
          }

          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v86;
          goto LABEL_106;
        case 12:
          *(_DWORD *)buf = -1431655766;
          LOWORD(valuePtr) = -21846;
          LOWORD(valuePtr) = iAP2MsgGetDataAsU16(v10, buf);
          if (*(_DWORD *)buf)
          {
            int v56 = (os_log_s *)logObjectForModule_17();
            if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_8(a2);
            }
            goto LABEL_183;
          }

          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v87;
          goto LABEL_106;
        case 13:
          *(_DWORD *)buf = -1431655766;
          LOBYTE(valuePtr) = -86;
          LOBYTE(valuePtr) = iAP2MsgGetDataAsBool(v10, (BOOL *)buf);
          if (*(_DWORD *)buf)
          {
            __int16 v57 = (os_log_s *)logObjectForModule_17();
            if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_9(a2);
            }
            goto LABEL_183;
          }

          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v88;
          goto LABEL_106;
        case 14:
          *(_DWORD *)buf = -1431655766;
          LOBYTE(valuePtr) = -86;
          LOBYTE(valuePtr) = iAP2MsgGetDataAsBool(v10, (BOOL *)buf);
          if (*(_DWORD *)buf)
          {
            int v58 = (os_log_s *)logObjectForModule_17();
            if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_10(a2);
            }
            goto LABEL_183;
          }

          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v89;
          goto LABEL_106;
        case 15:
          *(_DWORD *)buf = -1431655766;
          LOBYTE(valuePtr) = -86;
          LOBYTE(valuePtr) = iAP2MsgGetDataAsBool(v10, (BOOL *)buf);
          if (*(_DWORD *)buf)
          {
            uint64_t v59 = (os_log_s *)logObjectForModule_17();
            if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_11(a2);
            }
            goto LABEL_183;
          }

          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v90;
          goto LABEL_106;
        case 16:
          *(_DWORD *)buf = -1431655766;
          LOBYTE(valuePtr) = -86;
          LOBYTE(valuePtr) = iAP2MsgGetDataAsBool(v10, (BOOL *)buf);
          if (*(_DWORD *)buf)
          {
            CFStringRef v60 = (os_log_s *)logObjectForModule_17();
            if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_12(a2);
            }
            goto LABEL_183;
          }

          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v91;
          goto LABEL_106;
        case 17:
          *(_DWORD *)buf = -1431655766;
          unint64_t v18 = iAP2MsgGetFirstParam(a2, v10);
          if (v18)
          {
            NextParam = (unsigned __int16 *)v18;
            int v20 = 0;
            int v21 = 0;
            int v22 = 0;
            BOOL v23 = 0;
            __int16 v110 = 0;
            int valuePtr = 0;
            while (1)
            {
              int v24 = iAP2MsgGetParamID((uint64_t)NextParam);
              switch(v24)
              {
                case 2:
                  int DataAsU32 = iAP2MsgGetDataAsU32(NextParam, buf);
                  if (*(_DWORD *)buf)
                  {
                    __int16 v47 = (os_log_s *)logObjectForModule_17();
                    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
                      _statusUpdateHandler_cold_16(a2);
                    }
                    goto LABEL_183;
                  }

                  int valuePtr = DataAsU32;
                  int v20 = 1;
                  break;
                case 1:
                  __int16 DataAsU16 = iAP2MsgGetDataAsU16(NextParam, buf);
                  if (*(_DWORD *)buf)
                  {
                    int v48 = (os_log_s *)logObjectForModule_17();
                    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
                      _statusUpdateHandler_cold_15(a2);
                    }
                    goto LABEL_183;
                  }

                  __int16 v110 = DataAsU16;
                  int v21 = 1;
                  break;
                case 0:
                  int DataAsU8 = iAP2MsgGetDataAsU8(NextParam, buf);
                  if (*(_DWORD *)buf)
                  {
                    int v46 = (os_log_s *)logObjectForModule_17();
                    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
                      _statusUpdateHandler_cold_14(a2);
                    }
                    goto LABEL_183;
                  }

                  BOOL v23 = DataAsU8 != 0;
                  int v22 = 1;
                  break;
              }

              NextParam = iAP2MsgGetNextParam(a2, v10, NextParam);
              if (!NextParam)
              {
                if (((v22 | v21 | v20) & 1) != 0)
                {
                  __int16 v28 = CFDictionaryCreateMutable( kCFAllocatorDefault,  3LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
                  if ((v22 & 1) != 0)
                  {
                    BOOL v108 = v23;
                    CFNumberRef v29 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &v108);
                    CFDictionaryAddValue(v28, key, v29);
                    if (v29) {
                      CFRelease(v29);
                    }
                  }

                  if ((v21 & 1) != 0)
                  {
                    CFNumberRef v30 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &v110);
                    CFDictionaryAddValue(v28, v78, v30);
                    if (v30) {
                      CFRelease(v30);
                    }
                  }

                  if ((v20 & 1) != 0)
                  {
                    CFNumberRef v31 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
                    CFDictionaryAddValue(v28, v77, v31);
                    if (v31) {
                      CFRelease(v31);
                    }
                  }

                  CFDictionarySetValue(Mutable, v80, v28);
                  if (v28)
                  {
                    __int16 v32 = v28;
                    goto LABEL_78;
                  }
                }

                goto LABEL_79;
              }
            }
          }

          CFBooleanRef v61 = (os_log_s *)logObjectForModule_17();
          if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR)) {
            _statusUpdateHandler_cold_13(a2);
          }
          goto LABEL_183;
        case 18:
          *(_DWORD *)buf = -1431655766;
          LOWORD(valuePtr) = -21846;
          LOWORD(valuePtr) = iAP2MsgGetDataAsU16(v10, buf);
          if (*(_DWORD *)buf)
          {
            CFNumberRef v62 = (os_log_s *)logObjectForModule_17();
            if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_17(a2);
            }
            goto LABEL_183;
          }

          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v92;
          goto LABEL_106;
        case 19:
          *(_DWORD *)buf = -1431655766;
          uint64_t DataAsData = (char *)iAP2MsgGetDataAsData((uint64_t)v10, buf);
          unsigned int ParamValueLen = iAP2MsgGetParamValueLen(v10);
          if (*(_DWORD *)buf)
          {
            CFStringRef v63 = (os_log_s *)logObjectForModule_17();
            if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_18(a2);
            }
            goto LABEL_183;
          }

          unsigned int v35 = ParamValueLen;
          uint64_t v36 = ParamValueLen;
          uint64_t v37 = CFArrayCreateMutable(kCFAllocatorDefault, ParamValueLen, &kCFTypeArrayCallBacks);
          if (v35)
          {
            do
            {
              CFNumberRef v38 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, DataAsData);
              CFArrayAppendValue(v37, v38);
              if (v38) {
                CFRelease(v38);
              }
              ++DataAsData;
              --v36;
            }

            while (v36);
          }

          CFDictionarySetValue(Mutable, v93, v37);
          if (v37)
          {
            __int16 v32 = v37;
LABEL_78:
            CFRelease(v32);
          }

LABEL_79:
          id v6 = &startLogsNotificationObservers;
          goto LABEL_108;
        case 20:
          *(_DWORD *)buf = -1431655766;
          LOBYTE(valuePtr) = -86;
          LOBYTE(valuePtr) = iAP2MsgGetDataAsBool(v10, (BOOL *)buf);
          if (*(_DWORD *)buf)
          {
            CFStringRef v64 = (os_log_s *)logObjectForModule_17();
            if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_19(a2);
            }
            goto LABEL_183;
          }

          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v94;
          goto LABEL_106;
        case 21:
          *(_DWORD *)buf = -1431655766;
          int valuePtr = -1431655766;
          int valuePtr = iAP2MsgGetDataAsU32(v10, buf);
          if (*(_DWORD *)buf)
          {
            CFNumberRef v65 = (os_log_s *)logObjectForModule_17();
            if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_20(a2);
            }
            goto LABEL_183;
          }

          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v95;
          goto LABEL_106;
        case 22:
          *(_DWORD *)buf = -1431655766;
          int valuePtr = -1431655766;
          int valuePtr = iAP2MsgGetDataAsU32(v10, buf);
          if (*(_DWORD *)buf)
          {
            int v66 = (os_log_s *)logObjectForModule_17();
            if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_21(a2);
            }
            goto LABEL_183;
          }

          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v96;
          goto LABEL_106;
        case 23:
          *(_DWORD *)buf = -1431655766;
          int valuePtr = -1431655766;
          int valuePtr = iAP2MsgGetDataAsU32(v10, buf);
          if (*(_DWORD *)buf)
          {
            CFStringRef v67 = (os_log_s *)logObjectForModule_17();
            if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_22(a2);
            }
            goto LABEL_183;
          }

          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v97;
          goto LABEL_106;
        case 24:
          *(_DWORD *)buf = -1431655766;
          int valuePtr = -1431655766;
          int valuePtr = iAP2MsgGetDataAsU32(v10, buf);
          if (*(_DWORD *)buf)
          {
            CFNumberRef v68 = (os_log_s *)logObjectForModule_17();
            if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_23(a2);
            }
            goto LABEL_183;
          }

          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v98;
          goto LABEL_106;
        case 25:
          *(_DWORD *)buf = -1431655766;
          LOBYTE(valuePtr) = -86;
          LOBYTE(valuePtr) = iAP2MsgGetDataAsBool(v10, (BOOL *)buf);
          if (*(_DWORD *)buf)
          {
            unsigned int v69 = (os_log_s *)logObjectForModule_17();
            if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_24(a2);
            }
            goto LABEL_183;
          }

          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v99;
          goto LABEL_106;
        case 26:
          *(_DWORD *)buf = -1431655766;
          DataAsString = iAP2MsgGetDataAsString(v10, (BOOL *)buf);
          if (*(_DWORD *)buf)
          {
            int v70 = (os_log_s *)logObjectForModule_17();
            if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_25(a2);
            }
            goto LABEL_183;
          }

          BOOL v15 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)DataAsString, 0x8000100u);
          id v16 = Mutable;
          int v17 = v100;
          goto LABEL_106;
        case 27:
          *(_DWORD *)buf = -1431655766;
          __int16 v40 = iAP2MsgGetDataAsString(v10, (BOOL *)buf);
          if (*(_DWORD *)buf)
          {
            unint64_t v71 = (os_log_s *)logObjectForModule_17();
            if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_26(a2);
            }
            goto LABEL_183;
          }

          BOOL v15 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v40, 0x8000100u);
          id v16 = Mutable;
          int v17 = v101;
          goto LABEL_106;
        case 28:
          *(_DWORD *)buf = -1431655766;
          int valuePtr = -1431655766;
          int valuePtr = iAP2MsgGetDataAsU8(v10, buf);
          if (*(_DWORD *)buf)
          {
            __int16 v72 = (os_log_s *)logObjectForModule_17();
            if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_27(a2);
            }
            goto LABEL_183;
          }

          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCharType, &valuePtr);
          id v16 = Mutable;
          int v17 = v102;
          goto LABEL_106;
        case 30:
          *(_DWORD *)buf = -1431655766;
          LOWORD(valuePtr) = -21846;
          LOWORD(valuePtr) = iAP2MsgGetDataAsU16(v10, buf);
          if (*(_DWORD *)buf)
          {
            unsigned int v73 = (os_log_s *)logObjectForModule_17();
            if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_28(a2);
            }
            goto LABEL_183;
          }

          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v103;
          goto LABEL_106;
        case 31:
          *(_DWORD *)buf = -1431655766;
          LOWORD(valuePtr) = -21846;
          LOWORD(valuePtr) = iAP2MsgGetDataAsU16(v10, buf);
          if (*(_DWORD *)buf)
          {
            __int16 v74 = (os_log_s *)logObjectForModule_17();
            if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_29(a2);
            }
            goto LABEL_183;
          }

          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v104;
          goto LABEL_106;
        case 32:
          *(_DWORD *)buf = -1431655766;
          LOWORD(valuePtr) = -21846;
          LOWORD(valuePtr) = iAP2MsgGetDataAsU16(v10, buf);
          if (*(_DWORD *)buf)
          {
            CFStringRef v75 = (os_log_s *)logObjectForModule_17();
            if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_30(a2);
            }
            goto LABEL_183;
          }

          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v105;
          goto LABEL_106;
        case 33:
          *(_DWORD *)buf = -1431655766;
          LOWORD(valuePtr) = -21846;
          LOWORD(valuePtr) = iAP2MsgGetDataAsU16(v10, buf);
          if (*(_DWORD *)buf)
          {
            __int16 v76 = (os_log_s *)logObjectForModule_17();
            if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR)) {
              _statusUpdateHandler_cold_31(a2);
            }
            goto LABEL_183;
          }

          BOOL v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
          id v16 = Mutable;
          int v17 = v106;
LABEL_106:
          CFDictionarySetValue(v16, v17, v15);
          if (v15) {
            CFRelease(v15);
          }
LABEL_108:
          BOOL v10 = iAP2MsgGetNextParam(a2, 0LL, v10);
          if (!v10) {
            goto LABEL_117;
          }
          break;
        default:
          uint64_t v41 = v6[353];
          int v42 = gNumLogObjects;
          if (v41 && gNumLogObjects >= 41)
          {
            __int16 v43 = *(os_log_s **)(v41 + 320);
          }

          else
          {
            __int16 v43 = (os_log_s *)&_os_log_default;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134218240;
              *(void *)uint64_t v112 = v41;
              *(_WORD *)&v112[8] = 1024;
              int v113 = v42;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Make sure you have called init_logging()!\ngLogObjects: %p, gNumLogObjects: %d",  buf,  0x12u);
            }
          }

          if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
          {
            int MsgID = iAP2MsgGetMsgID(a2);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)uint64_t v112 = ParamID;
            *(_WORD *)&v112[4] = 1024;
            *(_DWORD *)&v112[6] = MsgID;
            _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_INFO,  "Unknown Param ID: %d for Msg ID: 0x%04X - ignoring param",  buf,  0xEu);
          }

          goto LABEL_108;
      }
    }
  }

      if (gLogObjects && gNumLogObjects >= 57)
      {
        __int16 v43 = *(os_log_s **)(gLogObjects + 448);
      }

      else
      {
        __int16 v43 = (os_log_s *)&_os_log_default;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          platform_connectionInfo_configStreamCategoryListReady_cold_1();
        }
      }

      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
      {
        int v44 = *((void *)*v55 + 2);
        *(_DWORD *)buf = 138412802;
        *(void *)CFBooleanRef v61 = v44;
        *(_WORD *)&v61[8] = 2112;
        CFNumberRef v62 = cf;
        *(_WORD *)CFStringRef v63 = 2112;
        *(void *)&v63[2] = theDict;
        _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_INFO,  "configStream processIncomingData for endpoint: %@, call configStreamPropertyResponse: clientUID %@, categories %@",  buf,  0x20u);
      }

      platform_connectionInfo_configStreamCategoriesResponse( (uint64_t)cf,  *((void *)v5 + 2),  *v51,  (uint64_t)theDict,  *((_DWORD *)BytePtr + 2) == 0);
      uint64_t v1 = v52;
      if (theDict) {
        CFRelease(theDict);
      }
      if (CFArrayGetCount(v55[4]) >= 1) {
        _configStream_endpoint_sendNextClientRequest(v55);
      }
      int v42 = (CFDataRef)cf;
LABEL_91:
      CFRelease(v42);
      goto LABEL_101;
    }

    if (gLogObjects && gNumLogObjects >= 57)
    {
      CFNumberRef v31 = *(os_log_s **)(gLogObjects + 448);
    }

    else
    {
      CFNumberRef v31 = (os_log_s *)&_os_log_default;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        platform_connectionInfo_configStreamCategoryListReady_cold_1();
      }
    }

    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_101;
    }
    goto LABEL_99;
  }

  if (!*(_WORD *)BytePtr)
  {
    *(_BYTE *)(v3 + 16) = 1;
    platform_connectionInfo_configStreamCategoryListReady(*((void *)v5 + 2), *v6);
    goto LABEL_101;
  }

  if (gLogObjects && gNumLogObjects >= 57)
  {
    CFNumberRef v31 = *(os_log_s **)(gLogObjects + 448);
  }

  else
  {
    CFNumberRef v31 = (os_log_s *)&_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      platform_connectionInfo_configStreamCategoryListReady_cold_1();
    }
  }

  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v32 = *((_DWORD *)v5 + 6);
    uint64_t v33 = *(unsigned __int16 *)BytePtr;
    __int16 v34 = *((unsigned __int16 *)BytePtr + 1);
    unsigned int v35 = *((unsigned __int16 *)BytePtr + 2);
    uint64_t v36 = *((unsigned __int16 *)BytePtr + 3);
    *(_DWORD *)buf = 67110144;
    *(_DWORD *)CFBooleanRef v61 = v32;
    *(_WORD *)&v61[4] = 1024;
    *(_DWORD *)&v61[6] = v33;
    LOWORD(v62) = 1024;
    *(_DWORD *)((char *)&v62 + 2) = v34;
    HIWORD(v62) = 1024;
    *(_DWORD *)CFStringRef v63 = v35;
    *(_WORD *)&v63[4] = 1024;
    *(_DWORD *)&v63[6] = v36;
    uint64_t v37 = "configStream processIncomingData: %{coreacc:ACCEndpoint_TransportType_t}d, Unknown messageID %x, categoryID 0x"
          "%x, propertyID %u, paramLen %u";
LABEL_100:
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, v37, buf, 0x20u);
  }